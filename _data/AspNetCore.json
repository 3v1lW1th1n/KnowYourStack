{"Data":{"Blog":{"FeedItems":[{"Title":"ASP.NET Core 2.2.0-preview2 now available","PublishedOn":"2018-09-12T16:00:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we’re very happy to announce that the second preview of the next minor release of ASP.NET Core and .NET Core is now available for you to try out. We’ve been working hard on this release over the...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/09/12/asp-net-core-2-2-0-preview2-now-available/","RawContent":null},{"Title":"How to get started with Azure and .NET","PublishedOn":"2018-09-04T19:05:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Azure is a big cloud with lots of services, and for even the most experienced user it can be intimidating to know which service will best meet your needs. This blog post is intended to provide a short...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/09/04/how-to-get-started-with-azure-and-net/","RawContent":null},{"Title":"Library Manager Released in 15.8","PublishedOn":"2018-08-31T07:47:55+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Microsoft Library Manager (LibMan) is now available in the general release of Visual Studio 2017 as of v15.8. LibMan first previewed earlier this year, and now, after a much-anticipated wait, LibMan...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/31/library-manager-release-in-15-8/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview1: Endpoint Routing","PublishedOn":"2018-08-27T21:25:25+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Endpoint Routing in 2.2 What is it? We&#8217;re making a big investment in routing starting in 2.2 to make it interoperate more seamlessly with middleware. For 2.2 this will start with us making a few...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/27/asp-net-core-2-2-0-preview1-endpoint-routing/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview1: SignalR Java Client","PublishedOn":"2018-08-23T20:41:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was authored by Mikael Mengistu. In ASP.NET Core 2.2 we are introducing a Java Client for SignalR. The first preview of this new client is available now. This client supports connecting to...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/23/asp-net-core-2-2-0-preview1-signalr-java-client/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview1: Open API Analyzers & Conventions","PublishedOn":"2018-08-23T18:18:16+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"What is it? Open API (alternatively known as Swagger) is a language-agnostic specification for describing REST APIs. The Open API ecosystem has tools that allows for discovering, testing and producing...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/23/asp-net-core-2-20-preview1-open-api-analyzers-conventions/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview1: Healthchecks","PublishedOn":"2018-08-23T05:28:22+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"What is it? We&#8217;re adding a health checks service and middleware in 2.2.0 to make it easy to use ASP.NET Core in environments that require health checks &#8211; such as Kubernetes. The new...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/22/asp-net-core-2-2-0-preview1-healthcheck/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview1: HTTP/2 in Kestrel","PublishedOn":"2018-08-23T00:26:16+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"As part of the 2.2.0-preview1 release, we’ve added support for HTTP/2 in Kestrel. What is HTTP/2? HTTP/2 is a major revision of the HTTP protocol. Some of the notable features of HTTP/2 are support...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/22/asp-net-core-2-2-0-preview1-http-2-in-kestrel/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview1 now available","PublishedOn":"2018-08-22T17:57:25+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today we’re very happy to announce that the first preview of the next minor release of ASP.NET Core and .NET Core is now available for you to try out. We’ve been working hard on this release over the...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/22/asp-net-core-2-2-0-preview1-now-available/","RawContent":null},{"Title":"LibMan CLI Released","PublishedOn":"2018-08-22T15:17:34+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"The Command Line Interface (CLI) is now available for Microsoft Library Manager (LibMan) and can be downloaded via NuGet. Look for Microsoft.Web.LibraryManager.Cli The LibMan CLI is cross-platform, so...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/22/libman-cli-released/","RawContent":null}],"ResultType":"Feed"},"Home-Issues":{"Issues":[{"Id":"360409773","IsPullRequest":false,"CreatedAt":"2018-09-14T18:31:28","Actor":"livarcocc","Number":"3537","RawContent":null,"Title":"SuppressStatusMessages(true) \"block\" ASP.NET Core Web App (Model-View-Controller) start","State":"open","Body":"_From @BroderPeters on September 14, 2018 16:34_\n\n## Steps to reproduce\r\n\r\n1. Run `dotnet new mvc`.\r\n2. Add `.SuppressStatusMessages(true)` after `WebHost.CreateDefaultBuilder(args)` in Program.cs.\r\n3. Run `dotnet run`.\r\n\r\n## Expected  behavior\r\n\r\nDemo MVC project start without StatusMessage.\r\n\r\n## Actual behavior\r\n\r\n(First sentence says: The start settings from {filepath} are beeing used)\r\n```\r\nDie Starteinstellungen von C:\\Users\\user\\Desktop\\testweb\\Properties\\launchSettings.json werden verwendet.\r\ninfo: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[0]\r\n      User profile is available. Using 'C:\\Users\\user\\AppData\\Local\\ASP.NET\\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.\r\n```\r\nAfter this output nothing else happens.\r\n\r\nIf I open and start the project in Visual Studio, everthing works fine.\r\nIf I set `.SuppressStatusMessages(false)` `dotnet run` works as expected.\r\n\r\n## Environment data\r\n```\r\nPS C:\\Users\\user\\Desktop\\testweb> dotnet --info\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   2.1.402\r\n Commit:    3599f217f4\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.402\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.4\r\n  Commit:  85255dde3e\r\n\r\n.NET Core SDKs installed:\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\n\n_Copied from original issue: dotnet/cli#10005_","Url":"https://github.com/aspnet/Home/issues/3537","RelatedDescription":"Open issue \"SuppressStatusMessages(true) \"block\" ASP.NET Core Web App (Model-View-Controller) start\" (#3537)"},{"Id":"360236251","IsPullRequest":false,"CreatedAt":"2018-09-14T09:53:43","Actor":"oerodriguezn","Number":"3536","RawContent":null,"Title":"Upgrade Microsoft.AspNetCore.DataProtection.Redis to use Redis.StackExchange 2.0","State":"open","Body":"Please update Microsoft.AspNetCore.DataProtection.Redis to use Redis.StackExchange 2.0 where there is no more a StackExchange.Redis.StrongName. \r\n\r\nhttps://stackexchange.github.io/StackExchange.Redis/ReleaseNotes","Url":"https://github.com/aspnet/Home/issues/3536","RelatedDescription":"Open issue \"Upgrade Microsoft.AspNetCore.DataProtection.Redis to use Redis.StackExchange 2.0\" (#3536)"},{"Id":"360158447","IsPullRequest":false,"CreatedAt":"2018-09-14T05:09:15","Actor":"muzzammilhussain","Number":"3535","RawContent":null,"Title":"DateTime.Now.UTC Bug","State":"open","Body":"On Windows Based Machine , When i am using DateTime.Now.UTC it gives me UTC time as soon as I use this on Ubuntu Machine it gives Ubuntu Time instead of UTC time.\r\n\r\nOn ubuntu the behavior of DateTime.Now= DateTime.UtcNow\r\n\r\nInt32 unixTimestamp = (Int32)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;\r\n","Url":"https://github.com/aspnet/Home/issues/3535","RelatedDescription":"Open issue \"DateTime.Now.UTC Bug\" (#3535)"},{"Id":"360101054","IsPullRequest":false,"CreatedAt":"2018-09-13T23:21:16","Actor":"aspnet-hello","Number":"3534","RawContent":null,"Title":"Test failure: Factory_CleanupCycle_DisposesEligibleHandler","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=553687&buildTypeId=Releases_22xPublic_UbuntuUniverse) occasionally with the following error:\r\n```\r\nCleanup entry disposable\r\nExpected: True\r\nActual:   False\r\n   at Microsoft.Extensions.Http.DefaultHttpClientFactoryTest.Factory_CleanupCycle_DisposesEligibleHandler() in /_/test/Microsoft.Extensions.Http.Test/DefaultHttpClientFactoryTest.cs:line 382\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.2.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/Home/issues/3534","RelatedDescription":"Open issue \"Test failure: Factory_CleanupCycle_DisposesEligibleHandler\" (#3534)"},{"Id":"359391258","IsPullRequest":false,"CreatedAt":"2018-09-13T19:07:09","Actor":"ld0614","Number":"3531","RawContent":null,"Title":"Azure App Service fails to load .net Core application after upgrade to 2.1.4","State":"closed","Body":"After upgrading the .net Core nuget packages last night from 2.1.3 to 2.1.4 to mitigate the published security issues, I attempted to push these to an Azure App Service.  \r\n\r\nHowever I get the following error:\r\n![image](https://user-images.githubusercontent.com/20439950/45415325-51868780-b675-11e8-89c4-e574bcbeed7e.png)\r\n\r\ndotnet --info of Azure App Service\r\n```\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x86\r\n Base Path:   D:\\Program Files (x86)\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  1.1.8 [D:\\Program Files (x86)\\dotnet\\sdk]\r\n  1.1.10 [D:\\Program Files (x86)\\dotnet\\sdk]\r\n  2.1.101 [D:\\Program Files (x86)\\dotnet\\sdk]\r\n  2.1.301 [D:\\Program Files (x86)\\dotnet\\sdk]\r\n  2.1.401 [D:\\Program Files (x86)\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.10 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.7 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [D:\\Program Files (x86)\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\ndotnet --info of development machine (where it works)\r\n```\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.402\r\n Commit:    3599f217f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.402\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.4\r\n  Commit:  85255dde3e\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nThe packaged deployed is using the standard Azure DevOps (VSTS) Build and publish tasks.  My guess is that Azure App Service requires the latest patches to support the updated nuget packages, is this correct?\r\n\r\nIs it possible to use a dedicated version of .net core on an Azure app service by using portable binary compliation?\r\n\r\nIs there a clear guide on application lifecycles in respect to .net core packages and versions?  I've had a look but wasn't able to find anything describing when nuget packages should be updated vs the runtime they run on etc.  \r\n","Url":"https://github.com/aspnet/Home/issues/3531","RelatedDescription":"Closed issue \"Azure App Service fails to load .net Core application after upgrade to 2.1.4\" (#3531)"},{"Id":"359469476","IsPullRequest":false,"CreatedAt":"2018-09-12T16:46:29","Actor":"lblima","Number":"3532","RawContent":null,"Title":"Scaffold identity into an MVC project with authorization using SDK 2.1.4 fail","State":"closed","Body":"Hi, after install SDK 2.1.4 I cannot run scafolding identity (instructions here: https://docs.microsoft.com/en-us/aspnet/core/security/authentication/scaffold-identity?view=aspnetcore-2.1&tabs=visual-studio)\r\n\r\nAfter run: dotnet tool install -g dotnet-aspnet-codegenerator\r\n\r\nAnd: \r\ndotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design\r\ndotnet restore\r\n\r\nI've tried to run this: \r\n\r\ndotnet aspnet-codegenerator identity -dc MyWeb.Data.ApplicationDbContext --files \"Account.Register;Account.Login;Account.Logout\"\r\n\r\nBut it doesn't work, I got this message:\r\n\r\nIt was not possible to find any compatible framework version\r\nThe specified framework 'Microsoft.NETCore.App', version '2.1.4' was not found.\r\n  - Check application dependencies and target a framework version installed at:\r\n      C:\\Program Files\\dotnet\r\n  - Installing .NET Core prerequisites might help resolve this problem:\r\n      http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n  - The .NET Core framework and SDK can be installed from:\r\n      https://aka.ms/dotnet-download\r\n  - The following versions are installed:\r\n      1.0.5 at [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n      1.1.2 at [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n      2.0.9 at [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n      2.1.3 at [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n----------------------------------------\r\n\r\n**dotnet --info:**\r\n\r\nSDK do .NET Core (refletindo qualquer global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nAmbiente de tempo de execução:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download","Url":"https://github.com/aspnet/Home/issues/3532","RelatedDescription":"Closed issue \"Scaffold identity into an MVC project with authorization using SDK 2.1.4 fail\" (#3532)"},{"Id":"359556933","IsPullRequest":false,"CreatedAt":"2018-09-12T16:45:14","Actor":"karelz","Number":"3533","RawContent":null,"Title":"IFormFile is always null when using [ApiController] Attribute in .Net Core 2.1","State":"closed","Body":"_From @skamal-dev on September 12, 2018 13:36_\n\nNot sure why this has not been documented or its a bug but whenever we use ApiController attribute in .Net Core 2.1 version, and use the api method signature as ;\r\n```c#\r\n[Route(\"api/[controller]\")]\r\n [ApiController]\r\n public class UploadFileController : ControllerBase\r\n {\r\n    [HttpPost]\r\n    public async Task<IActionResult> Post([FromForm] IFormFile file)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nWhenever we send request from client the parameter \"file\" is always null, though the Request.Form.Files do contain the parameter details.\r\n\r\nMoment I removed [ApiControlller] and send request from the client, I can see the \"file\" parameter having values.\n\n_Copied from original issue: dotnet/corefx#32256_","Url":"https://github.com/aspnet/Home/issues/3533","RelatedDescription":"Closed issue \"IFormFile is always null when using [ApiController] Attribute in .Net Core 2.1\" (#3533)"},{"Id":"359165121","IsPullRequest":false,"CreatedAt":"2018-09-11T23:21:26","Actor":"aspnet-hello","Number":"3530","RawContent":null,"Title":"Test failure: CanValidateMixDataAnnotations","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=550828&buildTypeId=XPlat_Mac_MacUniverseCoreCLR) occasionally with the following error:\r\n```\r\nExpected: DataAnnotation validation failed for members Dep1, Dep2 with the error 'Dep1 != Dep2'.\r\nDataAnnotation validation failed for members Required with the error 'The Required field is required.'.\r\nDataAnnotation validation failed for members StringLength with the error 'Too long.'.\r\nDataAnnotation validation failed for members IntRange with the error 'Out of range.'.\r\nDataAnnotation validation failed for members Custom with the error 'The field Custom is invalid.'. - I don't want to go to nowhere!\r\nExpected: True\r\nActual:   False\r\n   at Microsoft.Extensions.Options.Tests.OptionsBuilderTest.ValidateFailure[TOptions](OptionsValidationException e, String name, String[] errors) in /_/test/Microsoft.Extensions.Options.Test/OptionsBuilderTest.cs:line 399\r\n   at Microsoft.Extensions.Options.Tests.OptionsBuilderTest.CanValidateMixDataAnnotations() in /_/test/Microsoft.Extensions.Options.Test/OptionsBuilderTest.cs:line 616\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/Home/issues/3530","RelatedDescription":"Closed issue \"Test failure: CanValidateMixDataAnnotations\" (#3530)"},{"Id":"359109489","IsPullRequest":false,"CreatedAt":"2018-09-11T15:49:51","Actor":"jimmy3912msncom","Number":"3529","RawContent":null,"Title":"EnableRewind for HttpResponse similar to HttpRequest","State":"open","Body":"   1. Description of the problem: EnableRewind for HttpResponse similar to HttpRequest\r\nThis is more of a feature request than anything. I have need to log the response body but this requires the need for a rewindable response stream. HttpRequest has the extension method defined: BufferingHelper.EnableRewind for HttpRequest. The ask is for a similar extension method for HttpResponse so we don't have to swap out the streams manually ourselves.\r\n   2. The version of `Microsoft.AspNetCore.All`: 2.1.2\r\n   3. The output of `dotnet --info`\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.302\r\n Commit:    9048955601\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.302\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.2\r\n  Commit:  811c3ce6c0\r\n\r\n.NET Core SDKs installed:\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download","Url":"https://github.com/aspnet/Home/issues/3529","RelatedDescription":"Open issue \"EnableRewind for HttpResponse similar to HttpRequest\" (#3529)"},{"Id":"359079542","IsPullRequest":false,"CreatedAt":"2018-09-11T14:42:00","Actor":"SolalPirelli","Number":"3528","RawContent":null,"Title":"IFormFileCollection has no documentation","State":"open","Body":"There is no XML doc for `IFormFileCollection`, so I had to look up the source code to check whether the indexer returns `null` or throws an exception when the file doesn't exist. Not a huge deal, just a small annoyance. :-)","Url":"https://github.com/aspnet/Home/issues/3528","RelatedDescription":"Open issue \"IFormFileCollection has no documentation\" (#3528)"},{"Id":"359026507","IsPullRequest":false,"CreatedAt":"2018-09-11T12:34:31","Actor":"antonKrouglov","Number":"3527","RawContent":null,"Title":"InMemoryDirectoryInfo does not work as expected","State":"open","Body":"Microsoft.Extensions.FileSystemGlobbing\r\n\r\nSteps to reproduce (file C:\\pagefile.sys exists):\r\n\r\n```c#\r\n            var d = new InMemoryDirectoryInfo(@\"C:\\\", new[] { @\"pagefile.sys\" });\r\n            var l = d.EnumerateFileSystemInfos().ToList(); //returns empty list\r\n```\r\n\r\nThus using \r\n\r\n```c#\r\npublic static PatternMatchingResult Match(this Matcher matcher, string rootDir, IEnumerable<string> files)\r\n```\r\n\r\ndoes not work as well - the result is always empty.","Url":"https://github.com/aspnet/Home/issues/3527","RelatedDescription":"Open issue \"InMemoryDirectoryInfo does not work as expected\" (#3527)"},{"Id":"358933093","IsPullRequest":false,"CreatedAt":"2018-09-11T08:06:30","Actor":"topguss","Number":"3526","RawContent":null,"Title":"Problem when use Cookie and Token base authentication in same app in asp.net core app 2.1","State":"open","Body":"I have a case when I need to use 2 type of auth in one Web app: for MVC part of app - Cookie base auth, and for Angular part JWT Token base auth. I would like to use configuration approach over annotation.\r\n\r\nIn the Setup.cs I would like to configure: all controlles methods that have /api/* in the URL path to use JWT token base auth and all controlles methods that haven't /api/* to use Cookie.\r\n\r\nTo implement this, I use two policies in the combination with custom AuthorizeFilter:\r\n\r\n```\r\nvar jwtPolicy = new AuthorizationPolicyBuilder(JwtBearerDefaults.AuthenticationScheme)\r\n                        .RequireAuthenticatedUser()\r\n                        .Build();\r\nvar cookiePolicy = new AuthorizationPolicyBuilder()\r\n                        .RequireAuthenticatedUser()\r\n                        .Build();\r\n\r\noptions.Filters.Add(new CustomAuthorizeFilter(jwtPolicy, applyOnPath: \"/api\"));\r\noptions.Filters.Add(new CustomAuthorizeFilter(cookiePolicy, notApplyOnPath: \"/api\"));\r\n```\r\n\r\nAnde here is implementation of CustomAuthorizeFilter:\r\n```\r\npublic class CustomAuthorizeFilter : AuthorizeFilter\r\n{\r\n    private string _applyOnPath;\r\n    private string _notApplyOnPath;\r\n\r\n    public CustomAuthorizeFilter(AuthorizationPolicy policy, string applyOnPath = null, string notApplyOnPath = null) : base(policy)\r\n    {\r\n        _applyOnPath = applyOnPath;\r\n        _notApplyOnPath = notApplyOnPath;\r\n    }\r\n\r\n    public override Task OnAuthorizationAsync(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext context)\r\n    {\r\n        if (_applyOnPath != null && context.HttpContext.Request.Path.StartsWithSegments(_applyOnPath) == true)\r\n            return base.OnAuthorizationAsync(context);\r\n\r\n        else if (_notApplyOnPath != null && context.HttpContext.Request.Path.StartsWithSegments(_notApplyOnPath) == false)\r\n            return base.OnAuthorizationAsync(context);\r\n\r\n        else //Otherwise apply this policy\r\n            return Task.FromResult(0);\r\n    }\r\n}\r\n```\r\nIt was work fine in the .netCore 2.0, but after upgrade to .netCore 2.1.* it stop working...\r\n\r\nNow, (in .netCore 2.1.*) for this code \r\n- API controllers (has \"/api\" in path) always return data, even if user is not logged in. \r\n- MVC controllers (has not \"/api\" in path), I always get forbidden response even if user logged in.","Url":"https://github.com/aspnet/Home/issues/3526","RelatedDescription":"Open issue \"Problem when use Cookie and Token base authentication in same app in asp.net core app 2.1\" (#3526)"},{"Id":"358802323","IsPullRequest":false,"CreatedAt":"2018-09-10T21:30:26","Actor":"kenlyon","Number":"3525","RawContent":null,"Title":"Multiple Access-Control-Allow-Origin headers when using CORS in IIS","State":"open","Body":"I have an `ASP.NET Core` project in which I use _CORS_. I am targeting `.NET Core 2.1`. I believe my settings are fairly standard, but I'll log them here to give context.\r\n\r\nFirstly, I add some CORS policies at the start of the `ConfigureServices` method:\r\n```\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    services.AddCors(options =>\r\n    {\r\n        options.AddPolicy(\r\n            \"AllowEverything\",\r\n            builder => builder\r\n                .AllowAnyOrigin()\r\n                .AllowAnyHeader()\r\n                .AllowAnyMethod());\r\n        options.AddPolicy(\r\n            \"AllowLocalhost\",\r\n            builder => builder\r\n                .WithOrigins(\"http://localhost\")\r\n                .AllowAnyHeader()\r\n                .AllowAnyMethod()\r\n                .AllowCredentials());\r\n    });\r\n    ...\r\n}\r\n```\r\n\r\nThen I specify which policy I am using at the end of the `Configure` method:\r\n```\r\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env, IOptions<WorkflowServerSettings> settings, IApplicationLifetime applicationLifetime)\r\n{\r\n   ...\r\n    app.UseCors(\"AllowLocalhost\");\r\n}\r\n```\r\n\r\nBy the way, this is not a final implementation, so please try to resist the urge to review this too much. At least I don't use \"AllowEverything\" by default. :)\r\n\r\nWhen I run this via IIS Express, it works fine but I have problems when I run it in IIS. (after publishing via File System.)\r\n\r\nThe problem is that a parent application has a web.config file that adds the \"Access-Control-Allow-Origin\" header. Unfortunately, I end up with two \"Access-Control-Allow-Origin\" headers in my response, and the browser does not like it.\r\n\r\nIs this a bug? Should `ASP.NET Core` be replacing the existing header, or at least combining with it? I believe multiple \"Access-Control-Allow-Origin\" headers is an error, so i think it needs to be more robust.\r\n\r\nI can manually fix it in IIS after the deployment but each publish re-creates the web.config and I don't know of a clean way to fix it. I could probably remove it from the context, but that seems more like a workaround than a proper implementation.","Url":"https://github.com/aspnet/Home/issues/3525","RelatedDescription":"Open issue \"Multiple Access-Control-Allow-Origin headers when using CORS in IIS\" (#3525)"},{"Id":"358766061","IsPullRequest":false,"CreatedAt":"2018-09-10T19:43:56","Actor":"bitbonk","Number":"3524","RawContent":null,"Title":"Why are all ASP.NET Core assemblies strong named?","State":"open","Body":"I think I understand why .NET Core assemblies have strong names, as it is explained [here](\r\nhttps://github.com/dotnet/corefx/blob/master/Documentation/project-docs/strong-name-signing.md).\r\n\r\nBut I don’t see that these reasons also apply to ASP.NET Core. So why are the assemblies of .NET Core strongly named too?","Url":"https://github.com/aspnet/Home/issues/3524","RelatedDescription":"Open issue \"Why are all ASP.NET Core assemblies strong named?\" (#3524)"},{"Id":"357842784","IsPullRequest":false,"CreatedAt":"2018-09-10T18:10:04","Actor":"TrieBr","Number":"3513","RawContent":null,"Title":"2.2 Adding ProducesResponseType overwrites default HTTP OK response.","State":"closed","Body":"I just upgraded my ASP 2.1 project to 2.2.0-preview. I upgraded solely on \"API Controller conventions\" outlined in the [2.2 Roadmap](https://github.com/aspnet/Announcements/issues/307) to ease documentation generation. \r\n\r\nWhen I have an action on a controller without a `ProducesRespponseType` attribute, a default HTTP status 200 is output in ApiExplorer inferring from the `ActionResult` type.\r\n\r\n```\r\n        [HttpPost(\"register\")]\r\n        [AllowAnonymous]\r\n        public async Task<ActionResult<ApiResponse<ApiResonseNoData>>> Register([FromBody] RegisterViewModel viewModel)\r\n        {\r\n            ValidateModel();\r\n            var u = new User { UserName = viewModel.Username, Email = viewModel.Username, FirstName = \"\", LastName = \"\" };\r\n            var create = await _userManager.CreateAsync(u, viewModel.Password);\r\n            return ApiResponse(\"Success\");\r\n        }\r\n```\r\n\r\nBy inspecting an instance of ApiExplorer (`IApiDescriptionGroupCollectionProvider`) In Visual Studio, I can see there is a single entry in SupportedResponseTypes for the HTTP 200.\r\n\r\nHowever, When I add an HTTP 422 status like the following:\r\n\r\n```\r\n    [HttpPost(\"register\")]\r\n        [AllowAnonymous]\r\n        [ProducesResponseType(typeof(ApiResponse<ValidationMessageSet>), (int)HttpStatusCode.UnprocessableEntity)]\r\n        public async Task<ActionResult<ApiResponse<ApiResonseNoData>>> Register([FromBody] RegisterViewModel viewModel)\r\n        {\r\n            ValidateModel();\r\n            var u = new User { UserName = viewModel.Username, Email = viewModel.Username, FirstName = \"\", LastName = \"\" };\r\n            var create = await _userManager.CreateAsync(u, viewModel.Password);\r\n            return ApiResponse(\"Success\");\r\n        }\r\n\r\n```\r\nSuddenly this becomes the only ResoponseType in ApiExplorer. If the intention is to get rid of \"Attribute Soup\", any `ProducesRespponseType` attributes added to an action should be added **in addition** to the default HTTP 200 response based on the `ActionResult` in my opinion. Eg If I add a `ProducesResponseType` of `HttpStatusCode.UnprocessableEntity`, then Api Explorer should have a 422 response and a 200 response.\r\n\r\nOn an semi-related note, since ApiControllers Provide [Automatic 400 responses](https://docs.microsoft.com/en-us/aspnet/core/web-api/index?view=aspnetcore-2.1#automatic-http-400-responses) for validation errors, it would also make sense for ASP Core to automatically provide this response in one of the valid response types. With the above bug (feature?), I now have to add a HTTP 400 (or 422 in my case) response for validation errors and a HTTP 200 response which again results in Attribute Soup. Maybe I'm doing something wrong or misunderstanding something?\r\n\r\n> \r\n> .NET Core SDK (reflecting any global.json):\r\n>  Version:   2.2.100-preview1-009349\r\n>  Commit:    3f45457548\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     Windows\r\n>  OS Version:  10.0.17134\r\n>  OS Platform: Windows\r\n>  RID:         win10-x64\r\n>  Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100-preview1-009349\\\r\n> \r\n> Host (useful for support):\r\n>   Version: 2.2.0-preview-26820-02\r\n>   Commit:  b4726350b3\r\n> \r\n> .NET Core SDKs installed:\r\n>   2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n>   2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n>   2.2.100-preview1-009349 [C:\\Program Files\\dotnet\\sdk]\r\n> \r\n> .NET Core runtimes installed:\r\n>   Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n>   Microsoft.AspNetCore.All 2.2.0-preview1-35029 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n>   Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 2.2.0-preview1-35029 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 2.2.0-preview-26820-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n","Url":"https://github.com/aspnet/Home/issues/3513","RelatedDescription":"Closed issue \"2.2 Adding ProducesResponseType overwrites default HTTP OK response.\" (#3513)"},{"Id":"358083540","IsPullRequest":false,"CreatedAt":"2018-09-10T17:53:52","Actor":"karelz","Number":"3518","RawContent":null,"Title":"Unable to use client certificate authentication with WebApplicationFactory","State":"closed","Body":"_From @vdachev on September 7, 2018 13:1_\n\nHello,\r\n\r\nI'm trying to set up an integration test for a web application that uses certificate authentication. I use the following code fragment to instantiate the `HttpClient`:\r\n```csharp\r\nvar factory = new WebApplicationFactory<Startup>();\r\nHttpClient client = factory.CreateClient();\r\n```\r\nHowever, I want to pass a client certificate when requesting a resource. The problem is, the client certificate collection is stored in the `HttpClientHandler` but I could not find a way to provide the `WebApplicationFactory` constructor with an instance to the `HttpClientHandler`, neither I found a way to access it through the `HttpClient` or `WebApplicationFactory` instances.\r\n\r\nCould you please hint me of a way to achieve that?\n\n_Copied from original issue: dotnet/corefx#32159_","Url":"https://github.com/aspnet/Home/issues/3518","RelatedDescription":"Closed issue \"Unable to use client certificate authentication with WebApplicationFactory\" (#3518)"},{"Id":"358634951","IsPullRequest":false,"CreatedAt":"2018-09-10T13:56:23","Actor":"tobyash86","Number":"3523","RawContent":null,"Title":"ADDITIONAL_DEPS environment variable has stopped working with ASP.NET Core 2.1","State":"open","Body":"### Description\r\n\r\nMy project is injecting an external library as a dependency for the CoreCLR profiler. It uses ADDITIONAL_DEPS environment variable to achieve that. Everything works well as long as ASP.NET Core 2.0 web application is profiled, but if I use exactly the same workflow with ASP.NET Core 2.1 my library is not found by the application.\r\n\r\n### Diagnostics\r\n\r\nThis is what I have already tried:\r\n\r\n- profiling .NET Core 2.0 application - OK\r\n- profiling ASP.NET Core 2.0 application - OK\r\n- profiling .NET Core 2.1 application - OK\r\n- profiling ASP.NET Core 2.1 application using ADDITIONAL_DEPS env var - FAILURE\r\n- profiling ASP.NET Core 2.1 application using --additional-deps switch - FAILURE\r\n\r\nIn each of these cases, I was using the same deps.json file and dependent library.\r\n\r\nI have found out using procmon.exe that in case of ASP.NET Core 2.1 dotnet.exe behaves differently than in other cases. **Dependent assembly is NOT looked up in a location provided in \\*.deps.json file, but only in the profiled application directory.**\r\n\r\nOutput from dottest.exe is as follows:\r\n\r\n```\r\nAn assembly specified in the application dependencies manifest (hooks.deps.json) was not found:\r\n    package: 'hooks', version: '1.0.0.0'\r\n    path: 'C:/Program Files/Profiler/bin/hooks.dll'\r\n```\r\nI have double-checked assembly exists in this location.\r\n\r\nAnd this is my \\*.deps.json file:\r\n\r\n```\r\n{\r\n\"runtimeTarget\": {\r\n    \"name\": \"hooks\"\r\n  },\r\n  \"targets\": {\r\n    \"hooks\": {\r\n      \"hooks/1.0.0.0\": {\r\n        \"runtime\": {\r\n          \"C:\\\\Program Files\\\\Profiler\\\\bin\\\\hooks.dll\": {}\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"libraries\": {\r\n    \"hooks/1.0.0.0\": {\r\n      \"type\": \"reference\",\r\n      \"serviceable\": false,\r\n      \"sha512\": \"\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Questions\r\n**1. How can I use additional-deps with ASP.NET Core 2.1 properly?**\r\n**2. Is there some other way to inject external assembly to ASP.NET Core application?**\r\n**3. Is there at least a workaround for this issue?**","Url":"https://github.com/aspnet/Home/issues/3523","RelatedDescription":"Open issue \"ADDITIONAL_DEPS environment variable has stopped working with ASP.NET Core 2.1\" (#3523)"},{"Id":"358621440","IsPullRequest":false,"CreatedAt":"2018-09-10T13:24:54","Actor":"MariusMyburg","Number":"3522","RawContent":null,"Title":"Doing GET requests with Content-Range header not working after upgrade to SDK 2.1.401","State":"open","Body":"Hi,\r\n\r\nI have upgraded to SDK 2.1.401 and now none of my GET requests to my ASP.NET Core app works. I do not get back any response at all. If I remove the Content-Range header, I do get back a response, in fact my breakpoint in my Controller method does not get hit meaning the call is not routed to my controller at all. So ASP.NET Core seems to specifically pre-process the headers and then not even route it anymore.\r\n\r\nIt is a large project that I am working on but I made no changes whatsoever, I just upgraded to the latest .NET Core SDK (2.1.401). (Actually, I did not want to upgrade and I did not, but on rebuilding my solution, I got an error stating that there is an incompatibility between version 2.1 and 2.1.402 servicing update, which is why I updated.)\r\n\r\nHas anyone else encountered a problem with 2.1.402 and requests containing Content-Range header?\r\n\r\nThanks.","Url":"https://github.com/aspnet/Home/issues/3522","RelatedDescription":"Open issue \"Doing GET requests with Content-Range header not working after upgrade to SDK 2.1.401\" (#3522)"},{"Id":"358005009","IsPullRequest":false,"CreatedAt":"2018-09-10T07:22:24","Actor":"tangname","Number":"3515","RawContent":null,"Title":"how to access a remote shared folder with credential in asp.net core ?","State":"closed","Body":"i  want to access a remote shared folder with credential,neither my app server nor remote file sever is in domain.\r\n\r\ni notice that asp.net core use  under code to specify a local path:\r\n```\r\napp.UseStaticFiles(new StaticFileOptions()\r\n{\r\n    FileProvider = new PhysicalFileProvider(\"C:\\\\Files\"),\r\n    RequestPath = \"/files\"\r\n});\r\n```\r\nthen i can browser `localhost:5000/files/test.jgp` to view a file.\r\n\r\nbut now i need to aceess a  remote server file with credential,.\r\n\r\ni instead of the '\"C:\\\\Files' to '\\\\\\\\10.1.0.10\\files',unfortually,it thow an exception: `The directory name \\\\10.1.0.10\\files is invalid.`\r\n\r\ndetail error shows under: \r\n```\r\nSystem.ArgumentException: The directory name \\\\10.1.0.10\\files is invalid.\r\nParameter name: path\r\n   at System.IO.FileSystemWatcher..ctor(String path, String filter)\r\n   at System.IO.FileSystemWatcher..ctor(String path)\r\n   at Microsoft.Extensions.FileProviders.PhysicalFileProvider.CreateFileWatcher(String root)\r\n   at WU.OnlineReport.Web.Startup.Startup.Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory) in D:\\work\\Report.Web\\Startup\\Startup.cs:line 80\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Hosting.ConventionBasedStartup.Configure(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.Server.IISIntegration.IISSetupFilter.<>c__DisplayClass3_0.<Configure>b__0(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.Hosting.Internal.AutoRequestServicesStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder builder)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\n```\r\nHow can I resolve this problem ?","Url":"https://github.com/aspnet/Home/issues/3515","RelatedDescription":"Closed issue \"how to access a remote shared folder with credential in asp.net core ?\" (#3515)"},{"Id":"358305256","IsPullRequest":false,"CreatedAt":"2018-09-08T15:35:13","Actor":"AlexBAV","Number":"3521","RawContent":null,"Title":"FileSystemWatcher does not detect changes","State":"open","Body":"`FileSystemWatcher` in ASP.NET Core 2.1 does not detect changes in files in a folder created as a junction from another folder.","Url":"https://github.com/aspnet/Home/issues/3521","RelatedDescription":"Open issue \"FileSystemWatcher does not detect changes\" (#3521)"},{"Id":"358169991","IsPullRequest":false,"CreatedAt":"2018-09-07T18:37:29","Actor":"ackava","Number":"3520","RawContent":null,"Title":"CORS does not work with CDN","State":"open","Body":"It is quite well that ASP.NET Core detects whether CORS headers are needed or not, but it does not work with CDN. In requests through CDN, ASP.NET Core thinks that it does not need to send CORS headers and it simply stops sending CORS headers.","Url":"https://github.com/aspnet/Home/issues/3520","RelatedDescription":"Open issue \"CORS does not work with CDN\" (#3520)"},{"Id":"358089707","IsPullRequest":false,"CreatedAt":"2018-09-07T15:43:41","Actor":"TechnikEmpire","Number":"3519","RawContent":null,"Title":"No way to get the request client HTTP version","State":"closed","Body":"There is no way that I can find anywhere in ASP.NET Core or Kestrel to simply get the HTTP client version for a request/connection. I see in Kestrel that the server does a great deal of work to accurately determine this, and then the result is hidden in internals not available to the end user. Plus, the http context consumes the raw protocol packets and then they're irreversibly disposed, so there's just no way for the user to re-perform this work, even if we felt like doing the same work twice that Kestrel and friends are unnecessarily hiding from us.\r\n\r\nSlightly on to another barely related topic, imo the raw header strings should be preserved also since the parser does irreversible transformations on keys and values, but I think that suggestion should go to kestrel server.\r\n\r\nAnyway yeah, forgive me if the HTTP version is available (should exist at context or connection scope), but I can't find it and it really ought to be available.","Url":"https://github.com/aspnet/Home/issues/3519","RelatedDescription":"Closed issue \"No way to get the request client HTTP version\" (#3519)"},{"Id":"358030337","IsPullRequest":false,"CreatedAt":"2018-09-07T11:29:06","Actor":"thepinkmile","Number":"3517","RawContent":null,"Title":"Give DI ServiceDescriptor an interface","State":"open","Body":"I am trying to create a wrapper on top of Microsoft.Extensions.DependencyInjection to provide some custom functionality.\r\n\r\nWhat I really need is for the ServiceDescriptor to have an interface of IServiceDescriptor. This is because my custom functionality requires me to store extra information about a service (ServiceName & ScopeName). Currently, to implement my custom descriptors I have to derive from the ServiceDescriptor class which is not ideal as I HAVE to use the relevant constructors for the instance type (discovery of this is currently internal).\r\nHowever, my use case is simple. My CustomServiceDescriptor IS a normal ServiceDescriptor but just with a few extra parameters that I can use both at registration time and for retrieval.\r\n\r\nSomething like this is what I want to be able to do\r\n```\r\npublic class CustomServiceDescriptor : IServiceDescriptor\r\n{\r\n    public CustomServiceDescriptor(IServiceDescriptor descriptor, MyCustomData metadata)\r\n    {\r\n        _innerDescriptor = descriptor;\r\n        _metadata = metadata;\r\n    }\r\n\r\n    // ... All IServiceDescriptor properties just forward to _innerDescriptor\r\n\r\n    public MyCustomData Metadata { get => _metadata; }\r\n\r\n    private readonly IServiceDescriptor _innerDescriptor;\r\n    private readonly MyCustomData _metadata;\r\n}\r\n```\r\nSuch that if I use my custom descriptors on a common IServiceCollection it will just do what it already does, but if I add this to my custom IServiceCollection it will use the extra metadata when building my custom IServiceProvider.\r\n\r\nI can already implement my own IServiceCollection & IServiceProvider to do what I need, but the ServiceDescriptor is causing issues so I have had to make my custom collection and provider accept my own custom Descriptor types which to me feels like a code smell.\r\n\r\nMy use-case is that I need to register dependencies but only for specific named plugins.\r\nSo my plugin assembly can only retrieve it's own registered dependencies and those of the \"global\" scope.\r\nThis is different than how MVC creates a scope for a request and as such the scoped dependencies are created and disposed of only for that requests pipeline.\r\nMy plugins are to enable custom functionality within my application and as such each plugin should not have access to other plugin dependencies.\r\n\r\nAlso it would be nice if this change could be made to both v1.1 & v2.x as some of my projects are still using v1.1 and net452.\r\n\r\nI hope I have described this well enough.\r\nTIA for any help or advice on this issue.","Url":"https://github.com/aspnet/Home/issues/3517","RelatedDescription":"Open issue \"Give DI ServiceDescriptor an interface\" (#3517)"},{"Id":"358012832","IsPullRequest":false,"CreatedAt":"2018-09-07T10:32:20","Actor":"couven92","Number":"3516","RawContent":null,"Title":"Security Implications of using Windows Authentication","State":"open","Body":"When running an ASP.NET Core application on an IIS-Server on Windows what are the best options for doing Authentication\r\n\r\n* using the IIS built-in Windows Authentication (which uses the `X-WWW-Authenticate` header under the hood)\r\n* using a Login page with ASP.NET authentication, using ASP.NET Core Cookie Authentication, and calling the [LogonUserW function](https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-logonuserw) via P/Invoke to login the user and create a Windows Identity object from the returned handle\r\n\r\nIs this scenario impacted by using a Windows Server in Workgroup mode, i.e. a server which does not use Active Directory? For example, will the authentication negotiation fallback to NTLM if the server is not under AD, because it cannot do Kerberos? *I have been told that NTLM auth is bad?*\r\n\r\nIs it better to create a Forms-based login page and doing the authentication locally on the server, instead of exposing Windows Authentication Negotiation to the public Internet?\r\n\r\nIf using Windows Authentication through IIS, is there a proper way of signing out the user? Returning a `403` will just trigger a new login prompt, right?\r\n\r\nIf I allow both Anonymous Authentication and Windows Authentication in IIS, I can do both in the same application, right? IIS wil attempt Windows Authentication if it sees a `X-WWW-Authenticate: Negotiate` header, but do nothing if there is none?\r\n\r\n----\r\n\r\n/cc @blowdart ","Url":"https://github.com/aspnet/Home/issues/3516","RelatedDescription":"Open issue \"Security Implications of using Windows Authentication\" (#3516)"},{"Id":"357987495","IsPullRequest":false,"CreatedAt":"2018-09-07T09:20:36","Actor":"SachaZvetelman","Number":"3514","RawContent":null,"Title":"AddDataProtection race condition","State":"open","Body":"I'm running multiple instances of a .NET Core 2.1 app behind a load balancer.\r\n\r\nWhen multiple instances are created for the first time, there are frequently race conditions taking place around the `DataProtection` library that cause problems.\r\n\r\nIf these instances are created at the same time, the first one will create a new key and persist it to Redis, but the second one will do the same, and the third one will do the same. What you end up with is multiple keys in the key ring that are not known by many of the instances.\r\nIf each instance is spinned up after a couple of seconds, then this problem doesn't occur.\r\n\r\nIf you see the logs below, there are three default keys used by different instances.\r\n\r\nGiven that for some reason the keys are created with an immediate activation date, in many cases, they don't get propagated to all the instances. The problem you'll end up facing is that if you encrypt a cookie with a key that is not available on another instance, you won't be able to decrypt it if you get to one of those instances, getting exceptions like this:\r\n\r\n```\r\n[15:29:57 ERR] An unhandled exception has occurred while executing the request.\r\nSystem.Security.Cryptography.CryptographicException: The key {8480fbc2-3e02-4b31-b137-dfc300311e24} was not found in the key ring.\r\nat Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.UnprotectCore(Byte[] protectedData, Boolean allowOperationsOnRevokedKeys, UnprotectStatus& status)\r\nat Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.DangerousUnprotect(Byte[] protectedData, Boolean ignoreRevocationErrors, Boolean& requiresMigration, Boolean& wasRevoked)\r\nat Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.Unprotect(Byte[] protectedData)\r\nat Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.Unprotect(IDataProtector protector, String protectedData)\r\nat MyApp.Worker.Authentication.WebApp.Filters.ClientSettingsAsyncFilter.SetCobrand(ActionExecutingContext context) in /src/src/MyApp.Worker.Authentication.WebApp/Filters/ClientSettingsAsyncFilter.cs:line 64\r\nat MyApp.Worker.Authentication.WebApp.Filters.ClientSettingsAsyncFilter.OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next) in /src/src/MyApp.Worker.Authentication.WebApp/Filters/ClientSettingsAsyncFilter.cs:line 40\r\nat Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeNextActionFilterAsync()\r\nat Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\nat Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\nat Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeInnerFilterAsync()\r\nat Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\nat Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nat Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\nat Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\nat Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\nat Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\nat IdentityServer4.Hosting.IdentityServerMiddleware.Invoke(HttpContext context, IEndpointRouter router, IUserSession session, IEventService events)\r\nat Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\nat Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(HttpContext context)\r\nat IdentityServer4.Hosting.BaseUrlMiddleware.Invoke(HttpContext context)\r\nat Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\nat Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(HttpContext context)\r\nat Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.Invoke(HttpContext context)\r\n[15:29:57 ERR] An exception was thrown attempting to execute the error handler.\r\nSystem.Security.Cryptography.CryptographicException: The key {8480fbc2-3e02-4b31-b137-dfc300311e24} was not found in the key ring.\r\nat Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.UnprotectCore(Byte[] protectedData, Boolean allowOperationsOnRevokedKeys, UnprotectStatus& status)\r\nat Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.DangerousUnprotect(Byte[] protectedData, Boolean ignoreRevocationErrors, Boolean& requiresMigration, Boolean& wasRevoked)\r\nat Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.Unprotect(Byte[] protectedData)\r\nat Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.Unprotect(IDataProtector protector, String protectedData)\r\nat MyApp.Worker.Authentication.WebApp.Filters.ClientSettingsAsyncFilter.SetCobrand(ActionExecutingContext context) in /src/src/MyApp.Worker.Authentication.WebApp/Filters/ClientSettingsAsyncFilter.cs:line 64\r\nat MyApp.Worker.Authentication.WebApp.Filters.ClientSettingsAsyncFilter.OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next) in /src/src/MyApp.Worker.Authentication.WebApp/Filters/ClientSettingsAsyncFilter.cs:line 40\r\nat Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeNextActionFilterAsync()\r\nat Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\nat Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\nat Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeInnerFilterAsync()\r\nat Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\nat Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nat Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\nat Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\nat Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\nat Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\nat IdentityServer4.Hosting.IdentityServerMiddleware.Invoke(HttpContext context, IEndpointRouter router, IUserSession session, IEventService events)\r\nat Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\nat Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(HttpContext context)\r\nat IdentityServer4.Hosting.BaseUrlMiddleware.Invoke(HttpContext context)\r\nat Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\nat Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(HttpContext context)\r\nat Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.Invoke(HttpContext context)\r\n[15:29:57 ERR] Connection id \"0HLGK1LMKD07L\", Request id \"0HLGK1LMKD07L:00000003\": An unhandled exception was thrown by the application.\r\nSystem.Security.Cryptography.CryptographicException: The key {8480fbc2-3e02-4b31-b137-dfc300311e24} was not found in the key ring.\r\nat Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.UnprotectCore(Byte[] protectedData, Boolean allowOperationsOnRevokedKeys, UnprotectStatus& status)\r\nat Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.DangerousUnprotect(Byte[] protectedData, Boolean ignoreRevocationErrors, Boolean& requiresMigration, Boolean& wasRevoked)\r\nat Microsoft.AspNetCore.DataProtection.KeyManagement.KeyRingBasedDataProtector.Unprotect(Byte[] protectedData)\r\nat Microsoft.AspNetCore.DataProtection.DataProtectionCommonExtensions.Unprotect(IDataProtector protector, String protectedData)\r\nat MyApp.Worker.Authentication.WebApp.Filters.ClientSettingsAsyncFilter.SetCobrand(ActionExecutingContext context) in /src/src/MyApp.Worker.Authentication.WebApp/Filters/ClientSettingsAsyncFilter.cs:line 64\r\nat MyApp.Worker.Authentication.WebApp.Filters.ClientSettingsAsyncFilter.OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next) in /src/src/MyApp.Worker.Authentication.WebApp/Filters/ClientSettingsAsyncFilter.cs:line 40\r\nat Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeNextActionFilterAsync()\r\nat Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\nat Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\nat Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeInnerFilterAsync()\r\nat Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\nat Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nat Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\nat Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\nat Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\nat Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\nat IdentityServer4.Hosting.IdentityServerMiddleware.Invoke(HttpContext context, IEndpointRouter router, IUserSession session, IEventService events)\r\nat Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\nat Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(HttpContext context)\r\nat IdentityServer4.Hosting.BaseUrlMiddleware.Invoke(HttpContext context)\r\nat Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\nat Microsoft.AspNetCore.Cors.Infrastructure.CorsMiddleware.Invoke(HttpContext context)\r\nat Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.Invoke(HttpContext context)\r\nat Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.Invoke(HttpContext context)\r\nat Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)\r\n```\r\n\r\nI could come up with dirty hacks to avoid this, either at a code level or infrastructure level, but I'd like to know what the recommended approach is and how this can be properly avoided going forward.\r\n\r\n- Microsoft.NETCore.App version: 2.1.0\r\n- `dotnet -info`:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.302\r\n Commit:    9048955601\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.302\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.2\r\n  Commit:  811c3ce6c0\r\n\r\n.NET Core SDKs installed:\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\nHere are the relevant parts of my `Startup.cs` file:\r\n```\r\nvar signingCertificate = new X509Certificate2(identityConfiguration.Credentials.FilePath, identityConfiguration.Credentials.Password, X509KeyStorageFlags.MachineKeySet | X509KeyStorageFlags.EphemeralKeySet);\r\n\r\nvar redis = ConnectionMultiplexer.Connect(Configuration.GetConnectionString(\"Redis\"));\r\n\r\nservices\r\n    .AddDataProtection()\r\n    .SetApplicationName(ApplicationName)\r\n    .PersistKeysToRedis(redis, $\"{ApplicationName}-DataProtectionKeys\")\r\n    .ProtectKeysWithCertificate(signingCertificate);\r\n```\r\n\r\nAnd here are the relevant parts of the logs of 8 instances when they are started:\r\n\r\n**Instance 1:**\r\n```\r\n[15:28:37 DBG] Repository contains no viable default key. Caller should generate a key with immediate activation.\r\n[15:28:37 DBG] Policy resolution states that a new key should be added to the key ring.\r\n[15:28:37 INF] Creating key {6ebc8595-fcc1-408a-8a44-14c4fac21df0} with creation date 2018-09-06 15:28:37Z, activation date 2018-09-06 15:28:36Z, and expiration date 2018-12-05 15:28:36Z.\r\n[15:28:37 DBG] Descriptor deserializer type for key {6ebc8595-fcc1-408a-8a44-14c4fac21df0} is 'Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'.\r\n[15:28:37 DBG] No key escrow sink found. Not writing key {6ebc8595-fcc1-408a-8a44-14c4fac21df0} to escrow.\r\n[15:28:37 DBG] Encrypting to X.509 certificate with thumbprint 'XXXXX'.\r\n[15:28:37 DBG] Key cache expiration token triggered by 'CreateNewKey' operation.\r\n[15:28:37 DBG] Found key {6ebc8595-fcc1-408a-8a44-14c4fac21df0}.\r\n[15:28:37 DBG] Considering key {6ebc8595-fcc1-408a-8a44-14c4fac21df0} with expiration date 2018-12-05 15:28:36Z as default key.\r\n[15:28:37 DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[15:28:37 DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[15:28:37 DBG] Using managed symmetric algorithm 'System.Security.Cryptography.Aes'.\r\n[15:28:37 DBG] Using managed keyed hash algorithm 'System.Security.Cryptography.HMACSHA256'.\r\n[15:28:37 DBG] Using key {6ebc8595-fcc1-408a-8a44-14c4fac21df0} as the default key.\r\n[15:28:37 DBG] Key ring with default key {6ebc8595-fcc1-408a-8a44-14c4fac21df0} was loaded during application startup.\r\n```\r\n\r\n**Instance 2:**\r\n```\r\n[15:28:36 DBG] Repository contains no viable default key. Caller should generate a key with immediate activation.\r\n[15:28:36 DBG] Policy resolution states that a new key should be added to the key ring.\r\n[15:28:36 INF] Creating key {b5af49fe-11d5-4fa7-aa61-85fb5f4d1bef} with creation date 2018-09-06 15:28:36Z, activation date 2018-09-06 15:28:36Z, and expiration date 2018-12-05 15:28:36Z.\r\n[15:28:37 DBG] Descriptor deserializer type for key {b5af49fe-11d5-4fa7-aa61-85fb5f4d1bef} is 'Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'.\r\n[15:28:37 DBG] No key escrow sink found. Not writing key {b5af49fe-11d5-4fa7-aa61-85fb5f4d1bef} to escrow.\r\n[15:28:37 DBG] Encrypting to X.509 certificate with thumbprint 'XXXXX'.\r\n[15:28:37 DBG] Key cache expiration token triggered by 'CreateNewKey' operation.\r\n[15:28:37 DBG] Found key {6ebc8595-fcc1-408a-8a44-14c4fac21df0}.\r\n[15:28:37 DBG] Found key {b5af49fe-11d5-4fa7-aa61-85fb5f4d1bef}.\r\n[15:28:37 DBG] Considering key {6ebc8595-fcc1-408a-8a44-14c4fac21df0} with expiration date 2018-12-05 15:28:36Z as default key.\r\n[15:28:37 DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[15:28:37 DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[15:28:37 DBG] Using managed symmetric algorithm 'System.Security.Cryptography.Aes'.\r\n[15:28:37 DBG] Using managed keyed hash algorithm 'System.Security.Cryptography.HMACSHA256'.\r\n[15:28:37 DBG] Using key {6ebc8595-fcc1-408a-8a44-14c4fac21df0} as the default key.\r\n[15:28:37 DBG] Key ring with default key {6ebc8595-fcc1-408a-8a44-14c4fac21df0} was loaded during application startup.\r\n```\r\n\r\n**Instance 3:**\r\n```\r\n[15:28:37 DBG] Repository contains no viable default key. Caller should generate a key with immediate activation.\r\n[15:28:37 DBG] Policy resolution states that a new key should be added to the key ring.\r\n[15:28:37 INF] Creating key {fdb8d6da-d846-429e-a77a-612320851ff4} with creation date 2018-09-06 15:28:37Z, activation date 2018-09-06 15:28:36Z, and expiration date 2018-12-05 15:28:36Z.\r\n[15:28:37 DBG] Descriptor deserializer type for key {fdb8d6da-d846-429e-a77a-612320851ff4} is 'Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'.\r\n[15:28:37 DBG] No key escrow sink found. Not writing key {fdb8d6da-d846-429e-a77a-612320851ff4} to escrow.\r\n[15:28:37 DBG] Encrypting to X.509 certificate with thumbprint 'XXXXX'.\r\n[15:28:37 DBG] Key cache expiration token triggered by 'CreateNewKey' operation.\r\n[15:28:37 DBG] Found key {6ebc8595-fcc1-408a-8a44-14c4fac21df0}.\r\n[15:28:37 DBG] Found key {b5af49fe-11d5-4fa7-aa61-85fb5f4d1bef}.\r\n[15:28:37 DBG] Found key {4ab699bc-a747-4452-8b4e-1df6828f7b30}.\r\n[15:28:37 DBG] Found key {fdb8d6da-d846-429e-a77a-612320851ff4}.\r\n[15:28:37 DBG] Considering key {4ab699bc-a747-4452-8b4e-1df6828f7b30} with expiration date 2018-12-05 15:28:37Z as default key.\r\n[15:28:37 DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[15:28:37 DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[15:28:37 DBG] Using managed symmetric algorithm 'System.Security.Cryptography.Aes'.\r\n[15:28:37 DBG] Using managed keyed hash algorithm 'System.Security.Cryptography.HMACSHA256'.\r\n[15:28:37 DBG] Using key {4ab699bc-a747-4452-8b4e-1df6828f7b30} as the default key.\r\n[15:28:37 DBG] Key ring with default key {4ab699bc-a747-4452-8b4e-1df6828f7b30} was loaded during application startup.\r\n```\r\n\r\n**Instance 4:**\r\n```\r\n[15:28:36 DBG] Repository contains no viable default key. Caller should generate a key with immediate activation.\r\n[15:28:37 DBG] Policy resolution states that a new key should be added to the key ring.\r\n[15:28:37 INF] Creating key {e5bd64e5-d825-4fb1-8517-a5b9eb0da5a0} with creation date 2018-09-06 15:28:37Z, activation date 2018-09-06 15:28:36Z, and expiration date 2018-12-05 15:28:36Z.\r\n[15:28:37 DBG] Descriptor deserializer type for key {e5bd64e5-d825-4fb1-8517-a5b9eb0da5a0} is 'Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'.\r\n[15:28:37 DBG] No key escrow sink found. Not writing key {e5bd64e5-d825-4fb1-8517-a5b9eb0da5a0} to escrow.\r\n[15:28:37 DBG] Encrypting to X.509 certificate with thumbprint 'XXXXX'.\r\n[15:28:37 DBG] Key cache expiration token triggered by 'CreateNewKey' operation.\r\n[15:28:37 DBG] Found key {6ebc8595-fcc1-408a-8a44-14c4fac21df0}.\r\n[15:28:37 DBG] Found key {b5af49fe-11d5-4fa7-aa61-85fb5f4d1bef}.\r\n[15:28:37 DBG] Found key {4ab699bc-a747-4452-8b4e-1df6828f7b30}.\r\n[15:28:37 DBG] Found key {fdb8d6da-d846-429e-a77a-612320851ff4}.\r\n[15:28:37 DBG] Found key {e5bd64e5-d825-4fb1-8517-a5b9eb0da5a0}.\r\n[15:28:37 DBG] Considering key {4ab699bc-a747-4452-8b4e-1df6828f7b30} with expiration date 2018-12-05 15:28:37Z as default key.\r\n[15:28:37 DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[15:28:37 DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[15:28:37 DBG] Using managed symmetric algorithm 'System.Security.Cryptography.Aes'.\r\n[15:28:37 DBG] Using managed keyed hash algorithm 'System.Security.Cryptography.HMACSHA256'.\r\n[15:28:37 DBG] Using key {4ab699bc-a747-4452-8b4e-1df6828f7b30} as the default key.\r\n[15:28:37 DBG] Key ring with default key {4ab699bc-a747-4452-8b4e-1df6828f7b30} was loaded during application startup.\r\n```\r\n\r\n**Instance 5:**\r\n```\r\n[15:28:37 DBG] Repository contains no viable default key. Caller should generate a key with immediate activation.\r\n[15:28:37 DBG] Policy resolution states that a new key should be added to the key ring.\r\n[15:28:37 INF] Creating key {dac23a76-9aaa-4dae-be25-ecfcc2ea28a9} with creation date 2018-09-06 15:28:37Z, activation date 2018-09-06 15:28:37Z, and expiration date 2018-12-05 15:28:37Z.\r\n[15:28:37 DBG] Descriptor deserializer type for key {dac23a76-9aaa-4dae-be25-ecfcc2ea28a9} is 'Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'.\r\n[15:28:37 DBG] No key escrow sink found. Not writing key {dac23a76-9aaa-4dae-be25-ecfcc2ea28a9} to escrow.\r\n[15:28:37 DBG] Encrypting to X.509 certificate with thumbprint 'XXXXX'.\r\n[15:28:37 DBG] Key cache expiration token triggered by 'CreateNewKey' operation.\r\n[15:28:37 DBG] Found key {6ebc8595-fcc1-408a-8a44-14c4fac21df0}.\r\n[15:28:37 DBG] Found key {b5af49fe-11d5-4fa7-aa61-85fb5f4d1bef}.\r\n[15:28:37 DBG] Found key {4ab699bc-a747-4452-8b4e-1df6828f7b30}.\r\n[15:28:37 DBG] Found key {fdb8d6da-d846-429e-a77a-612320851ff4}.\r\n[15:28:37 DBG] Found key {e5bd64e5-d825-4fb1-8517-a5b9eb0da5a0}.\r\n[15:28:37 DBG] Found key {dac23a76-9aaa-4dae-be25-ecfcc2ea28a9}.\r\n[15:28:37 DBG] Considering key {4ab699bc-a747-4452-8b4e-1df6828f7b30} with expiration date 2018-12-05 15:28:37Z as default key.\r\n[15:28:37 DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[15:28:37 DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[15:28:37 DBG] Using managed symmetric algorithm 'System.Security.Cryptography.Aes'.\r\n[15:28:37 DBG] Using managed keyed hash algorithm 'System.Security.Cryptography.HMACSHA256'.\r\n[15:28:37 DBG] Using key {4ab699bc-a747-4452-8b4e-1df6828f7b30} as the default key.\r\n[15:28:37 DBG] Key ring with default key {4ab699bc-a747-4452-8b4e-1df6828f7b30} was loaded during application startup.\r\n```\r\n\r\n**Instance 6:**\r\n```\r\n[15:28:37 DBG] Repository contains no viable default key. Caller should generate a key with immediate activation.\r\n[15:28:37 DBG] Policy resolution states that a new key should be added to the key ring.\r\n[15:28:37 INF] Creating key {8480fbc2-3e02-4b31-b137-dfc300311e24} with creation date 2018-09-06 15:28:37Z, activation date 2018-09-06 15:28:37Z, and expiration date 2018-12-05 15:28:37Z.\r\n[15:28:37 DBG] Descriptor deserializer type for key {8480fbc2-3e02-4b31-b137-dfc300311e24} is 'Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'.\r\n[15:28:37 DBG] No key escrow sink found. Not writing key {8480fbc2-3e02-4b31-b137-dfc300311e24} to escrow.\r\n[15:28:37 DBG] Encrypting to X.509 certificate with thumbprint 'XXXXX'.\r\n[15:28:37 DBG] Key cache expiration token triggered by 'CreateNewKey' operation.\r\n[15:28:37 DBG] Found key {6ebc8595-fcc1-408a-8a44-14c4fac21df0}.\r\n[15:28:37 DBG] Found key {b5af49fe-11d5-4fa7-aa61-85fb5f4d1bef}.\r\n[15:28:37 DBG] Found key {4ab699bc-a747-4452-8b4e-1df6828f7b30}.\r\n[15:28:37 DBG] Found key {fdb8d6da-d846-429e-a77a-612320851ff4}.\r\n[15:28:37 DBG] Found key {e5bd64e5-d825-4fb1-8517-a5b9eb0da5a0}.\r\n[15:28:37 DBG] Found key {dac23a76-9aaa-4dae-be25-ecfcc2ea28a9}.\r\n[15:28:37 DBG] Found key {8480fbc2-3e02-4b31-b137-dfc300311e24}.\r\n[15:28:37 DBG] Considering key {8480fbc2-3e02-4b31-b137-dfc300311e24} with expiration date 2018-12-05 15:28:37Z as default key.\r\n[15:28:37 DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[15:28:37 DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[15:28:37 DBG] Using managed symmetric algorithm 'System.Security.Cryptography.Aes'.\r\n[15:28:37 DBG] Using managed keyed hash algorithm 'System.Security.Cryptography.HMACSHA256'.\r\n[15:28:37 DBG] Using key {8480fbc2-3e02-4b31-b137-dfc300311e24} as the default key.\r\n[15:28:37 DBG] Key ring with default key {8480fbc2-3e02-4b31-b137-dfc300311e24} was loaded during application startup.\r\n```\r\n\r\n**Instance 7:**\r\n```\r\n[15:28:37 DBG] Repository contains no viable default key. Caller should generate a key with immediate activation.\r\n[15:28:37 DBG] Policy resolution states that a new key should be added to the key ring.\r\n[15:28:37 INF] Creating key {c845406b-d630-43a3-949b-e0387ddfd377} with creation date 2018-09-06 15:28:37Z, activation date 2018-09-06 15:28:37Z, and expiration date 2018-12-05 15:28:37Z.\r\n[15:28:37 DBG] Descriptor deserializer type for key {c845406b-d630-43a3-949b-e0387ddfd377} is 'Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'.\r\n[15:28:37 DBG] No key escrow sink found. Not writing key {c845406b-d630-43a3-949b-e0387ddfd377} to escrow.\r\n[15:28:37 DBG] Encrypting to X.509 certificate with thumbprint 'XXXXX'.\r\n[15:28:37 DBG] Key cache expiration token triggered by 'CreateNewKey' operation.\r\n[15:28:37 DBG] Found key {6ebc8595-fcc1-408a-8a44-14c4fac21df0}.\r\n[15:28:37 DBG] Found key {b5af49fe-11d5-4fa7-aa61-85fb5f4d1bef}.\r\n[15:28:37 DBG] Found key {4ab699bc-a747-4452-8b4e-1df6828f7b30}.\r\n[15:28:37 DBG] Found key {fdb8d6da-d846-429e-a77a-612320851ff4}.\r\n[15:28:37 DBG] Found key {e5bd64e5-d825-4fb1-8517-a5b9eb0da5a0}.\r\n[15:28:37 DBG] Found key {dac23a76-9aaa-4dae-be25-ecfcc2ea28a9}.\r\n[15:28:37 DBG] Found key {8480fbc2-3e02-4b31-b137-dfc300311e24}.\r\n[15:28:37 DBG] Found key {4f871aa5-0440-4e21-b21f-a40878f2f936}.\r\n[15:28:37 DBG] Found key {c845406b-d630-43a3-949b-e0387ddfd377}.\r\n[15:28:37 DBG] Considering key {8480fbc2-3e02-4b31-b137-dfc300311e24} with expiration date 2018-12-05 15:28:37Z as default key.\r\n[15:28:37 DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[15:28:37 DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[15:28:37 DBG] Using managed symmetric algorithm 'System.Security.Cryptography.Aes'.\r\n[15:28:37 DBG] Using managed keyed hash algorithm 'System.Security.Cryptography.HMACSHA256'.\r\n[15:28:37 DBG] Using key {8480fbc2-3e02-4b31-b137-dfc300311e24} as the default key.\r\n[15:28:37 DBG] Key ring with default key {8480fbc2-3e02-4b31-b137-dfc300311e24} was loaded during application startup.\r\n```\r\n\r\n**Instance 8:**\r\n```\r\n[15:28:37 DBG] Repository contains no viable default key. Caller should generate a key with immediate activation.\r\n[15:28:37 DBG] Policy resolution states that a new key should be added to the key ring.\r\n[15:28:37 INF] Creating key {17bd9124-6a55-43d3-97ba-ec2543667a7e} with creation date 2018-09-06 15:28:37Z, activation date 2018-09-06 15:28:37Z, and expiration date 2018-12-05 15:28:37Z.\r\n[15:28:37 DBG] Descriptor deserializer type for key {17bd9124-6a55-43d3-97ba-ec2543667a7e} is 'Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'.\r\n[15:28:37 DBG] No key escrow sink found. Not writing key {17bd9124-6a55-43d3-97ba-ec2543667a7e} to escrow.\r\n[15:28:37 DBG] Encrypting to X.509 certificate with thumbprint 'XXXXX'.\r\n[15:28:37 DBG] Key cache expiration token triggered by 'CreateNewKey' operation.\r\n[15:28:37 DBG] Found key {6ebc8595-fcc1-408a-8a44-14c4fac21df0}.\r\n[15:28:37 DBG] Found key {b5af49fe-11d5-4fa7-aa61-85fb5f4d1bef}.\r\n[15:28:37 DBG] Found key {4ab699bc-a747-4452-8b4e-1df6828f7b30}.\r\n[15:28:37 DBG] Found key {fdb8d6da-d846-429e-a77a-612320851ff4}.\r\n[15:28:37 DBG] Found key {e5bd64e5-d825-4fb1-8517-a5b9eb0da5a0}.\r\n[15:28:37 DBG] Found key {dac23a76-9aaa-4dae-be25-ecfcc2ea28a9}.\r\n[15:28:37 DBG] Found key {8480fbc2-3e02-4b31-b137-dfc300311e24}.\r\n[15:28:37 DBG] Found key {4f871aa5-0440-4e21-b21f-a40878f2f936}.\r\n[15:28:37 DBG] Found key {c845406b-d630-43a3-949b-e0387ddfd377}.\r\n[15:28:37 DBG] Found key {17bd9124-6a55-43d3-97ba-ec2543667a7e}.\r\n[15:28:37 DBG] Considering key {8480fbc2-3e02-4b31-b137-dfc300311e24} with expiration date 2018-12-05 15:28:37Z as default key.\r\n[15:28:37 DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.EncryptedXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[15:28:37 DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=2.1.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n[15:28:37 DBG] Using managed symmetric algorithm 'System.Security.Cryptography.Aes'.\r\n[15:28:37 DBG] Using managed keyed hash algorithm 'System.Security.Cryptography.HMACSHA256'.\r\n[15:28:37 DBG] Using key {8480fbc2-3e02-4b31-b137-dfc300311e24} as the default key.\r\n[15:28:37 DBG] Key ring with default key {8480fbc2-3e02-4b31-b137-dfc300311e24} was loaded during application startup.\r\n```","Url":"https://github.com/aspnet/Home/issues/3514","RelatedDescription":"Open issue \"AddDataProtection race condition\" (#3514)"},{"Id":"357798043","IsPullRequest":false,"CreatedAt":"2018-09-06T20:55:43","Actor":"aspnet-hello","Number":"3512","RawContent":null,"Title":"Test failure: ThrowsIfProvidedCertificateDoesHavePrivateKey","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=545949&buildTypeId=XPlat_HighSierraOsxUniverse) occasionally with the following error:\r\n```\r\nSystem.IO.FileNotFoundException : Could not load file or assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.\r\n   at System.Security.Cryptography.Xml.KeyInfoX509Data.GetXml(XmlDocument xmlDocument)\r\n   at System.Security.Cryptography.Xml.KeyInfo.GetXml(XmlDocument xmlDocument)\r\n   at System.Security.Cryptography.Xml.EncryptedKey.GetXml(XmlDocument document)\r\n   at System.Security.Cryptography.Xml.KeyInfoEncryptedKey.GetXml(XmlDocument xmlDocument)\r\n   at System.Security.Cryptography.Xml.KeyInfo.GetXml(XmlDocument xmlDocument)\r\n   at System.Security.Cryptography.Xml.EncryptedData.GetXml(XmlDocument document)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.ReplaceElement(XmlElement inputElement, EncryptedData encryptedData, Boolean content)\r\n   at Microsoft.AspNetCore.DataProtection.XmlEncryption.CertificateXmlEncryptor.EncryptElement(XElement plaintextElement) in /_/src/Microsoft.AspNetCore.DataProtection/XmlEncryption/CertificateXmlEncryptor.cs:line 104\r\n   at Microsoft.AspNetCore.DataProtection.XmlEncryption.CertificateXmlEncryptor.Encrypt(XElement plaintextElement) in /_/src/Microsoft.AspNetCore.DataProtection/XmlEncryption/CertificateXmlEncryptor.cs:line 85\r\n   at Microsoft.AspNetCore.DataProtection.Test.XmlEncryption.EncryptedXmlDecryptorTests.ThrowsIfProvidedCertificateDoesHavePrivateKey() in /_/test/Microsoft.AspNetCore.DataProtection.Test/XmlEncryption/EncryptedXmlDecryptorTests.cs:line 60\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/Home/issues/3512","RelatedDescription":"Closed issue \"Test failure: ThrowsIfProvidedCertificateDoesHavePrivateKey\" (#3512)"},{"Id":"357749414","IsPullRequest":false,"CreatedAt":"2018-09-06T18:53:29","Actor":"aspnet-hello","Number":"3510","RawContent":null,"Title":"Test failure: ThrowsIfCannotDecrypt","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=545953&buildTypeId=XPlat_Linux_UbuntuUniverseCoreCLR) occasionally with the following error:\r\n```\r\nSystem.IO.FileNotFoundException : Could not load file or assembly 'System.Security.Cryptography.Pkcs, Version=4.0.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.\r\n   at System.Security.Cryptography.Xml.KeyInfoX509Data.GetXml(XmlDocument xmlDocument)\r\n   at System.Security.Cryptography.Xml.KeyInfo.GetXml(XmlDocument xmlDocument)\r\n   at System.Security.Cryptography.Xml.EncryptedKey.GetXml(XmlDocument document)\r\n   at System.Security.Cryptography.Xml.KeyInfoEncryptedKey.GetXml(XmlDocument xmlDocument)\r\n   at System.Security.Cryptography.Xml.KeyInfo.GetXml(XmlDocument xmlDocument)\r\n   at System.Security.Cryptography.Xml.EncryptedData.GetXml(XmlDocument document)\r\n   at System.Security.Cryptography.Xml.EncryptedXml.ReplaceElement(XmlElement inputElement, EncryptedData encryptedData, Boolean content)\r\n   at Microsoft.AspNetCore.DataProtection.XmlEncryption.CertificateXmlEncryptor.EncryptElement(XElement plaintextElement) in /_/src/Microsoft.AspNetCore.DataProtection/XmlEncryption/CertificateXmlEncryptor.cs:line 104\r\n   at Microsoft.AspNetCore.DataProtection.XmlEncryption.CertificateXmlEncryptor.Encrypt(XElement plaintextElement) in /_/src/Microsoft.AspNetCore.DataProtection/XmlEncryption/CertificateXmlEncryptor.cs:line 85\r\n   at Microsoft.AspNetCore.DataProtection.Test.XmlEncryption.EncryptedXmlDecryptorTests.ThrowsIfCannotDecrypt() in /_/test/Microsoft.AspNetCore.DataProtection.Test/XmlEncryption/EncryptedXmlDecryptorTests.cs:line 24\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/Home/issues/3510","RelatedDescription":"Closed issue \"Test failure: ThrowsIfCannotDecrypt\" (#3510)"},{"Id":"357758056","IsPullRequest":false,"CreatedAt":"2018-09-06T17:53:00","Actor":"maddy027","Number":"3511","RawContent":null,"Title":"System.NotSupportedException: 'Unable to determine the provider name for provider factory of type 'System.Data.SqlClient.SqlClientFactory'. Make sure that the ADO.NET provider is installed or registered in the application config","State":"closed","Body":"https://github.com/aspnet/EntityFramework6/issues/623 \r\n\r\n\r\nCode is available here https://github.com/maddy027/IssueWithEF6WithCore.git\r\nwhen I tried to use EDMX with Asp.net core , getting the below error\r\nSystem.NotSupportedException: 'Unable to determine the provider name for provider factory of type 'System.Data.SqlClient.SqlClientFactory'. Make sure that the ADO.NET provider is installed or registered in the application config\r\n\r\nVS: 2017 15.8\r\nEF: 6.2","Url":"https://github.com/aspnet/Home/issues/3511","RelatedDescription":"Closed issue \"System.NotSupportedException: 'Unable to determine the provider name for provider factory of type 'System.Data.SqlClient.SqlClientFactory'. Make sure that the ADO.NET provider is installed or registered in the application config\" (#3511)"},{"Id":"357726307","IsPullRequest":false,"CreatedAt":"2018-09-06T16:09:27","Actor":"xinlongli2018","Number":"3509","RawContent":null,"Title":"How to read Automatic Proxy Detection (WPAD) in Asp.net core ","State":"closed","Body":"in asp.net we can use the following setting in web.config to point to a wpad.dat file to read all the proxy setting, is there a way we can achieve the same thing in asp.net core?\r\n\r\n<system.net>\r\n      <defaultProxy enabled=\"true\" useDefaultCredentials=\"true\">\r\n        <proxy autoDetect=\"True\" scriptLocation=\"http://wpad.dat\" />\r\n      </defaultProxy>\r\n    </system.net>","Url":"https://github.com/aspnet/Home/issues/3509","RelatedDescription":"Closed issue \"How to read Automatic Proxy Detection (WPAD) in Asp.net core \" (#3509)"},{"Id":"357689431","IsPullRequest":false,"CreatedAt":"2018-09-06T15:42:21","Actor":"elangelo","Number":"3508","RawContent":null,"Title":"DotNetCoreWindowsHosting install corrupt after sysprep","State":"closed","Body":"As part of our offering on Azure we have an API service that is running in dotnetcore 2.0 \r\nWe use packer to create a custom image and install the dotnetcore windows hosting module.\r\nThe version we install is DotNetCore.2.0.0-WindowsHosting.exe\r\n\r\nAt the end of the packer process a sysprep gets run: \r\n\t\t\t\t\"& $env:SystemRoot\\\\System32\\\\Sysprep\\\\Sysprep.exe /oobe /generalize /quiet /quit\",\r\n\r\n\r\nWhen i spin up a machine from this image and install our dotnet core service on it we always get 500s externally. browsing localhost we get: \r\n![image](https://user-images.githubusercontent.com/1935881/45164852-c4b27880-b1f3-11e8-965a-3ac743103d67.png)\r\n\r\nThe only way to fix this is to go to the control panel and find the dotnetcore hosting program and click on repair:\r\n![image](https://user-images.githubusercontent.com/1935881/45164947-f9becb00-b1f3-11e8-9149-0a556fc81967.png)\r\n\r\nI have no idea why this even helps or why the installation wouldn't survive a sysprep in the first place. I would like to know \r\n1. why does the installation not survive a sysprep\r\n2. how can i figure out what the repair actually fixes and what is actually broken (so i can perhaps fix it manually with some powershell script instead of just having to manually run the 'repair' step.\r\n","Url":"https://github.com/aspnet/Home/issues/3508","RelatedDescription":"Closed issue \"DotNetCoreWindowsHosting install corrupt after sysprep\" (#3508)"}],"ResultType":"GitHubIssue"},"Mvc-Issues":{"Issues":[{"Id":"360465107","IsPullRequest":true,"CreatedAt":"2018-09-14T22:12:39","Actor":"dotnet-maestro-bot","Number":"8462","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @JamesNK\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8462","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#8462)"},{"Id":"359704612","IsPullRequest":true,"CreatedAt":"2018-09-14T21:14:49","Actor":"JamesNK","Number":"8453","RawContent":null,"Title":"Change test parameter transformer to slugify values","State":"closed","Body":"Make the parameter transformer tests more applicable to\r\n\r\n![image](https://user-images.githubusercontent.com/303201/45461080-18254900-b755-11e8-824f-e2a36dc556eb.png)","Url":"https://github.com/aspnet/Mvc/pull/8453","RelatedDescription":"Closed or merged PR \"Change test parameter transformer to slugify values\" (#8453)"},{"Id":"359230431","IsPullRequest":false,"CreatedAt":"2018-09-14T19:00:22","Actor":"saddlebear","Number":"8446","RawContent":null,"Title":"Model Not Binding to Subtype with Collection ","State":"closed","Body":"#### Is this a Bug or Feature request?:\r\nBug\r\n\r\n#### Steps to reproduce (preferably a link to a GitHub repo with a repro project):\r\n\r\nhttps://github.com/saddlebear/AspNetCoreModelBindingIssue.git\r\n\r\nIssue concerns ArticleController.cs, Models/Article.cs, Models/Image.cs and Create.cshtml.\r\n\r\nArticle class has an Image class property.   \r\nImage class contains a  List<IFormFile> field.\r\n\r\n#### Description of the problem:\r\n\r\nWhen uploading a file, if Create.cshtml does not contain a field in Image (Image.Caption) other than a collection (Image.FormFiles) then FormFiles will not receive the uploaded form.    If you comment out the form group containing Image.Caption, run the project and attempt to upload a file the file will not be uploaded.  If you uncomment the form group containing Image.Caption, run the program, upload a file, the file will be uploaded into Image.FormFiles.   The Image.Caption field has to be on the form for the uploaded files to be stored in Image.FormFiles. \r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`:\r\n\r\n\r\n<!--\r\n                                    --- NOTE ---\r\n1.  Try enabling logging (in the most verbose level) and see if the details help you in fixing\r\n    the issue you are seeing. Share the logs too if it helps in diagnosing the issue faster.\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging\r\n\r\n2.  If you are seeing an exception, include the full exceptions details (message and stack trace).\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling\r\n\r\n3.  If you believe you have an issue that affects the security of the platform please do\r\n    not create an issue, instead email your issue to 'secure@microsoft.com'. Your report may\r\n    be eligible for our bug bounty. More info: https://technet.microsoft.com/en-us/mt764065.aspx\r\n-->\r\n","Url":"https://github.com/aspnet/Mvc/issues/8446","RelatedDescription":"Closed issue \"Model Not Binding to Subtype with Collection \" (#8446)"},{"Id":"360409425","IsPullRequest":false,"CreatedAt":"2018-09-14T18:30:22","Actor":"wangpengxpy","Number":"8461","RawContent":null,"Title":"A exception occurred when debug source code","State":"open","Body":"#### Is this a Bug ? the follow\r\n\r\n![image](https://user-images.githubusercontent.com/12961992/45568448-44dd7b80-b88f-11e8-85c2-9bffdd8cec78.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12961992/45568099-465a7400-b88e-11e8-8a29-49b06ddca602.png)\r\n\r\n#### Description of the problem:\r\ndebug  mvc source code\r\n\r\n#### Version of \r\nMicrosoft.AspNetCore.App：2.2.0-preview2-35157\r\n","Url":"https://github.com/aspnet/Mvc/issues/8461","RelatedDescription":"Open issue \"A exception occurred when debug source code\" (#8461)"},{"Id":"360408543","IsPullRequest":true,"CreatedAt":"2018-09-14T18:27:29","Actor":"pranavkm","Number":"8460","RawContent":null,"Title":"Design: Use a value provider to allow nested form files","State":"open","Body":"Fixes https://github.com/aspnet/Mvc/issues/7562","Url":"https://github.com/aspnet/Mvc/pull/8460","RelatedDescription":"Open PR \"Design: Use a value provider to allow nested form files\" (#8460)"},{"Id":"360099306","IsPullRequest":true,"CreatedAt":"2018-09-14T17:00:20","Actor":"dotnet-maestro-bot","Number":"8459","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @rynowak\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8459","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#8459)"},{"Id":"360027335","IsPullRequest":true,"CreatedAt":"2018-09-14T16:18:17","Actor":"pranavkm","Number":"8455","RawContent":null,"Title":"Make FileVersionProvider repleacable","State":"closed","Body":"Fixes #6371","Url":"https://github.com/aspnet/Mvc/pull/8455","RelatedDescription":"Closed or merged PR \"Make FileVersionProvider repleacable\" (#8455)"},{"Id":"359681844","IsPullRequest":true,"CreatedAt":"2018-09-14T16:06:32","Actor":"pranavkm","Number":"8452","RawContent":null,"Title":"Allow IFormFile parameters annotated with [FromForm] to be correctly …","State":"closed","Body":"…bound in ApiControllers\r\n\r\nFixes #8311","Url":"https://github.com/aspnet/Mvc/pull/8452","RelatedDescription":"Closed or merged PR \"Allow IFormFile parameters annotated with [FromForm] to be correctly …\" (#8452)"},{"Id":"360047309","IsPullRequest":false,"CreatedAt":"2018-09-13T23:05:03","Actor":"r3dlin3","Number":"8456","RawContent":null,"Title":"Test Controller Logic with [ApiController] attribute","State":"closed","Body":"#### Is this a Bug or Feature request?:\r\nBug apparently\r\n\r\n#### Steps to reproduce (preferably a link to a GitHub repo with a repro project):\r\nI have created a repo (https://github.com/r3dlin3/test-controller-logic) based on:\r\n\r\n- .Net Core 2.1 samples : https://github.com/aspnet/Docs/tree/master/aspnetcore/web-api/define-controller/samples\r\n- Added a test project (based on xunit) with Moq\r\n\r\n#### Description of the problem:\r\nMy controller `ProductsController` inherits from `ControllerBase` ans has the attribute `[ApiController]`.\r\nAll validation of the model has been erased.\r\n\r\nI have one test with a validation error\r\n```c#\r\n        [Fact]\r\n        public async Task Create_ReturnsBadRequest_GivenInvalidModel()\r\n        {\r\n            // Arrange & Act\r\n            var mockRepo = new Mock<IProductsRepository>();\r\n            var controller = new ProductsController(mockRepo.Object);\r\n            controller.ModelState.AddModelError(\"error\",\"some error\");\r\n\r\n            // Act\r\n            var result = await controller.CreateAsync(product: null);\r\n\r\n            // Assert\r\n            Assert.IsType<BadRequestObjectResult>(result);\r\n        }\r\n```\r\n\r\nThe test fails with the following error:\r\n\r\n     System.NullReferenceException : Object reference not set to an instance of an object.\r\n\r\nI was expecting an invalid request.\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`:\r\n\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" Version=\"2.1.3\" />\r\n\r\n<!--\r\n                                    --- NOTE ---\r\n1.  Try enabling logging (in the most verbose level) and see if the details help you in fixing\r\n    the issue you are seeing. Share the logs too if it helps in diagnosing the issue faster.\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging\r\n\r\n2.  If you are seeing an exception, include the full exceptions details (message and stack trace).\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling\r\n\r\n3.  If you believe you have an issue that affects the security of the platform please do\r\n    not create an issue, instead email your issue to 'secure@microsoft.com'. Your report may\r\n    be eligible for our bug bounty. More info: https://technet.microsoft.com/en-us/mt764065.aspx\r\n-->\r\n","Url":"https://github.com/aspnet/Mvc/issues/8456","RelatedDescription":"Closed issue \"Test Controller Logic with [ApiController] attribute\" (#8456)"},{"Id":"359572759","IsPullRequest":false,"CreatedAt":"2018-09-13T22:38:45","Actor":"martincostello","Number":"8451","RawContent":null,"Title":"Application fails to start if Microsoft.ApplicationInsights.AspNetCore is a dependency on Linux with 2.2.0 preview 2","State":"closed","Body":"#### Is this a Bug or Feature request?:\r\n\r\nBug.\r\n\r\n#### Steps to reproduce (preferably a link to a GitHub repo with a repro project):\r\n\r\nTo replicate, checkout martincostello/website@e0a9e36bc935d18eb9fe272357f02432080fce73 (see martincostello/website#228) and run `build.sh`.\r\n\r\n#### Description of the problem:\r\n\r\nThe application fails to start with the following exception and stack trace:\r\n\r\n```\r\nApplication startup exception: System.ArgumentNullException: Value cannot be null.\r\n   at System.Threading.Monitor.ReliableEnter(Object obj, Boolean& lockTaken)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.UpdateCollection()\r\n   at Microsoft.Extensions.Primitives.ChangeToken.<>c__DisplayClass0_0.<OnChange>b__0(Object s)\r\n   at System.Threading.CancellationTokenSource.InternalRegister(Action`1 callback, Object stateForCallback, SynchronizationContext syncContext, ExecutionContext executionContext)\r\n   at System.Threading.CancellationToken.Register(Action`1 callback, Object state, Boolean useSyncContext, Boolean useExecutionContext)\r\n   at Microsoft.Extensions.Primitives.CompositeChangeToken.RegisterChangeCallback(Action`1 callback, Object state)\r\n   at Microsoft.Extensions.Primitives.ChangeToken.OnChange(Func`1 changeTokenProducer, Action changeTokenConsumer)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider..ctor(IEnumerable`1 actionDescriptorProviders, IEnumerable`1 actionDescriptorChangeProviders)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitSingleton(SingletonCallSite singletonCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitSingleton(SingletonCallSite singletonCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable(IEnumerableCallSite enumerableCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n   at Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(IApplicationBuilder app, Action`1 configureRoutes)\r\n   at Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvcWithDefaultRoute(IApplicationBuilder app)\r\n   at MartinCostello.Website.Startup.Configure(IApplicationBuilder app, IServiceProvider serviceProvider, IOptionsSnapshot`1 options) in /home/travis/build/martincostello/website/src/Website/Startup.cs:line 104\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Hosting.ConventionBasedStartup.Configure(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.Mvc.Internal.MiddlewareFilterBuilderStartupFilter.<>c__DisplayClass0_0.<Configure>g__MiddlewareFilterBuilder|0(IApplicationBuilder builder)\r\n   at Microsoft.ApplicationInsights.AspNetCore.ApplicationInsightsStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.HostFilteringStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.Hosting.Internal.AutoRequestServicesStartupFilter.<>c__DisplayClass0_0.<Configure>b__0(IApplicationBuilder builder)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\n```\r\n\r\nExample failing build: https://travis-ci.org/martincostello/website/builds/427758102\r\n\r\nIt appears that the constructor of `DefaultActionDescriptorCollectionProvider` is calling into itself before `_lock` has been initialized due to a change token being notified due to some sort of race condition.\r\n\r\nhttps://github.com/aspnet/Mvc/blob/43d4416a1d1bf0e568d66d884f9e591c26a8772b/src/Microsoft.AspNetCore.Mvc.Core/Infrastructure/DefaultActionDescriptorCollectionProvider.cs#L36-L40\r\n\r\nhttps://github.com/aspnet/Mvc/blob/43d4416a1d1bf0e568d66d884f9e591c26a8772b/src/Microsoft.AspNetCore.Mvc.Core/Infrastructure/DefaultActionDescriptorCollectionProvider.cs#L107-L112\r\n\r\nIt looks like that change was introduced by 0fcf2448c3d8f92a018927dfdaec42fc869c73db.\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`:\r\n\r\nMicrosoft.AspNetCore.App `2.2.0-preview2-35157`\r\n","Url":"https://github.com/aspnet/Mvc/issues/8451","RelatedDescription":"Closed issue \"Application fails to start if Microsoft.ApplicationInsights.AspNetCore is a dependency on Linux with 2.2.0 preview 2\" (#8451)"},{"Id":"360086822","IsPullRequest":true,"CreatedAt":"2018-09-13T22:38:43","Actor":"rynowak","Number":"8458","RawContent":null,"Title":"Fix #8451","State":"closed","Body":"Change tokens can call into your code IMMEDIATELY when you subscribe. I\r\nreviewed our other usage of ChangeToken.OnChange in MVC and everything\r\nlooks good.","Url":"https://github.com/aspnet/Mvc/pull/8458","RelatedDescription":"Closed or merged PR \"Fix #8451\" (#8458)"},{"Id":"360078223","IsPullRequest":false,"CreatedAt":"2018-09-13T21:46:14","Actor":"Rabadash8820","Number":"8457","RawContent":null,"Title":"Possible bug when using tag helpers for multiple Model properties with the same name","State":"open","Body":"#### Is this a Bug or Feature request?:\r\nPossibly a bug?  If not then feature request, or at least request for a workaround :P\r\n\r\n#### Steps to reproduce (preferably a link to a GitHub repo with a repro project):\r\n1. Clone my super simple [MultipleInputTagHelper](https://github.com/Rabadash8820/MultipleInputTagHelper) project\r\n2. Run it\r\n3. Inspect the generated markup of the Index page\r\n\r\n#### Description of the problem:\r\nThe linked project contains a Model class called `PersonModel` like this:\r\n\r\n```cs\r\n    public class PersonModel {\r\n\r\n        [Required]\r\n        public string Name { get; set; }\r\n        [Range(18, 150)]\r\n        public int Age { get; set; }\r\n\r\n        public PersonModel Mother { get; set; }\r\n        public PersonModel Father { get; set; }\r\n\r\n    }\r\n```\r\n\r\nI also have a Partial View (`_Person.cshtml`), for rendering the Name/Age fields of a particular `PersonModel`.  In the `Index` View, I try to load this Partial View three times, once for a particular person, once for their `Mother`, and once for their `Father`, like this:\r\n\r\n```html\r\n    <partial name=\"_Person\" model=\"Model\" />\r\n\r\n    <fieldset>\r\n        <legend>@nameof(Model.Mother)</legend>\r\n        @{ ViewData[\"ParentPrefix\"] = nameof(Model.Mother); }\r\n        <partial name=\"_Person\" model=\"Model.Mother\" view-data=\"ViewData\" />\r\n    </fieldset>\r\n\r\n    <fieldset>\r\n        <legend>@nameof(Model.Father)</legend>\r\n        @{ ViewData[\"ParentPrefix\"] = nameof(Model.Father); }\r\n        <partial name=\"_Person\" model=\"Model.Father\" view-data=\"ViewData\" />\r\n    </fieldset>\r\n```\r\n\r\nThe Partial View then uses `<input>` and `<label>` tag helpers to generate the respective elements, prefixing the generated `id`s and `name`s with a \"parent prefix\" to keep them unique, like this:\r\n\r\n```cs\r\n@{\r\n    string parentPrefix = (string)ViewData[\"ParentPrefix\"];\r\n    if (!string.IsNullOrEmpty(parentPrefix)) {\r\n        parentPrefix += \".\";\r\n    }\r\n}\r\n\r\n<label for=\"@parentPrefix@nameof(PersonModel.Name)\" asp-for=\"Name\"></label>\r\n<input id=\"@parentPrefix@nameof(PersonModel.Name)\" name=\"@parentPrefix@nameof(PersonModel.Name)\" asp-for=\"Name\" />\r\n```\r\n\r\nFor this silly little example, it would've been easy enough to use `asp-for=\"Name\"`, `asp-for=\"Father.Name\"`, and `asp-for=\"Mother.Name\"`.  However, in the actual app that I'm working on, there are many more fields involved, so having a Partial View that can output the `Mother` *or* `Father` fields is very important for staying DRY.  Unfortunately, the `<input>` tag helper appears to only add `data-val-*` attributes to the first instance of a particular field.  For example, with `Name`:\r\n\r\n```html\r\n<label for=\"Name\">Name</label>\r\n<input id=\"Name\" name=\"Name\" type=\"text\" data-val=\"true\" data-val-required=\"The Name field is required.\" value=\"Dan\" />\r\n<fieldset>\r\n  <legend>Mother</legend> \r\n  <label for=\"Mother.Name\">Name</label>\r\n  <input id=\"Mother.Name\" name=\"Mother.Name\" type=\"text\" value=\"Jennifer\" />   \r\n</fieldset>\r\n<fieldset>\r\n  <legend>Father</legend>\r\n  <label for=\"Father.Name\">Name</label>\r\n  <input id=\"Father.Name\" name=\"Father.Name\" type=\"text\" value=\"David\" />\r\n</fieldset>\r\n```\r\n\r\nI have poured over the source code for both [jQuery Unobtrusive Validation](https://github.com/aspnet/jquery-validation-unobtrusive/blob/master/src/jquery.validate.unobtrusive.js) and the [InputTagHelper](https://github.com/aspnet/Mvc/blob/release/2.2/src/Microsoft.AspNetCore.Mvc.TagHelpers/InputTagHelper.cs), and cannot figure out why the subsequent `asp-for` tag helpers are not generating all attributes.  I even tried making my own \"`ControlPrefixTagHelper`\" that would add a prefix (e.g., `Mother.`) to an `<input>`'s `asp-for` attribute before the `InputTagHelper` is processed, but there's apparently no way to modify `asp-for` in the `TagHelperOutput`!  Short of duplicating my Partial View into separate, child/Mother/Father files, is there some work around for what I'm trying to do?\r\n\r\n\r\n#### Version of `Microsoft.AspNetCore.App`: 2.1.1\r\n\r\nNo logs or Exceptions to report.\r\n","Url":"https://github.com/aspnet/Mvc/issues/8457","RelatedDescription":"Open issue \"Possible bug when using tag helpers for multiple Model properties with the same name\" (#8457)"},{"Id":"359845876","IsPullRequest":false,"CreatedAt":"2018-09-13T10:59:16","Actor":"TimRowe","Number":"8454","RawContent":null,"Title":"dynamic page cache bug?","State":"open","Body":"I build a mvc page (url is /home/time ) to show current time.\r\nThe code in the view is like below\r\n`<p>@(DateTime.Now.ToLongTimeString())</p>`\r\n\r\nBut when I open a new tab in explorer (disable cache is not set), it would show the same time.\r\nJust like the page is cached, but I can see it has sent request to the webserver.The time will change when i press the explorer reflesh button.\r\n\r\nAny one can explain it?\r\nHere is my test project. \r\nAnd This problem will raised only in remote server deploy(not localhost debug).\r\n[WebApplication6.zip](https://github.com/aspnet/Mvc/files/2381635/WebApplication6.zip)\r\n\r\n","Url":"https://github.com/aspnet/Mvc/issues/8454","RelatedDescription":"Open issue \"dynamic page cache bug?\" (#8454)"},{"Id":"359400402","IsPullRequest":true,"CreatedAt":"2018-09-12T21:21:30","Actor":"dotnet-maestro-bot","Number":"8448","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @JamesNK\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8448","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#8448)"},{"Id":"359565467","IsPullRequest":false,"CreatedAt":"2018-09-12T17:25:55","Actor":"Eilon","Number":"8450","RawContent":null,"Title":"IFormFile is always null when using [ApiController] Attribute in .Net Core 2.1","State":"closed","Body":"_From @karelz on Wednesday, 12 September 2018 16:20:52_\r\n\r\n_From @skamal-dev on September 12, 2018 13:36_\n\nNot sure why this has not been documented or its a bug but whenever we use ApiController attribute in .Net Core 2.1 version, and use the api method signature as ;\r\n```c#\r\n[Route(\"api/[controller]\")]\r\n [ApiController]\r\n public class UploadFileController : ControllerBase\r\n {\r\n    [HttpPost]\r\n    public async Task<IActionResult> Post([FromForm] IFormFile file)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nWhenever we send request from client the parameter \"file\" is always null, though the Request.Form.Files do contain the parameter details.\r\n\r\nMoment I removed [ApiControlller] and send request from the client, I can see the \"file\" parameter having values.\n\n_Copied from original issue: dotnet/corefx#32256_\r\n\r\n_Copied from original issue: aspnet/Home#3533_","Url":"https://github.com/aspnet/Mvc/issues/8450","RelatedDescription":"Closed issue \"IFormFile is always null when using [ApiController] Attribute in .Net Core 2.1\" (#8450)"},{"Id":"359178019","IsPullRequest":false,"CreatedAt":"2018-09-12T16:56:09","Actor":"seriouz","Number":"8445","RawContent":null,"Title":"Razor class lib: .cshtml changes at design time","State":"closed","Body":"I recently opened the issue #8443 but i am not very happy with the answer.\r\nMy main problem is, that in my Aspnet core MVC project i have many descendant Razor class lib projects. Now when i change one of the .cshtml files in any of the projects and press F5 no change is visible. Of course the razor class libs are precompiled. So i thought i disable the precompilation with `<RazorCompileOnBuild>false</RazorCompileOnBuild>`. But now the views (files) are no longer found, because they are laying outside of the main project in the View folders of the razor class lib projects.\r\n\r\nHow can i get a good experience at design time? To compile a razor class lib and restart the mvc app recently for small changes is not very effective. My idea with implementing a [IViewLocationExpander](https://github.com/seriouz/DelocatedRazorViews/blob/master/src/ExtractedViewLocationExpander.cs) [does not work](https://github.com/aspnet/Mvc/issues/8443#issuecomment-420340649).","Url":"https://github.com/aspnet/Mvc/issues/8445","RelatedDescription":"Closed issue \"Razor class lib: .cshtml changes at design time\" (#8445)"},{"Id":"358734050","IsPullRequest":false,"CreatedAt":"2018-09-12T16:27:11","Actor":"Eilon","Number":"8440","RawContent":null,"Title":"2.2 Adding ProducesResponseType overwrites default HTTP OK response.","State":"closed","Body":"_From @TrieBr on Thursday, 06 September 2018 21:56:05_\r\n\r\nI just upgraded my ASP 2.1 project to 2.2.0-preview. I upgraded solely on \"API Controller conventions\" outlined in the [2.2 Roadmap](https://github.com/aspnet/Announcements/issues/307) to ease documentation generation. \r\n\r\nWhen I have an action on a controller without a `ProducesRespponseType` attribute, a default HTTP status 200 is output in ApiExplorer inferring from the `ActionResult` type.\r\n\r\n```\r\n        [HttpPost(\"register\")]\r\n        [AllowAnonymous]\r\n        public async Task<ActionResult<ApiResponse<ApiResonseNoData>>> Register([FromBody] RegisterViewModel viewModel)\r\n        {\r\n            ValidateModel();\r\n            var u = new User { UserName = viewModel.Username, Email = viewModel.Username, FirstName = \"\", LastName = \"\" };\r\n            var create = await _userManager.CreateAsync(u, viewModel.Password);\r\n            return ApiResponse(\"Success\");\r\n        }\r\n```\r\n\r\nBy inspecting an instance of ApiExplorer (`IApiDescriptionGroupCollectionProvider`) In Visual Studio, I can see there is a single entry in SupportedResponseTypes for the HTTP 200.\r\n\r\nHowever, When I add an HTTP 422 status like the following:\r\n\r\n```\r\n    [HttpPost(\"register\")]\r\n        [AllowAnonymous]\r\n        [ProducesResponseType(typeof(ApiResponse<ValidationMessageSet>), (int)HttpStatusCode.UnprocessableEntity)]\r\n        public async Task<ActionResult<ApiResponse<ApiResonseNoData>>> Register([FromBody] RegisterViewModel viewModel)\r\n        {\r\n            ValidateModel();\r\n            var u = new User { UserName = viewModel.Username, Email = viewModel.Username, FirstName = \"\", LastName = \"\" };\r\n            var create = await _userManager.CreateAsync(u, viewModel.Password);\r\n            return ApiResponse(\"Success\");\r\n        }\r\n\r\n```\r\nSuddenly this becomes the only ResoponseType in ApiExplorer. If the intention is to get rid of \"Attribute Soup\", any `ProducesRespponseType` attributes added to an action should be added **in addition** to the default HTTP 200 response based on the `ActionResult` in my opinion. Eg If I add a `ProducesResponseType` of `HttpStatusCode.UnprocessableEntity`, then Api Explorer should have a 422 response and a 200 response.\r\n\r\nOn an semi-related note, since ApiControllers Provide [Automatic 400 responses](https://docs.microsoft.com/en-us/aspnet/core/web-api/index?view=aspnetcore-2.1#automatic-http-400-responses) for validation errors, it would also make sense for ASP Core to automatically provide this response in one of the valid response types. With the above bug (feature?), I now have to add a HTTP 400 (or 422 in my case) response for validation errors and a HTTP 200 response which again results in Attribute Soup. Maybe I'm doing something wrong or misunderstanding something?\r\n\r\n> \r\n> .NET Core SDK (reflecting any global.json):\r\n>  Version:   2.2.100-preview1-009349\r\n>  Commit:    3f45457548\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     Windows\r\n>  OS Version:  10.0.17134\r\n>  OS Platform: Windows\r\n>  RID:         win10-x64\r\n>  Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100-preview1-009349\\\r\n> \r\n> Host (useful for support):\r\n>   Version: 2.2.0-preview-26820-02\r\n>   Commit:  b4726350b3\r\n> \r\n> .NET Core SDKs installed:\r\n>   2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n>   2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n>   2.2.100-preview1-009349 [C:\\Program Files\\dotnet\\sdk]\r\n> \r\n> .NET Core runtimes installed:\r\n>   Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n>   Microsoft.AspNetCore.All 2.2.0-preview1-35029 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n>   Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 2.2.0-preview1-35029 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 2.2.0-preview-26820-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n\r\n\r\n_Copied from original issue: aspnet/Home#3513_","Url":"https://github.com/aspnet/Mvc/issues/8440","RelatedDescription":"Closed issue \"2.2 Adding ProducesResponseType overwrites default HTTP OK response.\" (#8440)"},{"Id":"359118581","IsPullRequest":false,"CreatedAt":"2018-09-12T16:25:38","Actor":"joetherod","Number":"8444","RawContent":null,"Title":"HttpClientFactory -ability in ConfigureServices to indicate HttpClientHandler for the HttpClient","State":"closed","Body":"In the startup where you add httpclient into the new client factory, is there a way to indicate a HttpClientHandler for the added clients by name and for generic ones?\r\nI only see the ability to configure other properties on the httpclient.\r\n\r\nserviceCollection.AddHttpClient<IGenericHttpClient>(client => client.SetHttpClientHandler ());","Url":"https://github.com/aspnet/Mvc/issues/8444","RelatedDescription":"Closed issue \"HttpClientFactory -ability in ConfigureServices to indicate HttpClientHandler for the HttpClient\" (#8444)"},{"Id":"359524632","IsPullRequest":false,"CreatedAt":"2018-09-12T15:05:13","Actor":"mattman73","Number":"8449","RawContent":null,"Title":"Httpcontext is null","State":"open","Body":"#### Is this a Bug or Feature request?:\r\nHelp\r\n\r\n#### Description of the problem:\r\nHi all\r\nI need some help I have been working on a way to load a page from within the program.cs file but I can not work out how this is done I have look on the web to find the answer but for the life of me, I cannot find anything that will work.\r\nWhat I'm looking to do is after a lookup I need to load the page again with an added searchstring, I have all the code doing the look up and cross-checking but I'm unable to get the code to redirect to the page again with the added searchstring.\r\nI have tried to DI the Httpcontecxt but this keeps returning null.\r\nany pointers would be great.\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`:\r\nMicrosoft.aspnetcore.app 2.1.0\r\n\r\n\r\n<!--\r\n                                    --- NOTE ---\r\n1.  Try enabling logging (in the most verbose level) and see if the details help you in fixing\r\n    the issue you are seeing. Share the logs too if it helps in diagnosing the issue faster.\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging\r\n\r\n2.  If you are seeing an exception, include the full exceptions details (message and stack trace).\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling\r\n\r\n3.  If you believe you have an issue that affects the security of the platform please do\r\n    not create an issue, instead email your issue to 'secure@microsoft.com'. Your report may\r\n    be eligible for our bug bounty. More info: https://technet.microsoft.com/en-us/mt764065.aspx\r\n-->\r\n","Url":"https://github.com/aspnet/Mvc/issues/8449","RelatedDescription":"Open issue \"Httpcontext is null\" (#8449)"},{"Id":"359381194","IsPullRequest":true,"CreatedAt":"2018-09-12T09:16:51","Actor":"JamesNK","Number":"8447","RawContent":null,"Title":"Fix endpoint support for area/controller/action in attribute route","State":"closed","Body":"Attribute route fix separated from parameter transformer changes from https://github.com/aspnet/Mvc/pull/8329, plus tests","Url":"https://github.com/aspnet/Mvc/pull/8447","RelatedDescription":"Closed or merged PR \"Fix endpoint support for area/controller/action in attribute route\" (#8447)"},{"Id":"358768020","IsPullRequest":true,"CreatedAt":"2018-09-11T21:09:37","Actor":"NTaylorMullen","Number":"8441","RawContent":null,"Title":"Add additional logging to diagnose flaky cache tag test.","State":"closed","Body":"- Didn't want to add logging directly to product code so made a shim TagHelper that should reflect the same behavior but with more logging.\r\n\r\n#8281 \r\n\r\nWill merge this up to master if everything looks good (had failures in 2.2 and master).","Url":"https://github.com/aspnet/Mvc/pull/8441","RelatedDescription":"Closed or merged PR \"Add additional logging to diagnose flaky cache tag test.\" (#8441)"},{"Id":"359084380","IsPullRequest":false,"CreatedAt":"2018-09-11T16:45:09","Actor":"seriouz","Number":"8443","RawContent":null,"Title":" Bug: ExpandViewLocations() resolving in parent folder","State":"closed","Body":"#### Is this a Bug or Feature request?:\r\nBug\r\n\r\n#### Description of the problem:\r\nIn-Short: I cannot use `/../` in a custom IViewLocationExpander in a viewLocation. The file on the disk won't be resolved.\r\n\r\nhttps://github.com/seriouz/DelocatedRazorViews/blob/master/src/ExtractedViewLocationExpander.cs#L14\r\n\r\nExample App: https://github.com/seriouz/DelocatedRazorViews\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`: 2.1.2","Url":"https://github.com/aspnet/Mvc/issues/8443","RelatedDescription":"Closed issue \" Bug: ExpandViewLocations() resolving in parent folder\" (#8443)"},{"Id":"358437204","IsPullRequest":true,"CreatedAt":"2018-09-10T23:21:36","Actor":"dougbu","Number":"8435","RawContent":null,"Title":"Rationalize code sharing between the three code generation projects","State":"closed","Body":"- #8417\r\n- just two files needed to be moved&hellip;","Url":"https://github.com/aspnet/Mvc/pull/8435","RelatedDescription":"Closed or merged PR \"Rationalize code sharing between the three code generation projects\" (#8435)"},{"Id":"358821912","IsPullRequest":true,"CreatedAt":"2018-09-10T23:03:42","Actor":"dotnet-maestro-bot","Number":"8442","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @JamesNK\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8442","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#8442)"},{"Id":"358449049","IsPullRequest":true,"CreatedAt":"2018-09-10T22:12:09","Actor":"JamesNK","Number":"8436","RawContent":null,"Title":"No HttpContext to route constraints in MvcEndpointDataSource","State":"closed","Body":"No longer needed. `exists` constraint gets services from its constructor and argument null exceptions have been removed.","Url":"https://github.com/aspnet/Mvc/pull/8436","RelatedDescription":"Closed or merged PR \"No HttpContext to route constraints in MvcEndpointDataSource\" (#8436)"},{"Id":"358434900","IsPullRequest":true,"CreatedAt":"2018-09-10T21:32:54","Actor":"dougbu","Number":"8434","RawContent":null,"Title":"Remove `CodeAnnotations`","State":"closed","Body":"- #8416\r\n- turns out this required little on top of dougbu/remove.custom.tool","Url":"https://github.com/aspnet/Mvc/pull/8434","RelatedDescription":"Closed or merged PR \"Remove `CodeAnnotations`\" (#8434)"},{"Id":"358728437","IsPullRequest":false,"CreatedAt":"2018-09-10T17:53:48","Actor":"Eilon","Number":"8439","RawContent":null,"Title":"Unable to use client certificate authentication with WebApplicationFactory","State":"open","Body":"_From @karelz on Friday, 07 September 2018 14:12:44_\r\n\r\n_From @vdachev on September 7, 2018 13:1_\n\nHello,\r\n\r\nI'm trying to set up an integration test for a web application that uses certificate authentication. I use the following code fragment to instantiate the `HttpClient`:\r\n```csharp\r\nvar factory = new WebApplicationFactory<Startup>();\r\nHttpClient client = factory.CreateClient();\r\n```\r\nHowever, I want to pass a client certificate when requesting a resource. The problem is, the client certificate collection is stored in the `HttpClientHandler` but I could not find a way to provide the `WebApplicationFactory` constructor with an instance to the `HttpClientHandler`, neither I found a way to access it through the `HttpClient` or `WebApplicationFactory` instances.\r\n\r\nCould you please hint me of a way to achieve that?\n\n_Copied from original issue: dotnet/corefx#32159_\r\n\r\n_Copied from original issue: aspnet/Home#3518_","Url":"https://github.com/aspnet/Mvc/issues/8439","RelatedDescription":"Open issue \"Unable to use client certificate authentication with WebApplicationFactory\" (#8439)"},{"Id":"358528429","IsPullRequest":false,"CreatedAt":"2018-09-10T16:48:17","Actor":"drauch","Number":"8437","RawContent":null,"Title":"UseStatusCodePagesWithReExecute behaves differently in 2.1.x (migration from 1.1.x)","State":"closed","Body":"Hi!\r\n\r\nWe migrated from ASP.NET Core 1.1.x to 2.1.x and run into problems with our `UseStatusCodePagesWithReExecute()` middleware.\r\n\r\nUsing `UseStatusCodePagesWithReExecute(\"/Error\")` behaves different now. Previously, if the user was at `https://server/WebApp/12345` and run into an exception we could obtain `12345` from the route values when executing the Error controller action. Now it is not possible anymore.\r\n\r\nAre the route values cleared in some way now? Why is this behaving differently? How to obtain `12345` when executing the Error action?\r\n\r\nMaybe related:\r\nBefore upgrading we hosted our application at `https://server/WebApp/`, which is no longer possible in ASP.NET Core 2.1.x. We must host it at `https://server/` now and use `UsePathBase(\"/WebApp\")` instead.","Url":"https://github.com/aspnet/Mvc/issues/8437","RelatedDescription":"Closed issue \"UseStatusCodePagesWithReExecute behaves differently in 2.1.x (migration from 1.1.x)\" (#8437)"},{"Id":"358541291","IsPullRequest":false,"CreatedAt":"2018-09-10T09:31:41","Actor":"qibunext","Number":"8438","RawContent":null,"Title":"Memory cache grows, does not automatically reclaim, I am using the method is wrong?","State":"open","Body":"Memory cache grows, does not automatically reclaim, I am using the method is wrong?\r\n```c#\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp2.1\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.AspNetCore.App\",\r\n      \"version\": \"2.1.2\"\r\n    },\r\n    \"configProperties\": {\r\n      \"System.GC.Concurrent\": false,\r\n      \"System.GC.Server\": false\r\n    }\r\n  }\r\n}\r\n```","Url":"https://github.com/aspnet/Mvc/issues/8438","RelatedDescription":"Open issue \"Memory cache grows, does not automatically reclaim, I am using the method is wrong?\" (#8438)"},{"Id":"358433493","IsPullRequest":false,"CreatedAt":"2018-09-10T02:40:08","Actor":"GreenHand-Ben","Number":"8433","RawContent":null,"Title":"Error publishing document:An unknown WinINet error has occurred (code 12113).","State":"closed","Body":"","Url":"https://github.com/aspnet/Mvc/issues/8433","RelatedDescription":"Closed issue \"Error publishing document:An unknown WinINet error has occurred (code 12113).\" (#8433)"}],"ResultType":"GitHubIssue"},"SignalR-Issues":{"Issues":[{"Id":"360421680","IsPullRequest":false,"CreatedAt":"2018-09-14T19:11:16","Actor":"aspnet-hello","Number":"2962","RawContent":null,"Title":"Test failure: CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=554340&buildTypeId=XPlat_Linux_UbuntuUniverseCoreCLR) occasionally with the following error:\r\n```\r\nSystem.TimeoutException : Operation in CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser timed out at /_/test/Microsoft.AspNetCore.SignalR.Redis.Tests/RedisEndToEnd.cs:118\r\n   at System.Threading.Tasks.TaskExtensions.OrTimeout[T](Task`1 task, TimeSpan timeout, String memberName, String filePath, Nullable`1 lineNumber) in /_/test/Microsoft.AspNetCore.SignalR.Tests.Utils/TaskExtensions.cs:line 67\r\n   at Microsoft.AspNetCore.SignalR.Redis.Tests.RedisEndToEndTests.CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser(HttpTransportType transportType, String protocolName) in /_/test/Microsoft.AspNetCore.SignalR.Redis.Tests/RedisEndToEnd.cs:line 118\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\n| [0.001s] TestLifetime Information: Starting test CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser-WebSockets-json at 2018-09-14T18:42:52\r\n| [0.001s] TestLifetime Information: Starting test CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser_WebSockets_json at 2018-09-14T18:42:52\r\n| [0.009s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Information: u-Fmhpaac8V1smG-xHn0_w - Starting transport. Transfer mode: Text. Url: 'ws://127.0.0.1:33471/echo?id=u-Fmhpaac8V1smG-xHn0_w'.\r\n| [0.013s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Information: u-Fmhpaac8V1smG-xHn0_w - HttpConnection Started.\r\n| [0.014s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: u-Fmhpaac8V1smG-xHn0_w - Using HubProtocol 'json v1'.\r\n| [0.016s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: u-Fmhpaac8V1smG-xHn0_w - HubConnection started.\r\n| [0.020s] Microsoft.AspNetCore.Http.Connections.Client.Internal.WebSocketsTransport Information: 0BpzXJNjWpO4uL9QlwOPMg - Starting transport. Transfer mode: Text. Url: 'ws://127.0.0.1:45681/echo?id=0BpzXJNjWpO4uL9QlwOPMg'.\r\n| [0.021s] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Information: 0BpzXJNjWpO4uL9QlwOPMg - HttpConnection Started.\r\n| [0.021s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: 0BpzXJNjWpO4uL9QlwOPMg - Using HubProtocol 'json v1'.\r\n| [0.023s] Microsoft.AspNetCore.SignalR.Client.HubConnection Information: 0BpzXJNjWpO4uL9QlwOPMg - HubConnection started.\r\n| [5.031s] TestLifetime Information: Finished test CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser_WebSockets_json in 5.0293545s\r\n| [5.037s] TestLifetime Information: Finished test CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser-WebSockets-json in 5.035245s\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @muratg\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/SignalR/issues/2962","RelatedDescription":"Open issue \"Test failure: CanSendAndReceiveUserMessagesFromMultipleConnectionsWithSameUser\" (#2962)"},{"Id":"359686900","IsPullRequest":true,"CreatedAt":"2018-09-14T18:37:05","Actor":"dotnet-maestro-bot","Number":"2950","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @BrennanConroy\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/2950","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2950)"},{"Id":"360407315","IsPullRequest":true,"CreatedAt":"2018-09-14T18:23:38","Actor":"BrennanConroy","Number":"2961","RawContent":null,"Title":"[Java] Add Invoke support","State":"open","Body":"https://github.com/aspnet/SignalR/issues/2926","Url":"https://github.com/aspnet/SignalR/pull/2961","RelatedDescription":"Open PR \"[Java] Add Invoke support\" (#2961)"},{"Id":"360286811","IsPullRequest":false,"CreatedAt":"2018-09-14T12:35:59","Actor":"valeriob","Number":"2960","RawContent":null,"Title":"Allow signalr-protocol-msgpack to be use with UMD","State":"open","Body":"Could you pls export this module as namespace as well ?\r\n(same treatment given to the signalr npm package https://github.com/aspnet/SignalR/issues/951 )\r\n\r\n![image](https://user-images.githubusercontent.com/1522516/45550546-6573ea00-b82b-11e8-909a-df94a2fb3390.png)\r\n\r\nThanks","Url":"https://github.com/aspnet/SignalR/issues/2960","RelatedDescription":"Open issue \"Allow signalr-protocol-msgpack to be use with UMD\" (#2960)"},{"Id":"359812824","IsPullRequest":true,"CreatedAt":"2018-09-14T05:11:18","Actor":"davidfowl","Number":"2953","RawContent":null,"Title":"Improve the handshake request parsing errors","State":"closed","Body":"- Print out the raw handshake payload as utf8 text if it fails to parse as JSON or if we're missing properties. This should help flesh out potentially buggy clients.\r\n\r\n#2949","Url":"https://github.com/aspnet/SignalR/pull/2953","RelatedDescription":"Closed or merged PR \"Improve the handshake request parsing errors\" (#2953)"},{"Id":"360040058","IsPullRequest":true,"CreatedAt":"2018-09-13T20:26:45","Actor":"dotnet-maestro-bot","Number":"2959","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @BrennanConroy\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.1-to-release/2.2:merge/release/2.1-to-release/2.2\r\ngit merge merge/release/2.1-to-release/2.2\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.1-to-release/2.2' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.1.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/2959","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#2959)"},{"Id":"359140265","IsPullRequest":false,"CreatedAt":"2018-09-13T19:44:41","Actor":"aspnet-hello","Number":"2943","RawContent":null,"Title":"Test failure: StreamDoesNotStartIfTokenAlreadyCanceled","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=551277&buildTypeId=Releases_21Public_UbuntuUniverse) occasionally with the following error:\r\n```\r\nSystem.Exception : 1 error(s) logged.\r\nMicrosoft.AspNetCore.Http.Connections.Client.HttpConnection - TransportThrewExceptionOnStop - The transport threw an exception while stopping.\r\n===================\r\nSystem.Net.Http.HttpRequestException: Response status code does not indicate success: 404 (Not Found).\r\n   at System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()\r\n   at Microsoft.AspNetCore.Http.Connections.Client.Internal.SendUtils.<SendMessages>d__0.MoveNext() in /_/src/Microsoft.AspNetCore.Http.Connections.Client/Internal/SendUtils.cs:line 81\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport.<ProcessAsync>d__18.MoveNext() in /_/src/Microsoft.AspNetCore.Http.Connections.Client/Internal/ServerSentEventsTransport.cs:line 105\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Http.Connections.Client.Internal.ServerSentEventsTransport.<StopAsync>d__20.MoveNext() in /_/src/Microsoft.AspNetCore.Http.Connections.Client/Internal/ServerSentEventsTransport.cs:line 228\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Http.Connections.Client.HttpConnection.<DisposeAsyncCore>d__43.MoveNext() in /_/src/Microsoft.AspNetCore.Http.Connections.Client/HttpConnection.cs:line 256\r\n===================\r\n   at Microsoft.AspNetCore.SignalR.Tests.VerifyNoErrorsScope.Dispose() in /_/test/Microsoft.AspNetCore.SignalR.Tests.Utils/VerifyNoErrorsScope.cs:line 63\r\n   at Microsoft.AspNetCore.SignalR.Tests.ServerLogScope.Dispose() in /_/test/Microsoft.AspNetCore.SignalR.Tests.Utils/ServerLogScope.cs:line 73\r\n   at Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.<StreamDoesNotStartIfTokenAlreadyCanceled>d__12.MoveNext() in /_/test/Microsoft.AspNetCore.SignalR.Client.FunctionalTests/HubConnectionTests.cs:line 431\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n------- Stdout: -------\r\n| [2018-09-11T10:42:19] TestLifetime Information: Starting test StreamDoesNotStartIfTokenAlreadyCanceled_json_ServerSentEvents_default\r\n| [2018-09-11T10:42:19] ServerLogScope Information: Server log scope started.\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.SignalR.Client.HubConnection Trace: Waiting on Connection Lock in StartAsyncCore (/_/src/Microsoft.AspNetCore.SignalR.Client.Core/HubConnection.cs:211).\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.SignalR.Client.HubConnection Debug: Starting HubConnection.\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Starting HttpConnection.\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Establishing connection with server at 'http://127.0.0.1:37247/default'.\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.Http.Connections.Client.Internal.LoggingHttpMessageHandler Trace: Sending HTTP request POST 'http://127.0.0.1:37247/default/negotiate'.\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGNQCPP2ULO\" started.\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.1 POST http://127.0.0.1:37247/default/negotiate application/x-www-form-urlencoded 0\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler Debug: AuthenticationScheme: Bearer was not authenticated.\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.Routing.RouteBase Debug: Request successfully matched the route with name '(null)' and template '/default/negotiate'.\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionManager Debug: New connection wBdcJmSXwkiX0T22dq1cjQ created.\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.Http.Connections.Internal.HttpConnectionDispatcher Debug: Sending negotiation response.\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGNQCPP2ULO\" completed keep alive response.\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request finished in 2.0058ms 200 application/json\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Established connection 'wBdcJmSXwkiX0T22dq1cjQ' with the server.\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Skipping transport WebSockets because it was disabled by the client.\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.Http.Connections.Client.HttpConnection Debug: Starting transport 'ServerSentEvents' with Url: http://127.0.0.1:37247/default?id=wBdcJmSXwkiX0T22dq1cjQ.\r\n| [2018-09-11T10:42:19] Microsoft.AspNetCore.Http.Connections.Client.Internal.Server\r\n...\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.1.\r\n\r\nCC @muratg\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/SignalR/issues/2943","RelatedDescription":"Closed issue \"Test failure: StreamDoesNotStartIfTokenAlreadyCanceled\" (#2943)"},{"Id":"360012211","IsPullRequest":true,"CreatedAt":"2018-09-13T19:43:53","Actor":"BrennanConroy","Number":"2958","RawContent":null,"Title":"Add expected test log exception to fix flaky test","State":"closed","Body":"https://github.com/aspnet/SignalR/issues/2943\r\n\r\n@muratg For shiproom","Url":"https://github.com/aspnet/SignalR/pull/2958","RelatedDescription":"Closed or merged PR \"Add expected test log exception to fix flaky test\" (#2958)"},{"Id":"359937772","IsPullRequest":false,"CreatedAt":"2018-09-13T15:04:43","Actor":"mikaelm12","Number":"2957","RawContent":null,"Title":"Java Client API Review Tasks","State":"open","Body":"There are more investigate items but these are the currently actionable things.\r\n\r\n- [ ] ALL_CAPS Transfer Format enum\r\n- [ ] Move HubConnection methods\r\n- [ ] Make PingMessage a singleton\r\n- [ ] Add AsyncAPIs \r\n- [ ] Make everything internal but Action*,HubConnection, HubConnectionBuilder, HubConnectionState, Subscription\r\n- [ ] HubConnectionBuilder: Allow calling build twice. \r\n- [ ] HubConnectionBuilder: Add HttpConnectionOptions overload to withUrl\r\n- [ ] Move Chat sample to a samples package","Url":"https://github.com/aspnet/SignalR/issues/2957","RelatedDescription":"Open issue \"Java Client API Review Tasks\" (#2957)"},{"Id":"359933687","IsPullRequest":true,"CreatedAt":"2018-09-13T14:55:51","Actor":"mikaelm12","Number":"2956","RawContent":null,"Title":"Java Client API review cleanup","State":"open","Body":"Hitting a couple of things from the API review here. Part of https://github.com/aspnet/SignalR/issues/2957\r\n\r\n- ALL_CAPS Transfer Format enum\r\n- Move HubConnection methods\r\n- Make PingMessage a singleton\r\n- Spotless clean up","Url":"https://github.com/aspnet/SignalR/pull/2956","RelatedDescription":"Open PR \"Java Client API review cleanup\" (#2956)"},{"Id":"359891633","IsPullRequest":false,"CreatedAt":"2018-09-13T13:17:25","Actor":"alex-user","Number":"2955","RawContent":null,"Title":"ASP.NET Core 2.1 SignalR v1.0.3 - JWT Authenticate with token","State":"open","Body":"Hi all.\r\nI am trying to use JWT token auth with SignalR  but it does not work\r\n\r\nMy code\r\n\r\n**Server**\r\n```C#     \r\n        public void Configure(IApplicationBuilder app)\r\n        {\r\n            app.UseAuthentication();\r\n            SignalR.Configure(app);\r\n            app.UseMvcWithDefaultRoute()\r\n        }\r\n\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\r\n                    .AddJwtBearer(jwt =>\r\n                                  {\r\n                                      jwt.RequireHttpsMetadata = false;\r\n                                      jwt.SaveToken = true;\r\n                                      jwt.TokenValidationParameters = new TokenValidationParameters\r\n                                      {\r\n                                          ValidateAudience = false,\r\n                                          ValidateIssuer = false,\r\n                                          ValidateActor = false,\r\n                                          ValidateLifetime = true,\r\n                                      };\r\n                                      jwt.Events = new JwtBearerEvents\r\n                                      {\r\n                                          OnMessageReceived = context =>\r\n                                                         {\r\n                                                             var tokenValue = context.Request.Query[\"access_token\"];\r\n                                                             if (VerifyToken(tokenValue))\r\n                                                             {\r\n                                                                   context.Token = tokenValue \r\n                                                             }\r\n                                                             return Task.CompletedTask;\r\n                                                         }\r\n                                      };\r\n                                  });\r\n\r\n                      services.AddSignalR();\r\n                      services.AddMvc(});\r\n        }\r\n\r\n    [Authorize(AuthenticationSchemes = \"Bearer \", Roles = \"Admin,Operator\")] \r\n    public class MyHub : Hub\r\n    {\r\n    }\r\n```\r\n\r\n**Client**\r\n```C#\r\n        private void InitClientProxy()\r\n        {\r\n            _hubConnection = new HubConnectionBuilder()\r\n                                .WithUrl(_hubServer, HttpTransportType.WebSockets, \r\n                                         options => options.AccessTokenProvider = () => Task.FromResult(token))\r\n                                .Build();\r\n        }\r\n```\r\n**Log**\r\n```\r\nBearer was not authenticated. Failure message: No SecurityTokenValidator available for token: Bearer <token>\r\ninfo: Microsoft.AspNetCore.Authorization.DefaultAuthorizationService[2]    Authorization failed.\r\ninfo: Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler[12]  AuthenticationScheme: Bearer was challenged.\r\n```\r\nBut I still getting response 401\r\nI uses NET Client\r\n\r\nCan someone help me?","Url":"https://github.com/aspnet/SignalR/issues/2955","RelatedDescription":"Open issue \"ASP.NET Core 2.1 SignalR v1.0.3 - JWT Authenticate with token\" (#2955)"},{"Id":"359851158","IsPullRequest":false,"CreatedAt":"2018-09-13T11:16:43","Actor":"FTWinston","Number":"2954","RawContent":null,"Title":"SSE handshake error when using IIS","State":"open","Body":"* Using Microsoft.AspNetCore.SignalR 1.0.1 on .NET Core 2.1, with @aspnet/signalr 1.0.3.\r\n* Javascript client, running in Chrome v68 & v69 on Windows 10.\r\n* Hosting in IIS 8 on Windows Server 2012 R2\r\n\r\nUsing windows authentication and SSE, everything works fine when I run through IIS Express. But when I deploy a production build to IIS, I get this:\r\n`Connection disconnected with error 'Error: Server returned handshake error: Handshake was canceled.'.`\r\n\r\nMy diagnostic logs are here: [server log](https://github.com/aspnet/SignalR/files/2379025/server.log.txt) & [client log](https://github.com/aspnet/SignalR/files/2379026/client.log.txt)\r\n\r\nAnd here's my web.config - have I just missed setting something up here?\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <system.webServer>\r\n    <handlers>\r\n      <add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModule\" resourceType=\"Unspecified\" />\r\n    </handlers>\r\n    <aspNetCore processPath=\"dotnet\" arguments=\".\\TestApp.dll\" stdoutLogEnabled=\"true\" stdoutLogFile=\".\\logs\\stdout\" requestTimeout=\"00:10:00\" />\r\n    <security>\r\n      <authentication>\r\n        <windowsAuthentication enabled=\"true\" />\r\n      </authentication>\r\n    </security>\r\n  </system.webServer>\r\n</configuration>\r\n```\r\n\r\nI tried adding this, to no avail: `<urlCompression doDynamicCompression=\"false\"/>`\r\n\r\nMany thanks, and apologies if this is me just having missed something obvious.","Url":"https://github.com/aspnet/SignalR/issues/2954","RelatedDescription":"Open issue \"SSE handshake error when using IIS\" (#2954)"},{"Id":"359724242","IsPullRequest":false,"CreatedAt":"2018-09-13T03:00:10","Actor":"mikaelm12","Number":"2952","RawContent":null,"Title":"[Java] Convert Ping message class to singleton","State":"open","Body":"Context: https://github.com/aspnet/SignalR/pull/2940#discussion_r216759906","Url":"https://github.com/aspnet/SignalR/issues/2952","RelatedDescription":"Open issue \"[Java] Convert Ping message class to singleton\" (#2952)"},{"Id":"359718033","IsPullRequest":false,"CreatedAt":"2018-09-13T02:37:22","Actor":"ccic","Number":"2951","RawContent":null,"Title":"HttpMessageHandler was not disposed","State":"closed","Body":"I found HttpMessageHandler on release/2.2 branch was created and set to HttpClient, but it was not disposed when HttpClient was disposed. It looks to be a potential bug.\r\n\r\nThe fix is very simple: change\r\nhttps://github.com/aspnet/SignalR/blob/release/2.2/src/Microsoft.AspNetCore.Http.Connections.Client/HttpConnection.cs#L531\r\nto be:\r\nvar httpClient = new HttpClient(httpMessageHandler, true);\r\n","Url":"https://github.com/aspnet/SignalR/issues/2951","RelatedDescription":"Closed issue \"HttpMessageHandler was not disposed\" (#2951)"},{"Id":"358812748","IsPullRequest":true,"CreatedAt":"2018-09-12T22:47:11","Actor":"BrennanConroy","Number":"2940","RawContent":null,"Title":"[Java] De-Serializing Custom Types","State":"closed","Body":"De-Serializing Custom Types #2582\r\nMove De-serialization logic into HubProtocol #2587\r\n\r\nGo \"easy\". First time writing Java.","Url":"https://github.com/aspnet/SignalR/pull/2940","RelatedDescription":"Closed or merged PR \"[Java] De-Serializing Custom Types\" (#2940)"},{"Id":"359630207","IsPullRequest":false,"CreatedAt":"2018-09-12T20:00:05","Actor":"drajvver","Number":"2949","RawContent":null,"Title":"Randomly getting Missing required property 'protocol'.","State":"open","Body":"Hello everyone.\r\n\r\nI'm writing there, since I've googled, searched almost everywhere I could and probably exhausted all other resources to get the informations.\r\nI'm using SignalR with AspNetCore App 2.1.1, using the newest version - 1.0.3.\r\nThe problem is that once in a while, without apparent pattern, this exception occures:\r\n\r\n`System.IO.InvalidDataException: Missing required property 'protocol'.\r\n   at Microsoft.AspNetCore.SignalR.Protocol.HandshakeProtocol.TryParseRequestMessage(ReadOnlySequence1& buffer, HandshakeRequestMessage& requestMessage)\r\n   at Microsoft.AspNetCore.SignalR.HubConnectionContext.HandshakeAsync(TimeSpan timeout, IReadOnlyList1 supportedProtocols, IHubProtocolResolver protocolResolver, IUserIdProvider userIdProvider, Boolean enableDetailedErrors)`\r\n\r\nAll clients are connecting to the app from native iOS Swift app (here it's using the SignalR-Client-Swift) or native Android app. I wanted to log this issue and corelate it with, for example IP address or other request attributes that could. App creator claims that protocol is being sent correctly, but I don't have access to his codebase to make sure of that.\r\nMy bet is that someone else is trying to connect to the socket without sending proper payloads.\r\nI've managed to catch info about payload in logs by setting the Verbose level, getting this:\r\n\r\n> 2018-09-12 14:11:03 [Debug] Establishing new connection.\r\n> 2018-09-12 14:11:03 [Debug] OnConnectedAsync started.\r\n> 2018-09-12 14:11:03 [Debug] Socket opened using Sub-Protocol: 'null'.\r\n> 2018-09-12 14:11:03 [Verbose] Message received. Type: Text, size: 32, EndOfMessage: True.\r\n> 2018-09-12 14:11:03 [Debug] Found protocol implementation for requested protocol: \"json\".\r\n> 2018-09-12 14:11:03 [Information] Completed connection handshake. Using HubProtocol '\"json\"'.\r\n\r\nBut how do I corelate this to other stuff that's going on in the request?\r\n\r\nI've also tried creating a middleware, and got pretty far with it, but unfortunately after \"catching\" the request that I need, it stops rest of the app from working, since the request is already read and cannot be passed forward to SignalR to work with.\r\n\r\nAnyone have any ideas, or maybe you already stumbled upon that issue and managed to fix it somehow? Or maybe this is completely random and I shouldn't worry much about it?","Url":"https://github.com/aspnet/SignalR/issues/2949","RelatedDescription":"Open issue \"Randomly getting Missing required property 'protocol'.\" (#2949)"},{"Id":"358759833","IsPullRequest":true,"CreatedAt":"2018-09-12T16:48:57","Actor":"dotnet-maestro-bot","Number":"2939","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @BrennanConroy\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/2939","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2939)"},{"Id":"358665426","IsPullRequest":false,"CreatedAt":"2018-09-12T16:25:09","Actor":"WernMich","Number":"2935","RawContent":null,"Title":"How to notify clients outside of a hub context (documented way does not work)","State":"closed","Body":"Hi,\r\n\r\nI am trying to notify my clients as documented on several places (e.g. https://docs.microsoft.com/de-de/aspnet/core/signalr/hubcontext?view=aspnetcore-2.1 topic: \"Get an instance of IHubContext in middleware\") outside of a hub object (no previous call from a client). There is no website within the actual project so there is no \"Controller\" class where IHubContext can be injected via DI.\r\n\r\nHow do I get an IHubContext object to notify my clients? The documented version does not even compile!\r\n\r\nStartup.cs class, method \"public void Configure(IApplicationBuilder app, IHostingEnvironment env)\":\r\n\r\n```\r\napp.Use(next => (context) =>\r\n            {\r\n                var hubContext = (IHubContext<NotificationHub>)context\r\n                    .RequestServices\r\n                    .GetServices<IHubContext<NotificationHub>>();\r\n                //...\r\n            });\r\n```\r\n\r\ncauses:\r\n\r\n```\r\nStartup.cs(58,39,58,41): error CS1643: Not all code paths return a value in lambda expression of type 'RequestDelegate'\r\nStartup.cs(58,29,58,41): error CS1662: Cannot convert lambda expression to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type\r\n```\r\n\r\nThe delegate type has a completely different layout: returning Task and consuming HttpContext object.\r\nSo I tried to change the signature to this resulting code (I am using two hubs):\r\n\r\n```\r\napp.UseSignalR(routes =>\r\n            {\r\n                routes.MapHub<CommandOutputHub>(\"/CommandOutputHub\");\r\n                routes.MapHub<NotificationHub>(\"/NotificationHub\");\r\n            });\r\n\r\napp.Use(next => (context) =>\r\n            {\r\n                NotificationHubContext = (IHubContext<NotificationHub>)context\r\n                    .RequestServices\r\n                    .GetServices<IHubContext<NotificationHub>>().First();\r\n\r\n                return Task.CompletedTask;\r\n                //...\r\n            });\r\n```\r\n\r\nBut the lambda becomes never called. Even when I exchange the \"null\" task with a valid one, this task becomes never executed.\r\n\r\nCan anyone provide a complete sample, how notification of clients can be done from outside a Hub object without using a Controller class?\r\n\r\nServer-Side: \r\nMicrosoft.AspNetCore.App 2.1.1 incl. Microsoft.AspNetCore.SignalR (1.0.1) (.NET console app or service hosted on IIS Express, C# .NET Core 2.1, Win 10 Pro OS)\r\n\r\nClient:\r\nMicrosoft.AspNetCore.SignalR.Client 1.0.3 (.NET console app, C# .NET Core 2.1, Win 10 Pro OS)","Url":"https://github.com/aspnet/SignalR/issues/2935","RelatedDescription":"Closed issue \"How to notify clients outside of a hub context (documented way does not work)\" (#2935)"},{"Id":"359463642","IsPullRequest":false,"CreatedAt":"2018-09-12T15:35:41","Actor":"Vhab","Number":"2947","RawContent":null,"Title":"Make RedisChannels prefix configurable","State":"closed","Body":"Currently multiple independent SignalR Core scaleout deployments can't co-exist on the same Redis instance. (eg. deployments for multiple different customers using shared resources)\r\nThe old SignalR allowed this use-case by providing a unique eventKey in its scaleout configuration.\r\n\r\nIt would be nice to be able to configure a additional prefix for SignalR Core to use when generating redis key names.\r\nIt's currently hardcoded to use `typeof(THub).FullName` in `RedisHubLifetimeManager`.\r\n","Url":"https://github.com/aspnet/SignalR/issues/2947","RelatedDescription":"Closed issue \"Make RedisChannels prefix configurable\" (#2947)"},{"Id":"359526904","IsPullRequest":false,"CreatedAt":"2018-09-12T15:10:13","Actor":"FTWinston","Number":"2948","RawContent":null,"Title":"Error accessing identity name with windows authentication","State":"open","Body":"* Using Microsoft.AspNetCore.SignalR 1.0.1 on .NET Core 2.1, with @aspnet/signalr 1.0.3.\r\n* Javascript client, running in Chrome v68 & v69 on Windows 10.\r\n* Hosting either in IIS 8 on Windows Server 2012 R2, or in IIS express on Windows 10.\r\n\r\nUsing windows authentication and long polling, I'm getting an ObjectDisposedException when accessing Context.User.Identity.Name from inside any hub methods, or from OnConnectedAsync.\r\n\r\nThis has only started happening since upgrading from .NET Core 2.0 and SignalR 1.0.0-alpha2-final.\r\n\r\nIt doesn't happen every time, but if you have connected succesfully once before, it always happens on your second connection attempt.\r\n\r\n```\r\nSystem.ObjectDisposedException: Safe handle has been closed\r\n   at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean& success)\r\n   at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success)\r\n   at Interop.Advapi32.GetTokenInformation(SafeAccessTokenHandle TokenHandle, UInt32 TokenInformationClass, SafeLocalAllocHandle TokenInformation, UInt32 TokenInformationLength, UInt32& ReturnLength)\r\n   at System.Security.Principal.WindowsIdentity.GetTokenInformation(SafeAccessTokenHandle tokenHandle, TokenInformationClass tokenInformationClass, Boolean nullOnInvalidParam)\r\n   at System.Security.Principal.WindowsIdentity.get_User()\r\n   at System.Security.Principal.WindowsIdentity.<GetName>b__46_0()\r\n   at System.Security.Principal.WindowsIdentity.<>c__DisplayClass62_0.<RunImpersonatedInternal>b__0(Object <p0>)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Security.Principal.WindowsIdentity.RunImpersonatedInternal(SafeAccessTokenHandle token, Action action)\r\n   at System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle safeAccessTokenHandle, Action action)\r\n   at System.Security.Principal.WindowsIdentity.GetName()\r\n   at System.Security.Principal.WindowsIdentity.get_Name()\r\n   at Site.Hubs.Changes.AnyMethod(Int32 changeID) in C:\\Site\\Hubs\\Changes.cs:line 94\r\n```\r\n\r\nHere are my diagnostic logs: [server log](https://github.com/aspnet/SignalR/files/2375614/server.log.txt) & [client log](https://github.com/aspnet/SignalR/files/2375613/client.log.txt)\r\n\r\nThis exception doesn't occur when using SSE instead of long polling, though I haven't yet got that to work with IIS. It looks like there is [finally some movement](https://bugs.chromium.org/p/chromium/issues/detail?id=423609) on chrome support for windows auth \r\non websockets, so I may be able to switch to those eventually.\r\n\r\nWhen this does occur, I've been able to work around it by doing the following, but this is hardly a sensible fix:\r\n```\r\nwhile (true)\r\n{\r\n    try\r\n    {\r\n        return Context.User.Identity.Name;\r\n    }\r\n    catch (ObjectDisposedException)\r\n    {\r\n        await Task.Delay(100);\r\n    }\r\n}\r\n```\r\n\r\nAlternatively, it works pretty consistently if I put `await Task.Delay(1000);` at the start of my hub method.\r\n\r\nAny better suggestions? It looks to be related to [this bug](https://github.com/aspnet/Logging/issues/543), at least superficially.","Url":"https://github.com/aspnet/SignalR/issues/2948","RelatedDescription":"Open issue \"Error accessing identity name with windows authentication\" (#2948)"},{"Id":"359174159","IsPullRequest":true,"CreatedAt":"2018-09-11T23:56:38","Actor":"mikaelm12","Number":"2945","RawContent":null,"Title":"Making all the things Package Private in the Java Client","State":"closed","Body":"Part 1 of API review PRs\r\nThe default access level in Java if package private. So everything in the same package has access to it. This is the closest we can get to internal. \r\nI've made most of the types package private and moved the test code into the same package as the source, `com.microsoft.src`, but they are still in their own directories.\r\nAlso, Spotless is awesome 😄 ","Url":"https://github.com/aspnet/SignalR/pull/2945","RelatedDescription":"Closed or merged PR \"Making all the things Package Private in the Java Client\" (#2945)"},{"Id":"358813852","IsPullRequest":true,"CreatedAt":"2018-09-11T23:07:39","Actor":"dotnet-maestro-bot","Number":"2941","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @BrennanConroy\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.1-to-release/2.2:merge/release/2.1-to-release/2.2\r\ngit merge merge/release/2.1-to-release/2.2\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.1-to-release/2.2' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.1.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/2941","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#2941)"},{"Id":"358824386","IsPullRequest":true,"CreatedAt":"2018-09-11T22:50:01","Actor":"BrennanConroy","Number":"2942","RawContent":null,"Title":"Merge branch 'release/2.1' into release/2.2","State":"closed","Body":"Also snuck the `TrySetCanceled` into another spot that wasn't in 2.1","Url":"https://github.com/aspnet/SignalR/pull/2942","RelatedDescription":"Closed or merged PR \"Merge branch 'release/2.1' into release/2.2\" (#2942)"},{"Id":"359201018","IsPullRequest":true,"CreatedAt":"2018-09-11T21:19:46","Actor":"BrennanConroy","Number":"2946","RawContent":null,"Title":"Collect \"redis MONITOR\" logs","State":"closed","Body":"Spinning up another container to run the \"MONITOR\" redis command against the redis server to collect more logs.","Url":"https://github.com/aspnet/SignalR/pull/2946","RelatedDescription":"Closed or merged PR \"Collect \"redis MONITOR\" logs\" (#2946)"},{"Id":"358484209","IsPullRequest":false,"CreatedAt":"2018-09-11T17:53:35","Actor":"AwsomeCode","Number":"2934","RawContent":null,"Title":"HttpClientHandler System.ObjectDisposedException on client side (C#)","State":"closed","Body":"* Versions of Server-Side NuGet Packages: **Microsoft.AspNetCore.App 2.1.1**\r\n* Versions of Client-Side NuGet/NPM Packages: **Client for ASP.NET Core SignalR 1.0.3**\r\n* Are you using the C# client or the JavaScript client: **C# Client** \r\n* The Server you are using (Kestrel/HttpSysServer/IIS/IIS Express/Azure Web App/etc.): **IIS Express**\r\n* The Operating System on the Server (Windows/Linux/macOS): **Windows**\r\n* The Operating System on the Client (Windows/Linux/macOS): **Windows**\r\n\r\nI have simple HttpClientHandler \r\n\r\n```\r\npublic class WrappedHttpMessageHandler : HttpClientHandler\r\n    {\r\n        protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n        {\r\n            //request.Headers= ;\r\n            var response = await base.SendAsync(request, cancellationToken); //System.ObjectDisposedException\r\n            return response;\r\n        }\r\n    }\r\n```\r\nUsed in HubConnectionBuilder\r\n\r\n```\r\nhandler = new WrappedHttpMessageHandler{};\r\n\r\nconnection = new HubConnectionBuilder().WithUrl(\"http://localhost:50741/ChatHub\", op =>{\r\n    op.HttpMessageHandlerFactory = h => handler;\r\n}).Build();\r\n\r\n```\r\n\r\nGetting System.ObjectDisposedException at reconnecting or whenever calling below line second time.\r\n```\r\nawait connection.StartAsync(); //System.ObjectDisposedException\r\n```\r\nWhitout HttpMessageHandler in HubConnectionBuilder reconnection is working fine.\r\n\r\n\r\n","Url":"https://github.com/aspnet/SignalR/issues/2934","RelatedDescription":"Closed issue \"HttpClientHandler System.ObjectDisposedException on client side (C#)\" (#2934)"},{"Id":"359146364","IsPullRequest":true,"CreatedAt":"2018-09-11T17:30:17","Actor":"mikaelm12","Number":"2944","RawContent":null,"Title":"WIP starting to add Async APIs","State":"open","Body":"Starting to phase in the Async APIs.","Url":"https://github.com/aspnet/SignalR/pull/2944","RelatedDescription":"Open PR \"WIP starting to add Async APIs\" (#2944)"},{"Id":"358706455","IsPullRequest":true,"CreatedAt":"2018-09-10T18:51:28","Actor":"BrennanConroy","Number":"2936","RawContent":null,"Title":"Add more redis logs","State":"closed","Body":"Doing this because of https://github.com/aspnet/SignalR/issues/2917\r\n\r\nAdded one log in production https://github.com/aspnet/SignalR/pull/2936/files#diff-43747ccefdb3a6d796ece10fe906a62eR438 and added the `docker logs redisContainer` command on close to the test to collect any logs from the redis instance.\r\n\r\nAlso removed a bunch of unnecessary `async`","Url":"https://github.com/aspnet/SignalR/pull/2936","RelatedDescription":"Closed or merged PR \"Add more redis logs\" (#2936)"},{"Id":"358742754","IsPullRequest":false,"CreatedAt":"2018-09-10T18:35:06","Actor":"anurse","Number":"2938","RawContent":null,"Title":"Consider adding tests for DI service registration","State":"open","Body":"We may already have some (or even all) of these, but we should consider adding tests for service registration so we know for sure which services get duplicated when `AddSignalR` is called twice and which are idempotent.\r\n\r\nSee MVC's tests for an example: https://github.com/aspnet/Mvc/blob/release/2.2/test/Microsoft.AspNetCore.Mvc.Test/MvcServiceCollectionExtensionsTest.cs#L54","Url":"https://github.com/aspnet/SignalR/issues/2938","RelatedDescription":"Open issue \"Consider adding tests for DI service registration\" (#2938)"},{"Id":"358711937","IsPullRequest":false,"CreatedAt":"2018-09-10T17:39:12","Actor":"devna13","Number":"2937","RawContent":null,"Title":"\"InvalidDataException: Error binding arguments\" after switching to MessagePackProtocol from Json","State":"closed","Body":"Hi,\r\n\r\nusing Json as hubprotocol everything works correctly but switching to MessagePack Protocol causing binding error.\r\n\r\n**Chrome Console:**\r\n`Error: Error: Failed to invoke 'SendImageToTeamWall' due to an error on the server. InvalidDataException: Error binding arguments. Make sure that the types of the provided values match the types of the hub method being invoked.`\r\n\r\n\r\n![messagepack err](https://user-images.githubusercontent.com/4080343/45311869-66311700-b4df-11e8-9c05-f82eb0116f7b.PNG)\r\n\r\n\r\n**Visual studio output:**\r\n\r\n```\r\nApp.Web> ===> [09:59:10.323] [Error] Failed to invoke hub method '\"SendImageToTeamWall\"'.\r\nApp.Web> System.IO.InvalidDataException: Error binding arguments. Make sure that the types of the provided values match the types of the hub method being invoked. ---> System.IO.InvalidDataException: Deserializing object of the `String` type for 'argument' failed. ---> System.InvalidOperationException: code is invalid. code:3 format:positive fixint\r\nApp.Web>    at MessagePack.Decoders.InvalidString.Read(Byte[] bytes, Int32 offset, Int32& readSize)\r\nApp.Web>    at MessagePack.MessagePackSerializer.Deserialize[T](ArraySegment`1 bytes, IFormatterResolver resolver)\r\nApp.Web>    at lambda_method(Closure , ArraySegment`1 , IFormatterResolver )\r\nApp.Web>    at MessagePack.MessagePackSerializer.NonGeneric.Deserialize(Type type, ArraySegment`1 bytes, IFormatterResolver resolver)\r\nApp.Web>    at Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocol.DeserializeObject(Byte[] input, Int32& offset, Type type, String field, IFormatterResolver resolver)\r\nApp.Web>    --- End of inner exception stack trace ---\r\nApp.Web>    at Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocol.DeserializeObject(Byte[] input, Int32& offset, Type type, String field, IFormatterResolver resolver)\r\nApp.Web>    at Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocol.BindArguments(Byte[] input, Int32& offset, IReadOnlyList`1 parameterTypes, IFormatterResolver resolver)\r\nApp.Web>    --- End of inner exception stack trace ---\r\nApp.Web>    at Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocol.BindArguments(Byte[] input, Int32& offset, IReadOnlyList`1 parameterTypes, IFormatterResolver resolver)\r\nApp.Web>    at Microsoft.AspNetCore.SignalR.Protocol.MessagePackHubProtocol.CreateInvocationMessage(Byte[] input, Int32& offset, IInvocationBinder binder, IFormatterResolver resolver)\r\n```\r\n\r\n![messagepack err server](https://user-images.githubusercontent.com/4080343/45312312-988f4400-b4e0-11e8-8808-d3c3e65e564a.PNG)\r\n\r\n\r\n\r\n\r\n\r\n**server:**\r\n`      \r\npublic Task SendImageToTeamWall(string wallId, string teamId, string fromUserId, string imageAsBase64)\r\n`\r\n\r\n**client:**\r\n```\r\n      this._hubConnection\r\n        .invoke(\r\n          'SendImageToTeamWall',\r\n          this.getGroupName(team.teamWall),\r\n          team.id,\r\n          user.id,\r\n          imageAsBase64\r\n        )\r\n        .catch(err => {\r\n          console.error('ChathubService; SendImageToTeamWall Error:', err);\r\n        });\r\n    });\r\n```\r\n\r\n**startup:**\r\n```\r\n\r\n     services.AddSignalR(o => { o.EnableDetailedErrors = true; })\r\n                .AddMessagePackProtocol(options =>\r\n                {\r\n                    options.FormatterResolvers = new List<MessagePack.IFormatterResolver>()\r\n                    {\r\n                        MessagePack.Resolvers.StandardResolver.Instance\r\n                    };\r\n                });\r\n```\r\n\r\n[https://docs.microsoft.com/en-us/aspnet/core/signalr/messagepackhubprotocol?view=aspnetcore-2.1](https://docs.microsoft.com/en-us/aspnet/core/signalr/messagepackhubprotocol?view=aspnetcore-2.1\r\n)\r\nThanks","Url":"https://github.com/aspnet/SignalR/issues/2937","RelatedDescription":"Closed issue \"\"InvalidDataException: Error binding arguments\" after switching to MessagePackProtocol from Json\" (#2937)"},{"Id":"358409785","IsPullRequest":false,"CreatedAt":"2018-09-09T20:35:22","Actor":"BillyMutt","Number":"2933","RawContent":null,"Title":"SignalR client not working in iOS","State":"open","Body":"Based on the info here https://github.com/aspnet/Announcements/issues/305 I was hoping to finally get my Xamarin iOS client working with ASP.Net Core SignalR, but still no luck. I get an exception when the client tries to connect to the hub:\r\n\r\n```\r\n//  Connect to the SignalR hub.\r\nstring url = $\"http://{DataService.HostName}:{DataService.MainPort.ToString()}/hub\";\r\ntry\r\n{\r\n    MediaHubConnection = new HubConnectionBuilder().WithUrl(url).Build();\r\n}\r\ncatch (Exception e)\r\n{ // Handle exception }\r\n```\r\n\r\n> Exception: A suitable constructor for type Microsoft.AspNetCore.SignalR.Client.HttpConnectionFactory could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor.\r\n\r\nThe code above works in the iPhone simulator, but crashes on the device itself. \r\n\r\nI am using Visual Studio 15.8.0 with Xamarin iOS 11.14.0.13 on Windows 10; Visual Studio for Mac 7.6.1 Build 9 with Xamarin iOS 11.14.0.13 on the Mac. Latest released Nugets for AspNetCore SignalR (server and client).\r\n\r\nAny help is highly appreciated.","Url":"https://github.com/aspnet/SignalR/issues/2933","RelatedDescription":"Open issue \"SignalR client not working in iOS\" (#2933)"}],"ResultType":"GitHubIssue"},"Identity-Issues":{"Issues":[{"Id":"360409662","IsPullRequest":true,"CreatedAt":"2018-09-14T18:31:10","Actor":"ryanbrandenburg","Number":"1966","RawContent":null,"Title":"Titles in h1","State":"open","Body":"Part of aspnet/templating#67.","Url":"https://github.com/aspnet/Identity/pull/1966","RelatedDescription":"Open PR \"Titles in h1\" (#1966)"},{"Id":"359622892","IsPullRequest":true,"CreatedAt":"2018-09-12T19:37:59","Actor":"dotnet-maestro-bot","Number":"1965","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"open","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @HaoK\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/1965","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#1965)"},{"Id":"358850098","IsPullRequest":true,"CreatedAt":"2018-09-12T19:04:29","Actor":"Rick-Anderson","Number":"1962","RawContent":null,"Title":"Update IdentityServiceCollectionExtensions.cs","State":"closed","Body":"Fix Copy/paste error from `AddIdentity<TUser, TRole>`","Url":"https://github.com/aspnet/Identity/pull/1962","RelatedDescription":"Closed or merged PR \"Update IdentityServiceCollectionExtensions.cs\" (#1962)"},{"Id":"359285371","IsPullRequest":false,"CreatedAt":"2018-09-12T01:51:31","Actor":"swaghost","Number":"1964","RawContent":null,"Title":"Does this package have a hard dependency on Microsoft.EntityFrameworkCore 2.1.1?","State":"open","Body":"Have upgraded entire project to 2.1.3. or 2.1.2 where necessary.  I've got some typescript-generating T4 template code (a forked version of TypeLite https://www.nuget.org/packages/TypeLite/1.8.4, but the original would suffice) that when run is saying (even though I have everything upgraded to 2.1.3, or 2.1.2 where that's the latest) that it can't load Microsoft.EntityFrameworkCore 2.1.1, even though I have Microsoft.EntityFrameworkCore 2.1.3 installed. The whole project works unchanged with 2.1.2 (or previous versions). Updating to 2.1.3 jacks it up.  Will try and post a bare-bones sample project shortly.\r\n[Upgrade Error Info.0.txt](https://github.com/aspnet/Identity/files/2373282/Upgrade.Error.Info.0.txt)\r\n","Url":"https://github.com/aspnet/Identity/issues/1964","RelatedDescription":"Open issue \"Does this package have a hard dependency on Microsoft.EntityFrameworkCore 2.1.1?\" (#1964)"},{"Id":"358236425","IsPullRequest":true,"CreatedAt":"2018-09-11T09:24:42","Actor":"Rick-Anderson","Number":"1959","RawContent":null,"Title":"Update IdentityServiceCollectionExtensions.cs","State":"closed","Body":"Fix Copy/paste error from `AddIdentity<TUser, TRole>`","Url":"https://github.com/aspnet/Identity/pull/1959","RelatedDescription":"Closed or merged PR \"Update IdentityServiceCollectionExtensions.cs\" (#1959)"},{"Id":"358865254","IsPullRequest":false,"CreatedAt":"2018-09-11T02:42:53","Actor":"alonstar","Number":"1963","RawContent":null,"Title":"SignInManager.PasswordSignInAsync will cause redirect (302) When 2FA is enabled.","State":"open","Body":"Identity 2.1.3 & AspNetCore.App 2.1.3\r\n\r\nI need to verify 2FA but signInManager.PasswordSignInAsync will cause Response.StatusCode = 302.\r\nIt will redirect to home index.\r\n\r\nHow can I prevent it to do this?\r\n\r\nNow I added HttpContext.Response.StatusCode = (int)HttpStatusCode.OK  after PasswordSignInAsync to prevent it redirect.\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/1963","RelatedDescription":"Open issue \"SignInManager.PasswordSignInAsync will cause redirect (302) When 2FA is enabled.\" (#1963)"},{"Id":"358278364","IsPullRequest":false,"CreatedAt":"2018-09-08T09:04:53","Actor":"pekspro","Number":"1961","RawContent":null,"Title":"Identities aren’t stored when using an in-memory database","State":"open","Body":"\r\n\r\n* Create a new ASP.NET Core Web Application.\r\n* Select ASP.NET Core 2.1, Web Application and change authentication to Individual User Accounts.\r\n* In startup.cs replace:\r\n\r\n\r\n      services.AddDbContext<ApplicationDbContext>(options =>\r\n        options.UseSqlServer(\r\n        Configuration.GetConnectionString(\"DefaultConnection\")));\r\n\r\nwith\r\n\r\n    services.AddDbContext<ApplicationDbContext>(options =>\r\n        options.UseInMemoryDatabase(Guid.NewGuid().ToString()));\r\n\r\nRun the application and register an account. Logout and try to login with the created account. This will fail.\r\n\r\nIt looks like nothing is written in the Users-table when an account is registered.\r\n\r\nI know there are [some limitations](https://docs.microsoft.com/en-us/ef/core/miscellaneous/testing/in-memory) when using an in-memory database, but shouldn’t this work? If it’s not supported I would prefer an exception than the current behavior.\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/1961","RelatedDescription":"Open issue \"Identities aren’t stored when using an in-memory database\" (#1961)"},{"Id":"358252848","IsPullRequest":false,"CreatedAt":"2018-09-08T01:36:05","Actor":"aspnet-hello","Number":"1960","RawContent":null,"Title":"Test failure: IdentityUI_ScriptTags_FallbackSourceContent_Matches_CDNContent","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=548856&buildTypeId=XPlat_Mac_MacUniverseCoreCLR) occasionally with the following error:\r\n```\r\nSystem.Net.Http.HttpRequestException : The SSL connection could not be established, see inner exception.\r\n---- System.IO.IOException : Authentication failed because the remote party has closed the transport stream.\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at System.Net.Http.HttpClient.GetStringAsyncCore(Task`1 getTask)\r\n   at Microsoft.AspNetCore.Identity.Test.IdentityUIScriptsTest.IdentityUI_ScriptTags_FallbackSourceContent_Matches_CDNContent(ScriptTag scriptTag) in /_/test/Identity.Test/IdentityUIScriptsTest.cs:line 71\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.ForceAuthentication(Boolean receiveFirst, Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.ProcessAuthentication(LazyAsyncResult lazyResult)\r\n   at System.Net.Security.SslStream.BeginAuthenticateAsClient(SslClientAuthenticationOptions sslClientAuthenticationOptions, CancellationToken cancellationToken, AsyncCallback asyncCallback, Object asyncState)\r\n   at System.Net.Security.SslStream.<>c.<AuthenticateAsClientAsync>b__47_0(SslClientAuthenticationOptions arg1, CancellationToken arg2, AsyncCallback callback, Object state)\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncImpl[TArg1,TArg2](Func`5 beginMethod, Func`2 endFunction, Action`1 endAction, TArg1 arg1, TArg2 arg2, Object state, TaskCreationOptions creationOptions)\r\n   at System.Threading.Tasks.TaskFactory.FromAsync[TArg1,TArg2](Func`5 beginMethod, Action`1 endMethod, TArg1 arg1, TArg2 arg2, Object state, TaskCreationOptions creationOptions)\r\n   at System.Threading.Tasks.TaskFactory.FromAsync[TArg1,TArg2](Func\r\n...\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/Identity/issues/1960","RelatedDescription":"Open issue \"Test failure: IdentityUI_ScriptTags_FallbackSourceContent_Matches_CDNContent\" (#1960)"},{"Id":"358218618","IsPullRequest":false,"CreatedAt":"2018-09-07T21:35:07","Actor":"mkArtakMSFT","Number":"1958","RawContent":null,"Title":"Include docXML content in the published package for IdentityUI","State":"open","Body":"","Url":"https://github.com/aspnet/Identity/issues/1958","RelatedDescription":"Open issue \"Include docXML content in the published package for IdentityUI\" (#1958)"},{"Id":"357806358","IsPullRequest":false,"CreatedAt":"2018-09-06T20:05:41","Actor":"feldrim","Number":"1957","RawContent":null,"Title":"Usage of IdentityRole","State":"open","Body":"I know claims are the best practice here but there are some cases where Roles are needed. And I have checked out issues, yet couldn't find any answer. It might be my mistake though.\r\n\r\nAlthough Identity namespace has IdentityRole class, \r\n\r\n1. `Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder` does only have `RequireRole(IEnumerable<string> roles)` and `RequireRole(params string[] roles)`, which obviously accepts string as parameter.\r\n2. `System.Security.Claims.ClaimsPrincipal` does only have `IsInRole(string role)`, which also accepts string as parameter.\r\n\r\nI have added my own IdentityRole class where some audit properties like CreatedAt, CreatedBy etc. and had to inherit those two classess implementing my own IdentityRole. But at some points it had lead me to reimplement whole Identity assembly, which is a totally bad idea.\r\n\r\nWhile there is IdentityRole class, why we use string as roles?","Url":"https://github.com/aspnet/Identity/issues/1957","RelatedDescription":"Open issue \"Usage of IdentityRole\" (#1957)"},{"Id":"357506199","IsPullRequest":false,"CreatedAt":"2018-09-06T05:56:52","Actor":"yucelakpinar","Number":"1956","RawContent":null,"Title":"OpenIdConnect doesn't sign-in user if Individual accounts is also configured.","State":"open","Body":"Hello,\r\n\r\nI'm new on asp.net core & asp.net identity, so that couldn't undestand what is happening on my app.\r\nI configured individual accounts on my app with adding `services.AddIdentity<IdentityUser, IdentityRole>()` on StartUp file and it works well.\r\nOn another code branch I also configured Azure AD login with adding `services.AddAuthentication().AddOpenIdConnect()` on StartUp file (in this branch individual account is not added) and it works well too.\r\nThen I merge both branches which means that I want to use both authentications on my app, individual accounts still working, but Azure AD login doesn't working.\r\n\r\nHere is my StartUp file.\r\n```\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n        services\r\n            .AddDbContext<ApplicationDataContext>(options =>\r\n            {\r\n                options.UseInMemoryDatabase(\"testdb\");\r\n            });\r\n\r\n        services\r\n            .AddIdentity<IdentityUser, IdentityRole>()\r\n            .AddEntityFrameworkStores<ApplicationDataContext>();\r\n\r\n        services\r\n            .AddAuthentication(sharedOptions =>\r\n            {\r\n                sharedOptions.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n                sharedOptions.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;\r\n                sharedOptions.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n            })\r\n            .AddOpenIdConnect(\"myAzureAD\", options =>\r\n            {\r\n                options.ClientId = \"xxx\";\r\n                options.Authority = \"https://login.microsoftonline.com/xxx\";\r\n                options.CallbackPath = \"/signin-oidc\";\r\n                options.RequireHttpsMetadata = false;\r\n            })\r\n            .AddCookie();\r\n\r\n        services.AddMvc();\r\n}\r\n```\r\n\r\n\r\nFailed Case: After returning back to my web app from authentication on azure website, on /signin-oidc page 'Identity.External' cookie is added to the response, then this page make a 302 redirect to the my return-url, but on my return-url when I check the User.Identity.IsAuthenticated property, its value is False (which was True when individual account not configured on StartUp file)\r\n\r\nSteps:\r\n\r\n1.Forward client to azure authentication website with following code: \r\n`public IActionResult LoginWithOpenId(string returnUrl)\r\n{\r\nreturn Challenge(\"myAzureAD\");\r\n}\r\n`\r\n2.Login on azure website.\r\n3.Return back to callback path(/signin-oidc).\r\n3.Callback page set the required cookies.('Identity.External')\r\n4.Forwarded to return-url by 302 redirect from callback page.\r\n5.Check User.Identity.IsAuthenticated is False.\r\n\r\n\r\nNote:I hope someone can help me, I ask this question to stackoverflow.com but no give any answer :(.\r\n\r\nBest Regards\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/1956","RelatedDescription":"Open issue \"OpenIdConnect doesn't sign-in user if Individual accounts is also configured.\" (#1956)"},{"Id":"356516824","IsPullRequest":false,"CreatedAt":"2018-09-04T20:07:19","Actor":"stardocs-services","Number":"1953","RawContent":null,"Title":"Adding roles with same names for different applications","State":"closed","Body":"I have just extended my IdentityRole like this:\r\n\r\n```\r\npublic class AspApplicationRoles : IdentityRole\r\n{\r\n    public AspApplicationRoles() : base() { }\r\n    public AspApplicationRoles(String Name) : base(Name) { }\r\n    [Required]\r\n    public String ApplicationId { get; set; }\r\n    public AspNetApplications Application { get; set; }\r\n}\r\n```\r\nThen, in order to add the same role names but have a different ApplicationId, I created a custom rolevalidator like this:\r\n\r\n```\r\npublic class ApplicationRoleValidator<TRole> : RoleValidator<TRole> where TRole : AspApplicationRoles\r\n    {\r\n        private RoleManager<TRole, string> Manager { get; set; }\r\n        private AspApplicationRoles data = new AspApplicationRoles();\r\n        private ApplicationDbContext dbContext = new ApplicationDbContext();\r\n\r\n        public ApplicationRoleValidator(RoleManager<TRole, string> manager) : base(manager)\r\n        {\r\n            Manager = manager;\r\n        }\r\n\r\n        public override async Task<IdentityResult> ValidateAsync(TRole Input)\r\n        {\r\n            data = dbContext.AspApplicationRoles.Where(ar => ar.ApplicationId == Input.ApplicationId && ar.Name == Input.Name).SingleOrDefault();\r\n            if (data == null)\r\n            {\r\n                return IdentityResult.Success;\r\n            }\r\n            else\r\n            {\r\n                return IdentityResult.Failed(\"Role already exists\");\r\n            }\r\n        }\r\n    }\r\n```\r\nI then had to change my applicationRoleManagers like this:\r\n\r\n```\r\npublic class ApplicationRoleManager : RoleManager<AspApplicationRoles>\r\n{\r\n    public ApplicationRoleManager(IRoleStore<AspApplicationRoles, string> roleStore)\r\n        : base(roleStore)\r\n    {\r\n        RoleValidator = new ApplicationRoleValidator<AspApplicationRoles>(this);\r\n    }\r\n    public static ApplicationRoleManager Create(IdentityFactoryOptions<ApplicationRoleManager> options, IOwinContext context)\r\n    {\r\n        var manager = new ApplicationRoleManager(new ApplicationRoleStore(context.Get<ApplicationDbContext>()));\r\n        return manager;\r\n    }\r\n}\r\n```\r\nI have also removed the unique key on the database tables like this:\r\n\r\n```\r\nprotected override void OnModelCreating(DbModelBuilder modelBuilder)\r\n    {\r\n        base.OnModelCreating(modelBuilder);\r\n\r\n        var role = modelBuilder.Entity<IdentityRole>()\r\n            .ToTable(\"AspNetRoles\");\r\n        role.Property(r => r.Name)\r\n            .IsRequired()\r\n            .HasMaxLength(256)\r\n            .HasColumnAnnotation(\"Index\", new IndexAnnotation(\r\n                new IndexAttribute(\"RoleNameIndex\")\r\n                { IsUnique = false }));\r\n    }\r\n```\r\n\r\nHowever, I still can't have the same role names and I still get EntityValidationError \"Role Manager already exists. I have tried to search for a solution but I can't seem to find it or see it.","Url":"https://github.com/aspnet/Identity/issues/1953","RelatedDescription":"Closed issue \"Adding roles with same names for different applications\" (#1953)"},{"Id":"356845718","IsPullRequest":false,"CreatedAt":"2018-09-04T15:06:56","Actor":"sintetico82","Number":"1955","RawContent":null,"Title":"AS.NET Core 2.1 - Password forgot: Invalid Token","State":"closed","Body":"Hello,\r\nI have the **invalid code** on the forgot password procedure. In the razor pages scaffolding template i have:\r\n\r\nthe `ForgotPassword` razor page\r\n```\r\n                // For more information on how to enable account confirmation and password reset please \r\n                // visit https://go.microsoft.com/fwlink/?LinkID=532713\r\n                var code = await _userManager.GeneratePasswordResetTokenAsync(user);\r\n                var callbackUrl = Url.Page(\r\n                    \"/Account/ResetPassword\",\r\n                    pageHandler: null,\r\n                    values: new { code },\r\n                    protocol: Request.Scheme);\r\n                await _emailSender.SendEmailAsync(\r\n                    Input.Email,\r\n                    \"Reset Password\",\r\n                    $\"PEr eseguire il reset della password <a href='{ HtmlEncoder.Default.Encode(callbackUrl)}'>seguire questo link</a>.\");\r\n\r\n                return RedirectToPage(\"./ForgotPasswordConfirmation\");\r\n```\r\n\r\nIt encode the token but when the token arrive on the `ResetPassword` razor page it dosent decode as well:\r\n\r\n```\r\n public IActionResult OnGet(string code = null)\r\n        {\r\n            if (code == null)\r\n            {\r\n                return BadRequest(\"A code must be supplied for password reset.\");\r\n            }\r\n            else\r\n            {\r\n                Input = new InputModel\r\n                {\r\n                    Code = code\r\n                };\r\n                return Page();\r\n            }\r\n        }\r\n```\r\n\r\nSo they are different.\r\n","Url":"https://github.com/aspnet/Identity/issues/1955","RelatedDescription":"Closed issue \"AS.NET Core 2.1 - Password forgot: Invalid Token\" (#1955)"},{"Id":"356520791","IsPullRequest":false,"CreatedAt":"2018-09-03T14:09:24","Actor":"IlyaSolovyov","Number":"1954","RawContent":null,"Title":"Manage/_Layout.cshtml doesn't load without \"AddDefaultUI\"","State":"open","Body":"### Title\r\nReplacing \".AddDefaultIdentity\" with \".AddIdentity\" without using \".AddDefaultUI\" command means that even after scaffolding all pages Manage section doesn't load its layout file.\r\n\r\n### Minimal repro steps\r\n1. Create new application with Identity\r\n2. Disable default UI.\r\n3. Scaffold all the pages.\r\n4. Sign in and navigate to /Identity/Manage.\r\n\r\n### Expected result\r\n![image](https://user-images.githubusercontent.com/23297756/44991006-8458bd80-af9b-11e8-9c1e-e383f8892a85.png)\r\n\r\n### Actual result\r\n![image](https://user-images.githubusercontent.com/23297756/44991056-a0f4f580-af9b-11e8-969e-d9b1f73baa19.png)\r\n\r\n\r\n### Further technical details\r\nScaffolded file \"Identity/Pages/Account/Manage/_Layout.csthml\" has a \"Layout = \"/Areas/Identity/Pages/_Layout.cshtml\";\" line that points to a non-existing file. There are no _Layout pages in Identity area other than the one in Manage section. Pointing it to global one doesn't change anything. Removing _Layout file doesn't help either","Url":"https://github.com/aspnet/Identity/issues/1954","RelatedDescription":"Open issue \"Manage/_Layout.cshtml doesn't load without \"AddDefaultUI\"\" (#1954)"},{"Id":"356125543","IsPullRequest":false,"CreatedAt":"2018-08-31T21:14:36","Actor":"layinka","Number":"1952","RawContent":null,"Title":"Login not working on Firefox private mode","State":"open","Body":"Hi,\r\nI am experiencing something  very weird, I am currently using  the asp.net core identity 2.1.1. I noticed that the login works well on chrome(both normal and incognito mode) and works well on firefox, but when i tried it in Firefox private mode, the login form redirected to the homepage without login me in\r\n\r\nAnyone else experience this?\r\nI am using Firfox 60.0.1","Url":"https://github.com/aspnet/Identity/issues/1952","RelatedDescription":"Open issue \"Login not working on Firefox private mode\" (#1952)"},{"Id":"356052944","IsPullRequest":false,"CreatedAt":"2018-08-31T16:48:20","Actor":"natemcmaster","Number":"1951","RawContent":null,"Title":"Compiler error CS0433 caused by duplicate types: IdentityServiceCollectionExtensions","State":"open","Body":"We have two types in the different assemblies with the same name. This can lead to unresolvable compiler errors when referencing Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions\r\n\r\n> error CS0433: The type 'IdentityServiceCollectionExtensions' exists in both 'Microsoft.AspNetCore.Identity, Version=2.1.2.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' and 'Microsoft.Extensions.Identity.Core, Version=2.1.2.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'\r\n\r\nhttps://github.com/aspnet/Identity/blob/release/2.1/src/Identity/IdentityServiceCollectionExtensions.cs\r\nhttps://github.com/aspnet/Identity/blob/release/2.1/src/Core/IdentityServiceCollectionExtensions.cs\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/1951","RelatedDescription":"Open issue \"Compiler error CS0433 caused by duplicate types: IdentityServiceCollectionExtensions\" (#1951)"},{"Id":"355782929","IsPullRequest":true,"CreatedAt":"2018-08-31T02:03:30","Actor":"dotnet-maestro-bot","Number":"1950","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @javiercn\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/1950","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#1950)"},{"Id":"354353310","IsPullRequest":false,"CreatedAt":"2018-08-30T22:26:44","Actor":"saurabhlogward","Number":"1943","RawContent":null,"Title":"Does asp net core identity supports the hierarchy based resource access?","State":"closed","Body":"I am planning To use the asp net identity as a web api for my use case where I have to create  a company based hierarchy and based on which I need to provide the resource access.\r\nI can have many such hierarchy for each company accounts. All I need to achieve  through asp net core identity is, identifying the logged in user, to which company it belongs to and what can he/she have access to with in the hierarchy.\r\n\r\nIs this achievable using asp net core identity? ","Url":"https://github.com/aspnet/Identity/issues/1943","RelatedDescription":"Closed issue \"Does asp net core identity supports the hierarchy based resource access?\" (#1943)"},{"Id":"355522577","IsPullRequest":false,"CreatedAt":"2018-08-30T22:23:56","Actor":"A51UK","Number":"1949","RawContent":null,"Title":"Can ASP.NET Identity 2.1 be made to use MVC UI not Web Pages?","State":"closed","Body":"I just try out the ASP.NET Identity 2.1, and was think of upgrade a project from Identity 2.0 to Identity 2.1 but found that it have been turn to the Web Pages Modal not the MVC one, is there a way to pick which ASP.NET Identity 2.1 UI modal to use (e.g. MVC not Web Pages)?  If not it would be a good think to added in the next update. ","Url":"https://github.com/aspnet/Identity/issues/1949","RelatedDescription":"Closed issue \"Can ASP.NET Identity 2.1 be made to use MVC UI not Web Pages?\" (#1949)"},{"Id":"355483965","IsPullRequest":false,"CreatedAt":"2018-08-30T08:44:19","Actor":"GuidoNeele","Number":"1948","RawContent":null,"Title":"User signed out after requesting /Identity/Account/Manage/TwoFactorAuthentication","State":"open","Body":"ASP.NET Core 2.1.1\r\n\r\nI've configured an asp.net core mvc project with Identity. I'm using the default UI but have scaffolded it because had to translate it to Dutch. When I navigate the Manage pages everything works well until /Identity/Account/Manage/TwoFactorAuthentication is requested. The page is shown but the user is signed out. After navigating away from the page the user is redirected to the login page. The issue is triggered by \r\nhttps://github.com/aspnet/Identity/blob/fcc02103aa10dcdd8759e0463cac2717114f3c1e/src/UI/Areas/Identity/Pages/V3/Account/Manage/TwoFactorAuthentication.cshtml.cs#L58\r\n\r\n```\r\nStartup.cs\r\n...\r\nservices.AddDbContext<ApplicationDbContext>(options =>\r\n        options\r\n          .UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\")));\r\n\r\nservices\r\n    .AddIdentity<ApplicationUser, IdentityRole>(options =>\r\n    {\r\n        options.Password.RequiredLength = 10;\r\n        options.Password.RequireDigit = false;\r\n        options.Password.RequiredUniqueChars = 0;\r\n        options.Password.RequireLowercase = false;\r\n        options.Password.RequireNonAlphanumeric = false;\r\n        options.Password.RequireUppercase = false;\r\n    })\r\n    .AddDefaultUI()\r\n    .AddEntityFrameworkStores<ApplicationDbContext>()\r\n    .AddDefaultTokenProviders();\r\n\r\nservices.ConfigureApplicationCookie(options =>\r\n{\r\n    options.ExpireTimeSpan = TimeSpan.FromMinutes(60);\r\n    options.SlidingExpiration = true;\r\n});\r\n\r\nservices.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme);\r\n...\r\n```\r\n\r\n```\r\nDebug output\r\n...\r\nMicrosoft.AspNetCore.Hosting.Internal.WebHost:Information: Request starting HTTP/1.1 GET http://localhost:44308/Identity/Account/Manage/TwoFactorAuthentication  \r\nMicrosoft.AspNetCore.Mvc.RazorPages.Internal.PageActionInvoker:Information: Route matched with {page = \"/Account/Manage/TwoFactorAuthentication\", area = \"Identity\", action = \"\", controller = \"\"}. Executing action /Account/Manage/TwoFactorAuthentication\r\nMicrosoft.AspNetCore.Authorization.DefaultAuthorizationService:Information: Authorization was successful.\r\nMicrosoft.AspNetCore.Authorization.DefaultAuthorizationService:Information: Authorization was successful.\r\nMicrosoft.AspNetCore.Mvc.RazorPages.Internal.PageActionInvoker:Information: Executing handler method OnGet with arguments ((null)) - ModelState is Valid\r\nMicrosoft.EntityFrameworkCore.Infrastructure:Information: Entity Framework Core 2.1.1-rtm-30846 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer' with options: None\r\nMicrosoft.EntityFrameworkCore.Database.Command:Information: Executed DbCommand (1ms) [Parameters=[@__get_Item_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']\r\nSELECT TOP(1) [e].[Id], [e].[AccessFailedCount], [e].[ConcurrencyStamp], [e].[Email], [e].[EmailConfirmed], [e].[FirstName], [e].[FullName], [e].[InviteSecret], [e].[IsInvited], [e].[LastLogin], [e].[LastName], [e].[LockoutEnabled], [e].[LockoutEnd], [e].[NormalizedEmail], [e].[NormalizedUserName], [e].[PasswordHash], [e].[PhoneNumber], [e].[PhoneNumberConfirmed], [e].[SecurityStamp], [e].[TwoFactorEnabled], [e].[UserName]\r\nFROM [AspNetUsers] AS [e]\r\nWHERE [e].[Id] = @__get_Item_0\r\nMicrosoft.EntityFrameworkCore.Database.Command:Information: Executed DbCommand (1ms) [Parameters=[@__get_Item_0='?' (Size = 450), @__get_Item_1='?' (Size = 450), @__get_Item_2='?' (Size = 450)], CommandType='Text', CommandTimeout='30']\r\nSELECT TOP(1) [e].[UserId], [e].[LoginProvider], [e].[Name], [e].[Value]\r\nFROM [AspNetUserTokens] AS [e]\r\nWHERE (([e].[UserId] = @__get_Item_0) AND ([e].[LoginProvider] = @__get_Item_1)) AND ([e].[Name] = @__get_Item_2)\r\nMicrosoft.EntityFrameworkCore.Database.Command:Information: Executed DbCommand (1ms) [Parameters=[@__get_Item_0='?' (Size = 450)], CommandType='Text', CommandTimeout='30']\r\nSELECT TOP(1) [e].[Id], [e].[AccessFailedCount], [e].[ConcurrencyStamp], [e].[Email], [e].[EmailConfirmed], [e].[FirstName], [e].[FullName], [e].[InviteSecret], [e].[IsInvited], [e].[LastLogin], [e].[LastName], [e].[LockoutEnabled], [e].[LockoutEnd], [e].[NormalizedEmail], [e].[NormalizedUserName], [e].[PasswordHash], [e].[PhoneNumber], [e].[PhoneNumberConfirmed], [e].[SecurityStamp], [e].[TwoFactorEnabled], [e].[UserName]\r\nFROM [AspNetUsers] AS [e]\r\nWHERE [e].[Id] = @__get_Item_0\r\n**Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler:Information: AuthenticationScheme: Identity.Application signed out.\r\nMicrosoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler:Information: AuthenticationScheme: Identity.External signed out.\r\nMicrosoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler:Information: AuthenticationScheme: Identity.TwoFactorUserId signed out.\r\nMicrosoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler:Information: Identity.TwoFactorRememberMe was not authenticated. Failure message: No principal.**\r\nMicrosoft.EntityFrameworkCore.Database.Command:Information: Executed DbCommand (1ms) [Parameters=[@__get_Item_0='?' (Size = 450), @__get_Item_1='?' (Size = 450), @__get_Item_2='?' (Size = 450)], CommandType='Text', CommandTimeout='30']\r\nSELECT TOP(1) [e].[UserId], [e].[LoginProvider], [e].[Name], [e].[Value]\r\nFROM [AspNetUserTokens] AS [e]\r\nWHERE (([e].[UserId] = @__get_Item_0) AND ([e].[LoginProvider] = @__get_Item_1)) AND ([e].[Name] = @__get_Item_2)\r\nMicrosoft.AspNetCore.Mvc.RazorPages.Internal.PageActionInvoker:Information: Executed action /Account/Manage/TwoFactorAuthentication in 17174.327ms\r\nMicrosoft.AspNetCore.Hosting.Internal.WebHost:Information: Request finished in 17189.4446ms 200 text/html; charset=utf-8\r\n...\r\n```\r\n\r\n```\r\n.csproj\r\n...\r\n<ItemGroup>\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.DataProtection.AzureStorage\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Proxies\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"2.1.1\" />\r\n</ItemGroup>\r\n...\r\n```\r\n\r\n\r\n","Url":"https://github.com/aspnet/Identity/issues/1948","RelatedDescription":"Open issue \"User signed out after requesting /Identity/Account/Manage/TwoFactorAuthentication\" (#1948)"},{"Id":"355353535","IsPullRequest":true,"CreatedAt":"2018-08-29T22:39:44","Actor":"dotnet-maestro-bot","Number":"1947","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @HaoK\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/1947","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#1947)"},{"Id":"353923928","IsPullRequest":true,"CreatedAt":"2018-08-29T21:41:52","Actor":"HaoK","Number":"1941","RawContent":null,"Title":"Allow cookie validation when stores don't support security stamp","State":"closed","Body":"Fixes https://github.com/aspnet/Identity/issues/1880\r\n\r\n@ajcvickers @blowdart ","Url":"https://github.com/aspnet/Identity/pull/1941","RelatedDescription":"Closed or merged PR \"Allow cookie validation when stores don't support security stamp\" (#1941)"},{"Id":"354949958","IsPullRequest":false,"CreatedAt":"2018-08-29T00:20:58","Actor":"brunobalmeida","Number":"1946","RawContent":null,"Title":"ASP.NET core 2.0 Authentication does persist more than 15 Seconds","State":"open","Body":"I have seen the topic: https://github.com/aspnet/Identity/issues/1389, which seems to be the same issue. But in my case something else (weird) is happening. I have set the authentication and the cookies configuration. Although, the user is logged out almost instantaneously. The weird part refers to the cookies and the expiration of them. When I look at the developer tools on Chrome my cookies are like this: \r\n\r\n![image](https://user-images.githubusercontent.com/26010402/44757928-a9fb4800-aaff-11e8-86f2-fd81f240edd4.png)\r\n\r\nDoes anybody has any ideia on how to set those cookies to the correct expiration date? \r\n\r\nMy startup looks like this:\r\n\r\n`services.AddIdentity<ApplicationUser, IdentityRole>(config =>\r\n            {\r\n                config.SignIn.RequireConfirmedEmail = false;\r\n            })\r\n                .AddEntityFrameworkStores<ApplicationDbContext>()\r\n                .AddDefaultTokenProviders();\r\n\r\n\r\n            services.Configure<SecurityStampValidatorOptions>(options => options.ValidationInterval = TimeSpan.FromMinutes(30));\r\n\r\n\r\n            services.AddAuthentication()\r\n                .Services.ConfigureApplicationCookie(o =>\r\n            {\r\n\r\n                o.LoginPath = \"/account/login\";\r\n                o.LogoutPath = \"/account/logout\";\r\n                o.SlidingExpiration = true;\r\n                o.Cookie.Expiration = TimeSpan.FromHours(1);\r\n                o.Cookie = new CookieBuilder\r\n                {\r\n                    HttpOnly = true,\r\n                    Name = \".BrAssociation.Security.Cookie\",\r\n                    Path = \"/\",\r\n                    SameSite = SameSiteMode.Lax,\r\n                    SecurePolicy = CookieSecurePolicy.SameAsRequest\r\n                };\r\n\r\n\r\n            });`\r\n","Url":"https://github.com/aspnet/Identity/issues/1946","RelatedDescription":"Open issue \"ASP.NET core 2.0 Authentication does persist more than 15 Seconds\" (#1946)"},{"Id":"354480148","IsPullRequest":true,"CreatedAt":"2018-08-27T22:15:59","Actor":"dotnet-maestro-bot","Number":"1945","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @HaoK\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/1945","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#1945)"},{"Id":"354441805","IsPullRequest":true,"CreatedAt":"2018-08-27T20:39:57","Actor":"HaoK","Number":"1944","RawContent":null,"Title":"Disable parallelization","State":"closed","Body":"For https://github.com/aspnet/Identity/issues/1926\r\n\r\nTest running time go from 17s -> 29s locally\r\n\r\n@Eilon @ajcvickers ","Url":"https://github.com/aspnet/Identity/pull/1944","RelatedDescription":"Closed or merged PR \"Disable parallelization\" (#1944)"},{"Id":"354228998","IsPullRequest":false,"CreatedAt":"2018-08-27T08:33:45","Actor":"vankampenp","Number":"1942","RawContent":null,"Title":"Race condition in userManager.CreateAsync","State":"open","Body":"In a site where I create users on the fly I have the following code:\r\n \r\n```\r\nvar user = await userManager.FindByNameAsync(userName);\r\nif (user == null) //does not exist create it\r\n{\r\n     user = new IdentityUser\r\n    {\r\n           UserName = userName\r\n    ..\r\n    }                     \r\n    IdentityResult idresult = await userManager.CreateAsync(user, password);\r\n    if (!idresult.Succeeded)\r\n    {\r\n           if (idresult.Errors.FirstOrDefault(e => e.Code == \"DuplicateUserName\") == null)\r\n           {           \r\n                    ...\r\n            }\r\n            //duplicate user from a different thread\r\n             user = await userManager.FindByNameAsync(userName);\r\n        }\r\n...\r\n```\r\n\r\nIn a race condition, where a user tried to create the user the same time on a mobile and a PC (with different IP addresses), I got an uncatched error on CreateAsync\r\n\r\nMicrosoft.EntityFrameworkCore.DbUpdateException: An error occurred while updating the entries. See the inner exception for details. ---> System.Data.SqlClient.SqlException: Cannot insert duplicate key row in object 'dbo.AspNetUsers' with unique index 'UserNameIndex'. The duplicate key value is (...).\r\n  \r\nI don't understand why the store did not catch the errror, as it can return a DuplicateUserName error, but that was not returned here.","Url":"https://github.com/aspnet/Identity/issues/1942","RelatedDescription":"Open issue \"Race condition in userManager.CreateAsync\" (#1942)"},{"Id":"353574561","IsPullRequest":true,"CreatedAt":"2018-08-23T23:47:50","Actor":"javiercn","Number":"1940","RawContent":null,"Title":"Sync Identity UI default layout with the templates layout","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/1940","RelatedDescription":"Closed or merged PR \"Sync Identity UI default layout with the templates layout\" (#1940)"},{"Id":"353499842","IsPullRequest":false,"CreatedAt":"2018-08-23T18:32:29","Actor":"javiercn","Number":"1939","RawContent":null,"Title":"Identity tests failing on the VSTS-CI","State":"closed","Body":"@HaoK A bunch of identity tests are failing in the VSTS-CI for a while, could you take a look at them?\r\nhttps://dotnet.visualstudio.com/public/_build/results?buildId=15079&view=ms.vss-test-web.test-result-details","Url":"https://github.com/aspnet/Identity/issues/1939","RelatedDescription":"Closed issue \"Identity tests failing on the VSTS-CI\" (#1939)"},{"Id":"353363519","IsPullRequest":false,"CreatedAt":"2018-08-23T12:47:08","Actor":"thomaslevesque","Number":"1938","RawContent":null,"Title":"MVC1000 warning due to the use of IHtmlHelper.Partial","State":"closed","Body":"Warning MVC1000 is triggered in the following scaffolded pages:\r\n- Identity/Account/ExternalLogins.cshtml\r\n- Identity/Account/Index.cshtml\r\n\r\n> Use of IHtmlHelper.Partial may result in application deadlocks. Consider using <partial> Tag Helper or IHtmlHelper.PartialAsync.\r\n\r\n(there might be other instances of this, but I didn't scaffold all pages)","Url":"https://github.com/aspnet/Identity/issues/1938","RelatedDescription":"Closed issue \"MVC1000 warning due to the use of IHtmlHelper.Partial\" (#1938)"},{"Id":"353142201","IsPullRequest":false,"CreatedAt":"2018-08-22T22:00:59","Actor":"aspnet-hello","Number":"1937","RawContent":null,"Title":"Test failure: QueryingIdentityEndpointsReturnsNotFoundWhenIdentityIsNotPresent","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=536973&buildTypeId=Releases_22xPublic_Win2012) occasionally with the following error:\r\n```\r\nSystem.InvalidOperationException : Can't find'C:\\b\\w\\33bdfc1cae7b2a38\\modules\\Identity\\test\\Identity.FunctionalTests\\bin\\Release\\netcoreapp2.2\\Identity.DefaultUI.WebSite.deps.json'. This file is required for functional tests to run properly. There should be a copy of the file on your source project bin folder. If that is not the case, make sure that the property PreserveCompilationContext is set to true on your project file. E.g '<PreserveCompilationContext>true</PreserveCompilationContext>'. For functional tests to work they need to either run from the build output folder or the Identity.DefaultUI.WebSite.deps.json file from your application's output directory must be copied to the folder where the tests are running on. A common cause for this error is having shadow copying enabled when the tests run.\r\n   at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory`1.EnsureDepsFile()\r\n   at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory`1.EnsureServer()\r\n   at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory`1.CreateDefaultClient(DelegatingHandler[] handlers)\r\n   at Microsoft.AspNetCore.Mvc.Testing.WebApplicationFactory`1.CreateClient(WebApplicationFactoryClientOptions options)\r\n   at Microsoft.AspNetCore.Identity.FunctionalTests.NoIdentityAddedTests.QueryingIdentityEndpointsReturnsNotFoundWhenIdentityIsNotPresent(String endpoint) in /_/test/Identity.FunctionalTests/NoIdentityAddedTests.cs:line 31\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.2.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/Identity/issues/1937","RelatedDescription":"Open issue \"Test failure: QueryingIdentityEndpointsReturnsNotFoundWhenIdentityIsNotPresent\" (#1937)"}],"ResultType":"GitHubIssue"},"Kestrel-Issues":{"Issues":[{"Id":"360489904","IsPullRequest":true,"CreatedAt":"2018-09-15T00:23:14","Actor":"JunTaoLuo","Number":"2930","RawContent":null,"Title":"Port long Huffman encoding bug fix","State":"open","Body":"Addresses: https://github.com/aspnet/KestrelHttpServer/issues/2911","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2930","RelatedDescription":"Open PR \"Port long Huffman encoding bug fix\" (#2930)"},{"Id":"360033379","IsPullRequest":true,"CreatedAt":"2018-09-14T18:30:53","Actor":"dotnet-maestro-bot","Number":"2925","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/KestrelHttpServer.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2925","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2925)"},{"Id":"360405931","IsPullRequest":false,"CreatedAt":"2018-09-14T18:19:15","Actor":"tiago-soczek","Number":"2929","RawContent":null,"Title":"Category of some loggers are wrong - Name of Type instead Namespace+Type","State":"open","Body":"Hi,\r\n\r\nWhile I was filtering log entries by category/source, I found these 2 loggers using just the Type name for the category of logging:\r\n\r\n----\r\n\r\nhttps://github.com/aspnet/KestrelHttpServer/blob/release/2.2/src/Kestrel.Core/Internal/HttpsConnectionAdapter.cs#L64\r\n\r\n----\r\n\r\nhttps://github.com/aspnet/KestrelHttpServer/blob/6fde01a825cffc09998d3f8a49464f7fbe40f9c4/src/Kestrel.Core/Adapter/ListenOptionsConnectionLoggingExtensions.cs#L33\r\n\r\n----\r\n\r\nIn this case, would be better to use the full type name (Namespace+Type), right?\r\n\r\nIf needed, I'm available to work on this issue.\r\n\r\nThanks.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2929","RelatedDescription":"Open issue \"Category of some loggers are wrong - Name of Type instead Namespace+Type\" (#2929)"},{"Id":"360185009","IsPullRequest":false,"CreatedAt":"2018-09-14T07:18:26","Actor":"westfin","Number":"2928","RawContent":null,"Title":"Add a new feature to expose the socket handle","State":"open","Body":"In my specific case I need get access to incoming connection socket.Handle from application code. If I am correct understand current working model (#1980) I need some feature that will be transfer socket.Handle from transport layer to application code.\r\n[More details](https://github.com/aspnet/KestrelHttpServer/issues/1980#issuecomment-420199729)\r\n\r\nPlease correct me if I am wrong.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2928","RelatedDescription":"Open issue \"Add a new feature to expose the socket handle\" (#2928)"},{"Id":"360126253","IsPullRequest":false,"CreatedAt":"2018-09-14T01:44:48","Actor":"Tratcher","Number":"2927","RawContent":null,"Title":"Memory consumption by Idle Https/TLS Connections","State":"open","Body":"[Reposting from an e-mail thread]\r\n\r\nWhen I was doing IoT for example, we measured that an idle HTTPS/TLS connection can suck as much as 128 KB of memory.  For Gateway scenarios, where connections can be mostly idle, but they need to be there this is very expensive.  If I remember correctly the problem was SSL libraries requiring a couple of 32KB or 64KB buffers no matter what.\r\n\r\nIdeally, you want 'idle' connections to truly cost 0 Bytes of memory or very close to it.  \r\n\r\nAnd this is relatively simple to test, create a HTTPS server with 100,000 TLS connections doing nothing, take note of the Commit Bytes, divide by 100,000.\r\n\r\nDo you know in .NET Core what is the cost?\r\n\r\nA lot of that overhead is cached request structures and pipe buffers designed to make active connections faster. We could consider discarding some of those cached objects if the connection is idle for a certain period of time. What if we only held it via a weak reference when the connection was idle?\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2927","RelatedDescription":"Open issue \"Memory consumption by Idle Https/TLS Connections\" (#2927)"},{"Id":"360085188","IsPullRequest":false,"CreatedAt":"2018-09-13T22:11:08","Actor":"Tratcher","Number":"2926","RawContent":null,"Title":"Allow the encoder to split headers across frames","State":"open","Body":"The HPackEncoder has a potential infinite loop today.\r\nhttps://github.com/aspnet/KestrelHttpServer/blob/55e5e564226e7b27742c91f46ea71841071e4ac3/src/Kestrel.Core/Internal/Http2/HPack/HPackEncoder.cs#L35-L42\r\n\r\nEncodeHeader returns false if it does not have enough space to encode the value. If this header was larger than max frame size then no data will be available for the frame at all and length will be 0. The server will be stuck in an infinite loop sending zero length continuation frames.\r\n\r\nhttps://github.com/aspnet/KestrelHttpServer/pull/2893 added an exception to break the infinate loop, but it did so by throwing and very ungracefully aborting the socket.\r\n\r\nProposal: The spec allows splitting encoded headers across frames. This would allow the encoder to pack frames more densely and always make progress.\r\n\r\nPriority: Not urgent, the response header would need to be larger than the max frame size (16kb). The client and server can also raise that frame size.  Implementing real response header compression would allow even larger values before hitting the frame size limit.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2926","RelatedDescription":"Open issue \"Allow the encoder to split headers across frames\" (#2926)"},{"Id":"359681084","IsPullRequest":true,"CreatedAt":"2018-09-13T18:54:15","Actor":"Tratcher","Number":"2921","RawContent":null,"Title":"Dispatch Http/2 write callbacks","State":"closed","Body":"See https://github.com/aspnet/KestrelHttpServer/issues/2878#issuecomment-420773020","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2921","RelatedDescription":"Closed or merged PR \"Dispatch Http/2 write callbacks\" (#2921)"},{"Id":"359793178","IsPullRequest":true,"CreatedAt":"2018-09-13T08:27:55","Actor":"davidfowl","Number":"2924","RawContent":null,"Title":"WIP: Use the ArrayPool","State":"open","Body":"Use the ArrayPool instead of using the SlabMemoryPool. There are pros and cons:\r\n\r\nPros:\r\n- The pool shrinks under memory pressure\r\n- More than 4K sized buffers (This isn't using that right now)\r\n- We'll probably get future advancements for free (possibly this https://github.com/dotnet/corefx/issues/31787)\r\n\r\nCons:\r\n- Allocates per call (the object wrapping the array)\r\n- No pinning, we'll end up paying the cost of pinning per operation (see https://github.com/dotnet/coreclr/issues/19936)\r\n\r\nI need to run some performance tests. \r\n","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2924","RelatedDescription":"Open PR \"WIP: Use the ArrayPool\" (#2924)"},{"Id":"359711617","IsPullRequest":true,"CreatedAt":"2018-09-13T01:44:40","Actor":"JunTaoLuo","Number":"2923","RawContent":null,"Title":"Enable hpack/4.2 - Maximum Table Size test","State":"open","Body":"We needed to ensure dynamic tables size updates occur at the beginning of the header block\r\n\r\nPartially addresses https://github.com/aspnet/KestrelHttpServer/issues/2154.\r\n\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2923","RelatedDescription":"Open PR \"Enable hpack/4.2 - Maximum Table Size test\" (#2923)"},{"Id":"359695767","IsPullRequest":false,"CreatedAt":"2018-09-13T00:08:08","Actor":"JunTaoLuo","Number":"2922","RawContent":null,"Title":"Impose limits on decoded integers via HPACK","State":"open","Body":"The HPACK specification allows integers of any size and it's up to the implementation to pick reasonable limits.\r\n\r\nhttps://tools.ietf.org/html/rfc7541#section-5.1\r\n```\r\nThis integer representation allows for values of indefinite size. \r\n... \r\nInteger encodings that exceed implementation limits -- in\r\nvalue or octet length -- MUST be treated as decoding errors.\r\nDifferent limits can be set for each of the different uses of\r\nintegers, based on implementation constraints.\r\n```","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2922","RelatedDescription":"Open issue \"Impose limits on decoded integers via HPACK\" (#2922)"},{"Id":"359230761","IsPullRequest":true,"CreatedAt":"2018-09-12T22:09:09","Actor":"halter73","Number":"2916","RawContent":null,"Title":"Handle SocketError.ProtocolType as a connection reset on macOS","State":"closed","Body":"Backport of #2845\r\n\r\nAddresses #2885","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2916","RelatedDescription":"Closed or merged PR \"Handle SocketError.ProtocolType as a connection reset on macOS\" (#2916)"},{"Id":"359276669","IsPullRequest":true,"CreatedAt":"2018-09-12T18:51:30","Actor":"halter73","Number":"2918","RawContent":null,"Title":"Backport the in-memory functional tests to 2.1 ","State":"closed","Body":"#2886 \r\n\r\nThis should also resolve #2776","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2918","RelatedDescription":"Closed or merged PR \"Backport the in-memory functional tests to 2.1 \" (#2918)"},{"Id":"359427731","IsPullRequest":false,"CreatedAt":"2018-09-12T10:59:14","Actor":"ZOXEXIVO","Number":"2920","RawContent":null,"Title":".NET Core 2.1: UvException: Error -107 ENOTCONN socket is not connected","State":"open","Body":"Last week see see this error in our logs:\r\n\r\n\r\n```\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvException: Error -107 ENOTCONN socket is not connected\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.LibuvFunctions.ThrowError(Int32 statusCode)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvTcpHandle.GetPeerIPEndPoint()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.LibuvConnection..ctor(ListenerContext context, UvStreamHandle socket)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.ListenerSecondary.ReadStartCallback(UvStreamHandle handle, Int32 status)\r\n```\r\n\r\nIt should be fixed with changing loglevel in v2.1 release https://github.com/aspnet/KestrelHttpServer/issues/2045, https://github.com/aspnet/KestrelHttpServer/issues/2583, https://github.com/aspnet/KestrelHttpServer/issues/2658, but we see it now\r\n\r\nWe use this packages:\r\n```\r\n<PackageReference Include=\"Microsoft.AspNetCore\" Version=\"2.1.2\" />\r\n<PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.1.1\" />\r\n<PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv\" Version=\"2.1.2\" />\r\n```\r\n\r\nand build app with docker image\r\n`microsoft/dotnet:2.1-sdk`\r\nand run it with \r\n`microsoft/dotnet:2.1-aspnetcore-runtime`\r\n\r\nLast build date from container - 23 August 2018\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2920","RelatedDescription":"Open issue \".NET Core 2.1: UvException: Error -107 ENOTCONN socket is not connected\" (#2920)"},{"Id":"359307203","IsPullRequest":false,"CreatedAt":"2018-09-12T04:02:26","Actor":"davidfowl","Number":"2919","RawContent":null,"Title":"Test failed: Some connections failed to close gracefully during server shutdown.","State":"open","Body":"Fall out from my change here https://github.com/aspnet/KestrelHttpServer/pull/2834.\r\n\r\nhttps://ci3.dot.net/job/aspnet_KestrelHttpServer/job/master/job/windows-Configuration_Debug_prtest/52/consoleFull\r\n\r\ncc @halter73 \r\n\r\n```\r\n[xUnit.net 00:00:06.41]     SynchronousWritesAllowedByDefault [FAIL]\r\n10:51:58   Failed   SynchronousWritesAllowedByDefault\r\n10:51:58   Error Message:\r\n10:51:58    System.AggregateException : An error occurred while writing to logger(s). (Shutdown failure. Log Debug[NotAllConnectionsClosedGracefully]: Some connections failed to close gracefully during server shutdown. )\r\n10:51:58   ---- System.Exception : Shutdown failure. Log Debug[NotAllConnectionsClosedGracefully]: Some connections failed to close gracefully during server shutdown. \r\n10:51:58   Stack Trace:\r\n10:51:58      at Microsoft.Extensions.Logging.Logger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n10:51:58      at Microsoft.Extensions.Logging.LoggerMessage.<>c__DisplayClass4_0.<Define>b__0(ILogger logger, Exception exception)\r\n10:51:58      at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.KestrelTrace.NotAllConnectionsClosedGracefully() in /_/src/Kestrel.Core/Internal/Infrastructure/KestrelTrace.cs:line 164\r\n10:51:58      at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.StopAsync(CancellationToken cancellationToken) in /_/src/Kestrel.Core/KestrelServer.cs:line 192\r\n10:51:58      at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.StopAsync(CancellationToken cancellationToken) in /_/src/Kestrel.Core/KestrelServer.cs:line 177\r\n10:51:58      at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.Dispose() in /_/src/Kestrel.Core/KestrelServer.cs:line 222\r\n10:51:58      at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope.Dispose()\r\n10:51:58      at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.Dispose()\r\n10:51:58      at Microsoft.Extensions.DependencyInjection.ServiceProvider.Dispose()\r\n10:51:58      at Microsoft.AspNetCore.Hosting.Internal.WebHost.Dispose()\r\n10:51:58      at Microsoft.AspNetCore.Server.Kestrel.InMemory.FunctionalTests.TestTransport.TestServer.Dispose() in /_/test/Kestrel.InMemory.FunctionalTests/TestTransport/TestServer.cs:line 111\r\n10:51:58      at Microsoft.AspNetCore.Server.Kestrel.InMemory.FunctionalTests.ResponseTests.SynchronousWritesAllowedByDefault() in /_/test/Kestrel.InMemory.FunctionalTests/ResponseTests.cs:line 2332\r\n10:51:58   --- End of stack trace from previous location where exception was thrown ---\r\n10:51:58   ----- Inner Stack Trace -----\r\n10:51:58      at Microsoft.AspNetCore.Testing.TestApplicationErrorLogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter) in /_/test/shared/TestApplicationErrorLogger.cs:line 74\r\n10:51:58      at Microsoft.Extensions.Logging.Logger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n10:51:58   Standard Output Messages:\r\n10:51:58    | [0.001s] TestLifetime Information: Starting test SynchronousWritesAllowedByDefault at 2018-09-06T17:51:51\r\n10:51:58    | [0.003s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n10:51:58    | [0.003s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting started\r\n10:51:58    | [0.003s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Loaded hosting startup assembly testhost\r\n10:51:58    | [0.003s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGK45MGFATA\" started.\r\n10:51:58    | [0.464s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.1 GET http:///  \r\n10:51:58    | [0.468s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGK45MGFATA\" completed keep alive response.\r\n10:51:58    | [0.468s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request finished in 3.8665ms 200 \r\n10:51:58    | [0.629s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.1 GET http:///  \r\n10:51:58    | [0.630s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGK45MGFATA\" completed keep alive response.\r\n10:51:58    | [0.630s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request finished in 0.9389ms 200 \r\n10:51:58    | [0.651s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting shutdown\r\n10:51:58    | [5.653s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGK45MGFATA\" disconnecting.\r\n10:51:58    | [5.654s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLGK45MGFATA\" stopped.\r\n10:51:58    | [5.710s] Microsoft.AspNetCore.Server.Kestrel Debug: Some connections failed to close gracefully during server shutdown.\r\n10:51:58    | [5.711s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Server shutdown exception\r\n10:51:58    | System.AggregateException: An error occurred while writing to logger(s). (Shutdown failure. Log Debug[NotAllConnectionsClosedGracefully]: Some connections failed to close gracefully during server shutdown. ) ---> System.Exception: Shutdown failure. Log Debug[NotAllConnectionsClosedGracefully]: Some connections failed to close gracefully during server shutdown. \r\n10:51:58    |    at Microsoft.AspNetCore.Testing.TestApplicationErrorLogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter) in /_/test/shared/TestApplicationErrorLogger.cs:line 74\r\n10:51:58    |    at Microsoft.Extensions.Logging.Logger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n10:51:58    |    --- End of inner exception stack trace ---\r\n10:51:58    |    at Microsoft.Extensions.Logging.Logger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)\r\n10:51:58    |    at Microsoft.Extensions.Logging.LoggerMessage.<>c__DisplayClass4_0.<Define>b__0(ILogger logger, Exception exception)\r\n10:51:58    |    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.KestrelTrace.NotAllConnectionsClosedGracefully() in /_/src/Kestrel.Core/Internal/Infrastructure/KestrelTrace.cs:line 164\r\n10:51:58    |    at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.StopAsync(CancellationToken cancellationToken) in /_/src/Kestrel.Core/KestrelServer.cs:line 192\r\n10:51:58    |    at Microsoft.AspNetCore.Hosting.Internal.WebHost.StopAsync(CancellationToken cancellationToken)\r\n10:51:58    |    at Microsoft.AspNetCore.Hosting.Internal.WebHost.Dispose()\r\n10:51:58    | ---> (Inner Exception #0) System.Exception: Shutdown failure. Log Debug[NotAllConnectionsClosedGracefully]: Some connections failed to close gracefully during server shutdown. \r\n10:51:58    |    at Microsoft.AspNetCore.Testing.TestApplicationErrorLogger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter) in /_/test/shared/TestApplicationErrorLogger.cs:line 74\r\n10:51:58    |    at Microsoft.Extensions.Logging.Logger.Log[TState](LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3 formatter)<---\r\n10:51:58    | [5.724s] TestLifetime Information: Finished test SynchronousWritesAllowedByDefault in 5.7229068s\r\n```","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2919","RelatedDescription":"Open issue \"Test failed: Some connections failed to close gracefully during server shutdown.\" (#2919)"},{"Id":"359122705","IsPullRequest":true,"CreatedAt":"2018-09-11T22:08:25","Actor":"dotnet-maestro-bot","Number":"2913","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/KestrelHttpServer.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2913","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2913)"},{"Id":"358251580","IsPullRequest":true,"CreatedAt":"2018-09-11T22:04:44","Actor":"JunTaoLuo","Number":"2904","RawContent":null,"Title":"Fix flaky test by ignoring indeterminant response","State":"closed","Body":"Addresses: https://github.com/aspnet/KestrelHttpServer/issues/2883.\r\n\r\nInstead of removing the `await ReceiveEnd()` call, I'm just ignoring the response.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2904","RelatedDescription":"Closed or merged PR \"Fix flaky test by ignoring indeterminant response\" (#2904)"},{"Id":"359241030","IsPullRequest":false,"CreatedAt":"2018-09-11T22:03:05","Actor":"aspnet-hello","Number":"2917","RawContent":null,"Title":"Test failure: TestInvalidRequestLines","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=551473&buildTypeId=Releases_22xPublic_OsxUniverse) occasionally with the following error:\r\n```\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\n   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)\r\n   at System.Collections.Generic.Dictionary`2.TryGetValue(TKey key, TValue& value)\r\n   at Castle.DynamicProxy.ModuleScope.GetFromCache(CacheKey key)\r\n   at Castle.DynamicProxy.Generators.BaseProxyGenerator.GetFromCache(CacheKey key)\r\n   at Castle.DynamicProxy.Generators.BaseProxyGenerator.ObtainProxyType(CacheKey cacheKey, Func`3 factory)\r\n   at Castle.DynamicProxy.Generators.ClassProxyGenerator.GenerateCode(Type[] interfaces, ProxyGenerationOptions options)\r\n   at Castle.DynamicProxy.DefaultProxyBuilder.CreateClassProxyType(Type classToProxy, Type[] additionalInterfacesToProxy, ProxyGenerationOptions options)\r\n   at Castle.DynamicProxy.ProxyGenerator.CreateClassProxyType(Type classToProxy, Type[] additionalInterfacesToProxy, ProxyGenerationOptions options)\r\n   at Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(Type classToProxy, Type[] additionalInterfacesToProxy, ProxyGenerationOptions options, Object[] constructorArguments, IInterceptor[] interceptors)\r\n   at Moq.Proxy.CastleProxyFactory.CreateProxy(Type mockType, ICallInterceptor interceptor, Type[] interfaces, Object[] arguments)\r\n   at Moq.Mock`1.<InitializeInstance>b__20_0()\r\n   at Moq.PexProtector.Invoke(Action action)\r\n   at Moq.Mock`1.InitializeInstance()\r\n   at Moq.Mock`1.OnGetObject()\r\n   at Moq.Mock.GetObject()\r\n   at Moq.Mock.get_Object()\r\n   at Moq.Mock`1.get_Object()\r\n   at Microsoft.AspNetCore.Server.Kestrel.InMemory.FunctionalTests.BadHttpRequestTests.TestBadRequest(String request, String expectedResponseStatusCode, String expectedExceptionMessage, String expectedAllowHeader) in /_/test/Kestrel.InMemory.FunctionalTests/BadHttpRequestTests.cs:line 202\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\n| [0.001s] TestLifetime Information: Starting test TestInvalidRequestLines-\" / HTTP/1.0\r\n|                                    -Invalid request line: '\" / HTTP/1.0\\x0D\\x0A' at 2018-09-11T20:08:19\r\n| [0.047s] TestLifetime Information: Finished test TestInvalidRequestLines-\" / HTTP/1.0\r\n|                                    -Invalid request line: '\" / HTTP/1.0\\x0D\\x0A' in 0.0439119s\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.2.\r\n\r\nCC @muratg\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2917","RelatedDescription":"Open issue \"Test failure: TestInvalidRequestLines\" (#2917)"},{"Id":"359137158","IsPullRequest":true,"CreatedAt":"2018-09-11T22:02:59","Actor":"JunTaoLuo","Number":"2915","RawContent":null,"Title":"Relax connection stop checks in tests to reduce flakiness","State":"closed","Body":"Addresses https://github.com/aspnet/KestrelHttpServer/issues/2750. This will reduce test coverage and I'm modifying similar tests preemptively since they could probably fail in the same pattern.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2915","RelatedDescription":"Closed or merged PR \"Relax connection stop checks in tests to reduce flakiness\" (#2915)"},{"Id":"359136231","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:38","Actor":"blowdart","Number":"2914","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when ASP.NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an ASP.NET Core web application. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing a specially crafted web requests to the ASP.NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles parsing web requests.\r\n\r\nThe underlying problem exists in the `System.IO.Pipelines` package. If you have other software which uses this package please follow the instructions in the [.NET Core bulletin](https://github.com/dotnet/announcements/issues/83).\r\n\r\n## Original Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/aspnet/Announcements/issues/316\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses either of the packages with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.All | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nASP.NET Core 2.1 is distributed as part of the .NET Core runtime. To check the current installed runtimes open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed you will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf the highest .NET Core SDK version is less that 2.1.402 or the highest `Microsoft.AspNetCore.App` runtime version is less that 2.1.4 you are vulnerable to this issue. You may not see any SDK versions if you have only installed the runtime.\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.402 on your development machines and build servers, and the .NET Core Runtime 2.1.4 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n#### Applications not using Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2914","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\" (#2914)"},{"Id":"358210058","IsPullRequest":false,"CreatedAt":"2018-09-11T15:51:19","Actor":"shirhatti","Number":"2903","RawContent":null,"Title":"Map ListenOptions.Protocols from IConfiguration","State":"closed","Body":"To allow enabling or disabling HTTP/2","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2903","RelatedDescription":"Closed issue \"Map ListenOptions.Protocols from IConfiguration\" (#2903)"},{"Id":"358472452","IsPullRequest":true,"CreatedAt":"2018-09-11T15:50:09","Actor":"Tratcher","Number":"2908","RawContent":null,"Title":"Map ListenOptions.Protocols from IConfiguration","State":"closed","Body":"#2903 @shirhatti @DamianEdwards requested this after a high level design review. This allows you to turn HTTP/2 (and HTTP/1.x) on/off server wide or per endpoint using only config.\r\n\r\nNew schemas:\r\n\r\nPer endpoint there is a new `Protocols` field:\r\n```\r\n{\r\n\"Kestrel\": {\r\n  \"EndPoints\": {\r\n    \"Endpoint0\": {\r\n      \"Url\": \"http://localhost:5000\",\r\n      \"Protocols\": \"Http1AndHttp2\"\r\n    },\r\n```\r\n\r\nGlobally there is a new `EndPointDefaults` section with a `Protocols` field:\r\n```\r\n{\r\n\"Kestrel\": {\r\n  \"EndPointDefaults\": {\r\n      \"Protocols\": \"Http1AndHttp2\"\r\n```\r\nAs an alternative we could collapse this to:\r\n```\r\n{\r\n\"Kestrel\": {\r\n      \"DefaultProtocols\": \"Http1AndHttp2\"\r\n```\r\n\r\nThe value is any acceptable value of the HttpProtocols enum: Http1, Http2, or Http1AndHttp2.\r\n\r\nThe global default really is global, it will affect endpoints defined via any of the currently acceptable mechanics: The default http://localhost:5000, UseUrls, ASPNETCORE_URLS, Listen, Config, etc.).\r\n\r\nProtocols specified in code will override the config values, including in ConfigureEndpointDefaults.\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2908","RelatedDescription":"Closed or merged PR \"Map ListenOptions.Protocols from IConfiguration\" (#2908)"},{"Id":"358988109","IsPullRequest":false,"CreatedAt":"2018-09-11T10:39:35","Actor":"drauch","Number":"2912","RawContent":null,"Title":"FlushAsync doesn't actually write data to the client?","State":"open","Body":"I have a Razor view which (as a minimal repro sample) looks like this:\r\n\r\n    @{ var longStr = new string('x', 100 * 1024); /* more than 64KB */ }\r\n    ...\r\n    @functions { string Throw () { throw new Exception(); } }\r\n    ...\r\n    <p>@longStr</p>\r\n    @await FlushAsync()\r\n    <p>@Throw()</p>\r\n\r\nI expected to see many x on the client, instead I see a proper error page. How is this possible if `FlushAsync` already sent `longStr` to the client? Is the data still buffered somewhere on the server?","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2912","RelatedDescription":"Open issue \"FlushAsync doesn't actually write data to the client?\" (#2912)"},{"Id":"358740714","IsPullRequest":false,"CreatedAt":"2018-09-10T18:29:16","Actor":"Tratcher","Number":"2911","RawContent":null,"Title":"Long huffman encoding bug","State":"open","Body":"https://github.com/dotnet/corefx/pull/32043 corefx found this bug in their copy of the Huffman decoder. Backport the test and fix.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2911","RelatedDescription":"Open issue \"Long huffman encoding bug\" (#2911)"},{"Id":"358253320","IsPullRequest":true,"CreatedAt":"2018-09-10T17:31:09","Actor":"dotnet-maestro-bot","Number":"2905","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @halter73\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/KestrelHttpServer.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2905","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2905)"},{"Id":"358704947","IsPullRequest":false,"CreatedAt":"2018-09-10T17:18:59","Actor":"coding4food","Number":"2910","RawContent":null,"Title":"Empty method in HttpContext.Request","State":"closed","Body":"I have a WebAPI project, and sometimes it returns 404. For example, when I make following requests:\r\n```\r\nGET /api/wallets/my - OK\r\nPOST /api/wallets/my/deposits - OK\r\nGET /api/wallets/my - 404\r\n```\r\nLooks like HTTP method is missing in `HttpContext.Request.Method` property for last request, which breaks routing:\r\n\r\n```\r\n2018-09-06 19:53:28.565 +03:00 [Information] (Microsoft.AspNetCore.Hosting.Internal.WebHost) Request starting HTTP/1.1  http://localhost:5001/api/wallets/my application/json \r\n2018-09-06 19:53:28.566 +03:00 [Information] (Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler) Successfully validated the token.\r\n2018-09-06 19:53:28.566 +03:00 [Debug] (Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler) AuthenticationScheme: \"Bearer\" was successfully authenticated.\r\n2018-09-06 19:53:28.567 +03:00 [Debug] (Microsoft.AspNetCore.Builder.RouterMiddleware) Request did not match any routes.\r\n2018-09-06 19:53:28.567 +03:00 [Debug] (Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware) \"\" requests are not supported\r\n2018-09-06 19:53:28.567 +03:00 [Debug] (Microsoft.AspNetCore.Routing.Tree.TreeRouter) Request successfully matched the route with name 'null' and template '\"api/Wallets/my\"'.\r\n2018-09-06 19:53:28.567 +03:00 [Debug] (Microsoft.AspNetCore.Mvc.Internal.ActionSelector) Action '\"Api.Controllers.WalletsController.Get (Api)\"' with id '\"085a7c14-baab-4f4d-8a40-33ec2d23c10f\"' did not match the constraint '\"Microsoft.AspNetCore.Mvc.Internal.HttpMethodActionConstraint\"'\r\n2018-09-06 19:53:28.569 +03:00 [Debug] (Microsoft.AspNetCore.Mvc.Internal.MvcAttributeRouteHandler) No actions matched the current request. Route values: []\r\n2018-09-06 19:53:28.569 +03:00 [Debug] (Microsoft.AspNetCore.Builder.RouterMiddleware) Request did not match any routes.\r\n2018-09-06 19:53:28.569 +03:00 [Debug] (Microsoft.AspNetCore.Server.Kestrel) Connection id \"\"0HLGK351866GS\"\" completed keep alive response.\r\n2018-09-06 19:53:28.570 +03:00 [Information] (Microsoft.AspNetCore.Hosting.Internal.WebHost) Request finished in 4.5ms 404\r\n```\r\n\r\nI am using version `2.1.3` of `Microsoft.AspNetCore.App` in my project.\r\n\r\nMy `dotnet --info`:\r\n```\r\nПакет SDK для .NET Core (отражающий любой global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nСреда выполнения:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  1.0.1 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.105 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2910","RelatedDescription":"Closed issue \"Empty method in HttpContext.Request\" (#2910)"},{"Id":"358534127","IsPullRequest":false,"CreatedAt":"2018-09-10T09:12:09","Actor":"ptupitsyn","Number":"2909","RawContent":null,"Title":"RequestSizeLimit causes BadHttpRequestException and 500 status code instead of 413","State":"open","Body":"I have a `[RequestSizeLimit]` on an API controller action:\r\n\r\n```\r\n    [HttpPut]\r\n    [RequestSizeLimit(120_000_000)]\r\n    public async Task<IActionResult> Put(IFormCollection form)\r\n    {\r\n       ...\r\n    }\r\n```\r\n\r\nWhen the limit is exceeded, `BadHttpRequestException` is thrown, and HTTP code 500 is returned.\r\nI would expect 413 error code instead, and no exception being thrown/logged, since this is a normal situation.\r\n\r\nAnother issue is that `BadHttpRequestException.StatusCode` and `Reason` are `internal`, so it is not possible to create a workaround with a custom `IMiddleware` (I can only rely on `Message`, which is culture-specific):\r\n\r\n```\r\npublic class ExceptionMiddleware : IMiddleware\r\n{\r\n    public async Task InvokeAsync(HttpContext context, RequestDelegate next)\r\n    {\r\n        try\r\n        {\r\n            await next(context);\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            if (ex is BadHttpRequestException badReqEx && badReqEx.Message == \"Request body too large.\")\r\n            {\r\n                context.Response.StatusCode = StatusCodes.Status413PayloadTooLarge;\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nRelated SO question: https://stackoverflow.com/questions/52243903/requestsizelimitattribute-http-500-instead-of-413-in-asp-net-core-2-1-401","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2909","RelatedDescription":"Open issue \"RequestSizeLimit causes BadHttpRequestException and 500 status code instead of 413\" (#2909)"},{"Id":"358274208","IsPullRequest":false,"CreatedAt":"2018-09-08T07:51:06","Actor":"aspnet-hello","Number":"2907","RawContent":null,"Title":"Test failure: NonListenerPipeConnectionsAreLoggedAndIgnored","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=549061&buildTypeId=Releases_22xPublic_HighSierraOsxUniverse) occasionally with the following error:\r\n```\r\nSystem.IO.InvalidDataException : No StatusCode found in ''\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.GetStatus(String response)\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.ReadResponse(Stream stream)\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.GetStringAsync(Uri requestUri, Boolean validateCertificate)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Tests.ListenerPrimaryTests.AssertResponseEventually(Uri address, String expected, String[] allowed, Int32 maxRetries, Int32 retryDelay) in /_/test/Kestrel.Transport.Libuv.Tests/ListenerPrimaryTests.cs:line 281\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Tests.ListenerPrimaryTests.NonListenerPipeConnectionsAreLoggedAndIgnored() in /_/test/Kestrel.Transport.Libuv.Tests/ListenerPrimaryTests.cs:line 140\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.2.\r\n\r\nCC @muratg\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2907","RelatedDescription":"Open issue \"Test failure: NonListenerPipeConnectionsAreLoggedAndIgnored\" (#2907)"},{"Id":"358255933","IsPullRequest":false,"CreatedAt":"2018-09-08T02:21:30","Actor":"aspnet-hello","Number":"2906","RawContent":null,"Title":"Test failure: RegisterAddresses_IPv4_Success","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=548955&buildTypeId=XPlat_Mac_MacUniverseCoreCLR) occasionally with the following error:\r\n```\r\nSystem.Net.Sockets.SocketException : Address already in use\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.GetSocket(Uri requestUri)\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.GetStream(Uri requestUri, Boolean validateCertificate)\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.GetStringAsync(Uri requestUri, Boolean validateCertificate)\r\n   at Microsoft.AspNetCore.Testing.HttpClientSlim.GetStringAsync(String requestUri, Boolean validateCertificate)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_Success(String addressInput, String[] testUrls, Int32 testPort) in /_/test/Kestrel.Transport.BindTests/AddressRegistrationTests.cs:line 190\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.AddressRegistrationTests.RegisterAddresses_IPv4_Success(String addressInput, String testUrl) in /_/test/Kestrel.Transport.BindTests/AddressRegistrationTests.cs:line 46\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\n| [0.001s] TestLifetime Information: Starting test RegisterAddresses_IPv4_Success-http://*:0/-http://127.0.0.1 at 2018-09-08T02:01:03\r\n| [0.004s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n| [0.005s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting started\r\n| [0.006s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Loaded hosting startup assembly Sockets.BindTests\r\n| [0.007s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting shutdown\r\n| [0.009s] TestLifetime Information: Finished test RegisterAddresses_IPv4_Success-http://*:0/-http://127.0.0.1 in 0.0075548s\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @muratg\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2906","RelatedDescription":"Open issue \"Test failure: RegisterAddresses_IPv4_Success\" (#2906)"},{"Id":"358188329","IsPullRequest":false,"CreatedAt":"2018-09-07T19:40:22","Actor":"Praveen-Rai","Number":"2902","RawContent":null,"Title":"Kestrel does not listen for https when run as a service on Ubuntu","State":"open","Body":"I am trying to host an ASP.Net Core MVC application (https redirection is enabled) on Ubuntu server, using Nginx as a reverse proxy. I have created and installed a local SSL certificate using OpenSSL. When i run my application using dotnet CLI it listens on both http://localhost:5000 & https://localhost:5001, and i am able to access it on web using https (http requests are being redirect to https by Nginx).\r\n\r\nThe problem is when i try to run the as a service, it only listens on http://localhost:5000.\r\n\r\nHere's the *.service file :\r\n\r\n```\r\n[Unit]\r\nDescription=Test ASP.Net core web application service.\r\n\r\n[Service]\r\nWorkingDirectory=/home/ubuntu/MyAppFolder\r\nExecStart=/usr/bin/dotnet/home/ubuntu/MyAppFolder/MyApplication.dll\r\nRestart=always\r\n# Restart service after 10 seconds if the dotnet service crashes:\r\nRestartSec=10\r\nSyslogIdentifier=MyApplication\r\nUser=www-data\r\nEnvironment=ASPNETCORE_ENVIRONMENT=Development\r\nEnvironment=DOTNET_PRINT_TELEMETRY_MESSAGE=false\r\nEnvironment=ASPNETCORE_HTTPS_PORT=5001\r\nEnvironment=ASPNETCORE_URLS=http://localhost:5000;https://localhost:5001\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\n```\r\n\r\nEnvironment details : ASP.Net Core 2.1.1, ASP.Net Core SDK 2.1.3, Nginx 1.14, Ubuntu 16.04\r\n\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2902","RelatedDescription":"Open issue \"Kestrel does not listen for https when run as a service on Ubuntu\" (#2902)"},{"Id":"358187271","IsPullRequest":false,"CreatedAt":"2018-09-07T19:36:25","Actor":"JunTaoLuo","Number":"2901","RawContent":null,"Title":"Add timeout for settings ack","State":"open","Body":"Meta issue: #2627\r\n\r\nSee settings ack","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2901","RelatedDescription":"Open issue \"Add timeout for settings ack\" (#2901)"}],"ResultType":"GitHubIssue"},"Razor-Issues":{"Issues":[{"Id":"360186096","IsPullRequest":false,"CreatedAt":"2018-09-14T21:46:30","Actor":"thiennn","Number":"2596","RawContent":null,"Title":"Razor Class Library: cannot find compiled views when dynamic loading at runtime","State":"closed","Body":"I am doing some prototype about plugin architecture and use razor class library for plugin. To be able to apply it for SimplCommerce https://github.com/simplcommerce/SimplCommerce/issues/422\r\n\r\nEverything good, except that the view engine cannot find complied views in plugins when they are loaded at runtime using AssemblyLoadContext. Although I have add it to ApplicationPartManager.\r\n\r\nYou can see my prototype add https://github.com/thiennn/dynamicLoadingRazorLib/\r\n\r\nThanks\r\n","Url":"https://github.com/aspnet/Razor/issues/2596","RelatedDescription":"Closed issue \"Razor Class Library: cannot find compiled views when dynamic loading at runtime\" (#2596)"},{"Id":"360398427","IsPullRequest":false,"CreatedAt":"2018-09-14T17:54:26","Actor":"rynowak","Number":"2598","RawContent":null,"Title":"C# 8 Readiness","State":"open","Body":"We need to evaluate and update Razor for C# 8. This will align with 3.0\r\n\r\nhttps://github.com/dotnet/csharplang/milestone/8\r\nhttps://channel9.msdn.com/Events/dotnetConf/2018/S103","Url":"https://github.com/aspnet/Razor/issues/2598","RelatedDescription":"Open issue \"C# 8 Readiness\" (#2598)"},{"Id":"360350205","IsPullRequest":true,"CreatedAt":"2018-09-14T15:23:44","Actor":"pranavkm","Number":"2597","RawContent":null,"Title":"Move RazorGenerate and RazorTagHelper tasks in to the Sdk","State":"open","Body":"Loading multiple versions of a task assembly result results in MSBuild on .NET Core to fail.\r\nAddressing this by moving the tasks in to the Sdk and renaming it. This should avoid\r\nimmediate issues for a 2.1 and 2.2 project co-existing and future proofs 2.2 and later.\r\n\r\nFixes https://github.com/aspnet/Razor/issues/2553","Url":"https://github.com/aspnet/Razor/pull/2597","RelatedDescription":"Open PR \"Move RazorGenerate and RazorTagHelper tasks in to the Sdk\" (#2597)"},{"Id":"356998401","IsPullRequest":true,"CreatedAt":"2018-09-14T15:21:36","Actor":"pranavkm","Number":"2570","RawContent":null,"Title":"Move tasks and targets in to Razor Sdk","State":"closed","Body":"","Url":"https://github.com/aspnet/Razor/pull/2570","RelatedDescription":"Closed or merged PR \"Move tasks and targets in to Razor Sdk\" (#2570)"},{"Id":"360123958","IsPullRequest":true,"CreatedAt":"2018-09-14T01:31:26","Actor":"rynowak","Number":"2595","RawContent":null,"Title":"Update to use non-capturing timer","State":"open","Body":"FYI only - replacing the code with the package that does the same thing.","Url":"https://github.com/aspnet/Razor/pull/2595","RelatedDescription":"Open PR \"Update to use non-capturing timer\" (#2595)"},{"Id":"360090987","IsPullRequest":false,"CreatedAt":"2018-09-13T22:34:15","Actor":"rynowak","Number":"2594","RawContent":null,"Title":"Parser computes the wrong length for C# code with an escaped transition","State":"open","Body":"The parser parses the following code into the correct C# but gets the length wrong - it includes `@@` when computing the length. \r\n\r\n```\r\n@{ @@Da }\r\n```\r\n\r\nI'm not aware of the impact of this issue. This is somewhat unlikely to occur, and would only happen when someone needs to use a verbatim identifier in C# from Razor. This could cause a variety of incorrect editor behaviors including issues with completion or crashes.\r\n\r\nFound while investigating #2266","Url":"https://github.com/aspnet/Razor/issues/2594","RelatedDescription":"Open issue \"Parser computes the wrong length for C# code with an escaped transition\" (#2594)"},{"Id":"360089692","IsPullRequest":false,"CreatedAt":"2018-09-13T22:29:04","Actor":"rynowak","Number":"2593","RawContent":null,"Title":"Parser treats the whitespace between a directive and its first token as C#","State":"open","Body":"The parser incorrectly maps the whitespace text that appears below into C# (syntax tree). Since this token isn't significant in any way, it gets thrown away harmlessly instead of mapped into the C# editor buffer. \r\n```\r\n@page \"foo\"\r\n```\r\n\r\nSo what I'm saying is that the 'space' character above is treated as C# by the buffer instead of metacode/none. Unfortunately the fix for this breaks completion for partial parsing. So it looks like we cut a corner or two when implementing this to make it easier to support completion.  \r\n\r\nFound while implementing #2266","Url":"https://github.com/aspnet/Razor/issues/2593","RelatedDescription":"Open issue \"Parser treats the whitespace between a directive and its first token as C#\" (#2593)"},{"Id":"359955735","IsPullRequest":true,"CreatedAt":"2018-09-13T21:51:47","Actor":"rynowak","Number":"2592","RawContent":null,"Title":"Check for spans that are missing from output","State":"closed","Body":"","Url":"https://github.com/aspnet/Razor/pull/2592","RelatedDescription":"Closed or merged PR \"Check for spans that are missing from output\" (#2592)"},{"Id":"359689958","IsPullRequest":true,"CreatedAt":"2018-09-12T23:36:20","Actor":"ajaybhargavb","Number":"2591","RawContent":null,"Title":"Generate baselines for HtmlDocumentTest","State":"open","Body":"Suggest reviewing this with w=1\r\n\r\n@NTaylorMullen @rynowak, suggest keeping a lookout for the following when reviewing this,\r\n- Inconsistencies\r\n- Node names and structure\r\n- How each node is serialized (what information to include/exclude when serializing the syntax nodes)\r\n\r\nFeedback and suggestions welcome on how to improve the diff in some way to make it more review friendly","Url":"https://github.com/aspnet/Razor/pull/2591","RelatedDescription":"Open PR \"Generate baselines for HtmlDocumentTest\" (#2591)"},{"Id":"359687651","IsPullRequest":true,"CreatedAt":"2018-09-12T23:24:43","Actor":"ajaybhargavb","Number":"2590","RawContent":null,"Title":"[Design] Razor parser rewrite","State":"open","Body":"- Rewrite CSharp parser\r\n- Basic rewrite of HTML parser\r\n- Define and generate syntax nodes and boilerplate\r\n- Rewrite ClassifiedSpan generation logic\r\n- Update parser test infrastructure\r\n\r\n","Url":"https://github.com/aspnet/Razor/pull/2590","RelatedDescription":"Open PR \"[Design] Razor parser rewrite\" (#2590)"},{"Id":"359608494","IsPullRequest":false,"CreatedAt":"2018-09-12T18:53:59","Actor":"ajaybhargavb","Number":"2589","RawContent":null,"Title":"Make the debugging experience of the new syntax tree better","State":"open","Body":"Right now the debugging experience for the new tree is very painful. Need to add the necessary `DebuggerDisplay()`s to the syntax nodes to make it easier to understand. This might involve updating the Syntax generator to support it.","Url":"https://github.com/aspnet/Razor/issues/2589","RelatedDescription":"Open issue \"Make the debugging experience of the new syntax tree better\" (#2589)"},{"Id":"358859906","IsPullRequest":false,"CreatedAt":"2018-09-12T16:26:31","Actor":"cjorgens79","Number":"2578","RawContent":null,"Title":"Cannot compile .NET core 2.1 web app with VS2017 15.8.3","State":"closed","Body":"Since upgrading to VS2017 15.8.2 and then 15.8.3, asp.net core 2.1 applications will no longer build, they fail with the error \"rzc discover exited with code -1073741819\". Even creating a brand new web app and compiling immediately results in this error. I was getting this error with 15.8.2, then I upgraded to 15.8.3 last night but the problem still exists. \r\n\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003156 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-1-003177 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview4-004233 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nPlease advise.","Url":"https://github.com/aspnet/Razor/issues/2578","RelatedDescription":"Closed issue \"Cannot compile .NET core 2.1 web app with VS2017 15.8.3\" (#2578)"},{"Id":"359523106","IsPullRequest":false,"CreatedAt":"2018-09-12T16:24:11","Actor":"mattman73","Number":"2588","RawContent":null,"Title":"HttpContext is null","State":"closed","Body":"Hi all\r\nI need some help I have been working on a way to load a page from within the program.cs file but I can not work out how this is done I have look on the web to find the answer but for the life of me, I cannot find anything that will work.\r\nWhat I'm looking to do is after a lookup I need to load the page again with an added searchstring, I have all the code doing the look up and cross-checking but I'm unable to get the code to redirect to the page again with the added searchstring.\r\nI have tried to DI the Httpcontext but this keeps returning null.\r\nany pointers would be great.","Url":"https://github.com/aspnet/Razor/issues/2588","RelatedDescription":"Closed issue \"HttpContext is null\" (#2588)"},{"Id":"358937175","IsPullRequest":false,"CreatedAt":"2018-09-11T08:19:12","Actor":"ajaybhargavb","Number":"2587","RawContent":null,"Title":"Update parser test infrastructure","State":"open","Body":"Update the parser test infrastructure to support both the old and the new syntax tree","Url":"https://github.com/aspnet/Razor/issues/2587","RelatedDescription":"Open issue \"Update parser test infrastructure\" (#2587)"},{"Id":"358935289","IsPullRequest":false,"CreatedAt":"2018-09-11T08:13:18","Actor":"ajaybhargavb","Number":"2586","RawContent":null,"Title":"Add unit tests for the new syntax infrastructure","State":"open","Body":"","Url":"https://github.com/aspnet/Razor/issues/2586","RelatedDescription":"Open issue \"Add unit tests for the new syntax infrastructure\" (#2586)"},{"Id":"358934832","IsPullRequest":false,"CreatedAt":"2018-09-11T08:11:51","Actor":"ajaybhargavb","Number":"2585","RawContent":null,"Title":"Rewrite intermediate lowering phase","State":"open","Body":"- Rewrite `DefaultRazorIntermediateNodeLoweringPhase`\r\n- Rewrite any other visitors that directly operate on the syntax tree","Url":"https://github.com/aspnet/Razor/issues/2585","RelatedDescription":"Open issue \"Rewrite intermediate lowering phase\" (#2585)"},{"Id":"358934281","IsPullRequest":false,"CreatedAt":"2018-09-11T08:10:08","Actor":"ajaybhargavb","Number":"2584","RawContent":null,"Title":"Rewrite tag helper binder phase","State":"open","Body":"- Define the structure of the nodes representing tag helper constructs\r\n- Rewrite `TagHelperParseTreeRewriter` and `TagHelperBlockRewriter`","Url":"https://github.com/aspnet/Razor/issues/2584","RelatedDescription":"Open issue \"Rewrite tag helper binder phase\" (#2584)"},{"Id":"358933502","IsPullRequest":false,"CreatedAt":"2018-09-11T08:07:44","Actor":"ajaybhargavb","Number":"2583","RawContent":null,"Title":"Improve HTML syntax structure","State":"open","Body":"- Can do this only after #2580 \r\n- Define the structure for all other nodes (like separate start tag and end tag) and generate them\r\n- Rewrite the parser to incorporate these new nodes in the tree","Url":"https://github.com/aspnet/Razor/issues/2583","RelatedDescription":"Open issue \"Improve HTML syntax structure\" (#2583)"},{"Id":"358932907","IsPullRequest":false,"CreatedAt":"2018-09-11T08:05:54","Actor":"ajaybhargavb","Number":"2582","RawContent":null,"Title":"Rewrite TagHelperSpan generation logic","State":"open","Body":"The work here is to keep the existing tooling experience from breaking.","Url":"https://github.com/aspnet/Razor/issues/2582","RelatedDescription":"Open issue \"Rewrite TagHelperSpan generation logic\" (#2582)"},{"Id":"358932363","IsPullRequest":false,"CreatedAt":"2018-09-11T08:04:13","Actor":"ajaybhargavb","Number":"2581","RawContent":null,"Title":"Rewrite classified span generation logic","State":"open","Body":"The work here is to keep the existing tooling experience from breaking.","Url":"https://github.com/aspnet/Razor/issues/2581","RelatedDescription":"Open issue \"Rewrite classified span generation logic\" (#2581)"},{"Id":"358931916","IsPullRequest":false,"CreatedAt":"2018-09-11T08:02:48","Actor":"ajaybhargavb","Number":"2580","RawContent":null,"Title":"Rewrite/refactor HTML parser","State":"open","Body":"- Generate the necessary node classes and its boilerplate based on the exisiting block types\r\n- Rewrite HtmlMarkupParser. This will be more of a port than rewrite","Url":"https://github.com/aspnet/Razor/issues/2580","RelatedDescription":"Open issue \"Rewrite/refactor HTML parser\" (#2580)"},{"Id":"358931096","IsPullRequest":false,"CreatedAt":"2018-09-11T08:00:14","Actor":"ajaybhargavb","Number":"2579","RawContent":null,"Title":"Rewrite/refactor C# parser","State":"open","Body":"- Understand and define the structure of the nodes representing various types of C# constructs\r\n- Generate the necessary node classes and its boilerplate\r\n- Essentially rewrite `CSharpCodeParser`","Url":"https://github.com/aspnet/Razor/issues/2579","RelatedDescription":"Open issue \"Rewrite/refactor C# parser\" (#2579)"},{"Id":"357884180","IsPullRequest":true,"CreatedAt":"2018-09-10T22:24:36","Actor":"NTaylorMullen","Number":"2572","RawContent":null,"Title":"Generated document output persists result to generated code container.","State":"closed","Body":"- Prior to this we had a `BackgroundDocumentGenerator` that would constantly be updating generated code containers. With this changes we've changed the details in how a `GeneratedCodeContainer` can be mutated. It can now be touched from any thread and is updated when an underlying `DocumentSnapshot` has available content. However, if a generated output comes through that's older then the last seen output we no-op.\r\n- Removed `BackgroundDocumentGenerator` setoutput logic.\r\n\r\n@rynowak definitely want a design overview on this guy. It feels super hackjobish even though it gets the job done 😢 ","Url":"https://github.com/aspnet/Razor/pull/2572","RelatedDescription":"Closed or merged PR \"Generated document output persists result to generated code container.\" (#2572)"},{"Id":"358808003","IsPullRequest":true,"CreatedAt":"2018-09-10T21:50:53","Actor":"dotnet-maestro-bot","Number":"2577","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"open","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @ajaybhargavb\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Razor merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Razor.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Razor/pull/2577","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2577)"},{"Id":"358741438","IsPullRequest":true,"CreatedAt":"2018-09-10T21:17:54","Actor":"ajaybhargavb","Number":"2576","RawContent":null,"Title":"Better logging to help debug test failure","State":"closed","Body":"https://github.com/aspnet/Razor/issues/2571\r\n\r\nLooks like all these tests have suddenly started timing out during restore on Mac. My guess is either restore is slow on Mac for some reason or there is some underlying problem in MsBuild with Mac. Either way this should help us debug what's really going on","Url":"https://github.com/aspnet/Razor/pull/2576","RelatedDescription":"Closed or merged PR \"Better logging to help debug test failure\" (#2576)"},{"Id":"358254042","IsPullRequest":true,"CreatedAt":"2018-09-10T17:48:48","Actor":"ajaybhargavb","Number":"2575","RawContent":null,"Title":"Actually verify classified spans","State":"closed","Body":"Looks like I somehow missed this when I wrote it. 🤦‍♂️ \r\nThankfully, this didn't cause any real trouble yet as we would have seen the classified spans change in the PRs.","Url":"https://github.com/aspnet/Razor/pull/2575","RelatedDescription":"Closed or merged PR \"Actually verify classified spans\" (#2575)"},{"Id":"358097133","IsPullRequest":false,"CreatedAt":"2018-09-07T23:28:05","Actor":"Therzok","Number":"2574","RawContent":null,"Title":"Using vstool (vsmac commandline tool) breaks when razor addin is installed","State":"closed","Body":"See https://devdiv.visualstudio.com/DevDiv/_queries/edit/621189\r\n\r\nExcerpt stacktrace: https://gist.github.com/GouriKumari/085633916efa0de5110e6cd7b3927252","Url":"https://github.com/aspnet/Razor/issues/2574","RelatedDescription":"Closed issue \"Using vstool (vsmac commandline tool) breaks when razor addin is installed\" (#2574)"},{"Id":"357918245","IsPullRequest":false,"CreatedAt":"2018-09-07T17:49:15","Actor":"aspnet-hello","Number":"2573","RawContent":null,"Title":"Test failure: RazorSdk_AddsCshtmlFilesToUpToDateCheckInput","State":"closed","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=547203&buildTypeId=XPlat_Mac_MacUniverseCoreCLR) occasionally with the following error:\r\n```\r\nSystem.ArgumentNullException : Value cannot be null.\r\nParameter name: result\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.Assert.BuildPassed(MSBuildResult result) in /_/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/Assert.cs:line 25\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.BuildIntrospectionTest.RazorSdk_AddsCshtmlFilesToUpToDateCheckInput() in /_/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/BuildIntrospectionTest.cs:line 24\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/Razor/issues/2573","RelatedDescription":"Closed issue \"Test failure: RazorSdk_AddsCshtmlFilesToUpToDateCheckInput\" (#2573)"},{"Id":"357877281","IsPullRequest":false,"CreatedAt":"2018-09-07T00:31:29","Actor":"aspnet-hello","Number":"2571","RawContent":null,"Title":"Test failure: RazorGenerate_Rebuilds_IfInputFilesAreRenamed","State":"open","Body":"This test [fails](http://aspnetci/viewLog.html?buildId=546482&buildTypeId=Releases_22xPublic_OsxUniverse) occasionally with the following error:\r\n```\r\nSystem.TimeoutException : command '$dotnet msbuild /nr:false /p:RunningAsTest=true /p:MicrosoftNETCoreAppVersion=2.2.0-preview2-26905-02 /p:NETStandardLibraryPackageVersion=2.0.3 /restore /p:_RazorBuildServerPipeName=\"21b3f27a-7873-4c13-81c7-ad4cc9fbb448\" /t:RazorGenerate /p:Configuration=Release ' timed out after 00:01:00.\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.MSBuildProcessManager.<>c__DisplayClass0_0.<RunProcessAsync>b__0(Task t) in /_/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/MSBuildProcessManager.cs:line 80\r\n   at System.Threading.Tasks.ContinuationResultTaskFromTask`1.InnerInvoke()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Razor.Design.IntegrationTests.RazorGenerateIntegrationTest.RazorGenerate_Rebuilds_IfInputFilesAreRenamed() in /_/test/Microsoft.AspNetCore.Razor.Design.Test/IntegrationTests/RazorGenerateIntegrationTest.cs:line 171\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.2.\r\n\r\nCC @mkArtakMSFT\n\nThis issue was made automatically. If there is a problem contact ryanbrandenburg.","Url":"https://github.com/aspnet/Razor/issues/2571","RelatedDescription":"Open issue \"Test failure: RazorGenerate_Rebuilds_IfInputFilesAreRenamed\" (#2571)"},{"Id":"356986102","IsPullRequest":true,"CreatedAt":"2018-09-06T00:24:46","Actor":"NTaylorMullen","Number":"2569","RawContent":null,"Title":"Allow TagHelpers to occur after unclosed C# blocks without assert failures.","State":"closed","Body":"- This scenario wasn't considered previously.\r\n\r\n#2566 \r\n\r\nFYI mostly, waiting for 2.2 to be open.","Url":"https://github.com/aspnet/Razor/pull/2569","RelatedDescription":"Closed or merged PR \"Allow TagHelpers to occur after unclosed C# blocks without assert failures.\" (#2569)"}],"ResultType":"GitHubIssue"},"Templates-Issues":{"Issues":[{"Id":"266880667","IsPullRequest":true,"CreatedAt":"2017-10-24T21:42:12","Actor":"s-whaley","Number":"873","RawContent":null,"Title":"Account AccessDenied View Razor Syntax Bug Fix","State":"closed","Body":"views/account/accessdenied ViewData[title] missing @ symbol","Url":"https://github.com/aspnet/Templates/pull/873","RelatedDescription":"Closed or merged PR \"Account AccessDenied View Razor Syntax Bug Fix\" (#873)"},{"Id":"267855162","IsPullRequest":false,"CreatedAt":"2017-10-24T19:00:48","Actor":"ezeasharma","Number":"874","RawContent":null,"Title":"The project file could not be loaded for csproj","State":"closed","Body":"I migrated my .netcore 1.1 proj to 2.0 using this link https://docs.microsoft.com/en-us/aspnet/core/migration/1x-to-2x/\r\n\r\nbut when i perform \"dotnet restore -v d\" i get the following error:\r\n\r\n```\r\nBuild started 10/23/2017 19:57:01.\r\n     1>Project \"someproj.csproj\" on node 1 (Restore target(s)).\r\n     1>Building with tools version \"15.0\".\r\n     1>someproj.csproj(1,1): error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1.\r\n     1>Done Building Project \"someproj.csproj\" (Restore target(s)) -- FAILED.\r\n\r\nBuild FAILED.\r\n\r\n       \"/someproj/someproj.csproj\" (Restore target) (1) ->\r\n         /someproj.csproj(1,1): error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1.\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\nHere is the output for dotnet --info\r\n\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nThis is my csproj file\r\n```\r\n\r\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Folder Include=\"wwwroot\\\" />\r\n    <Folder Include=\"swagger_static\\\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Serilog\" Version=\"2.4.0\" />\r\n    <PackageReference Include=\"Serilog.Extensions.Logging\" Version=\"1.4.0\" />\r\n    <PackageReference Include=\"Serilog.Sinks.Console\" Version=\"2.1.0\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"1.0.0\" />\r\n    <PackageReference Include=\"Dapper\" Version=\"1.50.2\" />\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"System.Threading\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n  <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" />\r\n  <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"2.0.0\" />\r\n  <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n</ItemGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\..\\..\\..\\recon.curator.common\\recon.curator.common.csproj\" />\r\n    <ProjectReference Include=\"..\\..\\..\\..\\recon.curator.service\\recon.curator.service.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```","Url":"https://github.com/aspnet/Templates/issues/874","RelatedDescription":"Closed issue \"The project file could not be loaded for csproj\" (#874)"},{"Id":"232879172","IsPullRequest":false,"CreatedAt":"2017-10-24T16:37:14","Actor":"a-elnajjar","Number":"847","RawContent":null,"Title":"Post test ","State":"closed","Body":"Hi asp.net Team;\r\nI see your Templates/test/Microsoft.Web.Templates.Web.Tests/WebAPITests.cs only have tow test methods for testing and verify GET Web API is working. I want to ask can I add testing and verify methods for POST Web API?","Url":"https://github.com/aspnet/Templates/issues/847","RelatedDescription":"Closed issue \"Post test \" (#847)"},{"Id":"252192148","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:47","Actor":"Dave3of5","Number":"864","RawContent":null,"Title":"Authentication on SPA apps","State":"closed","Body":"There seems to be no template for authentication on the SPA templates.\r\n\r\nI've been looking up various blog post and third party articles on how to add Jwt Authentication but they are scattered and most are for dotnet core 1.1. It would be nice if there was a template that showed the \"correct\" way to do this in dotnet core 2.0.","Url":"https://github.com/aspnet/Templates/issues/864","RelatedDescription":"Closed issue \"Authentication on SPA apps\" (#864)"},{"Id":"252376700","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:23","Actor":"pejta2207","Number":"865","RawContent":null,"Title":"Account/ConfirmEmail - NullReferenceException in Error.cshtml when providing incorrect token","State":"closed","Body":"**Description**\r\nThe issue is related to Individual Accounts Authentication template. It seems that providing incorrect authentication code for ConfirmEmail action in AccountController (e.g. token which already expired) should result in displaying error page. However, Razor throws an exception while generating the default error view:\r\n\r\n```\r\nNullReferenceException: Object reference not set to an instance of an object.\r\nAspNetCore._Views_Shared_Error_cshtml+<ExecuteAsync>d__0.MoveNext() in Error.cshtml, line 9\r\n```\r\n\r\n**Steps to reproduce**\r\n1. Create new project with Individual Accounts Authentication template.\r\n2. Run the application.\r\n3. Register any user via the registration form.\r\n4. Retrieve UserId of the registered user.\r\n5. Try to confirm email with incorrect token, e.g. http://localhost:PORT/Account/ConfirmEmail?UserId={UserId}&Code=INVALID_CODE\r\n\r\n**Further technical details**\r\nIt's probably caused by the last line in ConfirmEmail action in AccountController:\r\n```\r\nvar result = await _userManager.ConfirmEmailAsync(user, code);\r\nreturn View(result.Succeeded ? \"ConfirmEmail\" : \"Error\");\r\n```\r\n\r\nWhen invalid token is passed, Error view is not provided with `ErrorViewModel`. When `Model` is accessed in 9th line of Error.cshtml (`@if (Model.ShowRequestId)`), it throws NullReferenceException.","Url":"https://github.com/aspnet/Templates/issues/865","RelatedDescription":"Closed issue \"Account/ConfirmEmail - NullReferenceException in Error.cshtml when providing incorrect token\" (#865)"},{"Id":"260997320","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:05","Actor":"joeaudette","Number":"868","RawContent":null,"Title":"IEmailSender should have explicitly named parameters for html vs plain text","State":"closed","Body":"There have been a number of people reporting bugs about the email confirmation link in the StarterWeb template not working.\r\n\r\nThis is happening because people implement IEmailSender and don't realize that the message being passed in is html. When they send the email as plain text the confirmation link does not work because of the url encoding.\r\n\r\nI think the \"message\" parameter of SendEmailAsync should be renamed to htmlMessage and possibly should have an additional parameter for \"plainTextMessage\" and both should be passed in from AccountController.\r\n\r\nThis would make it more clear to implementors of IEmailSender what kind of string(s) they are dealing with and how to correctly implement it.\r\n\r\nrelated issues:\r\nhttps://github.com/aspnet/Home/issues/2152\r\nhttps://github.com/aspnet/Home/issues/2217","Url":"https://github.com/aspnet/Templates/issues/868","RelatedDescription":"Closed issue \"IEmailSender should have explicitly named parameters for html vs plain text\" (#868)"},{"Id":"268102418","IsPullRequest":false,"CreatedAt":"2017-10-24T16:35:17","Actor":"Eilon","Number":"875","RawContent":null,"Title":"This repo is OBSOLETE - please see the README file for information","State":"open","Body":"Please refer to the README at https://github.com/aspnet/Templates for information.","Url":"https://github.com/aspnet/Templates/issues/875","RelatedDescription":"Open issue \"This repo is OBSOLETE - please see the README file for information\" (#875)"},{"Id":"266114525","IsPullRequest":false,"CreatedAt":"2017-10-21T00:03:24","Actor":"tverboon","Number":"872","RawContent":null,"Title":"Unnecessary User.Id provided in password reset link?","State":"closed","Body":"The user Id is provided in the callback link:\r\n\r\nhttps://github.com/aspnet/Templates/blob/f237bb024e1c8f05a7d78c215be2224022d2c153/template_feed/Microsoft.DotNet.Web.ProjectTemplates.2.0/content/StarterWeb-CSharp/Controllers/AccountController.cs#L424\r\n\r\nBut in the controller action only code is used:\r\nhttps://github.com/aspnet/Templates/blob/f237bb024e1c8f05a7d78c215be2224022d2c153/template_feed/Microsoft.DotNet.Web.ProjectTemplates.2.0/content/StarterWeb-CSharp/Controllers/AccountController.cs#L443\r\n\r\nIn my opinion it's better not to provide more information than necessary.","Url":"https://github.com/aspnet/Templates/issues/872","RelatedDescription":"Closed issue \"Unnecessary User.Id provided in password reset link?\" (#872)"},{"Id":"265394026","IsPullRequest":false,"CreatedAt":"2017-10-13T20:09:16","Actor":"jkotalik","Number":"871","RawContent":null,"Title":"Add HttpsRedirection and HSTS middleware template","State":"closed","Body":"With https://github.com/aspnet/BasicMiddleware/pull/264 being added, @Eilon asked me to write templates for this feature.\r\ncc/ @javiercn @Tratcher ","Url":"https://github.com/aspnet/Templates/issues/871","RelatedDescription":"Closed issue \"Add HttpsRedirection and HSTS middleware template\" (#871)"},{"Id":"264318035","IsPullRequest":true,"CreatedAt":"2017-10-10T17:47:02","Actor":"scottsauber","Number":"870","RawContent":null,"Title":"Change Lockout wording of comment","State":"open","Body":"The Razor Pages Identity template turns on Lockout by default, unlike the MVC one.  This comment is left over from the MVC one and it no longer lines up with what is configured in the template.  I've reworded it to be accurate.  I can change it to just remove the comment all together if you want.","Url":"https://github.com/aspnet/Templates/pull/870","RelatedDescription":"Open PR \"Change Lockout wording of comment\" (#870)"},{"Id":"262627101","IsPullRequest":false,"CreatedAt":"2017-10-04T00:00:30","Actor":"Rick-Anderson","Number":"869","RawContent":null,"Title":"QR Codes should be supported in templates","State":"closed","Body":"[Enabling QR Code generation for authenticator apps](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-enable-qrcodes)\r\n\r\nThat should be supported in the templates like [SMS 2FA](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/2fa) used to be. \r\n\r\nrequested by customer in [Enabling QR Code generation for authenticator apps](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-enable-qrcodes) comments","Url":"https://github.com/aspnet/Templates/issues/869","RelatedDescription":"Closed issue \"QR Codes should be supported in templates\" (#869)"},{"Id":"254163608","IsPullRequest":false,"CreatedAt":"2017-09-07T12:16:42","Actor":"elAndyG","Number":"866","RawContent":null,"Title":"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)","State":"closed","Body":"After updating angular to 4.3.6, an internal server error begins to throw \"NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor.\"\r\n\r\nSteps to reproduce:\r\n1. cmd to c:\\\r\n2. dotnet --version \r\n_2.0.0_\r\n3. mkdir dummy\r\n4. cd dummy\r\n5. dotnet new angular\r\n6. dotnet restore\r\n7. npm install\r\n8. dotnet run (prove it works)\r\n8a. ctrl+c to stop the server/build\r\n9. update all @angular from \"4.2.5\" to \"4.3.6\"\r\n10. npm update\r\n11. dotnet run\r\n...You should now crash... (see below)\r\n12. change 4.3.6 back to 4.2.5 and \r\nrepeat 10 and 11.\r\nYou should now work again.\r\n\r\nPlease let me know i there's anything else i can provide to help. Thank you!\r\n\r\n`NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]).\r\n Error: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]). at Error (native) at syntaxError (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:37092:34) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getDependenciesMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51159:35) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getTypeMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51027:26) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getInjectableMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51013:21) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getProviderMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51304:40) at C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51233:49 at Array.forEach (native) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getProvidersMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51193:19) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getNgModuleMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:50848:50)\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.HttpNodeInstance+<InvokeExportAsync>d__7.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance+<InvokeExportAsync>d__13.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.SpaServices.Prerendering.PrerenderTagHelper+<ProcessAsync>d__29.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner+<RunAsync>d__0.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nAspNetCore._Views_Home_Index_cshtml+<ExecuteAsync>d__12.MoveNext() in Index.cshtml\r\n+\r\n    ViewData[\"Title\"] = \"Home Page\";\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageCoreAsync>d__16.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__21.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewResult+<ExecuteResultAsync>d__26.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeResultAsync>d__19.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResultFilterAsync>d__24.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()`\r\n","Url":"https://github.com/aspnet/Templates/issues/866","RelatedDescription":"Closed issue \"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)\" (#866)"},{"Id":"255851740","IsPullRequest":false,"CreatedAt":"2017-09-07T08:13:18","Actor":"marcusien","Number":"867","RawContent":null,"Title":"Cannot force version of the template to install","State":"open","Body":"Hi,\r\n\r\nMaybe there's something not documented but I'd like to install a version of my own template in a specific version.\r\n\r\nWe are creating our own template for our project and we create prerelease packages for our template using semver. The problem is with \"dotnet new -i\" command, we cannot specify a specific version","Url":"https://github.com/aspnet/Templates/issues/867","RelatedDescription":"Open issue \"Cannot force version of the template to install\" (#867)"},{"Id":"251697737","IsPullRequest":true,"CreatedAt":"2017-08-22T14:57:33","Actor":"phenning","Number":"862","RawContent":null,"Title":"Use template engine templates","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/pull/862","RelatedDescription":"Closed or merged PR \"Use template engine templates\" (#862)"},{"Id":"251783689","IsPullRequest":false,"CreatedAt":"2017-08-21T22:59:07","Actor":"GoshaFighten","Number":"863","RawContent":null,"Title":"Can't compile the devextreme-angular package in the Production mode using the ASP.NET Core 2.0 Angular template","State":"closed","Body":"This issue relates to the [one](https://github.com/DevExpress/devextreme-angular/issues/534). I've created an Angular application using .NET Core 2.0. The issue is reproducible regardless if I use Visual Studio 2017 15.3 or `dotnet new angular`. Everything works fine in the Development mode. But, once I publish my application with the [DevExtreme Angular](https://github.com/DevExpress/devextreme-angular) package using `dotnet publish -c Release`, I'm getting the following error:\r\n\r\n```\r\n      ERROR in ./$$_gendir/~/devextreme-angular/ui/data-grid.ngfactory.ts\r\n      Module parse failed: D:\\FromCustomers\\GH534\\NGCore\\NGCore\\$$_gendir\\node_modules\\devextreme-angular\\ui\\data-grid.ngfactory.ts Unexpected token (63:38)\r\n      You may need an appropriate loader to handle this file type.\r\n      | import * as i52 from 'devextreme-angular/core/iterable-differ-helper';\r\n      | import * as i53 from 'devextreme-angular/core/nested-option';\r\n      | export const DxDataGridModuleNgFactory:i0.NgModuleFactory<i1.DxDataGridModule> = i0.╔╡cmf(i1.DxDataGridModule,\r\n      |     ([] as any[]),(_l:any) => {\r\n      |       return i0.╔╡mod([i0.╔╡mpd(512,i0.ComponentFactoryResolver,i0.╔╡CodegenComponentFactoryResolver,\r\n       @ ./$$_gendir/ClientApp/app/components/fetchdata/fetchdata.component.ngfactory.ts 8:0-102\r\n       @ ./$$_gendir/ClientApp/app/app.module.server.ngfactory.ts\r\n       @ ./ClientApp/boot.server.ts\r\nD:\\FromCustomers\\GH534\\NGCore\\NGCore\\NGCore.csproj(41,5): error MSB3073: The command \"node node_modules/webpack/bin/webpack.js --env.prod\" exited with code 2.\r\n```\r\n\r\nI added\r\n\r\n```\r\n\"devextreme\": \"^17.1.5\",\r\n\"devextreme-angular\": \"^17.1.5\",\r\n```\r\n\r\nto the `package.json` file. Then, I added DevExtreme CSS files to the `webpack.config.vendor.js` as\r\n\r\n```\r\nconst nonTreeShakableModules = [\r\n    'bootstrap',\r\n    'bootstrap/dist/css/bootstrap.css',\r\n    'es6-promise',\r\n    'es6-shim',\r\n    'event-source-polyfill',\r\n    'jquery',\r\n    'devextreme/dist/css/dx.common.css',\r\n    'devextreme/dist/css/dx.light.css'\r\n];\r\n```\r\n\r\nIf instead of the following line in the webpack.config.js file\r\n\r\n```\r\n{ test: /\\.ts$/, include: /ClientApp/, use: isDevBuild ? ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] : '@ngtools/webpack' },\r\n```\r\n\r\nI use\r\n\r\n```\r\n{ test: /\\.ts$/, use: isDevBuild ? ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] : '@ngtools/webpack' },\r\n```\r\n\r\nor\r\n\r\n```\r\n{ test: /\\.ts$/, include: /ClientApp/, use: ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] },\r\n```\r\n\r\neverything works fine. A similar configuration in a project created using Angular CLI works fine as well.\r\n\r\nThe attached `NGCore` project illustrates the issue and `test-app` created with Angular CLI illustrates that this works in a standard Angular CLI project after I call `ng eject`.\r\n\r\nWhat can be the problem here? Is it in DevExtreme modules or in your webpack configuration?\r\n[test-app.zip](https://github.com/aspnet/Templates/files/1240256/test-app.zip)\r\n[NGCore.zip](https://github.com/aspnet/Templates/files/1240259/NGCore.zip)\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/863","RelatedDescription":"Closed issue \"Can't compile the devextreme-angular package in the Production mode using the ASP.NET Core 2.0 Angular template\" (#863)"},{"Id":"248880384","IsPullRequest":false,"CreatedAt":"2017-08-09T00:05:00","Actor":"Rick-Anderson","Number":"861","RawContent":null,"Title":"Razor Page scaffolder should add `@page \"{id:int}\"` directive","State":"closed","Body":"The RP scaffolder should add `@page \"{id:int}\"` directive so generated links pass the ID as route data, not query strings.\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/861","RelatedDescription":"Closed issue \"Razor Page scaffolder should add `@page \"{id:int}\"` directive\" (#861)"},{"Id":"248842171","IsPullRequest":false,"CreatedAt":"2017-08-08T20:59:26","Actor":"Rick-Anderson","Number":"860","RawContent":null,"Title":"Razor Pages scaffolder eats    DbUpdateConcurrencyException","State":"closed","Body":"Expected behavior:\r\nScaffolder should correctly handle `DbUpdateConcurrencyException`\r\n\r\nActual behavior:\r\n`DbUpdateConcurrencyException` is caught and ignored.\r\n\r\nTo repro: \r\n\r\n* Create a RP project and add a model.\r\n* [Scaffold the model](https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/model#add-scaffold-tooling-and-perform-initial-migration)\r\n\r\nThe *Edit.cshtml.cs* file contains the following code:\r\n\r\n```cs\r\npublic async Task<IActionResult> OnPostAsync()\r\n{\r\n    if (!ModelState.IsValid)\r\n    {\r\n        return Page();\r\n    }\r\n\r\n    _context.Attach(Movie).State = EntityState.Modified;\r\n\r\n    try\r\n    {\r\n        await _context.SaveChangesAsync();\r\n    }\r\n    catch (DbUpdateConcurrencyException)\r\n    {\r\n        \r\n    }\r\n\r\n    return RedirectToPage(\"./Index\");\r\n}\r\n```\r\nIt should be\r\n\r\n```cs\r\ncatch (DbUpdateConcurrencyException)\r\n        {\r\n            if (!MovieExists(movie.ID))\r\n            {\r\n                return NotFound();\r\n            }\r\n            else\r\n            {\r\n                throw;\r\n            }\r\n        }\r\n```\r\n","Url":"https://github.com/aspnet/Templates/issues/860","RelatedDescription":"Closed issue \"Razor Pages scaffolder eats    DbUpdateConcurrencyException\" (#860)"},{"Id":"248139089","IsPullRequest":false,"CreatedAt":"2017-08-08T04:05:18","Actor":"alexavrutin","Number":"859","RawContent":null,"Title":"r1","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/issues/859","RelatedDescription":"Closed issue \"r1\" (#859)"},{"Id":"238353055","IsPullRequest":false,"CreatedAt":"2017-08-03T18:01:57","Actor":"stevedesmond-ca","Number":"851","RawContent":null,"Title":"Why do non-sentence headers end in a period?","State":"closed","Body":"See https://github.com/aspnet/Templates/blob/dev/src/Rules/StarterWeb/IndividualAuth/Views/Account/ResetPasswordConfirmation.cshtml as an example -- almost all the `<h1>`s have periods after them, when they should more likely be Title Case with no period.","Url":"https://github.com/aspnet/Templates/issues/851","RelatedDescription":"Closed issue \"Why do non-sentence headers end in a period?\" (#851)"},{"Id":"247185643","IsPullRequest":false,"CreatedAt":"2017-08-03T17:58:29","Actor":"Rick-Anderson","Number":"858","RawContent":null,"Title":"Razor Page templates use fully qualified name ","State":"closed","Body":"The constructor uses the FQN when it's not necessary. For example:\r\n\r\nSee [Pages/Movie/Index.cshtml.cs](https://github.com/aspnet/Docs/blob/master/aspnetcore/tutorials/razor-pages/razor-pages-start/sample/RazorPagesMovie/Pages/Movie/Index.cshtml.cs#L14-L16)\r\n\r\n`using RazorPagesMovie.Models;` is in the template.\r\n\r\nTo repro - follow the [Razor Pages tutorial](https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/model)\r\n","Url":"https://github.com/aspnet/Templates/issues/858","RelatedDescription":"Closed issue \"Razor Page templates use fully qualified name \" (#858)"},{"Id":"246217674","IsPullRequest":false,"CreatedAt":"2017-08-03T17:56:43","Actor":"Rick-Anderson","Number":"857","RawContent":null,"Title":"Templates should use app.UseMvcWithDefaultRoute();","State":"closed","Body":"I recommend the templates use `app.UseMvcWithDefaultRoute();` rather than\r\n\r\n```csharp\r\napp.UseMvc(routes =>\r\n{\r\n    routes.MapRoute(\r\n        name: \"default\",\r\n        template: \"{controller}/{action=Index}/{id?}\");\r\n});\r\n```\r\n\r\nThe more complex code is a barrier to entry for new users who don't need this flexibility. Advanced users will have no problem adding the above code when they need it. The code above doesn't make much sense to Razor Pages developers. Recommend this change for all templates but especially for the Razor Pages template.\r\n\r\ncc @DamianEdwards  - part of the lower the barrier to entry effort.","Url":"https://github.com/aspnet/Templates/issues/857","RelatedDescription":"Closed issue \"Templates should use app.UseMvcWithDefaultRoute();\" (#857)"},{"Id":"244917331","IsPullRequest":false,"CreatedAt":"2017-08-03T17:55:35","Actor":"RehanSaeed","Number":"856","RawContent":null,"Title":"Sharing Common Files Between Templates","State":"closed","Body":"I have a ReadMe.html file which I'd like to share between my project templates. The file is mostly the same for all three templates, except that it contains a few symbols common to all my templates. I'd like to keep one copy of this file and use symbols to define template specific sections.\r\n```\r\n<html>\r\n<p>Common paragraph...</p>\r\n<!--#if MyTemplate1-->\r\n<p>MyTemplate1 paragraph...</p>\r\n<!--#endif-->\r\n<!--#if MyTemplate2-->\r\n<p>MyTemplate2 paragraph...</p>\r\n<!--#endif-->\r\n</html>\r\n```\r\n\r\nI can think of a way this might work without any help from the templating engine: Keep a common copy of the file, then copy the file into the template folders as a pre-packaging step in my build script. The disadvantage is that now I have three copies of my file unless I use a .gitignores file but then I have the extra step of having to remove the .gitignores file from the template output.\r\n\r\nI propose that you should be able to add a file as a link, then mark that file as common in your template.json file. Finally, when generating the project, the file is converted from a linked file, into a real one.\r\n","Url":"https://github.com/aspnet/Templates/issues/856","RelatedDescription":"Closed issue \"Sharing Common Files Between Templates\" (#856)"},{"Id":"244134597","IsPullRequest":false,"CreatedAt":"2017-08-03T17:30:02","Actor":"jkotalik","Number":"855","RawContent":null,"Title":"File new template error for Windows 8.1 32 bit for individual auth.","State":"closed","Body":"Steps:\r\n\r\n1. Download VS2017 Int Preview and dotnet preview3 on Windows 8.1 32 bit.\r\n2. File new... ASP.NET Core app, Web Application with Individual User Accounts Authorization\r\n3. Run application, try to register a new user\r\n\r\nExpected Results: A page would show up saying to apply migrations to the database or the user is registered.\r\nActual Results: SqlException on the SQL Server not being found. \r\n![4fce5f97](https://user-images.githubusercontent.com/8302101/28383504-3b7bf12c-6c76-11e7-91d0-5fe2675924a2.PNG)\r\n\r\n\r\nThe fix I had to do was change the ConnectionStrings' DefaultConnection from mssqllocaldb to ProjectsV12. \r\n\r\nMost likely, we would need to change https://github.com/aspnet/Templates/blob/a594b47c417593d43141d3b4eb2bc41d6ad85f20/src/Rules/StarterWeb/IndividualAuth/appsettings.json#L3 to use a variable for the database.","Url":"https://github.com/aspnet/Templates/issues/855","RelatedDescription":"Closed issue \"File new template error for Windows 8.1 32 bit for individual auth.\" (#855)"},{"Id":"244047453","IsPullRequest":false,"CreatedAt":"2017-07-20T08:45:31","Actor":"dazinator","Number":"854","RawContent":null,"Title":"typescript confiugration file item template","State":"closed","Body":"When the typescript configuration file is added to a project, by default it is \"content\" which also by default means it ends up being included in the nuget package when you do a `dotnet pack`. Given that the typescript configuration file is used primarily at build time, I don't think it should be included in a resulting nuget pack by default. Can it be changed to create this in the `csproj`:\r\n\r\n```\r\n <ItemGroup>\r\n    <Content Update=\"Scripts\\tsconfig.json\">\r\n      <Pack>false</Pack>\r\n    </Content>\r\n  </ItemGroup>\r\n```\r\n\r\nWithout this, if another project takes a dependency on this nuget package, you get build errors like this:\r\n\r\n```\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tTS18003\tBuild:No inputs were found in config file 'C:/Users/darrell.tunnell/.nuget/packages/gluon.module.themeswitcher/2.0.0/contentFiles/any/net452/Scripts/tsconfig.json'. Specified 'include' paths were '[\"**/*\"]' and 'exclude' paths were '[\"node_modules\",\"wwwroot\"]'.\tReach.GCv3.Mvc.Module.CompanyLogo\tC:\\Users\\darrell.tunnell\\Source\\Repos\\gc3-website\\src\\Reach.GCv3.Mvc.Module.CompanyLogo\\tsc\t1\t\r\n\r\n\r\n```\r\n\r\ni.e VS is doscovering the typescript configuration files within referenced nuget packages!","Url":"https://github.com/aspnet/Templates/issues/854","RelatedDescription":"Closed issue \"typescript confiugration file item template\" (#854)"},{"Id":"240276652","IsPullRequest":true,"CreatedAt":"2017-07-05T16:50:58","Actor":"ryanbrandenburg","Number":"853","RawContent":null,"Title":"Remove PackageTargetFallback","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/pull/853","RelatedDescription":"Closed or merged PR \"Remove PackageTargetFallback\" (#853)"},{"Id":"239518221","IsPullRequest":true,"CreatedAt":"2017-07-05T14:09:36","Actor":"scottaddie","Number":"852","RawContent":null,"Title":"Clarify password reset sentence in ForgotPassword view","State":"closed","Body":"The `ForgotPassword.cshtml` view includes a sentence which was missing a comma and reversed the words \"reset\" and \"password\".\r\n\r\n/cc: @phenning @mlorbetske ","Url":"https://github.com/aspnet/Templates/pull/852","RelatedDescription":"Closed or merged PR \"Clarify password reset sentence in ForgotPassword view\" (#852)"},{"Id":"233959214","IsPullRequest":false,"CreatedAt":"2017-06-06T16:59:43","Actor":"mlorbetske","Number":"850","RawContent":null,"Title":"File new default names inconsistency.","State":"open","Body":"_From @Bartmax on July 24, 2015 2:48_\n\nAll items in the file new dialog (client side) default names kind of follows a pattern but it's not consistent:\n\nStyleSheet.css\nJavaScript.js\nhtmlpage.html (all lowercase)\nCoffeeScript.coffee\njson-schema.json\npackage.json\netc.\n\nSome must have a specific name (like package.json) while others just reflect the file type. \n\nI see 2 inconsistencies here:\n\n1) casing is inconsistent.\n2) TypeScript it suggest file.ts instead of TypeScript.ts\n\n\n_Copied from original issue: aspnet/Tooling#118_","Url":"https://github.com/aspnet/Templates/issues/850","RelatedDescription":"Open issue \"File new default names inconsistency.\" (#850)"},{"Id":"233568569","IsPullRequest":false,"CreatedAt":"2017-06-05T12:14:20","Actor":"neman","Number":"849","RawContent":null,"Title":"Unable to install nuget template","State":"closed","Body":"I created nuget template. When I try to install it, I got the following error at the end\r\n\r\n```C:\\Program Files\\dotnet\\sdk\\1.0.4\\NuGet.targets(97,5): error : Unable to resolve 'Test.Templates' for '.NETCoreApp,Version=v1.0'. [C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj]\r\n\r\nGenerating MSBuild file C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\restore.csproj.nuget.g.props.\r\n  Generating MSBuild file C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\restore.csproj.nuget.g.targets.\r\n  Writing lock file to disk. Path: C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\project.assets.json\r\n  Restore failed in 13,16 sec for C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj.\r\n\r\n  Errors in C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj\r\n      Unable to resolve 'BIB.Templates' for '.NETCoreApp,Version=v1.0'.\r\n\r\n  NuGet Config files used:\r\n      C:\\Users\\nemke\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n      C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n\r\n  Feeds used:\r\n      https://api.nuget.org/v3/index.json\r\n      C:\\local-nuget\r\n      C:\\Users\\nemke\\.dotnet\\NuGetFallbackFolder\r\n      C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\r\n```\r\n\r\n#### dotnetinfo\r\n\r\n```\r\nC:\\Temp> dotnet --info\r\n.NET Command Line Tools (1.0.4)\r\n\r\nProduct Information:\r\n Version:            1.0.4\r\n Commit SHA-1 hash:  af1e6684fd\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.4\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview1-002111-00\r\n  Build    : 1ff021936263d492539399688f46fd3827169983\r\n``` \r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/849","RelatedDescription":"Closed issue \"Unable to install nuget template\" (#849)"},{"Id":"233555569","IsPullRequest":false,"CreatedAt":"2017-06-05T12:13:42","Actor":"neman","Number":"848","RawContent":null,"Title":"Wrong CLI command for template installation at nuget.org","State":"closed","Body":"When I go tu nuget.org to search for some template I got the following page for link https://www.nuget.org/packages/NetEscapades.Templates/\r\n\r\n![image](https://cloud.githubusercontent.com/assets/350314/26781234/bf4cc98c-49ed-11e7-9e4a-08bb168b6c62.png)\r\n\r\nThe command instruct to use `Install-Package NetEscapades.Templates` which does not work. \r\n\r\n```\r\nInstall-Package NetEscapades.Templates\r\nInstall-Package : No match was found for the specified search criteria and package name 'NetEscapades.Templates'. Try Get-PackageSource to see all available registered p ackage sources.\r\nAt line:1 char:1\r\n+ Install-Package NetEscapades.Templates\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n```\r\nThe correct command is `dotnet new --install \"NetEscapades.Templates::*\"`\r\n\r\nWill this be fixed in future release?  Which will be the correct CLI command?\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/848","RelatedDescription":"Closed issue \"Wrong CLI command for template installation at nuget.org\" (#848)"},{"Id":"226082169","IsPullRequest":true,"CreatedAt":"2017-05-03T18:58:53","Actor":"phenning","Number":"846","RawContent":null,"Title":"Revert \"Add MVC precompilation package for 1.1\"","State":"closed","Body":"This reverts commit 461cd822646505fb53c6b0ac416af3780e32578f.\r\n\r\n# Conflicts:\r\n#\tsrc/BaseTemplates/StarterWeb/StarterWeb.csproj\r\n#\tsrc/Templates.xml","Url":"https://github.com/aspnet/Templates/pull/846","RelatedDescription":"Closed or merged PR \"Revert \"Add MVC precompilation package for 1.1\"\" (#846)"}],"ResultType":"GitHubIssue"},"Tooling-Issues":{"Issues":[{"Id":"349649932","IsPullRequest":true,"CreatedAt":"2018-08-10T20:38:21","Actor":"Andrew-MSFT","Number":"1077","RawContent":null,"Title":"Adding a .net core -> vs mapping table","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1077","RelatedDescription":"Closed or merged PR \"Adding a .net core -> vs mapping table\" (#1077)"},{"Id":"333613195","IsPullRequest":false,"CreatedAt":"2018-06-27T12:59:29","Actor":"Liero","Number":"1076","RawContent":null,"Title":"Unable to publish when using Microsoft.NET.Sdk.Razor","State":"closed","Body":"After I upgraded my solution from asp.net core 2.0 to 2.1, I'm not able to publish my web app from Visual Studio, although it can build.\r\n\r\nDuring the upgrade I've changed SDK in one of my class libraries to **Microsoft.NET.Sdk.Razor**, but now I'm getting a lot of errors and if project references were not recognized in this library when publishing.\r\n\r\n```\r\nConnecting to C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\publish\\...\r\nMyProject.Web -> C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\MyProject.Web.dll\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1701,1702,2008 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE;RELEASE;NETCOREAPP;NETCOREAPP2_1 /errorendlocation /preferreduilang:en-US /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.antiforgery\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Antiforgery.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization.policy\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.Policy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cryptography.internal\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cryptography.Internal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Diagnostics.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.server.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Server.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.html.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Html.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.features\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Features.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.jsonpatch\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.JsonPatch.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.apiexplorer\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ApiExplorer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.dataannotations\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.formatters.json\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Formatters.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razorpages\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.RazorPages.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.taghelpers\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.TagHelpers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.viewfeatures\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ViewFeatures.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.language\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Language.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.runtime\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecaching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.ResponseCaching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.webutilities\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.WebUtilities.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.common\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.CodeAnalysis.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.dotnet.platformabstractions\\2.1.0\\lib\\netstandard1.3\\Microsoft.DotNet.PlatformAbstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.relational\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Relational.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlserver\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.SqlServer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.memory\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.binder\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Binder.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netcoreapp2.0\\Microsoft.Extensions.DependencyInjection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencymodel\\2.1.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.composite\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Composite.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.filesystemglobbing\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileSystemGlobbing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.objectpool\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.ObjectPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.options\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Options.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.primitives\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.webencoders\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.WebEncoders.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.net.http.headers\\2.1.0\\lib\\netstandard2.0\\Microsoft.Net.Http.Headers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.VisualBasic.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.Win32.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.win32.registry\\4.5.0\\ref\\netstandard2.0\\Microsoft.Win32.Registry.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\mscorlib.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\netstandard.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json.bson\\1.0.1\\lib\\netstandard1.3\\Newtonsoft.Json.Bson.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json\\11.0.2\\lib\\netstandard2.0\\Newtonsoft.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\remotion.linq\\2.2.0\\lib\\netstandard1.0\\Remotion.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.AppContext.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Buffers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Concurrent.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Immutable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.NonGeneric.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Specialized.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Annotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.EventBasedAsync.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.TypeConverter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Console.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.Common.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.data.sqlclient\\4.5.0\\ref\\netcoreapp2.1\\System.Data.SqlClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Contracts.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Debug.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.DiagnosticSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.FileVersionInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Process.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.StackTrace.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TextWriterTraceListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tools.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TraceSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tracing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Dynamic.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Calendars.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.interactive.async\\3.1.1\\lib\\netstandard1.3\\System.Interactive.Async.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.Brotli.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.ZipFile.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.DriveInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Watcher.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.IsolatedStorage.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.MemoryMappedFiles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Pipes.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.UnmanagedMemoryStream.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Expressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Queryable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.HttpListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Mail.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NameResolution.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NetworkInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Ping.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Requests.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.ServicePoint.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Sockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebHeaderCollection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.Client.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.Vectors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ObjectModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.DispatchProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.ILGeneration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.Lightweight.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.TypeExtensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Reader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.ResourceManager.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Writer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime.compilerservices.unsafe\\4.5.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.CompilerServices.VisualC.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Handles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.RuntimeInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.WindowsRuntime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Loader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Formatters.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.accesscontrol\\4.5.0\\ref\\netstandard2.0\\System.Security.AccessControl.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Claims.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Algorithms.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Csp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.X509Certificates.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.cryptography.xml\\4.5.0\\ref\\netstandard2.0\\System.Security.Cryptography.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.permissions\\4.5.0\\ref\\netstandard2.0\\System.Security.Permissions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Principal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.principal.windows\\4.5.0\\ref\\netstandard2.0\\System.Security.Principal.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.SecureString.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceModel.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceProcess.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.text.encodings.web\\4.5.0\\lib\\netstandard2.0\\System.Text.Encodings.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.RegularExpressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Overlapped.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Dataflow.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Thread.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.ThreadPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Timer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.Local.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ValueTuple.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.HttpUtility.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.ReaderWriter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlSerializer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\WindowsBase.dll\" /debug- /debug:portable /filealign:512 /optimize+ /out:obj\\Release\\netcoreapp2.1\\MyProject.Mail.dll /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:library /warnaserror- /utf8output /deterministic+ /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.CSharp.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.analyzers\\2.1.0\\analyzers\\dotnet\\cs\\Microsoft.EntityFrameworkCore.Analyzers.dll\" EmailDefaults.cs EmailOptions.cs MailSender.cs NotificationService.cs RazorViewToStringRenderer.cs \"C:\\Users\\daniel.turan\\AppData\\Local\\Temp\\.NETCoreApp,Version=v2.1.AssemblyAttributes.cs\" obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs obj\\Release\\netcoreapp2.1\\\\Tem\tporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.RazorAssemblyInfo.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.AssemblyInfo.cs /warnaserror+:NU1605\r\nNotificationService.cs(15,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\nNotificationService.cs(16,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\n...\r\n```\r\n\r\nAlso, see https://stackoverflow.com/questions/50926116/publish-failed-when-using-microsoft-net-sdk-razor-if-reference-was-not-recognize for more details","Url":"https://github.com/aspnet/Tooling/issues/1076","RelatedDescription":"Closed issue \"Unable to publish when using Microsoft.NET.Sdk.Razor\" (#1076)"},{"Id":"257171895","IsPullRequest":false,"CreatedAt":"2018-06-25T20:46:49","Actor":"shirhatti","Number":"1057","RawContent":null,"Title":"Support for multi-line string values","State":"closed","Body":"_From @alexvy86 on August 3, 2017 21:11_\n\nI'm using Akka.NET in a project and the way they do configuration is not-quite-JSON, but still a hierarchical structure, which I haven't been able to successfully integrate into `appsettings.json`. The only way I've been able to do it is to collapse all of their hierarchy into a single-line string value, which makes it a bit of a pain to work with.\r\n\r\nFor now I just put the whole thing as CDATA in an XML file and use the `AddXmlFile()` extension from `Microsoft.Extensions.Configuration.Xml` to read it, but it'd be preferable to have it in `appsetings.json`.\n\n_Copied from original issue: aspnet/Configuration#703_","Url":"https://github.com/aspnet/Tooling/issues/1057","RelatedDescription":"Closed issue \"Support for multi-line string values\" (#1057)"},{"Id":"329605262","IsPullRequest":false,"CreatedAt":"2018-06-05T20:05:23","Actor":"AngelosP","Number":"1075","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"open","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","Url":"https://github.com/aspnet/Tooling/issues/1075","RelatedDescription":"Open issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#1075)"},{"Id":"328747170","IsPullRequest":false,"CreatedAt":"2018-06-02T14:10:13","Actor":"AceHack","Number":"1074","RawContent":null,"Title":"Docker in launchSettings.json","State":"open","Body":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image.","Url":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Open issue \"Docker in launchSettings.json\" (#1074)"},{"Id":"328082529","IsPullRequest":true,"CreatedAt":"2018-06-01T17:41:04","Actor":"federicorinaldi","Number":"1073","RawContent":null,"Title":"Update dotnet-core-2.1.md","State":"closed","Body":"Visual Studio 2017 15.7 has been released now so this document is outdated","Url":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Closed or merged PR \"Update dotnet-core-2.1.md\" (#1073)"},{"Id":"323850872","IsPullRequest":false,"CreatedAt":"2018-05-17T06:31:53","Actor":"Pichasepong","Number":"1072","RawContent":null,"Title":"can not upload file FTPS. ","State":"closed","Body":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40155003-9812f0d8-59bb-11e8-82ae-8b8e7576b1a1.png)\r\n![2018-05-17_11-02-28](https://user-images.githubusercontent.com/12063904/40156168-efe61078-59c1-11e8-8c4c-7657ba2dd536.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Closed issue \"can not upload file FTPS. \" (#1072)"},{"Id":"268293817","IsPullRequest":false,"CreatedAt":"2018-05-17T02:25:02","Actor":"Pichasepong","Number":"1060","RawContent":null,"Title":"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. ","State":"closed","Body":"Problems installing on Server 2012 R2 ,Dot net core 1.0.1 vs 2015 tooling preview 2 error logs file.\r\n\r\n![product_dotnetcoreerror](https://user-images.githubusercontent.com/12063904/31985990-040a5f72-b991-11e7-9356-ddd06160a87c.jpg)\r\n","Url":"https://github.com/aspnet/Tooling/issues/1060","RelatedDescription":"Closed issue \"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. \" (#1060)"},{"Id":"317494886","IsPullRequest":false,"CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Number":"1071","RawContent":null,"Title":" Unable to start debugging","State":"open","Body":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Open issue \" Unable to start debugging\" (#1071)"},{"Id":"316585462","IsPullRequest":false,"CreatedAt":"2018-04-24T05:17:55","Actor":"rberger247","Number":"1070","RawContent":null,"Title":"Visual studio freezes when I run add-migration ","State":"closed","Body":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger.","Url":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070)"},{"Id":"308764422","IsPullRequest":false,"CreatedAt":"2018-03-27T05:23:09","Actor":"dvdobrovolskiy","Number":"1069","RawContent":null,"Title":"EntityFramework migrations not available to be applied during publish","State":"closed","Body":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc","Url":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069)"},{"Id":"304770827","IsPullRequest":false,"CreatedAt":"2018-03-14T05:33:19","Actor":"TheConservativeCoder","Number":"1068","RawContent":null,"Title":"Switch between Razor Page View and Code Behind","State":"closed","Body":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n","Url":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068)"},{"Id":"304312342","IsPullRequest":false,"CreatedAt":"2018-03-13T05:33:42","Actor":"RehanSaeed","Number":"1067","RawContent":null,"Title":"Support dotnet watch in launchSettings.json","State":"closed","Body":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine.","Url":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067)"},{"Id":"300865938","IsPullRequest":false,"CreatedAt":"2018-02-28T06:01:18","Actor":"rjamesnw","Number":"1066","RawContent":null,"Title":"Nesting bug","State":"closed","Body":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file.","Url":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066)"},{"Id":"290854647","IsPullRequest":false,"CreatedAt":"2018-01-24T01:14:53","Actor":"NeerajaRagesh","Number":"1065","RawContent":null,"Title":"Issue with Sales discount App - Odoo 9","State":"closed","Body":"I installed sales discount on total in sales order. While creating invoice am getting the below error\r\nOdoo Server Error\r\nTraceback (most recent call last):\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 638, in _handle_exception\r\nreturn super(JsonRequest, self)._handle_exception(exception)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 675, in dispatch\r\nresult = self._call_function(**self.params)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 331, in _call_function\r\nreturn checked_call(self.db, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/service/model.py\", line 119, in wrapper\r\nreturn f(dbname, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 324, in checked_call\r\nresult = self.endpoint(*a, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 933, in call\r\nreturn self.method(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 504, in response_wrap\r\nresponse = f(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 878, in call_kw\r\nreturn self._call_kw(model, method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 870, in _call_kw\r\nreturn call_kw(request.env[model], method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 681, in call_kw\r\nreturn call_kw_multi(method, model, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 672, in call_kw_multi\r\nresult = method(recs, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5469, in onchange\r\nrecord._onchange_eval(name, field_onchange[name], result)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5367, in _onchange_eval\r\nmethod_res = method(self)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 456, in _onchange_invoice_line_ids\r\ntaxes_grouped = self.get_taxes_values()\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 635, in get_taxes_values\r\nval = self._prepare_tax_line_vals(line, tax)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 612, in _prepare_tax_line_vals\r\n'base': tax['base'],\r\nKeyError: 'base'\r\n\r\n\r\nplease give any solution\r\n","Url":"https://github.com/aspnet/Tooling/issues/1065","RelatedDescription":"Closed issue \"Issue with Sales discount App - Odoo 9\" (#1065)"},{"Id":"273994049","IsPullRequest":true,"CreatedAt":"2018-01-07T03:48:49","Actor":"cartermp","Number":"1062","RawContent":null,"Title":"Update migrate-sql-server.md","State":"closed","Body":"Removed product links in favor of all docs links, changed wording slightly, and moved Get Started to be at the top.","Url":"https://github.com/aspnet/Tooling/pull/1062","RelatedDescription":"Closed or merged PR \"Update migrate-sql-server.md\" (#1062)"},{"Id":"274003770","IsPullRequest":true,"CreatedAt":"2017-11-15T02:15:11","Actor":"cristy","Number":"1064","RawContent":null,"Title":"Re adding","State":"closed","Body":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end...","Url":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Closed or merged PR \"Re adding\" (#1064)"},{"Id":"273996633","IsPullRequest":true,"CreatedAt":"2017-11-15T01:03:12","Actor":"cristy","Number":"1063","RawContent":null,"Title":"Webapp landing page","State":"closed","Body":"This is the markdown for the Web App landing page. Let me know if there's any other changes I should make.","Url":"https://github.com/aspnet/Tooling/pull/1063","RelatedDescription":"Closed or merged PR \"Webapp landing page\" (#1063)"},{"Id":"273873058","IsPullRequest":true,"CreatedAt":"2017-11-14T17:26:42","Actor":"cartermp","Number":"1061","RawContent":null,"Title":"Create migrate-sql-server.md","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1061","RelatedDescription":"Closed or merged PR \"Create migrate-sql-server.md\" (#1061)"},{"Id":"258233429","IsPullRequest":false,"CreatedAt":"2017-09-16T14:09:00","Actor":"ctopher31","Number":"1059","RawContent":null,"Title":"Turn off file nesting in Visual Studio 2017","State":"closed","Body":"To report new issues, use the [Report a Problem](https://developercommunity.visualstudio.com/) tool. The GitHub Issue Tracker for the aspnet/Tooling repo is now deprecated in favor of the Report a Problem tool.\r\n\r\nIf you encounter a problem with Visual Studio, we want to know about it so that we can diagnose and fix it. By using the Report a Problem tool, you can collect detailed information about the problem, and send it to Microsoft with just a few button clicks. See [here](https://docs.microsoft.com/en-us/visualstudio/ide/talk-to-us) for more details. \r\n","Url":"https://github.com/aspnet/Tooling/issues/1059","RelatedDescription":"Closed issue \"Turn off file nesting in Visual Studio 2017\" (#1059)"},{"Id":"257312054","IsPullRequest":false,"CreatedAt":"2017-09-14T00:50:29","Actor":"svallis","Number":"1058","RawContent":null,"Title":"Views in class libraries removed from embedded resources under certain circumstances","State":"closed","Body":"I have a test repo which should hopefully demonstrate this problem, and I hope this is the correct repo for the issue.\r\n\r\nhttps://github.com/svallis/precompilation-classlib\r\n\r\nIf you clone and open this solution and perform the following, the issue should be clear. First, the expected results is what happens when adding views to `app`:\r\n\r\n- Go to `app1\\Views\\Home` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `app1` remains unchanged\r\n\r\nNow perform the same process on `lib1`:\r\n\r\n- Go to `lib1\\Views\\Shared` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `lib1` has the following added to it\r\n\r\n```\r\n<ItemGroup>\r\n    <EmbeddedResource Remove=\"Views\\Shared\\Test - Copy.cshtml\" />\r\n</ItemGroup>\r\n```\r\n\r\nAs you can imagine this is highly frustrating during development, and we're constantly running into it while developing features within a library. I don't know if it's an outright bug, or whether we could improve the existing rules in the `.csproj` for the library. Whatever changes are made to the library project file need to preserve existing functionality though, so that views are not included in the publish output and are embedded in the assembly. This allows everything to work both during development and after publishing with precompiled views.","Url":"https://github.com/aspnet/Tooling/issues/1058","RelatedDescription":"Closed issue \"Views in class libraries removed from embedded resources under certain circumstances\" (#1058)"},{"Id":"254062749","IsPullRequest":false,"CreatedAt":"2017-08-31T04:38:52","Actor":"matthewDDennis","Number":"1056","RawContent":null,"Title":"Docker tools fail if multiple TFMs in project file","State":"closed","Body":"If you modify your projects to have multiple frameworks with the `<TargetFrameworks>` tag, then the Docker tools does not know which framework to use as there is no `<TargetFramework>` tag.\r\n\r\nAdding the `<TargetFramework>`netcoreapp1.1`<...>` fixes the problem in Visual Studio and all the frameworks build and can debug with Docker.\r\n\r\nHowever, if you try and build a framework other than the netcoreapp1.1 with the DotNet CLI, it fails as it, as the documentation states, will ignore the `<TargetFrameworks>` tag if the `<TargetFramework>` tag is present \r\n","Url":"https://github.com/aspnet/Tooling/issues/1056","RelatedDescription":"Closed issue \"Docker tools fail if multiple TFMs in project file\" (#1056)"},{"Id":"249781859","IsPullRequest":true,"CreatedAt":"2017-08-14T15:57:44","Actor":"balachir","Number":"1055","RawContent":null,"Title":"Update known-issues-vs2017.md for VS 15.3 RTW","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1055","RelatedDescription":"Closed or merged PR \"Update known-issues-vs2017.md for VS 15.3 RTW\" (#1055)"},{"Id":"247941709","IsPullRequest":false,"CreatedAt":"2017-08-05T03:07:41","Actor":"snebjorn","Number":"1054","RawContent":null,"Title":"Q: [BrowserLink] HowTo programmatically inject custom script into page body at runtime","State":"closed","Body":"Hi, I'm curious about how you made Browser Link inject a custom script into the page body at runtime.\r\nI have to do something similar (ritterim/stuntman#158) so wondering if you've willing to share the implementation :)\r\n\r\nI also made a [stackoverflow post](https://stackoverflow.com/questions/45501245/programmatically-inject-custom-script-into-page-body-at-runtime-like-browser-l)\r\n\r\nThanks","Url":"https://github.com/aspnet/Tooling/issues/1054","RelatedDescription":"Closed issue \"Q: [BrowserLink] HowTo programmatically inject custom script into page body at runtime\" (#1054)"},{"Id":"247229183","IsPullRequest":false,"CreatedAt":"2017-08-02T06:18:35","Actor":"halter73","Number":"1053","RawContent":null,"Title":"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly","State":"closed","Body":"Given the launchSettings.json and Program.cs below, it seems that the ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly when launching both the \"IIS Express\" or \"WebApplication1\" profiles from VS 2017 26730.0.d15rel and dotnet sdk 2.0.0-preview3-006889.\r\n\r\n\r\n#### Expected output for \"IIS Express\" profile launched from VS:\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.Server.IISIntegration;Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"IIS Express\" profile launched from VS (App Insights is missing):\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.Server.IISIntegration'\r\n```\r\n\r\n#### Expected output for \"WebApplication1\" profile launched from VS:\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"WebApplication1\" profile launched from VS (HostingStartup1 is missing):\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"WebApplication1\" profile launched using \"dotnet run\" (Behaves as expected)\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1'\r\n```\r\n\r\n#### launchSettings.json\r\n```json\r\n{\r\n  \"iisSettings\": {\r\n    \"windowsAuthentication\": false,\r\n    \"anonymousAuthentication\": true,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:61008/\",\r\n      \"sslPort\": 0\r\n    }\r\n  },\r\n  \"profiles\": {\r\n    \"IIS Express\": {\r\n      \"commandName\": \"IISExpress\",\r\n      \"launchBrowser\": true,\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n        \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\": \"HostingStartup1\"\r\n      }\r\n    },\r\n    \"WebApplication1\": {\r\n      \"commandName\": \"Project\",\r\n      \"launchBrowser\": true,\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n        \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\": \"HostingStartup1\"\r\n      },\r\n      \"applicationUrl\": \"http://localhost:61010/\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### Program.cs\r\n```C#\r\nusing Microsoft.AspNetCore;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing System;\r\n\r\nnamespace WebApplication1\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            BuildWebHost(args).Run();\r\n        }\r\n\r\n        public static IWebHost BuildWebHost(string[] args)\r\n        {\r\n            Console.WriteLine(\"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES: '{0}'\", Environment.GetEnvironmentVariable(\"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\"));\r\n\r\n            return WebHost.CreateDefaultBuilder(args)\r\n                .UseStartup<Startup>()\r\n                .Build();\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/aspnet/Tooling/issues/1053","RelatedDescription":"Closed issue \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly\" (#1053)"},{"Id":"245422589","IsPullRequest":false,"CreatedAt":"2017-07-28T17:44:59","Actor":"varora1406","Number":"1052","RawContent":null,"Title":"Add-Migration command not working.","State":"closed","Body":"IDE : visual studio 15.3 preview 5.0\r\n.net core 2.0\r\nProject : .Net core web application (Angular template) including (Angular v4)\r\n\r\nSteps to reproduce:\r\n* Create a new project and all required nuget packages.\r\n![image](https://user-images.githubusercontent.com/24986539/28577409-559354a8-7174-11e7-9dfb-26cc7efc1228.png)\r\n\r\n* Try to use Add-Migration command. (Don't worry, context classes and rest have been done)\r\n- Result : The term 'Add-Migration' is not recognized as the name of a cmdlet, function, script file, or operable program. \r\n![image](https://user-images.githubusercontent.com/24986539/28577463-81e914c0-7174-11e7-97eb-5cd2a5fb3e28.png)\r\n","Url":"https://github.com/aspnet/Tooling/issues/1052","RelatedDescription":"Closed issue \"Add-Migration command not working.\" (#1052)"},{"Id":"241453336","IsPullRequest":false,"CreatedAt":"2017-07-08T14:19:58","Actor":"RandyBuchholz","Number":"1051","RawContent":null,"Title":"Outdated Reference in ...CodeGeneration.Design\" Version=\"2.0.0-preview2-final\"","State":"open","Body":"There was a compatibility error with Microsoft.Composition. This is being addressed https://github.com/dotnet/corefx/issues/18452.\r\n\r\nCodeGeneration.Design is still referencing the old version and gives:\r\nPackage 'Microsoft.Composition 1.0.27' was restored using '.NETFramework,Version=v4.6.1' instead the project target framework...\r\n\r\nThe correct version is 1.0.31.\r\n\r\n![image](https://user-images.githubusercontent.com/13967891/27986052-85abdeee-63be-11e7-9b53-ec7a6199d628.png)\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1051","RelatedDescription":"Open issue \"Outdated Reference in ...CodeGeneration.Design\" Version=\"2.0.0-preview2-final\"\" (#1051)"},{"Id":"238392758","IsPullRequest":false,"CreatedAt":"2017-07-04T19:13:11","Actor":"miloush","Number":"1048","RawContent":null,"Title":"Adding application manifest ","State":"closed","Body":"The project properties designer asks me to add manifest to the project first before it can be selected:\r\n![untitled](https://user-images.githubusercontent.com/10546952/27518138-8a52e322-59d0-11e7-99b8-78a31d72e1a3.png)\r\n\r\nHowever, there does not seem to be a manifest template in the Add New Item list for ASP.NET Core projects.\r\n\r\nEither add the manifest template, or let the properties designer generate it, or change the \"default settings\" to declare newer OS support.","Url":"https://github.com/aspnet/Tooling/issues/1048","RelatedDescription":"Closed issue \"Adding application manifest \" (#1048)"},{"Id":"239635705","IsPullRequest":true,"CreatedAt":"2017-06-29T23:09:22","Actor":"anangaur","Number":"1050","RawContent":null,"Title":"Update known-issues-vs2017-preview.md","State":"open","Body":"Removed \"No workaround...\" as there is a workaround","Url":"https://github.com/aspnet/Tooling/pull/1050","RelatedDescription":"Open PR \"Update known-issues-vs2017-preview.md\" (#1050)"},{"Id":"239016783","IsPullRequest":true,"CreatedAt":"2017-06-28T20:04:41","Actor":"balachir","Number":"1049","RawContent":null,"Title":"Updates for VS 2017 15.3 Preview 3 / .NET Core 2.0 Preview 2","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1049","RelatedDescription":"Closed or merged PR \"Updates for VS 2017 15.3 Preview 3 / .NET Core 2.0 Preview 2\" (#1049)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"359136062","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:10","Actor":"blowdart","Number":"316","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when ASP.NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an ASP.NET Core web application. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing a specially crafted web requests to the ASP.NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles parsing web requests.\r\n\r\nThe underlying problem exists in the `System.IO.Pipelines` package. If you have other software which uses this package please follow the instructions in the [.NET Core bulletin](https://github.com/dotnet/announcements/issues/83).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2914\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses either of the packages with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.All | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nASP.NET Core 2.1 is distributed as part of the .NET Core runtime. To check the current installed runtimes open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed you will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf the highest .NET Core SDK version is less that 2.1.402 or the highest `Microsoft.AspNetCore.App` runtime version is less that 2.1.4 you are vulnerable to this issue. You may not see any SDK versions if you have only installed the runtime.\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.402 on your development machines and build servers, and the .NET Core Runtime 2.1.4 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n#### Applications not using Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/aspnet/Announcements/issues/316","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\" (#316)"},{"Id":"353145143","IsPullRequest":false,"CreatedAt":"2018-08-22T22:11:39","Actor":"pranavkm","Number":"315","RawContent":null,"Title":"3.0: Deprecating MvcPrecompilation tool ","State":"open","Body":"In ASP.NET Core 1.1, we introduced the `Microsoft.AspNetCore.Mvc.Razor.ViewCompilation` (MVC precompilation tool) package that added support for publish time compilation of Razor files (.cshtml files). Starting in ASP.NET Core 2.1, we introduced the [Razor SDK](https://docs.microsoft.com/en-us/aspnet/core/razor-pages/sdk?view=aspnetcore-2.1) that expanded on the features of the precompilation tool by adding support for build and publish time of Razor files. The SDK allows for verifying the correctness of cshtml files at build time while also improving on startup time for applications. The Razor SDK is on by default and no gesture is required to start using it.\r\n\r\nIn 3.0, we plan to remove the earlier MVC precompilation tool. Earlier versions of the package will continue receiving important bug and security fixes as part of our patch release. \r\n\r\nFor users of ASP.NET Core 2.1 or later, we recommend migrating to the Razor SDK if you haven't already. If you're currently using the precompilation tool and are unable to migrate to the Razor SDK due to bugs or missing features, please file an issue at https://github.com/aspnet/Razor/issues.\r\n\r\nPlease use https://github.com/aspnet/Mvc/issues/8313 for discussions.","Url":"https://github.com/aspnet/Announcements/issues/315","RelatedDescription":"Open issue \"3.0: Deprecating MvcPrecompilation tool \" (#315)"},{"Id":"349340221","IsPullRequest":false,"CreatedAt":"2018-08-10T00:56:39","Actor":"natemcmaster","Number":"314","RawContent":null,"Title":"3.0: deprecating Microsoft.AspNetCore.All","State":"open","Body":"Earlier this year, we announced the Microsoft.AspNetCore.App metapackage (see https://github.com/aspnet/Announcements/issues/287). That announcement said:\r\n\r\n> The existing Microsoft.AspNetCore.All meta-package will continue to be made available throughout the 2.x lifecycle, but **we recommend customers move to the new Microsoft.AspNetCore.App meta-package** and then add individual references to any of the removed packages if their app requires it.\r\n\r\nSee [our documentation for details](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/metapackage?view=aspnetcore-2.1#migrating-from-microsoftaspnetcoreall-to-microsoftaspnetcoreapp) on how to migrate from Microsoft.AspNetCore.All to .App.\r\n\r\nWe have begun working on ASP.NET Core 3.0, and as a part of that, we will stop producing the Microsoft.AspNetCore.All metapackage and the matching Microsoft.AspNetCore.All shared framework in the 3.0 nightly builds.\r\n\r\nThis package will still be available in ASP.NET Core 2.2 and will continue to receive servicing updates in ASP.NET Core 2.1.\r\n\r\nPlease use https://github.com/aspnet/Home/issues/3418 for questions or comments.\r\n","Url":"https://github.com/aspnet/Announcements/issues/314","RelatedDescription":"Open issue \"3.0: deprecating Microsoft.AspNetCore.All\" (#314)"},{"Id":"346800428","IsPullRequest":false,"CreatedAt":"2018-08-01T23:00:38","Actor":"pranavkm","Number":"313","RawContent":null,"Title":"CorsMiddleware must be explicitly configured to specify all allowed headers","State":"open","Body":"In versions of ASP.NET Core 2.1.0 and earlier, the CorsMiddleware always allowed certain headers in the `Access-Control-Request-Headers` to be sent regardless of the values configured in `CorsPolicy.Headers`. This list of headers includes:\r\n\r\n* `Accept`\r\n* `Accept-Language`\r\n* `Content-Language`\r\n* `Origin`\r\n\r\nFor instance, consider an application configured as follows:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\"));\r\n```\r\n\r\nIn 2.1 and earlier, the CORS middleware would respond successfully to a preflight request with the following request header:\r\n\r\n`Access-Control-Request-Headers: Cache-Control, Content-Language`\r\n\r\nFor 2.2.0, the CORS middleware would no longer treat this as a policy match. The server must explicitly configure policy to allow the `Content-Language` header:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\", \"Content-Language\"));\r\n```\r\n\r\nFor more information on CORS, please refer to [the documentation](https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1).","Url":"https://github.com/aspnet/Announcements/issues/313","RelatedDescription":"Open issue \"CorsMiddleware must be explicitly configured to specify all allowed headers\" (#313)"},{"Id":"345927303","IsPullRequest":false,"CreatedAt":"2018-07-30T20:44:14","Actor":"danroth27","Number":"312","RawContent":null,"Title":"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0","State":"open","Body":"As part of the 2.1.0 release, ASP.NET Core added support for build time compilation of cshtml files (Razor Views & Razor Pages). This feature is on by default and allows build time verification of the correctness of Razor files, and also faster startup performance. Additionally, MVC watches for changes to cshtml files and seamlessly updates build-time compiled views with runtime compiled views. This allows editing cshtml files and then refreshing the browser to see the changes.\r\n\r\nMVC uses the app's compilation context, details about the references and settings that were used to compile the source code (.cs) in the app, to compile views at runtime. In addition to the compilation context, MVC exposes options such as [RazorViewEngineOptions.CompilationCallback](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.compilationcallback?view=aspnetcore-2.1) and [AdditionalCompilationReferences](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.additionalcompilationreferences?view=aspnetcore-2.1) that allow configuring compilation specifically for runtime. \r\n\r\nRuntime specific customizations are unavailable at build time and consequently the two outputs could be different.\r\n\r\nTo address this inconsistency, we plan on removing APIs in MVC that change or modify runtime compilation. For 2.2.0, we're marking these APIs obsolete with the intent to remove them in 3.0.0. This is the list of affected APIs:\r\n\r\n* Properties on `Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions`\r\n    * `AdditionalCompilationReferences`\r\n    * `CompilationCallback`\r\n\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeature`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorReferenceManager`\r\n\r\nNo changes are required to your application if it does not use these APIs.\r\n\r\nApps using these APIs to add assembly references to the compilation context for runtime compilation should instead use [`ApplicationPartManager.AddApplicationPart`](https://docs.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.mvccoremvccorebuilderextensions.addapplicationpart) to add application parts for each assembly reference, or switch to a built-time compilation model (see [Create reusable UI using the Razor Class Library project](https://docs.microsoft.com/aspnet/core/razor-pages/ui-class)).\r\n\r\nOther scenarios blocked by the removal of these APIs and not covered by alternative MVC features should raised in the linked discussion issue.\r\n\r\nFor discussion, use https://github.com/aspnet/Mvc/issues/8177","Url":"https://github.com/aspnet/Announcements/issues/312","RelatedDescription":"Open issue \"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0\" (#312)"},{"Id":"339929062","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:26","Actor":"blowdart","Number":"311","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0 and 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in ASP.NET Core when a malformed request is terminated. An attacker who successfully exploited this vulnerability could cause a denial of service attack.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles such requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2708\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application is behind a forwarding proxy such is Internet Information Server, Azure Application Gateway or nginx you will not be affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Server.Kestrel.Core with a vulnerable version listed below and not hosted behind a forwarding proxy.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 2.0.4 <br /> 2.1.2\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8 <br /> 2.1.0, 2.1.1  | 2.0.9 <br /> 2.1.2\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1 | 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Server.Kestrel.Core` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET 2.0 & 2.1 not targeting the meta-packages\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects.\r\n\r\nThe `project.assets.json`files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.8\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.All` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.9\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) .\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Server.Kestrel.Core/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Server.Kestrel.Core`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.34 />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.1 (July 10, 2018): Added .App meta-package details.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/311","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\" (#311)"},{"Id":"339928979","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:13","Actor":"blowdart","Number":"310","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass in ASP.NET Core when the number of incorrect login attempts is not validated. An attacker who successfully exploited this vulnerability could try an infinite number of authentication attempts.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core validates the number of incorrect login attempts.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Identity/issues/1870\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application does not use ASP.NET Core's implementation of multi-factor authentication you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Identity with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Identity | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5 <br /> 1.1.0, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5 <br /> 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 1.0.6 <br /> 1.1.6 <br /> 2.0.4 <br /> 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Identity` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET Core 1.0, 1.1 or 2.0 not targeting the metapackage.\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Identity` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Identity` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"Microsoft.AspNetCore.Identity\" : \"1.0.5\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `Microsoft.AspNetCore.Identity`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `Microsoft.AspNetCore.Identity` version 1.0.5.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Identity` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Identity \": \"1.0.6\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Identity/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Identity`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Identity` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Identity/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Identity`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Identity` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Identity` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Identity\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Martin Knafve](https://www.linkedin.com/in/martin-knafve-99187a2/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8171](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8171)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/310","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\" (#310)"},{"Id":"336797507","IsPullRequest":false,"CreatedAt":"2018-06-28T22:10:48","Actor":"natemcmaster","Number":"309","RawContent":null,"Title":"For contributors: branch name changes in ASP.NET Core repos","State":"open","Body":"Over the coming weeks, we are planning on making the following changes to most projects in https://github.com/aspnet that are used to build ASP.NET Core.\r\n\r\n* We will create a branch named \"release/2.2\". Work on this branch will be part of [ASP.NET Core 2.2](https://github.com/aspnet/Announcements/issues/307)\r\n* We will rename the \"dev\" branch to \"master\". This is part of aligning aspnet repos with the branch naming used by other Microsoft teams.\r\n* We will change the default branch to \"master\" on GitHub.\r\n* Update the product branding on \"master\" to 3.0. Work on this branch will eventually become part of [ASP.NET Core 3.0](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/)\r\n\r\nTo help us prevent too much drift between release/2.2 and master, we will enable some automation to merge all changes from release/2.2 into master (3.0).\r\n\r\n## FAQ\r\nThis change may affect the way you help contribute to ASP.NET Core. As a result of this change and dicussion within our team, we've anticipated at least two questions you may have.\r\n\r\n#### Which branch should I use for my work?\r\n<img src=\"https://user-images.githubusercontent.com/2696087/42063035-b5fc9e42-7ae4-11e8-9916-a708fcc8e0e6.png\" width=\"500\" />\r\n\r\n#### I opened my PR to the wrong branch. What should I do?\r\n \r\nYou can edit a PR’s target branch.\r\n\r\n<img width=\"700\" alt=\"one\" src=\"https://user-images.githubusercontent.com/2696087/42063074-eb3060a8-7ae4-11e8-8ec2-d569f8e07f78.png\">\r\n<img width=\"700\" alt=\"two\" src=\"https://user-images.githubusercontent.com/2696087/42063083-f8a9564a-7ae4-11e8-91f0-f57e039085f8.png\">\r\n\r\n\r\n## Questions? Comments?\r\n\r\nThis issue is locked to reduce noise on this repo. Please use https://github.com/aspnet/Home/issues/3278 for questions and comments.\r\n\r\nThanks,\r\nNate","Url":"https://github.com/aspnet/Announcements/issues/309","RelatedDescription":"Open issue \"For contributors: branch name changes in ASP.NET Core repos\" (#309)"},{"Id":"335579239","IsPullRequest":false,"CreatedAt":"2018-06-25T21:44:22","Actor":"divega","Number":"308","RawContent":null,"Title":"EF Core 2.2 Roadmap","State":"open","Body":"## EF Core 2.2 is a small release\r\n\r\nUnlike EF Core 2.1, the 2.2 release will include a small number of new features. We are concentrating most of our efforts to add new functionality on the 3.0 release. Still, you can expect 2.2 to include lots of bugs fixes, community contributions and small improvements.\r\n\r\nYou can access the list of issues currently assigned to the 2.2 milestone using [this query](https://github.com/aspnet/EntityFrameworkCore/issues?q=is%3Aopen+is%3Aissue+milestone%3A2.2.0+sort%3Areactions-%2B1-desc) on our issue tracking system.  \r\n\r\n## Schedule\r\nThe schedule of EF Core 2.2 will align with the schedule of .NET Core and ASP.NET Core 2.2. See [the ASP.NET Core 2.2 Roadmap announcement](https://github.com/aspnet/Announcements/issues/307).\r\n\r\nOur current plan is to have three previews before we ship RTM near the end of 2018:\r\n\r\n- August – Preview 1\r\n- September - Preview 2\r\n- October - Preview 3\r\n- Before end-of-year – RTM\r\n\r\n As usual, this post reflects our current plan, but things may change as we make progress. \r\n\r\n## New features\r\n\r\n### Reverse engineering of database views into query types\r\n\r\nIn EF Core 2.1 we added query types, which allow mapping .NET objects to views and tables without keys. In 2.2, we plan to leverage this new capability to automatically map existing database views to query types. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/1679.\r\n\r\n###  Support for collections of owned entities\r\n\r\nIn EF Core 2.0 we added the concept of owned entity types, which allows modeling ownership relationship that are common between entities that are part of the same document in document-oriented databases or the same aggregate if you use Domain-Driven Design concepts in your model.\r\n\r\nUntil now, we only support reference navigation properties to owned entities. In EF Core 2.2, we plan to enhance this functionality to map collection navigation properties to owned entities. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/8172.\r\n\r\n## Other work\r\n\r\nThere are some additional work items that are not strictly EF Core 2.2 features, but we still track as part of the 2.2 milestone because we are doing the work in the same timeframe:\r\n\r\n### Cosmos DB provider\r\n\r\nA lot of our efforts are going into productizing an EF Core provider for the SQL API in Cosmos DB.\r\nWe have already created a prototype, which we have shown in demos such as in this [this EF Core 2.1 talk](https://www.youtube.com/watch?v=k55kDH_ixrQ) we did at the Microsoft Build conference.\r\n\r\nDue to competing priorities, releasing a preview of this provider has taken more than what we originally planned, but we are working on it now, and the current plan is to release a stable version by the end of this calendar year.\r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/12086. \r\n\r\n### Preview of spatial support for SQL Server\r\n\r\nWe are also focusing on adding spatial support as an extension to the SQL Server provider for EF Core.\r\nNote that the PostgreSQL provider (Npgsql) already added support in EF Core 2.1. Beside implementing this functionality for SQL Server, we are working closely with the developers of Npgsql to try to achieve a consistent and hopefully improved experience across providers.\r\n\r\nNote that we aren't committing to having a final version of the spatial support for the end of the current calendar year. But we are actively working on this now, and as we make progress, we should be able to provide a more precise estimate.   \r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/1100.\r\n\r\n### Improve test coverage for LINQ and reduce query regressions in future releases\r\n\r\nIn the last few releases, we have seen that when we commit improvements to our LINQ implementation, we often break queries that were previously working. The main challenge is that LINQ defines a huge space of possible queries to test, and it is very complex to measure what level of test coverage we have, even for a specific query operator. In the 2.2 timeframe, we will be investing on improving test coverage for this huge space. We also plan to experiment with new approaches to add appropriate coverage, and to reduce the likelihood of introducing regressions in future releases.\r\n\r\nYou can track our progress on this at https://github.com/aspnet/EntityFrameworkCore/issues/12046. \r\n\r\nFor discussion on this roadmap, please use https://github.com/aspnet/EntityFrameworkCore/issues/12465. ","Url":"https://github.com/aspnet/Announcements/issues/308","RelatedDescription":"Open issue \"EF Core 2.2 Roadmap\" (#308)"},{"Id":"335571873","IsPullRequest":false,"CreatedAt":"2018-06-25T21:19:36","Actor":"glennc","Number":"307","RawContent":null,"Title":"ASP.NET Core 2.2 Roadmap","State":"open","Body":"We have grouped the ASP.NET Core 2.2 release into a few themes:\r\n\r\n- APIs & Services\r\n- Server improvements\r\n- SignalR\r\n\r\n## Rough Schedule\r\nWe are currently planning to have 3 previews before RTM:\r\n - August – Preview 1\r\n - September - Preview 2\r\n - October - Preview 3\r\n - Before End-of-year – RTM\r\n\r\nAs with our previous roadmap posts this is what we intend right now, but it's subject to change as we continue development.\r\n\r\n## APIs and Services\r\n\r\nThe 'north star' for this version is to generate better metadata about your app and use that data to make your dev experience better and more productive. This is the main focus for 2.2.\r\n\r\n### API Controller conventions\r\nIn 2.1 we added controller specific conventions that make Web API development more convenient with the [ApiController attribute](https://docs.microsoft.com/en-us/aspnet/core/web-api/index?view=aspnetcore-2.1#annotate-class-with-apicontrollerattribute). In 2.2 we want to expand on this concept to provide metadata for API Explorer and provide a better end-to-end API documentation experience.\r\n\r\nWe want to make it possible for all MVC Core applications to have a good Swagger/OpenAPI definition by default. By following common patterns, your actions will produce rich metadata without falling into 'attribute soup' where you list every possible status code that every action in your app could return. We will include a default set of conventions that match what ASP.NET Core scaffolding generations. It will also be possible to write and share your own conventions to reflect your desired contracts. \r\n\r\nWe will include a set of analyzers that will help you find cases where code that doesn't match the API Explorer metadata, and a code-fix that provides options to explicitly specify the response type metadata, create a new convention with a different pattern, or just let you write code to satisfy the convention.\r\n\r\nAs a concrete example, you could write a convention that says \"every action method that starts with 'Create' will return an HTTP 201\". If you wrote the following code, then you would receive a warning.\r\n\r\n```csharp\r\n[HttpPost(\"/orders\")]\r\npublic ActionResult<Order> CreateOrder(OrderData orderData)\r\n{\r\n    ....\r\n    return Ok(new Order() {...});\r\n}\r\n```\r\n\r\nThis code doesn't match your Swagger/OpenAPI metadata (from the convention) - which says that this action returns a 201. Once you see this, you could `ctrl + .` to add the attributes for what we do know about this method, opting out of conventions, or you could change the code.\r\n\r\nThe analyzer will also be able to 'check your work' if you are being explicit about status codes and results using the existing attributes - it does not require you to use the conventions. Details for how this will all work can be discussed here: https://github.com/aspnet/Mvc/issues/7802\r\n\r\nLet's look at a more fleshed-out out example. The following code snippet is what is required to generate a reasonable Open API document for an action method that will get an item by ID or return a 404:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    [ProducesResponseType((int)HttpStatusCode.NotFound)]\r\n    [ProducesResponseType(typeof(CatalogItem),(int)HttpStatusCode.OK)]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\nIn 2.2 with the default conventions the following code should generate the same Open API document that the above code sample does, and this shipped analyzers will give you hints when you do something that doesn't match so you know to go and add attributes or change the conventions:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n### OpenAPI generation\r\nWith the conventions described above it will be possible for code that uses the API Explorer to generate Open API documents to be better by default, since the code you write will either follow the conventions or have attributes allowing generators to create better documents.\r\n\r\n### Dispatcher\r\nIn 2.2 we will introduce a new routing system that will expand the set of scenarios where routing is useful – tentatively called Dispatcher. \r\n\r\nThe current routing system was designed to support MVC’s historical scenarios without much thought to how routing and the composable middleware pipeline will work together. The Dispatcher is designed to run the URL matching step very early in the pipeline so that middleware can see the Endpoint that was selected as well as metadata that is associated with that endpoint. Like existing routing, the dispatcher will branch and call the actual endpoint at the end of the pipeline.\r\n\r\nA concrete example of how this helps us is with CORS. Today there is both a CORS middleware AND a CORS feature of MVC (https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1). Because routing information is deeply integrated with MVC we can't apply CORS policies that only apply to specific controllers until after we know what controller has been selected. However, if you also want CORS policies to apply to other parts of your pipeline then you need the middleware. This has been a source of confusion for many and we can simplify it if all of the middleware pipeline can have as much information about routing as MVC does today.\r\n\r\nWe’re also using this opportunity to make improvements to the performance of routing and dispatching for MVC and other scenarios.\r\n\r\n### HTTP API REPL tooling\r\nToday there are no tools built into Visual Studio or the dotnet CLI to help you execute HTTP verbs against your API. We have a great language, debugger, and framework but they are somewhat limited when it's difficult to send a POST to my app to see what happens. In 2.2 we want to build a CLI experience for exploring HTTP APIs to imcrease your API inner loop productivity. The CLI builds on all the features we've talked about above as some of its advanced features, like listing all routes in your app, are enabled by consuming the metadata we have about your app via Open API documents. That means the CLI should be useful for executing any HTTP verb, but really shines when you feed it more data like Open API docs. We intend to start by shipping this as a standalone global tool while we explore its feature set and potential.\r\n\r\nYou can see a demo and description of this in Scott Hunter and Scott Hanselman's BUILD talk here: https://youtu.be/KAIJ3ezQb3c?t=18m\r\n\r\n### API client generation (C# & TypeScript)\r\nOnce you have an API with rich metadata and done exploring and testing it, then you need to go and write some client code to call and make use of your API. We are going to build an experience for generating this code based on the same data and documentation described above. We envision a few pieces for this story, one part is a dotnet tool that can generate code from an Open API document, the other is MSBuild SDK work to allow a `ServiceReference` to another project in a solution. That reference will cause build time client code generation to happen via the tool that can generate code. We expect this to work in a similar way to the EF Core tooling experience, where your application is built and most of your startup code executed but instead of running it we use the data we have about your code to generate a client.\r\n\r\n### Authorization Server\r\nOne of the largest gaps we’ve had has been around authorization for applications beyond a simple forms based login. We plan to fill that gap with a simple to use OpenID Connect based authorization server, which will allow your ASP.NET application to act as an authentication point for your projects, be they web site to API, SPA to API, native application to an API or, for distributed applications API to API. As we are concentrating on first party applications we can make the code you need to plumb in trivial, getting as close to zero configuration as you can,  we’re not aiming to replace the excellent third-party solutions out there which enable richer scenarios like third-party applications or which provide a flexibility in configuration and authentication flow.\r\n\r\n## Server Improvements\r\n\r\n### Health Checks\r\nThis feature is a way to trivially setup an endpoint in your application that can be used to check the health of your application, potentially taking into account things like memory consumption or database availability as well as just \"can I accept a HTTP request\".\r\n\r\n### HTTP/2 in Kestrel & HttpClient\r\nThe title says it all in this case. HTTP/2 support for all. We started this work some time ago, and have had the protocol mostly implemented for a while but not compiled into the product since it wasn't ready. This version we will finish that work and implement the missing features.\r\n\r\n### In-proc ANCM\r\nRunning ASP.NET Core applications in-process in IIS, giving a significant performance boost.\r\n\r\n## SignalR\r\n\r\n### Add Java & C++ clients\r\nAllow customers using Java or C++ to connect to SignalR servers, and the [Azure SignalR Service](https://azure.microsoft.com/en-us/blog/azure-signalr-service-a-fully-managed-service-to-add-real-time-functionality/).\r\n\r\n## Other\r\nAs with all releases there is a large tail of bug fixes, performance improvements, small features, and community PRs that we will also work on. You can see the full list of work by browsing the 2.2 milestones on the various [repositories](https://github.com/aspnet/).\r\n\r\nFor discussion on the roadmap in general, use https://github.com/aspnet/Home/issues/3265","Url":"https://github.com/aspnet/Announcements/issues/307","RelatedDescription":"Open issue \"ASP.NET Core 2.2 Roadmap\" (#307)"},{"Id":"333804954","IsPullRequest":false,"CreatedAt":"2018-06-19T19:21:13","Actor":"anurse","Number":"306","RawContent":null,"Title":"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR Client from UWP applications where the minimum version is set to \"Windows 10, version 1803\". However, these fixes also require some additional dependencies.\r\n\r\n**NOTE**: UWP Applcations with a minimum version set **below** \"Windows 10, version 1803\" (for example, if the minimum version is set to \"Fall Creators Update\") are **not** affected by this issue and **do not require** these steps.\r\n\r\nIn order to use the SignalR Client in UWP applications where the minimum version is set to \"Windows 10, version 1803\" you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Add the following **additional** package references to your project. These are referenced transitively by the SignalR Client, but newer versions are required to resolve this issue. We are planning to improve this in a future patch.\r\n    * `System.Threading.Tasks.Extensions` version `4.5.1`\r\n    * `System.Runtime.CompilerServices.Unsafe` version `4.5.1`\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/2406","Url":"https://github.com/aspnet/Announcements/issues/306","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803\" (#306)"},{"Id":"333802959","IsPullRequest":false,"CreatedAt":"2018-06-19T19:15:05","Actor":"anurse","Number":"305","RawContent":null,"Title":"SignalR Client 2.1.1 in Xamarin","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR **Client** from Xamarin. However, these fixes also require an updated build of Xamarin.iOS and Xamarin.Android, as well as some additional dependencies.\r\n\r\nIn order to use the SignalR Client in Xamarin applications you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Upgrade Xamarin to the appropriate version:\r\n    * Xamarin.Android `8.4.0.1`\r\n    * Xamarin.iOS `11.14.0.4`\r\n    * These will be included in:\r\n      * Visual Studio 15.8 **Preview 3** (not released at the time of publishing, but coming soon)\r\n      * Visual Studio for Mac 7.6 **Preview 3** (not released at the time of publishing, but coming soon)\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/1886","Url":"https://github.com/aspnet/Announcements/issues/305","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in Xamarin\" (#305)"},{"Id":"329851587","IsPullRequest":false,"CreatedAt":"2018-06-06T13:30:30","Actor":"ToLearnMoe","Number":"304","RawContent":null,"Title":"怎么找工作啊","State":"closed","Body":"我学spirng的同学都上班两个月了我实习都没找到，学了给asp告诉我现在不能用了要什么点apsnet。你们行不行啊\r\n\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n\r\nThis repo is for team announcements only. See https://github.com/aspnet/announcements#announcements.\r\n\r\nTo file a bug or start a discussion, please find the appropriate repo in https://github.com/aspnet and create a new issue. \r\nFor general issue discussions please go to https://github.com/aspnet/Home/issues and create a new issue.\r\n","Url":"https://github.com/aspnet/Announcements/issues/304","RelatedDescription":"Closed issue \"怎么找工作啊\" (#304)"},{"Id":"329603099","IsPullRequest":false,"CreatedAt":"2018-06-05T20:11:55","Actor":"AngelosP","Number":"303","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"closed","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\r\n\r\nFor discussion, use https://github.com/aspnet/Tooling/issues/1075","Url":"https://github.com/aspnet/Announcements/issues/303","RelatedDescription":"Closed issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#303)"},{"Id":"327435771","IsPullRequest":false,"CreatedAt":"2018-05-29T18:26:40","Actor":"shirhatti","Number":"302","RawContent":null,"Title":"IIS in-process hosting moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving IIS in-process hosting out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will ship IIS in-process hosting as part of the ASP.NET Core 2.2 release.\r\n\r\n### Why?\r\n\r\nIIS in-process hosting  is a brand new server implementation and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/IISIntegration/issues/878","Url":"https://github.com/aspnet/Announcements/issues/302","RelatedDescription":"Open issue \"IIS in-process hosting moved out of ASP.NET Core 2.1\" (#302)"},{"Id":"322891671","IsPullRequest":false,"CreatedAt":"2018-05-14T16:32:50","Actor":"jkotalik","Number":"301","RawContent":null,"Title":"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available","State":"open","Body":"We have changed the behavior of the HttpsRedirectionMiddleware between 2.1.0-preview2 to 2.1.0-rc1. Instead of always redirecting a request to HTTPS, we will now not redirect to HTTPS if no port is available. The HTTPS port can be specified by setting ```HttpsRedirectionOptions.HttpsPort```, setting the ASPNETCORE_HTTPS_PORT environment variable, or by setting an HTTPS url in launchsettings.json.\r\n\r\nIf you want to continue keeping the original behavior the HttpsRedirectionMiddleware which redirects to port 443, you can set the ```HttpsRedirectionOptions.HttpsPort = 443```.\r\n \r\n---\r\n\r\n*Please use aspnet/BasicMiddleware#329 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/301","RelatedDescription":"Open issue \"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available\" (#301)"},{"Id":"321270218","IsPullRequest":false,"CreatedAt":"2018-05-08T17:07:04","Actor":"blowdart","Number":"300","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2553\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_","Url":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300)"},{"Id":"320441265","IsPullRequest":false,"CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Number":"299","RawContent":null,"Title":"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/WebHooks/issues/296","Url":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Open issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299)"},{"Id":"309862672","IsPullRequest":false,"CreatedAt":"2018-03-29T18:44:48","Actor":"glennc","Number":"298","RawContent":null,"Title":"Migrating from aspnetcore docker repos to dotnet","State":"open","Body":"Starting with .NET Core 2.1-preview2, we intend to migrate from using the microsoft/aspnetcore-build and microsoft/aspnetcore Docker repos to the microsoft/dotnet Docker repo.  We will continue to ship patches and security fixes for the existing aspnetcore images but any new images for 2.1 and higher will be pushed to microsoft/dotnet.\r\n\r\nDockerfiles using `microsoft/aspnetcore:<version>` should change to `microsoft/dotnet:<version>-aspnetcore-runtime`.\r\n\r\nDockerfiles using `microsoft/aspnetcore-build` that do not require Node should just change to `microsoft/dotnet:<version>-sdk`.\r\n\r\nDockerfiles using Node from the `microsoft/aspnetcore-build` image will either need to install Node into their own image or use mult-stage builds as described in the Dockerfile examples at the end of this announcement.\r\n\r\nThe `ASPNETCORE_URLS` env var that allows ASP.NET Core apps to accept traffic from outside the container will be set in all the `dotnet` images, which was a common early stumbling block for people getting started with ASP.NET Core and Docker. PR is [here](https://github.com/dotnet/dotnet-docker/pull/450)\r\n\r\n### Why the merge?\r\n\r\nFor some time we have been seeing people search for and find the `microsoft/dotnet` images and never realise that there are aspnetcore ones. This could be problematic in the past as the dotnet images were not optimised for ASP.NET Core, making things a little harder or slower. But with changes in the way ASP.NET Core works in 2.1 it was going to be much more impactful, in that ASP.NET Core applications were not likely to run on the base dotnet image. Given that we also thought it made more sense to have a single repository for all images, as ASP.NET is just part of .NET, we are taking this opportunity to remove the potential source of confusion and wasted time for our customers.\r\n\r\n### Why no Node?\r\nThere are two main reasons for this:\r\n\r\n  1. Multi-stage build now makes it easier to pull in the Node image for purely build concerns.\r\n  2. The ASP.NET Core templates no longer have a hard dependency on Node.\r\n\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n\r\n### Dockerfile examples\r\n\r\nIf you need Node then you will need to add it in your own Dockerfile, like this:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n#setup node\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\n# copy everything else and build\r\nCOPY . ./\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n#setup node, this is only needed if you use Node both at runtime and build time. Some people may only need the build part.\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\nCOPY --from=build-env /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nIf you only need Node at build then you may also be able to take advantage of multi-stage build like the following:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\nFROM node as clientBuild\r\n#Do npm restore and other Node stuff.\r\n\r\n#Merge the contents of your .NET build env and your clientBuild and publish.\r\nFROM build-env as publish\r\n# copy everything else and build\r\nCOPY --from=clientBuild . .\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n\r\nCOPY --from=publish /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n","Url":"https://github.com/aspnet/Announcements/issues/298","RelatedDescription":"Open issue \"Migrating from aspnetcore docker repos to dotnet\" (#298)"},{"Id":"305936138","IsPullRequest":false,"CreatedAt":"2018-03-16T14:09:54","Actor":"mnmr","Number":"297","RawContent":null,"Title":"Model binding accesses read-only properties in post-back","State":"closed","Body":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355.","Url":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297)"},{"Id":"305310538","IsPullRequest":false,"CreatedAt":"2018-03-14T20:08:36","Actor":"halter73","Number":"296","RawContent":null,"Title":"Managed sockets will replace libuv as Kestrel's default transport","State":"open","Body":"Starting in ASP.NET Core 2.1.0, managed sockets will be replacing libuv as Kestrel's default transport.\r\n\r\nThis change should only break applications that bind to non-TCP endpoints or explicitly call `IWebHostBuilder.UseLibuv()` and reference the libuv transport transitively through the Microsoft.AspNetCore.App and/or Microsoft.AspNetCore.Server.Kestrel NuGet packages.\r\n\r\nTo fix the break simply add a reference to Microsoft.AspNetCore.All and/or Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.\r\n\r\nWhile switching to the managed socket transport should be seamless<sup>1</sup>, if you want to continue using the libuv transport in 2.1.0 you will need to explicitly call `UseLibuv()` and reference the libuv transport either directly or through the \"All\" metapackage.\r\n\r\n<sup>1</sup> Unless you are trying to bind to a Unix domain socket or use systemd socket activation. As of 2.1, only the libuv transport supports binding to these kinds of endpoints.\r\n\r\n---\r\n\r\n*Please use aspnet/KestrelHttpServer#2360 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/296","RelatedDescription":"Open issue \"Managed sockets will replace libuv as Kestrel's default transport\" (#296)"},{"Id":"304854672","IsPullRequest":false,"CreatedAt":"2018-03-13T17:07:23","Actor":"blowdart","Number":"295","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\r\n\r\n## Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core versions 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where an elevation of privilege vulnerability exists when a ASP.NET Core web application fails to validate web requests correctly.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Home/issues/2954\r\n\r\n### Mitigation factors\r\n\r\nSites are not vulnerable to this elevation of privilege when:\r\n\r\n* The site is hosted behind a proxy, such as Internet Information Services (IIS), NGINX, or Apache, where:\r\n\r\n  * The proxy validates the host header, and\r\n  * The proxy is configured to listen on fully qualified domain names or\r\n  * The proxy is configured with a wildcard subdomain where the root domain is fully controlled by the site owner.\r\n\r\nFor example, if IIS is configured to respond to requests for `contoso.com` or `*.contoso.com` hosts, the application is protected.\r\n\r\nIf IIS is configured to respond to any request from any host, the application is vulnerable.\r\n\r\nKestrel does not have the capability to validate host headers and is vulnerable if not placed behind a proxy that performs the host header validation.\r\n\r\nApps hosted in Azure Web Apps are not susceptible to this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core hosted application which is directly exposed to the internet, or hosted behind a proxy which does not validate or restict host headers to known good values.\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.HttpOverrides | 2.0.0, 2.0.1 |  2.0.2 and later\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1 |  2.0.2 and later\r\n\r\n*No patches are available for ASP.NET Core 1.0.x or ASP.NET Core 1.1.x. Microsoft requires that you place your 1.x ASP.NET Core application behind a proxy.\r\nYou must address the configuration of your proxy to protect your application. If you're not running ASP.NET Core 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0.\r\nand add the host validating middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/.*\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected?\r\n\r\nReview the server and proxy configuration [instructions](#configuration) below to see if your system is configured correctly, and adjust the configuration if necessary.\r\n\r\n### How do I fix the issue?\r\n\r\nYou must address the [configuration](#configuration) of your server or proxy to protect your application to limit requests to known hosts.\r\n\r\nIf you're not running Kestrel 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0 and follow the 2.0 instructions below.\r\n\r\nASP.NET Core 2.0.x applications must [update your code](#app-update) to fully protect your application.\r\n\r\n#### <a name=\"configuration\"></a> Server and Proxy configuration\r\n\r\nYou must examine your externally facing server or proxy configuration and ensure it requires host headers with fully qualified domain names, or known sub-domains if you are using sub-domain wild cards.\r\n\r\n##### ASP.NET Core applications behind [IIS](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/)\r\n\r\nTo configure IIS to only respond to know hosts:\r\n\r\n* Open IIS Manager.\r\n* Expand the **Sites** node for the machine you want to configure.\r\n* Select the site by clicking on the site.\r\n* In the **Actions** list on the right-hand side of IIS Manager, click **Bindings**.\r\n* Edit any bindings that do not have a host name to specify one. Do not use a `*` wildcard unless it's against a domain under your control. For example, `*.contoso.com` is safe, `*.com` is not.\r\n\r\n##### ASP.NET Core applications running publicly on [Kestrel](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel)\r\n\r\nKestrel does not have the capability to validate host headers. It must either be placed behind a proxy that performs the host header validation or the validation must be performed within the application by adding  host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/. You must also [update your dependencies](#app-update) to fully protect your application.\r\n\r\n##### ASP.NET Core applications running on [HTTP.SYS](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys)\r\n\r\nTo configure URL prefixes and ports, you can use the `UseUrls` extension method, the `urls` command-line argument, the ASPNETCORE_URLS environment variable, or the `UrlPrefixes` property on [HttpSysOptions](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.server.httpsys.httpsysoptions). The following code example uses `UrlPrefixes`.\r\n\r\n```c#\r\npublic static IWebHost BuildWebHost(string[] args) =>\r\n    WebHost.CreateDefaultBuilder(args)\r\n        .UseStartup<Startup>()\r\n        .UseHttpSys(options =>\r\n        {\r\n            // The following options are set to default values.\r\n            options.Authentication.Schemes = AuthenticationSchemes.None;\r\n            options.Authentication.AllowAnonymous = true;\r\n            options.MaxConnections = null;\r\n            options.MaxRequestBodySize = 30000000;\r\n            options.UrlPrefixes.Add(\"http://localhost:5000\");\r\n        })\r\n        .Build();\r\n```\r\n\r\n##### ASP.NET Core applications behind [NGINX](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx)\r\n\r\nTo configure NGINX as a reverse proxy to forward requests to your ASP.NET Core app, replace the contents */etc/nginx/sites-available/default* with the following:\r\n\r\n```NGINX\r\nserver {\r\n    listen        80;\r\n    server_name   example.com *.example.com;\r\n    location / {\r\n        proxy_pass         http://localhost:5000;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header   Upgrade $http_upgrade;\r\n        proxy_set_header   Connection keep-alive;\r\n        proxy_set_header   Host $host;\r\n        proxy_cache_bypass $http_upgrade;\r\n    }\r\n}\r\n```\r\n\r\nNote that with NGINX, when there is no match for `server_name`, NGINX will pick the default server. If no default server has been defined, the first server in the conf file is the default server. Best practice is to add a specific default server which returns a status code of 444 in the conf file. An example default server configuration would be as follows:\r\n\r\n```NGINX\r\nserver {\r\n    listen   80 default_server;\r\n    # listen [::]:80 default_server deferred;\r\n    return   444;\r\n}\r\n```\r\n\r\nWith the preceding configuration file and default server, NGINX accepts public traffic on port 80 with host header `example.com` or `*.example.com`. Requests not matching these hosts won't get forwarded to Kestrel. NGINX forwards the matching requests to Kestrel at `http://localhost:5000`. See [How nginx processes a request](https://nginx.org/docs/http/request_processing.html) for more information.\r\n\r\nOnce the NGINX configuration is established, run `sudo nginx -t` to verify the syntax of the configuration files. If the configuration file test is successful, force NGINX to pick up the changes by running `sudo nginx -s reload`.\r\n\r\n##### ASP.NET Core applications behind [Apache](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-apache)\r\n\r\nConfiguration files for Apache are located within the `/etc/httpd/conf.d/` directory. Any file with the `*.conf*` extension:\r\n\r\n* Is processed in alphabetical order, and\r\n* The module configuration files in `/etc/httpd/conf.modules.d/` are processed. The module configuration files in `/etc/httpd/conf.modules.d/` contain any configuration files necessary to load modules.\r\n\r\n\r\n```\r\n<VirtualHost *:80>\r\n    ProxyPreserveHost On\r\n    ProxyPass / http://127.0.0.1:5000/\r\n    ProxyPassReverse / http://127.0.0.1:5000/\r\n    ServerName www.example.com\r\n    ServerAlias *.example.com\r\n</VirtualHost>\r\n```\r\n\r\nThe `VirtualHost` block can appear multiple times, in one or more files on a server. In the preceding configuration file, Apache accepts public traffic on port 80. The domain `www.example.com` is being served, and the `*.example.com` alias resolves to the same website. See [Name-based virtual host support](https://httpd.apache.org/docs/current/vhosts/name-based.html) for more information. Requests are proxied at the root to port 5000 of the server at 127.0.0.1. For bi-directional communication, `ProxyPass` and `ProxyPassReverse` are required.\r\n\r\nSave the file and test the configuration. If everything passes, the response is `Syntax [OK]`.\r\n\r\n```bash\r\nsudo service httpd configtest\r\n```\r\n\r\nRestart Apache:\r\n\r\n```bash\r\nsudo systemctl restart httpd\r\nsudo systemctl enable httpd\r\n```\r\n\r\n\r\n#### <a name=\"app-update\"></a> ASP.NET Core 2.0 application code updates\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.6 or later.\r\n* Updating will pull in the fixed packages listed above.\r\n\r\nIf you're targeting .NET Framework, update the packages listed above to their safe version or later.\r\n\r\nIf your application is using Kestrel without a proxy or the HttpOverrides functionality (UseForwardedHeaders with ForwardedHost) you must also add the host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/tree/release/2.0/samples/HostFilteringSample/.\r\n\r\n---\r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. You must follow the update instructions below to address both types of dependency.\r\n\r\n### Direct dependencies\r\n\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on `Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file.\r\n\r\n### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Core\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the vulnerable metapackage, as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.5.\r\n\r\nTo update the version to the secure package, change the version number to a secure package version. In this example, update `Microsoft.AspNetCore.All` to 2.0.6 or later. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.6\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Framework\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a reference to a single package, as seen by the `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.HttpOverrides` version 2.0.1.\r\n\r\nTo update to the secure package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.HttpOverrides` to 2.0.2 and later. Save the *csproj* file. The updated and secure *csproj* look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependency version.\r\n\r\n##### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to a compatible version. \r\n\r\nFor example if your project refers directly to `Microsoft.AspNetCore.Mvc.Cors` with a version number of `2.0.0`, when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your *project.json* in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n###### Reviewing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review the *project.assets.json* file.\r\n\r\n###### Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names above and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example, the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n###### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file. Visual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the vulnerable versions table above.\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your *project.assets.json* file includes references to any of the vulnerable packages shown above, then you need to fix the transitive dependencies.\r\n\r\n###### Overriding transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages this means:\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned, you must add a direct dependency to the updated version by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referring the fixed version.\r\nFor example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.HttpOverrides` version 2.0.0 you would add a reference to the fixed version, that is, 2.0.2 or later.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverride\" Version=\"2.0.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n###### Rebuilding your application\r\n\r\nRebuild your application. Test and deploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\n[Mikhail Shcherbakov](https://www.linkedin.com/in/mikhailshcherbakov/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0787)\r\n\r\n### Revisions\r\n\r\nV1.1 (Mar 15, 2018): NGINX configuration instructions updated, thanks to @buglloc\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-03-15_","Url":"https://github.com/aspnet/Announcements/issues/295","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\" (#295)"},{"Id":"304853568","IsPullRequest":false,"CreatedAt":"2018-03-13T17:04:23","Actor":"blowdart","Number":"294","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_","Url":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294)"},{"Id":"303604146","IsPullRequest":false,"CreatedAt":"2018-03-08T19:36:01","Actor":"natemcmaster","Number":"293","RawContent":null,"Title":"Moving official daily builds to the dotnet-core MyGet feed ","State":"open","Body":"As part of ongoing infrastructural changes, we will be moving official daily of ASP.NET Core to the dotnet-core myget feed. This transition will happen over the next few weeks.\r\n\r\n**Old feed:** https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\r\n**New feed:** https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n\r\nWe recommend updating to use the dotnet-core feed to continue getting the latest daily builds of ASP.NET Core.\r\n\r\nWe are making this change to make it easier for you to pull daily builds that align with the .NET Core CLI and .NET Core runtime. Some of our existing MyGet feeds will continue to exist, but will not be used for official daily builds. Instead, those feeds will only be used for builds of experimental branches of aspnetcore.\r\n\r\nOther useful links:\r\nGallery: https://dotnet.myget.org/gallery/dotnet-core\r\nNuGet v2 source: https://dotnet.myget.org/F/dotnet-core/api/v2\r\nNPM feed: https://dotnet.myget.org/F/dotnet-core/npm/\r\n\r\nPlease use https://github.com/aspnet/Home/issues/2937 for discussion.","Url":"https://github.com/aspnet/Announcements/issues/293","RelatedDescription":"Open issue \"Moving official daily builds to the dotnet-core MyGet feed \" (#293)"},{"Id":"302846756","IsPullRequest":false,"CreatedAt":"2018-03-06T20:07:15","Actor":"natemcmaster","Number":"292","RawContent":null,"Title":"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image","State":"open","Body":"We will be deprecating the following Docker images\r\n \r\n- microsoft/aspnetcore-build:1.0-1.1\r\n- microsoft/aspnetcore-build:1.0-2.0\r\n\r\nWe will not delete these images. These images will continue to receive patch update whenever a 1.0.x, 1.1.x, or 2.0.x update ships, however, we will not produce a new version which contains the 2.1 runtime.\r\n\r\n### Why?\r\n \r\nThese images existed to support CI/CD pipelines that run apps on multiple versions for .NET Core in the same container. With each release, these images have grown in size. The 1.0-2.0 image is already about 1GB, and would continue to grow with runtime updates. \r\n \r\nFortunately, recent improvements to .NET Core (such as minor version roll-forward) and Docker (multi-stage builds) have reduced the need to use an image with multiple versions of .NET Core. We have seen usage of these multi-version images declining over time, and today, they are a small percentage of our Docker image usage.\r\n\r\nRather than maintaining a single, large image with all possible .NET Core runtimes, we encourage users to use multi-stage builds. Docker's multi-stage feature allows you to compose a single Dockerfile, but still use multiple .NET Core runtimes. Also, starting in 2.1, .NET Core supports rolling forward the runtime version within the major version, which will further reduce the need to have multiple 2.x runtimes side-by-side.\r\n \r\nFor discussion, use https://github.com/aspnet/aspnet-docker/issues/349","Url":"https://github.com/aspnet/Announcements/issues/292","RelatedDescription":"Open issue \"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image\" (#292)"},{"Id":"301939059","IsPullRequest":false,"CreatedAt":"2018-03-02T23:33:38","Actor":"blowdart","Number":"291","RawContent":null,"Title":"Statement on ASP.NET susceptibility to the recent DuoLabs SAML vulnerability announcement.","State":"open","Body":"This week saw an announcement of vulnerabilities in  SAML parsing libraries by [DUO Labs](https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations). Whilst no Microsoft implementations were listed we've seen a number of customer questions about this, especially given the recent WS-Fed support added to ASP.NET Core. \r\n\r\nASP.NET and ASP.NET Core rely on libraries from the Windows Identity team. Their investigation shows [their libraries are not vulnerable](https://cloudblogs.microsoft.com/enterprisemobility/2018/03/02/latest-saml-vulnerability-not-present-in-azure-ad-and-adfs/) to this parsing vulnerability, thus any ASP.NET or ASP.NET Core application which uses the default Microsoft SAML libraries or authentication handlers are safe from this exploit.\r\n","Url":"https://github.com/aspnet/Announcements/issues/291","RelatedDescription":"Open issue \"Statement on ASP.NET susceptibility to the recent DuoLabs SAML vulnerability announcement.\" (#291)"},{"Id":"300752371","IsPullRequest":false,"CreatedAt":"2018-02-27T18:58:59","Actor":"natemcmaster","Number":"290","RawContent":null,"Title":"dotnet-watch, dotnet-ef, and dotnet-user-secrets will move into the .NET Core CLI in 2.1.300","State":"open","Body":"Starting in .NET Core CLI 2.1.300-preview2, the following tools were added as bundled, top-level commands. These tools previously shipped as NuGet packages.\r\n\r\n - Microsoft.DotNet.Watcher.Tools (aka dotnet-watch)\r\n - Microsoft.EntityFrameworkCore.Tools.DotNet (aka dotnet-ef)\r\n - Microsoft.Extensions.SecretManager.Tools (aka dotnet-user-secrets)\r\n - Microsoft.Extensions.Caching.SqlConfig.Tools (aka dotnet-sql-cache)\r\n\r\nCommands like `dotnet watch`, `dotnet ef`, and `dotnet user-secrets` can be executed on any project without needing to install the command via \"dotnet restore\" or \"dotnet install tool\". The commands are available by default in all projects.\r\n\r\n### Upgrading from stable releases of .NET Core CLI (e.g. 2.1.5)\r\n\r\nUsing these tools as a DotNetCliToolReference will no longer work. If your .csproj file has the following lines, they can be removed.\r\n```xml\r\n<ItemGroup>\r\n   <DotNetCliToolReference Include=\"Microsoft.DotNet.Watcher.Tools\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.Extensions.Caching.SqlConfig.Tools\" Version=\"(all versions)\" />\r\n</ItemGroup>\r\n```\r\n\r\n### Upgrading from .NET Core CLI 2.1.300-preview1\r\nFor early-adopters who tried the 2.1.300-preview1 release, you will no longer need to run `dotnet install tool -g` to acquire the following tools:\r\n - dotnet-watch\r\n - dotnet-user-secrets\r\n - dotnet-dev-certs\r\n - dotnet-sql-cache\r\n - dotnet-ef\r\n\r\nIf you had installed these tools in 2.1.300-preview1, you can uninstall them manually by deleting corresponding files from `%USERPROFILE%\\.dotnet\\tools\\` (Windows) or `$HOME/.dotnet/tools` (macOS/Linux).\r\n\r\n**For discussion use https://github.com/aspnet/DotNetTools/issues/399**","Url":"https://github.com/aspnet/Announcements/issues/290","RelatedDescription":"Open issue \"dotnet-watch, dotnet-ef, and dotnet-user-secrets will move into the .NET Core CLI in 2.1.300\" (#290)"},{"Id":"295436695","IsPullRequest":false,"CreatedAt":"2018-02-08T09:18:21","Actor":"SteveSandersonMS","Number":"289","RawContent":null,"Title":"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)","State":"open","Body":"The `Microsoft.AspNetCore.SpaTemplates` package never shipped in the .NET Core SDK, and never reached an official level of support. The ASP.NET team's development resources are finite, and we think we can deliver more valuable features to ASP.NET developers by focusing elsewhere.\r\n\r\nSo:\r\n\r\n* The `Microsoft.DotNet.Web.Spa.ProjectTemplates` package, containing **Angular**, **React**, and **React+Redux** templates, is **not affected**. This ships in the .NET Core SDK and is officially supported. We continue to invest development effort in this package. We can put *more* time and effort into these SPA templates now the effort isn't so spread out.\r\n* If you have an existing Aurelia/Knockout/Vue project based on our SPA templates, you're not directly affected because these templates are only used to create new projects. You can continue building and shipping your app forever. Obviously we still support and enhance the underlying ASP.NET Core APIs (such as those in JavaScriptServices) that you are using.\r\n* The `Microsoft.AspNetCore.SpaTemplates` package, containing Aurelia, Knockout, and Vue templates, continues to be available, but we'll no longer update it or work on issues related to it.\r\n* We encourage enthusiastic community members to [ship your own `dotnet new` templates](https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates). The `dotnet new` system is extensible for this exact reason. If you want to own the go-to Aurelia/Knockout/Vue project template, now's your chance! You could [fork the ones from `Microsoft.AspNetCore.SpaTemplates`](https://github.com/aspnet/templating/tree/dev/src/Microsoft.AspNetCore.SpaTemplates), or start from scratch depending on what you prefer.\r\n* In the long term, if another JavaScript SPA framework becomes dominant, we will of course consider adding a template for it to the SDK templates package.\r\n\r\nI know this will be irritating to some people, especially those who have worked on PRs for the Aurelia/Knockout/Vue templates. I'm sorry about that! I hope you can understand that our goal is to offer the overall maximum benefit for ASP.NET developers based on the resources available.\r\n\r\nDiscussion for this issue is at https://github.com/aspnet/JavaScriptServices/issues/1522","Url":"https://github.com/aspnet/Announcements/issues/289","RelatedDescription":"Open issue \"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)\" (#289)"},{"Id":"294037619","IsPullRequest":false,"CreatedAt":"2018-02-02T22:04:23","Actor":"danroth27","Number":"288","RawContent":null,"Title":"ASP.NET Core 2.1 high-level planning","State":"open","Body":"*This is high-level only and doesn't include all issues, bugs, etc. from every repo, just intended to give a general idea of release scope and direction.*\r\n\r\nThe following high-level features are planned for the ASP.NET Core 2.1 release:\r\n- **SignalR** - Real-time web framework on ASP.NET Core (https://github.com/aspnet/SignalR/issues/394)\r\n- **HTTPS** - On by default and easy to configure (https://github.com/aspnet/Home/issues/2308)\r\n- **GDPR compliance** - Templates updated with new privacy features (https://github.com/aspnet/Security/issues/1561, https://github.com/aspnet/Identity/issues/1341)\r\n- **Web API conventions** - Rich Swagger support without attributes (https://github.com/aspnet/Mvc/issues/6870, https://github.com/aspnet/Mvc/issues/6784)\r\n- **IHttpClientFactory** - HttpClient as a service, handle cross-cutting concerns like caching, retry logic, timeouts and circuit breakers (https://github.com/aspnet/HttpClientFactory/issues/42)\r\n- **ASP.NET Core Module in-proc hosting** - 6x the throughput on IIS! Better startup error handling (https://github.com/aspnet/AspNetCoreModule/issues/265)\r\n- **Razor pages improvements** - Support for areas, ~/Pages/Shared (https://github.com/aspnet/Mvc/issues/6926, https://github.com/aspnet/Mvc/issues/6604)\r\n- **MVC functional test fixture** - Easily test your MVC apps end-to-end (https://github.com/aspnet/Mvc/issues/6233)\r\n- **Build-time Razor** - Compile Razor pages and views as part of your build, improved startup performance (https://github.com/aspnet/Razor/issues/1809)\r\n- **UI as a library** - Package Razor pages and views as reusable libraries (https://github.com/aspnet/Razor/issues/1809)\r\n- **Identity UI package and scaffolder** - Add identity to any application (https://github.com/aspnet/Home/issues/2311)\r\n- **WebHooks** - Handle WebHook notifications from ASP.NET Core apps (https://github.com/aspnet/WebHooks/issues/5)\r\n\r\nFor more details on each of these features see the [ASP.NET Core 2.1 roadmap](https://blogs.msdn.microsoft.com/webdev/2018/02/02/asp-net-core-2-1-roadmap/) post on the ASP.NET team blog.\r\n\r\nDiscussion for this issue is at aspnet/Home#2846","Url":"https://github.com/aspnet/Announcements/issues/288","RelatedDescription":"Open issue \"ASP.NET Core 2.1 high-level planning\" (#288)"},{"Id":"292632569","IsPullRequest":false,"CreatedAt":"2018-01-30T02:33:11","Actor":"DamianEdwards","Number":"287","RawContent":null,"Title":"Introduction of new meta-package \"Microsoft.AspNetCore.App\"","State":"open","Body":"## Overview\r\nASP.NET Core 2.1 will introduce a new meta-package for use by applications: *Microsoft.AspNetCore.App*. Additionally, new projects created that target 2.1 will use this meta-package by default, rather than the existing meta-package *Microsoft.AspNetCore.All*.\r\n\r\nThe new meta-package differs from the existing meta-package in that it reduces the number of dependencies of packages not owned or supported by the ASP.NET or .NET teams to just those deemed necessary to ensure the major frameworks features function. The full list of packages being removed compared to *Microsoft.AspNetCore.All* can be seen below.\r\n\r\nThe existing *Microsoft.AspNetCore.All* meta-package will continue to be made available throughout the 2.x lifecycle, but we recommend customers move to the new *Microsoft.AspNetCore.App* meta-pacakge and then add individual references to any of the removed packages if their app requires it.\r\n\r\n## Package references not in \"Microsoft.AspNetCore.App\", compared to \"Microsoft.AspNetCore.All\"\r\nThe following packages are direct dependencies of *Microsoft.AspNetCore.All* but **not** of *Microsoft.AspNetCore.App*. Note that any dependencies of these packages that otherwise aren't dependencies of *Microsoft.AspNetCore.App* will now **not** be included implicitly, e.g. *StackExchange.Redis* as a dependency of *Microsoft.Extensions.Caching.Redis*, *Microsoft.ApplicationInsights* as a dependency of *Microsoft.AspNetCore.ApplicationInsights.HostingStartup*:\r\n- Microsoft.Data.Sqlite\r\n- Microsoft.Data.Sqlite.Core\r\n- Microsoft.EntityFrameworkCore.Sqlite\r\n- Microsoft.EntityFrameworkCore.Sqlite.Core\r\n- Microsoft.Extensions.Caching.Redis\r\n- Microsoft.AspNetCore.DataProtection.AzureStorage\r\n- Microsoft.Extensions.Configuration.AzureKeyVault\r\n- Microsoft.AspNetCore.DataProtection.AzureKeyVault\r\n- Microsoft.AspNetCore.Identity.Service.AzureKeyVault\r\n- Microsoft.AspNetCore.AzureKeyVault.HostingStartup\r\n- Microsoft.AspNetCore.ApplicationInsights.HostingStartup\r\n\r\nWhen moving from *Microsoft.AspNetCore.All* to *Microsoft.AspNetCore.App*, if your application uses any APIs from the above packages, or packages brought in by those packages, you'll now need to add references to those packages in your project manually.\r\n\r\nDiscussion for this issue at https://github.com/aspnet/MetaPackages/issues/255","Url":"https://github.com/aspnet/Announcements/issues/287","RelatedDescription":"Open issue \"Introduction of new meta-package \"Microsoft.AspNetCore.App\"\" (#287)"}],"ResultType":"GitHubIssue"},"Announcements":{"Issues":[{"Id":"359136062","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:10","Actor":"blowdart","Number":"316","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when ASP.NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an ASP.NET Core web application. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing a specially crafted web requests to the ASP.NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles parsing web requests.\r\n\r\nThe underlying problem exists in the `System.IO.Pipelines` package. If you have other software which uses this package please follow the instructions in the [.NET Core bulletin](https://github.com/dotnet/announcements/issues/83).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2914\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses either of the packages with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.All | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nASP.NET Core 2.1 is distributed as part of the .NET Core runtime. To check the current installed runtimes open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed you will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf the highest .NET Core SDK version is less that 2.1.402 or the highest `Microsoft.AspNetCore.App` runtime version is less that 2.1.4 you are vulnerable to this issue. You may not see any SDK versions if you have only installed the runtime.\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.402 on your development machines and build servers, and the .NET Core Runtime 2.1.4 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n#### Applications not using Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/aspnet/Announcements/issues/316","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\" (#316)"},{"Id":"353145143","IsPullRequest":false,"CreatedAt":"2018-08-22T22:11:39","Actor":"pranavkm","Number":"315","RawContent":null,"Title":"3.0: Deprecating MvcPrecompilation tool ","State":"open","Body":"In ASP.NET Core 1.1, we introduced the `Microsoft.AspNetCore.Mvc.Razor.ViewCompilation` (MVC precompilation tool) package that added support for publish time compilation of Razor files (.cshtml files). Starting in ASP.NET Core 2.1, we introduced the [Razor SDK](https://docs.microsoft.com/en-us/aspnet/core/razor-pages/sdk?view=aspnetcore-2.1) that expanded on the features of the precompilation tool by adding support for build and publish time of Razor files. The SDK allows for verifying the correctness of cshtml files at build time while also improving on startup time for applications. The Razor SDK is on by default and no gesture is required to start using it.\r\n\r\nIn 3.0, we plan to remove the earlier MVC precompilation tool. Earlier versions of the package will continue receiving important bug and security fixes as part of our patch release. \r\n\r\nFor users of ASP.NET Core 2.1 or later, we recommend migrating to the Razor SDK if you haven't already. If you're currently using the precompilation tool and are unable to migrate to the Razor SDK due to bugs or missing features, please file an issue at https://github.com/aspnet/Razor/issues.\r\n\r\nPlease use https://github.com/aspnet/Mvc/issues/8313 for discussions.","Url":"https://github.com/aspnet/Announcements/issues/315","RelatedDescription":"Open issue \"3.0: Deprecating MvcPrecompilation tool \" (#315)"},{"Id":"349340221","IsPullRequest":false,"CreatedAt":"2018-08-10T00:56:39","Actor":"natemcmaster","Number":"314","RawContent":null,"Title":"3.0: deprecating Microsoft.AspNetCore.All","State":"open","Body":"Earlier this year, we announced the Microsoft.AspNetCore.App metapackage (see https://github.com/aspnet/Announcements/issues/287). That announcement said:\r\n\r\n> The existing Microsoft.AspNetCore.All meta-package will continue to be made available throughout the 2.x lifecycle, but **we recommend customers move to the new Microsoft.AspNetCore.App meta-package** and then add individual references to any of the removed packages if their app requires it.\r\n\r\nSee [our documentation for details](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/metapackage?view=aspnetcore-2.1#migrating-from-microsoftaspnetcoreall-to-microsoftaspnetcoreapp) on how to migrate from Microsoft.AspNetCore.All to .App.\r\n\r\nWe have begun working on ASP.NET Core 3.0, and as a part of that, we will stop producing the Microsoft.AspNetCore.All metapackage and the matching Microsoft.AspNetCore.All shared framework in the 3.0 nightly builds.\r\n\r\nThis package will still be available in ASP.NET Core 2.2 and will continue to receive servicing updates in ASP.NET Core 2.1.\r\n\r\nPlease use https://github.com/aspnet/Home/issues/3418 for questions or comments.\r\n","Url":"https://github.com/aspnet/Announcements/issues/314","RelatedDescription":"Open issue \"3.0: deprecating Microsoft.AspNetCore.All\" (#314)"},{"Id":"346800428","IsPullRequest":false,"CreatedAt":"2018-08-01T23:00:38","Actor":"pranavkm","Number":"313","RawContent":null,"Title":"CorsMiddleware must be explicitly configured to specify all allowed headers","State":"open","Body":"In versions of ASP.NET Core 2.1.0 and earlier, the CorsMiddleware always allowed certain headers in the `Access-Control-Request-Headers` to be sent regardless of the values configured in `CorsPolicy.Headers`. This list of headers includes:\r\n\r\n* `Accept`\r\n* `Accept-Language`\r\n* `Content-Language`\r\n* `Origin`\r\n\r\nFor instance, consider an application configured as follows:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\"));\r\n```\r\n\r\nIn 2.1 and earlier, the CORS middleware would respond successfully to a preflight request with the following request header:\r\n\r\n`Access-Control-Request-Headers: Cache-Control, Content-Language`\r\n\r\nFor 2.2.0, the CORS middleware would no longer treat this as a policy match. The server must explicitly configure policy to allow the `Content-Language` header:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\", \"Content-Language\"));\r\n```\r\n\r\nFor more information on CORS, please refer to [the documentation](https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1).","Url":"https://github.com/aspnet/Announcements/issues/313","RelatedDescription":"Open issue \"CorsMiddleware must be explicitly configured to specify all allowed headers\" (#313)"},{"Id":"345927303","IsPullRequest":false,"CreatedAt":"2018-07-30T20:44:14","Actor":"danroth27","Number":"312","RawContent":null,"Title":"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0","State":"open","Body":"As part of the 2.1.0 release, ASP.NET Core added support for build time compilation of cshtml files (Razor Views & Razor Pages). This feature is on by default and allows build time verification of the correctness of Razor files, and also faster startup performance. Additionally, MVC watches for changes to cshtml files and seamlessly updates build-time compiled views with runtime compiled views. This allows editing cshtml files and then refreshing the browser to see the changes.\r\n\r\nMVC uses the app's compilation context, details about the references and settings that were used to compile the source code (.cs) in the app, to compile views at runtime. In addition to the compilation context, MVC exposes options such as [RazorViewEngineOptions.CompilationCallback](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.compilationcallback?view=aspnetcore-2.1) and [AdditionalCompilationReferences](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.additionalcompilationreferences?view=aspnetcore-2.1) that allow configuring compilation specifically for runtime. \r\n\r\nRuntime specific customizations are unavailable at build time and consequently the two outputs could be different.\r\n\r\nTo address this inconsistency, we plan on removing APIs in MVC that change or modify runtime compilation. For 2.2.0, we're marking these APIs obsolete with the intent to remove them in 3.0.0. This is the list of affected APIs:\r\n\r\n* Properties on `Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions`\r\n    * `AdditionalCompilationReferences`\r\n    * `CompilationCallback`\r\n\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeature`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorReferenceManager`\r\n\r\nNo changes are required to your application if it does not use these APIs.\r\n\r\nApps using these APIs to add assembly references to the compilation context for runtime compilation should instead use [`ApplicationPartManager.AddApplicationPart`](https://docs.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.mvccoremvccorebuilderextensions.addapplicationpart) to add application parts for each assembly reference, or switch to a built-time compilation model (see [Create reusable UI using the Razor Class Library project](https://docs.microsoft.com/aspnet/core/razor-pages/ui-class)).\r\n\r\nOther scenarios blocked by the removal of these APIs and not covered by alternative MVC features should raised in the linked discussion issue.\r\n\r\nFor discussion, use https://github.com/aspnet/Mvc/issues/8177","Url":"https://github.com/aspnet/Announcements/issues/312","RelatedDescription":"Open issue \"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0\" (#312)"},{"Id":"339929062","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:26","Actor":"blowdart","Number":"311","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0 and 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in ASP.NET Core when a malformed request is terminated. An attacker who successfully exploited this vulnerability could cause a denial of service attack.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles such requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2708\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application is behind a forwarding proxy such is Internet Information Server, Azure Application Gateway or nginx you will not be affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Server.Kestrel.Core with a vulnerable version listed below and not hosted behind a forwarding proxy.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 2.0.4 <br /> 2.1.2\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8 <br /> 2.1.0, 2.1.1  | 2.0.9 <br /> 2.1.2\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1 | 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Server.Kestrel.Core` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET 2.0 & 2.1 not targeting the meta-packages\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects.\r\n\r\nThe `project.assets.json`files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.8\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.All` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.9\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) .\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Server.Kestrel.Core/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Server.Kestrel.Core`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.34 />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.1 (July 10, 2018): Added .App meta-package details.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/311","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\" (#311)"},{"Id":"339928979","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:13","Actor":"blowdart","Number":"310","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass in ASP.NET Core when the number of incorrect login attempts is not validated. An attacker who successfully exploited this vulnerability could try an infinite number of authentication attempts.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core validates the number of incorrect login attempts.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Identity/issues/1870\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application does not use ASP.NET Core's implementation of multi-factor authentication you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Identity with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Identity | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5 <br /> 1.1.0, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5 <br /> 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 1.0.6 <br /> 1.1.6 <br /> 2.0.4 <br /> 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Identity` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET Core 1.0, 1.1 or 2.0 not targeting the metapackage.\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Identity` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Identity` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"Microsoft.AspNetCore.Identity\" : \"1.0.5\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `Microsoft.AspNetCore.Identity`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `Microsoft.AspNetCore.Identity` version 1.0.5.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Identity` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Identity \": \"1.0.6\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Identity/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Identity`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Identity` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Identity/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Identity`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Identity` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Identity` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Identity\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Martin Knafve](https://www.linkedin.com/in/martin-knafve-99187a2/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8171](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8171)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/310","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\" (#310)"},{"Id":"336797507","IsPullRequest":false,"CreatedAt":"2018-06-28T22:10:48","Actor":"natemcmaster","Number":"309","RawContent":null,"Title":"For contributors: branch name changes in ASP.NET Core repos","State":"open","Body":"Over the coming weeks, we are planning on making the following changes to most projects in https://github.com/aspnet that are used to build ASP.NET Core.\r\n\r\n* We will create a branch named \"release/2.2\". Work on this branch will be part of [ASP.NET Core 2.2](https://github.com/aspnet/Announcements/issues/307)\r\n* We will rename the \"dev\" branch to \"master\". This is part of aligning aspnet repos with the branch naming used by other Microsoft teams.\r\n* We will change the default branch to \"master\" on GitHub.\r\n* Update the product branding on \"master\" to 3.0. Work on this branch will eventually become part of [ASP.NET Core 3.0](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/)\r\n\r\nTo help us prevent too much drift between release/2.2 and master, we will enable some automation to merge all changes from release/2.2 into master (3.0).\r\n\r\n## FAQ\r\nThis change may affect the way you help contribute to ASP.NET Core. As a result of this change and dicussion within our team, we've anticipated at least two questions you may have.\r\n\r\n#### Which branch should I use for my work?\r\n<img src=\"https://user-images.githubusercontent.com/2696087/42063035-b5fc9e42-7ae4-11e8-9916-a708fcc8e0e6.png\" width=\"500\" />\r\n\r\n#### I opened my PR to the wrong branch. What should I do?\r\n \r\nYou can edit a PR’s target branch.\r\n\r\n<img width=\"700\" alt=\"one\" src=\"https://user-images.githubusercontent.com/2696087/42063074-eb3060a8-7ae4-11e8-8ec2-d569f8e07f78.png\">\r\n<img width=\"700\" alt=\"two\" src=\"https://user-images.githubusercontent.com/2696087/42063083-f8a9564a-7ae4-11e8-91f0-f57e039085f8.png\">\r\n\r\n\r\n## Questions? Comments?\r\n\r\nThis issue is locked to reduce noise on this repo. Please use https://github.com/aspnet/Home/issues/3278 for questions and comments.\r\n\r\nThanks,\r\nNate","Url":"https://github.com/aspnet/Announcements/issues/309","RelatedDescription":"Open issue \"For contributors: branch name changes in ASP.NET Core repos\" (#309)"},{"Id":"335579239","IsPullRequest":false,"CreatedAt":"2018-06-25T21:44:22","Actor":"divega","Number":"308","RawContent":null,"Title":"EF Core 2.2 Roadmap","State":"open","Body":"## EF Core 2.2 is a small release\r\n\r\nUnlike EF Core 2.1, the 2.2 release will include a small number of new features. We are concentrating most of our efforts to add new functionality on the 3.0 release. Still, you can expect 2.2 to include lots of bugs fixes, community contributions and small improvements.\r\n\r\nYou can access the list of issues currently assigned to the 2.2 milestone using [this query](https://github.com/aspnet/EntityFrameworkCore/issues?q=is%3Aopen+is%3Aissue+milestone%3A2.2.0+sort%3Areactions-%2B1-desc) on our issue tracking system.  \r\n\r\n## Schedule\r\nThe schedule of EF Core 2.2 will align with the schedule of .NET Core and ASP.NET Core 2.2. See [the ASP.NET Core 2.2 Roadmap announcement](https://github.com/aspnet/Announcements/issues/307).\r\n\r\nOur current plan is to have three previews before we ship RTM near the end of 2018:\r\n\r\n- August – Preview 1\r\n- September - Preview 2\r\n- October - Preview 3\r\n- Before end-of-year – RTM\r\n\r\n As usual, this post reflects our current plan, but things may change as we make progress. \r\n\r\n## New features\r\n\r\n### Reverse engineering of database views into query types\r\n\r\nIn EF Core 2.1 we added query types, which allow mapping .NET objects to views and tables without keys. In 2.2, we plan to leverage this new capability to automatically map existing database views to query types. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/1679.\r\n\r\n###  Support for collections of owned entities\r\n\r\nIn EF Core 2.0 we added the concept of owned entity types, which allows modeling ownership relationship that are common between entities that are part of the same document in document-oriented databases or the same aggregate if you use Domain-Driven Design concepts in your model.\r\n\r\nUntil now, we only support reference navigation properties to owned entities. In EF Core 2.2, we plan to enhance this functionality to map collection navigation properties to owned entities. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/8172.\r\n\r\n## Other work\r\n\r\nThere are some additional work items that are not strictly EF Core 2.2 features, but we still track as part of the 2.2 milestone because we are doing the work in the same timeframe:\r\n\r\n### Cosmos DB provider\r\n\r\nA lot of our efforts are going into productizing an EF Core provider for the SQL API in Cosmos DB.\r\nWe have already created a prototype, which we have shown in demos such as in this [this EF Core 2.1 talk](https://www.youtube.com/watch?v=k55kDH_ixrQ) we did at the Microsoft Build conference.\r\n\r\nDue to competing priorities, releasing a preview of this provider has taken more than what we originally planned, but we are working on it now, and the current plan is to release a stable version by the end of this calendar year.\r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/12086. \r\n\r\n### Preview of spatial support for SQL Server\r\n\r\nWe are also focusing on adding spatial support as an extension to the SQL Server provider for EF Core.\r\nNote that the PostgreSQL provider (Npgsql) already added support in EF Core 2.1. Beside implementing this functionality for SQL Server, we are working closely with the developers of Npgsql to try to achieve a consistent and hopefully improved experience across providers.\r\n\r\nNote that we aren't committing to having a final version of the spatial support for the end of the current calendar year. But we are actively working on this now, and as we make progress, we should be able to provide a more precise estimate.   \r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/1100.\r\n\r\n### Improve test coverage for LINQ and reduce query regressions in future releases\r\n\r\nIn the last few releases, we have seen that when we commit improvements to our LINQ implementation, we often break queries that were previously working. The main challenge is that LINQ defines a huge space of possible queries to test, and it is very complex to measure what level of test coverage we have, even for a specific query operator. In the 2.2 timeframe, we will be investing on improving test coverage for this huge space. We also plan to experiment with new approaches to add appropriate coverage, and to reduce the likelihood of introducing regressions in future releases.\r\n\r\nYou can track our progress on this at https://github.com/aspnet/EntityFrameworkCore/issues/12046. \r\n\r\nFor discussion on this roadmap, please use https://github.com/aspnet/EntityFrameworkCore/issues/12465. ","Url":"https://github.com/aspnet/Announcements/issues/308","RelatedDescription":"Open issue \"EF Core 2.2 Roadmap\" (#308)"},{"Id":"335571873","IsPullRequest":false,"CreatedAt":"2018-06-25T21:19:36","Actor":"glennc","Number":"307","RawContent":null,"Title":"ASP.NET Core 2.2 Roadmap","State":"open","Body":"We have grouped the ASP.NET Core 2.2 release into a few themes:\r\n\r\n- APIs & Services\r\n- Server improvements\r\n- SignalR\r\n\r\n## Rough Schedule\r\nWe are currently planning to have 3 previews before RTM:\r\n - August – Preview 1\r\n - September - Preview 2\r\n - October - Preview 3\r\n - Before End-of-year – RTM\r\n\r\nAs with our previous roadmap posts this is what we intend right now, but it's subject to change as we continue development.\r\n\r\n## APIs and Services\r\n\r\nThe 'north star' for this version is to generate better metadata about your app and use that data to make your dev experience better and more productive. This is the main focus for 2.2.\r\n\r\n### API Controller conventions\r\nIn 2.1 we added controller specific conventions that make Web API development more convenient with the [ApiController attribute](https://docs.microsoft.com/en-us/aspnet/core/web-api/index?view=aspnetcore-2.1#annotate-class-with-apicontrollerattribute). In 2.2 we want to expand on this concept to provide metadata for API Explorer and provide a better end-to-end API documentation experience.\r\n\r\nWe want to make it possible for all MVC Core applications to have a good Swagger/OpenAPI definition by default. By following common patterns, your actions will produce rich metadata without falling into 'attribute soup' where you list every possible status code that every action in your app could return. We will include a default set of conventions that match what ASP.NET Core scaffolding generations. It will also be possible to write and share your own conventions to reflect your desired contracts. \r\n\r\nWe will include a set of analyzers that will help you find cases where code that doesn't match the API Explorer metadata, and a code-fix that provides options to explicitly specify the response type metadata, create a new convention with a different pattern, or just let you write code to satisfy the convention.\r\n\r\nAs a concrete example, you could write a convention that says \"every action method that starts with 'Create' will return an HTTP 201\". If you wrote the following code, then you would receive a warning.\r\n\r\n```csharp\r\n[HttpPost(\"/orders\")]\r\npublic ActionResult<Order> CreateOrder(OrderData orderData)\r\n{\r\n    ....\r\n    return Ok(new Order() {...});\r\n}\r\n```\r\n\r\nThis code doesn't match your Swagger/OpenAPI metadata (from the convention) - which says that this action returns a 201. Once you see this, you could `ctrl + .` to add the attributes for what we do know about this method, opting out of conventions, or you could change the code.\r\n\r\nThe analyzer will also be able to 'check your work' if you are being explicit about status codes and results using the existing attributes - it does not require you to use the conventions. Details for how this will all work can be discussed here: https://github.com/aspnet/Mvc/issues/7802\r\n\r\nLet's look at a more fleshed-out out example. The following code snippet is what is required to generate a reasonable Open API document for an action method that will get an item by ID or return a 404:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    [ProducesResponseType((int)HttpStatusCode.NotFound)]\r\n    [ProducesResponseType(typeof(CatalogItem),(int)HttpStatusCode.OK)]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\nIn 2.2 with the default conventions the following code should generate the same Open API document that the above code sample does, and this shipped analyzers will give you hints when you do something that doesn't match so you know to go and add attributes or change the conventions:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n### OpenAPI generation\r\nWith the conventions described above it will be possible for code that uses the API Explorer to generate Open API documents to be better by default, since the code you write will either follow the conventions or have attributes allowing generators to create better documents.\r\n\r\n### Dispatcher\r\nIn 2.2 we will introduce a new routing system that will expand the set of scenarios where routing is useful – tentatively called Dispatcher. \r\n\r\nThe current routing system was designed to support MVC’s historical scenarios without much thought to how routing and the composable middleware pipeline will work together. The Dispatcher is designed to run the URL matching step very early in the pipeline so that middleware can see the Endpoint that was selected as well as metadata that is associated with that endpoint. Like existing routing, the dispatcher will branch and call the actual endpoint at the end of the pipeline.\r\n\r\nA concrete example of how this helps us is with CORS. Today there is both a CORS middleware AND a CORS feature of MVC (https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1). Because routing information is deeply integrated with MVC we can't apply CORS policies that only apply to specific controllers until after we know what controller has been selected. However, if you also want CORS policies to apply to other parts of your pipeline then you need the middleware. This has been a source of confusion for many and we can simplify it if all of the middleware pipeline can have as much information about routing as MVC does today.\r\n\r\nWe’re also using this opportunity to make improvements to the performance of routing and dispatching for MVC and other scenarios.\r\n\r\n### HTTP API REPL tooling\r\nToday there are no tools built into Visual Studio or the dotnet CLI to help you execute HTTP verbs against your API. We have a great language, debugger, and framework but they are somewhat limited when it's difficult to send a POST to my app to see what happens. In 2.2 we want to build a CLI experience for exploring HTTP APIs to imcrease your API inner loop productivity. The CLI builds on all the features we've talked about above as some of its advanced features, like listing all routes in your app, are enabled by consuming the metadata we have about your app via Open API documents. That means the CLI should be useful for executing any HTTP verb, but really shines when you feed it more data like Open API docs. We intend to start by shipping this as a standalone global tool while we explore its feature set and potential.\r\n\r\nYou can see a demo and description of this in Scott Hunter and Scott Hanselman's BUILD talk here: https://youtu.be/KAIJ3ezQb3c?t=18m\r\n\r\n### API client generation (C# & TypeScript)\r\nOnce you have an API with rich metadata and done exploring and testing it, then you need to go and write some client code to call and make use of your API. We are going to build an experience for generating this code based on the same data and documentation described above. We envision a few pieces for this story, one part is a dotnet tool that can generate code from an Open API document, the other is MSBuild SDK work to allow a `ServiceReference` to another project in a solution. That reference will cause build time client code generation to happen via the tool that can generate code. We expect this to work in a similar way to the EF Core tooling experience, where your application is built and most of your startup code executed but instead of running it we use the data we have about your code to generate a client.\r\n\r\n### Authorization Server\r\nOne of the largest gaps we’ve had has been around authorization for applications beyond a simple forms based login. We plan to fill that gap with a simple to use OpenID Connect based authorization server, which will allow your ASP.NET application to act as an authentication point for your projects, be they web site to API, SPA to API, native application to an API or, for distributed applications API to API. As we are concentrating on first party applications we can make the code you need to plumb in trivial, getting as close to zero configuration as you can,  we’re not aiming to replace the excellent third-party solutions out there which enable richer scenarios like third-party applications or which provide a flexibility in configuration and authentication flow.\r\n\r\n## Server Improvements\r\n\r\n### Health Checks\r\nThis feature is a way to trivially setup an endpoint in your application that can be used to check the health of your application, potentially taking into account things like memory consumption or database availability as well as just \"can I accept a HTTP request\".\r\n\r\n### HTTP/2 in Kestrel & HttpClient\r\nThe title says it all in this case. HTTP/2 support for all. We started this work some time ago, and have had the protocol mostly implemented for a while but not compiled into the product since it wasn't ready. This version we will finish that work and implement the missing features.\r\n\r\n### In-proc ANCM\r\nRunning ASP.NET Core applications in-process in IIS, giving a significant performance boost.\r\n\r\n## SignalR\r\n\r\n### Add Java & C++ clients\r\nAllow customers using Java or C++ to connect to SignalR servers, and the [Azure SignalR Service](https://azure.microsoft.com/en-us/blog/azure-signalr-service-a-fully-managed-service-to-add-real-time-functionality/).\r\n\r\n## Other\r\nAs with all releases there is a large tail of bug fixes, performance improvements, small features, and community PRs that we will also work on. You can see the full list of work by browsing the 2.2 milestones on the various [repositories](https://github.com/aspnet/).\r\n\r\nFor discussion on the roadmap in general, use https://github.com/aspnet/Home/issues/3265","Url":"https://github.com/aspnet/Announcements/issues/307","RelatedDescription":"Open issue \"ASP.NET Core 2.2 Roadmap\" (#307)"},{"Id":"333804954","IsPullRequest":false,"CreatedAt":"2018-06-19T19:21:13","Actor":"anurse","Number":"306","RawContent":null,"Title":"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR Client from UWP applications where the minimum version is set to \"Windows 10, version 1803\". However, these fixes also require some additional dependencies.\r\n\r\n**NOTE**: UWP Applcations with a minimum version set **below** \"Windows 10, version 1803\" (for example, if the minimum version is set to \"Fall Creators Update\") are **not** affected by this issue and **do not require** these steps.\r\n\r\nIn order to use the SignalR Client in UWP applications where the minimum version is set to \"Windows 10, version 1803\" you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Add the following **additional** package references to your project. These are referenced transitively by the SignalR Client, but newer versions are required to resolve this issue. We are planning to improve this in a future patch.\r\n    * `System.Threading.Tasks.Extensions` version `4.5.1`\r\n    * `System.Runtime.CompilerServices.Unsafe` version `4.5.1`\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/2406","Url":"https://github.com/aspnet/Announcements/issues/306","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803\" (#306)"},{"Id":"333802959","IsPullRequest":false,"CreatedAt":"2018-06-19T19:15:05","Actor":"anurse","Number":"305","RawContent":null,"Title":"SignalR Client 2.1.1 in Xamarin","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR **Client** from Xamarin. However, these fixes also require an updated build of Xamarin.iOS and Xamarin.Android, as well as some additional dependencies.\r\n\r\nIn order to use the SignalR Client in Xamarin applications you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Upgrade Xamarin to the appropriate version:\r\n    * Xamarin.Android `8.4.0.1`\r\n    * Xamarin.iOS `11.14.0.4`\r\n    * These will be included in:\r\n      * Visual Studio 15.8 **Preview 3** (not released at the time of publishing, but coming soon)\r\n      * Visual Studio for Mac 7.6 **Preview 3** (not released at the time of publishing, but coming soon)\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/1886","Url":"https://github.com/aspnet/Announcements/issues/305","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in Xamarin\" (#305)"},{"Id":"329851587","IsPullRequest":false,"CreatedAt":"2018-06-06T13:30:30","Actor":"ToLearnMoe","Number":"304","RawContent":null,"Title":"怎么找工作啊","State":"closed","Body":"我学spirng的同学都上班两个月了我实习都没找到，学了给asp告诉我现在不能用了要什么点apsnet。你们行不行啊\r\n\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n\r\nThis repo is for team announcements only. See https://github.com/aspnet/announcements#announcements.\r\n\r\nTo file a bug or start a discussion, please find the appropriate repo in https://github.com/aspnet and create a new issue. \r\nFor general issue discussions please go to https://github.com/aspnet/Home/issues and create a new issue.\r\n","Url":"https://github.com/aspnet/Announcements/issues/304","RelatedDescription":"Closed issue \"怎么找工作啊\" (#304)"},{"Id":"329603099","IsPullRequest":false,"CreatedAt":"2018-06-05T20:11:55","Actor":"AngelosP","Number":"303","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"closed","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\r\n\r\nFor discussion, use https://github.com/aspnet/Tooling/issues/1075","Url":"https://github.com/aspnet/Announcements/issues/303","RelatedDescription":"Closed issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#303)"},{"Id":"327435771","IsPullRequest":false,"CreatedAt":"2018-05-29T18:26:40","Actor":"shirhatti","Number":"302","RawContent":null,"Title":"IIS in-process hosting moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving IIS in-process hosting out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will ship IIS in-process hosting as part of the ASP.NET Core 2.2 release.\r\n\r\n### Why?\r\n\r\nIIS in-process hosting  is a brand new server implementation and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/IISIntegration/issues/878","Url":"https://github.com/aspnet/Announcements/issues/302","RelatedDescription":"Open issue \"IIS in-process hosting moved out of ASP.NET Core 2.1\" (#302)"},{"Id":"322891671","IsPullRequest":false,"CreatedAt":"2018-05-14T16:32:50","Actor":"jkotalik","Number":"301","RawContent":null,"Title":"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available","State":"open","Body":"We have changed the behavior of the HttpsRedirectionMiddleware between 2.1.0-preview2 to 2.1.0-rc1. Instead of always redirecting a request to HTTPS, we will now not redirect to HTTPS if no port is available. The HTTPS port can be specified by setting ```HttpsRedirectionOptions.HttpsPort```, setting the ASPNETCORE_HTTPS_PORT environment variable, or by setting an HTTPS url in launchsettings.json.\r\n\r\nIf you want to continue keeping the original behavior the HttpsRedirectionMiddleware which redirects to port 443, you can set the ```HttpsRedirectionOptions.HttpsPort = 443```.\r\n \r\n---\r\n\r\n*Please use aspnet/BasicMiddleware#329 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/301","RelatedDescription":"Open issue \"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available\" (#301)"},{"Id":"321270218","IsPullRequest":false,"CreatedAt":"2018-05-08T17:07:04","Actor":"blowdart","Number":"300","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2553\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_","Url":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300)"},{"Id":"320441265","IsPullRequest":false,"CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Number":"299","RawContent":null,"Title":"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/WebHooks/issues/296","Url":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Open issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299)"},{"Id":"309862672","IsPullRequest":false,"CreatedAt":"2018-03-29T18:44:48","Actor":"glennc","Number":"298","RawContent":null,"Title":"Migrating from aspnetcore docker repos to dotnet","State":"open","Body":"Starting with .NET Core 2.1-preview2, we intend to migrate from using the microsoft/aspnetcore-build and microsoft/aspnetcore Docker repos to the microsoft/dotnet Docker repo.  We will continue to ship patches and security fixes for the existing aspnetcore images but any new images for 2.1 and higher will be pushed to microsoft/dotnet.\r\n\r\nDockerfiles using `microsoft/aspnetcore:<version>` should change to `microsoft/dotnet:<version>-aspnetcore-runtime`.\r\n\r\nDockerfiles using `microsoft/aspnetcore-build` that do not require Node should just change to `microsoft/dotnet:<version>-sdk`.\r\n\r\nDockerfiles using Node from the `microsoft/aspnetcore-build` image will either need to install Node into their own image or use mult-stage builds as described in the Dockerfile examples at the end of this announcement.\r\n\r\nThe `ASPNETCORE_URLS` env var that allows ASP.NET Core apps to accept traffic from outside the container will be set in all the `dotnet` images, which was a common early stumbling block for people getting started with ASP.NET Core and Docker. PR is [here](https://github.com/dotnet/dotnet-docker/pull/450)\r\n\r\n### Why the merge?\r\n\r\nFor some time we have been seeing people search for and find the `microsoft/dotnet` images and never realise that there are aspnetcore ones. This could be problematic in the past as the dotnet images were not optimised for ASP.NET Core, making things a little harder or slower. But with changes in the way ASP.NET Core works in 2.1 it was going to be much more impactful, in that ASP.NET Core applications were not likely to run on the base dotnet image. Given that we also thought it made more sense to have a single repository for all images, as ASP.NET is just part of .NET, we are taking this opportunity to remove the potential source of confusion and wasted time for our customers.\r\n\r\n### Why no Node?\r\nThere are two main reasons for this:\r\n\r\n  1. Multi-stage build now makes it easier to pull in the Node image for purely build concerns.\r\n  2. The ASP.NET Core templates no longer have a hard dependency on Node.\r\n\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n\r\n### Dockerfile examples\r\n\r\nIf you need Node then you will need to add it in your own Dockerfile, like this:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n#setup node\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\n# copy everything else and build\r\nCOPY . ./\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n#setup node, this is only needed if you use Node both at runtime and build time. Some people may only need the build part.\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\nCOPY --from=build-env /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nIf you only need Node at build then you may also be able to take advantage of multi-stage build like the following:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\nFROM node as clientBuild\r\n#Do npm restore and other Node stuff.\r\n\r\n#Merge the contents of your .NET build env and your clientBuild and publish.\r\nFROM build-env as publish\r\n# copy everything else and build\r\nCOPY --from=clientBuild . .\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n\r\nCOPY --from=publish /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n","Url":"https://github.com/aspnet/Announcements/issues/298","RelatedDescription":"Open issue \"Migrating from aspnetcore docker repos to dotnet\" (#298)"},{"Id":"305936138","IsPullRequest":false,"CreatedAt":"2018-03-16T14:09:54","Actor":"mnmr","Number":"297","RawContent":null,"Title":"Model binding accesses read-only properties in post-back","State":"closed","Body":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355.","Url":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297)"},{"Id":"305310538","IsPullRequest":false,"CreatedAt":"2018-03-14T20:08:36","Actor":"halter73","Number":"296","RawContent":null,"Title":"Managed sockets will replace libuv as Kestrel's default transport","State":"open","Body":"Starting in ASP.NET Core 2.1.0, managed sockets will be replacing libuv as Kestrel's default transport.\r\n\r\nThis change should only break applications that bind to non-TCP endpoints or explicitly call `IWebHostBuilder.UseLibuv()` and reference the libuv transport transitively through the Microsoft.AspNetCore.App and/or Microsoft.AspNetCore.Server.Kestrel NuGet packages.\r\n\r\nTo fix the break simply add a reference to Microsoft.AspNetCore.All and/or Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.\r\n\r\nWhile switching to the managed socket transport should be seamless<sup>1</sup>, if you want to continue using the libuv transport in 2.1.0 you will need to explicitly call `UseLibuv()` and reference the libuv transport either directly or through the \"All\" metapackage.\r\n\r\n<sup>1</sup> Unless you are trying to bind to a Unix domain socket or use systemd socket activation. As of 2.1, only the libuv transport supports binding to these kinds of endpoints.\r\n\r\n---\r\n\r\n*Please use aspnet/KestrelHttpServer#2360 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/296","RelatedDescription":"Open issue \"Managed sockets will replace libuv as Kestrel's default transport\" (#296)"},{"Id":"304854672","IsPullRequest":false,"CreatedAt":"2018-03-13T17:07:23","Actor":"blowdart","Number":"295","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\r\n\r\n## Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core versions 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where an elevation of privilege vulnerability exists when a ASP.NET Core web application fails to validate web requests correctly.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Home/issues/2954\r\n\r\n### Mitigation factors\r\n\r\nSites are not vulnerable to this elevation of privilege when:\r\n\r\n* The site is hosted behind a proxy, such as Internet Information Services (IIS), NGINX, or Apache, where:\r\n\r\n  * The proxy validates the host header, and\r\n  * The proxy is configured to listen on fully qualified domain names or\r\n  * The proxy is configured with a wildcard subdomain where the root domain is fully controlled by the site owner.\r\n\r\nFor example, if IIS is configured to respond to requests for `contoso.com` or `*.contoso.com` hosts, the application is protected.\r\n\r\nIf IIS is configured to respond to any request from any host, the application is vulnerable.\r\n\r\nKestrel does not have the capability to validate host headers and is vulnerable if not placed behind a proxy that performs the host header validation.\r\n\r\nApps hosted in Azure Web Apps are not susceptible to this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core hosted application which is directly exposed to the internet, or hosted behind a proxy which does not validate or restict host headers to known good values.\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.HttpOverrides | 2.0.0, 2.0.1 |  2.0.2 and later\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1 |  2.0.2 and later\r\n\r\n*No patches are available for ASP.NET Core 1.0.x or ASP.NET Core 1.1.x. Microsoft requires that you place your 1.x ASP.NET Core application behind a proxy.\r\nYou must address the configuration of your proxy to protect your application. If you're not running ASP.NET Core 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0.\r\nand add the host validating middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/.*\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected?\r\n\r\nReview the server and proxy configuration [instructions](#configuration) below to see if your system is configured correctly, and adjust the configuration if necessary.\r\n\r\n### How do I fix the issue?\r\n\r\nYou must address the [configuration](#configuration) of your server or proxy to protect your application to limit requests to known hosts.\r\n\r\nIf you're not running Kestrel 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0 and follow the 2.0 instructions below.\r\n\r\nASP.NET Core 2.0.x applications must [update your code](#app-update) to fully protect your application.\r\n\r\n#### <a name=\"configuration\"></a> Server and Proxy configuration\r\n\r\nYou must examine your externally facing server or proxy configuration and ensure it requires host headers with fully qualified domain names, or known sub-domains if you are using sub-domain wild cards.\r\n\r\n##### ASP.NET Core applications behind [IIS](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/)\r\n\r\nTo configure IIS to only respond to know hosts:\r\n\r\n* Open IIS Manager.\r\n* Expand the **Sites** node for the machine you want to configure.\r\n* Select the site by clicking on the site.\r\n* In the **Actions** list on the right-hand side of IIS Manager, click **Bindings**.\r\n* Edit any bindings that do not have a host name to specify one. Do not use a `*` wildcard unless it's against a domain under your control. For example, `*.contoso.com` is safe, `*.com` is not.\r\n\r\n##### ASP.NET Core applications running publicly on [Kestrel](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel)\r\n\r\nKestrel does not have the capability to validate host headers. It must either be placed behind a proxy that performs the host header validation or the validation must be performed within the application by adding  host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/. You must also [update your dependencies](#app-update) to fully protect your application.\r\n\r\n##### ASP.NET Core applications running on [HTTP.SYS](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys)\r\n\r\nTo configure URL prefixes and ports, you can use the `UseUrls` extension method, the `urls` command-line argument, the ASPNETCORE_URLS environment variable, or the `UrlPrefixes` property on [HttpSysOptions](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.server.httpsys.httpsysoptions). The following code example uses `UrlPrefixes`.\r\n\r\n```c#\r\npublic static IWebHost BuildWebHost(string[] args) =>\r\n    WebHost.CreateDefaultBuilder(args)\r\n        .UseStartup<Startup>()\r\n        .UseHttpSys(options =>\r\n        {\r\n            // The following options are set to default values.\r\n            options.Authentication.Schemes = AuthenticationSchemes.None;\r\n            options.Authentication.AllowAnonymous = true;\r\n            options.MaxConnections = null;\r\n            options.MaxRequestBodySize = 30000000;\r\n            options.UrlPrefixes.Add(\"http://localhost:5000\");\r\n        })\r\n        .Build();\r\n```\r\n\r\n##### ASP.NET Core applications behind [NGINX](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx)\r\n\r\nTo configure NGINX as a reverse proxy to forward requests to your ASP.NET Core app, replace the contents */etc/nginx/sites-available/default* with the following:\r\n\r\n```NGINX\r\nserver {\r\n    listen        80;\r\n    server_name   example.com *.example.com;\r\n    location / {\r\n        proxy_pass         http://localhost:5000;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header   Upgrade $http_upgrade;\r\n        proxy_set_header   Connection keep-alive;\r\n        proxy_set_header   Host $host;\r\n        proxy_cache_bypass $http_upgrade;\r\n    }\r\n}\r\n```\r\n\r\nNote that with NGINX, when there is no match for `server_name`, NGINX will pick the default server. If no default server has been defined, the first server in the conf file is the default server. Best practice is to add a specific default server which returns a status code of 444 in the conf file. An example default server configuration would be as follows:\r\n\r\n```NGINX\r\nserver {\r\n    listen   80 default_server;\r\n    # listen [::]:80 default_server deferred;\r\n    return   444;\r\n}\r\n```\r\n\r\nWith the preceding configuration file and default server, NGINX accepts public traffic on port 80 with host header `example.com` or `*.example.com`. Requests not matching these hosts won't get forwarded to Kestrel. NGINX forwards the matching requests to Kestrel at `http://localhost:5000`. See [How nginx processes a request](https://nginx.org/docs/http/request_processing.html) for more information.\r\n\r\nOnce the NGINX configuration is established, run `sudo nginx -t` to verify the syntax of the configuration files. If the configuration file test is successful, force NGINX to pick up the changes by running `sudo nginx -s reload`.\r\n\r\n##### ASP.NET Core applications behind [Apache](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-apache)\r\n\r\nConfiguration files for Apache are located within the `/etc/httpd/conf.d/` directory. Any file with the `*.conf*` extension:\r\n\r\n* Is processed in alphabetical order, and\r\n* The module configuration files in `/etc/httpd/conf.modules.d/` are processed. The module configuration files in `/etc/httpd/conf.modules.d/` contain any configuration files necessary to load modules.\r\n\r\n\r\n```\r\n<VirtualHost *:80>\r\n    ProxyPreserveHost On\r\n    ProxyPass / http://127.0.0.1:5000/\r\n    ProxyPassReverse / http://127.0.0.1:5000/\r\n    ServerName www.example.com\r\n    ServerAlias *.example.com\r\n</VirtualHost>\r\n```\r\n\r\nThe `VirtualHost` block can appear multiple times, in one or more files on a server. In the preceding configuration file, Apache accepts public traffic on port 80. The domain `www.example.com` is being served, and the `*.example.com` alias resolves to the same website. See [Name-based virtual host support](https://httpd.apache.org/docs/current/vhosts/name-based.html) for more information. Requests are proxied at the root to port 5000 of the server at 127.0.0.1. For bi-directional communication, `ProxyPass` and `ProxyPassReverse` are required.\r\n\r\nSave the file and test the configuration. If everything passes, the response is `Syntax [OK]`.\r\n\r\n```bash\r\nsudo service httpd configtest\r\n```\r\n\r\nRestart Apache:\r\n\r\n```bash\r\nsudo systemctl restart httpd\r\nsudo systemctl enable httpd\r\n```\r\n\r\n\r\n#### <a name=\"app-update\"></a> ASP.NET Core 2.0 application code updates\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.6 or later.\r\n* Updating will pull in the fixed packages listed above.\r\n\r\nIf you're targeting .NET Framework, update the packages listed above to their safe version or later.\r\n\r\nIf your application is using Kestrel without a proxy or the HttpOverrides functionality (UseForwardedHeaders with ForwardedHost) you must also add the host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/tree/release/2.0/samples/HostFilteringSample/.\r\n\r\n---\r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. You must follow the update instructions below to address both types of dependency.\r\n\r\n### Direct dependencies\r\n\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on `Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file.\r\n\r\n### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Core\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the vulnerable metapackage, as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.5.\r\n\r\nTo update the version to the secure package, change the version number to a secure package version. In this example, update `Microsoft.AspNetCore.All` to 2.0.6 or later. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.6\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Framework\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a reference to a single package, as seen by the `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.HttpOverrides` version 2.0.1.\r\n\r\nTo update to the secure package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.HttpOverrides` to 2.0.2 and later. Save the *csproj* file. The updated and secure *csproj* look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependency version.\r\n\r\n##### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to a compatible version. \r\n\r\nFor example if your project refers directly to `Microsoft.AspNetCore.Mvc.Cors` with a version number of `2.0.0`, when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your *project.json* in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n###### Reviewing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review the *project.assets.json* file.\r\n\r\n###### Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names above and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example, the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n###### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file. Visual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the vulnerable versions table above.\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your *project.assets.json* file includes references to any of the vulnerable packages shown above, then you need to fix the transitive dependencies.\r\n\r\n###### Overriding transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages this means:\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned, you must add a direct dependency to the updated version by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referring the fixed version.\r\nFor example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.HttpOverrides` version 2.0.0 you would add a reference to the fixed version, that is, 2.0.2 or later.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverride\" Version=\"2.0.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n###### Rebuilding your application\r\n\r\nRebuild your application. Test and deploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\n[Mikhail Shcherbakov](https://www.linkedin.com/in/mikhailshcherbakov/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0787)\r\n\r\n### Revisions\r\n\r\nV1.1 (Mar 15, 2018): NGINX configuration instructions updated, thanks to @buglloc\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-03-15_","Url":"https://github.com/aspnet/Announcements/issues/295","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\" (#295)"},{"Id":"304853568","IsPullRequest":false,"CreatedAt":"2018-03-13T17:04:23","Actor":"blowdart","Number":"294","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_","Url":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294)"},{"Id":"303604146","IsPullRequest":false,"CreatedAt":"2018-03-08T19:36:01","Actor":"natemcmaster","Number":"293","RawContent":null,"Title":"Moving official daily builds to the dotnet-core MyGet feed ","State":"open","Body":"As part of ongoing infrastructural changes, we will be moving official daily of ASP.NET Core to the dotnet-core myget feed. This transition will happen over the next few weeks.\r\n\r\n**Old feed:** https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\r\n**New feed:** https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n\r\nWe recommend updating to use the dotnet-core feed to continue getting the latest daily builds of ASP.NET Core.\r\n\r\nWe are making this change to make it easier for you to pull daily builds that align with the .NET Core CLI and .NET Core runtime. Some of our existing MyGet feeds will continue to exist, but will not be used for official daily builds. Instead, those feeds will only be used for builds of experimental branches of aspnetcore.\r\n\r\nOther useful links:\r\nGallery: https://dotnet.myget.org/gallery/dotnet-core\r\nNuGet v2 source: https://dotnet.myget.org/F/dotnet-core/api/v2\r\nNPM feed: https://dotnet.myget.org/F/dotnet-core/npm/\r\n\r\nPlease use https://github.com/aspnet/Home/issues/2937 for discussion.","Url":"https://github.com/aspnet/Announcements/issues/293","RelatedDescription":"Open issue \"Moving official daily builds to the dotnet-core MyGet feed \" (#293)"},{"Id":"302846756","IsPullRequest":false,"CreatedAt":"2018-03-06T20:07:15","Actor":"natemcmaster","Number":"292","RawContent":null,"Title":"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image","State":"open","Body":"We will be deprecating the following Docker images\r\n \r\n- microsoft/aspnetcore-build:1.0-1.1\r\n- microsoft/aspnetcore-build:1.0-2.0\r\n\r\nWe will not delete these images. These images will continue to receive patch update whenever a 1.0.x, 1.1.x, or 2.0.x update ships, however, we will not produce a new version which contains the 2.1 runtime.\r\n\r\n### Why?\r\n \r\nThese images existed to support CI/CD pipelines that run apps on multiple versions for .NET Core in the same container. With each release, these images have grown in size. The 1.0-2.0 image is already about 1GB, and would continue to grow with runtime updates. \r\n \r\nFortunately, recent improvements to .NET Core (such as minor version roll-forward) and Docker (multi-stage builds) have reduced the need to use an image with multiple versions of .NET Core. We have seen usage of these multi-version images declining over time, and today, they are a small percentage of our Docker image usage.\r\n\r\nRather than maintaining a single, large image with all possible .NET Core runtimes, we encourage users to use multi-stage builds. Docker's multi-stage feature allows you to compose a single Dockerfile, but still use multiple .NET Core runtimes. Also, starting in 2.1, .NET Core supports rolling forward the runtime version within the major version, which will further reduce the need to have multiple 2.x runtimes side-by-side.\r\n \r\nFor discussion, use https://github.com/aspnet/aspnet-docker/issues/349","Url":"https://github.com/aspnet/Announcements/issues/292","RelatedDescription":"Open issue \"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image\" (#292)"},{"Id":"301939059","IsPullRequest":false,"CreatedAt":"2018-03-02T23:33:38","Actor":"blowdart","Number":"291","RawContent":null,"Title":"Statement on ASP.NET susceptibility to the recent DuoLabs SAML vulnerability announcement.","State":"open","Body":"This week saw an announcement of vulnerabilities in  SAML parsing libraries by [DUO Labs](https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations). Whilst no Microsoft implementations were listed we've seen a number of customer questions about this, especially given the recent WS-Fed support added to ASP.NET Core. \r\n\r\nASP.NET and ASP.NET Core rely on libraries from the Windows Identity team. Their investigation shows [their libraries are not vulnerable](https://cloudblogs.microsoft.com/enterprisemobility/2018/03/02/latest-saml-vulnerability-not-present-in-azure-ad-and-adfs/) to this parsing vulnerability, thus any ASP.NET or ASP.NET Core application which uses the default Microsoft SAML libraries or authentication handlers are safe from this exploit.\r\n","Url":"https://github.com/aspnet/Announcements/issues/291","RelatedDescription":"Open issue \"Statement on ASP.NET susceptibility to the recent DuoLabs SAML vulnerability announcement.\" (#291)"},{"Id":"300752371","IsPullRequest":false,"CreatedAt":"2018-02-27T18:58:59","Actor":"natemcmaster","Number":"290","RawContent":null,"Title":"dotnet-watch, dotnet-ef, and dotnet-user-secrets will move into the .NET Core CLI in 2.1.300","State":"open","Body":"Starting in .NET Core CLI 2.1.300-preview2, the following tools were added as bundled, top-level commands. These tools previously shipped as NuGet packages.\r\n\r\n - Microsoft.DotNet.Watcher.Tools (aka dotnet-watch)\r\n - Microsoft.EntityFrameworkCore.Tools.DotNet (aka dotnet-ef)\r\n - Microsoft.Extensions.SecretManager.Tools (aka dotnet-user-secrets)\r\n - Microsoft.Extensions.Caching.SqlConfig.Tools (aka dotnet-sql-cache)\r\n\r\nCommands like `dotnet watch`, `dotnet ef`, and `dotnet user-secrets` can be executed on any project without needing to install the command via \"dotnet restore\" or \"dotnet install tool\". The commands are available by default in all projects.\r\n\r\n### Upgrading from stable releases of .NET Core CLI (e.g. 2.1.5)\r\n\r\nUsing these tools as a DotNetCliToolReference will no longer work. If your .csproj file has the following lines, they can be removed.\r\n```xml\r\n<ItemGroup>\r\n   <DotNetCliToolReference Include=\"Microsoft.DotNet.Watcher.Tools\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"(all versions)\" />\r\n   <DotNetCliToolReference Include=\"Microsoft.Extensions.Caching.SqlConfig.Tools\" Version=\"(all versions)\" />\r\n</ItemGroup>\r\n```\r\n\r\n### Upgrading from .NET Core CLI 2.1.300-preview1\r\nFor early-adopters who tried the 2.1.300-preview1 release, you will no longer need to run `dotnet install tool -g` to acquire the following tools:\r\n - dotnet-watch\r\n - dotnet-user-secrets\r\n - dotnet-dev-certs\r\n - dotnet-sql-cache\r\n - dotnet-ef\r\n\r\nIf you had installed these tools in 2.1.300-preview1, you can uninstall them manually by deleting corresponding files from `%USERPROFILE%\\.dotnet\\tools\\` (Windows) or `$HOME/.dotnet/tools` (macOS/Linux).\r\n\r\n**For discussion use https://github.com/aspnet/DotNetTools/issues/399**","Url":"https://github.com/aspnet/Announcements/issues/290","RelatedDescription":"Open issue \"dotnet-watch, dotnet-ef, and dotnet-user-secrets will move into the .NET Core CLI in 2.1.300\" (#290)"},{"Id":"295436695","IsPullRequest":false,"CreatedAt":"2018-02-08T09:18:21","Actor":"SteveSandersonMS","Number":"289","RawContent":null,"Title":"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)","State":"open","Body":"The `Microsoft.AspNetCore.SpaTemplates` package never shipped in the .NET Core SDK, and never reached an official level of support. The ASP.NET team's development resources are finite, and we think we can deliver more valuable features to ASP.NET developers by focusing elsewhere.\r\n\r\nSo:\r\n\r\n* The `Microsoft.DotNet.Web.Spa.ProjectTemplates` package, containing **Angular**, **React**, and **React+Redux** templates, is **not affected**. This ships in the .NET Core SDK and is officially supported. We continue to invest development effort in this package. We can put *more* time and effort into these SPA templates now the effort isn't so spread out.\r\n* If you have an existing Aurelia/Knockout/Vue project based on our SPA templates, you're not directly affected because these templates are only used to create new projects. You can continue building and shipping your app forever. Obviously we still support and enhance the underlying ASP.NET Core APIs (such as those in JavaScriptServices) that you are using.\r\n* The `Microsoft.AspNetCore.SpaTemplates` package, containing Aurelia, Knockout, and Vue templates, continues to be available, but we'll no longer update it or work on issues related to it.\r\n* We encourage enthusiastic community members to [ship your own `dotnet new` templates](https://docs.microsoft.com/en-us/dotnet/core/tools/custom-templates). The `dotnet new` system is extensible for this exact reason. If you want to own the go-to Aurelia/Knockout/Vue project template, now's your chance! You could [fork the ones from `Microsoft.AspNetCore.SpaTemplates`](https://github.com/aspnet/templating/tree/dev/src/Microsoft.AspNetCore.SpaTemplates), or start from scratch depending on what you prefer.\r\n* In the long term, if another JavaScript SPA framework becomes dominant, we will of course consider adding a template for it to the SDK templates package.\r\n\r\nI know this will be irritating to some people, especially those who have worked on PRs for the Aurelia/Knockout/Vue templates. I'm sorry about that! I hope you can understand that our goal is to offer the overall maximum benefit for ASP.NET developers based on the resources available.\r\n\r\nDiscussion for this issue is at https://github.com/aspnet/JavaScriptServices/issues/1522","Url":"https://github.com/aspnet/Announcements/issues/289","RelatedDescription":"Open issue \"Retiring the Microsoft.AspNetCore.SpaTemplates package (Aurelia/Knockout/Vue templates)\" (#289)"},{"Id":"294037619","IsPullRequest":false,"CreatedAt":"2018-02-02T22:04:23","Actor":"danroth27","Number":"288","RawContent":null,"Title":"ASP.NET Core 2.1 high-level planning","State":"open","Body":"*This is high-level only and doesn't include all issues, bugs, etc. from every repo, just intended to give a general idea of release scope and direction.*\r\n\r\nThe following high-level features are planned for the ASP.NET Core 2.1 release:\r\n- **SignalR** - Real-time web framework on ASP.NET Core (https://github.com/aspnet/SignalR/issues/394)\r\n- **HTTPS** - On by default and easy to configure (https://github.com/aspnet/Home/issues/2308)\r\n- **GDPR compliance** - Templates updated with new privacy features (https://github.com/aspnet/Security/issues/1561, https://github.com/aspnet/Identity/issues/1341)\r\n- **Web API conventions** - Rich Swagger support without attributes (https://github.com/aspnet/Mvc/issues/6870, https://github.com/aspnet/Mvc/issues/6784)\r\n- **IHttpClientFactory** - HttpClient as a service, handle cross-cutting concerns like caching, retry logic, timeouts and circuit breakers (https://github.com/aspnet/HttpClientFactory/issues/42)\r\n- **ASP.NET Core Module in-proc hosting** - 6x the throughput on IIS! Better startup error handling (https://github.com/aspnet/AspNetCoreModule/issues/265)\r\n- **Razor pages improvements** - Support for areas, ~/Pages/Shared (https://github.com/aspnet/Mvc/issues/6926, https://github.com/aspnet/Mvc/issues/6604)\r\n- **MVC functional test fixture** - Easily test your MVC apps end-to-end (https://github.com/aspnet/Mvc/issues/6233)\r\n- **Build-time Razor** - Compile Razor pages and views as part of your build, improved startup performance (https://github.com/aspnet/Razor/issues/1809)\r\n- **UI as a library** - Package Razor pages and views as reusable libraries (https://github.com/aspnet/Razor/issues/1809)\r\n- **Identity UI package and scaffolder** - Add identity to any application (https://github.com/aspnet/Home/issues/2311)\r\n- **WebHooks** - Handle WebHook notifications from ASP.NET Core apps (https://github.com/aspnet/WebHooks/issues/5)\r\n\r\nFor more details on each of these features see the [ASP.NET Core 2.1 roadmap](https://blogs.msdn.microsoft.com/webdev/2018/02/02/asp-net-core-2-1-roadmap/) post on the ASP.NET team blog.\r\n\r\nDiscussion for this issue is at aspnet/Home#2846","Url":"https://github.com/aspnet/Announcements/issues/288","RelatedDescription":"Open issue \"ASP.NET Core 2.1 high-level planning\" (#288)"},{"Id":"292632569","IsPullRequest":false,"CreatedAt":"2018-01-30T02:33:11","Actor":"DamianEdwards","Number":"287","RawContent":null,"Title":"Introduction of new meta-package \"Microsoft.AspNetCore.App\"","State":"open","Body":"## Overview\r\nASP.NET Core 2.1 will introduce a new meta-package for use by applications: *Microsoft.AspNetCore.App*. Additionally, new projects created that target 2.1 will use this meta-package by default, rather than the existing meta-package *Microsoft.AspNetCore.All*.\r\n\r\nThe new meta-package differs from the existing meta-package in that it reduces the number of dependencies of packages not owned or supported by the ASP.NET or .NET teams to just those deemed necessary to ensure the major frameworks features function. The full list of packages being removed compared to *Microsoft.AspNetCore.All* can be seen below.\r\n\r\nThe existing *Microsoft.AspNetCore.All* meta-package will continue to be made available throughout the 2.x lifecycle, but we recommend customers move to the new *Microsoft.AspNetCore.App* meta-pacakge and then add individual references to any of the removed packages if their app requires it.\r\n\r\n## Package references not in \"Microsoft.AspNetCore.App\", compared to \"Microsoft.AspNetCore.All\"\r\nThe following packages are direct dependencies of *Microsoft.AspNetCore.All* but **not** of *Microsoft.AspNetCore.App*. Note that any dependencies of these packages that otherwise aren't dependencies of *Microsoft.AspNetCore.App* will now **not** be included implicitly, e.g. *StackExchange.Redis* as a dependency of *Microsoft.Extensions.Caching.Redis*, *Microsoft.ApplicationInsights* as a dependency of *Microsoft.AspNetCore.ApplicationInsights.HostingStartup*:\r\n- Microsoft.Data.Sqlite\r\n- Microsoft.Data.Sqlite.Core\r\n- Microsoft.EntityFrameworkCore.Sqlite\r\n- Microsoft.EntityFrameworkCore.Sqlite.Core\r\n- Microsoft.Extensions.Caching.Redis\r\n- Microsoft.AspNetCore.DataProtection.AzureStorage\r\n- Microsoft.Extensions.Configuration.AzureKeyVault\r\n- Microsoft.AspNetCore.DataProtection.AzureKeyVault\r\n- Microsoft.AspNetCore.Identity.Service.AzureKeyVault\r\n- Microsoft.AspNetCore.AzureKeyVault.HostingStartup\r\n- Microsoft.AspNetCore.ApplicationInsights.HostingStartup\r\n\r\nWhen moving from *Microsoft.AspNetCore.All* to *Microsoft.AspNetCore.App*, if your application uses any APIs from the above packages, or packages brought in by those packages, you'll now need to add references to those packages in your project manually.\r\n\r\nDiscussion for this issue at https://github.com/aspnet/MetaPackages/issues/255","Url":"https://github.com/aspnet/Announcements/issues/287","RelatedDescription":"Open issue \"Introduction of new meta-package \"Microsoft.AspNetCore.App\"\" (#287)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1039600318093217792","CreatedAt":"2018-09-11T19:43:25+00:00","UserScreenname":"aspnet","Text":"Join us for today's #ASPNET Community Standup at 3:45 PM Pacific time with @shanselman, @DamianEdwards and… https://t.co/AADsNXNw0L","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":27,"FavoriteCount":9,"RawContent":null},{"Id":"1034573477620006913","CreatedAt":"2018-08-28T22:48:33+00:00","UserScreenname":"aspnet","Text":"We're live on https://t.co/4Ioo9jNSN2! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"1034222603685179392","CreatedAt":"2018-08-27T23:34:18+00:00","UserScreenname":"aspnet","Text":"Get ready for this week's #ASPNET Community Standup - Tuesday at 3:45 PM Pacific / 10 UTC\n\nBenchmarks and Performan… https://t.co/0SJ32oq3iG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":9,"RawContent":null},{"Id":"1033133567704875008","CreatedAt":"2018-08-24T23:26:51+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgs22K8 Core 2.2.0-preview1: HTTP/2 in Kestrel\nhttps://t.co/II7wNqYPgG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":104,"FavoriteCount":57,"RawContent":null},{"Id":"1032696620142419968","CreatedAt":"2018-08-23T18:30:35+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgs22K8 Core 2.20-preview1: Open API Analyzers &amp; Conventions\nhttps://t.co/17azOu2fw6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":60,"FavoriteCount":32,"RawContent":null},{"Id":"1032668796392095745","CreatedAt":"2018-08-23T16:40:01+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgs22K8 Core 2.2.0-preview1: Healthchecks\nhttps://t.co/sgOqbrv2pW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":24,"RawContent":null},{"Id":"1032328487825096705","CreatedAt":"2018-08-22T18:07:45+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgs22K8 Core 2.2.0-preview1 now available\nhttps://t.co/IOqvW1biUh","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":193,"FavoriteCount":139,"RawContent":null},{"Id":"1031951244510691328","CreatedAt":"2018-08-21T17:08:44+00:00","UserScreenname":"aspnet","Text":"Starting now! Join us at https://t.co/4Ioo9jNSN2 https://t.co/VOVl63Ju0r","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":12,"RawContent":null},{"Id":"1031945377597939714","CreatedAt":"2018-08-21T16:45:25+00:00","UserScreenname":"aspnet","Text":"Starting soon! https://t.co/VOVl63Ju0r","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":2,"RawContent":null},{"Id":"1031661576607023105","CreatedAt":"2018-08-20T21:57:41+00:00","UserScreenname":"aspnet","Text":"Get ready for this week's #ASPNET Community Standup - Tuesday at 10 AM Pacific / 18 GMT\n\nhttps://t.co/eFOzgs22K8 Co… https://t.co/197VNX3jBa","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":44,"FavoriteCount":31,"RawContent":null},{"Id":"1026931265377730562","CreatedAt":"2018-08-07T20:41:07+00:00","UserScreenname":"aspnet","Text":"ICYMI live, here's this week's @aspnet Community Standup with THE WHOLE MVC TEAM! https://t.co/x7PM6Dvm91","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":8,"RawContent":null},{"Id":"1026880588324593664","CreatedAt":"2018-08-07T17:19:45+00:00","UserScreenname":"aspnet","Text":"If you're waiting for the standup to start, refresh https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":4,"RawContent":null},{"Id":"1024410637982547968","CreatedAt":"2018-07-31T21:45:03+00:00","UserScreenname":"aspnet","Text":"Don't miss today's #ASPNET Community Standup at 3:45 Pacific / 22:45 UTC\n\nhttps://t.co/4Ioo9jNSN2 https://t.co/PS5c7tfQh8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-09-15T05:30:20.3178433Z","RunDurationInMilliseconds":13668}