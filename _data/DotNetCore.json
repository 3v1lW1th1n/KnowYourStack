{"Data":{"Blog":{"FeedItems":[{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null},{"Title":"Introducing API Analyzer","PublishedOn":"2017-10-31T23:24:24+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"This post was written by Olia Gavrysh. Have you ever wondered which APIs are deprecated and which should you use instead? Or have you ever used an API and then found out it didn&#8217;t work on Mac or...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/introducing-api-analyzer/","RawContent":null},{"Title":"Welcome to C# 7.1","PublishedOn":"2017-10-31T22:39:48+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"With C# we have always tended towards major releases: bundle a lot of features up, and release less frequently. We even went so far as routinely omitting the traditional &#34;.0&#34; when we talked...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/welcome-to-c-7-1/","RawContent":null},{"Title":"Moving to real time test discovery in Test Explorer","PublishedOn":"2017-10-30T22:46:58+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Real time test discovery is a new Visual Studio feature that uses a Roslyn analyzer to discover tests and populate the test explorer in real time without requiring you to build your project. This...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/30/real-time-test-discovery/","RawContent":null},{"Title":"Entity Framework 6.2 Runtime Released","PublishedOn":"2017-10-26T21:32:59+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Today we announce the availability of EF 6.2 runtime in NuGet.org. Entity Framework (EF) is Microsoft&#8217;s traditional object/relational mapper (O/RM) for .NET Framework. To understand the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/","RawContent":null},{"Title":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018","PublishedOn":"2017-10-23T16:41:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, and Juan Rodriguez, engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier 2018....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/","RawContent":null},{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6840049093","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:55","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/27","RelatedDescription":"Reopened issue \"microsoft/dotnet Docker Hub README adopts segmented OS/Arch style\" (#27) at dotnet/announcements","RelatedBody":"# microsoft/dotnet Docker Hub README adopts segmented OS/Arch style\r\n\r\nThe Docker Hub README style used by [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) has been updated to use a new model that is segmented by OS and chip architecture.\r\n\r\nYou can see an example of the new style in the following image. \r\n\r\n<img width=\"803\" alt=\"screen shot 2017-08-13 at 10 44 34 pm\" src=\"https://user-images.githubusercontent.com/2608468/29259667-0c73b3e4-8079-11e7-9c43-26894534ca7a.png\">\r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #275](https://github.com/dotnet/dotnet-docker/issues/275)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #328](https://github.com/dotnet/dotnet-docker-nightly/pull/328)\r\n* [moby/moby #33759](https://github.com/moby/moby/issues/33759)\r\n\r\nThe [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo (and by extension [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)) has been steadily  growing with each release of .NET Core and also of the underlying operating systems that we support. We wanted to present simple-to-read tag lists.  As the repo has grown, the tag list has gotten longer and more complicated. \r\n\r\nThe addition of `arm32v7` to the repo caused us to spend considerable time thinking about repo organization generally. We looked at other approaches and also talked to Docker employees about their long-term plans for `arm32v7` in particular.\r\n\r\nWe considered various options:\r\n\r\n* Split the repo by architecture (this seemed to match what Debian and other official repos were doing). See [debian](https://hub.docker.com/_/debian/) and [arm32v7/debian](https://hub.docker.com/r/arm32v7/debian/). Note how the [Debian GitHub repo](https://github.com/debuerreotype/docker-debian-artifacts) is structured, branching by architecture.\r\n* Split the repo by SDK and Runtime. We've discussed this multiple times but we believe that discoverability would be a significant challenge. Also, other peer development platforms do not segment on the SDK/Runtime boundary.\r\n* Stay the course on the repo structure, but adopt a new (hopefully better) approach for the tag list.\r\n\r\nThere are three main reasons that we adopted a new README style:\r\n\r\n* Multi-arch tags are visually awkward when you have multiple versions of an operating system for a given tag type. For example, the dotnet repo offers both Debian 8 and 9 variants of the `2-sdk` tag. Only one of them can participate in the multi-arch tag while the other variant (in this case Debian 8) is only available with the longer tag name: `2.0.0-sdk-jessie`. The way the bullets in the tag list compose looks odd, as you can see in the following image. It also doesn't communicate the relationship between tags well. <img width=\"724\" alt=\"screen shot 2017-08-13 at 11 14 22 pm\" src=\"https://user-images.githubusercontent.com/2608468/29260189-2f58da84-807d-11e7-868e-7e1f888fd42d.png\">\r\n* A multi-arch-first tag list works well when all OSes offer the same image types, but is poor at showing differences when they don't. The .NET Core offering for `arm32v7` is quite limited currently. We wanted to make that obvious.\r\n* We believe that most users look at the README with a specific OS in mind. We thought that it was best to cater to that, providing a simplified view for a given OS.\r\n\r\nThe downside is that this README style is unique (AFAIK). We've never tried to be novel with our Docker offering, but fit into existing conventions. This is our first significant departure from Docker norms. There is a lot changing in the Docker space, with multi-arch and `arm32v7` being top of the list (as it relates to this topic). As a result, we thought that now was a good time for experimentation based on the conclusion that the existing README style no longer scales to our needs. Our conversations with Docker employees also led us to believe that there are no good established answers to these challenges.\r\n\r\nPlease give us your feedback @ [dotnet/dotnet-docker #275](https://github.com/dotnet/dotnet-docker/issues/275)."},{"Id":"6840048672","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:48","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/24","RelatedDescription":"Reopened issue \" .NET Standard 2.0 is final\" (#24) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n[.NET Standard 2.0](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.0.md) is final. \r\n\r\nYou can now start producing .NET Standard 2.0 libraries and NuGet packages. Please use the latest [.NET Core 2.0 Preview 2](https://www.microsoft.com/net/core/preview) as it contains many improvements that were necessary to provide a good experience.\r\n      \r\n## Details\r\n\r\n* **Bigger API Surface**: We have more than doubled the set of available APIs from **13k** in [.NET Standard 1.6](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.6.md) to **32k** in [.NET Standard 2.0](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.0.md). Most of the added APIs are .NET Framework APIs. These additions make it much easier to port existing code to .NET Standard, and, by extension, to any .NET implementation of .NET Standard, such as .NET Core 2.0 and the upcoming version of UWP.\r\n\r\n* **.NET Framework compatibility mode**: The vast majority of NuGet packages are currently still targeting .NET Framework. Many projects are currently blocked from moving to .NET Standard because not all their dependencies are targeting .NET Standard yet. That's why we added a compatibility mode that allows .NET Standard projects to depend on .NET Framework libraries as if they were compiled for .NET Standard. Of course, this may not work in all cases (for instance, if the .NET Framework binaries uses WPF), but we found that [70% of all NuGet packages on nuget.org are API compatible][video] with .NET Standard 2.0, so in practice it unblocks many projects.\r\n\r\n[video]: https://www.youtube.com/watch?v=iIlQer4LEac\r\n\r\n* **Broad platform support**. .NET Standard 2.0 is [supported on the following platforms](https://github.com/dotnet/standard/blob/master/docs/versions.md):\r\n    - .NET Framework 4.6.1\r\n    - .NET Core 2.0\r\n    - Mono 5.4\r\n    - Xamarin.iOS 10.14\r\n    - Xamarin.Mac 3.8\r\n    - Xamarin.Android 7.5\r\n    - UWP is work in progress and will ship later this year.\r\n\r\n## Tooling Prerequisites\r\n\r\nIn general, make sure you run the latest version of the tooling:\r\n\r\n* **.NET Core SDK**. You always need to install [.NET Core 2.0 Preview 2](https://www.microsoft.com/net/core/preview). This also includes the CLI (`dotnet`) for building packages, so if you only want to use the CLI, you can stop here.\r\n* **Visual Studio**. If you want to use Visual Studio for authoring .NET Standard 2.0 libraries, you also need to install [Visual Studio 2017 15.3](https://www.visualstudio.com/vs/preview/). Make sure to use 15.3 and not an earlier version, as this release addressed a couple of key issues to provide a good experience. If you only need to consume .NET Standard 2.0 libraries, you can do that even in Visual Studio 2015 but you'll need NuGet client 3.6 or higher ([download from Nuget.org/downloads](https://www.nuget.org/downloads))\r\n* **Visual Studio for Mac**. The latest version of [Visual Studio for Mac](https://www.visualstudio.com/vs/visual-studio-mac/) supports building .NET Standard 2.0 libraries. \r\n* **Rider**. The [latest version](https://www.jetbrains.com/rider/download) also has support for .NET Standard 2.0.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nFor discussion, see https://github.com/dotnet/standard/issues/439."},{"Id":"6840048225","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:40","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/22","RelatedDescription":"Reopened issue \".NET Core Support for macOS High Sierra\" (#22) at dotnet/announcements","RelatedBody":"# .NET Core Support for macOS High Sierra\r\n\r\n## Summary\r\n\r\n.NET Core 1.x and 2.0 do not currently support macOS High Sierra (version 10.13, currently in beta) due to changes in macOS. The .NET Core team has been testing macOS High Sierra builds and has filed bugs with Apple so that the two products can work better together.\r\n\r\nWe intend to have both .NET Core 1.x and 2.0 supporting macOS High Sierra by the time Apple ships the final production release. We are hoping to ship .NET Core 2.0 RTW with High Sierra support.\r\n\r\nAs .NET Core support for macOS High Sierra is improved, this announcement will be updated with the new status.\r\n\r\n## Impact\r\n\r\n.NET Core does not work on macOS High Sierra.\r\n\r\n## Details\r\n\r\n* [dotnet/core #677](https://github.com/dotnet/core/issues/677) -- tracking bug\r\n* [dotnet/corefx #22243](https://github.com/dotnet/corefx/pull/22243) -- workaround for issue 33294006, listed below.\r\n\r\nWe have reported the following issues to Apple as part of supporting .NET Core on macOS High Sierra.\r\n\r\n> Note: The issue links can only be accessed by Apple employees.\r\n\r\n* [33275095](https://bugreport.apple.com/web/?problemID=33275095) SSL Failure: macOS 10.13 (17A291j) SecureTransport in server mode can select ciphersuites not applicable to the TLS version.\r\n\r\n    **.NET Core Note:** When hosting an [SslStream](https://docs.microsoft.com/dotnet/api/system.net.security.sslstream?view=netcore-2.0) limited to TLS 1.0 or TLS 1.1 clients other than Apple SecureTransport may fail to connect.\r\n\r\n* [33143630](https://bugreport.apple.com/web/?problemID=33143630) macOS 10.13 (17A291j) SecTrustExecute fails with no error building revocation-enabled chain against a self-issued certificate.\r\n    \r\n    **.NET Core Note:** In this situation an Apple-specific derived type of CryptographicException will be thrown with a message of “No error”.\r\n\r\n* [33294006](https://bugreport.apple.com/web/?problemID=33294006) macOS 10.13 (17A291j) libcurl changing to LibreSSL changes thread-safety model from safe to unsafe \r\n    \r\n    **.NET Core Note:** A functioning workaround is in place, but it may regress performance for parallel HTTP requests (to avoid crashes caused by the loss of thread safety).\r\n\r\n* [32948209](https://bugreport.apple.com/web/?problemID=32948209) CCCryptorReset returns kCCUnimplemented for ECB on 10.13.\r\n\r\n    **.NET Core Note:** .NET Core has worked around this regression, so it should not be user-impacting."},{"Id":"6840047669","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:31","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/17","RelatedDescription":"Reopened issue \".NET Core Preview 2\" (#17) at dotnet/announcements","RelatedBody":"Today we announce the availability of .NET Core 2.0.0 Preview .\r\n\r\n* [Download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.0-preview2-download.md)\r\n* [Getting Started](https://www.microsoft.com/net/core/preview)\r\n* [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.0-preview2.md)\r\n* [Blog](https://blogs.msdn.microsoft.com/dotnet/2017/06/28/announcing-net-core-2-0-preview-2/)\r\n\r\nPlease use [dotnet/core #711](https://github.com/dotnet/core/issues/711) for discussion and questions."},{"Id":"6840047172","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:23","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/15","RelatedDescription":"Reopened issue \".NET Framework 4.7 Docker Image Now Available\" (#15) at dotnet/announcements","RelatedBody":"## 4.7 image is now available on [Docker Hub](https://hub.docker.com/r/microsoft/dotnet-framework/).\r\n\r\n### Summary\r\n- The latest tag of the .NET Framework image now points to the 4.7 image.\r\n- The way our images layer is now different (although this shouldn’t affect anyone). Read more on the [design and discussion](https://github.com/dotnet/designs/issues/7).\r\n- Check it out with the [4.7 Docker Image Sample](https://github.com/Microsoft/dotnet-framework-docker-samples/tree/master/dotnetapp-4.7)\r\n\r\n### Feedback\r\nPlease try it out! General feedback can be logged in the [.NET Framework Docker issues](https://github.com/Microsoft/dotnet-framework-docker/issues).\r\n[Microsoft/dotnet-framework-docker #22 ](https://github.com/Microsoft/dotnet-framework-docker/issues/22) is open for discussion.\r\n"},{"Id":"6840046541","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:15","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/13","RelatedDescription":"Reopened issue \".NET Core 2.0.0 Preview 1 \" (#13) at dotnet/announcements","RelatedBody":"Today at [Build 2017](https://channel9.msdn.com/?wt.mc_id=build_hp#programGuide) we announced the availability of .NET Core 2.0.0 Preview 1.\r\n\r\n* [Download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.0-preview1-download.md)\r\n* [Getting Started](https://www.microsoft.com/net/core/preview)\r\n* [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.0-preview1.md)\r\n* [Blog](https://blogs.msdn.microsoft.com/dotnet/2017/05/10/announcing-net-core-2-0-preview-1/)\r\n\r\nPlease use [dotnet/core #640](https://github.com/dotnet/core/issues/640) for discussion and questions."},{"Id":"6840045806","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:03","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/11","RelatedDescription":"Reopened issue \".NET Designs Repository Created\" (#11) at dotnet/announcements","RelatedBody":"# .NET Designs Repository Created\r\n\r\n## Summary\r\n\r\n.NET designs now have a home on GitHub at [dotnet/designs](https://github.com/dotnet/designs). This repository and the process it uses is intended to be very similar to [dotnet/csharplang](https://github.com/dotnet/csharplang). We want to share .NET design documents and get much earlier feedback on plans.\r\n\r\n## Details\r\n\r\nThe repository was just created. You can see two designs that you can participate on. More designs will show up over time. These two designs were selected as the initial set since the current behavior for both has received significant feedback.\r\n\r\n- [.NET Core 2+ Naming and Versioning](https://github.com/dotnet/designs/issues/2)\r\n- [.NET Core 2+ Version Binding](https://github.com/dotnet/designs/issues/3)\r\n\r\nA separate repository was created for a few reasons:\r\n\r\n- .NET designs may need to be implemented in multiple repos, including runtime, framework and language repos.\r\n- .NET designs may or may not be specific to .NET Core.\r\n\r\nThanks in advance for your participation in this repository."},{"Id":"6840045368","Type":"IssuesEvent","CreatedAt":"2017-11-10T21:59:57","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/10","RelatedDescription":"Reopened issue \"RyuJIT is the x86 JIT in .NET Core 2.0 – Replacing JIT32\" (#10) at dotnet/announcements","RelatedBody":"# RyuJIT is the x86 JIT in .NET Core 2.0 – Replacing JIT32\r\n\r\n## Summary\r\n\r\nThe RyuJIT JIT compiler will be used for all platform combinations for .NET Core 2.0 and beyond. JIT32 will be removed from the product. For .NET Core 1.x, RyuJIT is used for x64 and JIT32 is used for x86 chip support.\r\n\r\nWe intend for RyuJIT to be a 100% functionally compatible replacement for JIT32. RyuJIT has gone through extensive stress testing. This brings the .NET Core 32-bit product behavior much closer to the 64-bit product behavior.\r\n\r\nWe will publish more information on this change later. For now, this is just the announcement.\r\n\r\nNote: Windows is the only supported 32-bit platform for .NET Core 1.x and 2.x.\r\n\r\n### Details:\r\n\r\n- [Make RyuJIT/x86 the default x86 JIT (dotnet/coreclr #8260)](https://github.com/dotnet/coreclr/pull/8260)\r\n\r\n## Impact\r\n\r\n**Open Source** - RyuJIT is open source. JIT32 is not open source.\r\n\r\n**Single JIT Codebase** - There is now a single codebase for the CoreCLR JIT. This helps everyone who is working on platform expansion and who is investing in JIT improvements. An example is Samsung, who is investing in Linux x86 with RyuJIT x86.\r\n\r\n**Performance** - RyuJIT generally takes longer to compile than JIT32, but its optimizer can generate faster code. The performance difference may not be significant, depending on the application. In initial testing with ASP.NET, we found that the difference didn't matter. Please help us make RyuJIT faster! We will continue investing in RyuJIT performance (which often helps all architectures). If you notice performance regressions, we’re very interested to hear your results. Please contact us.\r\n\r\n**Features!** - RyuJIT has more features than JIT32. The feature gap with JIT32 will grow over time. The following features are now available to x86 workloads (due to this change): \r\n- SIMD\r\n- Fast Span&lt;T&gt; support\r\n- Inlining improvements\r\n- Devirtualization\r\n- Significantly better floating point performance\r\n- Better performance with value types (structs)\r\n\r\n**Possible compatibility concerns:** \r\n- floating-point precision\r\n- undefined behaviors (programs that happened to work that had bugs in them) especially around interop, inlining differences (GetCallerAssembly intrinsic).\r\n\r\nPlease test! If an x86 program was working in 1.x, and failing in 2.x, please report it on GitHub or at ryujit@microsoft.com. \r\n\r\nPlease see some of our past [blog posts on RyuJIT](https://blogs.msdn.microsoft.com/dotnet/tag/ryujit/) to learn more about it.\r\n\r\n## Rationale\r\n\r\nRyuJIT is the current and future platform of JIT compilation for .NET. We will use it for all platform combinations going forward. We're  more efficient as a developer community if we have a single codebase to learn, work on and improve."},{"Id":"6840041975","Type":"IssuesEvent","CreatedAt":"2017-11-10T21:59:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/6","RelatedDescription":"Reopened issue \"Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'. Derived types must either match the security accessibility of the base type or be less accessible.\" (#6) at dotnet/announcements","RelatedBody":"# Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'\r\n\r\n## Summary\r\n\r\nUsing System.Net.Http 4.1.0-4.3.0 results in an exception when starting a web app that's .NET 4.6.1:\r\n* Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'. Derived types must either match the security accessibility of the base type or be less accessible.\r\n\r\nDetails in https://github.com/dotnet/corefx/issues/11100\r\nUpdated [System.Net.Http 4.3.1 package](https://www.nuget.org/packages/System.Net.Http/4.3.1) contains a fix and is available on nuget.\r\n\r\n## Impact\r\n\r\nHere's list of technical breaking changes caused by the solution withworkarounds for each.\r\nNote that these new behaviors are specific when running on net46 / Desktop. When you run on .NET Core, the behavior is intact.\r\n\r\n1. `HttpClientHandler.CheckCertificateRevocationList` (introduced in System.Net.Http 4.1)\r\n    * New behavior: Throws `PlatformNotSupportedException`\r\n    * Workaround: Use `ServicePointManager.CheckCertificateRevocationList` instead (impacts the whole AppDomain, not just single `HttpClientHandler` as it did in System.Net.Http 4.1-4.3)\r\n2. `HttpClientHandler.SslProtocols` (introduced in System.Net.Http 4.1)\r\n    * New behavior: Throws `PlatformNotSupportedException`\r\n    * Workaround: Use `ServicePointManager.SecurityProtocol` instead (impacts the whole AppDomain, not just single `HttpClientHandler` as it did in System.Net.Http 4.1-4.3)\r\n3. `HttpClientHandler.ServerCertificateCustomValidationCallback` (introduced in System.Net.Http 4.1)\r\n    * New behavior: Works fine, except that the first parameter of type `HttpRequestMessage` is always `null`\r\n    * Workaround: Use `ServicePointManager.ServerCertificateValidationCallback`\r\n4. HTTP/2.0 support (introduced in System.Net.Http 4.1)\r\n    * New behavior: System.Net.Http (for net46 = Desktop) no longer supports HTTP/2.0 protocol on Windows 10.\r\n    * Workaround: Target System.Net.Http.WinHttpHandler NuGet package instead.\r\n    * Details:\r\n      * HTTP/2.0 support is part of the new CoreFx HTTP stack which on Windows is based on WinHTTP.  The original HTTP stack in .NET Framework 4.6 did not support HTTP/2.0 protocol.  If HTTP/2.0 protocol is needed, there is a separate NuGet package, System.Net.Http.WinHttpHandler which provides a new HttpClient handler. This handler is similar in features to `HttpClientHandler` (the normal default handler for HttpClient) but will support HTTP/2.0 protocol.  When using HttpClient on .NET Core runtime, the WinHttpHandler is actually built-in to HttpClientHandler.  But on .NET Framework, you need to explicitly use WinHttpHandler.\r\n      * Regardless of whether you are running using .NET Framework runtime (with WinHttpHandler) or .NET Core runtime using HttpClientHandler (or WinHttpHandler), there are additional requirements in order to get HTTP/2.0 protocol working on Windows:\r\n        * The client must be running on Windows 10 Anniversary Build (build 14393 or later).\r\n        * The `HttpRequestMessage.Version` must be explicitly set to 2.0 (the default is normally 1.1). Sample code:\r\n\r\n```c#\r\n            var handler = new WinHttpHandler();\r\n            var client = new HttpClient(handler);\r\n            var request = new HttpRequestMessage(HttpMethod.Get, \"http://www.example.com\");\r\n            request.Version = new Version(2, 0);\r\n\r\n            HttpResponseMessage response = await client.SendAsync(request);\r\n```\r\n\r\n## Rationale\r\n\r\nAfter much discussion it was decided the best way forward would be to revert the HttpClientHandler implementation in net46 build of CoreFX back to using original .NET Framework HTTP stack instead of WinHTTP (WinHttpHandler) based stack.\r\n\r\nAdditionally, we will revise the implementation of the new APIs on HttpClientHandler we introduced in 4.1.0.0 OOB package so that it works accordingly for the net46 build. [Details and tracking progress](https://github.com/dotnet/corefx/issues/11100#issuecomment-276293185).\r\n\r\n---\r\n\r\n*As a reminder, announcement threads are locked. Please use the [original issue](https://github.com/dotnet/corefx/issues/11100) for feedback and questions. Thanks!*"},{"Id":"6840041673","Type":"IssuesEvent","CreatedAt":"2017-11-10T21:59:01","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/14","RelatedDescription":"Reopened issue \".NET Core Docker images will move to multi-arch based tags\" (#14) at dotnet/announcements","RelatedBody":"## Summary\r\nDocker has a [multi-arch feature]( https://github.com/moby/moby/issues/15866) that [microsoft/dotnet-nightly]( https://hub.docker.com/r/microsoft/dotnet-nightly/) recently started utilizing.  The plan is to port this to the [official microsoft/dotnet repo]( https://hub.docker.com/r/microsoft/dotnet/) shortly.  The multi-arch feature allows a single tag to be used across multiple machine configurations.  Without this feature each architecture/OS/platform requires a unique tag.  For example, the microsoft/dotnet:1.0-runtime tag is based on Debian and microsoft/dotnet:1.0-runtime-nanoserver if based on Nano Server.  With multi-arch there will be one common microsoft/dotnet:1.0-runtime tag.  If you pull that tag from a Linux container environment you will get the Debian based image whereas if you pull that tag from a Windows container environment you will get the Nano Server based image.  This helps provide tag uniformity across Docker environments thus eliminating confusion.\r\n\r\nCurrent microsoft/dotnet tags:\r\n- [`1.0.5-runtime`, `1.0-runtime` (*1.0/debian/runtime/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.0/debian/runtime/Dockerfile)\r\n- [`1.0.5-runtime-nanoserver`, `1.0-runtime-nanoserver` (*1.0/nanoserver/runtime/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.0/nanoserver/runtime/Dockerfile)\r\n- [`1.0.5-runtime-deps`, `1.0-runtime-deps` (*1.0/debian/runtime-deps/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.0/debian/runtime-deps/Dockerfile)\r\n- [`1.0.5-sdk`, `1.0-sdk` (*1.0/debian/sdk/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.0/debian/sdk/Dockerfile)\r\n- [`1.0.5-sdk-nanoserver`, `1.0-sdk-nanoserver` (*1.0/nanoserver/sdk/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.0/nanoserver/sdk/Dockerfile)\r\n- [`1.1.2-runtime`, `1.1-runtime`, `1-runtime`, `runtime` (*1.1/debian/runtime/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.1/debian/runtime/Dockerfile)\r\n- [`1.1.2-runtime-nanoserver`, `1.1-runtime-nanoserver`, `1-runtime-nanoserver`, `runtime-nanoserver` (*1.1/nanoserver/runtime/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.1/nanoserver/runtime/Dockerfile)\r\n- [`1.1.2-runtime-deps`, `1.1-runtime-deps`, `1-runtime-deps`, `runtime-deps` (*1.1/debian/runtime-deps/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.1/debian/runtime-deps/Dockerfile)\r\n- [`1.1.2-sdk`, `1.1-sdk`, `1-sdk`, `sdk`, `latest` (*1.1/debian/sdk/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.1/debian/sdk/Dockerfile)\r\n- [`1.1.2-sdk-nanoserver`, `1.1-sdk-nanoserver`, `1-sdk-nanoserver`, `sdk-nanoserver`, `nanoserver` (*1.1/nanoserver/sdk/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/1.1/nanoserver/sdk/Dockerfile)\r\n- [`2.0.0-preview1-runtime`, `2.0-runtime`, `2-runtime` (*2.0/debian/runtime/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/2.0/debian/runtime/Dockerfile)\r\n- [`2.0.0-preview1-runtime-nanoserver`, `2.0-runtime-nanoserver`, `2-runtime-nanoserver` (*2.0/nanoserver/runtime/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/2.0/nanoserver/runtime/Dockerfile)\r\n- [`2.0.0-preview1-runtime-deps`, `2.0-runtime-deps`, `2-runtime-deps` (*2.0/debian/runtime-deps/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/2.0/debian/runtime-deps/Dockerfile)\r\n- [`2.0.0-preview1-sdk`, `2.0-sdk`, `2-sdk` (*2.0/debian/sdk/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/2.0/debian/sdk/Dockerfile)\r\n- [`2.0.0-preview1-sdk-nanoserver`, `2.0-sdk-nanoserver`, `2-sdk-nanoserver` (*2.0/nanoserver/sdk/Dockerfile*)](https://github.com/dotnet/dotnet-docker/blob/master/2.0/nanoserver/sdk/Dockerfile)\r\n\r\nNew multi-arch microsoft/dotnet-nightly tags:\r\n- `1.0.5-runtime`, `1.0-runtime`:\r\n    - [`1.0.5-runtime-jessie` (*1.0/runtime/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.0/runtime/jessie/Dockerfile)\r\n    - [`1.0.5-runtime-nanoserver` (*1.0/runtime/nanoserver/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.0/runtime/nanoserver/Dockerfile)\r\n- `1.0.5-runtime-deps`, `1.0-runtime-deps`:\r\n    - [`1.0.5-runtime-deps-jessie` (*1.0/runtime-deps/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.0/runtime-deps/jessie/Dockerfile)\r\n- `1.0.5-sdk`, `1.0-sdk`:\r\n    - [`1.0.5-sdk-jessie` (*1.0/sdk/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.0/sdk/jessie/Dockerfile)\r\n    - [`1.0.5-sdk-nanoserver` (*1.0/sdk/nanoserver/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.0/sdk/nanoserver/Dockerfile)\r\n- `1.1.2-runtime`, `1.1-runtime`, `1-runtime`, `runtime`:\r\n   - [`1.1.2-runtime-jessie` (*1.1/runtime/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.1/runtime/jessie/Dockerfile)\r\n    - [`1.1.2-runtime-nanoserver` (*1.1/runtime/nanoserver/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.1/runtime/nanoserver/Dockerfile)\r\n- `1.1.2-runtime-deps`, `1.1-runtime-deps`, `1-runtime-deps`, `runtime-deps`:\r\n    - [`1.1.2-runtime-deps-jessie` (*1.1/runtime-deps/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.1/runtime-deps/jessie/Dockerfile)\r\n- `1.1.2-sdk`, `1.1-sdk`, `1-sdk`, `sdk`, `latest`:\r\n    - [`1.1.2-sdk-jessie` (*1.1/sdk/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.1/sdk/jessie/Dockerfile)\r\n    - [`1.1.2-sdk-nanoserver` (*1.1/sdk/nanoserver/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/1.1/sdk/nanoserver/Dockerfile)\r\n- `2.0.0-preview1-runtime`, `2.0-runtime`, `2-runtime`:\r\n    - [`2.0.0-preview1-runtime-jessie` (*2.0/runtime/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/2.0/runtime/jessie/Dockerfile)\r\n    - [`2.0.0-preview1-runtime-nanoserver` (*2.0/runtime/nanoserver/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/2.0/runtime/nanoserver/Dockerfile)\r\n- `2.0.0-preview1-runtime-deps`, `2.0-runtime-deps`, `2-runtime-deps`:\r\n    - [`2.0.0-preview1-runtime-deps-jessie` (*2.0/runtime-deps/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/2.0/runtime-deps/jessie/Dockerfile)\r\n- `2.0.0-preview1-sdk`, `2.0-sdk`, `2-sdk`:\r\n    - [`2.0.0-preview1-sdk-jessie` (*2.0/sdk/jessie/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/2.0/sdk/jessie/Dockerfile)\r\n    - [`2.0.0-preview1-sdk-nanoserver` (*2.0/sdk/nanoserver/Dockerfile*)](https://github.com/dotnet/dotnet-docker-nightly/blob/master/2.0/sdk/nanoserver/Dockerfile)\r\n\r\n\r\nThis change has been in [microsoft/dotnet-nightly]( https://hub.docker.com/r/microsoft/dotnet-nightly/) for a little over a week. If you have feedback please file an issue on the [.NET Core Docker GitHub repo](https://github.com/dotnet/dotnet-docker).\r\n\r\n## .NET Core Docker Tools\r\nThe tooling to produce multi-arch tags is still evolving.  As a result we found it necessary to create some tooling to build the images and produce the manifest that enables multi-arch.  This [tooling](https://github.com/dotnet/docker-tools) is open sourced as well.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6842469431","Type":"PullRequestEvent","CreatedAt":"2017-11-12T02:04:43","Actor":"Drawaes","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14833","RelatedDescription":"Closed pull request \"[WIP] Don't Merge MemoryMarshal\" (#14833) at dotnet/coreclr","RelatedBody":"Just a start to check approach is correct."},{"Id":"6842466463","Type":"IssuesEvent","CreatedAt":"2017-11-12T02:02:01","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/2430","RelatedDescription":"Closed issue \"Array.Copy & Buffer.BlockCopy x2 to x3 slower < 1kB\" (#2430) at dotnet/coreclr","RelatedBody":"Array.Copy & Buffer.BlockCopy are up to x3 times slower than what can currently be written using managed C# for `byte[]` copies < 1024 bytes.\n\nAs these are the low level copy apis they should be faster than anything that can be written using managed code.\n\nThe [IllyriadGames/ByteArrayExtension](https://github.com/IllyriadGames/ByteArrayExtensions) repository adds a [`VectorizedCopy`](https://github.com/IllyriadGames/ByteArrayExtensions/blob/master/src/IllyriadGames.ByteArrayExtensions/VectorizedCopyExtension.cs#L41) extension method for `byte[]` that demonstrates this speed-up; and I assume potentially more gains could be made at the clr level.\n\n[![Performance Graph](http://aoa.blob.core.windows.net/aspnet/VectorizedCopy888.png)](http://aoa.blob.core.windows.net/aspnet/VectorizedCopy.png)\n\nAs `Buffer.BlockCopy` is essentially calling [`memmove`](https://github.com/dotnet/coreclr/blob/master/src/vm/comutilnative.cpp#L1451) Would this effect other copies e.g. structs passed as parameters; as they are essentially small copy operations?\n"},{"Id":"6842135566","Type":"IssuesEvent","CreatedAt":"2017-11-11T21:32:42","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/11906","RelatedDescription":"Closed issue \"Remove unnecessary Exception._exceptionMethodString field \" (#11906) at dotnet/coreclr","RelatedBody":"After #11873 is merged, the Exception._exceptionMethodString field will no longer be necessary. Removing it will save some memory in every Exception. The work likely involves:\r\n* Remove the field from mscorlib\\src\\System\\Exception.cs\r\n* Remove the matching definition from src\\vm\\mscorlib.h\r\n* Remove the matching definition from src/vm/object.h\r\n* Verify that debugging scenarios including SOS and triage dumps work correctly"},{"Id":"6842132780","Type":"PullRequestEvent","CreatedAt":"2017-11-11T21:30:37","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14992","RelatedDescription":"Merged pull request \"Remove unnecessary Exception._exceptionMethodString field\" (#14992) at dotnet/coreclr","RelatedBody":"#11906"},{"Id":"6841926022","Type":"PullRequestEvent","CreatedAt":"2017-11-11T19:11:13","Actor":"reaction1989","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14992","RelatedDescription":"Opened pull request \"Remove unnecessary Exception._exceptionMethodString field\" (#14992) at dotnet/coreclr","RelatedBody":"#11906"},{"Id":"6841577865","Type":"PullRequestEvent","CreatedAt":"2017-11-11T15:21:20","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14979","RelatedDescription":"Merged pull request \"Fix implementation of GCToOSInterface::VirtualCommit to ditch the pages\" (#14979) at dotnet/coreclr","RelatedBody":"The GC depends on the pages to be zeroed out when they are mapped in again"},{"Id":"6840995026","Type":"IssuesEvent","CreatedAt":"2017-11-11T07:21:18","Actor":"tmds","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13489","RelatedDescription":"Closed issue \"cgroup limits are not detected in docker\" (#13489) at dotnet/coreclr","RelatedBody":"Triggered by the discussion at https://github.com/aspnet/KestrelHttpServer/issues/1260, I'm having a look at the cgroup code in coreclr.\r\n\r\nThe first problem I encounter is the code isn't properly parsing the mountinfo when the mountpoint contains a dash. PR: https://github.com/dotnet/coreclr/pull/13488\r\n\r\nThe next problem I have is the limits aren't found.\r\nThe code is looking for a mountpoint in the `/proc/self/mountinfo` file and then combines that with a path it finds under /`proc/self/cgroup`.\r\n\r\nI ran a container on rhel7.4+docker and one on minishift(= local instance of openshift, which is using kubernetes as an orchectrator) and the limits are not found at that location.\r\n\r\nInstead they are present directly under the mount path.\r\n\r\nFor example:\r\n`mountpoint`:\r\n```\r\n396 394 0:21 /kubepods/besteffort/pod9a18ffb8-8513-11e7-b26e-7e29fbe2a5a3/d28e0087cf8f3f0429f755d60b0de415b20fcf76736ded7bab6e30e7b739ee36 /sys/fs/cgroup/cpu ro,nosuid,nodev,noexec,relatime - cgroup cgroup rw,cpu\r\n```\r\n`cgroup`\r\n```\r\n2:cpu:/kubepods/besteffort/pod9a18ffb8-8513-11e7-b26e-7e29fbe2a5a3/d28e0087cf8f3f0429f755d60b0de415b20fcf76736ded7bab6e30e7b739ee36\r\n```\r\n```\r\n$ ls /sys/fs/cgroup/cpu                                                                                                                                                                                                             \r\ncgroup.clone_children  cgroup.procs  cpu.cfs_period_us  cpu.cfs_quota_us  cpu.rt_period_us  cpu.rt_runtime_us  cpu.shares  cpu.stat  notify_on_release  tasks\r\n```\r\n\r\ncc @janvorli @benaadams @markvincze @rahku @gboucher90"},{"Id":"6840992275","Type":"IssuesEvent","CreatedAt":"2017-11-11T07:18:44","Actor":"tmds","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14991","RelatedDescription":"Opened issue \".NET Core 2.0.3 runs OOM in docker\" (#14991) at dotnet/coreclr","RelatedBody":"As reported by @emanuelbalea here: https://github.com/dotnet/coreclr/issues/13489#issuecomment-343416765"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6842687183","Type":"PullRequestEvent","CreatedAt":"2017-11-12T05:24:59","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8001","RelatedDescription":"Opened pull request \"Removing the MyGet 'dotnet-core' from the Nuget.config \" (#8001) at dotnet/cli","RelatedBody":""},{"Id":"6842673514","Type":"IssuesEvent","CreatedAt":"2017-11-12T05:11:33","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7504","RelatedDescription":"Closed issue \"Implicit restore is really confusing if you pass any console logger parameters\" (#7504) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1.  dotnet build \"C:\\Users\\davkean\\Source\\Repos\\ConsoleApp90\\ConsoleApp90\\ConsoleApp90.csproj\" /clp:Summary\r\n\r\n## Expected  behavior\r\n```\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  ConsoleApp90 -> C:\\Users\\davkean\\Source\\Repos\\ConsoleApp90\\ConsoleApp90\\bin\\Debug\\netcoreapp1.1\\ConsoleApp90.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n```\r\n\r\n## Actual behavior\r\n```\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.41\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  ConsoleApp90 -> C:\\Users\\davkean\\Source\\Repos\\ConsoleApp90\\ConsoleApp90\\bin\\Debug\\netcoreapp1.1\\ConsoleApp90.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n```\r\n\r\n## Environment data\r\n```\r\n.NET Command Line Tools (2.0.1-servicing-006933)\r\n\r\nProduct Information:\r\n Version:            2.0.1-servicing-006933\r\n Commit SHA-1 hash:  4434a8a832\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.1-servicing-006933\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6842666142","Type":"IssuesEvent","CreatedAt":"2017-11-12T05:04:25","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7587","RelatedDescription":"Closed issue \"dotnet build / run taking too long due to enforced default restore\" (#7587) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n* Create a new empty web project.\r\n* Run dotnet build\r\n* Run dotnet run\r\n* Compared to 1.x, it takes around 2-4x times than before.\r\n* Run the same commands with --no-restore . Notice it's faster.\r\n\r\n## Expected  behavior\r\n* I am the developer. I am solely responsible for running dotnet restore in case I have missing packages.\r\n* Commands should run with --no-restore as default, or at least have a global flag (or similar to .npmrc) to set it up. \r\n\r\n## Actual behavior\r\n* dotnet restore is being enforced prior to build/run, so development isn't as streamlined as it used to be, it's slow. **SLOW**.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n![image](https://user-images.githubusercontent.com/6304136/30001374-7ec21a00-9049-11e7-9b76-c859c0c789fd.png)\r\n"},{"Id":"6842341505","Type":"IssuesEvent","CreatedAt":"2017-11-12T00:10:04","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7874","RelatedDescription":"Closed issue \"cli-tool: adding dynamic dependency\" (#7874) at dotnet/cli","RelatedBody":"Given a cli-tool installed into a project (via DotNetCliToolReference). The tool has its own dependencies which set up in generated `project.assets.json` in `.tools` folder so that the tool run can and discover needed assemblies. That's fine. But what if we want to add some dynamic dependency for the tool, like a \"provider\" or \"plugin\".\r\nThat is I want to add an assembly so that the tool can load it.\r\nJust an abstract example:\r\n```\r\ndotnet mygenerator sql -provider:MyProduct.Storage.MsSqlProvider,MyProduct.Storage.MsSql\r\n```\r\nhere `MyProduct.Storage.MsSqlProvider,MyProduct.Storage.MsSql` is a fully-quallified class name which I want the cli-tool to load. But it can't because it can't see that assembly even if it's installed besides in `packages` folder.\r\n\r\nDoes I understand correctly that currently it's not possible to use the mentioned scenario (load a type in cli-tool which wasn't known at compile-time)?\r\n\r\nIn case I'm correct I'd suggest support something like this:\r\n```\r\n  </ItemGroup>\r\n    <DotNetCliToolReference Include=\"MyDotnetCliTool\" Version=\"*\">\r\n      <PackageReference Include=\"MyProduct.Storage.MsSql\" Version=\"*\" />\r\n    </DotNetCliToolReference>\r\n  </ItemGroup>\r\n```\r\n\r\nThen of cause adding references for tools should be supported by `dotnet cli` (but after implemented long awaited https://github.com/NuGet/Home/issues/4901)"},{"Id":"6842312920","Type":"IssuesEvent","CreatedAt":"2017-11-11T23:46:07","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/6197","RelatedDescription":"Closed issue \"dotnet watch test encoding error and always waiting\" (#6197) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\ndotnet watch test\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n dotnet watch test\r\nwatch : Started\r\nBuild started, please wait...\r\nBuild completed.\r\n\r\nTest run for D:\\code\\SMCore\\SMCore.XUnitTest\\bin\\Debug\\netcoreapp1.1\\SMCore.XUnitTest.dll(.NETCoreApp,Version=v1.1)\r\nMicrosoft (R) ▒▒▒▒ִ▒▒▒▒▒▒▒й▒▒߰汾 15.0.0.0\r\n▒▒Ȩ▒▒▒▒ (C) Microsoft Corporation▒▒▒▒▒▒▒▒▒▒Ȩ▒▒▒▒\r\n\r\n▒▒▒▒▒▒▒▒▒▒▒▒ִ▒У▒▒▒▒Ժ▒...\r\n[xUnit.net 00:00:01.2167924]   Discovering: SMCore.XUnitTest\r\n[xUnit.net 00:00:01.3112492]   Discovered:  SMCore.XUnitTest\r\n[xUnit.net 00:00:01.3481981]   Starting:    SMCore.XUnitTest\r\n[xUnit.net 00:00:01.4749998]   Finished:    SMCore.XUnitTest\r\n\r\n▒ܲ▒▒▒: 1▒▒▒▒ͨ▒▒: 1▒▒ʧ▒▒: 0▒▒▒▒▒▒▒▒: 0▒▒\r\n▒▒▒▒▒▒▒гɹ▒▒▒\r\n▒▒▒▒ִ▒▒ʱ▒▒: 2.4843 ▒▒\r\n\r\n\r\nwatch : Exited\r\nwatch : Waiting for a file to change before restarting dotnet...\r\n\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n dotnet --info\r\n.NET Command Line Tools (2.0.0-preview1-005683)\r\n\r\nProduct Information:\r\n Version:            2.0.0-preview1-005683\r\n Commit SHA-1 hash:  6866bc2f4a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0-preview1-005683\\\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6842303251","Type":"IssuesEvent","CreatedAt":"2017-11-11T23:38:08","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7346","RelatedDescription":"Closed issue \"Suggestion: Use the package name from Nuget site instead of the name user enters when running \"dotnet add package\" command\" (#7346) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nrun the follow commands (I run them on Mac OS):\r\n\r\n1. `mkdir demo`\r\n2. `cd demo`\r\n3. `dotnet new console`\r\n4. `dotnet add package microsoft.aspnetcore.mvc.core`\r\n5. `vim demo.csproj`\r\n\r\nLook at the `PackageReference` element in demo.csproj\r\n\r\n## Expected  behavior\r\n`<PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />`\r\n\r\n## Actual behavior\r\n`<PackageReference Include=\"microsoft.aspnetcore.mvc.core\" Version=\"1.1.3\" />`\r\n\r\n## Explanation\r\n\r\nI typed commands in all lower-case for faster typing speed and commands were run successfully, but in .csproj file, it would better be `Microsoft.AspNetCore.Mvc.Core` instead of `microsoft.aspnetcore.mvc.core`.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (1.0.1)\r\n\r\nProduct Information:\r\n Version:            1.0.1\r\n Commit SHA-1 hash:  005db40cd1\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/1.0.1\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6842301270","Type":"IssuesEvent","CreatedAt":"2017-11-11T23:36:26","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7583","RelatedDescription":"Closed issue \"`dotnet run -p` doesn't work with asp.net apps\" (#7583) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. `dotnet new sln -o Project`\r\n2. `cd Project`\r\n3. `dotnet new console -o ConsoleNet` then `dotnet run -p ConsoleNet/` (works as expected)\r\n4. `dotnet new mvc -o MvcNet` then `dotnet run -p MvcNet/MvcNet.csproj` (got an exception)\r\n5. Or `dotnet new angular -o AngularNet`, `cd AngularNet`, `npm i`, `cd ..` then `dotnet run -p AngularNet/` (another exception)\r\n\r\n## Expected  behavior\r\nThe apps are working without any issue using `dotnet run -p` and not having to change the current directory to app's location!\r\n\r\n## Actual behavior\r\ndotnet run -p MvcNet/MvcNet.csproj\r\n```\r\n: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[0]\r\n      User profile is available. Using '/home/badersur/.aspnet/DataProtection-Keys' as key repository; keys will not be encrypted at rest.\r\nHosting environment: Development\r\nContent root path: /home/badersur/Coding/Testing/DOTNET2/Project\r\nNow listening on: http://localhost:5000\r\nApplication started. Press Ctrl+C to shut down.\r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]\r\n      Request starting HTTP/1.1 GET http://localhost:5000/  \r\ninfo: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[1]\r\n      Executing action method MvcNet.Controllers.HomeController.Index (MvcNet) with arguments ((null)) - ModelState is Valid\r\nfail: Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewResultExecutor[3]\r\n      The view 'Index' was not found. Searched locations: /Views/Home/Index.cshtml, /Views/Shared/Index.cshtml\r\ninfo: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[2]\r\n      Executed action MvcNet.Controllers.HomeController.Index (MvcNet) in 136.6913ms\r\nfail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[0]\r\n      An unhandled exception has occurred while executing the request\r\nSystem.InvalidOperationException: The view 'Index' was not found. The following locations were searched:\r\n/Views/Home/Index.cshtml\r\n/Views/Shared/Index.cshtml\r\n   at Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult.EnsureSuccessful(IEnumerable`1 originalLocations)\r\n   at Microsoft.AspNetCore.Mvc.ViewResult.<ExecuteResultAsync>d__26.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultAsync>d__19.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResultFilterAsync>d__24.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__22.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\r\n      Request finished in 669.167ms 500 text/html; charset=utf-8\r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]\r\n      Request starting HTTP/1.1 GET http://localhost:5000/favicon.ico  \r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\r\n      Request finished in 16.2709ms 404 \r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]\r\n      Request starting HTTP/1.1 GET http://localhost:5000/  \r\ninfo: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[1]\r\n      Executing action method MvcNet.Controllers.HomeController.Index (MvcNet) with arguments ((null)) - ModelState is Valid\r\nfail: Microsoft.AspNetCore.Mvc.ViewFeatures.Internal.ViewResultExecutor[3]\r\n      The view 'Index' was not found. Searched locations: /Views/Home/Index.cshtml, /Views/Shared/Index.cshtml\r\ninfo: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[2]\r\n      Executed action MvcNet.Controllers.HomeController.Index (MvcNet) in 5.2926ms\r\nfail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[0]\r\n      An unhandled exception has occurred while executing the request\r\nSystem.InvalidOperationException: The view 'Index' was not found. The following locations were searched:\r\n/Views/Home/Index.cshtml\r\n/Views/Shared/Index.cshtml\r\n   at Microsoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult.EnsureSuccessful(IEnumerable`1 originalLocations)\r\n   at Microsoft.AspNetCore.Mvc.ViewResult.<ExecuteResultAsync>d__26.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultAsync>d__19.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResultFilterAsync>d__24.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__22.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\r\n      Request finished in 19.9242ms 500 text/html; charset=utf-8\r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]\r\n      Request starting HTTP/1.1 GET http://localhost:5000/favicon.ico  \r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\r\n      Request finished in 0.2425ms 404 \r\n^CApplication is shutting down...\r\n```\r\n\r\ndotnet run -p AngularNet/\r\n```\r\n: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[0]\r\n      User profile is available. Using '/home/badersur/.aspnet/DataProtection-Keys' as key repository; keys will not be encrypted at rest.\r\n\r\nUnhandled Exception: System.AggregateException: One or more errors occurred. (Webpack dev middleware failed because of an error while loading 'aspnet-webpack'. Error was: Error: Cannot find module 'aspnet-webpack'\r\n    at Function.Module._resolveFilename (module.js:470:15)\r\n    at Function.Module._load (module.js:418:25)\r\n    at Module.require (module.js:498:17)\r\n    at require (internal/module.js:20:19)\r\n    at Object.<anonymous> (/tmp/l2hettap.2ns:83:19)\r\n    at __webpack_require__ (/tmp/l2hettap.2ns:20:30)\r\n    at createWebpackDevServer (/tmp/l2hettap.2ns:62:26)\r\n    at /tmp/s2vwquii.3rm:114:19\r\n    at IncomingMessage.<anonymous> (/tmp/s2vwquii.3rm:133:38)\r\n    at emitNone (events.js:86:13)\r\nCurrent directory is: /home/badersur/Coding/Testing/DOTNET2/Project\r\n) ---> Microsoft.AspNetCore.NodeServices.HostingModels.NodeInvocationException: Webpack dev middleware failed because of an error while loading 'aspnet-webpack'. Error was: Error: Cannot find module 'aspnet-webpack'\r\n    at Function.Module._resolveFilename (module.js:470:15)\r\n    at Function.Module._load (module.js:418:25)\r\n    at Module.require (module.js:498:17)\r\n    at require (internal/module.js:20:19)\r\n    at Object.<anonymous> (/tmp/l2hettap.2ns:83:19)\r\n    at __webpack_require__ (/tmp/l2hettap.2ns:20:30)\r\n    at createWebpackDevServer (/tmp/l2hettap.2ns:62:26)\r\n    at /tmp/s2vwquii.3rm:114:19\r\n    at IncomingMessage.<anonymous> (/tmp/s2vwquii.3rm:133:38)\r\n    at emitNone (events.js:86:13)\r\nCurrent directory is: /home/badersur/Coding/Testing/DOTNET2/Project\r\n\r\n   at Microsoft.AspNetCore.NodeServices.HostingModels.HttpNodeInstance.<InvokeExportAsync>d__7`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance.<InvokeExportAsync>d__13`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.NodeServices.NodeServicesImpl.<InvokeExportWithPossibleRetryAsync>d__10`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.NodeServices.NodeServicesImpl.<InvokeExportWithPossibleRetryAsync>d__10`1.MoveNext()\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)\r\n   at Microsoft.AspNetCore.Builder.WebpackDevMiddleware.UseWebpackDevMiddleware(IApplicationBuilder appBuilder, WebpackDevMiddlewareOptions options)\r\n   at AngularNet.Startup.Configure(IApplicationBuilder app, IHostingEnvironment env) in /home/badersur/Coding/Testing/DOTNET2/Project/AngularNet/Startup.cs:line 34\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Hosting.ConventionBasedStartup.Configure(IApplicationBuilder app)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication()\r\n   at Microsoft.AspNetCore.Hosting.WebHostBuilder.Build()\r\n   at AngularNet.Program.BuildWebHost(String[] args) in /home/badersur/Coding/Testing/DOTNET2/Project/AngularNet/Program.cs:line 21\r\n   at AngularNet.Program.Main(String[] args) in /home/badersur/Coding/Testing/DOTNET2/Project/AngularNet/Program.cs:line 17\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.1.0-preview1-007102)\r\n\r\nProduct Information:\r\n Version:            2.1.0-preview1-007102\r\n Commit SHA-1 hash:  abaf4aebc9\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  17.04\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /home/badersur/Downloads/dotnet/sdk/2.1.0-preview1-007102/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview2-25616-02\r\n  Build    : 8aa34a95bad481e1b5e4c8286e5cb2d7cb6ed943\r\n"},{"Id":"6842085256","Type":"IssuesEvent","CreatedAt":"2017-11-11T20:57:49","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/6495","RelatedDescription":"Closed issue \"Publish a .NET Core 1.0 with .NET Core 1.1 dependencies\" (#6495) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1) Create a project targeting netcoreapp1.0\r\n2) Add a dependency that on .NET Core 1.1 like `Microsoft.Extensions.Logging 1,1,1`\r\n3) Execute `dotnet publish`\r\n\r\n## Expected  behavior\r\nThe publish step fail with an error about dependencies requiring a new version then the target framework. This would keep users informed when they are pulling in libraries out of the LTS.\r\n\r\n## Actual behavior\r\nPublish succeeds but the publish folder gets inflated pulling .NET Core 1.1 system packages that are not part of the LTS.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (1.0.3)\r\n\r\nProduct Information:\r\n Version:            1.0.3\r\n Commit SHA-1 hash:  37224c9917\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.3\r\n\r\n\r\n\r\n\r\n"},{"Id":"6841934153","Type":"IssuesEvent","CreatedAt":"2017-11-11T19:16:38","Actor":"adamvoss","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8000","RelatedDescription":"Opened issue \"cli fails in unhelpful ways on long paths on Windows\" (#8000) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Clone https://github.com/adamvoss/dotnet-cli-longpath-bug to a single-character long directory at a drive root on Windows.  Ex (`C:/r/`).\r\n2. CD to the nested directories **190000000**, **200000000**, **210000000**, **220000000**, **230000000**\r\n3. Run `dotnet run --project src`\r\n\r\n(bug was originally discovered with a project trying to build on CI infrastructure that  has a longer base-path than local development)\r\n\r\n## Expected  behavior\r\nEvery run would print \"Hello World!\"\r\n\r\n## Actual behavior\r\n**190000000**: Prints \"Hello World!\"\r\n**200000000**: Fails due to `Invalid runtimeconfig.json` error\r\n**210000000**: Fails with `C:\\Program Files\\dotnet\\sdk\\2.0.2\\Microsoft.Common.CurrentVersion.targets(4052,5): error MSB3030: Could not copy the file \"obj\\Debug\\netcoreapp2.0\\src.dll\" because it was not found.`\r\n**220000000**:/**230000000** Fails because `The type or namespace name 'System' could not be found in the global namespace (are you missing an assembly reference?)` (and similar)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\ndotnet --info\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6841842240","Type":"PullRequestEvent","CreatedAt":"2017-11-11T18:15:26","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7998","RelatedDescription":"Merged pull request \"Merge release/15.5 to master\" (#7998) at dotnet/cli","RelatedBody":".\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6842646074","Type":"IssuesEvent","CreatedAt":"2017-11-12T04:49:34","Actor":"WilliamABradley","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/581","RelatedDescription":"Opened issue \"Using System.IO.FileSystem.AccessControl on Android causes Missing Assembly Error\" (#581) at dotnet/standard","RelatedBody":"Is System.IO.FileSystem.AccessControl Windows Only?\r\nThe list of supported platforms seems to include other Xamarin platforms, however, when trying to install the package on an Xamarin Android App, compilation is fine, but a Runtime Exception occurs.\r\n\r\nMessage:\r\n```\r\n11-12 04:42:14.131 D/Mono    ( 5846): Assembly Loader probing location: 'System.IO.FileSystem.AccessControl'.\r\n11-12 04:42:14.131 F/monodroid-assembly( 5846): Could not load assembly 'System.IO.FileSystem.AccessControl' during startup registration.\r\n11-12 04:42:14.131 F/monodroid-assembly( 5846): This might be due to an invalid debug installation.\r\n11-12 04:42:14.131 F/monodroid-assembly( 5846): A common cause is to 'adb install' the app directly instead of doing from the IDE.\r\n```\r\n\r\nI am trying to use this Package so I can check if a file can be Deleted, using GetAccessControl() on a FileInfo or DirectoryInfo object and checking if the Rules contain a FileSystemRight for Delete with the current Principal of `WindowsIdentity.Current`.\r\n\r\nThis Package appears to fail even if it isn't referenced by any code.\r\n\r\nCompilation and Runtime appears to work fine on UWP."},{"Id":"6841502815","Type":"IssuesEvent","CreatedAt":"2017-11-11T14:28:40","Actor":"JanEggers","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/580","RelatedDescription":"Opened issue \"Visual Studio uses netstandard1.3  instead of net452 when consumed by a net461 project\" (#580) at dotnet/standard","RelatedBody":"i am contributing to a library https://github.com/chkr1011/MQTTnet this library targets netstandard1.3 and net452.\r\n\r\nrecently we get complaints by consumers of the library that we have added so many dependencies.\r\n\r\nif a project targeting net461 all dependencies that are required for netstandard 1.3 are forced on that project. \r\n\r\nwhy is that the case?\r\n\r\nMy understanding is that visual studio should use net452 dlls when targeting net462 not netstandard1.3 + added polyfill dependencies\r\n\r\n"},{"Id":"6839763148","Type":"IssuesEvent","CreatedAt":"2017-11-10T20:44:21","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/547","RelatedDescription":"Closed issue \".NET Framework 4.7.1 with .NET Standard 2.0 library - missing/invalid dll\" (#547) at dotnet/standard","RelatedBody":"Hello,\r\nI'm working on a .NET Standard 2.0 library that references a .NET Framework library, specifically the [**Accord.Math**](https://www.nuget.org/packages/Accord.Math/) library, which is a .NET Framework library that is correctly loaded into the .NET Standard 2.0 library (I guess through that new compatibility layer).\r\n\r\nThe whole thing works fine and I have no problems whatsoever as long as I reference the .NET Standard 2.0 library from a .NET Core 2.0 program.\r\n\r\nThe problem is that I need to use the library from a .NET Framework program too, so I've installed the .NET Framework 4.7.1 preview to test it out, since it should support .NET Standard 2.0 libraries now.\r\n\r\nIf I just reference the .NET Standard 2.0 library like I did from the .NET Core 2.0 program though, I get the following exception as soon as the library uses the Accord.Math library:\r\n\r\n> Unhandled exception 'System.IO.FileNotFoundException' in mscorlib.dll\r\nCould not load the file or assembly 'Accord.Math, Version=3.8.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. Could not find the target file.\r\n\r\nThis wasn't expected, since the same exact code is working fine from the .NET Core 2.0 program, and a .NET Framework 4.7.1 program should behave the same when using a .NET Standard 2.0 library.\r\nJust to make a test, I've tried referencing the same Accord.Math library from the program too, and I got this other exception:\r\n\r\n> Unhandled exception 'System.IO.FileLoadException' in mscorlib.dll\r\nCould not load file or assembly 'Accord.Math, Version=3.8.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n\r\nI'm not sure on how to proceed here, shouldn't the .NET Standard 2.0 library I'm referencing just works, without the need to manually tweak anything else, since I'm targeting .NET Framework 4.7.1?\r\n\r\nThank you for your help!\r\nSergio\r\n\r\nP.S.\r\nJust in case, if that helps, here's a [link to the library](https://github.com/Sergio0694/NeuralNetwork.NET/tree/feature_net-framework4.7.1).\r\n\r\n"},{"Id":"6839745897","Type":"IssuesEvent","CreatedAt":"2017-11-10T20:39:40","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/552","RelatedDescription":"Closed issue \".NET Framework 4.7.1 class library with .NET Standard 2.0 nuget package.\" (#552) at dotnet/standard","RelatedBody":"Hi, \r\n\r\nI have a problem with a 4.7.1 Class Library (.Net Framework) referencing Microsoft.AspNetCore (Or any other .net standard nuget package.) using PackageReference.\r\n\r\nTo reproduce the problem : \r\n\r\n- Create a new Class Library (.Net Framework) that target framework 4.7.1\r\n- Add Microsoft.AspNetCore nuget package using PackageReference.\r\n- Call any method from the nuget package.\r\n- You can try using simple equals \r\n\r\n`namespace ClassLibrary1\r\n{\r\n    public class Class1\r\n    {\r\n        public Class1()\r\n        {\r\n            WebHost.Equals(0);\r\n        }\r\n    }\r\n}`\r\n\r\nYou will get error :\r\n\r\nError CS0012 The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n\r\nSeems like 4.7.1 is not resolved as a .net standard 2.0 compatible version of the .net framework.\r\n\r\nThanks\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6842541066","Type":"PullRequestEvent","CreatedAt":"2017-11-12T03:12:46","Actor":"KostaVlev","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25200","RelatedDescription":"Opened pull request \"Add Math.cs performance tests.\" (#25200) at dotnet/corefx","RelatedBody":"Add Math.cs performance tests. (#18765)"},{"Id":"6842477180","Type":"IssuesEvent","CreatedAt":"2017-11-12T02:12:03","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24028","RelatedDescription":"Closed issue \"stack smashing detected\" (#24028) at dotnet/corefx","RelatedBody":"when I was debuging the project with VSCode on ubuntu16.04,I met with the \"stack smashing detected\" exception and the project paused immediately.This exception occurs when the program try to load a .so file that is programed in C and compiled by GCC on ubuntu16.04 .The program attempt to access a function defined in the .so file and then the \"stack smashing detected\" exception comes along.I try to fix it but failed\r\n## the code is here:\r\n`[DllImport(\"TripleDES.dll\", CallingConvention = CallingConvention.Cdecl)]\r\nstatic extern int data_convert([MarshalAs(UnmanagedType.LPArray)]byte[] indata, int in_len, [MarshalAs(UnmanagedType.LPArray)]byte[] outdata, int flag, [MarshalAs(UnmanagedType.LPArray)] byte[] key);`\r\n## I use the data_convert function here:\r\n`byte[] toEncrypt = Encoding.UTF8.GetBytes(this.GetString(strString));\r\n byte[] key = Encoding.UTF8.GetBytes(this.GetKeyCode(this.Keys));\r\n byte[] result = new byte[256];\r\n int count = data_convert(toEncrypt, en_len, result, 1, key);\r\n byte[] resultBytes = new byte[count];\r\n Array.Copy(result, 0, resultBytes, 0, count)`\r\n## the data_convert function in the .c file :\r\n`int  data_convert(unsigned char *in,int in_len,unsigned char * out,char flag,unsigned char *key)`"},{"Id":"6842463547","Type":"IssuesEvent","CreatedAt":"2017-11-12T01:59:26","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/10455","RelatedDescription":"Closed issue \"Add an additional overload to `Marshal.Copy`\" (#10455) at dotnet/corefx","RelatedBody":"**Issue:**\nWhen writing interop code, it may be desirable to copy memory from one location to another. However, there is currently no managed API for doing so. As such, the user must manually implement such a function, which can be error prone and cannot take advantage of certain optimization techniques (such as using SIMD registers to copy aligned 16-byte blocks).\n\n**Workaround:**\nUse `Buffer.MemoryCopy` which is non-optimal for a few reasons (see https://github.com/dotnet/corefx/issues/10455#issuecomment-236372132), manually implement an API for marshalling memory, or `DllImport` the `memcpy` function from the C Runtime (this is non optimal as it does not necessarily exist in the same library on each platform).\n\n**Request:**\nAn additional overload to `Marshal.Copy` should be provided in the form of `public static void Copy(IntPtr source, IntPtr destination, int length)`. This would ideally end up as a call to `memcpy` behind the scenes.\n"},{"Id":"6842377979","Type":"PullRequestEvent","CreatedAt":"2017-11-12T00:41:25","Actor":"Drawaes","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25199","RelatedDescription":"Opened pull request \"Reverts Cancellation on SslStream\" (#25199) at dotnet/corefx","RelatedBody":"Checking that this now passes the outerloop"},{"Id":"6842350357","Type":"PullRequestEvent","CreatedAt":"2017-11-12T00:17:26","Actor":"Drawaes","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25198","RelatedDescription":"Opened pull request \"[WIP] Test Only to compare outerloop for SslStream\" (#25198) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6842654745","Type":"PullRequestEvent","CreatedAt":"2017-11-12T04:56:13","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23139","RelatedDescription":"Opened pull request \"Add support for recursive patterns in `is`\" (#23139) at dotnet/roslyn","RelatedBody":"- Add support for recursive patterns in `is`.\r\n- Add the discard pattern `_`.\r\n- Add skeletal IOperation support.\r\n"},{"Id":"6842455026","Type":"IssuesEvent","CreatedAt":"2017-11-12T01:51:22","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23138","RelatedDescription":"Opened issue \"Snippet Misbehavior: value is overwritten\" (#23138) at dotnet/roslyn","RelatedBody":"(using VS v15.3.5)\nToday I noticed a new problem with some of my snippets. I'll give an example using one of the simplest ones--prop.\n\n1. enter &quot;prop&quot;, hit TAB\n2. for the type, enter List&lt;int&gt; (hit TAB)\n3. with the property name selected, enter &quot;TestProp&quot; (hit TAB)\nAs soon as TAB is pressed, the &quot;TestProp&quot; is replaced with &quot;list&quot;. The expected behaviour is that each TAB will simply cycle through each item without replacing anything. \n\nIf I repeat the same thing using type int instead of List&lt;int&gt;, there is no problem. Also, if I use List&lt;int&gt; as the type, but enter it *after* the property name is entered, no problem. \n\nI have also noticed this odd behavior with other snippets.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/133640/snippet-misbehavior-value-is-overwritten.html\nVSTS ticketId: 510916_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"6842405289","Type":"IssuesEvent","CreatedAt":"2017-11-12T01:05:53","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23137","RelatedDescription":"Opened issue \"c# CS0162 missing message for 'throw' after 'break'  in switch [Ide][\" (#23137) at dotnet/roslyn","RelatedBody":"string xxx = &quot;xxx&quot;;\n            switch (xxx)\n            {\n                case &quot;&quot;:\n                    throw new Exception(); \n                    break;                  // (A)\n\n                default:\n                    break;\n                    throw new Exception();  // (B)\n            }\n\nIn the code above (A) gives:\n\nCS0162 Unreachable code detected\n\n(B) gives no message.\n\nNot really important. But it did catch me.\n\nVS 4.7.02556\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/143804/c-cs0162-missing-message-for-throw-after-break-in.html\nVSTS ticketId: 519577_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"6842399749","Type":"PullRequestEvent","CreatedAt":"2017-11-12T01:01:01","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23136","RelatedDescription":"Opened pull request \"Disable 'use local function' in a few important language cases.\" (#23136) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/23118\r\nFixes https://github.com/dotnet/roslyn/issues/22672"},{"Id":"6842360095","Type":"PullRequestEvent","CreatedAt":"2017-11-12T00:25:24","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23135","RelatedDescription":"Opened pull request \"Do not offer 'var' if it would cause overload resolution issues.\" (#23135) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/23116"},{"Id":"6842211691","Type":"IssuesEvent","CreatedAt":"2017-11-11T22:27:42","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22592","RelatedDescription":"Closed issue \"Inappropriate generation of CS 1612\" (#22592) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVisual C# 2017 - 00369-60000-00001-AA549\r\n\r\n**Steps to Reproduce**:\r\nUnfortunately this error can be inappropriately generated when assigning to a property (i.e. invoking a property setter). An immutable struct can still have a valid property setter, as long as the property setter doesn't actually assign to any fields in the struct. For example, \r\n\r\n```csharp\r\n   public struct Relay { \r\n       public Relay(Func<string> getText, Action<string> setText) \r\n       { \r\n               this.GetText = getText; \r\n               this.SetText = setText; \r\n       } \r\n       private readonly Func<string> GetText; \r\n       private readonly Action<string> SetText; \r\n       public string Text { \r\n           get { return this.GetText(); } \r\n           set { this.SetText(value); } \r\n       } \r\n   } \r\n   class Example { \r\n       private Relay Relay { \r\n           get { return new Relay(() => this.text, t => { this.text = t; });  } \r\n       } \r\n       private string text; \r\n       public Method() { \r\n           var r = new Relay(); \r\n           r.Text = \"hello\"; // not a compile error (although there is a null reference) \r\n           this.Relay.Text = \"hello\";  // error 1612 inappropriately generated by the compiler \r\n           r = this.Relay; \r\n           r.Text = \"hello\"; // no compiler error is generated, and none would be appropriate\r\n   } \r\n```\r\n\r\n**Expected Behavior**:\r\nSee above. The compiler error should only be generated when a field in the struct is going to be assigned, not when a property is being assigned. \r\n\r\n**Actual Behavior**:\r\nThe compiler error is generated when assigning to a property, not only a field. \r\n\r\n"},{"Id":"6842211377","Type":"IssuesEvent","CreatedAt":"2017-11-11T22:27:27","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22459","RelatedDescription":"Closed issue \"Tuples in Attributes\" (#22459) at dotnet/roslyn","RelatedBody":"I'm using VS 2017.\r\n\r\nI tried to create a simple attribute class who's constructor accepts a single Tuple of type (some-enum,string). This compiles.\r\n\r\nHowever when I try to attach the attribute to some member in some class I get CS0181 \"Attribute constructor parameter 'Parameters' has type '(API.Disposition, string)', which is not a valid attribute parameter type\".\r\n\r\nThe attribute use in this case looks like this:\r\n\r\n`            [QueryParameters((Optional,\"gradeType\"))]\r\n`\r\n\r\nIf it's not a valid parameter type why does the attribute class itself compile fine? Here's the class itself:\r\n\r\n`    \r\n\r\n    [AttributeUsage(AttributeTargets.Field)]\r\n    public class QueryParametersAttribute : Attribute\r\n    {\r\n        public QueryParametersAttribute ((API.Disposition,string) Parameters)\r\n        {\r\n              // TBD\r\n        }\r\n    }\r\n\r\n`\r\n\r\nIncidentally, searching the web for CS0181 lists a result:\r\n\r\n**17.1.3 Attribute parameter types (C#) - msdn.microsoft.com**\r\n\r\nwhich when clicked leads to this unhelpful page:\r\n\r\nhttps://www.microsoft.com/en-us/download/details.aspx?id=55979\r\n\r\n"},{"Id":"6842210630","Type":"IssuesEvent","CreatedAt":"2017-11-11T22:26:53","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/13422","RelatedDescription":"Closed issue \"Implement shortcut of #if\" (#13422) at dotnet/roslyn","RelatedBody":"I have a idea about compiler.\nUsually when I writing an app I put lot of log same as below:\n\n```\n\n#if DEBUG\n            Console.WriteLine(\"Init Redis Provider\")\n#endif\n            Provider = new RedisProvider();\n\n#if DEBUG\n            Console.WriteLine(\"Init Kernel\");\n#endif\n            EFDataContext.RegisterEFDataService(Reflection.Kernel);\n\n#if DEBUG\n            Console.WriteLine(\"Start Web Server\");\n#endif\n            WebServer.LocalWebApi.Start();\n\n```\n\nFor make it easy I have a idea and I describe it by example at below:\n\n```\n\n#DEBUG Console.WriteLine(\"Init Redis Provider\")\nProvider = new RedisProvider();\n\n//OR\n#>DEBUG Console.WriteLine(\"Init Kernel\"); \nEFDataContext.RegisterEFDataService(Reflection.Kernel);\n\n//OR\n#?DEBUG Console.WriteLine(\"Start Web Server\");\nWebServer.LocalWebApi.Start();\n\n```\n"},{"Id":"6842209805","Type":"IssuesEvent","CreatedAt":"2017-11-11T22:26:13","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/11492","RelatedDescription":"Closed issue \"Comparing two versions of same dll\" (#11492) at dotnet/roslyn","RelatedBody":"Hi,\nMy requirement is to enumerate all the methods that are changed between two versions of same assembly. Essentially comparing IL of the two dlls. This should work cross plat as well. Any pointers would really help. Thanks\n"},{"Id":"6842209354","Type":"IssuesEvent","CreatedAt":"2017-11-11T22:25:53","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/3995","RelatedDescription":"Closed issue \"Roslyn vs DLR\" (#3995) at dotnet/roslyn","RelatedBody":"Given that roslyn can express all of the C# syntactic and semantic models, and dlr is pretty lightweight for language creations, which is recommended for creating a new programming language for the CLR. Thought the language i intent to create is a dynamic language, will using roslyn help me more when compared to dlr? I was first intending to use dlr to create the expression tree and the emit IL from it. But should I use roslyn? Are there any materials towards using roslyn for creating a programming language targeting clr?\n"},{"Id":"6842207976","Type":"IssuesEvent","CreatedAt":"2017-11-11T22:24:52","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23131","RelatedDescription":"Closed issue \"Unexpected behavior for is operator\" (#23131) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS 15.4.2 Project set to current minor version of C#.\r\n**Steps to Reproduce**:\r\n\r\n\r\n\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\tTestWithConcreteOption();\r\n\t\t\tTestWithInterfaceOption();\r\n\t\t\tTestWithDerivedOption();\r\n\t\t\tTestWithObjectOption();\r\n\r\n\t\t\tConsole.ReadKey();\r\n\t\t}\r\n\r\n\t\tprivate static void TestWithConcreteOption()\r\n\t\t{\r\n\t\t\tvar interfaceOption = CreateOption();\r\n\t\t\tvar context = CreateContext(interfaceOption);\r\n\t\t\tif (context is IToolContext<IGeneratorOption> gen)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithConcreteOption)} -> Expected behavior.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithConcreteOption)} -> Unexpected behavior.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static void TestWithInterfaceOption()\r\n\t\t{\r\n\t\t\tvar interfaceOption = CreateInterfaceOption();\r\n\t\t\tvar context = CreateContext(interfaceOption);\r\n\t\t\tif (context is IToolContext<IGeneratorOption> gen)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithInterfaceOption)} -> Expected behavior.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithInterfaceOption)} -> Unexpected behavior.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static void TestWithDerivedOption()\r\n\t\t{\r\n\t\t\tvar interfaceOption = CreateDerivedOption();\r\n\t\t\tvar context = CreateContext(interfaceOption);\r\n\t\t\tif (context is IToolContext<IGeneratorOption> gen)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithDerivedOption)} -> Expected behavior.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithDerivedOption)} -> Unexpected behavior.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static void TestWithObjectOption()\r\n\t\t{\r\n\t\t\tvar interfaceOption = CreateObjectOption();\r\n\t\t\tvar context = CreateContext(interfaceOption as IOption);\r\n\t\t\tif (context is IToolContext<IGeneratorOption> gen)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithObjectOption)} -> Expected behavior.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine($\"{nameof(TestWithObjectOption)} -> Unexpected behavior.\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static IOption CreateInterfaceOption()\r\n\t\t{\r\n\t\t\treturn CreateOption();\r\n\t\t}\r\n\r\n\t\tprivate static DefaultOption CreateDerivedOption()\r\n\t\t{\r\n\t\t\treturn new GeneratorOption();\r\n\t\t}\r\n\r\n\t\tprivate static object CreateObjectOption()\r\n\t\t{\r\n\t\t\treturn new GeneratorOption();\r\n\t\t}\r\n\r\n\t\tprivate static GeneratorOption CreateOption()\r\n\t\t{\r\n\t\t\treturn new GeneratorOption();\r\n\t\t}\r\n\r\n\t\tprivate static IToolContext<T> CreateContext<T>(T option) where T : class, IOption\r\n\t\t{\r\n\t\t\treturn new DefaultContext<T>(option);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic class GeneratorOption : DefaultOption, IGeneratorOption\r\n\t{\r\n\t}\r\n\r\n\tpublic class DefaultOption : IOption\r\n\t{\r\n\t\t\r\n\t}\r\n\r\n\tpublic class DefaultContext<T> : IToolContext<T> where T : class, IOption\r\n\t{\r\n\t\t/// <inheritdoc />\r\n\t\tpublic DefaultContext(IOption option)\r\n\t\t{\r\n\t\t\tOption = option;\r\n\t\t}\r\n\r\n\t\t/// <inheritdoc />\r\n\t\tpublic IOption Option { get; }\r\n\t}\r\n\r\n\tpublic interface IToolContext\r\n\t{\r\n\t}\r\n\r\n\tpublic interface IToolContext<out T> where T : class, IOption\r\n\t{\r\n\t\tIOption Option { get; }\r\n\t}\r\n\r\n\tpublic interface IGeneratorOption : IOption\r\n\t{\r\n\t}\r\n\r\n\tpublic interface IOption\r\n\t{\r\n\t}\r\n\r\n**Expected Behavior**:\r\n\r\nTestWithConcreteOption -> \"Expected behavior.\"\r\nTestWithInterfaceOption -> \"Expected behavior.\"\r\nTestWithDerivedOption -> \"Expected behavior.\"\r\nTestWithObjectOption -> \"Expected behavior.\"\r\n\r\n**Actual Behavior**:\r\n\r\nTestWithConcreteOption -> \"Expected behavior.\"\r\nTestWithInterfaceOption -> \"Unexpected behavior.\"\r\nTestWithDerivedOption -> \"Unexpected behavior.\"\r\nTestWithObjectOption -> \"Unexpected behavior.\"\r\n\r\nI would expect this to work the way i pointed out. Am i wrong in thinking that? \r\n\r\nIf pattern matching is merely a feature which works with compile time information this issue would make sense i suppose - however in that case i would expect an analyzer to point out this potential issue if that is possible.\r\n\r\n**PS: using \"as\" results in the same results.**\r\n**Only TestWithDerivedOption provides a diagnostic pointing out this potential flaw.**"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6842641455","Type":"PullRequestEvent","CreatedAt":"2017-11-12T04:45:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4918","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4918) at dotnet/corert","RelatedBody":""},{"Id":"6842285544","Type":"PullRequestEvent","CreatedAt":"2017-11-11T23:23:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4918","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4918) at dotnet/corert","RelatedBody":""},{"Id":"6842285224","Type":"PullRequestEvent","CreatedAt":"2017-11-11T23:23:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4917","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4917) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6842282004","Type":"PullRequestEvent","CreatedAt":"2017-11-11T23:20:43","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4917","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4917) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6842038517","Type":"PullRequestEvent","CreatedAt":"2017-11-11T20:25:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4916","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#4916) at dotnet/corert","RelatedBody":""},{"Id":"6842038124","Type":"PullRequestEvent","CreatedAt":"2017-11-11T20:25:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4916","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#4916) at dotnet/corert","RelatedBody":""},{"Id":"6841812711","Type":"PullRequestEvent","CreatedAt":"2017-11-11T17:56:47","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4908","RelatedDescription":"Merged pull request \"Manually port change that was missed by the CoreLib mirror\" (#4908) at dotnet/corert","RelatedBody":""},{"Id":"6841812226","Type":"PullRequestEvent","CreatedAt":"2017-11-11T17:56:26","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4915","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4915) at dotnet/corert","RelatedBody":""},{"Id":"6841565040","Type":"PullRequestEvent","CreatedAt":"2017-11-11T15:12:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4915","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4915) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6840922050","Type":"IssuesEvent","CreatedAt":"2017-11-11T06:12:53","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1588","RelatedDescription":"Closed issue \"Change the default for all SDK-based projects (including Web SDK) to include DebugSymbols in the project file for Release builds\" (#1588) at dotnet/sdk","RelatedBody":"DebugSymbols translates to \"debug+ optimize+\", which disables variable removal but leave other kinds of IL optimizations enabled.\r\n"},{"Id":"6840860448","Type":"PullRequestEvent","CreatedAt":"2017-11-11T05:13:22","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1725","RelatedDescription":"Opened pull request \"WIP Add reference metadata to indicate that RAR can skip dependency searching\" (#1725) at dotnet/sdk","RelatedBody":""},{"Id":"6840212822","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:51:15","Actor":"pranavkm","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1724","RelatedDescription":"Opened issue \"dotnet run with a TFM prints restore output to the command line\" (#1724) at dotnet/sdk","RelatedBody":"1. Create a new console application `dotnet new console`\r\n2. Do `dotnet run`. The first and only line in the output is from the app's execution (`Hello world!`)\r\n3. Do `dotnet run -f netcoreapp2.1`. \r\n\r\n**Expected:**\r\n`Hello world!`\r\n\r\n**Actual**\r\n```\r\nMicrosoft (R) Build Engine version 15.5.172.19382 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 12.52 ms for D:\\temp\\run-test\\run-test.csproj.\r\nHello World!\r\n```\r\n\r\n```dotnet --info\r\n.NET Command Line Tools (2.2.0-preview1-007522)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007522\r\n Commit SHA-1 hash:  d58fc6120d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   \\.dotnet\\x64\\sdk\\2.2.0-preview1-007522\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-25907-02\r\n  Build    : 5e5b627d019c82b11a718a90008ce4f737c7e401\r\n```\r\n\r\n\r\n\r\n"},{"Id":"6840007396","Type":"IssuesEvent","CreatedAt":"2017-11-10T21:49:30","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1647","RelatedDescription":"Closed issue \"System.Net.Http and System.IO.Compression .NET Standard facades need to be included when targeting .NET 4.7.1\" (#1647) at dotnet/sdk","RelatedBody":".NET 4.7.1 ships with support for the .NET Standard 2.0 APIs, as well as the necessary facades.  So it's not supposed to need any facades injected by the `ImplicitlyExpandNETStandardFacades` target.\r\n\r\nHowever, the in-box assembly versions of System.Net.Http and System.IO.Compression are less than the OOB and facade versions of those libraries.  This will be fixed in .NET 4.7.2, however for 4.7.1, we still need to inject just those two facades as necessary."},{"Id":"6839413218","Type":"IssuesEvent","CreatedAt":"2017-11-10T19:16:17","Actor":"bruno-garcia","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1722","RelatedDescription":"Closed issue \"Fails to compile on MacOS - works on Windows and Linux: error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0' and 'This can indicate a missing project reference'\" (#1722) at dotnet/sdk","RelatedBody":"Solution with tests 'netcoreapp2.0' and 'netstandard' libraries of different versions fails to compile on MacOS - works on Windows and Linux.\r\n\r\nTested with SDK versions: 2.0.0 and 2.0.2\r\n\r\nBesides working on Appveyor and Travis-CI (Ubuntu), I've also tested on Windows 10 and CentOS which builds without issues.\r\n\r\n- It fails on MacOS 10.12.6 and Travis-CI 'OSX' build:\r\n\r\nThe repo has badges for the [Travis](https://travis-ci.org/bruno-garcia/messaging/jobs/300089706) and [Appveyor](https://ci.appveyor.com/project/bruno-garcia/messaging) builds: \r\n\r\nRepro at: [https://github.com/bruno-garcia/messaging](https://github.com/bruno-garcia/messaging)\r\n\r\n### Note:\r\nOnly a single project is failing to build. It's a test project targeting 'netcoreapp2.0' and referencing projects: 'netstandard1.3' and 'netstandard2.0'\r\n\r\n### Steps to reproduce:\r\n\r\nEnvironment: MacOS with SDK 2.0.0 or 2.0.2\r\n1 - Checkout [this repo](https://github.com/bruno-garcia/messaging)\r\n2 - run `dotnet build`\r\n\r\n#### Error:\r\n/usr/local/share/dotnet/sdk/2.0.2/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.targets(114,5): error : Cannot find project info for '/Users/bruno/git/messaging/src/Serialization.Protobuf/Serialization.Protobuf.csproj'. This can indicate a missing project reference. [/Users/bruno/git/messaging/test/Serialization.ProtoBuf.Tests/Serialization.ProtoBuf.Tests.csproj]\r\n/usr/local/share/dotnet/sdk/2.0.2/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.targets(114,5): error : Cannot find project info for '/Users/bruno/git/messaging/src/Messaging.DependencyInjection.Serialization.Protobuf/Messaging.DependencyInjection.Serialization.Protobuf.csproj'. This can indicate a missing project reference. [/Users/bruno/git/messaging/test/Messaging.DependencyInjection.Serialization.ProtoBuf.Tests/Messaging.DependencyInjection.Serialization.ProtoBuf.Tests.csproj]\r\n\r\nBuilding directly the test project fails with a different error:\r\n`cd test/Messaging.DependencyInjection.Serialization.ProtoBuf.Tests && dotnet build`\r\n...\r\n```\r\nProtoBufMessagingBuilderExtensions.cs(12,21): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. [/Users/bruno/git/messaging/src/Messaging.DependencyInjection.Serialization.ProtoBuf/Messaging.DependencyInjection.Serialization.ProtoBuf.csproj]\r\nProtoBufMessagingBuilderExtensions.cs(12,13): error CS0012: The type 'Enum' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. [/Users/bruno/git/messaging/src/Messaging.DependencyInjection.Serialization.ProtoBuf/Messaging.DependencyInjection.Serialization.ProtoBuf.csproj]\r\nProtoBufMessagingBuilderExtensions.cs(13,30): error CS0012: The type 'IList<>' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. [/Users/bruno/git/messaging/src/Messaging.DependencyInjection.Serialization.ProtoBuf/Messaging.DependencyInjection.Serialization.ProtoBuf.csproj]\r\n```\r\n...\r\n\r\nFails also building with JetBrains Rider:\r\n\r\n`Microsoft.NET.Sdk.targets(114, 5): [null] Cannot find project info for '/Users/bgarc/git/messaging/src/Messaging.DependencyInjection.Serialization.Protobuf/Messaging.DependencyInjection.Serialization.Protobuf.csproj'. This can indicate a missing project reference.`"},{"Id":"6839286502","Type":"PullRequestEvent","CreatedAt":"2017-11-10T18:45:03","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1723","RelatedDescription":"Merged pull request \"Fix signing after retargeting to netcoreapp2.0\" (#1723) at dotnet/sdk","RelatedBody":""},{"Id":"6839282953","Type":"PullRequestEvent","CreatedAt":"2017-11-10T18:44:10","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1723","RelatedDescription":"Opened pull request \"Fix signing after retargeting to netcoreapp2.0\" (#1723) at dotnet/sdk","RelatedBody":""},{"Id":"6839178391","Type":"PullRequestEvent","CreatedAt":"2017-11-10T18:18:01","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1721","RelatedDescription":"Merged pull request \"[Perf] Retarget to .NET Core 2.0 and remove unnecessary assemblies\" (#1721) at dotnet/sdk","RelatedBody":"This removes 2 MB of files that were being copied unnecessarily to the netcoreapp folder of the sdk. They were:\r\n\r\n1. duplicates of shared framework assemblies (because dependencies pulled in 4.3.x/1.1 assemblies, but we targeted 1.0)\r\n\r\n2. nuget assemblies that are loaded from CLI directory\r\n\r\n3. core-setup dependencies that are loaded from CLI directory\r\n\r\nI'm doing this as step 1 to crossgen'ing the netcoreapp variant of the SDK. I didn't want to have to crossgen and sign the extra unnecessary files, which would slow down the build and make the bloat even bigger.\r\n"},{"Id":"6838354993","Type":"IssuesEvent","CreatedAt":"2017-11-10T15:22:02","Actor":"bruno-garcia","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1722","RelatedDescription":"Opened issue \"Fails to compile on MacOS - works on Windows and Linux: error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0' and 'This can indicate a missing project reference'\" (#1722) at dotnet/sdk","RelatedBody":"Solution with tests 'netcoreapp2.0' and 'netstandard' libraries of different versions fails to compile on MacOS - works on Windows and Linux.\r\n\r\nTested with SDK versions: 2.0.0 and 2.0.2\r\n\r\nBesides working on Appveyor and Travis-CI (Ubuntu), I've also tested on Windows 10 and CentOS which builds without issues.\r\n\r\n- It fails on MacOS 10.12.6 and Travis-CI 'OSX' build:\r\n\r\nThe repo has badges for the [Travis](https://travis-ci.org/bruno-garcia/messaging/jobs/300089706) and [Appveyor](https://ci.appveyor.com/project/bruno-garcia/messaging) builds: \r\n\r\nRepro at: [https://github.com/bruno-garcia/messaging](https://github.com/bruno-garcia/messaging)\r\n\r\n### Note:\r\nOnly a single project is failing to build. It's a test project targeting 'netcoreapp2.0' and referencing projects: 'netstandard1.3' and 'netstandard2.0'\r\n\r\n### Steps to reproduce:\r\n\r\nEnvironment: MacOS with SDK 2.0.0 or 2.0.2\r\n1 - Checkout [this repo](https://github.com/bruno-garcia/messaging)\r\n2 - run `dotnet build`\r\n\r\n#### Error:\r\n/usr/local/share/dotnet/sdk/2.0.2/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.targets(114,5): error : Cannot find project info for '/Users/bruno/git/messaging/src/Serialization.Protobuf/Serialization.Protobuf.csproj'. This can indicate a missing project reference. [/Users/bruno/git/messaging/test/Serialization.ProtoBuf.Tests/Serialization.ProtoBuf.Tests.csproj]\r\n/usr/local/share/dotnet/sdk/2.0.2/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.targets(114,5): error : Cannot find project info for '/Users/bruno/git/messaging/src/Messaging.DependencyInjection.Serialization.Protobuf/Messaging.DependencyInjection.Serialization.Protobuf.csproj'. This can indicate a missing project reference. [/Users/bruno/git/messaging/test/Messaging.DependencyInjection.Serialization.ProtoBuf.Tests/Messaging.DependencyInjection.Serialization.ProtoBuf.Tests.csproj]\r\n\r\nBuilding directly the test project fails with a different error:\r\n`cd test/Messaging.DependencyInjection.Serialization.ProtoBuf.Tests && dotnet build`\r\n...\r\n```\r\nProtoBufMessagingBuilderExtensions.cs(12,21): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. [/Users/bruno/git/messaging/src/Messaging.DependencyInjection.Serialization.ProtoBuf/Messaging.DependencyInjection.Serialization.ProtoBuf.csproj]\r\nProtoBufMessagingBuilderExtensions.cs(12,13): error CS0012: The type 'Enum' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. [/Users/bruno/git/messaging/src/Messaging.DependencyInjection.Serialization.ProtoBuf/Messaging.DependencyInjection.Serialization.ProtoBuf.csproj]\r\nProtoBufMessagingBuilderExtensions.cs(13,30): error CS0012: The type 'IList<>' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. [/Users/bruno/git/messaging/src/Messaging.DependencyInjection.Serialization.ProtoBuf/Messaging.DependencyInjection.Serialization.ProtoBuf.csproj]\r\n```\r\n...\r\n\r\nFails also building with JetBrains Rider:\r\n\r\n`Microsoft.NET.Sdk.targets(114, 5): [null] Cannot find project info for '/Users/bgarc/git/messaging/src/Messaging.DependencyInjection.Serialization.Protobuf/Messaging.DependencyInjection.Serialization.Protobuf.csproj'. This can indicate a missing project reference.`"},{"Id":"6835528679","Type":"PullRequestEvent","CreatedAt":"2017-11-10T01:42:19","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1721","RelatedDescription":"Opened pull request \"[Perf] Retarget to .NET Core 2.0 and remove unnecessary assemblies\" (#1721) at dotnet/sdk","RelatedBody":"This removes 2 MB of files that were being copied unnecessarily to the netcoreapp folder of the sdk. They were:\r\n\r\n1. duplicates of shared framework assemblies (because dependencies pulled in 4.3.x/1.1 assemblies, but we targeted 1.0)\r\n\r\n2. nuget assemblies that are loaded from CLI directory\r\n\r\n3. core-setup dependencies that are loaded from CLI directory\r\n\r\nI'm doing this as step 1 to crossgen'ing the netcoreapp variant of the SDK. I didn't want to have to crossgen and sign the extra unnecessary files, which would slow down the build and make the bloat even bigger.\r\n"},{"Id":"6835388788","Type":"IssuesEvent","CreatedAt":"2017-11-10T00:53:11","Actor":"davkean","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1720","RelatedDescription":"Opened issue \"ServerGarbageCollection is not honored in SDK project and TargetFramework net47\" (#1720) at dotnet/sdk","RelatedBody":"_From @Tornhoof on October 17, 2017 7:58_\n\nThe setting server garbage collection in the new SDK project format is not honored for TargetFramework net47, it works for netcoreapp 2.0\r\n```xml\r\n<ServerGarbageCollection>true</ServerGarbageCollection>\r\n```\r\n# Steps to repreoduce\r\n1. Create Console project\r\n2. TargetFramework net47\r\n3. Change project format to new format\r\n4. Add setting from above to property group\r\n5. Put in the main method:\r\n```csharp\r\nvar latencyMode = System.Runtime.GCSettings.LatencyMode;\r\nvar isServerGC = System.Runtime.GCSettings.IsServerGC;\r\nConsole.WriteLine($\"Server: {isServerGC}, Mode: {latencyMode}\");\r\n```\r\n## Expected result\r\n1. Output: ``Server: True, Mode: Interactive``\r\n## Actual result\r\n1. Output is: ``Server: False, Mode: Interactive`` \r\n\r\nNote: if you multi target the project with ``<TargetFrameworks>net47;netcoreapp2.0</TargetFrameworks``\r\nyou can see that the setting is properly used in .net core 2.0\r\n\r\nThis bug is kinda annoying since it means my Web App for ASP.NET Core 2.0 on .NET 4.7 is running on workstation GC and not on server background gc as it's usually done.\r\n\r\nAll my attempts to ``set complus_gcServer=true`` didn't make any difference.\r\n\r\nRepro:\r\n[ServerGcRepro.zip](https://github.com/dotnet/project-system/files/1390201/ServerGcRepro.zip)\r\n\r\nFor reference:\r\n```\r\n.NET-Befehlszeilentools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\nVS version is VS 2017 15.4.0\n\n_Copied from original issue: dotnet/project-system#2896_"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"927634989499301888","CreatedAt":"2017-11-06T20:33:10+00:00","UserScreenname":"dotnet","Text":"Windows Docker Tag Scheme Changed https://t.co/ULufUyjXq6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":35,"RawContent":null},{"Id":"926165116084658176","CreatedAt":"2017-11-02T19:12:25+00:00","UserScreenname":"dotnet","Text":"Great post and resources by @cesardelatorre: Modernize existing .NET apps with Windows Containers and #Azure https://t.co/c8HL8dfH4d #dotnet","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":75,"FavoriteCount":46,"RawContent":null},{"Id":"925135073921310720","CreatedAt":"2017-10-30T22:59:24+00:00","UserScreenname":"dotnet","Text":"Experience real time test discovery in Test Explorer https://t.co/niKJvslM5p #visualstudio","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":60,"FavoriteCount":38,"RawContent":null},{"Id":"923592986562142208","CreatedAt":"2017-10-26T16:51:42+00:00","UserScreenname":"dotnet","Text":"Wish you could run the code sample you read in a book? You can now with Azure Notebooks. https://t.co/evx8HPzzqe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":132,"FavoriteCount":78,"RawContent":null},{"Id":"923344981602942977","CreatedAt":"2017-10-26T00:26:13+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework images now support Windows Server 1709 https://t.co/enC2cjj2ds /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":22,"RawContent":null}]}},"RunOn":"2017-11-12T05:30:21.6100618Z","RunDurationInMilliseconds":8316}