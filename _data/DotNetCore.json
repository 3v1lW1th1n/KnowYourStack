{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"Today, we are releasing the January 2018 Security and Quality Rollup. Please avoid installing this update on Windows 7 or Windows Server 2008 R2. See .NET Framework January 2018 Rollup Known Issue...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":240,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7094391494","Type":"PullRequestEvent","CreatedAt":"2018-01-13T02:30:39","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15846","RelatedDescription":"Merged pull request \"Mark legacy ByRef-like types as ref in sources\" (#15846) at dotnet/coreclr","RelatedBody":"Delete special casing for these in the type loader"},{"Id":"7094346225","Type":"PullRequestEvent","CreatedAt":"2018-01-13T01:56:35","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15853","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-26112-06 (master)\" (#15853) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7094345675","Type":"PullRequestEvent","CreatedAt":"2018-01-13T01:56:11","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15850","RelatedDescription":"Merged pull request \"Do fast GC stress on some extreme tests\" (#15850) at dotnet/coreclr","RelatedBody":"Set COMPlus_FastGCStress=1 to avoid GC in the\r\n`CoreCLR!JIT_Stelem_Ref => CoreCLR!ArrayStoreCheck` path."},{"Id":"7094342581","Type":"PullRequestEvent","CreatedAt":"2018-01-13T01:53:53","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15822","RelatedDescription":"Merged pull request \"Fix ARM GCStress hole with byref write barrier helper\" (#15822) at dotnet/coreclr","RelatedBody":"When unrolling a STOREOBJ, we can generate multiple consecutive\r\nbyref helper calls. This helper has a unique calling convention\r\nwhere the dst and src addresses are modified by adding pointer\r\nsize to their original value (thus allowing consecutive helper\r\ncalls without reloading the dst/src addresses). So, for liveness\r\npurposes, the helper call kills the dst/src values. However, for\r\nGC purposes, it does not, as the registers still contain byref\r\npointers. We were, in the ARM case, reporting the r0/r1 registers\r\ndead after the first call, so a GC didn't update them, and a\r\nsecond call updated garbage.\r\n\r\nIn fixing this, I cleaned up the helper call kill handling a bit.\r\nI also fixed and improved RyuJIT/x86 write barrier kill modeling."},{"Id":"7094322697","Type":"PullRequestEvent","CreatedAt":"2018-01-13T01:40:06","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15786","RelatedDescription":"Merged pull request \"Added Append(Stringbuilder,int,int) and Append(StringBuilder) overlaod apis\" (#15786) at dotnet/coreclr","RelatedBody":"Fixes  https://github.com/dotnet/corefx/issues/4928\r\nTests Pr- https://github.com/dotnet/corefx/pull/26231\r\nPrevious Pr-  dotnet/coreclr#8615\r\n\r\nMost of the things are same as the previous PR.\r\n  \r\n  "},{"Id":"7094307123","Type":"IssuesEvent","CreatedAt":"2018-01-13T01:30:10","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15852","RelatedDescription":"Opened issue \"Dev10_535767 fails with GCStress=3\" (#15852) at dotnet/coreclr","RelatedBody":"For x86 Windows with `COMPlus_GCStress=3`, test baseservices\\compilerservices\\dynamicobjectproperties\\Dev10_535767\\Dev10_535767.cmd fails with output like this:\r\n\r\n```\r\n...\r\nRunning test TS:Random CS:Random 10000 entries...\r\nTestError: Node 87 wasn't collected even though it was unreachable\r\n```\r\n\r\nThe periodic job:\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0x3/\r\n\r\nBoth 58 and 57 show this failure.\r\n"},{"Id":"7094257671","Type":"IssuesEvent","CreatedAt":"2018-01-13T01:02:52","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15851","RelatedDescription":"Opened issue \"SlowTailCallArgs test fails with timeout for GCStress=3\" (#15851) at dotnet/coreclr","RelatedBody":"This recently added test (https://github.com/dotnet/coreclr/commit/1a67e84aca889cf94c716a7847cfe0b4d1ee62d6) fails in GCStress=3 jobs with timeout, e.g.:\r\n\r\nx64 Windows checked:\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_windows_nt_gcstress0x3/63/#showFailuresLink\r\n\r\nx86 Windows checked:\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x86_checked_windows_nt_gcstress0x3/58/#showFailuresLink\r\n\r\nSeems like it might need to be marked\r\n```\r\n<GCStressIncompatible>true</GCStressIncompatible>\r\n```\r\nin SlowTailCallArgs.csproj, unless there is a better way to get it to pass in GCStress jobs.\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7094467616","Type":"PullRequestEvent","CreatedAt":"2018-01-13T03:33:30","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8388","RelatedDescription":"Merged pull request \"Enabling the publish of CLI assets to 'orchestrated' blob storage.\" (#8388) at dotnet/cli","RelatedBody":"AzureInfo.props \r\nBlobStoragePartialRelativePath = \"Sdk\" or \"[orchestrated-build-number]/cli/assets\"; replaces 'Product'\r\nFile reorganized and commented; review it directly...\r\n\r\nPublish.targets \r\nInsert a call to 'SetAzureProps'\r\n'BlobStoragePartialRelativePath' replaces 'Product'\r\nSimplification: remove Boolean 'PUBLISH_NUPKG_TO_AZURE_BLOB'\r\n\r\nAzureInfo.targets \r\nProgrammatically assign ContainerNames, AccountNames, and  BlobStoragePartialRelativePath - if conducting an orchestrated build.\r\n@jcagme \r\nplease review for correctness.\r\n\r\nFinishBuild.targets\r\nDo not copy all the blobs to 'master-latest' - if conducting an orchestrated build.\r\n\r\nPublishNupkgToBlobFeed.targets \r\nSimplification: remove Boolean 'PUBLISH_NUPKG_TO_BLOB_FEED'\r\n\r\n\r\n**Follow-up:**\r\nRemove 'PUBLISH_NUPKG_TO_BLOB_FEED' and 'PUBLISH_NUPKG_TO_AZURE_BLOB' variables in VSO build definitions\r\n\r\n"},{"Id":"7094349961","Type":"PullRequestEvent","CreatedAt":"2018-01-13T01:59:15","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8391","RelatedDescription":"Closed pull request \"Add mock and DI to test InstallToolCommand\" (#8391) at dotnet/cli","RelatedBody":"Add mock and DI to test InstallToolCommand\r\n\r\nRun the same test against mock and real external service to avoid false positive when test with mock."},{"Id":"7094331827","Type":"PullRequestEvent","CreatedAt":"2018-01-13T01:46:09","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8379","RelatedDescription":"Merged pull request \"Add source option to install tool command.\" (#8379) at dotnet/cli","RelatedBody":"This commit adds the `--source` option to the `install tool` command.  This\r\noption is equivalent to the option of the same name for the `restore` command.\r\n\r\nThe option is forwarded to the underlying restore operation.\r\n\r\nFixes #8226.\r\n\r\n"},{"Id":"7094331819","Type":"IssuesEvent","CreatedAt":"2018-01-13T01:46:09","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8226","RelatedDescription":"Closed issue \"Add support for --source on `dotnet install tool`\" (#8226) at dotnet/cli","RelatedBody":"Currently, `dotnet install tool` only accepts a `--configfile` parameter. This means I have to create a NuGet.config file if I want to install a global tool from a local nupkg.\r\n\r\nKeeping in-line with many other dotnet verbs, it seems like `dotnet install tool` should add support for the `--source` flag that takes as a value any valid NuGet feed.\r\n\r\nThe goal is that users could install looks like this:\r\n```\r\ndotnet install tool --source https://dotnet.myget.org/F/aspnetcore-dev Microsoft.DotNet.Watcher.Tools\r\n```\r\n\r\nUsing: 2.2.0-preview1-007796\r\n\r\ncc @wli3 \r\n\r\n"},{"Id":"7094318723","Type":"PullRequestEvent","CreatedAt":"2018-01-13T01:37:35","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8391","RelatedDescription":"Opened pull request \"Tool compose parser pas\" (#8391) at dotnet/cli","RelatedBody":"Add mock and DI to test InstallToolCommand\r\n\r\nRun the same test against mock and real external service to avoid false positive when test with mock."},{"Id":"7094221199","Type":"PullRequestEvent","CreatedAt":"2018-01-13T00:43:49","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/8390","RelatedDescription":null,"RelatedBody":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n"},{"Id":"7094221121","Type":"PullRequestEvent","CreatedAt":"2018-01-13T00:43:47","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8390","RelatedDescription":"Closed pull request \"Updates the TestPlatform to 15.6.0-preview-20180109-01\" (#8390) at dotnet/cli","RelatedBody":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7088753160","Type":"PullRequestEvent","CreatedAt":"2018-01-11T22:45:46","Actor":"ahsonkhan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/620","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02411-04 (master)\" (#620) at dotnet/standard","RelatedBody":""},{"Id":"7081339249","Type":"PullRequestEvent","CreatedAt":"2018-01-10T16:19:09","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/620","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02410-01 (master)\" (#620) at dotnet/standard","RelatedBody":""},{"Id":"7080349426","Type":"IssuesEvent","CreatedAt":"2018-01-10T13:12:15","Actor":"Sergio0694","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/615","RelatedDescription":"Closed issue \"Missing binary/namespace from NuGet package in .NET Standard 2.0 library\" (#615) at dotnet/standard","RelatedBody":"Hello, I'm writing a .NET Standard 2.0 library and I'm having issues with a NuGet package I'd like to use (https://www.nuget.org/packages/Alea/) which I think is only supported for PCL libraries right now, and was wondering if there was a workaround available.\r\n\r\nI can install the package just fine, but its assemblies aren't visible in the drop-down list of the dependencies, and I don't have any of the namespaces in the project:\r\n\r\n![image](https://user-images.githubusercontent.com/10199417/34453242-1c63ff6e-ed4f-11e7-9bc0-dd75319bff04.png)\r\n\r\nI tried to manually link the net45 binaries by modifying the .csproj file for the library, like this:\r\n\r\n```xml\r\n<ItemGroup>\r\n    <Reference Include=\"Alea\">\r\n      <HintPath>$(NuGetPackageRoot)\\alea\\3.0.4\\lib\\net45\\Alea.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Alea.IL\">\r\n      <HintPath>$(NuGetPackageRoot)\\alea\\3.0.4\\lib\\net45\\Alea.IL.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Alea.Parallel\">\r\n      <HintPath>$(NuGetPackageRoot)\\alea\\3.0.4\\lib\\net45\\Alea.Parallel.dll</HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n```\r\n\r\nAnd this actually works perfectly fine - I can use the library both from a .NET Core 2.0 application, and if I use it from a .NET Framework application (where those GPU libraries are originally supposed to work), I can also use the code from that package just fine.\r\n\r\nThe problem is that this workaround is only looking for the net45 binaries, and I'm not even sure they'd get installed in that path automatically regardless of the PC building the solution.\r\n\r\nMy question is:\r\n\r\n> Since the library itself works just fine in a .NET Standard 2.0 library, is there a way to make it so that these missing binaries are correctly linked/referenced and added to the project, so that their namespaces are available when coding in the project?\r\n\r\nSee the original Stack Overflow question here: https://stackoverflow.com/questions/48030077/alea-gpu-on-net-standard-2-0-will-this-workaround-work\r\n\r\nThank you for your help!\r\n\r\n**EDIT:** I did a couple tests installing the NuGet package ([here](https://www.nuget.org/packages/NeuralNetwork.NET/)) into a .NET Framework 4.7.1 console app, I've cleared the NuGet cache before that and everything works fine, the Alea package is correctly restored for the net45 platform, so those .dll are loaded successfully by the library (through those `HintPath`s above.\r\n\r\nThe problem with this is that I'm quite sure it wouldn't work when using Mono/Xamarin, as those paths are hardcoded as \"net45\", while on those frameworks that wouldn't be right.\r\nI can't use the `$(TargetFrameworkVersion)` macro, as that would just return \"netstandard2.0\", since that's the library framework.\r\n\r\n> Is there any workaround to at least have that `HintPath` trick work on different platforms/frameworks, so that even if the .dlls aren't automatically referenced by NuGet, they'll be found by the user application using the library?\r\n\r\n  "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7094439930","Type":"PullRequestEvent","CreatedAt":"2018-01-13T03:09:02","Actor":"GrabYourPitchforks","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26303","RelatedDescription":"Merged pull request \"Improve performance of ReverseEndianness\" (#26303) at dotnet/corefx","RelatedBody":"This PR further improves the performance of `BinaryPrimitives.ReverseEndianness`.\r\n\r\nPerformance testing was accomplished by calling the methods 1 billion times in a loop, plus forcing a memory access between each iteration to prevent codegen from collapsing the iterations together. The performance testbed application can be found at https://gist.github.com/GrabYourPitchforks/2551846942913e81b0972c5860470f96. Results are laid out in the table below. All tests were performed on a Win10 FCU amd64 machine with runtime framework 2.1.0-preview1-26111-03 in a 64-bit process unless otherwise specified.\r\n\r\n| Test | Average time taken (ms) | StdDev (ms) |\r\n|------|-------------------------|-------------|\r\n| `IPAddress.HostToNetworkOrder(uint32)` | 3950.95 | 49.88 |\r\n| `BinaryPrimitives.ReverseEndianness(uint32)` (Original) | 2295.63 | 24.67 |\r\n| `BinaryPrimitives.ReverseEndianness(uint32)` (New) | 1729.21 | 19.62 | -25% |\r\n| `IPAddress.HostToNetworkOrder(uint16)` | 1808.44 | 23.67 |\r\n| `BinaryPrimitives.ReverseEndianness(uint16)` (Original) | 2036.60 | 53.54 |\r\n| `BinaryPrimitives.ReverseEndianness(uint16)` (New) | 1508.71 | 16.00 |\r\n| `IPAddress.HostToNetworkOrder(uint64)` | 6908.92 | 59.79 |\r\n| `BinaryPrimitives.ReverseEndianness(uint64)` (Original) | 3110.94 | 39.78 |\r\n| `BinaryPrimitives.ReverseEndianness(uint64)` (New) | 2712.44 | 24.76 |\r\n| `IPAddress.HostToNetworkOrder(uint64)` (32-bit proc) | 5726.56 | 33.08 |\r\n| `BinaryPrimitives.ReverseEndianness(uint64)` (Original, 32-bit proc) | 4404.27 | 15.10 |\r\n| `BinaryPrimitives.ReverseEndianness(uint64)` (New, 32-bit proc) | 2595.94 | 12.07 |\r\n\r\n/cc @jkotas @ahsonkhan @benaadams \r\n"},{"Id":"7094393542","Type":"PullRequestEvent","CreatedAt":"2018-01-13T02:32:14","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26260","RelatedDescription":"Merged pull request \"Writes to Service`s Eventlog when it is run. \" (#26260) at dotnet/corefx","RelatedBody":"Related to - https://github.com/dotnet/corefx/issues/26235"},{"Id":"7094372423","Type":"PullRequestEvent","CreatedAt":"2018-01-13T02:15:53","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26316","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC, Standard to rel-26112-00, rel-26112-00, preview1-26112-01, respectively (release/uwp6.0)\" (#26316) at dotnet/corefx","RelatedBody":""},{"Id":"7094343757","Type":"PullRequestEvent","CreatedAt":"2018-01-13T01:54:48","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26315","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview1-26112-06, preview1-26112-04, respectively (master)\" (#26315) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7094540733","Type":"IssuesEvent","CreatedAt":"2018-01-13T04:40:31","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24208","RelatedDescription":"Closed issue \"UseExplicitType on var deconstructions doesn't work in Roslyn\" (#24208) at dotnet/roslyn","RelatedBody":"Just tried it on some compiler code `var (..., ...) = ...;` and the fix was not offered. I need to investigate more."},{"Id":"7094519078","Type":"PullRequestEvent","CreatedAt":"2018-01-13T04:19:48","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24223","RelatedDescription":"Opened pull request \"FindAllReferences on Deconstruct should consider all documents\" (#24223) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\nUse FindAllReferences on a `Deconstruct` method. Only references in the same document will be found, but all documents (that are indexed as having at least one deconstruction) should be considered.\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/24184\r\n\r\n### Workarounds, if any\r\nNone\r\n\r\n### Risk\r\n### Performance impact\r\nLow. This is following the design of FindAllReferences for `GetEnumerator` methods very closely. The new code is only invoked when using FAR on a method called `Deconstruct`.\r\n\r\n### Is this a regression from a previous update?\r\nNo.\r\n\r\n### Root cause analysis\r\nI should have included a test case with multiple documents, and also done some testing with dev hive on Roslyn codebase.\r\n\r\n### How was the bug found?\r\nFAR for Deconstruct has not shipped yet (I implemented it in 15.6) and I found this problem while using it on Roslyn codebase."},{"Id":"7094455734","Type":"IssuesEvent","CreatedAt":"2018-01-13T03:22:56","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24222","RelatedDescription":"Closed issue \"EnC test scenario: Exception regions after multiple edits\" (#24222) at dotnet/roslyn","RelatedBody":"Demonstrates possible off-by-one error in exception handler tracking.\r\n\r\n**Steps to Reproduce**:\r\n\r\nConsole app:\r\n\r\n```\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {   \r\n        // [3]\r\n        try\r\n        {\r\n            G();\r\n        }\r\n        catch (Exception) { // breakpoint [2]\r\n            Console.WriteLine(1);\r\n            Console.WriteLine(2);\r\n            Console.WriteLine(3);\r\n        }\r\n    }\r\n\r\n    static void G()\r\n    {\r\n        throw new Exception(); // breakpoint [1]\r\n    }\r\n}\r\n```\r\n\r\n1. Place breakpoints as shown above and F5\r\n2. Once Breakpoint [1] is hit insert a new line at [3] (in between ```{``` and ```// [3]```)\r\n3. F5, Breakpoint [2] is hit, insert another new line at [3], step.\r\n\r\n**Expected Behavior**:\r\n\r\nCurrent IP (yellow span) is at ```Console.WriteLine(1);```\r\n\r\n**Wrong Behavior**:\r\n\r\n"},{"Id":"7094455651","Type":"IssuesEvent","CreatedAt":"2018-01-13T03:22:53","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24222","RelatedDescription":"Opened issue \"EnC test scenario: Exception regions after multiple edits\" (#24222) at dotnet/roslyn","RelatedBody":"Demonstrates possible off-by-one error in exception handler tracking.\r\n\r\n**Steps to Reproduce**:\r\n\r\nConsole app:\r\n\r\n```\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {   \r\n        // [3]\r\n        try\r\n        {\r\n            G();\r\n        }\r\n        catch (Exception) { // breakpoint [2]\r\n            Console.WriteLine(1);\r\n            Console.WriteLine(2);\r\n            Console.WriteLine(3);\r\n        }\r\n    }\r\n\r\n    static void G()\r\n    {\r\n        throw new Exception(); // breakpoint [1]\r\n    }\r\n}\r\n```\r\n\r\n1. Place breakpoints as shown above and F5\r\n2. Once Breakpoint [1] is hit insert a new line at [3] (in between ```{``` and ```// [3]```)\r\n3. F5, Breakpoint [2] is hit, insert another new line at [3], step.\r\n\r\n**Expected Behavior**:\r\n\r\nCurrent IP (yellow span) is at ```Console.WriteLine(1);```\r\n\r\n**Wrong Behavior**:\r\n\r\n"},{"Id":"7094370092","Type":"IssuesEvent","CreatedAt":"2018-01-13T02:14:03","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24221","RelatedDescription":"Opened issue \"Can't use applicable_kinds.parameter in Naming conventions in Editor Config\" (#24221) at dotnet/roslyn","RelatedBody":"I'm creating a .editorconfig file for our team which includes code style settings, but also contains naming conventions.\n\nThe issue within the naming conventions is that I can't get the c# editor to show an error under a parameter which violates the rule.\n\nAm I missing something?\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/177536/cant-use-applicable-kindsparameter-in-naming-conve.html\nVSTS ticketId: 547550_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"7094335445","Type":"IssuesEvent","CreatedAt":"2018-01-13T01:48:56","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24220","RelatedDescription":"Closed issue \"EnC test scenario: Breakpoints in exception handlers\" (#24220) at dotnet/roslyn","RelatedBody":"Demonstrates possible off-by-one error in exception handler tracking.\r\n\r\n**Steps to Reproduce**:\r\n\r\nConsole app:\r\n\r\n```\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {   \r\n        // [3]\r\n        try\r\n        {\r\n            G();\r\n        }\r\n        catch (Exception) { // breakpoint [2]\r\n            Console.WriteLine(1);\r\n            Console.WriteLine(2);\r\n            Console.WriteLine(3);\r\n        }\r\n    }\r\n\r\n    static void G()\r\n    {\r\n        throw new Exception(); // breakpoint [1]\r\n    }\r\n}\r\n```\r\n\r\n1. Place breakpoints as shown above and F5\r\n2. Once Breakpoint [1] is hit insert a new line at [3] (in between ```{``` and ```// [3]```)\r\n3. F5\r\n\r\n**Expected Behavior**:\r\n\r\nBreakpoint [2] is hit and use can continue stepping thru the method.\r\n\r\n**Wrong Behavior**:\r\n\r\nBreakpoint [2] isn't hit."},{"Id":"7094335318","Type":"IssuesEvent","CreatedAt":"2018-01-13T01:48:50","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24220","RelatedDescription":"Opened issue \"EnC test scenario: Breakpoints in exception handlers\" (#24220) at dotnet/roslyn","RelatedBody":"Demonstrates possible off-by-one error in exception handler tracking.\r\n\r\n**Steps to Reproduce**:\r\n\r\nConsole app:\r\n\r\n```\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {   \r\n        // [3]\r\n        try\r\n        {\r\n            G();\r\n        }\r\n        catch (Exception) { // breakpoint [2]\r\n            Console.WriteLine(1);\r\n            Console.WriteLine(2);\r\n            Console.WriteLine(3);\r\n        }\r\n    }\r\n\r\n    static void G()\r\n    {\r\n        throw new Exception(); // breakpoint [1]\r\n    }\r\n}\r\n```\r\n\r\n1. Place breakpoints as shown above and F5\r\n2. Once Breakpoint [1] is hit insert a new line at [3] (in between ```{``` and ```// [3]```)\r\n3. F5\r\n\r\n**Expected Behavior**:\r\n\r\nBreakpoint [2] is hit and use can continue stepping thru the method.\r\n\r\n**Wrong Behavior**:\r\n\r\nBreakpoint [2] isn't hit."},{"Id":"7094309039","Type":"IssuesEvent","CreatedAt":"2018-01-13T01:31:18","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/18694","RelatedDescription":"Closed issue \"Make UpgradeProject work for VB\" (#18694) at dotnet/roslyn","RelatedBody":"The driving scenario is tuple inferred names (https://github.com/dotnet/roslyn/pull/18374) (VB 15.3).\r\n\r\nUpdate: also VB 15.5 features."},{"Id":"7094184032","Type":"PullRequestEvent","CreatedAt":"2018-01-13T00:26:05","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24077","RelatedDescription":"Merged pull request \"Consolidate 'remove unused local' fixer in Roslyn and Roslyn-analyzers\" (#24077) at dotnet/roslyn","RelatedBody":"Roslyn part of https://github.com/dotnet/roslyn/issues/23684"},{"Id":"7094173534","Type":"PullRequestEvent","CreatedAt":"2018-01-13T00:21:06","Actor":"JieCarolHu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24219","RelatedDescription":"Opened pull request \"personal - pls ignore\" (#24219) at dotnet/roslyn","RelatedBody":"<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7094394450","Type":"PullRequestEvent","CreatedAt":"2018-01-13T02:32:54","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5242","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5242) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7094326308","Type":"PullRequestEvent","CreatedAt":"2018-01-13T01:42:26","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5242","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5242) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7094293320","Type":"PullRequestEvent","CreatedAt":"2018-01-13T01:21:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5241","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5241) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7094213090","Type":"PullRequestEvent","CreatedAt":"2018-01-13T00:39:50","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5241","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5241) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7093877635","Type":"PullRequestEvent","CreatedAt":"2018-01-12T22:31:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5239","RelatedDescription":"Merged pull request \"Fixed cross-building for armel tizen\" (#5239) at dotnet/corert","RelatedBody":""},{"Id":"7093516665","Type":"PullRequestEvent","CreatedAt":"2018-01-12T20:51:46","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5238","RelatedDescription":"Merged pull request \"Fix public surface to match CoreCLR\" (#5238) at dotnet/corert","RelatedBody":""},{"Id":"7092868424","Type":"IssuesEvent","CreatedAt":"2018-01-12T18:09:32","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5240","RelatedDescription":"Opened issue \"[ILVerify] ILVerify Project Format\" (#5240) at dotnet/corert","RelatedBody":"ILVerify is the only project in the CoreRT repo that uses the new .csproj format, i.e. \r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n    ...\r\n</Project>\r\n```\r\nThe mismatch causes some causes some difficulties in adding the project to our daily build scripts (and subsequently having a NuGet package published from the usual pipeline). \r\n\r\nWas there any explicit reason to go for the format? Are there any plans to unify the format?\r\n\r\ncc @jkotas @KrzysztofCwalina \r\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7094114111","Type":"PullRequestEvent","CreatedAt":"2018-01-12T23:55:30","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1843","RelatedDescription":"Merged pull request \"Pack for tools\" (#1843) at dotnet/sdk","RelatedBody":"Add PackAsTool in csproj, and run dotnet pack. The result will be in\r\ntool format nupkg"},{"Id":"7093414375","Type":"IssuesEvent","CreatedAt":"2018-01-12T20:24:11","Actor":"rynowak","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1854","RelatedDescription":"Opened issue \"ResolvePackageFileConflicts throwing when referencing System.Diagnostics.DiagnosticSource by assembly path\" (#1854) at dotnet/sdk","RelatedBody":"This is new failure that just started happening in some Razor tests for our MSBuild functionality. This started failing for us `2.2.0-preview1-007927` - this was working before in `2.2.0-preview1-007866`.\r\n\r\nI've attached a repro project, which is doing some esoteric things because this is part of our tests for our MSBuild targets 😆. I think the probably might not be anything wierd that we're doing though.\r\n\r\nThe project file looks like this:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\"'$(BinariesRoot)'==''\">\r\n    <!-- In test scenarios $(BinariesRoot) is defined in a generated Directory.Build.props file -->\r\n    <ProjectReference Include=\"..\\..\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj\"/>\r\n    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AspNetCore.Razor.Runtime\\Microsoft.AspNetCore.Razor.Runtime.csproj\"/>\r\n  </ItemGroup>\r\n\r\n  <ItemGroup Condition=\"'$(BinariesRoot)'!=''\">\r\n    <Reference Include=\"$(BinariesRoot)\\System.Diagnostics.DiagnosticSource.dll\"/>\r\n    <Reference Include=\"$(BinariesRoot)\\Microsoft.AspNetCore.Html.Abstractions.dll\"/>\r\n    <Reference Include=\"$(BinariesRoot)\\Microsoft.AspNetCore.Razor.dll\"/>\r\n    <Reference Include=\"$(BinariesRoot)\\Microsoft.AspNetCore.Razor.Runtime.dll\"/>\r\n    <Reference Include=\"$(BinariesRoot)\\Microsoft.AspNetCore.Razor.Test.MvcShim.dll\"/>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nRemoving `<Reference Include=\"$(BinariesRoot)\\System.Diagnostics.DiagnosticSource.dll\"/>` seems to fix it.\r\n\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.6.22.57775 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj...\r\n  Generating MSBuild file C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\obj\\SimpleMvc.csproj.nuget.g.props.\r\n  Generating MSBuild file C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\obj\\SimpleMvc.csproj.nuget.g.targets.\r\n  Restore completed in 273.82 ms for C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj.\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018: The \"ResolvePackageFileConflicts\" task failed unexpectedly. [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018: System.ArgumentNullException: Value cannot be null. [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018: Parameter name: key [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at System.Collections.Generic.Dictionary`2.FindEntry(TKey key) [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at System.Collections.Generic.Dictionary`2.TryGetValue(TKey key, TValue& value) [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ConflictResolution.PackageOverrideResolver`1.Resolve(TConflictItem item1, TConflictItem item2) [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ConflictResolution.ConflictResolver`1.ResolveConflict(TConflictItem item1, TConflictItem item2) [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ConflictResolution.ConflictResolver`1.ResolveConflicts(IEnumerable`1 conflictItems, Func`2 getItemKey, Action`1 foundConflict, Boolean commitWinner, Action`1 unresolvedConflict) [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ConflictResolution.ResolvePackageFileConflicts.ExecuteCore()[C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() in E:\\A\\_work\\24\\s\\src\\Build\\BackEnd\\TaskExecutionHost\\TaskExecutionHost.cs:line 631 [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\nC:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.ConflictResolution.targets(59,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__25.MoveNext() in E:\\A\\_work\\24\\s\\src\\Build\\BackEnd\\Components\\RequestBuilder\\TaskBuilder.cs:line 787 [C:\\Users\\rynowak\\AppData\\Local\\Temp\\Razor\\sbp0bspc.b03\\SimpleMvc\\SimpleMvc.csproj]\r\n```\r\n\r\n\r\n```\r\n.NET Command Line Tools (2.2.0-preview1-007927)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007927\r\n Commit SHA-1 hash:  a212d5a017\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.2.0-preview1-007927\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-26110-02\r\n  Build    : 77152705cd56e7d89f52585959ec3559d91084c4\r\n```\r\n[Repro.zip](https://github.com/dotnet/sdk/files/1627368/Repro.zip)\r\n"},{"Id":"7089958883","Type":"IssuesEvent","CreatedAt":"2018-01-12T06:30:35","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1853","RelatedDescription":"Opened issue \"[tools] Pack should glob result of publish or not\" (#1853) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/pull/1843#discussion_r161075634\r\n\r\nNeed further discussion \r\n\r\n>dasMulli\r\nI think I suggested ResolvedFileToPublish previously but having doubts now. It could by PreserveNewest with some modification already done in the publish output or users could have targets with <Copy> stuff in there. (or even post-built steps using xcopy execute).\r\nThe most \"correct\" but also slowest would be to do the same as the web sdk does for publishing - clean an intermediate directory and publish to it, then use a glob to harvest this clean publish. e.g. like #1846 (comment)"},{"Id":"7088988488","Type":"PullRequestEvent","CreatedAt":"2018-01-11T23:56:32","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1848","RelatedDescription":"Merged pull request \"VB-specific DocumentationFile generation.\" (#1848) at dotnet/sdk","RelatedBody":"Fixes #1598\r\n\r\nVB targets already include `$(IntermediateOutputPath)`, so don't add it for `GenerateDocumentationFile`."},{"Id":"7088988486","Type":"IssuesEvent","CreatedAt":"2018-01-11T23:56:32","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1598","RelatedDescription":"Closed issue \"GenerateDocumentationFile=true breaks DebugSymbolsProjectOutputGroup in VB projects\" (#1598) at dotnet/sdk","RelatedBody":"Get the following when trying to replace `<DocumentationFile>Foo.xml</DocumentationFile>` with `<GenerateDocumentionFile>true</GenerateDocumentationFile>`.\r\n\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\bin\\Microsoft.Common.CurrentVersion.targets(5458,44): error MSB4023: Cannot evaluate the item metadata \"%(FullPath)\". The item metadata \"%(FullPath)\" cannot be applied to the path \"D:\\Src\\roslyn\\Binaries\\Obj\\BasicEditorFeatures\\Debug\\D:\\Src\\roslyn\\Binaries\\Obj\\BasicEditorFeatures\\Debug\\Microsoft.CodeAnalysis.VisualBasic.EditorFeatures.xml\". The given path's format is not supported. [D:\\Src\\roslyn\\src\\EditorFeatures\\VisualBasic\\BasicEditorFeatures.vbproj]\r\n```\r\n\r\nThe issue is that VB targets do not expect DocumentationFile to include the IntermediateOutputPath like C# targets, so GenerateDocumentationFile needs to behave differently for VB than C#."},{"Id":"7088905947","Type":"PullRequestEvent","CreatedAt":"2018-01-11T23:29:15","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1852","RelatedDescription":"Merged pull request \"Fix spelling of 'overridden'\" (#1852) at dotnet/sdk","RelatedBody":"This typo fix affects msbuild metadata, but it is non-breaking because it was just introduced with #1805 and hasn't shipped."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"950980824685412352","CreatedAt":"2018-01-10T06:41:11+00:00","UserScreenname":"dotnet","Text":".NET Framework January 2018 Security and Quality Rollup https://t.co/vyjtKwKpkb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":14,"RawContent":null},{"Id":"950944972588462080","CreatedAt":"2018-01-10T04:18:43+00:00","UserScreenname":"dotnet","Text":".NET for UWP January 2018 Update https://t.co/zckziEWmv7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":28,"RawContent":null},{"Id":"950850103652139008","CreatedAt":"2018-01-09T22:01:45+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog! https://t.co/Hr3fLteMDg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":64,"FavoriteCount":57,"RawContent":null},{"Id":"950842872890191872","CreatedAt":"2018-01-09T21:33:01+00:00","UserScreenname":"dotnet","Text":".NET Core January 2018 Update https://t.co/waKNOsvgKU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":75,"FavoriteCount":64,"RawContent":null},{"Id":"948916811034234881","CreatedAt":"2018-01-04T13:59:32+00:00","UserScreenname":"dotnet","Text":"At 10am ET, join our Jeff Fritz (@csharpfritz) for LIVE CODING and he'll answer your questions and .NET, ASPNet, an… https://t.co/CCz9Kdyzk7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":10,"RawContent":null},{"Id":"944564608391577600","CreatedAt":"2017-12-23T13:45:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz - @csharpfritz and MVP @IrisClasson in about an hour for LIVE CODING and pair programming on… https://t.co/kicrnl8tNJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":11,"RawContent":null}]}},"RunOn":"2018-01-13T05:30:21.3572228Z","RunDurationInMilliseconds":8099}