{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing ML.NET 1.2 and Model Builder updates (Machine Learning for .NET)","PublishedOn":"2019-07-17T19:25:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce ML.NET 1.2 and updates to Model Builder and the CLI. ML.NET is an open-source and cross-platform machine learning framework for .NET developers. ML.NET also includes Model...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-2-and-model-builder-updates-machine-learning-for-net/","RawContent":null},{"Title":"Write Better Code Faster with Roslyn Analyzers","PublishedOn":"2019-07-10T16:40:11+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Roslyn, the .NET compiler platform, helps you catch bugs even before you run your code. One example is Roslynâ€™s spellcheck analyzer that is built into Visual Studio. Letâ€™s say you are creating a...","Href":"https://devblogs.microsoft.com/dotnet/write-better-code-faster-with-roslyn-analyzers/","RawContent":null},{"Title":".NET Core July 2019 Updates â€“ 2.1.12 and 2.2.6","PublishedOn":"2019-07-09T17:50:51+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a...","Href":"https://devblogs.microsoft.com/dotnet/net-core-july-2019/","RawContent":null},{"Title":".NET Framework July 2019 Security and Quality Rollup","PublishedOn":"2019-07-09T17:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the July 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update for .NET Framework.\nSecurity\nCVE-2019-1006 â€“Â WCF/WIF SAML Token Authentication Bypass...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-july-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Framework June 27, 2019 Cumulative Update for Windows 10 version 1903","PublishedOn":"2019-06-27T18:01:46+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we released the June 2019 Cumulative Update for .NET Framework 3.5 and 4.8 on Windows 10 version 1903.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-27-2019-cumulative-update-for-windows-10-version-1903/","RawContent":null},{"Title":"Help us shape the future of .NET for Apache Spark","PublishedOn":"2019-06-20T17:58:41+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Apache Sparkâ„¢ is a general-purpose distributed processing engine for analytics over large data set typically terabytes or petabytes of data. Apache Spark can be used for processing batches of data,...","Href":"https://devblogs.microsoft.com/dotnet/help-us-shape-the-future-of-net-for-apache-spark/","RawContent":null},{"Title":"Create interactive documentation with the new Try .NET template","PublishedOn":"2019-06-20T16:05:37+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In our previous post, we announced dotnet tryÂ a global tool which allows developers to create interactive workshops and documentation. Tutorials created with dotnet try let users start learning...","Href":"https://devblogs.microsoft.com/dotnet/create-interactive-documentation-with-the-new-try-net-template/","RawContent":null},{"Title":".NET Framework June 2019 Preview of Quality Rollup","PublishedOn":"2019-06-19T00:12:52+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the June 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nWPF1\nAddresses an issue in which...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"The Evolving Infrastructure of .NET Core","PublishedOn":"2019-06-18T18:11:59+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"WithÂ .NET Core 3.0 Preview 6Â out the door, we thought it would be useful to take a brief look at the history of our infrastructure systems and the significant improvements that have been made in the...","Href":"https://devblogs.microsoft.com/dotnet/the-evolving-infrastructure-of-net-core/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 6 and Entity Framework 6.3 Preview 6","PublishedOn":"2019-06-13T20:35:52+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"New previews of the next versions of EF Core and EF 6 are now available on NuGet.Org.\nWhat is new in EF Core 3.0 Preview 6\nIn recent months, a lot of our efforts have been focused on a new LINQ...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-6-and-entity-framework-6-3-preview-6/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"9812903344","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:28:59","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Merged pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9812878014","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:23:52","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Opened pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10047192673","Type":"IssuesEvent","CreatedAt":"2019-07-19T16:54:03","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Opened issue \".NET Core master branches have switched to \"5.0\"\" (#118) at dotnet/announcements","RelatedBody":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available."},{"Id":"9971220766","Type":"IssuesEvent","CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Opened issue \"System.Text.Json usability study results\" (#117) at dotnet/announcements","RelatedBody":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies ðŸ˜Š\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304."},{"Id":"9963969636","Type":"IssuesEvent","CreatedAt":"2019-07-08T03:13:39","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Opened issue \"Updates to releases.json (.NET Core release metadata)\" (#116) at dotnet/announcements","RelatedBody":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, msbuild, nuget, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is a partial example of the new array based on the upcoming July update. \r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n  \"sdks\": [\r\n    {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": [\r\n            {\r\n            \"name\": \"\",\r\n            \"rid\": \"\",\r\n            \"url\": \"\",\r\n            \"hash\": \"\"\r\n            }\r\n        ]\r\n    }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the communitiy which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility comprimises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10051186369","Type":"IssuesEvent","CreatedAt":"2019-07-20T17:51:02","Actor":"aggieben","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25809","RelatedDescription":"Opened issue \"error MSB3721: The command \"ml64.exe ...\" exited with code 1\" (#25809) at dotnet/coreclr","RelatedBody":"I'm trying to build coreclr on Windows 10, `release/3.0` branch with VS 2019.  I've gone through the list of VS 2017 prerequisites and tried to make sure I have all those, as well as an updated version of CMake (VS2019 doesn't appear to be documented at this point).  The build fails like this (two of these in the log):\r\n\r\n![image](https://user-images.githubusercontent.com/1321/61582158-bb20bf00-aaec-11e9-839c-093f45f94c2a.png)\r\n\r\nAlso a bit further down, \r\n![image](https://user-images.githubusercontent.com/1321/61582181-edcab780-aaec-11e9-91c6-f629efd7e0dd.png)\r\n\r\nAny pointers appreciated.\r\n"},{"Id":"10050965660","Type":"PullRequestEvent","CreatedAt":"2019-07-20T15:58:20","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25801","RelatedDescription":"Merged pull request \"Fix Linux compilation flags\" (#25801) at dotnet/coreclr","RelatedBody":"`configureoptimization.cmake` was being included before `CLR_CMAKE_PLATFORM_UNIX`\r\nwas set, though it depends on that variable to set Linux optimization\r\nflags. Move the include lower, after `CLR_CMAKE_PLATFORM_UNIX` is set.\r\n\r\nThis leads to Debug builds being built with `-O0` and Checked builds built\r\nwith `-O2`, instead of the default due to no `-O` flag being passed. Release\r\nis still built `-O3`; somehow, it was being built that way already.\r\n\r\nFixes #25273 (Although Alpine will still see a stack overflow in the failing\r\ntest case with Debug builds, it won't affect Checked build CI runs, which is\r\nthe primary flavor tested in coreclr CI.)"},{"Id":"10050965653","Type":"IssuesEvent","CreatedAt":"2019-07-20T15:58:19","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25273","RelatedDescription":"Closed issue \"[Alpine]Test failed: JIT_superpmi._superpmicollect_superpmicollect_._superpmicollect_superpmicollect_sh\" (#25273) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-outerloop-jitstress/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190618.1/workItem/JIT/analysis/xunit/JIT_superpmi._superpmicollect_superpmicollect_~2F_superpmicollect_superpmicollect_sh\r\n\r\n**Failed tests:**\r\nJIT_superpmi._superpmicollect_superpmicollect_._superpmicollect_superpmicollect_sh\r\n\r\n**Log:**\r\n```\r\nStack overflow.\r\n/root/helix/work/workitem/JIT/superpmi/superpmicollect/superpmicollect.sh: line 266:    85 Aborted                 (core dumped) $LAUNCHER $ExePath \\\"${CLRTestExecutionArguments[@]}\\\"\r\n\r\nReturn code:      1\r\nRaw output file:      /root/helix/work/workitem/JIT/superpmi/Reports/JIT.superpmi/superpmicollect/superpmicollect.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun superpmicollect.exe ''\r\nSuperPMI collection and playback - BEGIN\r\nSetting environment variables:\r\n    SuperPMIShimLogPath=/tmp/wnwrrstv.4i2SPMI\r\n    SuperPMIShimPath=/root/helix/work/correlation/libclrjit.so\r\n    COMPlus_AltJit=*\r\n    COMPlus_AltJitName=libsuperpmi-shim-collector.so\r\nRunning: /usr/bin/perl -pi -e 's/\\\\r\\\r\n|\\\r\n|\\\\r/\\\r\n/g' \\\"/root/helix/work/workitem/JIT/superpmi/superpmicollect/Bytemark.sh\\\"\r\nExpected: 100\r\nActual: 134\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=/root/helix/work/correlation\r\n> /root/helix/work/workitem/JIT/superpmi/superpmicollect/superpmicollect.sh\r\nExpected: True\r\nActual:   False\r\n```"},{"Id":"10050948266","Type":"PullRequestEvent","CreatedAt":"2019-07-20T15:49:30","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25804","RelatedDescription":"Merged pull request \"Arm64 define FEATURE_DATATARGET4\" (#25804) at dotnet/coreclr","RelatedBody":"FEATURE_DATATARGET4 enables the portable out of\r\nprocess stack unwind"},{"Id":"10050571197","Type":"PullRequestEvent","CreatedAt":"2019-07-20T12:34:17","Actor":"dotnet-maestro[bot]","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25808","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#25808) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190719.08\r\n- **Date Produced**: 7/19/2019 8:26 PM\r\n- **Commit**: 7d70bbe81b4b86d491e30f957551441464c85375\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.27919.8\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n"},{"Id":"10050562402","Type":"PullRequestEvent","CreatedAt":"2019-07-20T12:29:19","Actor":"dotnet-maestro[bot]","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25807","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#25807) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190719.9\r\n- **Date Produced**: 7/20/2019 6:18 AM\r\n- **Commit**: 45851336efa3b754f427d00cef3d388357aed308\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19369.9\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19369.9\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n"},{"Id":"10050550143","Type":"PullRequestEvent","CreatedAt":"2019-07-20T12:22:05","Actor":"dotnet-maestro[bot]","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25806","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#25806) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19369.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10051804945","Type":"IssuesEvent","CreatedAt":"2019-07-21T00:21:09","Actor":"dtivel","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/11964","RelatedDescription":"Opened issue \"dotnet-install.sh:  fails on macOS\" (#11964) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nOn macOS open bash shell and execute:\r\n```\r\ncurl -o ./dotnet-install.sh https://raw.githubusercontent.com/dotnet/cli/master/scripts/obtain/dotnet-install.sh\r\nchmod +x ./dotnet-install.sh\r\n./dotnet-install.sh -i ./cli -c 1.0\r\n```\r\n## Expected  behavior\r\nInstall will succeed.\r\n\r\n## Actual behavior\r\n```\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-sdk-1.1.11-osx-x64.tar.gz\r\ncurl: (22) The requested URL returned error: 404 \r\ndotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-sdk-1.1.11-osx-x64.tar.gz\r\ndotnet-install: Downloading legacy link: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-dev-osx-x64.1.1.11.tar.gz\r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-dev-osx-x64.1.1.11.tar.gz\r\ncp: illegal option -- -\r\nusage: cp [-R [-H | -L | -P]] [-fi | -n] [-apvXc] source_file target_file\r\n       cp [-R [-H | -L | -P]] [-fi | -n] [-apvXc] source_file ... target_directory\r\n```\r\n\r\nThe root problem is [this change](https://github.com/dotnet/cli/commit/7a1afb7e707e44fd3a3c6e0dd81dc92aa9b7f7d9#diff-3385102241bcd3718b9ca13a0c55b9afR615).  On macOS `cp` does not have a `--remove-destination` option.\r\n"},{"Id":"10051731398","Type":"PullRequestEvent","CreatedAt":"2019-07-20T23:25:30","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11963","RelatedDescription":"Merged pull request \"[master] Update dependencies from aspnet/AspNetCore\" (#11963) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190720.4\r\n- **Date Produced**: 7/20/2019 10:54 PM\r\n- **Commit**: 65ca72c4206cd73a14b3c202713ce700139896d8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19370.4\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n"},{"Id":"10051690244","Type":"PullRequestEvent","CreatedAt":"2019-07-20T22:55:08","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11963","RelatedDescription":"Opened pull request \"[master] Update dependencies from aspnet/AspNetCore\" (#11963) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190720.4\r\n- **Date Produced**: 7/20/2019 10:54 PM\r\n- **Commit**: 65ca72c4206cd73a14b3c202713ce700139896d8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19370.4\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n"},{"Id":"10051507316","Type":"IssuesEvent","CreatedAt":"2019-07-20T20:53:45","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/11956","RelatedDescription":"Closed issue \"Deps file and runtimeconfig are not regenerated upon assets cache invalidation.\" (#11956) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nOn Windows with an x64 SDK installed:\r\n\r\n1. `dotnet new console`\r\n2. `dotnet build -r win-x64`\r\n3. Run `bin\\Debug\\netcoreapp3.0\\win-x64\\foo.exe` (expected: it prints \"hello world\").\r\n4. `dotnet build -r win-x86 /p:SelfContained=false --no-restore`\r\n5. Run `bin\\Debug\\netcoreapp3.0\\win-x64\\foo.exe`\r\n\r\n## Expected  behavior\r\n\r\nThe application should run as a framework-dependent application.\r\n\r\n## Actual behavior\r\n\r\nThe application fails to start because hostpolicy.dll can't be found.\r\n\r\nThis is because both the deps.json file and the runtimeconfig.json file remain unchanged from the first build, which was self-contained.  The second build incrementally cleans the self-contained dependencies, so the application attempts to activate as self-contained when it really should be framework-dependent.\r\n\r\nMaking the tasks responsible for generating these files take the assets cache file as input should cause regeneration when properties that affect the nuget cache (such as SelfContained) change.\r\n\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013052\r\n Commit:    9d282328f2\r\n```\r\n\r\n"},{"Id":"10051461405","Type":"PullRequestEvent","CreatedAt":"2019-07-20T20:25:42","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11962","RelatedDescription":"Merged pull request \"[master] Update dependencies from aspnet/AspNetCore\" (#11962) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190720.3\r\n- **Date Produced**: 7/20/2019 7:54 PM\r\n- **Commit**: 4ac6a4ad35801001d6b971c06254bd3da078741c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19370.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n"},{"Id":"10051408274","Type":"PullRequestEvent","CreatedAt":"2019-07-20T19:55:21","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11962","RelatedDescription":"Opened pull request \"[master] Update dependencies from aspnet/AspNetCore\" (#11962) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190720.3\r\n- **Date Produced**: 7/20/2019 7:54 PM\r\n- **Commit**: 4ac6a4ad35801001d6b971c06254bd3da078741c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19370.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n"},{"Id":"10051022781","Type":"IssuesEvent","CreatedAt":"2019-07-20T16:26:48","Actor":"richlander","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/11961","RelatedDescription":"Opened issue \"Preview link points to an unhelpful page\" (#11961) at dotnet/cli","RelatedBody":"I see this message all the time (I only run previews) â€¦\r\n\r\n```console\r\n You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n```\r\n\r\nIâ€™d never actually taken the time to try out that link. It lands @ https://docs.microsoft.com/en-us/dotnet/core/tools/global-json\r\n\r\nThatâ€™s not at all helpful. I was expecting a page dedicated to previews, and how to use previews in Visual Studio if you are using that product. Global.json is a small part of the preview experience. Itâ€™s also jarring to get dropped into a help page on a file format with no apparent connection to the CLI message.\r\n\r\nTo some degree, this is a doc issue, but since the link is part of the CLI experience, we should decide what we want."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10050620009","Type":"PullRequestEvent","CreatedAt":"2019-07-20T13:02:05","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1361","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1361) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190719.9\r\n- **Date Produced**: 7/20/2019 6:18 AM\r\n- **Commit**: 45851336efa3b754f427d00cef3d388357aed308\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19369.9\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19369.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19369.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10050601633","Type":"PullRequestEvent","CreatedAt":"2019-07-20T12:51:58","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1361","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1361) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190719.9\r\n- **Date Produced**: 7/20/2019 6:18 AM\r\n- **Commit**: 45851336efa3b754f427d00cef3d388357aed308\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19369.9\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19369.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19369.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10050538682","Type":"PullRequestEvent","CreatedAt":"2019-07-20T12:15:15","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1360","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1360) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10050521858","Type":"PullRequestEvent","CreatedAt":"2019-07-20T12:05:08","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1360","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1360) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10049397932","Type":"IssuesEvent","CreatedAt":"2019-07-20T00:40:40","Actor":"divega","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1092","RelatedDescription":"Closed issue \"Add string overloads to DbDataReader.Get*() to .NET Standard 2.1\" (#1092) at dotnet/standard","RelatedBody":"This is mainly about adding the API from https://github.com/dotnet/corefx/issues/31595 (commit https://github.com/dotnet/corefx/commit/b30fc2b4ee302e449e3580ae39cb083a76b813c9), plus possibly two additional async method possibly coming from https://github.com/dotnet/corefx/issues/35611, to .NET Standard 2.1.\r\n\r\ncc @roji @ajcvickers @terrajobst "},{"Id":"10049148789","Type":"PullRequestEvent","CreatedAt":"2019-07-19T23:02:20","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1359","RelatedDescription":"Merged pull request \"Adds attribution for APIs previously specialcased by the compiler\" (#1359) at dotnet/standard","RelatedBody":"Reviewed as #1356."},{"Id":"10048852760","Type":"PullRequestEvent","CreatedAt":"2019-07-19T21:46:57","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1359","RelatedDescription":"Opened pull request \"Adds attribution for APIs previously specialcased by the compiler\" (#1359) at dotnet/standard","RelatedBody":"Reviewed as #1356."},{"Id":"10048838297","Type":"PullRequestEvent","CreatedAt":"2019-07-19T21:44:02","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1356","RelatedDescription":"Merged pull request \"Adds attribution for APIs previously special-cased by the compiler\" (#1356) at dotnet/standard","RelatedBody":"This applies some of the nullable attributes for APIs that were previously special-cased by the compiler. The attribution is very basic only includes cases where we'e a 100% certain that these are never going to change.\r\n\r\nI've arrived here by diffing CoreFX and .NET Standard using the following approach:\r\n\r\n**Included**\r\n\r\n* `DoesNotReturn`\r\n* `DoesNotReturnIf`\r\n\r\n**Considered**\r\n\r\n* `NotNullWhen`\r\n\r\n**Excluded**\r\n\r\n* `MaybeNullWhenAttribute`\r\n* `MaybeNullAttribute`\r\n* `AllowNullAttribute`\r\n* `DisallowNullAttribute`\r\n* `NotNullAttribute`\r\n* `NotNullIfNotNullAttribute`\r\n\r\n@stephentoub @jcouv @dotnet/nullablefc: Please double check my work here."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10051925799","Type":"IssuesEvent","CreatedAt":"2019-07-21T01:57:31","Actor":"cheenamalhotra","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/23435","RelatedDescription":"Closed issue \"Test: System.Data.SqlClient.Tests.SqlConnectionBasicTests/IntegratedAuthConnectionTest failed with \"System.Data.SqlClient.SqlException\"\" (#23435) at dotnet/corefx","RelatedBody":"Opened on behalf of @Jiayili1\n\nThe test `System.Data.SqlClient.Tests.SqlConnectionBasicTests/IntegratedAuthConnectionTest` has failed.\n\nSystem.Data.SqlClient.SqlException : Connection Timeout Expired.  The timeout period elapsed during the post-login phase.  The connection could have timed out while waiting for server to complete the login process and respond; Or it could have timed out while attempting to create multiple active connections.  The duration spent while attempting to connect to this server was - [Pre-Login] initialization=1; handshake=17; [Login] initialization=0; authentication=1; [Post-Login] complete=3998; \\r\n    ---- System.ComponentModel.Win32Exception : The wait operation timed out\n\n        Stack Trace:\n\n           at System.Data.SqlClient.SqlInternalConnection.OnError($SqlException exception, Boolean breakConnection, Action$1<Action> wrapCloseInAction) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SqlInternalConnection.cs:line 618\n       at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning($TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\TdsParser.cs:line 1107\n       at System.Data.SqlClient.TdsParserStateObject.ThrowExceptionAndWarning(Boolean callerHasConnectionLock, Boolean asyncClose) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\TdsParserStateObject.cs:line 932\n       at System.Data.SqlClient.TdsParserStateObject.ReadSniError($TdsParserStateObject stateObj, UInt32 error) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\TdsParserStateObject.cs:line 2572\n       at System.Data.SqlClient.TdsParserStateObject.ReadSniSyncOverAsync() in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\TdsParserStateObject.cs:line 2107\n       at System.Data.SqlClient.TdsParserStateObject.TryReadNetworkPacket() in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\TdsParserStateObject.cs:line 2032\n       at System.Data.SqlClient.TdsParserStateObject.TryPrepareBuffer() in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\TdsParserStateObject.cs:line 1077\n       at System.Data.SqlClient.TdsParserStateObject.TryReadByte(Byte& value) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\TdsParserStateObject.cs:line 1311\n       at System.Data.SqlClient.TdsParser.TryRun($RunBehavior runBehavior, $SqlCommand cmdHandler, $SqlDataReader dataStream, $BulkCopySimpleResultSet bulkCopyHandler, $TdsParserStateObject stateObj, Boolean& dataReady) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\TdsParser.cs:line 1590\n       at System.Data.SqlClient.TdsParser.Run($RunBehavior runBehavior, $SqlCommand cmdHandler, $SqlDataReader dataStream, $BulkCopySimpleResultSet bulkCopyHandler, $TdsParserStateObject stateObj) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\TdsParser.cs:line 1493\n       at System.Data.SqlClient.SqlInternalConnectionTds.CompleteLogin(Boolean enlistOK) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SqlInternalConnectionTds.cs:line 1005\n       at System.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin($ServerInfo serverInfo, Boolean ignoreSniOpenTimeout, $TimeoutTimer timeout, Boolean withFailover) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SqlInternalConnectionTds.cs:line 1591\n       at System.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover$catch$0() in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SqlInternalConnectionTds.cs:line 1332\n       at System.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist$catch$0() in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SqlInternalConnectionTds.cs:line 1184\n       at System.Data.SqlClient.SqlInternalConnectionTds..ctor($DbConnectionPoolIdentity identity, $SqlConnectionString connectionOptions, Object providerInfo, Boolean redirectedUserInstance, $SqlConnectionString userConnectionOptions, $SessionData reconnectSessionData, Boolean applyTransientFaultHandling) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SqlInternalConnectionTds.cs:line 355\n       at System.Data.SqlClient.SqlInternalConnectionTds..ctor$catch$0() in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SqlInternalConnectionTds.cs:line 374\n       at System.Data.SqlClient.SqlConnectionFactory.CreateConnection($DbConnectionOptions options, $DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, $DbConnectionPool pool, $DbConnection owningConnection, $DbConnectionOptions userOptions) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SqlConnectionFactory.cs:line 135\n       at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection($DbConnectionPool pool, $DbConnection owningObject, $DbConnectionOptions options, $DbConnectionPoolKey poolKey, $DbConnectionOptions userOptions) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\ProviderBase\\DbConnectionFactory.cs:line 113\n       at System.Data.ProviderBase.DbConnectionPool.CreateObject$catch$3() in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\ProviderBase\\DbConnectionPool.cs:line 755\n       at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest($DbConnection owningObject, $DbConnectionOptions userOptions, $DbConnectionInternal oldConnection) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\ProviderBase\\DbConnectionPool.cs:line 1606\n       at System.Data.ProviderBase.DbConnectionPool.TryGetConnection$catch$1() in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\ProviderBase\\DbConnectionPool.cs:line 1132\n       at System.Data.ProviderBase.DbConnectionPool.TryGetConnection($DbConnection owningObject, TaskCompletionSource$1<$DbConnectionInternal> retry, $DbConnectionOptions userOptions, $DbConnectionInternal& connection) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\ProviderBase\\DbConnectionPool.cs:line 1044\n       at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection($DbConnection owningConnection, TaskCompletionSource$1<$DbConnectionInternal> retry, $DbConnectionOptions userOptions, $DbConnectionInternal oldConnection, $DbConnectionInternal& connection) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\ProviderBase\\DbConnectionFactory.cs:line 289\n       at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal$catch$0() in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\ProviderBase\\DbConnectionInternal.cs:line 700\n       at System.Data.SqlClient.SqlInternalConnectionTds.TryReplaceConnection($DbConnection outerConnection, $DbConnectionFactory connectionFactory, TaskCompletionSource$1<$DbConnectionInternal> retry, $DbConnectionOptions userOptions) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SqlInternalConnectionTds.cs:line 1902\n       at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource$1<$DbConnectionInternal> retry) in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SqlConnection.cs:line 1031\n       at System.Data.SqlClient.SqlConnection.Open$catch$0() in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\src\\System\\Data\\SqlClient\\SqlConnection.cs:line 606\n       at System.Data.SqlClient.Tests.SqlConnectionBasicTests.IntegratedAuthConnectionTest() in E:\\A\\_work\\887\\s\\corefx\\src\\System.Data.SqlClient\\tests\\FunctionalTests\\SqlConnectionTest.cs:line 38\n       at _$ILCT$.$ILT$ReflectionDynamicInvoke$.InvokeRetV(Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState, Boolean targetIsThisCall)\n       at System.InvokeUtils.CalliIntrinsics.Call(IntPtr dynamicInvokeHelperMethod, Object thisPtrForDynamicInvokeHelperMethod, Object thisPtr, IntPtr methodToCall, ArgSetupState argSetupState)\n       at System.InvokeUtils.CallDynamicInvokeMethod(Object thisPtr, IntPtr methodToCall, Object thisPtrDynamicInvokeMethod, IntPtr dynamicInvokeHelperMethod, IntPtr dynamicInvokeHelperGenericDictionary, Object targetMethodOrDelegate, Object[] parameters, BinderBundle binderBundle, Boolean invokeMethodHelperIsThisCall, Boolean methodToCallIsThisCall) in CallDynamicInvokeMethod:line 16707566\n    \n    ----- Inner Stack Trace -----\n    \nBuild : UWP 6.0 - 20170821.01 (UWP ILC Tests)\nFailing configurations:\n- Windows.10.Amd64.ClientRS3-x86\n  - Release\n\nDetail: https://mc.dot.net/#/product/netcore/uwp60/source/official~2Fcorefx~2Frelease~2Fuwp6.0~2F/type/test~2Ffunctional~2Filc~2F/build/20170821.01/workItem/System.Data.SqlClient.Tests/analysis/xunit/System.Data.SqlClient.Tests.SqlConnectionBasicTests~2FIntegratedAuthConnectionTest"},{"Id":"10051911394","Type":"PullRequestEvent","CreatedAt":"2019-07-21T01:45:59","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/39647","RelatedDescription":"Merged pull request \"Disable DefaultPageSettings_Null_ReturnsExpected test\" (#39647) at dotnet/corefx","RelatedBody":"#39381"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10052068204","Type":"IssuesEvent","CreatedAt":"2019-07-21T03:46:42","Actor":"Shadow4walker","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7638","RelatedDescription":"Closed issue \"System.Reflection.MissingRuntimeArtifactException\" (#7638) at dotnet/corert","RelatedBody":"I'm trying to use a [NoesisGUI](https://github.com/Shadow4walker/NoesisSample) with corert\r\nalso i have tried all of rd.xml possible solutions with no luck!! idk what am i missing here! \"actually I don't know what's the correct way to use rd.xml with this\"\r\n[NoesisGUI Managed SDK](https://github.com/Noesis/Managed)\r\n\r\n here's the log after starting the sample\r\n\r\n> Unhandled Exception: EETypeRva:0x009F1C88(System.Reflection.MissingRuntimeArtifactException): MakeGenericMethod() cannot create this generic method instantiation because the instantiation was not metadata-enabled: 'Noesis.Extend.CreateGetterHelper<NoesisApp.Display,System.Int32>(System.Reflection.MethodInfo)' For more information, please visit http://go.microsoft.com/fwlink/?LinkID=616868\r\n   at Internal.Reflection.Core.Execution.ExecutionEnvironment.GetMethodInvoker(RuntimeTypeInfo, QMethodDefinition, RuntimeTypeInfo[], MemberInfo) + 0x148\r\n   at System.Reflection.Runtime.MethodInfos.NativeFormat.NativeFormatMethodCommon.GetUncachedMethodInvoker(RuntimeTypeInfo[], MemberInfo) + 0x50\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeMethodInfo.get_MethodInvoker() + 0xa8\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeNamedMethodInfo`1.MakeGenericMethod(Type[]) + 0x104\r\n   at Noesis.Extend.CreateGetter[ReturnT](Type, MethodInfo) + 0x6b\r\n   at Noesis.Extend.PropertyAccessorRO`1..ctor(PropertyInfo) + 0x3e\r\n   at Noesis.Extend.<>c__DisplayClass407_0`1.<AddPropertyAccessor>b__1() + 0x24\r\n   at Noesis.Extend.AddPropertyAccessor(Extend.NativeTypePropsInfo, PropertyInfo, Func`1, Func`1) + 0xa4\r\n   at Noesis.Extend.AddPropertyAccessor[PropertyT](Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x88\r\n   at Noesis.Extend.<>c.<AddPropertyFunctions>b__405_4(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x39\r\n   at Noesis.Extend.AddProperty(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0xae\r\n   at Noesis.Extend.CreateNativePropsData(Type, PropertyInfo[], Extend.NativeTypeInfo, Int32&) + 0x1b4\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x278\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.AddProperty(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x108\r\n   at Noesis.Extend.CreateNativePropsData(Type, PropertyInfo[], Extend.NativeTypeInfo, Int32&) + 0x1b4\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x278\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.CreateNativeTypeData(Type, IntPtr) + 0x4e\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x266\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.NewCPtr(Type, Object) + 0x21\r\n   at Noesis.Extend.GetInstanceHandle(Object) + 0x6c\r\n   at NoesisApp.Application.Start() + 0x28f\r\n   at NoesisApp.Application.Run() + 0x30\r\n   at ConsoleApp1.Program.Main(String[]) + 0x5c\r\n   at ConsoleApp1!<BaseAddress>+0x52d480<"},{"Id":"10051843025","Type":"IssuesEvent","CreatedAt":"2019-07-21T00:51:47","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7639","RelatedDescription":"Opened issue \"CoreRT instructions no longer work\" (#7639) at dotnet/corert","RelatedBody":"I'm not sure what has changed but it affects both of my machines:\r\n```\r\nMicrosoft.NETCore.Native.Publish.targets(78,5): error :\r\nThe PrivateSdkAssemblies ItemGroup is required for _ComputeAssembliesToCompileToNative\r\n```"},{"Id":"10051792053","Type":"IssuesEvent","CreatedAt":"2019-07-21T00:11:17","Actor":"Shadow4walker","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7638","RelatedDescription":"Opened issue \"System.Reflection.MissingRuntimeArtifactException\" (#7638) at dotnet/corert","RelatedBody":"I'm trying to use a [NoesisGUI](https://github.com/Shadow4walker/NoesisSample) with corert\r\nalso i have tried all of rd.xml possible solutions with no luck!! idk what am i missing here! \"actually I don't know what's the correct way to use rd.xml with this\"\r\n[NoesisGUI Managed SDK](https://github.com/Noesis/Managed)\r\n\r\n here's the log after starting the sample\r\n\r\n> Unhandled Exception: EETypeRva:0x009F1C88(System.Reflection.MissingRuntimeArtifactException): MakeGenericMethod() cannot create this generic method instantiation because the instantiation was not metadata-enabled: 'Noesis.Extend.CreateGetterHelper<NoesisApp.Display,System.Int32>(System.Reflection.MethodInfo)' For more information, please visit http://go.microsoft.com/fwlink/?LinkID=616868\r\n   at Internal.Reflection.Core.Execution.ExecutionEnvironment.GetMethodInvoker(RuntimeTypeInfo, QMethodDefinition, RuntimeTypeInfo[], MemberInfo) + 0x148\r\n   at System.Reflection.Runtime.MethodInfos.NativeFormat.NativeFormatMethodCommon.GetUncachedMethodInvoker(RuntimeTypeInfo[], MemberInfo) + 0x50\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeMethodInfo.get_MethodInvoker() + 0xa8\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeNamedMethodInfo`1.MakeGenericMethod(Type[]) + 0x104\r\n   at Noesis.Extend.CreateGetter[ReturnT](Type, MethodInfo) + 0x6b\r\n   at Noesis.Extend.PropertyAccessorRO`1..ctor(PropertyInfo) + 0x3e\r\n   at Noesis.Extend.<>c__DisplayClass407_0`1.<AddPropertyAccessor>b__1() + 0x24\r\n   at Noesis.Extend.AddPropertyAccessor(Extend.NativeTypePropsInfo, PropertyInfo, Func`1, Func`1) + 0xa4\r\n   at Noesis.Extend.AddPropertyAccessor[PropertyT](Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x88\r\n   at Noesis.Extend.<>c.<AddPropertyFunctions>b__405_4(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x39\r\n   at Noesis.Extend.AddProperty(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0xae\r\n   at Noesis.Extend.CreateNativePropsData(Type, PropertyInfo[], Extend.NativeTypeInfo, Int32&) + 0x1b4\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x278\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.AddProperty(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x108\r\n   at Noesis.Extend.CreateNativePropsData(Type, PropertyInfo[], Extend.NativeTypeInfo, Int32&) + 0x1b4\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x278\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.CreateNativeTypeData(Type, IntPtr) + 0x4e\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x266\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.NewCPtr(Type, Object) + 0x21\r\n   at Noesis.Extend.GetInstanceHandle(Object) + 0x6c\r\n   at NoesisApp.Application.Start() + 0x28f\r\n   at NoesisApp.Application.Run() + 0x30\r\n   at ConsoleApp1.Program.Main(String[]) + 0x5c\r\n   at ConsoleApp1!<BaseAddress>+0x52d480<"},{"Id":"10047516587","Type":"IssuesEvent","CreatedAt":"2019-07-19T17:48:46","Actor":"cshung","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7619","RelatedDescription":"Closed issue \"build failed on clang5.0\" (#7619) at dotnet/corert","RelatedBody":"On 32 bit architectures, `size_t` is an unsigned 32 bit integer, and therefore the condition can never be true. On `clang5.0`, this becomes a warning and blocks the build.\r\n\r\n```\r\n/corert/src/Native/gc/unix/cgroup.cpp:440:31: error: comparison of constant 9223372032559808512 with expression of type 'size_t' (aka 'unsigned int') is always false [-Werror,-Wtautological-constant-out-of-range-compare]\r\n    if (physical_memory_limit > 0x7FFFFFFF00000000)\r\n        ~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~\r\n1 error generated.\r\n```\r\n\r\nHere is the associated code:\r\n```\r\n    // If there's no memory limit specified on the container this \r\n    // actually returns 0x7FFFFFFFFFFFF000 (2^63-1 rounded down to \r\n    // 4k which is a common page size). So we know we are not\r\n    // running in a memory restricted environment.\r\n    if (physical_memory_limit > 0x7FFFFFFF00000000)\r\n    {\r\n        return 0;\r\n    }\r\n```\r\nAll we have to do is to figure out what would be returned on an unrestricted 32-bit execution environment. I have tried it on a physical arm32 device, without being inside a Docker container, it returned 0 because [`FindHierarchyMount`](https://github.com/dotnet/corert/blob/98cdb7f8ccecdc886775e28448091fa59665025e/src/Native/gc/unix/cgroup.cpp#L169) finds nothing.\r\n\r\nAccording to [this thread](https://unix.stackexchange.com/questions/420906/what-is-the-value-for-the-cgroups-limit-in-bytes-if-the-memory-is-not-restricte), it appears to me that for 32-bits architectures, we should probably check against a different constant, I haven't figured that out yet."},{"Id":"10047044834","Type":"PullRequestEvent","CreatedAt":"2019-07-19T16:29:38","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7636","RelatedDescription":"Merged pull request \"Adjust getMethodSig for generic inlining\" (#7636) at dotnet/corert","RelatedBody":"We were not using the `memberParent` parameter, but it's critical to use it when generic inlining happens.\r\n\r\nFixes #7625."},{"Id":"10047044791","Type":"IssuesEvent","CreatedAt":"2019-07-19T16:29:38","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7625","RelatedDescription":"Closed issue \"CodeGenerationFailedException after July 13th\" (#7625) at dotnet/corert","RelatedBody":"```\r\nILCompiler.CodeGenerationFailedException: Code generation failed ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\n  Parameter name: index\r\n     at Internal.JitInterface.CorInfoImpl.HandleToObject(IntPtr handle)\r\n     at Internal.JitInterface.CorInfoImpl.HandleToObject(CORINFO_CLASS_STRUCT_* type)\r\n     at Internal.JitInterface.CorInfoImpl.isMoreSpecificType(CORINFO_CLASS_STRUCT_* cls1, CORINFO_CLASS_STRUCT_* cls2)\r\n     at Internal.JitInterface.CorInfoImpl._isMoreSpecificType(IntPtr thisHandle, IntPtr* ppException, CORINFO_CLASS_STRUCT_* cls1, CORINFO_CLASS_STRUCT_* cls2)\r\n     --- End of inner exception stack trace ---\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.ComputeDependencyNodeDependencies(List`1 obj)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n```\r\nThe same code built successfully in July 12th, but failed after July 13th. I suspect it is because of #7612, but I don't know the reason exactly.\r\nAddition: I tried to reproduce the bug by a \"Hello world\" program, but it is built successfully, so I even don't know how to reproduce it."},{"Id":"10046970844","Type":"PullRequestEvent","CreatedAt":"2019-07-19T16:18:02","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7637","RelatedDescription":"Merged pull request \"Port GC change from CoreCLR\" (#7637) at dotnet/corert","RelatedBody":""},{"Id":"10046000212","Type":"PullRequestEvent","CreatedAt":"2019-07-19T14:08:13","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7637","RelatedDescription":"Opened pull request \"Port GC change from CoreCLR\" (#7637) at dotnet/corert","RelatedBody":""},{"Id":"10044608465","Type":"PullRequestEvent","CreatedAt":"2019-07-19T10:26:14","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7636","RelatedDescription":"Opened pull request \"Adjust getMethodSig for generic inlining\" (#7636) at dotnet/corert","RelatedBody":"We were not using the `memberParent` parameter, but it's critical to use it when generic inlining happens.\r\n\r\nFixes #7625."},{"Id":"10042226482","Type":"PullRequestEvent","CreatedAt":"2019-07-19T02:17:14","Actor":"cshung","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7635","RelatedDescription":"Merged pull request \"Fix string import for CppCodeGen\" (#7635) at dotnet/corert","RelatedBody":"The capital `X` is not a standard [escape sequence](https://en.cppreference.com/w/cpp/language/escape), we should use lower case `x`."},{"Id":"10041889422","Type":"PullRequestEvent","CreatedAt":"2019-07-19T00:43:32","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7635","RelatedDescription":null,"RelatedBody":"The capital `X` is not a standard [escape sequence](https://en.cppreference.com/w/cpp/language/escape), we should use lower case `x`."},{"Id":"10041889304","Type":"PullRequestEvent","CreatedAt":"2019-07-19T00:43:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7635","RelatedDescription":"Closed pull request \"Fix string import for CppCodeGen\" (#7635) at dotnet/corert","RelatedBody":"The capital `X` is not a standard [escape sequence](https://en.cppreference.com/w/cpp/language/escape), we should use lower case `x`."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10051507320","Type":"PullRequestEvent","CreatedAt":"2019-07-20T20:53:45","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3441","RelatedDescription":"Merged pull request \"Fix regeneration of files when asset cache changes.\" (#3441) at dotnet/sdk","RelatedBody":"Both the deps.json and runtimeconfig.json files remain unchanged when an\r\nincremental build takes place that changes a property that would invalidate the\r\nassets cache.\r\n\r\nFor a property like `SelfContained`, this might mean the files are no longer\r\nvalid for the incremental build's output.\r\n\r\nFixes dotnet/cli#11956."},{"Id":"10050844328","Type":"PullRequestEvent","CreatedAt":"2019-07-20T14:58:25","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3443","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#3443) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190719.09\r\n- **Date Produced**: 7/19/2019 9:12 PM\r\n- **Commit**: 3fcf1dac5531a0a92ce53af4eae4fc42316a0ccf\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27919-09\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n"},{"Id":"10050741585","Type":"PullRequestEvent","CreatedAt":"2019-07-20T14:06:45","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3442","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#3442) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"470699058","IsPullRequest":false,"CreatedAt":"2019-07-20T17:51:02","Actor":"aggieben","Number":"25809","RawContent":null,"Title":"error MSB3721: The command \"ml64.exe ...\" exited with code 1","State":"open","Body":"I'm trying to build coreclr on Windows 10, `release/3.0` branch with VS 2019.  I've gone through the list of VS 2017 prerequisites and tried to make sure I have all those, as well as an updated version of CMake (VS2019 doesn't appear to be documented at this point).  The build fails like this (two of these in the log):\r\n\r\n![image](https://user-images.githubusercontent.com/1321/61582158-bb20bf00-aaec-11e9-839c-093f45f94c2a.png)\r\n\r\nAlso a bit further down, \r\n![image](https://user-images.githubusercontent.com/1321/61582181-edcab780-aaec-11e9-91c6-f629efd7e0dd.png)\r\n\r\nAny pointers appreciated.\r\n","Url":"https://github.com/dotnet/coreclr/issues/25809","RelatedDescription":"Open issue \"error MSB3721: The command \"ml64.exe ...\" exited with code 1\" (#25809)"},{"Id":"470592985","IsPullRequest":true,"CreatedAt":"2019-07-20T15:58:19","Actor":"BruceForstall","Number":"25801","RawContent":null,"Title":"Fix Linux compilation flags","State":"closed","Body":"`configureoptimization.cmake` was being included before `CLR_CMAKE_PLATFORM_UNIX`\r\nwas set, though it depends on that variable to set Linux optimization\r\nflags. Move the include lower, after `CLR_CMAKE_PLATFORM_UNIX` is set.\r\n\r\nThis leads to Debug builds being built with `-O0` and Checked builds built\r\nwith `-O2`, instead of the default due to no `-O` flag being passed. Release\r\nis still built `-O3`; somehow, it was being built that way already.\r\n\r\nFixes #25273 (Although Alpine will still see a stack overflow in the failing\r\ntest case with Debug builds, it won't affect Checked build CI runs, which is\r\nthe primary flavor tested in coreclr CI.)","Url":"https://github.com/dotnet/coreclr/pull/25801","RelatedDescription":"Closed or merged PR \"Fix Linux compilation flags\" (#25801)"},{"Id":"470625103","IsPullRequest":true,"CreatedAt":"2019-07-20T15:49:30","Actor":"sdmaclea","Number":"25804","RawContent":null,"Title":"Arm64 define FEATURE_DATATARGET4","State":"closed","Body":"FEATURE_DATATARGET4 enables the portable out of\r\nprocess stack unwind","Url":"https://github.com/dotnet/coreclr/pull/25804","RelatedDescription":"Closed or merged PR \"Arm64 define FEATURE_DATATARGET4\" (#25804)"},{"Id":"470670052","IsPullRequest":true,"CreatedAt":"2019-07-20T12:34:17","Actor":"dotnet-maestro[bot]","Number":"25808","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190719.08\r\n- **Date Produced**: 7/19/2019 8:26 PM\r\n- **Commit**: 7d70bbe81b4b86d491e30f957551441464c85375\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.27919.8\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25808","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#25808)"},{"Id":"470669626","IsPullRequest":true,"CreatedAt":"2019-07-20T12:29:18","Actor":"dotnet-maestro[bot]","Number":"25807","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190719.9\r\n- **Date Produced**: 7/20/2019 6:18 AM\r\n- **Commit**: 45851336efa3b754f427d00cef3d388357aed308\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19369.9\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19369.9\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25807","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#25807)"},{"Id":"470669034","IsPullRequest":true,"CreatedAt":"2019-07-20T12:22:05","Actor":"dotnet-maestro[bot]","Number":"25806","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19369.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25806","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#25806)"},{"Id":"470630116","IsPullRequest":false,"CreatedAt":"2019-07-20T03:35:38","Actor":"forestbat","Number":"25805","RawContent":null,"Title":"A question about CLR","State":"open","Body":"I read CLR via C# ï¼ˆ4th version in 2014ï¼‰ï¼Œit says that MS's purpose is decreasing GC's time to less than a normal memory page fault's timeï¼Œso today do you keep the purpose or abandone itï¼Ÿ","Url":"https://github.com/dotnet/coreclr/issues/25805","RelatedDescription":"Open issue \"A question about CLR\" (#25805)"},{"Id":"470616793","IsPullRequest":true,"CreatedAt":"2019-07-20T03:16:45","Actor":"janvorli","Number":"25803","RawContent":null,"Title":"Revert \"Enable MHR support on OSX\"","State":"closed","Body":"Reverts dotnet/coreclr#25716\r\n\r\nI have found a couple of issues that I need to fix after my vacation.","Url":"https://github.com/dotnet/coreclr/pull/25803","RelatedDescription":"Closed or merged PR \"Revert \"Enable MHR support on OSX\"\" (#25803)"},{"Id":"470588590","IsPullRequest":true,"CreatedAt":"2019-07-20T02:22:54","Actor":"sdmaclea","Number":"25800","RawContent":null,"Title":"Remove dead ContextTransitionFrame","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25800","RelatedDescription":"Closed or merged PR \"Remove dead ContextTransitionFrame\" (#25800)"},{"Id":"470606799","IsPullRequest":true,"CreatedAt":"2019-07-19T23:39:09","Actor":"davmason","Number":"25802","RawContent":null,"Title":"Fix GetSequencePoints when profiler provides mapping via SetILInstrumentedCodeMap","State":"open","Body":"If a profiler modifies IL and provides a mapping via SetILInstrumentedCodeMap it currently will be ignored.","Url":"https://github.com/dotnet/coreclr/pull/25802","RelatedDescription":"Open PR \"Fix GetSequencePoints when profiler provides mapping via SetILInstrumentedCodeMap\" (#25802)"},{"Id":"470033791","IsPullRequest":false,"CreatedAt":"2019-07-19T22:36:03","Actor":"aggieben","Number":"25785","RawContent":null,"Title":"CMake Error: Could not create named generator Visual Studio 16 2019","State":"closed","Body":"I cloned the repository and tried running `build.cmd`, but experienced this failure:\r\n\r\n![image](https://user-images.githubusercontent.com/1321/61497811-7844d700-a986-11e9-9f2d-5cf4508f9eca.png).\r\n\r\nThere aren't any instructions specific to VS 2019, so I'm a bit unsure where to go from here.","Url":"https://github.com/dotnet/coreclr/issues/25785","RelatedDescription":"Closed issue \"CMake Error: Could not create named generator Visual Studio 16 2019\" (#25785)"},{"Id":"470509351","IsPullRequest":true,"CreatedAt":"2019-07-19T22:23:12","Actor":"jkotas","Number":"25797","RawContent":null,"Title":"Delete old test .lst files","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25797","RelatedDescription":"Closed or merged PR \"Delete old test .lst files\" (#25797)"},{"Id":"470301424","IsPullRequest":true,"CreatedAt":"2019-07-19T22:09:47","Actor":"dotnet-maestro[bot]","Number":"25792","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190718.11\r\n- **Date Produced**: 7/19/2019 5:03 AM\r\n- **Commit**: 42f1cc3e5a6be30b262f8216d674678f304a9186\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.27918.11\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25792","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#25792)"},{"Id":"470296953","IsPullRequest":true,"CreatedAt":"2019-07-19T22:09:25","Actor":"dotnet-maestro[bot]","Number":"25790","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190718.7\r\n- **Date Produced**: 7/18/2019 11:09 PM\r\n- **Commit**: eecde8a8751dbe7fdb17ba4dfbd032e26f4cae7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19368.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19368.7\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25790","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#25790)"},{"Id":"470576613","IsPullRequest":true,"CreatedAt":"2019-07-19T21:53:04","Actor":"sywhang","Number":"25799","RawContent":null,"Title":"[3.0 port] Fix first value of counter payload being skewed","State":"open","Body":"Porting https://github.com/dotnet/coreclr/pull/25739 to 3.0 branch.","Url":"https://github.com/dotnet/coreclr/pull/25799","RelatedDescription":"Open PR \"[3.0 port] Fix first value of counter payload being skewed\" (#25799)"},{"Id":"470559455","IsPullRequest":false,"CreatedAt":"2019-07-19T21:20:44","Actor":"Inzanit","Number":"25798","RawContent":null,"Title":"Would the repository benefit from a .vsconfig file for required workloads","State":"open","Body":"As listed in the build instructions - and updated regularly according to version - several workloads are required to build CoreCLR (at least on Windows).\r\n\r\nWith the [addition of `.vsconfig`](https://devblogs.microsoft.com/setup/configure-visual-studio-across-your-organization-with-vsconfig/) and the ability to determine workloads based on this configuration, there might be value in adding this to the repo.\r\n\r\nI'd be happy to contribute if people thought this was something that would improve the developer experience. ","Url":"https://github.com/dotnet/coreclr/issues/25798","RelatedDescription":"Open issue \"Would the repository benefit from a .vsconfig file for required workloads\" (#25798)"},{"Id":"470493117","IsPullRequest":true,"CreatedAt":"2019-07-19T19:07:20","Actor":"ivanbuha","Number":"25796","RawContent":null,"Title":"Updated Build Instructions","State":"open","Body":"Instructions were updated and validated to reflect latest releases of the components that are required to build coreclr.\r\n\r\nFix #25723","Url":"https://github.com/dotnet/coreclr/pull/25796","RelatedDescription":"Open PR \"Updated Build Instructions\" (#25796)"},{"Id":"470484613","IsPullRequest":true,"CreatedAt":"2019-07-19T18:43:54","Actor":"janvorli","Number":"25795","RawContent":null,"Title":"Fix issue with out-of-scope GCFrame in Frame list","State":"open","Body":"More aggressive C/C++ optimizations done by VS2019 are breaking fragile\r\nassumptions of the CoreCLR \"manually managed code\".\r\n\r\nUnwinding of Frame chains accesses stack local variables after the stack\r\nframe has been unwound, but it depends on their content to be left\r\nintact. The new compiler is breaking this assumption by stack-packing a\r\ndifferent variable over it.\r\n\r\nThis change fixes the problem by adding a destructor to GCFrame that\r\npops the frame from the per-thread Frame list.\r\n\r\nI also had to refactor two functions where the compiler was complaining about \r\nmixing SEH and C++ EH in single function.\r\n\r\nClose #25481","Url":"https://github.com/dotnet/coreclr/pull/25795","RelatedDescription":"Open PR \"Fix issue with out-of-scope GCFrame in Frame list\" (#25795)"},{"Id":"470481152","IsPullRequest":true,"CreatedAt":"2019-07-19T18:35:00","Actor":"ivanbuha","Number":"25794","RawContent":null,"Title":"Updated build instructions","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25794","RelatedDescription":"Closed or merged PR \"Updated build instructions\" (#25794)"},{"Id":"470030085","IsPullRequest":true,"CreatedAt":"2019-07-19T17:09:28","Actor":"jkoritzinsky","Number":"25784","RawContent":null,"Title":"Rewrite SafeHandle interop tests","State":"closed","Body":"Completely rewrite the SafeHandle tests to not only be readable but easily understandable with nicer naming. Additionally, design tests to specifically target the various code-paths in the SafeHandle code.\r\n\r\nThe old tests used to just do a splattering of tests that, while more exhaustive from the perspective of reading the test, had less useful coverage than the new tests.\r\n\r\nThe old tests were also Windows-only since they used the `CreateFileW` API to create real handles (which you don't actually need for testing SafeHandle interop functionality).","Url":"https://github.com/dotnet/coreclr/pull/25784","RelatedDescription":"Closed or merged PR \"Rewrite SafeHandle interop tests\" (#25784)"},{"Id":"470053560","IsPullRequest":true,"CreatedAt":"2019-07-19T16:43:26","Actor":"jorive","Number":"25786","RawContent":null,"Title":"Remove assertion from Shutdown path","State":"closed","Body":"The diagnostics server is doing nothing to handle potential errors in this path.\r\nFixes #25755 ","Url":"https://github.com/dotnet/coreclr/pull/25786","RelatedDescription":"Closed or merged PR \"Remove assertion from Shutdown path\" (#25786)"},{"Id":"470421938","IsPullRequest":true,"CreatedAt":"2019-07-19T16:30:17","Actor":"y-yamshchikov","Number":"25793","RawContent":null,"Title":"add stat() call on dlopening files","State":"open","Body":"In case we have many native dll search directories the runtime looks over them inefficiently: it uses dlopen with it's userspace overhead which uses open() syscall even in a case the file or any of directories above it does not exist.\r\nWe have estimated upper bound of startup time decrease in our representive application set as 2.6% and have got actual decrease as much as 2.4% with this patch.","Url":"https://github.com/dotnet/coreclr/pull/25793","RelatedDescription":"Open PR \"add stat() call on dlopening files\" (#25793)"},{"Id":"470001825","IsPullRequest":true,"CreatedAt":"2019-07-19T16:19:37","Actor":"jkotas","Number":"25781","RawContent":null,"Title":"Cleanup processor cache size computation","State":"closed","Body":"- Make standalone GC PAL to be in sync with the built-in PAL\r\n- Delete dead/unreachable code","Url":"https://github.com/dotnet/coreclr/pull/25781","RelatedDescription":"Closed or merged PR \"Cleanup processor cache size computation\" (#25781)"},{"Id":"470299535","IsPullRequest":true,"CreatedAt":"2019-07-19T14:50:48","Actor":"dotnet-maestro[bot]","Number":"25791","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190718.5\r\n- **Date Produced**: 7/19/2019 2:12 AM\r\n- **Commit**: 182bed51dec709b3b1b56a4f435e0727e5dea110\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19368.5\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19368.5\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25791","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#25791)"},{"Id":"470109534","IsPullRequest":true,"CreatedAt":"2019-07-19T07:36:20","Actor":"andy-ms","Number":"25788","RawContent":null,"Title":"Fix typo: `_TARGET_X86` -> `_TARGET_X86_`","State":"closed","Body":"This typo was in #24989 so would be a new regression in 3.0.\r\nIn an x86 build, it causes us to not get the cache size correct,\r\nleading us to use a smaller default cache size and do more GCs.\r\n\r\nTested with GCPerfSim and this PR reduces TotalNumberGCs by 33% using an x86 build.\r\n\r\nI believe this is an \"Unacceptable performance regression from 2.2 that is not a corner case\" so meets the bar for 3.0.\r\n\r\nThanks @jkotas for discovering this in https://github.com/dotnet/coreclr/pull/25781#discussion_r305127079","Url":"https://github.com/dotnet/coreclr/pull/25788","RelatedDescription":"Closed or merged PR \"Fix typo: `_TARGET_X86` -> `_TARGET_X86_`\" (#25788)"},{"Id":"470120356","IsPullRequest":false,"CreatedAt":"2019-07-19T03:30:31","Actor":"iskiselev","Number":"25789","RawContent":null,"Title":"ProfilerAPI: Is it safe to cache IMetaDataImport","State":"open","Body":"Is it safe for profiler to cache IMetaDataImport for a module for a module lifetime?\r\nI'm asking this question, as ICorProfilerInfo::GetModuleMetaData will fail if it is called from P/Invoke  callback, but looks like calls for cached IMetaDataImport methods works fine even from P/Invoke. \r\nMSDN documentation does not give any hints about IMetaDataImport lifetime and any problems that may be introduced by preserving IMetaDataImport non-released.","Url":"https://github.com/dotnet/coreclr/issues/25789","RelatedDescription":"Open issue \"ProfilerAPI: Is it safe to cache IMetaDataImport\" (#25789)"},{"Id":"469992288","IsPullRequest":true,"CreatedAt":"2019-07-19T02:33:43","Actor":"cshung","Number":"25780","RawContent":null,"Title":"A simple disassembler fix","State":"closed","Body":"Check out the Figure 2-9 of Intel's manual if you do not trust the comments.","Url":"https://github.com/dotnet/coreclr/pull/25780","RelatedDescription":"Closed or merged PR \"A simple disassembler fix\" (#25780)"},{"Id":"470104617","IsPullRequest":false,"CreatedAt":"2019-07-19T02:17:43","Actor":"swift-kim","Number":"25787","RawContent":null,"Title":"[Question] IBC training and partial crossgen on Linux","State":"open","Body":"I'm trying to generate optimized (partial-ngened) assemblies against user applications using IBC data on Linux system (armel Tizen). The system is running the latest coreclr runtime and crossgen built from source. I have no other internal tools like `ibcmerge.exe`.\r\n\r\nI have created instrumented images of some target assemblies (including system assemblies), and obtained training data (.ibc files) by running different applications several times. Here is a [sample](https://github.com/dotnet/coreclr/files/3409654/ibc-new.zip). As far as I see in HexViewer (I found no other ways to read the files), the files have similar structures to those in _optimization.linux-x64.ibc.corefx_ therefore they look quite valid.\r\n\r\nI have run crossgen again with the IBC data as input and passing `PartialNGen`/`UseIBCFile` as true, and in fact it could generate some kind of optimized images for the assemblies. However, the profiling result shows they are optimized for only the first application I have run for training, but not exactly for other applications.\r\n\r\n**TL;DR** - Is it able to train partial-ngened assemlibes for mutiple scenarios/runs based purely on crossgen?\r\n\r\nAny comments will help a lot. Thank you.","Url":"https://github.com/dotnet/coreclr/issues/25787","RelatedDescription":"Open issue \"[Question] IBC training and partial crossgen on Linux\" (#25787)"},{"Id":"470022419","IsPullRequest":true,"CreatedAt":"2019-07-18T22:34:36","Actor":"trylek","Number":"25783","RawContent":null,"Title":"WIP [no-merge] IsManagedSequential Crossgen instrumentation","State":"open","Body":"This change (not to be merged in) adds IsManagedSequential logging\r\nto Crossgen. I have sent out a separate PR for the counterpart\r\nSuperIlc and CPAOT changes. I'll welcome any suggestions you might\r\nhave as to improving the instrumentation. I'll analyze and summarize\r\nactual comparison results next week.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/coreclr/pull/25783","RelatedDescription":"Open PR \"WIP [no-merge] IsManagedSequential Crossgen instrumentation\" (#25783)"},{"Id":"470016841","IsPullRequest":true,"CreatedAt":"2019-07-18T22:18:38","Actor":"jorive","Number":"25782","RawContent":null,"Title":"Fix: Diagnostics Server IPC thread causes 20-40ms shutdown delays on â€¦","State":"open","Body":"â€¦Windows (#25602)\r\n\r\nNow, the diagnostics server attempts to do appropriate cleanup of its resources during shutdown.\r\n\r\n```log\r\n1. Closes the IPC channel\r\n2. if Windows:\r\n  - Cancel sync IO operations on the running server thread\r\n3. Closes the running server thread handle\r\n```\r\n\r\nThis change alleviates the issue because it manually cancel the blocking `ConnectNamedPipe` sync call in order to allow the server thread exit gracefully (instead of waiting for the OS to tear it down).\r\n\r\nFixes: https://github.com/dotnet/coreclr/issues/25463\r\n(cherry picked from commit dedef281de99a2c2c4777f27166c166b08024b6f)","Url":"https://github.com/dotnet/coreclr/pull/25782","RelatedDescription":"Open PR \"Fix: Diagnostics Server IPC thread causes 20-40ms shutdown delays on â€¦\" (#25782)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"470727673","IsPullRequest":false,"CreatedAt":"2019-07-21T00:21:09","Actor":"dtivel","Number":"11964","RawContent":null,"Title":"dotnet-install.sh:  fails on macOS","State":"open","Body":"## Steps to reproduce\r\nOn macOS open bash shell and execute:\r\n```\r\ncurl -o ./dotnet-install.sh https://raw.githubusercontent.com/dotnet/cli/master/scripts/obtain/dotnet-install.sh\r\nchmod +x ./dotnet-install.sh\r\n./dotnet-install.sh -i ./cli -c 1.0\r\n```\r\n## Expected  behavior\r\nInstall will succeed.\r\n\r\n## Actual behavior\r\n```\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-sdk-1.1.11-osx-x64.tar.gz\r\ncurl: (22) The requested URL returned error: 404 \r\ndotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-sdk-1.1.11-osx-x64.tar.gz\r\ndotnet-install: Downloading legacy link: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-dev-osx-x64.1.1.11.tar.gz\r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-dev-osx-x64.1.1.11.tar.gz\r\ncp: illegal option -- -\r\nusage: cp [-R [-H | -L | -P]] [-fi | -n] [-apvXc] source_file target_file\r\n       cp [-R [-H | -L | -P]] [-fi | -n] [-apvXc] source_file ... target_directory\r\n```\r\n\r\nThe root problem is [this change](https://github.com/dotnet/cli/commit/7a1afb7e707e44fd3a3c6e0dd81dc92aa9b7f7d9#diff-3385102241bcd3718b9ca13a0c55b9afR615).  On macOS `cp` does not have a `--remove-destination` option.\r\n","Url":"https://github.com/dotnet/cli/issues/11964","RelatedDescription":"Open issue \"dotnet-install.sh:  fails on macOS\" (#11964)"},{"Id":"470722137","IsPullRequest":true,"CreatedAt":"2019-07-20T23:25:29","Actor":"dotnet-maestro[bot]","Number":"11963","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190720.4\r\n- **Date Produced**: 7/20/2019 10:54 PM\r\n- **Commit**: 65ca72c4206cd73a14b3c202713ce700139896d8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19370.4\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11963","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11963)"},{"Id":"470610578","IsPullRequest":false,"CreatedAt":"2019-07-20T20:53:44","Actor":"peterhuene","Number":"11956","RawContent":null,"Title":"Deps file and runtimeconfig are not regenerated upon assets cache invalidation.","State":"closed","Body":"## Steps to reproduce\r\n\r\nOn Windows with an x64 SDK installed:\r\n\r\n1. `dotnet new console`\r\n2. `dotnet build -r win-x64`\r\n3. Run `bin\\Debug\\netcoreapp3.0\\win-x64\\foo.exe` (expected: it prints \"hello world\").\r\n4. `dotnet build -r win-x86 /p:SelfContained=false --no-restore`\r\n5. Run `bin\\Debug\\netcoreapp3.0\\win-x64\\foo.exe`\r\n\r\n## Expected  behavior\r\n\r\nThe application should run as a framework-dependent application.\r\n\r\n## Actual behavior\r\n\r\nThe application fails to start because hostpolicy.dll can't be found.\r\n\r\nThis is because both the deps.json file and the runtimeconfig.json file remain unchanged from the first build, which was self-contained.  The second build incrementally cleans the self-contained dependencies, so the application attempts to activate as self-contained when it really should be framework-dependent.\r\n\r\nMaking the tasks responsible for generating these files take the assets cache file as input should cause regeneration when properties that affect the nuget cache (such as SelfContained) change.\r\n\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013052\r\n Commit:    9d282328f2\r\n```\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11956","RelatedDescription":"Closed issue \"Deps file and runtimeconfig are not regenerated upon assets cache invalidation.\" (#11956)"},{"Id":"470708983","IsPullRequest":true,"CreatedAt":"2019-07-20T20:25:42","Actor":"dotnet-maestro[bot]","Number":"11962","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190720.3\r\n- **Date Produced**: 7/20/2019 7:54 PM\r\n- **Commit**: 4ac6a4ad35801001d6b971c06254bd3da078741c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19370.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11962","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11962)"},{"Id":"470691416","IsPullRequest":false,"CreatedAt":"2019-07-20T16:26:48","Actor":"richlander","Number":"11961","RawContent":null,"Title":"Preview link points to an unhelpful page","State":"open","Body":"I see this message all the time (I only run previews) â€¦\r\n\r\n```console\r\n You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n```\r\n\r\nIâ€™d never actually taken the time to try out that link. It lands @ https://docs.microsoft.com/en-us/dotnet/core/tools/global-json\r\n\r\nThatâ€™s not at all helpful. I was expecting a page dedicated to previews, and how to use previews in Visual Studio if you are using that product. Global.json is a small part of the preview experience. Itâ€™s also jarring to get dropped into a help page on a file format with no apparent connection to the CLI message.\r\n\r\nTo some degree, this is a doc issue, but since the link is part of the CLI experience, we should decide what we want.","Url":"https://github.com/dotnet/cli/issues/11961","RelatedDescription":"Open issue \"Preview link points to an unhelpful page\" (#11961)"},{"Id":"470668595","IsPullRequest":true,"CreatedAt":"2019-07-20T12:56:34","Actor":"dotnet-maestro[bot]","Number":"11960","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190719.1\r\n- **Date Produced**: 7/19/2019 12:45 PM\r\n- **Commit**: ef7e8f19860b11ccacc41145e7ec30cf222f4258\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 2.0.0-preview8.19369.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11960","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11960)"},{"Id":"470667877","IsPullRequest":true,"CreatedAt":"2019-07-20T12:37:17","Actor":"dotnet-maestro[bot]","Number":"11958","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11958","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11958)"},{"Id":"469735299","IsPullRequest":true,"CreatedAt":"2019-07-20T12:15:32","Actor":"dotnet-maestro[bot]","Number":"11944","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190717.2\r\n- **Date Produced**: 7/18/2019 2:31 AM\r\n- **Commit**: d38ea0e932aab2a5447e663986eb0f4068926e21\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 2.0.0-preview8.19367.2\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11944","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11944)"},{"Id":"470665679","IsPullRequest":true,"CreatedAt":"2019-07-20T12:08:32","Actor":"dotnet-maestro[bot]","Number":"11957","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190720.1\r\n- **Date Produced**: 7/20/2019 11:37 AM\r\n- **Commit**: 3a590b432401473b91bb0ec05f64e6f939654b69\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19370.1\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11957","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11957)"},{"Id":"470667905","IsPullRequest":true,"CreatedAt":"2019-07-20T12:07:27","Actor":"dotnet-maestro[bot]","Number":"11959","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190720.1\r\n- **Date Produced**: 7/20/2019 8:24 AM\r\n- **Commit**: 74a9b5104eb8aa6ac232a618156139cb80f95c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19370.1\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11959","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/sdk\" (#11959)"},{"Id":"469732464","IsPullRequest":true,"CreatedAt":"2019-07-20T07:38:00","Actor":"dotnet-maestro[bot]","Number":"11943","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190717.2\r\n- **Date Produced**: 7/17/2019 4:11 PM\r\n- **Commit**: bd8cce7843a5b3f431e1011b1ca061d378197d41\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19367.2\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11943","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11943)"},{"Id":"469975655","IsPullRequest":true,"CreatedAt":"2019-07-20T07:04:23","Actor":"nugetlurker","Number":"11946","RawContent":null,"Title":"Insert NuGet Build 5.3.0-preview.2.6103 into cli","State":"closed","Body":"Insert NuGet Build 5.3.0-preview.2.6103 into cli master branch","Url":"https://github.com/dotnet/cli/pull/11946","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.3.0-preview.2.6103 into cli\" (#11946)"},{"Id":"470602535","IsPullRequest":true,"CreatedAt":"2019-07-19T23:44:14","Actor":"dotnet-maestro[bot]","Number":"11954","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190719.5\r\n- **Date Produced**: 7/19/2019 11:13 PM\r\n- **Commit**: a77738e52fd078d8eca452a700403ce650876466\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19369.5\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11954","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11954)"},{"Id":"470607409","IsPullRequest":true,"CreatedAt":"2019-07-19T23:42:51","Actor":"wli3","Number":"11955","RawContent":null,"Title":"Copy PE bits to shims during install","State":"open","Body":"part of https://github.com/dotnet/cli/issues/11300\r\n\r\nUse extracted logic in NET.HostModel. Remove duplicated copy\r\nPass dll to copy from\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11955","RelatedDescription":"Open PR \"Copy PE bits to shims during install\" (#11955)"},{"Id":"470555006","IsPullRequest":true,"CreatedAt":"2019-07-19T21:43:10","Actor":"dotnet-maestro[bot]","Number":"11953","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190719.09\r\n- **Date Produced**: 7/19/2019 9:12 PM\r\n- **Commit**: 3fcf1dac5531a0a92ce53af4eae4fc42316a0ccf\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27919-09\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-27919-09\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27919-09\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27919-09\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11953","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11953)"},{"Id":"469500632","IsPullRequest":true,"CreatedAt":"2019-07-19T19:58:04","Actor":"wli3","Number":"11938","RawContent":null,"Title":"AllowTrailingCommas and JsonCommentHandling.Skip for RuntimeConfig","State":"closed","Body":"Fix https://github.com/dotnet/cli/issues/11918","Url":"https://github.com/dotnet/cli/pull/11938","RelatedDescription":"Closed or merged PR \"AllowTrailingCommas and JsonCommentHandling.Skip for RuntimeConfig\" (#11938)"},{"Id":"470482563","IsPullRequest":true,"CreatedAt":"2019-07-19T19:08:41","Actor":"dotnet-maestro[bot]","Number":"11951","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190719.06\r\n- **Date Produced**: 7/19/2019 6:37 PM\r\n- **Commit**: be200df0d7bb860b7e10b093f43981f8ca120340\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27919-06\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-27919-06\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27919-06\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27919-06\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11951","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11951)"},{"Id":"470487505","IsPullRequest":false,"CreatedAt":"2019-07-19T18:51:26","Actor":"wli3","Number":"11952","RawContent":null,"Title":"Enable comments for tool manifest json","State":"open","Body":"Enable read is easy. But by the current implementation, all the comments will be removed everytime the tool CRUD command is used","Url":"https://github.com/dotnet/cli/issues/11952","RelatedDescription":"Open issue \"Enable comments for tool manifest json\" (#11952)"},{"Id":"470239035","IsPullRequest":true,"CreatedAt":"2019-07-19T18:36:19","Actor":"dotnet-maestro[bot]","Number":"11949","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190719.3\r\n- **Date Produced**: 7/19/2019 6:04 PM\r\n- **Commit**: 447205ce59212b2e0d1c99ba04356ffcbac4ddfd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19369.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11949","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11949)"},{"Id":"469732268","IsPullRequest":true,"CreatedAt":"2019-07-19T12:36:31","Actor":"dotnet-maestro[bot]","Number":"11942","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190718.7\r\n- **Date Produced**: 7/18/2019 11:09 PM\r\n- **Commit**: eecde8a8751dbe7fdb17ba4dfbd032e26f4cae7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19368.7\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11942","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11942)"},{"Id":"470259381","IsPullRequest":true,"CreatedAt":"2019-07-19T11:10:09","Actor":"dotnet-maestro[bot]","Number":"11950","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190719.01\r\n- **Date Produced**: 7/19/2019 10:39 AM\r\n- **Commit**: 4b74b80d087e7143949a7eae7dc6035d9db3f6f7\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27919-01\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-27919-01\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27919-01\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27919-01\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11950","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11950)"},{"Id":"470146737","IsPullRequest":true,"CreatedAt":"2019-07-19T06:08:53","Actor":"dotnet-maestro[bot]","Number":"11948","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190718.7\r\n- **Date Produced**: 7/19/2019 5:38 AM\r\n- **Commit**: 8b3820af14f14970c443a26bb9b4f64b4d5622f7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19368.7\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11948","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11948)"},{"Id":"470120652","IsPullRequest":true,"CreatedAt":"2019-07-19T04:02:08","Actor":"dotnet-maestro[bot]","Number":"11947","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190718.6\r\n- **Date Produced**: 7/19/2019 3:31 AM\r\n- **Commit**: 22a959a503bd5e0a4506d2683449943761aa8781\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19368.6\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11947","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11947)"},{"Id":"469504540","IsPullRequest":true,"CreatedAt":"2019-07-19T03:37:08","Actor":"dotnet-maestro[bot]","Number":"11939","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.12\r\n- **Date Produced**: 7/18/2019 1:25 AM\r\n- **Commit**: 02e6fc2ff8d962383f538241c899decc0d655a60\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27917-12\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27917-12\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-27917-12\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27917-12\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11939","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11939)"},{"Id":"469538615","IsPullRequest":true,"CreatedAt":"2019-07-19T01:37:45","Actor":"dotnet-maestro[bot]","Number":"11941","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190718.5\r\n- **Date Produced**: 7/19/2019 1:06 AM\r\n- **Commit**: 3039748ccfde18e2cca40259257c27f56ee7e025\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19368.5\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11941","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11941)"},{"Id":"469478670","IsPullRequest":true,"CreatedAt":"2019-07-18T21:52:30","Actor":"nguerrera","Number":"11937","RawContent":null,"Title":"Unpin DependencyModel","State":"closed","Body":"dotnet/core-setup#7137 is fixed and so we can now unpin DependencyModel\r\n\r\nAlso, it turns out that we were running msbuild on the stage0 runtime during tests, instead of the incoming runtime from core-setup, which is now fixed. This showed up as a missing method exception during local testing of this change.","Url":"https://github.com/dotnet/cli/pull/11937","RelatedDescription":"Closed or merged PR \"Unpin DependencyModel\" (#11937)"},{"Id":"469765219","IsPullRequest":false,"CreatedAt":"2019-07-18T13:18:54","Actor":"kev24uk","Number":"11945","RawContent":null,"Title":"Add Ability to specify nuget.config file for dotnet test","State":"open","Body":"## Steps to reproduce\r\nRun dotnet test against a project or solution which uses nuget packages from a private repository.\r\n\r\n## Expected  behavior\r\nShould be able to provide a --configfile parameter (as per dotnet build, restore and publish) and the packages will be restored correctly.\r\n\r\n## Actual behavior\r\nThere is no parameter to provide a nuget.config file so you have to run a dotnet build or restore as a separate step first.","Url":"https://github.com/dotnet/cli/issues/11945","RelatedDescription":"Open issue \"Add Ability to specify nuget.config file for dotnet test\" (#11945)"},{"Id":"469531653","IsPullRequest":false,"CreatedAt":"2019-07-18T01:48:25","Actor":"winnieryl","Number":"11940","RawContent":null,"Title":" dotnet-install.sh does not download correct version on RHEL 6 workstation","State":"open","Body":"https://dot.net/v1/dotnet-install.sh\r\nthis script, at line 151, it does not consider RHEL 6 Workstation, when I run this on rhel6 workstation, it downloads the wrong version fo dotnet runtime.\r\n\r\n## Steps to reproduce\r\nprepare a rhel 6 workstation, run dotnet-install.sh to install dotnet runtime\r\n\r\n## Expected  behavior\r\ndownload dotnet runtime rhel6 version\r\n\r\n## Actual behavior\r\ndoes not download the correct version\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11940","RelatedDescription":"Open issue \" dotnet-install.sh does not download correct version on RHEL 6 workstation\" (#11940)"},{"Id":"469461723","IsPullRequest":true,"CreatedAt":"2019-07-17T22:15:39","Actor":"dotnet-maestro[bot]","Number":"11936","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190717.6\r\n- **Date Produced**: 7/17/2019 9:44 PM\r\n- **Commit**: fedf03bd47ca1c69de497f28349e4782e26874e9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19367.6\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11936","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11936)"},{"Id":"469455756","IsPullRequest":true,"CreatedAt":"2019-07-17T21:59:35","Actor":"dotnet-maestro[bot]","Number":"11935","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.07\r\n- **Date Produced**: 7/17/2019 9:28 PM\r\n- **Commit**: fbe24089c59a9f330dfb7c4db4ae97a293685510\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27917-07\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27917-07\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27917-07\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11935","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11935)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"470671520","IsPullRequest":true,"CreatedAt":"2019-07-20T13:02:05","Actor":"dotnet-maestro[bot]","Number":"1361","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190719.9\r\n- **Date Produced**: 7/20/2019 6:18 AM\r\n- **Commit**: 45851336efa3b754f427d00cef3d388357aed308\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19369.9\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19369.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19369.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1361","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1361)"},{"Id":"470667719","IsPullRequest":true,"CreatedAt":"2019-07-20T12:15:15","Actor":"dotnet-maestro[bot]","Number":"1360","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1360","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1360)"},{"Id":"470573371","IsPullRequest":true,"CreatedAt":"2019-07-19T23:02:20","Actor":"terrajobst","Number":"1359","RawContent":null,"Title":"Adds attribution for APIs previously specialcased by the compiler","State":"closed","Body":"Reviewed as #1356.","Url":"https://github.com/dotnet/standard/pull/1359","RelatedDescription":"Closed or merged PR \"Adds attribution for APIs previously specialcased by the compiler\" (#1359)"},{"Id":"470089821","IsPullRequest":true,"CreatedAt":"2019-07-19T21:44:01","Actor":"terrajobst","Number":"1356","RawContent":null,"Title":"Adds attribution for APIs previously special-cased by the compiler","State":"closed","Body":"This applies some of the nullable attributes for APIs that were previously special-cased by the compiler. The attribution is very basic only includes cases where we'e a 100% certain that these are never going to change.\r\n\r\nI've arrived here by diffing CoreFX and .NET Standard using the following approach:\r\n\r\n**Included**\r\n\r\n* `DoesNotReturn`\r\n* `DoesNotReturnIf`\r\n\r\n**Considered**\r\n\r\n* `NotNullWhen`\r\n\r\n**Excluded**\r\n\r\n* `MaybeNullWhenAttribute`\r\n* `MaybeNullAttribute`\r\n* `AllowNullAttribute`\r\n* `DisallowNullAttribute`\r\n* `NotNullAttribute`\r\n* `NotNullIfNotNullAttribute`\r\n\r\n@stephentoub @jcouv @dotnet/nullablefc: Please double check my work here.","Url":"https://github.com/dotnet/standard/pull/1356","RelatedDescription":"Closed or merged PR \"Adds attribution for APIs previously special-cased by the compiler\" (#1356)"},{"Id":"470307252","IsPullRequest":true,"CreatedAt":"2019-07-19T12:58:18","Actor":"dotnet-maestro[bot]","Number":"1358","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190718.5\r\n- **Date Produced**: 7/19/2019 2:12 AM\r\n- **Commit**: 182bed51dec709b3b1b56a4f435e0727e5dea110\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19368.5\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19368.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19368.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1358","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1358)"},{"Id":"470290592","IsPullRequest":true,"CreatedAt":"2019-07-19T12:14:40","Actor":"dotnet-maestro[bot]","Number":"1357","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190718.7\r\n- **Date Produced**: 7/18/2019 11:09 PM\r\n- **Commit**: eecde8a8751dbe7fdb17ba4dfbd032e26f4cae7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19368.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1357","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1357)"},{"Id":"469972263","IsPullRequest":true,"CreatedAt":"2019-07-18T21:52:21","Actor":"terrajobst","Number":"1355","RawContent":null,"Title":"Add attributes for expressing nullability","State":"closed","Body":"Discussed in #1349.\r\n\r\n@danmosemsft, any objections taking this? \r\n\r\n/cc @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1355","RelatedDescription":"Closed or merged PR \"Add attributes for expressing nullability\" (#1355)"},{"Id":"469751295","IsPullRequest":true,"CreatedAt":"2019-07-18T20:38:18","Actor":"dotnet-maestro[bot]","Number":"1354","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190717.11\r\n- **Date Produced**: 7/18/2019 5:04 AM\r\n- **Commit**: ba2d62a24ea8574f40c43cd27cc384f079958a0c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19367.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19367.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19367.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1354","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1354)"},{"Id":"468943337","IsPullRequest":true,"CreatedAt":"2019-07-18T20:15:44","Actor":"terrajobst","Number":"1349","RawContent":null,"Title":"Add attributes for expressing nullability","State":"closed","Body":"This issue was brought up as part of a conversation with @divega from the EF team. While .NET Standard 2.1 itself won't have nullable annotations (see #1118), the idea is that code building for .NET Standard 2.1 should be able to express its own nullable state. This PR adds the attribute that are needed by library authors to tweak how their APIs are treated by C#'s flow analysis.\r\n\r\nThese APIs were reviewed in https://github.com/dotnet/corefx/issues/37826.","Url":"https://github.com/dotnet/standard/pull/1349","RelatedDescription":"Closed or merged PR \"Add attributes for expressing nullability\" (#1349)"},{"Id":"469365862","IsPullRequest":false,"CreatedAt":"2019-07-18T18:12:45","Actor":"codernator","Number":"1352","RawContent":null,"Title":"Interesting BadImageFormatException involving generics, deferred functions, and closures.","State":"closed","Body":"I stumbled over an edge case in which it is possible to write code that compiles but generates a BadImageFormatException with HResult: 0x8007000B during runtime. I originally found it in a C# 7.3 dotnet core 2.2 API application, but have reproduced it with a simple example in LINQPad 5, which uses C#7 and I believe dotnet standard 2.  The below contains both the exception generating code as well as similar counter-examples.\r\n\r\n\t/// <summary>\r\n\t/// Demonstrate how a generic function passing a closure to of a deferred function\r\n\t/// can create a BadImageFormatException. This includes an example of the exception,\r\n\t/// and similar examples that do not create the exception.\r\n\t/// </summary>\r\n\tstatic void Main()\r\n\t{\r\n\t\t// The data type and value is not important to this example.\r\n\t\t// Only the context in which this variable is used is important.\r\n\t\tvar myClosure = 0;\r\n\t\t\r\n\t\tHereComesTheException(new object[0]);\r\n\t\t//NonGenericNoException(new object[0]);\r\n\t\t//GenericWorkAroundA(new object[0]);\r\n\t\t//GenericWorkAroundB(new object[0]);\r\n\t\r\n\t\t// This fucntion creates a BadImageFormatException. Note the\r\n\t\t// use of myClosure within a deferred function that is\r\n\t\t// inline to a foreach. As far as I could read the IL, there is no\r\n\t\t// reference to myClosure in the scope of this function.\r\n\t\tvoid HereComesTheException<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tforeach (var thing in things.Where(tt => myClosure == 0)) {}\r\n\t\t}\r\n\t\r\n\t\t// This function doesn't create a BadImageFormatException...\r\n\t\t// The only difference from HereComesTheException is that\r\n\t\t// this function is not generic.\r\n\t\tvoid NonGenericNoException(IEnumerable<object> things)\r\n\t\t{\r\n\t\t\tforeach (var thing in things.Where(tt => myClosure == 0)) {}\r\n\t\t}\r\n\t\r\n\t\t// This function doesn't create a BadImageFormatException because the\r\n\t\t// outer closure is stored in a local variable that is clearly in scope \r\n\t\t// when the deferred function is executed.\r\n\t\tvoid GenericWorkAroundA<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tvar inner = myClosure;\r\n\t\t\tforeach (var thing in things.Where(tt => inner == 0)) {}\r\n\t\t}\r\n\t\t\r\n\t\t// This function doesn't create a BadImageFormatException... \r\n\t\t// Is this because declaring the Enumerator as a local variable forces\r\n\t\t// local context to be given to myClosure?\r\n\t\tvoid GenericWorkAroundB<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tvar filtered = things.Where(tt => myClosure == 0);\r\n\t\t\tforeach (var thing in filtered) {}\r\n\t\t}\r\n\t}","Url":"https://github.com/dotnet/standard/issues/1352","RelatedDescription":"Closed issue \"Interesting BadImageFormatException involving generics, deferred functions, and closures.\" (#1352)"},{"Id":"469731560","IsPullRequest":true,"CreatedAt":"2019-07-18T17:36:33","Actor":"dotnet-maestro[bot]","Number":"1353","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190717.8\r\n- **Date Produced**: 7/17/2019 10:06 PM\r\n- **Commit**: 2359dc4184133defa27c8f3072622270b71b4ecf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19367.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1353","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1353)"},{"Id":"469174631","IsPullRequest":true,"CreatedAt":"2019-07-17T13:00:53","Actor":"dotnet-maestro[bot]","Number":"1351","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190716.11\r\n- **Date Produced**: 7/17/2019 5:26 AM\r\n- **Commit**: da3d086edde315db03ff9b04c2926ab22940d50c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19366.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19366.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19366.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1351","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1351)"},{"Id":"469154006","IsPullRequest":true,"CreatedAt":"2019-07-17T12:15:21","Actor":"dotnet-maestro[bot]","Number":"1350","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190716.4\r\n- **Date Produced**: 7/16/2019 7:16 PM\r\n- **Commit**: 0dd5e2025f0049c133a8706f40e4463b193e5d17\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19366.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1350","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1350)"},{"Id":"468893474","IsPullRequest":true,"CreatedAt":"2019-07-17T01:56:05","Actor":"dotnet-maestro-bot","Number":"1348","RawContent":null,"Title":"[automated] Merge branch 'master' => 'release/3.0'","State":"closed","Body":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @42748379+dotnet-maestro[bot]\n* @wtgodbe\n* @terrajobst\n* @akoeplinger\n* @ericstj\n* @208120+akeeton\n* @roji\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/standard/pull/1348","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'master' => 'release/3.0'\" (#1348)"},{"Id":"468352094","IsPullRequest":true,"CreatedAt":"2019-07-16T22:48:08","Actor":"wtgodbe","Number":"1344","RawContent":null,"Title":"Update branding to 2.2","State":"closed","Body":"Update File/Product versions to 5.0, and package versions to 2.2. Please don't merge before noon on 7/16\r\n\r\nCC @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1344","RelatedDescription":"Closed or merged PR \"Update branding to 2.2\" (#1344)"},{"Id":"468383500","IsPullRequest":true,"CreatedAt":"2019-07-16T17:19:36","Actor":"dotnet-maestro[bot]","Number":"1346","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190715.4\r\n- **Date Produced**: 7/15/2019 7:17 PM\r\n- **Commit**: fb27fd4d8a2b67d4333e33d4b898c65171c9f3c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19365.4\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1346","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1346)"},{"Id":"468629163","IsPullRequest":true,"CreatedAt":"2019-07-16T12:46:38","Actor":"dotnet-maestro[bot]","Number":"1347","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190715.14\r\n- **Date Produced**: 7/16/2019 8:58 AM\r\n- **Commit**: 4b348cc28f0ec996322d4d1a62cfae300f77604e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19365.14\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19365.14\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19365.14\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1347","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1347)"},{"Id":"468375012","IsPullRequest":true,"CreatedAt":"2019-07-15T23:25:46","Actor":"dotnet-maestro[bot]","Number":"1345","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190715.4\r\n- **Date Produced**: 7/15/2019 7:17 PM\r\n- **Commit**: fb27fd4d8a2b67d4333e33d4b898c65171c9f3c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19365.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1345","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1345)"},{"Id":"468110792","IsPullRequest":true,"CreatedAt":"2019-07-15T16:09:13","Actor":"dotnet-maestro[bot]","Number":"1343","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190714.1\r\n- **Date Produced**: 7/14/2019 3:24 PM\r\n- **Commit**: c14b80faff694bae4e085bad221e2e83410e5f33\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19364.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19364.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19364.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1343","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1343)"},{"Id":"468089492","IsPullRequest":true,"CreatedAt":"2019-07-15T12:15:20","Actor":"dotnet-maestro[bot]","Number":"1342","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190714.1\r\n- **Date Produced**: 7/14/2019 1:05 PM\r\n- **Commit**: 0c81c2bbdc49749e9940bc8858ebd16026d51277\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19364.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1342","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1342)"},{"Id":"467832518","IsPullRequest":true,"CreatedAt":"2019-07-14T12:59:01","Actor":"dotnet-maestro[bot]","Number":"1341","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190713.4\r\n- **Date Produced**: 7/14/2019 1:05 AM\r\n- **Commit**: 750e954f0c82accded6ca7ac5a3b0c053de647a5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19363.4\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19363.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19363.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1341","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1341)"},{"Id":"467828224","IsPullRequest":true,"CreatedAt":"2019-07-14T12:14:03","Actor":"dotnet-maestro[bot]","Number":"1340","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190713.1\r\n- **Date Produced**: 7/13/2019 12:59 PM\r\n- **Commit**: 8c94bc75d29cd84e3592e4044100d45a341653f7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19363.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1340","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1340)"},{"Id":"467716205","IsPullRequest":true,"CreatedAt":"2019-07-13T12:54:47","Actor":"dotnet-maestro[bot]","Number":"1339","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190712.11\r\n- **Date Produced**: 7/13/2019 6:12 AM\r\n- **Commit**: 1841042b99062de13dc80098cede9413be569238\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19362.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19362.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19362.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1339","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1339)"},{"Id":"467712007","IsPullRequest":true,"CreatedAt":"2019-07-13T12:14:07","Actor":"dotnet-maestro[bot]","Number":"1338","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190712.5\r\n- **Date Produced**: 7/12/2019 10:49 PM\r\n- **Commit**: 15f50ca6a9d0b441c9927421657fb9dc91206cc9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19362.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1338","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1338)"},{"Id":"467460987","IsPullRequest":false,"CreatedAt":"2019-07-12T20:31:42","Actor":"jons-aura","Number":"1337","RawContent":null,"Title":"netcoreapp2.2 referencing netstandard2.0 dependency conflict","State":"closed","Body":"I have a netcoreapp2.2 project that references a netstandard2.0 project. When I try to build the solution I get the warning below in the log and the build fails completely in Azure Devops.\r\n\r\nAll NuGet packages are up to date.\r\n\r\nI did some searching to find existing issues but they all seem to reference .Net 4.6 or .Net 4.7 and .Net Standard rather than .Net Core\r\n\r\n```\r\n2>    Dependency \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n2>        Could not resolve this reference. Could not locate the assembly \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors.\r\n2>        Required by \"System.Reflection.Metadata\".\r\n2>    There was a conflict between \"System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" and \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n2>        \"System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was chosen because it was primary and \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was not.\r\n2>        References which depend on \"System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\System.Runtime.dll].\r\n2>            C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\System.Runtime.dll\r\n2>              Project file item includes which caused reference \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\System.Runtime.dll\".\r\n2>                C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\System.Runtime.dll\r\n2>        References which depend on \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [].\r\n2>            C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\r\n2>              Project file item includes which caused reference \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\".\r\n2>                System.Reflection.Metadata\r\n2>    C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(2106,5): warning MSB3277: Found conflicts between different versions of \"System.Runtime\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\n2>  Done executing task \"ResolveAssemblyReference\".\r\n```","Url":"https://github.com/dotnet/standard/issues/1337","RelatedDescription":"Closed issue \"netcoreapp2.2 referencing netstandard2.0 dependency conflict\" (#1337)"},{"Id":"467395066","IsPullRequest":true,"CreatedAt":"2019-07-12T12:55:56","Actor":"dotnet-maestro[bot]","Number":"1336","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190711.13\r\n- **Date Produced**: 7/12/2019 8:11 AM\r\n- **Commit**: e519628accc31bd3d5f0a3bc5f937a2ec1dd55d1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19361.13\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19361.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19361.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1336","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1336)"},{"Id":"467378098","IsPullRequest":true,"CreatedAt":"2019-07-12T12:14:08","Actor":"dotnet-maestro[bot]","Number":"1335","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190711.7\r\n- **Date Produced**: 7/12/2019 2:02 AM\r\n- **Commit**: f1b09644408f45f43f5835786b3e4bdfd2e78141\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19361.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1335","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1335)"},{"Id":"466944957","IsPullRequest":true,"CreatedAt":"2019-07-11T23:29:25","Actor":"akoeplinger","Number":"1333","RawContent":null,"Title":"Update Xamarin versions for NS2.1 support","State":"closed","Body":"These versions will contain the .NET Standard 2.1 updates.\r\n\r\n@marek-safar @steveisok we're still tracking Mono 2019-06 for this right?","Url":"https://github.com/dotnet/standard/pull/1333","RelatedDescription":"Closed or merged PR \"Update Xamarin versions for NS2.1 support\" (#1333)"},{"Id":"466956795","IsPullRequest":false,"CreatedAt":"2019-07-11T15:18:07","Actor":"sabmah","Number":"1334","RawContent":null,"Title":"MSBuild can't package .net 4.6.1 project w/ net core refrences. missing netstandard dll ","State":"open","Body":"I have a .net 4.6.1 class library that references these packages:\r\n\r\n- Microsoft.AspNetCore.Http.Abstractions\r\n- Microsoft.AspNetCore.Http.Features\r\n- Microsoft.AspNetCore.Mvc.Abstractions\r\n- Microsoft.AspNetCore.Routing.Abstractions\r\n\r\nI also added `<Reference Include=\"netstandard\" />` in class library .csproj file because it was complaining w/ error below. \r\n`\r\n The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n`\r\n\r\nThat class library is then referenced in another asp.net 4.6.1 web project. I'm able to build this project on TeamCity CI server and includes netstandard.dll in bin folder.\r\n\r\nBut when I package the web project using `msbuild /t:package /p:configuration=Test`, it doesn't include netstandard.dll in bin folder which causes app to not work in IIS after deployment. I get this error message.\r\n\r\n`\r\nException message: Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\n`\r\n\r\nIs there any reason that why /t:package is not including the netstandard.dll?","Url":"https://github.com/dotnet/standard/issues/1334","RelatedDescription":"Open issue \"MSBuild can't package .net 4.6.1 project w/ net core refrences. missing netstandard dll \" (#1334)"},{"Id":"466870629","IsPullRequest":true,"CreatedAt":"2019-07-11T12:55:38","Actor":"dotnet-maestro[bot]","Number":"1332","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190710.10\r\n- **Date Produced**: 7/11/2019 5:40 AM\r\n- **Commit**: e75dd151c9e5aa94cf33c7c9d14a53180df747dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19360.10\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19360.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19360.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1332","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1332)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"470729660","IsPullRequest":true,"CreatedAt":"2019-07-21T01:45:58","Actor":"stephentoub","Number":"39647","RawContent":null,"Title":"Disable DefaultPageSettings_Null_ReturnsExpected test","State":"closed","Body":"#39381","Url":"https://github.com/dotnet/corefx/pull/39647","RelatedDescription":"Closed or merged PR \"Disable DefaultPageSettings_Null_ReturnsExpected test\" (#39647)"},{"Id":"470302947","IsPullRequest":false,"CreatedAt":"2019-07-21T01:35:21","Actor":"atifaziz","Number":"39618","RawContent":null,"Title":"HttpWebRequest sends URI fragment, unlike on .NET Framework","State":"closed","Body":"If a `HttpWebRequest` is created with a URL containing a [fragment identifier](https://en.wikipedia.org/wiki/Fragment_identifier) then the code behaves (i.e. compatibility bug) differently on .NET Core than on .NET Framework.\r\n\r\nOn .NET Framework, the fragment identifier is clipped and never sent to the server in the HTTP request; On .NET Core, it is. Some web servers, like IIS, reject a URL with a fragment identifier, and so a client that works on .NET Framework can receive a 400 and fail when on targeting .NET Core.\r\n\r\n## Bug Demo Program\r\n\r\nI have created a self-contained program to demonstrate the issue:\r\n\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Net;\r\nusing System.Runtime.ExceptionServices;\r\nusing System.Runtime.InteropServices;\r\n\r\nstatic partial class Program\r\n{\r\n    static int Main(string[] args)\r\n    {\r\n        try\r\n        {\r\n            Console.WriteLine((RuntimeInformation.FrameworkDescription + \" \").PadRight(70, '-'));\r\n            return Wain(args);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            Console.Error.WriteLine(e);\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    // The following client code is identical between .NET Core and .NET\r\n    // Framework versions.\r\n\r\n    static class Client\r\n    {\r\n        public static void Run(Uri url)\r\n        {\r\n            var request = WebRequest.CreateHttp(url);\r\n\r\n            using var response = (HttpWebResponse) request.GetResponse();\r\n            Console.WriteLine((int)response.StatusCode + \" \" + response.StatusDescription);\r\n\r\n            foreach (var name in response.Headers.AllKeys)\r\n                Console.WriteLine(name + \": \" + response.Headers[name]);\r\n\r\n            response.GetResponseStream().Close();\r\n        }\r\n    }\r\n\r\n    static ExceptionDispatchInfo Try(Action action) =>\r\n        Try<Exception>(action);\r\n\r\n    static ExceptionDispatchInfo Try<TError>(Action action) where TError : Exception\r\n    {\r\n        try\r\n        {\r\n            action();\r\n            return null;\r\n        }\r\n        catch (TError e)\r\n        {\r\n            return ExceptionDispatchInfo.Capture(e);\r\n        }\r\n    }\r\n\r\n    static int Wain(string[] args)\r\n    {\r\n        if (args.Length == 0)\r\n            throw new Exception(\"Missing URL argument.\");\r\n\r\n        var url = new Uri(args[0]);\r\n        var edi = Try(() => Client.Run(url));\r\n\r\n#if NETFX // Under .NET Framework, just.\r\n\r\n        if (edi != null)\r\n            edi.Throw();\r\n\r\n        return 0;\r\n\r\n#else // Otherwise, run the .NET Framework version via `dotnet run`\r\n\r\n        if (edi != null)\r\n            Console.Error.WriteLine(edi.SourceException);\r\n\r\n        // Find the project directory and run the .NET Framework version\r\n        // via `dotnet run`, re-directing standard output and error here.\r\n\r\n        var appDir = new DirectoryInfo(AppContext.BaseDirectory);\r\n        var projectDir = appDir.Ascendants().First(dir => dir.EnumerateFiles(\"*.csproj\").Any());\r\n\r\n        var psi = new ProcessStartInfo(\"dotnet\", \"run --framework net471 \" + url)\r\n        {\r\n            CreateNoWindow = true,\r\n            UseShellExecute = false,\r\n            WorkingDirectory = projectDir.FullName,\r\n            RedirectStandardOutput = true,\r\n            RedirectStandardError = true,\r\n        };\r\n\r\n        using var process = Process.Start(psi);\r\n\r\n        static DataReceivedEventHandler CreateDataReceiverFor(TextWriter writer) => (_, e) =>\r\n        {\r\n            if (e.Data is string line)\r\n                writer.WriteLine(line);\r\n        };\r\n\r\n        process.OutputDataReceived += CreateDataReceiverFor(Console.Out);\r\n        process.ErrorDataReceived  += CreateDataReceiverFor(Console.Error);\r\n\r\n        process.BeginOutputReadLine();\r\n        process.BeginErrorReadLine();\r\n        process.WaitForExit();\r\n\r\n        if (process.ExitCode != 0)\r\n            throw new Exception($\"The .NET Framework version of the program exited with a non-zero code of {process.ExitCode}.\");\r\n\r\n        return edi == null ? 0 : 1;\r\n\r\n#endif\r\n    }\r\n\r\n    static IEnumerable<DirectoryInfo> Ascendants(this DirectoryInfo dir)\r\n    {\r\n        for (var parent = dir.Parent; parent != null; parent = parent.Parent)\r\n            yield return parent;\r\n    }\r\n}\r\n```\r\n\r\nWhen run as a .NET Core 2.2 application, this program will do the following:\r\n\r\n1. It will issue an HTTP request and dump the response status and headers.\r\n2. It will then do the same as 2 but under .NET Framework. This step is done by running the same project via `dotnet run` but with the `--framework net471` option.\r\n\r\nI have uploaded a ZIP archive with the full project:\r\n\r\nðŸ“Ž [`UrlFragmentBug.zip`](https://github.com/dotnet/corefx/files/3411028/UrlFragmentBug.zip)\r\n\r\n## Steps to Reproduce\r\n\r\n1. Decompress [the demo program archive](https://github.com/dotnet/corefx/files/3411028/UrlFragmentBug.zip) and open a Windows Command Prompt or PowerShell session with the current working directory set to the directory of the decompressed project.\r\n2. Start IIS Express using \"%ProgramFiles%\\IIS Express\\iisexpress.exe\" /systray:false` on the Windows Command Prompt or `start \"$env:ProgramFiles\\IIS Express\\iisexpress.exe\" /systray:false` on the PowerShell prompt.\r\n3. Execute `.\\run.cmd http://localhost:8080/`.\r\n4. Execute `.\\run.cmd http://localhost:8080/#foo` (notice the addition of the fragment identifier in the URL).\r\n\r\nIn step 3 you should see two successful HTTP responses for the same URL (`http://localhost:8080/`), under .NET Core and .NET Framework:\r\n\r\n    .NET Core 4.6.27817.03 -----------------------------------------------\r\n    200 OK\r\n    Accept-Ranges: bytes\r\n    ETag: \"018c519e81cd1:0\"\r\n    Server: Microsoft-IIS/10.0\r\n    X-SourceFiles: =?UTF-8?B?QzpcVXNlcnNcYXppejFhXE9uZURyaXZlIC0ga29jaGluZC5jb21cRG9jdW1lbnRzXE15IFdlYiBTaXRlc1xXZWJTaXRlMVxpaXNzdGFydC5odG0=?=\r\n    X-Powered-By: ASP.NET\r\n    Date: Fri, 19 Jul 2019 12:27:32 GMT\r\n    Content-Type: text/html\r\n    Last-Modified: Wed, 14 Mar 2012 13:41:04 GMT\r\n    Content-Length: 1307\r\n    .NET Framework 4.7.3416.0 --------------------------------------------\r\n    200 OK\r\n    X-SourceFiles: =?UTF-8?B?QzpcVXNlcnNcYXppejFhXE9uZURyaXZlIC0ga29jaGluZC5jb21cRG9jdW1lbnRzXE15IFdlYiBTaXRlc1xXZWJTaXRlMVxpaXNzdGFydC5odG0=?=\r\n    Accept-Ranges: bytes\r\n    Content-Length: 1307\r\n    Content-Type: text/html\r\n    Date: Fri, 19 Jul 2019 12:27:35 GMT\r\n    ETag: \"018c519e81cd1:0\"\r\n    Last-Modified: Wed, 14 Mar 2012 13:41:04 GMT\r\n    Server: Microsoft-IIS/10.0\r\n    X-Powered-By: ASP.NET\r\n\r\nIn step 4, with a fragment identifier appended however, you should see a failed HTTP response under .NET Core following by a successful HTTP response under .NET Framework for the _same URL_ (`http://localhost:8080/#foo`):\r\n\r\n    .NET Core 4.6.27817.03 -----------------------------------------------\r\n    .\\run.cmd : System.Net.WebException: The remote server returned an error: (400) Bad Request.\r\n    At line:1 char:1\r\n    + .\\run.cmd http://localhost:8080/#foo 2>&1 |clip\r\n    + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n        + CategoryInfo          : NotSpecified: (System.Net.WebE...0) Bad Request.:String) [], RemoteException\r\n        + FullyQualifiedErrorId : NativeCommandError\r\n     \r\n       at System.Net.HttpWebRequest.GetResponse()\r\n       at Program.Client.Run(Uri url) in A:\\UrlFragmentBug\\Program.cs:line 35\r\n       at Program.<>c__DisplayClass4_0.<Wain>b__0()\r\n     in A:\\UrlFragmentBug\\Program.cs:line 67\r\n       at Program.Try[TError](Action action) in A:\\UrlFragmentBug\\Program.cs:line 52\r\n\r\n    .NET Framework 4.7.3416.0 --------------------------------------------\r\n    200 OK\r\n    X-SourceFiles: =?UTF-8?B?QzpcVXNlcnNcYXppejFhXE9uZURyaXZlIC0ga29jaGluZC5jb21cRG9jdW1lbnRzXE15IFdlYiBTaXRlc1xXZWJTaXRlMVxpaXNzdGFydC5odG0=?=\r\n    Accept-Ranges: bytes\r\n    Content-Length: 1307\r\n    Content-Type: text/html\r\n    Date: Fri, 19 Jul 2019 12:34:37 GMT\r\n    ETag: \"018c519e81cd1:0\"\r\n    Last-Modified: Wed, 14 Mar 2012 13:41:04 GMT\r\n    Server: Microsoft-IIS/10.0\r\n    X-Powered-By: ASP.NET\r\n\r\n## More Information\r\n\r\ndotnet --info says:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.204\r\n Commit:    8757db13ec\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.204\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview7-27902-19\r\n  Commit:  fbe9466ddd\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.14 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.508 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.204 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview7-012802 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview7.19353.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview7-27902-19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview7-27902-19 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n","Url":"https://github.com/dotnet/corefx/issues/39618","RelatedDescription":"Closed issue \"HttpWebRequest sends URI fragment, unlike on .NET Framework\" (#39618)"},{"Id":"470605679","IsPullRequest":true,"CreatedAt":"2019-07-21T00:54:50","Actor":"omajid","Number":"39633","RawContent":null,"Title":"Fix up cgroup2fs in Interop.MountPoints.FormatInfo","State":"closed","Body":"`stat -fc %T /sys/fs/cgroup` calls this file system `cgroup2fs` on my machine.\r\n\r\nAdd the cgroup2fs file system magic number. Available from:\r\n\r\n  - https://www.kernel.org/doc/Documentation/cgroup-v2.txt\r\n  - man 2 statfs\r\n\r\nMove cgroup2fs next to cgroupfs in the drive type list, since it is also DriveType.Ram.","Url":"https://github.com/dotnet/corefx/pull/39633","RelatedDescription":"Closed or merged PR \"Fix up cgroup2fs in Interop.MountPoints.FormatInfo\" (#39633)"},{"Id":"470621426","IsPullRequest":true,"CreatedAt":"2019-07-21T00:53:34","Actor":"dotnet-maestro[bot]","Number":"39637","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190719.4\r\n- **Date Produced**: 7/20/2019 1:38 AM\r\n- **Commit**: cb650e00e7e3978e2ee2398aee795a6724e714f0\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview8.19369.4\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview8.19369.4\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview8.19369.4\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39637","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#39637)"},{"Id":"470671267","IsPullRequest":true,"CreatedAt":"2019-07-21T00:52:38","Actor":"dotnet-maestro[bot]","Number":"39644","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190719.4\r\n- **Date Produced**: 7/19/2019 11:17 PM\r\n- **Commit**: 56a4d43c963e533f5392c2c4f7b710f3ab98b5bd\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19369.4\r\n\r\n[marker]: <> (End:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39644","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/standard\" (#39644)"},{"Id":"470729315","IsPullRequest":true,"CreatedAt":"2019-07-21T00:52:09","Actor":"stephentoub","Number":"39646","RawContent":null,"Title":"[release/3.0] Pass CancellationToken from Http2Connection.SendHeadersAsync to StartWriteAsync","State":"open","Body":"Port #39635 to release/3.0\r\nApproved at https://github.com/dotnet/corefx/pull/39635#issuecomment-513426866","Url":"https://github.com/dotnet/corefx/pull/39646","RelatedDescription":"Open PR \"[release/3.0] Pass CancellationToken from Http2Connection.SendHeadersAsync to StartWriteAsync\" (#39646)"},{"Id":"470616147","IsPullRequest":true,"CreatedAt":"2019-07-21T00:47:20","Actor":"stephentoub","Number":"39635","RawContent":null,"Title":"Pass CancellationToken from Http2Connection.SendHeadersAsync to StartWriteAsync","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/39634\r\ncc: @marklio, @geoffkizer \r\n\r\n@danmosemsft, this should be ported to release/3.0 for reliability reasons.","Url":"https://github.com/dotnet/corefx/pull/39635","RelatedDescription":"Closed or merged PR \"Pass CancellationToken from Http2Connection.SendHeadersAsync to StartWriteAsync\" (#39635)"},{"Id":"470609739","IsPullRequest":false,"CreatedAt":"2019-07-21T00:47:18","Actor":"marklio","Number":"39634","RawContent":null,"Title":"HTTP2: Http2Connection.SendHeadersAsync doesn't pass its cancellation token to StartWriteAsync","State":"closed","Body":"I experienced this as a hang under load on the client during gRPC stress. I wanted to get this filed before the weekend while I still had the state saved. It looks like this is just an oversight. I'll circle back with a PR.\r\n\r\nThis is likely to block continued reliability testing in this area.","Url":"https://github.com/dotnet/corefx/issues/39634","RelatedDescription":"Closed issue \"HTTP2: Http2Connection.SendHeadersAsync doesn't pass its cancellation token to StartWriteAsync\" (#39634)"},{"Id":"470652521","IsPullRequest":false,"CreatedAt":"2019-07-20T23:05:10","Actor":"lastlink","Number":"39642","RawContent":null,"Title":"No support for file extended attributes metadata","State":"closed","Body":"## Problem\r\nShould be an api for setting a files extended attributes such as created and author.","Url":"https://github.com/dotnet/corefx/issues/39642","RelatedDescription":"Closed issue \"No support for file extended attributes metadata\" (#39642)"},{"Id":"470692666","IsPullRequest":false,"CreatedAt":"2019-07-20T16:40:40","Actor":"gregkalapos","Number":"39645","RawContent":null,"Title":"StackTrace.GetFrames(true) - GetFileLineNumber() tests","State":"open","Body":"In case you create an instance of StackTrace with `fNeedFileInfo: true`, it will try to deliver you things like file name, line number, column number. - I focus here on line number.\r\n\r\nE.g.:\r\n\r\n```\r\nforeach (var frame in new StackTrace(true).GetFrames())\r\n{\r\n\tvar lineNumber = frame.GetFileLineNumber();\r\n}\r\n```\r\n\r\nThere are many known scenarios when `GetFileLineNumber()` will return `0` despite the `StackTrace(true)` - e.g. there are no `.pdb`s present, or [portable pdbs pre .NET Framework 4.7.1](https://github.com/dotnet/core/blob/master/Documentation/diagnostics/portable_pdb.md) and probably more.\r\n\r\n### Question \r\nDo you have any tests that cover these scenarios and other scenarios when `GetFileLineNumber()` should not return `0`? I looked at the tests for `System.Diagnostics.StackTrace` and I see some tests that cover line numbers in [StackFrameTests.cs](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.StackTrace/tests/StackFrameTests.cs) but all those create `StackFrame`s manually and pass the line number. [StackTraceTests.cs](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.StackTrace/tests/StackTraceTests.cs) only has a case with [`Assert.Equal(0, stackFrame.GetFileColumnNumber())\r\n`](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.StackTrace/tests/StackTraceTests.cs#L348).\r\n\r\nBut you donâ€™t really seem to test when it should be not `0`. Do I see this correctly? Or are there other tests somewhere else?\r\n\r\n### Context\r\nIâ€™m working on a monitoring tool that reports stack traces, and we also try to show line numbers and of course we want to cover this feature with tests - I thought itâ€™d be nice to see what and how is tested in CoreFX.\r\n\r\nIâ€™m not expecting any action on this, itâ€™s more like just a question to answer. Thanks! ","Url":"https://github.com/dotnet/corefx/issues/39645","RelatedDescription":"Open issue \"StackTrace.GetFrames(true) - GetFileLineNumber() tests\" (#39645)"},{"Id":"470618631","IsPullRequest":true,"CreatedAt":"2019-07-20T12:47:09","Actor":"stephentoub","Number":"39636","RawContent":null,"Title":"Disable nullable warnings for netstandard and netfx","State":"closed","Body":"@safern, I've cherry-picked your commit from https://github.com/dotnet/corefx/pull/39557.","Url":"https://github.com/dotnet/corefx/pull/39636","RelatedDescription":"Closed or merged PR \"Disable nullable warnings for netstandard and netfx\" (#39636)"},{"Id":"470658981","IsPullRequest":true,"CreatedAt":"2019-07-20T10:11:42","Actor":"benaadams","Number":"39643","RawContent":null,"Title":"Use ArrayPool for oversized allocations","State":"open","Body":"*When Pipelines allocation is larger than the max pool size; use ArrayPool, rather than `new byte[]`*\r\n\r\nOversized allocations are useful in situations where you want to minimize syscalls; for example `IHttpSendFileFeature` in Kestrel its faster to read from a file directly into the Pipe (zero copy(ish)) with a larger buffer size (16kB+) than it is to read the smaller chunks the Pool allows, however if its allocating an array each time than this more than offsets that advantage.\r\n\r\nCurrently with the smaller block sizes it is more performant to read a file chunk first into a larger array pool buffer (lower syscalls), then copy that file into many smaller Pipe buffers. \r\n\r\nIt makes more sense to just read into the Pipe directly and avoid the additional copy. \r\n\r\nIt is unfortunate that this approach is currently slower; as you either have to increase file read calls using the smaller buffers, or allocate a new array for each read with a larger buffer. \r\n\r\nThis PR makes direct file reads into the Pipe a non-problematic option.\r\n\r\n/cc @davidfowl @Tratcher @stephentoub \r\n\r\nResolves https://github.com/dotnet/corefx/issues/39640","Url":"https://github.com/dotnet/corefx/pull/39643","RelatedDescription":"Open PR \"Use ArrayPool for oversized allocations\" (#39643)"},{"Id":"470640722","IsPullRequest":false,"CreatedAt":"2019-07-20T07:06:29","Actor":"Turnerj","Number":"39641","RawContent":null,"Title":"Marshal.SizeOf<char>() is one byte, not two, by default","State":"closed","Body":"I couldn't find documentation on this whether it is actually intended though when you marshal a `char` (or a `struct` with a `char` in it), it is very easy to cause heap corruption when then allocating memory to it.\r\n\r\nI believe the issue comes from the difference between the size of a `char` and the value that `Marshal.SizeOf<char>()` returns. According to [MSDN](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/char), a `char` is a 16-bit value though when you use `Marshal.SizeOf<char>()`, it only returns one (byte).\r\n\r\nIn some fairly basic tests, I could reproduce this issue.\r\n\r\n```csharp\r\npublic struct CharStruct\r\n{\r\n\tpublic char MyValue;\r\n\r\n\tpublic CharStruct(int myValue)\r\n\t{\r\n\t\tMyValue = (char)myValue;\r\n\t}\r\n}\r\n```\r\n\r\nAnd the following test:\r\n```csharp\r\nvar maxSize = 1000;\r\nvar individualSize = Marshal.SizeOf<CharStruct>();\r\nvar totalSize = individualSize * maxSize;\r\nvar operationsHandle = Marshal.AllocHGlobal(totalSize);\r\nvar operations = new Span<CharStruct>(operationsHandle.ToPointer(), maxSize);\r\n\r\nfor (int i2 = 0; i2 < maxSize; i2++)\r\n{\r\n\toperations[i2] = new CharStruct(123);\r\n}\r\n\r\nvar localSlice = operations.Slice(maxSize / 2);\r\nvar result = localSlice.ToArray();\r\nMarshal.FreeHGlobal(operationsHandle);\r\n```\r\n\r\nSometimes it works fine. Sometimes I will get a `StackOverflowException` and it will terminate. Sometimes I will get \"Internal CLR Error\". Sometimes Visual Studio will terminate the program because invalid memory access. Most of the time though, I get a heap corruption and the process will terminate. The higher you have `maxSize`, the more likely it will crash in my tests. \r\n\r\nAfter a few days of debugging, I did realise I can work around this issue with the `MarshalAs` attribute and specify a two-byte value but at that point it makes me wonder if there is actually a reason why `char` is considered one byte by `Marshal.SizeOf` anyway as it would seem like it always would be an issue.\r\n\r\nDid I miss some super obvious documentation that states that a `char` should be one byte if marshaled? If this is intended, may I ask why a `char` is only represented as one byte?\r\n\r\nIf it isn't intended, could `Marshal.SizeOf` return 2 instead of one for `char` by default?\r\n\r\nVersion: .NET Core 3 Preview 5","Url":"https://github.com/dotnet/corefx/issues/39641","RelatedDescription":"Closed issue \"Marshal.SizeOf<char>() is one byte, not two, by default\" (#39641)"},{"Id":"470635743","IsPullRequest":false,"CreatedAt":"2019-07-20T04:59:23","Actor":"davidfowl","Number":"39640","RawContent":null,"Title":"Use ArrayPool.Shared instead of a heap array as fallback in PipeWriter implementations","State":"open","Body":"The array pool already handles cases where the requested buffer is too big we can just pass in the requested size and it'll either return a heap buffer or an array pooled buffer (even if that buffer is bigger than the pool being used by the PipeWriter itself).","Url":"https://github.com/dotnet/corefx/issues/39640","RelatedDescription":"Open issue \"Use ArrayPool.Shared instead of a heap array as fallback in PipeWriter implementations\" (#39640)"},{"Id":"470633458","IsPullRequest":false,"CreatedAt":"2019-07-20T04:24:25","Actor":"JamesNK","Number":"39639","RawContent":null,"Title":"HTTP2: HttpClient fails streaming large amount of data with server flow control","State":"open","Body":"Repro:\r\n1. `git clone https://github.com/JamesNK/grpc-dotnet.git`\r\n2. `git checkout jamesnk/client-stream-backpressure-test`\r\n3. `dotnet test test\\FunctionalTests --filter Name~ClientStream_SendLargeFileBatchedAndRecieveLargeFileBatched_Success`\r\n\r\nLogic in the test is like:\r\n1. Client streams 1 GB of data in 64 KB chunks to the server as fast as it can\r\n2. Server reads chunks with 10 ms delay\r\n\r\nThe client will eventually fail, sending RST_STREAM (CANCEL) to the server.\r\n\r\n```\r\n    at TaskCompletionSourceWithCancellation`1.WaitWithCancellationAsync(CancellationToken cancellationToken)\r\n    at Http2Stream.SendDataAsync(ReadOnlyMemory`1 buffer, CancellationToken cancellationToken)\r\n    at StreamExtensions.WriteMessageAsync[TMessage](Stream stream, ILogger logger, TMessage message, Action`2 serializer, String grpcEncoding, Nullable`1 maximumMessageSize, CancellationToken cancellationToken) in StreamExtensions.cs line: 261\r\n    at HttpContentClientStreamWriter`2.WriteAsyncCore(TRequest message) in HttpContentClientStreamWriter.cs line: 129\r\n    at TaskExtensions.TimeoutAfter(Task task, TimeSpan timeout, String filePath, Int32 lineNumber) in TaskExtensions.cs line: 82\r\n    at StreamingTests.ClientStream_SendLargeFileBatchedAndRecieveLargeFileBatched_Success() in StreamingTests.cs line: 107\r\n```\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013317\r\n Commit:    9cc55027f1\r\n```","Url":"https://github.com/dotnet/corefx/issues/39639","RelatedDescription":"Open issue \"HTTP2: HttpClient fails streaming large amount of data with server flow control\" (#39639)"},{"Id":"470624656","IsPullRequest":true,"CreatedAt":"2019-07-20T02:22:26","Actor":"geoffkizer","Number":"39638","RawContent":null,"Title":"HTTP2: Rework shutdown handling","State":"open","Body":"Fixes #39630\r\nFixes #39624\r\nFixes #39586\r\nFixes #39461\r\nFixes #39460\r\nFixes #39459\r\nFixes #39548\r\nFixes #39404\r\n\r\nRework shutdown handling to be reliable and consistent, for both streams and connections.\r\n\r\nEach Http2Stream has to complete both request and response before shutting down, at which time it will remove itself from the stream dictionary and clean up associated state.\r\n\r\nThe request body and response body can each be cancelled, and these are now cancelled at appropriate times (e.g. Dispose on response stream before reading to end).\r\n\r\nThe behavior of early non-success status codes is changed to not cancel the request body. This matches HTTP/1.1 behavior.\r\n\r\nThe connection is now shut down only when all streams are removed from the dictionary. Receiving EndStream or RST_STREAM does not automatically remove the stream; instead we let the stream manage its own shutdown and then remove it from the dictionary.\r\n\r\nAdd relevant tests, fix up some existing tests, and remove one bogus test.\r\n\r\nI haven't run stress tests on this yet -- I wanted to get the review out first. Will report when I have stress results.\r\n\r\ncc @stephentoub @dotnet/ncl\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39638","RelatedDescription":"Open PR \"HTTP2: Rework shutdown handling\" (#39638)"},{"Id":"470507524","IsPullRequest":false,"CreatedAt":"2019-07-20T00:51:40","Actor":"doboczyakos","Number":"39627","RawContent":null,"Title":"PostAsJsonAsync extension method sets Content-Length to 0 in .NET Core 2.1 with any versions of System.Net.Http and System.Net.Http.Formatting.","State":"closed","Body":"var response = await _client.PostAsJsonAsync(requestUri, value, cancellationToken);\r\n\r\nRequest object is null on the server side because content length is set to 0.\r\nI've tried the newest versions of System.Net.Http and System.Net.Http.Formatting and the issue is the same.\r\nIt works if I replace this with the following:\r\nvar objectContent = new ObjectContent<TRequest>(value, new System.Net.Http.Formatting.JsonMediaTypeFormatter(), (System.Net.Http.Headers.MediaTypeHeaderValue)null);\r\nawait objectContent.ReadAsStringAsync();\r\nvar response = await _client.PostAsync(requestUri, objectContent, cancellationToken);","Url":"https://github.com/dotnet/corefx/issues/39627","RelatedDescription":"Closed issue \"PostAsJsonAsync extension method sets Content-Length to 0 in .NET Core 2.1 with any versions of System.Net.Http and System.Net.Http.Formatting.\" (#39627)"},{"Id":"470524712","IsPullRequest":false,"CreatedAt":"2019-07-19T22:37:26","Actor":"mairaw","Number":"39629","RawContent":null,"Title":"Inconsistent param name for SequencePosition","State":"closed","Body":"While reviewing a docs PR for adding the docs for SequencePosition (https://github.com/dotnet/dotnet-api-docs/pull/2683), I've noticed that some of the naming is not consistent.\r\n\r\nIn some cases, the object param is called object, other times obj. Can't they be consistent?\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Memory/src/System/SequencePosition.cs#L22\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Memory/src/System/SequencePosition.cs#L51","Url":"https://github.com/dotnet/corefx/issues/39629","RelatedDescription":"Closed issue \"Inconsistent param name for SequencePosition\" (#39629)"},{"Id":"470563608","IsPullRequest":true,"CreatedAt":"2019-07-19T21:28:25","Actor":"eiriktsarpalis","Number":"39632","RawContent":null,"Title":"[WIP] HttpStress: Allow standalone client and server processes","State":"open","Body":"Makes the following changes:\r\n- Break stress logic into multiple source files.\r\n- Expose a `-runMode` flag which can make the stress process run as a standalone server or client. The goal eventually is to be able to stress test remote servers.","Url":"https://github.com/dotnet/corefx/pull/39632","RelatedDescription":"Open PR \"[WIP] HttpStress: Allow standalone client and server processes\" (#39632)"},{"Id":"470553944","IsPullRequest":false,"CreatedAt":"2019-07-19T21:10:54","Actor":"wli3","Number":"39631","RawContent":null,"Title":"Support of comments in jsondocument ","State":"open","Body":"We hope to have an easy(er) way to perverse comments while editing json file. Maybe in jsondocument. We strongly believe config file should have comment support. However, since the file will also be edit by machine, we need a way to preserve the comments. Today, only the lowest level API supports reading comments, but that would be too complicated for our scenario. The code is [here](https://github.com/dotnet/cli/blob/master/src/dotnet/ToolManifest/ToolManifestEditor.cs#L142).\r\n\r\nDetail:\r\n\r\nThe write comment API is available today. But it hard to use jsontoken level API to read comments and find a way to remember the location (in order to write it back). We believe a DOM like API that we can read/write and preserve comments as with System.Xml is a good example.\r\n\r\nTool manifest is a json file that is intended to be edit by both the user and CRUD SDK command line, for example of update tool operation.\r\n\r\nbefore\r\n```json\r\n{\r\n  \"version\": 1,\r\n  \"isRoot\": true,\r\n  \"tools\": {\r\n    \"dotnetsay\": {\r\n      \"version\": \"1.1.4\", // used only in tests\r\n      \"commands\": [\r\n        \"dotnetsay\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAfter update, today\r\n```json\r\n{\r\n  \"version\": 1,\r\n  \"isRoot\": true,\r\n  \"tools\": {\r\n    \"dotnetsay\": {\r\n      \"version\": \"2.1.4\",\r\n      \"commands\": [\r\n        \"dotnetsay\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nDesire:\r\n```json\r\n{\r\n  \"version\": 1,\r\n  \"isRoot\": true,\r\n  \"tools\": {\r\n    \"dotnetsay\": {\r\n      \"version\": \"2.1.4\", // used only in tests\r\n      \"commands\": [\r\n        \"dotnetsay\"\r\n      ]\r\n    }\r\n  }\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/39631","RelatedDescription":"Open issue \"Support of comments in jsondocument \" (#39631)"},{"Id":"470545847","IsPullRequest":false,"CreatedAt":"2019-07-19T20:56:34","Actor":"Anipik","Number":"39630","RawContent":null,"Title":"HTTP2: Post method with ExpectAndContinue hangs after a first bunch of requests","State":"open","Body":"The Post ExpectContinue task is getting hanged when the cancellation rate is not zero. \r\n\r\nI was not able to get any helpful info from the trace or aspnetlog. After some time it just throws an exception and hangs again.  The exception thrown is \r\n\r\n```\r\n[Exit] thisOrContextObject: HttpClient#62601592, memberName: SendAsync, result: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[System.Net.Http.HttpResponseMessage,System.Net.Http.RedirectHandler+<SendAsync>d__4]\r\n[HandlerMessage] poolId: 66166301, workerId: 56140151, requestId: 0, memberName: AbortStreams, message: abortException=System.IO.IOException: Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..\r\n ---> System.Net.Sockets.SocketException (10053): An established connection was aborted by the software in your host machine.\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Security.SslStream.<WriteSingleChunk>g__CompleteAsync|210_1[TWriteAdapter](ValueTask writeTask, Byte[] bufferToReturn)\r\n   at System.Net.Security.SslStream.WriteAsyncInternal[TWriteAdapter](TWriteAdapter writeAdapter, ReadOnlyMemory`1 buffer)\r\n   at System.Net.Http.Http2Connection.FlushOutgoingBytesAsync()\r\n[HandlerMessage] poolId: 66166301, workerId: 56140151, requestId: 97, memberName: OnAbort, message: abortException=System.IO.IOException: Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..\r\n ---> System.Net.Sockets.SocketException (10053): An established connection was aborted by the software in your host machine.\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Security.SslStream.<WriteSingleChunk>g__CompleteAsync|210_1[TWriteAdapter](ValueTask writeTask, Byte[] bufferToReturn)\r\n   at System.Net.Security.SslStream.WriteAsyncInternal[TWriteAdapter](TWriteAdapter writeAdapter, ReadOnlyMemory`1 buffer)\r\n   at System.Net.Http.Http2Connection.FlushOutgoingBytesAsync()\r\n[HandlerMessage] poolId: 66166301, workerId: 56140151, requestId: 99, memberName: OnAbort, message: abortException=System.IO.IOException: Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..\r\n ---> System.Net.Sockets.SocketException (10053): An established connection was aborted by the software in your host machine.\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Security.SslStream.<WriteSingleChunk>g__CompleteAsync|210_1[TWriteAdapter](ValueTask writeTask, Byte[] bufferToReturn)\r\n   at System.Net.Security.SslStream.WriteAsyncInternal[TWriteAdapter](TWriteAdapter writeAdapter, ReadOnlyMemory`1 buffer)\r\n   at System.Net.Http.Http2Connection.FlushOutgoingBytesAsync()\r\n[Enter] thisOrContextObject: HttpConnectionPoolManager#52747788, memberName: RemoveStalePools, parameters: \r\n[HandlerMessage] poolId: 66166301, workerId: 0, requestId: 0, memberName: CleanCacheAndDisposeIfUnused, message: Cleaning pool.\r\n[Exit] thisOrContextObject: HttpConnectionPoolManager#52747788, memberName: RemoveStalePools, result: \r\n[Enter] thisOrContextObject: HttpConnectionPoolManager#52747788, memberName: RemoveStalePools, parameters: \r\n[HandlerMessage] poolId: 66166301, workerId: 0, requestId: 0, memberName: CleanCacheAndDisposeIfUnused, message: Cleaning pool.\r\n[Exit] thisOrContextObject: HttpConnectionPoolManager#52747788, memberName: RemoveStalePools, result: \r\n```\r\n\r\nWhen cancelation rate is zero it works perfectly fine.\r\n\r\ncc @stephentoub @eiriktsarpalis ","Url":"https://github.com/dotnet/corefx/issues/39630","RelatedDescription":"Open issue \"HTTP2: Post method with ExpectAndContinue hangs after a first bunch of requests\" (#39630)"},{"Id":"470484926","IsPullRequest":false,"CreatedAt":"2019-07-19T20:12:32","Actor":"Liphi","Number":"39626","RawContent":null,"Title":"System.ArgumentOutOfRangeException is thrown by System.Diagnostics.TraceSource.TraceEvent","State":"closed","Body":"Hi, this issue happens sporadically. Can expert share some light? Is there some known issue like concurrency?\r\n\r\n                   foreach (KeyValuePair<string, Endpoint> publicEndpoint in publicEndpoints.Entry)\r\n                    {\r\n                        if (publicEndpoint.Value.IPAddress == null\r\n                            || publicEndpoint.Value.Region == null\r\n                            || publicEndpoint.Value.HostId == default(Guid)\r\n                            || publicEndpoint.Value.ApiUri == null)\r\n                        {\r\n                            CosmosDBTrace.TraceWarning(\r\n                                \"RegionalEndpointsRefreshHandler: Required Endpoint propertie(s) null. IPAdress = {0}, Region = {1}, HostId = {2}, ApiUri = {3}\",\r\n                                publicEndpoint.Value.IPAddress,\r\n                                publicEndpoint.Value.Region,\r\n                                publicEndpoint.Value.HostId,\r\n                                publicEndpoint.Value.ApiUri);\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n        public void TraceWarning(string format, params object[] args)\r\n        {\r\n            if (args != null && args.Length > 0)\r\n            {\r\n                this.TraceSource.TraceEvent(TraceEventType.Warning, 0, format, args);\r\n            }\r\n            else\r\n            {\r\n                this.TraceSource.TraceEvent(TraceEventType.Warning, 0, format);\r\n            }\r\n        }\r\n\r\nSystem.ArgumentOutOfRangeException: Count cannot be less than zero. Parameter name: count \r\nStackTrace :\r\nat System.String.CopyTo(Int32 sourceIndex, Char[] destination, Int32 destinationIndex, Int32 count) at System.IO.StreamWriter.Write(String value) at System.Diagnostics.TextWriterTraceListener.Write(String message) at System.Diagnostics.TraceListener.WriteHeader(String source, TraceEventType eventType, Int32 id) at System.Diagnostics.TraceListener.TraceEvent(TraceEventCache eventCache, String source, TraceEventType eventType, Int32 id, String format, Object[] args) at System.Diagnostics.TraceSource.TraceEvent(TraceEventType eventType, Int32 id, String format, Object[] args) at Microsoft.Azure.Cosmos.Compute.Core.Diagnostics.DiagnosticsTrace.TraceWarning(String format, Object[] args) in d:\\dbs\\sh\\csdb\\0718_213049_0\\cmd\\w\\Product\\Cosmos\\Compute\\Core\\Diagnostics\\DiagnosticsTrace.cs:line 96 ...","Url":"https://github.com/dotnet/corefx/issues/39626","RelatedDescription":"Closed issue \"System.ArgumentOutOfRangeException is thrown by System.Diagnostics.TraceSource.TraceEvent\" (#39626)"},{"Id":"470518764","IsPullRequest":false,"CreatedAt":"2019-07-19T20:07:05","Actor":"vcsjones","Number":"39628","RawContent":null,"Title":"RSASSA-PSS certificates do not work with RSACertificateExtensions.GetRSAPublicKey","State":"open","Body":"If a certificate has a key algorithm of RSASSA-PSS (1.2.840.113549.1.1.10) then `RSACertificateExtensions.GetRSAPublicKey` will return null.\r\n\r\nExample certificate:\r\n\r\n<pre>\r\n-----BEGIN CERTIFICATE-----\r\nMIIDyzCCAoKgAwIBAgIUTPlMx/cRPgsXnfHOd78XAfzUgeEwPgYJKoZIhvcNAQEK\r\nMDGgDTALBglghkgBZQMEAgGhGjAYBgkqhkiG9w0BAQgwCwYJYIZIAWUDBAIBogQC\r\nAgDeMEUxCzAJBgNVBAYTAlVTMREwDwYDVQQIDAhWaXJnaW5pYTETMBEGA1UEBwwK\r\nQWxleGFuZHJpYTEOMAwGA1UECgwFS2V2aW4wHhcNMTkwNzE5MTk1MzQ5WhcNMTkw\r\nODE4MTk1MzQ5WjBFMQswCQYDVQQGEwJVUzERMA8GA1UECAwIVmlyZ2luaWExEzAR\r\nBgNVBAcMCkFsZXhhbmRyaWExDjAMBgNVBAoMBUtldmluMIIBIDALBgkqhkiG9w0B\r\nAQoDggEPADCCAQoCggEBANAo6q3gwu9X9otBA1FNGxEz57CGls8hL+9px+SRKMQv\r\nfjJP6xU2r4+99/bpNFGeqiXnYkk1L4SI7OyK/WKyZLHfkJH1rI9J46LtA54Ykb1A\r\nLc8opMtgCM8rYNUipsKM+hnQLUoiBqm4WjWYmhocemLVVmEgudgiFW7+y2r2ey2h\r\nXUD1Wdn3USzTMMZak86CMfD6uB3V8mT5bHg9014jqQabQuQBfeg2EEqBkgAvK0Cm\r\n+uLHeRBnuIHPfmf5YV2TvE/7oSzl0Z2W+V+2z4HHWNHa+KDPI9dUg/9KYvD0I/iZ\r\nYN9JV9VNG0rlYg3+FiYgtkjjyMweGYhT60QeOoOldrECAwEAAaNTMFEwHQYDVR0O\r\nBBYEFEUdSmnSA8ddQkVOnY2NplXZ89MVMB8GA1UdIwQYMBaAFEUdSmnSA8ddQkVO\r\nnY2NplXZ89MVMA8GA1UdEwEB/wQFMAMBAf8wPgYJKoZIhvcNAQEKMDGgDTALBglg\r\nhkgBZQMEAgGhGjAYBgkqhkiG9w0BAQgwCwYJYIZIAWUDBAIBogQCAgDeA4IBAQBf\r\nkYe0Ezq1ZYCEL0BSr7eXYIdDxX4//KE9BqdDMHP1Ia2PfODM1xEFsulxXiJCG4Zq\r\nZyDqJXgPRjaj9EtU/H8Sth66qhN+/qY0UX7T7dAWCeUUtzCJGB1EuFd2Li2+Tlkp\r\nOftsVtXCYO5/q0dsdqHzxWjrAiwnyV+JqRR9ZqxJ7ntZKJXx+F/QRUX/saRV9kdh\r\nbkmYxNpjCPzcHsvg7SDt7Vzw5jzfwLv3HpEFO74I+HBmtpa8Qbj7QhU8xqyGUBd2\r\nTC/0ch3vAeWZ3gUr55oLrgb5Ml+uVng8aRUXZWI2YhFBGSBbSRvK2f4OLpcsCrNU\r\ns5Qhn1EZQTQLfa6IecfS\r\n-----END CERTIFICATE-----\r\n</pre>\r\n\r\nWhile these certificates are rare, they aren't entirely unheard of.","Url":"https://github.com/dotnet/corefx/issues/39628","RelatedDescription":"Open issue \"RSASSA-PSS certificates do not work with RSACertificateExtensions.GetRSAPublicKey\" (#39628)"},{"Id":"470445319","IsPullRequest":true,"CreatedAt":"2019-07-19T19:53:13","Actor":"jkotalik","Number":"39620","RawContent":null,"Title":"Don't dispose StreamPipeWriter CancellationToken until after Flush ","State":"closed","Body":"Same as https://github.com/dotnet/corefx/pull/39610 except on master.","Url":"https://github.com/dotnet/corefx/pull/39620","RelatedDescription":"Closed or merged PR \"Don't dispose StreamPipeWriter CancellationToken until after Flush \" (#39620)"},{"Id":"470466205","IsPullRequest":false,"CreatedAt":"2019-07-19T18:26:29","Actor":"abelykh0","Number":"39623","RawContent":null,"Title":"StringComparer.InvariantCultureIgnoreCase gives different results in Windows and Linux","State":"closed","Body":"`StringComparer.InvariantCultureIgnoreCase` gives different results in Windows and Linux.\r\n\r\nThe example below returns 2 distinct values under Windows, and 3 under Linux. Using 3.0.100-preview6-012264.\r\n\r\n```csharp\r\nusing System;\r\nusing System.Linq;\r\nnamespace ConsoleApp30\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            string[] tags = new[] { \"BÃ¦rum\", \"Baerum\", \"abc\", \"abc\" };\r\n            var distinctTags = tags.Distinct(StringComparer.InvariantCultureIgnoreCase);\r\n            foreach(string tag in distinctTags)\r\n            {\r\n                Console.WriteLine(tag);\r\n            }\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/39623","RelatedDescription":"Closed issue \"StringComparer.InvariantCultureIgnoreCase gives different results in Windows and Linux\" (#39623)"},{"Id":"470472825","IsPullRequest":true,"CreatedAt":"2019-07-19T18:14:41","Actor":"xsoheilalizadeh","Number":"39625","RawContent":null,"Title":"Obsolete old HTTP implementation","State":"open","Body":"As @jskeet noted in his book:\r\n> HttpClient is in some senses the new and improved WebClient; itâ€™s\r\nthe preferred HTTP API for .NET 4.5 onward, and it contains only asynchronous\r\noperations.\r\n\r\nIf HttpClient is a newer and improved version of WebClient why we don't suggest to developers to use the HttpClient in summary or make them obsolete.\r\n\r\n- [x] Codes\r\n- [ ] Documents\r\n\r\n## Codes\r\nCurrently, I've made HttpWebRequest and WebClient obsolete.\r\n\r\n## Documents\r\nIn the [dotnet/docs][1] repo, we have a lot of sections that use WebClient and HttpWebRequest.\r\nShall I replace all of them with HttpClient? If it needs, I want to submit a PR to the docs.\r\n\r\ncc. @karelz\r\n\r\n[1]:https://github.com/dotnet/docs/search?p=3&q=WebClient&unscoped_q=WebClient","Url":"https://github.com/dotnet/corefx/pull/39625","RelatedDescription":"Open PR \"Obsolete old HTTP implementation\" (#39625)"},{"Id":"470470972","IsPullRequest":false,"CreatedAt":"2019-07-19T18:11:46","Actor":"Anipik","Number":"39624","RawContent":null,"Title":"HTTP2: The Request stream either getting reset or closed during the post deplex operation","State":"open","Body":"Exceptions being thrown \r\n\r\n// Client error\r\n```C#\r\nSystem.Net.Http.HttpRequestException: Error while copying content to a stream.\r\n ---> System.IO.IOException: An error occurred while sending the request.\r\n ---> System.OperationCanceledException: The operation was canceled.\r\n   --- End of inner exception stack trace ---\r\n   at System.IO.Stream.CopyToAsyncInternal(Stream destination, Int32 bufferSize, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionResponseContent.SerializeToStreamAsync(Stream stream, TransportContext context, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpContent.LoadIntoBufferAsyncCore(Task serializeToStreamTask, MemoryStream tempBuffer)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.HttpContent.LoadIntoBufferAsyncCore(Task serializeToStreamTask, MemoryStream tempBuffer)\r\n   at System.Net.Http.HttpContent.WaitAndReturnAsync[TState,TResult](Task waitTask, TState state, Func`2 returnFunc)\r\n   at Program.<>c__DisplayClass1_0.<<Run>b__9>d.MoveNext() in C:\\git\\corefx\\src\\System.Net.Http\\tests\\StressTests\\HttpStress\\Program.cs:line 267\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Program.<>c__DisplayClass1_4.<<Run>b__40>d.MoveNext() in C:\\git\\corefx\\src\\System.Net.Http\\tests\\StressTests\\HttpStress\\Program.cs:line 607\r\n```\r\n\r\n// server error\r\n```C#\r\nfail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \"0HLOCE8NMUALO\", Request id \"0HLOCE8NMUALO:000001EB\": An unhandled exception was thrown by the application.\r\nSystem.IO.IOException: The client reset the request stream.\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.CopyToAsyncInternal(Stream destination, CancellationToken cancellationToken)\r\n   at Program.<>c.<<Run>b__1_30>d.MoveNext() in C:\\git\\corefx\\src\\System.Net.Http\\tests\\StressTests\\HttpStress\\Program.cs:line 486\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)\r\nfail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \"0HLOCE8NMUALO\", Request id \"0HLOCE8NMUALO:000001EF\": An unhandled exception was thrown by the application.\r\nSystem.IO.IOException: The request stream was aborted.\r\n ---> Microsoft.AspNetCore.Connections.ConnectionAbortedException: The HTTP/2 connection faulted.\r\n ---> Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2ConnectionErrorException: HTTP/2 connection error (STREAM_CLOSED): The client sent a DATA frame to closed stream ID 491.\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Connection.ProcessDataFrameAsync(ReadOnlySequence`1& payload)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2Connection.ProcessRequestsAsync[TContext](IHttpApplication`1 application)\r\n   --- End of inner exception stack trace ---\r\n   --- End of inner exception stack trace ---\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http2.Http2MessageBody.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.CopyToAsyncInternal(Stream destination, CancellationToken cancellationToken)\r\n   at Program.<>c.<<Run>b__1_30>d.MoveNext() in C:\\git\\corefx\\src\\System.Net.Http\\tests\\StressTests\\HttpStress\\Program.cs:line 486\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)\r\n```\r\n\r\n\r\n// Trace file output\r\n``` C#\r\n   at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n[HandlerMessage] poolId: 4831898, workerId: 23081642, requestId: 3775, memberName: SendRequestBodyAsync, message: Failed to send request body: System.Net.Http.HttpRequestException: Error while copying content to a stream.\r\n ---> System.IO.IOException: The request was aborted.\r\n   at System.Net.Http.Http2Connection.AcquireWriteLockAsync(CancellationToken cancellationToken)\r\n   at System.Net.Http.Http2Connection.StartWriteAsync(Int32 writeBytes, CancellationToken cancellationToken)\r\n   at System.Net.Http.Http2Connection.SendStreamDataAsync(Int32 streamId, ReadOnlyMemory`1 buffer, CancellationToken cancellationToken)\r\n   at System.Net.Http.Http2Connection.Http2Stream.SendDataAsync(ReadOnlyMemory`1 buffer, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpContent.CopyToAsyncCore(ValueTask copyTask)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.HttpContent.CopyToAsyncCore(ValueTask copyTask)\r\n   at System.Net.Http.Http2Connection.Http2Stream.SendRequestBodyAsync(CancellationToken cancellationToken)\r\n```\r\n\r\ncommand ``` dotnet run -n 3 -maxContentLength 1000 -http 2.0 -ops 7 ```\r\n\r\nI ran it on the master branch and it error doesn't repro with 1.1\r\n\r\n\r\ncc @stephentoub @eiriktsarpalis ","Url":"https://github.com/dotnet/corefx/issues/39624","RelatedDescription":"Open issue \"HTTP2: The Request stream either getting reset or closed during the post deplex operation\" (#39624)"},{"Id":"470458802","IsPullRequest":false,"CreatedAt":"2019-07-19T17:51:29","Actor":"anurse","Number":"39622","RawContent":null,"Title":"API Proposal: Regex.TryMatch","State":"open","Body":"I find myself doing this a lot with `Regex`es:\r\n\r\n```csharp\r\n// Some example regex. Don't judge me!!\r\nvar myRegex = new Regex(@\"^https?://(www\\.)?github.com/(?<owner>[^/]+)/(?<repo>[^/]+)/?.*$\");\r\n\r\nvar match = myRegex.Match(inputString);\r\nif (match.Success)\r\n{\r\n    var owner = match.Groups[\"owner\"].Value;\r\n    // ... work with the match\r\n}\r\nelse\r\n{\r\n    // Do something else\r\n}\r\n```\r\n\r\nI think this could be made a little more ergonomic through a new method on Regex, TryMatch. With such a method, this code could become:\r\n\r\n```csharp\r\n// Some example regex. Don't judge me!!\r\nvar myRegex = new Regex(@\"^https?://(www\\.)?github.com/(?<owner>[^/]+)/(?<repo>[^/]+)/?.*$\");\r\n\r\nif (myRegex.TryMatch(inputString, out var match))\r\n{\r\n    var owner = match.Groups[\"owner\"].Value;\r\n    // ... work with the match\r\n}\r\nelse\r\n{\r\n    // Do something else\r\n}\r\n```\r\n\r\nYes, it's only a small change (one line), but it feels more _ergonomic_ to me. Before `out var` support in C#, this would've been just as clumsy as the current model, but now that we have `out var` this syntax feels like a valuable and simple addition.\r\n\r\nI get that \"ergonomics\" and \"aesthetics\" are subjective measures though, so would welcome other input here.\r\n\r\n## Proposed API\r\n\r\n```csharp\r\npublic class Regex\r\n{\r\n\t// Copied from the overloads of Match.\r\n\tpublic bool TryMatch(string input, out Match match);\r\n\tpublic bool TryMatch(string input, int startat, out Match match);\r\n\tpublic bool TryMatch(string input, int beginning, int length, out Match match);\r\n\r\n\t// Since the static Match methods already exist, adding a static TryMatch would be consistent. They have different args though.\r\n\t// I feel less strongly about these since I avoid the static methods on Regex.\r\n\tpublic static bool TryMatch(string input, string pattern, out Match match);\r\n\tpublic static bool TryMatch(string input, string pattern, RegexOptions options, out Match match);\r\n\tpublic static bool TryMatch(string input, string pattern, RegexOptions options, TimeSpan matchTimeout, out Match match);\r\n}\r\n```\r\n\r\n## Implementation\r\n\r\nIt's trivial to implement this, here's an example set of extension methods I use:\r\n\r\n```csharp\r\npublic static class RegexExtensions\r\n{\r\n    public static bool TryMatch(this Regex regex, string input, out Match match)\r\n    {\r\n        match = regex.Match(input);\r\n        return match.Success;\r\n    }\r\n\r\n    public static bool TryMatch(this Regex regex, string input, int startat, out Match match)\r\n    {\r\n        match = regex.Match(input, startat);\r\n        return match.Success;\r\n    }\r\n\r\n    public static bool TryMatch(this Regex regex, string input, int beginning, int length, out Match match)\r\n    {\r\n        match = regex.Match(input, beginning, length);\r\n        return match.Success;\r\n    }\r\n}\r\n```\r\n\r\nNote that in this implementation, the value of `match` is *valid* in both branches of an `if(TryMatch(...)) {} else {}` because the match object is always returned, even in the case of an unsuccessful match. I'm certainly open to having a discussion on that. I don't feel strongly either way.\r\n\r\nIn the end, I have my extension methods so I can do just fine with those, but I think this could be useful and more discoverable if it was in the BCL.\r\n\r\nI'd be willing to submit a PR if this was approved for consideration.","Url":"https://github.com/dotnet/corefx/issues/39622","RelatedDescription":"Open issue \"API Proposal: Regex.TryMatch\" (#39622)"},{"Id":"470452149","IsPullRequest":false,"CreatedAt":"2019-07-19T17:40:14","Actor":"wpbrown","Number":"39621","RawContent":null,"Title":"SocketsHttpHandler Improperly Pools Negotiate Connections when using Default Credentials","State":"open","Body":"Negotiate scheme connections are [stateful](https://www.chromium.org/spdy/spdy-authentication#TOC-Stateful-Authentication). The actual TCP connection remains authenticated across requests.\r\n\r\nThis is not a problem when a specific credential is supplied because the credential can not be changed after the first use of the handler. However with `Credentials = CredentialCache.DefaultCredentials`, the credential could be different on each use of the handler. Subsequent uses of the handler under different credentials will be authenticated as the credentials of the initial caller until the pooled authenticated connection is reaped. \r\n\r\nThis may seem like an unlikely use of the handler, but as applications using constrained delegation are modernized from full framework this will impact enterprise developers. Considering that a) `SocketsHttpHandler` is the default handler and b) the recommended practice of using `IHttpClientFactory` will ensure these handlers get reused across independent incoming requests in ASP.NET.\r\n\r\nPossible fixes:\r\n* to explicitly support the use case: when `DefaultCredentials` are in use add the current credential to the HttpConnectionKey. \r\n* to explicilty not support the use case: capture the current credential and throw on subsequent calls under different credentials\r\n","Url":"https://github.com/dotnet/corefx/issues/39621","RelatedDescription":"Open issue \"SocketsHttpHandler Improperly Pools Negotiate Connections when using Default Credentials\" (#39621)"},{"Id":"470310186","IsPullRequest":true,"CreatedAt":"2019-07-19T13:43:31","Actor":"ViktorHofer","Number":"39619","RawContent":null,"Title":"Add telemetry marker for tests","State":"closed","Body":"https://github.com/dotnet/arcade/blob/30e2cca9e6f26a843bad0910879d89035645bd20/Documentation/Projects/DevOps/CI/Telemetry-Guidance.md","Url":"https://github.com/dotnet/corefx/pull/39619","RelatedDescription":"Closed or merged PR \"Add telemetry marker for tests\" (#39619)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"470722630","IsPullRequest":true,"CreatedAt":"2019-07-20T23:03:35","Actor":"dotnet-maestro[bot]","Number":"37393","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/37393","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#37393)"},{"Id":"470718771","IsPullRequest":false,"CreatedAt":"2019-07-20T22:05:01","Actor":"Dreamescaper","Number":"37392","RawContent":null,"Title":"DeclarationNameCompletionProvider should suggest names for nullable types","State":"open","Body":"**Version Used**: \r\n16.2 P4\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\npublic class Class1\r\n{\r\n  public void Method()\r\n  {\r\n    TestStruct? $$\r\n  }\r\n}\r\n\r\npublic struct TestStruct { }\r\n```\r\n\r\n**Expected Behavior**:\r\nFor this code variable name should be suggested, e.g. 'testStruct'.\r\n\r\n**Actual Behavior**:\r\nNo suggestions.\r\n\r\n\r\n\r\nProblem is that `TestStruct?` is considered as ConditionalExpression, not as VariableDeclaration (see [here](https://sharplab.io/#v2:C4LghgzsA0AmIGoA+ABAzAAhQJgwYQBtIIBGAWACgBvSjLTFAFgwFkBTYACwHtYAKAJS0MNCnToAVNlADKwAE4BXAMbAA/BmEBfSjoqV0GKEtUYpshSuAiMWoA==)).\r\nIt only becomes VariableDeclaration after variable name is added, which is too late for DeclarationNameCompletionProvider.\r\n\r\n\r\nAdded couple of failing tests for this issue, you can find them [here](https://github.com/Dreamescaper/roslyn/commit/248107d000477431ef5efb7a4070426e11ba8f48).\r\n(Originally planned to fix the issue myself, but I'm not familiar with parsing functionality)","Url":"https://github.com/dotnet/roslyn/issues/37392","RelatedDescription":"Open issue \"DeclarationNameCompletionProvider should suggest names for nullable types\" (#37392)"},{"Id":"470178222","IsPullRequest":true,"CreatedAt":"2019-07-20T21:38:57","Actor":"agocke","Number":"37365","RawContent":null,"Title":"Include netstandard2.1 in the set of default C# 8 frameworks","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37365","RelatedDescription":"Closed or merged PR \"Include netstandard2.1 in the set of default C# 8 frameworks\" (#37365)"},{"Id":"470689609","IsPullRequest":false,"CreatedAt":"2019-07-20T16:07:02","Actor":"newpost","Number":"37391","RawContent":null,"Title":"Where is the list of compiler warnings or error codes?For example, IDE1006","State":"open","Body":"\r\nWhere is the list of compiler warnings or error codes?For example, IDE1006","Url":"https://github.com/dotnet/roslyn/issues/37391","RelatedDescription":"Open issue \"Where is the list of compiler warnings or error codes?For example, IDE1006\" (#37391)"},{"Id":"470662161","IsPullRequest":true,"CreatedAt":"2019-07-20T10:50:14","Actor":"heejaechang","Number":"37390","RawContent":null,"Title":"add new vs search provider to Roslyn","State":"open","Body":"vs search is new search experience VS is adding. this new feature is based on LSP extensions. so we added ILanguageClient and LSP server in Roslyn which for now only support new vs search capability.\r\n\r\nin future, we might move some features over to LSP such as existing GoTo or FAR.","Url":"https://github.com/dotnet/roslyn/pull/37390","RelatedDescription":"Open PR \"add new vs search provider to Roslyn\" (#37390)"},{"Id":"470610255","IsPullRequest":true,"CreatedAt":"2019-07-20T00:02:35","Actor":"dotnet-bot","Number":"37389","RawContent":null,"Title":"Merge master to features/ide-cleanup","State":"open","Body":"\nThis is an automatically generated pull request from master into features/ide-cleanup.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/ide-cleanup\ngit reset --hard upstream/features/ide-cleanup\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/ide-cleanup --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37389","RelatedDescription":"Open PR \"Merge master to features/ide-cleanup\" (#37389)"},{"Id":"470610220","IsPullRequest":true,"CreatedAt":"2019-07-20T00:02:27","Actor":"dotnet-bot","Number":"37388","RawContent":null,"Title":"Merge master to features/compilerNext","State":"open","Body":"\nThis is an automatically generated pull request from master into features/compilerNext.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/compilerNext\ngit reset --hard upstream/features/compilerNext\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/compilerNext --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37388","RelatedDescription":"Open PR \"Merge master to features/compilerNext\" (#37388)"},{"Id":"470610142","IsPullRequest":true,"CreatedAt":"2019-07-20T00:02:05","Actor":"dotnet-bot","Number":"37387","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37387","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#37387)"},{"Id":"470607137","IsPullRequest":false,"CreatedAt":"2019-07-19T23:41:04","Actor":"dibarbet","Number":"37386","RawContent":null,"Title":"EditorTextFactoryService should handle exceptions better when calling editor's CreateTextBuffer","State":"open","Body":"http://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures/Implementation/Workspaces/EditorTextFactoryService.cs,79 calls an editor API to CreateTextBuffer.\r\n\r\nThis can throw more exceptions than are currently handled, (file access exceptions for files in excess of 3gb, binary characters (new exception), etc.).\r\n\r\nCurrently this is causing VS to crash when opening Roslyn on VS master as changes were made to throw a FileFormatException when binary characters are encountered.  I've created an issue to track down where these files are and why.\r\nhttps://github.com/dotnet/roslyn/issues/37385  \r\n\r\nEven if these are not valid, we still should probably not be crashing / provide a better error to help diagnose which file has the issue.","Url":"https://github.com/dotnet/roslyn/issues/37386","RelatedDescription":"Open issue \"EditorTextFactoryService should handle exceptions better when calling editor's CreateTextBuffer\" (#37386)"},{"Id":"470606875","IsPullRequest":false,"CreatedAt":"2019-07-19T23:39:38","Actor":"dibarbet","Number":"37385","RawContent":null,"Title":"VS crashes when opening roslyn.sln on VS master.","State":"open","Body":"With stack stace-\r\n```\r\nSystem.ExecutionEngineException\r\n  HResult=0x80131506\r\n  Message=Exception of type 'System.ExecutionEngineException' was thrown.\r\n\r\n \r\n\r\nInner Exception 1:\r\nAggregateException: One or more errors occurred.\r\n\r\n \r\n\r\nInner Exception 2:\r\nAggregateException: One or more errors occurred.\r\n\r\n \r\n\r\nInner Exception 3:\r\nAggregateException: One or more errors occurred.\r\n\r\n \r\n\r\nInner Exception 4:\r\nAggregateException: One or more errors occurred.\r\n\r\n \r\n\r\nInner Exception 5:\r\nFileFormatException: File contains non-text characters\r\n\r\n \r\n\r\n\"   at Microsoft.VisualStudio.Text.Implementation.TextImageLoader.ParseBlock(Char[] buffer, Int32 length, NewlineState& newlineState, Int32& currentLineLength, Int32& longestLineLength)\\r\\n   \r\nat Microsoft.VisualStudio.Text.Implementation.TextImageLoader.Load(TextReader reader, Int64 fileSize, NewlineState& newlineState, Int32& longestLineLength, Int32 blockSize, Int32 minCompressedBlockSize)\\r\\n   \r\nat Microsoft.VisualStudio.Text.Implementation.BufferFactoryService.CreateTextBuffer(TextReader reader, IContentType contentType, Int64 length, String traceId)\\r\\n   \r\nat Microsoft.VisualStudio.Text.Implementation.BufferFactoryService.CreateTextBuffer(TextReader reader, IContentType contentType)\\r\\n   \r\nat Microsoft.CodeAnalysis.Editor.Implementation.Workspaces.EditorTextFactoryService.CreateTextInternal(Stream stream, Encoding encoding, CancellationToken cancellationToken)\\r\\n   \r\nat Microsoft.CodeAnalysis.Editor.Implementation.Workspaces.EditorTextFactoryService.CreateText(Stream stream, Encoding defaultEncoding, CancellationToken cancellationToken)\\r\\n   \r\nat Microsoft.CodeAnalysis.FileTextLoader.CreateText(Stream stream, Workspace workspace)\\r\\n\r\nat Microsoft.CodeAnalysis.FileTextLoader.<LoadTextAndVersionAsync>d__8.MoveNext()\\r\\n\r\n--- End of stack trace from previous location where exception was thrown ---\r\n\\r\\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\\r\\n   \r\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\\r\\n   \r\nat Microsoft.CodeAnalysis.TextDocumentState.<LoadTextAsync>d__29.MoveNext()\"\r\n```\r\n\r\nThere appear to be binary characters in some roslyn files.  Loading these will throw a FileFormatException in the latest versions of VS.\r\n\r\nThis issue is to track down why these files exist.","Url":"https://github.com/dotnet/roslyn/issues/37385","RelatedDescription":"Open issue \"VS crashes when opening roslyn.sln on VS master.\" (#37385)"},{"Id":"470421003","IsPullRequest":true,"CreatedAt":"2019-07-19T23:09:19","Actor":"mavasani","Number":"37373","RawContent":null,"Title":"Handle reduced extension method invocations in remove unused member aâ€¦","State":"closed","Body":"â€¦nalyzer\r\n\r\nFixes #37213","Url":"https://github.com/dotnet/roslyn/pull/37373","RelatedDescription":"Closed or merged PR \"Handle reduced extension method invocations in remove unused member aâ€¦\" (#37373)"},{"Id":"470499220","IsPullRequest":true,"CreatedAt":"2019-07-19T22:43:00","Actor":"CyrusNajmabadi","Number":"37378","RawContent":null,"Title":"Pr feedback","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37378","RelatedDescription":"Closed or merged PR \"Pr feedback\" (#37378)"},{"Id":"470593645","IsPullRequest":false,"CreatedAt":"2019-07-19T22:28:28","Actor":"chsienki","Number":"37384","RawContent":null,"Title":"Better documentation for SymbolEqualityComparer","State":"open","Body":"The descriptions for the `SymbolEqualityComparer` instances is fairly vague and should be updated with better descriptions of exactly what each compare does so that analyzer developers know which compare to use and when.","Url":"https://github.com/dotnet/roslyn/issues/37384","RelatedDescription":"Open issue \"Better documentation for SymbolEqualityComparer\" (#37384)"},{"Id":"470584594","IsPullRequest":false,"CreatedAt":"2019-07-19T22:08:36","Actor":"chsienki","Number":"37383","RawContent":null,"Title":"Substituted symbols should override Equals(ISymbol, TypeComparisonKind)","State":"open","Body":"In #37247 we updated `TypeSymbol` and `SubstituedMethodSymbol` to consider the compare kind when comparing for equality.\r\n\r\nWe should additionally light up other symbol types that can change depending on their nullability, to ensure analyzers can correctly determine symbol equality.","Url":"https://github.com/dotnet/roslyn/issues/37383","RelatedDescription":"Open issue \"Substituted symbols should override Equals(ISymbol, TypeComparisonKind)\" (#37383)"},{"Id":"470582092","IsPullRequest":false,"CreatedAt":"2019-07-19T22:03:42","Actor":"chsienki","Number":"37382","RawContent":null,"Title":"Symbol Comparisons should not use default Equals","State":"open","Body":"As part of #37247 we changed the default equals to ignore nullability. \r\n\r\nWe changed everywhere that change broke to be explicit comparisons, but in reality we should change all of the usages in our code base and obsolete `Symbol.Equals(ISymbol)` and `Symbol operator ==` to ensure every comparison is valid\r\n\r\nProposal was to create an analyzer and code fixer to mechanically switch all the instances over, and prevent future breaks.","Url":"https://github.com/dotnet/roslyn/issues/37382","RelatedDescription":"Open issue \"Symbol Comparisons should not use default Equals\" (#37382)"},{"Id":"470558287","IsPullRequest":true,"CreatedAt":"2019-07-19T21:18:38","Actor":"fayrose","Number":"37381","RawContent":null,"Title":"IOperation for Parameter Nullchecking","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37381","RelatedDescription":"Open PR \"IOperation for Parameter Nullchecking\" (#37381)"},{"Id":"470551532","IsPullRequest":true,"CreatedAt":"2019-07-19T21:14:26","Actor":"fayrose","Number":"37380","RawContent":null,"Title":"IOperation / CFG changes for Parameter Nullchecking","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37380","RelatedDescription":"Closed or merged PR \"IOperation / CFG changes for Parameter Nullchecking\" (#37380)"},{"Id":"470529688","IsPullRequest":false,"CreatedAt":"2019-07-19T20:29:07","Actor":"KevinCathcart","Number":"37379","RawContent":null,"Title":"DeterministicSourcePaths can break building if source control information not available","State":"open","Body":"**Version Used**: \r\ndotnet sdk 2.2.300\r\n**Steps to Reproduce**:\r\n\r\n1. dotnet new console \r\n1. dotnet build /p:ContinuousIntegrationBuild=true\r\n\r\n**Actual Behavior**:\r\n> C:\\Program Files\\dotnet\\sdk\\2.2.300\\Roslyn\\Microsoft.Managed.Core.targets(102,5): error : SourceRoot items must include at least one top-level (not nested) item when DeterministicSourcePaths is true\r\n\r\n**Expected Behavior**:\r\nBuild Succeeds. \r\n\r\nThe mere fact that we we are performing a continuous integration build does not mean that source control information will be available to MSBuild. However deterministic builds are enabled by default, and turning on `ContinuousIntegrationBuild`, means that `DeterministicSourcePaths` is enabled.\r\n\r\nThat would be fine if `DeterministicSourcePaths` worked when no source control information was available, but it requires `SourceRoot` items, which are only created by a source control information provider like the Source Link packages.\r\n\r\nThis bit me when I tried to add a new Test project to a solution being built with `/p:ContinuousIntegrationBuild=true`. I did not bother to add a Source Link NuGet package since I was not going to package or publish the test project on the CI server, merely run it, so I don't actually need Source Link data in the pdbs.\r\n\r\nObviously I know the workarounds (add the Source Link package or set `DeterministicSourcePaths` to false in the test project).\r\n\r\nBut ideally they would not be needed. Instead ideally, either a) `DeterministicSourcePaths` would only be set if a source control information provider package was installed, or b) that `DeterministicSourcePaths` was somehow made to work even without a source provider package.\r\n\r\n@tmat I think you are the expert on this stuff, so this is probably your issue. ","Url":"https://github.com/dotnet/roslyn/issues/37379","RelatedDescription":"Open issue \"DeterministicSourcePaths can break building if source control information not available\" (#37379)"},{"Id":"470488520","IsPullRequest":false,"CreatedAt":"2019-07-19T18:54:24","Actor":"dibarbet","Number":"37377","RawContent":null,"Title":"IOptionPersister should be async","State":"open","Body":"Some IOptionPersister implementations are required to be initialized on the UI thread (e.g. [LanguageSettingsPersister](http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/Options/LanguageSettingsPersister.cs,6fa3bca20b86523a), [RoamingVisualStudioProfileOptionPersister](http://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/Options/RoamingVisualStudioProfileOptionPersister.cs,28)\r\n\r\nWe should attempt to remove the initialize dependency on the UI thread / make IOptionPersister async.\r\n\r\nSee\r\nhttps://github.com/dotnet/roslyn/pull/37360#discussion_r305378427\r\nAnd\r\nhttps://github.com/dotnet/roslyn/pull/37360#discussion_r305483079\r\n\r\nRelated - https://github.com/dotnet/roslyn/issues/27677 , https://github.com/dotnet/roslyn/issues/27678\r\n","Url":"https://github.com/dotnet/roslyn/issues/37377","RelatedDescription":"Open issue \"IOptionPersister should be async\" (#37377)"},{"Id":"470446043","IsPullRequest":false,"CreatedAt":"2019-07-19T17:24:44","Actor":"vsfeedback","Number":"37376","RawContent":null,"Title":"Usage of the variable Args in a C# script file is marked as error","State":"open","Body":"* Create a CSX script file which uses the global Args variable to access command line parameters, e.g.\n    ```\n    Console.WriteLine(Args[0]);\n    ```\n* Running it with csi is fine and shows the expected ouput\n* Add the file to a solution and edit it in Visual Studio\n* In the editor, all occurences of `Args` are underlined red because &quot;the variable args is not available in the current context&quot;, which is obviously false\n* In Visual Studi 2017 editing the same script file did not procuce this annoying error message.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/548537/usage-of-the-variable-args-in-a-c-script-file-is-m.html\nVSTS ticketId: 857005_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/27/2019, 10:54 PM (82 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37376","RelatedDescription":"Open issue \"Usage of the variable Args in a C# script file is marked as error\" (#37376)"},{"Id":"470434686","IsPullRequest":false,"CreatedAt":"2019-07-19T16:53:28","Actor":"vsfeedback","Number":"37375","RawContent":null,"Title":"Default indentation for multiline variable assignment is inconsistent in lambdas","State":"open","Body":"When writing a multi-line variable assignment such as the following, VS will, by default, indent the second line of the assignment one level:\r\n\r\n```csharp\r\nvar nonemptyStrings =\r\n    SomeVeryLongExpression();\r\n```\r\n\r\nThat is, if I type `var nonemptyStrings =` and press enter, my cursor is positioned on the following line with indentation preapplied. I do not have to take any action beyond typing the body of the expression to get the correct indentation.\r\n\r\nHowever, when writing the same code inside of a lambda, Visual Studio uses different indentation. In fact, it will not indent at all for this situation. If I type `var nonemptyStrings = ` and press enter inside of a lambda, my cursor is set on the next line at the same position as the `v` in `var`. For example, consider these keyboard inputs where I type the value verbatim and press ENTER for each bullet:\r\n* `FuncUtil.Invoke(()=&gt;{`\r\n* `var things=`\r\n* `&quot;&quot;.Length;`\r\n* `return things;});`\r\n\r\nActual: the code I get from the above keyboard inputs is:\r\n\r\n```csharp\r\nFuncUtil.Invoke(() =>\r\n{\r\n    var things =\r\n    \"\".Length;\r\n    return things;\r\n});\r\n```\r\n\r\nExpected: my expected code is:\r\n\r\n```csharp\r\nFuncUtil.Invoke(() =>\r\n{\r\n    var things =\r\n        \"\".Length;\r\n    return things;\r\n});\r\n```\r\n\r\nIt seems like the indentation controller thing is quite different inside of lambdas compared to outside of them. This makes it difficult and time consuming to write readable code which utilizes lambdas.\r\n\r\nI rely on the multi-line assignment and indentation for writing LINQ Query expressions because that, IMO, makes them the most readable.\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/529201/default-indentation-for-multiline-variable-assignm.html\r\nVSTS ticketId: 845451_\r\n_These are the original issue comments:_\r\n\r\nVisual Studio Feedback System on 4/12/2019, 00:41 AM (98 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\r\n\r\n_These are the original issue solutions:_\r\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37375","RelatedDescription":"Open issue \"Default indentation for multiline variable assignment is inconsistent in lambdas\" (#37375)"},{"Id":"470428162","IsPullRequest":false,"CreatedAt":"2019-07-19T16:41:06","Actor":"vsfeedback","Number":"37374","RawContent":null,"Title":"IDE lightbulb: doesn't implement explicit interface for ref-return 'newslot' property","State":"open","Body":"<p>Interface declaration containing `newslot` override which differs only by 'ref' return value:</p><pre>public interface IRefReadOnlyList&lt;T&gt; : IReadOnlyList&lt;T&gt; where T : struct\n{\n       new ref readonly T this[int ix] { get; }\n};</pre><p>Begin example implementation:</p><pre>public struct A { };\npublic class ro_list_A : IRefReadOnlyList&lt;A&gt;\n{\n};</pre><p>Click on <strong><em>Quick Actions and Refactorings...</em></strong> lightbulb to invoke the <strong><em>Implement Interface</em></strong> function:</p><pre>public struct A { };\npublic class ro_list_A : IRefReadOnlyList&lt;A&gt;\n{\n       public ref readonly A this[int ix] =&gt; throw new NotImplementedException();\n       public int Count =&gt; throw new NotImplementedException();\n       public IEnumerator&lt;A&gt; GetEnumerator()\n       {\n              throw new NotImplementedException();\n       }\n       IEnumerator IEnumerable.GetEnumerator()\n       {\n              throw new NotImplementedException();\n       }\n};</pre><p><strong>Result:</strong></p><p>`Error:'ro_list_A' does not implement interface member 'IReadOnlyList&lt;A&gt;.this[int]'. 'ro_list_A.this[int]' cannot implement 'IReadOnlyList&lt;A&gt;.this[int]' because it does not have matching return by reference.`</p><p><strong>Expected:</strong></p><p>Expected the interface to be prototyped completely and in full, using <strong><em>public implementation</em></strong> for the members shown above, but then also using <strong><em>explicit interface implementation</em></strong> to additionally declare the lesser-derived, overriden indexer property.</p><p>Therefore, the result should have included both of the following lines:</p><pre>public class ro_list_A : IRefReadOnlyList&lt;A&gt;\n{\n       A IReadOnlyList&lt;A&gt;.this[int ix] =&gt; throw new NotImplementedException();\n       public ref readonly A this[int ix] =&gt; throw new NotImplementedException();\n       /// ... the rest\n};</pre><p>You cannot try repeating the lightbulb action again, because, despite the error, there is no longer a lightbulb available:</p><p><p><a href=\"https://developercommunity.visualstudio.com/storage/attachments/67490-s1.png\"> Image:67490-s1.png</a></p><p><p>xx</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/525655/ide-lightbulb-doesnt-implement-explicit-interface.html\nVSTS ticketId: 843867_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/9/2019, 10:58 PM (100 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37374","RelatedDescription":"Open issue \"IDE lightbulb: doesn't implement explicit interface for ref-return 'newslot' property\" (#37374)"},{"Id":"470420039","IsPullRequest":false,"CreatedAt":"2019-07-19T16:27:01","Actor":"vsfeedback","Number":"37372","RawContent":null,"Title":"CA1062: Validate arguments of public methods - Visual Studio won't considder is instead of == as null check","State":"open","Body":"having following Method returns this warning\n\n```\npublic Diff Diff(Snapshot? oldSnapshot)\n{\n    if (oldSnapshot is null)\n        oldSnapshot = Empty;\n    var deleted = /*WARNING*/oldSnapshot.Files.Values.Except(this. Files.Values, DataStoreItem.IdComparer);\n    //...\n}\n```\nusing the is opperator `is` not recognized as a null check.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/651843/ca1062-validate-arguments-of-public-methods-visual.html\nVSTS ticketId: 949236_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 7/19/2019, 04:12 AM (5 hours ago): <markdown><p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n</markdown>\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37372","RelatedDescription":"Open issue \"CA1062: Validate arguments of public methods - Visual Studio won't considder is instead of == as null check\" (#37372)"},{"Id":"470418797","IsPullRequest":false,"CreatedAt":"2019-07-19T16:24:58","Actor":"vsfeedback","Number":"37371","RawContent":null,"Title":"Intellisense verbiage for DateDiff in VB.Net","State":"open","Body":"The DateDiff function in VB.Net takes two dates: date1 and date2.  The Intellisense help for those two parameters is not helpful, however.  It simply tells you that you're putting in the first or second value, which is already obvious from the name.  What we need to know is that date1 will be subtracted from date2 instead of the other way around.\n\nI've been using Visual Basic professionally since version 3 and, in all that time, I still get those two dates reversed!  The only way to figure out which way it will go is to either try it or hit F1 and scroll down a couple of pages.  Even the example in the help is done in such a way that you can't tell which is which!\n\nI know VB.Net is no longer a priority but please, give us some help text that's helpful!\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/651805/intellisense-verbiage-for-datediff-in-vbnet.html\nVSTS ticketId: 949192_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 7/19/2019, 00:19 AM (9 hours ago): <markdown><p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n</markdown>\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37371","RelatedDescription":"Open issue \"Intellisense verbiage for DateDiff in VB.Net\" (#37371)"},{"Id":"470351814","IsPullRequest":true,"CreatedAt":"2019-07-19T14:21:06","Actor":"sharwell","Number":"37370","RawContent":null,"Title":"ðŸš§ Remove broken PackageReference heuristic and prevent incorrect framework assembly references","State":"open","Body":"See #37246\r\n\r\nðŸš§ I'm expecting tests to fail in CI that I need to mark as skipped...","Url":"https://github.com/dotnet/roslyn/pull/37370","RelatedDescription":"Open PR \"ðŸš§ Remove broken PackageReference heuristic and prevent incorrect framework assembly references\" (#37370)"},{"Id":"470289607","IsPullRequest":true,"CreatedAt":"2019-07-19T14:00:28","Actor":"dotnet-bot","Number":"37367","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37367","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#37367)"},{"Id":"470289762","IsPullRequest":true,"CreatedAt":"2019-07-19T14:00:14","Actor":"dotnet-bot","Number":"37368","RawContent":null,"Title":"Merge master to features/compilerNext","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/compilerNext.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/compilerNext\ngit reset --hard upstream/features/compilerNext\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/compilerNext --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37368","RelatedDescription":"Closed or merged PR \"Merge master to features/compilerNext\" (#37368)"},{"Id":"470176733","IsPullRequest":false,"CreatedAt":"2019-07-19T13:54:59","Actor":"CyrusNajmabadi","Number":"37364","RawContent":null,"Title":"Serious UI perf delays in 16.2 preview 4","State":"closed","Body":"The latest builds of VS give me UI pauses constantly, often on hte order of 2-3 seconds.  I have filed two traces for this and have tagged @sharwell in them.  Sam says he has analyzed hte issue and knows the culprit.\r\n\r\nI'm opening this issue at the request of @jinujoseph so the problem doesn't get lost and so that fix is driven to completion. \r\n\r\nThanks!","Url":"https://github.com/dotnet/roslyn/issues/37364","RelatedDescription":"Closed issue \"Serious UI perf delays in 16.2 preview 4\" (#37364)"},{"Id":"470289808","IsPullRequest":true,"CreatedAt":"2019-07-19T13:30:07","Actor":"dotnet-bot","Number":"37369","RawContent":null,"Title":"Merge master to features/ide-cleanup","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/ide-cleanup.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/ide-cleanup\ngit reset --hard upstream/features/ide-cleanup\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/ide-cleanup --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37369","RelatedDescription":"Closed or merged PR \"Merge master to features/ide-cleanup\" (#37369)"},{"Id":"470216422","IsPullRequest":false,"CreatedAt":"2019-07-19T08:59:53","Actor":"Tragetaschen","Number":"37366","RawContent":null,"Title":"The Suggested Name should recognize [ReadOnly]Span/Memory","State":"open","Body":"**Version Used**: \r\n16.2.0 Preview 4.0\r\n\r\n**Steps to Reproduce**:\r\nCreate a function parameter of `Span<Value>`.\r\n\r\n**Expected Behavior**:\r\nAs with `Value[]`, the suggested name should be `values`.\r\n\r\n**Actual Behavior**:\r\nThe suggested name ist just `span`\r\n\r\n![span-suggested-name](https://user-images.githubusercontent.com/1947968/61523256-467a5180-aa14-11e9-8848-35bb71285675.gif)\r\n","Url":"https://github.com/dotnet/roslyn/issues/37366","RelatedDescription":"Open issue \"The Suggested Name should recognize [ReadOnly]Span/Memory\" (#37366)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"470726858","IsPullRequest":false,"CreatedAt":"2019-07-21T03:46:42","Actor":"Shadow4walker","Number":"7638","RawContent":null,"Title":"System.Reflection.MissingRuntimeArtifactException","State":"closed","Body":"I'm trying to use a [NoesisGUI](https://github.com/Shadow4walker/NoesisSample) with corert\r\nalso i have tried all of rd.xml possible solutions with no luck!! idk what am i missing here! \"actually I don't know what's the correct way to use rd.xml with this\"\r\n[NoesisGUI Managed SDK](https://github.com/Noesis/Managed)\r\n\r\n here's the log after starting the sample\r\n\r\n> Unhandled Exception: EETypeRva:0x009F1C88(System.Reflection.MissingRuntimeArtifactException): MakeGenericMethod() cannot create this generic method instantiation because the instantiation was not metadata-enabled: 'Noesis.Extend.CreateGetterHelper<NoesisApp.Display,System.Int32>(System.Reflection.MethodInfo)' For more information, please visit http://go.microsoft.com/fwlink/?LinkID=616868\r\n   at Internal.Reflection.Core.Execution.ExecutionEnvironment.GetMethodInvoker(RuntimeTypeInfo, QMethodDefinition, RuntimeTypeInfo[], MemberInfo) + 0x148\r\n   at System.Reflection.Runtime.MethodInfos.NativeFormat.NativeFormatMethodCommon.GetUncachedMethodInvoker(RuntimeTypeInfo[], MemberInfo) + 0x50\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeMethodInfo.get_MethodInvoker() + 0xa8\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeNamedMethodInfo`1.MakeGenericMethod(Type[]) + 0x104\r\n   at Noesis.Extend.CreateGetter[ReturnT](Type, MethodInfo) + 0x6b\r\n   at Noesis.Extend.PropertyAccessorRO`1..ctor(PropertyInfo) + 0x3e\r\n   at Noesis.Extend.<>c__DisplayClass407_0`1.<AddPropertyAccessor>b__1() + 0x24\r\n   at Noesis.Extend.AddPropertyAccessor(Extend.NativeTypePropsInfo, PropertyInfo, Func`1, Func`1) + 0xa4\r\n   at Noesis.Extend.AddPropertyAccessor[PropertyT](Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x88\r\n   at Noesis.Extend.<>c.<AddPropertyFunctions>b__405_4(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x39\r\n   at Noesis.Extend.AddProperty(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0xae\r\n   at Noesis.Extend.CreateNativePropsData(Type, PropertyInfo[], Extend.NativeTypeInfo, Int32&) + 0x1b4\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x278\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.AddProperty(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x108\r\n   at Noesis.Extend.CreateNativePropsData(Type, PropertyInfo[], Extend.NativeTypeInfo, Int32&) + 0x1b4\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x278\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.CreateNativeTypeData(Type, IntPtr) + 0x4e\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x266\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.NewCPtr(Type, Object) + 0x21\r\n   at Noesis.Extend.GetInstanceHandle(Object) + 0x6c\r\n   at NoesisApp.Application.Start() + 0x28f\r\n   at NoesisApp.Application.Run() + 0x30\r\n   at ConsoleApp1.Program.Main(String[]) + 0x5c\r\n   at ConsoleApp1!<BaseAddress>+0x52d480<","Url":"https://github.com/dotnet/corert/issues/7638","RelatedDescription":"Closed issue \"System.Reflection.MissingRuntimeArtifactException\" (#7638)"},{"Id":"470729291","IsPullRequest":false,"CreatedAt":"2019-07-21T00:51:46","Actor":"Suchiman","Number":"7639","RawContent":null,"Title":"CoreRT instructions no longer work","State":"open","Body":"I'm not sure what has changed but it affects both of my machines:\r\n```\r\nMicrosoft.NETCore.Native.Publish.targets(78,5): error :\r\nThe PrivateSdkAssemblies ItemGroup is required for _ComputeAssembliesToCompileToNative\r\n```\r\nbut only when using the nuget package and not when using my own CoreRT build","Url":"https://github.com/dotnet/corert/issues/7639","RelatedDescription":"Open issue \"CoreRT instructions no longer work\" (#7639)"},{"Id":"468264724","IsPullRequest":false,"CreatedAt":"2019-07-19T17:48:46","Actor":"cshung","Number":"7619","RawContent":null,"Title":"build failed on clang5.0","State":"closed","Body":"On 32 bit architectures, `size_t` is an unsigned 32 bit integer, and therefore the condition can never be true. On `clang5.0`, this becomes a warning and blocks the build.\r\n\r\n```\r\n/corert/src/Native/gc/unix/cgroup.cpp:440:31: error: comparison of constant 9223372032559808512 with expression of type 'size_t' (aka 'unsigned int') is always false [-Werror,-Wtautological-constant-out-of-range-compare]\r\n    if (physical_memory_limit > 0x7FFFFFFF00000000)\r\n        ~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~\r\n1 error generated.\r\n```\r\n\r\nHere is the associated code:\r\n```\r\n    // If there's no memory limit specified on the container this \r\n    // actually returns 0x7FFFFFFFFFFFF000 (2^63-1 rounded down to \r\n    // 4k which is a common page size). So we know we are not\r\n    // running in a memory restricted environment.\r\n    if (physical_memory_limit > 0x7FFFFFFF00000000)\r\n    {\r\n        return 0;\r\n    }\r\n```\r\nAll we have to do is to figure out what would be returned on an unrestricted 32-bit execution environment. I have tried it on a physical arm32 device, without being inside a Docker container, it returned 0 because [`FindHierarchyMount`](https://github.com/dotnet/corert/blob/98cdb7f8ccecdc886775e28448091fa59665025e/src/Native/gc/unix/cgroup.cpp#L169) finds nothing.\r\n\r\nAccording to [this thread](https://unix.stackexchange.com/questions/420906/what-is-the-value-for-the-cgroups-limit-in-bytes-if-the-memory-is-not-restricte), it appears to me that for 32-bits architectures, we should probably check against a different constant, I haven't figured that out yet.","Url":"https://github.com/dotnet/corert/issues/7619","RelatedDescription":"Closed issue \"build failed on clang5.0\" (#7619)"},{"Id":"470254205","IsPullRequest":true,"CreatedAt":"2019-07-19T16:29:37","Actor":"MichalStrehovsky","Number":"7636","RawContent":null,"Title":"Adjust getMethodSig for generic inlining","State":"closed","Body":"We were not using the `memberParent` parameter, but it's critical to use it when generic inlining happens.\r\n\r\nFixes #7625.","Url":"https://github.com/dotnet/corert/pull/7636","RelatedDescription":"Closed or merged PR \"Adjust getMethodSig for generic inlining\" (#7636)"},{"Id":"469096443","IsPullRequest":false,"CreatedAt":"2019-07-19T16:29:37","Actor":"Berrysoft","Number":"7625","RawContent":null,"Title":"CodeGenerationFailedException after July 13th","State":"closed","Body":"```\r\nILCompiler.CodeGenerationFailedException: Code generation failed ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\n  Parameter name: index\r\n     at Internal.JitInterface.CorInfoImpl.HandleToObject(IntPtr handle)\r\n     at Internal.JitInterface.CorInfoImpl.HandleToObject(CORINFO_CLASS_STRUCT_* type)\r\n     at Internal.JitInterface.CorInfoImpl.isMoreSpecificType(CORINFO_CLASS_STRUCT_* cls1, CORINFO_CLASS_STRUCT_* cls2)\r\n     at Internal.JitInterface.CorInfoImpl._isMoreSpecificType(IntPtr thisHandle, IntPtr* ppException, CORINFO_CLASS_STRUCT_* cls1, CORINFO_CLASS_STRUCT_* cls2)\r\n     --- End of inner exception stack trace ---\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.ComputeDependencyNodeDependencies(List`1 obj)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n```\r\nThe same code built successfully in July 12th, but failed after July 13th. I suspect it is because of #7612, but I don't know the reason exactly.\r\nAddition: I tried to reproduce the bug by a \"Hello world\" program, but it is built successfully, so I even don't know how to reproduce it.","Url":"https://github.com/dotnet/corert/issues/7625","RelatedDescription":"Closed issue \"CodeGenerationFailedException after July 13th\" (#7625)"},{"Id":"470345239","IsPullRequest":true,"CreatedAt":"2019-07-19T16:18:01","Actor":"jkotas","Number":"7637","RawContent":null,"Title":"Port GC change from CoreCLR","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7637","RelatedDescription":"Closed or merged PR \"Port GC change from CoreCLR\" (#7637)"},{"Id":"470057749","IsPullRequest":true,"CreatedAt":"2019-07-19T02:17:13","Actor":"cshung","Number":"7635","RawContent":null,"Title":"Fix string import for CppCodeGen","State":"closed","Body":"The capital `X` is not a standard [escape sequence](https://en.cppreference.com/w/cpp/language/escape), we should use lower case `x`.","Url":"https://github.com/dotnet/corert/pull/7635","RelatedDescription":"Closed or merged PR \"Fix string import for CppCodeGen\" (#7635)"},{"Id":"470006900","IsPullRequest":true,"CreatedAt":"2019-07-18T23:57:40","Actor":"jkotas","Number":"7632","RawContent":null,"Title":"Port GC changes from CoreCLR","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7632","RelatedDescription":"Closed or merged PR \"Port GC changes from CoreCLR\" (#7632)"},{"Id":"470014921","IsPullRequest":true,"CreatedAt":"2019-07-18T22:12:09","Actor":"trylek","Number":"7634","RawContent":null,"Title":"WIP [no-merge] IsManagedSequential CPAOT instrumentation","State":"open","Body":"This instrumentation change (I don't intend to merge in) adds logging\r\nof IsManagedSequential results. I have sent out a separate PR\r\nfor the corresponding SuperIlc change (I believe the SuperIlc change\r\nis worth merging in) and I'll send out another instrumentation change\r\nfor Crossgen.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Once I figure out how to fix the remaining inconsistencies in\r\nIsManagedSequential, I'm going to merge in a smaller change just\r\nmoving the [fixed] IsManagedSequentialMethod to the R2R field\r\nlayout algorithm source file per JanK's suggestion.","Url":"https://github.com/dotnet/corert/pull/7634","RelatedDescription":"Open PR \"WIP [no-merge] IsManagedSequential CPAOT instrumentation\" (#7634)"},{"Id":"470009694","IsPullRequest":true,"CreatedAt":"2019-07-18T21:57:05","Actor":"trylek","Number":"7633","RawContent":null,"Title":"Initial support for IsManagedSequential diffing in SuperIlc","State":"open","Body":"This change searches compiler logs for specially formatted sections\r\nproduced by my private CPAOT and Crossgen instrumentation changes\r\nand outputs their lists and diffs between CPAOT and Crossgen.\r\n\r\nI have finally reached almost 100% parity between CPAOT and Crossgen\r\nqueries for the IsManagedSequential type characteristics and I have\r\nalready identified a type with mismatching results. Based on JanK's\r\nsuggestion I assume we should run this through anything we can find\r\nto maximize our confidence in the R2R compiler.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. I'm going to send out separate not-for-checkin PR's for the\r\nappropriate CPAOT and Crossgen instrumentations. For SuperIlc,\r\nI believe there's no harm in actually merging the change in.","Url":"https://github.com/dotnet/corert/pull/7633","RelatedDescription":"Open PR \"Initial support for IsManagedSequential diffing in SuperIlc\" (#7633)"},{"Id":"468923074","IsPullRequest":true,"CreatedAt":"2019-07-18T18:19:28","Actor":"cshung","Number":"7622","RawContent":null,"Title":"[CppCodeGen] Avoid generating typedef redefinition for delegates with vtable","State":"closed","Body":"This change fixes the compilation error for issue #6415, this does not fix the issue itself yet.\r\nIn case the vtable of the delegate type is generated, [`GetCodeForVirtualMethod()`](https://github.com/dotnet/corert/blob/c3751121a3e96e750933c159d732f52a70c09857/src/ILCompiler.CppCodeGen/src/CppCodeGen/CppWriter.cs#L974) will generate a typedef for the Invoke function, and we will generate another in `GetCodeForDelegate()` as the code change shows, leading to redefinition error.\r\n\r\nThis fix detects that case and avoids generating the redefinition.","Url":"https://github.com/dotnet/corert/pull/7622","RelatedDescription":"Closed or merged PR \"[CppCodeGen] Avoid generating typedef redefinition for delegates with vtable\" (#7622)"},{"Id":"469455160","IsPullRequest":true,"CreatedAt":"2019-07-18T18:19:11","Actor":"jkotas","Number":"7630","RawContent":null,"Title":"Delete stale cache size detection code on Windows","State":"closed","Body":"Fill cache size detection on Unix with CoreCLR PAL implementation","Url":"https://github.com/dotnet/corert/pull/7630","RelatedDescription":"Closed or merged PR \"Delete stale cache size detection code on Windows\" (#7630)"},{"Id":"469527045","IsPullRequest":false,"CreatedAt":"2019-07-18T01:29:27","Actor":"forestbat","Number":"7631","RawContent":null,"Title":"Future of AOT","State":"open","Body":"#https://github.com/dotnet/coreclr/commit/0cc81b60eb184c92b8526348d4bb056ed563e9d6\r\n#https://github.com/dotnet/corefx/commit/1acaa2017cfc64ef1aabcf3b19d0e097af692616\r\nAs we all knowï¼Œdevelopment for .NET5 has started and this project is like a forgotten cornerï¼Œso in the next yearï¼ˆuntil November 2020ï¼‰will MS invest more to thisï¼Ÿ\r\nAnd will AOT of C#ï¼ˆeither corert or mono aotï¼‰support more processor structure such as MIPS or RISCVï¼Ÿ\r\nHope your reply.","Url":"https://github.com/dotnet/corert/issues/7631","RelatedDescription":"Open issue \"Future of AOT\" (#7631)"},{"Id":"469435131","IsPullRequest":true,"CreatedAt":"2019-07-17T21:53:43","Actor":"Dotnet-GitSync-Bot","Number":"7629","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7629","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7629)"},{"Id":"469339836","IsPullRequest":true,"CreatedAt":"2019-07-17T19:26:18","Actor":"Dotnet-GitSync-Bot","Number":"7628","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7628","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7628)"},{"Id":"469207771","IsPullRequest":true,"CreatedAt":"2019-07-17T16:47:01","Actor":"Dotnet-GitSync-Bot","Number":"7627","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern","Url":"https://github.com/dotnet/corert/pull/7627","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7627)"},{"Id":"469035654","IsPullRequest":true,"CreatedAt":"2019-07-17T13:33:30","Actor":"MichalStrehovsky","Number":"7623","RawContent":null,"Title":"Include Natvis in the ILCompiler package","State":"closed","Body":"This makes strings and arrays for CoreRT-compiled programs look nicer in debuggers that support Natvis.","Url":"https://github.com/dotnet/corert/pull/7623","RelatedDescription":"Closed or merged PR \"Include Natvis in the ILCompiler package\" (#7623)"},{"Id":"469068373","IsPullRequest":true,"CreatedAt":"2019-07-17T13:32:09","Actor":"Dotnet-GitSync-Bot","Number":"7624","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7624","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7624)"},{"Id":"469103662","IsPullRequest":true,"CreatedAt":"2019-07-17T13:29:14","Actor":"MichalStrehovsky","Number":"7626","RawContent":null,"Title":"Capture name of failing method in CodeGenerationFailedException","State":"closed","Body":"Useful for troubleshooting.","Url":"https://github.com/dotnet/corert/pull/7626","RelatedDescription":"Closed or merged PR \"Capture name of failing method in CodeGenerationFailedException\" (#7626)"},{"Id":"468826889","IsPullRequest":true,"CreatedAt":"2019-07-17T08:49:41","Actor":"Dotnet-GitSync-Bot","Number":"7621","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7621","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7621)"},{"Id":"468740796","IsPullRequest":true,"CreatedAt":"2019-07-17T00:24:08","Actor":"cshung","Number":"7620","RawContent":null,"Title":"Make sure we use a 64 bit number to represent memory limit (even in 32 bit architectures)","State":"closed","Body":"Fixes #7619 \r\n\r\nAccording to @am11 in the referenced issue, Linux could tell us the memory limit is `0x7FFFFFFFFFFFFFFF` in a 32-bit architecture docker image, therefore we need to make sure when we read the number, we need to use a 64-bit number.","Url":"https://github.com/dotnet/corert/pull/7620","RelatedDescription":"Closed or merged PR \"Make sure we use a 64 bit number to represent memory limit (even in 32 bit architectures)\" (#7620)"},{"Id":"467902677","IsPullRequest":true,"CreatedAt":"2019-07-15T21:33:16","Actor":"cshung","Number":"7617","RawContent":null,"Title":"Changing assembler constant format","State":"closed","Body":"Fixes #7607 \r\n\r\nAccording to the [GNU assembler documentation](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.32.4503&rep=rep1&type=pdf), page 15, we are supposed to use the 0x format for hexadecimal numeric constants.\r\n\r\nWriting a numeric constant as `0FFh` was supported for the older version of `as`. It is now unsupported on the latest assembler (In this particular issue, Command Line Tools for Xcode Beta 2 on MacOS Mojave 10.14.5), so we must use the standard hexadecimal format.","Url":"https://github.com/dotnet/corert/pull/7617","RelatedDescription":"Closed or merged PR \"Changing assembler constant format\" (#7617)"},{"Id":"468113200","IsPullRequest":true,"CreatedAt":"2019-07-15T15:16:07","Actor":"MichalStrehovsky","Number":"7618","RawContent":null,"Title":"Adjust IL scanner for generic inlining","State":"closed","Body":"When we turned on generic inlining in RyuJIT, we started inlining things potentially across multiple shared method bodies. There is a pathological case when we may end up inlining a shared instance method on a type that otherwise wasn't allocated in the program - RyuJIT would end up asking questions about things we didn't scan.\r\n\r\nThis is because scanning happens on canonical method bodies, and dictionary dependencies are only investigated when a specific dictionary is added to the graph. If a type wasn't allocated, there's no generic dictionary to look at.\r\n\r\nThis is a conservative fix and comes with a small size on disk regression - about 16 kB on Hello World (0 kB for the \"minimal Hello World with reflection disabled\"), and about 80 kB for ASP.NET.\r\n\r\nI investigated preventing RyuJIT from inlining these methods, but RyuJIT is rather uncooperative when it comes to generic inlining. I think this is why UTC operates on runtime determined types directly rather than `__Canon`.","Url":"https://github.com/dotnet/corert/pull/7618","RelatedDescription":"Closed or merged PR \"Adjust IL scanner for generic inlining\" (#7618)"},{"Id":"467485274","IsPullRequest":true,"CreatedAt":"2019-07-14T04:43:22","Actor":"jkotas","Number":"7613","RawContent":null,"Title":"Add workaround for missing ClearInitLocals CoreLib transform","State":"closed","Body":"Ideally, we would use the same transform as CoreCLR CoreLib. However, integrating the ILLinker package used for that into CoreRT build does not look simple. For now, add a workaround to ilc.","Url":"https://github.com/dotnet/corert/pull/7613","RelatedDescription":"Closed or merged PR \"Add workaround for missing ClearInitLocals CoreLib transform\" (#7613)"},{"Id":"467771900","IsPullRequest":true,"CreatedAt":"2019-07-14T03:05:49","Actor":"Dotnet-GitSync-Bot","Number":"7616","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7616","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7616)"},{"Id":"467766531","IsPullRequest":true,"CreatedAt":"2019-07-13T23:19:58","Actor":"MichalStrehovsky","Number":"7615","RawContent":null,"Title":"Normalize instantiations in reflection method body scanner","State":"closed","Body":"Noticed we were hitting asserts compiling Draw2D. We were ending up reflection enabling a hybrid `<object, __Canon>` instantiation.","Url":"https://github.com/dotnet/corert/pull/7615","RelatedDescription":"Closed or merged PR \"Normalize instantiations in reflection method body scanner\" (#7615)"},{"Id":"467507599","IsPullRequest":true,"CreatedAt":"2019-07-13T03:13:00","Actor":"jkotas","Number":"7614","RawContent":null,"Title":"Return HardLimitBytes from GCMemoryInfo.TotalAvailableMemoryBytes (#2â€¦","State":"closed","Body":"â€¦5437)","Url":"https://github.com/dotnet/corert/pull/7614","RelatedDescription":"Closed or merged PR \"Return HardLimitBytes from GCMemoryInfo.TotalAvailableMemoryBytes (#2â€¦\" (#7614)"},{"Id":"467400415","IsPullRequest":true,"CreatedAt":"2019-07-12T17:02:00","Actor":"MichalStrehovsky","Number":"7612","RawContent":null,"Title":"Split out a couple more JitInterface methods","State":"closed","Body":"Went over CorInfoImpl.cs and kicked out a couple more methods that are CoreRT specific. Calling into them in ReadyToRun mode would either crash the compiler or produce wrong code.","Url":"https://github.com/dotnet/corert/pull/7612","RelatedDescription":"Closed or merged PR \"Split out a couple more JitInterface methods\" (#7612)"},{"Id":"467070772","IsPullRequest":true,"CreatedAt":"2019-07-12T10:05:00","Actor":"MichalStrehovsky","Number":"7610","RawContent":null,"Title":"Enable generic inlining","State":"closed","Body":"RyuJIT is capable of some limited generic inlining - we just have to make sure we're resolving tokens in the inlining context.","Url":"https://github.com/dotnet/corert/pull/7610","RelatedDescription":"Closed or merged PR \"Enable generic inlining\" (#7610)"},{"Id":"467152268","IsPullRequest":true,"CreatedAt":"2019-07-11T23:33:25","Actor":"trylek","Number":"7611","RawContent":null,"Title":"Exclude methods dependent on HW intrinsics from R2R compilation","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7611","RelatedDescription":"Open PR \"Exclude methods dependent on HW intrinsics from R2R compilation\" (#7611)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"470619220","IsPullRequest":true,"CreatedAt":"2019-07-20T20:53:44","Actor":"peterhuene","Number":"3441","RawContent":null,"Title":"Fix regeneration of files when asset cache changes.","State":"closed","Body":"Both the deps.json and runtimeconfig.json files remain unchanged when an\r\nincremental build takes place that changes a property that would invalidate the\r\nassets cache.\r\n\r\nFor a property like `SelfContained`, this might mean the files are no longer\r\nvalid for the incremental build's output.\r\n\r\nFixes dotnet/cli#11956.","Url":"https://github.com/dotnet/sdk/pull/3441","RelatedDescription":"Closed or merged PR \"Fix regeneration of files when asset cache changes.\" (#3441)"},{"Id":"470672478","IsPullRequest":true,"CreatedAt":"2019-07-20T14:58:25","Actor":"dotnet-maestro[bot]","Number":"3443","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190719.09\r\n- **Date Produced**: 7/19/2019 9:12 PM\r\n- **Commit**: 3fcf1dac5531a0a92ce53af4eae4fc42316a0ccf\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27919-09\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3443","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3443)"},{"Id":"470667749","IsPullRequest":true,"CreatedAt":"2019-07-20T14:06:45","Actor":"dotnet-maestro[bot]","Number":"3442","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3442","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3442)"},{"Id":"469756109","IsPullRequest":true,"CreatedAt":"2019-07-20T07:06:16","Actor":"dotnet-maestro[bot]","Number":"3435","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190719.01\r\n- **Date Produced**: 7/19/2019 10:39 AM\r\n- **Commit**: 4b74b80d087e7143949a7eae7dc6035d9db3f6f7\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27919-01\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3435","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3435)"},{"Id":"468382181","IsPullRequest":true,"CreatedAt":"2019-07-19T19:29:27","Actor":"peterhuene","Number":"3427","RawContent":null,"Title":"Delete output apphost upon failure of the CreateAppHost task.","State":"closed","Body":"This commit deletes the output apphost when the `CreateAppHost` task fails from\r\nan exception.\r\n\r\nPartially fixes #2989.","Url":"https://github.com/dotnet/sdk/pull/3427","RelatedDescription":"Closed or merged PR \"Delete output apphost upon failure of the CreateAppHost task.\" (#3427)"},{"Id":"470405396","IsPullRequest":true,"CreatedAt":"2019-07-19T16:03:04","Actor":"kzu","Number":"3440","RawContent":null,"Title":"Add support for @(AssemblyMetadata) items that turn into assembly attributes","State":"open","Body":"Given that `AssemblyMetadataAttribute` is such a common assembly-level attribute, this adds support\r\nfor specifying it directly via simple items, such as:\r\n\r\n```\r\n    <AssemblyMetadata Include=\"Foo\" Value=\"Bar\" />\r\n    <AssemblyMetadata Include=\"Bar\" Value=\"Baz\" />\r\n```\r\n\r\nThis also avoids having to learn the `_Parameter1` and `_Parameter2` syntax in `AssemblyAttribute` elements, \r\nand is more similar to the way other higher-level properties like `AssemblyTitle` or `Product` are also\r\nturned into assembly attributes.\r\n\r\nPartially fixes #3166","Url":"https://github.com/dotnet/sdk/pull/3440","RelatedDescription":"Open PR \"Add support for @(AssemblyMetadata) items that turn into assembly attributes\" (#3440)"},{"Id":"470401901","IsPullRequest":true,"CreatedAt":"2019-07-19T15:57:33","Actor":"kzu","Number":"3439","RawContent":null,"Title":"Add support for @(InternalsVisibleTo) items that turn into assembly attributes","State":"open","Body":"Given that `InternalsVisibleTo` is such a common assembly-level attribute, this adds support \r\nfor specifying it directly via simple items, such as:\r\n\r\n```\r\n  <ItemGroup>\r\n    <InternalsVisibleTo Include=\"MyLibrary.Tests\" />\r\n  </ItemGroup>\r\n```\r\n\r\nThis also avoids having to learn the `_Parameter1` syntax in `AssemblyAttribute` elements, and is \r\nmore similar to the way other higher-level properties like `AssemblyTitle` or `Product` are also \r\nturned into assembly attributes.\r\n\r\nPartially fixes #3166","Url":"https://github.com/dotnet/sdk/pull/3439","RelatedDescription":"Open PR \"Add support for @(InternalsVisibleTo) items that turn into assembly attributes\" (#3439)"},{"Id":"469731724","IsPullRequest":true,"CreatedAt":"2019-07-19T14:16:13","Actor":"dotnet-maestro[bot]","Number":"3434","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190718.7\r\n- **Date Produced**: 7/18/2019 11:09 PM\r\n- **Commit**: eecde8a8751dbe7fdb17ba4dfbd032e26f4cae7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19368.7\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3434","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3434)"},{"Id":"470016049","IsPullRequest":false,"CreatedAt":"2019-07-18T22:15:57","Actor":"etbyrd","Number":"3438","RawContent":null,"Title":"Remove .NETCore <3.0 as SupportedTargetFrameworks for WinForms and WPF","State":"open","Body":"The Project System needs a way to know the correct SupportedTargetFrameworks for WinForms and WPF projects so we can display the correct TFM's in the property pages. \r\n\r\nIs it possible that this can be done on the SDK side?\r\n\r\nhttps://github.com/dotnet/project-system/issues/5010\r\n\r\ncc @nguerrera \r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3438","RelatedDescription":"Open issue \"Remove .NETCore <3.0 as SupportedTargetFrameworks for WinForms and WPF\" (#3438)"},{"Id":"470010193","IsPullRequest":false,"CreatedAt":"2019-07-18T21:58:31","Actor":"ericstj","Number":"3437","RawContent":null,"Title":"ResolveTargetingPackAssets crashes when presented a targeting pack with no matching assets","State":"open","Body":"Build a project as follows:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <RuntimeFrameworkVersion>5.0.0-alpha1.27918.1</RuntimeFrameworkVersion>\r\n  </PropertyGroup>\r\n  \r\n  <ItemGroup>\r\n    <FrameworkReference Update=\"Microsoft.NETCore.App\"\r\n                        TargetingPackVersion=\"5.0.0-alpha1.27918.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018: The \"ResolveTargetingPackAssets\" task failed unexpectedly. [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018: System.InvalidOperationException: Sequence contains no matching element [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at System.Linq.ThrowHelper.ThrowNoMatchException() [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate) [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolveTargetingPackAssets.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolveTargetingPackAssets.cs:line 96 [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 38 [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [D:\\scratch\\nca5\\nca5.csproj]\r\n```\r\n\r\nThis is happening because the refpack uses `netcoreapp5.0` instead of of `netcoreapp3.0`.  Failure is legitimate but it should be better than a stack trace.","Url":"https://github.com/dotnet/sdk/issues/3437","RelatedDescription":"Open issue \"ResolveTargetingPackAssets crashes when presented a targeting pack with no matching assets\" (#3437)"},{"Id":"469975559","IsPullRequest":true,"CreatedAt":"2019-07-18T20:31:55","Actor":"nugetlurker","Number":"3436","RawContent":null,"Title":"Insert NuGet Build 5.3.0-preview.2.6103 into sdk","State":"open","Body":"Insert NuGet Build 5.3.0-preview.2.6103 into sdk master branch","Url":"https://github.com/dotnet/sdk/pull/3436","RelatedDescription":"Open PR \"Insert NuGet Build 5.3.0-preview.2.6103 into sdk\" (#3436)"},{"Id":"469588834","IsPullRequest":false,"CreatedAt":"2019-07-18T06:18:08","Actor":"Nirmal4G","Number":"3432","RawContent":null,"Title":"Append TargetFramework to *OutputPaths only when MultiTargeting","State":"open","Body":"Rleated issues: #844 #550 #1376 (those github found out)\r\n\r\nFor single targeting projects, we don't need to appened the `*OutputPath`s properties with `TargetFramework` since, we are only targeting single framework. This is also the behavior of the old projects before sdks were introduced.\r\n\r\n1. All the large winforms and wpf projects have custom targets that rely on hard coded paths based on the defaults set by the old project files. It'll be easy to migrate those projects if those paths were the same. ðŸ˜Œ\r\n\r\n2. It'll reduce a directory overhead in the directory tree. One less dir to navigate! ðŸ˜Œ\r\n\r\nWe can update the targets to preserve the old behavior that only appends the `TargetFramework` property only when it's multi-targeting.\r\n\r\nI can do a PR if you guys are ok with this!","Url":"https://github.com/dotnet/sdk/issues/3432","RelatedDescription":"Open issue \"Append TargetFramework to *OutputPaths only when MultiTargeting\" (#3432)"},{"Id":"469180602","IsPullRequest":true,"CreatedAt":"2019-07-17T14:48:52","Actor":"dotnet-maestro[bot]","Number":"3431","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.01\r\n- **Date Produced**: 7/17/2019 8:46 AM\r\n- **Commit**: 7cf49f78deaae14948ce59fc6d9266365888f7b6\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27917-01\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3431","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3431)"},{"Id":"468375089","IsPullRequest":true,"CreatedAt":"2019-07-17T14:21:35","Actor":"dotnet-maestro[bot]","Number":"3424","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190716.4\r\n- **Date Produced**: 7/16/2019 7:16 PM\r\n- **Commit**: 0dd5e2025f0049c133a8706f40e4463b193e5d17\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19366.4\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3424","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3424)"},{"Id":"467616771","IsPullRequest":true,"CreatedAt":"2019-07-16T20:43:36","Actor":"nguerrera","Number":"3415","RawContent":null,"Title":"Select appropriate VB runtime by default","State":"closed","Body":"Fix #3387 \r\nFix #2793 \r\n\r\nThis comment in the code describes and documents the approach:\r\n\r\n```\r\nBy default, VBRuntime is chosen as follows:\r\n\r\n    .NET Framework:\r\n      Same as classic vbproj. $(FrameworkPathOverride) is passed  as\r\n      /sdkpath to compiler and Microsoft.VisualBasic.dll will be used\r\n      from there even if there is no explicit reference to it. This is\r\n      accomplished by leaving $(VBRuntime) unset.\r\n\r\n    .NET Core 3.0+:\r\n      Locate Microsoft.VisualBasic among references and pass it as\r\n      /vbruntime to compiler.\r\n\r\n    .NET Core < 3.0 or .NET Standard:\r\n      Use embedded VB runtime as there is no Microsoft.VisualBasic.dll\r\n      available that is complete enough to serve as /vbruntime.\r\n\r\n   These defaults can be overridden as follows:\r\n\r\n    $(UseReferencedVBRuntime) == true:\r\n      Use referenced Microsoft.VisualBasic regardless of TFM.\r\n\r\n      This is an escape hatch for a custom Microsoft.VisualBasic reference\r\n      that can work as /vbruntime on a target framework other than .NET Core 3.0+\r\n\r\n    $(VBRuntime) != '':\r\n      Pass it through to compiler unchanged.\r\n```","Url":"https://github.com/dotnet/sdk/pull/3415","RelatedDescription":"Closed or merged PR \"Select appropriate VB runtime by default\" (#3415)"},{"Id":"468791081","IsPullRequest":true,"CreatedAt":"2019-07-16T18:05:10","Actor":"sbomer","Number":"3430","RawContent":null,"Title":"Update stage0 SDK","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3430","RelatedDescription":"Open PR \"Update stage0 SDK\" (#3430)"},{"Id":"468382089","IsPullRequest":false,"CreatedAt":"2019-07-16T17:49:13","Actor":"tlmii","Number":"3426","RawContent":null,"Title":"Generate runtimeconfig.json with rollForwardOnNoCandidateFx value from csproj?","State":"closed","Body":"Is it possible to specify the value of [rollForwardOnNoCandidateFx ](https://github.com/dotnet/cli/blob/master/Documentation/specs/runtime-configuration-file.md#runtimeoptions-section-runtimeconfigjson)that will be in the output `[AppName].runtimeconfig.json` from the .csproj file (or otherwise within the source code)? Or does it have to be added after the fact?","Url":"https://github.com/dotnet/sdk/issues/3426","RelatedDescription":"Closed issue \"Generate runtimeconfig.json with rollForwardOnNoCandidateFx value from csproj?\" (#3426)"},{"Id":"468379242","IsPullRequest":true,"CreatedAt":"2019-07-16T17:20:35","Actor":"dotnet-maestro[bot]","Number":"3425","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b0dcab74-ed18-4631-280a-08d690bc5860)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190715.4\r\n- **Date Produced**: 7/15/2019 7:17 PM\r\n- **Commit**: fb27fd4d8a2b67d4333e33d4b898c65171c9f3c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19365.4\r\n\r\n[marker]: <> (End:b0dcab74-ed18-4631-280a-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3425","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#3425)"},{"Id":"468632752","IsPullRequest":true,"CreatedAt":"2019-07-16T16:36:04","Actor":"dotnet-maestro[bot]","Number":"3429","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190715.11\r\n- **Date Produced**: 7/16/2019 6:39 AM\r\n- **Commit**: ad9f7e33fb1a1be7eefb57849e7d71a4f9a488b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27915-11\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3429","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3429)"},{"Id":"468116152","IsPullRequest":true,"CreatedAt":"2019-07-16T12:44:00","Actor":"dotnet-maestro[bot]","Number":"3423","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190714.06\r\n- **Date Produced**: 7/15/2019 4:19 AM\r\n- **Commit**: 2bb2dcaeffb1dfeda077354449868ddac254bc3d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27914-06\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3423","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3423)"},{"Id":"468408569","IsPullRequest":false,"CreatedAt":"2019-07-16T01:58:08","Actor":"AlseinX","Number":"3428","RawContent":null,"Title":"Will there be a standard way to ship native libraries with packed nuget package?","State":"open","Body":"I believe it widely needed that:\r\n\r\n+ A csproj project could contain native libraries in a proper folder structure for maybe multiple native RIDs.\r\n+ On packing, all of these libraries are included to the nuget packages with a proper folder structure.\r\n+ On publishing, native libraries are copied to the output folder and would be embedded if `PublishSingleFile` is enabled.\r\n+ Managed code could P/Invoke these libraries with the common dll name for all RIDs (like \"abc\" is resolved to \"abc.dll\" on windows and \"libabc.so\" on linux). This must be available on both development and production environment, for native libraries from the project itself, from referenced projects, from nuget packages, and from system library paths. without manually handling the file locations and naming conventions.\r\n+ Hopefully it supports customizing naming conventions with versions, like the ncurses wide-char library version 6 is named \"libncursesw.so.6\" on linux and \"libncursesw6.dll\" on mingw on windows.\r\n\r\nThis could be implemented with manually adding MSBuild configuration and codes for loading. Since it is widely need by native wrapper libraries, there should be a simple standard way provided by the SDK.","Url":"https://github.com/dotnet/sdk/issues/3428","RelatedDescription":"Open issue \"Will there be a standard way to ship native libraries with packed nuget package?\" (#3428)"},{"Id":"468089655","IsPullRequest":true,"CreatedAt":"2019-07-15T13:56:25","Actor":"dotnet-maestro[bot]","Number":"3422","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190714.1\r\n- **Date Produced**: 7/14/2019 1:05 PM\r\n- **Commit**: 0c81c2bbdc49749e9940bc8858ebd16026d51277\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19364.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3422","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3422)"},{"Id":"467893273","IsPullRequest":true,"CreatedAt":"2019-07-14T22:47:40","Actor":"drewnoakes","Number":"3421","RawContent":null,"Title":"WIP Remove CheckForDuplicateItemsContinueOnError property","State":"open","Body":"Follows #3399.\r\n\r\nThe `CheckForDuplicateItemsContinueOnError` property was used by WPF projects.\r\n\r\nhttps://github.com/dotnet/wpf/pull/1235 makes WPF use `ContinueOnError` instead, so this temporary property can be removed once things propagate.\r\n\r\nMarked as WIP as merging should be [delayed a few days](https://github.com/dotnet/sdk/pull/3399#discussion_r302977781).","Url":"https://github.com/dotnet/sdk/pull/3421","RelatedDescription":"Open PR \"WIP Remove CheckForDuplicateItemsContinueOnError property\" (#3421)"},{"Id":"467833431","IsPullRequest":true,"CreatedAt":"2019-07-14T14:39:00","Actor":"dotnet-maestro[bot]","Number":"3420","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190713.09\r\n- **Date Produced**: 7/14/2019 4:25 AM\r\n- **Commit**: 36ad04d936c4613c1b1599b899071d411fe5c9b1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27913-09\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3420","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3420)"},{"Id":"467828256","IsPullRequest":true,"CreatedAt":"2019-07-14T14:20:08","Actor":"dotnet-maestro[bot]","Number":"3419","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190713.1\r\n- **Date Produced**: 7/13/2019 12:59 PM\r\n- **Commit**: 8c94bc75d29cd84e3592e4044100d45a341653f7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19363.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3419","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3419)"},{"Id":"467717297","IsPullRequest":true,"CreatedAt":"2019-07-13T14:41:50","Actor":"dotnet-maestro[bot]","Number":"3418","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190712.15\r\n- **Date Produced**: 7/13/2019 9:17 AM\r\n- **Commit**: a7d2e0d27b2a6be92b620de7c321a29fe42fca53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27912-15\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3418","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3418)"},{"Id":"467712059","IsPullRequest":true,"CreatedAt":"2019-07-13T14:00:05","Actor":"dotnet-maestro[bot]","Number":"3417","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190712.5\r\n- **Date Produced**: 7/12/2019 10:49 PM\r\n- **Commit**: 15f50ca6a9d0b441c9927421657fb9dc91206cc9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19362.5\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3417","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3417)"},{"Id":"467642227","IsPullRequest":true,"CreatedAt":"2019-07-13T00:05:14","Actor":"dotnet-bot","Number":"3416","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3416","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3416)"},{"Id":"467378256","IsPullRequest":true,"CreatedAt":"2019-07-12T14:15:20","Actor":"dotnet-maestro[bot]","Number":"3414","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190711.7\r\n- **Date Produced**: 7/12/2019 2:02 AM\r\n- **Commit**: f1b09644408f45f43f5835786b3e4bdfd2e78141\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19361.7\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3414","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3414)"},{"Id":"469673628","IsPullRequest":false,"CreatedAt":"2017-03-29T16:32:40","Actor":"mavasani","Number":"3433","RawContent":null,"Title":"Breaking change due to default setting of certain properties","State":"open","Body":"PR https://github.com/dotnet/sdk/pull/511/ added default values for certain build related properties to fix https://github.com/dotnet/roslyn-project-system/issues/437 - indeterminate setting of corresponding check boxes in properties page.\r\n\r\nHowever, this causes breaking issues when moving from old project system to new project system. The C# targets do not set any default for these properties, which means that if my repo on old project system had the following conditional property after importing the common targets, then this condition will evaluate to true for old targets imports, but false for the new SDK imports:\r\n\r\n`<SignAssembly Condition=\"'$(SignAssembly)' == ''\">true</SignAssembly>`\r\n\r\nFor example see [here](https://github.com/dotnet/roslyn-analyzers/blob/master/build/Targets/Analyzers.Settings.targets#L18). This led me to spend half a day investigating IVT failures after porting the analyzers repo to new project system due to the fact that this breaking change silently turned off `/keyfile` command line argument.\r\n\r\nGiven that the above SDK change was only done to satisfy the property pages, we should find a different workaround.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3433","RelatedDescription":"Open issue \"Breaking change due to default setting of certain properties\" (#3433)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies ðŸ˜Š\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2â€¦ Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA â€œmulti-arch tagsâ€œ), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA â€œmulti-arch tagsâ€œ), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customerâ€™s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>TheÂ </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span>Â was released earlier this week. We have received multiple customer reports ofÂ issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studioâ€™s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your projectâ€™s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studioâ€™s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your projectâ€™s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1151899037030764545","CreatedAt":"2019-07-18T16:58:26+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":13,"FavoriteCount":8,"RawContent":null},{"Id":"1151259798244974592","CreatedAt":"2019-07-16T22:38:19+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1149432245909905409","CreatedAt":"2019-07-11T21:36:17+00:00","UserScreenname":"dotnet","Text":"Discover the world of .NET\n\n#dotNETConf is coming September 23 â€” 25\nCome celebrate the new .NET Core 3.0 launch witâ€¦ https://t.co/gVCxErAzFJ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":181,"FavoriteCount":97,"RawContent":null}]}},"RunOn":"2019-07-21T05:30:38.099087Z","RunDurationInMilliseconds":15586}