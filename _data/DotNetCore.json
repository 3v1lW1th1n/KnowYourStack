{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the .NET Framework 4.7.2","PublishedOn":"2018-04-30T20:56:19+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Today, we are happy to announce the release of the .NET Framework 4.7.2. It’s included in the Windows 10 April 2018 Update. .NET Framework 4.7.2 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/","RawContent":null},{"Title":"Help us plan the future of .NET!","PublishedOn":"2018-04-20T16:55:37+00:00","CommentsCount":63,"FacebookCount":0,"Summary":"We’re currently planning our next major .NET releases and would love to hear your feedback on how you interact with .NET Framework and .NET Core today. Please fill out the survey below and help shape...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/20/help-us-plan-the-future-of-net/","RawContent":null},{"Title":"Performance Improvements in .NET Core 2.1","PublishedOn":"2018-04-18T19:29:45+00:00","CommentsCount":46,"FacebookCount":0,"Summary":"Back before .NET Core 2.0 shipped, I wrote a post highlighting various performance improvements in .NET Core 2.0 when compared with .NET Core 1.1 and the .NET Framework. As .NET Core 2.1 is in its...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/","RawContent":null},{"Title":".NET Highlights in Visual Studio 2017 version 15.7 Preview 4","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"As you know we continue to incrementally improve Visual Studio 2017 (version 15), and our 7th significant update is currently well under way with the 4th preview shipping today. As we’re winding down...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/visual-studio-2017-15-7-preview-4/","RawContent":null},{"Title":".NET Core April 2018 Update","PublishedOn":"2018-04-17T23:50:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2018 Update. This update includes .NET Core 1.0.11, 1.1.8 and 2.0.7. There are no new security fixes in this update. See April 2018 .NET Updates for other...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 2","PublishedOn":"2018-04-11T18:02:40+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today we’re releasing the second preview of EF Core 2.1, alongside .NET Core 2.1 Preview 2 and ASP.NET Core 2.1 Preview 2. Thank you so much to everyone who has tried our early builds and has helped...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-entity-framework-core-2-1-preview-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 2","PublishedOn":"2018-04-11T17:53:44+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 2. The release is now ready for broad testing, as we get closer to a final build within the next two to three months. We&#8217;d appreciate any feedback...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/","RawContent":null},{"Title":"Explore Azure Cosmos DB with .NET Core and MongoDB","PublishedOn":"2018-04-09T16:00:47+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Have you had to design general purpose &#8220;metadata&#8221; tables in your SQL database that basically store column names and values? Do you often serialize/de-serialize XML or JSON from your SQL...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/09/explore-cosmosdb-with-net-core-and-mongodb/","RawContent":null},{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":66,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7559882384","Type":"PullRequestEvent","CreatedAt":"2018-04-20T06:42:59","Actor":"Cheesebaron","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Opened pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project"},{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7619224203","Type":"IssuesEvent","CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Opened issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65) at dotnet/announcements","RelatedBody":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n"},{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7626152655","Type":"PullRequestEvent","CreatedAt":"2018-05-04T01:23:15","Actor":"davidwrighton","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17879","RelatedDescription":"Opened pull request \"Step into multicast delegate\" (#17879) at dotnet/coreclr","RelatedBody":"- Fix call of multicast debugger trace helper to be called before the first delegate invocation instead of after it"},{"Id":"7625943440","Type":"IssuesEvent","CreatedAt":"2018-05-03T23:56:27","Actor":"morganbr","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/5303","RelatedDescription":"Closed issue \"CodeGen for WebAssembly\" (#5303) at dotnet/coreclr","RelatedBody":"WebAssembly (wasm): http://webassembly.github.io/ \n\nAccording to MicrosoftEdge status page -> https://developer.microsoft.com/en-us/microsoft-edge/platform/status/webassemblymvp?filter=f3f0000bf&search=WebAssembly, WebAssembly is in development.\n\nIMO, it would be great to consolidate efforts right from the beginning between Edge, CoreCLR/CoreRT and VC teams to provide robust WebAssembly code generation and optimizations.\n\nIn case of LLILC the LLVM compiler has already started to support WebAssembly, but having first hand code gen in CoreCLR has its own advantages. Perhaps we can have a draft implementation started in CoreCLR where community can chime in?\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7626218329","Type":"IssuesEvent","CreatedAt":"2018-05-04T01:52:16","Actor":"Rick-Anderson","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9195","RelatedDescription":"Opened issue \"dotnet SDK message: please remove please\" (#9195) at dotnet/cli","RelatedBody":"The first time you run `dotnet` after installing the SDK you get a message similar to:\r\n\r\n\r\nWelcome to .NET Core!\r\n---------------------\r\nLearn more about .NET Core: https://aka.ms/dotnet-docs\r\nUse 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli-docs\r\n\r\nTelemetry\r\n---------\r\nThe .NET Core tools collect usage data in order to help us improve your experience. The data is anonymous and doesn't include command-line arguments. The data is collected by Microsoft and shared with the community. You can opt-out of telemetry by setting the DOTNET_CLI_TELEMETRY_OPTOUT environment variable to '1' or 'true' using your favorite shell.\r\n\r\nRead more about .NET Core CLI Tools telemetry: https://aka.ms/dotnet-cli-telemetry\r\n\r\nASP.NET Core\r\n------------\r\nSuccessfully installed the ASP.NET Core HTTPS Development Certificate.\r\nTo trust the certificate run 'dotnet dev-certs https --trust' (Windows and macOS only). For establishing trust on other platforms **please refer** to the platform specific documentation.\r\nFor more information on configuring HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.\r\n\r\n------------------ End of output ---------------------------------\r\n\r\nPer the MS style guide\r\nAvoid please except in situations where the customer is asked to do something inconvenient or the application or site is to blame for the situation.\r\n\r\n\r\n\r\n"},{"Id":"7625610463","Type":"PullRequestEvent","CreatedAt":"2018-05-03T22:09:03","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/9192","RelatedDescription":"Closed pull request \"Set DOTNET_ROOT from the CLI to ensure any child processes launched use same root\" (#9192) at dotnet/cli","RelatedBody":"Partial solution to https://github.com/dotnet/cli/issues/9114.\r\n\r\nThis sets DOTNET_ROOT (or DOTNET_ROOT(x86)) at the beginning of the dotnet.dll process. This should help ensure any child processes launched by the SDK via apphost will run on the same installation of .NET Core as the dotnet SDK. These child processes may include `dotnet run`, bundled tools, global tools, processes launched through MSBuild, and more.\r\n"},{"Id":"7625281949","Type":"IssuesEvent","CreatedAt":"2018-05-03T20:53:24","Actor":"spboyer","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9194","RelatedDescription":"Opened issue \"Should the CLI support user default setting values\" (#9194) at dotnet/cli","RelatedBody":"Working with a Razor Pages app. Having to type the namespace value over and over when adding a new page to the application.\r\n\r\n```bash\r\n> dotnet new page --name Index -na MyAppName.Pages.Area -o Pages/Area\r\n\r\n> dotnet new page --name NextPage -na MyAppName.Pages.Area -o Pages/Area\r\n```\r\n\r\nSolved with creating local variable\r\n\r\n```bash\r\n> ns=-ns=MyAppName.Pages\r\n\r\n> dotnet new page --name Index  $ns.Area -o Pages/Area\r\n```\r\n\r\nThe Azure CLI offers user defaults once set the user does not have to specify them in the actual command at all.\r\n\r\n```bash\r\naz configure --defaults location=\"East US\" group=\"mysuperappgroup\" \r\n\r\n[defaults]\r\nlocation = East US  \r\ngroup = mysuperappgroup \r\n\r\n# create a web application usually needing the above location and group specified.\r\naz appservice web create -n myapp\r\n```\r\n\r\nIt would suffice that the dotnet application should support this feature for things like `--framework`, `--language`, `--nuget-source` etc. without having to have the developer script specifically via bash, powershell or some other means.\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7619511676","Type":"PullRequestEvent","CreatedAt":"2018-05-02T21:29:23","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/722","RelatedDescription":"Merged pull request \"Fix LockFileCache when SDK and trimming task are using different NuGet dlls\" (#722) at dotnet/standard","RelatedBody":"Previously I copied the SDK caching code for caching the loaded lock file across task boundaries.\r\n\r\nThis became a problem when the SDK updated their NuGet version.\r\n\r\nWe didn't agree on the type that belonged in the cache.\r\n\r\nAvoid this by using a versioned prefix for the cache key.  Of course we will no longer share the read if we happen to be on the same version, but this is safer.\r\n\r\n/cc @nguerrera @dsplaisted "},{"Id":"7619284155","Type":"PullRequestEvent","CreatedAt":"2018-05-02T20:41:05","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/722","RelatedDescription":"Opened pull request \"Fix LockFileCache when SDK and trimming task are using different NuGet dlls\" (#722) at dotnet/standard","RelatedBody":"Previously I copied the SDK caching code for caching the loaded lock file across task boundaries.\r\n\r\nThis became a problem when the SDK updated their NuGet version.\r\n\r\nWe didn't agree on the type that belonged in the cache.\r\n\r\nAvoid this by using a versioned prefix for the cache key.  Of course we will no longer share the read if we happen to be on the same version, but this is safer.\r\n\r\n/cc @nguerrera @dsplaisted "},{"Id":"7613299458","Type":"PullRequestEvent","CreatedAt":"2018-05-01T20:42:40","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/721","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02801-01 (master)\" (#721) at dotnet/standard","RelatedBody":""},{"Id":"7612161291","Type":"IssuesEvent","CreatedAt":"2018-05-01T16:31:35","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/719","RelatedDescription":"Closed issue \"Different build output for classic projects: NuGet packages vs project reference. Is this on purpose?\" (#719) at dotnet/standard","RelatedBody":"Hi there,\r\n\r\nI have a WPF app (.NET Framework 4.6.1, classic .csproj) that references a .NET Standard 1.3 project that itself references another Multi-targeted project (.NET Standard 1.3 and .NET Framework 4.6.1).\r\n\r\nI've set `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` in the csproj file of the WPF app, but seems this is only important for NuGet packages?\r\n\r\nI would expect that the WPF app gets these dlls in the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395631-e0f9a786-4ae0-11e8-91f4-ecacadee72fc.png)\r\n\r\nBut it actually copies these dlls to the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395639-ee646884-4ae0-11e8-9ecb-78f0eff1afcd.png)\r\n\r\nIf the Storage Lib is referenced as a NuGet package, it works as expected:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395643-fe20684a-4ae0-11e8-8d8a-d2015b262057.png)\r\n\r\nIs this the expected behavior? When migrating the WPF app to SDK-style project format, it works also as expected as shown in the first picture.\r\n\r\n\r\n"},{"Id":"7608452828","Type":"IssuesEvent","CreatedAt":"2018-04-30T20:01:13","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/720","RelatedDescription":"Closed issue \"PBKDF2 based on HMACSHA512 \" (#720) at dotnet/standard","RelatedBody":"Hi there,\r\nI am trying to achieve this purely in **.netstandard2.0**.\r\n```\r\nusing (SHA512 sha = SHA512.Create())\r\n{\r\n    byte[] pb = KeyDerivation.Pbkdf2(\r\n        password,\r\n        sha.ComputeHash(new MemoryStream(Encoding.UTF8.GetBytes(salt))),\r\n        KeyDerivationPrf.HMACSHA512,\r\n        IterationCount,\r\n        48);\r\n    Crypter.Key = pb.Take(32).ToArray();\r\n    Crypter.IV = pb.Skip(32).Take(16).ToArray();\r\n}\r\n```\r\n But I can't as it uses  **KeyDerivation.Pbkdf2** which is a part of _Microsoft.AspNetCore.Cryptography.KeyDerivation_  namespace in **.netcore** . I know about **Rfc2898DeriveBytes** class but it is based on **HMACSHA1**.  Am I missing something? Does an equivalent implementation for **PBKDF2** based on **HMACSHA512** exist in .**netstandard2.0**?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7626574045","Type":"IssuesEvent","CreatedAt":"2018-05-04T04:35:23","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29095","RelatedDescription":"Reopened issue \"Directory.EnumerateDirectories doesn't return directory list on rhel7.2\" (#29095) at dotnet/corefx","RelatedBody":"_From @jainaashish on April 7, 2018 0:18_\n\nI've created a simple application to demonstrate the issue where `Directory.EnumerateDirectories` api doesn't return the list of child directories on rhel 7.2, although it works fine on Windows or Ubuntu. \r\n\r\nSample Project - https://github.com/jainaashish/CoreClrIssue/tree/master/EnumerateDirectoriesIssue/EnumerateDirectoriesIssue\r\n\n\n_Copied from original issue: dotnet/coreclr#17465_"},{"Id":"7626571783","Type":"PullRequestEvent","CreatedAt":"2018-05-04T04:34:17","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29502","RelatedDescription":"Merged pull request \"Fix handling of Unix directories\" (#29502) at dotnet/corefx","RelatedBody":"Some file systems return DT_UNKNOWN for directories. Additionally we need\r\nto handle if Stat fails and fall back to LStat.\r\n\r\nThis showed up on RHEL 7.2 with xfs.\r\n\r\nNote that this is effectively https://github.com/dotnet/corefx/commit/59da18fc926397f6674e1de86e296ca6e0dfe067, which got lost along the way.\r\n\r\nFixes #29095 "},{"Id":"7626571773","Type":"PullRequestEvent","CreatedAt":"2018-05-04T04:34:16","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29508","RelatedDescription":"Opened pull request \"Delete package verification workarounds\" (#29508) at dotnet/corefx","RelatedBody":"Fixes #29322 #29382"},{"Id":"7626571771","Type":"IssuesEvent","CreatedAt":"2018-05-04T04:34:16","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29095","RelatedDescription":"Closed issue \"Directory.EnumerateDirectories doesn't return directory list on rhel7.2\" (#29095) at dotnet/corefx","RelatedBody":"_From @jainaashish on April 7, 2018 0:18_\n\nI've created a simple application to demonstrate the issue where `Directory.EnumerateDirectories` api doesn't return the list of child directories on rhel 7.2, although it works fine on Windows or Ubuntu. \r\n\r\nSample Project - https://github.com/jainaashish/CoreClrIssue/tree/master/EnumerateDirectoriesIssue/EnumerateDirectoriesIssue\r\n\n\n_Copied from original issue: dotnet/coreclr#17465_"},{"Id":"7626468021","Type":"IssuesEvent","CreatedAt":"2018-05-04T03:44:23","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29503","RelatedDescription":"Closed issue \"StartsWith/EndsWith not giving expected results on Linux\" (#29503) at dotnet/corefx","RelatedBody":"Both of these are passing on Windows but failing on Linux (Ubuntu 16.04 over WSL). Also fails if I use the invariant comparison.\r\n\r\nDebug.Assert(\"\\r\\n\".EndsWith(\"\\n\"));\r\nDebug.Assert(\"\\r\\n\".StartsWith(\"\\r\"));"},{"Id":"7626462459","Type":"IssuesEvent","CreatedAt":"2018-05-04T03:41:52","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29504","RelatedDescription":"Closed issue \"macosx 10.13.4 corefx build errors\" (#29504) at dotnet/corefx","RelatedBody":"Building in CLI\r\nHere are my details for the environment:\r\ndotnet: 2.2.100-preview1-008633\r\nopenssl: 1.0.2o_1\r\nmono: JIT compiler version 5.8.1.0\r\ncmake: version 3.11.1\r\nxcode : 9.2\r\n\r\nOutput of the build : Cliffs-iMac:corefx cliffozewell$ ./build.sh \r\nTools are already initialized\r\nRunning: /Users/cliffozewell/Desktop/Repos/corefx/src/Native/build-native.sh   x64  Debug  OSX  --numproc 4  -portable  toolSetDir=c:\\tools\\clr \r\nSetting up directories for build\r\nWARNING: Can not determine runtime id for current distro.\r\nChecking pre-requisites...\r\nCommencing build of corefx native components for OSX.x64.Debug\r\nInvoking cmake with arguments: \"/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix\" DEBUG  -DFEATURE_DISTRO_AGNOSTIC_SSL=0 -DCMAKE_STATIC_LIB_LINK=0\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /Users/cliffozewell/Desktop/Repos/corefx/bin/obj/OSX.x64.Debug/native\r\nExecuting make install -j 4 \r\nScanning dependencies of target System.Native-Static\r\nScanning dependencies of target System.IO.Compression.Native-Static\r\nScanning dependencies of target System.IO.Compression.Native\r\nScanning dependencies of target System.Native\r\n[  0%] Building CXX object System.Native/CMakeFiles/System.Native.dir/pal_console.cpp.o\r\n[  1%] Building CXX object System.Native/CMakeFiles/System.Native-Static.dir/pal_console.cpp.o\r\n[  1%] Building CXX object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native.dir/pal_zlib.cpp.o\r\n[  1%] Building CXX object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native-Static.dir/pal_zlib.cpp.o\r\n[  1%] Building C object System.Native/CMakeFiles/System.Native-Static.dir/pal_errno.c.o\r\n[  2%] Building C object System.Native/CMakeFiles/System.Native.dir/pal_errno.c.o\r\n[  3%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native-Static.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/common/dictionary.c.o\r\n[  4%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/common/dictionary.c.o\r\n[  4%] Building CXX object System.Native/CMakeFiles/System.Native.dir/pal_interfaceaddresses.cpp.o\r\n[  5%] Building CXX object System.Native/CMakeFiles/System.Native-Static.dir/pal_interfaceaddresses.cpp.o\r\n[  5%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native-Static.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/dec/bit_reader.c.o\r\n[  5%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/dec/bit_reader.c.o\r\n[  5%] Building C object System.Native/CMakeFiles/System.Native-Static.dir/pal_io.c.o\r\n[  6%] Building C object System.Native/CMakeFiles/System.Native.dir/pal_io.c.o\r\n[  8%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native-Static.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/dec/decode.c.o\r\n[  8%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/dec/decode.c.o\r\n[  9%] Building C object System.Native/CMakeFiles/System.Native.dir/pal_maphardwaretype.c.o\r\n[ 10%] Building C object System.Native/CMakeFiles/System.Native-Static.dir/pal_maphardwaretype.c.o\r\n[ 10%] Building C object System.Native/CMakeFiles/System.Native.dir/pal_memory.c.o\r\n[ 11%] Building C object System.Native/CMakeFiles/System.Native-Static.dir/pal_memory.c.o\r\n[ 12%] Building CXX object System.Native/CMakeFiles/System.Native.dir/pal_mount.cpp.o\r\n[ 12%] Building CXX object System.Native/CMakeFiles/System.Native-Static.dir/pal_mount.cpp.o\r\n[ 12%] Building C object System.Native/CMakeFiles/System.Native.dir/pal_networking.c.o\r\n[ 13%] Building C object System.Native/CMakeFiles/System.Native-Static.dir/pal_networking.c.o\r\n/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix/System.Native/pal_networking.c:1026:5: error: declaration shadows a typedef in\r\n      the global scope [-Werror,-Wshadow]\r\n    c_static_assert(sizeof_member(struct xsocket, so_linger) == 2);\r\n    ^\r\n/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix/Common/pal_compiler.h:19:41: note: expanded from macro 'c_static_assert'\r\n#define c_static_assert(e) typedef char __c_static_assert__[(e)?1:-1]\r\n                                        ^\r\n/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix/System.Native/pal_networking.c:142:1: note: previous declaration is here\r\nc_static_assert(offsetof(struct IOVector, Count) == offsetof(struct iovec, iov_len));\r\n^\r\n/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix/Common/pal_compiler.h:19:41: note: expanded from macro 'c_static_assert'\r\n#define c_static_assert(e) typedef char __c_static_assert__[(e)?1:-1]\r\n                                        ^\r\n/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix/System.Native/pal_networking.c:1026:5: error: declaration shadows a typedef in\r\n      the global scope [-Werror,-Wshadow]\r\n    c_static_assert(sizeof_member(struct xsocket, so_linger) == 2);\r\n    ^\r\n/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix/Common/pal_compiler.h:19:41: note: expanded from macro 'c_static_assert'\r\n#define c_static_assert(e) typedef char __c_static_assert__[(e)?1:-1]\r\n                                        ^\r\n/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix/System.Native/pal_networking.c:142:1: note: previous declaration is here\r\nc_static_assert(offsetof(struct IOVector, Count) == offsetof(struct iovec, iov_len));\r\n^\r\n/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix/Common/pal_compiler.h:19:41: note: expanded from macro 'c_static_assert'\r\n#define c_static_assert(e) typedef char __c_static_assert__[(e)?1:-1]\r\n                                        ^\r\n1 error generated.\r\n1 error generated.\r\nmake[2]: *** [System.Native/CMakeFiles/System.Native.dir/pal_networking.c.o] Error 1\r\nmake[1]: *** [System.Native/CMakeFiles/System.Native.dir/all] Error 2\r\nmake[1]: *** Waiting for unfinished jobs....\r\n[ 13%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native-Static.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/dec/huffman.c.o\r\nmake[2]: *** [System.Native/CMakeFiles/System.Native-Static.dir/pal_networking.c.o] Error 1\r\nmake[1]: *** [System.Native/CMakeFiles/System.Native-Static.dir/all] Error 2\r\n[ 13%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/dec/huffman.c.o\r\n[ 14%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/dec/state.c.o\r\n[ 15%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native-Static.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/dec/state.c.o\r\n[ 15%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/enc/backward_references.c.o\r\n[ 16%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native-Static.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/enc/backward_references.c.o\r\n[ 17%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/enc/backward_references_hq.c.o\r\n[ 17%] Building C object System.IO.Compre"},{"Id":"7626462103","Type":"IssuesEvent","CreatedAt":"2018-05-04T03:41:42","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29506","RelatedDescription":"Closed issue \"WebProxy uses pascal case for parameter names \" (#29506) at dotnet/corefx","RelatedBody":"I am using version 4.3.3 of System.Net.Http package. When I tried to setup proxy for HttpClient I noticed that WebProxy class uses pascal case for constructor parameter names. For example see line:\r\ncorefx/src/System.Net.WebProxy/src/System/Net/WebProxy.cs\r\nLine 22 in 8cb7675\r\npublic WebProxy(Uri Address, bool BypassOnLocal) : this(Address, BypassOnLocal, null, null) { }\r\nThis is against .NET coding conventions which states that parameter names should be written in camel case. It would be great to fix this, but of course I am aware that this is a breaking change and may cause code to stop compiling when someone used explicit parameter names in their code like:\r\nvar proxyHttpClientHandler = new HttpClientHandler {\r\n// notice explicit parameter name 'BypassOnLocal'\r\nProxy = new WebProxy(new Uri(\"http://localhost:5555/\"), BypassOnLocal: false),\r\nUseProxy = true,\r\n};\r\nStill I believe that this should be fixes ASAP even if it causes inconveniences for some people, it would be a better decision in the long run \r\n"},{"Id":"7626461639","Type":"IssuesEvent","CreatedAt":"2018-05-04T03:41:27","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29507","RelatedDescription":"Closed issue \"WebProxy uses pascal case for parameter names\" (#29507) at dotnet/corefx","RelatedBody":"I am using version 4.3.3 of System.Net.Http package. When I tried to setup proxy for HttpClient I noticed that WebProxy class uses pascal case for constructor parameter names. For example see line:\r\ncorefx/src/System.Net.WebProxy/src/System/Net/WebProxy.cs\r\n\r\nLine 22 in 8cb7675\r\n\r\npublic WebProxy(Uri Address, bool BypassOnLocal) : this(Address, BypassOnLocal, null, null) { }\r\n\r\nThis is against .NET coding conventions which states that parameter names should be written in camel case. It would be great to fix this, but of course I am aware that this is a breaking change and may cause code to stop compiling when someone used explicit parameter names in their code like:\r\nvar proxyHttpClientHandler = new HttpClientHandler {\r\n// notice explicit parameter name 'BypassOnLocal'\r\nProxy = new WebProxy(new Uri(\"http://localhost:5555/\"), BypassOnLocal: false),\r\nUseProxy = true,\r\n};\r\nStill I believe that this should be fixes ASAP even if it causes inconveniences for some people, it would be a better decision in the long run."},{"Id":"7626460616","Type":"IssuesEvent","CreatedAt":"2018-05-04T03:40:59","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29505","RelatedDescription":"Closed issue \"WebProxy uses pascal case for parameter names \" (#29505) at dotnet/corefx","RelatedBody":"\r\nI am using version 4.3.3 of System.Net.Http package. When I tried to setup proxy for HttpClient I noticed that WebProxy class uses pascal case for constructor parameter names. For example see line:\r\ncorefx/src/System.Net.WebProxy/src/System/Net/WebProxy.cs\r\n\r\nLine 22 in 8cb7675\r\n\r\n public WebProxy(Uri Address, bool BypassOnLocal) : this(Address, BypassOnLocal, null, null) { } \r\n\r\nThis is against .NET coding conventions which states that parameter names should be written in camel case. It would be great to fix this, but of course I am aware that this is a breaking change and may cause code to stop compiling when someone used explicit parameter names in their code like:\r\nvar proxyHttpClientHandler = new HttpClientHandler {\r\n   // notice explicit parameter name 'BypassOnLocal'\r\n    Proxy = new WebProxy(new Uri(\"http://localhost:5555/\"), BypassOnLocal: false),\r\n    UseProxy = true,\r\n};            \r\nStill I believe that this should be fixes ASAP even if it causes inconveniences for some people, it would be a better decision in the long run."},{"Id":"7626414020","Type":"IssuesEvent","CreatedAt":"2018-05-04T03:19:28","Actor":"asthana86","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29507","RelatedDescription":"Opened issue \"WebProxy uses pascal case for parameter names\" (#29507) at dotnet/corefx","RelatedBody":"I am using version 4.3.3 of System.Net.Http package. When I tried to setup proxy for HttpClient I noticed that WebProxy class uses pascal case for constructor parameter names. For example see line:\r\ncorefx/src/System.Net.WebProxy/src/System/Net/WebProxy.cs\r\n\r\nLine 22 in 8cb7675\r\n\r\npublic WebProxy(Uri Address, bool BypassOnLocal) : this(Address, BypassOnLocal, null, null) { }\r\n\r\nThis is against .NET coding conventions which states that parameter names should be written in camel case. It would be great to fix this, but of course I am aware that this is a breaking change and may cause code to stop compiling when someone used explicit parameter names in their code like:\r\nvar proxyHttpClientHandler = new HttpClientHandler {\r\n// notice explicit parameter name 'BypassOnLocal'\r\nProxy = new WebProxy(new Uri(\"http://localhost:5555/\"), BypassOnLocal: false),\r\nUseProxy = true,\r\n};\r\nStill I believe that this should be fixes ASAP even if it causes inconveniences for some people, it would be a better decision in the long run."},{"Id":"7626368656","Type":"IssuesEvent","CreatedAt":"2018-05-04T02:59:01","Actor":"coolcsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29506","RelatedDescription":"Opened issue \"WebProxy uses pascal case for parameter names \" (#29506) at dotnet/corefx","RelatedBody":"I am using version 4.3.3 of System.Net.Http package. When I tried to setup proxy for HttpClient I noticed that WebProxy class uses pascal case for constructor parameter names. For example see line:\r\ncorefx/src/System.Net.WebProxy/src/System/Net/WebProxy.cs\r\nLine 22 in 8cb7675\r\npublic WebProxy(Uri Address, bool BypassOnLocal) : this(Address, BypassOnLocal, null, null) { }\r\nThis is against .NET coding conventions which states that parameter names should be written in camel case. It would be great to fix this, but of course I am aware that this is a breaking change and may cause code to stop compiling when someone used explicit parameter names in their code like:\r\nvar proxyHttpClientHandler = new HttpClientHandler {\r\n// notice explicit parameter name 'BypassOnLocal'\r\nProxy = new WebProxy(new Uri(\"http://localhost:5555/\"), BypassOnLocal: false),\r\nUseProxy = true,\r\n};\r\nStill I believe that this should be fixes ASAP even if it causes inconveniences for some people, it would be a better decision in the long run \r\n"},{"Id":"7626330580","Type":"IssuesEvent","CreatedAt":"2018-05-04T02:41:25","Actor":"asthana86","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29505","RelatedDescription":"Opened issue \"WebProxy uses pascal case for parameter names \" (#29505) at dotnet/corefx","RelatedBody":"\r\nI am using version 4.3.3 of System.Net.Http package. When I tried to setup proxy for HttpClient I noticed that WebProxy class uses pascal case for constructor parameter names. For example see line:\r\ncorefx/src/System.Net.WebProxy/src/System/Net/WebProxy.cs\r\n\r\nLine 22 in 8cb7675\r\n\r\n public WebProxy(Uri Address, bool BypassOnLocal) : this(Address, BypassOnLocal, null, null) { } \r\n\r\nThis is against .NET coding conventions which states that parameter names should be written in camel case. It would be great to fix this, but of course I am aware that this is a breaking change and may cause code to stop compiling when someone used explicit parameter names in their code like:\r\nvar proxyHttpClientHandler = new HttpClientHandler {\r\n   // notice explicit parameter name 'BypassOnLocal'\r\n    Proxy = new WebProxy(new Uri(\"http://localhost:5555/\"), BypassOnLocal: false),\r\n    UseProxy = true,\r\n};            \r\nStill I believe that this should be fixes ASAP even if it causes inconveniences for some people, it would be a better decision in the long run."},{"Id":"7626315236","Type":"IssuesEvent","CreatedAt":"2018-05-04T02:34:33","Actor":"asthana86","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29504","RelatedDescription":"Opened issue \"macosx 10.13.4 corefx build errors\" (#29504) at dotnet/corefx","RelatedBody":"Building in CLI\r\nHere are my details for the environment:\r\ndotnet: 2.2.100-preview1-008633\r\nopenssl: 1.0.2o_1\r\nmono: JIT compiler version 5.8.1.0\r\ncmake: version 3.11.1\r\nxcode : 9.2\r\n\r\nOutput of the build : Cliffs-iMac:corefx cliffozewell$ ./build.sh \r\nTools are already initialized\r\nRunning: /Users/cliffozewell/Desktop/Repos/corefx/src/Native/build-native.sh   x64  Debug  OSX  --numproc 4  -portable  toolSetDir=c:\\tools\\clr \r\nSetting up directories for build\r\nWARNING: Can not determine runtime id for current distro.\r\nChecking pre-requisites...\r\nCommencing build of corefx native components for OSX.x64.Debug\r\nInvoking cmake with arguments: \"/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix\" DEBUG  -DFEATURE_DISTRO_AGNOSTIC_SSL=0 -DCMAKE_STATIC_LIB_LINK=0\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /Users/cliffozewell/Desktop/Repos/corefx/bin/obj/OSX.x64.Debug/native\r\nExecuting make install -j 4 \r\nScanning dependencies of target System.Native-Static\r\nScanning dependencies of target System.IO.Compression.Native-Static\r\nScanning dependencies of target System.IO.Compression.Native\r\nScanning dependencies of target System.Native\r\n[  0%] Building CXX object System.Native/CMakeFiles/System.Native.dir/pal_console.cpp.o\r\n[  1%] Building CXX object System.Native/CMakeFiles/System.Native-Static.dir/pal_console.cpp.o\r\n[  1%] Building CXX object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native.dir/pal_zlib.cpp.o\r\n[  1%] Building CXX object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native-Static.dir/pal_zlib.cpp.o\r\n[  1%] Building C object System.Native/CMakeFiles/System.Native-Static.dir/pal_errno.c.o\r\n[  2%] Building C object System.Native/CMakeFiles/System.Native.dir/pal_errno.c.o\r\n[  3%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native-Static.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/common/dictionary.c.o\r\n[  4%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/common/dictionary.c.o\r\n[  4%] Building CXX object System.Native/CMakeFiles/System.Native.dir/pal_interfaceaddresses.cpp.o\r\n[  5%] Building CXX object System.Native/CMakeFiles/System.Native-Static.dir/pal_interfaceaddresses.cpp.o\r\n[  5%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native-Static.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/dec/bit_reader.c.o\r\n[  5%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/dec/bit_reader.c.o\r\n[  5%] Building C object System.Native/CMakeFiles/System.Native-Static.dir/pal_io.c.o\r\n[  6%] Building C object System.Native/CMakeFiles/System.Native.dir/pal_io.c.o\r\n[  8%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native-Static.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/dec/decode.c.o\r\n[  8%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/dec/decode.c.o\r\n[  9%] Building C object System.Native/CMakeFiles/System.Native.dir/pal_maphardwaretype.c.o\r\n[ 10%] Building C object System.Native/CMakeFiles/System.Native-Static.dir/pal_maphardwaretype.c.o\r\n[ 10%] Building C object System.Native/CMakeFiles/System.Native.dir/pal_memory.c.o\r\n[ 11%] Building C object System.Native/CMakeFiles/System.Native-Static.dir/pal_memory.c.o\r\n[ 12%] Building CXX object System.Native/CMakeFiles/System.Native.dir/pal_mount.cpp.o\r\n[ 12%] Building CXX object System.Native/CMakeFiles/System.Native-Static.dir/pal_mount.cpp.o\r\n[ 12%] Building C object System.Native/CMakeFiles/System.Native.dir/pal_networking.c.o\r\n[ 13%] Building C object System.Native/CMakeFiles/System.Native-Static.dir/pal_networking.c.o\r\n/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix/System.Native/pal_networking.c:1026:5: error: declaration shadows a typedef in\r\n      the global scope [-Werror,-Wshadow]\r\n    c_static_assert(sizeof_member(struct xsocket, so_linger) == 2);\r\n    ^\r\n/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix/Common/pal_compiler.h:19:41: note: expanded from macro 'c_static_assert'\r\n#define c_static_assert(e) typedef char __c_static_assert__[(e)?1:-1]\r\n                                        ^\r\n/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix/System.Native/pal_networking.c:142:1: note: previous declaration is here\r\nc_static_assert(offsetof(struct IOVector, Count) == offsetof(struct iovec, iov_len));\r\n^\r\n/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix/Common/pal_compiler.h:19:41: note: expanded from macro 'c_static_assert'\r\n#define c_static_assert(e) typedef char __c_static_assert__[(e)?1:-1]\r\n                                        ^\r\n/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix/System.Native/pal_networking.c:1026:5: error: declaration shadows a typedef in\r\n      the global scope [-Werror,-Wshadow]\r\n    c_static_assert(sizeof_member(struct xsocket, so_linger) == 2);\r\n    ^\r\n/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix/Common/pal_compiler.h:19:41: note: expanded from macro 'c_static_assert'\r\n#define c_static_assert(e) typedef char __c_static_assert__[(e)?1:-1]\r\n                                        ^\r\n/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix/System.Native/pal_networking.c:142:1: note: previous declaration is here\r\nc_static_assert(offsetof(struct IOVector, Count) == offsetof(struct iovec, iov_len));\r\n^\r\n/Users/cliffozewell/Desktop/Repos/corefx/src/Native/Unix/Common/pal_compiler.h:19:41: note: expanded from macro 'c_static_assert'\r\n#define c_static_assert(e) typedef char __c_static_assert__[(e)?1:-1]\r\n                                        ^\r\n1 error generated.\r\n1 error generated.\r\nmake[2]: *** [System.Native/CMakeFiles/System.Native.dir/pal_networking.c.o] Error 1\r\nmake[1]: *** [System.Native/CMakeFiles/System.Native.dir/all] Error 2\r\nmake[1]: *** Waiting for unfinished jobs....\r\n[ 13%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native-Static.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/dec/huffman.c.o\r\nmake[2]: *** [System.Native/CMakeFiles/System.Native-Static.dir/pal_networking.c.o] Error 1\r\nmake[1]: *** [System.Native/CMakeFiles/System.Native-Static.dir/all] Error 2\r\n[ 13%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/dec/huffman.c.o\r\n[ 14%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/dec/state.c.o\r\n[ 15%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native-Static.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/dec/state.c.o\r\n[ 15%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/enc/backward_references.c.o\r\n[ 16%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native-Static.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/enc/backward_references.c.o\r\n[ 17%] Building C object System.IO.Compression.Native/CMakeFiles/System.IO.Compression.Native.dir/Users/cliffozewell/Desktop/Repos/corefx/src/Native/AnyOS/brotli/enc/backward_references_hq.c.o\r\n[ 17%] Building C object System.IO.Compre"},{"Id":"7626307376","Type":"IssuesEvent","CreatedAt":"2018-05-04T02:31:04","Actor":"asthana86","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29503","RelatedDescription":"Opened issue \"StartsWith/EndsWith not giving expected results on Linux\" (#29503) at dotnet/corefx","RelatedBody":"Both of these are passing on Windows but failing on Linux (Ubuntu 16.04 over WSL). Also fails if I use the invariant comparison.\r\n\r\nDebug.Assert(\"\\r\\n\".EndsWith(\"\\n\"));\r\nDebug.Assert(\"\\r\\n\".StartsWith(\"\\r\"));"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7626484762","Type":"IssuesEvent","CreatedAt":"2018-05-04T03:51:57","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26614","RelatedDescription":"Closed issue \"Async method with nullable return type can return null\" (#26614) at dotnet/roslyn","RelatedBody":"Currently, this produces a warning, but it should not.\r\n\r\n```C#\r\nusing System.Threading.Tasks;\r\n\r\npublic class C {\r\n    public async Task<string?> M() {\r\n        await Task.Delay(10);\r\n        return null; // warning CS8625: Cannot convert null literal to non-nullable reference or unconstrained type parameter.\r\n    }\r\n}\r\n```\r\n\r\nFound in nullable dogfood. Assigned to @cston "},{"Id":"7626462288","Type":"IssuesEvent","CreatedAt":"2018-05-04T03:41:47","Actor":"mhamri","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26623","RelatedDescription":"Opened issue \"open a .sln file in linux in .netcore 2.0 console app\" (#26623) at dotnet/roslyn","RelatedBody":"I'm trying to open a .sln file out of visual studio in a .netcore console app and run some analysis on that. unfortunately all code about `MSBuildWorkspace` that i found doesn't work. all codes are using DTE from `EnvDTE` or Roslyn `MsBuildWorkspace` but almost nothing works. i wonder if what I'm going to achieve is possible or not. i appreciate if you guide me with some sample code or drop some blog or article in here, and tell me what nugget packages i need. there is not many guide out there if not i wouldn't create this issue here. \r\n\r\nThanks \r\n\r\n**Version Used**:'2.8.0 \r\n"},{"Id":"7626349519","Type":"PullRequestEvent","CreatedAt":"2018-05-04T02:50:04","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23693","RelatedDescription":null,"RelatedBody":"Fixes #16975\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7626349392","Type":"PullRequestEvent","CreatedAt":"2018-05-04T02:50:01","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23693","RelatedDescription":"Closed pull request \"\"Generate method\" refactoring enabled if method name is equal to imported type.\" (#23693) at dotnet/roslyn","RelatedBody":"Fixes #16975\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7626343275","Type":"PullRequestEvent","CreatedAt":"2018-05-04T02:47:05","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26603","RelatedDescription":"Merged pull request \"Empty C# statement has no side-effects\" (#26603) at dotnet/roslyn","RelatedBody":"Fixes #4729\r\n\r\n@dotnet/roslyn-compiler May I please have a couple of reviews of this one-line bug fix?\r\n"},{"Id":"7626343268","Type":"IssuesEvent","CreatedAt":"2018-05-04T02:47:05","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/4729","RelatedDescription":"Closed issue \"Empty statement \";\" suppresses try-catch-finally optimization in some circumstances\" (#4729) at dotnet/roslyn","RelatedBody":"In https://github.com/dotnet/roslyn/pull/4569/files#r37368440 @AlekseyTs noted that we incorrectly treat a \"no-op\" statement as having side-effects. In the context where the problem occurs, that has the effect of sometimes suppressing the optimization that allows us to elide empty finally blocks, or elide catch blocks when the try block is empty. See `case BoundKind.NoOpStatement` below, which should `return false`.\n\n``` cs\n        /// <summary>\n        /// Is there any code to execute in the given statement that could have side-effects,\n        /// such as throwing an exception? This implementation is conserviative, in the sense\n        /// that it may return true when the statement actually may have no side effects.\n        /// </summary>\n        private static bool HasSideEffects(BoundStatement statement)\n        {\n            if (statement == null) return false;\n            switch (statement.Kind)\n            {\n                case BoundKind.NoOpStatement:\n                    return true;\n                case BoundKind.Block:\n                    {\n                        var block = (BoundBlock)statement;\n                        foreach (var stmt in block.Statements)\n                        {\n```\n"},{"Id":"7626320702","Type":"PullRequestEvent","CreatedAt":"2018-05-04T02:36:55","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26622","RelatedDescription":"Opened pull request \"Add nullable annotations to MSBuildTask project\" (#26622) at dotnet/roslyn","RelatedBody":"I encountered a couple of minor issues so far:\r\n- https://github.com/dotnet/roslyn/issues/26621 (Need annotation for nullable property with non-nullable setter)\r\n- https://github.com/dotnet/roslyn/issues/26618 (Adding `!` fails to suppress warning)\r\n- https://github.com/dotnet/roslyn/issues/26614 (Async method with nullable return type can return null)\r\n- it would be useful to have tooling to list and review all public APIs, as well as all API this project depends on (to determine whether they need annotations, rather than oblivious)\r\n- issue with sourced linked into multiple projects\r\n\r\n@cston @dotnet/roslyn-compiler for review. Thanks"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7625927511","Type":"IssuesEvent","CreatedAt":"2018-05-03T23:50:24","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5773","RelatedDescription":"Opened issue \"Improve WebAssembly test output\" (#5773) at dotnet/corert","RelatedBody":"The WebAssembly test at https://github.com/dotnet/corert/blob/master/tests/src/Simple/HelloWasm/Program.cs currently only prints for tests that pass and always returns a success result (100). This should be refactored to print whether each test passes or fails and return a non-success result if a test fails. That will improve the likelihood of catching bugs during builds and make the output more readable."},{"Id":"7625891237","Type":"IssuesEvent","CreatedAt":"2018-05-03T23:37:13","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4515","RelatedDescription":"Closed issue \"Implement callvirt opcode correctly\" (#4515) at dotnet/corert","RelatedBody":"Currently, the WebAssembly importer treats call and callvirt identically, but there are two important differences:\r\n1. callvirt should check the ```this``` parameter and throw a NullReferenceException if it's null (or trap if exception handling doesn't work yet).\r\n2. callvirt should dispatch virtual methods. The runtime includes some of the dispatch logic, but some probably needs to be handled in codegen as well.\r\n\r\ncallvirt should be handled in:\r\nhttps://github.com/dotnet/corert/blob/e6d0a9398e3d8fc83d047cccda302ed13610f190/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L528\r\n\r\nDepends on #4505 since this involves calls into the runtime."},{"Id":"7621222408","Type":"IssuesEvent","CreatedAt":"2018-05-03T07:43:57","Actor":"kbaladurin","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5635","RelatedDescription":"Closed issue \"[Linux/ARM] Breakpoints in managed code doesn't work properly\" (#5635) at dotnet/corert","RelatedBody":"Breakpoints in managed code didn't work properly in gdb and lldb on arm. They break program execution (lead to sigsegves, sigbuses and freezes). The reason of such behavior is that debuggers cannot determine which instruction set is used (arm/thumb) and assumes that it's arm. So debuggers use arm breakpoint opcode for thumb code.\r\n\r\ngdb and lldb uses different approaches to determine instruction set. gdb uses mapping symbols to determine type of data (`$a`/`$t` - arm/thumb code, `$d` - data). As objwriter uses `MCStreamer::EmitBytes` method to emit compiled managed code, this code is marked as data using `$d` mapping symbol that confuses gdb. Emitting correct mapping symbols for managed code resolves this problem: https://github.com/dotnet/corert/pull/5634.\r\n\r\nlldb uses mapping symbols to determine instruction set only if the address's class is the code class (`eAddressClassCode`). debugger gets address's class using [`ObjectFile::GetAddressClass`](https://github.com/llvm-mirror/lldb/blob/master/source/Symbol/ObjectFile.cpp#L317):\r\n```c++\r\nAddressClass ObjectFile::GetAddressClass(addr_t file_addr) {\r\n  Symtab *symtab = GetSymtab();\r\n  if (symtab) {\r\n    Symbol *symbol = symtab->FindSymbolContainingFileAddress(file_addr);\r\n    if (symbol) {\r\n      if (symbol->ValueIsAddress()) {\r\n        const SectionSP section_sp(symbol->GetAddressRef().GetSection());\r\n        if (section_sp) {\r\n          const SectionType section_type = section_sp->GetType();\r\n          switch (section_type) {\r\n          case eSectionTypeInvalid:\r\n            return eAddressClassUnknown;\r\n          case eSectionTypeCode:\r\n            return eAddressClassCode;\r\n          case eSectionTypeContainer:\r\n            return eAddressClassUnknown;\r\n          ...\r\n          case eSectionTypeAbsoluteAddress:\r\n            // In case of absolute sections decide the address class based on\r\n            // the symbol\r\n            // type because the section type isn't specify if it is a code or a\r\n            // data\r\n            // section.\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      const SymbolType symbol_type = symbol->GetType();\r\n      switch (symbol_type) {\r\n      case eSymbolTypeAny:\r\n        return eAddressClassUnknown;\r\n      ...\r\n      case eSymbolTypeReExported:\r\n        return eAddressClassRuntime;\r\n      }\r\n    }\r\n  }\r\n  return eAddressClassUnknown;\r\n}\r\n```\r\nIn our case `ObjectFile::GetAddressClass` returns `eAddressClassCode` only if the corresponding section is the code section (has `eSectionTypeCode` type). lldb determines section type based on its name (there is exception for kalimba toolchain) in [`ObjectFileELF::CreateSections`](https://github.com/llvm-mirror/lldb/blob/master/source/Plugins/ObjectFile/ELF/ObjectFileELF.cpp#L1773):\r\n```c++\r\nvoid ObjectFileELF::CreateSections(SectionList &unified_section_list) {\r\n      ...\r\n      \r\n      static ConstString g_sect_name_text(\".text\");\r\n      \r\n      ...\r\n\r\n      SectionType sect_type = eSectionTypeOther;\r\n\r\n      bool is_thread_specific = false;\r\n\r\n      if (name == g_sect_name_text)\r\n        sect_type = eSectionTypeCode;\r\n      else if (name == g_sect_name_data)\r\n        sect_type = eSectionTypeData;\r\n      else if (name == g_sect_name_bss)\r\n        sect_type = eSectionTypeZeroFill;\r\n      else if (name == g_sect_name_tdata) {\r\n        sect_type = eSectionTypeData;\r\n        is_thread_specific = true;\r\n      } else if (name == g_sect_name_tbss) {\r\n        sect_type = eSectionTypeZeroFill;\r\n        is_thread_specific = true;\r\n      }\r\n      \r\n      ...\r\n\r\n      if (eSectionTypeOther == sect_type) {\r\n        // the kalimba toolchain assumes that ELF section names are free-form.\r\n        // It does\r\n        // support linkscripts which (can) give rise to various arbitrarily\r\n        // named\r\n        // sections being \"Code\" or \"Data\".\r\n        sect_type = kalimbaSectionType(m_header, header);\r\n      }\r\n\r\n      ...\r\n}\r\n```\r\nIn our case compiled managed code is emitted to `__managedcode` section that is not code section for lldb (this section has `eSectionTypeOther` type) and all addresses that refers to this section has unknown class. So lldb assumes that this section contain arm code when we try to set breakpoint.\r\n\r\nIs it necessary to have separate section for managed code?\r\n\r\nThank you!"},{"Id":"7620467157","Type":"PullRequestEvent","CreatedAt":"2018-05-03T02:57:25","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5771","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5771) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7620388068","Type":"PullRequestEvent","CreatedAt":"2018-05-03T02:23:49","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5771","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5771) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7626011659","Type":"PullRequestEvent","CreatedAt":"2018-05-04T00:22:27","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2187","RelatedDescription":"Merged pull request \"LOC CHECKIN | dotnet/sdk master | 20180426\" (#2187) at dotnet/sdk","RelatedBody":null},{"Id":"7625966902","Type":"PullRequestEvent","CreatedAt":"2018-05-04T00:04:50","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2216","RelatedDescription":"Opened pull request \"Merge release/2.1.3xx to release/2.1.4xx\" (#2216) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into release/2.1.4xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-release/2.1.4xx\ngit reset --hard upstream/release/2.1.4xx\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-release/2.1.4xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7625748067","Type":"IssuesEvent","CreatedAt":"2018-05-03T22:49:25","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2186","RelatedDescription":"Closed issue \"Could not load file or assembly 'netstandard, Version=2.0.0.0\" (#2186) at dotnet/sdk","RelatedBody":"Not sure if it's alright to ask this question here, but...\r\n\r\nI'm getting the following error after deploying a .net framework 4.5.2 web api.\r\n\r\n`Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.`\r\n\r\nThis doesn't happen on all the endpoints, just one, where I'm using Microsoft.Xrm.Sdk. The thing is that it just started to happen, didn't update any packages. And worst, it doesn't happen locally, when debugging, even if building with release mode.\r\n\r\nI don't have much controll over the server where I'm deploying, but I know it's IIS 8.5 running on a 64bit Windows Server Core 2012 R2/1.2.0 (aws). The machine hasn't change its configuration when this problem started to happen.\r\n\r\nThis is the full stacktrace:\r\n\r\n```\r\nat System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)\r\n   at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type)\r\n   at Microsoft.Xrm.Sdk.IOrganizationService.Execute(OrganizationRequest request)\r\n   at Microsoft.Xrm.Sdk.Client.OrganizationServiceProxy.ExecuteCore(OrganizationRequest request)\r\n   at Microsoft.Xrm.Sdk.Client.OrganizationServiceContext.Execute(OrganizationRequest request)\r\n   at Microsoft.Xrm.Sdk.Linq.QueryProvider.RetrieveEntityCollection(OrganizationRequest request, NavigationSource source)\r\n   at Microsoft.Xrm.Sdk.Linq.QueryProvider.Execute(QueryExpression qe, Boolean throwIfSequenceIsEmpty, Boolean throwIfSequenceNotSingle, Projection projection, NavigationSource source, List`1 linkLookups, String& pagingCookie, Boolean& moreRecords)\r\n   at Microsoft.Xrm.Sdk.Linq.QueryProvider.Execute[TElement](QueryExpression qe, Boolean throwIfSequenceIsEmpty, Boolean throwIfSequenceNotSingle, Projection projection, NavigationSource source, List`1 linkLookups)\r\n   at Microsoft.Xrm.Sdk.Linq.QueryProvider.Execute[TElement](Expression expression)\r\n   at Microsoft.Xrm.Sdk.Linq.QueryProvider.System.Linq.IQueryProvider.Execute[TResult](Expression expression)\r\n   at MyCrmLibrary.Crm.GetUser(Guid id)\r\n   at MyLibrary.Services.User.UserService.<>c__DisplayClass8_0.<GetUser>b__2()\r\n   at System.Threading.Tasks.Task`1.InnerInvoke()\r\n   at System.Threading.Tasks.Task.Execute()--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at MyLibrary.Services.User.UserService.<GetUser> d__8.MoveNext()--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at MyApi.Controllers.MyController.<GetUser>d__19.MoveNext() in C:\\\\myapi\\\\Controllers\\\\MyController.cs:line 143--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.TaskHelpersExtensions.<CastToObject>d__3`1.MoveNext()--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Web.Http.Controllers.ApiControllerActionInvoker.<InvokeActionAsyncCore>d__0.MoveNext()--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at System.Web.Http.Filters.ActionFilterAttribute.<CallOnActionExecutedAsync>d__5.MoveNext()--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Web.Http.Filters.ActionFilterAttribute.<CallOnActionExecutedAsync>d__5.MoveNext()--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Web.Http.Filters.ActionFilterAttribute.<ExecuteActionFilterAsyncCore>d__0.MoveNext()--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at System.Web.Http.Filters.ActionFilterAttribute.<CallOnActionExecutedAsync>d__5.MoveNext()--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Web.Http.Filters.ActionFilterAttribute.<CallOnActionExecutedAsync>d__5.MoveNext()--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Web.Http.Filters.ActionFilterAttribute.<ExecuteActionFilterAsyncCore>d__0.MoveNext()--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at System.Web.Http.Filters.ActionFilterAttribute.<CallOnActionExecutedAsync>d__5.MoveNext()--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Web.Http.Filters.ActionFilterAttribute.<CallOnActionExecutedAsync>d__5.MoveNext()--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Web.Http.Filters.ActionFilterAttribute.<ExecuteActionFilterAsyncCore>d__0.MoveNext()--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at System.Web.Http.Controllers.ActionFilterResult.<ExecuteAsync>d__2.MoveNext()--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at System.Web.Http.Controllers.ExceptionFilterResult.<ExecuteAsync>d__0.MoveNext()\r\n```\r\nand the inner exception\r\n\r\n```\r\nat System.ModuleHandle.ResolveType(RuntimeModule module, Int32 typeToken, IntPtr* typeInstArgs, Int32 typeInstCount, IntPtr* methodInstArgs, Int32 methodInstCount, ObjectHandleOnStack type)\r\n   at System.ModuleHandle.ResolveTypeHandleInternal(RuntimeModule module, Int32 typeToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext)\r\n   at System.Reflection.RuntimeModule.ResolveType(Int32 metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments)\r\n   at System.Reflection.CustomAttribute.FilterCustomAttributeRecord(CustomAttributeRecord caRecord, MetadataImport scope, Assembly& lastAptcaOkAssembly, RuntimeModule decoratedModule, MetadataToken decoratedToken, RuntimeType attributeFilterType, Boolean mustBeInheritable, Object[] attributes, IList derivedAttributes, RuntimeType& attributeType, IRuntimeMethodInfo& ctor, Boolean& ctorHasParameters, Boolean& isVarArg)\r\n   at System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeModule decoratedModule, Int32 decoratedMetadataToken, Int32 pcaCount, RuntimeType attributeFilterType, Boolean mustBeInheritable, IList derivedAttributes, Boolean isDecoratedTargetSecurityTransparent)\r\n   at System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeAssembly assembly, RuntimeType caType)\r\n   at Microsoft.Xrm.Sdk.KnownProxyTypesProvider.LoadKnownTypes(Assembly assembly)\r\n   at Microsoft.Xrm.Sdk.KnownProxyTypesProvider.RegisterAssembly(Assembly assembly)\r\n   at Microsoft.Xrm.Sdk.KnownProxyTypesProvider.InitializeLoadedAssemblies()\r\n   at Microsoft.Xrm.Sdk.KnownProxyTypesProvider.GetInstance(Boolean supportIndividualAssemblies)\r\n   at Microsoft.Xrm.Sdk.ProxySerializationSurrogate.System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(Object obj, Type targetType)\r\n   at System.Runtime.Serialization.DataContractSerializer.SurrogateToDataContractType(IDataContractSurrogate dataContractSurrogate, Object oldObj, Type surrogatedDeclaredType, Type& objType)\r\n   at System.Runtime.Serialization.DataContractSerializer.InternalWriteObjectContent(XmlWriterDelegator writer, Object graph, DataContractResolver dataContractResolver)\r\n   at System.Runtime.Serialization.DataContractSerializer.InternalWriteObject(XmlWriterDelegator writer, Object graph, DataContractResolver dataContractResolver)\r\n   at System.Runtime.Serialization.XmlObjectSerializer.WriteObjectHandleExceptions(XmlWriterDelegator writer, Object graph, DataContractResolver dataContractResolver)\r\n   at System.Runtime.Serialization.XmlObjectSerializer.WriteObject(XmlDictionaryWriter writer, Object graph)\r\n   at System.ServiceModel.Dispatcher.DataContractSerializerOperationFormatter.SerializeParameterPart(XmlDictionaryWriter writer, PartInfo part, Object graph)\r\n   at System.ServiceModel.Dispatcher.DataContractSerializerOperationFormatter.SerializeParameter(XmlDictionaryWriter writer, PartInfo part, Object graph)\r\n   at System.ServiceModel.Dispatcher.DataContractSerializerOperationFormatter.SerializeParameters(XmlDictionaryWriter writer, PartInfo[] parts, Object[] parameters)\r\n   at System.ServiceModel.Dispatcher.DataContractSerializerOperationFormatter.SerializeBody(XmlDictionaryWriter writer, MessageVersion version, String action, MessageDescription messageDescription, Object returnValue, Object[] parameters, Boolean isRequest)\r\n   at System.ServiceModel.Dispatcher.OperationFormatter.SerializeBodyContents(XmlDictionaryWriter writer, MessageVersion version, Object[] parameters, Object returnValue, Boolean isRequest)\r\n   at System.ServiceModel.Dispatcher.OperationFormatter.OperationFormatterMessage.OperationFormatterBodyWriter.OnWriteBodyContents(XmlDictionaryWriter writer)\r\n   at System.ServiceModel.Channels.BodyWriterMessage.OnWriteBodyContents(XmlDictionaryWriter writer)\r\n   at System.ServiceModel.Security.SecurityAppliedMessage.WriteBodyToSignThenEncryptWithFragments(Stream stream, Boolean includeComments, String[] inclusivePrefixes, EncryptedData encryptedData, SymmetricAlgorithm algorithm, XmlDictionaryWriter writer)\r\n   at System.ServiceModel.Security.WSSecurityOneDotZeroSendSecurityHeader.ApplyBodySecurity(XmlDictionaryWriter writer, IPrefixGenerator prefixGenerator)\r\n   at System.ServiceModel.Security.SecurityAppliedMessage.OnWriteMessage(XmlDictionaryWriter writer)\r\n   at System.ServiceModel.Channels.BufferedMessageWriter.WriteMessage(Message message, BufferManager bufferManager, Int32 initialOffset, Int32 maxSizeQuota)\r\n   at System.ServiceModel.Channels.TextMessageEncoderFactory.TextMessageEncoder.WriteMessage(Message message, Int32 maxMessageSize, BufferManager bufferManager, Int32 messageOffset)\r\n   at System.ServiceModel.Channels.HttpOutput.SerializeBufferedMessage(Message message, Boolean shouldRecycleBuffer)\r\n   at System.ServiceModel.Channels.HttpOutput.Send(TimeSpan timeout)\r\n   at System.ServiceModel.Channels.HttpChannelFactory`1.HttpRequestChannel.HttpChannelRequest.SendRequest(Message message, TimeSpan timeout)\r\n   at System.ServiceModel.Channels.RequestChannel.Request(Message message, TimeSpan timeout)\r\n   at System.ServiceModel.Channels.SecurityChannelFactory`1.SecurityRequestChannel.Request(Message message, TimeSpan timeout)\r\n   at System.ServiceModel.Dispatcher.RequestChannelBinder.Request(Message message, TimeSpan timeout)\r\n   at System.ServiceModel.Channels.ServiceChannel.Call(String action, Boolean oneway, ProxyOperationRuntime operation, Object[] ins, Object[] outs, TimeSpan timeout)\r\n   at System.ServiceModel.Channels.ServiceChannelProxy.InvokeService(IMethodCallMessage methodCall, ProxyOperationRuntime operation)\r\n   at System.ServiceModel.Channels.ServiceChannelProxy.Invoke(IMessage message)\r\n```\r\n\r\nAny help would be much appreciated... "},{"Id":"7625718242","Type":"IssuesEvent","CreatedAt":"2018-05-03T22:40:14","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2214","RelatedDescription":"Closed issue \"'libhostpolicy.so' required to execute the application was not found\" (#2214) at dotnet/sdk","RelatedBody":"I created an MVC .Net Core 1.1 application. It works on windows and I'd like to run in my raspberry py too.\r\nBut It doesn't work.\r\n\r\n## Environment:\r\n1. VS17 enterprise\r\n2. Mvc .net core 1.1\r\n3. Raspberry pi with Debian 9.4\r\n4. Repo on github\r\n\r\n## Expected behavior\r\nAfter publishing in windows for linux-arm I have pull my repo into raspberry, but when \r\nI run \r\n`dotnet  myapp.dll`\r\nI have the error:\r\n_A fatal error was encountered. The library 'libhostpolicy.so' required to execute the application was not found in [path]_\r\n\r\n## Actual behavior\r\nIt doesn't work and I don't know how to solve"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"991311154747199488","CreatedAt":"2018-05-01T13:39:31+00:00","UserScreenname":"dotnet","Text":"Do you have questions about async and await in C#?  Join @csharpfritz and @billwagner at 10a ET / 7a PT / 14:00 UTC… https://t.co/Sdn4F5XeZ2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":64,"FavoriteCount":20,"RawContent":null},{"Id":"991060228220178432","CreatedAt":"2018-04-30T21:02:26+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.2 https://t.co/Tx658XoEZG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":549,"FavoriteCount":402,"RawContent":null},{"Id":"989532387775205376","CreatedAt":"2018-04-26T15:51:20+00:00","UserScreenname":"dotnet","Text":"Get the Azure Quick Start Guide for .NET Developers https://t.co/ALECzXryjk","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":49,"FavoriteCount":22,"RawContent":null},{"Id":"987375741204508673","CreatedAt":"2018-04-20T17:01:35+00:00","UserScreenname":"dotnet","Text":"Help us plan the future of .NET! https://t.co/R0QoZVvXx4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":125,"FavoriteCount":93,"RawContent":null},{"Id":"986692696507953152","CreatedAt":"2018-04-18T19:47:25+00:00","UserScreenname":"dotnet","Text":"Performance Improvements in .NET Core 2.1 https://t.co/6YMK8P99cZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":250,"FavoriteCount":153,"RawContent":null},{"Id":"986692437211987969","CreatedAt":"2018-04-18T19:46:23+00:00","UserScreenname":"dotnet","Text":"Announcing Visual Studio 2017 15.7 Preview 4 https://t.co/XYIzXNDMhn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":62,"FavoriteCount":44,"RawContent":null},{"Id":"986400394786914304","CreatedAt":"2018-04-18T00:25:55+00:00","UserScreenname":"dotnet","Text":".NET Core April 2018 Update https://t.co/PuT2Jc7GBy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":68,"FavoriteCount":33,"RawContent":null}]}},"RunOn":"2018-05-04T05:30:23.3833228Z","RunDurationInMilliseconds":8106}