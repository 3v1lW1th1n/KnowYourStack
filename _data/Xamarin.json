{"Data":{"Blog":{"FeedItems":[{"Title":"DataBinding Power Moves You May Not Be Using (Yet)","PublishedOn":"2017-10-05T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"DataBinding is a fantastic feature that cleanly decouples your UI from the backing data models while providing the plumbing to move data back and forth as you need. But, are you getting the most out of the Binding features in Xamarin.Forms? Building on our previous Introduction to DataBinding and Advanced Data Binding posts, I’ll show [&#8230;]","Href":"https://blog.xamarin.com/databinding-power-moves-you-may-not-be-using-yet/","RawContent":null},{"Title":"The Solar System with ARKit and F#","PublishedOn":"2017-10-04T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"A few years ago, my colleague Joel Martinez and I wrote a F# program we called “Oculus Thrift” that demonstrated iOS SceneKit in a Google Cardboard stereoscopic viewer. With the recent release of iOS 11, I wanted to see if we could do something similar with ARKit, Apple’s augmented-reality framework. It took just 8 lines [&#8230;]","Href":"https://blog.xamarin.com/the-solar-system-with-arkit-and-f/","RawContent":null},{"Title":"Microcharts: Elegant Cross-Platform Charts for Every App","PublishedOn":"2017-10-03T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post from Alo&#239;s Deniel. Alo&#239;s works at Orange Applications for Business as a Xamarin consultant. You can find him on Twitter at @aloisdeniel and on Github at @aloisdeniel. Displaying charts in mobile apps has always been a great way to offer users a clear overview of numerical data. In my time [&#8230;]","Href":"https://blog.xamarin.com/microcharts-elegant-cross-platform-charts-for-any-app/","RawContent":null},{"Title":"Android Support Library v26 Overview","PublishedOn":"2017-10-02T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Android Support Library v26 brings lots of new features to our Android apps, including fonts as resources, downloadable fonts, emoji support, an autosizing TextView, physics driven animations via Spring and Fling, backwards compatibility for animated vectors, and a slimmer library by increasing the minSdkVersion to 14. If it isn&#8217;t already, the minSdkVersion for all [&#8230;]","Href":"https://blog.xamarin.com/android-support-library-v26-overview/","RawContent":null},{"Title":"Xamarin at Local Developer Events this October","PublishedOn":"2017-09-29T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We&#8217;re at the height of conference season, and that means tons of new and exciting releases, tooling, and updates to talk about with your local developer community! Mobile .NET developer conferences and meetups are the perfect opportunities to learn the latest on Xamarin and related technologies while networking with other developers. Below are just a [&#8230;]","Href":"https://blog.xamarin.com/xamarin-at-local-developer-events-this-october/","RawContent":null},{"Title":"Xamarin.Forms Stable Comes to .NET Standard 2.0","PublishedOn":"2017-09-28T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are thrilled to share our latest stable release of Xamarin.Forms, version 2.4.0. This is our fastest, most stable release ever and we think you’re going to love it! Xamarin.Forms 2.4.0 Highlights You’ll recognize many of these highlights as shared in our public roadmap, in addition to more than 150 bug fixes. .NET Standard [&#8230;]","Href":"https://blog.xamarin.com/xamarin-forms-stable-comes-to-net-standard-2-0/","RawContent":null},{"Title":"Webinar Recording | Exploring UrhoSharp 3D with Xamarin Workbooks Webinar","PublishedOn":"2017-09-27T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Folllow along with Charles Petzold as he builds a 3D app from the ground up with UrhoSharp and Xamarin Workbooks in this webinar recording. UrhoSharp is a powerful, high performance 3D graphics engine suitable for games, animation, and data visualization. Used together, UrhoSharp and Xamarin Workbooks give developers a streamlined way to get started with [&#8230;]","Href":"https://blog.xamarin.com/webinar-recording-exploring-urhosharp-3d-with-xamarin-workbooks-webinar/","RawContent":null},{"Title":"3 Reasons to Try Xamarin Previews in Visual Studio 2017","PublishedOn":"2017-09-26T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Previews are a great way to try the latest-and-greatest in mobile development, from the new Xamarin Live Player that allows you to instantly visualize your XAML-based user interface as you type, to support for new SDKs like Android Oreo or iOS 11. Then arises the great dilemma: how do I try all the awesome stuff [&#8230;]","Href":"https://blog.xamarin.com/3-reasons-to-try-visual-studio-2017-version-15-4-previews/","RawContent":null},{"Title":"ActivityTask: A Helper for Async/Await on Android","PublishedOn":"2017-09-25T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Google I/O, several members of the Xamarin team attended the Architecture Component talk on Android lifecycle (which I recommend you watch). While the solutions presented there are interesting and, in some cases, map to patterns we already have in .NET, it resonated with those of us present because of how those Android lifecycle details [&#8230;]","Href":"https://blog.xamarin.com/activitytask-helper-asyncawait-android/","RawContent":null},{"Title":"Podcast: Android Oreo, iOS 11, and Xamarin.Forms Tips & Tricks","PublishedOn":"2017-09-22T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I cover Xamarin support for Android Oreo and iOS 11, share tips for beating the learning curve with Xamarin.Forms, talk upcoming releases in the pipeline, and more! Be sure to download today&#8217;s episode from your favorite podcasting app. Subscribe or Download Today Keeping up with [&#8230;]","Href":"https://blog.xamarin.com/podcast-android-oreo-ios-11-xamarin-forms-tips-tricks/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"6685225995","Type":"PullRequestEvent","CreatedAt":"2017-10-06T20:59:15","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/922","RelatedDescription":"Closed pull request \"Bump to mono/2017-06/fbc487ff\" (#922) at xamarin/xamarin-android","RelatedBody":"Context: https://bugzilla.xamarin.com/show_bug.cgi?id=59281\r\nContext: https://bugzilla.xamarin.com/show_bug.cgi?id=59364\r\nContext: https://bugzilla.xamarin.com/show_bug.cgi?id=59832"},{"Id":"6685198127","Type":"PullRequestEvent","CreatedAt":"2017-10-06T20:51:49","Actor":"MSylvia","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/923","RelatedDescription":"Opened pull request \"Bump mono to dev15-5-2017-06\" (#923) at xamarin/xamarin-android","RelatedBody":""},{"Id":"6685188102","Type":"PullRequestEvent","CreatedAt":"2017-10-06T20:49:13","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/917","RelatedDescription":"Merged pull request \"[Xamarin.Android.NUnitLite] Improve test name formatting on Jenkins\" (#917) at xamarin/xamarin-android","RelatedBody":"We've been running on-device NUnit tests for quite some time, and\r\n[Jenkins is nice enough to provide a test report][xa668].\r\n\r\n[xa668]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/668/testReport/\r\n\r\nThere's just one small annoyance: the Package name for on-device tests\r\nis `(root)`:\r\n\r\n        # All Tests\r\n        +-----------------------------+-----------+-------+-------+-------+-------+\r\n        | Package                     | Duration  |  Fail |  Skip |  Pass | Total |\r\n        +-----------------------------+-----------+-------+-------+-------+-------+\r\n        | (root)                      | 14 min    |     0 |   814 | 20260 | 21074 |\r\n        | Java.Interop.DynamicTests   | 15 sec    |     0 |     0 |    14 |    14 |\r\n        | ...\r\n\r\nThe reason the for the `(root)` package -- which constitutes all\r\non-device tests -- is due to three interractions:\r\n\r\n 1. [junit-plugin renders `(root)`][junit-root] when the\r\n    `//testcase/@classname` or `//testcase/@name` attribute does\r\n    *not* contain a `.` (period).\r\n\r\n 2. [xunit-plugin's XSLT to convert NUnit2 XML to JUnit XML][xunit-xslt]\r\n    uses `test-suite//results//test-case[1]/@name` to determine the\r\n    assembly name (!).\r\n\r\n    (Half of this XSLT is inexplicable to me. Why is line 39 checking\r\n    to see if `test-suite//results//test-case[1]//@name` ends with\r\n    `)` (close parenthesis)?)\r\n\r\n 3. `Xamarin.Android.NUnitLite`'s NUnit2 XML output never contains any\r\n    `.`s within `//test-case/@name` values.\r\n\r\n    ```xml\r\n    <!-- fragment from TestResult-Mono.Android_Tests.xml -->\r\n    <test-case\r\n        name=\"ApplicationContextIsApp\"\r\n        executed=\"True\"\r\n        result=\"Success\"\r\n        success=\"True\"\r\n        time=\"0.003\"\r\n        asserts=\"2\"\r\n    />\r\n    ```\r\n\r\n[junit-root]: https://github.com/jenkinsci/junit-plugin/blob/2c1655c/src/main/java/hudson/tasks/junit/CaseResult.java#L332-L336\r\n[xunit-xslt]: https://github.com/jenkinsci/xunit-plugin/blob/f122ddd/src/main/resources/org/jenkinsci/plugins/xunit/types/nunit-1.0-to-junit-2.xsl\r\n\r\nCompare to e.g. the NUnit2 XML output that NUnit 3.7's\r\n`nunit3-console.exe` + `format=nunit2` generates -- as produced by\r\n`make run-nunit-tests`:\r\n\r\n```xml\r\n<!-- fragment from TestResult-Java.Interop-Tests.xml -->\r\n<test-case\r\n    name=\"Java.InteropTests.InvokeVirtualFromConstructorTests.ActivationConstructor\"\r\n    executed=\"True\"\r\n    result=\"Success\"\r\n    success=\"True\"\r\n    time=\"0.139\"\r\n    asserts=\"2\"\r\n/>\r\n```\r\n\r\nthe result of passing `Xamrin.Android.NUnitLite` NUnit2 XML through\r\nxunit-plugin's XSLT is:\r\n\r\n```xml\r\n<!-- Fragment from: `xsltproc nunit-1.0-to-junit-2.xsl TestResult-Mono.Android_Tests.xml` -->\r\n<testcase classname=\"ApplicationTest\" name=\"ApplicationContextIsApp\" time=\"0.003\"/>\r\n```\r\n\r\nCompare to NUnit 3.7 output:\r\n\r\n```xml\r\n<!-- Fragment from: `xsltproc nunit-1.0-to-junit-2.xsl TestResult-Java.Interop-Tests.xml.txt -->\r\n<testcase classname=\"Java.InteropTests.InvokeVirtualFromConstructorTests\" name=\"ActivationConstructor\" time=\"0.139\"/\r\n```\r\n\r\nTo get rid of the `(root)` package, I see only one simple way to do\r\nso: Update `Xamarin.Android.NUnitLite`s `NUnit2XmlOutputWriter` so\r\nthat the `//test-case/@name` value *always* contains a `.`.\r\nSpecifically, instead of using `ITestResult.Name`, use\r\n`ITestResult.FullName`.\r\n\r\n*However*, some of our existing tests are in \"funny\" namespaces. For\r\nexample, `Mono.Android-Tests.csproj` contains an\r\n`Android.AppTests.ApplicationTest` fixture. Jenkins Test output also\r\ndoesn't \"care\" about assembly or process boundaries; all \"packages\",\r\nregardless of where they're from, are merged.\r\n\r\nTry to improve on that by not just using `ITestResult.FullName` for\r\nthe `//test-case/@name` value, but *also* use the value of the\r\ncurrently executing Android Package, as per\r\n`Android.App.Application.PackageName`, as an \"assembly-qualified name\"\r\n-like construct.\r\n\r\nThis will hopefully result in a more useful table:\r\n\r\n        # All Tests\r\n        +---------------------------------------+-----------+-------+-------+-------+-------+\r\n        | Package                               | Duration  |  Fail |  Skip |  Pass | Total |\r\n        +---------------------------------------+-----------+-------+-------+-------+-------+\r\n        | Java.Interop.DynamicTests             | 15    sec |     0 |     0 |    14 |    14 |\r\n        | Mono.Android_Tests, Android.AppTests  |  0.18 sec |     0 |     0 |     4 |     4 |\r\n        | ...\r\n\r\nAlternatively, maybe this is a sign we should \"re-namespace\" our\r\nexisting NUnit tests to start with the assembly name..."},{"Id":"6684887410","Type":"PullRequestEvent","CreatedAt":"2017-10-06T19:30:08","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/922","RelatedDescription":"Opened pull request \"Bump to mono/2017-06/fbc487ff\" (#922) at xamarin/xamarin-android","RelatedBody":"Context: https://bugzilla.xamarin.com/show_bug.cgi?id=59281\r\nContext: https://bugzilla.xamarin.com/show_bug.cgi?id=59364\r\nContext: https://bugzilla.xamarin.com/show_bug.cgi?id=59832"},{"Id":"6684886180","Type":"PullRequestEvent","CreatedAt":"2017-10-06T19:29:47","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/921","RelatedDescription":"Opened pull request \"Bump to mono/2017-06/fbc487ff\" (#921) at xamarin/xamarin-android","RelatedBody":"Context: https://bugzilla.xamarin.com/show_bug.cgi?id=59281\r\nContext: https://bugzilla.xamarin.com/show_bug.cgi?id=59364\r\nContext: https://bugzilla.xamarin.com/show_bug.cgi?id=59832"},{"Id":"6684272875","Type":"PullRequestEvent","CreatedAt":"2017-10-06T16:59:17","Actor":"Redth","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/916","RelatedDescription":"Closed pull request \"Generator support for api.xml style java docs for parameter names\" (#916) at xamarin/xamarin-android","RelatedBody":"Adds support to binding projects to make use of `ApiXmlDocPaths` as a project property for including `api.xml` style java docs to be used by `ClassParse` for resolving parameter names.\r\n\r\nThis format is used by Android Support libraries (and eventually Google Play Services / Firebase). \r\n\r\nThis requires https://github.com/xamarin/java.interop/commit/4d6c5a9486827432492b129702fad98df26d5835 \r\n"},{"Id":"6684272284","Type":"PullRequestEvent","CreatedAt":"2017-10-06T16:59:08","Actor":"Redth","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/920","RelatedDescription":"Opened pull request \"Generator support for api.xml style java docs for parameter names\" (#920) at xamarin/xamarin-android","RelatedBody":"Adds support to binding projects to make use of ApiXmlDocPaths as a project property for including api.xml style java docs to be used by ClassParse for resolving parameter names.\r\n\r\nThis format is used by Android Support libraries (and eventually Google Play Services / Firebase).\r\n\r\nThis requires xamarin/java.interop@4d6c5a9\r\n\r\nThis PR supercedes and closes #916.\r\n"},{"Id":"6684112923","Type":"PullRequestEvent","CreatedAt":"2017-10-06T16:20:28","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/918","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Utilities] Wrong error code for obsolete framework\" (#918) at xamarin/xamarin-android","RelatedBody":"Fixes https://bugzilla.xamarin.com/show_bug.cgi?id=59867\r\n\r\nThere is a bug in AndroidVersion. If the frameworkVersion is not\r\nprovided it is left as `null`. But we need to have a valid entry.\r\nIn xamarin-android-tools we use\r\n\r\n\t\"v\"+osVersion;\r\n\r\nto calculate the frameworkVersion."},{"Id":"6683859403","Type":"PullRequestEvent","CreatedAt":"2017-10-06T15:26:27","Actor":"akoeplinger","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/919","RelatedDescription":"Opened pull request \"[build] Bump mxe and add commit sha to AndroidMxeInstallPrefix\" (#919) at xamarin/xamarin-android","RelatedBody":"This ensures that we can revert mxe to an earlier version.\r\n\r\nBackground:\r\n\r\nThe current \"do we need to rebuild <dependency>\" is mostly \"forward-only\". It works properly if you bump forward in time, but if you go _backwards_, it won't rebuild because it's timestamp based.\r\n\r\nFor example: if we bump MXE, it'll rebuild the (cached!) MXE on the build server but if we find that MXE is broken and we need to revert... we can't because what we're reverting to is older than the bump!"},{"Id":"6683113302","Type":"PullRequestEvent","CreatedAt":"2017-10-06T12:52:32","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/918","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Utilities] Wrong error code for obsolete framework\" (#918) at xamarin/xamarin-android","RelatedBody":"Fixes https://bugzilla.xamarin.com/show_bug.cgi?id=59867\r\n\r\nThere is a bug in AndroidVersion. If the frameworkVersion is not\r\nprovided it is left as `null`. But we need to have a valid entry.\r\nIn xamarin-android-tools we use\r\n\r\n\t\"v\"+osVersion;\r\n\r\nto calculate the frameworkVersion."},{"Id":"6681108389","Type":"PullRequestEvent","CreatedAt":"2017-10-06T01:06:40","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/917","RelatedDescription":"Opened pull request \"[Xamarin.Android.NUnitLite] Set `/test-results/@name`\" (#917) at xamarin/xamarin-android","RelatedBody":"We've been running on-device NUnit tests for quite some time, and\r\n[Jenkins is nice enough to provide a test report][xa668].\r\n\r\n[xa668]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android/668/testReport/\r\n\r\nThere's just one small annoyance: the Package name for on-device tests\r\nis `(root)`:\r\n\r\n\t# All Tests\r\n\t+-----------------------------+-----------+-------+-------+-------+-------+\r\n\t| Package                     | Duration  |  Fail |  Skip |  Pass | Total |\r\n\t+-----------------------------+-----------+-------+-------+-------+-------+\r\n\t| (root)                      | 14 min    |     0 |   814 | 20260 | 21074 |\r\n\t| Java.Interop.DynamicTests   | 15 sec    |     0 |     0 |    14 |    14 |\r\n\t| ...\r\n\r\nThe reason the for the `(root)` package -- which constitutes all\r\non-device tests -- is that the `TestResults*.xml` file that we pull\r\noff the device contains no `/test-results/@name` attribute:\r\n\r\n\t<!-- from TestResult-Mono.Android_Tests.xml -->\r\n\t<test-results\r\n\t    name=\"\"\r\n\t    total=\"106\"\r\n\t    errors=\"0\"\r\n\t    failures=\"0\"\r\n\t    not-run=\"1\"\r\n\t    inconclusive=\"0\"\r\n\t    ignored=\"1\"\r\n\t    skipped=\"0\"\r\n\t    invalid=\"0\"\r\n\t    date=\"2017-10-05\"\r\n\t    time=\"16:26:30\">\r\n\r\nMy assumption is that when the Jenkins Test Result formatter\r\nencounters a `/test-results/@name` value which is empty -- as seen\r\nabove -- the `(root)` package name is used. The *other*\r\n`TestResult-*.xml` files we produce have values:\r\n\r\n\t<!-- from TestResult-Java.Interop.Dynamic-Tests.xml -->\r\n\t<test-results\r\n\t    name=\"…/xamarin-android/external/Java.Interop/bin/TestDebug/Java.Interop.Dynamic-Tests.dll\"\r\n\t    total=\"14\"\r\n\t    errors=\"0\"\r\n\t    failures=\"0\"\r\n\t    not-run=\"0\"\r\n\t    inconclusive=\"0\"\r\n\t    ignored=\"0\"\r\n\t    skipped=\"0\"\r\n\t    invalid=\"0\"\r\n\t    date=\"2017-10-05\"\r\n\t    time=\"16:03:39\">\r\n\r\nProvide a value for `/test-results/@name` by using the value of\r\n`Android.App.Application.PackageName`, which is the Android package\r\nname of the currently executing application. This will always be a\r\nnon-empty string, and will hopefully result in a more useful table:\r\n\r\n\t# All Tests\r\n\t+-----------------------------+-----------+-------+-------+-------+-------+\r\n\t| Package                     | Duration  |  Fail |  Skip |  Pass | Total |\r\n\t+-----------------------------+-----------+-------+-------+-------+-------+\r\n\t| Mono.Android_Tests          |  5 min    |     0 |     0 |   106 |   106 |\r\n\t| Java.Interop.DynamicTests   | 15 sec    |     0 |     0 |    14 |    14 |\r\n\t| ..."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"6683885589","Type":"PullRequestEvent","CreatedAt":"2017-10-06T15:31:40","Actor":"MichaelRumpler","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1187","RelatedDescription":"Opened pull request \"[MacOS] make OnElementChanged and OnElementPropertyChanged protected virtual\" (#1187) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nIn Xamarin.Forms.Platform.MacOS the PageRenderer and ScrollViewRenderer did not have the usual protected virtual methods OnElementChanged and OnElementPropertyChanged. They were private and partly wrong named. Therefore users could not inherit from those renderers and use them as every other renderer on every other platform.\r\n\r\n### API Changes ###\r\n\r\nChanged:\r\n - PageRenderer: void OnElementChanged => protected virtual void OnElementChanged\r\n - PageRenderer: void OnHandlePropertyChanged => protected virtual void OnElementPropertyChanged\r\n - ScrollViewRenderer: void OnElementChanged => protected virtual void OnElementChanged\r\n - ScrollViewRenderer: void HandlePropertyChanged => protected virtual void OnElementPropertyChanged\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6680490051","Type":"PullRequestEvent","CreatedAt":"2017-10-05T21:28:59","Actor":"BradChase2011","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1186","RelatedDescription":"Opened pull request \"[UWP]  Fix for UWP crashing on load when compiled with .NET Native fo…\" (#1186) at xamarin/Xamarin.Forms","RelatedBody":"…r the store.\r\n\r\n### Description of Change ###\r\n\r\nUWP will crash when loading anything from the WindowsPlatform classes like Forms.Init.  When compiled for the Microsoft Store, Xamarin.Forms apps with crash immediately.\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60005\r\n\r\n### API Changes ###\r\n\r\nNone.\r\n\r\n### Behavioral Changes ###\r\n\r\nXamarin.Forms apps can now be submitted to the Microsoft Store.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6680444249","Type":"PullRequestEvent","CreatedAt":"2017-10-05T21:17:30","Actor":"BradChase2011","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1185","RelatedDescription":"Opened pull request \"[UWP] Issue where in some weird circumstances(Custom controls) grabbi…\" (#1185) at xamarin/Xamarin.Forms","RelatedBody":"…ng a desired size could cause a null reference exception.\r\n\r\n### Description of Change ###\r\n\r\nAdded a null check in GetDesiredSize() on Control.\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60004\r\n\r\n### API Changes ###\r\n\r\nNone.\r\n\r\n### Behavioral Changes ###\r\n\r\nSmall null check.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6680374904","Type":"PullRequestEvent","CreatedAt":"2017-10-05T21:00:49","Actor":"BradChase2011","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1184","RelatedDescription":"Opened pull request \"[UWP] Fixed issue where Label.FormattedText was crashing.\" (#1184) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nIf a Label.FormattedText line contained a null (say from a binding), UWP would crash.\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60002\r\n\r\n### API Changes ###\r\n\r\nNone.\r\n\r\n### Behavioral Changes ###\r\n\r\nUsing a null in a span of the Label.FormattedText property will now no longer crash UWP.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6680320779","Type":"PullRequestEvent","CreatedAt":"2017-10-05T20:49:00","Actor":"BradChase2011","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1183","RelatedDescription":"Opened pull request \"[UWP] Fixed inconsistency on UWP's DatePicker and the other OS's.\" (#1183) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nChanged the DateTimeOffset on DatePickerRenderer.UWP to create a new date based on an unspecified time zone.\r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60001\r\n\r\n### API Changes ###\r\n\r\nNone.\r\n\r\n### Behavioral Changes ###\r\n\r\nThe DatePicker on UWP should show the same value as the other OS's.  There may be other ways to fix this issue, maybe changing the other OS's to match UWP?  Or another way to reset the DateTimeKind.  This worked for us in a jiffy.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6679527779","Type":"PullRequestEvent","CreatedAt":"2017-10-05T17:50:36","Actor":"adamivancza","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1182","RelatedDescription":"Opened pull request \"CGColor creation fixed on iOS\" (#1182) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nI've replaced the ToCGColor extension function so developers can get the desired color on controls that uses CGColor, for example Frame. No special tests needed since it depends on existing methods.\r\n\r\n### Bugs Fixed ###\r\n\r\nCan't find any specific bug report so far, but here is a library that shows the problem: https://github.com/GalaxiaGuy/xamarin-forms-frame-color\r\n\r\n### API Changes ###\r\n\r\nNone.\r\n\r\n### Behavioral Changes ###\r\n\r\nNone.\r\n\r\n### PR Checklist ###\r\n\r\n- [-] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"6689768821","Type":"PullRequestEvent","CreatedAt":"2017-10-09T05:17:49","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2865","RelatedDescription":"Opened pull request \"Add support for optionally explaining why inapplicable certificates are not applicable. Partially fixes #58251.\" (#2865) at xamarin/xamarin-macios","RelatedBody":"This also requires a Xamarin.MacDev bump:\n\nxamarin/Xamarin.MacDev@f83f84d Add support for optionally explaining why inapplicable provisioning profiles are not applicable. Partially fixes #58251. (#16)\nxamarin/Xamarin.MacDev@d60d25b Added new iPhone X icon sizes\n\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=58251"},{"Id":"6685248316","Type":"PullRequestEvent","CreatedAt":"2017-10-06T21:05:03","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2864","RelatedDescription":"Opened pull request \"Fix AppleTLS SecTrustResult by cherry picking fix + bump mono d15-4\" (#2864) at xamarin/xamarin-macios","RelatedBody":"https://github.com/xamarin/xamarin-macios/pull/2850 for XM"},{"Id":"6685173167","Type":"PullRequestEvent","CreatedAt":"2017-10-06T20:45:22","Actor":"MSylvia","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2863","RelatedDescription":"Opened pull request \"Bump mono to dev15-5-2017-06\" (#2863) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6685084669","Type":"PullRequestEvent","CreatedAt":"2017-10-06T20:21:41","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2862","RelatedDescription":"Opened pull request \"[Make.config] Bump Visual Studio version to 7.4.99\" (#2862) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"6684777696","Type":"PullRequestEvent","CreatedAt":"2017-10-06T19:02:15","Actor":"jstedfast","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2861","RelatedDescription":"Opened pull request \"[msbuild] Fixed string formatting error\" (#2861) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6684754981","Type":"PullRequestEvent","CreatedAt":"2017-10-06T18:56:52","Actor":"Aguilex","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2802","RelatedDescription":"Merged pull request \"Bump maccore to bring doc fixes to be able to build packages for d15-5\" (#2802) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6684531146","Type":"PullRequestEvent","CreatedAt":"2017-10-06T18:02:45","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2852","RelatedDescription":"Merged pull request \"[AudioToolbox] Free the right GCHandle when failing to create an InputAudioQueue. Fixes #59911.\" (#2852) at xamarin/xamarin-macios","RelatedBody":"When we fail to create an InputAudioQueue, we need to free the local GCHandle\nwe previously created, not the instance GCHandle where we'd put the local\nGCHandle in case of success.\n\nThis fixes bug #59911 to throw the correct (invalid parameter) exception (and\nnot leak the local GCHandle either).\n\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=59911"},{"Id":"6684524085","Type":"PullRequestEvent","CreatedAt":"2017-10-06T18:01:00","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2857","RelatedDescription":"Merged pull request \"[UIKit] Don't construct new objects in UIDragDropSessionExtensions.LoadObjects if what we have is usable. Fixes #59944.\" (#2857) at xamarin/xamarin-macios","RelatedBody":"We might get an array of instances that are of the right type; in that case\nuse those instances instead of creating new ones.\n\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=59944"},{"Id":"6684353908","Type":"PullRequestEvent","CreatedAt":"2017-10-06T17:19:16","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2860","RelatedDescription":"Opened pull request \"[xharness] Try to disable memory limits when running tests on device.\" (#2860) at xamarin/xamarin-macios","RelatedBody":"This requires a maccore bump to get an updated mlaunch."},{"Id":"6684184709","Type":"PullRequestEvent","CreatedAt":"2017-10-06T16:37:27","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2859","RelatedDescription":"Opened pull request \"[VideoToolbox] Adds bindings from Xcode 9 Beta 1 to Stable\" (#2859) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"6683816156","Type":"PullRequestEvent","CreatedAt":"2017-10-06T15:17:42","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2854","RelatedDescription":"Merged pull request \"[monotouch-test] The media library permission API is only available in iOS 9.3+. Fixes #59995.\" (#2854) at xamarin/xamarin-macios","RelatedBody":"The media library permission API (to either query the permission status or ask\nfor permission) was introduced in iOS 9.3, so we need to make sure to not call\nit on earlier iOS versions.\n\nIf running on older iOS versions, then just don't do anything (unless we're\nasked to ignore tests that put up permission dialogs, in which case ignore the\ntest, since that's the safe approach).\n\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=59995"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"917203711692337152","CreatedAt":"2017-10-09T01:43:00+00:00","UserScreenname":"xamarinhq","Text":"Xamarin's @nishanil shows you how to add #facetracking and live recognition to your Android app: https://t.co/5R7K2hNJXY","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":11,"FavoriteCount":7,"RawContent":null},{"Id":"916789236879290370","CreatedAt":"2017-10-07T22:16:01+00:00","UserScreenname":"xamarinhq","Text":"Sign up for our FREE event in Denver (10/10) or McLean (10/12) where you'll learn how to build a #XamarinForms app:… https://t.co/frCmLy2kS5","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"916409733246017536","CreatedAt":"2017-10-06T21:08:01+00:00","UserScreenname":"xamarinhq","Text":"Get excited! https://t.co/0m45zTRqFK","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":34,"FavoriteCount":16,"RawContent":null},{"Id":"916329451205595137","CreatedAt":"2017-10-06T15:49:00+00:00","UserScreenname":"xamarinhq","Text":"Build a sample enterprise app with the Microsoft Authentication Library and #MicrosoftGraph APIs: https://t.co/d9Rlu92TWT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":28,"RawContent":null},{"Id":"916052505406197760","CreatedAt":"2017-10-05T21:28:31+00:00","UserScreenname":"xamarinhq","Text":"DataBinding Power Moves You May Not Be Using (Yet), with @davidortinau: https://t.co/VpucH7m8z9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":28,"RawContent":null},{"Id":"915970088846659584","CreatedAt":"2017-10-05T16:01:01+00:00","UserScreenname":"xamarinhq","Text":"Upgrade to #XamarinForms Stable release 2.4.0 with .NET Standard 2.0 support today! Learn more about this release:… https://t.co/Ku71DbGybm","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":89,"FavoriteCount":66,"RawContent":null},{"Id":"915688986986901504","CreatedAt":"2017-10-04T21:24:01+00:00","UserScreenname":"xamarinhq","Text":"#Xamarin's @lobrien explores the solar system with #ARKit and F#: https://t.co/0UXY2Lk1XB https://t.co/QclUHc5QGx","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":35,"FavoriteCount":26,"RawContent":null},{"Id":"915603919925125121","CreatedAt":"2017-10-04T15:46:00+00:00","UserScreenname":"xamarinhq","Text":"ICYMI, check out our webinar recording on using UrhoSharp 3D and #Xamarin Workbooks to add 3D animation to your app: https://t.co/AG37mw39QS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":20,"FavoriteCount":6,"RawContent":null},{"Id":"915295800825204736","CreatedAt":"2017-10-03T19:21:38+00:00","UserScreenname":"xamarinhq","Text":"Add beautiful charts to ANY app with #Microcharts in today's post from guest blogger @aloisdeniel :… https://t.co/Gl1XMS0UDG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":212,"FavoriteCount":84,"RawContent":null},{"Id":"915249837368627205","CreatedAt":"2017-10-03T16:19:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to embed any #XamarinForms ContentPage into your #Xamarin iOS and Android projects: https://t.co/U3QvCAOeFf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":33,"FavoriteCount":30,"RawContent":null},{"Id":"914940829604679681","CreatedAt":"2017-10-02T19:51:07+00:00","UserScreenname":"xamarinhq","Text":"Add emoji support, physics driven animations, and more to your #Xamarin apps with Android Support Library v26:… https://t.co/iM0N4411PQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":66,"FavoriteCount":35,"RawContent":null},{"Id":"914883429514215426","CreatedAt":"2017-10-02T16:03:01+00:00","UserScreenname":"xamarinhq","Text":"Join us for a FREE event in Denver or McLean to build, test, &amp; distribute a #XamarinForms app to supply a Mars crew… https://t.co/vJ9KA9FPmZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":24,"FavoriteCount":8,"RawContent":null},{"Id":"914685619191808000","CreatedAt":"2017-10-02T02:57:00+00:00","UserScreenname":"xamarinhq","Text":"#XamarinDevDays is coming to a town near you! Learn how to build, test, and connect native apps with #Xamarin: https://t.co/Ytw07Fr9eL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":31,"FavoriteCount":9,"RawContent":null},{"Id":"914295800875945984","CreatedAt":"2017-10-01T01:08:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to set up and configure an #Azure Notification Hub for your #Xamarin.iOS app: https://t.co/GJAQDvFyAl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":60,"FavoriteCount":32,"RawContent":null},{"Id":"913848491146977282","CreatedAt":"2017-09-29T19:30:33+00:00","UserScreenname":"xamarinhq","Text":"Find a #Xamarin event near you this October: https://t.co/5rVXaUkyTD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":24,"FavoriteCount":9,"RawContent":null},{"Id":"913793742737375232","CreatedAt":"2017-09-29T15:53:00+00:00","UserScreenname":"xamarinhq","Text":"5 ways to boost a #XamarinForms app's start up time: https://t.co/OqbHBRux5G","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":60,"FavoriteCount":24,"RawContent":null},{"Id":"913493122902056960","CreatedAt":"2017-09-28T19:58:27+00:00","UserScreenname":"xamarinhq","Text":"#XamarinForms Stable comes to #dotNET Standard 2.0! Details: https://t.co/uLZzFJNACa https://t.co/UuJSdo8LRi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":160,"FavoriteCount":92,"RawContent":null},{"Id":"913433871622041600","CreatedAt":"2017-09-28T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to provision a new iOS device and app in five minutes using #VS4Mac and the open source project fastlane: https://t.co/wNcfcCJn1v","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":20,"RawContent":null},{"Id":"913112376391733248","CreatedAt":"2017-09-27T18:45:29+00:00","UserScreenname":"xamarinhq","Text":"Add 3D to your app with our webinar recording from Charles Petzold on using UrhoSharp 3D with #Xamarin Workbooks: https://t.co/AG37mw39QS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":27,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2017-10-09T05:30:35.613774Z","RunDurationInMilliseconds":4243}