{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11426296480","Type":"IssuesEvent","CreatedAt":"2020-02-03T21:37:49","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7821","RelatedDescription":"Closed issue \"[2020-01-27] Deployment\" (#7821) at NuGet/NuGetGallery","RelatedBody":"# NuGetGallery\r\n\r\n* [x] Merge dev to master https://github.com/NuGet/NuGetGallery/pull/7818\r\n* [ ] Deploy [Release#56193](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=563193)\r\n    * [ ] DEV\r\n    * [X] INT\r\n    * [x] PROD\r\n\r\nChanges:\r\n* @loic-sharma Make deprecation reasons have consistent punctuation (#7812)\r\n* @loic-sharma Improve the display package page's performance (#7795)\r\n* @skofman1 Reject packages with duplicate dependency groups (#7814)"},{"Id":"11425580289","Type":"PullRequestEvent","CreatedAt":"2020-02-03T20:07:25","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7831","RelatedDescription":"Merged pull request \"Format package URLs in descriptions\" (#7831) at NuGet/NuGetGallery","RelatedBody":"Just a suggestion. \r\n\r\nCurrently package links in descriptions look like this:\r\n\r\n![image](https://user-images.githubusercontent.com/1697911/73567108-83d78700-441a-11ea-988a-ad0a8161e951.png)\r\n\r\nWhat if we did something similar to what github does with issue links and formatted them with a shorter text:\r\n\r\n![image](https://user-images.githubusercontent.com/1697911/73567252-d87b0200-441a-11ea-9959-f01f7fa09db3.png)\r\n\r\nCurrent regex is relatively strict to avoid any other links masquerading as nuget ones.\r\n"},{"Id":"11412455225","Type":"PullRequestEvent","CreatedAt":"2020-02-01T13:19:35","Actor":"Krzysztof-Cieslak","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7832","RelatedDescription":"Opened pull request \"Add FuGet link\" (#7832) at NuGet/NuGetGallery","RelatedBody":"FuGet is a NuGet package browser combined with an API browser. It's a really useful tool for .Net developers and it would be good to expose it directly from the package page. It enables developers to inspect content of NuGet packages, the API of packages, and even API diffs between different versions of the package. Here's example page - https://www.fuget.org/packages/FSharp.Core \r\n\r\nThe PR adds link to FuGet page for the current package in the Info section of the page. "}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11428475182","Type":"IssuesEvent","CreatedAt":"2020-02-04T04:44:05","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9132","RelatedDescription":"Closed issue \"PackageReference defined in .props file not appearing in project.assets.json when using dotnet restore\" (#9132) at NuGet/Home","RelatedBody":"I have a `tools.props` file which contains some `PackageReference`'s. When I import the file into a `.csproj` either via `<Import Project=\"tools.props\" />` or via a NuGet package where to 'tools.props` file in packed into the `build` folder, then all dependencies defined in the `.props` are not appearing in `project.assets.json`.\r\n\r\nThe funny thing is, that when using VS 2019 and build it, then everything works and `project.assets.json` created correctly.\r\n\r\nBut when using `dotnet restore` command or `msbuild /t:restore` the dependency are not it `project.assets.json`.\r\n\r\n## tools.props\r\n\r\n```\r\n<Project>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"trx2junit\" Version=\"[1.3.0]\" PrivateAssets=\"All\" ExcludeAssets=\"All\" />\r\n    <PackageReference Include=\"GitVersion.Tool\" Version=\"[5.1.1]\" PrivateAssets=\"All\" ExcludeAssets=\"All\" />\r\n    <PackageReference Include=\"dotnet-sonarscanner\" Version=\"[4.7.1]\" PrivateAssets=\"All\" ExcludeAssets=\"All\" />\r\n    <PackageReference Include=\"ReportGenerator\" Version=\"[4.4.6]\" PrivateAssets=\"All\" ExcludeAssets=\"All\" />\r\n    <PackageReference Include=\"NuGet.CommandLine\" Version=\"[5.4.0]\" PrivateAssets=\"All\" ExcludeAssets=\"All\" />\r\n    <PackageReference Include=\"CycloneDX\" Version=\"[0.9.0]\" PrivateAssets=\"All\" ExcludeAssets=\"All\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nWhen I define the `ItemGroup` directly in the `.csproj` and not in the `.props` file, then it works aswell.\r\n\r\nWhy is the behavoir differnent in VS than in msbuild or dotnet restore?\r\n\r\nIs there a hint, flag, property to pass, they dotnet restore should handle those package references same as they would be directly defined in the csproj?\r\n\r\n\r\n\r\n"},{"Id":"11427822033","Type":"IssuesEvent","CreatedAt":"2020-02-04T02:10:43","Actor":"buddhashrestha","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9068","RelatedDescription":"Closed issue \"How to setup NuGet (feed source and credentials) in CI/CD pipeline?\" (#9068) at NuGet/Home","RelatedBody":"Remove the content above here and fill out details below.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used: NuGet.exe\r\n\r\nNuGet version: 5.3.1.6268\r\n\r\nVS version (if appropriate): 2017\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\nI setup NuGet (feed source and credentials) in my local via Visual Studio UI. I don't have a NuGet.config in my repo. Now, if I want to build the code in CI/CD, then how should I do it? Because I don't have the feed source and credentials information in my repo, the CI/CD server also doesn't have that information yet. \r\n\r\nAlso, I want to set it up such that I could change the package source from my local which would be reflected in during the CI build.\r\n\r\nEach of my team members has their own credentials and they can set up their own feed source and credentials in local from Visual Studio.\r\n\r\nI just want to know the best practice to create a build pipeline such that the packagesource information is controlled by developers and package credentials is managed by the CI server, which uses some default credentials.\r\n"},{"Id":"11427724308","Type":"IssuesEvent","CreatedAt":"2020-02-04T01:48:57","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7844","RelatedDescription":"Closed issue \"Specify NuGet version for GeneratePackageOnBuild\" (#7844) at NuGet/Home","RelatedBody":"Enhancement request: For projects using the new csproj format w/ PackageReferences that have GeneratePackageOnBuild=true, add the ability to specify which version of the NuGet.exe should be used"},{"Id":"11427652754","Type":"IssuesEvent","CreatedAt":"2020-02-04T01:33:29","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6785","RelatedDescription":"Closed issue \"Add basic PCL apex tests\" (#6785) at NuGet/Home","RelatedBody":"Add basic PCL tests. "},{"Id":"11427640572","Type":"IssuesEvent","CreatedAt":"2020-02-04T01:30:50","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7465","RelatedDescription":"Closed issue \"ISettings should not be loaded more than once in restore\" (#7465) at NuGet/Home","RelatedBody":"As part of restore, `ISettings` is being loaded once at the beginning, then the file paths to all configs are stored in the [`ProjectRestoreMetadata`](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.ProjectModel/ProjectRestoreMetadata.cs#L68).\r\n\r\nThis list is intended to be used to display the list of configs used in restore, but `DependencyGraphSpecRequestProvider.Create(â€¦)` [uses](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Commands/RestoreCommand/RequestFactory/DependencyGraphSpecRequestProvider.cs#L133) this list to load the `ISettings` object again and read more information from it.\r\n\r\nThere should be no need to load `ISettings` more than one time. The top-most layer that loads `ISettings` should be able to pass down any information needed to the restore code path. Also, the list of config file paths should not be used to reload `ISettings`."},{"Id":"11427609924","Type":"IssuesEvent","CreatedAt":"2020-02-04T01:24:18","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4288","RelatedDescription":"Closed issue \"msbuild restore ouput with /v:minimal is not minimal\" (#4288) at NuGet/Home","RelatedBody":"## Detailed repro steps so we can see the same problem\r\n\r\n1. Clone https://github.com/srivatsn/roslyn-project-system/tree/dogfood (or any PackageReference based project)\r\n\r\n2. msbuild src\\ProjectSystem.sln /t:restore /v:minimal \r\n\r\nExpected: Something minimal - For each project whether restore succeeded or not.\r\n\r\nFound: The regular output which is a lot.\r\n"},{"Id":"11427592278","Type":"IssuesEvent","CreatedAt":"2020-02-04T01:20:30","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/3178","RelatedDescription":"Closed issue \"Remove NuGet core dependencies - NuGet Credentials\" (#3178) at NuGet/Home","RelatedBody":"Remove the legacy v2 nuget.core.dll dependency from the Visual Studio extension and nuget.exe.\nâ€¢NuGet Credentials\n\nSplitting off some of the work originally defined here: #1947\n"},{"Id":"11427571706","Type":"IssuesEvent","CreatedAt":"2020-02-04T01:16:05","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4881","RelatedDescription":"Closed issue \"Update NuGet coding guidelines \" (#4881) at NuGet/Home","RelatedBody":"NuGet coding guidelines were originally copied over from ASP. Much of the doc no longer applies such as the requirements on using xproj and sake. We should review and update this document with the team so that we can provide good instructions for community members looking to contribute.\r\n\r\nhttps://github.com/NuGet/Home/wiki/Coding-Guidelines\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed toâ€¦ https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package restoâ€¦ https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We areâ€¦ https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2020-02-04T05:30:43.2165033Z","RunDurationInMilliseconds":2069}