{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Core 2.2 Preview 3","PublishedOn":"2018-10-18T01:03:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.2 Preview 3. We have made more improvements to the overall release that we would love to get your feedback on, either in the comments or at dotnet/core #2004....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/17/announcing-net-core-2-2-preview-3/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.2 Preview 3","PublishedOn":"2018-10-17T20:10:48+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today we are making EF Core 2.2 Preview 3 available, together with a new preview of our data provider for Cosmos DB and updated spatial extensions for various providers. Preview 3 is going to be the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/17/announcing-entity-framework-core-2-2-preview-3/","RawContent":null},{"Title":"Automating Release Notes with Azure Functions","PublishedOn":"2018-10-16T15:00:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We can all agree that tracking the progress of a project enhances productivity and is an effective way to keep everyone involved of its progress. When it comes to managing your project in Azure DevOps...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/16/automating-release-notes-with-azure-functions/","RawContent":null},{"Title":"Guidance for library authors","PublishedOn":"2018-10-15T15:00:05+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We&#8217;ve just published our first cut of the .NET Library Guidance. It&#8217;s brand new set of articles for .NET developers who want to create high-quality libraries for .NET. The guidance...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/15/guidance-for-library-authors/","RawContent":null},{"Title":"Using .NET Hardware Intrinsics API to accelerate machine learning scenarios","PublishedOn":"2018-10-10T16:00:03+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"This week&#8217;s blog post is by Brian Lui, one of our summer interns on the .NET team, who&#8217;s been hard at work. Over to Brian: Hello everyone! This summer I interned in the .NET team, working...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/10/using-net-hardware-intrinsics-api-to-accelerate-machine-learning-scenarios/","RawContent":null},{"Title":".NET Core October 2018 Update – NET Core 1.0 and 1.1","PublishedOn":"2018-10-09T23:19:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core October 2018 Update for 1.0 and 1.1. This update includes .NET Core 1.0.13, 1.1.10 and .NET Core SDK 1.1.11. Security CVE-2018-8292: .NET Core Information...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/","RawContent":null},{"Title":".NET Framework October 2018 Security and Quality Rollup","PublishedOn":"2018-10-09T23:09:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the October 2018 Security and Quality Rollup. Security No new security fixes.  See .NET Framework September 2018 Security and Quality Rollup for the latest security update. Quality...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-framework-october-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing ML.NET 0.6 (Machine Learning .NET)","PublishedOn":"2018-10-09T00:35:09+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today we’re announcing our latest monthly release: ML.NET 0.6! ML.NET is a cross-platform, open source machine learning framework for .NET developers. We want to enable every .NET developer to train...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/08/announcing-ml-net-0-6-machine-learning-net/","RawContent":null},{"Title":"Update on .NET Core 3.0 and .NET Framework 4.8","PublishedOn":"2018-10-04T16:29:57+00:00","CommentsCount":152,"FacebookCount":0,"Summary":"In May, we announced .NET Core 3.0, the next major version of .NET Core that adds support for building desktop applications using WinForms, WPF, and Entity Framework 6. We also announced some exciting...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/04/update-on-net-core-3-0-and-net-framework-4-8/","RawContent":null},{"Title":".NET Core October 2018 Update – NET Core 2.1.5 & SDK 2.1.403","PublishedOn":"2018-10-02T15:31:06+00:00","CommentsCount":11,"FacebookCount":0,"Summary":".NET Core October 2018 Update Today, we are releasing the .NET Core October 2018 Update. This update includes .NET Core 2.1.5 and .NET Core SDK 2.1.403 and contains important reliability fixes....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/02/net-core-october-2018-update/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8341294365","Type":"IssuesEvent","CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Opened issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112) at dotnet/foundation","RelatedBody":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n"},{"Id":"8203056810","Type":"IssuesEvent","CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/111","RelatedDescription":"Opened issue \"Sourcelink location is confusing\" (#111) at dotnet/home","RelatedBody":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section."},{"Id":"8173033759","Type":"PullRequestEvent","CreatedAt":"2018-08-27T16:21:56","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/110","RelatedDescription":"Merged pull request \"Fix - add missing comma\" (#110) at dotnet/home","RelatedBody":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix."},{"Id":"8163761410","Type":"PullRequestEvent","CreatedAt":"2018-08-24T15:35:46","Actor":"jkonicki","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/110","RelatedDescription":"Opened pull request \"Fix - add missing comma\" (#110) at dotnet/home","RelatedBody":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix."},{"Id":"8160074991","Type":"PullRequestEvent","CreatedAt":"2018-08-23T23:10:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/108","RelatedDescription":"Merged pull request \"Fix errors in projects.json\" (#108) at dotnet/home","RelatedBody":""},{"Id":"8160071932","Type":"PullRequestEvent","CreatedAt":"2018-08-23T23:09:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/109","RelatedDescription":"Merged pull request \"Add Steeltoe to the project listing\" (#109) at dotnet/home","RelatedBody":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks."},{"Id":"8159331036","Type":"PullRequestEvent","CreatedAt":"2018-08-23T20:13:18","Actor":"jkonicki","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/109","RelatedDescription":"Opened pull request \"Add Steeltoe to the project listing\" (#109) at dotnet/home","RelatedBody":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks."},{"Id":"8147233541","Type":"PullRequestEvent","CreatedAt":"2018-08-21T22:39:06","Actor":"anthonychu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/108","RelatedDescription":"Opened pull request \"Fix errors in projects.json\" (#108) at dotnet/home","RelatedBody":""},{"Id":"8131503388","Type":"PullRequestEvent","CreatedAt":"2018-08-17T23:19:54","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Merged pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"8075734624","Type":"IssuesEvent","CreatedAt":"2018-08-07T07:06:40","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8394268768","Type":"IssuesEvent","CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Opened issue \"October 2018 .NET Updates\" (#89) at dotnet/announcements","RelatedBody":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)"},{"Id":"8394092294","Type":"IssuesEvent","CreatedAt":"2018-10-09T22:51:19","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/> **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n"},{"Id":"8377166566","Type":"IssuesEvent","CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Opened issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87) at dotnet/announcements","RelatedBody":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```"},{"Id":"8362210504","Type":"IssuesEvent","CreatedAt":"2018-10-03T16:11:10","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Opened issue \".NET Core 2.0 has reached end of life\" (#86) at dotnet/announcements","RelatedBody":"On October 1, 2018 .NET Core 2.0 reached end of life. This means the version channel is no longer supported and updates will no longer be provided. We recommend moving to a supported release. See our [support policy](https://www.microsoft.com/net/platform/support-policy) for more details.\r\n\r\nWe understand there will be needs to access end of life versions so downloads and Docker images will remain available. \r\n\r\n* 2.0 downloads will still be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). You will see notifications on the site indicating the end of life status. \r\n* 2.0 links have been removed from the [microsoft/donet Docker page](https://hub.docker.com/r/microsoft/dotnet/) though images will remain on the system.\r\n\r\n"},{"Id":"8279098039","Type":"IssuesEvent","CreatedAt":"2018-09-18T01:10:24","Actor":"spshant","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Opened issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85) at dotnet/announcements","RelatedBody":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8439798997","Type":"PullRequestEvent","CreatedAt":"2018-10-18T03:52:40","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20470","RelatedDescription":"Merged pull request \"Remove unnecessary interpreter fallback\" (#20470) at dotnet/coreclr","RelatedBody":"This was added for arm64 bring-up. Remove it, and the associated TODO.\r\n\r\nFixes #19696"},{"Id":"8439798988","Type":"IssuesEvent","CreatedAt":"2018-10-18T03:52:40","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/19696","RelatedDescription":"Closed issue \"[arm64] Remove interpreter fallback\" (#19696) at dotnet/coreclr","RelatedBody":"Remove old code:\r\n```\r\n#elif defined(_TARGET_ARM64_)\r\n    // TODO-ARM64-NYI: remove this after the JIT no longer asserts during startup\r\n    //\r\n    // When we are bringing up the new Arm64 JIT we set COMPlus_ContinueOnAssert=1\r\n    // We only want to hit one assert then we will fall back to the interpreter.\r\n    //\r\n    bool interpreterFallback = (JitConfig.InterpreterFallback() != 0);\r\n\r\n    if (interpreterFallback)\r\n    {\r\n        fatal(CORJIT_SKIPPED);\r\n    }\r\n#endif\r\n\r\n```"},{"Id":"8439797762","Type":"PullRequestEvent","CreatedAt":"2018-10-18T03:52:12","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20471","RelatedDescription":"Merged pull request \"Revert List.InsertRange changes from #8306\" (#20471) at dotnet/coreclr","RelatedBody":"Per https://github.com/dotnet/corefx/issues/32278#issuecomment-424493472.\r\ncc: @jkotas, @safern \r\nContributes to https://github.com/dotnet/corefx/issues/32278"},{"Id":"8439633516","Type":"IssuesEvent","CreatedAt":"2018-10-18T02:56:36","Actor":"odhanson","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/20473","RelatedDescription":"Opened issue \"Failed to create a Named Mutex in sandboxed app in Mac\" (#20473) at dotnet/coreclr","RelatedBody":"So we are hosting the core CLR inside from a sandboxed application in Mac, \r\n\r\nWhen we try creating a named Mutex, the method fails. I have found the cause of the failure:\r\n```\r\n(lldb) thread backtrace\r\n* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 7.2\r\n    frame #0: 0x00007fff5467b1f6 libc++abi.dylib`__cxa_throw\r\n  * frame #1: 0x000000010bd2df8f libcoreclr.dylib`SharedMemoryHelpers::Open(path=\"/tmp/.dotnet/shm\", flags=0, mode=0) at sharedmemory.cpp:223\r\n    frame #2: 0x000000010bd2e245 libcoreclr.dylib`SharedMemoryHelpers::OpenDirectory(path=\"/tmp/.dotnet/shm\") at sharedmemory.cpp:232\r\n    frame #3: 0x000000010bd33223 libcoreclr.dylib`SharedMemoryManager::AcquireCreationDeletionFileLock() at sharedmemory.cpp:1072\r\n    frame #4: 0x000000010bd31cae libcoreclr.dylib`SharedMemoryProcessDataHeader::CreateOrOpen(name=\"MashupSessionCacheMutex__VAR_FOLDERS_RN_GRWFHV993XV10BMJ2VVGKCTR0000GQ_T_COM.MICROSOFT.OFFICE.TEST.-INTEROPTESTS_MICROSOFT_MASHUPPROVIDER_CACHE\", requiredSharedDataHeader=SharedMemorySharedDataHeader @ 0x00007ffeefbfbd10, sharedDataByteCount=24, createIfNotExist=true, createdRef=0x00007ffeefbfc07f) at sharedmemory.cpp:622\r\n    frame #5: 0x000000010bd498b9 libcoreclr.dylib`NamedMutexProcessData::CreateOrOpen(name=\"MashupSessionCacheMutex__VAR_FOLDERS_RN_GRWFHV993XV10BMJ2VVGKCTR0000GQ_T_COM.MICROSOFT.OFFICE.TEST.-INTEROPTESTS_MICROSOFT_MASHUPPROVIDER_CACHE\", createIfNotExist=true, acquireLockIfCreated=false, createdRef=0x00007ffeefbfc3bf) at mutex.cpp:1148\r\n    frame #6: 0x000000010bd459a2 libcoreclr.dylib`NamedMutexProcessData::CreateOrOpen(name=\"MashupSessionCacheMutex__VAR_FOLDERS_RN_GRWFHV993XV10BMJ2VVGKCTR0000GQ_T_COM.MICROSOFT.OFFICE.TEST.-INTEROPTESTS_MICROSOFT_MASHUPPROVIDER_CACHE\", acquireLockIfCreated=false, createdRef=0x00007ffeefbfc3bf) at mutex.cpp:1055\r\n    frame #7: 0x000000010bd45051 libcoreclr.dylib`CorUnix::InternalCreateMutex(pthr=0x0000000101005000, lpMutexAttributes=0x0000000000000000, bInitialOwner=NO, lpName=\"MashupSessionCacheMutex__VAR_FOLDERS_RN_GRWFHV993XV10BMJ2VVGKCTR0000GQ_T_COM.MICROSOFT.OFFICE.TEST.-INTEROPTESTS_MICROSOFT_MASHUPPROVIDER_CACHE\", phMutex=0x00007ffeefbfc5d0) at mutex.cpp:372\r\n    frame #8: 0x000000010bd45826 libcoreclr.dylib`::CreateMutexW(lpMutexAttributes=0x0000000000000000, bInitialOwner=NO, lpName=u\"MashupSessionCacheMutex__VAR_FOLDERS_RN_GRWFHV993XV10BMJ2VVGKCTR0000GQ_T_COM.MICROSOFT.OFFICE.TEST.-INTEROPTESTS_MICROSOFT_MASHUPPROVIDER_CACHE\") at mutex.cpp:199\r\n    frame #9: 0x000000010bd45964 libcoreclr.dylib`::CreateMutexExW(lpMutexAttributes=0x0000000000000000, lpName=u\"MashupSessionCacheMutex__VAR_FOLDERS_RN_GRWFHV993XV10BMJ2VVGKCTR0000GQ_T_COM.MICROSOFT.OFFICE.TEST.-INTEROPTESTS_MICROSOFT_MASHUPPROVIDER_CACHE\", dwFlags=0, dwDesiredAccess=34603009) at mutex.cpp:243\r\n```\r\n\r\nThe problem is that in sandboxed apps, there are restrictions on the names for shared memory and semaphore files. Specifically:\r\n[POSIX semaphores and shared memory names must begin with the application group identifier, followed by a slash (/), followed by a name of your choosing.](https://developer.apple.com/library/archive/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html#//apple_ref/doc/uid/TP40011183-CH3-SW24)\r\n\r\nSince we are trying to open /tmp/.dotnet/shm it fails. \r\n\r\nWe need to consider how to run in a sandboxed environment. Perhaps we need to add an API to the CLR hosting functions that allows us to register an application group which will be used in runtime to generate these file names.\r\n\r\ncc: @jkotas , @jeffschwMSFT \r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8439317866","Type":"PullRequestEvent","CreatedAt":"2018-10-18T01:09:24","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/10181","RelatedDescription":null,"RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.5xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.5xx\ngit reset --hard upstream/release/2.1.5xx\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-release/2.1.5xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8439317814","Type":"PullRequestEvent","CreatedAt":"2018-10-18T01:09:22","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/10181","RelatedDescription":"Closed pull request \"Merge release/2.1.4xx to release/2.1.5xx\" (#10181) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.5xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.5xx\ngit reset --hard upstream/release/2.1.5xx\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-release/2.1.5xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8439312111","Type":"PullRequestEvent","CreatedAt":"2018-10-18T01:07:23","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/10183","RelatedDescription":"Closed pull request \"Merge release/2.2.1xx to master\" (#10183) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8439269459","Type":"PullRequestEvent","CreatedAt":"2018-10-18T00:52:31","Actor":"nugetlurker","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10192","RelatedDescription":"Opened pull request \"Insert NuGet Build 5.0.0-preview1.5590 into cli\" (#10192) at dotnet/cli","RelatedBody":"Insert NuGet Build 5.0.0-preview1.5590 into cli master branch"},{"Id":"8439120961","Type":"PullRequestEvent","CreatedAt":"2018-10-18T00:01:24","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10191","RelatedDescription":"Opened pull request \"Merge release/2.2.2xx to master\" (#10191) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8439120859","Type":"PullRequestEvent","CreatedAt":"2018-10-18T00:01:22","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10190","RelatedDescription":"Opened pull request \"Merge release/2.2.1xx to release/2.2.2xx\" (#10190) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8439120725","Type":"PullRequestEvent","CreatedAt":"2018-10-18T00:01:19","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10189","RelatedDescription":"Opened pull request \"Merge release/2.1.5xx to release/2.2.1xx\" (#10189) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8438976606","Type":"IssuesEvent","CreatedAt":"2018-10-17T23:15:46","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10138","RelatedDescription":"Closed issue \"Move Core-Sdk CI to VSTS (dev.azure.com/dnceng/public)\" (#10138) at dotnet/cli","RelatedBody":"@chcosta commented on [Tue Sep 11 2018](https://github.com/dotnet/arcade/issues/696)\n\nVSTS public CI builds\r\n- [ ] public CI builds are building in VSTS (dnceng.visualstudio.com)\r\n  - [ ] Using YAML\r\n  - [ ] Imports [base.yml](https://github.com/dotnet/arcade-minimalci-sample#base-your-builds-on-arcade-for-ease-of-use)\r\n\n\n"},{"Id":"8438976080","Type":"IssuesEvent","CreatedAt":"2018-10-17T23:15:36","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10142","RelatedDescription":"Closed issue \"Move toolset CI to VSTS (dev.azure.com/dnceng/public)\" (#10142) at dotnet/cli","RelatedBody":"VSTS public CI builds\r\n- [ ] public CI builds are building in VSTS (dnceng.visualstudio.com)\r\n  - [ ] Using YAML\r\n  - [ ] Imports [base.yml](https://github.com/dotnet/arcade-minimalci-sample#base-your-builds-on-arcade-for-ease-of-use)\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8439307251","Type":"IssuesEvent","CreatedAt":"2018-10-18T01:05:47","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/259","RelatedDescription":"Closed issue \"Should NOT allow a .NET Standard class library to reference platform extensions.\" (#259) at dotnet/standard","RelatedBody":"I read [here](https://github.com/dotnet/standard/blob/master/docs/netstandard-20/README.md) that in .Net Standard 2.0, a .NET Standard class library is able to reference non-.NET Standard class libraries, like registry, as platform extensions. \r\n\r\nIMHO, I think we should not allow a .NET Standard class library to reference platform extensions, and if the developer really need them, should reference them in a multi-target library. \r\n\r\nFrom my point of view, if a .NET Standard class library manually references the registry assembly, the library is not a \"standard\" library any more, because it requires platform supporting, and it actually becomes a \"platform-specific\" library. I admit referencing non-.NET Standard class library as platform extensions is very useful and powerful, but it just doesn't make sense doing that in a .NET Standard class library.\r\n\r\nIf someone really would like to do that, for example, there are only a few features/APIs in the library that depend on registry, and the majorities are platform independent ones, he should build a multi-targeting project, and reference registry assembly when targeting traditional .net framework, for example , just like:\r\n\r\n```\r\n#if net45\r\n      // FeaturesUsingRegistry\r\n#endif \r\n      // OtherStandardFeatures\r\n```\r\n\r\nAnd get two Dlls in the package, one for net45, which includes all the features, and the other one is for netstandard20 excluding the registry related features, which can run on all the platforms. And of course, the Nuget would get the proper one for consumers.\r\n\r\nBTW, if I understand it correctly, when a .Net Core application consumes a .NET Standard class library referencing registry assembly, it will compile successfully and may throw \"PlatformNotSupported\" exception during the runtime, right? By using multi-targeting, it will free platforms from \"PlatformNotSupported\" exceptions."},{"Id":"8439302215","Type":"IssuesEvent","CreatedAt":"2018-10-18T01:03:59","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/411","RelatedDescription":"Closed issue \"ServiceFabric & ASP.NET Core 2.0 Preview-3\" (#411) at dotnet/standard","RelatedBody":"I'm using VS2017 v15.3.0 Preview 3.0 to create a ServiceFabric project using Stateless ASP.NET Core - Web Application targeting ASP.NET 2.0; this template produces a project which targets the .NET Framework 4.6.1 which is .NET Standard 2.0 compliant? however when attempting to reference ASP.NET Core nuget components marked as .NETStandard 2.0 these fail and rollback ?   "},{"Id":"8439301296","Type":"IssuesEvent","CreatedAt":"2018-10-18T01:03:36","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/413","RelatedDescription":"Closed issue \"DllImport and USB device access for .NET Standard Class Library used for UWP app\" (#413) at dotnet/standard","RelatedBody":"Reference: https://stackoverflow.com/questions/44813779/net-standard-1-4-class-library-in-uwp-app\r\n\r\nI'm porting a C# wrapper to a .NET Standard 1.4 Class Library for a UWP app. The wrapper has `[DllImport(\"USB4.dll\")]` and USB4.dll accesses a USB device. I cannot figure out why it doesn't work.\r\n\r\nThe UWP app ultimately runs, but can't seem to get the expected response from the USB device. It's as if the device isn't connected.\r\n\r\nIs there a limitation that I'm not aware of?\r\n\r\nThis new class library that I've ported works as expected on an older WinForms C# app. Switch to UWP, and it no longer works."},{"Id":"8439295019","Type":"IssuesEvent","CreatedAt":"2018-10-18T01:01:20","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/432","RelatedDescription":"Closed issue \"developers prefer compile time errors to runtime errors for breaking changes\" (#432) at dotnet/standard","RelatedBody":"I know nothing can be done about this because you cannot take away api surface in netstandard, but I do want to point out it is reasonable to be frustrated if an app builds but then throws runtime errors.\r\n\r\nspecifically for breaking changes like https://github.com/aspnet/Announcements/issues/262, as a developer, I would much prefer a compile time error vs  a runtime error like NotSupportedException, and thought it worth mentioning, such as in [this case](https://github.com/aspnet/Security/blob/dev/src/Microsoft.AspNetCore.Authentication.Cookies/CookieAppBuilderExtensions.cs)\r\n\r\nI do get how that is unlikely to be possible, but taking away api surface at runtime for previously working api surface with no compile time error is not without pain"},{"Id":"8439290760","Type":"IssuesEvent","CreatedAt":"2018-10-18T00:59:59","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/433","RelatedDescription":"Closed issue \"Installing a package using NuGet does not create packages folder for .Net framework 4.6.2 \" (#433) at dotnet/standard","RelatedBody":"I am creating a console app using Visual Studio 2017 and selecting .Net framework 4.6.2. When I install any library package using NuGet, it is not creating Packages folder on solution level. But when I do the same using .Net framework 4.5.2, it creates packages folder"},{"Id":"8439288734","Type":"IssuesEvent","CreatedAt":"2018-10-18T00:59:14","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/443","RelatedDescription":"Closed issue \" System.Drawing.Bitmap class is claimed to be present in netcoreapp2.0 (but its not)\" (#443) at dotnet/standard","RelatedBody":"I'm confused with API sets comparison between netstandard2.0 and netcoreapp2.0. For example, according to this diff, netcoreapp2.0 contains System.Drawing.Bitmap class:\r\n[https://github.com/dotnet/standard/blob/master/docs/comparisons/netstandard2.0_vs_netcoreapp2.0/System.Drawing.md#systemdrawing](https://github.com/dotnet/standard/blob/master/docs/comparisons/netstandard2.0_vs_netcoreapp2.0/System.Drawing.md#systemdrawing)\r\n\r\nHowever, this class is actually not present in neither API set. Could somebody clarify what this means?"},{"Id":"8439279777","Type":"IssuesEvent","CreatedAt":"2018-10-18T00:56:11","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/455","RelatedDescription":"Closed issue \"Upgrading to 2.0 - what to do with System.Linq.Dynamic.Core?\" (#455) at dotnet/standard","RelatedBody":"I am using EFCore 2, and this Where won't compile without that assembly... is there a way to write that without including that one? I guess this uses the IQueryable extension.\r\n\r\nif (FilterByTenant && typeof(ITenant).GetTypeInfo().IsAssignableFrom(typeof(T)))\r\n  query = query.Where(\"TenantId = @0\", FilterByTenantId);\r\n"},{"Id":"8439267128","Type":"IssuesEvent","CreatedAt":"2018-10-18T00:51:40","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/466","RelatedDescription":"Closed issue \"System.Net.Sockets.SocketTaskExtensions: No overload for method 'ReceiveAsync' takes 2 arguments\" (#466) at dotnet/standard","RelatedBody":"I have the problem that the extensions of System.Net.Sockets.SocketTaskExtensions do not work correctly.\r\n\r\nas excemple:\r\n\r\n```\r\nawait this.socket.ConnectAsync(new IPEndPoint(IPAddress.Parse(ipAddress), port));\r\nvar buffer = new byte[1024];\r\nvar bufferSize = await this.socket.ReceiveAsync(this.buffer, SocketFlags.None);\r\n```\r\n\r\nConnectAsync is working,\r\nReceiveAsync has the error: \"No overload for method 'ReceiveAsync' takes 2 arguments\" and missing IntelliSense\r\n\r\nother Methods:\r\nAcceptAsync: working,\r\nSendAsync: error.\r\nSendToAsync: error.\r\nReceiveFromAsync: error.\r\nReceiveMessageFromAsync: error.\r\n\r\nProjectFile is simple:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NETCore.Platforms\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nIDE: Visual Studio Community 2017.3 and Visual Studio Code\r\nIn a Core 2.0 Project Everything is fine.\r\n"},{"Id":"8439265948","Type":"IssuesEvent","CreatedAt":"2018-10-18T00:51:15","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/468","RelatedDescription":"Closed issue \"A Subset of .NET Standard for WebAssembly?\" (#468) at dotnet/standard","RelatedBody":"I am not sure if my question/suggestion is suitable to be here. It seems that a standard library is necessary if we want to make .NET platform languages to WebAssembly possible. However, it is impossible to bring whole standard to WebAssembly because of its limitation. Hence, people may need to look into how the subset of .NET Standard will look like. \r\n\r\nI assume that the relation between .NET Standard and .NET Standard for WebAssembly is similar to the relation between .NET Framework and Silverlight.\r\n\r\n"},{"Id":"8439253867","Type":"IssuesEvent","CreatedAt":"2018-10-18T00:46:44","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/490","RelatedDescription":"Closed issue \"Why does netstandard.dll reference particular platform assemblies with version 0.0.0.0?\" (#490) at dotnet/standard","RelatedBody":"Hi, when I open `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\2.0.0\\netstandard.dll` in ILSpy, I can see that all the assembly references it contains have version `0.0.0.0`:\r\n\r\n    mscorlib, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n    System.Core, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n    System, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n    System.Data, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n    System.Data.Common, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\n    ...\r\n\r\nAll the referenced assemblies are in the same folder, but have versions different from `0.0.0.0` (`mscorlib.dll 4.0.0.0`, `System.Data.Common.dll 4.2.0.0` etc.). The same situation is in the case of .NET 4.6.1 and its `netstandard.dll`.\r\n\r\nI would like to know what the reason for this is and what it is supposed to mean. Is it a signal to ignore the version of the referenced assemblies? Or is `netstandard.dll` a special case when one always needs to ignore the reference versions?\r\n\r\nWe're working on a custom compiler built upon Roslyn and currently we can't handle references to libraries compiled to `netstandard2.0` due to this anomaly. I'm looking for a way to handle it properly. Thanks."},{"Id":"8439252916","Type":"IssuesEvent","CreatedAt":"2018-10-18T00:46:23","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/495","RelatedDescription":"Closed issue \" Unhandled Exception: System.ServiceModel.FaultException`1[[Microsoft.Xrm.Sdk.OrganizationServiceFault, Microsoft.Xrm.Sdk, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]:  Could not load file or assembly 'Box.V2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=ddda8fe64dde1ac3' or one of its dependencies. The system cannot find the file specified.Detail: \" (#495) at dotnet/standard","RelatedBody":"Hi \r\n\r\nI am working on MS Dynamics CRM integration project with box.com, I have added Box.V2 .dll file as a reference assembly and I am using properties these assembly to generate token using JWT authentication.\r\nWhen I am creating any record I am getting this exception/error.\r\n Unhandled Exception: System.ServiceModel.FaultException`1[[Microsoft.Xrm.Sdk.OrganizationServiceFault, Microsoft.Xrm.Sdk, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]:\r\n Could not load file or assembly 'Box.V2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=ddda8fe64dde1ac3' or one of its dependencies. The system cannot find the file specified.Detail: \r\n\r\nThanks\r\n[Box SDK exception.txt](https://github.com/dotnet/standard/files/1303750/Box.SDK.exception.txt)\r\n"},{"Id":"8439247951","Type":"IssuesEvent","CreatedAt":"2018-10-18T00:44:38","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/496","RelatedDescription":"Closed issue \"APIs of Net\" (#496) at dotnet/standard","RelatedBody":"What is the roadmap of https://apisof.net ?\r\n\r\nIt is a very helpful application. However it should be improved.\r\nRight now, even certificate has expired. : DLG_FLAGS_SEC_CERT_DATE_INVALID\r\n\r\nThanks\r\n\r\n\r\n\r\n\r\n"},{"Id":"8439246981","Type":"IssuesEvent","CreatedAt":"2018-10-18T00:44:16","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/497","RelatedDescription":"Closed issue \"Creating .NET Standard 2.0 class library project will always have reference to Microsoft.NETCore.Platforms 1.1.0 by default\" (#497) at dotnet/standard","RelatedBody":"# Summary\r\n\r\nCreating a .NET Standard 2.0 class library project should have correct reference to Microsoft.NETCore.Platform 2.0.0, but actual reference points to version 1.1.0 by default.\r\n\r\n# Detail description\r\n\r\nEnvironments:\r\n\r\n- Windows 10 Anniversary Update\r\n- Visual Studio 2017 Enterprise with update: 15.3.3 and .NET Core workload installed (also tested with Visual Studio 2017 15.3.1 and using Community Edition)\r\n\r\nSteps to reproduce:\r\n- Create a .NET Standard class library \r\n- expand the Dependency node on the Solution Explorer\r\n\r\nThis is the steps screenshot:\r\n![create_netstandard_library](https://user-images.githubusercontent.com/8773147/30537081-8f26b310-9c92-11e7-82eb-59263813eedb.gif)\r\n\r\n\r\nBy default, the creation of .NET Standard 2 class library should always point to v2.0.0 not the 1.1.0.\r\n\r\nThis is the close-up screenshot of the dependencies:\r\n\r\n![netstandard_dependencies](https://user-images.githubusercontent.com/8773147/30537090-9952c694-9c92-11e7-852c-cfca75bdbe1f.png)\r\n\r\n \r\n# Expected result\r\n\r\nThe references should point to **Microsoft.NETCore.Platforms** _**v2.0.0**_ instead of older version, because this version is the version used by .NET Standard 2.0.\r\n \r\nIs this a bug or by design?\r\n\r\ncc @terrajobst and @weshaggard "},{"Id":"8439233754","Type":"IssuesEvent","CreatedAt":"2018-10-18T00:39:48","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/501","RelatedDescription":"Closed issue \"Will memory and performance effect with and without .netstandard.dll in VS2015 Update 3?\" (#501) at dotnet/standard","RelatedBody":"@terrajobst @ericstj  will memory consumption will differ with and \r\n without .net standard2.0\r\n"},{"Id":"8439225724","Type":"IssuesEvent","CreatedAt":"2018-10-18T00:37:00","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/502","RelatedDescription":"Closed issue \"System.Web.Security is not supported in .NetStandard2.0\" (#502) at dotnet/standard","RelatedBody":"is System.Web.Security not supported in .NetStandard2.0.. I am unable to reference that in my project 2017 @weshaggard  @ericstj "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8439805915","Type":"PullRequestEvent","CreatedAt":"2018-10-18T03:55:09","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/32881","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#32881) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"8439803349","Type":"PullRequestEvent","CreatedAt":"2018-10-18T03:54:14","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/32881","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#32881) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8439462858","Type":"PullRequestEvent","CreatedAt":"2018-10-18T02:00:27","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/32818","RelatedDescription":"Merged pull request \"Skip trusted certificates when populating the store.\" (#32818) at dotnet/corefx","RelatedBody":"Some distros ship with two variants of the same certificate.\r\nOne is the regular format ('BEGIN CERTIFICATE') and the other\r\ncontains additional AUX-data ('BEGIN TRUSTED CERTIFICATE').\r\nThe additional data contains the appropriate usage (e.g. emailProtection, serverAuth, ...).\r\nBecause corefx doesn't validate for a specific usage, derived certificates are rejected.\r\nFor now, we skip the certificates with AUX data and use the regular certificates.\r\nIn the future, we should look at validating with a specific usage and prefer\r\nthe trusted certificates over the regular certificates when loading the store."},{"Id":"8439402470","Type":"PullRequestEvent","CreatedAt":"2018-10-18T01:39:34","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/32880","RelatedDescription":"Opened pull request \"Add test for List.AddRange with itself\" (#32880) at dotnet/corefx","RelatedBody":"Depends on https://github.com/dotnet/coreclr/pull/20471\r\nFixes https://github.com/dotnet/corefx/issues/32278\r\ncc: @jkotas, @safern "},{"Id":"8439401654","Type":"IssuesEvent","CreatedAt":"2018-10-18T01:39:16","Actor":"skyline75489","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/32879","RelatedDescription":"Opened issue \"CurlHandler can't handle set-cookie in 3xx response\" (#32879) at dotnet/corefx","RelatedBody":"The code here handles set-cookie header from Curl response: https://github.com/dotnet/corefx/blob/a0e4d78a74b241289dcf0c4c1c6fa026e394a150/src/System.Net.Http/src/System/Net/Http/CurlHandler/CurlHandler.MultiAgent.cs#L1014 \r\n\r\nHowever it fails to handle `set-cookie` if the response status code is 3xx. Cookies inside 3xx response will not be saved to `_cookieContainer`."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8439803677","Type":"PullRequestEvent","CreatedAt":"2018-10-18T03:54:22","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6468","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6468) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8439586667","Type":"PullRequestEvent","CreatedAt":"2018-10-18T02:41:26","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6383","RelatedDescription":"Merged pull request \"Add null checking for callvirt\" (#6383) at dotnet/corert","RelatedBody":"@morganbr \r\n\r\nFixes #5772\r\nI've implemented this as a function to avoid messing with the basic blocks directly. I expect that in a release build this will effectively be inline anyway. In support of this I've changed some signatures to pass the LLVMBuilderRef so I can reuse the infrastructure for creating the exception object. This seems a little bit dangerous as some of the affected paths (pinvoke) have dependencies on things like the shadow stack of the original routine. These paths are obviously not taken in my planned usage but I'm not sure If I need to be putting some sort of guard here to prevent misuse, and if so what form should it take.\r\n\r\nOnce this PR is done it should be pretty easy to do the same thing for index out of range in the array instructions."},{"Id":"8439586661","Type":"IssuesEvent","CreatedAt":"2018-10-18T02:41:26","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5772","RelatedDescription":"Closed issue \"Add null checking for callvirt\" (#5772) at dotnet/corert","RelatedBody":"The callvirt opcode should do a null check on the 'this' pointer before making a call. If it's null, it should throw a NullReferenceException. If exception handling (#4655) isn't finished when somebody picks this up, it could also just trap and we could add a throw later."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8439121753","Type":"PullRequestEvent","CreatedAt":"2018-10-18T00:01:39","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2592","RelatedDescription":"Opened pull request \"Merge release/2.2.2xx to master\" (#2592) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8439121650","Type":"PullRequestEvent","CreatedAt":"2018-10-18T00:01:36","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2591","RelatedDescription":"Opened pull request \"Merge release/2.2.1xx to release/2.2.2xx\" (#2591) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8439075956","Type":"PullRequestEvent","CreatedAt":"2018-10-17T23:46:47","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2590","RelatedDescription":"Opened pull request \"Update latest build status badge and link\" (#2590) at dotnet/sdk","RelatedBody":""},{"Id":"8438658598","Type":"PullRequestEvent","CreatedAt":"2018-10-17T21:53:19","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2570","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.9.0-preview4.5536 into sdk\" (#2570) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.9.0-preview4.5536 into sdk release/2.1.5xx branch"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1052575934572843009","CreatedAt":"2018-10-17T15:03:53+00:00","UserScreenname":"dotnet","Text":"Our @terrajobst is teaching how to build a compiler, LIVE on Youtube and Twitch.  Tune in at:… https://t.co/oTbrZVriwS","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":6,"RawContent":null},{"Id":"1052246548917182465","CreatedAt":"2018-10-16T17:15:01+00:00","UserScreenname":"dotnet","Text":"Say “Yes” to NoSQL for .NET SQL Developers - https://t.co/9L0O2wVz9h - @JeremyLikness intros relational database de… https://t.co/F8R8WVGDja","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":76,"FavoriteCount":31,"RawContent":null},{"Id":"1052189959078248450","CreatedAt":"2018-10-16T13:30:09+00:00","UserScreenname":"dotnet","Text":"Check out Jeff's show this morning and learn about .NET, Visual Studio Code, and Linux-based development with .NET… https://t.co/I6gUbWmajc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":27,"FavoriteCount":9,"RawContent":null},{"Id":"1049807908173574144","CreatedAt":"2018-10-09T23:44:44+00:00","UserScreenname":"dotnet","Text":"Blogged -- .NET Framework October 2018 Security and Quality Rollup https://t.co/tLgVdVbM4L","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":25,"FavoriteCount":8,"RawContent":null},{"Id":"1049702744515203072","CreatedAt":"2018-10-09T16:46:51+00:00","UserScreenname":"dotnet","Text":"Announcing the latest preview release of ML .NET 0.6 (Machine Learning .NET) https://t.co/3lXXCs30ma","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":101,"FavoriteCount":59,"RawContent":null}]}},"RunOn":"2018-10-18T05:30:33.4073654Z","RunDurationInMilliseconds":8436}