{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7393970615","Type":"IssuesEvent","CreatedAt":"2018-03-17T04:16:19","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17008","RelatedDescription":"Opened issue \"[Arm64/Ubuntu] Recent regression to JIT/Directed/RVAInit/oddsize\" (#17008) at dotnet/coreclr","RelatedBody":"`JIT/Directed/RVAInit/oddsize/oddsize.sh`\r\n\r\n```\r\ncorerun oddsize.exe\r\n\r\nAssert failure(PID 42610 [0x0000a672], Thread: 42610 [0xa672]): \r\nAssertion failed 'obj->gtIntCon.gtIconVal == 0' in 'Test:Main():int' (IL size 13)\r\n\r\n    File: src/jit/compiler.hpp Line: 4358\r\n```\r\n\r\nFirst failure observed on d6b2ead7f\r\nLast observed pass on 7ee3f6360\r\n"},{"Id":"7393965595","Type":"IssuesEvent","CreatedAt":"2018-03-17T04:11:35","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17007","RelatedDescription":"Opened issue \"[Arm64/Ubuntu] Crossgen segmentation faults during build bootstrap\" (#17007) at dotnet/coreclr","RelatedBody":"While buidling arm64 bootstrap cli with this combination\r\n\r\n```\r\n**** DETECTING VERSIONS IN SEED CLI ****\r\nFramework version: 2.1.0-preview2-26316-06\r\nSDK version:       2.1.300-preview2-008375\r\nFXR version:       2.1.0-preview2-26316-06\r\n**** DETECTING GIT COMMIT HASHES ****\r\ncoreclr hash:    9d0e7065b788333c712a31d11fc46fe561887b66\r\ncorefx hash:     23165cee77ae4dd7a7645b7927872948bb27a73e\r\ncore-setup hash: e8d248c21937da58626ef828f6e55abfa22ca8a1\r\n```\r\n\r\nI am seeing segmentation faults during crossgen\r\n\r\n```\r\n**** Beginning crossgen for arm64 target  ****\r\n_: line 1: 10247 Segmentation fault      timeout $__crossgentimeout $2/crossgen /MissingDependenciesOK /Platform_Assemblies_Paths $2:$(dirname $1) /in $1 /out $1.ni >> $1.log 2>&1\r\n_: line 1: 11712 Segmentation fault      timeout $__crossgentimeout $2/crossgen /MissingDependenciesOK /Platform_Assemblies_Paths $2:$(dirname $1) /in $1 /out $1.ni >> $1.log 2>&1\r\n_: line 1: 13638 Segmentation fault      timeout $__crossgentimeout $2/crossgen /MissingDependenciesOK /Platform_Assemblies_Paths $2:$(dirname $1) /in $1 /out $1.ni >> $1.log 2>&1\r\n_: line 1: 14088 Segmentation fault      timeout $__crossgentimeout $2/crossgen /MissingDependenciesOK /Platform_Assemblies_Paths $2:$(dirname $1) /in $1 /out $1.ni >> $1.log 2>&1\r\n_: line 1: 13977 Segmentation fault      timeout $__crossgentimeout $2/crossgen /MissingDependenciesOK /Platform_Assemblies_Paths $2:$(dirname $1) /in $1 /out $1.ni >> $1.log 2>&1\r\n_: line 1: 12109 Segmentation fault      timeout $__crossgentimeout $2/crossgen /MissingDependenciesOK /Platform_Assemblies_Paths $2:$(dirname $1) /in $1 /out $1.ni >> $1.log 2>&1\r\n_: line 1: 13673 Segmentation fault      timeout $__crossgentimeout $2/crossgen /MissingDependenciesOK /Platform_Assemblies_Paths $2:$(dirname $1) /in $1 /out $1.ni >> $1.log 2>&1\r\n\r\n**** Crossgen failed for the following dlls:\r\n\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/sdk/2.1.300-preview2-008375/TestHost/System.Collections.Immutable.dll\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/shared/Microsoft.AspNetCore.All/2.1.0-preview2-30338/Microsoft.AspNetCore.SignalR.Redis.dll\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/sdk/2.1.300-preview2-008375/MSBuild.dll\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/shared/Microsoft.AspNetCore.All/2.1.0-preview2-30338/Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.dll\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/shared/Microsoft.AspNetCore.App/2.1.0-preview2-30338/Microsoft.AspNetCore.JsonPatch.dll\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/shared/Microsoft.NETCore.App/2.1.0-preview2-26316-06/System.Collections.Immutable.dll\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/shared/Microsoft.NETCore.App/2.1.0-preview2-26316-06/System.Collections.dll\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/sdk/2.1.300-preview2-008375/Microsoft.CodeAnalysis.CSharp.dll\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/shared/Microsoft.AspNetCore.App/2.1.0-preview2-30338/Microsoft.CodeAnalysis.CSharp.dll\r\n```"},{"Id":"7393933642","Type":"PullRequestEvent","CreatedAt":"2018-03-17T03:44:00","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15146","RelatedDescription":"Merged pull request \"Do not compute the IDF for all blocks in advance\" (#15146) at dotnet/coreclr","RelatedBody":"`InsertsPhiFunctions` visits each block only once so there's no need to\r\ncompute and store the IDFs for all blocks in advance. The IDF of a given\r\nblock can be computed when the block is visited and discarded after\r\nthat. This way a single `BlkVector` can be reused for all blocks.\r\n\r\nThis saves 12% CMK_SSA memory.\r\n\r\nMemStats diff: https://gist.github.com/mikedn/d5fb13e06f181f29de420510fd07d7d9\r\n\r\nNo jit diffs."},{"Id":"7393888638","Type":"PullRequestEvent","CreatedAt":"2018-03-17T03:05:48","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16993","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreFx to preview3-02616-02, preview2-26316-09, preview2-26317-01, respectively (master)\" (#16993) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7393856581","Type":"PullRequestEvent","CreatedAt":"2018-03-17T02:39:49","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17006","RelatedDescription":"Opened pull request \"JIT: remove boxing for interface call to shared generic struct\" (#17006) at dotnet/coreclr","RelatedBody":"Improve the jit's ability to optimize a box-interface call sequence\r\nto handle cases where the unboxed entry point requires a method table\r\nargument.\r\n\r\nAdded two test cases, one from the inspiring issue, and another where\r\nthe jit is then able to inline the method.\r\n\r\nCloses #16982."},{"Id":"7393792671","Type":"PullRequestEvent","CreatedAt":"2018-03-17T01:51:18","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17001","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#17001) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"7393775707","Type":"PullRequestEvent","CreatedAt":"2018-03-17T01:39:03","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17000","RelatedDescription":"Merged pull request \"[Arm64] Enable arm64 simd test\" (#17000) at dotnet/coreclr","RelatedBody":"@CarolEidt PTAL\r\n\r\nI have enable all but a coarsely selected subset of tests which are currently broken waiting on ABI changes in #16310 \r\n\r\nI would prefer to get the majority of these tests running in CI rather than wait on #16310 which may be complicated to debug and fix."},{"Id":"7393754489","Type":"PullRequestEvent","CreatedAt":"2018-03-17T01:24:17","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16991","RelatedDescription":"Merged pull request \"Prevent concurrent use corruption from causing infinite loops\" (#16991) at dotnet/coreclr","RelatedBody":"For `Dictionary`\r\n\r\nResolves: https://github.com/dotnet/corefx/issues/28123\r\n\r\n/cc @vancem @jkotas @danmosemsft @stephentoub "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7393901722","Type":"PullRequestEvent","CreatedAt":"2018-03-17T03:16:48","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8830","RelatedDescription":"Opened pull request \"Implement the --tool-path option for list tool command.\" (#8830) at dotnet/cli","RelatedBody":"This PR implements the missing `--tool-path` option for the list tool command.  This enables the command to list locally installed tools.\r\n\r\nFixes #8803.\r\n\r\nAlso fixes #8829."},{"Id":"7393856458","Type":"IssuesEvent","CreatedAt":"2018-03-17T02:39:44","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8829","RelatedDescription":"Opened issue \"Tool installation with relative --tool-path option fails to install.\" (#8829) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. `dotnet install tool --tool-path foo dotnetsay`\r\n\r\n## Expected  behavior\r\nExpected the tool to install into `$(pwd)/foo`.\r\n\r\n## Actual behavior\r\nThe installation fails:\r\n\r\n```\r\n$ dotnet install tool --tool-path foo dotnetsay\r\nFailed to install tool package 'dotnetsay': Could not find a part of the path '/Users/peterhuene/src/cli/test/dotnet.Tests/foo/.store/.stage/5xnuzw3m.n3c/dotnetsay'.\r\nTool 'dotnetsay' failed to install.\r\n```\r\n\r\n## Environment data\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview2-008366\r\n Commit:    680e72993b\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.13-x64\r\n Base Path:   /Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk/2.1.300-preview2-008366/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview2-26313-01\r\n  Commit:  3c802455b2\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-preview2-008366 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-30338 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-30338 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26313-01 [/Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n## Bug\r\n\r\nThe tool package store is storing a relative path instead of a full path, causing a relative path to be passed to NuGet via the temp project.  Thus NuGet restores relative to the temp project directory and not the current working directory."},{"Id":"7393713921","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:57:43","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8828","RelatedDescription":"Opened pull request \"Update SDK to 2.1.200-preview-62717-01\" (#8828) at dotnet/cli","RelatedBody":""},{"Id":"7393675480","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:34:33","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8811","RelatedDescription":"Merged pull request \"Update SDK to 2.1.200-preview-62715-08\" (#8811) at dotnet/cli","RelatedBody":"Addresses https://devdiv.visualstudio.com/DevDiv/Managed%20Project%20System/_queries?id=580176&fullScreen=false&_a=edit"},{"Id":"7393671621","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:32:31","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8822","RelatedDescription":"Merged pull request \"Merge master into release/2.1.3xx\" (#8822) at dotnet/cli","RelatedBody":"This was a clean merge."},{"Id":"7393646018","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:19:15","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8827","RelatedDescription":"Opened pull request \"Merge release/2.1.3xx to master\" (#8827) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7393616552","Type":"IssuesEvent","CreatedAt":"2018-03-17T00:05:11","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8826","RelatedDescription":"Opened issue \"Problem with ProjectReference for Layering with netcoreapp2.0\" (#8826) at dotnet/cli","RelatedBody":"@FlorianRainer commented on [Fri Mar 16 2018](https://github.com/dotnet/core/issues/1355)\n\nOS: Windows 10, Visual Studio 15.6.2 / Dotnet CLI Version 2.1.101 NetCore 2.0\r\n\r\nI have the following Problem, i have a quite large Solution with multiple Projects organized in different Layers. Some Layers are hidden from the Top Level Application and are used only by the layers below.\r\nI had this already back in old csproj projects, on .net 4.x and later with new csproj system and asp.net core but based on full framework \"net462\" i never had any problems with this.\r\n\r\nnow i was upgrading to netcoreapp2.0 (netcore in general) and i have noticed some problems.\r\n\r\ni was not able to run my application if i use `PrivateAssets All` on ProjectReference if the references project uses SubProjects or NuGet Packages (exclusive used by this referenced SubProject)\r\n```\r\n<ProjectReference Include=\"....\">\r\n      <PrivateAssets>All</PrivateAssets>\r\n</ProjectReference>\r\n```\r\n\r\nI have created a example Repo on GitHub based on new Projects from \"File New Project\" in VS linked together and explained the problems and solutions in a few small commits.\r\n\r\ni hope this explains the Problem.\r\nhttps://github.com/FlorianRainer/Report_ExampleApp/commits/master\r\n\r\nPlease Read the Commit Messages for more details.\r\n\r\nMaybe i have missed something and there is a easy built in way to do this, maybe something else then `PrivateAssets All` but i havn't found anything working.\r\n\r\nThanks for any feedback on this, hopefully there whould be a better solution then this hacky workaround.\n\n"},{"Id":"7393609061","Type":"IssuesEvent","CreatedAt":"2018-03-17T00:01:55","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8825","RelatedDescription":"Opened issue \"full framework shim cannot work on Windows nano service\" (#8825) at dotnet/cli","RelatedBody":"Windows nano service don't have full framework pre installed\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7393606398","Type":"IssuesEvent","CreatedAt":"2018-03-17T00:00:43","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8551","RelatedDescription":"Closed issue \"portable global tool summary issue\" (#8551) at dotnet/cli","RelatedBody":"- [x] uninstall https://github.com/dotnet/cli/issues/8549\r\n- [x] list https://github.com/dotnet/cli/issues/8548\r\n- [x] update https://github.com/dotnet/cli/issues/8564\r\n- [x] prelease https://github.com/dotnet/cli/issues/8485\r\n- [x] Remove Microsoft.NETCore.Platforms dependency requirement for producer https://github.com/dotnet/cli/issues/8617\r\n- [x] p2p pack tool https://github.com/dotnet/sdk/issues/1998"},{"Id":"7393605456","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:00:19","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8809","RelatedDescription":"Merged pull request \"Better using facing string\" (#8809) at dotnet/cli","RelatedBody":"Fix https://github.com/dotnet/cli/issues/8728\r\n\r\nFix https://github.com/dotnet/cli/issues/8369"},{"Id":"7393557594","Type":"IssuesEvent","CreatedAt":"2018-03-16T23:39:09","Actor":"CIPop","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8806","RelatedDescription":"Closed issue \"Unable to find fallback package folder\" (#8806) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Start with a _clean_ Windows box and install Visual Studio Enterprise 2017 (latest) with .NET Core.\r\n2. Clone https://github.com/azure/azure-iot-sdk-csharp and run `jenkins\\windows_csharp.cmd` in root.\r\n\r\n\r\n## Expected  behavior\r\nBuilds works as expected.\r\n\r\n## Actual behavior\r\n```\r\nBUILD: --- SecurityProvider for TPM Debug ---\r\nMicrosoft (R) Build Engine version 15.6.82.30579 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.101\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(172,5): error MSB4018: The \"ResolvePackageDependencies\" task failed unexpectedly. [S:\\cs\\security\\tpm\\src\\Microsoft.Azure.Devices.Provisioning.Security.Tpm.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.101\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(172,5): error MSB4018: NuGet.Packaging.Core.PackagingException: Unable to find fallback package folder 'C:\\Users\\cipop\\.dotnet\\NuGetFallbackFolder'. [S:\\cs\\security\\tpm\\src\\Microsoft.Azure.Devices.Provisioning.Security.Tpm.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.101\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(172,5): error MSB4018:    at NuGet.Packaging.FallbackPackagePathResolver..ctor(String userPackageFolder, IEnumerable`1 fallbackPackageFolders) [S:\\cs\\security\\tpm\\src\\Microsoft.Azure.Devices.Provisioning.Security.Tpm.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.101\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(172,5): error MSB4018:    at Microsoft.NET.Build.Tasks.NuGetPackageResolver.CreateResolver(LockFile lockFile, String projectPath) [S:\\cs\\security\\tpm\\src\\Microsoft.Azure.Devices.Provisioning.Security.Tpm.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.101\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(172,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageDependencies.get_PackageResolver() [S:\\cs\\security\\tpm\\src\\Microsoft.Azure.Devices.Provisioning.Security.Tpm.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.101\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(172,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageDependencies.ResolvePackagePath(LockFileLibrary package) [S:\\cs\\security\\tpm\\src\\Microsoft.Azure.Devices.Provisioning.Security.Tpm.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.101\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(172,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageDependencies.GetPackageAndFileDefinitions() [S:\\cs\\security\\tpm\\src\\Microsoft.Azure.Devices.Provisioning.Security.Tpm.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.101\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(172,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [S:\\cs\\security\\tpm\\src\\Microsoft.Azure.Devices.Provisioning.Security.Tpm.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.101\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(172,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() in E:\\A\\_work\\82\\s\\src\\Build\\BackEnd\\TaskExecutionHost\\TaskExecutionHost.cs:line 631 [S:\\cs\\security\\tpm\\src\\Microsoft.Azure.Devices.Provisioning.Security.Tpm.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.101\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(172,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__25.MoveNext() in E:\\A\\_work\\82\\s\\src\\Build\\BackEnd\\Components\\RequestBuilder\\TaskBuilder.cs:line 787 [S:\\cs\\security\\tpm\\src\\Microsoft.Azure.Devices.Provisioning.Security.Tpm.csproj]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\ndotnet --info\r\n.NET Command Line Tools (2.1.101)\r\n\r\nProduct Information:\r\n Version:            2.1.101\r\n Commit SHA-1 hash:  6c22303bf0\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.101\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.6\r\n  Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d\r\n```\r\n\r\nThere is something interesting in the Users folder:\r\n```\r\nUSERNAME=cipop\r\nUSERPROFILE=C:\\Users\\cipop.CORP\r\n\r\n> dir c:\\Users\\ /b\r\nAdministrator\r\ncipop\r\ncipop.CORP\r\nPublic\r\n```\r\n\r\nSeems to be related to #7364,  #7267, #7364, #7574 .\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7393599747","Type":"PullRequestEvent","CreatedAt":"2018-03-16T23:57:53","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/681","RelatedDescription":"Opened pull request \"Update BuildTools to preview3-02616-02 (master)\" (#681) at dotnet/standard","RelatedBody":""},{"Id":"7392651460","Type":"IssuesEvent","CreatedAt":"2018-03-16T19:27:19","Actor":"jnm2","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/680","RelatedDescription":"Opened issue \"Not able to get non-framework assemblies to be trimmed\" (#680) at dotnet/standard","RelatedBody":"Using the latest prerelease and on the option `<TrimUnusedDependencies>true</TrimUnusedDependencies>` in each root project, I'm now getting three non-framework assemblies (with pdbs) in the output which should have been trimmed.\r\n\r\nTwo of these assemblies are only referenced transitively via package references.  The other assembly is from a directly-referenced NuGet package, but `<RootPackageReference>false</RootPackageReference>` seems to have no effect on it. This last assembly is one of two lib assemblies in that directly-referenced NuGet package. I'm expecting the trimmer to trim this assembly and not trim the other assembly from the same package.\r\n\r\nI remember these three assemblies being trimmed by your trimmer before I started using packages from the MyGet feed, which I'm doing to preserve reference-related items.\r\n\r\n/cc @ericstj "},{"Id":"7387185013","Type":"IssuesEvent","CreatedAt":"2018-03-15T20:30:55","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/679","RelatedDescription":"Opened issue \"Update standard build definitions to not use deprecated nuget publisher\" (#679) at dotnet/standard","RelatedBody":"The nuget publisher vsts task is deprecated and we need to use the newer one. As part of that we also need to be pulling the api-key from key vault instead of the vsts connection pool. "},{"Id":"7380383895","Type":"PullRequestEvent","CreatedAt":"2018-03-14T19:04:12","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/499","RelatedDescription":"Closed pull request \"Use target path in FileNode for trimming logic\" (#499) at dotnet/standard","RelatedBody":"This prevents problems caused by dlls with the same name but different\r\ndestination directories, such as satellite assemblies. Previously\r\nthese would cause a crash in the trimming logic by causing different\r\nfiles with the same name to be inserted into a dictionary.\r\n\r\nThe logic to compute the target path was taken from the SDK:\r\nhttps://github.com/dotnet/sdk/blob/cd25d6bbfc2aac61cc790c511900427ac64fdaa8/src/Tasks/Common/src/ItemUtilities.cs#L117.\r\n\r\n@ericstj please review. Is there a better way to get the target path than duplicating code from the SDK?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7394015267","Type":"PullRequestEvent","CreatedAt":"2018-03-17T04:58:46","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28163","RelatedDescription":"Opened pull request \"add proxy bypass list processing for windows\" (#28163) at dotnet/corefx","RelatedBody":"fixes #23150\r\n\r\nThis is last chunk for proxy configuration for HttpSocketHandler.\r\nThe functionality matches code provided by WinHttp team as well as my experiments and testing. \r\nThe pattern processing can possibly be compiled to single mega-match so we can do parallel processing but it does not seems necessary at the moment.\r\nWinHttp does does process entries sequentially."},{"Id":"7394003422","Type":"PullRequestEvent","CreatedAt":"2018-03-17T04:46:58","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28162","RelatedDescription":"Opened pull request \"Replace IntPtr and pointer casts in SpanHelpers.Byte.cs with nuint\" (#28162) at dotnet/corefx","RelatedBody":"Cleanup tricky IntPtr and pointer casts that simulated native int arithmetic with nuint to make the code more readable."},{"Id":"7393992564","Type":"PullRequestEvent","CreatedAt":"2018-03-17T04:36:47","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28134","RelatedDescription":"Merged pull request \"Remove some low-hanging fruit allocations from SocketsHttpHandler connections\" (#28134) at dotnet/corefx","RelatedBody":"Most of these aren't actually in SocketsHttpHandler itself, but rather in System.Net.Security or System.Security.Cryptography.X509Certificates.  I took a memory allocation trace of creating a bunch of authenticated connections, and started eliminating some of the easier allocations. https://github.com/dotnet/coreclr/pull/16984 is part of this, as was https://github.com/dotnet/corefx/pull/28086 and https://github.com/dotnet/corefx/pull/28084, and https://github.com/dotnet/coreclr/issues/16982 is showing up as well.  There's still _a lot_ more there, but this is a start.  Reviewing commit by commit is probably easiest.\r\n\r\ncc: @geoffkizer, @bartonjs, @JeremyKuhne, @davidsh"},{"Id":"7393970047","Type":"PullRequestEvent","CreatedAt":"2018-03-17T04:15:48","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28161","RelatedDescription":"Opened pull request \"Use Win32Marshal from CoreLib shared code\" (#28161) at dotnet/corefx","RelatedBody":"Fix hr issue caught by Common.Tests.\r\n\r\nFollow through for https://github.com/dotnet/corefx/pull/28158\r\n\r\ncc: @pjanotti, @Anipik "},{"Id":"7393956644","Type":"IssuesEvent","CreatedAt":"2018-03-17T04:03:31","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/28159","RelatedDescription":"Closed issue \"System.Reflection.Metadata.Tests frequently hanging OSX CI\" (#28159) at dotnet/corefx","RelatedBody":"Seeing multiple hits for this over the past few days. #27959, #28158, etc.\r\n\r\n```\r\n2018-03-16 19:46:19,493: INFO: proc(54): run_and_log_output: Output: ===========================================================================================================\r\n2018-03-16 19:46:19,493: INFO: proc(54): run_and_log_output: Output: ~/dotnetbuild/work/2692d885-466d-4e4e-afe7-34097847e712/Work/a2747181-713a-4b9a-a434-03a7690bc637/Unzip ~/dotnetbuild/work/2692d885-466d-4e4e-afe7-34097847e712/Work/a2747181-713a-4b9a-a434-03a7690bc637/Unzip\r\n2018-03-16 19:46:19,699: INFO: proc(54): run_and_log_output: Output: Traceback (most recent call last):\r\n2018-03-16 19:46:19,700: INFO: proc(54): run_and_log_output: Output:   File \"/Users/dotnet-bot/.dumpling/dumpling.py\", line 33, in <module>\r\n2018-03-16 19:46:19,700: INFO: proc(54): run_and_log_output: Output:     import psutil\r\n2018-03-16 19:46:19,700: INFO: proc(54): run_and_log_output: Output: ImportError: No module named psutil\r\n2018-03-16 19:46:19,877: INFO: proc(54): run_and_log_output: Output: xUnit.net console test runner (64-bit .NET Core)\r\n2018-03-16 19:46:19,877: INFO: proc(54): run_and_log_output: Output: Copyright (C) 2014 Outercurve Foundation.\r\n2018-03-16 19:46:19,877: INFO: proc(54): run_and_log_output: Output: \r\n2018-03-16 19:46:19,960: INFO: proc(54): run_and_log_output: Output: Discovering: System.Reflection.Metadata.Tests\r\n2018-03-16 19:46:20,152: INFO: proc(54): run_and_log_output: Output: Discovered:  System.Reflection.Metadata.Tests\r\n2018-03-16 19:46:20,277: INFO: proc(54): run_and_log_output: Output: Starting:    System.Reflection.Metadata.Tests\r\n```"},{"Id":"7393951287","Type":"PullRequestEvent","CreatedAt":"2018-03-17T03:59:18","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28160","RelatedDescription":"Opened pull request \"API consistency for System.Memory APIs (argument names)\" (#28160) at dotnet/corefx","RelatedBody":"Here is an attempt to keep argument names consistent across the board for all the System.Memory APIs, based on our discussion (see https://github.com/dotnet/apireviews/pull/62).\r\n\r\nI have split each change into separate commits if that makes things easier to review.\r\n\r\n**List of changes:**\r\n\r\n- AsBytes and Cast: Change arg name source -> span\r\n- CopyTo: Change arg name array/sequence -> source\r\n- Several APIs: Change arg name arraySegment -> segment\r\n- Several APIs: Change arg name readOnlyMemory -> memory\r\n- BinaryPrimitives and Utf8Formatter: Change arg name buffer -> source or destination\r\n- Utf8Parser: Change arg name text -> source\r\n- Base64: Change arg name consumed/written -> bytesConsumed/bytesWritten\r\n- TryGetOwnedMemory: Change arg name ownedMemory -> owner, index -> start\r\n- BuffersExtensions.Write: Change arg name bufferWriter -> writer\r\n- Span Compare APIs: Change arg name first -> span, second/value -> other\r\n- ROSequence.TryGet & BuffersExtensions: Change arg name data -> memory, sequence -> source\r\n- BufferExtensions.Write: Change arg name source -> span\r\n\r\ncc @KrzysztofCwalina, @joshfree, @terrajobst, @stephentoub, @davidfowl, @pakrym, @benaadams, @jkotas, @JeremyKuhne, @dotnet/corefxlab-contrib, @karelz, @danmosemsft "},{"Id":"7393936561","Type":"PullRequestEvent","CreatedAt":"2018-03-17T03:46:24","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28158","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#28158) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7393914833","Type":"PullRequestEvent","CreatedAt":"2018-03-17T03:27:33","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28101","RelatedDescription":"Merged pull request \"Update warning messages\" (#28101) at dotnet/corefx","RelatedBody":"Fix #27488\r\n@zhenlan @huanwu @mconnew "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7394036596","Type":"IssuesEvent","CreatedAt":"2018-03-17T05:18:01","Actor":"AmadeusW","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25548","RelatedDescription":"Opened issue \"Add Using refactoring is not available\" (#25548) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.6.2\r\nVisualStudio.15.Release/15.6.2+27428.2005\r\nC# Tools   2.7.0-beta3-62707-11. Commit Hash: 75dfc9b33ed624dff3985c7435c902c3c58c0e5c\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new console app\r\n2. Paste `var x = new System.Diagnostics.BooleanSwitch(\"param1\", \"param2\");` into `main`\r\n3. Hit `Ctrl+.`\r\n\r\n**Expected Behavior**:\r\nAdd Using refactoring is available via lightbulb \\ paintbrush \\ popsicle icon 😉\r\n\r\n**Actual Behavior**:\r\n\r\nNo refactoring available\r\n![image](https://user-images.githubusercontent.com/1673956/37551892-f840adb8-2966-11e8-9363-513c8fb71c60.png)\r\n\r\nlightbulb works otherwise. Just not to _Add Using_\r\n![image](https://user-images.githubusercontent.com/1673956/37551913-8f91afbe-2967-11e8-8223-78aa736f6cbf.png)\r\n"},{"Id":"7394015097","Type":"IssuesEvent","CreatedAt":"2018-03-17T04:58:36","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25547","RelatedDescription":"Opened issue \"Debugging and edit-and-continue for pattern-matching: action items\" (#25547) at dotnet/roslyn","RelatedBody":"Based on discussion with @tmat we came up with the following set of work items that we expect will provide reasonable debugging and edit-and-continue support for pattern-matching constructs.\r\n\r\nGenerally speaking, these action items result from the following understanding of the way things work:\r\n- The execution stack must be empty at a sequence point (even a hidden sequence point)\r\n- There should be a sequence point shortly after any hidden call to user code such as a property, `Deconstruct`, or `string.operator==`. This becomes an opportunity for the edit-and-continue infrastructure to move the PC from the old method's frame to the new method's frame, mapping variables from one to the other in the process.\r\n\r\nBased on this, we have the following action items:\r\n- [ ] In a switch when a `when` clause is on the execution stack, changing any case clause is a rude edit. That's because changing a case clause could potentially invalidate the shape of the lowered decision dag, making it infeasible to map the old code to the new code. This applies to the `when` clause as well (it is part of the case clause), because a general expression in the `when` clause it treated differently than a constant `true` or a constant `false` expression. We could relax this by not permitting changes to or from a constant-valued `when` clause.\r\n- [ ] If the decision dag code is on the stack (e.g. when stopped in a called property or `Deconstruct` method), changing any case clause is a rude edit.\r\n- [ ] There should be a hidden sequence point at the start of the code to handle the decision dag. This is necessary so that jumps back from a `when` clause into the decision dag do not appear to jump back up to the switch statement.\r\n- [ ] After a decision that calls out to user code (e.g. `string.operator ==`), the result should be saved, leaving the stack empty, then there should be a sequence point, then the result should be loaded again. This `bool` temp can be shared for all the places this needs to be done.\r\n- [ ] After an evaluation that calls out to user code, the decision dag already saves it to a temp. We should add a hidden sequence point there when the stack is empty.\r\n- [ ] Temps that are used in lowering the decision dag and that need to survive across calls out to user code (i.e. pretty much all of them) should be classified as long-lived.\r\n- [ ] Those temps need to be associated with the switch statement's syntax node.\r\n- [ ] For a *switch expression* (a new construct that is an expression form of the switch), in debug, we will need to spill anything that is on the stack at the start of the switch expression, and restore afterwards. Otherwise the stack would not be empty at the sequence points. We may be able to share code with the spilling rewriter currently used to lower async methods.\r\n\r\nGiven that we need to implement spilling for the *switch expression* for debug, we might elect to use spilling to simplify the compiler pipeline in release as well.\r\n\r\n/cc @tmat @dotnet/roslyn-compiler \r\n"},{"Id":"7393793850","Type":"PullRequestEvent","CreatedAt":"2018-03-17T01:52:09","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25515","RelatedDescription":"Merged pull request \"Update progress on C# 7.3\" (#25515) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7393981115","Type":"PullRequestEvent","CreatedAt":"2018-03-17T04:26:12","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5557","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5557) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7393980901","Type":"PullRequestEvent","CreatedAt":"2018-03-17T04:25:58","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5559","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5559) at dotnet/corert","RelatedBody":""},{"Id":"7393976403","Type":"PullRequestEvent","CreatedAt":"2018-03-17T04:21:42","Actor":"jcouv","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5561","RelatedDescription":"Opened pull request \"[WIP] Automate building and running ILVerification tests\" (#5561) at dotnet/corert","RelatedBody":"I'm trying to get the ILVerification tests run as part of CI.\r\n\r\nSo far, I'm able to get `SwitchTests.il` file to compile into an assembly, and copied to the `ILVerification.Tests` output folder, when the test project is built (ie. running `msbuild /v:m /m ILVerification.Tests.csproj /target:Restore` and `msbuild /v:m /m ILVerification.Tests.csproj /target:Build`, or building in VS).\r\n\r\nThen I'm able to run the IL verification tests that assembly with `dotnet xunit.console.netcore.exe ILVerification.Tests.dll`\r\n\r\nTwo questions for @MichalStrehovsky and ILVerify crew:\r\n- Would you know how to get the xunit binaries placed to the output folder (like `TypeSystem.Tests` does)? Currently, the test output folder only contains the files shown below.\r\n- Would you know how to hook this invocation of xunit to the CI test process?\r\n\r\n![image](https://user-images.githubusercontent.com/12466233/37551600-ea0c8de0-295f-11e8-9888-6b249f6009f7.png)"},{"Id":"7393713185","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:57:14","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5551","RelatedDescription":"Closed pull request \"Update marvin version with Span one and move to shared\" (#5551) at dotnet/corert","RelatedBody":"Contributes to https://github.com/dotnet/coreclr/pull/16945"},{"Id":"7393705394","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:52:17","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5560","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5560) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7393687743","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:41:37","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5560","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5560) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7393634916","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:13:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5559","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5559) at dotnet/corert","RelatedBody":""},{"Id":"7393483380","Type":"PullRequestEvent","CreatedAt":"2018-03-16T23:09:31","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5558","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5558) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7393436139","Type":"PullRequestEvent","CreatedAt":"2018-03-16T22:52:05","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5558","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5558) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7393395291","Type":"PullRequestEvent","CreatedAt":"2018-03-16T22:37:33","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5557","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5557) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7392972274","Type":"PullRequestEvent","CreatedAt":"2018-03-16T20:42:01","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5556","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5556) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7392450624","Type":"PullRequestEvent","CreatedAt":"2018-03-16T18:42:34","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5556","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5556) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7392374020","Type":"PullRequestEvent","CreatedAt":"2018-03-16T18:26:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5542","RelatedDescription":"Merged pull request \"[Linux] Implement generation dwarf debuginfo for types and vars\" (#5542) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7393674586","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:34:03","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2039","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-preview1.4982 into sdk\" (#2039) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-preview1.4982 into sdk release/2.1.2xx branch"},{"Id":"7393532481","Type":"PullRequestEvent","CreatedAt":"2018-03-16T23:28:48","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2040","RelatedDescription":"Merged pull request \"Support filtering satellite assemblies from publish via SatelliteResourceLanguages property\" (#2040) at dotnet/sdk","RelatedBody":"Fixes #774\r\n\r\nThanks to @wli3 for pairing on this."},{"Id":"7393487364","Type":"IssuesEvent","CreatedAt":"2018-03-16T23:11:03","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2061","RelatedDescription":"Opened issue \"Instead of generating an error saying a 2.x SDK is needed, we generate an error loading the NETBuildExtensionsError task\" (#2061) at dotnet/sdk","RelatedBody":"# Repro steps\r\n\r\nCheck out the `build_fail` branch of https://github.com/multiarc/SDKRepro/\r\n\r\nBuild with full Framework MSBuild:\r\n\r\n`msbuild /restore`\r\n\r\n# Expected\r\n\r\nError message: The version of Microsoft.NET.Sdk used by this project is insufficient to support references to libraries targeting .NET Standard 1.5 or higher.  Please install version 2.0 or higher of the .NET Core SDK.\r\n\r\n# Actual\r\n\r\nError message:\r\n\r\n> C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.NETFramework.targets(65,5): error MSB4062: The \"NETBuildExtensionsError\" task could not be loaded from the assembly C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\\\tools\\net46\\Microsoft.NET.Build.Extensions.Tasks.dll.  Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [C:\\git\\repro\\2045-Pagination\\src\\A\\A.csproj]\r\n>\r\n> C:\\Program Files\\dotnet\\sdk\\1.1.7\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets(92,5): Cannot find project info for 'C:\\git\\repro\\2045-Pagination\\src\\B\\B.csproj'. This can indicate a missing project reference. [C:\\git\\repro\\2045-Pagination\\src\\A\\A.csproj]\r\n\r\n# Root cause\r\n\r\nMicrosoft.NET.Build.Extensions.Tasks.dll no longer includes the `NETBuildExtensionsError` task.  Instead it includes the `NETSdkError` task.  This is because the `DefineConstants` property in the project is no longer applying because it was moved before the `Sdk.props` import, and there is a `DefineConstants` in repo toolset that is overriding it.\r\n\r\n# Meme\r\n\r\n![image](https://user-images.githubusercontent.com/145043/37548198-77a0bbe0-2933-11e8-8af4-4b48dda6ebac.png)\r\n"},{"Id":"7393090287","Type":"PullRequestEvent","CreatedAt":"2018-03-16T21:10:15","Actor":"ericstj","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2060","RelatedDescription":"Opened pull request \"Fix package override resolver desktop\" (#2060) at dotnet/sdk","RelatedBody":"In desktop projects the PackageOverrideResolver was throwing ArgumentNullException due to \r\none item coming from a package and the other not.\r\n\r\nMoreover I noticed that the one that was thought to come from a package was actually a platform item\r\nand the reason we thought it came from a package was that I had a *.nuspec in the root of the drive where I was building from.\r\n\r\nWe need tests to cover these cases.\r\n\r\nFixes #1854"},{"Id":"7392911058","Type":"PullRequestEvent","CreatedAt":"2018-03-16T20:27:48","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2059","RelatedDescription":"Opened pull request \"Merge master into release/2.1.3xx\" (#2059) at dotnet/sdk","RelatedBody":"This was a clean merge."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"974694823067246592","CreatedAt":"2018-03-16T17:12:09+00:00","UserScreenname":"dotnet","Text":"Check out the latest On .NET show with @jeremylikness &amp; @jplane talking .NET Core and containers. #dotnetcore https://t.co/NfFbKIsLTw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":27,"FavoriteCount":11,"RawContent":null},{"Id":"974414421245095936","CreatedAt":"2018-03-15T22:37:56+00:00","UserScreenname":"dotnet","Text":"Transport Layer Security (TLS) best practices with the .NET Framework article published https://t.co/SbAZXvK8n7 #security","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":174,"FavoriteCount":88,"RawContent":null},{"Id":"974274431127302145","CreatedAt":"2018-03-15T13:21:40+00:00","UserScreenname":"dotnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/WyBUY4oGYv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":6,"FavoriteCount":6,"RawContent":null},{"Id":"974176533270036480","CreatedAt":"2018-03-15T06:52:39+00:00","UserScreenname":"dotnet","Text":"Exciting news! https://t.co/wgCtuUTXcr","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":67,"FavoriteCount":33,"RawContent":null}]}},"RunOn":"2018-03-17T05:30:20.1319159Z","RunDurationInMilliseconds":8154}