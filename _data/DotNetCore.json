{"Data":{"Blog":{"FeedItems":[{"Title":"An Introduction to DataFrame","PublishedOn":"2019-12-16T16:00:04+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Last month, we announced .NET support for Jupyter notebooks, and showed how to use them to work with .NET for Apache Spark and ML.NET. Today, we&#8217;re announcing the preview of a DataFrame type for...","Href":"https://devblogs.microsoft.com/dotnet/an-introduction-to-dataframe/","RawContent":null},{"Title":"ConfigureAwait FAQ","PublishedOn":"2019-12-12T04:31:21+00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET added async/await to the languages and libraries over seven years ago. In that time, it&#8217;s caught on like wildfire, not only across the .NET ecosystem, but also being replicated in a myriad...","Href":"https://devblogs.microsoft.com/dotnet/configureawait-faq/","RawContent":null},{"Title":"An Introduction to System.Threading.Channels","PublishedOn":"2019-12-12T03:52:18+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"&#8220;Producer/consumer&#8221; problems are everywhere, in all facets of our lives. A line cook at a fast food restaurant, slicing tomatoes that are handed off to another cook to assemble a burger,...","Href":"https://devblogs.microsoft.com/dotnet/an-introduction-to-system-threading-channels/","RawContent":null},{"Title":".NET Framework December 2019 Security and Quality Rollup","PublishedOn":"2019-12-10T21:39:52+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the December 2019 Security and Quality Rollup Updates for .NET Framework.\nSecurity\nNo new security fixes. See September 2019 Security and Quality Rollup for the latest security...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-december-2019-security-and-quality-rollup/","RawContent":null},{"Title":"We made Windows Server Core container images >40% smaller","PublishedOn":"2019-12-09T21:50:23+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Over the past year, we&#8217;ve been working with the Windows Server team to make Windows Server Core container images a lot smaller. They are now 40% smaller! The Windows Server team has already...","Href":"https://devblogs.microsoft.com/dotnet/we-made-windows-server-core-container-images-40-smaller/","RawContent":null},{"Title":"GC Perf Infrastructure – Part 1","PublishedOn":"2019-12-09T09:33:32+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We open sourced our new GC Perf Infrastructure! It’s now part of the dotnet performance repo. I’ve been meaning to write about it ‘cause some curious minds had been asking when they could use it after...","Href":"https://devblogs.microsoft.com/dotnet/gc-perf-infrastructure-part-1/","RawContent":null},{"Title":".NET Core 2.2 will reach End of Life on December 23, 2019","PublishedOn":"2019-12-05T19:55:57+00:00","CommentsCount":6,"FacebookCount":0,"Summary":".NET Core 2.2 was released on December 4, 2018. As a non-LTS (&#8220;Current&#8221;) release, it is supported for three months after the next release. .NET Core 3.0 was released on September 23, 2019....","Href":"https://devblogs.microsoft.com/dotnet/net-core-2-2-will-reach-end-of-life-on-december-23-2019/","RawContent":null},{"Title":"Updates to .NET Core Windows Forms designer in Visual Studio 16.5 Preview 1","PublishedOn":"2019-12-05T18:56:40+00:00","CommentsCount":50,"FacebookCount":0,"Summary":"We are happy to announce the new preview version of the .NET Core Windows Forms designer, which is available with the Visual Studio 16.5 Preview 1.\nThe big news is that the designer is now part of...","Href":"https://devblogs.microsoft.com/dotnet/updates-to-net-core-windows-forms-designer-in-visual-studio-16-5-preview-1/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.1 and Entity Framework 6.4","PublishedOn":"2019-12-03T20:32:00+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Announcing Entity Framework Core 3.1 and Entity Framework 6.4\nWe are excited to announce the general availability of EF Core 3.1 and EF 6.4 on nuget.org.\nThe final versions of .NET Core 3.1 and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-1-and-entity-framework-6-4/","RawContent":null},{"Title":"Announcing .NET Core 3.1","PublishedOn":"2019-12-03T17:32:24+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Announcing .NET Core 3.1\nWe’re excited to announce the release of .NET Core 3.1. It&#8217;s really just a small set of fixes and refinements over .NET Core 3.0, which we released just over two months...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"11190129717","Type":"PullRequestEvent","CreatedAt":"2020-01-02T11:42:33","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/157","RelatedDescription":"Opened pull request \"Link to new github repo\" (#157) at dotnet/foundation","RelatedBody":""},{"Id":"11108512890","Type":"PullRequestEvent","CreatedAt":"2019-12-17T15:52:33","Actor":"khalidabuhakmeh","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/156","RelatedDescription":"Opened pull request \"Update Teams Link\" (#156) at dotnet/foundation","RelatedBody":"Was `https://dotnetfoundation.org/team` but now is `https://dotnetfoundation.org/about#team`"},{"Id":"10879854793","Type":"IssuesEvent","CreatedAt":"2019-11-17T05:53:48","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/155","RelatedDescription":"Opened issue \"Typos in CLA bot profile\" (#155) at dotnet/foundation","RelatedBody":"https://github.com/dnfclas\r\n\r\n## Expected\r\n\r\n![image](https://user-images.githubusercontent.com/45985406/69003693-983ed400-0941-11ea-91d9-18c29e752b81.png)\r\n\r\n## Actual\r\n\r\n![image](https://user-images.githubusercontent.com/45985406/69003652-ec958400-0940-11ea-8239-f9b19a7dc957.png)\r\n\r\nAlways capitalized, never .Net or dot NET. \r\n\r\n[.NET Glossary](https://github.com/dotnet/docs/blob/master/docs/standard/glossary.md#net)\r\n\r\n[Microsoft Style Guide](https://github.com/MicrosoftDocs/microsoft-style-guide/blob/master/styleguide/a-z-word-list-term-collections/n/net.md)"},{"Id":"10878192098","Type":"PullRequestEvent","CreatedAt":"2019-11-16T15:59:12","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/154","RelatedDescription":"Opened pull request \"Fix broken links\" (#154) at dotnet/foundation","RelatedBody":""},{"Id":"10864162405","Type":"PullRequestEvent","CreatedAt":"2019-11-14T16:22:28","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/153","RelatedDescription":"Opened pull request \"Fix broken links\" (#153) at dotnet/foundation","RelatedBody":""},{"Id":"10863953091","Type":"PullRequestEvent","CreatedAt":"2019-11-14T16:00:24","Actor":"NextTurn","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/152","RelatedDescription":"Opened pull request \"Fix broken links\" (#152) at dotnet/foundation","RelatedBody":""},{"Id":"10823146740","Type":"PullRequestEvent","CreatedAt":"2019-11-08T23:32:03","Actor":"onovotny","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/151","RelatedDescription":"Merged pull request \"Update RxUI license to reflect repo\" (#151) at dotnet/foundation","RelatedBody":"Fixes https://github.com/dotnet-foundation/dotnetfoundation-website/issues/68"},{"Id":"10822052136","Type":"PullRequestEvent","CreatedAt":"2019-11-08T20:13:07","Actor":"onovotny","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/151","RelatedDescription":"Opened pull request \"Update RxUI license to reflect repo\" (#151) at dotnet/foundation","RelatedBody":""},{"Id":"10806560653","Type":"PullRequestEvent","CreatedAt":"2019-11-07T05:43:05","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Merged pull request \"(GH-111) Update Source Link location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"10806557022","Type":"PullRequestEvent","CreatedAt":"2019-11-07T05:42:14","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Merged pull request \"Add new Cake Maintainer\" (#150) at dotnet/foundation","RelatedBody":""},{"Id":"10806555226","Type":"PullRequestEvent","CreatedAt":"2019-11-07T05:41:48","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Merged pull request \"Add ImageSharp\" (#149) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11214612804","Type":"IssuesEvent","CreatedAt":"2020-01-06T23:02:39","Actor":"vivmishra","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/147","RelatedDescription":"Opened issue \".NET Core 2.2 has reached end of life\" (#147) at dotnet/announcements","RelatedBody":"[.NET Core 2.2 reached end of life](https://devblogs.microsoft.com/dotnet/net-core-2-2-will-reach-end-of-life-on-december-23-2019/) on **December 23, 2019**. This means [.NET Core 2.2](https://devblogs.microsoft.com/dotnet/announcing-net-core-2-2/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 3.1](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 3.1](https://www.microsoft.com/net/download/dotnet-core/3.1)\r\n- [.NET Core 2.2 end-of-life statement](https://devblogs.microsoft.com/dotnet/net-core-2-2-will-reach-end-of-life-on-december-23-2019/)\r\n\r\nWe've created an issue at [dotnet/core#4084](https://github.com/dotnet/core/issues/4084) for your questions and comments.\r\n\r\n## .NET Core 2.2 Lifecycle\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n[.NET Core 2.2](https://devblogs.microsoft.com/dotnet/announcing-net-core-2-2/) was released in December 2018 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). **.NET Core 3.0** released in **September 2019** and began the end of life countdown for .NET Core 2.2 that concluded on December 23, 2019. \r\n\r\n## .NET Core 2.2 Downloads\r\n\r\n.NET Core 2.2 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.2, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n"},{"Id":"11137901850","Type":"IssuesEvent","CreatedAt":"2019-12-20T20:42:34","Actor":"vivmishra","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/146","RelatedDescription":"Opened issue \"Announcing Availability of Localized IntelliSense for .NET Core 3.0 and 3.1\" (#146) at dotnet/announcements","RelatedBody":"This week we released localized [IntelliSense](https://docs.microsoft.com/en-us/visualstudio/ide/using-intellisense?view=vs-2019) files for .NET Core 3.0 and 3.1, in following 10 Visual Studio supported languages: \r\n- Brazilian Portuguese\r\n- Chinese (simplified)\r\n- Chinese (traditional)\r\n- French\r\n- German\r\n- Italian\r\n- Japanese\r\n- Korean\t\r\n- Russian\r\n- Spanish\r\n\r\nThe files (in zip archives) are available for download from [**Download localized .NET Core IntelliSense files**](https://dotnet.microsoft.com/download/dotnet-core/intellisense).\r\n\r\n * [Checksums for 3.0 zip files](https://dotnetcli.blob.core.windows.net/dotnet/checksums/3.0.0-intellisense-sha.txt)\r\n * [Checksums for 3.1 zip files](https://dotnetcli.blob.core.windows.net/dotnet/checksums/3.1.0-intellisense-sha.txt)\r\n\r\nYou can see [the .NET Core Guide](https://aka.ms/dotnet-core-intellisense) for instructions on how to use these files with Visual Studio.\r\n\r\nBy default, when you're developing .NET Core projects, the SDK only includes the English version of the IntelliSense files. But now you can enhance your localized Visual Studio development experience by adding the localized IntelliSense files from the download site into your local development environment.\r\n\r\nLastly, with this release we have made the localized IntelliSense available as zip archives that does require you to manually extract and copy the files to respective SDK install folders. But we plan to make this experience better in future releases.\r\n\r\n## Discussion\r\nTo discuss this issue, please comment on the corresponding issue at [dotnet/core #4032](https://github.com/dotnet/core/issues/4032).\r\n"},{"Id":"11059014848","Type":"IssuesEvent","CreatedAt":"2019-12-10T22:29:30","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/145","RelatedDescription":"Opened issue \"December 2019 .NET Updates\" (#145) at dotnet/announcements","RelatedBody":"The following .NET updates were released on November 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework December 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-december-2019-security-and-quality-rollup/ )\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"11050403011","Type":"IssuesEvent","CreatedAt":"2019-12-10T03:08:33","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/144","RelatedDescription":"Opened issue \"Removal of read-collaborator access\" (#144) at dotnet/announcements","RelatedBody":"***TL;DR**: We’ll remove collaborators with read-only access from our public repos on December 16th. This means some folks will lose their Collaborator badge and the ability to interact with the CI system.*\r\n\r\nOver the years, we’ve added a bunch of folks as collaborators with read permissions to our public repos. The rationale was that we wanted to be able to assign issues to community members because GitHub only allowed assigning issues to users with an explicit permission grant for the repository. However, they changed this in [June 2019](https://github.blog/2019-06-25-assign-issues-to-issue-commenters/). Now, we can assign issues to all users with explicit permissions as well as to users that have commented on the specific issue.\r\n\r\nAlso, we recently started to audit and tighten the permissions for our organizations. As a result, it became clear that large number of repo-specific permission grants are hard to review and audit. Internally, our goal is to grant all permissions via teams instead.\r\n\r\nHence, we plan to remove all collaborators from public repos that only have read permissions (folks with triage permissions will remain). The full list of affected repos is listed below.\r\n\r\nThis shouldn’t impact your ability to work with us, but losing explicit read-only has the following implications:\r\n\r\n-   **You’ll lose the contributor badge**. We understand that this is visually appealing and for some people it might have been a badge of honor. But given that GitHub also shows a Contributor bade for folks whose PRs got merged, we don’t think it this will be a major take back.    \r\n    ![image](https://user-images.githubusercontent.com/5169960/70491508-43acf580-1ab6-11ea-94df-74ea2dde98b4.png)\r\n\r\n\r\n-   **You lose the ability to interact with the CI system**. As a collaborator, you can use comments to [send commands to the CI system](https://github.com/dotnet/runtime/blob/master/docs/project/pullrequest-builds.md). While this can be useful at times, we generally don’t expect (or desire) contributors to do that. Of course, anyone can still access the CI logs.\r\n\r\n| Public Repo                | \\#collaborators with read |\r\n|----------------------------|---------------------------|\r\n| arcade                     | 1                         |\r\n| BenchmarkDotNet            | 11                        |\r\n| cli                        | 2                         |\r\n| command-line-api           | 14                        |\r\n| coreclr                    | 18                        |\r\n| corefx                     | 180                       |\r\n| corefxlab                  | 4                         |\r\n| corert                     | 7                         |\r\n| core-sdk                   | 1                         |\r\n| docs                       | 3                         |\r\n| interactive-window         | 1                         |\r\n| machinelearning            | 1                         |\r\n| machinelearning-samples    | 1                         |\r\n| msbuild-language-service   | 1                         |\r\n| runtime                    | 128                       |\r\n| spark                      | 5                         |\r\n| standard                   | 1                         |\r\n| windowsdesktop             | 1                         |\r\n| winforms-datavisualization | 1                         |\r\n| Grand Total                | 381                       |\r\n\r\n### Discussion\r\n\r\nTo discuss this, please comment on the corresponding issue at https://github.com/dotnet/runtime/issues/718."},{"Id":"11003471296","Type":"IssuesEvent","CreatedAt":"2019-12-03T20:36:30","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/143","RelatedDescription":"Opened issue \".NET Core `latest` Docker tags updated to 3.1\" (#143) at dotnet/announcements","RelatedBody":"# .NET Core `latest` Docker tags updated to 3.1\r\n\r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.1](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/).\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1511)\r\n\r\n## Details\r\n\r\n* [dotnet-docker#1509](https://github.com/dotnet/dotnet-docker/pull/1509)\r\n\r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.1. This version of .NET Core is also a [long-term supported (LTS) release](https://dotnet.microsoft.com/platform/support/policy/dotnet-core).\r\n\r\nThe following Docker repos have been updated:\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n\r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.1`."},{"Id":"11002231262","Type":"IssuesEvent","CreatedAt":"2019-12-03T18:00:28","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/142","RelatedDescription":"Opened issue \".NET Core 3.1.0\" (#142) at dotnet/announcements","RelatedBody":".NET Core 3.1.0 is available and https://github.com/dotnet/core/issues/3950 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.0.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 , either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"11252502040","Type":"IssuesEvent","CreatedAt":"2020-01-11T09:11:27","Actor":"stoichammer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27988","RelatedDescription":"Closed issue \"andra\" (#27988) at dotnet/coreclr","RelatedBody":""},{"Id":"11252500898","Type":"IssuesEvent","CreatedAt":"2020-01-11T09:10:54","Actor":"stoichammer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27988","RelatedDescription":"Opened issue \"andra\" (#27988) at dotnet/coreclr","RelatedBody":""},{"Id":"11252430611","Type":"IssuesEvent","CreatedAt":"2020-01-11T08:35:17","Actor":"Kevin920920","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27987","RelatedDescription":"Opened issue \"BUILD: Error: Failed to generate version headers . And System.TimeoutException\" (#27987) at dotnet/coreclr","RelatedBody":"E:\\Downloads\\coreclr-3.1.0>build.cmd\r\nBUILD: Starting Build at 15:58:14.03\r\nBUILD: Searching for Visual Studio 2017 or later installation\r\nBUILD: \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\VsDevCmd.bat\"\r\n**********************************************************************\r\n** Visual Studio 2019 Developer Command Prompt v16.4.1\r\n** Copyright (c) 2019 Microsoft Corporation\r\n**********************************************************************\r\nBUILD: Commencing CoreCLR product build\r\nBUILD: Checking prerequisites\r\nBUILD: Number of processor cores 4\r\n  未能从“https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.compilers.toolset/3.3.0-beta2-19367-02/microsoft.net.compilers.toolset.3.3.0-beta2-19367-02.nupkg”下载包“Microsoft.Net.Compilers.Toolset.3.3.0-beta2-19367-02”。\r\n  由于在 60000 毫秒内未接收到数据，“https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.compilers.toolset/3.3.0-beta2-19367-02/microsoft.net.compilers.toolset.3.3.0-beta2-19367-02.nupkg”的下载超时。\r\n    Exception of type 'System.TimeoutException' was thrown.\r\n  未能从“https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.compilers.toolset/3.3.0-beta2-19367-02/microsoft.net.compilers.toolset.3.3.0-beta2-19367-02.nupkg”下载包“Microsoft.Net.Compilers.Toolset.3.3.0-beta2-19367-02”。\r\n  The SSL connection could not be established, see inner exception.\r\n    Unable to read data from the transport connection: 远程主机强迫关闭了一个现有的连接。.\r\n    远程主机强迫关闭了一个现有的连接。\r\n  E:\\Downloads\\coreclr-3.1.0\\eng\\empty.csproj 的还原在 17.91 min 内完成。\r\nE:\\Downloads\\coreclr-3.1.0\\.packages\\microsoft.build.tasks.git\\1.0.0-beta2-19367-01\\build\\Microsoft.Build.Tasks.Git.targets(24,5): error : 无法定位包含目录 'E:\\Downloads\\coreclr-3.1.0\\eng' 的存储库。 [E:\\Downloads\\coreclr-3.1.0\\eng\\empty.csproj]\r\nE:\\Downloads\\coreclr-3.1.0\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19461.7\\tools\\Version.targets(53,5): error : SourceRevisionId is not set, which means the SourceLink targets are not included in the build. Those are needed to produce a correct sha for our build outputs. [E:\\Downloads\\coreclr-3.1.0\\eng\\empty.csproj]\r\n\r\n生成失败。\r\n\r\nE:\\Downloads\\coreclr-3.1.0\\.packages\\microsoft.build.tasks.git\\1.0.0-beta2-19367-01\\build\\Microsoft.Build.Tasks.Git.targets(24,5): error : 无法定位包含目录 'E:\\Downloads\\coreclr-3.1.0\\eng' 的存储库。 [E:\\Downloads\\coreclr-3.1.0\\eng\\empty.csproj]\r\nE:\\Downloads\\coreclr-3.1.0\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19461.7\\tools\\Version.targets(53,5): error : SourceRevisionId is not set, which means the SourceLink targets are not included in the build. Those are needed to produce a correct sha for our build outputs. [E:\\Downloads\\coreclr-3.1.0\\eng\\empty.csproj]\r\n    0 个警告\r\n    2 个错误\r\n\r\n已用时间 00:17:55.82\r\nBuild failed.\r\nBUILD: Error: Failed to generate version headers."},{"Id":"11252395383","Type":"IssuesEvent","CreatedAt":"2020-01-11T08:16:58","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27978","RelatedDescription":"Closed issue \"How can I use some headers in gc.cpp.\" (#27978) at dotnet/coreclr","RelatedBody":"Hello.\r\nI forked coreclr code and added some test code in it to analyze gc behavior.\r\nbut I can't use #include <dlfcn.h> in it. (Exactly in coreclr/src/gc/gc.cpp)\r\nTo solve this problem, I edited CmakeLists files many times (Adding target_link_libraries dl and so on)\r\nbut I fail to build coreclr with my code.\r\n\r\nhow can I use #include <dlfcn.h> in gc.cpp?\r\nI have to use dlopen and dlsym for my test.\r\n\r\nI would be really grateful if someone let me know.\r\nThank you."},{"Id":"11251021309","Type":"PullRequestEvent","CreatedAt":"2020-01-10T22:44:50","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27986","RelatedDescription":"Opened pull request \"Port of dotnet/runtime#1059 to 3.1 branch\" (#27986) at dotnet/coreclr","RelatedBody":"This is the fix for #27924. This is a GC hole bug that was found externally, #27590.\r\nThe cause is that the JIT was using the target type of the subtract when it needed\r\nto make a copy of the source, but it needs to use the source type.\r\n\r\n## Customer Impact\r\nCorruption of state that is non-deterministic and hard to track down.\r\n\r\n## Regression?\r\nNot a recent regression, but exposed by Unsafe.ByteOffset.\r\n\r\n## Testing\r\nThe fix has been verified in the runtime repo.\r\n\r\n## Risk\r\nLow: The fix is straightfoward and only impacts 3 lines of code."},{"Id":"11250679341","Type":"IssuesEvent","CreatedAt":"2020-01-10T21:43:00","Actor":"TimLovellSmith","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16307","RelatedDescription":"Closed issue \"ExecutionContext.SuppressFlow() suppression state does not flow\" (#16307) at dotnet/coreclr","RelatedBody":"Hi,\r\nI have been wrestling with behavior of ExecutionContext.SuppressFlow() when combined with await/async. I have slowly come to believe the current behavior (in .net version I'm using at least) is flawed. Here is the problem.\r\n\r\nBecause ExecutionContext does not come for free, and saving/restoring it has measurable overheads,\r\nI think it is a good idea for me to suppress the ExecutionContext flow in a method I have which loops for a long time and happens to be implemented as async. I.e. something like this\r\n\r\n```\r\nasync void ReadWriteLoop()\r\n{\r\n    ExecutionContext.SuppressFlow();\r\n    while (true)\r\n    {\r\n         await AsyncCallNumberOne();\r\n         await AsyncCallNumberTwo();\r\n         await AsyncCallNumberThree();\r\n    }\r\n}\r\n\r\nasync Task AsyncCallNumberOne()\r\n{\r\n    await AsyncCallNumberFour();\r\n    await AsyncCallNumberFive();\r\n}\r\n```\r\n\r\nHowever, the observed behavior of this code is that after each async call, `ExecutionContext.IsFlowSuppressed()` might return `false`.\r\nThis presents a problem. The only way I can definitely get ExecutionContext to be suppressed for this entire logical execution flow is by peppering suppress calls everywhere:\r\n\r\n```\r\nvoid EnsureSuppressed() { If (!ExecutionContext.IsFlowSuppressed()) ExecutionContext.SuppressFlow(); }\r\n\r\nasync void ReadWriteLoop()\r\n{\r\n    while (true)\r\n    {\r\n         EnsureSuppressed();\r\n         await AsyncCallNumberOne();\r\n         EnsureSuppressed();\r\n         await AsyncCallNumberTwo();\r\n         EnsureSuppressed();\r\n         await AsyncCallNumberThree();\r\n    }\r\n}\r\n\r\nasync Task AsyncCallNumberOne()\r\n{\r\n    Debug.Assert(ExecutionContext.IsFlowSuppressed(), \"we know it is suppressed by the caller... in this case\");\r\n    await AsyncCallNumberFour();\r\n    EnsureSuppressed();\r\n    await AsyncCallNumberFive();\r\n}\r\n```\r\nI.e. the observed behavior is that while the _execution context_ successfully is suppressed, and we resume execution without restoring the execution context, the _suppression state_  is not restored, requiring us to suppress execution context all over again in order to get it really suppressed.\r\n\r\nThis doesn't seem good. Calling ExecutionConext.IsFlowSuppressed() and ExecutionContext.SuppressFlow() like this isn't free in either lines of code nor CPU and memory!\r\n\r\nThe behavior I actually believe should happen is that the _suppression state_ should be preserved around the async call, meaning there need be no further calls to EnsureSuppressed();\r\n\r\nThat would better fulfil what I believe the _intent_ of ExecutionContext.SuppressFlow() is: to suppress flow of the entire context for the current 'logical execution operation'.\r\n\r\nAnd then it also might be feasible to undo the suppression correctly (currently it seems like it is a conceptual mess to do this!)"},{"Id":"11243101023","Type":"PullRequestEvent","CreatedAt":"2020-01-10T01:45:52","Actor":"AntonLapounov","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27985","RelatedDescription":"Opened pull request \"[3.1 port] Fix GC heap corruption on ARM\" (#27985) at dotnet/coreclr","RelatedBody":"Port of dotnet/runtime#1389 to 3.1 branch.  Applications may crash in GC code due to GC heap corruption caused by incorrect padding size calculation on ARM.\r\n\r\n## Customer Impact\r\nUnexpected and hard to diagnose crashes.\r\n\r\n## Regression?\r\nNo.\r\n\r\n## Testing\r\nThe fix has been verified in the runtime repo.\r\n\r\n## Risk\r\nLow: one-line fix of the incorrect calculation."},{"Id":"11242987303","Type":"PullRequestEvent","CreatedAt":"2020-01-10T01:18:37","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27984","RelatedDescription":"Opened pull request \"Port PR #258 to 3.1\" (#27984) at dotnet/coreclr","RelatedBody":""},{"Id":"11241671288","Type":"PullRequestEvent","CreatedAt":"2020-01-09T21:16:48","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27983","RelatedDescription":"Opened pull request \"Port fix for #1241 to 3.1\" (#27983) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"11244406586","Type":"PullRequestEvent","CreatedAt":"2020-01-10T07:00:52","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13170","RelatedDescription":"Merged pull request \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13170) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Subscription**: bdd984ca-7112-4d1b-d452-08d76e1d3434\r\n- **Build**: 20200109.2\r\n- **Date Produced**: 1/9/2020 11:11 PM\r\n- **Commit**: b3cf8ef9e7df8d9cb28b3545ce1f85f548deca75\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.20059.2\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n"},{"Id":"11244150464","Type":"PullRequestEvent","CreatedAt":"2020-01-10T06:08:26","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/13166","RelatedDescription":"Closed pull request \"[WIP] test CI\" (#13166) at dotnet/cli","RelatedBody":""},{"Id":"11242736740","Type":"PullRequestEvent","CreatedAt":"2020-01-10T00:20:13","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13170","RelatedDescription":"Opened pull request \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13170) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Subscription**: bdd984ca-7112-4d1b-d452-08d76e1d3434\r\n- **Build**: 20200109.2\r\n- **Date Produced**: 1/9/2020 11:11 PM\r\n- **Commit**: b3cf8ef9e7df8d9cb28b3545ce1f85f548deca75\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.20059.2\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n"},{"Id":"11232473996","Type":"PullRequestEvent","CreatedAt":"2020-01-08T22:05:35","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/13169","RelatedDescription":"Merged pull request \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13169) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20200108.1\r\n- **Date Produced**: 1/8/2020 8:08 PM\r\n- **Commit**: 7a8c66ba63c88ffb13e509e46c5b83398a928683\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.20058.1\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n"},{"Id":"11232226273","Type":"PullRequestEvent","CreatedAt":"2020-01-08T21:30:16","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/13169","RelatedDescription":"Opened pull request \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13169) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20200108.1\r\n- **Date Produced**: 1/8/2020 8:08 PM\r\n- **Commit**: 7a8c66ba63c88ffb13e509e46c5b83398a928683\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.20058.1\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"11252158974","Type":"IssuesEvent","CreatedAt":"2020-01-11T06:11:33","Actor":"replaysMike","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1679","RelatedDescription":"Opened issue \"UTF8 Encoding isn't consistent with .Net Framework\" (#1679) at dotnet/standard","RelatedBody":"I found a subtle difference that was revealed in a bunch of hashing code I had written a while back for .Net Framework. I wrote a multi-platform test that shows UTF8Encoding is treated slightly different in .Net Standard and I don't really have a good way to solve it yet.\r\n\r\nConsider the following - I encoded a string in hex to guarantee the bytes are the same for the test, hopefully github doesn't mangle the expected string:\r\n\r\n```csharp\r\n[Test]\r\npublic void ShouldEncodeUTF8()\r\n{\r\n    var netFrameworkExpected = \"�\\u0004[\\u0004�\\u0001�\\v,�\\u001cn]�$«�� )�:�YH̗I5�V���Nl7α��i�g_�ZQW%\\u001d�Dy\\u001eЕ\\u0013w�v+\\u0012*��\\u000f*��\\u0019r��}���8��w��&�\\r���\\f����?���&�t�M��[�`kzhz9\\u0015�\\u0012I�\\u001ey_`�\\u0011\\tF��A�Af~��q��%P�����\\u0003�x�(g���e\\u001fM�32\\u0014��\";\r\n    var hex = \"BC045B0488019F0B2CE61C6E5DFC24C2ABE09BDA2029CC3AE9AD5948CC9749359756B1A2D94E6C37CEB189D269AA675FF75A5157251D8544791ED09513779B762B122A89E10F2A98E91972D7CA7DF9F98038DFDB779FED269A0DE3F8FA0C828993B23F85B5A826B474E84DFECD5B87606B7A687A3915C31249CE1E795F609A11094686DF41E99041667E9DD271A0E22550FDD0C3CEF0039678F328679B8590651F4DBE3332148DBA\";\r\n    var bytes = hex.HexToBytes();\r\n    var utf8Encoded = Encoding.UTF8.GetString(bytes);\r\n    Assert.AreEqual(netFrameworkExpected, utf8Encoded);\r\n}\r\n\r\npublic static byte[] HexToBytes(this string hexString)\r\n{\r\n    return Enumerable.Range(0, hexString.Length)\r\n        .Where(x => x % 2 == 0)\r\n        .Select(x => Convert.ToByte(hexString.Substring(x, 2), 16))\r\n        .ToArray();\r\n}\r\n```\r\n\r\nThis test will pass on .Net Framework 4.8, but will fail on .Net Standard 2.0"},{"Id":"11249611676","Type":"IssuesEvent","CreatedAt":"2020-01-10T18:55:55","Actor":"MikeKenyon","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1678","RelatedDescription":"Opened issue \"System.Uri decoding automatically and incorrectly\" (#1678) at dotnet/standard","RelatedBody":"Consider the following block:\r\n\r\n```\r\n            var uri = new Uri($\"https://sample.com/api/go?o=Presentation%20of%20%E2%80%9CGreen%E2%80%9D%20data\");\r\n            var original = uri.OriginalString;\r\n            var modified = uri.ToString();\r\n```\r\n\r\nThe URL contains contents that are not necessarily valid ASCII characters.  In this regard, the modified version of the string shows the content there decoded, while the original (as provided) contains encoded versions of those.\r\n\r\nThis is important because a number of uses for a URL require them to comply to with, [HTTP Headers](https://tools.ietf.org/html/rfc7230#section-3.2.4) for example.  The URI provided was valid as a header.  The URL returned does not.    This comes up when say doing a redirect to it.\r\n\r\nThis can be avoided by using a String to represent the URL location, but that's generally considered a bad practice and anti-pattern.  \r\n\r\nIt would be amazing if we could indicate somehow that while the decoding that gets performed automatically is to be used in such a way that any encryption provided should not be undone.\r\n\r\nI'm thinking a constructor parameter or property."},{"Id":"11233222453","Type":"IssuesEvent","CreatedAt":"2020-01-09T00:24:58","Actor":"Chamberlain91","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1677","RelatedDescription":"Opened issue \"Bug with \"is\" operator on int[] and uint[] via object type reference.\" (#1677) at dotnet/standard","RelatedBody":"Hello developers,\r\n\r\nI've discovered what I believe to be a bug. In the code below you can see I create two arrays, one of `int` and one of `uint` and assign them both to object. I then check the `is` operator for type comparison.\r\n```cs\r\n            object ai = new int[0];\r\n            object au = new uint[0];\r\n\r\n            Console.WriteLine(ai is uint[]);\r\n            Console.WriteLine(ai is int[]);\r\n            Console.WriteLine(au is uint[]);\r\n            Console.WriteLine(au is int[]);\r\n```\r\nThe output I get is four prints of true, which I would expect only two.\r\n\r\nThe strange thing is if I assign `ai` and `au` to their actual types instead of `object`, then the code works as expected.\r\n\r\nSorry if this should be in the runtime repo or somewhere else."},{"Id":"11228474278","Type":"IssuesEvent","CreatedAt":"2020-01-08T13:45:20","Actor":"sudheer876","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1676","RelatedDescription":"Opened issue \"Severity Code Description Project File Line Suppression State Warning The primary reference \"Microsoft.Xrm.Sdk\" could not be resolved because it was built against the \".NETFramework,Version=v4.6.2\" framework.\" (#1676) at dotnet/standard","RelatedBody":"Severity Code Description Project File Line Suppression State\r\nWarning The primary reference \"Microsoft.Xrm.Sdk\" could not be resolved because it was built against the \".NETFramework,Version=v4.6.2\" framework. This is a higher version than the currently targeted framework \".NETFramework,Version=v4.5.2\".\tCRM\t\t\t\r\n"},{"Id":"11221510706","Type":"IssuesEvent","CreatedAt":"2020-01-07T18:00:20","Actor":"sudheer876","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1675","RelatedDescription":"Opened issue \"Please explain any one early binding and late binding with sample example code\" (#1675) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"11253736415","Type":"IssuesEvent","CreatedAt":"2020-01-11T18:19:35","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/35410","RelatedDescription":"Closed issue \"Change NetworkStream.Socket property from protected to public\" (#35410) at dotnet/corefx","RelatedBody":"NetworkStream currently has a `protected Socket Socket { get; }` that allows a derived type to access the underlying socket.  It's valuable in some situations however for an arbitrary consumer of NetworkStream to have direct access to the Socket, e.g. we need to work around the lack of this in SocketsHttpHandler, which needs to fish out the underlying socket from the stream if at all possible.  We should add some public property for this; if we can't change the visibility of the existing property, we can add a new one.\r\n\r\n**Proposal**\r\n\r\n```C#\r\npublic class NetworkStream\r\n{\r\n    ...\r\n    public Socket Socket { get; } // change existing protected property to be public\r\n    ...\r\n}\r\n```"},{"Id":"11253481429","Type":"IssuesEvent","CreatedAt":"2020-01-11T16:34:57","Actor":"Symbai","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/42616","RelatedDescription":"Closed issue \"API Proposal: String.IsLike\" (#42616) at dotnet/corefx","RelatedBody":"Similar to https://github.com/dotnet/corefx/blob/0e65e923689962f9634b5948d15f995140cc7c93/src/Common/src/System/Text/SimpleRegex.cs#L21 but public and high performance as the linked method is up to 10x slower against own implementations when I tested.\r\n\r\n#### API:\r\n`IsLike(this string input, string pattern, StringComparison mode = StringCoomparison.OrdinalIgnoreCase)`\r\n\r\n#### Usage:\r\n```\r\nstatic string FullName = \"Pablo Alexander Jeff\";\r\nstatic string Version = \"1.0.5.0\";\r\nstatic string LongString = \"And where would you see yourself in five years’ time Mr. Jeffries?\";\r\nstatic string Path = \"C:\\\\Windows\\\\System32\\\\drivers\\\\\";\r\nstatic string IP = \"127.0.0.1\";\r\n\r\nvoid Matches() {\r\n\tif (FullName.IsLike(\"Pablo * Jeff\"))\r\n\t\t//do stuff\r\n\tif (Version.IsLike(\"1.0.*.0\"))\r\n\t\t//do stuff\r\n\tif (LongString.IsLike(\"*you*Jeffries\"))\r\n\t\t//do stuff\r\n\tif (Path.IsLike(TextBox1.Text))\r\n\t\t//do stuff\r\n\tif (IP.IsLike(\"127.*.*.1\"))\r\n\t\t//do stuff\r\n}\r\n```\r\n\r\nThere is a wide range for common scenarios given that Corefx also uses something like this itself. There might be a few things to discuss however:\r\n\r\n- Should it also support `?` for single match too? This is supported on a lot other wild card searches and therefore maybe expected. Or should it only support `*` for match any like in the linked method above?\r\n- Naming of the method"},{"Id":"11253197933","Type":"IssuesEvent","CreatedAt":"2020-01-11T14:40:15","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/42814","RelatedDescription":"Closed issue \"[BUG] .Net Core ArrayPool\" (#42814) at dotnet/corefx","RelatedBody":"I have tried to use Array Pool many times. Every time I used it to create many arrays with big sizes, I encountered a problem. The problem is after a while my deep learning library runs it throws \"System.AccessViolationException HResult=0x80004003 Message=Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\". So, I infer that array pool doesn't work well, because I saw that I couldn't use an array long enough even though I didn't return it. So I implemented two new versions for my performance library. Now it works pretty well. However, I think there is a bug going on with Net core ArrayPool."},{"Id":"11252708311","Type":"IssuesEvent","CreatedAt":"2020-01-11T10:52:12","Actor":"faruknane","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/42814","RelatedDescription":"Opened issue \"[BUG] .Net Core ArrayPool\" (#42814) at dotnet/corefx","RelatedBody":"I have tried to use Array Pool many times. Every time I used it to create many arrays with big sizes, I encountered a problem. The problem is after a while my deep learning library runs it throws \"System.AccessViolationException HResult=0x80004003 Message=Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\". So, I infer that array pool doesn't work well, because I saw that I couldn't use an array long enough even though I didn't return it. So I implemented two new versions for my performance library. Now it works pretty well. However, I think there is a bug going on with Net core ArrayPool."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"11254854464","Type":"IssuesEvent","CreatedAt":"2020-01-12T03:38:18","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/40920","RelatedDescription":"Closed issue \"Cannot find drive. A drive with the name '\"C' does not exist. Cannot find line number in build scripts\" (#40920) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nWindows 10 2019 Enterprise LTSC\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Roslyn 2017 15.9\r\n2. Visual Studio 2017 Enterprise\r\n3. run restore.cmd\r\n\r\n**Expected Behavior**:\r\nrestore complete\r\n**Actual Behavior**:\r\nCannot find drive. A drive with the name '\"C' does not exist.\r\nSystem.Management.Automation.DriveNotFoundException: Cannot find drive. A drive with the name '\"C' does not exist.\r\n   at System.Management.Automation.SessionStateInternal.GetDrive(String name, Boolean automount)\r\n   at System.Management.Automation.SessionStateInternal.GetDrive(String name, Boolean automount)\r\n   at System.Management.Automation.LocationGlobber.GetDriveRootRelativePathFromPSPath(String path, CmdletProviderContext context, Boolean escapeCurrentLocation, PSDriveInfo& workingDriveForPath, CmdletProvider& providerInstance)\r\n   at System.Management.Automation.LocationGlobber.GetProviderPath(String path, CmdletProviderContext context, Boolean isTrusted, ProviderInfo& provider, PSDriveInfo& drive)\r\n   at System.Management.Automation.SessionStateInternal.MakePath(String parent, String child, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.JoinPathCommand.ProcessRecord()\r\nat Get-DotnetDir, E:\\roslyn-Visual-Studio-2017-Version-15.9\\build\\scripts\\build-utils.ps1: line 127\r\nat Ensure-DotnetSdk, E:\\roslyn-Visual-Studio-2017-Version-15.9\\build\\scripts\\build-utils.ps1: line 137\r\nat Ensure-MSBuild, E:\\roslyn-Visual-Studio-2017-Version-15.9\\build\\scripts\\build-utils.ps1: line 197\r\nat <ScriptBlock>, E:\\roslyn-Visual-Studio-2017-Version-15.9\\build\\scripts\\build.ps1: line 773\r\n'E:\\roslyn-Visual-Studio-2017-Version-15.9\\' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n\r\n\r\n\r\nIt's an easy fix it you can find the extra apostrophe in that one error "},{"Id":"11254757401","Type":"IssuesEvent","CreatedAt":"2020-01-12T02:38:53","Actor":"jdm7dv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/40920","RelatedDescription":"Opened issue \"Cannot find drive. A drive with the name '\"C' does not exist. Cannot find line number in build scripts\" (#40920) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nWindows 10 20019 Enterprise LTSC\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Roslyn 2017 15.9\r\n2. Visual Studio 2017 Enterprise\r\n3. run restore.cmd\r\n\r\n**Expected Behavior**:\r\nrestore complete\r\n**Actual Behavior**:\r\nCannot find drive. A drive with the name '\"C' does not exist.\r\nSystem.Management.Automation.DriveNotFoundException: Cannot find drive. A drive with the name '\"C' does not exist.\r\n   at System.Management.Automation.SessionStateInternal.GetDrive(String name, Boolean automount)\r\n   at System.Management.Automation.SessionStateInternal.GetDrive(String name, Boolean automount)\r\n   at System.Management.Automation.LocationGlobber.GetDriveRootRelativePathFromPSPath(String path, CmdletProviderContext context, Boolean escapeCurrentLocation, PSDriveInfo& workingDriveForPath, CmdletProvider& providerInstance)\r\n   at System.Management.Automation.LocationGlobber.GetProviderPath(String path, CmdletProviderContext context, Boolean isTrusted, ProviderInfo& provider, PSDriveInfo& drive)\r\n   at System.Management.Automation.SessionStateInternal.MakePath(String parent, String child, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.JoinPathCommand.ProcessRecord()\r\nat Get-DotnetDir, E:\\roslyn-Visual-Studio-2017-Version-15.9\\build\\scripts\\build-utils.ps1: line 127\r\nat Ensure-DotnetSdk, E:\\roslyn-Visual-Studio-2017-Version-15.9\\build\\scripts\\build-utils.ps1: line 137\r\nat Ensure-MSBuild, E:\\roslyn-Visual-Studio-2017-Version-15.9\\build\\scripts\\build-utils.ps1: line 197\r\nat <ScriptBlock>, E:\\roslyn-Visual-Studio-2017-Version-15.9\\build\\scripts\\build.ps1: line 773\r\n'E:\\roslyn-Visual-Studio-2017-Version-15.9\\' is not recognized as an internal or external command,\r\noperable program or batch file."},{"Id":"11254634712","Type":"PullRequestEvent","CreatedAt":"2020-01-12T01:32:15","Actor":"msftbot[bot]","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/40919","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#40919) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"11254634338","Type":"PullRequestEvent","CreatedAt":"2020-01-12T01:32:02","Actor":"msftbot[bot]","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/40918","RelatedDescription":"Merged pull request \"Merge master to release/dev16.6-preview1\" (#40918) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into release/dev16.6-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.6-preview1\ngit reset --hard upstream/release/dev16.6-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.6-preview1 --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"11254474031","Type":"PullRequestEvent","CreatedAt":"2020-01-12T00:03:24","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/40919","RelatedDescription":"Opened pull request \"Merge master to master-vs-deps\" (#40919) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"11253533677","Type":"PullRequestEvent","CreatedAt":"2020-01-11T16:55:53","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7948","RelatedDescription":"Merged pull request \"Use plain clang by default on Linux\" (#7948) at dotnet/corert","RelatedBody":"clang-3.9 is not available on recent Linux distros. Typically, there is clang alias setup for a good version of clang so just use that by default.\r\n\r\nFixes #5654"},{"Id":"11253533661","Type":"IssuesEvent","CreatedAt":"2020-01-11T16:55:53","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5654","RelatedDescription":"Closed issue \"Clang 6.0 Support for Linux\" (#5654) at dotnet/corert","RelatedBody":"I am trying to test CoreRT on Arch Linux.\r\n\r\nWhen I run `dotnet publish -c Release -r linux-x64` I get:\r\n\r\n```\r\n.../microsoft.dotnet.ilcompiler/1.0.0-alpha-26405-01/build/Microsoft.NETCore.Native.Unix.props(100,5): error : Platform linker ('clang-3.9') not found. Try installing clang-3.9 or the appropriate package for your platform to resolve the problem...\r\n```\r\nI currently have clang 6.0 installed on my machine."},{"Id":"11252485565","Type":"PullRequestEvent","CreatedAt":"2020-01-11T09:03:06","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7950","RelatedDescription":"Merged pull request \"Initialize global VEH after runtime instance\" (#7950) at dotnet/corert","RelatedBody":"VEH may use the runtime instance"},{"Id":"11252346399","Type":"PullRequestEvent","CreatedAt":"2020-01-11T07:50:59","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7950","RelatedDescription":"Opened pull request \"Initialize global VEH after runtime instance\" (#7950) at dotnet/corert","RelatedBody":"VEH may use the runtime instance"},{"Id":"11251330676","Type":"PullRequestEvent","CreatedAt":"2020-01-10T23:57:47","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7949","RelatedDescription":"Merged pull request \"Make sure MethodFixupCell is pointer aligned\" (#7949) at dotnet/corert","RelatedBody":""},{"Id":"11250671574","Type":"PullRequestEvent","CreatedAt":"2020-01-10T21:41:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7949","RelatedDescription":"Opened pull request \"Make sure MethodFixupCell is pointer aligned\" (#7949) at dotnet/corert","RelatedBody":""},{"Id":"11248311553","Type":"PullRequestEvent","CreatedAt":"2020-01-10T16:01:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7948","RelatedDescription":"Opened pull request \"Use plain clang by default on Linux\" (#7948) at dotnet/corert","RelatedBody":"clang-3.9 is not available on recent Linux distros. Typically, there is clang alias setup for a good version of clang so just use that by default.\r\n\r\nFixes #5654"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"11254122871","Type":"IssuesEvent","CreatedAt":"2020-01-11T21:07:32","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3585","RelatedDescription":"Closed issue \"Microsoft.NET.Build.Extensions.Tasks.dll\tshould not be loaded in devenv projecc during reference resolution for native vc projects\" (#3585) at dotnet/sdk","RelatedBody":"The problem is found while investigating \r\nVS Bug 973252: Perf: CPlusPlus_DDRIT.0900.Close Solution regressed VM_AdjustedImagesInMemory_Total_devenv by 2.000 Count (0.5%). Baseline 29226.70\r\n\r\nMicrosoft.NET.Build.Extensions.Tasks.dll is loaded by _HandlePackageFileConflicts target during\r\n\r\nTarget Name=ResolveAssemblyReferences Project=ConsoleApplication1.vcxproj  note that there is no assembly references in the native vc project\r\n            …\r\n            Target Name=_HandlePackageFileConflicts Project=ConsoleApplication1.vcxproj\r\n\r\nThe target is implemented here:\r\n\r\nf:\\Visual Studio 16 Master\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.ConflictResolution.targets\r\n============================================================================================================================================\r\n-->\r\n  <UsingTask TaskName=\"ResolvePackageFileConflicts\" AssemblyFile=\"$(MicrosoftNETBuildExtensionsTasksAssembly)\" />\r\n  <Target Name=\"_HandlePackageFileConflicts\" BeforeTargets=\"$(_HandlePackageFileConflictsBefore)\" AfterTargets=\"$(_HandlePackageFileConflictsAfter)\"  \r\nDependsOnTargets=\"GetReferenceAssemblyPaths\">\r\n    <ResolvePackageFileConflicts References=\"@(Reference)\" ReferenceCopyLocalPaths=\"@(ReferenceCopyLocalPaths)\" PlatformManifests=\"@(PackageConflictPlatformManifests)\" TargetFrameworkDirectories=\"$(TargetFrameworkDirectory)\" PackageOverrides=\"@(PackageConflictOverrides)\" PreferredPackages=\"$(PackageConflictPreferredPackages)\">\r\n      <Output TaskParameter=\"ReferencesWithoutConflicts\" ItemName=\"_ReferencesWithoutConflicts\" />\r\n      <Output TaskParameter=\"ReferenceCopyLocalPathsWithoutConflicts\" ItemName=\"_ReferenceCopyLocalPathsWithoutConflicts\" />\r\n      <Output TaskParameter=\"Conflicts\" ItemName=\"_ConflictPackageFiles\" />\r\n    </ResolvePackageFileConflicts>\r\n\r\nIs this target doing something applicable to vc projects? If not, please either disable it for vcxproj or add a condition so cpp targets can disable it.\r\nAt least, please add a condition there for empty @(Reference) so the task dll is not loaded in this case.\r\n\r\n"},{"Id":"11254122844","Type":"IssuesEvent","CreatedAt":"2020-01-11T21:07:32","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3361","RelatedDescription":"Closed issue \"Self-contained apps should include RID fallback graph in .deps.json\" (#3361) at dotnet/sdk","RelatedBody":"With the introduction of `AssemblyDependencyResolver` in 3.0 we're making it relatively easy to dynamically load components with their entire dependency trees. Such components can be portable in the sense that they include RID specific assets (for example different asset for Windows and Linux).\r\n\r\nIn order to correctly resolve dependencies of such component, the `AssemblyDependencyResolver` must have a RID fallback graph to follow (so that when we're running on `win10-x64`, we know that we should also look for assets which are `win-x64` or even `win`). The component itself should not carry the RID fallback graph with it (it would need to have the graph of all the RIDs there are and it would need to be updated with every addition).\r\n\r\nJust like framework dependent apps which rely on the framework to provide the RID fallback graph, the component should rely on the host app to provide the RID fallback graph.\r\n\r\nSo if the host app is a framework dependent app, the RID fallback graph comes from the core framework `Microsoft.NETCore.App`. In this case everything works fine.\r\n\r\nIf the host app is a self-contained app, it in itself doesn't need a RID fallback graph since it's been built/published for one specific RID and thus it only carries assets which are necessary for that RID. But if a portable component is about to be loaded into such app, the RID fallback graph is necessary.\r\n\r\nThe proposal is to modify the SDK to include the RID fallback graph in self-contained app's `.deps.json`. It should be the graph filtered by the RID the app is targeting (just like what we do for the shared framework).\r\n\r\nThe problem is also discussed in https://github.com/dotnet/core-setup/issues/6960"},{"Id":"11254122806","Type":"PullRequestEvent","CreatedAt":"2020-01-11T21:07:30","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/4075","RelatedDescription":"Merged pull request \"[master] Update dependencies from nuget/nuget.client\" (#4075) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be39118f-8347-4151-a885-08d7219800a1)\r\n## From https://github.com/NuGet/NuGet.Client\r\n- **Subscription**: be39118f-8347-4151-a885-08d7219800a1\r\n- **Build**: 5.5.0.6355\r\n- **Date Produced**: 12/24/2019 5:03 AM\r\n- **Commit**: cb402b5a3340ab5b2605ecc72de7f70aaac95344\r\n- **Branch**: refs/heads/dev\r\n- **Updates**:\r\n  - **NuGet.Build.Tasks** -> 5.5.0-preview.2.6355\r\n\r\n[marker]: <> (End:be39118f-8347-4151-a885-08d7219800a1)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"11254122726","Type":"PullRequestEvent","CreatedAt":"2020-01-11T21:07:28","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/4145","RelatedDescription":"Merged pull request \"[automated] Merge branch 'release/3.1.2xx' => 'master'\" (#4145) at dotnet/sdk","RelatedBody":"I detected changes in the release/3.1.2xx branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.1.2xx by the following committers:\n\n* wli3\n* dotnet-maestro[bot]\n* nguerrera\n* mmitche\n* wtgodbe\n* dsplaisted\n* livarcocc\n* vitek-karas\n* tmeschter\n* v-zbsail\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.1.2xx\r\ngit pull --ff-only\r\ngit checkout master\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.1.2xx\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.1.2xx-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.1.2xx-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/sdk merge/release/3.1.2xx-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.1.2xx-to-master master\r\ngit pull git@github.com:dotnet-maestro-bot/sdk merge/release/3.1.2xx-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"11254114967","Type":"IssuesEvent","CreatedAt":"2020-01-11T21:03:55","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/4157","RelatedDescription":"Closed issue \"Framework dependent deployment for AnyCPU\" (#4157) at dotnet/sdk","RelatedBody":"Hi there.\r\n\r\nSorry in advance if this is not the right repository for this issue/question but I'm not sure where to look for an answer.\r\n\r\nI'm currently building and deploying a WPF application. The deployment is framework-dependent, i.e. not self-contained.\r\n\r\nIt appears when some of my users, who are using 32bit OS, download and install the 32bit version of the .NET Core runtime, they fail to run the application with the following error:\r\n\r\n![image](https://user-images.githubusercontent.com/1935960/72207382-4b8afb80-34a1-11ea-83a2-c1e6b96cce62.png)\r\n\r\nIt seems that the application is attempting to run in 64bit mode despite being built for AnyCPU.\r\n\r\nDoes anyone know what can cause this and how to fix this issue?"},{"Id":"11254108580","Type":"IssuesEvent","CreatedAt":"2020-01-11T21:01:05","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/4156","RelatedDescription":"Closed issue \"dotNet Core SDK 3.1.100 failing to restore because of bad versions\" (#4156) at dotnet/sdk","RelatedBody":"# Issue Description\r\n\r\nOn a brand new install of dotNet Core SDK 3.1.100 for Windows 10 x64, It seems to be missing dependencies with the install. Should I need to include other feeds to get the `dotnet restore` to work after doing a `dotnet new xunit`? I was following this document: [Organizing and testing projects with the .NET Core command line](https://docs.microsoft.com/en-us/dotnet/core/tutorials/testing-with-cli#testing-the-sample). Some of the references are a little old so maybe something changed? \r\n\r\n## Steps performed\r\n\r\n```\r\ndotnet new xunit\r\ndotnet restore\r\n```\r\n\r\n## System Information\r\n\r\n```\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests>systeminfo\r\n\r\nHost Name:                 FENIX\r\nOS Name:                   Microsoft Windows 10 Pro\r\nOS Version:                10.0.18362 N/A Build 18362\r\nOS Manufacturer:           Microsoft Corporation\r\n```\r\n\r\n## `dotnet` Errors\r\n```\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests>dotnet restore \r\nRestore completed in 25.54 ms for C:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\src\\NewTypes\\NewTypes.csproj.\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj : error NU1100: Unable to resolve 'Microsoft.NET.Test.Sdk (>= 16.2.0)' for '.NETCoreApp,Version=v3.1'.\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj : error NU1100: Unable to resolve 'xunit (>= 2.4.0)' for '.NETCoreApp,Version=v3.1'.\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj : error NU1100: Unable to resolve 'xunit.runner.visualstudio (>= 2.4.0)' for '.NETCoreApp,Version=v3.1'.\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj : error NU1100: Unable to resolve 'coverlet.collector (>= 1.0.1)' for '.NETCoreApp,Version=v3.1'.\r\n  Restore failed in 150.83 ms for C:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj.\r\n```\r\n\r\n## `dotnet` information\r\n\r\n```\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```"},{"Id":"11253530723","Type":"IssuesEvent","CreatedAt":"2020-01-11T16:54:40","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/4158","RelatedDescription":"Opened issue \"C++/CLI Better warning for target pack does not exist in SDK\" (#4158) at dotnet/sdk","RelatedBody":"If build netcoreapp3.1 using master (5.0.1xx) SDK. Since C++/CLI does not support nuget, it will not download the targeting pack. And the error is just. We need a better error\r\n\r\n```\r\n\"C:\\Users\\wul\\Downloads\\BuildAssetNet---B645529A\\NETCoreCppCliTestC\\NETCoreCppCliTestC.vcxproj\" (default target) (1) ->\r\n(ResolveTargetingPackAssets target) ->\r\n  C:\\work\\sdk2\\artifacts\\bin\\Debug\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(283,5): error NETSDK1073: The FrameworkReference 'Microsoft.NETCore.App' was not recognized [C:\\Users\\wul\\Downloads\\BuildAssetNet---B645529A\\NETCoreCppCliTestC\\NETCoreCppCliTestC.vcxproj]\r\n\r\n```"},{"Id":"11253488601","Type":"IssuesEvent","CreatedAt":"2020-01-11T16:37:53","Actor":"Tyrrrz","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/4157","RelatedDescription":"Opened issue \"Framework dependent deployment for AnyCPU\" (#4157) at dotnet/sdk","RelatedBody":"Hi there.\r\n\r\nSorry in advance if this is not the right repository for this issue/question but I'm not sure where to look for an answer.\r\n\r\nI'm currently building and deploying a WPF application. The deployment is framework-dependent, i.e. not self-contained.\r\n\r\nIt appears when some of my users, who are using 32bit OS, download and install the 32bit version of the .NET Core runtime, they fail to run the application with the following error:\r\n\r\n![image](https://user-images.githubusercontent.com/1935960/72207382-4b8afb80-34a1-11ea-83a2-c1e6b96cce62.png)\r\n\r\nIt seems that the application is attempting to run in 64bit mode despite being built for AnyCPU.\r\n\r\nDoes anyone know what can cause this and how to fix this issue?"},{"Id":"11253188264","Type":"IssuesEvent","CreatedAt":"2020-01-11T14:36:00","Actor":"alanwest","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/4148","RelatedDescription":"Closed issue \"dotnet build causes InitialTargets to run multiple times\" (#4148) at dotnet/sdk","RelatedBody":"Steps to reproduce:\r\n\r\n1. Run\r\n```\r\nmkdir test && cd test && dotnet new classlib\r\n```\r\n\r\n2. Replace contents of `test.csproj` with:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\" InitialTargets=\"HelloWorld\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"HelloWorld\">\r\n    <Message Importance=\"high\" Text=\"Hello World\" />\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\n3. Run\r\n```\r\ndotnet build\r\n```\r\n\r\nOutput:\r\n```\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Hello World\r\n  Hello World\r\n  Restore completed in 25.71 ms for /Users/awest/test/test.csproj.\r\n  Hello World\r\n  test -> /Users/awest/test/bin/Debug/netstandard2.0/test.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.87\r\n```\r\n\r\nI would expect \"Hello World\" to be printed once.\r\n\r\n---\r\n\r\ndotnet --info\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.15\r\n OS Platform: Darwin\r\n RID:         osx.10.15-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  2.1.802 [/usr/local/share/dotnet/sdk]\r\n  2.2.106 [/usr/local/share/dotnet/sdk]\r\n  3.0.100 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.13 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.13 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n```"},{"Id":"11253167727","Type":"PullRequestEvent","CreatedAt":"2020-01-11T14:27:04","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/4151","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#4151) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: daa187e0-7e60-4c7a-c1ac-08d6354da8a8\r\n- **Build**: 20200110.4\r\n- **Date Produced**: 1/10/2020 8:51 PM\r\n- **Commit**: 384a4bfab9ea05bff33790d21cb7e1d863e4e599\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20060.4\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20060.4\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.20060.4\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n"},{"Id":"11251674197","Type":"IssuesEvent","CreatedAt":"2020-01-11T01:53:55","Actor":"predatorian3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/4156","RelatedDescription":"Opened issue \"dotNet Core SDK 3.1.100 failing to restore because of bad versions\" (#4156) at dotnet/sdk","RelatedBody":"# Issue Description\r\n\r\nOn a brand new install of dotNet Core SDK 3.1.100 for Windows 10 x64, It seems to be missing dependencies with the install. Should I need to include other feeds to get the `dotnet restore` to work after doing a `dotnet new xunit`? I was following this document: [Organizing and testing projects with the .NET Core command line](https://docs.microsoft.com/en-us/dotnet/core/tutorials/testing-with-cli#testing-the-sample). Some of the references are a little old so maybe something changed? \r\n\r\n## Steps performed\r\n\r\n```\r\ndotnet new xunit\r\ndotnet restore\r\n```\r\n\r\n## System Information\r\n\r\n```\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests>systeminfo\r\n\r\nHost Name:                 FENIX\r\nOS Name:                   Microsoft Windows 10 Pro\r\nOS Version:                10.0.18362 N/A Build 18362\r\nOS Manufacturer:           Microsoft Corporation\r\n```\r\n\r\n## `dotnet` Errors\r\n```\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests>dotnet restore \r\nRestore completed in 25.54 ms for C:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\src\\NewTypes\\NewTypes.csproj.\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj : error NU1100: Unable to resolve 'Microsoft.NET.Test.Sdk (>= 16.2.0)' for '.NETCoreApp,Version=v3.1'.\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj : error NU1100: Unable to resolve 'xunit (>= 2.4.0)' for '.NETCoreApp,Version=v3.1'.\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj : error NU1100: Unable to resolve 'xunit.runner.visualstudio (>= 2.4.0)' for '.NETCoreApp,Version=v3.1'.\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj : error NU1100: Unable to resolve 'coverlet.collector (>= 1.0.1)' for '.NETCoreApp,Version=v3.1'.\r\n  Restore failed in 150.83 ms for C:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj.\r\n```\r\n\r\n## `dotnet` information\r\n\r\n```\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```"},{"Id":"11251631505","Type":"PullRequestEvent","CreatedAt":"2020-01-11T01:35:54","Actor":"MSLukeWest","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/4155","RelatedDescription":"Opened pull request \"Updating PublishItemsOutputGroup to include the publish deps file when _UseBuildDependencyFile is false\" (#4155) at dotnet/sdk","RelatedBody":"This is the output group that gets used with VS installer projects.  Right now we're using the wrong deps file in the case where assets are marked as excluded from publish.\r\n\r\nFor some historical context you can look at the comments in PR 3141.  At that point we didn't actually do a real publish when this output group got used so PublishDepsFilePath wasn't available to us.  But now consuming this output group using an installer project does a real publish, so we can and should use the publish version of the deps file when _UseBuildDependencyFile is false."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"544546454","IsPullRequest":true,"CreatedAt":"2020-01-02T11:42:32","Actor":"manne","Number":"157","RawContent":null,"Title":"Link Reactive Extensions to new github repo","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/157","RelatedDescription":"Open PR \"Link Reactive Extensions to new github repo\" (#157)"},{"Id":"539153211","IsPullRequest":true,"CreatedAt":"2019-12-17T15:52:32","Actor":"khalidabuhakmeh","Number":"156","RawContent":null,"Title":"Update Teams Link","State":"open","Body":"Was `https://dotnetfoundation.org/team` but now is `https://dotnetfoundation.org/about#team`","Url":"https://github.com/dotnet/foundation/pull/156","RelatedDescription":"Open PR \"Update Teams Link\" (#156)"},{"Id":"523940971","IsPullRequest":false,"CreatedAt":"2019-11-17T05:53:47","Actor":"NextTurn","Number":"155","RawContent":null,"Title":"Typos in CLA bot profile","State":"open","Body":"https://github.com/dnfclas\r\n\r\n## Expected\r\n\r\n![image](https://user-images.githubusercontent.com/45985406/69003693-983ed400-0941-11ea-91d9-18c29e752b81.png)\r\n\r\n## Actual\r\n\r\n![image](https://user-images.githubusercontent.com/45985406/69003652-ec958400-0940-11ea-8239-f9b19a7dc957.png)\r\n\r\nAlways capitalized, never .Net or dot NET. \r\n\r\n[.NET Glossary](https://github.com/dotnet/docs/blob/master/docs/standard/glossary.md#net)\r\n\r\n[Microsoft Style Guide](https://github.com/MicrosoftDocs/microsoft-style-guide/blob/master/styleguide/a-z-word-list-term-collections/n/net.md)","Url":"https://github.com/dotnet/foundation/issues/155","RelatedDescription":"Open issue \"Typos in CLA bot profile\" (#155)"},{"Id":"523861891","IsPullRequest":true,"CreatedAt":"2019-11-16T15:59:11","Actor":"NextTurn","Number":"154","RawContent":null,"Title":"Fix broken links","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/154","RelatedDescription":"Open PR \"Fix broken links\" (#154)"},{"Id":"522965180","IsPullRequest":true,"CreatedAt":"2019-11-14T16:22:27","Actor":"NextTurn","Number":"153","RawContent":null,"Title":"Fix broken links","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/153","RelatedDescription":"Open PR \"Fix broken links\" (#153)"},{"Id":"522951789","IsPullRequest":true,"CreatedAt":"2019-11-14T16:00:23","Actor":"NextTurn","Number":"152","RawContent":null,"Title":"Fix broken links","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/152","RelatedDescription":"Open PR \"Fix broken links\" (#152)"},{"Id":"520212668","IsPullRequest":true,"CreatedAt":"2019-11-08T23:32:02","Actor":"onovotny","Number":"151","RawContent":null,"Title":"Update RxUI license to reflect repo","State":"closed","Body":"Fixes https://github.com/dotnet-foundation/dotnetfoundation-website/issues/68","Url":"https://github.com/dotnet/foundation/pull/151","RelatedDescription":"Closed or merged PR \"Update RxUI license to reflect repo\" (#151)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-11-07T05:43:04","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Closed or merged PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"501128777","IsPullRequest":true,"CreatedAt":"2019-11-07T05:42:14","Actor":"gep13","Number":"150","RawContent":null,"Title":"Add new Cake Maintainer","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Closed or merged PR \"Add new Cake Maintainer\" (#150)"},{"Id":"500670461","IsPullRequest":true,"CreatedAt":"2019-11-07T05:41:48","Actor":"JimBobSquarePants","Number":"149","RawContent":null,"Title":"Add ImageSharp","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Closed or merged PR \"Add ImageSharp\" (#149)"},{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"548404728","IsPullRequest":false,"CreatedAt":"2020-01-11T09:11:27","Actor":"stoichammer","Number":"27988","RawContent":null,"Title":"andra","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/issues/27988","RelatedDescription":"Closed issue \"andra\" (#27988)"},{"Id":"548401484","IsPullRequest":false,"CreatedAt":"2020-01-11T08:35:17","Actor":"Kevin920920","Number":"27987","RawContent":null,"Title":"BUILD: Error: Failed to generate version headers . And System.TimeoutException","State":"open","Body":"E:\\Downloads\\coreclr-3.1.0>build.cmd\r\nBUILD: Starting Build at 15:58:14.03\r\nBUILD: Searching for Visual Studio 2017 or later installation\r\nBUILD: \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\VsDevCmd.bat\"\r\n**********************************************************************\r\n** Visual Studio 2019 Developer Command Prompt v16.4.1\r\n** Copyright (c) 2019 Microsoft Corporation\r\n**********************************************************************\r\nBUILD: Commencing CoreCLR product build\r\nBUILD: Checking prerequisites\r\nBUILD: Number of processor cores 4\r\n  未能从“https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.compilers.toolset/3.3.0-beta2-19367-02/microsoft.net.compilers.toolset.3.3.0-beta2-19367-02.nupkg”下载包“Microsoft.Net.Compilers.Toolset.3.3.0-beta2-19367-02”。\r\n  由于在 60000 毫秒内未接收到数据，“https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.compilers.toolset/3.3.0-beta2-19367-02/microsoft.net.compilers.toolset.3.3.0-beta2-19367-02.nupkg”的下载超时。\r\n    Exception of type 'System.TimeoutException' was thrown.\r\n  未能从“https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.compilers.toolset/3.3.0-beta2-19367-02/microsoft.net.compilers.toolset.3.3.0-beta2-19367-02.nupkg”下载包“Microsoft.Net.Compilers.Toolset.3.3.0-beta2-19367-02”。\r\n  The SSL connection could not be established, see inner exception.\r\n    Unable to read data from the transport connection: 远程主机强迫关闭了一个现有的连接。.\r\n    远程主机强迫关闭了一个现有的连接。\r\n  E:\\Downloads\\coreclr-3.1.0\\eng\\empty.csproj 的还原在 17.91 min 内完成。\r\nE:\\Downloads\\coreclr-3.1.0\\.packages\\microsoft.build.tasks.git\\1.0.0-beta2-19367-01\\build\\Microsoft.Build.Tasks.Git.targets(24,5): error : 无法定位包含目录 'E:\\Downloads\\coreclr-3.1.0\\eng' 的存储库。 [E:\\Downloads\\coreclr-3.1.0\\eng\\empty.csproj]\r\nE:\\Downloads\\coreclr-3.1.0\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19461.7\\tools\\Version.targets(53,5): error : SourceRevisionId is not set, which means the SourceLink targets are not included in the build. Those are needed to produce a correct sha for our build outputs. [E:\\Downloads\\coreclr-3.1.0\\eng\\empty.csproj]\r\n\r\n生成失败。\r\n\r\nE:\\Downloads\\coreclr-3.1.0\\.packages\\microsoft.build.tasks.git\\1.0.0-beta2-19367-01\\build\\Microsoft.Build.Tasks.Git.targets(24,5): error : 无法定位包含目录 'E:\\Downloads\\coreclr-3.1.0\\eng' 的存储库。 [E:\\Downloads\\coreclr-3.1.0\\eng\\empty.csproj]\r\nE:\\Downloads\\coreclr-3.1.0\\.packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19461.7\\tools\\Version.targets(53,5): error : SourceRevisionId is not set, which means the SourceLink targets are not included in the build. Those are needed to produce a correct sha for our build outputs. [E:\\Downloads\\coreclr-3.1.0\\eng\\empty.csproj]\r\n    0 个警告\r\n    2 个错误\r\n\r\n已用时间 00:17:55.82\r\nBuild failed.\r\nBUILD: Error: Failed to generate version headers.","Url":"https://github.com/dotnet/coreclr/issues/27987","RelatedDescription":"Open issue \"BUILD: Error: Failed to generate version headers . And System.TimeoutException\" (#27987)"},{"Id":"544464942","IsPullRequest":false,"CreatedAt":"2020-01-11T08:16:58","Actor":"Joowoo30","Number":"27978","RawContent":null,"Title":"How can I use some headers in gc.cpp.","State":"closed","Body":"Hello.\r\nI forked coreclr code and added some test code in it to analyze gc behavior.\r\nbut I can't use #include <dlfcn.h> in it. (Exactly in coreclr/src/gc/gc.cpp)\r\nTo solve this problem, I edited CmakeLists files many times (Adding target_link_libraries dl and so on)\r\nbut I fail to build coreclr with my code.\r\n\r\nhow can I use #include <dlfcn.h> in gc.cpp?\r\nI have to use dlopen and dlsym for my test.\r\n\r\nI would be really grateful if someone let me know.\r\nThank you.","Url":"https://github.com/dotnet/coreclr/issues/27978","RelatedDescription":"Closed issue \"How can I use some headers in gc.cpp.\" (#27978)"},{"Id":"548326464","IsPullRequest":true,"CreatedAt":"2020-01-10T22:44:49","Actor":"CarolEidt","Number":"27986","RawContent":null,"Title":"Port of dotnet/runtime#1059 to 3.1 branch","State":"open","Body":"This is the fix for #27924. This is a GC hole bug that was found externally, #27590.\r\nThe cause is that the JIT was using the target type of the subtract when it needed\r\nto make a copy of the source, but it needs to use the source type.\r\n\r\n## Customer Impact\r\nCorruption of state that is non-deterministic and hard to track down.\r\n\r\n## Regression?\r\nNot a recent regression, but exposed by Unsafe.ByteOffset.\r\n\r\n## Testing\r\nThe fix has been verified in the runtime repo.\r\n\r\n## Risk\r\nLow: The fix is straightfoward and only impacts 3 lines of code.","Url":"https://github.com/dotnet/coreclr/pull/27986","RelatedDescription":"Open PR \"Port of dotnet/runtime#1059 to 3.1 branch\" (#27986)"},{"Id":"547818433","IsPullRequest":true,"CreatedAt":"2020-01-10T01:45:51","Actor":"AntonLapounov","Number":"27985","RawContent":null,"Title":"[3.1 port] Fix GC heap corruption on ARM","State":"open","Body":"Port of dotnet/runtime#1389 to 3.1 branch.  Applications may crash in GC code due to GC heap corruption caused by incorrect padding size calculation on ARM.\r\n\r\n## Customer Impact\r\nUnexpected and hard to diagnose crashes.\r\n\r\n## Regression?\r\nNo.\r\n\r\n## Testing\r\nThe fix has been verified in the runtime repo.\r\n\r\n## Risk\r\nLow: one-line fix of the incorrect calculation.","Url":"https://github.com/dotnet/coreclr/pull/27985","RelatedDescription":"Open PR \"[3.1 port] Fix GC heap corruption on ARM\" (#27985)"},{"Id":"547811395","IsPullRequest":true,"CreatedAt":"2020-01-10T01:18:37","Actor":"CarolEidt","Number":"27984","RawContent":null,"Title":"Port PR #258 to 3.1","State":"open","Body":"Port of dotnet/runtime#258 to 3.1 branch.\r\nThis is the fix for #27937. The manifestation is an AV in the JIT. Although it isn't SBCG, it is difficult for the developer to track down that this is a JIT bug, rather than caused by something in their code.\r\n\r\n## Customer Impact\r\nUnexpected and hard to diagnose crashes.\r\n\r\n## Regression?\r\nNo.\r\n\r\n## Testing\r\nThe fix has been verified in the runtime repo.\r\n\r\n## Risk\r\nLow: The fix is straightforward and only prevents the AV case.","Url":"https://github.com/dotnet/coreclr/pull/27984","RelatedDescription":"Open PR \"Port PR #258 to 3.1\" (#27984)"},{"Id":"547728284","IsPullRequest":true,"CreatedAt":"2020-01-09T21:16:47","Actor":"CarolEidt","Number":"27983","RawContent":null,"Title":"Port fix for #1241 to 3.1","State":"open","Body":"Port of dotnet/runtime#1279 to 3.1 branch.\r\nThis is the fix for dotnet/runtime#1241. This is a SBCG bug reported externally. When a struct is partially written, the JIT fails to invalidate assertions (in this case that the entire struct had been zero'd). This results in incorrect optimization. The fix is to invalidate the assertions in the partial write case.\r\n\r\n## Customer Impact\r\nSBCG resulting in incorrect behavior.\r\n\r\n## Regression?\r\nNot a recent regression, but exposed by doing more optimizations on structs.\r\n\r\n## Testing\r\nThe fix has been verified in the runtime repo.\r\n\r\n## Risk\r\nLow: The fix is straightforward and kills assertions which only disables optimizations.","Url":"https://github.com/dotnet/coreclr/pull/27983","RelatedDescription":"Open PR \"Port fix for #1241 to 3.1\" (#27983)"},{"Id":"546575203","IsPullRequest":false,"CreatedAt":"2020-01-08T20:46:40","Actor":"assyadh","Number":"27982","RawContent":null,"Title":"CoreCLR failed to run tests on v3.1 tag \" The wrappers must be compiled and placed at\"","State":"closed","Body":"Hi,\r\n\r\nI am building coreclr/corefx from source, and encountering a weird issue when trying to run the coreclr tests. This occurs when testing the 3.1 tag, testing 2.1 works fine.\r\n\r\nAt first was seeing similar errors as https://github.com/dotnet/coreclr/issues/27725 when testing coreclr on amazon linux and ended up importing a patch based on https://github.com/dotnet/coreclr/pull/27815.\r\n\r\nNow I am seeing the following error:\r\n\r\n```\r\n/build/coreclr/tests/tests.targets(19,5): error :  The wrappers must be compiled and placed at /build/coreclr/tests/../bin/tests/Linux.x64.Release/tests/\\*\\ before they can be run, Do a clean Test Run [/build/coreclr/tests/runtest.proj]\r\n```\r\n\r\n\r\nWhen running:\r\n\r\n```\r\ntests/runtest.sh     \r\n--testRootDir=/build/coreclr/bin/tests/Linux.x64.Release     \r\n--testNativeBinDir=/build/coreclr/bin/obj/Linux.x64.Release/tests     \r\n--coreClrBinDir=/build/coreclr/bin/Product/Linux.x64.Release     \r\n--mscorlibDir=/build/coreclr/bin/Product/Linux.x64.Release     \r\n--coreFxBinDir=/build/corefx/bin/runtime/netcoreapp-Linux-Release-x64 \r\nrelease\r\n```\r\n\r\nI have been pulling my hairs on what is going on here, I can build/test 2.1 properly, but can't figure out what changed with 3.1. It looks like a path issue but I don't see where the hiccup occurs.\r\n\r\n\r\nAny thoughts @jashook? Thanks for the help 👍 \r\n\r\n\r\nFull log:\r\n\r\n```\r\ntests/runtest.sh     --testRootDir=/build/coreclr/bin/tests/Linux.x64.Release     --testNativeBinDir=/build/coreclr/bin/obj/Linux.x64.Release/tests     --coreClrBinDir=/build/coreclr/bin/Product/Linux.x64.Release     --mscorlibDir=/build/coreclr/bin/Product/Linux.x64.Release     --coreFxBinDir=/build/corefx/bin/runtime/netcoreapp-Linux-Release-x64 release\r\nRunning on  CPU- x64\r\nBuild Architecture            : x64\r\nBuild Configuration           : Release\r\nTest Location                 : /build/coreclr/bin/tests/Linux.x64.Release\r\nProduct Location              : /build/coreclr/bin/Product/Linux.x64.Release\r\nTest Native Bin Location      : /build/coreclr/bin/obj/Linux.x64.Release/tests\r\n\r\nSkipping xunit wrapper build. If build-test was called on a different\r\nhost_os or arch the test run will most likely have failures.\r\npython /build/coreclr/tests/runtest.py -arch x64 -build_type Release -test_location /build/coreclr/bin/tests/Linux.x64.Release -product_location /build/coreclr/bin/Product/Linux.x64.Release -test_native_bin_location /build/coreclr/bin/obj/Linux.x64.Release/tests\r\nhost_os                  :Linux\r\narch                     :x64\r\nbuild_type               :Release\r\ncoreclr_repo_location    :/build/coreclr\r\nproduct_location         :/build/coreclr/bin/Product/Linux.x64.Release\r\ncore_root                :/build/coreclr/bin/tests/Linux.x64.Release/Tests/Core_Root\r\ntest_location            :/build/coreclr/bin/tests/Linux.x64.Release\r\ntest_native_bin_location :None\r\nFound COMPlus variables in the current environment\r\n\r\nUnset COMPlus_gcServer\r\nUnset COMPlus_EnableEventLog\r\n\r\nTestEnv: /tmp/tmpMgAmE0\r\n\r\nContents:\r\n\r\n# Temporary test env for test run.\r\nexport COMPlus_gcServer=0\r\nexport COMPlus_EnableEventLog=1\r\n\r\n\r\nSetting __TestTimeout=900000\r\nSetting CORE_ROOT=/build/coreclr/bin/tests/Linux.x64.Release/Tests/Core_Root\r\nSetting __TestEnv=/tmp/tmpMgAmE0\r\nDownload and overwrite xunit.console.dll in Core_Root\r\n/build/coreclr/dotnet.sh msbuild /build/coreclr/tests/runtest.proj /p:Runtests=true /clp:showcommandline /fileloggerparameters:\"Verbosity=normal;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.log\" /fileloggerparameters1:\"WarningsOnly;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.wrn\" /fileloggerparameters2:\"ErrorsOnly;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.err\" /consoleloggerparameters:Summary /p:__BuildOS=Linux /p:__BuildArch=x64 /p:__BuildType=Release /p:__LogsDir=/build/coreclr/bin/Logs\r\nRunning init-dotnet.sh\r\nInstalling dotnet using Arcade...\r\nRunning: /build/coreclr/.dotnet/dotnet msbuild /build/coreclr/tests/runtest.proj /p:Runtests=true /clp:showcommandline /fileloggerparameters:\"Verbosity=normal;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.log\" /fileloggerparameters1:\"WarningsOnly;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.wrn\" /fileloggerparameters2:\"ErrorsOnly;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.err\" /consoleloggerparameters:Summary /p:__BuildOS=Linux /p:__BuildArch=x64 /p:__BuildType=Release /p:__LogsDir=/build/coreclr/bin/Logs\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n/build/coreclr/tests/tests.targets(19,5): error :  The wrappers must be compiled and placed at /build/coreclr/tests/../bin/tests/Linux.x64.Release/tests/\\*\\ before they can be run, Do a clean Test Run [/build/coreclr/tests/runtest.proj]\r\n\r\nBuild FAILED.\r\n\r\n/build/coreclr/tests/tests.targets(19,5): error :  The wrappers must be compiled and placed at /build/coreclr/tests/../bin/tests/Linux.x64.Release/tests/\\*\\ before they can be run, Do a clean Test Run [/build/coreclr/tests/runtest.proj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.41\r\nERROR: An error occurred in /build/coreclr/.dotnet/dotnet msbuild /build/coreclr/tests/runtest.proj /p:Runtests=true /clp:showcommandline /fileloggerparameters:\"Verbosity=normal;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.log\" /fileloggerparameters1:\"WarningsOnly;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.wrn\" /fileloggerparameters2:\"ErrorsOnly;LogFile=/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release.err\" /consoleloggerparameters:Summary /p:__BuildOS=Linux /p:__BuildArch=x64 /p:__BuildType=Release /p:__LogsDir=/build/coreclr/bin/Logs. Check logs under /build/coreclr.\r\nTest run finished.\r\nParsing test results from (/build/coreclr/bin/Logs/TestRunResults_Linux_x64_Release)\r\nUnable to find testRun.xml. This normally means the tests did not run.\r\nIt could also mean there was a problem logging. Please run the tests again.\r\n\r\n\r\n```\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/27982","RelatedDescription":"Closed issue \"CoreCLR failed to run tests on v3.1 tag \" The wrappers must be compiled and placed at\"\" (#27982)"},{"Id":"537829085","IsPullRequest":true,"CreatedAt":"2020-01-08T16:51:52","Actor":"mateoatr","Number":"27971","RawContent":null,"Title":"Fix memory leaked caused by Marshal.GetFunctionPointerForDelegate","State":"closed","Body":"Issue: https://github.com/dotnet/runtime/issues/353\r\n\r\nCustomer impact\r\n---\r\n\r\nMemory leak when using Marshal.GetFunctionPointerForDelegate\r\n\r\nRegression?\r\n---\r\n\r\nNot a regression -- introduced in Windows Phone CoreCLR port.\r\n\r\nRisk\r\n---\r\n\r\nLow\r\n\r\n----\r\n\r\ncc @jeffschwMSFT @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/27971","RelatedDescription":"Closed or merged PR \"Fix memory leaked caused by Marshal.GetFunctionPointerForDelegate\" (#27971)"},{"Id":"546543040","IsPullRequest":true,"CreatedAt":"2020-01-07T22:31:37","Actor":"Anipik","Number":"27981","RawContent":null,"Title":"update branding to 3.1.2","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27981","RelatedDescription":"Open PR \"update branding to 3.1.2\" (#27981)"},{"Id":"545822848","IsPullRequest":false,"CreatedAt":"2020-01-06T16:44:59","Actor":"mikernet","Number":"27980","RawContent":null,"Title":"[Deleted: Posted in wrong repository]","State":"closed","Body":"Gah, wrong repository...","Url":"https://github.com/dotnet/coreclr/issues/27980","RelatedDescription":"Closed issue \"[Deleted: Posted in wrong repository]\" (#27980)"},{"Id":"544722108","IsPullRequest":true,"CreatedAt":"2020-01-02T19:55:04","Actor":"sywhang","Number":"27979","RawContent":null,"Title":"[3.1 port] Fix EventSource to stop ignoring EventCommand.SendManifest","State":"open","Body":"This is a port of https://github.com/dotnet/runtime/pull/848 to 3.1 servicing. \r\n\r\n## Customer Impact\r\n\r\nSending ETW command to trigger manifest file to be generated does not work anymore. This blocks some customers who are relying on ETW commands to generate multiple ETL files per session, since the files they generate after the initial file don't have any test. \r\n\r\n## Regression?\r\n\r\nYes, from https://github.com/dotnet/coreclr/pull/11639/. This is some time around .NET Core 2.0 timeframe. \r\n\r\n## Testing\r\n\r\nAdded automated test as part of https://github.com/dotnet/runtime/pull/848. \r\nI also verified the fix with the repro sent by the customer who initially reported this (Azure Stack). \r\n\r\n## Risk\r\n\r\nLow. The code path being changed affects only ETW, and is a relatively simple change. I've tested the scenario with all the ETW tests we have and verified that they pass. ","Url":"https://github.com/dotnet/coreclr/pull/27979","RelatedDescription":"Open PR \"[3.1 port] Fix EventSource to stop ignoring EventCommand.SendManifest\" (#27979)"},{"Id":"542571528","IsPullRequest":false,"CreatedAt":"2019-12-26T15:50:11","Actor":"Macromullet","Number":"27977","RawContent":null,"Title":"Different 32-bit marshalling behavior with on Windows with 3.1","State":"closed","Body":"I posted about this last week, but with the holidays it hasn't received any traction. https://github.com/dotnet/core/issues/3950#issuecomment-567792601\r\n\r\nIn a nutshell, a test that has behaved perfectly under .net framework and .net core, suddenly stopped working after an upgrade to .net core 3.1.\r\n\r\nUpdate: This appears to be a difference between how tests are run with the 16.4 Microsoft.NET.Test.Sdk project type. When using 16.2, even when using x86 as the processor architecture (under Tests->Processor Architecture for AnyCPU Projects) it still is using 64-bit. In 16.4, it actually runs the test in 32-bit mode, causing the test to fail.","Url":"https://github.com/dotnet/coreclr/issues/27977","RelatedDescription":"Closed issue \"Different 32-bit marshalling behavior with on Windows with 3.1\" (#27977)"},{"Id":"542289671","IsPullRequest":false,"CreatedAt":"2019-12-25T08:20:59","Actor":"peppy","Number":"27976","RawContent":null,"Title":"Finalizer called without ctor in optimized compilation case","State":"closed","Body":"We recently encountered a bug where an object expected to be in an initialized state at point of finalizing was not. Minimal reproduction case:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nnamespace ReproduceFinalizerFailure\r\n{\r\n    class Program\r\n    {\r\n        public static bool CtorReached;\r\n        public static bool FinalizerReached;\r\n\r\n        static void Main()\r\n        {\r\n            try\r\n            {\r\n                GetObject();\r\n            }\r\n            catch\r\n            {\r\n            }\r\n\r\n            GC.Collect();\r\n            GC.WaitForPendingFinalizers();\r\n\r\n            Trace.Assert(!CtorReached, \"Constructor should not be reached\");\r\n            Trace.Assert(!FinalizerReached, \"Finalizer should not be reached\");\r\n        }\r\n\r\n        private static void GetObject()\r\n        {\r\n            var obj = throwException();\r\n            new FinalizingObject(obj);\r\n        }\r\n\r\n        private static object throwException()\r\n        {\r\n            throw new Exception();\r\n        }\r\n    }\r\n\r\n    class FinalizingObject\r\n    {\r\n        public FinalizingObject(object obj) => Program.CtorReached = true;\r\n\r\n        ~FinalizingObject() => Program.FinalizerReached = true;\r\n    }\r\n}\r\n```\r\n\r\n```sh\r\n➜  ReproduceFinalizerFailure  dotnet --version\r\n3.1.100\r\n➜  ReproduceFinalizerFailure  dotnet run -c Release\r\nProcess terminated. Assertion Failed\r\nFinalizer should not be reached\r\n   at ReproduceFinalizerFailure.Program.Main() in /Users/dean/Projects/ReproduceFinalizerFailure/ReproduceFinalizerFailure/Program.cs:line 27\r\n```\r\n\r\nThis only happens with build configuration Release and debugger detached.\r\n\r\nPotentially related to https://github.com/dotnet/runtime/issues/764.","Url":"https://github.com/dotnet/coreclr/issues/27976","RelatedDescription":"Closed issue \"Finalizer called without ctor in optimized compilation case\" (#27976)"},{"Id":"540149649","IsPullRequest":true,"CreatedAt":"2019-12-19T08:12:08","Actor":"VSadov","Number":"27975","RawContent":null,"Title":"Setting MinLimitTotalWorkerThreads according to CPU quota.","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27975","RelatedDescription":"Open PR \"Setting MinLimitTotalWorkerThreads according to CPU quota.\" (#27975)"},{"Id":"538806283","IsPullRequest":false,"CreatedAt":"2019-12-18T06:40:39","Actor":"zengqinglei","Number":"27974","RawContent":null,"Title":"Unable to delete assembly file after plugin uninstall","State":"closed","Body":"**Describe the bug**\r\n\r\nWhen I use the sample code: https://github.com/dotnet/samples/tree/master/core/tutorials/Unloading\r\nThen I want to remove the assembly file after the plugin is uninstalled and I get an exception:\r\n\r\n![image](https://user-images.githubusercontent.com/7374317/70961451-cb998d80-20bc-11ea-837c-601b70c8e52a.png)\r\n\r\n**Run Environment**\r\n* .NET CORE 3.1\r\n* Windows 10 \r\n![image](https://user-images.githubusercontent.com/7374317/70961722-a8231280-20bd-11ea-852a-eb42a443ac45.png)\r\n\r\nI hope to get your help soon, thank you!","Url":"https://github.com/dotnet/coreclr/issues/27974","RelatedDescription":"Closed issue \"Unable to delete assembly file after plugin uninstall\" (#27974)"},{"Id":"538649669","IsPullRequest":true,"CreatedAt":"2019-12-16T20:51:33","Actor":"AndyAyersMS","Number":"27973","RawContent":null,"Title":"Release/3.1 port of dotnet/runtime#239","State":"open","Body":"Fix for #27923\r\n\r\nThe jit might fail to locate a class handle for a ref class, leading to an\r\nunexpected crash while jitting.\r\n\r\n## Customer Impact\r\nUnexpected and hard to diagnose crash/exception\r\n\r\n## Regression?\r\nYes, introduced during the development 3.0 cycle. 2.x behaves correctly.\r\n\r\n## Testing\r\nVerified the user's test case now passes; no diffs seen in any existing\r\nframework or test code.\r\n\r\n## Risk\r\n**Low**: the jit will now fall back to using the handle for System.Object if no\r\nbetter option can be found.\r\n\r\ncc @BruceForstall\r\n\r\n____\r\n\r\nIn some cases we may end up in lvaSetClass without a valid ref class handle\r\nfrom either the IR or the stack. Use the handle for object as a conservative\r\nfallback.","Url":"https://github.com/dotnet/coreclr/pull/27973","RelatedDescription":"Open PR \"Release/3.1 port of dotnet/runtime#239\" (#27973)"},{"Id":"537840266","IsPullRequest":true,"CreatedAt":"2019-12-14T00:52:54","Actor":"AndyAyersMS","Number":"27972","RawContent":null,"Title":"[release/3.1] Port fix for JIT silent bad code","State":"open","Body":"Release/3.1 port of dotnet/runtime#797.\r\nFixes dotnet/runtime#764\r\n\r\nThe jit might incorrectly order a read from a struct field with an operation\r\nthat modifies the field, so that the read returns the wrong value.\r\n\r\n## Customer Impact\r\nSilent bad code; program behaves incorrectly.\r\n\r\n## Regression?\r\nYes, introduced during the development 3.0 cycle. 2.x behaves correctly.\r\n\r\n## Testing\r\nVerified the user's test case now passes; no diffs seen in any existing framework\r\nor test code.\r\n\r\n## Risk\r\n**Low**: the jit is now spilling the eval stack entries to temps in cases where it\r\ndid not before; this should be conservatively safe.\r\n\r\ncc @BruceForstall \r\n\r\n____\r\n\r\nIf we're appending an assignment whose LHS is is a location within a local\r\nstruct, we need to spill all references to that struct from the eval stack.\r\n\r\nUpdate the existing logic for this to handle the case where the LHS is a field\r\nof a local struct, and the field is updated by unusual means (here, `initobj`).\r\n\r\nFixes dotnet/runtime#764.","Url":"https://github.com/dotnet/coreclr/pull/27972","RelatedDescription":"Open PR \"[release/3.1] Port fix for JIT silent bad code\" (#27972)"},{"Id":"532816885","IsPullRequest":false,"CreatedAt":"2019-12-11T07:38:17","Actor":"yashwanthreddyg","Number":"27962","RawContent":null,"Title":"dotnet 2.1.12 : Segmentation fault on NullReferenceException","State":"closed","Body":"Dotnet version:\r\n2.1.12 aspnetcore\r\n2.1.5 aspnetcore\r\n2.1.13 aspnetcore\r\n\r\nOS:\r\n```\r\nLinux version 3.10.0-1062.4.3.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) ) #1 SMP Wed Nov 13 23:58:53 UTC 2019\r\n```\r\n\r\nOur application is a web app and a certain code path leads to a null reference exception. lt causes the runtime to crash with segmentation fault despite there being a catch around the exception. I see the same behavior on all the above mentioned runtimes but I have backtrace from version 2.1.12.\r\n\r\n```\r\nProcess 3204 stopped\r\n\r\n* thread #11: tid = 3222, 0x00007f7a9dcd4669, name = 'dotnet', stop reason = invalid address (fault address: 0x0)\r\n    frame #0: 0x00007f7a9dcd4669\r\n-> 0x7f7a9dcd4669:  cmpl   %edi, (%rdi)\r\n   0x7f7a9dcd466b:  callq  *(%rax)\r\n   0x7f7a9dcd466d:  testq  %rax, %rax\r\n   0x7f7a9dcd4670:  jne    0x7f7a9dcd46c8\r\nbt\r\n* thread #11: tid = 3222, 0x00007f7a9dcd4669, name = 'dotnet', stop reason = invalid address (fault address: 0x0)\r\n  * frame #0: 0x00007f7a9dcd4669\r\n    frame #1: 0x00007f7a9dcd35b9\r\n    frame #2: 0x00007f7a9dcce664\r\n    frame #3: 0x00007f7a9dcca87d\r\n    frame #4: 0x00007f7a9dc8eee5\r\n    frame #5: 0x00007f7a9b1842ad\r\n    frame #6: 0x00007f7a9d5267c2\r\n    frame #7: 0x00007f7a9d525a4e\r\n    frame #8: 0x00007f7a9d5257bb\r\n    frame #9: 0x00007f7a9d525749\r\n    frame #10: 0x00007f7a9d51e6f7\r\n    frame #11: 0x00007f7a9d521482\r\n    frame #12: 0x00007f7a9d5212ab\r\n    frame #13: 0x00007f7a9d521239\r\n    frame #14: 0x00007f7a9d520f93\r\n    frame #15: 0x00007f7a9d520e2b\r\n    frame #16: 0x00007f7a9d520da9\r\n    frame #17: 0x00007f7a9d521f5b\r\n    frame #18: 0x00007f7a9d521dbb\r\n    frame #19: 0x00007f7a9d521d41\r\n    frame #20: 0x00007f7a9d51e3e3\r\n    frame #21: 0x00007f7a9d521482\r\n    frame #22: 0x00007f7a9d5212ab\r\n    frame #23: 0x00007f7a9d521239\r\n    frame #24: 0x00007f7a9d520f93\r\n    frame #25: 0x00007f7a9d520e2b\r\n    frame #26: 0x00007f7a9d520da9\r\n    frame #27: 0x00007f7a9d521f5b\r\n    frame #28: 0x00007f7a9d521dbb\r\n    frame #29: 0x00007f7a9d521d41\r\n    frame #30: 0x00007f7a9d51e3e3\r\n    frame #31: 0x00007f7a9d521482\r\n    frame #32: 0x00007f7a9d5212ab\r\n    frame #33: 0x00007f7a9d521239\r\n    frame #34: 0x00007f7a9d520f93\r\n    frame #35: 0x00007f7a9d520e2b\r\n    frame #36: 0x00007f7a9d520da9\r\n    frame #37: 0x00007f7a9d521f5b\r\n    frame #38: 0x00007f7a9d521dbb\r\n    frame #39: 0x00007f7a9d521d41\r\n    frame #40: 0x00007f7a9d51e3e3\r\n    frame #41: 0x00007f7a9d521482\r\n    frame #42: 0x00007f7a9d5212ab\r\n    frame #43: 0x00007f7a9d521239\r\n    frame #44: 0x00007f7a9d51e626\r\n    frame #45: 0x00007f7a9d521482\r\n    frame #46: 0x00007f7a9d5212ab\r\n    frame #47: 0x00007f7a9d521239\r\n    frame #48: 0x00007f7a9d520f93\r\n    frame #49: 0x00007f7a9d520e2b\r\n    frame #50: 0x00007f7a9d520da9\r\n    frame #51: 0x00007f7a9d52074f\r\n    frame #52: 0x00007f7a9d5205ab\r\n    frame #53: 0x00007f7a9d520531\r\n    frame #54: 0x00007f7a9d51e3e3\r\n    frame #55: 0x00007f7a9d51df87\r\n    frame #56: 0x00007f7a9d51ddbb\r\n    frame #57: 0x00007f7a9d51dd49\r\n    frame #58: 0x00007f7a9d51be68\r\n    frame #59: 0x00007f7a9d51dad2\r\n    frame #60: 0x00007f7a9d51d8fb\r\n    frame #61: 0x00007f7a9d51d889\r\n    frame #62: 0x00007f7a9d51ba24\r\n    frame #63: 0x00007f7a9d51d612\r\n    frame #64: 0x00007f7a9d51d43b\r\n    frame #65: 0x00007f7a9d51d3c9\r\n    frame #66: 0x00007f7a9d51b873\r\n    frame #67: 0x00007f7a9d51aaf7\r\n    frame #68: 0x00007f7a9d51a92b\r\n    frame #69: 0x00007f7a9d51a8b9\r\n    frame #70: 0x00007f7a9d5186f2\r\n    frame #71: 0x00007f7a9d51809b\r\n    frame #72: 0x00007f7a9d518029\r\n    frame #73: 0x00007f7a9c904810\r\n    frame #74: 0x00007f7a9c903a8b\r\n    frame #75: 0x00007f7a9c90393d\r\n    frame #76: 0x00007f7a9c901e1a\r\n    frame #77: 0x00007f7a9c900acb\r\n    frame #78: 0x00007f7a9c900a51\r\n    frame #79: 0x00007f7a9c8f8789\r\n    frame #80: 0x00007f7a9c8f861b\r\n    frame #81: 0x00007f7a9c8f85ad\r\n    frame #82: 0x00007f7a9c8f3605\r\n    frame #83: 0x00007f7a9c8f2b1b\r\n    frame #84: 0x00007f7a9c8f2aad\r\n    frame #85: 0x00007f7a9c8f28a3\r\n    frame #86: 0x00007f7a9c8f226b\r\n    frame #87: 0x00007f7a9c8f21fd\r\n    frame #88: 0x00007f7a9c8f0245\r\n    frame #89: 0x00007f7a9c8efe74\r\n    frame #90: 0x00007f7a996bdcfd\r\n    frame #91: 0x00007f7a9c8db8b0\r\n    frame #92: 0x00007f7a996bdcfd\r\n    frame #93: 0x00007f7a9974e268\r\n    frame #94: 0x00007f7b12df3edf libcoreclr.so`CallDescrWorkerInternal + 124\r\n    frame #95: 0x00007f7b12d1460c libcoreclr.so`MethodDescCallSite::CallTargetWorker(unsigned long const*, unsigned long*, int) + 83 at callhelpers.cpp:78\r\n    frame #96: 0x00007f7b12d145b9 libcoreclr.so`MethodDescCallSite::CallTargetWorker(this=<unavailable>, pArguments=<unavailable>, pReturnValue=0x00007f783aeedb28, cbReturnValue=8) + 857 at callhelpers.cpp:620\r\n    frame #97: 0x00007f7b12e948b5 libcoreclr.so`QueueUserWorkItemManagedCallback(void*) [inlined] MethodDescCallSite::Call_RetBool(this=0x00007f783aeedb30, pArguments=<unavailable>) + 15 at callhelpers.h:433\r\n    frame #98: 0x00007f7b12e948a6 libcoreclr.so`QueueUserWorkItemManagedCallback(pArg=0x00007f783aeedebe) + 166 at comthreadpool.cpp:451\r\n    frame #99: 0x00007f7b12ce5f3d libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchInner(pCallState=0x00007f783aeedd68) + 413 at threads.cpp:8850\r\n    frame #100: 0x00007f7b12ce5eeb libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchMiddle(pCallState=0x00007f783aeedd68) + 83 at threads.cpp:8901\r\n    frame #101: 0x00007f7b12ce5e98 libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) [inlined] ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::$_8::operator()(ManagedThreadBase_DispatchOuter(ManagedThreadCallState*)::TryArgs*) const::{lambda(Param*)#1}::operator()(Param*) const at threads.cpp:9139\r\n    frame #102: 0x00007f7b12ce5e98 libcoreclr.so`ManagedThreadBase_DispatchOuter(ManagedThreadCallState*) at threads.cpp:9141\r\n    frame #103: 0x00007f7b12ce5e98 libcoreclr.so`ManagedThreadBase_DispatchOuter(pCallState=<unavailable>) + 248 at threads.cpp:9178\r\n    frame #104: 0x00007f7b12ce66a0 libcoreclr.so`ManagedThreadBase::ThreadPool(ADID, void (*)(void*), void*) [inlined] ManagedThreadBase_FullTransitionWithAD(pAppDomain=<unavailable>, pTarget=<unavailable>, args=<unavailable>, filterType=<unavailable>)(void*), void*, UnhandledExceptionLocation) + 43 at threads.cpp:9199\r\n    frame #105: 0x00007f7b12ce6675 libcoreclr.so`ManagedThreadBase::ThreadPool(pAppDomain=<unavailable>, pTarget=<unavailable>, args=<unavailable>)(void*), void*) + 21 at threads.cpp:9241\r\n    frame #106: 0x00007f7b12e78ab7 libcoreclr.so`ManagedPerAppDomainTPCount::DispatchWorkItem(this=0x0000000001d0bf60, foundWork=0x00007f783aeedebf, wasNotRecalled=0x00007f783aeedebe) + 295 at threadpoolrequest.cpp:754\r\n    frame #107: 0x00007f7b12d04d33 libcoreclr.so`ThreadpoolMgr::WorkerThreadStart(void*) [inlined] ThreadpoolMgr::ExecuteWorkRequest(bool*, bool*) + 1267 at win32threadpool.cpp:1560\r\n    frame #108: 0x00007f7b12d04d12 libcoreclr.so`ThreadpoolMgr::WorkerThreadStart(lpArgs=<unavailable>) + 1234 at win32threadpool.cpp:2024\r\n    frame #109: 0x00007f7b1307a712 libcoreclr.so`CorUnix::CPalThread::ThreadEntry(pvParam=0x00007f7834002260) + 306 at thread.cpp:1682\r\n    frame #110: 0x00007f7b1456ee65 libpthread.so.0`start_thread + 197\r\n(lldb)\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27962","RelatedDescription":"Closed issue \"dotnet 2.1.12 : Segmentation fault on NullReferenceException\" (#27962)"},{"Id":"536062209","IsPullRequest":true,"CreatedAt":"2019-12-10T23:58:27","Actor":"eerhardt","Number":"27969","RawContent":null,"Title":"[release/3.1] Stop throwing exception in TimeZoneInfo POSIX parsing","State":"open","Body":"Release/3.1 port of https://github.com/dotnet/runtime/pull/458.\r\nFixes https://github.com/dotnet/corefx/issues/42192\r\n\r\n### Summary\r\nOn RHEL 8, some time zones (specifically `Africa/Casablanca`) stop supporting daylight savings transitions because of a change in the tzdata files.\r\n\r\n### Customer Impact\r\nApplications getting time zone information on RedHat 8 (and potentially other Unix distros if using the same tzdata version) stop working with daylight savings time for `Africa/Casablanca` time zone.\r\n\r\nThis change allows `TimeZoneInfo` to work correctly for all the daylight savings transitions in the tzdata file, and it skips the \"future\" daylight savings template if we can't support it.\r\n\r\n### Regression?\r\nFor a user it is a regression when updating to RHEL 8 because of the change in the tzdata in the OS. Our code didn't regress here - we never supported this format before now and were always throwing an exception. This is the first time we've hit it in the real-world.\r\n\r\n### Testing\r\nI ran all the TimeZoneInfo tests on RHEL 8. They failed for `Africa/Casablanca` before this change, and now pass afterward.\r\n\r\n### Risk\r\n**Low**: The change is isolated to a non-supported format that would cause DST to completely stop working before. Now we are allowing the other DST information to work, while skipping the unsupported future dates.\r\n\r\ncc: @danmosemsft @tarekgh @ericstj \r\n\r\n____\r\n\r\n\r\nIsDaylightSavingTime_CasablancaMultiYearDaylightSavings fails on rhel.8\r\n\r\nWhen parsing the tzdata POSIX string that contains an 'n' Julian date, we are currently throwing an exception, and then falling back to a TimeZoneInfo without DST enabled. However, this is a mistake because there are other DST transitions that were read from the tzdata file that are valid and usable. We shouldn't be throwing that information away.\r\n\r\nSo instead, we now skip the POSIX string if we detect an unsupported 'n' Julian date, and just use the last transition as the AdjustmentRule for all the DateTimes in the future. This way we can still make DST determinations correctly for some DateTimes.\r\n\r\nFix https://github.com/dotnet/corefx/issues/42192","Url":"https://github.com/dotnet/coreclr/pull/27969","RelatedDescription":"Open PR \"[release/3.1] Stop throwing exception in TimeZoneInfo POSIX parsing\" (#27969)"},{"Id":"535533061","IsPullRequest":false,"CreatedAt":"2019-12-10T14:47:07","Actor":"NMSAzulX","Number":"27968","RawContent":null,"Title":"How do I write code that allows a method to use Calli instructions at run time? ","State":"closed","Body":"Now, I use MethodInfo.CreateDelegate to create delegates, but its execution performance is lower than that of Calli. How can I improve it?","Url":"https://github.com/dotnet/coreclr/issues/27968","RelatedDescription":"Closed issue \"How do I write code that allows a method to use Calli instructions at run time? \" (#27968)"},{"Id":"534871799","IsPullRequest":true,"CreatedAt":"2019-12-09T11:37:47","Actor":"janvorli","Number":"27967","RawContent":null,"Title":"Port to 2.1 - Fix VirtualMemoryLogging::logRecords overflow","State":"open","Body":"Issue: https://github.com/dotnet/coreclr/issues/27547\r\n\r\nCustomer impact\r\n---\r\n\r\nCrash or hang in long running (days) processes on Linux, triggered by runtime executing 2 billion of  virtual memory operations.\r\n\r\nRegression?\r\n---\r\n\r\nNot a regression - the bug is present since .NET Core 1.0. Windows/Linux reliability gap.\r\n\r\nRisk\r\n---\r\nLow\r\n\r\n----\r\n\r\nwhen VirtualMemoryLogging::recordNumber increments from LONG_MAX,\r\nit became negative number, and the result of i % MaxRecords became\r\na number from -127 to 0.\r\n\r\nWhen that happens we will ovewrite CRITICAL_SECTION virtual_critsec\r\nwhich are stored in bss right before logRecords with garbage data.\r\nThen most likely the process will have a GC hang with one or more\r\nGC threads stuck trying to enter or leave critical section.\r\n\r\nThe fix is to ensure ULONG value are passed to modulo operation.","Url":"https://github.com/dotnet/coreclr/pull/27967","RelatedDescription":"Open PR \"Port to 2.1 - Fix VirtualMemoryLogging::logRecords overflow\" (#27967)"},{"Id":"534465706","IsPullRequest":false,"CreatedAt":"2019-12-07T23:20:56","Actor":"EgorBo","Number":"27966","RawContent":null,"Title":"JIT: Optimize simple arithmetic with GT_NEG","State":"open","Body":"I was surprised it's not handled in `morph`, e.g. `-a + b` => `b - a`.\r\n```csharp\r\nint M1(int a, int b) => -a +  b; // optimize to  \"b - a\"\r\nint M2(int a, int b) =>  a + -b; // optimize to  \"a - b\"\r\nint M3(int a, int b) =>  a - -b; // optimize to  \"a + b\"\r\nint M4(int a, int b) => -a - -b; // optimize to  \"b - a\"\r\n```\r\nCurrent codegen:\r\n```asm\r\n; Method CC:M1(int,int):int:this\r\nG_M48868_IG02:\r\n       mov      eax, edx\r\n       neg      eax\r\n       add      eax, r8d\r\n\r\n; Method CC:M2(int,int):int:this\r\nG_M15271_IG02:\r\n       mov      eax, r8d\r\n       neg      eax\r\n       add      eax, edx\r\n\r\n; Method CC:M3(int,int):int:this\r\nG_M13857_IG02:\r\n       mov      eax, r8d\r\n       neg      eax\r\n       sub      edx, eax\r\n       mov      eax, edx\r\n\r\n; Method CC:M4(int,int):int:this\r\nG_M28384_IG02:\r\n       mov      eax, edx\r\n       neg      eax\r\n       mov      edx, r8d\r\n       neg      edx\r\n       sub      eax, edx\r\n```\r\nExpected codegen: https://godbolt.org/z/nmZxv8\r\n\r\nAlso:\r\n```csharp\r\n\r\nint M5(int a) =>  -a / 10;  // optimize to  \"a / -10\"\r\nint M6(int a) => -(a / 10); // optimize to  \"a / -10\"\r\nint M7(int a) =>  -a * 10;  // optimize to  \"a * -10\"\r\nint M8(int a) => -(a * 10); // optimize to  \"a * -10\"\r\n```\r\n\r\ncategory:cq\r\ntheme:basic-cq\r\nskill-level:beginner\r\ncost:small","Url":"https://github.com/dotnet/coreclr/issues/27966","RelatedDescription":"Open issue \"JIT: Optimize simple arithmetic with GT_NEG\" (#27966)"},{"Id":"533549794","IsPullRequest":true,"CreatedAt":"2019-12-05T23:18:06","Actor":"mmitche","Number":"27965","RawContent":null,"Title":"[release/3.1] Use 3.1.100 SDK in 3.1 build","State":"closed","Body":"To ensure that the 3.1 stack uses a consistent SDK.  The upper portions of the stack require the 3.1 SDK because for TFM purposes.","Url":"https://github.com/dotnet/coreclr/pull/27965","RelatedDescription":"Closed or merged PR \"[release/3.1] Use 3.1.100 SDK in 3.1 build\" (#27965)"},{"Id":"533008488","IsPullRequest":true,"CreatedAt":"2019-12-04T23:38:14","Actor":"jashook","Number":"27964","RawContent":null,"Title":"Disable formatting job in 3.0","State":"open","Body":"@hoyosjs ","Url":"https://github.com/dotnet/coreclr/pull/27964","RelatedDescription":"Open PR \"Disable formatting job in 3.0\" (#27964)"},{"Id":"532845984","IsPullRequest":true,"CreatedAt":"2019-12-04T18:01:14","Actor":"jashook","Number":"27963","RawContent":null,"Title":"This is a point fix for not allowing fast tail calls on windows arm64 for vararg methods","State":"open","Body":"This only affects windows arm and arm64.\r\n\r\n/cc @dotnet/jit-contrib ","Url":"https://github.com/dotnet/coreclr/pull/27963","RelatedDescription":"Open PR \"This is a point fix for not allowing fast tail calls on windows arm64 for vararg methods\" (#27963)"},{"Id":"531827281","IsPullRequest":false,"CreatedAt":"2019-12-04T01:51:24","Actor":"MiyamuraMiyako","Number":"27961","RawContent":null,"Title":"AssemblyLoadContext.Default.LoadFromAssemblyPath throw FileLoadException","State":"closed","Body":"Main program and module program is `.net core3.1` program.\r\n\r\nModule program just one class with out any content:\r\n```C#\r\npublic class Module {}\r\n```\r\nMainProgram have below logic:\r\n```C#\r\nAssemblyLoadContext.Default.LoadFromAssemblyPath($@\"{myPath}\\Module.dll\");\r\n```\r\n\r\nthen MainProgram throw `System.IO.FileLoadException`.\r\n```\r\nCould not load file or assembly 'Module, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.\r\n\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromPath(IntPtr ptrNativeAssemblyLoadContext, String ilPath, String niPath, ObjectHandleOnStack retAssembly)\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath)\r\n   at ZZJ.Hospital.Plugin.MEF.Operate.FindSubModule() in D:\\ZZJ.Hospital\\ZZJ.Hospital\\Plugin\\MEF\\Operate.cs:line 24\r\n   at ZZJ.Hospital.Plugin.MEF.SubModule.FindInitSubModule() in D:\\ZZJ.Hospital\\ZZJ.Hospital\\Plugin\\MEF\\SubModule.cs:line 18\r\n   at ZZJ.Hospital.MainWindow.FindSubModule() in D:\\ZZJ.Hospital\\ZZJ.Hospital\\StartWindow.xaml.cs:line 33\r\n   at ZZJ.Hospital.MainWindow..ctor() in D:\\ZZJ.Hospital\\ZZJ.Hospital\\StartWindow.xaml.cs:line 28\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27961","RelatedDescription":"Closed issue \"AssemblyLoadContext.Default.LoadFromAssemblyPath throw FileLoadException\" (#27961)"},{"Id":"530797589","IsPullRequest":false,"CreatedAt":"2019-12-01T21:19:33","Actor":"cup","Number":"27960","RawContent":null,"Title":"Print array","State":"open","Body":"I can create a program like this:\r\n\r\n~~~cs\r\nusing System;\r\nclass App {\r\n   static void Main() {\r\n      int[] a1 = {10, 20};\r\n      Console.WriteLine(a1);\r\n   }\r\n}\r\n~~~\r\n\r\nbut it doesnt give expected output:\r\n\r\n~~~\r\nSystem.Int32[]\r\n~~~\r\n\r\nI checked online:\r\n\r\nhttps://stackoverflow.com/questions/16265247\r\n\r\nand people suggest to loop through the array. Is that really necessary? Many\r\nother languages dont require that, like Go:\r\n\r\n~~~go\r\npackage main\r\nimport \"fmt\"\r\nfunc main() {\r\n   a1 := []int{10, 20}\r\n   fmt.Println(a1)\r\n}\r\n~~~\r\n\r\nNim:\r\n\r\n~~~nim\r\nvar a1 = [10, 20]\r\necho a1\r\n~~~\r\n\r\nD:\r\n\r\n~~~d\r\nimport std.stdio;\r\nvoid main() {\r\n   auto a1 = [10, 20];\r\n   a1.writeln;\r\n}\r\n~~~\r\n\r\nJavaScript:\r\n\r\n~~~js\r\nlet a1 = [10, 20];\r\nconsole.log(a1);\r\n~~~\r\n\r\nPython:\r\n\r\n~~~py\r\na1 = [10, 20]\r\nprint(a1)\r\n~~~\r\n","Url":"https://github.com/dotnet/coreclr/issues/27960","RelatedDescription":"Open issue \"Print array\" (#27960)"},{"Id":"530496346","IsPullRequest":true,"CreatedAt":"2019-11-29T22:01:19","Actor":"janvorli","Number":"27959","RawContent":null,"Title":"Port to 3.1 - Fix out of range access in GetRecycleMemoryInfo","State":"open","Body":"Customer impact\r\n---\r\n\r\nRuntime crash or hang within a few seconds in certain types of Linux virtualized environments (e.g. OpenVZ)\r\n\r\nRegression?\r\n---\r\nRegression from 2.1, introduced by https://github.com/dotnet/coreclr/pull/23824\r\n\r\nRisk\r\n---\r\nLow\r\n\r\n---\r\n\r\nPorts change #26873 to release 3.1 branch.\r\n\r\nOn OpenVZ virtualized linux, GetCurrentProcessorNumber which uses sched_getcpu()\r\ncan return a value greater than the number of processors reported by\r\nsched_getaffinity with CPU_COUNT or sysconf(_SC_NPROCESSORS_ONLN).\r\nFor example, taskset -c 2,3 ./MyApp will make CPU_COUNT be 2 but\r\nsched_getcpu() can return 2 or 3, and OpenVZ kernel can make\r\nsysconf(_SC_NPROCESSORS_ONLN) return a limited cpu count but\r\nsched_getcpu() still report the real processor number.\r\n\r\nExample of affinity vs current CPU id on OpenVZ:\r\nnproc: 8\r\nnprocOnline: 1\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 2\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 2\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 2\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 2\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 2\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 5\r\naffinity: 1, 0, 0, 0, 0, 0, 0, 0, cpuid: 5","Url":"https://github.com/dotnet/coreclr/pull/27959","RelatedDescription":"Open PR \"Port to 3.1 - Fix out of range access in GetRecycleMemoryInfo\" (#27959)"},{"Id":"537150704","IsPullRequest":false,"CreatedAt":"2019-11-15T16:20:09","Actor":"andrewmcclellankibo","Number":"27970","RawContent":null,"Title":"System.Threading.Timer Not Running On Ubuntu server","State":"open","Body":"# System.Threading.Timer Not Running On Ubuntu server\r\n\r\n\r\n# General\r\nCreated a worker service project, used a background service to create a timer function that followed:\r\nhttps://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-3.0&tabs=visual-studio\r\n\r\n\r\nWhen executing: running locally on windows, timer events trigger as expected.\r\n\r\nDeployed to ubuntu server: timer events are never triggered.\r\nVerified that the app is running, and no issues instantiating the timer, it just never actually triggers the timer.\r\n","Url":"https://github.com/dotnet/coreclr/issues/27970","RelatedDescription":"Open issue \"System.Threading.Timer Not Running On Ubuntu server\" (#27970)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"547795768","IsPullRequest":true,"CreatedAt":"2020-01-10T07:00:51","Actor":"dotnet-maestro[bot]","Number":"13170","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Subscription**: bdd984ca-7112-4d1b-d452-08d76e1d3434\r\n- **Build**: 20200109.2\r\n- **Date Produced**: 1/9/2020 11:11 PM\r\n- **Commit**: b3cf8ef9e7df8d9cb28b3545ce1f85f548deca75\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.20059.2\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13170","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13170)"},{"Id":"544096255","IsPullRequest":true,"CreatedAt":"2020-01-10T06:08:25","Actor":"wli3","Number":"13166","RawContent":null,"Title":"[WIP] test CI","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13166","RelatedDescription":"Closed or merged PR \"[WIP] test CI\" (#13166)"},{"Id":"547112753","IsPullRequest":true,"CreatedAt":"2020-01-08T22:05:35","Actor":"dotnet-maestro[bot]","Number":"13169","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20200108.1\r\n- **Date Produced**: 1/8/2020 8:08 PM\r\n- **Commit**: 7a8c66ba63c88ffb13e509e46c5b83398a928683\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.20058.1\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13169","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13169)"},{"Id":"546478827","IsPullRequest":true,"CreatedAt":"2020-01-07T20:35:34","Actor":"dotnet-maestro[bot]","Number":"13168","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20200107.1\r\n- **Date Produced**: 1/7/2020 6:57 PM\r\n- **Commit**: 831a360a52d5a24604794fb7a06e14c3065c31b5\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.20057.1\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13168","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13168)"},{"Id":"544255363","IsPullRequest":true,"CreatedAt":"2019-12-31T19:26:05","Actor":"wli3","Number":"13167","RawContent":null,"Title":"[WIP] Disable useapphost on mac by default 3.0.1xx","State":"open","Body":"Need https://github.com/dotnet/sdk/pull/4019 to be in first","Url":"https://github.com/dotnet/cli/pull/13167","RelatedDescription":"Open PR \"[WIP] Disable useapphost on mac by default 3.0.1xx\" (#13167)"},{"Id":"544058113","IsPullRequest":true,"CreatedAt":"2019-12-31T02:15:39","Actor":"dotnet-maestro[bot]","Number":"13165","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191230.1\r\n- **Date Produced**: 12/31/2019 12:16 AM\r\n- **Commit**: 71f48b3241b93c00998336f947d146f57de93f4e\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.19630.1\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13165","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13165)"},{"Id":"542461477","IsPullRequest":true,"CreatedAt":"2019-12-28T02:13:29","Actor":"dotnet-maestro[bot]","Number":"13163","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191225.2\r\n- **Date Produced**: 12/26/2019 6:10 AM\r\n- **Commit**: 4a9be5b8dfb0c287883d3fd79c307f2bcfb41119\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.19625.2\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13163","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13163)"},{"Id":"543023695","IsPullRequest":true,"CreatedAt":"2019-12-28T00:35:57","Actor":"dotnet-maestro[bot]","Number":"13164","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from nuget/nuget.client","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3c9d65bb-d2bc-4c69-c5d7-08d76fa9c820)\r\n## From https://github.com/NuGet/NuGet.Client\r\n- **Build**: 5.5.0.6355\r\n- **Date Produced**: 12/24/2019 5:03 AM\r\n- **Commit**: cb402b5a3340ab5b2605ecc72de7f70aaac95344\r\n- **Branch**: refs/heads/dev\r\n- **Updates**:\r\n  - **NuGet.Build.Tasks** -> 5.5.0-preview.2.6355\r\n\r\n[marker]: <> (End:3c9d65bb-d2bc-4c69-c5d7-08d76fa9c820)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13164","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from nuget/nuget.client\" (#13164)"},{"Id":"540635534","IsPullRequest":true,"CreatedAt":"2019-12-20T08:34:16","Actor":"dotnet-maestro[bot]","Number":"13162","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191219.4\r\n- **Date Produced**: 12/20/2019 5:39 AM\r\n- **Commit**: 36cf3588bae9485ab2ac20104ee69de8270ad412\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.19619.4\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13162","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13162)"},{"Id":"539860442","IsPullRequest":true,"CreatedAt":"2019-12-18T19:38:22","Actor":"dotnet-maestro[bot]","Number":"13161","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from nuget/nuget.client","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3c9d65bb-d2bc-4c69-c5d7-08d76fa9c820)\r\n## From https://github.com/NuGet/NuGet.Client\r\n- **Build**: 5.5.0.6330\r\n- **Date Produced**: 12/4/2019 1:59 AM\r\n- **Commit**: 6f7be0986028256f05c894eac2f7816c85611984\r\n- **Branch**: refs/heads/dev\r\n- **Updates**:\r\n  - **NuGet.Build.Tasks** -> 5.5.0-preview.1.6330\r\n\r\n[marker]: <> (End:3c9d65bb-d2bc-4c69-c5d7-08d76fa9c820)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13161","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from nuget/nuget.client\" (#13161)"},{"Id":"537838019","IsPullRequest":true,"CreatedAt":"2019-12-18T01:38:23","Actor":"dotnet-maestro[bot]","Number":"13160","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191217.15\r\n- **Date Produced**: 12/18/2019 12:36 AM\r\n- **Commit**: 7e7e3eab372d4c76824ba8c31b05f11b94b8a057\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.19617.15\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13160","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13160)"},{"Id":"537217099","IsPullRequest":true,"CreatedAt":"2019-12-13T22:07:36","Actor":"dotnet-maestro[bot]","Number":"13158","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20191213.8\r\n- **Date Produced**: 12/13/2019 8:24 PM\r\n- **Commit**: e98d59e0cc80d22c6c56e5818cd62583973b6657\r\n- **Branch**: refs/heads/release/3.1.2xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.200-preview.19613.8\r\n\r\n[marker]: <> (End:bdd984ca-7112-4d1b-d452-08d76e1d3434)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13158","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/sdk\" (#13158)"},{"Id":"537732084","IsPullRequest":false,"CreatedAt":"2019-12-13T19:28:51","Actor":"Thraka","Number":"13159","RawContent":null,"Title":"Powershell Install script is not signed","State":"open","Body":"#### Originally from\r\n_@jozefizso on Friday, December 13, 2019 2:28:43 PM_\r\n\r\nWhy is the PowerShell script unsigned? How do we know we are running a legitimate script when it's downloaded from internet on each build?\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: a2e484a9-5e0c-eb3e-1413-7b507c4fa07d\r\n* Version Independent ID: 5bc7caa5-f1c2-d7d5-fe02-80c65cca9672\r\n* Content: [dotnet-install scripts - .NET Core CLI](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script)\r\n* Content Source: [docs/core/tools/dotnet-install-script.md](https://github.com/dotnet/docs/blob/master/docs/core/tools/dotnet-install-script.md)\r\n* Product: **dotnet-core**\r\n* Technology: **dotnet-cli**\r\n* GitHub Login: @mairaw\r\n* Microsoft Alias: **mairaw**\r\n\r\n_Copied from original issue: dotnet/docs#16242_","Url":"https://github.com/dotnet/cli/issues/13159","RelatedDescription":"Open issue \"Powershell Install script is not signed\" (#13159)"},{"Id":"536563234","IsPullRequest":true,"CreatedAt":"2019-12-11T23:47:19","Actor":"dotnet-maestro[bot]","Number":"13156","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from aspnet/aspnetcore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:af9b1a64-20ee-4b07-c5da-08d76fa9c820)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191211.11\r\n- **Date Produced**: 12/11/2019 10:22 PM\r\n- **Commit**: 4b235df669038064ca539bec4bc732610b1eea3a\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.2-servicing.19611.11\r\n\r\n[marker]: <> (End:af9b1a64-20ee-4b07-c5da-08d76fa9c820)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13156","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from aspnet/aspnetcore\" (#13156)"},{"Id":"536589584","IsPullRequest":true,"CreatedAt":"2019-12-11T23:26:46","Actor":"wli3","Number":"13157","RawContent":null,"Title":"Revert MicrosoftAspNetCoreDeveloperCertificatesXPlatPackageVersion to…","State":"closed","Body":"… match ref pack","Url":"https://github.com/dotnet/cli/pull/13157","RelatedDescription":"Closed or merged PR \"Revert MicrosoftAspNetCoreDeveloperCertificatesXPlatPackageVersion to…\" (#13157)"},{"Id":"536104877","IsPullRequest":true,"CreatedAt":"2019-12-11T15:00:12","Actor":"mmitche","Number":"13155","RawContent":null,"Title":"[release/3.1.2xx] Revert back to 3.1.0 runtime versions","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13155","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Revert back to 3.1.0 runtime versions\" (#13155)"},{"Id":"534626066","IsPullRequest":true,"CreatedAt":"2019-12-11T02:41:56","Actor":"wli3","Number":"13152","RawContent":null,"Title":"Update stage0","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13152","RelatedDescription":"Closed or merged PR \"Update stage0\" (#13152)"},{"Id":"534221922","IsPullRequest":true,"CreatedAt":"2019-12-10T20:53:32","Actor":"mmitche","Number":"13147","RawContent":null,"Title":"[release/3.0.1xx] Change to name/value variables and remove unused","State":"closed","Body":"- Remove old legacy PB_ values that are no longer used\r\n- Change to the name, value pair approach for variables.\r\nThis will allow internal builds to add variable groups required for accessing internal runtimes","Url":"https://github.com/dotnet/cli/pull/13147","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Change to name/value variables and remove unused\" (#13147)"},{"Id":"535519187","IsPullRequest":true,"CreatedAt":"2019-12-10T16:22:07","Actor":"dotnet-maestro-bot","Number":"13154","RawContent":null,"Title":"[automated] Merge branch 'release/3.1.1xx' => 'release/3.1.2xx'","State":"closed","Body":"I detected changes in the release/3.1.1xx branch which have not been merged yet to release/3.1.2xx. I'm a robot and am configured to help you automatically keep release/3.1.2xx up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.1.1xx by the following committers:\n\n* mmitche\n* dotnet-maestro[bot]\n* wli3\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.1.1xx\r\ngit pull --ff-only\r\ngit checkout release/3.1.2xx\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.1.1xx\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.1.1xx-to-release/3.1.2xx'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-release/3.1.2xx release/3.1.2xx\r\ngit pull https://github.com/dotnet-maestro-bot/cli merge/release/3.1.1xx-to-release/3.1.2xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.1.1xx-to-release/3.1.2xx release/3.1.2xx\r\ngit pull git@github.com:dotnet-maestro-bot/cli merge/release/3.1.1xx-to-release/3.1.2xx\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/cli HEAD:merge/release/3.1.1xx-to-release/3.1.2xx\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/cli/pull/13154","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/3.1.1xx' => 'release/3.1.2xx'\" (#13154)"},{"Id":"533589968","IsPullRequest":true,"CreatedAt":"2019-12-09T18:21:55","Actor":"mmitche","Number":"13143","RawContent":null,"Title":"[release/3.1.1xx] Update to 3.1.100 rtm sdk","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13143","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update to 3.1.100 rtm sdk\" (#13143)"},{"Id":"533591152","IsPullRequest":true,"CreatedAt":"2019-12-09T17:03:19","Actor":"mmitche","Number":"13144","RawContent":null,"Title":"[release/3.1.2xx] Update to 3.1.100 rtm sdk","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13144","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update to 3.1.100 rtm sdk\" (#13144)"},{"Id":"534466510","IsPullRequest":true,"CreatedAt":"2019-12-09T05:23:18","Actor":"dotnet-maestro[bot]","Number":"13148","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13148","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#13148)"},{"Id":"534646792","IsPullRequest":true,"CreatedAt":"2019-12-09T02:28:15","Actor":"wli3","Number":"13153","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13153","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#13153)"},{"Id":"534466950","IsPullRequest":true,"CreatedAt":"2019-12-08T00:30:21","Actor":"mmitche","Number":"13151","RawContent":null,"Title":"[release/3.0.1xx] Enable official builds on internal branches","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13151","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Enable official builds on internal branches\" (#13151)"},{"Id":"534466590","IsPullRequest":true,"CreatedAt":"2019-12-08T00:06:50","Actor":"dotnet-maestro[bot]","Number":"13150","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:94c24b6f-4197-4be9-5768-08d76e1d56cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:94c24b6f-4197-4be9-5768-08d76e1d56cb)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13150","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/arcade\" (#13150)"},{"Id":"534466539","IsPullRequest":true,"CreatedAt":"2019-12-08T00:06:23","Actor":"dotnet-maestro[bot]","Number":"13149","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191207.3\r\n- **Date Produced**: 12/7/2019 6:35 PM\r\n- **Commit**: 4d80b9cfa53e309c8f685abff3512f60c3d8a3d1\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19607.3\r\n\r\n[marker]: <> (End:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13149","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#13149)"},{"Id":"533540123","IsPullRequest":true,"CreatedAt":"2019-12-06T18:06:21","Actor":"wli3","Number":"13142","RawContent":null,"Title":"Update branding to \"preview\"","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/13142","RelatedDescription":"Closed or merged PR \"Update branding to \"preview\"\" (#13142)"},{"Id":"533696470","IsPullRequest":true,"CreatedAt":"2019-12-06T02:25:32","Actor":"dotnet-maestro[bot]","Number":"13146","RawContent":null,"Title":"[release/3.1.2xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2edc82a1-19d9-431c-901b-08d76d41c6c3)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20191205.2\r\n- **Date Produced**: 12/6/2019 1:04 AM\r\n- **Commit**: 13abe7e2749d95337e8d72efdc5b71611815fd43\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.1.1-servicing.19605.2\r\n\r\n[marker]: <> (End:2edc82a1-19d9-431c-901b-08d76d41c6c3)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13146","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Update dependencies from dotnet/templating\" (#13146)"},{"Id":"533696469","IsPullRequest":true,"CreatedAt":"2019-12-06T02:20:30","Actor":"dotnet-maestro[bot]","Number":"13145","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20191205.2\r\n- **Date Produced**: 12/6/2019 1:04 AM\r\n- **Commit**: 13abe7e2749d95337e8d72efdc5b71611815fd43\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.1.1-servicing.19605.2\r\n\r\n[marker]: <> (End:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/13145","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/templating\" (#13145)"},{"Id":"533505361","IsPullRequest":true,"CreatedAt":"2019-12-05T19:16:24","Actor":"mmitche","Number":"13141","RawContent":null,"Title":"Use Microsoft.NETCore.App.Internal for runtime version","State":"closed","Body":"The final non-suffixed build is not written to a non-suffixed directory. \r\n\r\nAlso reorder a pinned dependency to work around potential https://github.com/dotnet/arcade/issues/4067","Url":"https://github.com/dotnet/cli/pull/13141","RelatedDescription":"Closed or merged PR \"Use Microsoft.NETCore.App.Internal for runtime version\" (#13141)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"548387889","IsPullRequest":false,"CreatedAt":"2020-01-11T06:11:32","Actor":"replaysMike","Number":"1679","RawContent":null,"Title":"UTF8 Encoding isn't consistent with .Net Framework","State":"open","Body":"I found a subtle difference that was revealed in a bunch of hashing code I had written a while back for .Net Framework. I wrote a multi-platform test that shows UTF8Encoding is treated slightly different in .Net Standard and I don't really have a good way to solve it yet.\r\n\r\nConsider the following - I encoded a string in hex to guarantee the bytes are the same for the test:\r\n(hopefully github doesn't mangle the expected string, it looks correct after previewing)\r\n\r\n```csharp\r\n[Test]\r\npublic void ShouldEncodeUTF8()\r\n{\r\n    var netFrameworkExpected = \"�\\u0004[\\u0004�\\u0001�\\v,�\\u001cn]�$«�� )�:�YH̗I5�V���Nl7α��i�g_�ZQW%\\u001d�Dy\\u001eЕ\\u0013w�v+\\u0012*��\\u000f*��\\u0019r��}���8��w��&�\\r���\\f����?���&�t�M��[�`kzhz9\\u0015�\\u0012I�\\u001ey_`�\\u0011\\tF��A�Af~��q��%P�����\\u0003�x�(g���e\\u001fM�32\\u0014��\";\r\n    var hex = \"BC045B0488019F0B2CE61C6E5DFC24C2ABE09BDA2029CC3AE9AD5948CC9749359756B1A2D94E6C37CEB189D269AA675FF75A5157251D8544791ED09513779B762B122A89E10F2A98E91972D7CA7DF9F98038DFDB779FED269A0DE3F8FA0C828993B23F85B5A826B474E84DFECD5B87606B7A687A3915C31249CE1E795F609A11094686DF41E99041667E9DD271A0E22550FDD0C3CEF0039678F328679B8590651F4DBE3332148DBA\";\r\n    var bytes = hex.HexToBytes();\r\n    var utf8Encoded = Encoding.UTF8.GetString(bytes);\r\n    Assert.AreEqual(netFrameworkExpected, utf8Encoded);\r\n}\r\n\r\npublic static byte[] HexToBytes(this string hexString)\r\n{\r\n    return Enumerable.Range(0, hexString.Length)\r\n        .Where(x => x % 2 == 0)\r\n        .Select(x => Convert.ToByte(hexString.Substring(x, 2), 16))\r\n        .ToArray();\r\n}\r\n```\r\n\r\nThis test will pass on .Net Framework 4.8, but will fail on .Net Standard 2.0","Url":"https://github.com/dotnet/standard/issues/1679","RelatedDescription":"Open issue \"UTF8 Encoding isn't consistent with .Net Framework\" (#1679)"},{"Id":"548237528","IsPullRequest":false,"CreatedAt":"2020-01-10T18:55:55","Actor":"MikeKenyon","Number":"1678","RawContent":null,"Title":"System.Uri decoding automatically and incorrectly","State":"open","Body":"Consider the following block:\r\n\r\n```\r\n            var uri = new Uri($\"https://sample.com/api/go?o=Presentation%20of%20%E2%80%9CGreen%E2%80%9D%20data\");\r\n            var original = uri.OriginalString;\r\n            var modified = uri.ToString();\r\n```\r\n\r\nThe URL contains contents that are not necessarily valid ASCII characters.  In this regard, the modified version of the string shows the content there decoded, while the original (as provided) contains encoded versions of those.\r\n\r\nThis is important because a number of uses for a URL require them to comply to with, [HTTP Headers](https://tools.ietf.org/html/rfc7230#section-3.2.4) for example.  The URI provided was valid as a header.  The URL returned does not.    This comes up when say doing a redirect to it.\r\n\r\nThis can be avoided by using a String to represent the URL location, but that's generally considered a bad practice and anti-pattern.  \r\n\r\nIt would be amazing if we could indicate somehow that while the decoding that gets performed automatically is to be used in such a way that any encoding provided should not be undone.\r\n\r\nI'm thinking a constructor parameter or property.","Url":"https://github.com/dotnet/standard/issues/1678","RelatedDescription":"Open issue \"System.Uri decoding automatically and incorrectly\" (#1678)"},{"Id":"547178727","IsPullRequest":false,"CreatedAt":"2020-01-09T00:24:57","Actor":"Chamberlain91","Number":"1677","RawContent":null,"Title":"Bug with \"is\" operator on int[] and uint[] via object type reference.","State":"open","Body":"Hello developers,\r\n\r\nI've discovered what I believe to be a bug. In the code below you can see I create two arrays, one of `int` and one of `uint` and assign them both to object. I then check the `is` operator for type comparison.\r\n```cs\r\n            object ai = new int[0];\r\n            object au = new uint[0];\r\n\r\n            Console.WriteLine(ai is uint[]);\r\n            Console.WriteLine(ai is int[]);\r\n            Console.WriteLine(au is uint[]);\r\n            Console.WriteLine(au is int[]);\r\n```\r\nThe output I get is four prints of true, which I would expect only two.\r\n\r\nThe strange thing is if I assign `ai` and `au` to their actual types instead of `object`, then the code works as expected.\r\n\r\nSorry if this should be in the runtime repo or somewhere else.","Url":"https://github.com/dotnet/standard/issues/1677","RelatedDescription":"Open issue \"Bug with \"is\" operator on int[] and uint[] via object type reference.\" (#1677)"},{"Id":"546869832","IsPullRequest":false,"CreatedAt":"2020-01-08T13:45:20","Actor":"sudheer876","Number":"1676","RawContent":null,"Title":"Severity Code Description Project File Line Suppression State Warning The primary reference \"Microsoft.Xrm.Sdk\" could not be resolved because it was built against the \".NETFramework,Version=v4.6.2\" framework.","State":"open","Body":"Severity Code Description Project File Line Suppression State\r\nWarning The primary reference \"Microsoft.Xrm.Sdk\" could not be resolved because it was built against the \".NETFramework,Version=v4.6.2\" framework. This is a higher version than the currently targeted framework \".NETFramework,Version=v4.5.2\".\tCRM\t\t\t\r\n","Url":"https://github.com/dotnet/standard/issues/1676","RelatedDescription":"Open issue \"Severity Code Description Project File Line Suppression State Warning The primary reference \"Microsoft.Xrm.Sdk\" could not be resolved because it was built against the \".NETFramework,Version=v4.6.2\" framework.\" (#1676)"},{"Id":"546426210","IsPullRequest":false,"CreatedAt":"2020-01-07T18:00:20","Actor":"sudheer876","Number":"1675","RawContent":null,"Title":"Please explain any one early binding and late binding with sample example code","State":"open","Body":"","Url":"https://github.com/dotnet/standard/issues/1675","RelatedDescription":"Open issue \"Please explain any one early binding and late binding with sample example code\" (#1675)"},{"Id":"546122602","IsPullRequest":false,"CreatedAt":"2020-01-07T12:32:41","Actor":"sudheer876","Number":"1674","RawContent":null,"Title":"which assembly we have to add for fault exception?","State":"closed","Body":"Severity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS0246\tThe type or namespace name 'FaultException<>' could not be found (are you missing a using directive or an assembly reference?)","Url":"https://github.com/dotnet/standard/issues/1674","RelatedDescription":"Closed issue \"which assembly we have to add for fault exception?\" (#1674)"},{"Id":"545060077","IsPullRequest":true,"CreatedAt":"2020-01-03T16:21:05","Actor":"lserhii","Number":"1673","RawContent":null,"Title":"Fixed broken link. Close:  #1653","State":"open","Body":"Added missing dot to fix a broken link in docs/faq.md","Url":"https://github.com/dotnet/standard/pull/1673","RelatedDescription":"Open PR \"Fixed broken link. Close:  #1653\" (#1673)"},{"Id":"544232543","IsPullRequest":false,"CreatedAt":"2019-12-31T17:31:26","Actor":"usaguerrilla","Number":"1672","RawContent":null,"Title":"SerialDevice.InputStream.ReadAsync continues on wrong thread","State":"closed","Body":".NET Standard 2.1 (couldn't change that for some reason)\r\nWindows 10, version 1903, Build 18362\r\nx64\r\n\r\n```\r\nint REQUEST_LENGTH = 8;\r\nint RESPONSE_LENGTH = 7;\r\n\r\nbyte[] request = new byte[REQUEST_LENGTH];\r\nbyte[] response = new byte[RESPONSE_LENGTH];\r\n\r\nSerialDevice serialDevice = await SerialDevice.FromIdAsync(serialDeviceId);\r\n\r\nusing (CancellationTokenSource cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(1)))\r\n{\r\n   Console.WriteLine(\"A=\" + Thread.CurrentThread.ManagedThreadId);\r\n   Task<IBuffer> readTask = serialDevice.InputStream.ReadAsync(response.AsBuffer(), RESPONSE_LENGTH, InputStreamOptions.None)\r\n                                                    .AsTask(cancellationTokenSource.Token);\r\n   await serialDevice.OutputStream.WriteAsync(request.AsBuffer());\r\n   Console.WriteLine(\"B=\" + Thread.CurrentThread.ManagedThreadId);\r\n   await Task.WhenAll(readTask);\r\n   Console.WriteLine(\"C=\" + Thread.CurrentThread.ManagedThreadId);\r\n}\r\n```\r\n\r\nThis results in the following output:\r\n\r\n```\r\nA=12\r\nB=12\r\nC=8\r\n```\r\n\r\nI didn't ask for thread switch in any of the calls.\r\n\r\nAnother issues is that ReadAsync ignores ReadTimeout / WriteTimeout. Just hangs forever if UART device never replies back.","Url":"https://github.com/dotnet/standard/issues/1672","RelatedDescription":"Closed issue \"SerialDevice.InputStream.ReadAsync continues on wrong thread\" (#1672)"},{"Id":"542974619","IsPullRequest":false,"CreatedAt":"2019-12-27T19:58:14","Actor":"mbrautgithub","Number":"1671","RawContent":null,"Title":"Referring  Microsoft.AspNetCore.App from netstandard2.1","State":"open","Body":"Hi Team,\r\n\r\nI am currently upgrading from .netcoreapp2.1 to netcoreapp3.1 and new to .Net technology.\r\n\r\nAlso, I have projects in my solution which are currently on netstandard2.0 and using below package references.\r\n\r\n<ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.OAuth\" Version=\"2.2.0\" />\r\n</ItemGroup>\r\n\r\nThese references are become absolute since .netcoreapp3.1 and if I would want to continue using these I need to use  FrameworkReference Include=\"Microsoft.AspNetCore.App\"  \r\n\r\nHowever I am getting below error.\r\nNETSDK1073\tThe FrameworkReference 'Microsoft.AspNetCore.App' was not recognized\tC:\\Program Files\\dotnet\\sdk\\3.1.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets\t283\t\t\r\n\r\nConfig file \r\n\r\nProject Sdk=\"Microsoft.NET.Sdk\"\r\n\r\n  PropertyGroup\r\n    TargetFrameworknetstandard2.1TargetFramework\r\n  PropertyGroup\r\n\r\n  ItemGroup\r\n   FrameworkReference Include=\"Microsoft.AspNetCore.App\" \r\n    PackageReference Include=\"Microsoft.Extensions.Caching.StackExchangeRedis\" Version=\"3.1.0\" \r\n  ItemGroup\r\n\r\n\r\nProjec\r\n\r\nPlease help me on the same\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1671","RelatedDescription":"Open issue \"Referring  Microsoft.AspNetCore.App from netstandard2.1\" (#1671)"},{"Id":"542015240","IsPullRequest":false,"CreatedAt":"2019-12-24T06:48:19","Actor":"tanveerbadar","Number":"1670","RawContent":null,"Title":"Potentially Incorrect Terminology in .net Standard FAQ","State":"open","Body":"The [FAQ document ](https://github.com/dotnet/standard/blob/master/docs/faq.md#is-appdomain-part-of-net-standard)for .net standard mentions this:\r\n\r\n> Using #if, also called cross-compiling\r\n\r\nShouldn't it say \"conditional compilation\" instead?","Url":"https://github.com/dotnet/standard/issues/1670","RelatedDescription":"Open issue \"Potentially Incorrect Terminology in .net Standard FAQ\" (#1670)"},{"Id":"541368388","IsPullRequest":false,"CreatedAt":"2019-12-21T20:30:37","Actor":"Emdot","Number":"1669","RawContent":null,"Title":"T4 cannot find netstandard 2.1","State":"open","Body":"When a T4 compile-time template references a netstandard 2.1 assembly, if the template's code tries to instantiate a class from that assembly it generates an error:\r\n\r\n```\r\nRunning transformation: System.IO.FileNotFoundException: Could not load file or assembly 'netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\nFile name: 'netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n   at Microsoft.VisualStudio.TextTemplatingDF0B46F7DFCCCF2CAD1FBB2E3A8D5FC6225E74132FDDBD12D44030F822D8B29A6DFFE0B2FED81F4BED62AEA63823EBB5C1182E33103987C1DA7368F9D1022F09.GeneratedTextTransformation.TransformText()\r\n   at System.Dynamic.UpdateDelegates.UpdateAndExecute1[T0,TRet](CallSite site, T0 arg0)\r\n   at Microsoft.VisualStudio.TextTemplating.TransformationRunner.PerformTransformation()\r\n```\r\n\r\nThis occurs even if the project containing the T4 template targets netstandard 2.1.\r\n\r\nTest case attached: just right-click TT.tt and select Run Custom Tool. The error message appears.\r\n\r\n[NetStandardT4.zip](https://github.com/dotnet/standard/files/3991786/NetStandardT4.zip)\r\n\r\nMicrosoft Visual Studio Community 2019, v 16.4.0; 64-bit PC; 64-bit Windows 10. I'm using the Devart Template Editor extension, v 1.0.11.0. I do not see this error when the dependency targets netstandard 2,0 instead.","Url":"https://github.com/dotnet/standard/issues/1669","RelatedDescription":"Open issue \"T4 cannot find netstandard 2.1\" (#1669)"},{"Id":"540785622","IsPullRequest":false,"CreatedAt":"2019-12-20T06:05:06","Actor":"Michael-Baumanns","Number":"1668","RawContent":null,"Title":"Runtime Standard - Core CLR / Core RT etc.","State":"open","Body":"Hello everybody,\r\n\r\nFirst of all I hope this is the right place for my question.\r\n\r\nIs there any specification about the expected types / methods who have to be implemented by a runtime implementation like core CLR or core RT? Do you have something like a runtime standard document?\r\n\r\nBest regards\r\n\r\nMichael","Url":"https://github.com/dotnet/standard/issues/1668","RelatedDescription":"Open issue \"Runtime Standard - Core CLR / Core RT etc.\" (#1668)"},{"Id":"538960639","IsPullRequest":false,"CreatedAt":"2019-12-17T10:01:53","Actor":"gulbanana","Number":"1667","RawContent":null,"Title":"Could we please get CallerArgumentExpressionAttribute in .NET Standard?","State":"open","Body":"It's not in ns2.1, so that's a missing feature from C# 8.","Url":"https://github.com/dotnet/standard/issues/1667","RelatedDescription":"Open issue \"Could we please get CallerArgumentExpressionAttribute in .NET Standard?\" (#1667)"},{"Id":"538783452","IsPullRequest":false,"CreatedAt":"2019-12-17T01:45:21","Actor":"pb-gs","Number":"1666","RawContent":null,"Title":"System.Net.PeerToPeer in .NET Standard","State":"open","Body":"Hey there,\r\n\r\nJust wondering if it is likely that .NET Standard will include classes from [`System.Net.PeerToPeer`](https://docs.microsoft.com/en-us/dotnet/api/system.net.peertopeer?view=netframework-4.8) (e.g. [`PeerNameResolver`](https://docs.microsoft.com/en-us/dotnet/api/system.net.peertopeer.peernameresolver?view=netframework-4.8)) or otherwise have peer name resolution protocol support?\r\n\r\nThank you.","Url":"https://github.com/dotnet/standard/issues/1666","RelatedDescription":"Open issue \"System.Net.PeerToPeer in .NET Standard\" (#1666)"},{"Id":"537929488","IsPullRequest":false,"CreatedAt":"2019-12-14T15:46:28","Actor":"shcummin","Number":"1665","RawContent":null,"Title":"<PackageReference> System.* when targeting NET Framework leads to ambiguity","State":"open","Body":"Related to Framework compat\r\n\r\nIn a project targeting 4.6, references:\r\n\r\n```\r\n    <PackageReference Include=\"System.ComponentModel.Annotations\" />\r\n    <PackageReference Include=\"System.ServiceModel.Primitives\" />\r\n```\r\n\r\nAnd:\r\n\r\n```\r\n    <Reference Include=\"System.ComponentModel.DataAnnotations\"  />\r\n    <Reference Include=\"System.ServiceModel\" />\r\n```\r\n\r\nAppear to be synonymous (because builds pass) when in reality:\r\n\r\n`<PackageReference>` is restoring packages, rewriting generated nupkg dependencies and introducing version complexity and binplacing new dlls (or facade dlls?)\r\n\r\n`<Reference>`, comparatively, is unambiguously depending on the Framework and not changing any nuget collateral.\r\n\r\nAs there does not appear to be a particularly compelling reason to use `<PackageReference>` in this way when targeting .NET Framework 4.5/4.6, and even doing this opens up compat issues such as Issue #1179 , then `<PackageReference>` for System.* packages net45/net46 should cause a build error in the msbuild/vs toolchain or cause a runtime error. [or there should be a doc describing why this is a bad idea]\r\n\r\n\r\n**Edit:** Additionally there is loads of confusion online:\r\n\r\nhttps://weblog.west-wind.com/posts/2019/Feb/19/Using-NET-Standard-with-Full-Framework-NET\r\n\r\n> As a side note a number of people pointed out to me that Paket - which is an alternate package manager for NuGet packages - considers versions of .NET 4.7.1 and older incompatible with .NET Standard so you can't actually install .NET Standard packages for those versions by default.\r\n> \r\n> Makes sense - **Microsoft has acknowledged that using .NET Standard on anything prior to 4.7.1 is not a good idea** and I would add using 4.7.1 is not optimal either, but alas it does work with some of the messy hackery described above.\r\n\r\nWhere did Microsoft acknowledge this in an official capacity?\r\n\r\nAnd, if this is the case, why does System.Servicemodel.Primitives.4.4.0.nuspec look like this:\r\n\r\n```\r\n      <group targetFramework=\".NETFramework4.5\" />\r\n      <group targetFramework=\".NETFramework4.6\">\r\n        <dependency id=\"NETStandard.Library\" version=\"1.6.1\" />\r\n      </group>\r\n      <group targetFramework=\".NETFramework4.6.1\" />\r\n\r\n```\r\n\r\nwhy does System.Servicemodel.Primitives.4.7.0.nuspec look like this:\r\n\r\n```\r\n      <group targetFramework=\".NETFramework4.5\" />\r\n      <group targetFramework=\".NETFramework4.6\">\r\n        <dependency id=\"NETStandard.Library\" version=\"2.0.3\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n      <group targetFramework=\".NETFramework4.6.1\" />\r\n```\r\n\r\nWhat is this package going to do on 4.5, 4.6, 4.6.1, 4.6.2?\r\n\r\nAnd the lib folders:\r\n\r\n![image](https://user-images.githubusercontent.com/28113572/70868825-433eaf80-1f39-11ea-9f5f-79d8de22bd97.png)\r\n\r\nWhy is the binplace different across 4.5, 4.6, 4.6.1, 4.6.2?\r\n\r\nBehavior seems to be: \r\n- 4.5 explicit discard/no-op\r\n- 4.6 binplace 1 dll\r\n- 4.6.1 binplace 2 dlls??\r\n- 4.6.2 - not called out, so .netstandard20 path is followed, (??) then for version S.SM.Primitives 4.4 there's 1 dll, and in S.SM.Primitive 4.7 there are 2 dlls.\r\n\r\nGiven this behavior, why would I want\r\n\r\n```\r\n    <PackageReference Include=\"System.ServiceModel.Primitives\" />\r\n```\r\n\r\nanywhere near a .NET 4.6.x project?\r\n\r\nThere seems to be some discussion of this sort of thing being a nuget restore warning here: https://github.com/NuGet/Home/issues/8376  however there seems to be also a possibility that the nuget authors forcefully break people targeting 4.5 thru to 4.6.2 which would be preferable to difficult to define behavior.\r\n","Url":"https://github.com/dotnet/standard/issues/1665","RelatedDescription":"Open issue \"<PackageReference> System.* when targeting NET Framework leads to ambiguity\" (#1665)"},{"Id":"536390167","IsPullRequest":false,"CreatedAt":"2019-12-11T15:41:06","Actor":"Jmales","Number":"1663","RawContent":null,"Title":"Can I import net472 project from a .netstandard project? Also, should I?","State":"closed","Body":"Imagine the following scenario:\r\n\r\nA------------------->B--------------------->C\r\n(**Net472**)----------->(**NetStandard**)--------->(**Net472**)\r\n\r\nMain project A in **NET framework,** referencing a **.Net Standard** project B which references a **NET Framework 472** project.\r\n\r\nIn theory, as **Net Standard** is a subset of **NET framework**, it shouldn't make sense that I can reference the whole from within a subset right? However, if I create a simple App with that structure I'm able to build and run it without errors or warnings.\r\n\r\nBUT, if I try this in other applications, mainly a big one that I'm porting to .NET Standard, I get warning in the **.NET Standard** projects referencing **.NET 472**. When is this warning raised after all?\r\n\r\n`C.csproj was resolved using '.NETFramework,Version=v4.7.2' instead of the project target framework '.NETStandard,Version=v2.0'. This project may not be fully compatible with your project.`\r\n\r\nAnd, can I or can't I reference a **NET472** project from within a **.NET Standard 2.0/2.1**?\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1663","RelatedDescription":"Closed issue \"Can I import net472 project from a .netstandard project? Also, should I?\" (#1663)"},{"Id":"535997897","IsPullRequest":false,"CreatedAt":"2019-12-10T21:14:54","Actor":"hrumhurum","Number":"1662","RawContent":null,"Title":".NET Standard 2.1 mscorlib misses type forwarder for System.Reflection.Emit.ILGenerator","State":"open","Body":".NET Standard 2.1 introduced availability of `System.Reflection.Emit.ILGenerator` class: https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.ilgenerator?view=netstandard-2.1\r\n\r\nBut `mscorlib` assembly located at `C:\\Program Files\\dotnet\\packs\\NETStandard.Library.Ref\\2.1.0\\ref\\netstandard2.1\\mscorlib.dll` misses a corresponding type forwarder for `System.Reflection.Emit.ILGenerator`.\r\n\r\nThat omission causes a hole in type system integrity.","Url":"https://github.com/dotnet/standard/issues/1662","RelatedDescription":"Open issue \".NET Standard 2.1 mscorlib misses type forwarder for System.Reflection.Emit.ILGenerator\" (#1662)"},{"Id":"534875855","IsPullRequest":false,"CreatedAt":"2019-12-09T11:45:47","Actor":"IanKemp","Number":"1661","RawContent":null,"Title":"2.1 release timeline?","State":"open","Body":"It's been more than 2 years since Standard 2.0. We're already on Core 3.1 that's LTS, when can we expect the next version of Standard? Or is Standard dead and we should just use Core for everything going forward?","Url":"https://github.com/dotnet/standard/issues/1661","RelatedDescription":"Open issue \"2.1 release timeline?\" (#1661)"},{"Id":"529638047","IsPullRequest":true,"CreatedAt":"2019-11-28T01:14:42","Actor":"dotnet-maestro[bot]","Number":"1660","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191127.5\r\n- **Date Produced**: 11/27/2019 11:33 PM\r\n- **Commit**: 99c6b59a8afff97fe891341b39abe985f1d3c565\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19577.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19577.5\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1660","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1660)"},{"Id":"529573719","IsPullRequest":false,"CreatedAt":"2019-11-27T21:33:26","Actor":"timdoke","Number":"1659","RawContent":null,"Title":"Generic class operators derived from interface seems broken","State":"closed","Body":"Let's say I have a CaseInsensitiveConcurrentDictionary.  The intention of it is to be interchangeable with regular Dictionary implementations -- where, we always use the interface IDictionary<T, T> to interact with either.  Both Dictionary and ConcurrentDictionary implement IDictionary interface members.\r\n\r\nThe class looks like this:\r\n\r\n\r\n    public class CaseInsensitiveDictionary<TValue>\r\n        : ConcurrentDictionary<string, TValue>\r\n    {\r\n        public CaseInsensitiveDictionary()\r\n            : base(StringComparer.InvariantCultureIgnoreCase)\r\n        {\r\n        }\r\n\r\n        private CaseInsensitiveDictionary(IDictionary<string, TValue> attributes)\r\n            : this()\r\n        {\r\n            AddRange(attributes);\r\n        }\r\n\r\n        public void Add(string key, TValue value)\r\n        {\r\n            this.TryAdd(key, value);\r\n        }\r\n\r\n        public void AddRange(IDictionary<string, TValue> entries)\r\n        {\r\n            foreach (var item in entries)\r\n            {\r\n                this.TryAdd(item.Key, item.Value);\r\n            }\r\n        }\r\n\r\n        public static CaseInsensitiveDictionary<TValue> Create(IDictionary<string, TValue> attributes = null)\r\n        {\r\n            if (attributes == null)\r\n            {\r\n                return new CaseInsensitiveDictionary<TValue>();\r\n            }\r\n            return new CaseInsensitiveDictionary<TValue>(attributes);\r\n        }\r\n\r\n        public static implicit operator Dictionary<string, TValue>(CaseInsensitiveDictionary<TValue> data)\r\n        {\r\n            return new Dictionary<string, TValue>(data);\r\n        }\r\n\r\n        public static implicit operator CaseInsensitiveDictionary<TValue>(Dictionary<string, TValue> data)\r\n        {\r\n            return Create(data);\r\n        }\r\n\r\n    }\r\n\r\n\r\n`  \r\n\r\n\r\nLet's say then that we are trying to implicitly convert the ConcurrentDictionary to and from a dictionary.  To test, I wrote these methods:\r\n\r\n\r\n\r\n        public void FromDictionaryToCaseInsensitiveDictionaryTest()\r\n        {\r\n\r\n            Dictionary<string, string> dc2 = new Dictionary<string, string>();\r\n            dc2.Add(\"test1\", \"test1 value\");\r\n\r\n            var dc3 = (CaseInsensitiveDictionary<string>)dc2;\r\n            Console.WriteLine(\"FromDictionaryToCaseInsensitiveDictionaryTest success\");\r\n        }\r\n\r\n        public void FromIDictionaryToCaseInsensitiveDictionaryTest()\r\n        {\r\n            IDictionary<string, string> dc2 = new Dictionary<string, string>();\r\n            dc2.Add(\"test1\", \"test1 value\");\r\n\r\n            var dc3 = (CaseInsensitiveDictionary<string>)dc2;\r\n\r\n            Console.WriteLine(\"FromIDictionaryToCaseInsensitiveDictionaryTest success\");\r\n        }\r\n\r\n\r\n        public void FromCaseInsensitiveDictionaryToDictionaryTest()\r\n        {\r\n\r\n            var dc2 = new CaseInsensitiveDictionary<string>();\r\n            dc2.Add(\"test1\", \"test1 value\");\r\n\r\n            var dc3 = (Dictionary<string, string>)dc2;\r\n\r\n            Console.WriteLine(\"FromCaseInsensitiveDictionaryToDictionaryTest success\");\r\n\r\n        }\r\n\r\n\r\n\r\nThe first (FromDictionaryToCaseInsensitiveDictionaryTest) and third methods (FromCaseInsensitiveDictionaryToDictionaryTest) work fine and correctly use the operators.\r\n\r\nThe second one fails with this exception: System.InvalidCastException: 'Unable to cast object of type 'System.Collections.Generic.Dictionary`2[System.String,System.String]' to type 'OpenToken.CaseInsensitiveDictionary`1[System.String]'.'\r\n.  In my opinion, FromIDictionaryToCaseInsensitiveDictionaryTest should work because the type is CaseInsensitiveDictionary and implements IDictionary.  If I do NOT have the first conversion operator, the first test method fails with this exact same error message, \r\n\r\nWith this evidence, it seems to me that something is missing when the runtime is looking for the appropriate operator.  FromIDictionaryToCaseInsensitiveDictionaryTest should work either from the Dictionary operator or automatically work because it implements the IDictionary interface.  (I cannot create an operator for IDictionary conversion because that is illegal).  \r\n\r\nPlease let me know if this is expected behavior and if there is some workaround for it.  This issue seems to be present in all versions of C#.\r\n\r\nThanks!\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1659","RelatedDescription":"Closed issue \"Generic class operators derived from interface seems broken\" (#1659)"},{"Id":"526765953","IsPullRequest":false,"CreatedAt":"2019-11-25T02:23:45","Actor":"arizvisa","Number":"1657","RawContent":null,"Title":"packages.microsoft.com: signature check for netstandard-targeting-pack-2.1.0 failed","State":"closed","Body":"Hey guys, the signature check for this package seems to be failing. Not sure what that actually means, but here's the checksum as of 2019/11/21 12:23 (CST).\r\n\r\n```\r\n# fetch https://packages.microsoft.com/fedora/30/prod/netstandard-targeting-pack-2.1.0-x64.rpm\r\nnetstandard-targeting-pack-2.1.0-x64.rpm 100% 2201944 2201944\r\n# openssl dgst -sha256 netstandard-targeting-pack-2.1.0-x64.rpm \r\nSHA256(netstandard-targeting-pack-2.1.0-x64.rpm)= 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480\r\n```\r\n\r\nThen with dnf actually complaining about it.\r\n```\r\n# dnf repository-packages packages-microsoft-com-prod install netstandard-targeting-pack-2.1                                                                                 \r\nenabling fedora-modular-debuginfo repository                                                                  \r\nenabling updates-modular-debuginfo repository       \r\nenabling updates-debuginfo repository                                                                         \r\nenabling fedora-debuginfo repository\r\nenabling rpmfusion-free-updates-debuginfo repository\r\nenabling rpmfusion-free-debuginfo repository                                                                  \r\nLast metadata expiration check: 0:13:30 ago on Thu 21 Nov 2019 12:03:15 PM CST.\r\nDependencies resolved.     \r\n==============================================================================================================\r\n Package                               Architecture  Version         Repository                          Size \r\n==============================================================================================================\r\nInstalling:\r\n netstandard-targeting-pack-2.1        x86_64        2.1.0-1         packages-microsoft-com-prod        2.1 M\r\n\r\nTransaction Summary\r\n==============================================================================================================\r\nInstall  1 Package\r\n\r\nTotal download size: 2.1 M\r\nInstalled size: 2.1 M\r\nIs this ok [y/N]: y\r\nDownloading Packages:\r\n[MIRROR] netstandard-targeting-pack-2.1.0-x64.rpm: Downloading successful, but checksum doesn't match. Calculated: 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480(sha256)  Expected: fa194a8c12913dcec85c8d24bfc91686a7b93128b4c05346df16e2c641e2ba41(sha256) \r\n[MIRROR] netstandard-targeting-pack-2.1.0-x64.rpm: Downloading successful, but checksum doesn't match. Calculated: 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480(sha256)  Expected: fa194a8c12913dcec85c8d24bfc91686a7b93128b4c05346df16e2c641e2ba41(sha256) \r\n[MIRROR] netstandard-targeting-pack-2.1.0-x64.rpm: Downloading successful, but checksum doesn't match. Calculated: 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480(sha256)  Expected: fa194a8c12913dcec85c8d24bfc91686a7b93128b4c05346df16e2c641e2ba41(sha256) \r\n[MIRROR] netstandard-targeting-pack-2.1.0-x64.rpm: Downloading successful, but checksum doesn't match. Calculated: 45e199caf1151a750d11d9c5c7669d6e23d8dbb33da54d1d90bde55745996480(sha256)  Expected: fa194a8c12913dcec85c8d24bfc91686a7b93128b4c05346df16e2c641e2ba41(sha256) \r\n[FAILED] netstandard-targeting-pack-2.1.0-x64.rpm: No more mirrors to try - All mirrors were already tried without success\r\n```\r\n\r\nHopefully this doesn't entail the need for ir. Heh.","Url":"https://github.com/dotnet/standard/issues/1657","RelatedDescription":"Closed issue \"packages.microsoft.com: signature check for netstandard-targeting-pack-2.1.0 failed\" (#1657)"},{"Id":"527469491","IsPullRequest":true,"CreatedAt":"2019-11-23T01:19:55","Actor":"dotnet-maestro[bot]","Number":"1658","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191122.3\r\n- **Date Produced**: 11/22/2019 7:14 PM\r\n- **Commit**: 0e0d227c57e69c03427d6e668716d62cf4ceb36e\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19572.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19572.3\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1658","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1658)"},{"Id":"526119676","IsPullRequest":true,"CreatedAt":"2019-11-20T20:02:50","Actor":"dotnet-maestro[bot]","Number":"1656","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191119.2\r\n- **Date Produced**: 11/19/2019 6:14 PM\r\n- **Commit**: e34d933e18ba1cd393bbafcb6018e0f858d3e89e\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19569.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19569.2\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1656","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1656)"},{"Id":"523456559","IsPullRequest":false,"CreatedAt":"2019-11-19T23:58:30","Actor":"SetTrend","Number":"1655","RawContent":null,"Title":"Change .NET Framework in version table from 4.6.1 to 4.7.1","State":"closed","Body":"Currently, the [.NET Standard version table](/dotnet/standard/blob/master/docs/versions.md) shows `.NET Framework 4.6.1` to be compatible with `.NET Standard >= 1.5`.\r\n\r\nHowever, a footnote clarifies that `.NET Framework 4.6.1` is **_not_** fully compatible with `.NET Standard >= 1.5`.\r\n\r\nMoreover, many issues on [StackOverflow.com](https://stackoverflow.com/questions/49925484/you-must-add-a-reference-to-assembly-netstandard-version-2-0-0-0) and [GitHub](542) give evidence that `.NET Framework 4.6.1` is **_not_** fully compatible with `.NET Standard >= 1.5`.\r\n\r\nWouldn't it be wise then to update above version table to provide **_true_** information than just spout some wannabe information?","Url":"https://github.com/dotnet/standard/issues/1655","RelatedDescription":"Closed issue \"Change .NET Framework in version table from 4.6.1 to 4.7.1\" (#1655)"},{"Id":"523175041","IsPullRequest":false,"CreatedAt":"2019-11-15T00:02:51","Actor":"replaysMike","Number":"1654","RawContent":null,"Title":"HttpClient error 'Could not create SSL/TLS secure channel' when not Administrator","State":"open","Body":"I'm trying to use certificate based authentication using HttpClient in .Net Standard 2.0. However, I've noticed TLS negotiation doesn't succeed unless running the application in Administrator mode.\r\n\r\n```\r\nvar requestMessage = new HttpRequestMessage() {\r\n    RequestUri = new Uri(new Uri(_configuration.Endpoint), \"someendpoint\"),\r\n    Method = HttpMethod.Get\r\n};\r\nvar handler = new HttpClientHandler {\r\n    ClientCertificateOptions = ClientCertificateOption.Manual,\r\n    SslProtocols = SslProtocols.Tls12,\r\n};          \r\nhandler.ClientCertificates.Add(certificate);\r\nhandler.CheckCertificateRevocationList = false;\r\n// this is required to get around untrusted self-signed certs\r\nhandler.ServerCertificateCustomValidationCallback = (httpRequestMessage, cert, cetChain, policyErrors) => true;\r\nvar client = new HttpClient(handler);\r\nrequestMessage.Headers.Add(\"X-ARR-ClientCert\", certificate.GetRawCertDataString());\r\nvar response = await client.SendAsync(requestMessage);\r\n```\r\nThe client certificate is valid and installed in the local computer `My` store.\r\n\r\nWithout Administrator privileges a generic error is thrown: `The request was aborted: Could not create SSL/TLS secure channel` when not Administrator.\r\n\r\nAnyone have a clue as to why?","Url":"https://github.com/dotnet/standard/issues/1654","RelatedDescription":"Open issue \"HttpClient error 'Could not create SSL/TLS secure channel' when not Administrator\" (#1654)"},{"Id":"522886300","IsPullRequest":false,"CreatedAt":"2019-11-14T14:14:42","Actor":"tndata","Number":"1653","RawContent":null,"Title":"Broken link","State":"open","Body":"\r\nI found a broken link in this sentence:\r\n\r\nThe plan for handling .NET Framework 4.6.1 and .NET Standard 2.0 is outlined in the **spec**.\r\n\r\nOn this page \r\nhttps://github.com/dotnet/standard/blob/master/docs/faq.md\r\n","Url":"https://github.com/dotnet/standard/issues/1653","RelatedDescription":"Open issue \"Broken link\" (#1653)"},{"Id":"522854157","IsPullRequest":true,"CreatedAt":"2019-11-14T13:46:23","Actor":"dotnet-maestro[bot]","Number":"1652","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191113.6\r\n- **Date Produced**: 11/14/2019 7:13 AM\r\n- **Commit**: 5cee7c97d602f294e27c582d4dab81ec388f1d7b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19563.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19563.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19563.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1652","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1652)"},{"Id":"522220691","IsPullRequest":true,"CreatedAt":"2019-11-13T13:59:11","Actor":"dotnet-maestro[bot]","Number":"1651","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191112.8\r\n- **Date Produced**: 11/13/2019 9:07 AM\r\n- **Commit**: a528006b4536e5b73227285b57d2a56116532506\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19562.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19562.8\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19562.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1651","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1651)"},{"Id":"522208590","IsPullRequest":true,"CreatedAt":"2019-11-13T13:01:39","Actor":"dotnet-maestro[bot]","Number":"1650","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 13e4918d-b9bd-4474-29f1-08d6225f093d\r\n- **Build**: 20200110.4\r\n- **Date Produced**: 1/10/2020 8:51 PM\r\n- **Commit**: 384a4bfab9ea05bff33790d21cb7e1d863e4e599\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.20060.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20060.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.20060.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.20060.4\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.20060.4\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.20060.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1650","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#1650)"},{"Id":"521547575","IsPullRequest":true,"CreatedAt":"2019-11-12T14:07:43","Actor":"dotnet-maestro[bot]","Number":"1649","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191112.1\r\n- **Date Produced**: 11/12/2019 10:06 AM\r\n- **Commit**: 21278249c6b417469737b20445a0dd045cd1b16e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha.1.19562.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha.1.19562.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha.1.19562.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1649","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1649)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"548414836","IsPullRequest":false,"CreatedAt":"2020-01-11T14:40:14","Actor":"faruknane","Number":"42814","RawContent":null,"Title":"[BUG] .Net Core ArrayPool","State":"closed","Body":"I have tried to use Array Pool many times. Every time I used it to create many arrays with big sizes, I encountered a problem. The problem is after a while my deep learning library runs it throws \"System.AccessViolationException HResult=0x80004003 Message=Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\". So, I infer that array pool doesn't work well, because I saw that I couldn't use an array long enough even though I didn't return it. So I implemented two new versions for my performance library. Now it works pretty well. However, I think there is a bug going on with Net core ArrayPool.","Url":"https://github.com/dotnet/corefx/issues/42814","RelatedDescription":"Closed issue \"[BUG] .Net Core ArrayPool\" (#42814)"},{"Id":"548284290","IsPullRequest":false,"CreatedAt":"2020-01-10T20:50:57","Actor":"buddhashrestha","Number":"42813","RawContent":null,"Title":"BinaryFormatter yields 'Invalid BinaryFormatter Stream' error when deserializing large files multiple times","State":"open","Body":"I'm serializing, compresssing and encrypting C# object and save it to the file. That works fine.\r\nThen I need to decrypt, decompress and deserialize it back again (like when opening a project). Now, this works fine for the first time when I start my application, but if I try to retry in the same session, it fails and throws me the following exception with Message: **Invalid BinaryFormatter Stream**\r\n\r\n   ```\r\nat System.Runtime.Serialization.Formatters.Binary.SizedArray.IncreaseCapacity(Int32 index)\r\n   at System.Runtime.Serialization.Formatters.Binary.SizedArray.set_Item(Int32 index, Object value)\r\n   at System.Runtime.Serialization.Formatters.Binary.__BinaryParser.ReadObjectWithMapTyped(BinaryObjectWithMapTyped record)\r\n   at System.Runtime.Serialization.Formatters.Binary.__BinaryParser.ReadObjectWithMapTyped(BinaryHeaderEnum binaryHeaderEnum)\r\n   at System.Runtime.Serialization.Formatters.Binary.__BinaryParser.Run()\r\n   at System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize(HeaderHandler handler, __BinaryParser serParser, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream, HeaderHandler handler, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream)\r\n```\r\n\r\n**Note:** This happens only when I'm trying to deserialize a large file. (**>40MB**)\r\n\r\nFollowing is the code I use:\r\n\r\n```\r\nvar rm = new AesCryptoServiceProvider();\r\n                        rm.Key = this.CryptoKey;\r\n                        rm.IV = this.CryptoIV;\r\n\r\n                        using(var sourceStream =  new TempFileStreams().FromBytes(rawData))\r\n                        using (var outStream = new TempFileStreams().GenerateTemp())\r\n                        {\r\n                            using (CryptoStream cryptoStream = new CryptoStream(sourceStream, rm.CreateDecryptor(), CryptoStreamMode.Read))\r\n                            {\r\n                                using (GZipStream gzipStream = new GZipStream(cryptoStream, CompressionMode.Decompress))\r\n                                {\r\n                                    gzipStream.CopyTo(outStream);\r\n                                }\r\n                            }\r\n                            outStream.Position = 0;\r\n                            dataStore = (MyObjectType)BinaryFormatter.Deserialize(outStream);\r\n                        }\r\n```\r\n\r\n\r\nThe above code refers to the following stackexchange implementation: https://codereview.stackexchange.com/questions/158632/rijndael-compression-encryption-class","Url":"https://github.com/dotnet/corefx/issues/42813","RelatedDescription":"Open issue \"BinaryFormatter yields 'Invalid BinaryFormatter Stream' error when deserializing large files multiple times\" (#42813)"},{"Id":"548021488","IsPullRequest":false,"CreatedAt":"2020-01-10T11:16:30","Actor":"deokershesh","Number":"42812","RawContent":null,"Title":"Ubuntu .NET Core 3.1 runtime issue","State":"open","Body":"I have successfully built .NET Core 3.1 from \"https://github.com/dotnet/corefx/tree/release/3.1\" on Ubuntu 18.04. I have also changed the System.Data.Odbc to make it work for Informix database. I have also changed Interop.Odbc.cs and Interop.Libraries.cs file appropriately for Linux to look for Informix ODBC shared object (.so). \r\n\r\nHowever, when I run simple .NET Core C# example to connect to Informix database it reports exception. Exception is very strange, as soon as it calls OdbcEnvironmentHandle() constructor ( ), which internally calls Interop.Odbc.SQLAllocHandle(<arguments>), it throws exception. It appears that it was unable to load the Informix ODBC shared object which is mentioned in the Interop.Libraries.cs file. LD_LIBRARY_PATH and other variables are set correctly, simple Informix ODBC application works in the same environment. I don't have unixODBC Driver Manager setup.\r\n\r\nIs there any specific setup needed to load the dependent shared objects (which are natively written in C/C++ code) at runtime for .NET Core 3.1? Does unixODBC's \"libodbc.so\" is mandatory to be used?\r\n\r\nAny help in this regard would be greatly appreciated.","Url":"https://github.com/dotnet/corefx/issues/42812","RelatedDescription":"Open issue \"Ubuntu .NET Core 3.1 runtime issue\" (#42812)"},{"Id":"547759227","IsPullRequest":false,"CreatedAt":"2020-01-09T22:26:45","Actor":"assyadh","Number":"42811","RawContent":null,"Title":"Path issues when running corefx tests for .NET Core 3.1 tag, what is RunTests.sh?","State":"open","Body":"Hi,\r\n\r\nI am trying to run the tests for corefx using the v3.1.0 tag.\r\n\r\nI have my corefx build output in ```/build/corefx/artifacts/bin```\r\n\r\nWhen I try to run the following: \r\n\r\n``` ./eng/run-test.sh --configurationGroup Release```\r\n\r\nI get the following result:\r\n```\r\nNothing to test in Common.Tests\r\nNothing to test in Invariant.Tests\r\nNothing to test in Microsoft.CSharp.Tests\r\nNothing to test in Microsoft.Bcl.AsyncInterfaces.Tests\r\nNothing to test in Microsoft.VisualBasic.Core.Tests\r\nNothing to test in Microsoft.Win32.Primitives.Tests\r\nNothing to test in System.Buffers.Tests\r\nNothing to test in System.AppContext.Tests\r\nNothing to test in Microsoft.XmlSerializer.Generator.Tests\r\nNothing to test in System.CodeDom.Tests\r\nNothing to test in System.Collections.Concurrent.Tests\r\nNothing to test in System.Collections.NonGeneric.Tests\r\nNothing to test in System.Collections.Specialized.Tests\r\nNothing to test in System.Collections.Immutable.Tests\r\nNothing to test in System.Collections.Tests\r\nNothing to test in System.ComponentModel.Annotations.Tests\r\nNothing to test in System.ComponentModel.Composition.Registration.Tests\r\nNothing to test in System.ComponentModel.Composition.Tests\r\nNothing to test in System.ComponentModel.EventBasedAsync.Tests\r\nNothing to test in System.ComponentModel.Primitives.Tests\r\nNothing to test in System.ComponentModel.Tests\r\n...\r\n```\r\n\r\nWhich leads me to believe there is a path issue.\r\n\r\nEffectively, my *.Tests folder contain a ```netcoreapp-Release``` folder with no mention of an OS or Arch as required in the run-test.sh script https://github.com/dotnet/runtime/blob/4f9ae42d861fcb4be2fcd5d3d55d5f227d30e723/eng/run-test.sh#L201\r\n\r\n\r\n```\r\nls artifacts/bin/System.Data.Common.Tests/\r\nnetcoreapp-Release\r\n```\r\n\r\nHere is how I am building corefx:\r\n\r\n```./build.sh --buildtests --configuration Release --os Linux```\r\n\r\nSo at this point, after editing the ```run-test.sh#L201``` script above, and removing the OS and Arch properties, I get the following output: ``` dirName=\"$1/netcoreapp-$ConfigurationGroup\"```\r\n\r\nI am facing the following issues:\r\n\r\n```\r\nNothing to test in System.Xml.XPath.XDocument.Tests\r\nCannot find /build/corefx/artifacts/bin/tests/System.Xml.Xsl.XslCompiledTransformApi.Tests/netcoreapp-Release/RunTests.sh\r\nCannot find /build/corefx/artifacts/bin/tests/System.Xml.XPath.XmlDocument.Tests/netcoreapp-Release/RunTests.sh\r\nCannot find /build/corefx/artifacts/bin/tests/System.Xml.Xsl.XslTransformApi.Tests/netcoreapp-Release/RunTests.sh\r\nCannot find /build/corefx/artifacts/bin/tests/XsltCompiler.Tests/netcoreapp-Release/RunTests.sh\r\n```\r\n\r\nSo my questions: \r\n**Am I trying to run the tests the correct way?\r\nWhat is that RunTests.sh script? I can't get a hold of it.**\r\n\r\nI am successfully running the corefx test on .NET Core 2.1.13, and trying to adapt my scripts for 3.1, but can't get this part to work.\r\n\r\nThanks for the help\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42811","RelatedDescription":"Open issue \"Path issues when running corefx tests for .NET Core 3.1 tag, what is RunTests.sh?\" (#42811)"},{"Id":"547582097","IsPullRequest":true,"CreatedAt":"2020-01-09T16:23:13","Actor":"bartonjs","Number":"42810","RawContent":null,"Title":"[release/3.0] Always build the OpenSSL shim in portable mode on macOS.","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/42810","RelatedDescription":"Open PR \"[release/3.0] Always build the OpenSSL shim in portable mode on macOS.\" (#42810)"},{"Id":"547574992","IsPullRequest":true,"CreatedAt":"2020-01-09T16:11:08","Actor":"bartonjs","Number":"42809","RawContent":null,"Title":"[release/2.1] Always build the OpenSSL shim in portable mode on macOS.","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/42809","RelatedDescription":"Open PR \"[release/2.1] Always build the OpenSSL shim in portable mode on macOS.\" (#42809)"},{"Id":"547495294","IsPullRequest":false,"CreatedAt":"2020-01-09T14:02:29","Actor":"GuerrillaCoder","Number":"42808","RawContent":null,"Title":"System.Text.Json read record by record","State":"closed","Body":"In the documentation all examples on how to serialize Json appear to occur in one step that involves loading the entire serialized collection into memory.\r\n\r\nIs it possible to read one record at a time so it is possible to work with large files and preserve memory?\r\n\r\nTo illustrate my point, this is possible in Newtonsoft:\r\n\r\n```csharp\r\nJsonTextReader reader = new JsonTextReader(new StringReader(json));\r\nwhile (reader.Read())\r\n{\r\n    if (reader.Value != null)\r\n    {\r\n        Console.WriteLine(\"Token: {0}, Value: {1}\", reader.TokenType, reader.Value);\r\n    }\r\n    else\r\n    {\r\n        Console.WriteLine(\"Token: {0}\", reader.TokenType);\r\n    }\r\n}\r\n```\r\n\r\nDoes System.Text.Json have an equivalent ability or do we have to manually buffer the data to be de-serialized?\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42808","RelatedDescription":"Closed issue \"System.Text.Json read record by record\" (#42808)"},{"Id":"547270742","IsPullRequest":false,"CreatedAt":"2020-01-09T06:07:20","Actor":"czd890","Number":"42807","RawContent":null,"Title":"Deadlock in System.Data.SqlClient.SNI.SNIMarsHandle, SNIMarsConnection, TdsParserStateObjectManaged","State":"open","Body":"### System vestion\r\n```shell\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     centos\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         centos.7-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.1.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  157910edee\r\n\r\n.NET Core SDKs installed:\r\n  2.2.402 [/usr/share/dotnet/sdk]\r\n  3.0.100 [/usr/share/dotnet/sdk]\r\n  3.1.100 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.7 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.7 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.7 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n```\r\n### System.Data.SqlClient.dll version\r\n```shell\r\n> exiftool System.Data.SqlClient.dll\r\nExifTool Version Number         : 11.82\r\nFile Name                       : System.Data.SqlClient.dll\r\nDirectory                       : /xignite/his1383\r\nFile Size                       : 934 kB\r\nFile Modification Date/Time     : 2019:11:15 00:56:02+00:00\r\nFile Access Date/Time           : 2020:01:09 04:24:34+00:00\r\nFile Inode Change Date/Time     : 2020:01:06 09:52:18+00:00\r\nFile Permissions                : rw-rw-r--\r\nFile Type                       : Win32 DLL\r\nFile Type Extension             : dll\r\nMIME Type                       : application/octet-stream\r\nMachine Type                    : Intel 386 or later, and compatibles\r\nTime Stamp                      : 2085:08:25 18:35:15+00:00\r\nImage File Characteristics      : Executable, Large address aware, DLL\r\nPE Type                         : PE32\r\nLinker Version                  : 48.0\r\nCode Size                       : 944128\r\nInitialized Data Size           : 2048\r\nUninitialized Data Size         : 0\r\nEntry Point                     : 0xe74e2\r\nOS Version                      : 4.0\r\nImage Version                   : 0.0\r\nSubsystem Version               : 4.0\r\nSubsystem                       : Windows command line\r\nFile Version Number             : 4.700.19.56404\r\nProduct Version Number          : 3.1.0.0\r\nFile Flags Mask                 : 0x003f\r\nFile Flags                      : (none)\r\nFile OS                         : Win32\r\nObject File Type                : Dynamic link library\r\nFile Subtype                    : 0\r\nLanguage Code                   : Neutral\r\nCharacter Set                   : Unicode\r\nComments                        : System.Data.SqlClient\r\nCompany Name                    : Microsoft Corporation\r\nFile Description                : System.Data.SqlClient\r\nFile Version                    : 4.700.19.56404\r\nInternal Name                   : System.Data.SqlClient.dll\r\nLegal Copyright                 : © Microsoft Corporation. All rights reserved.\r\nOriginal File Name              : System.Data.SqlClient.dll\r\nProduct Name                    : Microsoft® .NET Core\r\nProduct Version                 : 3.1.0+0f7f38c4fd323b26da10cce95f857f77f0f09b48\r\nAssembly Version                : 4.6.1.0\r\n```\r\n### List clrthreads and syncblk \r\n```shell\r\n> clrthreads\r\nThreadCount:      50\r\nUnstartedThread:  0\r\nBackgroundThread: 18\r\nPendingThread:    0\r\nDeadThread:       31\r\nHosted Runtime:   no\r\n                                                                                                        Lock\r\n DBG   ID OSID ThreadOBJ           State GC Mode     GC Alloc Context                  Domain           Count Apt Exception\r\n   0    1  1a8 0000000001AF5930  2020020 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn\r\n   6    2  1ae 0000000001B50520    21220 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Finalizer)\r\n   8    3  1b0 00007F53C80009F0  1020220 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\n   9    6  1b4 00007F53CC0346A0    21220 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn\r\n  10    8  1b6 0000000002883B20  2021220 Preemptive  00007F53D94174A0:00007F53D94179C0 0000000001AF3B70 0     Ukn\r\n  11    9  1b7 00007F53C40130F0  2021220 Preemptive  00007F53D96BFAD0:00007F53D96C0670 0000000001AF3B70 0     Ukn\r\n  12   10  1b8 00007F53C404E760  2021220 Preemptive  00007F53D9659980:00007F53D965A670 0000000001AF3B70 0     Ukn\r\n  13   11  1b9 00007F53C4002BB0  2021220 Preemptive  00007F53D9723B90:00007F53D9724670 0000000001AF3B70 0     Ukn\r\n  14   12  1ba 00007F53C40524D0  2021220 Preemptive  00007F53D97CEB40:00007F53D97D0670 0000000001AF3B70 0     Ukn\r\n  15   13  1bb 00007F53C4054000  2021220 Preemptive  00007F53D97534B0:00007F53D9754670 0000000001AF3B70 0     Ukn\r\n  16   14  1bc 00007F53C4055D10  2021220 Preemptive  00007F53D974E400:00007F53D974E670 0000000001AF3B70 0     Ukn\r\n  17   15  1bd 00007F53C4057A20  2021220 Preemptive  00007F53D9789120:00007F53D978A670 0000000001AF3B70 0     Ukn\r\n  18   16  1be 00007F53C4059ED0  2021220 Preemptive  00007F53D977A4C0:00007F53D977A670 0000000001AF3B70 0     Ukn\r\n  19   17  1bf 00007F53C405BE00  2021220 Preemptive  00007F53D97DC7B0:00007F53D97DE670 0000000001AF3B70 0     Ukn\r\n  20   18  1c0 00007F53C405DC80  2021220 Preemptive  00007F53D974F968:00007F53D9750670 0000000001AF3B70 0     Ukn\r\nXXXX   43    0 00007F53F4002CE0  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX    7    0 00007F53F00261D0  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\n  21   26  320 0000000002886100  3021220 Preemptive  00007F53D9418228:00007F53D941A1F0 0000000001AF3B70 1     Ukn (Threadpool Worker)\r\n  22   24  33b 00007F53B00170B0  3021220 Preemptive  00007F53D9420AE0:00007F53D94221F0 0000000001AF3B70 2     Ukn (Threadpool Worker)\r\nXXXX   23    0 0000000001DE9670  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   37    0 00007F53C0027910  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   27    0 00007F53B002BDE0  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   30    0 00007F53B002DF70  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   25    0 00007F53C001A860  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   20    0 00007F53F40171F0  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   21    0 00007F53CC06BEC0  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   31    0 00007F53F40025A0  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   44    0 00007F546C00EA00  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   36    0 00007F53CC000C10  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   22    0 00007F547006C8D0  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   28    0 00007F547006FFA0  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   47    0 00007F547006E6A0  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   33    0 00007F53B4011D20  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   32    0 00007F53BC0253E0  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   34    0 00007F53BC0297E0  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   35    0 00007F53B4013D40  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   42    0 00007F53B80142C0  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   45    0 00007F53CC0638D0  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   46    0 00007F53B8014F70  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   29    0 00007F53B8015E00  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   19    0 00007F53F4001840  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX    4    0 00007F53F4015250  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX    5    0 00007F53F40162C0  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   38    0 00007F546C000D50  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   39    0 00007F5468006B40  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   40    0 00007F53F4018980  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\n  23   41  ae1 00007F53F4018F70  1021220 Preemptive  00007F53D97D9DA0:00007F53D97DA670 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   48    0 00007F53B40151F0  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\n  25   49  b98 00007F53B4016F10  1021220 Preemptive  00007F53D97DE6B8:00007F53D97E0670 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\nXXXX   50    0 00007F53B4030480  1031820 Preemptive  0000000000000000:0000000000000000 0000000001AF3B70 0     Ukn (Threadpool Worker)\r\n> syncblk\r\nIndex         SyncBlock MonitorHeld Recursion Owning Thread Info          SyncBlock Owner\r\n   11 00007F53F8004E38            3         2 00007F53B00170B0 33b  22   00007f53d8286a58 System.Data.SqlClient.SNI.SNIMarsHandle\r\n  105 00007F53F8004DA8            3         2 0000000002886100 320  21   00007f53d827a410 System.Data.SqlClient.SNI.SNIMarsConnection\r\n  109 00007F546C012308            1         1 00007F53B00170B0 33b  22   00007f53d8282928 System.Data.SqlClient.SNI.TdsParserStateObjectManaged\r\n-----------------------------\r\nTotal           180\r\nFree            0\r\n\r\n```\r\n### List stack of thread 22\r\n```shell\r\n> setthread 22\r\n> clrstack\r\nOS Thread Id: 0x33b (22)\r\n        Child SP               IP Call Site\r\n00007F53AA7F1E40 00007f547add69f5 [GCFrame: 00007f53aa7f1e40]\r\n00007F53AA7F1F30 00007f547add69f5 [GCFrame: 00007f53aa7f1f30]\r\n00007F53AA7F1F90 00007f547add69f5 [HelperMethodFrame_1OBJ: 00007f53aa7f1f90] System.Threading.Monitor.ReliableEnter(System.Object, Boolean ByRef)\r\n00007F53AA7F20E0 00007F5403A8FECE System.Data.SqlClient.SNI.SNIMarsConnection.SendAsync(System.Data.SqlClient.SNI.SNIPacket, System.Data.SqlClient.SNI.SNIAsyncCallback) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNIMarsConnection.cs @ 99]\r\n00007F53AA7F2120 00007F5403A81976 System.Data.SqlClient.SNI.SNIMarsHandle.InternalSendAsync(System.Data.SqlClient.SNI.SNIPacket, System.Data.SqlClient.SNI.SNIAsyncCallback) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNIMarsHandle.cs @ 172]\r\n00007F53AA7F2170 00007F5403A0CDE6 System.Data.SqlClient.SNI.SNIMarsHandle.SendPendingPackets() [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNIMarsHandle.cs @ 193]\r\n00007F53AA7F21A0 00007F5403A82782 System.Data.SqlClient.SNI.SNIMarsHandle.SendAsync(System.Data.SqlClient.SNI.SNIPacket, Boolean, System.Data.SqlClient.SNI.SNIAsyncCallback) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNIMarsHandle.cs @ 228]\r\n00007F53AA7F21F0 00007F5403A8FBE2 System.Data.SqlClient.SNI.SNIProxy.WritePacket(System.Data.SqlClient.SNI.SNIHandle, System.Data.SqlClient.SNI.SNIPacket, Boolean) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNIProxy.cs @ 234]\r\n00007F53AA7F2210 00007F5403A8F913 System.Data.SqlClient.TdsParserStateObject.SNIWritePacket(System.Data.SqlClient.PacketHandle, UInt32 ByRef, Boolean, Boolean) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParserStateObject.cs @ 3336]\r\n00007F53AA7F22B0 00007F5403A8F385 System.Data.SqlClient.TdsParserStateObject.WriteSni(Boolean) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParserStateObject.cs @ 3473]\r\n00007F53AA7F2320 00007F5403A8EA48 System.Data.SqlClient.TdsParserStateObject.WritePacket(Byte, Boolean) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParserStateObject.cs @ 3114]\r\n00007F53AA7F2360 00007F5403A82579 System.Data.SqlClient.TdsParserStateObject.ExecuteFlush() [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParserStateObject.cs @ 970]\r\n00007F53AA7F23A0 00007F5403A08F1B System.Data.SqlClient.TdsParser.TdsExecuteRPC(System.Data.SqlClient._SqlRPC[], Int32, Boolean, System.Data.Sql.SqlNotificationRequest, System.Data.SqlClient.TdsParserStateObject, Boolean, Boolean, System.Threading.Tasks.TaskCompletionSource`1<System.Object>, Int32, Int32) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/TdsParser.cs @ 7251]\r\n00007F53AA7F2480 00007F5403A8E328 System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(System.Data.CommandBehavior, System.Data.SqlClient.RunBehavior, Boolean, Boolean, Int32, System.Threading.Tasks.Task ByRef, Boolean, System.Data.SqlClient.SqlDataReader) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs @ 2710]\r\n00007F53AA7F2540 00007F5403A97F68 System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback, System.Object, System.Data.CommandBehavior) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs @ 1598]\r\n00007F53AA7F25B0 00007F5403A97B8F System.Threading.Tasks.TaskFactory`1[[System.__Canon, System.Private.CoreLib]].FromAsyncImpl[[System.Data.CommandBehavior, System.Data.Common]](System.Func`4<System.Data.CommandBehavior,System.AsyncCallback,System.Object,System.IAsyncResult>, System.Func`2<System.IAsyncResult,System.__Canon>, System.Action`1<System.IAsyncResult>, System.Data.CommandBehavior, System.Object, System.Threading.Tasks.TaskCreationOptions)\r\n00007F53AA7F2620 00007F5403A8B318 System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior, System.Threading.CancellationToken) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlCommand.cs @ 1771]\r\n00007F53AA7F26B0 00007F5403A975DE System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior, System.Threading.CancellationToken)\r\n00007F53AA7F26D0 00007F54039F14CB Dapper.SqlMapper+<QueryAsync>d__33`1[[System.__Canon, System.Private.CoreLib]].MoveNext() [C:\\projects\\dapper\\Dapper\\SqlMapper.Async.cs @ 419]\r\n00007F53AA7F2890 00007F5403A8AF4F System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Dapper.SqlMapper+<QueryAsync>d__33`1[[System.__Canon, System.Private.CoreLib]], Dapper]](<QueryAsync>d__33`1<System.__Canon> ByRef) [/_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs @ 1036]\r\n00007F53AA7F28E0 00007F5403A8AE15 Dapper.SqlMapper.QueryAsync[[System.__Canon, System.Private.CoreLib]](System.Data.IDbConnection, System.Type, Dapper.CommandDefinition)\r\n00007F53AA7F29E0 00007F5403A96D78 Dapper.SqlMapper.QueryAsync[[System.__Canon, System.Private.CoreLib]](System.Data.IDbConnection, System.String, System.Object, System.Data.IDbTransaction, System.Nullable`1<Int32>, System.Nullable`1<System.Data.CommandType>)\r\n00007F53AA7F2AB0 00007F5403A64C22 xPriceHistory.Core.Repository.Impl.DatabaseRepositoryBase+<>c__DisplayClass15_1`1+<<FetchAsync>b__1>d[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\n00007F53AA7F2B40 00007F5403A7E7CF System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[xPriceHistory.Core.Repository.Impl.DatabaseRepositoryBase+<>c__DisplayClass15_1`1+<<FetchAsync>b__1>d[[System.__Canon, System.Private.CoreLib]], xPriceHistory.Core.Repository.Impl]](<<FetchAsync>b__1>d<System.__Canon> ByRef) [/_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs @ 1036]\r\n00007F53AA7F2B90 00007F5403A7E6FF xPriceHistory.Core.Repository.Impl.DatabaseRepositoryBase+<>c__DisplayClass15_1`1[[System.__Canon, System.Private.CoreLib]].<FetchAsync>b__1()\r\n00007F53AA7F2C00 00007F5403A4ACE7 Survey.HIS1383.MyAWSXRayRecorderService+<TraceExecuteAsync>d__3`1[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\n00007F53AA7F2C60 00007F5403A5A4CF System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Survey.HIS1383.MyAWSXRayRecorderService+<TraceExecuteAsync>d__3`1[[System.__Canon, System.Private.CoreLib]], Survey.HIS1383]](<TraceExecuteAsync>d__3`1<System.__Canon> ByRef) [/_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs @ 1036]\r\n00007F53AA7F2CB0 00007F5403A5A394 Survey.HIS1383.MyAWSXRayRecorderService.TraceExecuteAsync[[System.__Canon, System.Private.CoreLib]](System.String, System.Func`1<System.Threading.Tasks.Task`1<System.__Canon>>, System.String, System.Object, System.Func`2<System.__Canon,System.Object>)\r\n00007F53AA7F2D20 00007F540358B6D9 ILStubClass.IL_STUB_InstantiatingStub\r\n00007F53AA7F2D40 00007F5403A68B51 xPriceHistory.Core.Repository.Impl.DatabaseRepositoryBase+<>c__DisplayClass15_0`1+<<FetchAsync>b__0>d[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\n00007F53AA7F2DB0 00007F5403A80D0F System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[xPriceHistory.Core.Repository.Impl.DatabaseRepositoryBase+<>c__DisplayClass15_0`1+<<FetchAsync>b__0>d[[System.__Canon, System.Private.CoreLib]], xPriceHistory.Core.Repository.Impl]](<<FetchAsync>b__0>d<System.__Canon> ByRef) [/_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs @ 1036]\r\n00007F53AA7F2E00 00007F5403A7DF0F xPriceHistory.Core.Repository.Impl.DatabaseRepositoryBase+<>c__DisplayClass15_0`1[[System.__Canon, System.Private.CoreLib]].<FetchAsync>b__0()\r\n00007F53AA7F2E70 00007F5403A7F970 Polly.Policy+<>c__DisplayClass188_0`1[[System.__Canon, System.Private.CoreLib]].<ExecuteAsync>b__0(Polly.Context, System.Threading.CancellationToken)\r\n00007F53AA7F2E80 00007F5403A68FB5 Polly.Policy+<>c__DisplayClass208_0`1+<<ExecuteAsyncInternal>b__0>d[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\n00007F53AA7F2F00 00007F5403A7F88F System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Polly.Policy+<>c__DisplayClass208_0`1+<<ExecuteAsyncInternal>b__0>d[[System.__Canon, System.Private.CoreLib]], Polly]](<<ExecuteAsyncInternal>b__0>d<System.__Canon> ByRef) [/_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs @ 1036]\r\n00007F53AA7F2F50 00007F5403A7F770 Polly.Policy+<>c__DisplayClass208_0`1[[System.__Canon, System.Private.CoreLib]].<ExecuteAsyncInternal>b__0(Polly.Context, System.Threading.CancellationToken)\r\n00007F53AA7F2FC0 00007F5403A691EF Polly.RetrySyntaxAsync+<>c__DisplayClass21_1+<<WaitAndRetryAsync>b__1>d.MoveNext()\r\n00007F53AA7F3050 00007F5403A7F634 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Polly.RetrySyntaxAsync+<>c__DisplayClass21_1+<<WaitAndRetryAsync>b__1>d, Polly]](<<WaitAndRetryAsync>b__1>d ByRef) [/_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs @ 1036]\r\n00007F53AA7F3090 00007F5403A7DE54 Polly.RetrySyntaxAsync+<>c__DisplayClass21_1.<WaitAndRetryAsync>b__1(Polly.Context, System.Threading.CancellationToken)\r\n00007F53AA7F30E0 00007F54035818CF Polly.Retry.RetryEngine+<ImplementationAsync>d__1`1[[Polly.Utilities.EmptyStruct, Polly]].MoveNext()\r\n00007F53AA7F31F0 00007F5403A80B74 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Polly.Retry.RetryEngine+<ImplementationAsync>d__1`1[[Polly.Utilities.EmptyStruct, Polly]], Polly]](<ImplementationAsync>d__1`1<Polly.Utilities.EmptyStruct> ByRef) [/_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs @ 1036]\r\n00007F53AA7F3230 00007F5403A7DC48 Polly.Retry.RetryEngine.ImplementationAsync[[Polly.Utilities.EmptyStruct, Polly]](System.Func`3<Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task`1<Polly.Utilities.EmptyStruct>>, Polly.Context, System.Threading.CancellationToken, System.Collections.Generic.IEnumerable`1<Polly.ExceptionPredicate>, System.Collections.Generic.IEnumerable`1<Polly.ResultPredicate`1<Polly.Utilities.EmptyStruct>>, System.Func`1<Polly.Retry.IRetryPolicyState`1<Polly.Utilities.EmptyStruct>>, Boolean)\r\n00007F53AA7F32E0 00007F5403A80ACC Polly.RetrySyntaxAsync+<>c__DisplayClass21_0.<WaitAndRetryAsync>b__0(System.Func`3<Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task>, Polly.Context, System.Threading.CancellationToken, Boolean)\r\n00007F53AA7F3340 00007F5403A69D74 Polly.Policy+<ExecuteAsyncInternal>d__208`1[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\n00007F53AA7F33C0 00007F5403A808DF System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Polly.Policy+<ExecuteAsyncInternal>d__208`1[[System.__Canon, System.Private.CoreLib]], Polly]](<ExecuteAsyncInternal>d__208`1<System.__Canon> ByRef) [/_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs @ 1036]\r\n00007F53AA7F3410 00007F5403A807A6 Polly.Policy.ExecuteAsyncInternal[[System.__Canon, System.Private.CoreLib]](System.Func`3<Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task`1<System.__Canon>>, Polly.Context, System.Threading.CancellationToken, Boolean)\r\n00007F53AA7F34A0 00007F540357FAED ILStubClass.IL_STUB_InstantiatingStub\r\n00007F53AA7F34B0 00007F5403A805B5 Polly.Policy.ExecuteAsync[[System.__Canon, System.Private.CoreLib]](System.Func`3<Polly.Context,System.Threading.CancellationToken,System.Threading.Tasks.Task`1<System.__Canon>>, Polly.Context, System.Threading.CancellationToken, Boolean)\r\n00007F53AA7F3500 00007F5403A804BA Polly.Policy.ExecuteAsync[[System.__Canon, System.Private.CoreLib]](System.Func`1<System.Threading.Tasks.Task`1<System.__Canon>>)\r\n00007F53AA7F3540 00007F5403A56CE7 xPriceHistory.Core.Repository.Impl.DatabaseRepositoryBase+<FetchAsync>d__15`1[[System.__Canon, System.Private.CoreLib]].MoveNext()\r\n00007F53AA7F3590 00007F5403A81EAF System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[xPriceHistory.Core.Repository.Impl.DatabaseRepositoryBase+<FetchAsync>d__15`1[[System.__Canon, System.Private.CoreLib]], xPriceHistory.Core.Repository.Impl]](<FetchAsync>d__15`1<System.__Canon> ByRef) [/_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs @ 1036]\r\n00007F53AA7F35E0 00007F5403A8038C xPriceHistory.Core.Repository.Impl.DatabaseRepositoryBase.FetchAsync[[System.__Canon, System.Private.CoreLib]](System.String, System.String, System.Object, System.Data.CommandType)\r\n00007F53AA7F3660 00007F5403A56FC9 xPriceHistory.Core.Repository.Impl.OneDayTicksDataBaseRepositoryService+<GetAsync>d__15.MoveNext()\r\n00007F53AA7F36D0 00007F5403A964F4 System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[xPriceHistory.Core.Repository.Impl.OneDayTicksDataBaseRepositoryService+<GetAsync>d__15, xPriceHistory.Core.Repository.Impl]](<GetAsync>d__15 ByRef) [/_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs @ 1036]\r\n00007F53AA7F3710 00007F5403A81033 xPriceHistory.Core.Repository.Impl.OneDayTicksDataBaseRepositoryService.GetAsync(System.String, System.DateTime, System.DateTime)\r\n00007F53AA7F3770 00007F5402C83A84 Survey.HIS1383.Program+<CheckAsync>d__4.MoveNext() [D:\\sourcecode\\Xignite\\Services\\Price\\xPriceHistory\\Survey.HIS1383\\Program.cs @ 204]\r\n00007F53AA7F3890 00007F5403A38AA1 System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread, System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [/_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs @ 315]\r\n00007F53AA7F38D0 00007F5403A4B7D5 System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[Survey.HIS1383.Program+<CheckAsync>d__4, Survey.HIS1383]].MoveNext(System.Threading.Thread) [/_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs @ 654]\r\n00007F53AA7F3900 00007F5403A3CEB9 System.Threading.ThreadPoolWorkQueue.Dispatch() [/_/src/System.Private.CoreLib/shared/System/Threading/ThreadPool.cs @ 699]\r\n00007F53AA7F3D10 00007f54795e9d1f [DebuggerU2MCatchHandlerFrame: 00007f53aa7f3d10]\r\n>\r\n```\r\n### List stack of thread 21\r\n```shell\r\n> setthread 21\r\n> clrstack\r\nOS Thread Id: 0x320 (21)\r\n        Child SP               IP Call Site\r\n00007F53AE7FB2B0 00007f547add69f5 [GCFrame: 00007f53ae7fb2b0]\r\n00007F53AE7FB3A0 00007f547add69f5 [GCFrame: 00007f53ae7fb3a0]\r\n00007F53AE7FB400 00007f547add69f5 [HelperMethodFrame_1OBJ: 00007f53ae7fb400] System.Threading.Monitor.ReliableEnter(System.Object, Boolean ByRef)\r\n00007F53AE7FB550 00007F5403A8517E System.Data.SqlClient.SNI.SNIMarsHandle.HandleReceiveComplete(System.Data.SqlClient.SNI.SNIPacket, System.Data.SqlClient.SNI.SNISMUXHeader) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNIMarsHandle.cs @ 351]\r\n00007F53AE7FB5D0 00007F5403A0EDC4 System.Data.SqlClient.SNI.SNIMarsConnection.HandleReceiveComplete(System.Data.SqlClient.SNI.SNIPacket, UInt32) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNIMarsConnection.cs @ 259]\r\n00007F53AE7FB630 00007F5403A9A051 System.Data.SqlClient.SNI.SNIPacket.ReadFromStreamAsync(System.IO.Stream, System.Data.SqlClient.SNI.SNIAsyncCallback) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNIPacket.NetCoreApp.cs @ 65]\r\n00007F53AE7FB6B0 00007F5403A99D9B System.Data.SqlClient.SNI.SNITCPHandle.ReceiveAsync(System.Data.SqlClient.SNI.SNIPacket ByRef) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNITcpHandle.cs @ 554]\r\n00007F53AE7FB6F0 00007F5403A99B57 System.Data.SqlClient.SNI.SNIMarsConnection.ReceiveAsync(System.Data.SqlClient.SNI.SNIPacket ByRef) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNIMarsConnection.cs @ 117]\r\n00007F53AE7FB730 00007F5403A0EE12 System.Data.SqlClient.SNI.SNIMarsConnection.HandleReceiveComplete(System.Data.SqlClient.SNI.SNIPacket, UInt32) [/_/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNIMarsConnection.cs @ 275]\r\n00007F53AE7FB790 00007F5403A6EDA1 System.Data.SqlClient.SNI.SNIPacket+<<ReadFromStreamAsync>g__ReadFromStreamAsync|27_0>d.MoveNext()\r\n00007F53AE7FB840 00007F5403A2F75D System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object) [/_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs @ 201]\r\n00007F53AE7FB890 00007F5403A98D7A System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1+AsyncStateMachineBox`1[[System.Threading.Tasks.VoidTaskResult, System.Private.CoreLib],[System.Data.SqlClient.SNI.SNIPacket+<<ReadFromStreamAsync>g__ReadFromStreamAsync|27_0>d, System.Data.SqlClient]].MoveNext(System.Threading.Thread) [/_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs @ 654]\r\n00007F53AE7FB8C0 00007F5403A93028 System.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.InvokeContinuation(System.Action`1<System.Object>, System.Object, Boolean, Boolean) [/_/src/System.Net.Sockets/src/System/Net/Sockets/Socket.Tasks.cs @ 1019]\r\n00007F53AE7FB900 00007F5403A3CED6 System.Threading.ThreadPoolWorkQueue.Dispatch() [/_/src/System.Private.CoreLib/shared/System/Threading/ThreadPool.cs @ 699]\r\n00007F53AE7FBD10 00007f54795e9d1f [DebuggerU2MCatchHandlerFrame: 00007f53ae7fbd10]\r\n>\r\n\r\n```","Url":"https://github.com/dotnet/corefx/issues/42807","RelatedDescription":"Open issue \"Deadlock in System.Data.SqlClient.SNI.SNIMarsHandle, SNIMarsConnection, TdsParserStateObjectManaged\" (#42807)"},{"Id":"546949179","IsPullRequest":false,"CreatedAt":"2020-01-08T22:44:23","Actor":"miloszkukla","Number":"42806","RawContent":null,"Title":"XmlSerializer doesn't encode/escape Unicode characters when serializing","State":"closed","Body":"XmlSerializer doesn't encode/escape Unicode characters (e.g. German quotation marks as illustrated below) during serialization when TextWriter with non-Unicode encoding e.g. ISO-8859-1 is used. I've tested this behavior on .NET Framework 4.5.2, 4.7.2 and .NET Core 2.2.\r\n\r\nSince mentioned characters are part of Unicode and are not known to ISO-8859-1 the expected behavior would be the same as when using XmlWriter so encoding the characters with their character entity references. I understand this would be a breaking change so probably this issue will get closed but perhaps someone will find this helpful in future.\r\n\r\nExecution of the following code results in incorrect XML and consequently deserialization exception:\r\n\r\n```\r\npublic class Foo\r\n{\r\n    [XmlAttribute(\"bar\")]\r\n    public string Bar { get; set; } = new string(new[]\r\n    {\r\n        '\\u201A', // ‚ replaced with 44 ,\r\n        '\\u2018', // ‘ replaced with 39 '\r\n        '\\u201E', // „ replaced with 34 \"\r\n        '\\u201C'  // “ replaced with 34 \"\r\n    });\r\n}\r\n\r\nvar iso88591 = Encoding.GetEncoding(\"ISO-8859-1\");\r\nvar ms = new MemoryStream();\r\nvar sw = new StreamWriter(ms, iso88591);\r\nvar sr = new StreamReader(ms, iso88591);\r\nvar serializer = new XmlSerializer(typeof(Foo));\r\n\r\nserializer.Serialize(sw, new Foo());\r\nvar charPreview = iso88591.GetString(ms.GetBuffer()).ToCharArray();\r\nms.Position = 0;\r\nserializer.Deserialize(sr); //fails due containing extra quotation marks\r\n```\r\n\r\nThe workaround would be to use Serialize method overload accepting XmlWriter e.g.:\r\n```\r\nvar xmlWriter = XmlWriter.Create(ms, new XmlWriterSettings() { Encoding = iso88591 });\r\nserializer.Serialize(xmlWriter, new Foo());\r\n```","Url":"https://github.com/dotnet/corefx/issues/42806","RelatedDescription":"Closed issue \"XmlSerializer doesn't encode/escape Unicode characters when serializing\" (#42806)"},{"Id":"546888825","IsPullRequest":true,"CreatedAt":"2020-01-08T14:19:01","Actor":"dotnet-maestro-bot","Number":"42805","RawContent":null,"Title":"Update BuildTools, ProjectNTfs, ProjectNTfsTestILC to rc1-04626-02, rel-28509-00, rel-28509-00, respectively (release/uwp6.2)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/42805","RelatedDescription":"Open PR \"Update BuildTools, ProjectNTfs, ProjectNTfsTestILC to rc1-04626-02, rel-28509-00, rel-28509-00, respectively (release/uwp6.2)\" (#42805)"},{"Id":"546538978","IsPullRequest":true,"CreatedAt":"2020-01-07T22:20:32","Actor":"Anipik","Number":"42803","RawContent":null,"Title":"update branding to 3.1.2","State":"open","Body":"No packages were published in 3.1.1 so packages.builds is already cleared\r\nNeeds to merge after we release 3.1.1","Url":"https://github.com/dotnet/corefx/pull/42803","RelatedDescription":"Open PR \"update branding to 3.1.2\" (#42803)"},{"Id":"546157095","IsPullRequest":false,"CreatedAt":"2020-01-07T08:50:59","Actor":"deokershesh","Number":"42802","RawContent":null,"Title":"Ubuntu : .NET Core 3.1 build error","State":"open","Body":"I downloaded .NET Core 3.1 source code, while doing the build.sh on Ubuntu, it reports following errors! There doesn't seem to be good error message to possibly resolve the same. Kindly help to fix the below build issue.\r\n\r\nroot@64ac36d6c74e:/shesh/dotnetcore/corefx-release-3.1# uname -a\r\nLinux 64ac36d6c74e 4.9.184-linuxkit #1 SMP Tue Jul 2 22:58:16 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n\r\n  Setting up directories for build\r\n  Checking pre-requisites...\r\n  Commencing build of corefx native components for Linux.x64.Debug\r\n  Invoking \"/shesh/dotnetcore/corefx-release-3.1/src/Native/Unix/gen-buildsys-clang.sh\" \"/shesh/dotnetcore/corefx-release-3.1/src/Native/Unix\" \"3\" \"9\" \"x64\" \"DEBUG\" \" -DFEATURE_DISTRO_AGNOSTIC_SSL=1 -DCMAKE_STATIC_LIB_LINK=0\"\r\n  -- Configuring incomplete, errors occurred!\r\n  See also \"/shesh/dotnetcore/corefx-release-3.1/artifacts/obj/native/netcoreapp-Linux-Debug-x64/CMakeFiles/CMakeOutput.log\".\r\n  See also \"/shesh/dotnetcore/corefx-release-3.1/artifacts/obj/native/netcoreapp-Linux-Debug-x64/CMakeFiles/CMakeError.log\".\r\n  Failed to generate native component build project!\r\n/shesh/dotnetcore/corefx-release-3.1/src/Native/build-native.proj(36,5): error MSB3073: The command \"\"/shesh/dotnetcore/corefx-release-3.1/src/Native/build-native.sh\" x64 Debug Linux outconfig netcoreapp-Linux-Debug-x64 -portable\" exited with code 1.\r\n\r\nBuild FAILED.\r\n\r\n/shesh/dotnetcore/corefx-release-3.1/src/Native/build-native.proj(36,5): error MSB3073: The command \"\"/shesh/dotnetcore/corefx-release-3.1/src/Native/build-native.sh\" x64 Debug Linux outconfig netcoreapp-Linux-Debug-x64 -portable\" exited with code 1.\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:46.11\r\nBuild failed (exit code '1').\r\nroot@64ac36d6c74e:/shesh/dotnetcore/corefx-release-3.1#","Url":"https://github.com/dotnet/corefx/issues/42802","RelatedDescription":"Open issue \"Ubuntu : .NET Core 3.1 build error\" (#42802)"},{"Id":"545972653","IsPullRequest":true,"CreatedAt":"2020-01-06T22:25:46","Actor":"bartonjs","Number":"42801","RawContent":null,"Title":"[release/3.1] Always build the OpenSSL shim in portable mode on macOS.","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/42801","RelatedDescription":"Open PR \"[release/3.1] Always build the OpenSSL shim in portable mode on macOS.\" (#42801)"},{"Id":"545887603","IsPullRequest":true,"CreatedAt":"2020-01-06T19:07:33","Actor":"wfurt","Number":"42800","RawContent":null,"Title":"3.1: make sure we have big enough buffer to prevent endless spin while dumping route table on OSX","State":"open","Body":"**Description**\r\nThis is port of  https://github.com/dotnet/runtime/pull/591 to address `dotnet core 3 on macOS Catalina: NetworkInterface causes high CPU` #42634. Existing code assumes that when provided buffer is too small, `sysctl()` will update provided length. However that is happening only when NULL is passed in and we will en dup in endless spin trying to re-allocate to same size. \r\n\r\n**Impact**\r\nThis is race condition impacting OSX only. However, when it happens, we spin in native PAL code and there is no recovery or workaround. \r\n\r\n**Regression?**\r\n\r\nNo.\r\n\r\n**Risk**\r\n\r\nSmall. Fix is in OSX pal code and does not impact other platforms. Fix was verified by impacted customer. \r\n\r\n\r\nfixes  #42634\r\n","Url":"https://github.com/dotnet/corefx/pull/42800","RelatedDescription":"Open PR \"3.1: make sure we have big enough buffer to prevent endless spin while dumping route table on OSX\" (#42800)"},{"Id":"544438199","IsPullRequest":false,"CreatedAt":"2020-01-02T03:53:28","Actor":"TsuyoshiUshio","Number":"42795","RawContent":null,"Title":"Activity.SetIdFormat is ignored if there is Activity.Current instance","State":"open","Body":"I'm not sure if it is expected behavior or not, I'd like to share what I found. \r\nI use `System.Diagnostics.DiagnosticSource` version `4.7.0` . \r\n\r\n```\r\n            Activity parent = new Activity(\"parent\");\r\n            parent.SetIdFormat(ActivityIdFormat.W3C);\r\n            // W3C \r\n            parent.Start();\r\n            Console.WriteLine(\"W3C Parent---\");\r\n            PrintActivity(parent); // Method that print the details of Activity\r\n\r\n            // Correlation \r\n            Activity child = new Activity(\"child\");\r\n            child.SetParentId(parent.ParentId);\r\n            Console.WriteLine(\"W3C Child ---\");\r\n            child.Start();\r\n            PrintActivity(child); // Method that print the details of Activity\r\n\r\n            Activity newParent = new Activity(\"parent\");\r\n            newParent.SetIdFormat(ActivityIdFormat.Hierarchical);\r\n            newParent.Start();\r\n            Console.WriteLine(\"HTTP Parent---\");\r\n            PrintActivity(newParent);  // Method that print the details of Activity\r\n```\r\nAt the last newParent instance, Even if I specify `ActivityIdFormat.Hierarchical` It become `W3C TraceContext` \r\n\r\n![image](https://user-images.githubusercontent.com/1390976/71650952-ae74d980-2cce-11ea-92ad-afd69610f086.png)\r\n\r\nIt might be caused by this line of code of Activity.GenerateHierachicalId() method. Since parent is automatically set from Activity.Current. \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42795","RelatedDescription":"Open issue \"Activity.SetIdFormat is ignored if there is Activity.Current instance\" (#42795)"},{"Id":"542913681","IsPullRequest":false,"CreatedAt":"2019-12-28T16:07:33","Actor":"dhmuralikrishna","Number":"42792","RawContent":null,"Title":"How to disable using HTTP_PROXY as default","State":"closed","Body":"https://github.com/dotnet/corefx/issues/36553\r\n\r\nHow can we turn off this new default implementation?\r\n\r\nI have environment variables HTTP_PROXY. But I want to use system-level proxy default instead of environment variables. I don't want to delete the environment variables because it used by other applications. How can I set to go for system proxy?\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42792","RelatedDescription":"Closed issue \"How to disable using HTTP_PROXY as default\" (#42792)"},{"Id":"541850100","IsPullRequest":false,"CreatedAt":"2019-12-23T19:42:56","Actor":"ritchxu","Number":"42790","RawContent":null,"Title":"XmlQualifiedName class not marked as Serializable","State":"closed","Body":"While porting code to .NET Core, it was found that [XmlQualifiedName](https://github.com/dotnet/corefx/blob/master/src/System.Private.Xml/src/System/Xml/XmlQualifiedName.cs) is not marked as `Serializable` as it was [in .NET Framework](https://referencesource.microsoft.com/#System.Xml/System/Xml/XmlQualifiedName.cs). This caused any field/property in this class becoming not serializable.\r\n\r\n### Question:\r\nIs this by design?\r\n\r\n### Reproducible steps:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n\r\n```\r\n```\r\nusing System;\r\nusing System.IO;\r\nusing System.Runtime.Serialization;\r\nusing System.Runtime.Serialization.Formatters.Binary;\r\nusing System.Xml;\r\n\r\nnamespace ConsoleApp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            IFormatter formatter = new BinaryFormatter();\r\n            Stream stream = new MemoryStream();\r\n            formatter.Serialize(stream, new TestClass());\r\n        }\r\n    }\r\n\r\n    [Serializable]\r\n    class TestClass\r\n    {\r\n        public TestClass()\r\n        {\r\n            TestProp = new XmlQualifiedName(\"TestProp\");\r\n        }\r\n\r\n        XmlQualifiedName TestProp { get; set; }\r\n    }\r\n}\r\n```\r\n### Expected behavior:\r\n`Serialize` call works without throwing exceptions,\r\n\r\n### Actual behavior:\r\n```\r\nSystem.Runtime.Serialization.SerializationException\r\n  HResult=0x8013150C\r\n  Message=Type 'System.Xml.XmlQualifiedName' in Assembly 'System.Private.Xml, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' is not marked as serializable.\r\n  Source=System.Runtime.Serialization.Formatters\r\n  StackTrace:\r\n   at System.Runtime.Serialization.FormatterServices.InternalGetSerializableMembers(Type type)\r\n   at System.Runtime.Serialization.FormatterServices.<>c.<GetSerializableMembers>b__5_0(MemberHolder mh)\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n   at System.Runtime.Serialization.FormatterServices.GetSerializableMembers(Type type, StreamingContext context)\r\n   at System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo.InitMemberInfo()\r\n   at System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo.InitSerialize(Object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder)\r\n   at System.Runtime.Serialization.Formatters.Binary.ObjectWriter.Write(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo)\r\n   at System.Runtime.Serialization.Formatters.Binary.ObjectWriter.Serialize(Object graph, BinaryFormatterWriter serWriter, Boolean fCheck)\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream serializationStream, Object graph, Boolean check)\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream serializationStream, Object graph)\r\n   at ConsoleApp.Program.Main(String[] args) in C:\\Rui\\Projects\\PSCore\\ConsoleApp\\Program.cs:line 15\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42790","RelatedDescription":"Closed issue \"XmlQualifiedName class not marked as Serializable\" (#42790)"},{"Id":"540908824","IsPullRequest":false,"CreatedAt":"2019-12-20T10:13:10","Actor":"Jogge","Number":"42787","RawContent":null,"Title":"System.Text.Json.Serialization Order of serialized properties","State":"closed","Body":"I'm missing an attribute for setting the order of the element in the JSON output.\r\n\r\nExample:\r\n\r\nI want the `@SEGMENT` to be the first element in the serialized JSON output of MyClass:\r\n\r\n```C#\r\npublic abstract class MyBase\r\n{\r\n    [JsonPropertyName(\"@SEGMENT\")]\r\n    public virtual string Segment { get; set; } = \"1\";\r\n\r\n    public int ID { get; set; }\r\n}\r\n\r\npublic class MyClass : MyBase\r\n{\r\n    public string Name { get; set; }\r\n}\r\n```\r\n\r\nThe result when serializing MyClass is:\r\n```JSON\r\n{\r\n    \"MyClass\": {\r\n    \t\"Name\": \"Foo\",\r\n    \t\"@SEGMENT\": \"1\",\r\n    \t\"ID\": 42\r\n    }\r\n}\r\n```\r\n\r\nI would like the serialized JSON output to be:\r\n\r\n```JSON\r\n{\r\n    \"MyClass\": {\r\n    \t\"@SEGMENT\": \"1\",\r\n    \t\"Name\": \"Foo\",\r\n    \t\"ID\": 42\r\n    }\r\n}\r\n```\r\n\r\nor\r\n```JSON\r\n{\r\n    \"MyClass\": {\r\n    \t\"@SEGMENT\": \"1\",\r\n    \t\"ID\": 42,\r\n    \t\"Name\": \"Foo\"\r\n    }\r\n}\r\n```\r\n\r\nJson.NET has an attribute for this: https://www.newtonsoft.com/json/help/html/JsonPropertyOrder.htm\r\n\r\nRelated question: [.NET core 3: Order of serialization for JsonPropertyName (System.Text.Json.Serialization)](https://stackoverflow.com/q/59134564/7108481)\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42787","RelatedDescription":"Closed issue \"System.Text.Json.Serialization Order of serialized properties\" (#42787)"},{"Id":"538888501","IsPullRequest":false,"CreatedAt":"2019-12-19T00:00:21","Actor":"poweralex","Number":"42783","RawContent":null,"Title":"bitmap.MakeTransparent works different on linux","State":"closed","Body":"I'm trying to draw a png image with a block of transparent on it. the same code works fine on local windows environment, but when I deploy it on a Linux server, the block does not go transparent.\r\nthe code is simple:\r\n```c#\r\n                    byte[] fileContent = null;\r\n                    using (MemoryStream ms = new MemoryStream())\r\n                    {\r\n                        Bitmap bitmap = new Bitmap(\r\n                            100, 100\r\n                            );\r\n                        using (var g = Graphics.FromImage(bitmap))\r\n                        {\r\n                            // backgrand\r\n                            g.FillRectangle(new SolidBrush(Color.White), 0, 0, bitmap.Width, bitmap.Height);\r\n                            // transparent block\r\n                            g.FillRectangle(new SolidBrush(Color.Red), 10, 10, 80, 80);\r\n                            // blue line\r\n                            g.DrawLine(new Pen(Color.Blue), 10, 10, 90, 90);\r\n                        }\r\n                        bitmap.MakeTransparent(Color.Red);\r\n                        bitmap.Save(ms, ImageFormat.Png);\r\n                        fileContent = ms.ToArray();\r\n                    }\r\n```\r\nthe image looks good on windows:\r\n![image](https://user-images.githubusercontent.com/12427030/70973935-a4a18280-20e1-11ea-95a2-d2b8604af9f0.png)\r\nbut not on Linux:\r\n![image](https://user-images.githubusercontent.com/12427030/70974041-da466b80-20e1-11ea-9f3b-e329eda130d7.png)\r\n\r\nIs this a issue of System.Drawing.Common or is there something I missed?\r\n\r\n[danmosemsft fixed formatting]","Url":"https://github.com/dotnet/corefx/issues/42783","RelatedDescription":"Closed issue \"bitmap.MakeTransparent works different on linux\" (#42783)"},{"Id":"537777365","IsPullRequest":false,"CreatedAt":"2019-12-17T15:00:44","Actor":"vasicvuk","Number":"42778","RawContent":null,"Title":"How to get RSACryptoServiceProvider from X509Certificate2 .Net Core","State":"closed","Body":"Following code works in .Net 4.7.1 but not in .Net Core 3.1\r\n\r\n```csharp\r\nX509Store store = new X509Store(StoreLocation.CurrentUser);\r\nstore.Open(OpenFlags.ReadOnly);\r\nX509Certificate2 cert = null;\r\nforeach (X509Certificate2 cert2 in store.Certificates)\r\n{\r\n\tif (cert2.HasPrivateKey && cert2.PrivateKey is RSACryptoServiceProvider rsa)\r\n\t{\r\n             // .Net Core 3.1 nevers get RSACryptoServiceProvider and .Net Framework returns it\r\n\t\tif (rsa == null) continue; \r\n\t\tif (rsa.CspKeyContainerInfo.HardwareDevice) // sure - smartcard\r\n\t\t{\r\n\t\t\tif ((rsa.CspKeyContainerInfo.KeyContainerName == KeyContainerName) && (rsa.CspKeyContainerInfo.ProviderName == ProviderName))\r\n\t\t\t{\r\n\t\t\t\t//we find it\r\n\t\t\t\tcert = cert2;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nI tried working with **RSACng** but i have few issues there. First i cannot get info from **CspKeyContainerInfo** needed for this. And also when i try to sign with this certificate it is always asking me for a PIN even if i defined **RSACryptoServiceProvider** before with **KeyPassword**.\r\n\r\n.Net Framework code\r\n```csharp\r\nSecureString pwd = GetSecurePin(PinCode);\r\n\r\nCspParameters csp = new CspParameters(1, ProviderName, KeyContainerName,\r\n   new System.Security.AccessControl.CryptoKeySecurity(), pwd);\r\n```\r\n\r\n\r\nI need this only to work on Windows (ASP.Net Core 3.1).\r\n\r\nI read https://github.com/dotnet/corefx/blob/master/Documentation/architecture/cross-platform-cryptography.md but i am not sure how to do migration.\r\n\r\nThanks","Url":"https://github.com/dotnet/corefx/issues/42778","RelatedDescription":"Closed issue \"How to get RSACryptoServiceProvider from X509Certificate2 .Net Core\" (#42778)"},{"Id":"538656286","IsPullRequest":false,"CreatedAt":"2019-12-16T21:02:03","Actor":"weshaggard","Number":"42782","RawContent":null,"Title":"Update package label to \"final\" for the stable prerelease builds.","State":"closed","Body":"https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks.Packaging/src/PackageFiles/Packaging.targets#L16 instead of excluding the build number change it to \"final\". That will help make sure the package version is the higher then any of the existing packages that have that build number. \r\n\r\nWe should consider renaming IncludeBuildNumberInPackageVersion to better align with this change.\r\n\r\nThis change needs to happen in corefx and core-setup. \r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/42782","RelatedDescription":"Closed issue \"Update package label to \"final\" for the stable prerelease builds.\" (#42782)"},{"Id":"538456644","IsPullRequest":false,"CreatedAt":"2019-12-16T18:24:56","Actor":"karimi64bit","Number":"42781","RawContent":null,"Title":"captcha در مرورگر موبایل ارور میده","State":"closed","Body":"سلام\r\nممنون از زحمت هاتون \r\nوقتی ازش استفاده میکنم درسته فقط وقتی تو موبایل دارم دکمه ریفرش میزنم کار نمیکنه\r\nممنون میشم راهنمایی کنید\r\n","Url":"https://github.com/dotnet/corefx/issues/42781","RelatedDescription":"Closed issue \"captcha در مرورگر موبایل ارور میده\" (#42781)"},{"Id":"538385840","IsPullRequest":false,"CreatedAt":"2019-12-16T14:26:33","Actor":"tornie2","Number":"42780","RawContent":null,"Title":"HttpClient sends NTLM ticket, even though it only has Negotiate credentials","State":"closed","Body":"We are puzzled that HttpClient will use NTLM token for authorization, even though will only give the handler Negotiate credentials\r\n\r\nOur application is in net461. We create our client with this code\r\n\r\n             _credentials = new CredentialCache { { _uri, \"Negotiate\", CredentialCache.DefaultNetworkCredentials } };\r\n             var handler = new WebRequestHandler { Credentials = _credentials, UnsafeAuthenticatedConnectionSharing = true, MaxConnectionsPerServer = 100, UseProxy = false };\r\n             var httpClient = new HttpClient(handler) { BaseAddress = _uri };\r\n\r\nWhen we access a node directly without a load-balancer, we can nicely see a Negotiate authorization.\r\n\r\nHowever when we access the system through the load-balancer, the Authorization in the request contains a Negotiate item, but when we open the token (base64 decode it), we can see that it actually is a NTLM-token\r\n\r\nThe challenge from the server has this header:\r\n             Proxy-Authenticate NTLM, Negotiate, Bearer\r\n\r\nThe response to the service looks something like this. Authorization says Negotiate, but when we decode the token, it is ntlm\r\n             Authorization Negotiate TlRMTVNT.....\r\n             Host syst-smfbasic:15000\r\n             CorrelationId 72395ff4-4fa9-4d5d-88c1-0d96b49da63c\r\n\r\nWhy will webrequesthandler generate an NTLM-token when we specifically ask for Negotiate, and write Negotiate in the header, when it actually is NTLM?\r\n\r\nAnd why only when we use a load-balancer?","Url":"https://github.com/dotnet/corefx/issues/42780","RelatedDescription":"Closed issue \"HttpClient sends NTLM ticket, even though it only has Negotiate credentials\" (#42780)"},{"Id":"537797199","IsPullRequest":false,"CreatedAt":"2019-12-14T00:43:37","Actor":"los93sol","Number":"42779","RawContent":null,"Title":"Code search broken on the repo?","State":"closed","Body":"I've noticed for at least the last week that searching the repo for code doesn't seem to work anymore.  Other repos like aspnetcore seem to still be searching fine though.  Not sure where else to report the issue to so figured I'd just open an issue here.","Url":"https://github.com/dotnet/corefx/issues/42779","RelatedDescription":"Closed issue \"Code search broken on the repo?\" (#42779)"},{"Id":"537672937","IsPullRequest":false,"CreatedAt":"2019-12-13T17:40:21","Actor":"alexborichevskyidt","Number":"42777","RawContent":null,"Title":"StringContent doesn't update ContentLength property automatically after creation.","State":"closed","Body":"Working with integration tests, noticed that StringContent doesn't update property ContentLength in Headers after creation, what cause request parsing issues in API application when using a test client with payload.\r\n\r\nCalling get for the property helped to resolve the issue.","Url":"https://github.com/dotnet/corefx/issues/42777","RelatedDescription":"Closed issue \"StringContent doesn't update ContentLength property automatically after creation.\" (#42777)"},{"Id":"537296624","IsPullRequest":true,"CreatedAt":"2019-12-13T01:14:53","Actor":"cheenamalhotra","Number":"42776","RawContent":null,"Title":"[release/3.1] Revert async changes in SqlClient to fix deadlock issues","State":"open","Body":"Port of: https://github.com/dotnet/runtime/pull/778 and https://github.com/dotnet/SqlClient/pull/349\r\n\r\n### Summary\r\nFixes issue https://github.com/dotnet/SqlClient/issues/262 where client applications goes to deadlock when performing Async operations.\r\n\r\n### Customer Impact\r\nHigh. Random deadlocks occur in client applications and apps stay in hanging state.\r\n\r\n### Regression?\r\nYes, with PR #34184\r\n\r\n### Testing\r\nThis issue is hard to reproduce in tests and is currently not reproducible consistently, but a repro has been made available to identify deadlocks, which will be added to Microsoft.Data.SqlClient test lab once it can be consistently reproduced in test lab as well.\r\n\r\n### Risk\r\n**Low**: The fix has been verified with repro app and confirms the issue has been fixed.\r\n\r\ncc: @danmosemsft @benaadams","Url":"https://github.com/dotnet/corefx/pull/42776","RelatedDescription":"Open PR \"[release/3.1] Revert async changes in SqlClient to fix deadlock issues\" (#42776)"},{"Id":"537217410","IsPullRequest":false,"CreatedAt":"2019-12-12T21:17:44","Actor":"weltkante","Number":"42775","RawContent":null,"Title":"Regression: System.Windows.Size getting picked up unintentionally","State":"closed","Body":"Apparently adding WindowsBase references automatically is leading to a [regression](https://github.com/dotnet/winforms-datavisualization/issues/24) in some code which has been ported but not tested much: System.Windows.Size gets picked up instead of System.Drawing.Size by source imported from Desktop Framework which wasn't referencing WindowsBase before.\r\n\r\nJust trying to get some attention to it since the original report is in a readonly repo so it may not be watched closely.","Url":"https://github.com/dotnet/corefx/issues/42775","RelatedDescription":"Closed issue \"Regression: System.Windows.Size getting picked up unintentionally\" (#42775)"},{"Id":"536726110","IsPullRequest":true,"CreatedAt":"2019-12-12T02:51:49","Actor":"layomia","Number":"42772","RawContent":null,"Title":"Fix 3.0->3.1 regression in JSON serializing nested concurrent dictionaries","State":"open","Body":"## Description\r\n\r\nFixes https://github.com/dotnet/runtime/issues/670, where there was a regression between 3.0 and 3.1 where serializing nested concurrent dictionaries went from supported to unsupported. The issue also exists in master/5.0. https://github.com/dotnet/runtime/pull/784 fixes it in master, and this PR ports the fix to 3.0.\r\n\r\nIn addition to the fix described above, this PR also also has a deserialization fix for an `InvalidCastException` thrown when a dictionary element type has a converter that returns a type different from the declared type, e.g. when you're deserializing `Dictionary<string, MyClass>`, where\r\n\r\n```c#\r\nprivate interface IClass { }\r\n\r\nprivate class MyClass : IClass { }\r\n\r\nprivate class MyFactory : JsonConverterFactory\r\n{\r\n    public override bool CanConvert(Type typeToConvert)\r\n    {\r\n        return typeToConvert == typeof(IClass) || typeToConvert == typeof(MyClass);\r\n    }\r\n\r\n    public override JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)\r\n    {\r\n        return new MyStuffConverter();\r\n    }\r\n}\r\n\r\nprivate class MyStuffConverter : JsonConverter<IClass>\r\n{\r\n    public override IClass Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\r\n    {\r\n        return new MyClass();\r\n    }\r\n\r\n    public override void Write(Utf8JsonWriter writer, IClass value, JsonSerializerOptions options)\r\n    {\r\n        writer.WriteNumberValue(1);\r\n    }\r\n}\r\n```\r\n\r\nIn this case, the read method of the converter for `typeof(MyClass)` returns a type `IClass` (not the declared type, `MyClass`) which causes an `InvalidCastException` later in the deserialization flow.\r\n\r\n## Customer Impact\r\n\r\nThe ability to serialize nested concurrent dictionaries is restored: https://github.com/dotnet/runtime/issues/670. \r\n\r\nThe deserialization scenario is an edge case, but the fix defends against leaking exceptions were it to occur.\r\n\r\n## Regression\r\n\r\nNo. The serialization change's tests are wide-ranging and covers various permutations of nested dictionaries, so a regression is unlikely.\r\n\r\nThe deserialization change adds more support without rescinding support. A regression is unlikely.\r\n\r\n## Risk\r\n\r\nLow, per the regression section above.","Url":"https://github.com/dotnet/corefx/pull/42772","RelatedDescription":"Open PR \"Fix 3.0->3.1 regression in JSON serializing nested concurrent dictionaries\" (#42772)"},{"Id":"536424352","IsPullRequest":false,"CreatedAt":"2019-12-11T15:19:08","Actor":"Adam-Tg","Number":"42770","RawContent":null,"Title":"Could not load file or assembly 'System.Security.Principal.Windows', manifest definition does not match the assembly reference","State":"closed","Body":"Solution has compiled successfully, but when executing, the following exception gets thrown:\r\n\r\n> System.IO.FileLoadException: Could not load file or assembly 'System.Security.Principal.Windows, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference.\r\n\r\nI installed `System.Security.Principal.Windows` package by NuGet, but the error still appears.\r\n\r\n[This](https://stackoverflow.com/questions/51909212/could-not-load-file-or-assembly-system-security-principal-windows) does not help me.\r\nI don't have 'Microsoft.Net.Compiler' or 'Microsoft.CodeDom.Providers.DotNetCompilerPlatform' installed, and even installing them or changing their versions does not help. Also, '.NET Compiler Platform SDK' is already installed.\r\n\r\nHow can I fix this?","Url":"https://github.com/dotnet/corefx/issues/42770","RelatedDescription":"Closed issue \"Could not load file or assembly 'System.Security.Principal.Windows', manifest definition does not match the assembly reference\" (#42770)"},{"Id":"535914883","IsPullRequest":true,"CreatedAt":"2019-12-10T18:44:21","Actor":"ericstj","Number":"42768","RawContent":null,"Title":"[release/3.1] Make PathAssemblyResolver handle Retargetable","State":"open","Body":"Release/3.1 port of fca60323d9606a90b327273d08089200ae6f527b + package authoring.","Url":"https://github.com/dotnet/corefx/pull/42768","RelatedDescription":"Open PR \"[release/3.1] Make PathAssemblyResolver handle Retargetable\" (#42768)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"548512409","IsPullRequest":false,"CreatedAt":"2020-01-12T03:38:17","Actor":"jdm7dv","Number":"40920","RawContent":null,"Title":"Cannot find drive. A drive with the name '\"C' does not exist. Cannot find line number in build scripts","State":"closed","Body":"**Version Used**: \r\n\r\nWindows 10 2019 Enterprise LTSC\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Roslyn 2017 15.9\r\n2. Visual Studio 2017 Enterprise\r\n3. run restore.cmd\r\n\r\n**Expected Behavior**:\r\nrestore complete\r\n**Actual Behavior**:\r\nCannot find drive. A drive with the name '\"C' does not exist.\r\nSystem.Management.Automation.DriveNotFoundException: Cannot find drive. A drive with the name '\"C' does not exist.\r\n   at System.Management.Automation.SessionStateInternal.GetDrive(String name, Boolean automount)\r\n   at System.Management.Automation.SessionStateInternal.GetDrive(String name, Boolean automount)\r\n   at System.Management.Automation.LocationGlobber.GetDriveRootRelativePathFromPSPath(String path, CmdletProviderContext context, Boolean escapeCurrentLocation, PSDriveInfo& workingDriveForPath, CmdletProvider& providerInstance)\r\n   at System.Management.Automation.LocationGlobber.GetProviderPath(String path, CmdletProviderContext context, Boolean isTrusted, ProviderInfo& provider, PSDriveInfo& drive)\r\n   at System.Management.Automation.SessionStateInternal.MakePath(String parent, String child, CmdletProviderContext context)\r\n   at Microsoft.PowerShell.Commands.JoinPathCommand.ProcessRecord()\r\nat Get-DotnetDir, E:\\roslyn-Visual-Studio-2017-Version-15.9\\build\\scripts\\build-utils.ps1: line 127\r\nat Ensure-DotnetSdk, E:\\roslyn-Visual-Studio-2017-Version-15.9\\build\\scripts\\build-utils.ps1: line 137\r\nat Ensure-MSBuild, E:\\roslyn-Visual-Studio-2017-Version-15.9\\build\\scripts\\build-utils.ps1: line 197\r\nat <ScriptBlock>, E:\\roslyn-Visual-Studio-2017-Version-15.9\\build\\scripts\\build.ps1: line 773\r\n'E:\\roslyn-Visual-Studio-2017-Version-15.9\\' is not recognized as an internal or external command,\r\noperable program or batch file.\r\n\r\n\r\n\r\nIt's an easy fix it you can find the extra apostrophe in that one error ","Url":"https://github.com/dotnet/roslyn/issues/40920","RelatedDescription":"Closed issue \"Cannot find drive. A drive with the name '\"C' does not exist. Cannot find line number in build scripts\" (#40920)"},{"Id":"548496947","IsPullRequest":true,"CreatedAt":"2020-01-12T01:32:14","Actor":"dotnet-bot","Number":"40919","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40919","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#40919)"},{"Id":"548496808","IsPullRequest":true,"CreatedAt":"2020-01-12T01:32:02","Actor":"dotnet-bot","Number":"40918","RawContent":null,"Title":"Merge master to release/dev16.6-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into release/dev16.6-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.6-preview1\ngit reset --hard upstream/release/dev16.6-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.6-preview1 --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40918","RelatedDescription":"Closed or merged PR \"Merge master to release/dev16.6-preview1\" (#40918)"},{"Id":"548449281","IsPullRequest":false,"CreatedAt":"2020-01-11T16:21:36","Actor":"mavasani","Number":"40917","RawContent":null,"Title":"Fix VisualBasicSyntaxFactsService.IsLeftSideOfCompoundAssignment","State":"open","Body":"VB supports compound assignments, following should be fixed:\r\nhttps://github.com/dotnet/roslyn/blob/61761f5fe90ec9cf0bfeb9157aea8f89a1555fc3/src/Workspaces/VisualBasic/Portable/LanguageServices/VisualBasicSyntaxFactsService.vb#L1336-L1339","Url":"https://github.com/dotnet/roslyn/issues/40917","RelatedDescription":"Open issue \"Fix VisualBasicSyntaxFactsService.IsLeftSideOfCompoundAssignment\" (#40917)"},{"Id":"548428432","IsPullRequest":true,"CreatedAt":"2020-01-11T14:27:06","Actor":"dotnet-maestro[bot]","Number":"40916","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 567feadf-e495-4ebb-cee4-08d67668456c\r\n- **Build**: 20200110.4\r\n- **Date Produced**: 1/10/2020 8:51 PM\r\n- **Commit**: 384a4bfab9ea05bff33790d21cb7e1d863e4e599\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20060.4\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/40916","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#40916)"},{"Id":"548421565","IsPullRequest":true,"CreatedAt":"2020-01-11T13:34:18","Actor":"dotnet-bot","Number":"40915","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40915","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#40915)"},{"Id":"548421425","IsPullRequest":true,"CreatedAt":"2020-01-11T13:33:59","Actor":"dotnet-bot","Number":"40914","RawContent":null,"Title":"Merge master to release/dev16.6-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into release/dev16.6-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.6-preview1\ngit reset --hard upstream/release/dev16.6-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.6-preview1 --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40914","RelatedDescription":"Closed or merged PR \"Merge master to release/dev16.6-preview1\" (#40914)"},{"Id":"548403041","IsPullRequest":false,"CreatedAt":"2020-01-11T08:52:19","Actor":"Chicken-Bones","Number":"40913","RawContent":null,"Title":"Allow .editorconfig derived Options in Formatter","State":"open","Body":"The public `Microsoft.CodeAnalysis.Formatting.Formatter` in Microsoft.CodeAnalysis.Workspaces.dll cannot utilise the existing codebase for parsing .editorconfig files.\r\n\r\n`CSharpFormattingOptions` options have `EditorConfigStorageLocation` entries, which are used by the internal analyzer `Formatter` in Microsoft.CodeAnalysis.CodeStyle\r\n\r\nI tried to write the glue code myself with reflection, but I can't subclass `OptionSet` due to the internal `GetChangedOptions` method.","Url":"https://github.com/dotnet/roslyn/issues/40913","RelatedDescription":"Open issue \"Allow .editorconfig derived Options in Formatter\" (#40913)"},{"Id":"548282477","IsPullRequest":true,"CreatedAt":"2020-01-11T05:04:13","Actor":"mavasani","Number":"40896","RawContent":null,"Title":"Use appropriate code fix title for IDE0059 for unnecessary compound a…","State":"closed","Body":"…ssigment\r\n\r\nFixes #38507\r\nFixes #40483","Url":"https://github.com/dotnet/roslyn/pull/40896","RelatedDescription":"Closed or merged PR \"Use appropriate code fix title for IDE0059 for unnecessary compound a…\" (#40896)"},{"Id":"548355524","IsPullRequest":true,"CreatedAt":"2020-01-11T02:55:52","Actor":"mavasani","Number":"40910","RawContent":null,"Title":"Fix special handling of Winforms Reset method in IDE0051 (RemoveUnuse…","State":"closed","Body":"…dMembers)\r\n\r\nMy previous fix to #30887 added special handling for special Winforms  method with prefix \"ShouldSerialize\" or \"Reset\". However, I incorrectly required both these methods to have boolean return type, while only the former should have boolean return. Reset methods needs to be void returning. This change fixes this case.\r\n\r\nFixes #38491 reported on developer community for this bug.","Url":"https://github.com/dotnet/roslyn/pull/40910","RelatedDescription":"Closed or merged PR \"Fix special handling of Winforms Reset method in IDE0051 (RemoveUnuse…\" (#40910)"},{"Id":"548361704","IsPullRequest":false,"CreatedAt":"2020-01-11T01:32:24","Actor":"MithrilMan","Number":"40912","RawContent":null,"Title":"when_multiline on csharp_prefer_braces not working ","State":"open","Body":"**Version Used**: \r\nVisual Studio 16.4.2  Enterprise\r\n**Steps to Reproduce**:\r\nadd in .editorconfig the line\r\n`csharp_prefer_braces = when_multiline : error`\r\n\r\n**Expected Behavior**:\r\nshouldn't report the warning below and should work in the IDE\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/5107375/72196650-3454fb00-341a-11ea-9ffe-0e582951000f.png)\r\n![image](https://user-images.githubusercontent.com/5107375/72196717-8269fe80-341a-11ea-8c2a-a1c36101ae09.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/40912","RelatedDescription":"Open issue \"when_multiline on csharp_prefer_braces not working \" (#40912)"},{"Id":"548346833","IsPullRequest":true,"CreatedAt":"2020-01-11T01:26:47","Actor":"dotnet-bot","Number":"40907","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40907","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#40907)"},{"Id":"548346466","IsPullRequest":true,"CreatedAt":"2020-01-11T01:26:41","Actor":"dotnet-bot","Number":"40905","RawContent":null,"Title":"Merge master to release/dev16.6-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into release/dev16.6-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.6-preview1\ngit reset --hard upstream/release/dev16.6-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.6-preview1 --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40905","RelatedDescription":"Closed or merged PR \"Merge master to release/dev16.6-preview1\" (#40905)"},{"Id":"548357743","IsPullRequest":false,"CreatedAt":"2020-01-11T01:03:56","Actor":"AlekseyTs","Number":"40911","RawContent":null,"Title":"Unexpected System.NullReferenceException while binding global imports","State":"open","Body":"```\r\n        <Fact>\r\n        Public Sub NothingInGlobalImports()\r\n            Dim options = TestOptions.DebugDll.WithGlobalImports({Nothing})\r\n\r\n            options.Errors.AssertTheseDiagnostics(<expected/>)\r\n\r\n            Dim comp = CreateCompilation(\"\", options:=options)\r\n            comp.AssertTheseDiagnostics(<expected/>)\r\n        End Sub\r\n```\r\n\r\nObserved:\r\n```\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\nStack Trace:\r\n  F:\\GitHub\\roslyn\\src\\Compilers\\VisualBasic\\Portable\\Symbols\\Source\\SourceModuleSymbol.vb(375,0): at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceModuleSymbol.BindImports(CancellationToken cancellationToken)\r\n  F:\\GitHub\\roslyn\\src\\Compilers\\VisualBasic\\Portable\\Symbols\\Source\\SourceModuleSymbol.vb(349,0): at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceModuleSymbol.EnsureImportsAreBound(CancellationToken cancellationToken)\r\n  F:\\GitHub\\roslyn\\src\\Compilers\\VisualBasic\\Portable\\Symbols\\Source\\SourceModuleSymbol.vb(625,0): at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceModuleSymbol.GetAllDeclarationErrors(BindingDiagnosticBag diagnostics, CancellationToken cancellationToken, Boolean& hasExtensionMethods)\r\n  F:\\GitHub\\roslyn\\src\\Compilers\\VisualBasic\\Portable\\Symbols\\Source\\SourceAssemblySymbol.vb(1144,0): at Microsoft.CodeAnalysis.VisualBasic.Symbols.SourceAssemblySymbol.GetAllDeclarationErrors(BindingDiagnosticBag diagnostics, CancellationToken cancellationToken)\r\n  F:\\GitHub\\roslyn\\src\\Compilers\\VisualBasic\\Portable\\Compilation\\VisualBasicCompilation.vb(2064,0): at Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.GetDiagnosticsWithoutFiltering(CompilationStage stage, Boolean includeEarlierStages, BindingDiagnosticBag builder, CancellationToken cancellationToken)\r\n  F:\\GitHub\\roslyn\\src\\Compilers\\VisualBasic\\Portable\\Compilation\\VisualBasicCompilation.vb(2013,0): at Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, DiagnosticBag diagnostics, CancellationToken cancellationToken)\r\n  F:\\GitHub\\roslyn\\src\\Compilers\\VisualBasic\\Portable\\Compilation\\VisualBasicCompilation.vb(2002,0): at Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, CancellationToken cancellationToken)\r\n  F:\\GitHub\\roslyn\\src\\Compilers\\Test\\Utilities\\VisualBasic\\CompilationTestUtils.vb(847,0): at Microsoft.CodeAnalysis.VisualBasic.UnitTests.CompilationUtils.AssertTheseDiagnostics(Compilation compilation, XElement errs, Boolean suppressInfos)\r\n  F:\\GitHub\\roslyn\\src\\Compilers\\VisualBasic\\Test\\Semantic\\Compilation\\VisualBasicCompilationOptionsTests.vb(580,0): at Microsoft.CodeAnalysis.VisualBasic.UnitTests.VisualBasicCompilationOptionsTests.NothingInGlobalImports()\r\n```\r\n\r\nExpected:\r\nNo exception. It would be Ok to report an error, but that is optional, I think. We can simply ignore the null reference.\r\n\r\nShould check similar scenario for C#.\r\n","Url":"https://github.com/dotnet/roslyn/issues/40911","RelatedDescription":"Open issue \"Unexpected System.NullReferenceException while binding global imports\" (#40911)"},{"Id":"548347102","IsPullRequest":false,"CreatedAt":"2020-01-11T00:05:22","Actor":"slozier","Number":"40909","RawContent":null,"Title":"Logic not preserved with invert-if codefix","State":"open","Body":"**Version Used**: VS 16.4.2\r\n\r\n**Steps to Reproduce**:\r\n\r\nRun the Invert-if codefix:\r\n```C#\r\nprivate static bool IsFalse(bool val)\r\n{\r\n    {\r\n        if (!val)\r\n        {\r\n            return true;\r\n        }\r\n        Debug.Assert(val);\r\n    }\r\n    return false;\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nI was expecting the logic to be preserved by the codefix:\r\n\r\n```C#\r\nprivate static bool IsFalse(bool val)\r\n{\r\n    {\r\n        if (val)\r\n        {\r\n            Debug.Assert(val);\r\n        }\r\n        else\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n```\r\nor\r\n```C#\r\nprivate static bool IsFalse(bool val)\r\n{\r\n    {\r\n        if (val)\r\n        {\r\n        }\r\n        else\r\n        {\r\n            return true;\r\n        }\r\n        Debug.Assert(val);\r\n    }\r\n    return false;\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```C#\r\nprivate static bool IsFalse(bool val)\r\n{\r\n    {\r\n        if (val)\r\n        {\r\n            Debug.Assert(val);\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/40909","RelatedDescription":"Open issue \"Logic not preserved with invert-if codefix\" (#40909)"},{"Id":"548346878","IsPullRequest":true,"CreatedAt":"2020-01-11T00:04:20","Actor":"dotnet-bot","Number":"40908","RawContent":null,"Title":"Merge release/dev16.6-preview1 to release/dev16.6-preview1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.6-preview1 into release/dev16.6-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.6-preview1-to-release/dev16.6-preview1-vs-deps\ngit reset --hard upstream/release/dev16.6-preview1-vs-deps\ngit merge upstream/release/dev16.6-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.6-preview1-to-release/dev16.6-preview1-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40908","RelatedDescription":"Open PR \"Merge release/dev16.6-preview1 to release/dev16.6-preview1-vs-deps\" (#40908)"},{"Id":"548346646","IsPullRequest":true,"CreatedAt":"2020-01-11T00:03:21","Actor":"dotnet-bot","Number":"40906","RawContent":null,"Title":"Merge master-vs-deps to release/dev16.6-preview1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master-vs-deps into release/dev16.6-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-release/dev16.6-preview1-vs-deps\ngit reset --hard upstream/release/dev16.6-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-release/dev16.6-preview1-vs-deps --force\n```\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/40906","RelatedDescription":"Open PR \"Merge master-vs-deps to release/dev16.6-preview1-vs-deps\" (#40906)"},{"Id":"548343287","IsPullRequest":false,"CreatedAt":"2020-01-10T23:48:13","Actor":"gafter","Number":"40904","RawContent":null,"Title":"Nullable walker doesn't update type for inferred variables.","State":"open","Body":"The nullable walker doesn't update the type for inferred variables if it changes due to more information later in analysis.  Here are two examples where warnings are expected but not produced:\r\n\r\n```csharp\r\n#nullable enable\r\npublic class C {\r\n    public void M(bool b) {\r\n        string? s = \"x\";\r\n        if (b) goto L2;\r\nL1:\r\n        var x = Create(s);\r\n        x.F.ToString(); // warning: x.F might be null.\r\nL2:\r\n        s = null;\r\n        goto L1;\r\n    }\r\n    \r\n    private G<T> Create<T>(T t) where T : class? => new G<T>(t);\r\n}\r\n\r\nclass G<T> where T: class?\r\n{\r\n    public G(T f) => F = f;\r\n    public T F;\r\n}\r\n```\r\n\r\n```csharp\r\n#nullable enable\r\npublic class C {\r\n    public void M(bool b) {\r\n        string? s = \"x\";\r\n        if (b) goto L2;\r\nL1:\r\n        _ = Create(s) is var x;\r\n        x.F.ToString(); // warning: x.F might be null.\r\nL2:\r\n        s = null;\r\n        goto L1;\r\n    }\r\n    \r\n    private G<T> Create<T>(T t) where T : class? => new G<T>(t);\r\n}\r\n\r\nclass G<T> where T: class?\r\n{\r\n    public G(T f) => F = f;\r\n    public T F;\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/40904","RelatedDescription":"Open issue \"Nullable walker doesn't update type for inferred variables.\" (#40904)"},{"Id":"548341666","IsPullRequest":false,"CreatedAt":"2020-01-10T23:40:54","Actor":"jcouv","Number":"40903","RawContent":null,"Title":"Should `var` in `foreach` be inferred as nullable?","State":"open","Body":"Relates to https://github.com/dotnet/roslyn/issues/40477\r\n\r\nPR https://github.com/dotnet/roslyn/pull/40755 changed the inference of `var` locals to use the nullable version of a type. But `foreach` variables are read-only. Should we make an exception for such variables?","Url":"https://github.com/dotnet/roslyn/issues/40903","RelatedDescription":"Open issue \"Should `var` in `foreach` be inferred as nullable?\" (#40903)"},{"Id":"548335988","IsPullRequest":false,"CreatedAt":"2020-01-10T23:18:45","Actor":"gafter","Number":"40902","RawContent":null,"Title":"Nullable analysis doesn't infer the nullable annotations for var-declared script variables","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/issues/40902","RelatedDescription":"Open issue \"Nullable analysis doesn't infer the nullable annotations for var-declared script variables\" (#40902)"},{"Id":"548331922","IsPullRequest":true,"CreatedAt":"2020-01-10T23:03:49","Actor":"tmat","Number":"40901","RawContent":null,"Title":"Pythia external access","State":"open","Body":"Implements #35495, but does not restrict the IVTs yet.","Url":"https://github.com/dotnet/roslyn/pull/40901","RelatedDescription":"Open PR \"Pythia external access\" (#40901)"},{"Id":"548324003","IsPullRequest":true,"CreatedAt":"2020-01-10T22:36:55","Actor":"mavasani","Number":"40900","RawContent":null,"Title":"Do not report IDE0059 for reference taken symbols","State":"open","Body":"Fixes #40717","Url":"https://github.com/dotnet/roslyn/pull/40900","RelatedDescription":"Open PR \"Do not report IDE0059 for reference taken symbols\" (#40900)"},{"Id":"548317863","IsPullRequest":false,"CreatedAt":"2020-01-10T22:17:08","Actor":"CyrusNajmabadi","Number":"40899","RawContent":null,"Title":"Strange yellow-bad notification about TFMs and nuget TMs.","State":"open","Body":"I have no idea what this means or why roslyn tells me this:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/72190206-d5f53180-33b3-11ea-900b-713ea7702652.png)\r\n\r\nHoping someone knowledgeable about this area can explain/fix.  Note this is when opening roslyn.sln ","Url":"https://github.com/dotnet/roslyn/issues/40899","RelatedDescription":"Open issue \"Strange yellow-bad notification about TFMs and nuget TMs.\" (#40899)"},{"Id":"548298784","IsPullRequest":false,"CreatedAt":"2020-01-10T21:27:06","Actor":"CyrusNajmabadi","Number":"40898","RawContent":null,"Title":"VS complete hang in navigate-to","State":"open","Body":"![image](https://user-images.githubusercontent.com/4564579/72187566-e05ffd00-33ac-11ea-87e3-8e8ff8a7c3ca.png)\r\n\r\nUploading 32bit dump now.\r\n\r\nThis is 16.4.2.","Url":"https://github.com/dotnet/roslyn/issues/40898","RelatedDescription":"Open issue \"VS complete hang in navigate-to\" (#40898)"},{"Id":"548297597","IsPullRequest":true,"CreatedAt":"2020-01-10T21:24:05","Actor":"jasonmalinowski","Number":"40897","RawContent":null,"Title":"Null annotate Quick Info","State":"open","Body":"Mostly straightforward annotation. The SymbolComparer is deleted because the code was unused.","Url":"https://github.com/dotnet/roslyn/pull/40897","RelatedDescription":"Open PR \"Null annotate Quick Info\" (#40897)"},{"Id":"548277668","IsPullRequest":false,"CreatedAt":"2020-01-10T20:34:24","Actor":"CyrusNajmabadi","Number":"40895","RawContent":null,"Title":"VS complete hang while closing","State":"open","Body":"Hung entirely right here:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/72184540-7ee86000-33a5-11ea-8eaf-584c650bb14c.png)\r\n\r\n32bit dump captured.  Uploading now.  Will link to it once available.\r\n\r\nThis is 16.4.2.","Url":"https://github.com/dotnet/roslyn/issues/40895","RelatedDescription":"Open issue \"VS complete hang while closing\" (#40895)"},{"Id":"548225920","IsPullRequest":false,"CreatedAt":"2020-01-10T18:27:02","Actor":"TessenR","Number":"40894","RawContent":null,"Title":"Roslyn should adjust set values for members with outputs that are stricter than inputs after processing postconditions","State":"open","Body":"**Version Used**: \r\n```\r\ncommit a0404639df1ab23612390052d0b5d400c864bc38\r\nMerge: eb26598979 6aa3e57ac0\r\nAuthor: Sam Harwell <sam.harwell@microsoft.com>\r\nDate:   Mon Dec 30 20:03:18 2019 -0800\r\n\r\n    Merge pull request #40643 from sharwell/driver-tasks\r\n\r\n    Reduce Task allocations in the analyzer driver\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile the following code\r\n```cs\r\n#nullable enable\r\nclass D\r\n{\r\n  string? field;\r\n  [NotNull] public ref string? Prop\r\n  {\r\n    get\r\n    {\r\n      field = \"\";\r\n      return ref field; \r\n    }\r\n  }\r\n  \r\n  void M()\r\n  {    \r\n    Prop.ToString();\r\n    Out1(out Prop);\r\n    Prop.ToString();\r\n    Out2(out Prop);\r\n    Prop.ToString();\r\n  }\r\n  \r\n  public void Out1(out string? s) => s = null;\r\n  public void Out2([MaybeNullWhen(false)] out string? s) => s = null;\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNo warnings\r\n\r\n**Actual Behavior**:\r\n`CS8602: Dereference of a possibly null reference.` is reported only for the last derefernece of Prop.\r\n\r\n**Notes**\r\n`Prop` always returns not null according to its annotation. Since allowed inputs include nulls Roslyn adjusts the set value for assignments to this property including `out` arguments. However the adjustment happens before Roslyn learns from methods' post-conditions which effectively overwrite what was assigned to the variable based on the parameters' annotations.\r\nSince this does not affect the fact that `Prop` might be assigned with null and still return not-null values according to its annotations this seems to be a mistake.\r\n\r\nIf you wwi","Url":"https://github.com/dotnet/roslyn/issues/40894","RelatedDescription":"Open issue \"Roslyn should adjust set values for members with outputs that are stricter than inputs after processing postconditions\" (#40894)"},{"Id":"548224754","IsPullRequest":false,"CreatedAt":"2020-01-10T18:24:09","Actor":"casperOne","Number":"40893","RawContent":null,"Title":"CS8424 being raised on non-async iterators is too aggressive.","State":"open","Body":"**Version Used**: \r\n\r\nC# 8.0\r\n.NET Core SDK 3.1.100\r\n\r\nI have the following method:\r\n\r\n````csharp\r\npublic static IAsyncEnumerable<string> GetAsyncEnumerable(\r\n    this TextReader reader,\r\n    [EnumeratorCancellation] CancellationToken cancellationToken\r\n)\r\n{\r\n    // Validate parameters.\r\n    if (reader == null) throw new ArgumentNullException(nameof(reader));\r\n\r\n    // The implementation.\r\n    async IAsyncEnumerable<string> Implementation() {\r\n        // The line.\r\n        string line;\r\n\r\n        // While the line is not null.\r\n        while (!cancellationToken.IsCancellationRequested &&\r\n            (line = await reader.ReadLineAsync().ConfigureAwait(false)) != null\r\n        )\r\n            // Yield\r\n            yield return line;\r\n    }\r\n\r\n    // Return the implementation.\r\n    return Implementation();\r\n}\r\n````\r\nI am currently getting CS8424 on the `cancellationToken` parameter.\r\n\r\nI believe this is too aggressive. \r\n\r\nThe desire here is to perform parameter checks on the inputs at the call site, not when the enumerable is first iterated.\r\n\r\n[This is done often in LINQ over `IEnumerable<T>`](https://github.com/dotnet/corefx/blob/master/src/System.Linq/src/System/Linq/Select.cs#L17).   As you can see from the linked example, there is no usage of `yield return`; it delegates to another method/class which may or may not use an iterator.\r\n\r\nI wish to do the same with `IAsyncEnumerable<T>`; before anonymous functions, the way to do this was to have a private method which was the iterator, which was called from the method that performed the parameter checks.\r\n\r\nThat's not possible in this case; while I can implement the async iterator in another private method, I still have to apply the `EnumeratorCancellation` attribute to the outermost method so that the compiler will properly wire up the `WithCancellation` call.\r\n\r\nNote, some might say that with C# 8.0, we don't have to do null checks if nullable reference types are enabled.  This isn't completely true (for a number of reasons and is a separate issue) but more importantly, this isn't only about nullable reference checking, it can be any kind of logic check that needs to be done at the call site *before* iteration occurs.\r\n\r\nLooking back at the language design meeting notes all I can find about [cancellation and async iterators is from the 4/22/2019 meeting](https://github.com/dotnet/csharplang/blob/master/meetings/2019/LDM-2019-04-22.md#defaultcancellationattribute-and-overridinghidinginterface-implementation).\r\n\r\nThat seems to have led to #39961 and possibly #35166 (although the latter may have spurned the topic at the LDM), but I don't see anything specific to saying that the method where the attribte is applied on the parameter must be on an *iterator*.\r\n\r\nIt's possible from the wording of the proposed spec that this may be intended, specifically (emphasis mine):\r\n\r\n> We find that a reasonable compromise to support both scenarios in a way that is convenient for both producers and consumers of async-streams is to use a specially annotated parameter in **the async-iterator method**.\r\n\r\nIf that's the case, and I should take this to https://github.com/dotnet/csharplang, then apologies, I'll do so.\r\n\r\nThanks in advance.","Url":"https://github.com/dotnet/roslyn/issues/40893","RelatedDescription":"Open issue \"CS8424 being raised on non-async iterators is too aggressive.\" (#40893)"},{"Id":"548218699","IsPullRequest":true,"CreatedAt":"2020-01-10T18:09:02","Actor":"cston","Number":"40892","RawContent":null,"Title":"Infer null state from `is object` and `is { }` tests","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/40892","RelatedDescription":"Open PR \"Infer null state from `is object` and `is { }` tests\" (#40892)"},{"Id":"548213894","IsPullRequest":false,"CreatedAt":"2020-01-10T17:57:09","Actor":"sharwell","Number":"40891","RawContent":null,"Title":"InlineRenameSession should eagerly cancel unnecessary work","State":"open","Body":"Currently InlineRenameSession only cancels certain work when the session is committed or canceled. In cases where the work is invalidated by options changes and/or typing, the work should be canceled eagerly.\r\n\r\nSee https://github.com/dotnet/roslyn/pull/34254/files#r365025055","Url":"https://github.com/dotnet/roslyn/issues/40891","RelatedDescription":"Open issue \"InlineRenameSession should eagerly cancel unnecessary work\" (#40891)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"548158930","IsPullRequest":true,"CreatedAt":"2020-01-11T16:55:53","Actor":"jkotas","Number":"7948","RawContent":null,"Title":"Use plain clang by default on Linux","State":"closed","Body":"clang-3.9 is not available on recent Linux distros. Typically, there is clang alias setup for a good version of clang so just use that by default.\r\n\r\nFixes #5654","Url":"https://github.com/dotnet/corert/pull/7948","RelatedDescription":"Closed or merged PR \"Use plain clang by default on Linux\" (#7948)"},{"Id":"548397442","IsPullRequest":true,"CreatedAt":"2020-01-11T09:03:06","Actor":"jkotas","Number":"7950","RawContent":null,"Title":"Initialize global VEH after runtime instance","State":"closed","Body":"VEH may use the runtime instance","Url":"https://github.com/dotnet/corert/pull/7950","RelatedDescription":"Closed or merged PR \"Initialize global VEH after runtime instance\" (#7950)"},{"Id":"548304234","IsPullRequest":true,"CreatedAt":"2020-01-10T23:57:47","Actor":"jkotas","Number":"7949","RawContent":null,"Title":"Make sure MethodFixupCell is pointer aligned","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7949","RelatedDescription":"Closed or merged PR \"Make sure MethodFixupCell is pointer aligned\" (#7949)"},{"Id":"546964830","IsPullRequest":true,"CreatedAt":"2020-01-09T13:46:13","Actor":"MichalStrehovsky","Number":"7944","RawContent":null,"Title":"Progress towards x86 Windows support","State":"closed","Body":"This, along with #7943 and dotnet/runtime#1451 is enough to get my snake game running on x86 Windows.\r\n\r\nSee individual commits for details.\r\n\r\nI'm not particularly happy with the \"Fix ObjWriter build\" commit - building LLVM with the forced stdcall calling convention hits some template expansion snafu and I had to back it out in a weird way.","Url":"https://github.com/dotnet/corert/pull/7944","RelatedDescription":"Closed or merged PR \"Progress towards x86 Windows support\" (#7944)"},{"Id":"547338363","IsPullRequest":true,"CreatedAt":"2020-01-09T11:25:48","Actor":"MichalStrehovsky","Number":"7947","RawContent":null,"Title":"Disable the \"Update versions repository\" step","State":"closed","Body":"This step has been failing for months. It's a nuisance because it also makes the official build show as failed. All we care about is publishing NuGet packages and that happens before this step.","Url":"https://github.com/dotnet/corert/pull/7947","RelatedDescription":"Closed or merged PR \"Disable the \"Update versions repository\" step\" (#7947)"},{"Id":"547300953","IsPullRequest":true,"CreatedAt":"2020-01-09T08:53:18","Actor":"jkotas","Number":"7946","RawContent":null,"Title":"Fix intermittent stack overflow","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7946","RelatedDescription":"Closed or merged PR \"Fix intermittent stack overflow\" (#7946)"},{"Id":"547118932","IsPullRequest":true,"CreatedAt":"2020-01-09T07:38:43","Actor":"yowl","Number":"7945","RawContent":null,"Title":"Wasm: fix for implicit ext of UInt16 to UInt32","State":"closed","Body":"Previously this was doing a sext resulting in left filling with the MSB of the UInt16.  This change adds a test for this and fixes it.","Url":"https://github.com/dotnet/corert/pull/7945","RelatedDescription":"Closed or merged PR \"Wasm: fix for implicit ext of UInt16 to UInt32\" (#7945)"},{"Id":"546954776","IsPullRequest":true,"CreatedAt":"2020-01-08T16:05:08","Actor":"MichalStrehovsky","Number":"7943","RawContent":null,"Title":"Implement Windows x86 name mangling","State":"open","Body":"So far CoreRT only had to deal with platforms that have straightforward mangling for `extern \"C\"` symbols (which is what we shoot for in CoreRT).\r\n\r\nWindows x86 stdcall calling convention does the weird thing where `@XXX` is appended to symbol names (where XXX is the number of bytes of arguments to the method).\r\n\r\nThis pull request implements enough of what's needed to get p/invokes up and running.\r\n\r\nI'm marking it as draft because we probably want to make a decision on how to mangle our symbol definitions too (right now this only does something for p/invoke references).","Url":"https://github.com/dotnet/corert/pull/7943","RelatedDescription":"Open PR \"Implement Windows x86 name mangling\" (#7943)"},{"Id":"546250661","IsPullRequest":false,"CreatedAt":"2020-01-08T14:49:05","Actor":"psantosl","Number":"7942","RawContent":null,"Title":"The command ilc exited with code 137.","State":"closed","Body":"Hi,\r\n\r\nGetting this when trying to build our code with corert on OpenSuse 15.1 Leap.\r\n\r\nOS: OpenSuse 15.1 Leap (vmware I use for development).\r\nclang: version 7.0.1 (tags/RELEASE_701/final 349238)\r\nInstalled libncurses5 to fix dependency in libobjwriter.so\r\n\r\nGot stuck after that:\r\n\r\n```\r\nCppCompilerAndLinker=clang dotnet publish server-reduced-netcore.csproj -r linux-x64 -c Release /p:Mode=CoreRT\r\nMicrosoft (R) Build Engine version 16.4.0+e901037fe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 76.89 ms for /home/pablo/wkspaces/wkplastic/01plastic/src/server/server-reduced-netcore.csproj.\r\n  server-reduced-netcore -> /home/pablo/wkspaces/wkplastic/01plastic/bin/server-netcore/linux-x64/plasticd.dll\r\n  /usr/bin/clang\r\n  Generating native code\r\n  /tmp/tmpd8f36c85e5a444a1a7e64809b471adea.exec.cmd: line 2: 41255 Killed                  \"/home/pablo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-28507-01/tools/ilc\" @\"obj/Release/linux-x64/native/plasticd.ilc.rsp\"\r\n/home/pablo/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-28507-01/build/Microsoft.NETCore.Native.targets(226,5): error MSB3073: The command \"\"/home/pablo/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-28507-01/tools/ilc\" @\"obj/Release/linux-x64/native/plasticd.ilc.rsp\"\" exited with code 137. [/home/pablo/wkspaces/wkplastic/01plastic/src/server/server-reduced-netcore.csproj]\r\n```\r\n\r\nWe are trying to build plastic scm natively for Linux. It builds and runs ok on Windows :-)\r\n\r\n\r\nThanks!!\r\n","Url":"https://github.com/dotnet/corert/issues/7942","RelatedDescription":"Closed issue \"The command ilc exited with code 137.\" (#7942)"},{"Id":"545488687","IsPullRequest":false,"CreatedAt":"2020-01-06T00:27:15","Actor":"yowl","Number":"7941","RawContent":null,"Title":"Wasm: question: how best to make CoreRT a drop in replacement regards WebAssembly.Runtime.InvokeJS","State":"open","Body":"The Uno Platform makes use of https://github.com/mono/mono/blob/59a1eade7ce4fb79c56a47d043151fbdd5363b1b/sdks/wasm/src/driver.c#L323 for JS interop.  It does this here: https://github.com/unoplatform/uno/blob/1dede9e628108c7c7b71d6aee4cd759c0f9bf9d9/src/Uno.Foundation/Runtime.wasm.cs#L21.  \r\n\r\nHow would that be best handled so that CoreRT could be a drop in replacement for mono?  Could it intercept the call to `WebAssembly.Runtime.InvokeJS` in https://github.com/dotnet/corert/blob/f52a8e504b0485dff9e4737a6fb9535d5eccb77d/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L1575 and replace with a call to a similar method perhaps in https://github.com/yowl/corert/blob/uno-js-llvm/src/CoreRT.WebAssembly.Interop/InternalCalls.cs.  Not asking how to actually get into JS, but what would be the right way to start.\r\n\r\nThanks.","Url":"https://github.com/dotnet/corert/issues/7941","RelatedDescription":"Open issue \"Wasm: question: how best to make CoreRT a drop in replacement regards WebAssembly.Runtime.InvokeJS\" (#7941)"},{"Id":"545388992","IsPullRequest":false,"CreatedAt":"2020-01-05T08:30:07","Actor":"MichalStrehovsky","Number":"7940","RawContent":null,"Title":"Remove dependency on link.exe and Windows SDK","State":"open","Body":"Link.exe is not available as a standalone tool and gets bundled with the Windows SDK/DDK that is a huge download.\r\n\r\nInvestigate whether we can bundle [LLD](https://lld.llvm.org/).\r\n\r\n- [ ] make sure it can embed NatVis files when targeting Windows\r\n- [ ] make sure it can generate all the debug records we emit\r\n- [ ] make sure it supports SourceLink (I have a WIP SourceLink support in a branch that I can never get to - https://github.com/MichalStrehovsky/corert/commit/84e53e3eec9ff24e666eb55792de95eb4b4e6585)\r\n- [ ] make sure it can generate import libraries out of DEF files a la `link.exe /lib /def:foo.def /machine:x64 /out:foo.lib` (this is our way out of the \"what kind of import libraries to specify\" hell + gets rid of the Windows SDK dependency)\r\n\r\nThis is also a stepping stone to enable cross-compilation (e.g. target Windows from Linux and Linux from Windows).","Url":"https://github.com/dotnet/corert/issues/7940","RelatedDescription":"Open issue \"Remove dependency on link.exe and Windows SDK\" (#7940)"},{"Id":"545282390","IsPullRequest":true,"CreatedAt":"2020-01-04T12:59:34","Actor":"MichalStrehovsky","Number":"7939","RawContent":null,"Title":"Port changes from dotnet/runtime","State":"open","Body":"First commit is xcopy from crossgen2, the rest is adjustments. I'm going to squash and merge, this is just for posterity.\r\n\r\nI'm planning to sync things back to the runtime repo because we're starting to accumulate changes on this side.","Url":"https://github.com/dotnet/corert/pull/7939","RelatedDescription":"Open PR \"Port changes from dotnet/runtime\" (#7939)"},{"Id":"545220256","IsPullRequest":true,"CreatedAt":"2020-01-04T00:56:18","Actor":"yowl","Number":"7938","RawContent":null,"Title":"Wasm: generic struct and generic context in finally funclets","State":"open","Body":"This fixes a few issues encountered when compiling the Uno platform with regards to shared generics.\r\n\r\n- Handling of generic structs when passing to functions and when returned.\r\n- Getting the generic context in finally blocks\r\n- Creation of incorrect type for some generic structures.\r\n\r\nFixes #7935 ","Url":"https://github.com/dotnet/corert/pull/7938","RelatedDescription":"Open PR \"Wasm: generic struct and generic context in finally funclets\" (#7938)"},{"Id":"545180752","IsPullRequest":false,"CreatedAt":"2020-01-04T00:24:31","Actor":"QFSW","Number":"7937","RawContent":null,"Title":"Visual Studio 2019 and .NET Core 3.1","State":"closed","Body":"I've been trying to give CoreRT a go but am unable to add the package\r\n```\r\nerror: Unable to find package Microsoft.DotNet.ILCompiler. No packages exist with this id in source(s): dotnet-core, nuget\r\n```\r\nDoes CoreRT still require VS17 and .NET Core 2.0 or is the readme outdated?\r\n\r\nIf not, any idea what I am doing wrong?","Url":"https://github.com/dotnet/corert/issues/7937","RelatedDescription":"Closed issue \"Visual Studio 2019 and .NET Core 3.1\" (#7937)"},{"Id":"544764328","IsPullRequest":false,"CreatedAt":"2020-01-03T12:23:23","Actor":"Sergio0694","Number":"7936","RawContent":null,"Title":"ArrayPool<T> returning a single T item (!) as a T[] reference [UWP]","State":"closed","Body":"Hello,\r\nI've just stumbled upon a very weird bug that's happening for me on UWP (Debug x64). I'm using `ArrayPool<T>.Shared` to rent arrays, and for whatever reason I've started getting an `ArrayTypeMismatchException` when trying to copy items from two rented arrays of the same type. Upon further investigation, turns out the reason is that one of the rented arrays is in fact... Just a single `T` item, and not a `T[]` object. Looks like something went really wrong with the type system and I'd be really curious to know what's going on.\r\nI've personally worked around the issue by just going back to non-pooled arrays in this case, but still this issue was so strange that I though it'd be interesting to share 😄\r\n\r\nHere's a screen:\r\n\r\n![image](https://user-images.githubusercontent.com/10199417/71695441-6cbd5f00-2db2-11ea-9ab3-10ad502e1faf.png)\r\n\r\nYou can see that `T[] newItems` array is in fact a single `T` element, and not an array at all.\r\n\r\nHere's another screen, where I've also added `.GetType()` on the second array just to double check:\r\n\r\n![image](https://user-images.githubusercontent.com/10199417/71695493-95ddef80-2db2-11ea-8964-e6d6d094513f.png)\r\n\r\nHere's the source code of that `Pool<T>` class I'm using: https://gist.github.com/Sergio0694/9a08161830fbcebf26e1973ad2a51cea.\r\n\r\nI've created a repro branch in my repo and I have steps that seem to reproduce the crash reliably, so I'd be happy to give access to the repo to anyone from the team, if you guys want to investigate this.\r\n\r\nThank you for your time, and happy new year to the whole team! 🎉","Url":"https://github.com/dotnet/corert/issues/7936","RelatedDescription":"Closed issue \"ArrayPool<T> returning a single T item (!) as a T[] reference [UWP]\" (#7936)"},{"Id":"544371019","IsPullRequest":false,"CreatedAt":"2020-01-01T15:43:28","Actor":"yowl","Number":"7935","RawContent":null,"Title":"Wasm: Question on type of return values from shared generic calls","State":"open","Body":"As an example, take\r\nhttps://github.com/dotnet/corert/blob/88d75715f4c84c383365a33734d6f0cffe837061/src/System.Private.CoreLib/shared/System/Threading/WaitHandle.cs#L295\r\n\r\nThe second call parameter `safeWaitHandles` is an implicit op to a `Span<SafeWaitHandle?>` from its declaration\r\n```\r\nSafeWaitHandle?[]? safeWaitHandles = RentSafeWaitHandleArray(waitHandles.Length);\r\n```\r\n This implicit method  is a shared generic method so the call in LLVM looks like\r\n\r\n```\r\n%45 = call %\"[S.P.CoreLib]System.Span`1<System.__Canon>\" @\"S_P_CoreLib_System_Span_1<System___Canon>__op_Implicit\"(i8* %43, i8* %CastPtr163)\r\n```\r\nWhere the return is the Canon type, `[S.P.CoreLib]System.Span`1<System.__Canon>`\r\n\r\nThis is not a valid type to pass into `ObtainSafeWaitHandles` as in LLVM that is defined on the concrete type\r\n\r\n```\r\ndefine void @S_P_CoreLib_System_Threading_WaitHandle__ObtainSafeWaitHandles(i8*, %\"[S.P.CoreLib]System.ReadOnlySpan`1<System.Threading.WaitHandle>\", %\"[S.P.CoreLib]System.Span`1<Microsoft.Win32.SafeHandles.SafeWaitHandle>\", %\"[S.P.CoreLib]System.Span`1<native int>\")\r\n```\r\n\r\nWhat would be the right way to solve this?  Should it always convert types to their canonical versions to the extent that `System.Span`1<Microsoft.Win32.SafeHandles.SafeWaitHandle>` is invalid in the LLVM?  ","Url":"https://github.com/dotnet/corert/issues/7935","RelatedDescription":"Open issue \"Wasm: Question on type of return values from shared generic calls\" (#7935)"},{"Id":"543284657","IsPullRequest":true,"CreatedAt":"2020-01-01T05:38:38","Actor":"josephmoresena","Number":"7929","RawContent":null,"Title":"Generate version script automatically unix","State":"closed","Body":"As we discussed in #s, these changes will allow at shared libraries compilation on unix-like platforms to automatically generate a version-script and remove all local symbols and unused code.\r\nAs is said on https://github.com/dotnet/corert/issues/7340#issuecomment-486095150 the .so file contains all debug information so we need still remove all this information from file with strip in order to reduce significatly the size of .so file.","Url":"https://github.com/dotnet/corert/pull/7929","RelatedDescription":"Closed or merged PR \"Generate version script automatically unix\" (#7929)"},{"Id":"544258401","IsPullRequest":false,"CreatedAt":"2019-12-31T19:46:40","Actor":"yowl","Number":"7934","RawContent":null,"Title":"Wasm: fails the simple Generics TestNullableCasting test","State":"open","Body":"This test fails for Wasm.  Have tried the suggestion at https://github.com/dotnet/corert/pull/7897/files#r362161168, but hits the assert at https://github.com/dotnet/corert/blob/7cb8f8c93161ac5e365c6feef1379fe16188e191/src/ILCompiler.Compiler/src/Compiler/DependencyAnalysis/ReadyToRunGenericHelperNode.cs#L48 with target `{[S.P.CoreLib]System.Collections.Generic.ICollection`1<T_System.__Canon>}`\r\n\r\nStack\r\n\r\n```\r\n \tSystem.Private.CoreLib.dll!System.Diagnostics.Debug.Assert(bool condition, string message, string detailMessage)\tUnknown\r\n>\tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.ReadyToRunGenericHelperNode.GetLookupSignature(ILCompiler.DependencyAnalysis.NodeFactory factory, ILCompiler.DependencyAnalysis.ReadyToRunHelperId id, object target) Line 48\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.ReadyToRunGenericHelperNode.ReadyToRunGenericHelperNode(ILCompiler.DependencyAnalysis.NodeFactory factory, ILCompiler.DependencyAnalysis.ReadyToRunHelperId helperId, object target, Internal.TypeSystem.TypeSystemEntity dictionaryOwner) Line 34\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.ReadyToRunGenericLookupFromTypeNode.ReadyToRunGenericLookupFromTypeNode(ILCompiler.DependencyAnalysis.NodeFactory factory, ILCompiler.DependencyAnalysis.ReadyToRunHelperId helperId, object target, Internal.TypeSystem.TypeSystemEntity dictionaryOwner) Line 296\tC#\r\n \tILCompiler.WebAssembly.dll!ILCompiler.DependencyAnalysis.WebAssemblyReadyToRunGenericLookupFromTypeNode.WebAssemblyReadyToRunGenericLookupFromTypeNode(ILCompiler.DependencyAnalysis.NodeFactory factory, ILCompiler.DependencyAnalysis.ReadyToRunHelperId helperId, object target, Internal.TypeSystem.TypeSystemEntity dictionaryOwner) Line 12\tC#\r\n \tILCompiler.WebAssembly.dll!ILCompiler.DependencyAnalysis.WebAssemblyCodegenNodeFactory.CreateGenericLookupFromTypeNode(ILCompiler.DependencyAnalysis.NodeFactory.ReadyToRunGenericHelperKey helperKey) Line 88\tC#\r\n \tSystem.Collections.Concurrent.dll!System.Collections.Concurrent.ConcurrentDictionary<ILCompiler.DependencyAnalysis.NodeFactory.ReadyToRunGenericHelperKey, ILCompiler.DependencyAnalysis.ISymbolNode>.GetOrAdd(ILCompiler.DependencyAnalysis.NodeFactory.ReadyToRunGenericHelperKey key, System.Func<ILCompiler.DependencyAnalysis.NodeFactory.ReadyToRunGenericHelperKey, ILCompiler.DependencyAnalysis.ISymbolNode> valueFactory)\tUnknown\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NodeCache<ILCompiler.DependencyAnalysis.NodeFactory.ReadyToRunGenericHelperKey, ILCompiler.DependencyAnalysis.ISymbolNode>.GetOrAdd(ILCompiler.DependencyAnalysis.NodeFactory.ReadyToRunGenericHelperKey key) Line 150\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.ReadyToRunHelperFromTypeLookup(ILCompiler.DependencyAnalysis.ReadyToRunHelperId id, object target, Internal.TypeSystem.TypeSystemEntity dictionaryOwner) Line 910\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.GetGenericLookupHelperAndAddReference(ILCompiler.DependencyAnalysis.ReadyToRunHelperId helperId, object helperArg, out LLVMSharp.LLVMValueRef helper, System.Collections.Generic.IEnumerable<LLVMSharp.LLVMTypeRef> additionalArgs) Line 3981\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.CallGenericHelper(ILCompiler.DependencyAnalysis.ReadyToRunHelperId helperId, object helperArg) Line 1538\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.ImportCasting(Internal.IL.ILOpcode opcode, int token) Line 1516\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.ImportBasicBlock(Internal.IL.ILImporter.BasicBlock basicBlock) Line 597\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.ImportBasicBlocks() Line 304\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.Import() Line 167\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.CompileMethod(ILCompiler.WebAssemblyCodegenCompilation compilation, ILCompiler.DependencyAnalysis.WebAssemblyMethodCodeNode methodCodeNodeNeedingCode) Line 85\tC#\r\n \tILCompiler.WebAssembly.dll!ILCompiler.WebAssemblyCodegenCompilation.ComputeDependencyNodeDependencies(System.Collections.Generic.List<ILCompiler.DependencyAnalysisFramework.DependencyNodeCore<ILCompiler.DependencyAnalysis.NodeFactory>> obj) Line 74\tC#\r\n \tILCompiler.DependencyAnalysisFramework.dll!ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer<ILCompiler.DependencyAnalysisFramework.NoLogStrategy<ILCompiler.DependencyAnalysis.NodeFactory>, ILCompiler.DependencyAnalysis.NodeFactory>.ComputeDependencies(System.Collections.Generic.List<ILCompiler.DependencyAnalysisFramework.DependencyNodeCore<ILCompiler.DependencyAnalysis.NodeFactory>> deferredStaticDependencies) Line 139\tC#\r\n```","Url":"https://github.com/dotnet/corert/issues/7934","RelatedDescription":"Open issue \"Wasm: fails the simple Generics TestNullableCasting test\" (#7934)"},{"Id":"543970884","IsPullRequest":true,"CreatedAt":"2019-12-30T18:29:30","Actor":"yowl","Number":"7933","RawContent":null,"Title":"WIP: Wasm: enables calling generic methods that need a hidden context from finally blocks","State":"open","Body":"Add supports for passing the generic context to finally funclets so that `foreach` statements over e.g. `List<>` can be compiled.  `foreach` will add a finally to call dispose on the enumerator which if the method is generic and needs the context from a hidden parameter was previously not compiling.\r\n\r\nAdded test for this case.\r\n\r\nWIP as depends on #7248 ","Url":"https://github.com/dotnet/corert/pull/7933","RelatedDescription":"Open PR \"WIP: Wasm: enables calling generic methods that need a hidden context from finally blocks\" (#7933)"},{"Id":"543557063","IsPullRequest":true,"CreatedAt":"2019-12-30T00:59:36","Actor":"jkotas","Number":"7932","RawContent":null,"Title":"Update versions of dependencies","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7932","RelatedDescription":"Closed or merged PR \"Update versions of dependencies\" (#7932)"},{"Id":"543383206","IsPullRequest":true,"CreatedAt":"2019-12-29T17:00:50","Actor":"am11","Number":"7931","RawContent":null,"Title":"Set TRYRUN_OUTPUT in set_cache_value macro","State":"closed","Body":"Also fix cmake warning about unused variable by conditionally including it.\r\nWarning is appearing in every build for sometime, [e.g.](https://dev.azure.com/dnceng/public/_build/results?buildId=467504&view=logs&j=9d9bed24-aafc-5ca0-72eb-d60e686a8d72&t=a99ab234-d192-591f-6b8f-e2800dd13d29&l=117)\r\n\r\nFollowup on https://github.com/dotnet/corert/pull/7899#issuecomment-565599126\r\nContributes to: #4589","Url":"https://github.com/dotnet/corert/pull/7931","RelatedDescription":"Closed or merged PR \"Set TRYRUN_OUTPUT in set_cache_value macro\" (#7931)"},{"Id":"543350545","IsPullRequest":false,"CreatedAt":"2019-12-29T10:25:49","Actor":"secana","Number":"7930","RawContent":null,"Title":"Myget feed does not exist (404)","State":"closed","Body":"I've tried to update CoreRT to the newest version, but I'm not able to download from MyGet.\r\n\r\nI get the following error message:\r\n```powershell\r\ndotnet add package Microsoft.DotNet.ILCompiler --version 1.0.5-prerelease-00002 --source https://www.myget.org/F/dotnet/api/v3/index.json\r\n  Writing C:\\Users\\x\\AppData\\Local\\Temp\\tmp5431.tmp\r\ninfo : Adding PackageReference for package 'Microsoft.DotNet.ILCompiler' into project 'C:\\Users\\Stefa\\source\\repos\\CertDump\\CertDump\\CertDump.csproj'.\r\ninfo : Restoring packages for C:\\Users\\x\\source\\repos\\CertDump\\CertDump\\CertDump.csproj...\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/microsoft.dotnet.ilcompiler/index.json\r\ninfo :   CACHE https://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.dotnet.ilcompiler/index.json\r\ninfo :   NotFound https://api.nuget.org/v3-flatcontainer/microsoft.dotnet.ilcompiler/index.json 689ms\r\nerror: Unable to load the service index for source https://www.myget.org/F/dotnet/api/v3/index.json.\r\nerror:   Response status code does not indicate success: 404 (Feed does not exist.).\r\n```\r\n\r\nAdding the feed to a nuget.config doesn't work either. Any ideas how to get the newest release?","Url":"https://github.com/dotnet/corert/issues/7930","RelatedDescription":"Closed issue \"Myget feed does not exist (404)\" (#7930)"},{"Id":"542941521","IsPullRequest":true,"CreatedAt":"2019-12-27T19:40:25","Actor":"jkotas","Number":"7928","RawContent":null,"Title":"Handle glibc sys/sysctl.h deprecation","State":"closed","Body":"Port https://github.com/dotnet/coreclr/pull/27048 to CoreRT PAL\r\n\r\nFixes #7927","Url":"https://github.com/dotnet/corert/pull/7928","RelatedDescription":"Closed or merged PR \"Handle glibc sys/sysctl.h deprecation\" (#7928)"},{"Id":"542935832","IsPullRequest":false,"CreatedAt":"2019-12-27T19:40:25","Actor":"Christopher876","Number":"7927","RawContent":null,"Title":"[Linux] glibc <sys/sysctl.h> header include build error","State":"closed","Body":"glibc deprecated <sys/sysctl.h> in version 2.30.\r\n\r\n## Software version:\r\n.NET Core 3.1\r\nFedora 31 x64\r\nglibc 2.30\r\n\r\n## Error:\r\n```bash\r\nSetting up directories for build\r\nChecking pre-requisites...\r\nCommencing build of corert native components for Linux.x64.Debug\r\n~/git/corert/bin/obj/Native/Linux.x64.Debug ~/git/corert\r\nInvoking cmake with arguments: \"/home/christopherwilliams/git/corert/buildscripts/..\" Debug\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /home/christopherwilliams/git/corert/bin/obj/Native/Linux.x64.Debug\r\nExecuting make install -j 5 \r\n[  1%] Built target bootstrappercpp\r\n[  1%] Built target AsmOffsets\r\n[  2%] Built target bootstrapper\r\n[  4%] Built target jitinterface\r\n[  6%] Built target bootstrapperdll\r\n[  6%] Building CXX object Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/unix/PalRedhawkUnix.cpp.o\r\n[  9%] Built target System.Private.CoreLib.Native\r\n[  9%] Building CXX object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/unix/PalRedhawkUnix.cpp.o\r\n[  9%] Building CXX object Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/__/gc/unix/events.cpp.o\r\n[ 11%] Built target System.Private.TypeLoader.Native\r\n[ 11%] Building CXX object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/ThunksMapping.cpp.o\r\n[ 11%] Building CXX object Runtime/Full/CMakeFiles/Runtime.dir/__/unix/PalRedhawkUnix.cpp.o\r\nIn file included from /home/christopherwilliams/git/corert/src/Native/Runtime/unix/PalRedhawkUnix.cpp:48:\r\n/usr/include/sys/sysctl.h:21:2: error: \"The <sys/sysctl.h> header is deprecated and will be removed.\" [-Werror,-W#warnings]\r\n#warning \"The <sys/sysctl.h> header is deprecated and will be removed.\"\r\n ^\r\n[ 11%] Building CXX object Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/__/gc/unix/cgroup.cpp.o\r\nIn file included from /home/christopherwilliams/git/corert/src/Native/Runtime/unix/PalRedhawkUnix.cpp:48:\r\n/usr/include/sys/sysctl.h:21:2: error: \"The <sys/sysctl.h> header is deprecated and will be removed.\" [-Werror,-W#warnings]\r\n#warning \"The <sys/sysctl.h> header is deprecated and will be removed.\"\r\n ^\r\n1 error generated.\r\nmake[2]: *** [Runtime/Portable/CMakeFiles/PortableRuntime.dir/build.make:778: Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/unix/PalRedhawkUnix.cpp.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\n[ 12%] Building CXX object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/unix/HardwareExceptions.cpp.o\r\n1 error generated.\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/build.make:778: Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/unix/PalRedhawkUnix.cpp.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\n[ 12%] Building CXX object Runtime/Full/CMakeFiles/Runtime.dir/__/ThunksMapping.cpp.o\r\nIn file included from /home/christopherwilliams/git/corert/src/Native/Runtime/unix/PalRedhawkUnix.cpp:48:\r\n/usr/include/sys/sysctl.h:21:2: error: \"The <sys/sysctl.h> header is deprecated and will be removed.\" [-Werror,-W#warnings]\r\n#warning \"The <sys/sysctl.h> header is deprecated and will be removed.\"\r\n ^\r\n1 error generated.\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/build.make:778: Runtime/Full/CMakeFiles/Runtime.dir/__/unix/PalRedhawkUnix.cpp.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[1]: *** [CMakeFiles/Makefile2:334: Runtime/Full/CMakeFiles/Runtime.dir/all] Error 2\r\nmake[1]: *** Waiting for unfinished jobs....\r\nmake[1]: *** [CMakeFiles/Makefile2:280: Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/all] Error 2\r\nmake[1]: *** [CMakeFiles/Makefile2:361: Runtime/Portable/CMakeFiles/PortableRuntime.dir/all] Error 2\r\nmake: *** [Makefile:130: all] Error 2\r\nFailed to build corert native components.\r\n```","Url":"https://github.com/dotnet/corert/issues/7927","RelatedDescription":"Closed issue \"[Linux] glibc <sys/sysctl.h> header include build error\" (#7927)"},{"Id":"542474668","IsPullRequest":false,"CreatedAt":"2019-12-26T08:05:57","Actor":"chenxustu1","Number":"7926","RawContent":null,"Title":"osx with error \"The data area passed to a system call is too small\"","State":"open","Body":"source code works fine on windows.\r\nosx encounter error:\r\n\r\n> EXEC : error : The data area passed to a system call is too small. [/Users/xxxxx.csproj]\r\n   (Exception from HRESULT: 0x8007007A)\r\n  System.Runtime.InteropServices.COMException (0x8007007A): The data area passed to a system call is too small.\r\n   (Exception from HRESULT: 0x8007007A)\r\n     at System.StubHelpers.MngdNativeArrayMarshaler.ConvertContentsToNative(IntPtr pMarshalState, Object& pManagedHome, IntPtr pNativeHome)\r\n     at ILCompiler.DependencyAnalysis.ObjectWriter.GetEnumTypeIndex(IntPtr objWriter, EnumTypeDescriptor enumTypeDescriptor, EnumRecordTypeDescriptor[] typeRecords)\r\n     at ILCompiler.DependencyAnalysis.ObjectWriter.GetEnumTypeIndex(EnumTypeDescriptor enumTypeDescriptor, EnumRecordTypeDescriptor[] typeRecords)\r\n     at ILCompiler.UserDefinedTypeDescriptor.GetEnumTypeIndex(TypeDesc type)\r\n     at ILCompiler.UserDefinedTypeDescriptor.GetVariableTypeIndex(TypeDesc type, Boolean needsCompleteIndex)\r\n     at ILCompiler.UserDefinedTypeDescriptor.GetClassTypeIndex(TypeDesc type, Boolean needsCompleteType)\r\n     at ILCompiler.UserDefinedTypeDescriptor.GetTypeIndex(TypeDesc type, Boolean needsCompleteType)\r\n     at ILCompiler.UserDefinedTypeDescriptor.GetVariableTypeIndex(TypeDesc type, Boolean needsCompleteIndex)\r\n     at ILCompiler.UserDefinedTypeDescriptor.GetVariableTypeIndex(TypeDesc type)\r\n     at ILCompiler.DependencyAnalysis.ObjectWriter.EmitDebugVar(DebugVarInfo debugVar)\r\n     at ILCompiler.DependencyAnalysis.ObjectWriter.EmitDebugVarInfo(ObjectNode node)\r\n     at ILCompiler.DependencyAnalysis.ObjectWriter.EmitObject(String objectFilePath, IEnumerable`1 nodes, NodeFactory factory, IObjectDumper dumper)\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n/Users/xxxx/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-28426-01/b\r\nuild/Microsoft.NETCore.Native.targets(226,5): error MSB3073: The command \"\"/User\r\ns/xxxx/.nuget/packages/runtime.osx-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha\r\n-28426-01/tools/ilc\" @\"obj/release/netcoreapp3.1/osx-x64/native/xxxxxxxx.ilc.rsp\r\n\"\" exited with code 1. [/Users/xxxxxxxxxxxx.csproj]","Url":"https://github.com/dotnet/corert/issues/7926","RelatedDescription":"Open issue \"osx with error \"The data area passed to a system call is too small\"\" (#7926)"},{"Id":"542116711","IsPullRequest":true,"CreatedAt":"2019-12-24T15:45:39","Actor":"MichalStrehovsky","Number":"7924","RawContent":null,"Title":"Sync type system from dotnet/runtime repo","State":"closed","Body":"First commit is just xcopy from CoreCLR. The rest are adjustments:\r\n\r\n* The modopts change will need changes on native metadata side so we can't take it without extra work. Using LINQ in the type system is also unacceptable for the runtime type system. The modopts change is kind of a gross hack in general so I'm going to wait and see if I find the energy to make it not gross (making MethodSignature one pointer bigger just because we sometimes need modopts is a pretty bad compromise for starters)\r\n* The value of diagnostic name is pretty limited and this infects all type system entities the compiler generates out of thin air. Don't feel like implementing that, so adding a dummy to unblock integration.","Url":"https://github.com/dotnet/corert/pull/7924","RelatedDescription":"Closed or merged PR \"Sync type system from dotnet/runtime repo\" (#7924)"},{"Id":"542126036","IsPullRequest":true,"CreatedAt":"2019-12-24T15:01:00","Actor":"MichalStrehovsky","Number":"7925","RawContent":null,"Title":"Sync CompareInfo.cs with dotnet/runtime","State":"closed","Body":"#7913 brought in an odd change.","Url":"https://github.com/dotnet/corert/pull/7925","RelatedDescription":"Closed or merged PR \"Sync CompareInfo.cs with dotnet/runtime\" (#7925)"},{"Id":"541369297","IsPullRequest":true,"CreatedAt":"2019-12-23T04:48:52","Actor":"yowl","Number":"7922","RawContent":null,"Title":"Wasm:support initialization of md arrays","State":"closed","Body":"Adds a test (previously failing) and support for initializing multidimensional arrays such as\r\n```\r\n        double[,] doubles = new double[2, 3]\r\n        {\r\n            {1.0, 1.1, 1.2 },\r\n            {2.0, 2.1, 2.2 },\r\n        };\r\n```\r\nFixes #7921 ","Url":"https://github.com/dotnet/corert/pull/7922","RelatedDescription":"Closed or merged PR \"Wasm:support initialization of md arrays\" (#7922)"},{"Id":"541345482","IsPullRequest":false,"CreatedAt":"2019-12-23T04:48:52","Actor":"yowl","Number":"7921","RawContent":null,"Title":"Wasm: InitializeArray when IsSzArray == false ","State":"closed","Body":"For the IL\r\n```\r\n IL_0045:  ldtoken     valuetype <PrivateImplementationDetails>/__StaticArrayInitTypeSize=144 <PrivateImplementationDetails>::9E374D7263B2452E25DE3D6E617F6A728D98A439\r\n  IL_004A:  call        void [System.Private.CoreLib]System.Runtime.CompilerServices.RuntimeHelpers::InitializeArray(class [System.Private.CoreLib]System.Array, valuetype [System.Private.CoreLib]System.RuntimeFieldHandle)\r\n ```\r\nWhich is from XmlSchemaValidator and this code\r\n```\r\n        internal static bool[,] ValidStates = new bool[12,12] {\r\n                                               /*ValidatorState.None*/      /*ValidatorState.Start  /*ValidatorState.TopLevelAttribute*/     /*ValidatorState.TopLevelTOrWS*/ /*ValidatorState.Element*/      /*ValidatorState.Attribute*/    /*ValidatorState.EndAttributes*/    /*ValidatorState.Text/      /*ValidatorState.WS/*       /*ValidatorState.EndElement*/   /*ValidatorState.SkipToEndElement*/         /*ValidatorState.Finish*/\r\n        /*ValidatorState.None*/             {  true,                        true,                     false,                                 false,                           false,                          false,                          false,                              false,                      false,                      false,                          false,                                      false},\r\n        /*ValidatorState.Start*/            {  false,                       true,                     true,                                  true,                            true,                           false,                          false,                              false,                      false,                      false,                          false,                                      true },\r\n        /*ValidatorState.TopLevelAttribute*/{  false,                       false,                    false,                                 false,                           false,                          false,                          false,                              false,                      false,                      false,                          false,                                      true },\r\n        /*ValidatorState.TopLevelTextOrWS*/ {  false,                       false,                    false,                                 true,                            true,                           false,                          false,                              false,                      false,                      false,                          false,                                      true },\r\n        /*ValidatorState.Element*/          {  false,                       false,                    false,                                 true,                            false,                          true,                           true,                               false,                      false,                      true,                           true,                                       false},\r\n        /*ValidatorState.Attribute*/        {  false,                       false,                    false,                                 false,                           false,                          true,                           true,                               false,                      false,                      true,                           true,                                       false},\r\n        /*ValidatorState.EndAttributes*/    {  false,                       false,                    false,                                 false,                           true,                           false,                          false,                              true,                       true,                       true,                           true,                                       false},\r\n        /*ValidatorState.Text*/             {  false,                       false,                    false,                                 false,                           true,                           false,                          false,                              true,                       true,                       true,                           true,                                       false},\r\n        /*ValidatorState.Whitespace*/       {  false,                       false,                    false,                                 false,                           true,                           false,                          false,                              true,                       true,                       true,                           true,                                       false},\r\n        /*ValidatorState.EndElement*/       {  false,                       false,                    false,                                 true,                            true,                           false,                          false,                              true,                       true,                       true,                           true /*?*/,                                 true },\r\n        /*ValidatorState.SkipToEndElement*/ {  false,                       false,                    false,                                 true,                            true,                           false,                          false,                              true,                       true,                       true,                           true,                                       true },\r\n        /*ValidatorState.Finish*/           {  false,                       true,                     false,                                 false,                           false,                          false,                          false,                              false,                      false,                      false,                          false,                                      false},\r\n        };\r\n```\r\nI want to implement in Wasm the InitializeArray for this but I cant find how the offset for the actual values is calculated.  Unlike a vector, I'm guessing there's a few extra fields for the number and size of dimensions?  If I look at the IL for `MDArray<Bool,2>__Get` it is getting an offset of 24 from somewhere, snippet from the value lookup:\r\n```\r\n  IL_002C:  ldflda      native int [System.Private.CoreLib]System.Object::m_pEEType\r\n  IL_0031:  ldc.i4.s    24\r\n  IL_0033:  add\r\n  IL_0034:  ldloc.0\r\n  IL_0035:  conv.u\r\n  IL_0036:  ldc.i4.4\r\n  IL_0037:  mul\r\n  IL_0038:  add\r\n  IL_0039:  ldobj       int32\r\n  IL_003E:  ret\r\n```\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7921","RelatedDescription":"Closed issue \"Wasm: InitializeArray when IsSzArray == false \" (#7921)"},{"Id":"541505551","IsPullRequest":false,"CreatedAt":"2019-12-23T04:45:53","Actor":"Entomy","Number":"7923","RawContent":null,"Title":"Package ILVerify for redistribution","State":"closed","Body":"Projects such as [ILSupport](https://github.com/ins0mniaque/ILSupport) offer some tooling for IL, but there is no current support for IL verification, despite a [demand](https://github.com/ins0mniaque/ILSupport/issues/7).\r\n\r\nIf there already is some package of ILVerify, such as nuget, could we get a link somewhere for easy discovery? Otherwise, can we get this packaged so it can reasonably be incorporated into other tooling?","Url":"https://github.com/dotnet/corert/issues/7923","RelatedDescription":"Closed issue \"Package ILVerify for redistribution\" (#7923)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"547054598","IsPullRequest":true,"CreatedAt":"2020-01-11T21:07:28","Actor":"dotnet-maestro-bot","Number":"4145","RawContent":null,"Title":"[automated] Merge branch 'release/3.1.2xx' => 'master'","State":"closed","Body":"I detected changes in the release/3.1.2xx branch which have not been merged yet to master. I'm a robot and am configured to help you automatically keep master up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.1.2xx by the following committers:\n\n* wli3\n* dotnet-maestro[bot]\n* nguerrera\n* mmitche\n* wtgodbe\n* dsplaisted\n* livarcocc\n* vitek-karas\n* tmeschter\n* v-zbsail\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.1.2xx\r\ngit pull --ff-only\r\ngit checkout master\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.1.2xx\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.1.2xx-to-master'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.1.2xx-to-master master\r\ngit pull https://github.com/dotnet-maestro-bot/sdk merge/release/3.1.2xx-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.1.2xx-to-master master\r\ngit pull git@github.com:dotnet-maestro-bot/sdk merge/release/3.1.2xx-to-master\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/sdk HEAD:merge/release/3.1.2xx-to-master\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/sdk/pull/4145","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/3.1.2xx' => 'master'\" (#4145)"},{"Id":"548451163","IsPullRequest":false,"CreatedAt":"2020-01-11T21:03:54","Actor":"Tyrrrz","Number":"4157","RawContent":null,"Title":"Framework dependent deployment for AnyCPU","State":"closed","Body":"Hi there.\r\n\r\nSorry in advance if this is not the right repository for this issue/question but I'm not sure where to look for an answer.\r\n\r\nI'm currently building and deploying a WPF application. The deployment is framework-dependent, i.e. not self-contained.\r\n\r\nIt appears when some of my users, who are using 32bit OS, download and install the 32bit version of the .NET Core runtime, they fail to run the application with the following error:\r\n\r\n![image](https://user-images.githubusercontent.com/1935960/72207382-4b8afb80-34a1-11ea-83a2-c1e6b96cce62.png)\r\n\r\nIt seems that the application is attempting to run in 64bit mode despite being built for AnyCPU.\r\n\r\nDoes anyone know what can cause this and how to fix this issue?","Url":"https://github.com/dotnet/sdk/issues/4157","RelatedDescription":"Closed issue \"Framework dependent deployment for AnyCPU\" (#4157)"},{"Id":"548364416","IsPullRequest":false,"CreatedAt":"2020-01-11T21:01:04","Actor":"predatorian3","Number":"4156","RawContent":null,"Title":"dotNet Core SDK 3.1.100 failing to restore because of bad versions","State":"closed","Body":"# Issue Description\r\n\r\nOn a brand new install of dotNet Core SDK 3.1.100 for Windows 10 x64, It seems to be missing dependencies with the install. Should I need to include other feeds to get the `dotnet restore` to work after doing a `dotnet new xunit`? I was following this document: [Organizing and testing projects with the .NET Core command line](https://docs.microsoft.com/en-us/dotnet/core/tutorials/testing-with-cli#testing-the-sample). Some of the references are a little old so maybe something changed? \r\n\r\n## Steps performed\r\n\r\n```\r\ndotnet new xunit\r\ndotnet restore\r\n```\r\n\r\n## System Information\r\n\r\n```\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests>systeminfo\r\n\r\nHost Name:                 FENIX\r\nOS Name:                   Microsoft Windows 10 Pro\r\nOS Version:                10.0.18362 N/A Build 18362\r\nOS Manufacturer:           Microsoft Corporation\r\n```\r\n\r\n## `dotnet` Errors\r\n```\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests>dotnet restore \r\nRestore completed in 25.54 ms for C:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\src\\NewTypes\\NewTypes.csproj.\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj : error NU1100: Unable to resolve 'Microsoft.NET.Test.Sdk (>= 16.2.0)' for '.NETCoreApp,Version=v3.1'.\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj : error NU1100: Unable to resolve 'xunit (>= 2.4.0)' for '.NETCoreApp,Version=v3.1'.\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj : error NU1100: Unable to resolve 'xunit.runner.visualstudio (>= 2.4.0)' for '.NETCoreApp,Version=v3.1'.\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj : error NU1100: Unable to resolve 'coverlet.collector (>= 1.0.1)' for '.NETCoreApp,Version=v3.1'.\r\n  Restore failed in 150.83 ms for C:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests\\NewTypesTests.csproj.\r\n```\r\n\r\n## `dotnet` information\r\n\r\n```\r\nC:\\Users\\Phillip\\Desktop\\dotNetCore\\01_NewTypes\\test\\NewTypesTests>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/sdk/issues/4156","RelatedDescription":"Closed issue \"dotNet Core SDK 3.1.100 failing to restore because of bad versions\" (#4156)"},{"Id":"548453028","IsPullRequest":false,"CreatedAt":"2020-01-11T16:54:39","Actor":"wli3","Number":"4158","RawContent":null,"Title":"C++/CLI better warning for target pack does not exist in SDK","State":"open","Body":"If build netcoreapp3.1 using master (5.0.1xx) SDK. Since C++/CLI does not support nuget, it will not download the targeting pack. And the error is just. We need a better error\r\n\r\n```\r\n\"C:\\Users\\wul\\Downloads\\BuildAssetNet---B645529A\\NETCoreCppCliTestC\\NETCoreCppCliTestC.vcxproj\" (default target) (1) ->\r\n(ResolveTargetingPackAssets target) ->\r\n  C:\\work\\sdk2\\artifacts\\bin\\Debug\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(283,5): error NETSDK1073: The FrameworkReference 'Microsoft.NETCore.App' was not recognized [C:\\Users\\wul\\Downloads\\BuildAssetNet---B645529A\\NETCoreCppCliTestC\\NETCoreCppCliTestC.vcxproj]\r\n\r\n```","Url":"https://github.com/dotnet/sdk/issues/4158","RelatedDescription":"Open issue \"C++/CLI better warning for target pack does not exist in SDK\" (#4158)"},{"Id":"547545110","IsPullRequest":false,"CreatedAt":"2020-01-11T14:35:59","Actor":"alanwest","Number":"4148","RawContent":null,"Title":"dotnet build causes InitialTargets to run multiple times","State":"closed","Body":"Steps to reproduce:\r\n\r\n1. Run\r\n```\r\nmkdir test && cd test && dotnet new classlib\r\n```\r\n\r\n2. Replace contents of `test.csproj` with:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\" InitialTargets=\"HelloWorld\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"HelloWorld\">\r\n    <Message Importance=\"high\" Text=\"Hello World\" />\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\n3. Run\r\n```\r\ndotnet build\r\n```\r\n\r\nOutput:\r\n```\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Hello World\r\n  Hello World\r\n  Restore completed in 25.71 ms for /Users/awest/test/test.csproj.\r\n  Hello World\r\n  test -> /Users/awest/test/bin/Debug/netstandard2.0/test.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.87\r\n```\r\n\r\nI would expect \"Hello World\" to be printed once.\r\n\r\n---\r\n\r\ndotnet --info\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.15\r\n OS Platform: Darwin\r\n RID:         osx.10.15-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  2.1.802 [/usr/local/share/dotnet/sdk]\r\n  2.2.106 [/usr/local/share/dotnet/sdk]\r\n  3.0.100 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.13 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.13 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n```","Url":"https://github.com/dotnet/sdk/issues/4148","RelatedDescription":"Closed issue \"dotnet build causes InitialTargets to run multiple times\" (#4148)"},{"Id":"548067310","IsPullRequest":true,"CreatedAt":"2020-01-11T14:27:04","Actor":"dotnet-maestro[bot]","Number":"4151","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: daa187e0-7e60-4c7a-c1ac-08d6354da8a8\r\n- **Build**: 20200110.4\r\n- **Date Produced**: 1/10/2020 8:51 PM\r\n- **Commit**: 384a4bfab9ea05bff33790d21cb7e1d863e4e599\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20060.4\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20060.4\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.20060.4\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4151","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4151)"},{"Id":"548362144","IsPullRequest":true,"CreatedAt":"2020-01-11T01:35:54","Actor":"MSLukeWest","Number":"4155","RawContent":null,"Title":"Updating PublishItemsOutputGroup to include the publish deps file when _UseBuildDependencyFile is false","State":"open","Body":"This is the output group that gets used with VS installer projects.  Right now we're using the wrong deps file in the case where assets are marked as excluded from publish.\r\n\r\nFor some historical context you can look at the comments in PR 3141.  At that point we didn't actually do a real publish when this output group got used so PublishDepsFilePath wasn't available to us.  But now consuming this output group using an installer project does a real publish, so we can and should use the publish version of the deps file when _UseBuildDependencyFile is false.","Url":"https://github.com/dotnet/sdk/pull/4155","RelatedDescription":"Open PR \"Updating PublishItemsOutputGroup to include the publish deps file when _UseBuildDependencyFile is false\" (#4155)"},{"Id":"548339863","IsPullRequest":true,"CreatedAt":"2020-01-10T23:33:08","Actor":"swaroop-sridhar","Number":"4154","RawContent":null,"Title":"[release/3.1.2xx] Add TFM check for `Publish-Trimmed-ReadyToRun-SingleFile`","State":"open","Body":"The options `PublishSingleFile`, `PublishReadyToRun`, and `PublishTrimmed` are only supported when targetting netcoreapp3.0 or later.\r\n\r\nTrying to publish to a different target (say `.netcoreapp2.1`) today:\r\n* `PublishSingleFile` fails with the `PlaceHolderNotFoundInAppHostException` generated by the `HostWriter`.\r\n* `PublishReadyToRun` and `PublishTrimmed` silently fail to turn on, but the `publish` itself suceeds.\r\n\r\nThis change adds an explicit TFM check to generate error/warnings for non-conforming targets.\r\n\r\n`PublishSingleFile`, requires the following conditions to be true:\r\n* `TargetFramework` is `netcoreapp`\r\n* `TargetFrameworkVersion` is at least `3.0`\r\n* The app is an executable (`OutputType=exe`)\r\nIf any of the conditions fail, build fails with an appropriate error\r\n\r\n`PublishReadyToRun`, and `PublishTrimmed` require the following conditions to be true:\r\n* `TargetFrameworkVersion` is at least `3.0`\r\nIf this condition fails, the build issue warnings, but publish itself succeeds.\r\nThe version check should ideally be a failure, but they are warnings for maximum compatibility with `3.0` release.\r\n\r\nFixes #3728","Url":"https://github.com/dotnet/sdk/pull/4154","RelatedDescription":"Open PR \"[release/3.1.2xx] Add TFM check for `Publish-Trimmed-ReadyToRun-SingleFile`\" (#4154)"},{"Id":"548330263","IsPullRequest":true,"CreatedAt":"2020-01-10T23:14:29","Actor":"swaroop-sridhar","Number":"4153","RawContent":null,"Title":"[release/3.1.2xx] Add TFM check for `Publish-Trimmed-ReadyToRun-SingleFile`","State":"closed","Body":"The options `PublishSingleFile`, `PublishReadyToRun`, and `PublishTrimmed` are only supported when targetting netcoreapp3.0 or later.\r\n\r\nTrying to publish to a different target (say `.netcoreapp2.1`) today:\r\n* `PublishSingleFile` fails with the `PlaceHolderNotFoundInAppHostException` generated by the `HostWriter`.\r\n* `PublishReadyToRun` and `PublishTrimmed` silently fail to turn on, but the `publish` itself suceeds.\r\n\r\nThis change adds an explicit TFM check to generate error/warnings for non-conforming targets.\r\n\r\n`PublishSingleFile`, `PublishReadyToRun`, and `PublishTrimmed` require the following conditions to be true:\r\n* `TargetFramework` is `netcoreapp`\r\n* `TargetFrameworkVersion` is at least `3.0`\r\n* The app is an executable (`OutputType=exe`)\r\n\r\nIf any of the conditions fail:\r\n* `PublishSingleFile` fails with an appropriate error\r\n* `PublishReadyToRun` and `PublishTrimmed` issue warnings, but publish itself succeeds.\r\n  This is because:\r\n    * The restriction against `classlibs` / `netstandard` frameworks may be relaxed in future releases\r\n    * The version check should ideally be a failure, but they are warnings for maximum compatibility with `3.0` release.\r\n\r\nFixes #3728","Url":"https://github.com/dotnet/sdk/pull/4153","RelatedDescription":"Closed or merged PR \"[release/3.1.2xx] Add TFM check for `Publish-Trimmed-ReadyToRun-SingleFile`\" (#4153)"},{"Id":"548076777","IsPullRequest":true,"CreatedAt":"2020-01-10T13:22:24","Actor":"dotnet-maestro[bot]","Number":"4152","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n## From https://github.com/dotnet/runtime\r\n- **Subscription**: ea219f43-0754-4d2f-576e-08d76e1d56cb\r\n- **Build**: 20200110.7\r\n- **Date Produced**: 1/11/2020 9:09 AM\r\n- **Commit**: ff03a08accc88651d6b4c34c23d502131b91b6c7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha.1.20060.7\r\n\r\n[marker]: <> (End:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4152","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/runtime\" (#4152)"},{"Id":"547879814","IsPullRequest":false,"CreatedAt":"2020-01-10T07:05:47","Actor":"rkeithhill","Number":"4150","RawContent":null,"Title":"dotnet test host process crashed on Ubuntu 18.04","State":"closed","Body":"We have some xUnit tests that are running fine on Windows and RedHat7.  The same tests cause a cryptic failure on Ubuntu 18.04:\r\n```\r\nUsing dotnet v3.1.100 at path /usr/bin/dotnet\r\nOutput folder set to: /home/mctcbld/builds/foo/any-PR-Ubuntu/out/Linux-x64-Release/bin\r\nBuild started 1/9/2020 8:05:38 PM.\r\nTest run for /home/mctcbld/builds/foo/any-PR-Ubuntu/out/Linux-x64-Release/bin/Foo.Api.UnitTest.dll(.NETCoreApp,Version=v3.1)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\n\r\nA total of 1 test files matched the specified pattern.\r\n[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.4.1 (64-bit .NET Core 3.1.0)\r\n[xUnit.net 00:00:00.40]   Discovering: FooApi.UnitTest\r\n[xUnit.net 00:00:00.46]   Discovered:  Foo.Api.UnitTest\r\n[xUnit.net 00:00:00.46]   Starting:    Foo.Api.UnitTest\r\nChecking for /tmp/FooApiUnitTestLicenses-es-foobuild-ub/005056901801/FOOF101-1FP.lic\r\nCopying to /home/mctcbld/builds/foo/any-PR-Ubuntu/out/Linux-x64-Release/bin/CSharpTestLicenses/FOOF101-1FP.lic\r\nSet process env var FOOTEST_LICENSE_FILE to /home/mctcbld/builds/foo/any-PR-Ubuntu/out/Linux-x64-Release/bin/CSharpTestLicenses from DesktopFooTests.cs\r\nThe active test run was aborted. Reason: Test host process crashed\r\n\r\nTest Run Aborted.\r\n\r\nBuild FAILED.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n```\r\nAs you can see, there's really no error details here.  With `LD_DEBUG=\"all\"`, I see this error show up:\r\n```\r\n      2367:     binding file /usr/share/dotnet/shared/Microsoft.NETCore.App/3.1.0/System.Native.so [0] to /lib/x86_64-linux-gnu/libc.so.6 [0]: normal symbol `ioctl' [GLIBC_2.2.5]\r\n                                                                                                                        The active test run was aborted. Reason: Test host process crashed :       2383:        symbol=chdir;  lookup in file=dotnet [0]\r\n      2383:     symbol=chdir;  lookup in file=/lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     symbol=chdir;  lookup in file=/lib/x86_64-linux-gnu/libdl.so.2 [0]\r\n      2383:     symbol=chdir;  lookup in file=/usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0]\r\n      2383:     symbol=chdir;  lookup in file=/lib/x86_64-linux-gnu/libm.so.6 [0]\r\n      2383:     symbol=chdir;  lookup in file=/lib/x86_64-linux-gnu/libgcc_s.so.1 [0]\r\n      2383:     symbol=chdir;  lookup in file=/lib/x86_64-linux-gnu/libc.so.6 [0]\r\n      2383:     binding file /usr/share/dotnet/shared/Microsoft.NETCore.App/3.1.0/System.Native.so [0] to /lib/x86_64-linux-gnu/libc.so.6 [0]: normal symbol `chdir' [GLIBC_2.2.5]\r\n      2383:     symbol=execve;  lookup in file=dotnet [0]\r\n      2383:     symbol=execve;  lookup in file=/lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     symbol=execve;  lookup in file=/lib/x86_64-linux-gnu/libdl.so.2 [0]\r\n      2383:     symbol=execve;  lookup in file=/usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0]\r\n      2383:     symbol=execve;  lookup in file=/lib/x86_64-linux-gnu/libm.so.6 [0]\r\n      2383:     symbol=execve;  lookup in file=/lib/x86_64-linux-gnu/libgcc_s.so.1 [0]\r\n      2383:     symbol=execve;  lookup in file=/lib/x86_64-linux-gnu/libc.so.6 [0]\r\n      2383:     binding file /usr/share/dotnet/shared/Microsoft.NETCore.App/3.1.0/System.Native.so [0] to /lib/x86_64-linux-gnu/libc.so.6 [0]: normal symbol `execve' [GLIBC_2.2.5]\r\n      2383:\r\n      2383:     file=libpthread.so.0 [0];  needed by /usr/share/dotnet/dotnet [0]\r\n      2383:     find library=libpthread.so.0 [0]; searching\r\n      2383:      search cache=/etc/ld.so.cache\r\n      2383:       trying file=/lib/x86_64-linux-gnu/libpthread.so.0\r\n      2383:\r\n      2383:     file=libpthread.so.0 [0];  generating link map\r\n      2383:       dynamic: 0x00007fa1eac1bd68  base: 0x00007fa1eaa02000   size: 0x000000000021e480\r\n      2383:         entry: 0x00007fa1eaa08230  phdr: 0x00007fa1eaa02040  phnum:                  9\r\n      2383:\r\n      2383:\r\n      2383:     file=libdl.so.2 [0];  needed by /usr/share/dotnet/dotnet [0]\r\n      2383:     find library=libdl.so.2 [0]; searching\r\n      2383:      search cache=/etc/ld.so.cache\r\n      2383:       trying file=/lib/x86_64-linux-gnu/libdl.so.2\r\n      2383:\r\n      2383:     file=libdl.so.2 [0];  generating link map\r\n      2383:       dynamic: 0x00007fa1eaa00d90  base: 0x00007fa1ea7fe000   size: 0x0000000000203110\r\n      2383:         entry: 0x00007fa1ea7fee50  phdr: 0x00007fa1ea7fe040  phnum:                  7\r\n      2383:\r\n      2383:\r\n      2383:     file=libstdc++.so.6 [0];  needed by /usr/share/dotnet/dotnet [0]\r\n      2383:     find library=libstdc++.so.6 [0]; searching\r\n      2383:      search cache=/etc/ld.so.cache\r\n      2383:       trying file=/usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n      2383:\r\n      2383:     file=libstdc++.so.6 [0];  generating link map\r\n      2383:       dynamic: 0x00007fa1ea7f6cc0  base: 0x00007fa1ea41e000   size: 0x00000000003df5c0\r\n      2383:         entry: 0x00007fa1ea4b7180  phdr: 0x00007fa1ea41e040  phnum:                  8\r\n      2383:\r\n      2383:\r\n      2383:     file=libm.so.6 [0];  needed by /usr/share/dotnet/dotnet [0]\r\n      2383:     find library=libm.so.6 [0]; searching\r\n      2383:      search cache=/etc/ld.so.cache\r\n      2383:       trying file=/lib/x86_64-linux-gnu/libm.so.6\r\n      2383:\r\n      2383:     file=libm.so.6 [0];  generating link map\r\n      2383:       dynamic: 0x00007fa1ea41cd90  base: 0x00007fa1ea080000   size: 0x000000000039d158\r\n      2383:         entry: 0x00007fa1ea08ba80  phdr: 0x00007fa1ea080040  phnum:                  7\r\n      2383:\r\n      2383:\r\n      2383:     file=libgcc_s.so.1 [0];  needed by /usr/share/dotnet/dotnet [0]\r\n      2383:     find library=libgcc_s.so.1 [0]; searching\r\n      2383:      search cache=/etc/ld.so.cache\r\n      2383:       trying file=/lib/x86_64-linux-gnu/libgcc_s.so.1\r\n      2383:\r\n      2383:     file=libgcc_s.so.1 [0];  generating link map\r\n      2383:       dynamic: 0x00007fa1ea07ede0  base: 0x00007fa1e9e68000   size: 0x0000000000217450\r\n      2383:         entry: 0x00007fa1e9e6ab30  phdr: 0x00007fa1e9e68040  phnum:                  7\r\n      2383:\r\n      2383:\r\n      2383:     file=libc.so.6 [0];  needed by /usr/share/dotnet/dotnet [0]\r\n      2383:     find library=libc.so.6 [0]; searching\r\n      2383:      search cache=/etc/ld.so.cache\r\n      2383:       trying file=/lib/x86_64-linux-gnu/libc.so.6\r\n      2383:\r\n      2383:     file=libc.so.6 [0];  generating link map\r\n      2383:       dynamic: 0x00007fa1e9e61b80  base: 0x00007fa1e9a77000   size: 0x00000000003f0ae0\r\n      2383:         entry: 0x00007fa1e9a98cb0  phdr: 0x00007fa1e9a77040  phnum:                 10\r\n      2383:\r\n      2383:     checking for version `GCC_3.0' in file /lib/x86_64-linux-gnu/libgcc_s.so.1 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBC_2.2.5' in file /lib/x86_64-linux-gnu/libdl.so.2 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBC_2.3' in file /lib64/ld-linux-x86-64.so.2 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBC_2.2.5' in file /lib/x86_64-linux-gnu/libpthread.so.0 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBC_2.14' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBC_2.4' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBC_2.3' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBC_2.2.5' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBCXX_3.4.9' in file /usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `CXXABI_1.3' in file /usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBCXX_3.4.11' in file /usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBCXX_3.4' in file /usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0] required by file /usr/share/dotnet/dotnet [0]\r\n      2383:     checking for version `GLIBC_2.2.5' in file /lib64/ld-linux-x86-64.so.2 [0] required by file /lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     checking for version `GLIBC_PRIVATE' in file /lib64/ld-linux-x86-64.so.2 [0] required by file /lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     checking for version `GLIBC_2.14' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     checking for version `GLIBC_2.3.2' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     checking for version `GLIBC_2.4' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     checking for version `GLIBC_2.2.5' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     checking for version `GLIBC_PRIVATE' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2383:     checking for version `GLIBC_PRIVATE' in file /lib64/ld-linux-x86-64.so.2 [0] required by file /lib/x86_64-linux-gnu/libdl.so.2 [0]\r\n      2383:     checking for version `GLIBC_PRIVATE' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /lib/x86_64-linux-gnu/libdl.so.2 [0]\r\n      2383:     checking for version `GLIBC_2.4' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /lib/x86_64-linux-gnu/libdl.so.2 [0]\r\n      2383:     checking for version `GLIBC_2.2.5' in file /lib/x86_64-linux-gnu/libc.so.6 [0] required by file /lib/x86_64-linux-gnu/libdl.so.2 [0]\r\n      2383:     checking for version `GLIBC_2.2.5' in file /lib/x86_64-linux-gnu/libm.so.6 [0] required by file /usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0]\r\n      2383:     checking for version `GLIBC_2.3' in file /lib64/ld-linux-x86-64.so.2 [0] required by file /usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0]\r\n      2383:     checking for version `GCC_4.2.0' in file\r\n      2367:     symbol=ceil;  lookup in file=/usr/share/dotnet/shared/Microsoft.NETCore.App/3.1.0/libcoreclr.so [0]\r\n      2367:     symbol=ceil;  lookup in file=dotnet [0]\r\n      2367:     symbol=ceil;  lookup in file=/lib/x86_64-linux-gnu/libpthread.so.0 [0]\r\n      2367:     symbol=ceil;  lookup in file=/lib/x86_64-linux-gnu/libdl.so.2 [0]\r\n      2367:     symbol=ceil;  lookup in file=/usr/lib/x86_64-linux-gnu/libstdc++.so.6 [0]\r\n      2367:     symbol=ceil;  lookup in file=/lib/x86_64-linux-gnu/libm.so.6 [0]\r\n      2367:     binding file /usr/share/dotnet/shared/Microsoft.NETCore.App/3.1.0/libcoreclr.so [0] to /lib/x86_64-linux-gnu/libm.so.6 [0]: normal symbol `ceil' [GLIBC_2.2.5]\r\n\r\nTest Run Aborted.\r\n```\r\nThis system has glibc 2.27 on it:\r\n```\r\n01-09 22:48:34 10> ldd --version\r\nldd (Ubuntu GLIBC 2.27-3ubuntu1) 2.27\r\n```\r\nWe did just switch from .NET Core SDK 2.2.203 to 3.1.100 and update the xUnit NuGet pkgs to:\r\n```\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.4.0\" />\r\n    <PackageReference Include=\"xunit\" Version=\"2.4.1\" />\r\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"2.4.1\">\r\n      <PrivateAssets>all</PrivateAssets>\r\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n    </PackageReference>\r\n    <PackageReference Include=\"coverlet.collector\" Version=\"1.2.0\">\r\n      <PrivateAssets>all</PrivateAssets>\r\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n    </PackageReference>\r\n```","Url":"https://github.com/dotnet/sdk/issues/4150","RelatedDescription":"Closed issue \"dotnet test host process crashed on Ubuntu 18.04\" (#4150)"},{"Id":"547769756","IsPullRequest":false,"CreatedAt":"2020-01-09T22:55:09","Actor":"wli3","Number":"4149","RawContent":null,"Title":"How to carry change from 3.1.xxx CLI and SDK to new merge master?","State":"open","Body":"Need to discuss once Daniel is back","Url":"https://github.com/dotnet/sdk/issues/4149","RelatedDescription":"Open issue \"How to carry change from 3.1.xxx CLI and SDK to new merge master?\" (#4149)"},{"Id":"547479587","IsPullRequest":true,"CreatedAt":"2020-01-09T14:57:35","Actor":"dotnet-maestro[bot]","Number":"4147","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n## From https://github.com/dotnet/runtime\r\n- **Build**: 20200108.9\r\n- **Date Produced**: 1/9/2020 7:47 AM\r\n- **Commit**: 8019c079ce8174845107e13eb4ddf3582bb10cd0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha.1.20058.9\r\n\r\n[marker]: <> (End:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4147","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4147)"},{"Id":"547111738","IsPullRequest":true,"CreatedAt":"2020-01-09T01:00:30","Actor":"wli3","Number":"4146","RawContent":null,"Title":"Fix bad merge by updating arcade","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4146","RelatedDescription":"Closed or merged PR \"Fix bad merge by updating arcade\" (#4146)"},{"Id":"545936138","IsPullRequest":false,"CreatedAt":"2020-01-08T23:02:44","Actor":"LimpingNinja","Number":"4133","RawContent":null,"Title":"Unable to dotnet restore from Manjaro linux, fresh install","State":"closed","Body":"Installed dotnet-sdk via Snap and the first thing I did was attempt to restore: \r\n\r\n/var/lib/snapd/snap/dotnet-sdk/57/sdk/3.1.100/NuGet.targets(123,5): error : Unable to load the service index for source https://api.nuget.org/v3/index.json. [path.to.sln]\r\n/var/lib/snapd/snap/dotnet-sdk/57/sdk/3.1.100/NuGet.targets(123,5): error :   The SSL connection could not be established, see inner exception. [path.to.sln]\r\n/var/lib/snapd/snap/dotnet-sdk/57/sdk/3.1.100/NuGet.targets(123,5): error :   The remote certificate is invalid according to the validation procedure. [path.to.sln]\r\n\r\nI am migrating to Manjaro from OSX and didn't have this issue, possibly related to openssl or some manual certificate management I have to do that wasn't in the install directions?","Url":"https://github.com/dotnet/sdk/issues/4133","RelatedDescription":"Closed issue \"Unable to dotnet restore from Manjaro linux, fresh install\" (#4133)"},{"Id":"546216246","IsPullRequest":false,"CreatedAt":"2020-01-08T22:45:15","Actor":"iamalexmang","Number":"4137","RawContent":null,"Title":"dotnet add package --source not imperative","State":"closed","Body":"I strongly believe that if I explicitly mention a --source parameter for the package, especially in the format of a file system path, the CLI should not try validate the package's existence on any other sources. \r\nAs of right now, when I specify the source parameter as a FS path, if either of the sources specified at the solution level, user global level (in %AppData%/NuGet) or computer level (Program Files (x86)), are unauthenticated, the package installation will fail. Regretfully, the error is completely unspecific as it complains which source returns a 401 Unauthorized error, though the package exists on the file system at the specified location.","Url":"https://github.com/dotnet/sdk/issues/4137","RelatedDescription":"Closed issue \"dotnet add package --source not imperative\" (#4137)"},{"Id":"546679518","IsPullRequest":true,"CreatedAt":"2020-01-08T21:12:02","Actor":"wli3","Number":"4141","RawContent":null,"Title":"Test CI","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4141","RelatedDescription":"Closed or merged PR \"Test CI\" (#4141)"},{"Id":"546925943","IsPullRequest":true,"CreatedAt":"2020-01-08T15:16:30","Actor":"rainersigwald","Number":"4144","RawContent":null,"Title":"Remove redundant Update attribute","State":"open","Body":"Inside a target, Update on items is ignored (microsoft/msbuild#2835).\r\n\r\nThis is harmless in this case because the update was intended to apply to\r\nall items where the condition matched, which is the same as not specifying\r\nan Update filter. But it is misleading.","Url":"https://github.com/dotnet/sdk/pull/4144","RelatedDescription":"Open PR \"Remove redundant Update attribute\" (#4144)"},{"Id":"546862150","IsPullRequest":true,"CreatedAt":"2020-01-08T14:56:55","Actor":"dotnet-maestro[bot]","Number":"4143","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n## From https://github.com/dotnet/runtime\r\n- **Build**: 20200107.6\r\n- **Date Produced**: 1/8/2020 6:38 AM\r\n- **Commit**: c07be36e3ce00b06e99d02669fd658a813cdce11\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha.1.20057.6\r\n\r\n[marker]: <> (End:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4143","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4143)"},{"Id":"546845768","IsPullRequest":true,"CreatedAt":"2020-01-08T14:32:09","Actor":"dotnet-maestro[bot]","Number":"4142","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20200107.5\r\n- **Date Produced**: 1/7/2020 8:19 PM\r\n- **Commit**: d0833c8e5e58cfc507ce3c8da364e55931190263\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20057.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20057.5\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.20057.5\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4142","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4142)"},{"Id":"546009097","IsPullRequest":true,"CreatedAt":"2020-01-08T06:47:34","Actor":"wli3","Number":"4135","RawContent":null,"Title":"Enable runtimeconfig cpp use related files inc","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/4135","RelatedDescription":"Closed or merged PR \"Enable runtimeconfig cpp use related files inc\" (#4135)"},{"Id":"546541235","IsPullRequest":false,"CreatedAt":"2020-01-07T22:26:40","Actor":"richlander","Number":"4140","RawContent":null,"Title":"dotnet test --no-restore gives no output when restore is required","State":"open","Body":"I did the following and was expecting output from `dotnet test` when restore was required but `--no-restore` was passed.\r\n\r\n```console\r\nrich@thundera ~ % dotnet --version\r\n3.1.100\r\nrich@thundera ~ % dotnet new xunit -o xunitsample\r\nGetting ready...\r\nThe template \"xUnit Test Project\" was created successfully.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on xunitsample/xunitsample.csproj...\r\n  Restore completed in 1.58 sec for /Users/rich/xunitsample/xunitsample.csproj.\r\n\r\nRestore succeeded.\r\n\r\nrich@thundera ~ % cd xunitsample \r\nrich@thundera xunitsample % dotnet test --no-restore\r\nTest run for /Users/rich/xunitsample/bin/Debug/netcoreapp3.1/xunitsample.dll(.NETCoreApp,Version=v3.1)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\n\r\nA total of 1 test files matched the specified pattern.\r\n                                                                                \r\nTest Run Successful.\r\nTotal tests: 1\r\n     Passed: 1\r\n Total time: 0.8886 Seconds\r\nrich@thundera xunitsample % rm -r bin obj\r\nrich@thundera xunitsample % dotnet test --no-restore\r\nrich@thundera xunitsample % dotnet test\r\nTest run for /Users/rich/xunitsample/bin/Debug/netcoreapp3.1/xunitsample.dll(.NETCoreApp,Version=v3.1)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\n\r\nA total of 1 test files matched the specified pattern.\r\n                                                                                \r\nTest Run Successful.\r\nTotal tests: 1\r\n     Passed: 1\r\n Total time: 0.8502 Seconds\r\nrich@thundera xunitsample % \r\n```","Url":"https://github.com/dotnet/sdk/issues/4140","RelatedDescription":"Open issue \"dotnet test --no-restore gives no output when restore is required\" (#4140)"},{"Id":"545985050","IsPullRequest":false,"CreatedAt":"2020-01-07T15:48:20","Actor":"sewalsh","Number":"4134","RawContent":null,"Title":"dotnet [application].dll fails on linux","State":"closed","Body":"This is an asp.net core api application built on OS X using the latest (3.1.0) .NET Core SDK. It runs as expected on OS X.\r\n\r\nWhen I try running it on Ubuntu (I've used both 18.04 and 19.04), I get the following error:\r\n\r\nAny ideas what may be the problem?\r\n\r\n```\r\n**dotnet --diagnostics ScorBoard.dll**\r\nTelemetry is: Enabled\r\nprojectfactory: MSBUILD_EXE_PATH = /usr/share/dotnet/sdk/3.1.100/MSBuild.dll\r\nprojectfactory: MSBuild project path =\r\nprojecttoolscommandresolver: ProjectFactory did not find Project.\r\nMicrosoft.DotNet.Cli.Utils.CommandUnknownException: Could not execute because the specified command or file was not found.\r\nPossible reasons for this include:\r\n  * You misspelled a built-in dotnet command.\r\n  * You intended to execute a .NET Core program, but dotnet-ScorBoard.dll does not exist.\r\n  * You intended to run a global tool, but a dotnet-prefixed executable with this name could not be found on the PATH.\r\n   at Microsoft.DotNet.CommandFactory.CommandFactoryUsingResolver.Create(ICommandResolverPolicy commandResolverPolicy, String commandName, IEnumerable`1 args, NuGetFramework framework, String configuration, String outputPath, String applicationName)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n```","Url":"https://github.com/dotnet/sdk/issues/4134","RelatedDescription":"Closed issue \"dotnet [application].dll fails on linux\" (#4134)"},{"Id":"546282296","IsPullRequest":true,"CreatedAt":"2020-01-07T15:12:39","Actor":"dotnet-maestro[bot]","Number":"4139","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n## From https://github.com/dotnet/runtime\r\n- **Build**: 20200106.3\r\n- **Date Produced**: 1/7/2020 1:55 AM\r\n- **Commit**: 5afe409d59460195955b85882df41df0218a18b5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha.1.20056.3\r\n\r\n[marker]: <> (End:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4139","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4139)"},{"Id":"546271319","IsPullRequest":true,"CreatedAt":"2020-01-07T14:52:28","Actor":"dotnet-maestro[bot]","Number":"4138","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20200106.6\r\n- **Date Produced**: 1/7/2020 6:39 AM\r\n- **Commit**: 5cbca575e9002cc2d9814c3471d38882df2fcc8e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20056.6\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20056.6\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.20056.6\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4138","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4138)"},{"Id":"546025752","IsPullRequest":false,"CreatedAt":"2020-01-07T01:21:19","Actor":"wli3","Number":"4136","RawContent":null,"Title":"do not read asset.json in GenerateRuntimeConfigurationFiles","State":"open","Body":"All the information is in msbuild. Read asset.json is slow","Url":"https://github.com/dotnet/sdk/issues/4136","RelatedDescription":"Open issue \"do not read asset.json in GenerateRuntimeConfigurationFiles\" (#4136)"},{"Id":"545835385","IsPullRequest":false,"CreatedAt":"2020-01-06T17:07:08","Actor":"MarcoRossignoli","Number":"4132","RawContent":null,"Title":"Sync with `dotnet test` ends","State":"open","Body":"I don't know if this is the correct repo, but I need to know if it's possible run code(maybe msbuild task) when `dotnet test solutionName.sln` ends.\r\nI'm a Coverlet co-maintainer https://github.com/tonerdo/coverlet and we've some issue with a \"merge\" feature, coverage is generated csproj base and at the end we should merge all files in one, but to do that we need to \"run\" some code at the end of all tests(at the moment the only way is to force tests to be sequential `-m:1` or run different command one for every project).\r\n\r\nIf this is not the correct repo please drive me to correct one.","Url":"https://github.com/dotnet/sdk/issues/4132","RelatedDescription":"Open issue \"Sync with `dotnet test` ends\" (#4132)"},{"Id":"545726574","IsPullRequest":true,"CreatedAt":"2020-01-06T15:24:11","Actor":"dotnet-maestro[bot]","Number":"4131","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n## From https://github.com/dotnet/runtime\r\n- **Build**: 20200105.4\r\n- **Date Produced**: 1/6/2020 6:59 AM\r\n- **Commit**: 5b968685ce89f9dddf49e9aa3aa0608820a585aa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha.1.20055.4\r\n\r\n[marker]: <> (End:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4131","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4131)"},{"Id":"545714947","IsPullRequest":true,"CreatedAt":"2020-01-06T15:07:23","Actor":"dotnet-maestro[bot]","Number":"4130","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20200105.1\r\n- **Date Produced**: 1/5/2020 2:12 PM\r\n- **Commit**: 111d78c79ac38f596688af152779d7a39e4bf973\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.20055.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.20055.1\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.20055.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4130","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#4130)"},{"Id":"545417632","IsPullRequest":true,"CreatedAt":"2020-01-05T14:22:05","Actor":"dotnet-maestro[bot]","Number":"4129","RawContent":null,"Title":"[master] Update dependencies from dotnet/runtime","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n## From https://github.com/dotnet/runtime\r\n- **Build**: 20200104.2\r\n- **Date Produced**: 1/5/2020 3:15 AM\r\n- **Commit**: b174fdce50303f7aad53022ae623b5a9629289b1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha.1.20054.2\r\n\r\n[marker]: <> (End:ea219f43-0754-4d2f-576e-08d76e1d56cb)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/4129","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/runtime\" (#4129)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"545985606","IsPullRequest":false,"CreatedAt":"2020-01-06T23:02:38","Actor":"vivmishra","Number":"147","RawContent":null,"Title":".NET Core 2.2 has reached end of life","State":"open","Body":"[.NET Core 2.2 reached end of life](https://devblogs.microsoft.com/dotnet/net-core-2-2-will-reach-end-of-life-on-december-23-2019/) on **December 23, 2019**. This means [.NET Core 2.2](https://devblogs.microsoft.com/dotnet/announcing-net-core-2-2/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 3.1](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 3.1](https://www.microsoft.com/net/download/dotnet-core/3.1)\r\n- [.NET Core 2.2 end-of-life statement](https://devblogs.microsoft.com/dotnet/net-core-2-2-will-reach-end-of-life-on-december-23-2019/)\r\n\r\nWe've created an issue at [dotnet/core#4084](https://github.com/dotnet/core/issues/4084) for your questions and comments.\r\n\r\n## .NET Core 2.2 Lifecycle\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n[.NET Core 2.2](https://devblogs.microsoft.com/dotnet/announcing-net-core-2-2/) was released in December 2018 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). **.NET Core 3.0** released in **September 2019** and began the end of life countdown for .NET Core 2.2 that concluded on December 23, 2019. \r\n\r\n## .NET Core 2.2 Downloads\r\n\r\n.NET Core 2.2 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.2, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n","Url":"https://github.com/dotnet/announcements/issues/147","RelatedDescription":"Open issue \".NET Core 2.2 has reached end of life\" (#147)"},{"Id":"541189878","IsPullRequest":false,"CreatedAt":"2019-12-20T20:42:33","Actor":"vivmishra","Number":"146","RawContent":null,"Title":"Announcing Availability of Localized IntelliSense for .NET Core 3.0 and 3.1","State":"open","Body":"This week we released localized [IntelliSense](https://docs.microsoft.com/en-us/visualstudio/ide/using-intellisense?view=vs-2019) files for .NET Core 3.0 and 3.1, in following 10 Visual Studio supported languages: \r\n- Brazilian Portuguese\r\n- Chinese (simplified)\r\n- Chinese (traditional)\r\n- French\r\n- German\r\n- Italian\r\n- Japanese\r\n- Korean\t\r\n- Russian\r\n- Spanish\r\n\r\nThe files (in zip archives) are available for download from [**Download localized .NET Core IntelliSense files**](https://dotnet.microsoft.com/download/dotnet-core/intellisense).\r\n\r\n * [Checksums for 3.0 zip files](https://dotnetcli.blob.core.windows.net/dotnet/checksums/3.0.0-intellisense-sha.txt)\r\n * [Checksums for 3.1 zip files](https://dotnetcli.blob.core.windows.net/dotnet/checksums/3.1.0-intellisense-sha.txt)\r\n\r\nYou can see [the .NET Core Guide](https://aka.ms/dotnet-core-intellisense) for instructions on how to use these files with Visual Studio.\r\n\r\nBy default, when you're developing .NET Core projects, the SDK only includes the English version of the IntelliSense files. But now you can enhance your localized Visual Studio development experience by adding the localized IntelliSense files from the download site into your local development environment.\r\n\r\nLastly, with this release we have made the localized IntelliSense available as zip archives that does require you to manually extract and copy the files to respective SDK install folders. But we plan to make this experience better in future releases.\r\n\r\n## Discussion\r\nTo discuss this issue, please comment on the corresponding issue at [dotnet/core #4032](https://github.com/dotnet/core/issues/4032).\r\n","Url":"https://github.com/dotnet/announcements/issues/146","RelatedDescription":"Open issue \"Announcing Availability of Localized IntelliSense for .NET Core 3.0 and 3.1\" (#146)"},{"Id":"536031264","IsPullRequest":false,"CreatedAt":"2019-12-10T22:29:30","Actor":"TaraOverfield","Number":"145","RawContent":null,"Title":"December 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on December 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework December 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-december-2019-security-and-quality-rollup/ )\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/145","RelatedDescription":"Open issue \"December 2019 .NET Updates\" (#145)"},{"Id":"535463424","IsPullRequest":false,"CreatedAt":"2019-12-10T03:08:33","Actor":"terrajobst","Number":"144","RawContent":null,"Title":"Removal of read-collaborator access","State":"open","Body":"***TL;DR**: We’ll remove collaborators with read-only access from our public repos on December 16th. This means some folks will lose their Collaborator badge and the ability to interact with the CI system.*\r\n\r\nOver the years, we’ve added a bunch of folks as collaborators with read permissions to our public repos. The rationale was that we wanted to be able to assign issues to community members because GitHub only allowed assigning issues to users with an explicit permission grant for the repository. However, they changed this in [June 2019](https://github.blog/2019-06-25-assign-issues-to-issue-commenters/). Now, we can assign issues to all users with explicit permissions as well as to users that have commented on the specific issue.\r\n\r\nAlso, we recently started to audit and tighten the permissions for our organizations. As a result, it became clear that large number of repo-specific permission grants are hard to review and audit. Internally, our goal is to grant all permissions via teams instead.\r\n\r\nHence, we plan to remove all collaborators from public repos that only have read permissions (folks with triage permissions will remain). The full list of affected repos is listed below.\r\n\r\nThis shouldn’t impact your ability to work with us, but losing explicit read-only has the following implications:\r\n\r\n-   **You’ll lose the collaborator badge**. We understand that this is visually appealing and for some people it might have been a badge of honor. But given that GitHub also shows a Contributor bade for folks whose PRs got merged, we don’t think it this will be a major take back.    \r\n    ![image](https://user-images.githubusercontent.com/5169960/70491508-43acf580-1ab6-11ea-94df-74ea2dde98b4.png)\r\n\r\n-   ~~**You lose the ability to interact with the CI system**. As a collaborator, you can use comments to [send commands to the CI system](https://github.com/dotnet/runtime/blob/master/docs/project/pullrequest-builds.md). While this can be useful at times, we generally don’t expect (or desire) contributors to do that. Of course, anyone can still access the CI logs.~~\r\n\r\n- **You might lose the ability to interact with the CI system**. Based on your feedback we have decided to give externals access to interact with the CI system *on a case by case basis*. If you believe you need to have that ability, please [leave a comment like Kevin's](https://github.com/dotnet/runtime/issues/718#issuecomment-563717478).\r\n\r\n| Public Repo                | \\#collaborators with read |\r\n|----------------------------|---------------------------|\r\n| arcade                     | 1                         |\r\n| BenchmarkDotNet            | 11                        |\r\n| cli                        | 2                         |\r\n| command-line-api           | 14                        |\r\n| coreclr                    | 18                        |\r\n| corefx                     | 180                       |\r\n| corefxlab                  | 4                         |\r\n| corert                     | 7                         |\r\n| core-sdk                   | 1                         |\r\n| docs                       | 3                         |\r\n| interactive-window         | 1                         |\r\n| machinelearning            | 1                         |\r\n| machinelearning-samples    | 1                         |\r\n| msbuild-language-service   | 1                         |\r\n| runtime                    | 128                       |\r\n| spark                      | 5                         |\r\n| standard                   | 1                         |\r\n| windowsdesktop             | 1                         |\r\n| winforms-datavisualization | 1                         |\r\n| Grand Total                | 381                       |\r\n\r\n### Discussion\r\n\r\nTo discuss this, please comment on the corresponding issue at https://github.com/dotnet/runtime/issues/718.","Url":"https://github.com/dotnet/announcements/issues/144","RelatedDescription":"Open issue \"Removal of read-collaborator access\" (#144)"},{"Id":"532249858","IsPullRequest":false,"CreatedAt":"2019-12-03T20:36:29","Actor":"MichaelSimons","Number":"143","RawContent":null,"Title":".NET Core `latest` Docker tags updated to 3.1","State":"open","Body":"# .NET Core `latest` Docker tags updated to 3.1\r\n\r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.1](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/).\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1511)\r\n\r\n## Details\r\n\r\n* [dotnet-docker#1509](https://github.com/dotnet/dotnet-docker/pull/1509)\r\n\r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.1. This version of .NET Core is also a [long-term supported (LTS) release](https://dotnet.microsoft.com/platform/support/policy/dotnet-core).\r\n\r\nThe following Docker repos have been updated:\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n\r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.1`.","Url":"https://github.com/dotnet/announcements/issues/143","RelatedDescription":"Open issue \".NET Core `latest` Docker tags updated to 3.1\" (#143)"},{"Id":"532163408","IsPullRequest":false,"CreatedAt":"2019-12-03T18:00:27","Actor":"leecow","Number":"142","RawContent":null,"Title":".NET Core 3.1.0","State":"open","Body":".NET Core 3.1.0 is available and https://github.com/dotnet/core/issues/3950 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/3.1.0/3.1.0.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 , either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/142","RelatedDescription":"Open issue \".NET Core 3.1.0\" (#142)"},{"Id":"523579400","IsPullRequest":false,"CreatedAt":"2019-11-15T16:51:27","Actor":"MichaelSimons","Number":"141","RawContent":null,"Title":"Windows Server, version 1803 no longer supported by .NET Framework","State":"open","Body":"# Windows Server, version 1803 no longer supported by .NET Framework\r\n\r\nWindows Server, version 1803 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for this Windows version.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #451](https://github.com/microsoft/dotnet-framework-docker/issues/451)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1803` are no longer being produced. We will not delete existing images or those tags. However, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.8`. These are tags that are supported on multiple operating systems and versions, and do not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1803, manifest tags no longer include entries for Windows 10, version 1803, and Windows Server, version 1803. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.18362-based image is incompatible with a 10.0.17134 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1803 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.8-windowsservercore-1803` or `mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-1803`.","Url":"https://github.com/dotnet/announcements/issues/141","RelatedDescription":"Open issue \"Windows Server, version 1803 no longer supported by .NET Framework\" (#141)"},{"Id":"523578215","IsPullRequest":false,"CreatedAt":"2019-11-15T16:49:04","Actor":"MichaelSimons","Number":"140","RawContent":null,"Title":"Windows Server, version 1803 no longer supported by .NET Core","State":"open","Body":"# Windows Server, version 1803 no longer supported by .NET Core\r\n\r\nWindows Server, version 1803 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Core container images for this Windows version.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1469](https://github.com/dotnet/dotnet-docker/issues/1469)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-1803` are no longer being produced. We will not delete existing images or those tags. However, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `3.0`, `3.0.0`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1803, manifest tags no longer include entries for Windows 10, version 1803, and Windows Server, version 1803. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.18362-based image is incompatible with a 10.0.17134 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server, version 1803 images (even though it is no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:3.0-nanoserver-1803`.","Url":"https://github.com/dotnet/announcements/issues/140","RelatedDescription":"Open issue \"Windows Server, version 1803 no longer supported by .NET Core\" (#140)"},{"Id":"522994983","IsPullRequest":false,"CreatedAt":"2019-11-14T17:15:08","Actor":"leecow","Number":"139","RawContent":null,"Title":".NET Core 3.1.0 Preview 3","State":"open","Body":".NET Core 3.1.0 Preview 3 is available and https://github.com/dotnet/core/issues/3809 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview3.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-3/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-3/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 3, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues\r\n","Url":"https://github.com/dotnet/announcements/issues/139","RelatedDescription":"Open issue \".NET Core 3.1.0 Preview 3\" (#139)"},{"Id":"522864668","IsPullRequest":false,"CreatedAt":"2019-11-14T13:37:28","Actor":"TaraOverfield","Number":"138","RawContent":null,"Title":"November 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on November 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework November 13, 2019, Update for .NET Framework 4.8](https://devblogs.microsoft.com/dotnet/net-framework-november-13-2019-update-for-net-framework-4-8/)\r\n* [.NET Framework November 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-november-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.14 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.14/2.1.14.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.8/2.2.8.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\n* .NET Core 3.0.1 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/3.0.1/3.0.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/3.0) )\r\n\r\nA discussion issue is available at [core/3848](https://github.com/dotnet/core/issues/3848)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/138","RelatedDescription":"Open issue \"November 2019 .NET Updates\" (#138)"},{"Id":"522488807","IsPullRequest":false,"CreatedAt":"2019-11-13T21:41:06","Actor":"MichaelSimons","Number":"137","RawContent":null,"Title":".NET Framework Docker images support for Windows Server, version 1909","State":"open","Body":"# .NET Framework Docker images support for Windows Server, version 1909\r\n\r\nWith the release of Windows Server, version 1909 on November 11, 2019, .NET Framework Docker images have been published for Server Core, version 1909.  \r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n* [dotnet-framework-docker#448](https://github.com/microsoft/dotnet-framework-docker/issues/448)\r\n\r\n## Details \r\n\r\n* [dotnet-framework-docker#447](https://github.com/microsoft/dotnet-framework-docker/pull/447) \r\n\r\n.NET Framework tags containing the substring `windowsservercore-1909` are now available. You can find the full set of tags on [Docker Hub](https://hub.docker.com/_/microsoft-dotnet-framework). \r\n\r\n.NET Framework multi-arch tags, such as `4.8`, have been updated to use `windowsservercore-1909` images if your host is Windows Server 1909 or higher. \r\n\r\n### Impacted Repos \r\n\r\n* [dotnet/framework/sdk](https://hub.docker.com/_/microsoft-dotnet-framework-sdk/): .NET Framework SDK \r\n* [dotnet/framework/aspnet](https://hub.docker.com/_/microsoft-dotnet-framework-aspnet/): ASP.NET Runtime  \r\n* [dotnet/framework/wcf](https://hub.docker.com/_/microsoft-dotnet-framework-aspnet/): Windows Communication Foundation \r\n* [dotnet/framework/runtime](https://hub.docker.com/_/microsoft-dotnet-framework-runtime/): .NET Framework Runtime\r\n* [dotnet/framework/samples](https://hub.docker.com/_/microsoft-dotnet-framework-samples/): .NET Framework Samples\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/137","RelatedDescription":"Open issue \".NET Framework Docker images support for Windows Server, version 1909\" (#137)"},{"Id":"521830642","IsPullRequest":false,"CreatedAt":"2019-11-12T22:05:51","Actor":"MichaelSimons","Number":"136","RawContent":null,"Title":".NET Core Docker images support for Windows Server, version 1909","State":"open","Body":"# .NET Core Docker images support for Windows Server, version 1909\r\n\r\nWith the release of Windows Server, version 1909 on November 11, 2019, .NET Core Docker images have been published for Nano Server, version 1909. \r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n* [dotnet-docker#1460](https://github.com/dotnet/dotnet-docker/issues/1460)\r\n## Details\r\n\r\n* [dotnet-docker#1457](https://github.com/dotnet/dotnet-docker/pull/1457)\r\n\r\n.NET Core tags containing the substring `nanoserver-1909` are now available. You can find the full set of tags on [Docker Hub](https://hub.docker.com/_/microsoft-dotnet-core).\r\n\r\n.NET Core multi-arch tags, such as `3.0`, have been updated to use `nanoserver-1909` images if your host is Windows Server 1909 or higher.\r\n\r\n### Impacted Repos\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk/): .NET Core SDK\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet/): ASP.NET Core Runtime\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime/): .NET Core Runtime\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples/): .NET Core Samples\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/136","RelatedDescription":"Open issue \".NET Core Docker images support for Windows Server, version 1909\" (#136)"},{"Id":"520243813","IsPullRequest":false,"CreatedAt":"2019-11-08T21:33:12","Actor":"CESARDELATORRE","Number":"135","RawContent":null,"Title":"Announcing ML.NET 1.4 general availability (Machine Learning for .NET)","State":"open","Body":"This week (coinciding with Microsoft Ignite 2019) we announced the release of **ML.NET 1.4 GA**. \r\nThere are many new features such as:\r\n\r\n- **New Deep Learning Image Classifier (GA):** GPU support for training and inference Image Classifier ML models.\r\n\r\n- **Database Loader  (GA):** You can train your model with data directly from any relational database supported by System.Data.\r\n\r\n- **Enhanced for .NET Core 3.0  (GA):** Performance improvements thanks to hardware intrinsics feature in .NET Core 3.0.\r\n\r\n- **PredictionEnginePool for scalable deployments (GA):** Recommended approach for multi-threaded scalable apps such as ASP.NET Core apps/services and Azure Functions\r\n\r\n- **ML.NET and .NET support in Jupyter notebooks:**  You can now run any .NET code (C# / F#) in Jupyter notebooks and therefore run ML.NET code in it as well. Great for exploring and documenting model training experiments, data distribution exploration, data cleaning, plotting data charts, learning scenarios such as ML.NET courses, hands-on-labs and quizzes, etc.\r\n\r\nSee details in the following **Blog Posts**:\r\n\r\n- [Announcing ML.NET 1.4 general availability (Machine Learning for .NET)](https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-4-global-availability-machine-learning-for-net/)\r\n\r\n- [Using ML.NET in Jupyter notebooks](https://devblogs.microsoft.com/cesardelatorre/using-ml-net-in-jupyter-notebooks/)\r\n\r\n- [.NET Core with Jupyter Notebooks](https://devblogs.microsoft.com/dotnet/net-core-with-juypter-notebooks-is-here-preview-1/)\r\n","Url":"https://github.com/dotnet/announcements/issues/135","RelatedDescription":"Open issue \"Announcing ML.NET 1.4 general availability (Machine Learning for .NET)\" (#135)"},{"Id":"517169249","IsPullRequest":false,"CreatedAt":"2019-11-04T13:57:09","Actor":"leecow","Number":"134","RawContent":null,"Title":".NET Core 3.1.0 Preview 2","State":"open","Body":".NET Core 3.1.0 Preview 2 is available and https://github.com/dotnet/core/issues/3744 has been opened for discussion.\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview2.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-2/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-2/)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 2, either responding to https://github.com/dotnet/core/issues/3744, creating a new issue or creating a new issue in one of the following repos:\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/134","RelatedDescription":"Open issue \".NET Core 3.1.0 Preview 2\" (#134)"},{"Id":"514753283","IsPullRequest":false,"CreatedAt":"2019-10-30T15:14:43","Actor":"jaredpar","Number":"133","RawContent":null,"Title":"Repository Consolidation Timeline","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27549.*\r\n\r\nAs we [announced](https://github.com/dotnet/announcements/issues/119) [earlier](https://github.com/dotnet/announcements/issues/127) we are planning on consolidating some of the repositories in the dotnet org. Our planning has reached a point where we have a schedule for the coreclr, corefx and core-setupmoves into dotnet/runtime that we want to share out with the community.\r\n\r\n### November 13th\r\nWe’ll move all changes from the original repositories into dotnet/runtime up to 5PM PST on November 13th. We’ll try to help as many pull requests as possible get merged by then. At that point, if there’s any pull requests still open we’ll have to close them. If you’d still like to continue those pull requests, we’d encourage you to bring them to dotnet/runtime in a new pull request.\r\n\r\nThe repositories themselves will be effectively archived at this point. The state of the “master” branch will be recorded with a tag, named “master-archive”, but the branch itself will be deleted. The default branch for the repositories will be named “archive” and it will be a single commit with a README.md and CONTRIBUTING.md file pointing to our dotnet/runtime repository.\r\n\r\nThe repositories will remain active for servicing changes to .NET Core 3.1 and earlier hence we will not be using the GitHub archive capability. \r\n\r\n### November 22nd\r\nThe dotnet/runtime repository will be made public and available for community contribution. Even though the repository will be created on November 13th it will take several days to get it back into a working order: fixing up our build scripts, recreating our Azure Dev Ops build definitions, etc … Until those tasks are completed it will not be possible to accept pull request and hence the repository will remain private. Once we are in a state that pull requests can be merged again the repository will be made public.\r\n\r\nOur expectation is that will occur on November 22nd. If it is ready sooner it will be made public sooner. If the work takes longer than we planned then we will add an update to this announcement with a new expected date.\r\n\r\n### December 1st-2nd\r\nAll issues, open and closed, will be migrated from corefx, coreclr and core-setup into dotnet/runtime. This will be using GitHub’s existing issue transfer feature in a bulk migration. This means all of the existing issue links will continue to function via redirects.\r\n\r\nThis does mean though that labels will not transfer with the issues. Labels will be re-applied as a post processing step by our engineering team once the issue migration completes.\r\n\r\nEven though our issues won’t be fully migrated until this time we’d like the community to begin filing issues on dotnet/runtime as soon as it’s public rather than continuing to file issues on the original repositories.\r\n\r\n### Migrating Commits\r\nThe dotnet/runtime repository will be a new commit history from the original repositories. We are using this consolidation as an opportunity to clean up our history with the goal of having a cleaner, smaller history as a starting point. This means commits will be rewritten in the following ways as they are migrated to dotnet/runtime:\r\n\r\n1. Author information, contributor information, changed file list and time stamps from the original commit will be preserved.\r\n1. Links to issues, pull requests or commits in the repository using GitHub short links will be rewritten so they continue to point the original repository. \r\n1. Every commit will be appended with a link to the original commit it was mapped from.\r\n\r\nThe actual contents of the commit though will be updated to match the new directory layout of the dotnet/runtime repository.","Url":"https://github.com/dotnet/announcements/issues/133","RelatedDescription":"Open issue \"Repository Consolidation Timeline\" (#133)"},{"Id":"513963125","IsPullRequest":false,"CreatedAt":"2019-10-29T14:32:55","Actor":"mthalman","Number":"132","RawContent":null,"Title":"Release of Alpine 3.10 Docker images","State":"open","Body":"# .NET Core Alpine Docker images updated to Alpine 3.10\r\n\r\nDocker images for .NET Core have been released that support Alpine 3.10.  Included with this release, the floating tags for Alpine-based images have been moved from Alpine 3.9 to 3.10.  \r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n[dotnet/dotnet-docker#1418](https://github.com/dotnet/dotnet-docker/issues/1418)\r\n\r\n## Details\r\n* [dotnet/dotnet-docker#1415](https://github.com/dotnet/dotnet-docker/pull/1415)\r\n\r\nIf you made use of a floating tag for Alpine, such as `3.0-alpine`, `2.2-alpine`, and `2.1-alpine`, these have been changed to now reference Alpine 3.10 instead of Alpine 3.9.  Be sure to pull this tag on your Docker machine to get the latest image.\r\n\r\nThe following Docker repos have been updated:\r\n\r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)","Url":"https://github.com/dotnet/announcements/issues/132","RelatedDescription":"Open issue \"Release of Alpine 3.10 Docker images\" (#132)"},{"Id":"508132491","IsPullRequest":false,"CreatedAt":"2019-10-16T22:28:29","Actor":"leecow","Number":"131","RawContent":null,"Title":".NET Core 3.1.0 Preview 1","State":"open","Body":".NET Core 3.1.0 Preview 1 is available and https://github.com/dotnet/core/issues/3634 has been opened for discussion.\r\n\r\n**Blog round up**\r\n* [.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1-preview-1/)\r\n* [ASP.NET Core and Blazor](https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-1-preview-1/)\r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.1/preview/3.1.0-preview1.md)\r\n[Download](https://dotnet.microsoft.com/download/dotnet-core/3.1)\r\n\r\nPlease report any issues you find with .NET Core 3.1 Preview 1, either responding to https://github.com/dotnet/core/issues/3634, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues\r\n","Url":"https://github.com/dotnet/announcements/issues/131","RelatedDescription":"Open issue \".NET Core 3.1.0 Preview 1\" (#131)"},{"Id":"506832844","IsPullRequest":false,"CreatedAt":"2019-10-14T19:26:10","Actor":"terrajobst","Number":"130","RawContent":null,"Title":".NET Core 3.0 concludes the .NET Framework API porting project","State":"open","Body":"We started in .NET Core 1.0 with a very minimal API set that only included \\~18K of the .NET Framework APIs. With [.NET Standard 2.0](https://devblogs.microsoft.com/dotnet/announcing-net-standard-2-0/), we tried to make it much more viable to share code between .NET Framework, .NET Core, and Xamarin which resulted in approximately 38K .NET Frameworks APIs being available in .NET Core 2.0. We also built the [Windows Compatibility Pack](https://devblogs.microsoft.com/dotnet/announcing-the-windows-compatibility-pack-for-net-core/) which made another 21K .NET Framework APIs available to .NET Core, resulting in almost 60K additional APIs. And in .NET Core 3.0 we added WPF and WinForms, which increased the number of .NET Framework APIs ported to .NET Core to over 120k, which is more than half of all .NET Framework APIs.\r\n\r\nIt’s also worth pointing out that we added about 62K APIs to .NET Core that don’t exist in .NET Framework. If we compare their total number of APIs, .NET Core has about 80% of the API surface of .NET Framework.\r\n\r\n<p align=\"center\">\r\n<img src=\"https://user-images.githubusercontent.com/5169960/66777114-f8db7c80-ee7c-11e9-9161-acfe1c491586.png\" width=\"600\" align=\"center\">\r\n</p>\r\n\r\nWe announced that the [future of .NET](https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/) will be based on .NET Core. And at Build 2019, [Scott Hunter stated](https://www.youtube.com/watch?v=ZlO1utbB2GQ&t=54m20s) that AppDomains, remoting, Web Forms, WCF server, and Windows Workflow won’t be ported to .NET Core.\r\n\r\nWith .NET Core 3.0, we’re at the point where we’ve ported all technologies that are required for modern workloads, be that desktop apps, mobile apps, console apps, web sites, or cloud services. That’s not to say that we don’t have any gaps or opportunities for new technologies, but we generally believe we won’t be finding them in the .NET Framework code base anymore. Moving forward, we’re focusing our resources on incorporating new technologies.\r\n\r\nSimultaneously, we’re looking into releasing more of the [.NET Framework code base under the MIT license](https://github.com/microsoft/referencesource) on GitHub to allow the community to create OSS projects for technologies we’re not intending to bring to .NET Core. For example, there already are community projects for [CoreWF](https://github.com/UiPath/corewf) and [CoreWCF](https://github.com/CoreWCF/CoreWCF).\r\n\r\nWe’d like to thank everyone who filed issues with requests for APIs being ported. Those issues allowed us to prioritize and close the gaps that prevented people from porting to .NET Core.\r\n\r\nBut since we generally no longer plan to bring existing technologies from .NET Framework to .NET Core we’ll be closing all issues that are [labeled with port-to-core](https://github.com/dotnet/corefx/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3Aport-to-core).\r\n\r\n### Discussion\r\n\r\nTo discuss this issue, please comment on the corresponding issue at https://github.com/dotnet/corefx/issues/41769.","Url":"https://github.com/dotnet/announcements/issues/130","RelatedDescription":"Open issue \".NET Core 3.0 concludes the .NET Framework API porting project\" (#130)"},{"Id":"505445666","IsPullRequest":false,"CreatedAt":"2019-10-10T18:45:56","Actor":"TaraOverfield","Number":"129","RawContent":null,"Title":"October 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on October 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework October 2019 Cumulative Update for Windows 10 version 1903 and version 1909](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-cumulative-updates-windows-10-version-1903-and-windows-10-version-1909/)\r\n* [.NET Framework October 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-preview-of-quality-rollup/)\r\n* [.NET Framework October 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/129","RelatedDescription":"Open issue \"October 2019 .NET Updates\" (#129)"},{"Id":"505328689","IsPullRequest":false,"CreatedAt":"2019-10-10T15:19:53","Actor":"carloreggiani","Number":"128","RawContent":null,"Title":"Docker Stop return status Exited \"(3221225786)\"","State":"closed","Body":"Hi\r\nI'm investigating a issue regarding official MCR images on a Win2019 server with Docker EE engine 19.03.2.\r\n\r\nThe images that I'm unsing are:\r\nmcr.microsoft.com/windows/servercore:1809\r\nmcr.microsoft.com/dotnet/framework/aspnet:4.8\r\n\r\nStopping containers based on these images (\"docker stop\" command) I'm getting: \r\n\"Exited (3221225786)\"\r\n\r\nOn linux a stop command normally return: \"Exited (137)\"\r\n\r\nIs it a normal behaviour? What's means 3221225786?\r\n\r\nThanks for any support\r\n\r\nCarlo","Url":"https://github.com/dotnet/announcements/issues/128","RelatedDescription":"Closed issue \"Docker Stop return status Exited \"(3221225786)\"\" (#128)"},{"Id":"504325600","IsPullRequest":false,"CreatedAt":"2019-10-08T23:14:11","Actor":"terrajobst","Number":"127","RawContent":null,"Title":"Consolidated repo names","State":"open","Body":"[ann]: https://github.com/dotnet/announcements/issues/119\r\n\r\nAs we announced earlier, we're [planning on consolidating][ann] some of the repositories in the dotnet org. While this is still work in progress, we'd like to give you an update on where we are.\r\n\r\nSo far, we've identified the following repos:\r\n\r\n* dotnet/**runtime**\r\n\t- Will contain [coreclr](https://github.com/dotnet/coreclr), [corefx](https://github.com/dotnet/corefx), [core-setup](https://github.com/dotnet/core-setup), [aspnet/Extensions](https://github.com/aspnet/Extensions), and some of [mono/mono](https://github.com/mono/mono)\r\n* [dotnet/**sdk**](https://github.com/dotnet/sdk)\r\n\t- Will contain [toolset](https://github.com/dotnet/toolset), [sdk](https://github.com/dotnet/sdk), [cli](https://github.com/dotnet/cli)\r\n* dotnet/**installer**\r\n\t- Renamed from [core-sdk](https://github.com/dotnet/core-sdk)\r\n* dotnet/**aspnetcore**\r\n\t- Moved from [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) and will also contain [aspnet/AspNetCore-Tooling](https://github.com/aspnet/AspNetCore-Tooling)\r\n* dotnet/**efcore**\r\n\t- Moved from [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore)\r\n* [dotnet/**winforms**](https://github.com/dotnet/winforms)\r\n\t- Unchanged, but listed for clarity \r\n* [dotnet/**wpf**](https://github.com/dotnet/wpf)\r\n\t- Unchanged, but listed for clarity\r\n\r\n### Name changes\r\n\r\nYou might notice that we changed our mind on naming from our [earlier announcement][ann]. Based on your feedback, we decided to go with **dotnet/runtime** instead of **dotnet/platform** and **dotnet/sdk** instead of **dotnet/cli**.\r\n\r\nSeveral people pointed out that the previous names weren't relatable to how we talk about the product, for example on download pages. So, we decided to match the product distributions as the primary design point for the new names. We generally refer to the bits you need to run your app as *the runtime* and the bits you need to build apps as *the SDK*. This also matches the naming chosen by other platforms.\r\n\r\n### New repos can't be used for .NET Core 3.x or earlier\r\n\r\nThe consolidated repositories are going to be about .NET 5 and going forward. It will not be possible to build .NET Core 3.1 or earlier from these repositories. As such, only the master branch from each of the repositories will be brought forward. There will be no porting of the individual release branches in the source repositories.\r\n\r\n### Personal names and email addresses\r\n\r\nSince we're planning on rebasing the history in the merged repositories, we can map your name and email address to new values as well. We primarily do this to support our friends in the LGBTQ+ community who have changed their names to reflect their identities. However, anybody is welcome to use this to change their email and name.\r\n\r\nWhatever your reason might be: we value your contributions and we hope this small gesture makes your life a little bit better. So if you changed your name/email – or simply prefer us to use different values – please [submit a request](mailto:dotnet@microsoft.com&subject=.NET%20repo%20consolidation%3A%20request%20for%20name%20change&body=Hey%2C%20%0A%0AI%E2%80%99d%20like%20to%20change%20my%20email%2Fdisplay%20name%20in%20the%20consolidated%20repo%20from%20%0A%0A%20%20%20%20%20%20%20%20My%20Old%20Name%20%3Cold.me%40example.org%3E%20%0A%0Ato%20%0A%0A%20%20%20%20%20%20%20%20My%20New%20Name%20%3Cnew.me%40example.org%3E%20%0A%0AThanks%21%20%0A).\r\n\r\n### More is coming\r\n\r\nWe'll share more updates in the upcoming months. Please let us know of any concerns that we haven't addressed yet!\r\n\r\n### Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27096.","Url":"https://github.com/dotnet/announcements/issues/127","RelatedDescription":"Open issue \"Consolidated repo names\" (#127)"},{"Id":"504304108","IsPullRequest":false,"CreatedAt":"2019-10-08T22:06:07","Actor":"MichaelSimons","Number":"126","RawContent":null,"Title":"4.7.x .NET Framework SDK Docker images no longer published","State":"open","Body":"# 4.7.x .NET Framework SDK Docker images no longer published\r\n\r\nThe [4.7.x .NET Framework SDK Docker images](https://hub.docker.com/_/microsoft-dotnet-framework-sdk) will no longer be published after Oct. 8, 2019.  The 4.8 image tags should be used as a replacement.\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [microsoft/dotnet-framework-docker#428](https://github.com/microsoft/dotnet-framework-docker/issues/428)\r\n\r\n## Details\r\n\r\nAny references to the following SDK tags should be updated to reference `4.8` instead:\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2019`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2019`\r\n\r\nIf you haven't migrated to using images from [MCR](https://github.com/dotnet/announcements/issues/101) and are still using the .NET Framework repos on Docker Hub, you will need to update your tag references to MCR.  This is because the 4.8 images only exist on MCR.  These are the following Docker Hub tags that are affected and should be updated to reference the [4.8 tags at the MCR location](https://hub.docker.com/_/microsoft-dotnet-framework-sdk):\r\n* `microsoft/dotnet-framework:4.7.1-sdk`\r\n* `microsoft/dotnet-framework:4.7.1-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-1803`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019`","Url":"https://github.com/dotnet/announcements/issues/126","RelatedDescription":"Open issue \"4.7.x .NET Framework SDK Docker images no longer published\" (#126)"},{"Id":"502102886","IsPullRequest":false,"CreatedAt":"2019-10-03T14:30:16","Actor":"MichaelSimons","Number":"125","RawContent":null,"Title":"Alpine Docker images no longer include the tzdata package in 3.0","State":"open","Body":"# Alpine Docker images no longer include the tzdata package in 3.0\r\nBeginning with the 3.0 release, the `tzdata` package has been removed from all Alpine Docker images.\r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\ndotnet/dotnet-docker#1366\r\n\r\n## Details\r\n* https://github.com/dotnet/dotnet-docker/pull/1312\r\n\r\n\r\nThis package was removed because it wasn't required for the main set of scenarios and to have consistency between the runtime-deps images across all Linux distros.  This package is still installed in the 2.x images for Alpine so this will be something to be aware of when migrating from 2.x to 3.0.\r\n\r\n\r\nYou may be impacted by this if you use any of the Alpine images and your code has a dependency on the `tzdata` package, such as using the `System.TimeZoneInfo` API.  In that case, you'll need to update your Dockerfile to explicitly install the package:\r\n```\r\nRUN apk add --no-cache tzdata\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/125","RelatedDescription":"Open issue \"Alpine Docker images no longer include the tzdata package in 3.0\" (#125)"},{"Id":"497868605","IsPullRequest":false,"CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Number":"124","RawContent":null,"Title":".NET Core `latest` Docker tags updated to 3.0","State":"open","Body":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n","Url":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Open issue \".NET Core `latest` Docker tags updated to 3.0\" (#124)"},{"Id":"494223006","IsPullRequest":false,"CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Number":"123","RawContent":null,"Title":".NET Core 3.0 RC 1","State":"open","Body":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Open issue \".NET Core 3.0 RC 1\" (#123)"},{"Id":"491801748","IsPullRequest":false,"CreatedAt":"2019-09-10T17:23:20","Actor":"leecow","Number":"122","RawContent":null,"Title":"September 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework September 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-september-2019-security-and-quality-rollup/)\r\n* [.NET Framework September 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-september-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Open issue \"September 2019 .NET Updates\" (#122)"},{"Id":"491794046","IsPullRequest":false,"CreatedAt":"2019-09-10T17:04:46","Actor":"blowdart","Number":"121","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core","State":"open","Body":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/121\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.6\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.7, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\nV1.1 (September 10, 2019): Fix version numbers\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-09-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121)"},{"Id":"489344106","IsPullRequest":false,"CreatedAt":"2019-09-04T19:14:05","Actor":"leecow","Number":"120","RawContent":null,"Title":".NET Core 3.0 Preview 9","State":"open","Body":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Open issue \".NET Core 3.0 Preview 9\" (#120)"},{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1216069017552805890","CreatedAt":"2020-01-11T18:47:01+00:00","UserScreenname":"dotnet","Text":"T-Minus 3 days to #dotNETConf!\n\nSet your calendar so you don't miss @aVerySpicyBoi's session on scaling #Blazor ser… https://t.co/sLHIoY8eSa","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":45,"FavoriteCount":18,"RawContent":null},{"Id":"1215736827996463106","CreatedAt":"2020-01-10T20:47:01+00:00","UserScreenname":"dotnet","Text":"The #dotNETConf Focus on #Blazor event is T-Minus 4 days away - and in one of the awesome sessions, @CSharpFritz\nsh… https://t.co/nttXwkALeN","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":45,"FavoriteCount":24,"RawContent":null},{"Id":"1215673914304729090","CreatedAt":"2020-01-10T16:37:01+00:00","UserScreenname":"dotnet","Text":"An aspect of async/await that continues to draw questions is ConfigureAwait. \n\nIn this post, we get answers to the… https://t.co/Nm3xeMg8br","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":250,"FavoriteCount":102,"RawContent":null},{"Id":"1215395582463877124","CreatedAt":"2020-01-09T22:11:02+00:00","UserScreenname":"dotnet","Text":"The #dotNETConf Focus on #Blazor 🔥 event is just a few days away... @rogreen_ms &amp; @danroth27 spread the excitement… https://t.co/PByPCTq7kq","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":90,"FavoriteCount":44,"RawContent":null},{"Id":"1215332548919717889","CreatedAt":"2020-01-09T18:00:34+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":16,"FavoriteCount":4,"RawContent":null},{"Id":"1215307753180291072","CreatedAt":"2020-01-09T16:22:02+00:00","UserScreenname":"dotnet","Text":"🌟 @MairaCW and @CecilPhillip quickly show you how to use discards in #CSharp. Watch here: https://t.co/Y7eMK9wdkx https://t.co/DVPKby2lj1","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":27,"FavoriteCount":5,"RawContent":null},{"Id":"1215026649923764224","CreatedAt":"2020-01-08T21:45:02+00:00","UserScreenname":"dotnet","Text":"Today's #AzureDevOps podcast w/ @KathleenDollard highlights key pieces listeners should consider when diving into t… https://t.co/MdHdnUd7kA","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":25,"FavoriteCount":4,"RawContent":null},{"Id":"1214945126725935105","CreatedAt":"2020-01-08T16:21:05+00:00","UserScreenname":"dotnet","Text":"It's less than a week away! #dotNETConf kicks off Jan 14 with tons of great sessions to inspire app development for… https://t.co/7Mg0cma577","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":59,"FavoriteCount":18,"RawContent":null},{"Id":"1214653254447095809","CreatedAt":"2020-01-07T21:01:17+00:00","UserScreenname":"dotnet","Text":"#dotNETConf kicks off Jan 14 with tons of great sessions to inspire app dev for the new 🎊 year.  🎉 \n\n...AND you won… https://t.co/6scTueNX7S","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":50,"FavoriteCount":28,"RawContent":null},{"Id":"1214297091306065927","CreatedAt":"2020-01-06T21:26:01+00:00","UserScreenname":"dotnet","Text":"In today's On #dotNET, @MairaCW and @gotheap teach us how to make use of discards in #CSharp. Watch here:… https://t.co/N3qXH0Cyr9","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":62,"FavoriteCount":20,"RawContent":null},{"Id":"1214232167989035011","CreatedAt":"2020-01-06T17:08:02+00:00","UserScreenname":"dotnet","Text":"#dotNETConf is on its way. Tune in Jan 14 for @ADefWebserver's session on handling authentication for Google, Micro… https://t.co/euGWEnBtQP","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":32,"FavoriteCount":10,"RawContent":null},{"Id":"1214184845267677184","CreatedAt":"2020-01-06T14:00:00+00:00","UserScreenname":"dotnet","Text":"There are many options you could use for messaging in @Azure 🤷🏾‍♂️ \n\nIn this episode of  #OnDotNet @ashishc1 talks… https://t.co/LO3JudQJe5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":53,"FavoriteCount":24,"RawContent":null},{"Id":"1213215970409488384","CreatedAt":"2020-01-03T21:50:02+00:00","UserScreenname":"dotnet","Text":"Coming in just 11 days... #dotNETConf focuses on #Blazor. \n\nTune in for @EdCharbeneau's session on authoring custom… https://t.co/41gbzcXC2U","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":92,"FavoriteCount":30,"RawContent":null},{"Id":"1213145250530770944","CreatedAt":"2020-01-03T17:09:01+00:00","UserScreenname":"dotnet","Text":"Premier Developer Consultant Randy Patterson discusses the benefits of using the new Worker Service project templat… https://t.co/vo5HZt281T","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":100,"FavoriteCount":29,"RawContent":null}]}},"RunOn":"2020-01-12T05:30:39.5499279Z","RunDurationInMilliseconds":16373}