{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin at Local Developer Events this October","PublishedOn":"2017-09-29T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We&#8217;re at the height of conference season, and that means tons of new and exciting releases, tooling, and updates to talk about with your local developer community! Mobile .NET developer conferences and meetups are the perfect opportunities to learn the latest on Xamarin and related technologies while networking with other developers. Below are just a [&#8230;]","Href":"https://blog.xamarin.com/xamarin-at-local-developer-events-this-october/","RawContent":null},{"Title":"Xamarin.Forms Stable Comes to .NET Standard 2.0","PublishedOn":"2017-09-28T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are thrilled to share our latest stable release of Xamarin.Forms, version 2.4.0. This is our fastest, most stable release ever and we think you’re going to love it! Xamarin.Forms 2.4.0 Highlights You’ll recognize many of these highlights as shared in our public roadmap, in addition to more than 150 bug fixes. .NET Standard [&#8230;]","Href":"https://blog.xamarin.com/xamarin-forms-stable-comes-to-net-standard-2-0/","RawContent":null},{"Title":"Webinar Recording | Exploring UrhoSharp 3D with Xamarin Workbooks Webinar","PublishedOn":"2017-09-27T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Folllow along with Charles Petzold as he builds a 3D app from the ground up with UrhoSharp and Xamarin Workbooks in this webinar recording. UrhoSharp is a powerful, high performance 3D graphics engine suitable for games, animation, and data visualization. Used together, UrhoSharp and Xamarin Workbooks give developers a streamlined way to get started with [&#8230;]","Href":"https://blog.xamarin.com/webinar-recording-exploring-urhosharp-3d-with-xamarin-workbooks-webinar/","RawContent":null},{"Title":"3 Reasons to Try Xamarin Previews in Visual Studio 2017","PublishedOn":"2017-09-26T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Previews are a great way to try the latest-and-greatest in mobile development, from the new Xamarin Live Player that allows you to instantly visualize your XAML-based user interface as you type, to support for new SDKs like Android Oreo or iOS 11. Then arises the great dilemma: how do I try all the awesome stuff [&#8230;]","Href":"https://blog.xamarin.com/3-reasons-to-try-visual-studio-2017-version-15-4-previews/","RawContent":null},{"Title":"ActivityTask: A Helper for Async/Await on Android","PublishedOn":"2017-09-25T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Google I/O, several members of the Xamarin team attended the Architecture Component talk on Android lifecycle (which I recommend you watch). While the solutions presented there are interesting and, in some cases, map to patterns we already have in .NET, it resonated with those of us present because of how those Android lifecycle details [&#8230;]","Href":"https://blog.xamarin.com/activitytask-helper-asyncawait-android/","RawContent":null},{"Title":"Podcast: Android Oreo, iOS 11, and Xamarin.Forms Tips & Tricks","PublishedOn":"2017-09-22T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I cover Xamarin support for Android Oreo and iOS 11, share tips for beating the learning curve with Xamarin.Forms, talk upcoming releases in the pipeline, and more! Be sure to download today&#8217;s episode from your favorite podcasting app. Subscribe or Download Today Keeping up with [&#8230;]","Href":"https://blog.xamarin.com/podcast-android-oreo-ios-11-xamarin-forms-tips-tricks/","RawContent":null},{"Title":"Protecting Your Xamarin Apps with Dotfuscator","PublishedOn":"2017-09-20T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a special guest post from Joe Sewell, a developer on the Dotfuscator team at PreEmptive Solutions. Let&#8217;s be honest, releasing a library, desktop app, or mobile app can be a bit scary. Once your software is freely available to the world, you lose a certain degree of control over how it will be [&#8230;]","Href":"https://blog.xamarin.com/protecting-xamarin-apps-dotfuscator/","RawContent":null},{"Title":"Augment Reality with Xamarin and iOS 11","PublishedOn":"2017-09-19T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the showcase features of iOS 11 is ARKit, an augmented-reality mode available on devices powered by A9 and newer chips (basically, 6S and better iPhones, 2017 iPads, and iPad Pros). With ARKit, users hold up the device and view a composite of the video feed and computer-generated imagery (either 2D SpriteKit or 3D [&#8230;]","Href":"https://blog.xamarin.com/augment-reality-xamarin-ios-11/","RawContent":null},{"Title":"Learn How The Lean Cook Uses Mobile to Drive Revenue and Promote Healthy Living","PublishedOn":"2017-09-18T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Lean Cook, a popular UK diet and fitness blog started as a hobby by a husband and wife team, is a prime example of how to design apps for the user. Instead of simply replicating web content on a smaller screen, the team crafted an interactive shopping and cooking experience. They’ve grown a loyal following, and their latest project (available [&#8230;]","Href":"https://blog.xamarin.com/learn-lean-cook-uses-mobile-drive-revenue-promote-healthy-living/","RawContent":null},{"Title":"Xamarin.Forms: Tips for Beating the Learning Curve","PublishedOn":"2017-09-15T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As a first time user learning any new technology or pattern, there’s always a curve, and over the years I&#8217;ve stood at the threshold of a product and gazed up that curve to determine how painfully steep it appeared and how long it would take until I was productive. Now, as the Program Manager for Xamarin.Forms, [&#8230;]","Href":"https://blog.xamarin.com/xamarin-forms-tips-beating-learning-curve/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"6656171173","Type":"PullRequestEvent","CreatedAt":"2017-09-29T19:27:32","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/910","RelatedDescription":"Opened pull request \"WIP [xabuild.exe] cross-platform form of tools/scripts/xabuild\" (#910) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/jonathanpeppers/xabuild\r\n\r\nxabuild.exe is a nice wrapper around MSBuild for compiling\r\nXamarin.Android projects using a locally built version of\r\nXamarin.Android on your system. It seems to work (so far) on\r\nWindows, MacOS, and Linux and doesn’t require elevation or\r\nmodify your system.\r\n\r\nxabuild.exe works by doing the following:\r\n- Reference `MSBuild.exe` or `MSBuild.dll` depending on the platform\r\n- Overrides the `app.config` file of MSBuild to set various properties\r\n- This allows `xabuild.exe` to build Xamarin.Android projects using\r\nlocal Xamarin.Android build output\r\n- Creates symbolic links to `.NETPortable` and `.NETFramework`\r\ndirectories inside the Xamarin.Android build output directory\r\n- Run MSBuild’s `Main()` method\r\n\r\n### Changes\r\n- Added `xabuild.csproj` to Xamarin.Android.sln\r\n- tools/scripts/xabuild now just runs xabuild.exe\r\n- Xamarin.Android.Build.Tests run xabuild.exe\r\n\r\n### Limitations\r\n- xbuild will not work, use `MSBUILD=msbuild` for all `make` commands\r\n- On Linux I had to use Mono 5.2 to get a version of msbuild that\r\nworked (I think probably was installation issue, as building a plain\r\nproject didn’t work)\r\n\r\n### Usage\r\n\r\nAn example on MacOS:\r\n```\r\nmake prepare all MSBUILD=msbuild\r\nmake all-tests MSBUILD=msbuild\r\nmake run-nunit-tests MSBUILD=msbuild NUNIT_TESTS=bin/TestDebug/Xamarin.Android.Build.Tests.dll\r\n```\r\n\r\nAn example on Windows (msbuild should be 15.3 from VS 2017):\r\n```\r\nmsbuild build-tools\\scripts\\PrepareWindows.targets\r\nmsbuild Xamarin.Android.sln\r\nbin\\Debug\\bin\\xabuild.exe Xamarin.Android-Tests.sln /p:XAIntegratedTests=False\r\npackages\\NUnit.ConsoleRunner.3.7.0\\tools\\nunit3-console.exe bin\\TestDebug\\Xamarin.Android.Build.Tests.dll\r\n```\r\nNote, these tests are not all passing on Windows yet. See [here](https://devdiv.visualstudio.com/DevDiv/Default/_build/index?buildId=1022831) for latest results."},{"Id":"6654827932","Type":"PullRequestEvent","CreatedAt":"2017-09-29T14:15:05","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/904","RelatedDescription":"Merged pull request \"[tests] fix for Adb task on Windows\" (#904) at xamarin/xamarin-android","RelatedBody":"Context: The `Adb` task inherits `PathToolTask`, which inherits\r\n`ToolTask`.\r\n\r\nThe `Adb` task's `ToolExe` is commonly set to `$(AdbToolExe)`. The\r\nproblem with this is that `Microsoft.Build.Utilities.ToolTask` has its\r\nown validation that checks if the file exists. On Windows, a file named\r\n`adb` does not exist, because it is named `adb.exe`.\r\n\r\nThe solution here is to not set `base.ToolExe` if the incoming value\r\nalready matches `ToolBaseName`. This prevents the validation, and\r\n`PathToolTask` can continue to use `Which` appropriately to either find\r\n`adb` or `adb.exe` depending on the platform. This also allows\r\n`$(AdbToolExe)` to be overidden if needed."},{"Id":"6654373764","Type":"PullRequestEvent","CreatedAt":"2017-09-29T12:33:57","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/909","RelatedDescription":"Opened pull request \"Use API9 includes directory for 32-bit ARM builds\" (#909) at xamarin/xamarin-android","RelatedBody":"NDK 14+ (which we use) doesn't have android-4 anymore"},{"Id":"6651770525","Type":"PullRequestEvent","CreatedAt":"2017-09-28T21:22:22","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/905","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tests] Fix Lint Error in the latest Android tools\" (#905) at xamarin/xamarin-android","RelatedBody":"Lint is now reporting\r\n\r\n\t`obj/Debug/android/src/md5f80e635856c5c6d2b732d9b14f8f2b1f/MainActivity.java(27,13): error XA0103:  Overriding method should call super.onCreate [MissingSuperCall]`\r\n\r\nbecause we don't call `super.onCreate` in our JCW genearted code.\r\nThis is by design so we need to ignore this particular error.\r\n\r\nThat said we now have 4 issues we ignore, so rather than keep duplicating\r\ncode it has been refectored to use a `string[]`."},{"Id":"6651740718","Type":"PullRequestEvent","CreatedAt":"2017-09-28T21:14:45","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/907","RelatedDescription":"Merged pull request \"[tests] fixes for emulator creation on Windows\" (#907) at xamarin/xamarin-android","RelatedBody":"- `JAVA_HOME` needs to be set for `avdmanager.bat`\r\n- Installing apks on the emulator was failing with\r\n`INSTALL_FAILED_INSUFFICIENT_STORAGE` on Windows\r\n- A newer revision of the emulator fixes this, now using\r\n`x86-21_r05.zip`"},{"Id":"6651727385","Type":"PullRequestEvent","CreatedAt":"2017-09-28T21:11:21","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/906","RelatedDescription":"Merged pull request \"[create-vsix] Update the icon for the .vsix file\" (#906) at xamarin/xamarin-android","RelatedBody":"The previous icon was the Visual Studio default icon for a `.vsix`\r\nproject. Replace it with a more Android-specific icon."},{"Id":"6651537478","Type":"PullRequestEvent","CreatedAt":"2017-09-28T20:27:07","Actor":"cobey","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/908","RelatedDescription":"Merged pull request \"Bump to Java.Interop/d15-4/30adcc4b\" (#908) at xamarin/xamarin-android","RelatedBody":"Context: https://bugzilla.xamarin.com/show_bug.cgi?id=59109\r\nFixes: https://bugzilla.xamarin.com/show_bug.cgi?id=59822"},{"Id":"6651458992","Type":"PullRequestEvent","CreatedAt":"2017-09-28T20:08:47","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/908","RelatedDescription":"Opened pull request \"Bump to Java.Interop/d15-4/30adcc4b\" (#908) at xamarin/xamarin-android","RelatedBody":"Context: https://bugzilla.xamarin.com/show_bug.cgi?id=59109\r\nFixes: https://bugzilla.xamarin.com/show_bug.cgi?id=59822"},{"Id":"6651105579","Type":"PullRequestEvent","CreatedAt":"2017-09-28T18:47:11","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/907","RelatedDescription":"Opened pull request \"[tests] fixes for emulator creation on Windows\" (#907) at xamarin/xamarin-android","RelatedBody":"- `JAVA_HOME` needs to be set for `avdmanager.bat`\r\n- Installing apks on the emulator was failing with\r\n`INSTALL_FAILED_INSUFFICIENT_STORAGE` on Windows\r\n- A newer revision of the emulator fixes this, now using\r\n`x86-21_r05.zip`"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"6655724062","Type":"PullRequestEvent","CreatedAt":"2017-09-29T17:36:35","Actor":"MarkoBL","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1175","RelatedDescription":"Opened pull request \"[iOS] Redirect PreferredStatusBarStyle to the Child View Controller\" (#1175) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nUIApplication.StatusBarStyle is deprecated since iOS 9 (https://developer.apple.com/documentation/uikit/uiapplication/1622988-statusbarstyle) and doesn't work on Xamarin.Forms at all. If you use the black navigation bar style or a dark background color for the navigation page, the status bar always uses the default black color.\r\n\r\nThis PR simply redirects the calls to UIViewController.PreferredStatusBarStyle from the PlatformRenderer to the top view controller (NavigationRenderer or PageRenderer), therefore you can set the status bar color in your own renderer/ViewController:\r\n\r\n```\r\n\tpublic class ExtNavigationRenderer : NavigationRenderer\r\n\t{\r\n\t\tpublic override UIStatusBarStyle PreferredStatusBarStyle()\r\n\t\t{\r\n\t\t\treturn UIStatusBarStyle.LightContent;\r\n\t\t}\r\n\t}\r\n```\r\n\r\n\r\n### Behavioral Changes ###\r\n\r\nThere should be none.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"6655559553","Type":"PullRequestEvent","CreatedAt":"2017-09-29T16:54:06","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1153","RelatedDescription":"Merged pull request \"[Android] Prototypical Cell Cache for IsEnabled testing; UITest\" (#1153) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nExpect checking if a cell is enabled does not always create a new view. Actually, before the stop gap fix, we had been creating a new view, binding, then checking if the view is enabled. As views are checked all the time to see if they are enabled this was a big leak. \r\n\r\nThe stop gap fix, which this fix replaces, was to create and cache a new view, `_enabledCheckCell`, and rebind that view to determine if a cell is enabled. That worked fine so long as all cells used the same type of view to render themselves. However, when a `DataTemplateSelector` is used, then different cells can use different views so its not sufficient to cache a single view. \r\n\r\nThis fix caches the correct view for a given type of cell which can be repeatedly rebound and checked to see if it's enabled. How the type of a cell is determined depends on the caching strategy.  \r\n\r\n### Bugs Fixed ###\r\n\r\nNone; Discovered while fixing iOS caching.\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6655406943","Type":"PullRequestEvent","CreatedAt":"2017-09-29T16:16:00","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1171","RelatedDescription":"Merged pull request \"Add sln for VS2017 , remove not used Page Gallery\" (#1171) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAdd VS2017 sln.\r\nRemove old WP and WinRT PageGallery\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"6655304549","Type":"PullRequestEvent","CreatedAt":"2017-09-29T15:52:51","Actor":"rmarinho","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1161","RelatedDescription":"Closed pull request \"Xamarin Forms Gtk# Backend\" (#1161) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n**Preview** of Xamarin.Forms.GTK project and Xamarin.Forms.Maps.GTK project.\r\n\r\n### Bugs Fixed ###\r\n\r\n- None.\r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n\r\n- Custom Widgets, helpers, extensions, etc.\r\n- ActivityIndicatorRenderer (Custom Widget that makes use of Cairo.).\r\n- BoxViewRenderer (Custom Widget that makes use of Cairo.).\r\n- ButtonRenderer (Gtk.Button).\r\n- CarouselPageRenderer (Custom Widget).\r\n- Cells (EntryCell, ImageCell, SwitchCell, TextCell and ViewCell).\r\n- DatePickerRenderer (Custom Widget using Gtk.Window + Gtk.Calendar).\r\n- EditorRenderer (Gtk.TextView).\r\n- EntryRenderer (FormsTextBox).\r\n- FrameRenderer (Gtk.Frame).\r\n- ImageRenderer (Gtk.Image).\r\n- LabelRenderer (Gtk.Label).\r\n- LayoutRenderer (Gtk.Container).\r\n- ListViewRenderer (Custom Widget).\r\n- MapRenderer (Custom Widget thay uses a GTK# implementation of GMaps.NET).\r\n- MasterDetailPageRenderer (Custom Widget).\r\n- NavigationPageRenderer (Custom Widget).\r\n- OpenGLViewRender (OpenGL Widget that uses OpenTK).\r\n- PageRenderer (Gtk.Container).\r\n- PickerRenderer (Gtk.ComboBox).\r\n- ProgressBarRenderer (Gtk.ProgressBar).\r\n- ScrollViewRenderer (Gtk.ScrolledWindow).\r\n- SearchBarRenderer (Custom Widget).\r\n- SliderRenderer (Gtk.HScale).\r\n- StepperRenderer (Gtk.SpinButton).\r\n- SwitchRenderer (Gtk.CheckButton).\r\n- TableViewRenderer (Custom Widget).\r\n- TimePickerRenderer (Custom Widget using Gtk.Window + 3 Gtk.SpinButton).\r\n- WebViewRenderer (Custom Widget that uses webkit-sharp).\r\n\r\nAlso:\r\n\r\n- ControlGallery Sample.\r\n\r\n### Behavioral Changes ###\r\n\r\nYou can create applications for **Linux**, MacOS and Windows with Xamarin.Forms using the GTK# backend.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"6654212164","Type":"PullRequestEvent","CreatedAt":"2017-09-29T11:49:40","Actor":"jsuarezruiz","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1174","RelatedDescription":"Opened pull request \"Xamarin Forms Gtk# Backend - Platform Project\" (#1174) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n**Preview** of Xamarin.Forms.GTK project and Xamarin.Forms.Maps.GTK project. \r\n\r\n**NOTE:** This PR only includes the **Xamarin.Forms.Platform.GTK** project. Other PRs will include maps, CoreGallery and other points.\r\n\r\n### Bugs Fixed ###\r\n\r\n- None.\r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n\r\n- Custom Widgets, helpers, extensions, etc.\r\n- ActivityIndicatorRenderer (Custom Widget that makes use of Cairo.).\r\n- BoxViewRenderer (Custom Widget that makes use of Cairo.).\r\n- ButtonRenderer (Gtk.Button).\r\n- CarouselPageRenderer (Custom Widget).\r\n- Cells (EntryCell, ImageCell, SwitchCell, TextCell and ViewCell).\r\n- DatePickerRenderer (Custom Widget using Gtk.Window + Gtk.Calendar).\r\n- EditorRenderer (Gtk.TextView).\r\n- EntryRenderer (FormsTextBox).\r\n- FrameRenderer (Gtk.Frame).\r\n- ImageRenderer (Gtk.Image).\r\n- LabelRenderer (Gtk.Label).\r\n- LayoutRenderer (Gtk.Container).\r\n- ListViewRenderer (Custom Widget).\r\n- MasterDetailPageRenderer (Custom Widget).\r\n- NavigationPageRenderer (Custom Widget).\r\n- OpenGLViewRender (OpenGL Widget that uses OpenTK).\r\n- PageRenderer (Gtk.Container).\r\n- PickerRenderer (Gtk.ComboBox).\r\n- ProgressBarRenderer (Gtk.ProgressBar).\r\n- ScrollViewRenderer (Gtk.ScrolledWindow).\r\n- SearchBarRenderer (Custom Widget).\r\n- SliderRenderer (Gtk.HScale).\r\n- StepperRenderer (Gtk.SpinButton).\r\n- SwitchRenderer (Gtk.CheckButton).\r\n- TableViewRenderer (Custom Widget).\r\n- TimePickerRenderer (Custom Widget using Gtk.Window + 3 Gtk.SpinButton).\r\n- WebViewRenderer (Custom Widget that uses webkit-sharp).\r\n\r\n### Behavioral Changes ###\r\n\r\nYou can create applications for **Linux**, MacOS and Windows with Xamarin.Forms using the GTK# backend.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"6655859689","Type":"PullRequestEvent","CreatedAt":"2017-09-29T18:10:25","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2823","RelatedDescription":"Opened pull request \"[xharness] Always wait for processes to exit, even if they're killed. Fixes #57846.\" (#2823) at xamarin/xamarin-macios","RelatedBody":"Always wait for processes to exit, even if they're killed.\n\nAlso make absolutely sure that we can safely handle any exception when getting\nthe ExitCode, no matter what.\n\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=57846"},{"Id":"6655785216","Type":"PullRequestEvent","CreatedAt":"2017-09-29T17:51:46","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2383","RelatedDescription":"Closed pull request \"Keeps references to the delegate passed to Marshal.GetFunctionPointerForDelegate\" (#2383) at xamarin/xamarin-macios","RelatedBody":"While this issue would have been rare due to the typical scenarios where Blocks are used\r\nand the rare use of CFRunLoop, there is a chance that the delegates that are created\r\nimplicitly when passing a method name to GetFunctionPointerForDelegate would be released\r\nand that the native code trying to call back into managed code would have executed\r\ninvalid code.\r\n\r\nThis incorrect use of the GetFunctionPointerForDelegate was discovered\r\nby the TensorFlowSharp bindings on Windows which used a similar idiom.\r\n\r\nIn the case of CFRunLoop, we now keep the delegates that are used as\r\nstatic variables in the CFRunLoop class.  On the case of Block,\r\ninstead of tracking a single delegate, we now track two delegates in\r\nthe GCHandle allcoated object."},{"Id":"6655782080","Type":"PullRequestEvent","CreatedAt":"2017-09-29T17:50:59","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2822","RelatedDescription":"Opened pull request \"Change BlockLiteral.SetupBlock to keep a reference to the delegate passed as the trampoline.\" (#2822) at xamarin/xamarin-macios","RelatedBody":"* Change BlockLiteral.SetupBlock to keep a reference to the delegate passed as\n  the trampoline.\n\n  Change BlockLiteral.SetupBlock to keep a reference to the delegate passed as\n  the trampoline, so that it's safer for normal users (crashes due to\n  incorrect usage are rare and random, and as such they're also hard to track\n  down).\n\n  Additionally introduce a BlockLiteral.SetupBlockUnsafe method, that still\n  has the old behavior, so that we can use it in our own (reviewed) code.\n\n* [ObjCRuntime] Add some validation to BlockLiteral.SetupBlock.\n\n* Use BlockLiteral.SetupBlockUnsafe instead of .SetupBlock\n\n  Use SetupBlockUnsafe in our own code, because we know our own code is using\n  it correctly (by passing a trampoline stored in a static field, so that the\n  GC doesn't free it)."},{"Id":"6655761612","Type":"PullRequestEvent","CreatedAt":"2017-09-29T17:45:54","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2780","RelatedDescription":"Merged pull request \"Move MT0091 to common code so Xamarin.Mac can benefit from the more f…\" (#2780) at xamarin/xamarin-macios","RelatedBody":"…riendly error\r\n\r\n- https://bugzilla.xamarin.com/show_bug.cgi?id=59186"},{"Id":"6655669555","Type":"PullRequestEvent","CreatedAt":"2017-09-29T17:22:39","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2821","RelatedDescription":"Opened pull request \"Fix solutions & projects as VSfM wants them.\" (#2821) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"6655572914","Type":"PullRequestEvent","CreatedAt":"2017-09-29T16:57:32","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2818","RelatedDescription":"Merged pull request \"[AudioUnit] Fix csc compiler error not allowing unsafe code in iterators. (#2386)\" (#2818) at xamarin/xamarin-macios","RelatedBody":"csc does not allow unsafe code in iterators:\n\nAudioUnit/AudioUnit.cs(1725,13): error CS1629: Unsafe code may not appear in iterators\nAudioUnit/AudioUnit.cs(1725,33): error CS1629: Unsafe code may not appear in iterators\nAudioUnit/AudioUnit.cs(1723,19): error CS1629: Unsafe code may not appear in iterators\n\nIt looks like mcs incorrectly allows this (https://bugzilla.xamarin.com/show_bug.cgi?id=56616).\n\nSo change the code to remove unsafe usage in iterators."},{"Id":"6655402678","Type":"PullRequestEvent","CreatedAt":"2017-09-29T16:14:59","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2810","RelatedDescription":"Merged pull request \"[AVFoundation] AVFoundation API Enhancements\" (#2810) at xamarin/xamarin-macios","RelatedBody":"Changes in AVFoundation\r\n===================\r\n\r\nAVCaptureSynchronizedDataCollection:\r\n\r\n* Obsoletes `From` method because the name does not makes sense in the current context.\r\n* Obsoletes `ObjectForKeyedSubscript` in favor of a C# indexer.\r\n* Adds `GetSynchronizedData` to replace obsoleted `From` method`.\r\n\r\nAVCaptureSynchronizedData:\r\n\r\n* Adds `[Abstract]` in XAMCORE_4_0 because it is an abstract superclass.\r\n\r\nAVCaptureDevice:\r\n\r\n* Adds strong typed API to `GetAuthorizationStatus` and `RequestAccessForMediaType`\r\n  using `AVAuthorizationMediaType` enum holding the only possible values.\r\n\r\nAVCaptureDepthDataOutput:\r\n\r\n* AVCaptureDepthDataOutput needs its default .ctor, there is no other way\r\n  to instantiate this class.\r\n\r\nTest\r\n====\r\n\r\nA test exercising the new API lives here:\r\n\r\nhttps://github.com/dalexsoto/XamarinTests/blob/4715069b2bd777009c94c32fd9eed56b81103264/AVCaptureDataOutputSynchronizerTest/AVCaptureDataOutputSynchronizerTest/ViewController.cs\r\n\r\nThe API needs an iPhone 7+, 8+ or X in order to run."},{"Id":"6655399287","Type":"PullRequestEvent","CreatedAt":"2017-09-29T16:14:09","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2811","RelatedDescription":"Merged pull request \"[AVFoundation] Adds missing Xcode9 API.\" (#2811) at xamarin/xamarin-macios","RelatedBody":"AVCapturePhotoOutput:\r\n\r\n* Adds missing members `DepthDataDeliverySupported` and `DepthDataDeliveryEnabled`\r\n  from `AVCapturePhotoOutputDepthDataDeliverySupport` category.\r\n\r\nAVCaptureDevice:\r\n\r\n* Adds missing members `ActiveDepthDataFormat`, `MinAvailableVideoZoomFactor` and\r\n  `MaxAvailableVideoZoomFactor` from `AVCaptureDeviceDepthSupport` category."},{"Id":"6655398300","Type":"PullRequestEvent","CreatedAt":"2017-09-29T16:13:54","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2805","RelatedDescription":"Merged pull request \"[uikit] Add UIContentSizeCategoryCompareToCategory & UIContentSizeCat…\" (#2805) at xamarin/xamarin-macios","RelatedBody":"…egoryIsAccessibilityCategory\r\n\r\n- Fixes bug #59422: https://bugzilla.xamarin.com/show_bug.cgi?id=59422)"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"914685619191808000","CreatedAt":"2017-10-02T02:57:00+00:00","UserScreenname":"xamarinhq","Text":"#XamarinDevDays is coming to a town near you! Learn how to build, test, and connect native apps with #Xamarin: https://t.co/Ytw07Fr9eL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null},{"Id":"914295800875945984","CreatedAt":"2017-10-01T01:08:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to set up and configure an #Azure Notification Hub for your #Xamarin.iOS app: https://t.co/GJAQDvFyAl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":27,"RawContent":null},{"Id":"913848491146977282","CreatedAt":"2017-09-29T19:30:33+00:00","UserScreenname":"xamarinhq","Text":"Find a #Xamarin event near you this October: https://t.co/5rVXaUkyTD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null},{"Id":"913793742737375232","CreatedAt":"2017-09-29T15:53:00+00:00","UserScreenname":"xamarinhq","Text":"5 ways to boost a #XamarinForms app's start up time: https://t.co/OqbHBRux5G","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":21,"RawContent":null},{"Id":"913493122902056960","CreatedAt":"2017-09-28T19:58:27+00:00","UserScreenname":"xamarinhq","Text":"#XamarinForms Stable comes to #dotNET Standard 2.0! Details: https://t.co/uLZzFJNACa https://t.co/UuJSdo8LRi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":159,"FavoriteCount":87,"RawContent":null},{"Id":"913433871622041600","CreatedAt":"2017-09-28T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to provision a new iOS device and app in five minutes using #VS4Mac and the open source project fastlane: https://t.co/wNcfcCJn1v","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":50,"FavoriteCount":19,"RawContent":null},{"Id":"913112376391733248","CreatedAt":"2017-09-27T18:45:29+00:00","UserScreenname":"xamarinhq","Text":"Add 3D to your app with our webinar recording from Charles Petzold on using UrhoSharp 3D with #Xamarin Workbooks: https://t.co/AG37mw39QS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":26,"FavoriteCount":18,"RawContent":null},{"Id":"913071735381118977","CreatedAt":"2017-09-27T16:04:00+00:00","UserScreenname":"xamarinhq","Text":"Update #VisualStudio and #VS4Mac for full support to develop #iOS11 apps with #Xamarin: https://t.co/dRGFj7RaZO","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":41,"RawContent":null},{"Id":"912752497046978560","CreatedAt":"2017-09-26T18:55:28+00:00","UserScreenname":"xamarinhq","Text":"Try out the latest new features for #Xamarin in #VS2017 without affecting your production environment: https://t.co/6QFngIYygP","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":17,"RawContent":null},{"Id":"912704314086428674","CreatedAt":"2017-09-26T15:44:00+00:00","UserScreenname":"xamarinhq","Text":"Add local notifications to your Xamarin.Mac applications: https://t.co/fmHnM8m18Z","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":19,"FavoriteCount":9,"RawContent":null},{"Id":"912414874571038732","CreatedAt":"2017-09-25T20:33:52+00:00","UserScreenname":"xamarinhq","Text":"Learn how ActivityTask makes async/await easier to use in your #Xamarin Android mobile apps: https://t.co/drhcfIy4ht","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":28,"RawContent":null},{"Id":"912343187083100165","CreatedAt":"2017-09-25T15:49:00+00:00","UserScreenname":"xamarinhq","Text":"Make your #XamarinForms apps accessible with Xamarin.Forms 2.3.4 + an example from the #XamarinEvolve 2016 app: https://t.co/auqnwBvyE2","Source":"<a href=\"http://sproutsocial.com\" rel=\"nofollow\">Sprout Social</a>","RetweetCount":39,"FavoriteCount":18,"RawContent":null},{"Id":"912103614059094017","CreatedAt":"2017-09-24T23:57:02+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the #Xamarin.Firebase.Messaging package to add FCM-based push notification features in your app:… https://t.co/IlUWyDYRGV","Source":"<a href=\"http://sproutsocial.com\" rel=\"nofollow\">Sprout Social</a>","RetweetCount":105,"FavoriteCount":41,"RawContent":null},{"Id":"911804140266778625","CreatedAt":"2017-09-24T04:07:02+00:00","UserScreenname":"xamarinhq","Text":"Deep Dive into #SkiaSharp for #XamarinForms with #Xamarin's Charles Petzold: https://t.co/mlySNkqQ63 https://t.co/WNuYhD19n9","Source":"<a href=\"http://sproutsocial.com\" rel=\"nofollow\">Sprout Social</a>","RetweetCount":71,"FavoriteCount":36,"RawContent":null},{"Id":"911313517848006657","CreatedAt":"2017-09-22T19:37:28+00:00","UserScreenname":"xamarinhq","Text":"This week on the @XamarinPodcast learn about #Xamarin support for #AndroidOreo and #iOS11, #XamarinForms, plus more: https://t.co/CDAYHoRh5t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":26,"FavoriteCount":23,"RawContent":null},{"Id":"910894395024699392","CreatedAt":"2017-09-21T15:52:02+00:00","UserScreenname":"xamarinhq","Text":"Our @XamarinU webinar with Charles Petzold on UrhoSharp 3D with #Xamarin Workbooks is about to start—join us:… https://t.co/CjCM7pVcd3","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":17,"FavoriteCount":8,"RawContent":null},{"Id":"910587508056051713","CreatedAt":"2017-09-20T19:32:34+00:00","UserScreenname":"xamarinhq","Text":"See how the #Dotfuscator from @PreEmptive can protect your #Xamarin apps and libraries from reverse engineering: https://t.co/hyhUzG4o9r","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":81,"FavoriteCount":27,"RawContent":null},{"Id":"910536790372683777","CreatedAt":"2017-09-20T16:11:02+00:00","UserScreenname":"xamarinhq","Text":"Last chance—don't forget to sign up for Charles Petzold's webinar tomorrow on UrhoSharp 3D with Xamarin Workbooks:… https://t.co/KilnMMfPtU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":10,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2017-10-02T05:30:36.0645788Z","RunDurationInMilliseconds":3694}