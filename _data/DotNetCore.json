{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core and systemd","PublishedOn":"2019-08-19T16:01:04+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"In preview7 a new package was added to the Microsoft.Extensions set of packages that enables integration with systemd. For the Windows focused, systemd allows similar functionality to Windows...","Href":"https://devblogs.microsoft.com/dotnet/net-core-and-systemd/","RawContent":null},{"Title":".NET Framework 4.8 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2019-08-13T19:47:54+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We are happy to announce that Microsoft .NET Framework 4.8 is now available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes quality...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-4-8-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 8","PublishedOn":"2019-08-13T18:31:00+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 8. Just like with Preview 7, we&#8217;ve focused on polishing .NET Core 3.0 for a final release and are not adding new features. If these final previews...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-8/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 8 and Entity Framework 6.3 Preview 8","PublishedOn":"2019-08-13T18:29:25+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"The Preview 8 versions of the EF Core 3.0 package and the EF 6.3 package are now available for download from nuget.org.\nNew previews of .NET Core 3.0 and ASP.NET Core 3.0 are also available...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-8-and-entity-framework-6-3-preview-8/","RawContent":null},{"Title":"Update on .NET Standard adoption","PublishedOn":"2019-08-07T18:01:39+00:00","CommentsCount":27,"FacebookCount":0,"Summary":"It&#8217;s about two years ago that I announced .NET Standard 2.0. Since then we&#8217;ve been working hard to increase the set of .NET Standard-based libraries for .NET. This includes many of the BCL...","Href":"https://devblogs.microsoft.com/dotnet/update-on-net-standard-adoption/","RawContent":null},{"Title":"Calling all .NET desktop and mobile developers!","PublishedOn":"2019-08-07T15:00:29+00:00","CommentsCount":30,"FacebookCount":0,"Summary":"We would love to hear about your experience with building client applications in .NET. Your feedback will greatly help us to improve the .NET tooling and ensure our roadmap focuses on your needs....","Href":"https://devblogs.microsoft.com/dotnet/calling-all-net-desktop-and-mobile-developers/","RawContent":null},{"Title":"Try out Nullable Reference Types","PublishedOn":"2019-08-06T20:29:02+00:00","CommentsCount":68,"FacebookCount":0,"Summary":"Try out Nullable Reference Types\nWith the release of .NET Core 3.0 Preview 7, C# 8.0 is considered &#34;feature complete&#34;. That means that the biggest feature of them all, Nullable Reference...","Href":"https://devblogs.microsoft.com/dotnet/try-out-nullable-reference-types/","RawContent":null},{"Title":"Improving .NET Core installation in Visual Studio and on Windows","PublishedOn":"2019-08-06T02:07:24+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Visual Studio 2019 version 16.3 and .NET Core 3.0 Preview 7 improve the installation experience of .NET Core on Windows. The goal is to reduce the number of .NET Core versions that might be on a...","Href":"https://devblogs.microsoft.com/dotnet/improving-net-core-installation-in-visual-studio-and-on-windows/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 7 and Entity Framework 6.3 Preview 7","PublishedOn":"2019-07-23T17:06:53+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are making new previews of EF Core 3.0 and EF 6.3 available on nuget.org.\n.NET Core 3.0 Preview 7 and ASP.NET Core 3.0 Preview 7 were also made available today.\nWe encourage you to install...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-7-and-entity-framework-6-3-preview-7/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 7","PublishedOn":"2019-07-23T17:00:54+00:00","CommentsCount":37,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 7. We&#8217;ve transitioned from creating new features to polishing the release. Expect a singular focus on quality for the remaining preview...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-7/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"},{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10212614045","Type":"IssuesEvent","CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Opened issue \"Consolidating .NET GitHub repos\" (#119) at dotnet/announcements","RelatedBody":"Over the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n## To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary."},{"Id":"10047192673","Type":"IssuesEvent","CreatedAt":"2019-07-19T16:54:03","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Opened issue \".NET Core master branches have switched to \"5.0\"\" (#118) at dotnet/announcements","RelatedBody":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10242490269","Type":"PullRequestEvent","CreatedAt":"2019-08-20T05:13:16","Actor":"elinor-fung","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26259","RelatedDescription":"Merged pull request \"Add bundle tool for creating a bundle using HostModel APIs\" (#26259) at dotnet/coreclr","RelatedBody":"The bundle tool will be placed in the same directory as other managed tools build from coreclr (`bin/Product/<configuration>`)\r\n\r\nUsage for testing with `corebundle`\r\n- Create/publish self-contained app (or manually create a folder representing a self-contained app)\r\n- Copy `corebundle` to app's publish output and rename file to match app exe name\r\n- Run `dotnet bundle.dll --source <appPublishOutput> --host <appExeName>`\r\n\r\ncc @janvorli "},{"Id":"10242092210","Type":"IssuesEvent","CreatedAt":"2019-08-20T03:20:39","Actor":"ericstj","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25646","RelatedDescription":"Closed issue \"Performance Issues Adding Items To List Is Slower in Core 3 than Core 2.2\" (#25646) at dotnet/coreclr","RelatedBody":"Below are the benchmark results, using BenchmarkDotnet, to test adding items to a List<> collection. As you can see, while .NET Core 3 is faster than the Clr, it seems the performance is slower when compared to .NET Core 2.2.\r\n\r\n![image](https://user-images.githubusercontent.com/15676130/61063713-472c3b80-a3b5-11e9-8519-aa9815fd54f7.png)\r\n\r\nBelow is the code for the benchmark test:\r\n\r\n```\r\n        [Benchmark(Description = \"COLLECTION CREATION: Using List<> & Add()\")]\r\n        public List<FakePerson> TestAddingItemsToCollections01()\r\n        {\r\n            var collection = new List<FakePerson>();\r\n\r\n            for (var count = 0; count < this.CollectionCount; count++)\r\n            {\r\n                collection.Add(this._fakePersonFixedCollection[count]);\r\n            }\r\n\r\n            return collection;\r\n        }\r\n```"},{"Id":"10242080480","Type":"PullRequestEvent","CreatedAt":"2019-08-20T03:17:20","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26238","RelatedDescription":"Merged pull request \"Fix assert when taking the jit inline tracking map\" (#26238) at dotnet/coreclr","RelatedBody":""},{"Id":"10241867846","Type":"PullRequestEvent","CreatedAt":"2019-08-20T02:21:43","Actor":"hoyosjs","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26256","RelatedDescription":"Merged pull request \"Use function-local StackingAllocator for EnC added methods\" (#26256) at dotnet/coreclr","RelatedBody":"`tl;dr` Port of #26106 to solve issue #26016 caused by PR #24177\r\n\r\n#### Description\r\n\r\nPR #24177 made a changed the way we cached the `StackingAllocator` in the `Thread` object. Prior to this change, the compiler optimized the access by inserting the field offset; the offset was a bogus value, but the code path never uses the value so we never had any complaints. After the change, the access happened, but the code runs on the debugger thread, where the `Thread` object is not available, and this results in an AV when users try to add a method through EnC. This change adds a local `StackingAllocator` to prevent such AV and correct prior behavior. \r\n\r\n#### Customer Impact\r\n\r\nThis issue makes it impossible for users, directly impacting the inner loop scenarios. It's currently marked as a blocker in Visual Studio.\r\n\r\n#### Regression?\r\n\r\nYes, 3.0 preview 6 was the first time this was visible to customers.\r\n\r\n#### Risk\r\n\r\nVery low, code path doesn't use the variable now, and fixes silent bug from before. Only possible to trigger it in Edit & Continue scenarios, and this actually correct prior behavior."},{"Id":"10241689434","Type":"PullRequestEvent","CreatedAt":"2019-08-20T01:33:29","Actor":"josalem","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26270","RelatedDescription":"Opened pull request \"[master] Move TypeSystemLog::OnKeywordsChanged\" (#26270) at dotnet/coreclr","RelatedBody":"Move TypeSystemLog::OnKeywordsChanged from EtwCallback to EtwCallbackCommon to enable this same behavior in ETW and EventPipe.   This unblocks parity for GCHeapDumps between ETW and EventPipe.  This callback modifies some state in the type logging system used by ETW and EventPipe, but is currently _only_ invoked by ETW.  These state changes affect \r\n\r\nI'm planning on doing some more manual testing of this change since some of the tracing scenarios may not be covered by CI.\r\n\r\nThis change is small and targeted in the event we port this to 3.x, but there are are potentially more things that only exist in `EtwCallback` that may need to be moved to `EtwCallbackCommon`.\r\n\r\nCC- @tommcdon "},{"Id":"10241683572","Type":"IssuesEvent","CreatedAt":"2019-08-20T01:31:52","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26269","RelatedDescription":"Opened issue \"System.Reflection.MetadataLoadContext.Tests failed with System.AccessViolationException\" (#26269) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/da69150d-e30b-44c8-91a0-d4a0593a4f4d/workitems/System.Reflection.MetadataLoadContext.Tests/console\r\n\r\n**Failed tests:**\r\nSystem.Reflection.MetadataLoadContext.Tests\r\n\r\n**Log:**\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.Reflection.TypeLoading.Ecma.EcmaModule.GetGenericTypeParameter(System.Reflection.TypeLoading.TypeContext, Int32)\r\n   at System.Reflection.Metadata.Ecma335.SignatureDecoder`2[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Reflection.TypeLoading.TypeContext, System.Reflection.MetadataLoadContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].DecodeType(System.Reflection.Metadata.BlobReader ByRef, Boolean)\r\n   at System.Reflection.Metadata.Ecma335.SignatureDecoder`2[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Reflection.TypeLoading.TypeContext, System.Reflection.MetadataLoadContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].DecodeTypeSequence(System.Reflection.Metadata.BlobReader ByRef)\r\n   at System.Reflection.Metadata.Ecma335.SignatureDecoder`2[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Reflection.TypeLoading.TypeContext, System.Reflection.MetadataLoadContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].DecodeGenericTypeInstance(System.Reflection.Metadata.BlobReader ByRef)\r\n   at System.Reflection.Metadata.Ecma335.SignatureDecoder`2[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Reflection.TypeLoading.TypeContext, System.Reflection.MetadataLoadContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].DecodeType(System.Reflection.Metadata.BlobReader ByRef, Boolean, Int32)\r\n   at System.Reflection.TypeLoading.Ecma.EcmaResolver.ResolveTypeSpec(System.Reflection.Metadata.TypeSpecificationHandle, System.Reflection.TypeLoading.Ecma.EcmaModule, System.Reflection.TypeLoading.TypeContext ByRef)\r\n   at System.Reflection.TypeLoading.Ecma.EcmaResolver.ResolveTypeDefRefOrSpec(System.Reflection.Metadata.EntityHandle, System.Reflection.TypeLoading.Ecma.EcmaModule, System.Reflection.TypeLoading.TypeContext ByRef)\r\n   at System.Reflection.TypeLoading.Ecma.EcmaDefinitionType.SpecializeBaseType(System.Reflection.TypeLoading.RoType[])\r\n   at System.Reflection.TypeLoading.RoType.ComputeBaseType()\r\n   at System.Reflection.TypeLoading.RoType.GetRoBaseType()\r\n   at System.Reflection.Runtime.BindingFlagSupport.QueriedMemberList`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Create(System.Reflection.TypeLoading.RoType, System.String, Boolean, Boolean)\r\n   at System.Reflection.TypeLoading.RoType+TypeComponentsCache.GetQueriedMembers[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](Boolean)\r\n   at System.Reflection.TypeLoading.RoType.Query[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.String, System.Reflection.BindingFlags, System.Func`2<System.__Canon,Boolean>)\r\n   at System.Reflection.TypeLoading.RoType.QuerySpecificMemberTypeIfRequested[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Reflection.MemberTypes, System.String, System.Reflection.BindingFlags, System.Func`2<System.Reflection.MemberInfo,Boolean>, System.Reflection.MemberTypes, System.Reflection.Runtime.BindingFlagSupport.QueryResult`1<System.__Canon> ByRef)\r\n   at System.Reflection.TypeLoading.RoType.GetMemberImpl(System.String, System.Reflection.MemberTypes, System.Reflection.BindingFlags)\r\n   at System.Reflection.Tests.IdentityTests.Identity_ReflectedType1()\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean, Boolean)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CallTestMethod(System.Object)\r\n   at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<InvokeTestMethodAsync>b__1>d<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].<InvokeTestMethodAsync>b__1()\r\n   at Xunit.Sdk.ExecutionTimer+<AggregateAsync>d__4.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExecutionTimer+<AggregateAsync>d__4, xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<AggregateAsync>d__4 ByRef)\r\n   at Xunit.Sdk.ExecutionTimer.AggregateAsync(System.Func`1<System.Threading.Tasks.Task>)\r\n   at Xunit.Sdk.ExceptionAggregator+<RunAsync>d__9.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__9, xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__9 ByRef)\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync(System.Func`1<System.Threading.Tasks.Task>)\r\n   at Xunit.Sdk.TestInvoker`1+<InvokeTestMethodAsync>d__48[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<InvokeTestMethodAsync>d__48[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<InvokeTestMethodAsync>d__48<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InvokeTestMethodAsync(System.Object)\r\n   at Xunit.Sdk.TestInvoker`1+<<RunAsync>b__47_0>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<<RunAsync>b__47_0>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<RunAsync>b__47_0>d<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].<RunAsync>b__47_0()\r\n   at Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__10`1<System.Decimal> ByRef)\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestMethodAsync(Xunit.Sdk.ExceptionAggregator)\r\n   at Xunit.Sdk.XunitTestRunner+<InvokeTestAsync>d__4.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestRunner+<InvokeTestAsync>d__4, xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<InvokeTestAsync>d__4 ByRef)\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(Xunit.Sdk.ExceptionAggregator)\r\n   at Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__10`1<System.__Canon> ByRef)\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Func`1<System.Threading.Tasks.Task`1<System.__Canon>>)\r\n   at Xunit.Sdk.TestRunner`1+<RunAsync>d__43[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestRunner`1+<RunAsync>d__43[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__43<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.XunitTestCaseRunner.RunTestAsync()\r\n   at Xunit.Sdk.TestCaseRunner`1+<RunAsync>d__19[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCaseRunner`1+<RunAsync>d__19[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__19<System.__Canon> ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.TestCaseRunner`1+<RunAsync>d__19[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__19<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestCaseRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.XunitTestMethodRunner.RunTestCaseAsync(Xunit.Sdk.IXunitTestCase)\r\n   at Xunit.Sdk.TestMethodRunner`1+<RunTestCasesAsync>d__32[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestMethodRunner`1+<RunTestCasesAsync>d__32[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunTestCasesAsync>d__32<System.__Canon> ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.TestMethodRunner`1+<RunTestCasesAsync>d__32[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunTestCasesAsync>d__32<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestMethodRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunTestCasesAsync()\r\n   at Xunit.Sdk.TestMethodRunner`1+<RunAsync>d__31[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestMethodRunner`1+<RunAsync>d__31[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__31<System.__Canon> ByRef)\r\n   at Xunit.Sdk.XunitTestClassRunner.RunTestMethodAsync(Xunit.Abstractions.ITestMethod, Xunit.Abstractions.IReflectionMethodInfo, System.Collections.Generic.IEnumerable`1<Xunit.Sdk.IXunitTestCase>, System.Object[])\r\n   at Xunit.Sdk.TestClassRunner`1+<RunTestMethodsAsync>d__38[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestClassRunner`1+<RunTestMethodsAsync>d__38[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunTestMethodsAsync>d__38<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestClassRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunTestMethodsAsync()\r\n   at Xunit.Sdk.TestClassRunner`1+<RunAsync>d__37[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestClassRunner`1+<RunAsync>d__37[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__37<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestClassRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.TestCollectionRunner`1+<RunTestClassesAsync>d__28[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCollectionRunner`1+<RunTestClassesAsync>d__28[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunTestClassesAsync>d__28<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestCollectionRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunTestClassesAsync()\r\n   at Xunit.Sdk.TestCollectionRunner`1+<RunAsync>d__27[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCollectionRunner`1+<RunAsync>d__27[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__27<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestCollectionRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.XunitTestAssemblyRunner+<>c__DisplayClass14_2.<RunTestCollectionsAsync>b__2()\r\n   at System.Threading.Tasks.Task`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InnerInvoke()\r\n   at System.Threading.Tasks.Task+<>c.<.cctor>b__274_0(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\n   at System.Threading.Tasks.Task.ExecuteEntry()\r\n   at System.Threading.Tasks.SynchronizationContextTaskScheduler+<>c.<.cctor>b__8_0(System.Object)\r\n   at Xunit.Sdk.MaxConcurrencySyncContext.RunOnSyncContext(System.Threading.SendOrPostCallback, System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc()\r\n   at Xunit.Sdk.XunitWorkerThread+<>c.<QueueUserWorkItem>b__5_0(System.Object)\r\n   at System.Threading.Tasks.Task.InnerInvoke()\r\n   at System.Threading.Tasks.Task+<>c.<.cctor>b__274_0(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread)\r\n   at System.Threading.Tasks.ThreadPoolTaskScheduler+<>c.<.cctor>b__10_0(System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart(System.Object)\r\n```"},{"Id":"10241659292","Type":"PullRequestEvent","CreatedAt":"2019-08-20T01:25:15","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26261","RelatedDescription":"Merged pull request \"Create flag to skip test jobs on internal builds\" (#26261) at dotnet/coreclr","RelatedBody":"Fixes #26162\r\n\r\n/cc @dotnet/coreclr-infra "},{"Id":"10241659277","Type":"IssuesEvent","CreatedAt":"2019-08-20T01:25:15","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26162","RelatedDescription":"Closed issue \"Should have variable to disable tests via pipeline variable\" (#26162) at dotnet/coreclr","RelatedBody":"There should be a way to disable the test runs when queuing a build. This could be limited to only `internal.yml` but we should have a way so testing certain non-test related pipeline changes could be done faster.\r\n\r\n/cc @dotnet/coreclr-infra "},{"Id":"10241578312","Type":"PullRequestEvent","CreatedAt":"2019-08-20T01:01:39","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26268","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#26268) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"10241566971","Type":"PullRequestEvent","CreatedAt":"2019-08-20T00:58:21","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26250","RelatedDescription":"Merged pull request \"Remove unused usings from Corlib\" (#26250) at dotnet/coreclr","RelatedBody":"I also copied the shared folder over to my local corert and corefx and built both successfully (with the exception of https://github.com/dotnet/corert/commit/79f1e22ce1f793b5360eafa98f45fec398c94703#r34743431)."},{"Id":"10241407662","Type":"PullRequestEvent","CreatedAt":"2019-08-20T00:12:42","Actor":"hoyosjs","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26106","RelatedDescription":"Merged pull request \"Use function-local StackingAllocator for adding EnC methods\" (#26106) at dotnet/coreclr","RelatedBody":"This reproduces old behavior. It is still a source of possible AVs in the runtime. "},{"Id":"10241405280","Type":"IssuesEvent","CreatedAt":"2019-08-20T00:12:02","Actor":"RUSshy","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26267","RelatedDescription":"Opened issue \"Wrong value in native callback method\" (#26267) at dotnet/coreclr","RelatedBody":"```c#\r\n\t\t\t[UnmanagedFunctionPointer(CallingConvention.Cdecl), SuppressUnmanagedCodeSecurity]\r\n\t\t\tpublic delegate GLFWkeyfun glfwSetKeyCallback(IntPtr window, GLFWkeyfun cbfun);\r\n\r\n\t\t[UnmanagedFunctionPointer(CallingConvention.Cdecl), SuppressUnmanagedCodeSecurity]\r\n\t\tpublic delegate void GLFWkeyfun(IntPtr window, int key, int scancode, int action, int mods);\r\n\r\n\r\n(...)\r\n\r\n        private GlfwNative.GLFWkeyfun _keyFunc;\r\n(...)\r\n            _keyFunc = keyCallback;\r\n            GlfwNative.glfwSetKeyCallback(_window, _keyFunc);\r\n```\r\n\r\n![rider64_XMYuP8Qx1d](https://user-images.githubusercontent.com/18348637/63307644-693ba680-c2ef-11e9-8f79-a3fea5295bc1.png)\r\n\r\n\r\nAs you can see: ``key`` is 68 wich translate to enum: ``Keys.D`` but i get something different: ``Keys.META_ALT_RIGHT_ON``\r\ninteresting enough, it correspond to the value i get with ``scancode`` param\r\n\r\nI am using\r\n\r\n ```\r\nλ dotnet --version\r\n3.0.100-preview8-013656\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10242092303","Type":"IssuesEvent","CreatedAt":"2019-08-20T03:20:41","Actor":"SidShetye","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/12298","RelatedDescription":"Opened issue \"dotnet build should either build or ignore sqlproj SQL project - not error out\" (#12298) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. Have a visual studio solution with two projects, one asp.net core project (`*.csproj`) and the other a SQL project (`*.sqlproj`).\r\n2. Issue `dotnet build` at solution level\r\n\r\n## Expected  behavior\r\n\r\n### Ideal\r\n\r\nThe solution is successfully built by either msbuild or natively by the dotnet cli (or a plugin).\r\n\r\n### Minimum Acceptable\r\n\r\nSolution is built by **skipping** projects (e.g. `sqlproj`) that `dotnet` CLI cannot handle\r\n\r\n## Actual behavior\r\n\r\nSolution build fails with `error MSB4019: The imported project \"C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\Microsoft\\VisualStudio\\v11.0\\SSDT\\Microsoft.Data.Tools.Schema.SqlTasks.targets\" was not found`\r\n\r\n## Previous reports\r\n\r\nThis was previously reported [here](https://github.com/dotnet/cli/issues/7294) but was prematurely closed without fixing the bug and subsequently ignored.\r\n\r\n## Environment data\r\n\r\n<details><summary>Click to expand</summary>\r\n<p>\r\n\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013656\r\n Commit:    8bf06ffc8d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28405-07\r\n  Commit:  d01b2fb7bc\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview8-013656 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19405.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28405-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview8-28405-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n</p>\r\n</details>\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10241381102","Type":"PullRequestEvent","CreatedAt":"2019-08-20T00:05:09","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12297","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12297) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190819.06\r\n- **Date Produced**: 8/19/2019 8:07 PM\r\n- **Commit**: 5b508e86c9ce66af8b41bbc1f3b756e7724bcaa0\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19419-06\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19419-06\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19419-06\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19419-06\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19419-06\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n"},{"Id":"10241247091","Type":"PullRequestEvent","CreatedAt":"2019-08-19T23:29:17","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12281","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#12281) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10240167658","Type":"PullRequestEvent","CreatedAt":"2019-08-19T20:07:38","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12297","RelatedDescription":"Opened pull request \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12297) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190819.06\r\n- **Date Produced**: 8/19/2019 8:07 PM\r\n- **Commit**: 5b508e86c9ce66af8b41bbc1f3b756e7724bcaa0\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19419-06\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19419-06\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19419-06\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19419-06\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19419-06\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10241368711","Type":"PullRequestEvent","CreatedAt":"2019-08-20T00:01:55","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1446","RelatedDescription":"Opened pull request \"Add support for typed-datasets\" (#1446) at dotnet/standard","RelatedBody":"This completes the support for typed datasets which also enables the dataset designer in VS.\r\n\r\nSee https://github.com/dotnet/corefx/pull/36528."},{"Id":"10238987990","Type":"PullRequestEvent","CreatedAt":"2019-08-19T17:08:11","Actor":"Anipik","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1440","RelatedDescription":"Merged pull request \"[release/3.0] Update dependencies from dotnet/arcade\" (#1440) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10229431603","Type":"PullRequestEvent","CreatedAt":"2019-08-17T12:40:26","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1445","RelatedDescription":"Merged pull request \"[release/3.0] Update dependencies from dotnet/corefx\" (#1445) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190816.11\r\n- **Date Produced**: 8/17/2019 3:27 AM\r\n- **Commit**: b3a4cdd6cd9b000ab05e585236455f1482a0bbf9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19416.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19416.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19416.11\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n"},{"Id":"10229414466","Type":"PullRequestEvent","CreatedAt":"2019-08-17T12:30:20","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1445","RelatedDescription":"Opened pull request \"[release/3.0] Update dependencies from dotnet/corefx\" (#1445) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190816.11\r\n- **Date Produced**: 8/17/2019 3:27 AM\r\n- **Commit**: b3a4cdd6cd9b000ab05e585236455f1482a0bbf9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19416.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19416.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19416.11\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n"},{"Id":"10229413962","Type":"PullRequestEvent","CreatedAt":"2019-08-17T12:30:05","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1444","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1444) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190816.10\r\n- **Date Produced**: 8/17/2019 2:57 AM\r\n- **Commit**: 9ea74a6d3ec09fef63975338105abdca6fac8e1c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19416.10\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19416.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19416.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10229384411","Type":"PullRequestEvent","CreatedAt":"2019-08-17T12:12:08","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1443","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1443) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10242426501","Type":"PullRequestEvent","CreatedAt":"2019-08-20T04:55:15","Actor":"ViktorHofer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40424","RelatedDescription":"Merged pull request \"Revert \"Enable build on hosted arm64 (#40311)\"\" (#40424) at dotnet/corefx","RelatedBody":"This reverts commit 176da26d634fd760d7c8c99956f2e8d3f7d485e7.\r\n\r\n@omajid this broke the testing scenario as the ArchGroup defaults to x86 after this change. will revert this to unblock others and we can work on a follow-up change.\r\n\r\nDiscovered in https://github.com/dotnet/corefx/issues/40052#issuecomment-522498432\r\n\r\ncc @Gnbrkm41 @Wraith2 @steveharter "},{"Id":"10242354890","Type":"PullRequestEvent","CreatedAt":"2019-08-20T04:35:23","Actor":"layomia","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40435","RelatedDescription":"Merged pull request \"Use named argument syntax for null values in json serialization methods\" (#40435) at dotnet/corefx","RelatedBody":"Addresses https://github.com/dotnet/corefx/pull/40432#discussion_r315486549. cc @ahsonkhan "},{"Id":"10242342300","Type":"IssuesEvent","CreatedAt":"2019-08-20T04:31:38","Actor":"layomia","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/40405","RelatedDescription":"Closed issue \"System.Text.Json.Serialization: Converters are ignored for types derived from supported base types\" (#40405) at dotnet/corefx","RelatedBody":"cc: @layomia,@ahsonkhan, @scalablecory, @steveharter\r\n\r\n### Related:\r\n- Add support for types derived from supported BCL collections #39001\r\n- Json serializer support for IEnumerable deserialization extensibilty #36640\r\n- Add support for generic interface-based collections in JsonSerializer #36756\r\n- Json serializer support for collections #36643\r\n\r\n### Description\r\n\r\nPull #39001 implemented by @layomia added support for serialization of types that implements natively supported collections without needing to create converters for them.\r\n\r\nUnfortunately the implementation treats all derived types as the base type, so it's not possible to create specialized collections with converters. E.g. `class MyCollection : List<int>` gets treated as `List<int>`.\r\n\r\nSpecialized collections is necessary if the json has multiple ways of declaring a list, e.g.\r\n``` json\r\n{\r\n  \"SpecialList\" : \r\n  {\r\n    \"Count\": 2,\r\n    \"Values\" : [ 1, 2 ]\r\n  },\r\n  \"NormalList\" : [ 1, 2 ] \r\n}\r\n``` \r\n\r\n``` CSharp\r\npublic class A\r\n{\r\n    [JsonConverter(typeof(MyCollectionConverter))] // this is ignored and converter for List<int> is used instead\r\n    public MyCollection SpecialList { get; set; }\r\n    public List<int> NormalList { get; set }\r\n}\r\n\r\n[JsonConverter(typeof(MyCollectionConverter))] // this is ignored and converter for List<int> is used instead\r\npublic class MyCollection : List<int> { }\r\n\r\npublic class MyCollectionConverter : JsonConverter<MyCollection>\r\n{\r\n    ....\r\n}\r\npublic class MyCollectionFactory : JsonConverterFactory\r\n{\r\n\tpublic override bool CanConvert(Type typeToConvert)\r\n    {\r\n        // this only sees List<int>\r\n    }\r\n}\r\npublic static void RunTest()\r\n{\r\n    JsonSerializerOptions options = new JsonSerializerOptions\r\n    {\r\n        Converters = \r\n        { \r\n            new MyCollectionFactory(), \r\n            new  MyCollectionConverter() // this is ignored and converter for List<int> is used \r\n        }\r\n    };\r\n\r\n    _ = JsonSerializer.Deserialize<A>(\"{}\", options);\r\n}\r\n```\r\n\r\n\r\n\r\nExpected priorities for getting the converter:\r\n```\r\n// Priority 1: attempt to get converter from JsonConverterAttribute on property.\r\n// Priority 2: Attempt to get custom converter added at runtime.\r\n// Priority 3: Attempt to get converter from [JsonConverter] on the type being converted.\r\n// Priority 4: Attempt to get built-in converter.\r\n```\r\nCurrent behavior\r\n```\r\n// Priority 0: if type is derived from supported type, use converter for base type\r\n// Priority 1: attempt to get converter from JsonConverterAttribute on property.\r\n// Priority 2: Attempt to get custom converter added at runtime.\r\n// Priority 3: Attempt to get converter from [JsonConverter] on the type being converted.\r\n// Priority 4: Attempt to get built-in converter.\r\n```\r\n\r\n\r\nFrom `JsonClassInfo.AddProperty` [source]From `JsonClassInfo.AddProperty` [source](https://github.com/dotnet/corefx/blob/3d72b56b8e7d1e4e44262be6c45c2aac580bbbc4/src/System.Text.Json/src/System/Text/Json/Serialization/JsonClassInfo.AddProperty.cs#L30-L41):\r\n``` CSharp\r\n    // Get implemented type, if applicable.\r\n    // Will return the propertyType itself if it's a non-enumerable, string, or natively supported collection.\r\n    Type implementedType = GetImplementedCollectionType(propertyType);\r\n    if (implementedType != propertyType)\r\n    {\r\n        jsonInfo = CreateProperty(implementedType, implementedType, implementedType, null, typeof(object), options);\r\n    }\r\n    else\r\n    {\r\n        jsonInfo = CreateProperty(propertyType, propertyType, propertyType, propertyInfo, classType, options);\r\n    }\r\n```\r\nIn my example `GetImplementedCollectionType(typeof(MyCollection))` will return `List<int>`.\r\n\r\nI'm currently looking into it to see if I can find a fix.\r\n\r\n--\r\nJust found another bug: Since `propertyInfo` is ignored any `JsonIgnoreAttribute` will also be ignored. \r\ne.g.\r\n```\r\npublic class C\r\n{\r\n    public int Version { get; set; }\r\n    \r\n    [JsonIgnore] // this will be ignored\r\n    public MyCollection { get; set; }\r\n}\r\n```\r\n"},{"Id":"10242338429","Type":"PullRequestEvent","CreatedAt":"2019-08-20T04:30:32","Actor":"layomia","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40432","RelatedDescription":"Merged pull request \"[release/3.0] Honor converters for implementing types (#40411)\" (#40432) at dotnet/corefx","RelatedBody":"Ports https://github.com/dotnet/corefx/pull/40411 to 3.0.\r\nFixes https://github.com/dotnet/corefx/issues/40405.\r\n\r\ncc @steveharter , @ahsonkhan, @ericstj, @eerhardt, @Anipik, @wtgodbe, @danmosemsft \r\n\r\n## Description\r\nPrior to this change, custom converters added to serialize and deserialize implementing types (enumerables that implement BCL enumerables e.g. `public class StackWrapper : Stack {}`) were being ignored. This blocks custom (de)serialization of implementing types in the serializer, including as a workaround for unsupported cases.\r\n\r\nThis change fixes this issue.\r\n\r\n## Customer Impact\r\n\r\nCustomers will now be able to implement custom serialization and deserialization for implementing types. This is particularly important as a workaround for unsupported cases.\r\n\r\nCustomer have complained about converters being ignored:\r\nhttps://github.com/dotnet/corefx/issues/40405\r\nhttps://github.com/dotnet/corefx/issues/40391\r\n\r\n## Regression?\r\n\r\nNo.\r\n\r\n## Risk\r\n\r\nLow. Extensive test cases were added for both supported and unsupported implementing-type custom serialization scenarios."},{"Id":"10242289770","Type":"PullRequestEvent","CreatedAt":"2019-08-20T04:16:38","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40349","RelatedDescription":"Merged pull request \"Make sure byte position for invalid JSON is consistent and the exception message is accurate\" (#40349) at dotnet/corefx","RelatedBody":"Builds on top of https://github.com/dotnet/corefx/pull/40303 to fix the remainder of #39974 (inconsistency in the exception for invalid JSON).\r\n\r\n~**Ignore the older commits (I'll rebase on top of master once the other PR is merged). This is what's worth focusing on for review.**\r\nhttps://github.com/dotnet/corefx/pull/40349/files/abd536325ede59c071b10351a666affc6666734a..5987b572061a510d90463b2b01265170b9072a5a~\r\n\r\n~I am not yet convinced this is the best approach for the fix for correctly reporting the byte position in line when an exception occurs while reading invalid JSON. Hence this is still WIP. I also want to add some more test cases. This change might be too disruptive for 3.0 (at least atm), and given it only affects exception messages for invalid JSON, it may not be worth it to port.~\r\n\r\nI also need to think about what guarantees, **if any,** we want to provide on `BytesConsumed`/`TokenStartIndex` and any other public state on the reader after an exception occurs, and if it is worth the potential performance cost to track that and report it consistently, or if it is fine to leave the reader state as \"undefined\".\r\n\r\ncc @bartonjs, @stephentoub, @GSPP"},{"Id":"10242239847","Type":"PullRequestEvent","CreatedAt":"2019-08-20T04:01:37","Actor":"carlossanlop","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40433","RelatedDescription":"Merged pull request \"Bump IntelliSense nupkg version to Preview 8 in eng/Versions.props - Last batch\" (#40433) at dotnet/corefx","RelatedBody":"Updated the nuget package to include the last batch of APIs that were documented last Friday for System.Data, System.Text.Json, WPF and Winforms."},{"Id":"10242144511","Type":"PullRequestEvent","CreatedAt":"2019-08-20T03:34:45","Actor":"layomia","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/40435","RelatedDescription":"Opened pull request \"Use named argument syntax for null values in json serialization methods\" (#40435) at dotnet/corefx","RelatedBody":"Addresses https://github.com/dotnet/corefx/pull/40432#discussion_r315486549. cc @ahsonkhan "},{"Id":"10242125700","Type":"IssuesEvent","CreatedAt":"2019-08-20T03:29:33","Actor":"layomia","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/40305","RelatedDescription":"Closed issue \"System.Text.Json - JsonSerializer throws NotSupportedException for ignored ConcurrentDictionary property\" (#40305) at dotnet/corefx","RelatedBody":"The following code throws an exception in NET Core 3.0.0-preview8:\r\n```csharp\r\nusing System.Collections.Concurrent;\r\nusing System.Text.Json;\r\nusing System.Text.Json.Serialization;\r\n\r\nnamespace JsonIgnoreTest\r\n{\r\n    class JsonIgnoreTest\r\n    {\r\n        [JsonIgnore]\r\n        public ConcurrentDictionary<object, object> MyDict { get; set; }\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            JsonSerializer.Serialize(new JsonIgnoreTest());\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nOutput:\r\n```\r\nUnhandled exception. System.NotSupportedException: The collection type 'System.Collections.Generic.IDictionary`2[System.Object,System.Object]' is not supported.\r\n   at System.Text.Json.JsonClassInfo.GetElementType(Type propertyType, Type parentType, MemberInfo memberInfo, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonClassInfo.CreateProperty(Type declaredPropertyType, Type runtimePropertyType, Type implementedPropertyType, PropertyInfo propertyInfo, Type parentClassType, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonClassInfo.AddProperty(Type propertyType, PropertyInfo propertyInfo, Type classType, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonClassInfo..ctor(Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializerOptions.GetOrAddClass(Type classType)\r\n   at System.Text.Json.WriteStackFrame.Initialize(Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializer.WriteCore(Utf8JsonWriter writer, PooledByteBufferWriter output, Object value, Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializer.WriteCore(PooledByteBufferWriter output, Object value, Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializer.WriteCoreString(Object value, Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializer.Serialize[TValue](TValue value, JsonSerializerOptions options)\r\n   at JsonIgnoreTest.Program.Main(String[] args) in C:\\Users\\user\\source\\repos\\JsonIgnoreTest\\JsonIgnoreTest\\Program.cs:line 17\r\n```\r\nThe problem occurs when the key of the ConcurrentDictionary is not a string.\r\n`ConcurrentDictionary<string, object>`, `IDictionary<object, object>` and `Dictionary<object, object>` do not throw an exception."},{"Id":"10242119661","Type":"PullRequestEvent","CreatedAt":"2019-08-20T03:27:51","Actor":"layomia","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40413","RelatedDescription":"Merged pull request \"[release/3.0] Honor JsonIgnore attribute when applied to unsupported collections\" (#40413) at dotnet/corefx","RelatedBody":"Ports https://github.com/dotnet/corefx/pull/40401 to 3.0\r\n\r\ncc @steveharter, @ericstj, @danmosemsft, @ahsonkhan @eerhardt, @Anipik, @wtgodbe\r\n\r\n## Description\r\nFixes bug where the JsonIgnore attribute was not being honored for unsupported collections.\r\n\r\nThis change allows us to (de)serialize without throwing NotSupported/JsonException when unsupported collections are ignored like in this scenario:\r\n\r\n```csharp\r\nclass JsonIgnoreTest\r\n{\r\n    [JsonIgnore]\r\n    public ConcurrentDictionary<object, object> MyDict { get; set; }\r\n}\r\n```\r\n\r\n## Customer Impact\r\nProvides expected behavior in scenario above.\r\nFixed #40305 in master.\r\n\r\n## Regression?\r\n\r\nNo.\r\n\r\n## Risk\r\n\r\nLow. Relevant test cases were added."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10241801056","Type":"IssuesEvent","CreatedAt":"2019-08-20T02:04:01","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37779","RelatedDescription":"Closed issue \"Warning diagnostics escalated to errors doesn't block emitting the output\" (#37779) at dotnet/roslyn","RelatedBody":"**Version Used**: Version 16.3.0 Preview 3.0 [29205.144.master], Roslyn part is 3.3.0-beta2-19401-05+8ed56b826700926009731ca4d3de0a4e4e652969\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new .NET Core console application.\r\n2. Update the contents of Main to have:\r\n```c#\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n\r\n            return;\r\n\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n```\r\nThis is to produce a warning (unreachable code).\r\n3. Add an .editorconfig and add `dotnet_diagnostic.CS0162.severity = error` to it so it applies to the file.\r\n4. Build. In the build output, you see a build error. (Note: it may not reflect in the IDE due to feature flag concerns at the moment.)\r\n5. Build a second time.\r\n\r\n**Expected Behavior**: the second build still shows an error.\r\n**Actual Behavior**: the second build just says \"succeeded\".\r\n\r\nThis is happening because the first build, despite emitting an error, is still outputting it's output binary. Thus, the second build sees \"everything up to date\" and simply builds successfully."},{"Id":"10241800959","Type":"PullRequestEvent","CreatedAt":"2019-08-20T02:04:01","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37948","RelatedDescription":"Merged pull request \"Bail out from emit in presence of warnings reported as errors\" (#37948) at dotnet/roslyn","RelatedBody":"Fixes #37779"},{"Id":"10241677130","Type":"PullRequestEvent","CreatedAt":"2019-08-20T01:30:09","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38120","RelatedDescription":"Merged pull request \"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps\" (#38120) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps\ngit reset --hard upstream/release/dev16.4-preview1-vs-deps\ngit merge upstream/release/dev16.4-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10241654438","Type":"PullRequestEvent","CreatedAt":"2019-08-20T01:23:50","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38126","RelatedDescription":"Opened pull request \"Update override completion for nullable reference support\" (#38126) at dotnet/roslyn","RelatedBody":"- Ensure we show the ? in all the appropriate places\r\n- Ensure we don't spit ? if we shouldn't\r\n- Ensure we drop ? for the special case of the ToString return. See in-code comments for details."},{"Id":"10241613712","Type":"PullRequestEvent","CreatedAt":"2019-08-20T01:12:18","Actor":"svick","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38125","RelatedDescription":"Opened pull request \"Replace obsolete vbNewLine\" (#38125) at dotnet/roslyn","RelatedBody":"When I run `build.cmd`, I get the following error:\r\n\r\n> C:\\code\\roslyn\\src\\Compilers\\VisualBasic\\Test\\Symbol\\SymbolsTests\\SymbolErrorTests.vb(10539,25): error BC40000: 'Public Const vbNewLine As String' is obsolete: 'For a carriage return and line feed, use vbCrLf.  For the current platform's newline, use System.Environment.NewLine.'. [C:\\code\\roslyn\\src\\Compilers\\VisualBasic\\Test\\Symbol\\Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests.vbproj]\r\n\r\nThis change fixes that."},{"Id":"10241603602","Type":"PullRequestEvent","CreatedAt":"2019-08-20T01:09:15","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38112","RelatedDescription":"Merged pull request \"Fix null reference error when opening a miscellaneous files file\" (#38112) at dotnet/roslyn","RelatedBody":"Fix #38111"},{"Id":"10241603584","Type":"IssuesEvent","CreatedAt":"2019-08-20T01:09:15","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/38111","RelatedDescription":"Closed issue \"Null reference error when F5 and opening a solution in Roslyn.sln\" (#38111) at dotnet/roslyn","RelatedBody":"System.InvalidOperationException\r\n  HResult=0x80131509\r\n  Message=Unexpected Null\r\n  Source=Microsoft.CodeAnalysis.Workspaces\r\n  StackTrace:\r\n   at Roslyn.Utilities.Contract.Fail(String message) in D:\\git\\roslyn2\\src\\Workspaces\\Core\\Portable\\Utilities\\Contract.cs:line 56\r\n   at Roslyn.Utilities.Contract.ThrowIfNull[T](T value, String message) in D:\\git\\roslyn2\\src\\Workspaces\\Core\\Portable\\Utilities\\Contract.cs:line 22\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.MetadataAsSource.MetadataAsSourceFileService.TryAddDocumentToWorkspace(String filePath, ITextBuffer buffer) in D:\\git\\roslyn2\\src\\EditorFeatures\\Core\\Implementation\\MetadataAsSource\\MetadataAsSourceFileService.cs:line 227\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.MiscellaneousFilesWorkspace.AttachToDocument(String moniker, ITextBuffer textBuffer) in D:\\git\\roslyn2\\src\\VisualStudio\\Core\\Def\\Implementation\\ProjectSystem\\MiscellaneousFilesWorkspace.cs:line 254\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.MiscellaneousFilesWorkspace.TrackOpenedDocument(String moniker, ITextBuffer textBuffer) in D:\\git\\roslyn2\\src\\VisualStudio\\Core\\Def\\Implementation\\ProjectSystem\\MiscellaneousFilesWorkspace.cs:line 149\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.MiscellaneousFilesWorkspace.Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IRunningDocumentTableEventListener.OnOpenDocument(String moniker, ITextBuffer textBuffer, IVsHierarchy _) in D:\\git\\roslyn2\\src\\VisualStudio\\Core\\Def\\Implementation\\ProjectSystem\\MiscellaneousFilesWorkspace.cs:line 74\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.RunningDocumentTableEventTracker.OnAfterAttributeChangeEx(UInt32 docCookie, UInt32 grfAttribs, IVsHierarchy pHierOld, UInt32 itemidOld, String pszMkDocumentOld, IVsHierarchy pHierNew, UInt32 itemidNew, String pszMkDocumentNew) in D:\\git\\roslyn2\\src\\VisualStudio\\Core\\Def\\Implementation\\ProjectSystem\\RunningDocumentTableEventTracker.cs:line 94"},{"Id":"10241574515","Type":"PullRequestEvent","CreatedAt":"2019-08-20T01:00:34","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38006","RelatedDescription":"Merged pull request \"Merge release/dev16.3-preview2-vs-deps to master-vs-deps\" (#38006) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from release/dev16.3-preview2-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.3-preview2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10241573520","Type":"IssuesEvent","CreatedAt":"2019-08-20T01:00:18","Actor":"ufcpp","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/38124","RelatedDescription":"Opened issue \"DoesNotReturnIf incorrectly handled\" (#38124) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nVS 16.3.0 Preview 2.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\nstatic void M1(string? s)\r\n{\r\n    Debug.Assert(s != null);\r\n    Console.WriteLine(s.Length); // no warning\r\n}\r\n\r\nstatic void M2(string? s)\r\n{\r\n    Debug.Assert(false);\r\n    Console.WriteLine(s.Length); // CS8602\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nBoth `M1` and `M2` have no warning.\r\n\r\n**Actual Behavior**:\r\n\r\n`M2` produces CS8602 warning.\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10241859489","Type":"PullRequestEvent","CreatedAt":"2019-08-20T02:19:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7708","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7708) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @madmir"},{"Id":"10241581441","Type":"PullRequestEvent","CreatedAt":"2019-08-20T01:02:35","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7708","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7708) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"10240074489","Type":"PullRequestEvent","CreatedAt":"2019-08-19T19:53:03","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7707","RelatedDescription":"Opened pull request \"Two small improvements in SuperIlc\" (#7707) at dotnet/corert","RelatedBody":"1) Add support for another CPAOT vs. Crossgen instrumentation dealing\r\nwith the check MethodRequiresMarshaling used for inlining PInvokes.\r\n\r\n2) Include output file name extension in compiler log and response\r\nfile path - there are several Pri#1 tests that include an exe and\r\ndll pair with the same name. These had previously clashing response\r\nand log file names, causing weird race conditions in parallel build.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"10238256533","Type":"PullRequestEvent","CreatedAt":"2019-08-19T15:30:16","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7700","RelatedDescription":"Merged pull request \"Implement getILIntrinsicImplementation and friends\" (#7700) at dotnet/corert","RelatedBody":"This ports a couple handcrafted IL intrinsics from CoreCLR (some of which are required for correctness and some only for perf). See code around getILIntrinsicImplementation in CoreCLR's JitInterface.\r\n\r\nThis is needed to be able to compile an actually working 3.0 R2R CoreLib.\r\n\r\nI've used CoreRT's `ILProvider` instead of handcrafting buffers with IL bytes like crossgen does. It's more comfortable on the generation side and it also lets us share the provider for `Unsafe` intrinsics with what we already wrote for full AOT. But we need to fix up tokens in the generated IL in JitInterface...\r\n\r\nThe `FindGenericMethodArgTypeSpec` also exists in crossgen (under the same name).  It's part of the token rewriting business. It's kind of gross, but it works."},{"Id":"10236379419","Type":"IssuesEvent","CreatedAt":"2019-08-19T11:28:34","Actor":"janvorli","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/644","RelatedDescription":"Closed issue \"Implement various remaining PAL functions for Unix\" (#644) at dotnet/corert","RelatedBody":"We need to implement:\n- PalGetCurrentProcessorNumber for OSX / FreeBSD\n- PalAllocateThunksFromTemplate\n- TerminateProcess\n- GetEnvironmentVariableW\n- PalGetModuleBounds - getting the upper limit\n- PalReadFileContents\n- PalGetModuleFileName\n- GetCurrentThreadId\n- FlushFileBuffers / WriteFile (probably reimplement their usage by CRT functions)\n- GCToOSInterface::VirtualReset\n- GCToOSInterface::GetLargestOnDieCacheSize\n"},{"Id":"10234490144","Type":"IssuesEvent","CreatedAt":"2019-08-19T06:40:24","Actor":"maikebing","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7706","RelatedDescription":"Closed issue \"Use  PtrToStructure with UnmanagedType.ByValTStr will lose data, is it a BUG?\" (#7706) at dotnet/corert","RelatedBody":"Code:\r\n\r\n```CSharp\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi, Pack = 1)]\r\n    public struct MSG_HEAD\r\n    {\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string NetNo;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string PlazaNo;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 3)] public string LaneID;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 14)] public string DDHM;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1)] public string LaneType;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 5)] public string MsgLen;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string MsgType;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string MsgVersion;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string Reserved;\r\n    };//------MSG_HEAD Size:32\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var data = System.Text.Encoding.ASCII.GetBytes( \"0423X9120190805111432100073A0020010333333\");\r\n            Type _t_msg_head = typeof(MSG_HEAD);\r\n            int _rs_msg_head = Marshal.SizeOf(_t_msg_head);\r\n            IntPtr _bf_msg_head = Marshal.AllocHGlobal(_rs_msg_head);\r\n            Marshal.Copy(data, 0, _bf_msg_head, _rs_msg_head);\r\n            MSG_HEAD  HEAD = (MSG_HEAD)Marshal.PtrToStructure(_bf_msg_head, _t_msg_head);\r\n            Marshal.FreeHGlobal(_bf_msg_head);\r\n            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(HEAD));\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nActual:\r\n```\r\n{\r\n\t\"NetNo\": \"0\",\r\n\t\"PlazaNo\": \"2\",\r\n\t\"LaneID\": \"X9\",\r\n\t\"DDHM\": \"2019080511143\",\r\n\t\"LaneType\": \"\",\r\n\t\"MsgLen\": \"0007\",\r\n\t\"MsgType\": \"A\",\r\n\t\"MsgVersion\": \"0\",\r\n\t\"Reserved\": \"0\"\r\n}\r\n```\r\nExpect\r\n```\r\n0423X9120190805111432100073A0020010333333\r\n{\r\n\t\"NetNo\": \"04\",\r\n\t\"PlazaNo\": \"23\",\r\n\t\"LaneID\": \"X91\",\r\n\t\"DDHM\": \"20190805111432\",\r\n\t\"LaneType\": \"1\",\r\n\t\"MsgLen\": \"00073\",\r\n\t\"MsgType\": \"A0\",\r\n\t\"MsgVersion\": \"02\",\r\n\t\"Reserved\": \"00\"\r\n}\r\n```\r\n\r\nThe value of each field is one byte less than the SizeConst specify!\r\n"},{"Id":"10233837441","Type":"IssuesEvent","CreatedAt":"2019-08-19T03:41:42","Actor":"maikebing","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7706","RelatedDescription":"Opened issue \"use  PtrToStructure with UnmanagedType.ByValTStr will lose data, is it A BUG?\" (#7706) at dotnet/corert","RelatedBody":"Code:\r\n\r\n```CSharp\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi, Pack = 1)]\r\n    public struct MSG_HEAD\r\n    {\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string NetNo;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string PlazaNo;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 3)] public string LaneID;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 14)] public string DDHM;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1)] public string LaneType;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 5)] public string MsgLen;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string MsgType;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string MsgVersion;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string Reserved;\r\n    };//------MSG_HEAD Size:32\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var data = System.Text.Encoding.ASCII.GetBytes( \"0423X9120190805111432100073A0020010333333\");\r\n            Type _t_msg_head = typeof(MSG_HEAD);\r\n            int _rs_msg_head = Marshal.SizeOf(_t_msg_head);\r\n            IntPtr _bf_msg_head = Marshal.AllocHGlobal(_rs_msg_head);\r\n            Marshal.Copy(data, 0, _bf_msg_head, _rs_msg_head);\r\n            MSG_HEAD  HEAD = (MSG_HEAD)Marshal.PtrToStructure(_bf_msg_head, _t_msg_head);\r\n            Marshal.FreeHGlobal(_bf_msg_head);\r\n            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(HEAD));\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nActual:\r\n```\r\n{\r\n\t\"NetNo\": \"0\",\r\n\t\"PlazaNo\": \"2\",\r\n\t\"LaneID\": \"X9\",\r\n\t\"DDHM\": \"2019080511143\",\r\n\t\"LaneType\": \"\",\r\n\t\"MsgLen\": \"0007\",\r\n\t\"MsgType\": \"A\",\r\n\t\"MsgVersion\": \"0\",\r\n\t\"Reserved\": \"0\"\r\n}\r\n```\r\nExpect\r\n```\r\n0423X9120190805111432100073A0020010333333\r\n{\r\n\t\"NetNo\": \"04\",\r\n\t\"PlazaNo\": \"23\",\r\n\t\"LaneID\": \"X91\",\r\n\t\"DDHM\": \"20190805111432\",\r\n\t\"LaneType\": \"1\",\r\n\t\"MsgLen\": \"00073\",\r\n\t\"MsgType\": \"A0\",\r\n\t\"MsgVersion\": \"02\",\r\n\t\"Reserved\": \"00\"\r\n}\r\n```\r\n\r\nThe value of each field is one byte less than the SizeConst specify!\r\n"},{"Id":"10232406857","Type":"PullRequestEvent","CreatedAt":"2019-08-18T17:14:39","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7704","RelatedDescription":"Merged pull request \"Account for .NET Core 3.0 Preview 8 SDK changes\" (#7704) at dotnet/corert","RelatedBody":"Fixes #7703"},{"Id":"10232406854","Type":"IssuesEvent","CreatedAt":"2019-08-18T17:14:39","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7703","RelatedDescription":"Closed issue \"dotnet publish is broken by a preview 8 SDK change\" (#7703) at dotnet/corert","RelatedBody":"The problem has already been described in #7575.\r\n(I don't think I have the perms to simply reopen it)"},{"Id":"10231481860","Type":"PullRequestEvent","CreatedAt":"2019-08-18T09:51:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7705","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7705) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"10231309820","Type":"PullRequestEvent","CreatedAt":"2019-08-18T08:13:03","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7705","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7705) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"10231295126","Type":"PullRequestEvent","CreatedAt":"2019-08-18T08:04:04","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7702","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7702) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10241476311","Type":"PullRequestEvent","CreatedAt":"2019-08-20T00:32:10","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3528","RelatedDescription":"Merged pull request \"Miscellaneous perf fixes\" (#3528) at dotnet/sdk","RelatedBody":"#### Description\r\nSeveral different perf improvements:\r\n\r\n- Don't run ProcessFrameworkReferences target if there are no FrameworkReferences\r\n- Support NuGet semantic versions in packageoverrides.txt\r\n  - Without this, the packageoverrides.txt from the ASP.NET Core targeting pack will be ignored for prerelease versions of the SDK\r\n- Don't include default `PackageConflictOverrides` for .NET Core 3 and higher\r\n  - These should come from the packageoverrides.txt file in the targeting pack.  Also, the package name for the default overrides is incorrect for .NET Core 3.0+\r\n\r\n#### Customer Impact\r\nFaster build times.  On my machine:\r\n\r\n Scenario Name       | Test Name          | Metric         | Unit | Iterations |   Average |  STDEV.S |       Min |       Max\r\n:------------------- |:------------------ |:-------------- |:----:|:----------:| ---------:| --------:| ---------:| ---------:\r\nBuild Web Large 3.0 | Build (no changes) - Before| Execution Time |  ms  |     9      | 19024.212 |   245.835 | 18597.847 |  19386.137\r\nBuild Web Large 3.0 | Build (no changes) - After | Execution Time |  ms  |     9      | 17508.622 | 2037.929 | 15226.639 | 21639.623\r\n\r\n#### Regression?\r\nNo. \r\n\r\n#### Risk\r\nLow"},{"Id":"10241239060","Type":"PullRequestEvent","CreatedAt":"2019-08-19T23:27:10","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3543","RelatedDescription":"Merged pull request \"Fix regression in selecting default RuntimeIdentifier\" (#3543) at dotnet/sdk","RelatedBody":"#### Description\r\nFixed change in behavior (regression) that was introduced when we started including the RuntimeIdentifier graph in the SDK and passing it to NuGet.\r\n\r\n#### Customer Impact\r\nThe change in behavior had to do with the automatic selection of the PlatformTarget.  In specific cases, the PlatformTarget would be set to x86, where it would have previously been set to AnyCPU.  This is because previously you had to have a (transitive) dependency on the Microsoft.NETCore.Platforms package to get the RuntimeIdentifier graph, and without it, you wouldn't get assets that didn't exactly match the default RuntimeIdentifier (win7-x86).  Since no native assets were found, the PlatformTarget defaulted to AnyCPU, even though if the RuntimeGraph had been available there would have been native assets.\r\n\r\nRoslyn ran into this, their apps switched to x86 unintentionally.  We are not sure how many other customers would be impacted, as the combination of factors necessary to see the behavior change is somewhat of an edge case.\r\n\r\n#### Regression?\r\nYes, regressed with #3406\r\n\r\n#### Risk\r\nLow\r\n\r\nFixes #3495\r\n\r\nI thought of a \"clever\" way to fix this regression.  We revert to the AnyCPU PlatformTarget if:\r\n- There are no native assets\r\n- There are native assets, but the Microsoft.NETCore.Platforms package (which was previously necessary to get the RID graph) is not transitively referenced, and there are no native assets for the exact RID win7-x86.\r\n\r\nThis should match the PlatformTarget which SDKs prior to the 3.0 SDK would have used."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"482494962","IsPullRequest":true,"CreatedAt":"2019-08-20T05:13:16","Actor":"elinor-fung","Number":"26259","RawContent":null,"Title":"Add bundle tool for creating a bundle using HostModel APIs","State":"closed","Body":"The bundle tool will be placed in the same directory as other managed tools build from coreclr (`bin/Product/<configuration>`)\r\n\r\nUsage for testing with `corebundle`\r\n- Create/publish self-contained app (or manually create a folder representing a self-contained app)\r\n- Copy `corebundle` to app's publish output and rename file to match app exe name\r\n- Run `dotnet bundle.dll --source <appPublishOutput> --host <appExeName>`\r\n\r\ncc @janvorli ","Url":"https://github.com/dotnet/coreclr/pull/26259","RelatedDescription":"Closed or merged PR \"Add bundle tool for creating a bundle using HostModel APIs\" (#26259)"},{"Id":"482468558","IsPullRequest":true,"CreatedAt":"2019-08-20T02:21:40","Actor":"hoyosjs","Number":"26256","RawContent":null,"Title":"Use function-local StackingAllocator for EnC added methods","State":"closed","Body":"`tl;dr` Port of #26106 to solve issue #26016 caused by PR #24177\r\n\r\n#### Description\r\n\r\nPR #24177 made a changed the way we cached the `StackingAllocator` in the `Thread` object. Prior to this change, the compiler optimized the access by inserting the field offset; the offset was a bogus value, but the code path never uses the value so we never had any complaints. After the change, the access happened, but the code runs on the debugger thread, where the `Thread` object is not available, and this results in an AV when users try to add a method through EnC. This change adds a local `StackingAllocator` to prevent such AV and correct prior behavior. \r\n\r\n#### Customer Impact\r\n\r\nThis issue makes it impossible for users, directly impacting the inner loop scenarios. It's currently marked as a blocker in Visual Studio.\r\n\r\n#### Regression?\r\n\r\nYes, 3.0 preview 6 was the first time this was visible to customers.\r\n\r\n#### Risk\r\n\r\nVery low, code path doesn't use the variable now, and fixes silent bug from before. Only possible to trigger it in Edit & Continue scenarios, and this actually correct prior behavior.","Url":"https://github.com/dotnet/coreclr/pull/26256","RelatedDescription":"Closed or merged PR \"Use function-local StackingAllocator for EnC added methods\" (#26256)"},{"Id":"482600581","IsPullRequest":true,"CreatedAt":"2019-08-20T01:33:29","Actor":"josalem","Number":"26270","RawContent":null,"Title":"[master] Move TypeSystemLog::OnKeywordsChanged","State":"open","Body":"Move TypeSystemLog::OnKeywordsChanged from EtwCallback to EtwCallbackCommon to enable this same behavior in ETW and EventPipe.   This unblocks parity for GCHeapDumps between ETW and EventPipe.  This callback modifies some state in the type logging system used by ETW and EventPipe, but is currently _only_ invoked by ETW.  These state changes affect \r\n\r\nI'm planning on doing some more manual testing of this change since some of the tracing scenarios may not be covered by CI.\r\n\r\nThis change is small and targeted in the event we port this to 3.x, but there are are potentially more things that only exist in `EtwCallback` that may need to be moved to `EtwCallbackCommon`.\r\n\r\nCC- @tommcdon ","Url":"https://github.com/dotnet/coreclr/pull/26270","RelatedDescription":"Open PR \"[master] Move TypeSystemLog::OnKeywordsChanged\" (#26270)"},{"Id":"482600274","IsPullRequest":false,"CreatedAt":"2019-08-20T01:31:52","Actor":"VincentBu","Number":"26269","RawContent":null,"Title":"System.Reflection.MetadataLoadContext.Tests failed with System.AccessViolationException","State":"open","Body":"**Job:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/da69150d-e30b-44c8-91a0-d4a0593a4f4d/workitems/System.Reflection.MetadataLoadContext.Tests/console\r\n\r\n**Failed tests:**\r\nSystem.Reflection.MetadataLoadContext.Tests\r\n\r\n**Log:**\r\n```\r\nFatal error. System.AccessViolationException: Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\r\n   at System.Reflection.TypeLoading.Ecma.EcmaModule.GetGenericTypeParameter(System.Reflection.TypeLoading.TypeContext, Int32)\r\n   at System.Reflection.Metadata.Ecma335.SignatureDecoder`2[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Reflection.TypeLoading.TypeContext, System.Reflection.MetadataLoadContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].DecodeType(System.Reflection.Metadata.BlobReader ByRef, Boolean)\r\n   at System.Reflection.Metadata.Ecma335.SignatureDecoder`2[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Reflection.TypeLoading.TypeContext, System.Reflection.MetadataLoadContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].DecodeTypeSequence(System.Reflection.Metadata.BlobReader ByRef)\r\n   at System.Reflection.Metadata.Ecma335.SignatureDecoder`2[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Reflection.TypeLoading.TypeContext, System.Reflection.MetadataLoadContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].DecodeGenericTypeInstance(System.Reflection.Metadata.BlobReader ByRef)\r\n   at System.Reflection.Metadata.Ecma335.SignatureDecoder`2[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Reflection.TypeLoading.TypeContext, System.Reflection.MetadataLoadContext, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]].DecodeType(System.Reflection.Metadata.BlobReader ByRef, Boolean, Int32)\r\n   at System.Reflection.TypeLoading.Ecma.EcmaResolver.ResolveTypeSpec(System.Reflection.Metadata.TypeSpecificationHandle, System.Reflection.TypeLoading.Ecma.EcmaModule, System.Reflection.TypeLoading.TypeContext ByRef)\r\n   at System.Reflection.TypeLoading.Ecma.EcmaResolver.ResolveTypeDefRefOrSpec(System.Reflection.Metadata.EntityHandle, System.Reflection.TypeLoading.Ecma.EcmaModule, System.Reflection.TypeLoading.TypeContext ByRef)\r\n   at System.Reflection.TypeLoading.Ecma.EcmaDefinitionType.SpecializeBaseType(System.Reflection.TypeLoading.RoType[])\r\n   at System.Reflection.TypeLoading.RoType.ComputeBaseType()\r\n   at System.Reflection.TypeLoading.RoType.GetRoBaseType()\r\n   at System.Reflection.Runtime.BindingFlagSupport.QueriedMemberList`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Create(System.Reflection.TypeLoading.RoType, System.String, Boolean, Boolean)\r\n   at System.Reflection.TypeLoading.RoType+TypeComponentsCache.GetQueriedMembers[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](Boolean)\r\n   at System.Reflection.TypeLoading.RoType.Query[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.String, System.Reflection.BindingFlags, System.Func`2<System.__Canon,Boolean>)\r\n   at System.Reflection.TypeLoading.RoType.QuerySpecificMemberTypeIfRequested[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Reflection.MemberTypes, System.String, System.Reflection.BindingFlags, System.Func`2<System.Reflection.MemberInfo,Boolean>, System.Reflection.MemberTypes, System.Reflection.Runtime.BindingFlagSupport.QueryResult`1<System.__Canon> ByRef)\r\n   at System.Reflection.TypeLoading.RoType.GetMemberImpl(System.String, System.Reflection.MemberTypes, System.Reflection.BindingFlags)\r\n   at System.Reflection.Tests.IdentityTests.Identity_ReflectedType1()\r\n   at System.RuntimeMethodHandle.InvokeMethod(System.Object, System.Object[], System.Signature, Boolean, Boolean)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CallTestMethod(System.Object)\r\n   at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1+<<InvokeTestMethodAsync>b__1>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<InvokeTestMethodAsync>b__1>d<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestInvoker`1+<>c__DisplayClass48_1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].<InvokeTestMethodAsync>b__1()\r\n   at Xunit.Sdk.ExecutionTimer+<AggregateAsync>d__4.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExecutionTimer+<AggregateAsync>d__4, xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<AggregateAsync>d__4 ByRef)\r\n   at Xunit.Sdk.ExecutionTimer.AggregateAsync(System.Func`1<System.Threading.Tasks.Task>)\r\n   at Xunit.Sdk.ExceptionAggregator+<RunAsync>d__9.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__9, xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__9 ByRef)\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync(System.Func`1<System.Threading.Tasks.Task>)\r\n   at Xunit.Sdk.TestInvoker`1+<InvokeTestMethodAsync>d__48[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<InvokeTestMethodAsync>d__48[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<InvokeTestMethodAsync>d__48<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InvokeTestMethodAsync(System.Object)\r\n   at Xunit.Sdk.TestInvoker`1+<<RunAsync>b__47_0>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestInvoker`1+<<RunAsync>b__47_0>d[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<<RunAsync>b__47_0>d<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestInvoker`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].<RunAsync>b__47_0()\r\n   at Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.Decimal, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__10`1<System.Decimal> ByRef)\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestMethodAsync(Xunit.Sdk.ExceptionAggregator)\r\n   at Xunit.Sdk.XunitTestRunner+<InvokeTestAsync>d__4.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.XunitTestRunner+<InvokeTestAsync>d__4, xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<InvokeTestAsync>d__4 ByRef)\r\n   at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(Xunit.Sdk.ExceptionAggregator)\r\n   at Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.ExceptionAggregator+<RunAsync>d__10`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.core, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__10`1<System.__Canon> ByRef)\r\n   at Xunit.Sdk.ExceptionAggregator.RunAsync[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](System.Func`1<System.Threading.Tasks.Task`1<System.__Canon>>)\r\n   at Xunit.Sdk.TestRunner`1+<RunAsync>d__43[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestRunner`1+<RunAsync>d__43[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__43<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.XunitTestCaseRunner.RunTestAsync()\r\n   at Xunit.Sdk.TestCaseRunner`1+<RunAsync>d__19[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCaseRunner`1+<RunAsync>d__19[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__19<System.__Canon> ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.TestCaseRunner`1+<RunAsync>d__19[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__19<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestCaseRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.XunitTestMethodRunner.RunTestCaseAsync(Xunit.Sdk.IXunitTestCase)\r\n   at Xunit.Sdk.TestMethodRunner`1+<RunTestCasesAsync>d__32[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestMethodRunner`1+<RunTestCasesAsync>d__32[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunTestCasesAsync>d__32<System.__Canon> ByRef)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Start[[Xunit.Sdk.TestMethodRunner`1+<RunTestCasesAsync>d__32[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunTestCasesAsync>d__32<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestMethodRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunTestCasesAsync()\r\n   at Xunit.Sdk.TestMethodRunner`1+<RunAsync>d__31[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestMethodRunner`1+<RunAsync>d__31[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__31<System.__Canon> ByRef)\r\n   at Xunit.Sdk.XunitTestClassRunner.RunTestMethodAsync(Xunit.Abstractions.ITestMethod, Xunit.Abstractions.IReflectionMethodInfo, System.Collections.Generic.IEnumerable`1<Xunit.Sdk.IXunitTestCase>, System.Object[])\r\n   at Xunit.Sdk.TestClassRunner`1+<RunTestMethodsAsync>d__38[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestClassRunner`1+<RunTestMethodsAsync>d__38[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunTestMethodsAsync>d__38<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestClassRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunTestMethodsAsync()\r\n   at Xunit.Sdk.TestClassRunner`1+<RunAsync>d__37[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestClassRunner`1+<RunAsync>d__37[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__37<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestClassRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.TestCollectionRunner`1+<RunTestClassesAsync>d__28[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCollectionRunner`1+<RunTestClassesAsync>d__28[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunTestClassesAsync>d__28<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestCollectionRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunTestClassesAsync()\r\n   at Xunit.Sdk.TestCollectionRunner`1+<RunAsync>d__27[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[[Xunit.Sdk.TestCollectionRunner`1+<RunAsync>d__27[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], xunit.execution.dotnet, Version=2.4.1.0, Culture=neutral, PublicKeyToken=8d05b1bb7a6fdb6c]](<RunAsync>d__27<System.__Canon> ByRef)\r\n   at Xunit.Sdk.TestCollectionRunner`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].RunAsync()\r\n   at Xunit.Sdk.XunitTestAssemblyRunner+<>c__DisplayClass14_2.<RunTestCollectionsAsync>b__2()\r\n   at System.Threading.Tasks.Task`1[[System.__Canon, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].InnerInvoke()\r\n   at System.Threading.Tasks.Task+<>c.<.cctor>b__274_0(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\n   at System.Threading.Tasks.Task.ExecuteEntry()\r\n   at System.Threading.Tasks.SynchronizationContextTaskScheduler+<>c.<.cctor>b__8_0(System.Object)\r\n   at Xunit.Sdk.MaxConcurrencySyncContext.RunOnSyncContext(System.Threading.SendOrPostCallback, System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc()\r\n   at Xunit.Sdk.XunitWorkerThread+<>c.<QueueUserWorkItem>b__5_0(System.Object)\r\n   at System.Threading.Tasks.Task.InnerInvoke()\r\n   at System.Threading.Tasks.Task+<>c.<.cctor>b__274_0(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, System.Threading.Thread)\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread)\r\n   at System.Threading.Tasks.ThreadPoolTaskScheduler+<>c.<.cctor>b__10_0(System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart(System.Object)\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26269","RelatedDescription":"Open issue \"System.Reflection.MetadataLoadContext.Tests failed with System.AccessViolationException\" (#26269)"},{"Id":"482504044","IsPullRequest":true,"CreatedAt":"2019-08-20T01:25:15","Actor":"AaronRobinsonMSFT","Number":"26261","RawContent":null,"Title":"Create flag to skip test jobs on internal builds","State":"closed","Body":"Fixes #26162\r\n\r\n/cc @dotnet/coreclr-infra ","Url":"https://github.com/dotnet/coreclr/pull/26261","RelatedDescription":"Closed or merged PR \"Create flag to skip test jobs on internal builds\" (#26261)"},{"Id":"482594116","IsPullRequest":true,"CreatedAt":"2019-08-20T01:01:39","Actor":"Dotnet-GitSync-Bot","Number":"26268","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @madmir","Url":"https://github.com/dotnet/coreclr/pull/26268","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx\" (#26268)"},{"Id":"482408186","IsPullRequest":true,"CreatedAt":"2019-08-20T00:58:21","Actor":"stephentoub","Number":"26250","RawContent":null,"Title":"Remove unused usings from Corlib","State":"closed","Body":"I also copied the shared folder over to my local corert and corefx and built both successfully (with the exception of https://github.com/dotnet/corert/commit/79f1e22ce1f793b5360eafa98f45fec398c94703#r34743431).","Url":"https://github.com/dotnet/coreclr/pull/26250","RelatedDescription":"Closed or merged PR \"Remove unused usings from Corlib\" (#26250)"},{"Id":"482584230","IsPullRequest":false,"CreatedAt":"2019-08-20T00:12:02","Actor":"RUSshy","Number":"26267","RawContent":null,"Title":"Wrong value in native callback method | or | Issue with enum equality","State":"open","Body":"```c#\r\n\t\t\t[UnmanagedFunctionPointer(CallingConvention.Cdecl), SuppressUnmanagedCodeSecurity]\r\n\t\t\tpublic delegate GLFWkeyfun glfwSetKeyCallback(IntPtr window, GLFWkeyfun cbfun);\r\n\r\n\t\t[UnmanagedFunctionPointer(CallingConvention.Cdecl), SuppressUnmanagedCodeSecurity]\r\n\t\tpublic delegate void GLFWkeyfun(IntPtr window, int key, int scancode, int action, int mods);\r\n\r\n\r\n(...)\r\n\r\n        private GlfwNative.GLFWkeyfun _keyFunc;\r\n\r\n(...)\r\n\r\n            _keyFunc = keyCallback;\r\n            GlfwNative.glfwSetKeyCallback(_window, _keyFunc);\r\n\r\n(..)\r\n\r\n        private void keyCallback(IntPtr window1, int key, int scancode, int action, int mods)\r\n        {\r\n            switch (action)\r\n            {\r\n                case GlfwNative.GLFW_PRESS:\r\n                    var convertedKey = convertGlfwKey(key);\r\n                    \r\n                    if(convertedKey == Keys.META_ALT_RIGHT_ON)\r\n                        throw new Exception($\"fuck you: {key}:{scancode} {convertedKey}\");\r\n                    \r\n                    \r\n```\r\n\r\n![rider64_XMYuP8Qx1d](https://user-images.githubusercontent.com/18348637/63307644-693ba680-c2ef-11e9-8f79-a3fea5295bc1.png)\r\n\r\n\r\nAs you can see: ``key`` is 68 wich translate to enum: ``Keys.D`` but i get something different: ``Keys.META_ALT_RIGHT_ON``\r\ninteresting enough, it correspond to the value i get with ``scancode`` param\r\n\r\nIt doesn't happen all the time, but i can reproduce if i press the key D on my keyboard\r\n\r\nI am using\r\n\r\n ```\r\nλ dotnet --version\r\n3.0.100-preview8-013656\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26267","RelatedDescription":"Open issue \"Wrong value in native callback method | or | Issue with enum equality\" (#26267)"},{"Id":"482579568","IsPullRequest":true,"CreatedAt":"2019-08-19T23:51:26","Actor":"davidwrighton","Number":"26266","RawContent":null,"Title":"Add support ildasm to support the metadata option again.","State":"open","Body":"Fixes issue dotnet/coreclr#26265","Url":"https://github.com/dotnet/coreclr/pull/26266","RelatedDescription":"Open PR \"Add support ildasm to support the metadata option again.\" (#26266)"},{"Id":"482578872","IsPullRequest":false,"CreatedAt":"2019-08-19T23:48:20","Actor":"davidwrighton","Number":"26265","RawContent":null,"Title":"ildasm fails to dump metadata","State":"open","Body":"Ever since issue dotnet/coreclr#2771 was fixed by disabling dumping metadata, it has not been possible to use ildasm to examine the exact details of metadata tables.\r\n\r\nAs the .il format has now evolved, and our metadata library has re-enabled the features that were disabled preventing metadata dumping from working, I believe we should re-enable metadata dumping in ildasm.","Url":"https://github.com/dotnet/coreclr/issues/26265","RelatedDescription":"Open issue \"ildasm fails to dump metadata\" (#26265)"},{"Id":"482517211","IsPullRequest":true,"CreatedAt":"2019-08-19T23:00:45","Actor":"jkoritzinsky","Number":"26263","RawContent":null,"Title":"Package native test assets into a NuGet package for use in performance testing","State":"closed","Body":"The dotnet/performance repo doesn't have any infrastructure to build native assets for the performance testing. Since native test assets are needed to accurately benchmark our interop stack, this PR creates a new NuGet package (Microsoft.Private.Tests.Native.CoreCLR) that is published as part of the test build jobs in the official build.\r\n\r\nWith this package, we can add microbenchmarks in the dotnet/performance repo that use the packaged native assets by simply referencing the NuGet package.\r\n\r\nIn this PR, the package contains the native assets for the following Interop scenarios:\r\n\r\n- P/Invoke native DLL load\r\n- String marshalling\r\n- General struct marshalling\r\n- LayoutClass marshalling\r\n- SafeHandle marshalling\r\n\r\ncc: @dotnet/coreclr-infra ","Url":"https://github.com/dotnet/coreclr/pull/26263","RelatedDescription":"Closed or merged PR \"Package native test assets into a NuGet package for use in performance testing\" (#26263)"},{"Id":"482529035","IsPullRequest":true,"CreatedAt":"2019-08-19T21:07:59","Actor":"swaroop-sridhar","Number":"26264","RawContent":null,"Title":"bundle-host: Process the bundle via memory-map","State":"open","Body":"Import changes from https://github.com/dotnet/core-setup/pull/6576","Url":"https://github.com/dotnet/coreclr/pull/26264","RelatedDescription":"Open PR \"bundle-host: Process the bundle via memory-map\" (#26264)"},{"Id":"482512793","IsPullRequest":true,"CreatedAt":"2019-08-19T20:31:32","Actor":"fadimounir","Number":"26262","RawContent":null,"Title":"Feature: dynamic expansion for generic dictionaries","State":"open","Body":"These changes introduce dynamic size expansion for generic dictionary layouts when we run out of slots.\r\nThe original implementation allowed for an expansion, but using a linked list structure, which made it\r\nimpossible to use fast lookup slots once we're out of slots in the first bucket.\r\n\r\nThis new implementation allows for the usage of fast lookup slots always, for all generic lookups.\r\n\r\nThis also removes the constraint we had on R2R, where we disabled the usage of fast slots all-together.","Url":"https://github.com/dotnet/coreclr/pull/26262","RelatedDescription":"Open PR \"Feature: dynamic expansion for generic dictionaries\" (#26262)"},{"Id":"482496366","IsPullRequest":true,"CreatedAt":"2019-08-19T19:54:22","Actor":"stephentoub","Number":"26260","RawContent":null,"Title":"Avoid race condition in DiagnosticCounter","State":"open","Body":"If while a DiagnosticCounter instance is being created the timer fires to process counters, the timer may end up evaluating a DiagnosticCounter whose constructor or derived types' constructor hasn't finished configuring the instance's state yet.\r\n\r\nFixes https://github.com/dotnet/coreclr/issues/26254\r\n\r\n(Note this issue was based on code inspection rather than a repro.  If there's something that's preventing this from actually being a problem, I'm happy for this to be closed instead.)","Url":"https://github.com/dotnet/coreclr/pull/26260","RelatedDescription":"Open PR \"Avoid race condition in DiagnosticCounter\" (#26260)"},{"Id":"482483533","IsPullRequest":true,"CreatedAt":"2019-08-19T19:21:45","Actor":"kouvel","Number":"26258","RawContent":null,"Title":"Remove timeout in a test for GCStress modes","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/25510\r\n- Timeout will be handled by the harness","Url":"https://github.com/dotnet/coreclr/pull/26258","RelatedDescription":"Open PR \"Remove timeout in a test for GCStress modes\" (#26258)"},{"Id":"482421971","IsPullRequest":true,"CreatedAt":"2019-08-19T19:00:28","Actor":"jkotas","Number":"26251","RawContent":null,"Title":"Change missed by the mirror","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26251","RelatedDescription":"Closed or merged PR \"Change missed by the mirror\" (#26251)"},{"Id":"482469181","IsPullRequest":false,"CreatedAt":"2019-08-19T18:47:03","Actor":"hoyosjs","Number":"26257","RawContent":null,"Title":"Edit and Continue needs code review on adding methods codepath","State":"open","Body":"During the investigation of #26016 investigation another point of concern came up, when trying to set the entry point for the method desc of an EnC added method: https://github.com/dotnet/coreclr/blob/b9177c03b592a0583af576530552ecca0d8b2ad9/src/vm/class.cpp#L631\r\n\r\nWe see an assert about the method trying to use a virtual slot in the method table. That being said, the `MethodDesc` is then set to not use slots in the table a few lines down. The assert warrants an investigation just to make sure the method table is in a consistent state.","Url":"https://github.com/dotnet/coreclr/issues/26257","RelatedDescription":"Open issue \"Edit and Continue needs code review on adding methods codepath\" (#26257)"},{"Id":"482467055","IsPullRequest":true,"CreatedAt":"2019-08-19T18:41:55","Actor":"jakobbotsch","Number":"26255","RawContent":null,"Title":"[WIP] Remove tailcall limitations on unix64 and arm64","State":"open","Body":"Fast tailcalls have their arguments passed in the incoming argument area\r\nof the caller. This can cause problems when a previous argument might\r\nend up overwriting the stack slot for an incoming argument that is later\r\nused. To resolve this problem, we have logic that detects and introduces\r\ntemps in this situation. This logic was originally written for Windows\r\nx64 where it is simple to know what argument is being overwritten, since\r\nevery argument always takes up a single slot on the stack. I.e. we know\r\nthat outgoing argument 7 can only overwrite incoming argument 7.\r\n\r\nOn unix x64 and arm64 this assumption does not hold. We previously tried\r\nto workaround this by limiting our fast tailcalls to simple situations\r\nwhere this assumption held, but this caused many missed fast tailcall\r\nopportunities (for example, when arguments requires two slots or more).\r\n\r\nThis change removes those limitations. Instead of finding the argument\r\noverwritten using the argument index, it keeps track of which stack\r\nslots are used by each incoming and outgoing argument, allowing us to\r\nmore robustly check if an outgoing argument will overwrite an incoming\r\nargument that will be used later.\r\n\r\nTo do this, we need to set the stack offset during init of args so that\r\nwe can use this info to determine whether it is necessary to introduce\r\ntemps for fast tailcalls. For arm64 we now define\r\nFEATURE_PUT_STRUCT_ARG_STK to have access to the number of slots in\r\nPUTARG_STK needed for this transformation.\r\n\r\nThere are also some corner cases we must consider. Since arguments now\r\nconsume multiple stack slots we can no longer move them with a single\r\natomic move instruction. Thus it is possible for us to get into cases\r\nwhere we need to move an argument that is larger than 8 bytes and where\r\nthe move overlaps. This is a problem because codegen cannot handle\r\noverlapping disjoint struct copies. We see this on unix64 in the\r\nfollowing case (assuming all args are on the stack):\r\nvoid callee(S16 a, S32 b) { ... }\r\nvoid caller(S32 a) { callee(default, a); }\r\n\r\nHere 'caller' will need to move 'a' 16 bytes ahead in the arg list, and\r\nwe thus need a temp because we cannot do this atomically. Fix this by\r\ndetecting the disjoint overlapping case and looking for uses of the arg\r\nfrom the current PUTARG_STK node's operand (instead of only starting\r\nafter).\r\n\r\nFixes #12468 \r\nFixes #20726\r\nFixes #12644\r\nFixes #11717","Url":"https://github.com/dotnet/coreclr/pull/26255","RelatedDescription":"Open PR \"[WIP] Remove tailcall limitations on unix64 and arm64\" (#26255)"},{"Id":"482462888","IsPullRequest":false,"CreatedAt":"2019-08-19T18:32:14","Actor":"stephentoub","Number":"26254","RawContent":null,"Title":"DiagnosticCounter ctor suspectible to race conditions","State":"open","Body":"It looks like DiagnosticCounter's ctor is suspectible to race conditions that can impact process-wide state.  The ctor does this:\r\nhttps://github.com/dotnet/coreclr/blob/98bf56a2cf19645563b41ab01f6972cbe83c9d44/src/System.Private.CoreLib/shared/System/Diagnostics/Tracing/DiagnosticCounter.cs#L45-L49\r\nThe instance is adding itself to the shared `_group` _before_ it's been fully initialized with its `name`, `DisplayUnits`, and `EventSource`.  If anything were to rely on that state being configured, it would appear possible for it to access uninitialized data.\r\n\r\nFurther, derived types' ctors will run after the base ctor, so any intialization performed in the explicit ctor by the derived type is also seemingly susceptible.\r\n\r\nIs there something that prevents that from happening?","Url":"https://github.com/dotnet/coreclr/issues/26254","RelatedDescription":"Open issue \"DiagnosticCounter ctor suspectible to race conditions\" (#26254)"},{"Id":"482273441","IsPullRequest":true,"CreatedAt":"2019-08-19T18:17:04","Actor":"dotnet-maestro[bot]","Number":"26247","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190818.3\r\n- **Date Produced**: 8/19/2019 12:57 AM\r\n- **Commit**: 8a5f710c474a955ae82ce449fb9185a781782558\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19418.3\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26247","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#26247)"},{"Id":"482434259","IsPullRequest":true,"CreatedAt":"2019-08-19T17:25:45","Actor":"jakobbotsch","Number":"26253","RawContent":null,"Title":"Mark emitted types assembly as collectible in ABI stress","State":"open","Body":"This makes it compatible with RunInContext.\r\n\r\ncc @janvorli ","Url":"https://github.com/dotnet/coreclr/pull/26253","RelatedDescription":"Open PR \"Mark emitted types assembly as collectible in ABI stress\" (#26253)"},{"Id":"482401817","IsPullRequest":false,"CreatedAt":"2019-08-19T16:12:57","Actor":"hours10000","Number":"26249","RawContent":null,"Title":"memory violation sig=6","State":"open","Body":"Hi All，\r\nRecently, my .net core console app was crashed several times. Because the production enviroment does not enable coredump，so I did not get any userful information.But \"/var/log/audit/audit.log\" has a log:\r\n\r\n`type=ANOM_ABEND msg=audit(1563179050.707:241662): auid=1000 uid=1000 gid=1000 ses=25261 pid=2840 comm=\"dotnet\" reason=\"memory violation\" sig=6`\r\n\r\nI know sig=6 was triggered by system ,they aren't exceptions, they're signaled from the OS。I did not get any idea on why I met this error。I searched github, did not get any signs。\r\n\r\nAny ideas? Thanks  .\r\n\r\n(Today, I enable core dump on production enviroment.If it crash again ,I will upload the trace info.)\r\n\r\n`\r\n**OS**: gcc version 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC)\r\n      Linux version 3.10.0-957.27.2.el7.x86_64 \r\n      CentOS Linux release 7.6.1810 (Core)\r\n**.net core**: \r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.300\r\n Commit:    73efd5bd87\r\n\r\nRuntime Environment:\r\n OS Name:     centos\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         centos.7-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.300/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.5\r\n  Commit:  0a3c9209c0\r\n\r\n.NET Core SDKs installed:\r\n  2.2.300 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]`\r\n\r\n      \r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/26249","RelatedDescription":"Open issue \"memory violation sig=6\" (#26249)"},{"Id":"482398038","IsPullRequest":true,"CreatedAt":"2019-08-19T16:05:07","Actor":"CoffeeFlux","Number":"26248","RawContent":null,"Title":"Move AssemblyLoadContext VM-invoked static resolve methods to shared","State":"open","Body":"Shared between CoreCLR and Mono. Mono began using a copy of these methods with https://github.com/mono/mono/pull/16256/\r\n\r\ncc: @lambdageek @vitek-karas ","Url":"https://github.com/dotnet/coreclr/pull/26248","RelatedDescription":"Open PR \"Move AssemblyLoadContext VM-invoked static resolve methods to shared\" (#26248)"},{"Id":"482241439","IsPullRequest":false,"CreatedAt":"2019-08-19T14:57:00","Actor":"PcMaKeR","Number":"26245","RawContent":null,"Title":"''System.__ComObject' does not contain a definition for 'Visible''","State":"closed","Body":"Hello everybody.\r\n\r\nGetting an error on **dotnet core 3 preview8**:\r\n\r\nmy code:\r\n\r\n`\r\nusing System;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            string progId = \"InternetExplorer.Application\";\r\n            Type type = Type.GetTypeFromProgID(progId);\r\n            dynamic inst = Activator.CreateInstance(type);\r\n\r\n            inst.Visible = true;\r\n            inst.Navigate(\"https://msdn.com\");\r\n\r\n            bool result = inst.Visible;\r\n            \r\n            Console.WriteLine(result);\r\n        }\r\n    }\r\n}\r\n`\r\n\r\nerror line: \r\n\r\n> inst.Visible = true;\r\n\r\ndlr activated?","Url":"https://github.com/dotnet/coreclr/issues/26245","RelatedDescription":"Closed issue \"''System.__ComObject' does not contain a definition for 'Visible''\" (#26245)"},{"Id":"482260851","IsPullRequest":false,"CreatedAt":"2019-08-19T11:38:13","Actor":"duskembayev","Number":"26246","RawContent":null,"Title":"High CPU utilization on coreclr_shutdown_2","State":"open","Body":"Hi all.\r\nI have an application with some security limits that executes managed .NET Core library (using custom CLR hosting). Everything works fine, but I found that process utilization permanently about 20%.  After investigation, using ProcessExplorer, I found thread with this stack trace:\r\n```\r\nntoskrnl.exe!KeSynchronizeExecution+0x5aa6\r\nntoskrnl.exe!KeWaitForMutexObject+0x1422\r\nntoskrnl.exe!KeWaitForMutexObject+0xab4\r\nntoskrnl.exe!KeWaitForMutexObject+0x255\r\nntoskrnl.exe!KeGetProcessorNumberFromIndex+0xfc7\r\nntoskrnl.exe!KeWaitForMutexObject+0x34b8\r\nntoskrnl.exe!KiCheckForKernelApcDelivery+0x2b\r\nntoskrnl.exe!KeLeaveCriticalRegion+0x37\r\nntoskrnl.exe!SeUnlockSubjectContext+0x1b\r\nntoskrnl.exe!ObOpenObjectByPointerWithTag+0x6e8\r\nntoskrnl.exe!SeUnlockSubjectContext+0x1563\r\nntoskrnl.exe!ObOpenObjectByNameEx+0x201\r\nntoskrnl.exe!NtCreateFile+0x48a\r\nntoskrnl.exe!IoCreateFile+0x8a\r\nntoskrnl.exe!MmResetDriverPaging+0x44b\r\nntoskrnl.exe!setjmpex+0x7b55\r\nntdll.dll!ZwCreateNamedPipeFile+0x14\r\nKERNELBASE.dll!CreateNamedPipeW+0x1bb\r\nKERNEL32.DLL!CreateNamedPipeA+0x6f\r\ncoreclr.dll!coreclr_shutdown_2+0x5666\r\ncoreclr.dll!coreclr_shutdown_2+0x5606\r\nKERNEL32.DLL!BaseThreadInitThunk+0x14\r\nntdll.dll!RtlUserThreadStart+0x21\r\n```\r\nLooks like coreclr cannot create named pipe (named pipes are limited by restricted token of the process). \r\nCould you help me with this problem? \r\n\r\ndotnet version: 3.0.100-preview8-013656\r\nos: win-x64\r\nplatform: x64","Url":"https://github.com/dotnet/coreclr/issues/26246","RelatedDescription":"Open issue \"High CPU utilization on coreclr_shutdown_2\" (#26246)"},{"Id":"482193344","IsPullRequest":true,"CreatedAt":"2019-08-19T09:09:30","Actor":"janvorli","Number":"26244","RawContent":null,"Title":"Port to 3.0 - Fix ARM64 HFA arguments passing via reflection","State":"open","Body":"#### Description\r\nThere was an issue happening in case there were not enough floating point\r\nregisters for passing a HFA argument. The argument iterator was returning\r\nconfusing result for such argument. The offset was correctly pointing to\r\nstack, but the state indicated that the arguments should be passed in\r\nregisters. That caused the argument to be passed incorrectly.\r\n\r\nThe fix is to not set m_hasArgLocDescForStructInRegs when the HFA doesn't\r\nfit into registers.\r\n\r\n#### Customer Impact\r\nIf an application is invoking functions with HFA arguments (packed structures of 2-4 floats or doubles) that should be passed on stack **via reflection**, the callee will receive incorrect values in the arguments. \r\n\r\n#### Regression\r\nNo\r\n\r\n#### Risk\r\nNone\r\n\r\nIssue #25993","Url":"https://github.com/dotnet/coreclr/pull/26244","RelatedDescription":"Open PR \"Port to 3.0 - Fix ARM64 HFA arguments passing via reflection\" (#26244)"},{"Id":"482132229","IsPullRequest":false,"CreatedAt":"2019-08-19T06:40:16","Actor":"maikebing","Number":"26243","RawContent":null,"Title":"Use PtrToStructure with UnmanagedType.ByValTStr will lose data, is it a BUG?","State":"open","Body":"Code:\r\n\r\n```CSharp\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi, Pack = 1)]\r\n    public struct MSG_HEAD\r\n    {\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string NetNo;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string PlazaNo;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 3)] public string LaneID;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 14)] public string DDHM;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1)] public string LaneType;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 5)] public string MsgLen;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string MsgType;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string MsgVersion;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string Reserved;\r\n    };//------MSG_HEAD Size:32\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var data = System.Text.Encoding.ASCII.GetBytes( \"0423X9120190805111432100073A0020010333333\");\r\n            Type _t_msg_head = typeof(MSG_HEAD);\r\n            int _rs_msg_head = Marshal.SizeOf(_t_msg_head);\r\n            IntPtr _bf_msg_head = Marshal.AllocHGlobal(_rs_msg_head);\r\n            Marshal.Copy(data, 0, _bf_msg_head, _rs_msg_head);\r\n            MSG_HEAD  HEAD = (MSG_HEAD)Marshal.PtrToStructure(_bf_msg_head, _t_msg_head);\r\n            Marshal.FreeHGlobal(_bf_msg_head);\r\n            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(HEAD));\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nActual:\r\n```\r\n{\r\n\t\"NetNo\": \"0\",\r\n\t\"PlazaNo\": \"2\",\r\n\t\"LaneID\": \"X9\",\r\n\t\"DDHM\": \"2019080511143\",\r\n\t\"LaneType\": \"\",\r\n\t\"MsgLen\": \"0007\",\r\n\t\"MsgType\": \"A\",\r\n\t\"MsgVersion\": \"0\",\r\n\t\"Reserved\": \"0\"\r\n}\r\n```\r\nExpect\r\n```\r\n0423X9120190805111432100073A0020010333333\r\n{\r\n\t\"NetNo\": \"04\",\r\n\t\"PlazaNo\": \"23\",\r\n\t\"LaneID\": \"X91\",\r\n\t\"DDHM\": \"20190805111432\",\r\n\t\"LaneType\": \"1\",\r\n\t\"MsgLen\": \"00073\",\r\n\t\"MsgType\": \"A0\",\r\n\t\"MsgVersion\": \"02\",\r\n\t\"Reserved\": \"00\"\r\n}\r\n```\r\n\r\nThe value of each field is one byte less than the SizeConst specify!\r\n","Url":"https://github.com/dotnet/coreclr/issues/26243","RelatedDescription":"Open issue \"Use PtrToStructure with UnmanagedType.ByValTStr will lose data, is it a BUG?\" (#26243)"},{"Id":"482072398","IsPullRequest":false,"CreatedAt":"2019-08-19T02:11:34","Actor":"VincentBu","Number":"26242","RawContent":null,"Title":"JIT/Stress/ABI tests failed","State":"open","Body":"**Job:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/workitems/JIT.Stress/console\r\n\r\n**Some of failed tests:**\r\nJIT/Stress/ABI/pinvokes_r/pinvokes_r.sh\r\nJIT/Stress/ABI/pinvokes_do/pinvokes_do.sh\r\n\r\n**Part of log:**\r\n```\r\nJIT/Stress/ABI/pinvokes_r/pinvokes_r.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/Reports/JIT.Stress/ABI/pinvokes_r/pinvokes_r.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Payload/runincontext.sh /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/ABI/pinvokes_r/ pinvokes_r.dll '--pinvokes' '--num-calls' '1000' '--no-ctrlc-summary'\r\n      Stressing pinvokes\r\n      OSVersion: Unix 4.18.0.1013\r\n      OSArchitecture: X64\r\n      ProcessArchitecture: X64\r\n      Selecting SysV ABI\r\n      FAILURE: Exception: Exception has been thrown by the target of an invocation.\r\n      \r\n      RunInContext FAIL! Exiting with code 213\r\n      Expected: 100\r\n      Actual: 213\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=/home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Payload\r\n      > /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/ABI/pinvokes_r/pinvokes_r.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /__w/9/s/bin/tests/Linux.x64.Checked/TestWrappers/JIT.Stress/JIT.Stress.XUnitWrapper.cs(334,0): at JIT_Stress._ABI_pinvokes_r_pinvokes_r_._ABI_pinvokes_r_pinvokes_r_sh()\r\n      Output:\r\n        \r\n        Return code:      1\r\n        Raw output file:      /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/Reports/JIT.Stress/ABI/pinvokes_r/pinvokes_r.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Payload/runincontext.sh /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/ABI/pinvokes_r/ pinvokes_r.dll '--pinvokes' '--num-calls' '1000' '--no-ctrlc-summary'\r\n        Stressing pinvokes\r\n        OSVersion: Unix 4.18.0.1013\r\n        OSArchitecture: X64\r\n        ProcessArchitecture: X64\r\n        Selecting SysV ABI\r\n        FAILURE: Exception: Exception has been thrown by the target of an invocation.\r\n        \r\n        RunInContext FAIL! Exiting with code 213\r\n        Expected: 100\r\n        Actual: 213\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=/home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Payload\r\n        > /home/helixbot/work/5e41ffe6-f616-4d0e-abcb-b9f9eb95fb6e/Work/9aaf7adf-2b2f-4084-8023-91d50de087d5/Exec/JIT/Stress/ABI/pinvokes_r/pinvokes_r.sh\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26242","RelatedDescription":"Open issue \"JIT/Stress/ABI tests failed\" (#26242)"},{"Id":"482070851","IsPullRequest":false,"CreatedAt":"2019-08-19T02:02:00","Actor":"VincentBu","Number":"26241","RawContent":null,"Title":"Test failed: tracing\\eventpipe\\providervalidation\\providervalidation\\providervalidation.cmd","State":"open","Body":"**Job:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/40a0c6d5-430e-4787-9f60-9317e3055a63/workitems/PayloadGroup0/console\r\n\r\n**Failed tests:**\r\ntracing\\eventpipe\\providervalidation\\providervalidation\\providervalidation.cmd\r\n\r\n**Log:**\r\n```\r\n tracing\\eventpipe\\providervalidation\\providervalidation\\providervalidation.cmd [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Work\\2cf345e3-c30f-4727-90b8-5c1641ee9d44\\Exec\\tracing\\eventpipe\\Reports\\tracing.eventpipe\\providervalidation\\providervalidation\\providervalidation.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Payload\\corerun.exe\" providervalidation.dll \r\n      TEST STARTING\r\n      TEST PASSED!\r\n      TEST STARTING\r\n      Test FAILED!\r\n      No events for provider \"Microsoft-DotNETCore-SampleProfiler\"\r\n      Configuration:\r\n      {\r\n      bufferSize: 1024,\r\n      providers: [\r\n      MyEventSource:0xFFFFFFFFFFFFFFFF:5,\r\n      Microsoft-DotNETCore-SampleProfiler:0xFFFFFFFFFFFFFFFF:5,\r\n      SentinelEventSource:0xFFFFFFFFFFFFFFFF:5,\r\n      ]\r\n      }\r\n      \r\n      Expected:\r\n      {\r\n      \"MyEventSource\" = 1000 +- 300\r\n      \"Microsoft-Windows-DotNETRuntimeRundown\" = -1 +- -0\r\n      \"Microsoft-DotNETCore-SampleProfiler\" = -1 +- -0\r\n      }\r\n      \r\n      Actual:\r\n      {\r\n      \"MyEventSource\" = 1000\r\n      \"Microsoft-DotNETCore-EventPipe\" = 1\r\n      \"Microsoft-Windows-DotNETRuntimeRundown\" = 1931\r\n      }\r\n      Expected: 100\r\n      Actual: -1\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      > set CORE_ROOT=C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Payload\r\n      > C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Work\\2cf345e3-c30f-4727-90b8-5c1641ee9d44\\Exec\\tracing\\eventpipe\\providervalidation\\providervalidation\\providervalidation.cmd\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        F:\\workspace\\_work\\1\\s\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\tracing.eventpipe\\tracing.eventpipe.XUnitWrapper.cs(431,0): at tracing_eventpipe._providervalidation_providervalidation_providervalidation_._providervalidation_providervalidation_providervalidation_cmd()\r\n      Output:\r\n        \r\n        Return code:      1\r\n        Raw output file:      C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Work\\2cf345e3-c30f-4727-90b8-5c1641ee9d44\\Exec\\tracing\\eventpipe\\Reports\\tracing.eventpipe\\providervalidation\\providervalidation\\providervalidation.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n         \"C:\\dotnetbuild\\work\\40a0c6d5-430e-4787-9f60-9317e3055a63\\Payload\\corerun.exe\" providervalidation.dll \r\n        TEST STARTING\r\n        TEST PASSED!\r\n        TEST STARTING\r\n        Test FAILED!\r\n        No events for provider \"Microsoft-DotNETCore-SampleProfiler\"\r\n        Configuration:\r\n        {\r\n        bufferSize: 1024,\r\n        providers: [\r\n        MyEventSource:0xFFFFFFFFFFFFFFFF:5,\r\n        Microsoft-DotNETCore-SampleProfiler:0xFFFFFFFFFFFFFFFF:5,\r\n        SentinelEventSource:0xFFFFFFFFFFFFFFFF:5,\r\n        ]\r\n        }\r\n        \r\n        Expected:\r\n        {\r\n        \"MyEventSource\" = 1000 +- 300\r\n        \"Microsoft-Windows-DotNETRuntimeRundown\" = -1 +- -0\r\n        \"Microsoft-DotNETCore-SampleProfiler\" = -1 +- -0\r\n        }\r\n        \r\n        Actual:\r\n        {\r\n        \"MyEventSource\" = 1000\r\n        \"Microsoft-DotNETCore-EventPipe\" = 1\r\n        \"Microsoft-Windows-DotNETRuntimeRundown\" = 1931\r\n        }\r\n        Expected: 100\r\n        Actual: -1\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26241","RelatedDescription":"Open issue \"Test failed: tracing\\eventpipe\\providervalidation\\providervalidation\\providervalidation.cmd\" (#26241)"},{"Id":"482432291","IsPullRequest":false,"CreatedAt":"2019-08-18T01:52:10","Actor":"bwright86","Number":"26252","RawContent":null,"Title":"Feature Request - Cross-Compile .Net Core to PowerPC (PPC) Architecture","State":"open","Body":"Cross-compile .Net Cote to PowerPC (ppc) architecture.\r\n\r\nThis would allow Powershell to be utilized on IBM hardware (Power-series) which run RHEL, UNIX, and other *nixes.\r\n\r\nAs a sys admin with a work environment that is split between VMWare and IBM Power-series frames. Having powershell available on both platforms would allow a unified approach to managing them.\r\n\r\nThis idea was already mentioned on UserVoice a while ago, but it hasn't gained much reach. So I am not aware of how many users would find this beneficial.\r\n\r\nHere is a link:\r\nhttps://windowsserver.uservoice.com/forums/301869-powershell/suggestions/33127174-powershell-core-on-ibm-power-series-hardware","Url":"https://github.com/dotnet/coreclr/issues/26252","RelatedDescription":"Open issue \"Feature Request - Cross-Compile .Net Core to PowerPC (PPC) Architecture\" (#26252)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"482623148","IsPullRequest":false,"CreatedAt":"2019-08-20T03:20:40","Actor":"SidShetye","Number":"12298","RawContent":null,"Title":"dotnet build should either build or ignore sqlproj SQL project - not error out","State":"open","Body":"## Steps to reproduce\r\n\r\n1. Have a visual studio solution with two projects, one asp.net core project (`*.csproj`) and the other a SQL project (`*.sqlproj`).\r\n2. Issue `dotnet build` at solution level\r\n\r\n## Expected  behavior\r\n\r\n### Ideal\r\n\r\nThe solution is successfully built by either msbuild or natively by the dotnet cli (or a plugin).\r\n\r\n### Minimum Acceptable\r\n\r\nSolution is built by **skipping** projects (e.g. `sqlproj`) that `dotnet` CLI cannot handle\r\n\r\n## Actual behavior\r\n\r\nSolution build fails with `error MSB4019: The imported project \"C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\Microsoft\\VisualStudio\\v11.0\\SSDT\\Microsoft.Data.Tools.Schema.SqlTasks.targets\" was not found`\r\n\r\n## Previous reports\r\n\r\nThis was previously reported [here](https://github.com/dotnet/cli/issues/7294) but was prematurely closed without fixing the bug and subsequently ignored.\r\n\r\n## Environment data\r\n\r\n<details><summary>Click to expand</summary>\r\n<p>\r\n\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013656\r\n Commit:    8bf06ffc8d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28405-07\r\n  Commit:  d01b2fb7bc\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview8-013656 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19405.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28405-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview8-28405-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n</p>\r\n</details>\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12298","RelatedDescription":"Open issue \"dotnet build should either build or ignore sqlproj SQL project - not error out\" (#12298)"},{"Id":"482501802","IsPullRequest":true,"CreatedAt":"2019-08-20T00:05:09","Actor":"dotnet-maestro[bot]","Number":"12297","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190819.06\r\n- **Date Produced**: 8/19/2019 8:07 PM\r\n- **Commit**: 5b508e86c9ce66af8b41bbc1f3b756e7724bcaa0\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19419-06\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19419-06\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19419-06\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19419-06\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19419-06\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12297","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12297)"},{"Id":"481582484","IsPullRequest":true,"CreatedAt":"2019-08-19T23:29:17","Actor":"dotnet-maestro[bot]","Number":"12281","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:9b125d25-276f-4859-b4e2-08d6910bdae0)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12281","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#12281)"},{"Id":"482481562","IsPullRequest":true,"CreatedAt":"2019-08-19T19:57:14","Actor":"dotnet-maestro[bot]","Number":"12295","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190819.2\r\n- **Date Produced**: 8/19/2019 7:16 PM\r\n- **Commit**: 8987cca7c96bbcf9102b7d299cc833841c6de2b6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19419.2\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12295","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12295)"},{"Id":"482466385","IsPullRequest":true,"CreatedAt":"2019-08-19T19:20:51","Actor":"dotnet-maestro[bot]","Number":"12294","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190819.1\r\n- **Date Produced**: 8/19/2019 6:40 PM\r\n- **Commit**: 5678f84d60fd76ce417838b8a7a14bcd48cf3f91\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19419.1\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12294","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12294)"},{"Id":"481530254","IsPullRequest":true,"CreatedAt":"2019-08-19T19:09:04","Actor":"dotnet-maestro[bot]","Number":"12279","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190819.03\r\n- **Date Produced**: 8/19/2019 6:30 PM\r\n- **Commit**: a2aef75400d2de835cd2aad8ebe51dfd0190107c\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19419-03\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19419-03\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19419-03\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19419-03\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19419-03\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12279","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12279)"},{"Id":"481985836","IsPullRequest":true,"CreatedAt":"2019-08-18T12:38:46","Actor":"dotnet-maestro[bot]","Number":"12293","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190817.1\r\n- **Date Produced**: 8/17/2019 12:51 PM\r\n- **Commit**: 184697656cbc995fb5b7aa24b8ace369217896dc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19417.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12293","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12293)"},{"Id":"481985564","IsPullRequest":true,"CreatedAt":"2019-08-18T12:35:46","Actor":"dotnet-maestro[bot]","Number":"12292","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190817.1\r\n- **Date Produced**: 8/17/2019 3:38 PM\r\n- **Commit**: 0764a2b93c13914bda8bad82fb278fa418b53720\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 5.0.100-alpha1.19417.1\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12292","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#12292)"},{"Id":"481928951","IsPullRequest":true,"CreatedAt":"2019-08-17T22:14:29","Actor":"dotnet-maestro[bot]","Number":"12291","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190817.2\r\n- **Date Produced**: 8/17/2019 9:43 PM\r\n- **Commit**: 74b801506b7d06d742d104acfd2ab6440a39f18d\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19417.2\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12291","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12291)"},{"Id":"481883479","IsPullRequest":false,"CreatedAt":"2019-08-17T21:21:23","Actor":"julielerman","Number":"12287","RawContent":null,"Title":"net core 3 preview9 does not build testhost and other runner files for tests","State":"closed","Body":"## Description\r\nIn an Xunit project with recent preview9 SDKs, dotnet build doesn't pull testhost.dll or any other important files for running tests. The result when running tests is that none are discovered. Error reports testhost.dll can't be found. I was experiencing this with previously working test projects but it was easily reproducible with a default test project.\r\n\r\n## Steps to reproduce\r\nIn an empty folder, at CLI, run\r\ndotnet new xunit  //same problem with dotnet new mstest\r\ndotnet test\r\n\r\n## Expected behavior\r\nDotnet test should run the test and output test run execution log, then\r\ntotal tests 1 etc\r\ntest run successful\r\n\r\nbin/debug/netcoreapp3.0 folder should contain many files including testplatform dlls, visualstudio dlls, Xunit dlls and Xunitrunner dlls.\r\n\r\nWhen I switched global.jdon to use a preview6 version, it worked as expected. I don't have preview7 or 8 on this machine to see where it broke (or where there is some change that I missed and should be going about this differently now... ??)\r\n\r\n## Actual behavior\r\nRunning dotnet test simply returns a command prompt.\r\n\r\nContents of bin/debug/.netcoreapp3.0 folder are:\r\nprojectname.deps.json\r\nprojectname.dll\r\nprojectname.pdb\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview9-013927\r\n Commit:    e1f793b16d\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100-preview9-013927/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview9-19415-13\r\n  Commit:  127d3f10eb\r\n\r\n.NET Core SDKs installed:\r\n  2.1.101 [/usr/local/share/dotnet/sdk]\r\n  2.1.300-rc1-008673 [/usr/local/share/dotnet/sdk]\r\n  2.1.300 [/usr/local/share/dotnet/sdk]\r\n  2.1.403 [/usr/local/share/dotnet/sdk]\r\n  2.2.100-preview2-009404 [/usr/local/share/dotnet/sdk]\r\n  2.2.100-preview3-009430 [/usr/local/share/dotnet/sdk]\r\n  2.2.105 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview5-011568 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview6-012264 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview9-013817 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview9-013927 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0-preview2-35157 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0-preview3-35497 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0-preview2-35157 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0-preview3-35497 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview6.19307.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview9.19413.1 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview9.19415.11 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0-preview2-26905-02 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0-preview3-27014-02 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27804-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview9-19415-13 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12287","RelatedDescription":"Closed issue \"net core 3 preview9 does not build testhost and other runner files for tests\" (#12287)"},{"Id":"481921583","IsPullRequest":true,"CreatedAt":"2019-08-17T20:40:20","Actor":"dotnet-maestro[bot]","Number":"12290","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190817.1\r\n- **Date Produced**: 8/17/2019 8:04 PM\r\n- **Commit**: 8283e6ac2b0bd33303b4314795f6d0318c1cec29\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19417.1\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12290","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12290)"},{"Id":"481918194","IsPullRequest":false,"CreatedAt":"2019-08-17T19:22:47","Actor":"orcun","Number":"12289","RawContent":null,"Title":"tool manifest should contain source","State":"open","Body":"## Steps to reproduce\r\nInstall a tool locally using a local source\r\n\r\n## Expected  behavior\r\ndotnet-tools.json to include source information, beside version, commands, etc.\r\n\r\n## Actual behavior\r\ndotnet-tools.json does not record the source of the package\r\n\r\nThis would help to update local tools with different sources.\r\n\r\n## Environment data\r\nVersion: 3.0.0-preview8-28405-07\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12289","RelatedDescription":"Open issue \"tool manifest should contain source\" (#12289)"},{"Id":"481917740","IsPullRequest":false,"CreatedAt":"2019-08-17T19:17:07","Actor":"orcun","Number":"12288","RawContent":null,"Title":"dotnet tool commands should work offline for local sources","State":"open","Body":"I noticed that sometimes dotnet tool update hangs and realized that was due to connection issues. However I was not expecting this behavior since I was providing a local source.\r\n\r\n## Steps to reproduce\r\nPoor wifi connection (or no connection, I haven't tested)\r\nUse a local nupkg folder as source\r\n\r\n## Expected  behavior\r\nOperation to work quickly\r\n\r\n## Actual behavior\r\nOperation hangs or waits for a long timeout?\r\nI am not sure if this is due to telemetry or it always checks with server. \r\nIf this is due to telemetry, I think timeout should be very short.\r\nIf it checks with nuget server even when using a local folder, it should be lower priority.\r\n\r\nI think working offline will be a common scenario, especially in CI environments.\r\n\r\n## Environment data\r\nI'm using core 3 preview 8.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12288","RelatedDescription":"Open issue \"dotnet tool commands should work offline for local sources\" (#12288)"},{"Id":"481879506","IsPullRequest":true,"CreatedAt":"2019-08-17T12:45:14","Actor":"dotnet-maestro[bot]","Number":"12286","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190816.1\r\n- **Date Produced**: 8/16/2019 1:02 PM\r\n- **Commit**: f332660b7ba52c18cbfe8c8b9a71f8eea12f419e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19416.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12286","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12286)"},{"Id":"481578469","IsPullRequest":true,"CreatedAt":"2019-08-17T12:37:10","Actor":"dotnet-maestro[bot]","Number":"12280","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12280","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12280)"},{"Id":"481852812","IsPullRequest":true,"CreatedAt":"2019-08-17T06:39:37","Actor":"dotnet-maestro[bot]","Number":"12285","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190816.12\r\n- **Date Produced**: 8/17/2019 6:03 AM\r\n- **Commit**: 8857746e4b12d9b7342d2c209763f2cb3ae95693\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19416.12\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12285","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12285)"},{"Id":"481845057","IsPullRequest":true,"CreatedAt":"2019-08-17T04:43:57","Actor":"dotnet-maestro[bot]","Number":"12284","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190816.11\r\n- **Date Produced**: 8/17/2019 4:08 AM\r\n- **Commit**: 96d612ce8c1bfea45b5ef62c757ee6852d36ff68\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19416.11\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12284","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12284)"},{"Id":"481825871","IsPullRequest":true,"CreatedAt":"2019-08-17T02:50:26","Actor":"dotnet-maestro[bot]","Number":"12283","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190816.10\r\n- **Date Produced**: 8/17/2019 2:14 AM\r\n- **Commit**: c0d5248fb485ab373f8340beb6d8fc4513a6d8db\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19416.10\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12283","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12283)"},{"Id":"481719970","IsPullRequest":false,"CreatedAt":"2019-08-16T21:20:58","Actor":"paveliak","Number":"12282","RawContent":null,"Title":"dot.net site is down, cannot download https://dot.net/v1/dotnet-install.ps1","State":"closed","Body":"## Steps to reproduce\r\ncurl https://dot.net/v1/dotnet-install.ps1\r\n\r\n## Expected  behavior\r\nCan download PS file\r\n\r\n## Actual behavior\r\ncurl: (7) Failed to connect to dot.net port 443: Timed out\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nN/A\r\n\r\nThanks,\r\nPavel\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12282","RelatedDescription":"Closed issue \"dot.net site is down, cannot download https://dot.net/v1/dotnet-install.ps1\" (#12282)"},{"Id":"481409120","IsPullRequest":false,"CreatedAt":"2019-08-16T17:04:34","Actor":"omajid","Number":"12275","RawContent":null,"Title":"Strange versioning of templates dir in preview 8","State":"closed","Body":"I downloaded .NET Core 3.0 Preview 8 from https://dotnet.microsoft.com/download/thank-you/dotnet-sdk-3.0.100-preview8-linux-x64-binaries\r\n\r\nIt contains a new directory for templates. The versioning of this templates directory is strange: `DOTNET_ROOT/templates/3.0.0-preview8-013656/`. The version number of this directory (3.0.0-preview8-013656) doesn't match the SDK (3.0.100-preview8-013656) or the .NET Core Runtime (3.0.0-preview8-28405-07) or the ASP.NET Core Runtime (3.0.0-preview8.19405.7).\r\n\r\nIt seems to me that it should be using the SDK version.\r\n\r\n## Environment data\r\n\r\nThis is the download link I used:\r\n\r\nhttps://download.visualstudio.microsoft.com/download/pr/a0e368ac-7161-4bde-a139-1a3ef5a82bbe/439cdbb58950916d3718771c5d986c35/dotnet-sdk-3.0.100-preview8-013656-linux-x64.tar.gz","Url":"https://github.com/dotnet/cli/issues/12275","RelatedDescription":"Closed issue \"Strange versioning of templates dir in preview 8\" (#12275)"},{"Id":"481446591","IsPullRequest":true,"CreatedAt":"2019-08-16T07:49:48","Actor":"dotnet-maestro[bot]","Number":"12277","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190815.14\r\n- **Date Produced**: 8/16/2019 7:00 AM\r\n- **Commit**: ee6ea631e8e3714a3d4b9c91aa1492c65ea1ac4b\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19415-14\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19415-14\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19415-14\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19415-14\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19415-14\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12277","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12277)"},{"Id":"481463066","IsPullRequest":true,"CreatedAt":"2019-08-16T07:13:08","Actor":"dotnet-maestro[bot]","Number":"12278","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190815.11\r\n- **Date Produced**: 8/16/2019 6:32 AM\r\n- **Commit**: 7f054152db50635e1c14b9d9d34088e369a64422\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19415.11\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12278","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12278)"},{"Id":"481426141","IsPullRequest":true,"CreatedAt":"2019-08-16T04:07:21","Actor":"dotnet-maestro[bot]","Number":"12276","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190815.10\r\n- **Date Produced**: 8/16/2019 3:31 AM\r\n- **Commit**: a95bcfc520c8aa780d32874b6eebbbf1b4304657\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview9-19415-10\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19415-10\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview9-19415-10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview9-19415-10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview9-19415-10\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12276","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12276)"},{"Id":"481400607","IsPullRequest":true,"CreatedAt":"2019-08-16T01:57:39","Actor":"dotnet-maestro[bot]","Number":"12274","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190815.8\r\n- **Date Produced**: 8/16/2019 1:16 AM\r\n- **Commit**: 72925ecc1982a1c47416610607301c3dd055b981\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19415.8\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12274","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12274)"},{"Id":"481378864","IsPullRequest":true,"CreatedAt":"2019-08-16T00:26:33","Actor":"dotnet-maestro[bot]","Number":"12273","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190815.6\r\n- **Date Produced**: 8/15/2019 11:25 PM\r\n- **Commit**: 3d9311a29f5900cd4fe34d12a0c99039a5f629cb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19415.6\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12273","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12273)"},{"Id":"481312035","IsPullRequest":false,"CreatedAt":"2019-08-15T23:47:16","Actor":"thild","Number":"12269","RawContent":null,"Title":"preview8 - signal SIGSEGV on executables","State":"closed","Body":"# preview8 - signal SIGSEGV on executables\r\n\r\nCreate a console app \"console1\" and run with `dotnet run`\r\nNothing happens. Program just exits silently.\r\n\r\nThe program builds normally.\r\n`dotnet bin/Debug/netcoreapp3.0/console1.dll` works.\r\n`./bin/Debug/netcoreapp3.0/console1` crashes with segmentation fault.\r\n\r\n# General\r\n```\r\n$ lldb console1\r\n(lldb) target create \"console1\"\r\nCurrent executable set to 'console1' (x86_64).\r\n(lldb) run\r\nProcess 26817 launched: '/mnt/docs/dev/tmp/console1/bin/Debug/netcoreapp3.0/console1' (x86_64)\r\nProcess 26817 stopped\r\n* thread #1, name = 'console1', stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\r\n    frame #0: 0x0000000000000000\r\nerror: memory read failed for 0x0\r\n```\r\n\r\n```\r\n$ dotnet --info\r\nSDK do .NET Core (refletindo qualquer global.json):\r\n Version:   3.0.100-preview8-013656\r\n Commit:    8bf06ffc8d\r\n\r\nAmbiente de tempo de execução:\r\n OS Name:     opensuse-tumbleweed\r\n OS Version:  20190721\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /snap/dotnet-sdk/45/sdk/3.0.100-preview8-013656/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28405-07\r\n  Commit:  d01b2fb7bc\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview8-013656 [/snap/dotnet-sdk/45/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19405.7 [/snap/dotnet-sdk/45/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28405-07 [/snap/dotnet-sdk/45/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/12269","RelatedDescription":"Closed issue \"preview8 - signal SIGSEGV on executables\" (#12269)"},{"Id":"481315992","IsPullRequest":false,"CreatedAt":"2019-08-15T22:25:45","Actor":"richlander","Number":"12270","RawContent":null,"Title":"exe is not produced when PackAsTool = true","State":"closed","Body":"## Steps to reproduce\r\n\r\n- Create a new project\r\n- Add `<PackAsTool>true</PackAsTool>`\r\n\r\n## Expected  behavior\r\n\r\nYou get an exe\r\n\r\n## Actual behavior\r\n\r\nNo exe.\r\n\r\n## Environment data\r\n3.0 Preview 8\r\n\r\n## Commentary\r\n\r\nI think of PackAsTool as a publishing choice. Everything about the dev experience should be the same as regular projects until you act on packing the project as a tool.\r\n\r\nI understand that there are some challenges here, in that we don't have a good way of not publishing a build asset.\r\n\r\n/cc @vitek-karas \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12270","RelatedDescription":"Closed issue \"exe is not produced when PackAsTool = true\" (#12270)"},{"Id":"481348982","IsPullRequest":false,"CreatedAt":"2019-08-15T22:04:41","Actor":"richlander","Number":"12272","RawContent":null,"Title":"Confusing warning message about license, only for pack verb","State":"closed","Body":"This is the experience with .NET Core 3.0 Preview 8:\r\n\r\n```console\r\nC:\\git\\dependadotnet\\src\\dependadotnet>type dependadotnet.csproj | findstr license\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>type dependadotnet.csproj | findstr License\r\n    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>\r\n    <PackageLicenseUrl>https://github.com/dotnet/core/blob/master/LICENSE.TXT</PackageLicenseUrl>\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>dotnet build\r\nMicrosoft (R) Build Engine version 16.3.0-preview-19377-01+dd8019d9e for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 13.89 ms for C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.73\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>dotnet pack\r\nMicrosoft (R) Build Engine version 16.3.0-preview-19377-01+dd8019d9e for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 16.01 ms for C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\publish\\\r\n  Successfully created package 'C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\dependadotnet.2.1.4.nupkg'.\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(198,5): warning NU5125: The 'licenseUrl' element will be deprecated. Consider using the 'license' element instead. [C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj]\r\n```\r\n\r\nThis is the warning at issue:\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(198,5): warning NU5125: The 'licenseUrl' element will be deprecated. Consider using the 'license' element instead. [C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj]\r\n\r\nThat wording isn't directly actionable since I don't explicitly use \"licenseUrl\" in my project, and warning doesn't suggest that \"licenseUrl might be a substring of another element.\r\n\r\nMade this change (based on [NU5125](https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu5125)):\r\n\r\n` <PackageLicenseUrl>https://github.com/dotnet/core/blob/master/LICENSE.TXT</PackageLicenseUrl>`\r\n\r\nto\r\n\r\n`<PackageLicenseExpression>MIT</PackageLicenseExpression>`\r\n\r\nExperience:\r\n\r\n```console\r\nC:\\git\\dependadotnet\\src\\dependadotnet>type dependadotnet.csproj | findstr License\r\n    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>\r\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>dotnet build\r\nMicrosoft (R) Build Engine version 16.3.0-preview-19377-01+dd8019d9e for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 13.86 ms for C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.19\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>dotnet pack\r\nMicrosoft (R) Build Engine version 16.3.0-preview-19377-01+dd8019d9e for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 15.3 ms for C:\\git\\dependadotnet\\src\\dependadotnet\\dependadotnet.csproj.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\dependadotnet.dll\r\n  dependadotnet -> C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\netcoreapp3.0\\publish\\\r\n  Successfully created package 'C:\\git\\dependadotnet\\src\\dependadotnet\\bin\\Debug\\dependadotnet.2.1.4.nupkg'.\r\n\r\nC:\\git\\dependadotnet\\src\\dependadotnet>\r\n```\r\n\r\nWarning went away. That's good.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12272","RelatedDescription":"Closed issue \"Confusing warning message about license, only for pack verb\" (#12272)"},{"Id":"481318329","IsPullRequest":true,"CreatedAt":"2019-08-15T21:18:28","Actor":"dotnet-maestro[bot]","Number":"12271","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190815.3\r\n- **Date Produced**: 8/15/2019 8:12 PM\r\n- **Commit**: 4144eeb459d9ba956fc0d84d8d5a3e0408e88a09\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19415.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12271","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12271)"},{"Id":"482498316","IsPullRequest":false,"CreatedAt":"2019-07-15T08:17:59","Actor":"shvez","Number":"12296","RawContent":null,"Title":"publishing of heterogeneous solution","State":"open","Body":"Hi, there\r\n\r\nwe have a solution which contains netstandard assemblies and assemblies targeting netcoreapp and .net classic. \r\nif I publish the solution using netcoreapp for instance, I get errors that some project do not contain netcoreapp target.\r\n\r\nwould not it be more logical/convenient to publish netstandard assemblies as netstandard because they should work smooth with netcoreapp.  Of course, there could be ambiguous cases but I believe that in most cases it may work well\r\n\r\nwhat do you think?\r\n\r\nbest,\r\nilya","Url":"https://github.com/dotnet/cli/issues/12296","RelatedDescription":"Open issue \"publishing of heterogeneous solution\" (#12296)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"482581923","IsPullRequest":true,"CreatedAt":"2019-08-20T00:01:53","Actor":"terrajobst","Number":"1446","RawContent":null,"Title":"Add support for typed-datasets","State":"open","Body":"This completes the support for typed datasets which also enables the dataset designer in VS.\r\n\r\nSee https://github.com/dotnet/corefx/pull/36528.","Url":"https://github.com/dotnet/standard/pull/1446","RelatedDescription":"Open PR \"Add support for typed-datasets\" (#1446)"},{"Id":"481586618","IsPullRequest":true,"CreatedAt":"2019-08-19T17:08:10","Actor":"dotnet-maestro[bot]","Number":"1440","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1440","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1440)"},{"Id":"481881019","IsPullRequest":true,"CreatedAt":"2019-08-17T12:40:26","Actor":"dotnet-maestro[bot]","Number":"1445","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190816.11\r\n- **Date Produced**: 8/17/2019 3:27 AM\r\n- **Commit**: b3a4cdd6cd9b000ab05e585236455f1482a0bbf9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19416.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19416.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19416.11\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1445","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1445)"},{"Id":"481880992","IsPullRequest":true,"CreatedAt":"2019-08-17T12:30:04","Actor":"dotnet-maestro[bot]","Number":"1444","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190818.4\r\n- **Date Produced**: 8/19/2019 6:30 AM\r\n- **Commit**: 3d72b56b8e7d1e4e44262be6c45c2aac580bbbc4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19418.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19418.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19418.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1444","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#1444)"},{"Id":"481878978","IsPullRequest":true,"CreatedAt":"2019-08-17T12:12:07","Actor":"dotnet-maestro[bot]","Number":"1443","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1443","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1443)"},{"Id":"481587331","IsPullRequest":true,"CreatedAt":"2019-08-16T12:44:55","Actor":"dotnet-maestro[bot]","Number":"1442","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190815.9\r\n- **Date Produced**: 8/15/2019 11:51 PM\r\n- **Commit**: 1ac825dfc8ba0485ef4cf524a241f5309c43a2da\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19415.9\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19415.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19415.9\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1442","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1442)"},{"Id":"481587224","IsPullRequest":true,"CreatedAt":"2019-08-16T12:44:38","Actor":"dotnet-maestro[bot]","Number":"1441","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190815.13\r\n- **Date Produced**: 8/16/2019 7:46 AM\r\n- **Commit**: 4d2b68c2cda66c861aa918fd91e9bf7d664ea05f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19415.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19415.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19415.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1441","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1441)"},{"Id":"481577910","IsPullRequest":true,"CreatedAt":"2019-08-16T12:11:52","Actor":"dotnet-maestro[bot]","Number":"1439","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190815.27\r\n- **Date Produced**: 8/16/2019 1:27 AM\r\n- **Commit**: 98d779a16826fd6ecda6d4d4fa8da7b556b9638f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19415.27\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1439","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1439)"},{"Id":"481133549","IsPullRequest":true,"CreatedAt":"2019-08-15T21:03:09","Actor":"dotnet-maestro[bot]","Number":"1438","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190815.1\r\n- **Date Produced**: 8/15/2019 11:55 AM\r\n- **Commit**: 618de6e29d0c5b8b4cab65bdb98e6893240ab77d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19415.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19415.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19415.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1438","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1438)"},{"Id":"479824042","IsPullRequest":false,"CreatedAt":"2019-08-15T20:09:33","Actor":"watfordgnf","Number":"1431","RawContent":null,"Title":"Cannot use Dns.GetHostAddresses from .NET Standard 1.6 Library","State":"closed","Body":"Working on a fix for [NATS](https://github.com/nats-io/nats.net/issues/272), I used `Dns.GetHostAddresses` from the main library. The library is being built against .NET Standard 1.6.1, and I added the `System.Net.NameResolution` NuGet package to get this API. When trying to use it I receive the following build error:\r\n```\r\n1>Conn.cs(435,53,435,69): error CS0117: 'Dns' does not contain a definition for 'GetHostAddresses'\r\n```\r\nIntelliSense only suggests `Dns.GetHostAddressesAsync`.\r\n\r\nI'm not sure why I can't use `Dns.GetHostAddresses`. Reviewing the .NET Standard 1.6 API it is clear it wasn't shipped, so I added the relevant NuGet package. The NuGet package states it supports at least .NET Standard 1.3. Looking at the code in question, I cannot find any evidence it excludes that method for .NET Standard.","Url":"https://github.com/dotnet/standard/issues/1431","RelatedDescription":"Closed issue \"Cannot use Dns.GetHostAddresses from .NET Standard 1.6 Library\" (#1431)"},{"Id":"480673667","IsPullRequest":true,"CreatedAt":"2019-08-14T13:32:23","Actor":"dotnet-maestro[bot]","Number":"1437","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190813.13\r\n- **Date Produced**: 8/14/2019 12:47 AM\r\n- **Commit**: 3694ef6d674381439046667e3ae830b97f5912d7\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19413.13\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19413.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19413.13\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1437","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1437)"},{"Id":"480673470","IsPullRequest":true,"CreatedAt":"2019-08-14T13:26:57","Actor":"dotnet-maestro[bot]","Number":"1436","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190813.14\r\n- **Date Produced**: 8/14/2019 3:39 AM\r\n- **Commit**: cd666bb681149f76b6e716057928d299c8f47272\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19413.14\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19413.14\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19413.14\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1436","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1436)"},{"Id":"480641072","IsPullRequest":true,"CreatedAt":"2019-08-14T12:14:49","Actor":"dotnet-maestro[bot]","Number":"1435","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190812.7\r\n- **Date Produced**: 8/12/2019 9:37 PM\r\n- **Commit**: 82c822ee7db08f5347e6ac44e3ed465248394a9e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19412.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1435","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1435)"},{"Id":"480149972","IsPullRequest":true,"CreatedAt":"2019-08-13T13:23:44","Actor":"dotnet-maestro[bot]","Number":"1434","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190812.10\r\n- **Date Produced**: 8/13/2019 5:45 AM\r\n- **Commit**: 0feaf246b0fee4e32c3ef4206df1db0bd5621412\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19412.10\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19412.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19412.10\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1434","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1434)"},{"Id":"480149776","IsPullRequest":true,"CreatedAt":"2019-08-13T13:23:20","Actor":"dotnet-maestro[bot]","Number":"1433","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190812.11\r\n- **Date Produced**: 8/13/2019 7:58 AM\r\n- **Commit**: af36939acdf751d2465358be3f892170f73f9b48\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19412.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19412.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19412.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1433","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1433)"},{"Id":"480118854","IsPullRequest":true,"CreatedAt":"2019-08-13T12:14:42","Actor":"dotnet-maestro[bot]","Number":"1432","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190812.1\r\n- **Date Produced**: 8/12/2019 1:01 PM\r\n- **Commit**: ec2dd5b3e7d11b88b2ca0688bb1685836cfad20a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19412.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1432","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1432)"},{"Id":"479637204","IsPullRequest":true,"CreatedAt":"2019-08-12T13:19:56","Actor":"dotnet-maestro[bot]","Number":"1430","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190811.4\r\n- **Date Produced**: 8/11/2019 7:39 PM\r\n- **Commit**: 3c699c4fbde216b765de918999eb8b7c6e161653\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19411.4\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19411.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19411.4\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1430","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1430)"},{"Id":"479637035","IsPullRequest":true,"CreatedAt":"2019-08-12T13:19:32","Actor":"dotnet-maestro[bot]","Number":"1429","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190811.3\r\n- **Date Produced**: 8/11/2019 5:04 PM\r\n- **Commit**: 38ad8ed2b502a2717293df098fd44267dc6eaad6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19411.3\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19411.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19411.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1429","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1429)"},{"Id":"479608817","IsPullRequest":true,"CreatedAt":"2019-08-12T12:14:39","Actor":"dotnet-maestro[bot]","Number":"1428","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190811.1\r\n- **Date Produced**: 8/11/2019 1:05 PM\r\n- **Commit**: a11024c8c22cc762011addafc30c653c938048f4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19411.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19411.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19411.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19411.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19411.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19411.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1428","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1428)"},{"Id":"479368724","IsPullRequest":true,"CreatedAt":"2019-08-11T13:22:19","Actor":"dotnet-maestro[bot]","Number":"1427","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190810.6\r\n- **Date Produced**: 8/10/2019 10:05 PM\r\n- **Commit**: d137980838a9a1243afc1dc528d44a9f2be02b79\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19410.6\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19410.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19410.6\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1427","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1427)"},{"Id":"479368692","IsPullRequest":true,"CreatedAt":"2019-08-11T13:21:56","Actor":"dotnet-maestro[bot]","Number":"1426","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190810.5\r\n- **Date Produced**: 8/10/2019 9:44 PM\r\n- **Commit**: b129f7657a1b93ce9cf577d769d9d03c862e2338\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19410.5\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19410.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19410.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1426","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1426)"},{"Id":"479362425","IsPullRequest":true,"CreatedAt":"2019-08-11T12:14:52","Actor":"dotnet-maestro[bot]","Number":"1425","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190810.2\r\n- **Date Produced**: 8/10/2019 12:43 PM\r\n- **Commit**: e2f5f0f5c20a1fef71845795b09066a5cd892a7e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19410.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19410.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19410.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19410.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19410.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19410.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1425","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1425)"},{"Id":"479266166","IsPullRequest":true,"CreatedAt":"2019-08-10T13:23:40","Actor":"dotnet-maestro[bot]","Number":"1424","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190809.17\r\n- **Date Produced**: 8/10/2019 7:57 AM\r\n- **Commit**: b82d2bc44424c8a99a1f0fc13202bdfd43e6f9f5\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19409.17\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19409.17\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19409.17\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1424","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1424)"},{"Id":"479266137","IsPullRequest":true,"CreatedAt":"2019-08-10T13:23:17","Actor":"dotnet-maestro[bot]","Number":"1423","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190809.16\r\n- **Date Produced**: 8/10/2019 2:09 AM\r\n- **Commit**: a7c0f966923d3379febe517be672c30c0aac63e4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19409.16\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19409.16\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19409.16\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1423","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1423)"},{"Id":"479260390","IsPullRequest":true,"CreatedAt":"2019-08-10T12:14:50","Actor":"dotnet-maestro[bot]","Number":"1422","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190809.8\r\n- **Date Produced**: 8/10/2019 1:45 AM\r\n- **Commit**: f22982a641aa6f29585b6ab1de85912814a00bac\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19409.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19409.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19409.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19409.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19409.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19409.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1422","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1422)"},{"Id":"479056963","IsPullRequest":false,"CreatedAt":"2019-08-09T15:56:20","Actor":"dagood","Number":"1421","RawContent":null,"Title":"When building 2.2 packages, put assets in netstandard2.2 TFM","State":"open","Body":"Helps resolve https://github.com/dotnet/core-setup/issues/7567 in the best way.\r\n\r\nCurrently the `NETStandard.Library` 2.2 packages has assets in `build/netstandard2.1/ref/`. (Similar in the transport package.) Core-Setup carries this along when producing `NETStandard.Library.Ref`.","Url":"https://github.com/dotnet/standard/issues/1421","RelatedDescription":"Open issue \"When building 2.2 packages, put assets in netstandard2.2 TFM\" (#1421)"},{"Id":"478982965","IsPullRequest":true,"CreatedAt":"2019-08-09T13:29:02","Actor":"dotnet-maestro[bot]","Number":"1420","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190808.12\r\n- **Date Produced**: 8/8/2019 8:13 PM\r\n- **Commit**: cc92e719bc3564bc4ea913eb770cd5315a6c3bc1\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview9.19408.12\r\n  - **System.Reflection.Emit** -> 4.6.0-preview9.19408.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview9.19408.12\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1420","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1420)"},{"Id":"478982798","IsPullRequest":true,"CreatedAt":"2019-08-09T13:28:37","Actor":"dotnet-maestro[bot]","Number":"1419","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190809.1\r\n- **Date Produced**: 8/9/2019 10:13 AM\r\n- **Commit**: e122f306410b1045ab2f4cb7e533ece8556bee56\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19409.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19409.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19409.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1419","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1419)"},{"Id":"478952413","IsPullRequest":true,"CreatedAt":"2019-08-09T12:14:53","Actor":"dotnet-maestro[bot]","Number":"1418","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190808.13\r\n- **Date Produced**: 8/9/2019 2:43 AM\r\n- **Commit**: 524bb3e06ffd5b483a3c71a8f670b7a4bd2c232a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19408.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19408.13\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19408.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19408.13\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19408.13\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19408.13\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1418","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1418)"},{"Id":"478750569","IsPullRequest":false,"CreatedAt":"2019-08-09T01:10:44","Actor":"reflectronic","Number":"1417","RawContent":null,"Title":"Add System.Text.Rune","State":"open","Body":"It is probably a little too late, but please consider slipping in [`System.Text.Rune`](https://docs.microsoft.com/en-us/dotnet/api/system.text.rune) and related types (like [`StringRuneEnumerator`](https://docs.microsoft.com/en-us/dotnet/api/system.text.stringruneenumerator)/[`SpanRuneEnumerator`](https://docs.microsoft.com/en-us/dotnet/api/system.text.spanruneenumerator)) for .NET Standard 2.1 or 2.2","Url":"https://github.com/dotnet/standard/issues/1417","RelatedDescription":"Open issue \"Add System.Text.Rune\" (#1417)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"482484612","IsPullRequest":true,"CreatedAt":"2019-08-20T04:55:14","Actor":"ViktorHofer","Number":"40424","RawContent":null,"Title":"Revert \"Enable build on hosted arm64 (#40311)\"","State":"closed","Body":"This reverts commit 176da26d634fd760d7c8c99956f2e8d3f7d485e7.\r\n\r\n@omajid this broke the testing scenario as the ArchGroup defaults to x86 after this change. will revert this to unblock others and we can work on a follow-up change.\r\n\r\nDiscovered in https://github.com/dotnet/corefx/issues/40052#issuecomment-522498432\r\n\r\ncc @Gnbrkm41 @Wraith2 @steveharter ","Url":"https://github.com/dotnet/corefx/pull/40424","RelatedDescription":"Closed or merged PR \"Revert \"Enable build on hosted arm64 (#40311)\"\" (#40424)"},{"Id":"482626266","IsPullRequest":true,"CreatedAt":"2019-08-20T04:35:22","Actor":"layomia","Number":"40435","RawContent":null,"Title":"Use named argument syntax for null values in json serialization methods","State":"closed","Body":"Addresses https://github.com/dotnet/corefx/pull/40432#discussion_r315486549. cc @ahsonkhan ","Url":"https://github.com/dotnet/corefx/pull/40435","RelatedDescription":"Closed or merged PR \"Use named argument syntax for null values in json serialization methods\" (#40435)"},{"Id":"482143531","IsPullRequest":false,"CreatedAt":"2019-08-20T04:31:38","Actor":"phizch","Number":"40405","RawContent":null,"Title":"System.Text.Json.Serialization: Converters are ignored for types derived from supported base types","State":"closed","Body":"cc: @layomia,@ahsonkhan, @scalablecory, @steveharter\r\n\r\n### Related:\r\n- Add support for types derived from supported BCL collections #39001\r\n- Json serializer support for IEnumerable deserialization extensibilty #36640\r\n- Add support for generic interface-based collections in JsonSerializer #36756\r\n- Json serializer support for collections #36643\r\n\r\n### Description\r\n\r\nPull #39001 implemented by @layomia added support for serialization of types that implements natively supported collections without needing to create converters for them.\r\n\r\nUnfortunately the implementation treats all derived types as the base type, so it's not possible to create specialized collections with converters. E.g. `class MyCollection : List<int>` gets treated as `List<int>`.\r\n\r\nSpecialized collections is necessary if the json has multiple ways of declaring a list, e.g.\r\n``` json\r\n{\r\n  \"SpecialList\" : \r\n  {\r\n    \"Count\": 2,\r\n    \"Values\" : [ 1, 2 ]\r\n  },\r\n  \"NormalList\" : [ 1, 2 ] \r\n}\r\n``` \r\n\r\n``` CSharp\r\npublic class A\r\n{\r\n    [JsonConverter(typeof(MyCollectionConverter))] // this is ignored and converter for List<int> is used instead\r\n    public MyCollection SpecialList { get; set; }\r\n    public List<int> NormalList { get; set }\r\n}\r\n\r\n[JsonConverter(typeof(MyCollectionConverter))] // this is ignored and converter for List<int> is used instead\r\npublic class MyCollection : List<int> { }\r\n\r\npublic class MyCollectionConverter : JsonConverter<MyCollection>\r\n{\r\n    ....\r\n}\r\npublic class MyCollectionFactory : JsonConverterFactory\r\n{\r\n\tpublic override bool CanConvert(Type typeToConvert)\r\n    {\r\n        // this only sees List<int>\r\n    }\r\n}\r\npublic static void RunTest()\r\n{\r\n    JsonSerializerOptions options = new JsonSerializerOptions\r\n    {\r\n        Converters = \r\n        { \r\n            new MyCollectionFactory(), \r\n            new  MyCollectionConverter() // this is ignored and converter for List<int> is used \r\n        }\r\n    };\r\n\r\n    _ = JsonSerializer.Deserialize<A>(\"{}\", options);\r\n}\r\n```\r\n\r\n\r\n\r\nExpected priorities for getting the converter:\r\n```\r\n// Priority 1: attempt to get converter from JsonConverterAttribute on property.\r\n// Priority 2: Attempt to get custom converter added at runtime.\r\n// Priority 3: Attempt to get converter from [JsonConverter] on the type being converted.\r\n// Priority 4: Attempt to get built-in converter.\r\n```\r\nCurrent behavior\r\n```\r\n// Priority 0: if type is derived from supported type, use converter for base type\r\n// Priority 1: attempt to get converter from JsonConverterAttribute on property.\r\n// Priority 2: Attempt to get custom converter added at runtime.\r\n// Priority 3: Attempt to get converter from [JsonConverter] on the type being converted.\r\n// Priority 4: Attempt to get built-in converter.\r\n```\r\n\r\n\r\nFrom `JsonClassInfo.AddProperty` [source]From `JsonClassInfo.AddProperty` [source](https://github.com/dotnet/corefx/blob/3d72b56b8e7d1e4e44262be6c45c2aac580bbbc4/src/System.Text.Json/src/System/Text/Json/Serialization/JsonClassInfo.AddProperty.cs#L30-L41):\r\n``` CSharp\r\n    // Get implemented type, if applicable.\r\n    // Will return the propertyType itself if it's a non-enumerable, string, or natively supported collection.\r\n    Type implementedType = GetImplementedCollectionType(propertyType);\r\n    if (implementedType != propertyType)\r\n    {\r\n        jsonInfo = CreateProperty(implementedType, implementedType, implementedType, null, typeof(object), options);\r\n    }\r\n    else\r\n    {\r\n        jsonInfo = CreateProperty(propertyType, propertyType, propertyType, propertyInfo, classType, options);\r\n    }\r\n```\r\nIn my example `GetImplementedCollectionType(typeof(MyCollection))` will return `List<int>`.\r\n\r\nI'm currently looking into it to see if I can find a fix.\r\n\r\n--\r\nJust found another bug: Since `propertyInfo` is ignored any `JsonIgnoreAttribute` will also be ignored. \r\ne.g.\r\n```\r\npublic class C\r\n{\r\n    public int Version { get; set; }\r\n    \r\n    [JsonIgnore] // this will be ignored\r\n    public MyCollection { get; set; }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/40405","RelatedDescription":"Closed issue \"System.Text.Json.Serialization: Converters are ignored for types derived from supported base types\" (#40405)"},{"Id":"482606494","IsPullRequest":true,"CreatedAt":"2019-08-20T04:30:31","Actor":"layomia","Number":"40432","RawContent":null,"Title":"[release/3.0] Honor converters for implementing types (#40411)","State":"closed","Body":"Ports https://github.com/dotnet/corefx/pull/40411 to 3.0.\r\nFixes https://github.com/dotnet/corefx/issues/40405.\r\n\r\ncc @steveharter , @ahsonkhan, @ericstj, @eerhardt, @Anipik, @wtgodbe, @danmosemsft \r\n\r\n## Description\r\nPrior to this change, custom converters added to serialize and deserialize implementing types (enumerables that implement BCL enumerables e.g. `public class StackWrapper : Stack {}`) were being ignored. This blocks custom (de)serialization of implementing types in the serializer, including as a workaround for unsupported cases.\r\n\r\nThis change fixes this issue.\r\n\r\n## Customer Impact\r\n\r\nCustomers will now be able to implement custom serialization and deserialization for implementing types. This is particularly important as a workaround for unsupported cases.\r\n\r\nCustomer have complained about converters being ignored:\r\nhttps://github.com/dotnet/corefx/issues/40405\r\nhttps://github.com/dotnet/corefx/issues/40391\r\n\r\n## Regression?\r\n\r\nNo.\r\n\r\n## Risk\r\n\r\nLow. Extensive test cases were added for both supported and unsupported implementing-type custom serialization scenarios.","Url":"https://github.com/dotnet/corefx/pull/40432","RelatedDescription":"Closed or merged PR \"[release/3.0] Honor converters for implementing types (#40411)\" (#40432)"},{"Id":"482607905","IsPullRequest":true,"CreatedAt":"2019-08-20T04:01:34","Actor":"carlossanlop","Number":"40433","RawContent":null,"Title":"Bump IntelliSense nupkg version to Preview 8 in eng/Versions.props - Last batch","State":"closed","Body":"Updated the nuget package to include the last batch of APIs that were documented last Friday for System.Data, System.Text.Json, WPF and Winforms.","Url":"https://github.com/dotnet/corefx/pull/40433","RelatedDescription":"Closed or merged PR \"Bump IntelliSense nupkg version to Preview 8 in eng/Versions.props - Last batch\" (#40433)"},{"Id":"482358723","IsPullRequest":true,"CreatedAt":"2019-08-20T03:27:50","Actor":"layomia","Number":"40413","RawContent":null,"Title":"[release/3.0] Honor JsonIgnore attribute when applied to unsupported collections","State":"closed","Body":"Ports https://github.com/dotnet/corefx/pull/40401 to 3.0\r\n\r\ncc @steveharter, @ericstj, @danmosemsft, @ahsonkhan @eerhardt, @Anipik, @wtgodbe\r\n\r\n## Description\r\nFixes bug where the JsonIgnore attribute was not being honored for unsupported collections.\r\n\r\nThis change allows us to (de)serialize without throwing NotSupported/JsonException when unsupported collections are ignored like in this scenario:\r\n\r\n```csharp\r\nclass JsonIgnoreTest\r\n{\r\n    [JsonIgnore]\r\n    public ConcurrentDictionary<object, object> MyDict { get; set; }\r\n}\r\n```\r\n\r\n## Customer Impact\r\nProvides expected behavior in scenario above.\r\nFixed #40305 in master.\r\n\r\n## Regression?\r\n\r\nNo.\r\n\r\n## Risk\r\n\r\nLow. Relevant test cases were added.","Url":"https://github.com/dotnet/corefx/pull/40413","RelatedDescription":"Closed or merged PR \"[release/3.0] Honor JsonIgnore attribute when applied to unsupported collections\" (#40413)"},{"Id":"482609509","IsPullRequest":false,"CreatedAt":"2019-08-20T02:17:09","Actor":"AriNuer","Number":"40434","RawContent":null,"Title":"Test failure: System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Span.RsaDecryptPkcs1LeadingZero","State":"open","Body":"Test `System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Span.RsaDecryptPkcs1LeadingZero` has failed.\r\n```\r\n\r\nError message\r\nAssert.Equal() Failure\\r\\nExpected: Byte[] [72, 101, 108, 108, 111]\\r\\nActual: Byte[] [72, 0, 0, 0, 0]\r\n\r\nStack trace\r\n   at System.Security.Cryptography.Rsa.Tests.EncryptDecrypt.RsaDecryptPkcs1LeadingZero() in /_/src/Common/tests/System/Security/Cryptography/AlgorithmImplementations/RSA/EncryptDecrypt.cs:line 504\r\n```\r\nBuild: -[20190819.49](https://dnceng.visualstudio.com/public/_build/results?buildId=316080&view=logs)(Master)\r\n\r\nDetails:\r\nhttps://dnceng.visualstudio.com/public/_build/results?buildId=316080&view=ms.vss-test-web.build-test-results-tab&runId=9143864&resultId=170398&paneView=debug","Url":"https://github.com/dotnet/corefx/issues/40434","RelatedDescription":"Open issue \"Test failure: System.Security.Cryptography.Rsa.Tests.EncryptDecrypt_Span.RsaDecryptPkcs1LeadingZero\" (#40434)"},{"Id":"482594498","IsPullRequest":true,"CreatedAt":"2019-08-20T02:01:25","Actor":"carlossanlop","Number":"40430","RawContent":null,"Title":"Bump IntelliSense nupkg version to Preview 8 in eng/Versions.props - Last batch","State":"closed","Body":"Updated the nuget package to include the last batch of APIs that were documented last Friday for System.Data, System.Text.Json, WPF and Winforms.","Url":"https://github.com/dotnet/corefx/pull/40430","RelatedDescription":"Closed or merged PR \"Bump IntelliSense nupkg version to Preview 8 in eng/Versions.props - Last batch\" (#40430)"},{"Id":"482602958","IsPullRequest":true,"CreatedAt":"2019-08-20T01:45:20","Actor":"CodeBlanch","Number":"40431","RawContent":null,"Title":"JsonSerializer will now ignore properties decorated with JsonExtensionDataAttribute if they are null when serializing.","State":"open","Body":"Currently a class using [JsonExtensionData] like this...\r\n```\r\n        private class ClassWithExtensionPropertyAsObject\r\n        {\r\n            [JsonExtensionData]\r\n            public Dictionary<string, object> MyOverflow { get; set; }\r\n        }\r\n```\r\n\r\nWill serialize as...\r\n```\r\n{\r\n        \"MyOverflow\": null\r\n}\r\n```\r\n\r\nWhen \"MyOverflow\" Property is null.\r\n\r\nThis PR fixes that so it ends up as...\r\n```\r\n{\r\n}\r\n```\r\n\r\nI think this better matches the intention of [JsonExtensionData] and Json.NET behavior so people aren't surprised when using the new lib.","Url":"https://github.com/dotnet/corefx/pull/40431","RelatedDescription":"Open PR \"JsonSerializer will now ignore properties decorated with JsonExtensionDataAttribute if they are null when serializing.\" (#40431)"},{"Id":"482594276","IsPullRequest":true,"CreatedAt":"2019-08-20T01:02:20","Actor":"Dotnet-GitSync-Bot","Number":"40429","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/40429","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#40429)"},{"Id":"482405570","IsPullRequest":true,"CreatedAt":"2019-08-20T00:59:08","Actor":"madmir","Number":"40415","RawContent":null,"Title":"Re-enable xunit warning 1019","State":"closed","Body":"Make MemberData reference IEnumerable<object[]>\r\n\r\nContributes to #39697\r\ncc: @stephentoub","Url":"https://github.com/dotnet/corefx/pull/40415","RelatedDescription":"Closed or merged PR \"Re-enable xunit warning 1019\" (#40415)"},{"Id":"482458061","IsPullRequest":true,"CreatedAt":"2019-08-20T00:08:06","Actor":"ahsonkhan","Number":"40419","RawContent":null,"Title":"[release/3.0] Update Utf8JsonWriter.WriteNumber{Value}(double/float) to support infinity correctly for all cases","State":"closed","Body":"Ports https://github.com/dotnet/corefx/pull/40197 and https://github.com/dotnet/corefx/pull/40408 to 3.0\r\n\r\nFixes https://github.com/dotnet/corefx/issues/40133\r\n\r\ncc @steveharter, @ericstj, @danmosemsft, @ahsonkhan @eerhardt, @Anipik, @wtgodbe, @WinCPP, @tannergooding  \r\n\r\n## Description\r\nFor down-level platforms (specifically netfx), apply the best effort formatting of doubles and float so they are more likely to round-trip. This fix was added in https://github.com/dotnet/corefx/pull/38322 but not applied consistently for all the overloads that write double and floats as JSON via the writer.\r\n\r\nUpdating some tests that don't round-trip well on netfx since, in @tannergooding's words, the parsing algorithm for .net framework is incorrect and will fail to correctly parse some values, even at G17. .NET Framework doesn't provide a way to return more than 17 digits and so there is no workaround.\r\n\r\n## Customer Impact\r\n\r\nWe now correctly handle writing double and floats based on the underlying framework. This change makes sure that the writer logic is consistent for netfx for all APIs so that is easy to reason about and maintain.\r\n\r\n## Regression?\r\n\r\nNo.\r\n\r\n## Risk\r\n\r\nLow. Relevant test cases were added and it only impacts netfx. The only concern is that certain numbers that previously were round-tripping (like 3.14), by chance when using default ToString(), no longer do so when using G17. This is the expected behavior of double/float formatting on netfx.","Url":"https://github.com/dotnet/corefx/pull/40419","RelatedDescription":"Closed or merged PR \"[release/3.0] Update Utf8JsonWriter.WriteNumber{Value}(double/float) to support infinity correctly for all cases\" (#40419)"},{"Id":"482466246","IsPullRequest":true,"CreatedAt":"2019-08-20T00:07:30","Actor":"ahsonkhan","Number":"40420","RawContent":null,"Title":"[release/3.0] Do not do hidden/unavoidable sync stream writes when using the Utf8JsonWriter (during grow).","State":"closed","Body":"Ports https://github.com/dotnet/corefx/pull/40047 to 3.0\r\n\r\nFixes https://github.com/dotnet/corefx/issues/39837\r\n\r\ncc @steveharter, @ericstj, @danmosemsft, @ahsonkhan @eerhardt, @Anipik, @wtgodbe, @bartonjs, @stephentoub \r\n\r\n## Description\r\nAvoid writing synchronously to the underlying stream when growing the buffer used to write JSON into. We rely on the user explicitly calling FlushAsync (or DisposeAsync) for flushing the buffer and writing to the stream.\r\n\r\n## Customer Impact\r\n\r\nThe current implementation did a hidden synchronous write to the stream which goes against ASP.NET's no sync IO default policy. Without this, there is no way for the user to avoid the sync write and within an aspnet app and would be required to turn that policy off (by setting `options.AllowSynchronousIO` when configuring the services on Startup), which isn't ideal. Now, the user is able to create a `Utf8JsonWriter` around an ASP.NET Core `context.Response.Body` Stream, as a way of easily writing out a response JSON payload. This mismatch was previously causing unexpected failures. See https://github.com/dotnet/corefx/issues/39648 for an example.\r\n\r\n## Regression?\r\n\r\nNo.\r\n\r\n## Risk\r\n\r\nLow. Verified within an aspnet test app that we are no longer doing sync-writes and violating the default policy. As a side-effect of this change, if the user writes more than 1 GB of JSON without flushing, we'd throw, but that is an extreme edge case which the user shouldn't get into.","Url":"https://github.com/dotnet/corefx/pull/40420","RelatedDescription":"Closed or merged PR \"[release/3.0] Do not do hidden/unavoidable sync stream writes when using the Utf8JsonWriter (during grow).\" (#40420)"},{"Id":"482329641","IsPullRequest":true,"CreatedAt":"2019-08-20T00:06:49","Actor":"layomia","Number":"40411","RawContent":null,"Title":"Honor converters for implementing types","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/40405.","Url":"https://github.com/dotnet/corefx/pull/40411","RelatedDescription":"Closed or merged PR \"Honor converters for implementing types\" (#40411)"},{"Id":"482487158","IsPullRequest":true,"CreatedAt":"2019-08-20T00:04:44","Actor":"steveharter","Number":"40425","RawContent":null,"Title":"[release/3.0] Change 'type' to 'inputType' on serialize methods (#40372)","State":"closed","Body":"Port https://github.com/dotnet/corefx/pull/40372 to 3.0\r\n\r\ncc: @eerhardt\r\n\r\n## Description\r\n\r\nDuring the mass API changes of the serializer #38933 for Preview 7, the parameter name changes from \"type\" to \"inputType\" on Serialize methods were only made to the ref.cs file, not the source, so a subsequent re-gen after Preview 7 of the ref.cs for an unrelated issue #39524 reverted that.\r\n\r\nThis PR adds backs the change from \"type\" to \"inputType\" to both the source and the ref.\r\n\r\n## Regression?\r\n\r\nThe code is new in 3.0. However this is a \"build-time\" break from Preview 7 due to the renamed parameters, but this only applies if named parameters were used in the code, which is unlikely.\r\n\r\n## Risk\r\n\r\nLow. Only the argument names changed along with  the corresponding xml doc and very minor consuming code of those parameters.\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40425","RelatedDescription":"Closed or merged PR \"[release/3.0] Change 'type' to 'inputType' on serialize methods (#40372)\" (#40425)"},{"Id":"482573196","IsPullRequest":false,"CreatedAt":"2019-08-20T00:03:24","Actor":"TylerLeonhardt","Number":"40428","RawContent":null,"Title":"Uri constructor with UriKind.RelativeOrAbsolute incorrectly calls macOS path relative when it's absolute","State":"closed","Body":"Here's a simple PowerShell example:\r\n\r\n```pwsh\r\n[Uri]::new(\"/Users/tyler/\").IsAbsoluteUri\r\n\r\n# gives you\r\n\r\ntrue\r\n\r\n# and \r\n\r\n[Uri]::new(\"/Users/tyler/\", [System.UriKind]::RelativeOrAbsolute).IsAbsoluteUri\r\n\r\n#gives you\r\n\r\nfalse\r\n```\r\n\r\nI can repro this in .NET Core 3.0 and .NET Core 2.1.\r\n\r\nIs this behavior expected? It's causing [Newtonsoft to do the wrong thing](https://github.com/JamesNK/Newtonsoft.Json/issues/2128#issuecomment-522261724) when serializing and deserializing `Uri`s.","Url":"https://github.com/dotnet/corefx/issues/40428","RelatedDescription":"Closed issue \"Uri constructor with UriKind.RelativeOrAbsolute incorrectly calls macOS path relative when it's absolute\" (#40428)"},{"Id":"482549322","IsPullRequest":true,"CreatedAt":"2019-08-19T23:59:01","Actor":"ericstj","Number":"40426","RawContent":null,"Title":"Don't restore files to later overwrite them during the build","State":"closed","Body":"NETStandard2.1 includes more facades which we still build in corefx.\r\n\r\nMake sure we don't copy these then later overwrite them during the ref build.\r\n\r\nbinplacePackages was restoring runtime files even on NETCoreApp:\r\nwe should never do this.  We have to be careful to only test assemblies\r\nwe build in the repo for netcoreapp.  The only test target which needs\r\nthese is NETFX.\r\n\r\nRelease port of https://github.com/dotnet/corefx/pull/40199\r\n\r\nFixes #40417","Url":"https://github.com/dotnet/corefx/pull/40426","RelatedDescription":"Closed or merged PR \"Don't restore files to later overwrite them during the build\" (#40426)"},{"Id":"482388523","IsPullRequest":true,"CreatedAt":"2019-08-19T22:42:50","Actor":"layomia","Number":"40414","RawContent":null,"Title":"Use new instances of JsonSerializerOptions in property visibility tes…","State":"closed","Body":"…ts to prevent re-using cached metadata\r\n\r\nAddresses https://github.com/dotnet/corefx/pull/40401#discussion_r315266220\r\nPorting to 3.0 in https://github.com/dotnet/corefx/pull/40413/commits/1c81d39f34bad62bfe27379c93d2c19b53bd3301.","Url":"https://github.com/dotnet/corefx/pull/40414","RelatedDescription":"Closed or merged PR \"Use new instances of JsonSerializerOptions in property visibility tes…\" (#40414)"},{"Id":"482558391","IsPullRequest":true,"CreatedAt":"2019-08-19T22:37:05","Actor":"joperezr","Number":"40427","RawContent":null,"Title":"Revert \"Enable build on hosted arm64\"","State":"closed","Body":"Reverts dotnet/corefx#40311\r\n\r\nFYI @ViktorHofer @wfurt @omajid @Jozkee \r\n\r\nI'm reverting this PR as it broke our VS scenario. Basically by default, we always built targeting x64, but because VS runs as an x86 process, we are now picking a different configuration when building inside VS. This is causing for all of our tests to break, as now you won't be able to build and run tests from VS. I'm not sure what was the main reasoning behind the original change, since I assumed that you could achieve the same thing by simply passing in ArchGroup when calling ./build.sh and that would allow you to control how to build in a hosted environment. Anyways, I'm revering this now in order to unblock devs broken trying to run tests in VS now, @omajid but feel free to submit a new PR taking this problem in consideration.","Url":"https://github.com/dotnet/corefx/pull/40427","RelatedDescription":"Closed or merged PR \"Revert \"Enable build on hosted arm64\"\" (#40427)"},{"Id":"482332852","IsPullRequest":false,"CreatedAt":"2019-08-19T19:36:24","Actor":"Daddoon","Number":"40412","RawContent":null,"Title":"[System.Text.Json] Serialize throw \"System.ArgumentOutOfRangeException\" while serializing a JSON string","State":"closed","Body":"Hello,\r\n\r\nI'm actually having a blocking issue on my Blazor project due to a very strange behavior withing the System.Text.Json serializer.\r\n\r\nIt seem to me a very specific bug. I'm actually serializing a C# object to a simple string with Newtonsoft.Json.\r\n\r\nI get the serialized object, and send it through the InvokAsync interop method, in order to call Javascript and i have this exception:\r\n\r\n```\r\nSystem.ArgumentOutOfRangeException : 'Specified argument was out of the range of valid values.'\r\n```\r\n\r\nAfter digging, i see that **System.Text.Json.JsonSerializer.Serialize** seem faulty, but the weirdest thing is that i only ask the serializer to serialize a string, not a plain class or other things.\r\n\r\nIt seem that this is some weird serializing conditions in the plugin with non-unicode characters (somehow).\r\n\r\nThis is OK:\r\n\r\n```csharp\r\nSystem.Text.Json.JsonSerializer.Serialize(\"ààààaaa\");\r\n```\r\n\r\nThis is OK:\r\n\r\n```csharp\r\nSystem.Text.Json.JsonSerializer.Serialize(\"{\\\"$type\\\":\\\"BlazorMobile.Common.Interop.MethodProxy, BlazorMobile.Common\\\",\\\"TaskIdentity\\\":\\\"4d8349dd-0fa7-40d2-b3ca-aaea7814cec4\\\",\\\"TaskSuccess\\\":{\\\"$type\\\":\\\"System.Boolean\\\",\\\"$value\\\":false},\\\"AsyncTask\\\":{\\\"$type\\\":\\\"System.Boolean\\\",\\\"$value\\\":false},\\\"ReturnType\\\":{\\\"$type\\\":\\\"BlazorMobile.Common.Interop.TypeProxy, BlazorMobile.Common\\\",\\\"SerializedData\\\":\\\"\\\\\\\"BlazorMobile.Common.Models.IgnoredType, BlazorMobile.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\\\\\\\"\\\"},\\\"ReturnValue\\\":null,\\\"InterfaceType\\\":{\\\"$type\\\":\\\"BlazorMobile.Common.Interop.TypeProxy, BlazorMobile.Common\\\",\\\"SerializedData\\\":\\\"\\\\\\\"SoNG.Mobile.App.Common.Interfaces.IXamarinBridge, SoNG.Mobile.App.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\\\\\\\"\\\"},\\\"MethodIndex\\\":{\\\"$type\\\":\\\"System.Int32\\\",\\\"$value\\\":0},\\\"GenericTypes\\\":{\\\"$type\\\":\\\"BlazorMobile.Common.Interop.TypeProxy[], BlazorMobile.Common\\\",\\\"$values\\\":[]},\\\"Parameters\\\":{\\\"$type\\\":\\\"System.Object[], %CORE%\\\",\\\"$values\\\":[\\\"\\\",\\\"Erreur: Impossible de se connecter a internet\\\",\\\"OK\\\"]},\\\"ExceptionDescriptor\\\":null}\");\r\n```\r\n\r\nThis throw an exception:\r\n\r\n```csharp\r\nSystem.Text.Json.JsonSerializer.Serialize(\"{\\\"$type\\\":\\\"BlazorMobile.Common.Interop.MethodProxy, BlazorMobile.Common\\\",\\\"TaskIdentity\\\":\\\"4d8349dd-0fa7-40d2-b3ca-aaea7814cec4\\\",\\\"TaskSuccess\\\":{\\\"$type\\\":\\\"System.Boolean\\\",\\\"$value\\\":false},\\\"AsyncTask\\\":{\\\"$type\\\":\\\"System.Boolean\\\",\\\"$value\\\":false},\\\"ReturnType\\\":{\\\"$type\\\":\\\"BlazorMobile.Common.Interop.TypeProxy, BlazorMobile.Common\\\",\\\"SerializedData\\\":\\\"\\\\\\\"BlazorMobile.Common.Models.IgnoredType, BlazorMobile.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\\\\\\\"\\\"},\\\"ReturnValue\\\":null,\\\"InterfaceType\\\":{\\\"$type\\\":\\\"BlazorMobile.Common.Interop.TypeProxy, BlazorMobile.Common\\\",\\\"SerializedData\\\":\\\"\\\\\\\"SoNG.Mobile.App.Common.Interfaces.IXamarinBridge, SoNG.Mobile.App.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\\\\\\\"\\\"},\\\"MethodIndex\\\":{\\\"$type\\\":\\\"System.Int32\\\",\\\"$value\\\":0},\\\"GenericTypes\\\":{\\\"$type\\\":\\\"BlazorMobile.Common.Interop.TypeProxy[], BlazorMobile.Common\\\",\\\"$values\\\":[]},\\\"Parameters\\\":{\\\"$type\\\":\\\"System.Object[], %CORE%\\\",\\\"$values\\\":[\\\"\\\",\\\"Erreur: Impossible de se connecter à internet\\\",\\\"OK\\\"]},\\\"ExceptionDescriptor\\\":null}\");\r\n```\r\n\r\nNote the \"à\" **Impossible de se connecter à internet**.\r\n\r\nIn my opinion it seem that somehow the serializer is trying to parse something instead of just converting/escaping my plain string, or somehow in THIS condition, the special character throw something.\r\n\r\nThanks in advance for your reviews !","Url":"https://github.com/dotnet/corefx/issues/40412","RelatedDescription":"Closed issue \"[System.Text.Json] Serialize throw \"System.ArgumentOutOfRangeException\" while serializing a JSON string\" (#40412)"},{"Id":"482476003","IsPullRequest":true,"CreatedAt":"2019-08-19T19:03:48","Actor":"Dotnet-GitSync-Bot","Number":"40423","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corefx/pull/40423","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#40423)"},{"Id":"482473158","IsPullRequest":true,"CreatedAt":"2019-08-19T18:56:11","Actor":"ahsonkhan","Number":"40422","RawContent":null,"Title":"[release/3.0] Fix BytesConsumed and error messages when reading JSON payloads within a multi-segment ReadOnlySequence via Utf8JsonReader","State":"open","Body":"Ports https://github.com/dotnet/corefx/pull/40303 and https://github.com/dotnet/corefx/pull/40349 to 3.0\r\n\r\nAddresses https://github.com/dotnet/corefx/issues/39974 for valid JSON and invalid JSON (where exception message is consistent/accurate)\r\n\r\ncc @steveharter, @ericstj, @danmosemsft, @ahsonkhan @eerhardt, @Anipik, @wtgodbe, @bartonjs, @stephentoub, @GSPP \r\n\r\n## Description\r\n\r\nFor processing valid JSON input:\r\nWe missed updating the bytes consumed in one instance when parsing numbers within JSON that is contained within a multi-segment `ReadOnlySequence<byte>`. Updating other instances of consumed to be updated correctly as well. Additionally, we are now consistently recovering the necessary reader state when the user passes in incomplete payload so they can continue with more data on subsequent reads.\r\n\r\nAlso fix setting up the initial positions during the ctor when the first segment happens to be empty.\r\n\r\nFor processing invalid JSON input:\r\nThere were a few places where the exception message and the values we returned as part of usability/diagnostics was inconsistent (or incorrect) when the user passed-in multi-segment data. Also, even though we don't provide guarantees on the reader state being recoverable after an error, certain properties like Line Number and Position In Line are still useful. This change also makes sure to avoid incorrectly increasing line number when seeing escaped new line characters within quoted strings.\r\n\r\n## Customer Impact\r\n\r\nThe bug was customer-reported as part of testing various JSON payloads (both valid/invalid) and making sure the behavior is consistent.\r\n\r\nWhen polling Utf8JsonReader.BytesConsumed, the user will now see a consistent result regardless of which input source contained their data (whether it was a span, or a multi-segment sequence where the number being parsed straddled a segment boundary). For example, after reading \"2e2\", that was split into three segments, we reported BytesConsumed as 2 instead of 3.\r\n\r\nWhen the user observes the exception for invalid JSON (or programmatically polls the Line Number/Position properties), the message and values are accurate in many of the edge cases now. This helps with end-user-experience and diagnostics.\r\n\r\n## Regression?\r\n\r\nNo.\r\n\r\n## Risk\r\n\r\nLow. Significant test cases were added and this only affects an edge use case on multi-segment buffers where the user is relying on the BytesConsumed property (low usage). The other changes involve the exception path for invalid JSON. The only risk is that we are updating code that was previously prone to off-by-one errors, but we have significant tests for all the various number inputs.","Url":"https://github.com/dotnet/corefx/pull/40422","RelatedDescription":"Open PR \"[release/3.0] Fix BytesConsumed and error messages when reading JSON payloads within a multi-segment ReadOnlySequence via Utf8JsonReader\" (#40422)"},{"Id":"482472500","IsPullRequest":false,"CreatedAt":"2019-08-19T18:54:44","Actor":"BluePositive","Number":"40421","RawContent":null,"Title":"String IgnoreCase extension method","State":"open","Body":"How about to split the [Equals](https://docs.microsoft.com/en-us/dotnet/api/system.string.equals?view=netframework-4.8#System_String_Equals_System_String_System_String_System_StringComparison_) String extension method in 2 `Equals() `and` EqualsIgnoreCase()`\r\neach  should a have a default behavior and you can alter it by passing a   [StringComparison Enum](https://docs.microsoft.com/en-us/dotnet/api/system.stringcomparison?view=netframework-4.8#fields) \r\nI think it will make it easier to use (and more likely to be noticed with an IDE )\r\n","Url":"https://github.com/dotnet/corefx/issues/40421","RelatedDescription":"Open issue \"String IgnoreCase extension method\" (#40421)"},{"Id":"482433882","IsPullRequest":false,"CreatedAt":"2019-08-19T17:24:54","Actor":"adaggarwal","Number":"40417","RawContent":null,"Title":"Incorrect testhost configuration for source-build","State":"open","Body":"Environment - CentOS docker on RHEL7 Hyper-V vm. \r\nCoreFX version - 1bb52e6a3db7f3673a3825f3677b9f27b9af99aa\r\n[Sourcebuild](https://github.com/NikolaMilosavljevic/source-build/tree/eb30c269429785b4bc057b61b7f9a163c2383845 )  [PR](https://github.com/dotnet/source-build/pull/1113)\r\n\r\nDetails:\r\nThe testhost that gets cooked up in sourcebuild->corefx->artifacts has a faulty **System.Memory.dll** when compared to the one in standalone corefx. This results in test run failures for source-build corefx tests. It seems to be a configuration issue. \r\n\r\nSteps to repro:\r\n\r\n1. Use source-build clone for the commit SHA1 aforementioned. And `build.sh` for a primary build.\r\n2. For setting up test utilities and running the tests; build again with test flag, i.e. `build.sh -test`\r\n\r\n[Extra Steps to validate the erroneous dll] -> \r\n\r\n1. Build a standalone corefx using the commit SHA1 mentioned and copy System.Memory.dll from shared testhost to SB/bin/src/corefx.<SHA1>/artifacts/bin/testhost/<>/<>/shared/. \r\n2. Manually run any of the tests which were failing previously in source-build test build. ","Url":"https://github.com/dotnet/corefx/issues/40417","RelatedDescription":"Open issue \"Incorrect testhost configuration for source-build\" (#40417)"},{"Id":"482187629","IsPullRequest":false,"CreatedAt":"2019-08-19T12:39:50","Actor":"AriNuer","Number":"40406","RawContent":null,"Title":"Test failure: System.Text.Json.Serialization.Tests.OptionsTests.Options_GetConverter_GivesCorrectDefaultConverterAndReadWriteSuccess","State":"closed","Body":"Test `System.Text.Json.Serialization.Tests.OptionsTests.Options_GetConverter_GivesCorrectDefaultConverterAndReadWriteSuccess` has failed.\r\n\r\n```\r\nError message\r\nAssert.Equal() Failure\\r\\n ↓ (pos 4)\\r\\nExpected: 3.14\\r\\nActual: 3.1400000000000001\\r\\n ↑ (pos 4)\r\n\r\nStack trace\r\n   at System.Text.Json.Serialization.Tests.OptionsTests.GenericConverterTestHelper[T](String converterName, Object objectValue, String stringValue, JsonSerializerOptions options) in /_/src/System.Text.Json/tests/Serialization/OptionsTests.cs:line 446\r\n   at System.Text.Json.Serialization.Tests.OptionsTests.Options_GetConverter_GivesCorrectDefaultConverterAndReadWriteSuccess() in /_/src/System.Text.Json/tests/Serialization/OptionsTests.cs:line 388\r\n```\r\nBuild: -[20190819.1](https://dnceng.visualstudio.com/public/_build/results?buildId=315168&view=logs)(Master)\r\n\r\nDetails:\r\nhttps://dnceng.visualstudio.com/public/_build/results?buildId=315168&view=ms.vss-test-web.build-test-results-tab&runId=9114846&resultId=111373&paneView=debug","Url":"https://github.com/dotnet/corefx/issues/40406","RelatedDescription":"Closed issue \"Test failure: System.Text.Json.Serialization.Tests.OptionsTests.Options_GetConverter_GivesCorrectDefaultConverterAndReadWriteSuccess\" (#40406)"},{"Id":"482244987","IsPullRequest":false,"CreatedAt":"2019-08-19T11:28:02","Actor":"ayende","Number":"40410","RawContent":null,"Title":"Process.Start isn't using vfork on Ubuntu 18.04","State":"closed","Body":"The following code will fail to run on Ubuntu 18.04 system that has a 0.5 RAM + 1 GB Swap.\r\n\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nnamespace Tryouts\r\n{\r\n    public static class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Starting...\");\r\n            var mem = new byte[1024 * 1024 * 768];\r\n            for (int i = 0; i < mem.Length; i++)\r\n            {\r\n                mem[i] = (byte)i;\r\n            }\r\n\r\n            Console.WriteLine(\"Ready...\");\r\n\r\n            Process.Start(\"/bin/bash\", \"-c echo 'test'\").WaitForExit();\r\n\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI'm getting the output:\r\n\r\n```\r\nStarting...\r\nReady...\r\n\r\nUnhandled Exception: System.ComponentModel.Win32Exception: Cannot allocate memory\r\n   at Interop.Sys.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setUser, UInt32 userId, UInt32 groupId, Int32& lpChildPid, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean shouldThrow)\r\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start()\r\n   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start(String fileName, String arguments)\r\n   at Tryouts.Program.Main(String[] args) in /home/ubuntu/test/Program.cs:line 19\r\n```\r\n\r\nThis is a brand new machine and I followed the setup instructions here:\r\nhttps://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current\r\n\r\nI run `strace -e trace=clone dotnet /home/ubuntu/test/bin/Debug/netcoreapp2.2/test.dll` and got:\r\n\r\n`clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f43cf865a10) = -1 ENOMEM (Cannot allocate memory)`\r\n\r\nLooking at the code, it seems that the code wants to use `vfork`, here:\r\n\r\nhttps://github.com/dotnet/corefx/blob/b3686977e17f885fdfbcfbc2906d32f9678a8726/src/Native/Unix/configure.cmake#L121\r\n\r\nAnd the `HAVE_VFORK` is set here:\r\n\r\nhttps://github.com/dotnet/corefx/blob/5c83394112febe1b481ab1c0b61a45c850677165/src/Native/Unix/System.Native/pal_process.c#L342\r\n\r\nI check the file on that machine, and `vfork` certain exists there, but maybe for build reason, this isn't set properly? \r\n\r\nThe end result is that calling `Process.Start` is going to kill us if we are over 50% memory utilization.\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/40410","RelatedDescription":"Closed issue \"Process.Start isn't using vfork on Ubuntu 18.04\" (#40410)"},{"Id":"482227491","IsPullRequest":false,"CreatedAt":"2019-08-19T11:16:36","Actor":"markvincze","Number":"40409","RawContent":null,"Title":"System.Text.Json.JsonSerializer.Serialize throws ArgumentOutOfRangeException for a long string with unicode characters","State":"closed","Body":"I bumped into an issue on our production system with `System.Text.Json.JsonSerializer.Serialize()`, which throws an `ArgumentOutOfRangeException` for certain strings. I'm on version `4.6.0-preview8.19405.3` of `System.Text.Json`, running `3.0.0-preview8-28405-07` of the framework. The issue happens both on Windows and Linux.\r\n\r\nHere is a full repro.\r\n\r\n```\r\nnamespace JsonSerializerExceptionRepro\r\n{\r\n    public class Model\r\n    {\r\n        public string Foo { get; set; }\r\n    }\r\n\r\n    public class JsonSerializerTest\r\n    {\r\n        [Fact]\r\n        public void DeserializeObject_LongStringInput_Success()\r\n        {\r\n            var fieldValue = \"{\\\"xxxxxxxXxxxXxxXxxxxxx\\\":\\\"XXXXXX XXXXXXXXX XXXXXXXXX\\\",\\\"xxxxxxxXx\\\":\\\"xx1x95xx-xxx4-4611-9x80-39x15x08xxx5\\\",\\\"xxxxXxxx\\\":{\\\"xxxxXxxx\\\":{\\\"xxxxxxxxxXxxx\\\":\\\"2019-08-22\\\",\\\"xxxxxxXxxx\\\":\\\"2019-08-26\\\",\\\"xxxxxxxXxxxXxxxxxxXxxx\\\":\\\"2019-08-19\\\",\\\"xxxxxXxxxxxxXxxx\\\":\\\"2019-08-19\\\",\\\"xxxxxxXxxx\\\":[{\\\"xxxxx\\\":0,\\\"xxxxxxXxxxxxx\\\":\\\"XXX\\\",\\\"xxxxxxXxxxxxx\\\":\\\"XX\\\",\\\"xxxxxxxxxxxXxxxxxx\\\":\\\"XXX\\\",\\\"xxxxxxxxxxxXxxxxxx\\\":\\\"XX\\\",\\\"xxxxxxx\\\":\\\"Xxxxxxxx Xxxxxxxx\\\",\\\"xxxxxxxXxxx\\\":\\\"XX\\\",\\\"xxxxxxxxx\\\":\\\"Xxxxxxxx\\\",\\\"xxxxxXxxx\\\":\\\"2019-08-22X19:50:00X\\\",\\\"xxxXxxx\\\":\\\"2019-08-23X03:45:00X\\\",\\\"xxxxXxxxxx\\\":\\\"474\\\"},{\\\"xxxxx\\\":1,\\\"xxxxxxXxxxxxx\\\":\\\"XXX\\\",\\\"xxxxxxXxxxxxx\\\":\\\"XX\\\",\\\"xxxxxxxxxxxXxxxxxx\\\":\\\"XXX\\\",\\\"xxxxxxxxxxxXxxxxxx\\\":\\\"XX\\\",\\\"xxxxxxx\\\":\\\"Xxxxxxxx Xxxxxxxx\\\",\\\"xxxxxxxXxxx\\\":\\\"XX\\\",\\\"xxxxxxxxx\\\":\\\"Xxxxxxx\\\",\\\"xxxxxXxxx\\\":\\\"2019-08-26X04:40:00X\\\",\\\"xxxXxxx\\\":\\\"2019-08-26X09:55:00X\\\",\\\"xxxxXxxxxx\\\":\\\"642\\\"}],\\\"xxxXxxxxxxx\\\":\\\"XXX\\\",\\\"xxxxXxxxx\\\":\\\"861.99\\\",\\\"xxxxXxxx\\\":\\\"XxxxxXxxx\\\",\\\"xxxxxXxxxxx\\\":{\\\"xxxxx\\\":0,\\\"xxxxxxXxxxxxx\\\":\\\"XXX\\\",\\\"xxxxxxXxxxxxx\\\":\\\"XX\\\",\\\"xxxxxxxxxxxXxxxxxx\\\":\\\"XXX\\\",\\\"xxxxxxxxxxxXxxxxxx\\\":\\\"XX\\\",\\\"xxxxxxx\\\":\\\"Xxxxxxxx Xxxxxxxx\\\",\\\"xxxxxxxXxxx\\\":\\\"XX\\\",\\\"xxxxxxxxx\\\":\\\"Xxxxxxxx\\\",\\\"xxxxxXxxx\\\":\\\"2019-08-22X19:50:00X\\\",\\\"xxxXxxx\\\":\\\"2019-08-23X03:45:00X\\\",\\\"xxxxXxxxxx\\\":\\\"474\\\"},\\\"xxxxXxxxxx\\\":{\\\"xxxxx\\\":1,\\\"xxxxxxXxxxxxx\\\":\\\"XXX\\\",\\\"xxxxxxXxxxxxx\\\":\\\"XX\\\",\\\"xxxxxxxxxxxXxxxxxx\\\":\\\"XXX\\\",\\\"xxxxxxxxxxxXxxxxxx\\\":\\\"XX\\\",\\\"xxxxxxx\\\":\\\"Xxxxxxxx Xxxxxxxx\\\",\\\"xxxxxxxXxxx\\\":\\\"XX\\\",\\\"xxxxxxxxx\\\":\\\"Xxxxxxx\\\",\\\"xxxxxXxxx\\\":\\\"2019-08-26X04:40:00X\\\",\\\"xxxXxxx\\\":\\\"2019-08-26X09:55:00X\\\",\\\"xxxxXxxxxx\\\":\\\"642\\\"}},\\\"xxxXxxx\\\":{\\\"xxxxxxxXxxxxx\\\":{\\\"xxxxx\\\":0,\\\"xxxxxx\\\":\\\"X\\\",\\\"xxxxx\\\":\\\"Xx.\\\",\\\"xxxxxXxxx\\\":\\\"Xxxxx\\\",\\\"xxxxXxxx\\\":\\\"Xxxxxxxxxx\\\",\\\"xxxxxxx\\\":\\\"XX\\\",\\\"xxxx\\\":\\\"Xxxxxxxx\\\",\\\"xxxxxx\\\":\\\"Xxxxxxxxx\\\",\\\"xxx\\\":\\\"4553\\\",\\\"xxxxXxxxx\\\":\\\"0792856408\\\",\\\"xxxxx\\\":\\\"xxxxx.xxxxxx77@xxxxx.xxx\\\",\\\"xxxxXxXxxxx\\\":\\\"1977-05-17+00:00\\\",\\\"xxxxXxxx\\\":\\\"861.99\\\",\\\"xxxxxxXxxx\\\":\\\"Xxx-xxxxxxxxxx\\\",\\\"xxxXxxx\\\":\\\"XXX\\\"},\\\"xxxxxxxxx\\\":[{\\\"xxxxx\\\":0,\\\"xxxxxx\\\":\\\"X\\\",\\\"xxxxx\\\":\\\"Xx.\\\",\\\"xxxxxXxxx\\\":\\\"Xxxxx\\\",\\\"xxxxXxxx\\\":\\\"Xxxxxxxxxx\\\",\\\"xxxxxxx\\\":\\\"XX\\\",\\\"xxxx\\\":\\\"Xxxxxxxx\\\",\\\"xxxxxx\\\":\\\"Xxxxxxxxx\\\",\\\"xxx\\\":\\\"4553\\\",\\\"xxxxXxxxx\\\":\\\"0792856408\\\",\\\"xxxxx\\\":\\\"xxxxx.xxxxxx77@xxxxx.xxx\\\",\\\"xxxxXxXxxxx\\\":\\\"1977-05-17+00:00\\\",\\\"xxxxXxxx\\\":\\\"861.99\\\",\\\"xxxxxxXxxx\\\":\\\"Xxx-xxxxxxxxxx\\\",\\\"xxxXxxx\\\":\\\"XXX\\\",\\\"xxxxxXxxxx\\\":\\\"Xxxxxxx\\\",\\\"xxxxxxXxxxxxx\\\":xxxxx,\\\"xxxxxxxxXxxxx\\\":xxxxx}]},\\\"xxxxxxxxxXxxxxxxXxxx\\\":\\\"XX\\\",\\\"xxxxxxxxXxxxxxxx\\\":\\\"XX\\\",\\\"xxxxxxxxxXxxx\\\":\\\"XxxxxxxxxxxxXX\\\"},\\\"xxxxxxxxxxxXx\\\":\\\"xxxxx://xxxxxxxxxxxxxxx.xxxxxx.xxx/xxxxxxx/1xxx6x0x-53xx-40xx-88xx-5xx79x071x62?xxxxxxxxXx=xx1x95xx-xxx4-4611-9x80-39x15x08xxx5&xxxxxxxxx=XxxxxXxxxxxxXX&xxxxxxxx=XX\\\",\\\"xxxxxxxxXxxxxxxxx\\\":{\\\"xxxx\\\":\\\"Xxxxxxxxxxxxxxxx\\\",\\\"xxxxxxxxxxx\\\":\\\"Xxxxxxxxx\\\",\\\"xxxxxxxXxx\\\":\\\"XXXXXX.022033\\\",\\\"xxxxxxxx\\\":\\\"XXX\\\",\\\"xxxxxxxXxxxxx\\\":[{\\\"xxxx\\\":\\\"XXXXXX XXXXXXXXX XXXXXXXXX\\\",\\\"xxxx\\\":\\\"XXXXXX\\\",\\\"xxxxxxxXx\\\":\\\"000000\\\",\\\"xxxxx\\\":20.0,\\\"xxxxXxxxx\\\":19.05,\\\"xxxxxxxxxx\\\":9.71,\\\"xxxxxxxxx\\\":0.0,\\\"xxxxxxXxxx\\\":3.5,\\\"xxxxxXxxxXxxxxxxXxxx\\\":23.5,\\\"xxx\\\":0.95,\\\"xxxxxxxxXxxxxXxxXxxxxx\\\":23.5,\\\"xxxxxxxx\\\":0.0,\\\"xxxxxxxxxXxxxxx\\\":0,\\\"xxxxx\\\":[\\\"Xxxxxxxxüxxxxxxxxxxx\\\",\\\"Xxxxxxxxx xüx Xxxxxxxxxx\\\",\\\"Xxxxxxxxx xüx Xxxäxxxxxxxx xxx xxx xx XXX 1.950\\\"],\\\"xxxxxxxxXxxx\\\":\\\"Xxxx Xxxxxxxxxxxxx\\\",\\\"xxxxxxx\\\":{\\\"xxxx\\\":\\\"XXX\\\",\\\"xxxx\\\":\\\"XXX\\\"},\\\"xxxxxxxx\\\":xxxxx}],\\\"xxxXxxxxxxx\\\":xxxxx,\\\"xxxxxxxxXxxx\\\":\\\"Xxxxxxx Xxxxxx - XXXXXXXXXXX\\\",\\\"xxxxxxxxXxxx\\\":\\\"XXX\\\",\\\"xxxxx\\\":23.5,\\\"xxxxxxxxxx\\\":9.71,\\\"xxxxxxXxxx\\\":3.5,\\\"xxx\\\":0.95,\\\"xxxxxXx\\\":0}}\";\r\n\r\n            var obj = new Model\r\n            {\r\n                Foo = fieldValue\r\n            };\r\n\r\n            var str = JsonSerializer.Serialize(obj);\r\n\r\n            Assert.NotNull(str);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n(I obfuscated the input string, hence the lot of `x`es.)\r\n\r\nI expect this test to be successful, but the `Serialize()` call throws this exception:\r\n\r\n```\r\nSystem.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.\r\n   at System.Text.Json.JsonWriterHelper.EscapeString(ReadOnlySpan`1 value, Span`1 destination, JavaScriptEncoder encoder, Int32& written)\r\n   at System.Text.Json.JsonWriterHelper.EscapeString(ReadOnlySpan`1 value, Span`1 destination, Int32 indexOfFirstByteToEscape, JavaScriptEncoder encoder, Int32& written)\r\n   at System.Text.Json.Utf8JsonWriter.WriteStringEscapeValue(ReadOnlySpan`1 value, Int32 firstEscapeIndexVal)\r\n...\r\n```\r\n\r\nSorry for the long input string, this is a real-life value that triggered this problem, and I couldn't narrow it down further. For example if I pass in just the first half, or just the second half of the string, then it works.  \r\nThe string contains a couple of unicode characters (`ü`, `ä`), but those in themselves don't cause the issue either.\r\n\r\nI verified that this works properly with `Newtonsoft.Json.JsonConvert.SerializeObject()`.","Url":"https://github.com/dotnet/corefx/issues/40409","RelatedDescription":"Closed issue \"System.Text.Json.JsonSerializer.Serialize throws ArgumentOutOfRangeException for a long string with unicode characters\" (#40409)"},{"Id":"482214240","IsPullRequest":true,"CreatedAt":"2019-08-19T11:15:47","Actor":"ahsonkhan","Number":"40408","RawContent":null,"Title":"Avoid using double/floats within tests that don't roundtrip on netfx (for G17).","State":"closed","Body":"Temporary fix for https://github.com/dotnet/corefx/issues/40406 which is causing test failures due to recent round-tripping change (which uses G17 on netfx now). Submitting the change to make sure CI is green for other PRs.\r\n\r\nhttps://github.com/dotnet/corefx/pull/38322\r\n\r\nUpdating test to use values that round-trip. I didn't want to skip this test on netfx since the tests are useful and not related to double/float parsing and formatting. This requires investigation on why double formatting is not round-tripping on netfx.\r\n\r\ncc @tannergooding ","Url":"https://github.com/dotnet/corefx/pull/40408","RelatedDescription":"Closed or merged PR \"Avoid using double/floats within tests that don't roundtrip on netfx (for G17).\" (#40408)"},{"Id":"482199513","IsPullRequest":true,"CreatedAt":"2019-08-19T09:22:33","Actor":"sonnemaf","Number":"40407","RawContent":null,"Title":"Readonly members in Drawing primitives ","State":"open","Body":"Added the C# 8.0 readonly modifier to the structs in System.Drawing (Point, Size, Rectangle). This can prevent defensive copies and improve the performance.","Url":"https://github.com/dotnet/corefx/pull/40407","RelatedDescription":"Open PR \"Readonly members in Drawing primitives \" (#40407)"},{"Id":"482418844","IsPullRequest":false,"CreatedAt":"2019-08-19T06:32:42","Actor":"BenjaminCharlton","Number":"40416","RawContent":null,"Title":"Suggestion/Question - Why is there no string type that enforces non-null, non-empty, non-whitespace strings?","State":"open","Body":"# Why is there no string type that enforces non-null, non-empty, non-whitespace strings?\r\n\r\n# BACKGROUND\r\nI was reading about this great new feature coming in C# 8 of nullable reference types. See here:\r\nhttps://docs.microsoft.com/en-us/dotnet/csharp/tutorials/nullable-reference-types\r\n\r\nThis new language feature allows the developer to specify whether or not a variable of a complex type is intended to allow null values or not and the compiler will issue warnings about the correct use of them.\r\n\r\nThis got me thinking that we have a similar problem with empty/whitespace string values. We always have to check them and throw an ArgumentException or ArgumentNullException, creating tedious and trivial lines of code.\r\n\r\n# IDEA\r\nMy code is littered with checks for empty strings, null strings and whitespace-only strings.\r\n\r\nI would guess that in most cases, a developer intends that a string argument should be non-null, non-empty and not just whitespace, so why is there no \"safe\" way to create and use such a string?\r\n\r\nI appreciate that this wouldn't provide the same compile-time checking that non-nullable reference types provide in C# 8 but it would still be advantageous as it would drastically reduce the number of lines of code used to diligently check the validity of a string argument. It would provide run-time errors of invalid string arguments early on to facilitate debugging.\r\n\r\nProbably I'm not the first person to think of this, and maybe there a good reasons not to do it, but I couldn't see any examples on a casual Google search.\r\n\r\nIs this a good idea or a bad idea, and why/why not? Below is my attempt at creating such a class.\r\n\r\n# CODE\r\n`public class SafeString\r\n    {\r\n        private string _value;\r\n        private readonly bool _shouldTrim;\r\n\r\n        public SafeString(string value, bool shouldTrimNewValues = true)\r\n        {\r\n            if (value.IsNullOrWhiteSpace())\r\n                throw new ArgumentException($\"The value \\\"{value}\\\" is not valid.\" +\r\n                    $\" The value passed to the constructor of {nameof(SafeString)} must be a non-null, non-empty string\" +\r\n                    $\" and it cannot be composed solely of whitespace.\", nameof(value));\r\n\r\n            _shouldTrim = shouldTrimNewValues;\r\n            SetValue(value);\r\n        }\r\n\r\n        public string Value\r\n        {\r\n            get\r\n            {\r\n                return _value;\r\n            }\r\n            set\r\n            {\r\n                if (value.IsNullOrWhiteSpace())\r\n                    throw new ArgumentException($\"The value \\\"{value}\\\" is not valid.\" +\r\n                        $\" The new value assigned to the {nameof(Value)} property of an instance of {nameof(SafeString)} must be a non-null, non-empty string\" +\r\n                        $\" and it cannot be composed solely of whitespace.\", nameof(value));\r\n\r\n                SetValue(value);\r\n            }\r\n        }\r\n\r\n        private void SetValue(string value)\r\n        {\r\n            _value = _shouldTrim ? value.Trim() : value;\r\n        }\r\n    }`\r\n\r\n# USAGE\r\n\r\n`\r\nSafeString name = new SafeString(\" \"); //  throws an error\r\n\r\nname = new SafeString(\"Bernard\"); // works fine\r\n\r\nname.Value = \"Bernie\"; // we can change the value\r\n\r\nname.Value = \"\"; // throws an error\r\n\r\nstring someName = name.Value; // we can get the value like this\r\n\r\nPerson person = new Person(name); // No need to check here that the string is empty or contains only whitespace as we know it's safe. Also no need for the constructor of the Person class to check because it knows that it's safe too.\r\n`","Url":"https://github.com/dotnet/corefx/issues/40416","RelatedDescription":"Open issue \"Suggestion/Question - Why is there no string type that enforces non-null, non-empty, non-whitespace strings?\" (#40416)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"482581972","IsPullRequest":true,"CreatedAt":"2019-08-20T01:30:09","Actor":"dotnet-bot","Number":"38120","RawContent":null,"Title":"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps\ngit reset --hard upstream/release/dev16.4-preview1-vs-deps\ngit merge upstream/release/dev16.4-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38120","RelatedDescription":"Closed or merged PR \"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps\" (#38120)"},{"Id":"482598624","IsPullRequest":true,"CreatedAt":"2019-08-20T01:23:49","Actor":"jasonmalinowski","Number":"38126","RawContent":null,"Title":"Update override completion for nullable reference support","State":"open","Body":"- Ensure we show the ? in all the appropriate places\r\n- Ensure we don't spit ? if we shouldn't\r\n- Ensure we drop ? for the special case of the ToString return. See in-code comments for details.","Url":"https://github.com/dotnet/roslyn/pull/38126","RelatedDescription":"Open PR \"Update override completion for nullable reference support\" (#38126)"},{"Id":"482596179","IsPullRequest":true,"CreatedAt":"2019-08-20T01:12:17","Actor":"svick","Number":"38125","RawContent":null,"Title":"Replace obsolete vbNewLine","State":"open","Body":"When I run `build.cmd`, I get the following error:\r\n\r\n> C:\\code\\roslyn\\src\\Compilers\\VisualBasic\\Test\\Symbol\\SymbolsTests\\SymbolErrorTests.vb(10539,25): error BC40000: 'Public Const vbNewLine As String' is obsolete: 'For a carriage return and line feed, use vbCrLf.  For the current platform's newline, use System.Environment.NewLine.'. [C:\\code\\roslyn\\src\\Compilers\\VisualBasic\\Test\\Symbol\\Microsoft.CodeAnalysis.VisualBasic.Symbol.UnitTests.vbproj]\r\n\r\nThis change fixes that.","Url":"https://github.com/dotnet/roslyn/pull/38125","RelatedDescription":"Open PR \"Replace obsolete vbNewLine\" (#38125)"},{"Id":"482569625","IsPullRequest":true,"CreatedAt":"2019-08-20T01:09:14","Actor":"chborl","Number":"38112","RawContent":null,"Title":"Fix null reference error when opening a miscellaneous files file","State":"closed","Body":"Fix #38111","Url":"https://github.com/dotnet/roslyn/pull/38112","RelatedDescription":"Closed or merged PR \"Fix null reference error when opening a miscellaneous files file\" (#38112)"},{"Id":"482567190","IsPullRequest":false,"CreatedAt":"2019-08-20T01:09:14","Actor":"chborl","Number":"38111","RawContent":null,"Title":"Null reference error when F5 and opening a solution in Roslyn.sln","State":"closed","Body":"System.InvalidOperationException\r\n  HResult=0x80131509\r\n  Message=Unexpected Null\r\n  Source=Microsoft.CodeAnalysis.Workspaces\r\n  StackTrace:\r\n   at Roslyn.Utilities.Contract.Fail(String message) in D:\\git\\roslyn2\\src\\Workspaces\\Core\\Portable\\Utilities\\Contract.cs:line 56\r\n   at Roslyn.Utilities.Contract.ThrowIfNull[T](T value, String message) in D:\\git\\roslyn2\\src\\Workspaces\\Core\\Portable\\Utilities\\Contract.cs:line 22\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.MetadataAsSource.MetadataAsSourceFileService.TryAddDocumentToWorkspace(String filePath, ITextBuffer buffer) in D:\\git\\roslyn2\\src\\EditorFeatures\\Core\\Implementation\\MetadataAsSource\\MetadataAsSourceFileService.cs:line 227\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.MiscellaneousFilesWorkspace.AttachToDocument(String moniker, ITextBuffer textBuffer) in D:\\git\\roslyn2\\src\\VisualStudio\\Core\\Def\\Implementation\\ProjectSystem\\MiscellaneousFilesWorkspace.cs:line 254\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.MiscellaneousFilesWorkspace.TrackOpenedDocument(String moniker, ITextBuffer textBuffer) in D:\\git\\roslyn2\\src\\VisualStudio\\Core\\Def\\Implementation\\ProjectSystem\\MiscellaneousFilesWorkspace.cs:line 149\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.MiscellaneousFilesWorkspace.Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IRunningDocumentTableEventListener.OnOpenDocument(String moniker, ITextBuffer textBuffer, IVsHierarchy _) in D:\\git\\roslyn2\\src\\VisualStudio\\Core\\Def\\Implementation\\ProjectSystem\\MiscellaneousFilesWorkspace.cs:line 74\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.RunningDocumentTableEventTracker.OnAfterAttributeChangeEx(UInt32 docCookie, UInt32 grfAttribs, IVsHierarchy pHierOld, UInt32 itemidOld, String pszMkDocumentOld, IVsHierarchy pHierNew, UInt32 itemidNew, String pszMkDocumentNew) in D:\\git\\roslyn2\\src\\VisualStudio\\Core\\Def\\Implementation\\ProjectSystem\\RunningDocumentTableEventTracker.cs:line 94","Url":"https://github.com/dotnet/roslyn/issues/38111","RelatedDescription":"Closed issue \"Null reference error when F5 and opening a solution in Roslyn.sln\" (#38111)"},{"Id":"482593858","IsPullRequest":false,"CreatedAt":"2019-08-20T01:00:17","Actor":"ufcpp","Number":"38124","RawContent":null,"Title":"DoesNotReturnIf incorrectly handled","State":"open","Body":"**Version Used**: \r\n\r\nVS 16.3.0 Preview 2.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\nstatic void M1(string? s)\r\n{\r\n    Debug.Assert(s != null);\r\n    Console.WriteLine(s.Length); // no warning\r\n}\r\n\r\nstatic void M2(string? s)\r\n{\r\n    Debug.Assert(false);\r\n    Console.WriteLine(s.Length); // CS8602\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nBoth `M1` and `M2` have no warning.\r\n\r\n**Actual Behavior**:\r\n\r\n`M2` produces CS8602 warning.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38124","RelatedDescription":"Open issue \"DoesNotReturnIf incorrectly handled\" (#38124)"},{"Id":"482591890","IsPullRequest":false,"CreatedAt":"2019-08-20T00:50:06","Actor":"Varorbc","Number":"38123","RawContent":null,"Title":"build and generate package fail","State":"open","Body":"**Version Used**: 3.0.100-preview8-013656\r\n\r\n###  Question 1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Directory.Build.props\r\n\r\n```csharp\r\n    <Project>\r\n      <PropertyGroup>\r\n        <TargetFramework>net472</TargetFramework>\r\n      </PropertyGroup>\r\n    </Project>\r\n```\r\n\r\n2. ClassLibrary1.csproj\r\n\r\n```csharp\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net452</TargetFrameworks>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n  \r\n</Project>\r\n```\r\n\r\n3. dotnet build ClassLibrary1.csproj\r\n\r\n**Expected Behavior**: build successful\r\n\r\n**Actual Behavior**:`C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(234,5): error NETSDK1005: 资产文件“C:\\Users\\PC\\Desktop\\ClassLibrary1\\ClassLibrary1\\obj\\project.assets.json”没有“.NETFramework,Version=v4.7.2”的目标。确保已运行还原，且“net472”已包含在项目的 TargetFrameworks 中。 [C:\\Users\\PC\\Desktop\\ClassLibrary1\\ClassLibrary1\\ClassLibrary1.csproj]`\r\n\r\nPS: build by Visual Studio 16.2.2 is successful\r\n\r\n###  Question 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Directory.Build.props\r\n\r\n```csharp\r\n    <Project>\r\n      <PropertyGroup>\r\n        <TargetFramework>net472</TargetFramework>\r\n      </PropertyGroup>\r\n    </Project>\r\n```\r\n\r\n2. ClassLibrary1.csproj\r\n\r\n```csharp\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net452;net472</TargetFrameworks>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n  \r\n</Project>\r\n```\r\n\r\n3. dotnet build ClassLibrary1.csproj\r\n\r\n**Expected Behavior**: generate package successful\r\n\r\n**Actual Behavior**:build successful but no generate package\r\n\r\nPS: build and generate package  by Visual Studio 16.2.2 is successful\r\n","Url":"https://github.com/dotnet/roslyn/issues/38123","RelatedDescription":"Open issue \"build and generate package fail\" (#38123)"},{"Id":"482586757","IsPullRequest":false,"CreatedAt":"2019-08-20T00:23:49","Actor":"GingerLoaf","Number":"38122","RawContent":null,"Title":"Nested classes somehow absorb their enclosing region","State":"open","Body":"**Version Used**\r\n2.0.0.6140902\r\n\r\n**Steps to Reproduce**:\r\nGiven this class\r\nnamespace Wave.InteractiveStreams.Filter.Logic\r\n{\r\n    public class RootClass\r\n    {\r\n\r\n        #region Fields\r\n\r\n        private string stringField = null;\r\n        private int intField = 0;\r\n\r\n        #endregion\r\n\r\n        #region Constructors\r\n\r\n        public RootClass()\r\n        {\r\n\r\n        }\r\n\r\n        #endregion\r\n\r\n        #region Classes\r\n\r\n        public class NestedClass\r\n        {\r\n\r\n            #region Nested Fields\r\n\r\n            private string stringField = null;\r\n            private int intField = 0;\r\n\r\n            #endregion\r\n\r\n            #region Nested Constructors\r\n\r\n            public NestedClass()\r\n            {\r\n\r\n            }\r\n\r\n            #endregion\r\n\r\n        }\r\n\r\n        #endregion\r\n\r\n    }\r\n}\r\n\r\nand this Rosyln parser\r\n\r\nprivate class RegionSyntaxWalker : CSharpSyntaxWalker\r\n{\r\n\r\n    private readonly Dictionary<string, List<string>> m_classToRegionsMap = new Dictionary<string, List<string>>();\r\n\r\n    private readonly Stack<string> m_classNameStack = new Stack<string>();\r\n\r\n    public RegionSyntaxWalker()\r\n        : base(SyntaxWalkerDepth.StructuredTrivia)\r\n    {\r\n    }\r\n\r\n    public IDictionary<string, IList<string>> WalkRegions(SyntaxNode node)\r\n    {\r\n        m_classToRegionsMap.Clear();\r\n        DefaultVisit(node);\r\n\r\n        var copy = new Dictionary<string, IList<string>>();\r\n        foreach (var item in m_classToRegionsMap)\r\n        {\r\n            copy[item.Key] = item.Value;\r\n        }\r\n\r\n        m_classToRegionsMap.Clear();\r\n\r\n        return copy;\r\n    }\r\n\r\n    public override void VisitClassDeclaration(ClassDeclarationSyntax node)\r\n    {\r\n        m_classNameStack.Push(node.Identifier.ToFullString().Trim());\r\n        base.VisitClassDeclaration(node);\r\n        m_classNameStack.Pop();\r\n    }\r\n\r\n    public override void VisitRegionDirectiveTrivia(RegionDirectiveTriviaSyntax node)\r\n    {\r\n        if (!m_classToRegionsMap.TryGetValue(m_classNameStack.Peek(), out List<string> regions))\r\n        {\r\n            regions = new List<string>();\r\n            m_classToRegionsMap[m_classNameStack.Peek()] = regions;\r\n        }\r\n\r\n        regions.Add(node.GetText().ToString().Trim());\r\n\r\n        base.VisitRegionDirectiveTrivia(node);\r\n    }\r\n\r\n}\r\n\r\n**Expected Behavior**:\r\nI expect that if I call RegionSyntaxWalker.WalkRegions on the first file I posted that I would end up with this:\r\n{\r\n    \"RootClass\" :[\"#region Fields\",\"#region Constructors\",\"#region Classes\"],\r\n    \"NestedClass\":[\"#region Nested Fields\", \"#region Nested Constructors\"]\r\n}\r\n\r\n**Actual Behavior**:\r\nI get this: {\r\n    \"RootClass\" :[\"#region Fields\",\"#region Constructors\"],\r\n    \"NestedClass\":[\"#region Classes\",\"#region Nested Fields\", \"#region Nested Constructors\"]\r\n}\r\n\r\n\"#region Classes\" is defined as a member of RootClass, yet my code analyzer seems to want to parse NestedClass before parsing \"#region Classes\". It seems out of order to me. I am simply trying to get the list of regions per class (including nested ones) so that I can validate them!","Url":"https://github.com/dotnet/roslyn/issues/38122","RelatedDescription":"Open issue \"Nested classes somehow absorb their enclosing region\" (#38122)"},{"Id":"482581950","IsPullRequest":true,"CreatedAt":"2019-08-20T00:02:01","Actor":"dotnet-bot","Number":"38119","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38119","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#38119)"},{"Id":"482581804","IsPullRequest":true,"CreatedAt":"2019-08-20T00:01:17","Actor":"dotnet-bot","Number":"38118","RawContent":null,"Title":"Merge master-vs-deps to release/dev16.4-preview1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master-vs-deps into release/dev16.4-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps\ngit reset --hard upstream/release/dev16.4-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38118","RelatedDescription":"Open PR \"Merge master-vs-deps to release/dev16.4-preview1-vs-deps\" (#38118)"},{"Id":"482581658","IsPullRequest":true,"CreatedAt":"2019-08-20T00:00:43","Actor":"svick","Number":"38117","RawContent":null,"Title":"Fix completion of local functions in static methods","State":"open","Body":"Contributes to https://github.com/dotnet/roslyn/issues/38074.","Url":"https://github.com/dotnet/roslyn/pull/38117","RelatedDescription":"Open PR \"Fix completion of local functions in static methods\" (#38117)"},{"Id":"482579362","IsPullRequest":true,"CreatedAt":"2019-08-19T23:50:30","Actor":"gafter","Number":"38116","RawContent":null,"Title":"Reject pattern-matching operations on pointer types in C# versions less than 8.","State":"open","Body":"This fix intentionally does not introduce a \"language version\" diagnostic because I would\r\nlike this fix to be as simple as possible to hot-fix 16.3, and because we are past translation\r\ndeadlines.\r\nFixes #38052\r\n","Url":"https://github.com/dotnet/roslyn/pull/38116","RelatedDescription":"Open PR \"Reject pattern-matching operations on pointer types in C# versions less than 8.\" (#38116)"},{"Id":"482577462","IsPullRequest":false,"CreatedAt":"2019-08-19T23:42:16","Actor":"vsfeedback","Number":"38115","RawContent":null,"Title":"Intellisense incorrectly lists extension methods with type constraints on all types","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/695953/intellisense-incorrectly-lists-extension-methods-w.html)._\n\n---\n[regression] [worked-in:16.3.0 Preview 1.0]\r\nIntellisense lists extension methods with the type constraints on all types, while it should only list it for types that match the constraint.\n\nTo reproduce:\n```c#\npublic static class EnumExtensions\n{\n    public static bool ExampleExtensionMethod&lt;TEnum&gt;(this TEnum value) where TEnum : unmanaged, System.Enum =&gt; true;\n}\n\npublic static class Program\n{\n    public static void Main()\n    {\n        var obj = new object();\n        obj. // look at intellisense, ExampleExtensionMethod will be listed while it should't.\n    }\n}\n```\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 8/16/2019, 00:00 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/38115","RelatedDescription":"Open issue \"Intellisense incorrectly lists extension methods with type constraints on all types\" (#38115)"},{"Id":"482573863","IsPullRequest":true,"CreatedAt":"2019-08-19T23:27:49","Actor":"agocke","Number":"38114","RawContent":null,"Title":"Disable formatting analyzers","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38114","RelatedDescription":"Open PR \"Disable formatting analyzers\" (#38114)"},{"Id":"482573052","IsPullRequest":true,"CreatedAt":"2019-08-19T23:24:37","Actor":"RikkiGibson","Number":"38113","RawContent":null,"Title":"Give LangVersion error when type is generic due to containing type","State":"open","Body":"Closes #38105\r\n","Url":"https://github.com/dotnet/roslyn/pull/38113","RelatedDescription":"Open PR \"Give LangVersion error when type is generic due to containing type\" (#38113)"},{"Id":"482567110","IsPullRequest":true,"CreatedAt":"2019-08-19T23:02:06","Actor":"mavasani","Number":"38110","RawContent":null,"Title":"Bail out from couple of IDE analyzers in presence of OperationKind.None operations","State":"open","Body":"1. https://github.com/dotnet/roslyn/commit/49806932395686a392efea1236e2edd1b066c6f2: Bail out for unused parameters analyzer. Fixes #37988\r\n2. https://github.com/dotnet/roslyn/commit/8a8629cbfd00c25456f43014d1061d9700ea0e0b: Bail out for unused private members analyzer. Fixes #33142","Url":"https://github.com/dotnet/roslyn/pull/38110","RelatedDescription":"Open PR \"Bail out from couple of IDE analyzers in presence of OperationKind.None operations\" (#38110)"},{"Id":"482566608","IsPullRequest":true,"CreatedAt":"2019-08-19T23:00:12","Actor":"gafter","Number":"38109","RawContent":null,"Title":"Restore constraint checking for reduced extension methods.","State":"open","Body":"Before C# 8, the reduction of an extension method would fail (return null) when the\r\nmethod's constraints would not be satisfied.  But in C# 8 the unmanaged constraint requires\r\nwe know the language version, and therefore the compilation, to check.  That is not available\r\nin `IMethodSymbol.ReduceExtensionMethod`.  So we dropped the constraint checking in #37022.\r\nHowever this causes an unfortunate regression in the quality of the IDE experience.  So here we\r\nrestore the constraint checking, using the compilation's language version when available.\r\nIMethodSymbol.ReduceExtensionMethod uses the C# 8 rules since it has no language version to check.\r\nFixes #37780","Url":"https://github.com/dotnet/roslyn/pull/38109","RelatedDescription":"Open PR \"Restore constraint checking for reduced extension methods.\" (#38109)"},{"Id":"482551236","IsPullRequest":false,"CreatedAt":"2019-08-19T22:22:46","Actor":"vsfeedback","Number":"38108","RawContent":null,"Title":"Auto-completion should ignore numbers","State":"closed","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/698734/auto-completion-should-ignore-numbers.html)._\n\n---\nPlease do not give an auto-complete suggestion for numbers. Auto-completion is a very useful feature for names, as they tend to be part of a limited set of possibilities and they can be obscure and easy to mistype, but the same is not true for the set of possible numbers.\n\nWith the current behaviour, when the suggestion box appears I cannot navigate to another line without first hitting the Escape key (screenshot: http://prntscr.com/ouft68). If the number is one that is &quot;easily guessed&quot;, then it typically takes very little effort for me to type it myself. The auto-suggestion is rarely (if ever) correct, so having to dismiss it every time that I type a number is very distracting and awkward.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 8/18/2019, 11:53 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/38108","RelatedDescription":"Closed issue \"Auto-completion should ignore numbers\" (#38108)"},{"Id":"482534222","IsPullRequest":false,"CreatedAt":"2019-08-19T22:19:18","Actor":"gafter","Number":"38106","RawContent":null,"Title":"VS2019 INT preview does not permit changing language versions","State":"closed","Body":"**Version Used**:  VS2019 INT Preview (see below)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create New Project (.NET Framework 4.5)\r\n2. Project > Properties > Build > Advanced\r\n\r\n**Expected Behavior**:\r\n\r\n`Language version` selector permits changing the language version\r\n\r\n**Actual Behavior**:\r\n\r\n`Language version` selector is greyed out and does not even show active language version.\r\n\r\n![image](https://user-images.githubusercontent.com/3804346/63300332-d2d69900-c28c-11e9-9a25-2278283d8db4.png)\r\n\r\n![image](https://user-images.githubusercontent.com/3804346/63300393-f1d52b00-c28c-11e9-8415-8c91fbd03e9b.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/38106","RelatedDescription":"Closed issue \"VS2019 INT preview does not permit changing language versions\" (#38106)"},{"Id":"482550649","IsPullRequest":true,"CreatedAt":"2019-08-19T22:06:17","Actor":"sharwell","Number":"38107","RawContent":null,"Title":"Show code instead of designer if the designer is not installed","State":"open","Body":"See dotnet/winforms-designer#458\r\n\r\nThis avoids showing an error page when the designer package is not installed, but doesn't prevent the \"View designer\" command from showing in Solution Explorer (the command will just show code in this case).","Url":"https://github.com/dotnet/roslyn/pull/38107","RelatedDescription":"Open PR \"Show code instead of designer if the designer is not installed\" (#38107)"},{"Id":"482530617","IsPullRequest":false,"CreatedAt":"2019-08-19T21:12:03","Actor":"gafter","Number":"38105","RawContent":null,"Title":"VS21019 C# version 7.2 accepts pointer to nested generic type that is rejected by VS2017","State":"open","Body":"The following code is an error in C# 7.0 in VS 2017.  However, the same code is accepted in C# 7.0 in VS 2019.  This is a forward compatibility error (we are accepting code not part of C# 7.0 in that language version in VS 2019).\r\n\r\n``` c#\r\nclass Program\r\n{\r\n    unsafe static void Main(string[] args)\r\n    {\r\n        G<int>.S* p = null;\r\n    }\r\n}\r\n\r\npublic class G<T>\r\n{\r\n    public struct S { int x; }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/38105","RelatedDescription":"Open issue \"VS21019 C# version 7.2 accepts pointer to nested generic type that is rejected by VS2017\" (#38105)"},{"Id":"482502945","IsPullRequest":false,"CreatedAt":"2019-08-19T20:44:41","Actor":"svick","Number":"38104","RawContent":null,"Title":"Build.cmd fails for several projects","State":"closed","Body":"**Version Used**: master (89d305def1a002ad8c24)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. `git clean -xdf`\r\n2. `restore`\r\n3. `build`\r\n\r\n**Expected Behavior**:\r\n\r\nBuild succeeds.\r\n\r\n**Actual Behavior**:\r\n\r\nSeveral projects fail the build.\r\n\r\nRoslyn.Test.Utilities.csproj fails with:\r\n\r\n```\r\nC:\\code\\roslyn\\src\\Test\\Utilities\\Portable\\Mocks\\TestReferences.cs(289,48): error CS0234: The type or namespace name 'n\r\netcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\\code\\ro\r\nslyn\\src\\Test\\Utilities\\Portable\\Roslyn.Test.Utilities.csproj]\r\nC:\\code\\roslyn\\src\\Test\\Utilities\\Portable\\Mocks\\TestReferences.cs(294,48): error CS0234: The type or namespace name 'n\r\netcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\\code\\ro\r\nslyn\\src\\Test\\Utilities\\Portable\\Roslyn.Test.Utilities.csproj]\r\nC:\\code\\roslyn\\src\\Test\\Utilities\\Portable\\Mocks\\TestReferences.cs(299,48): error CS0234: The type or namespace name 'n\r\netcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\\code\\ro\r\nslyn\\src\\Test\\Utilities\\Portable\\Roslyn.Test.Utilities.csproj]\r\nC:\\code\\roslyn\\src\\Test\\Utilities\\Portable\\Mocks\\TestReferences.cs(304,48): error CS0234: The type or namespace name 'n\r\netcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\\code\\ro\r\nslyn\\src\\Test\\Utilities\\Portable\\Roslyn.Test.Utilities.csproj]\r\nC:\\code\\roslyn\\src\\Test\\Utilities\\Portable\\Mocks\\TestReferences.cs(309,48): error CS0234: The type or namespace name 'n\r\netcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\\code\\ro\r\nslyn\\src\\Test\\Utilities\\Portable\\Roslyn.Test.Utilities.csproj]\r\nC:\\code\\roslyn\\src\\Test\\Utilities\\Portable\\Mocks\\TestReferences.cs(314,48): error CS0234: The type or namespace name 'n\r\netcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\\code\\ro\r\nslyn\\src\\Test\\Utilities\\Portable\\Roslyn.Test.Utilities.csproj]\r\nC:\\code\\roslyn\\src\\Test\\Utilities\\Portable\\Mocks\\TestReferences.cs(319,48): error CS0234: The type or namespace name 'n\r\netcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\\code\\ro\r\nslyn\\src\\Test\\Utilities\\Portable\\Roslyn.Test.Utilities.csproj]\r\nC:\\code\\roslyn\\src\\Test\\Utilities\\Portable\\Mocks\\TestReferences.cs(324,48): error CS0234: The type or namespace name 'n\r\netcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\\code\\ro\r\nslyn\\src\\Test\\Utilities\\Portable\\Roslyn.Test.Utilities.csproj]\r\nC:\\code\\roslyn\\src\\Test\\Utilities\\Portable\\Mocks\\TestReferences.cs(329,48): error CS0234: The type or namespace name 'n\r\netcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\\code\\ro\r\nslyn\\src\\Test\\Utilities\\Portable\\Roslyn.Test.Utilities.csproj]\r\nC:\\code\\roslyn\\src\\Test\\Utilities\\Portable\\Mocks\\TestReferences.cs(334,48): error CS0234: The type or namespace name 'n\r\netcoreapp30' does not exist in the namespace 'TestResources.NetFX' (are you missing an assembly reference?) [C:\\code\\ro\r\nslyn\\src\\Test\\Utilities\\Portable\\Roslyn.Test.Utilities.csproj]\r\n```\r\n\r\nMicrosoft.CodeAnalysis.EditorFeatures.csproj fails with:\r\n\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets\r\n(2106,5): warning MSB3277: Found conflicts between different versions of \"Microsoft.VisualStudio.Threading\" that could\r\nnot be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [C:\\code\r\n\\roslyn\\src\\EditorFeatures\\Core\\Microsoft.CodeAnalysis.EditorFeatures.csproj]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets\r\n(2106,5): warning MSB3277: Found conflicts between different versions of \"StreamJsonRpc\" that could not be resolved.  T\r\nhese reference conflicts are listed in the build log when log verbosity is set to detailed. [C:\\code\\roslyn\\src\\EditorF\r\neatures\\Core\\Microsoft.CodeAnalysis.EditorFeatures.csproj]\r\nC:\\code\\roslyn\\src\\EditorFeatures\\Core\\Implementation\\CodeFixes\\CodeFixService.cs(559,88): error CS1739: The best overl\r\noad for 'SwitchToMainThreadAsync' does not have a parameter named 'alwaysYield' [C:\\code\\roslyn\\src\\EditorFeatures\\Core\r\n\\Microsoft.CodeAnalysis.EditorFeatures.csproj]\r\nC:\\code\\roslyn\\src\\EditorFeatures\\Core\\GoToDefinition\\AbstractGoToSymbolService.cs(38,80): error CS1739: The best overl\r\noad for 'SwitchToMainThreadAsync' does not have a parameter named 'alwaysYield' [C:\\code\\roslyn\\src\\EditorFeatures\\Core\r\n\\Microsoft.CodeAnalysis.EditorFeatures.csproj]\r\nC:\\code\\roslyn\\src\\EditorFeatures\\Core\\Implementation\\RenameTracking\\RenameTrackingTaggerProvider.TrackingSession.cs(79\r\n,96): error CS1739: The best overload for 'SwitchToMainThreadAsync' does not have a parameter named 'alwaysYield' [C:\\c\r\node\\roslyn\\src\\EditorFeatures\\Core\\Microsoft.CodeAnalysis.EditorFeatures.csproj]\r\nC:\\code\\roslyn\\src\\EditorFeatures\\Core\\Implementation\\RenameTracking\\RenameTrackingTaggerProvider.TrackingSession.cs(10\r\n7,91): error CS1739: The best overload for 'SwitchToMainThreadAsync' does not have a parameter named 'alwaysYield' [C:\\\r\ncode\\roslyn\\src\\EditorFeatures\\Core\\Microsoft.CodeAnalysis.EditorFeatures.csproj]\r\nC:\\code\\roslyn\\src\\EditorFeatures\\Core\\Implementation\\NavigationBar\\NavigationBarController_ModelComputation.cs(146,92)\r\n: error CS1739: The best overload for 'SwitchToMainThreadAsync' does not have a parameter named 'alwaysYield' [C:\\code\\\r\nroslyn\\src\\EditorFeatures\\Core\\Microsoft.CodeAnalysis.EditorFeatures.csproj]\r\nC:\\code\\roslyn\\src\\EditorFeatures\\Core\\Implementation\\IntelliSense\\Completion\\Controller_CommitUniqueCompletionListItem\r\n.cs(79,84): error CS1739: The best overload for 'SwitchToMainThreadAsync' does not have a parameter named 'alwaysYield'\r\n [C:\\code\\roslyn\\src\\EditorFeatures\\Core\\Microsoft.CodeAnalysis.EditorFeatures.csproj]\r\nC:\\code\\roslyn\\src\\EditorFeatures\\Core\\Implementation\\IntelliSense\\ModelComputation.cs(150,88): error CS1739: The best\r\noverload for 'SwitchToMainThreadAsync' does not have a parameter named 'alwaysYield' [C:\\code\\roslyn\\src\\EditorFeatures\r\n\\Core\\Microsoft.CodeAnalysis.EditorFeatures.csproj]\r\n```\r\n\r\nRunning `msbuild /v:d` (from VS 2019 Preview Developer Command Prompt) on that project adds:\r\n\r\n```\r\n         There was a conflict between \"Microsoft.VisualStudio.Threading, Version=15.8.0.0, Culture=neutral, PublicKeyTo\r\n         ken=b03f5f7f11d50a3a\" and \"Microsoft.VisualStudio.Threading, Version=16.0.0.0, Culture=neutral, PublicKeyToken\r\n         =b03f5f7f11d50a3a\".\r\n             \"Microsoft.VisualStudio.Threading, Version=15.8.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was\r\n          chosen because it was primary and \"Microsoft.VisualStudio.Threading, Version=16.0.0.0, Culture=neutral, Publi\r\n         cKeyToken=b03f5f7f11d50a3a\" was not.\r\n             References which depend on \"Microsoft.VisualStudio.Threading, Version=15.8.0.0, Culture=neutral, PublicKey\r\n         Token=b03f5f7f11d50a3a\" [C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.threading\\16.0.102\\lib\\net46\\Mi\r\n         crosoft.VisualStudio.Threading.dll].\r\n                 C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.threading\\16.0.102\\lib\\net46\\Microsoft.VisualStu\r\n         dio.Threading.dll\r\n                   Project file item includes which caused reference \"C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualst\r\n         udio.threading\\16.0.102\\lib\\net46\\Microsoft.VisualStudio.Threading.dll\".\r\n                     C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.threading\\16.0.102\\lib\\net46\\Microsoft.Visua\r\n         lStudio.Threading.dll\r\n             References which depend on \"Microsoft.VisualStudio.Threading, Version=16.0.0.0, Culture=neutral, PublicKey\r\n         Token=b03f5f7f11d50a3a\" [].\r\n                 C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.coreutility\\16.1.101\\lib\\net472\\Microsoft.Visual\r\n         Studio.CoreUtility.dll\r\n                   Project file item includes which caused reference \"C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualst\r\n         udio.coreutility\\16.1.101\\lib\\net472\\Microsoft.VisualStudio.CoreUtility.dll\".\r\n                     C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.coreutility\\16.1.101\\lib\\net472\\Microsoft.Vi\r\n         sualStudio.CoreUtility.dll\r\n                     C:\\code\\roslyn\\artifacts\\bin\\Microsoft.CodeAnalysis.EditorFeatures.Text\\Debug\\net472\\Microsoft.Cod\r\n         eAnalysis.EditorFeatures.Text.dll\r\n                     C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.language\\16.1.101\\lib\\net472\\Microsoft.Visua\r\n         lStudio.Language.dll\r\n                     C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.language.intellisense\\16.1.101\\lib\\net472\\Mi\r\n         crosoft.VisualStudio.Language.Intellisense.dll\r\n                     C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.text.data\\16.1.101\\lib\\net472\\Microsoft.Visu\r\n         alStudio.Text.Data.dll\r\n                     C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.text.logic\\16.1.101\\lib\\net472\\Microsoft.Vis\r\n         ualStudio.Text.Logic.dll\r\n                     C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.language.standardclassification\\16.1.101\\lib\r\n         \\net472\\Microsoft.VisualStudio.Language.StandardClassification.dll\r\n                     C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.text.ui\\16.1.101\\lib\\net472\\Microsoft.Visual\r\n         Studio.Text.UI.dll\r\n                 C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.language\\16.1.101\\lib\\net472\\Microsoft.VisualStu\r\n         dio.Language.dll\r\n                   Project file item includes which caused reference \"C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualst\r\n         udio.language\\16.1.101\\lib\\net472\\Microsoft.VisualStudio.Language.dll\".\r\n                     C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.language\\16.1.101\\lib\\net472\\Microsoft.Visua\r\n         lStudio.Language.dll\r\n                     C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.language.intellisense\\16.1.101\\lib\\net472\\Mi\r\n         crosoft.VisualStudio.Language.Intellisense.dll\r\n                 C:\\Users\\Svick\\.nuget\\packages\\nerdbank.streams\\2.1.37\\lib\\net472\\Nerdbank.Streams.dll\r\n                   Project file item includes which caused reference \"C:\\Users\\Svick\\.nuget\\packages\\nerdbank.streams\\2\r\n         .1.37\\lib\\net472\\Nerdbank.Streams.dll\".\r\n                     C:\\Users\\Svick\\.nuget\\packages\\nerdbank.streams\\2.1.37\\lib\\net472\\Nerdbank.Streams.dll\r\n                 C:\\Users\\Svick\\.nuget\\packages\\streamjsonrpc\\2.0.167\\lib\\net472\\StreamJsonRpc.dll\r\n                   Project file item includes which caused reference \"C:\\Users\\Svick\\.nuget\\packages\\streamjsonrpc\\2.0.\r\n         167\\lib\\net472\\StreamJsonRpc.dll\".\r\n                     C:\\Users\\Svick\\.nuget\\packages\\streamjsonrpc\\2.0.167\\lib\\net472\\StreamJsonRpc.dll\r\n         There was a conflict between \"StreamJsonRpc, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\n         \" and \"StreamJsonRpc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n             \"StreamJsonRpc, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was chosen because it w\r\n         as primary and \"StreamJsonRpc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was not.\r\n             References which depend on \"StreamJsonRpc, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a\r\n         3a\" [C:\\Users\\Svick\\.nuget\\packages\\streamjsonrpc\\2.0.167\\lib\\net472\\StreamJsonRpc.dll].\r\n                 C:\\Users\\Svick\\.nuget\\packages\\streamjsonrpc\\2.0.167\\lib\\net472\\StreamJsonRpc.dll\r\n                   Project file item includes which caused reference \"C:\\Users\\Svick\\.nuget\\packages\\streamjsonrpc\\2.0.\r\n         167\\lib\\net472\\StreamJsonRpc.dll\".\r\n                     C:\\Users\\Svick\\.nuget\\packages\\streamjsonrpc\\2.0.167\\lib\\net472\\StreamJsonRpc.dll\r\n             References which depend on \"StreamJsonRpc, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a\r\n         3a\" [].\r\n                 C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.language\\16.1.101\\lib\\net472\\Microsoft.VisualStu\r\n         dio.Language.dll\r\n                   Project file item includes which caused reference \"C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualst\r\n         udio.language\\16.1.101\\lib\\net472\\Microsoft.VisualStudio.Language.dll\".\r\n                     C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.language\\16.1.101\\lib\\net472\\Microsoft.Visua\r\n         lStudio.Language.dll\r\n                     C:\\Users\\Svick\\.nuget\\packages\\microsoft.visualstudio.language.intellisense\\16.1.101\\lib\\net472\\Mi\r\n         crosoft.VisualStudio.Language.Intellisense.dll\r\n```\r\n\r\nMicrosoft.CodeAnalysis.Remote.Razor.ServiceHub.csproj fails with:\r\n\r\n```\r\nC:\\code\\roslyn\\src\\Workspaces\\Remote\\ServiceHub\\Shared\\ServiceHubServiceBase.cs(192,48): error CS0117: 'DisconnectedRea\r\nson' does not contain a definition for 'LocallyDisposed' [C:\\code\\roslyn\\src\\Workspaces\\Remote\\Razor\\Microsoft.CodeAnal\r\nysis.Remote.Razor.ServiceHub.csproj]\r\nC:\\code\\roslyn\\src\\Workspaces\\Remote\\ServiceHub\\Shared\\ServiceHubServiceBase.cs(193,48): error CS0117: 'DisconnectedRea\r\nson' does not contain a definition for 'RemotePartyTerminated' [C:\\code\\roslyn\\src\\Workspaces\\Remote\\Razor\\Microsoft.Co\r\ndeAnalysis.Remote.Razor.ServiceHub.csproj]\r\nC:\\code\\roslyn\\src\\Workspaces\\Remote\\ServiceHub\\Shared\\Extensions.cs(28,37): error CS0246: The type or namespace name '\r\nJsonMessageFormatter' could not be found (are you missing a using directive or an assembly reference?) [C:\\code\\roslyn\\\r\nsrc\\Workspaces\\Remote\\Razor\\Microsoft.CodeAnalysis.Remote.Razor.ServiceHub.csproj]\r\nC:\\code\\roslyn\\src\\Workspaces\\Remote\\ServiceHub\\Shared\\Extensions.cs(33,17): error CS0117: 'JsonRpc' does not contain a\r\n definition for 'CancelLocallyInvokedMethodsWhenConnectionIsClosed' [C:\\code\\roslyn\\src\\Workspaces\\Remote\\Razor\\Microso\r\nft.CodeAnalysis.Remote.Razor.ServiceHub.csproj]\r\nC:\\code\\roslyn\\src\\Workspaces\\Remote\\ServiceHub\\Shared\\Extensions.cs(34,17): error CS0117: 'JsonRpc' does not contain a\r\n definition for 'TraceSource' [C:\\code\\roslyn\\src\\Workspaces\\Remote\\Razor\\Microsoft.CodeAnalysis.Remote.Razor.ServiceHu\r\nb.csproj]\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38104","RelatedDescription":"Closed issue \"Build.cmd fails for several projects\" (#38104)"},{"Id":"482501901","IsPullRequest":true,"CreatedAt":"2019-08-19T20:07:53","Actor":"AlekseyTs","Number":"38103","RawContent":null,"Title":"VB: Support protected access for interface members.","State":"open","Body":"Closes #35827.","Url":"https://github.com/dotnet/roslyn/pull/38103","RelatedDescription":"Open PR \"VB: Support protected access for interface members.\" (#38103)"},{"Id":"482475886","IsPullRequest":false,"CreatedAt":"2019-08-19T19:02:42","Actor":"stephentoub","Number":"38102","RawContent":null,"Title":"IDE0016 loses comments","State":"open","Body":"**Version Used**: \r\n3.3.0-beta3-19413-06+ac06df1bffb7b7fd0e5bf63cc91921af76b21e03\r\n\r\n**Steps to Reproduce**:\r\nAny of these variants:\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main() { }\r\n\r\n    private object _arg;\r\n\r\n    public Program(object arg)\r\n    {\r\n        if (arg == null)\r\n        {\r\n            throw new ArgumentNullException(nameof(arg)); // Oh no!\r\n        }\r\n        _arg = arg;\r\n    }\r\n}\r\n```\r\nor\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main() { }\r\n\r\n    private object _arg;\r\n\r\n    public Program(object arg)\r\n    {\r\n        if (arg == null)\r\n        {\r\n            // Oh no!\r\n            throw new ArgumentNullException(nameof(arg));\r\n        }\r\n        _arg = arg;\r\n    }\r\n}\r\n```\r\nor\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main() { }\r\n\r\n    private object _arg;\r\n\r\n    public Program(object arg)\r\n    {\r\n        if (arg == null) // Oh no!\r\n        {\r\n            throw new ArgumentNullException(nameof(arg));\r\n        }\r\n        _arg = arg;\r\n    }\r\n}\r\n```\r\nThen apply IDE0016.\r\n\r\n**Expected Behavior**:\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main() { }\r\n\r\n    private object _arg;\r\n\r\n    public Program(object arg)\r\n    {\r\n        _arg = arg ?? throw new ArgumentNullException(nameof(arg)); // Oh no!\r\n    }\r\n}\r\n```\r\nor something similar, retaining the comment.  Or just not offering the fix.\r\n\r\n**Actual Behavior**:\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main() { }\r\n\r\n    private object _arg;\r\n\r\n    public Program(object arg)\r\n    {\r\n        _arg = arg ?? throw new ArgumentNullException(nameof(arg));\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38102","RelatedDescription":"Open issue \"IDE0016 loses comments\" (#38102)"},{"Id":"482457629","IsPullRequest":true,"CreatedAt":"2019-08-19T18:19:57","Actor":"genlu","Number":"38101","RawContent":null,"Title":"Fix ChangeNamespaceService to handle member access references","State":"open","Body":"fix #37891\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/38101","RelatedDescription":"Open PR \"Fix ChangeNamespaceService to handle member access references\" (#38101)"},{"Id":"482451555","IsPullRequest":false,"CreatedAt":"2019-08-19T18:05:41","Actor":"JohanLarsson","Number":"38100","RawContent":null,"Title":"Expose IsInExpressionTree","State":"open","Body":"Useful in code fixes as the rules are slightly different in expressions.\r\n\r\n\r\nPreferable via a static mehtod and not via some service locator. Don't know if `SemanticFacts` is a thing.","Url":"https://github.com/dotnet/roslyn/issues/38100","RelatedDescription":"Open issue \"Expose IsInExpressionTree\" (#38100)"},{"Id":"482451281","IsPullRequest":false,"CreatedAt":"2019-08-19T18:04:59","Actor":"JohanLarsson","Number":"38099","RawContent":null,"Title":"Expose IsInConstContext","State":"open","Body":"Useful in third party analyzers.\r\n\r\nPreferable via a static mehtod and not via some service locator. Maybe it can be added to `SyntaxFacts`?","Url":"https://github.com/dotnet/roslyn/issues/38099","RelatedDescription":"Open issue \"Expose IsInConstContext\" (#38099)"},{"Id":"482451039","IsPullRequest":false,"CreatedAt":"2019-08-19T18:04:25","Actor":"JohanLarsson","Number":"38098","RawContent":null,"Title":"Expose IsInStaticContext","State":"open","Body":"The need comes up every now and then in third party analyzers.\r\n\r\nPreferable via a static mehtod and not via some service locator. Maybe it can be added to `SyntaxFacts`?","Url":"https://github.com/dotnet/roslyn/issues/38098","RelatedDescription":"Open issue \"Expose IsInStaticContext\" (#38098)"},{"Id":"482449716","IsPullRequest":false,"CreatedAt":"2019-08-19T18:01:15","Actor":"petrroll","Number":"38097","RawContent":null,"Title":"LSP strips `applicableToSpan` for CodeRefactorings / CodeFixes","State":"open","Body":"As part of an attempt to make refactorings more discoverable #35525 we've enabled refactorings to report their `applicableToSpan` to [CodeRefactoringService](https://github.com/dotnet/roslyn/pull/37941/files#diff-b320a36be29b9923d16fc29409d901e2R132) and further to `SuggestedActionsSource` where it's used to order them (within each other & w.r.t. to CodeFixes (from analyzers) depending on distance from \"current selection/caret location\".\r\n\r\nThe issue is that LSP currently doesn't transport that information & so we [discard it](https://github.com/dotnet/roslyn/pull/37941/files#diff-902163083c57dbeff4aa50a0ee091870R43) before sending and then don't have the information on [receiving end](https://github.com/dotnet/roslyn/blob/release/dev16.4-preview1/src/Tools/ExternalAccess/LiveShare/CodeActions/RoslynCodeActionProvider.cs#L75).\r\n\r\nIt is worth noting that this issue hasn't been created by the abovementioned change (#37941) to Refactorings but merely amplified. Even before this change the `applicableToSpan` of CodeFixes that - in normal situation comes from diagnostics - has been stripped within LSP due to the fact that CodeFixes were treated the same way as refactorings (CodeAction in LSP language).\r\n\r\nThe impact of this issue is inconsistent ordering between local and remote (LSP) experience. Especially, the LSP experience will have static non-current-selection informed ordering that might be very inconvenient, especially if we go further in the direction of offering more - better ordered - refactorings.","Url":"https://github.com/dotnet/roslyn/issues/38097","RelatedDescription":"Open issue \"LSP strips `applicableToSpan` for CodeRefactorings / CodeFixes\" (#38097)"},{"Id":"482585165","IsPullRequest":false,"CreatedAt":"2019-07-21T23:41:27","Actor":"lucasteles","Number":"38121","RawContent":null,"Title":"Property patterns with generics give a syntax error","State":"open","Body":"\r\nI'm trying to replicate some light Option\\<T> on C#8, but I'm getting an error in the switch expression\r\n\r\nConsider the code:\r\n```cs\r\n   public abstract class Option<T> { }\r\n   public class None<T> : Option<T> { }\r\n   public class Some<T> : Option<T> {\r\n       public T Value { get; }\r\n       public Some(T value) => Value = value;\r\n   }\r\n```\r\nIf i try property pattern on Some\\<T> the compiler throws a syntax error\r\n\r\n```cs\r\nstatic string Match(Option<Foo> maybeFoo) =>\r\n    maybeFoo switch\r\n    {\r\n        // works\r\n        None<Foo> _ => \"Theres nothing\",\r\n\r\n        // works\r\n        Some<Foo> someFoo when someFoo.Value.Bar > 42 => someFoo.Value.Baz,\r\n\r\n        // Syntax error\r\n        Some<Foo> { Value: var p } when p.Bar == 42 => p.Baz,\r\n\r\n        _ => string.Empty,\r\n    };\r\n\r\n```\r\nIf I define a Type alias to Some\\<Foo> it works as expected\r\n\r\n```cs\r\nusing SomeFoo = Program.Some<Foo>;\r\n\r\nstatic string Match(Option<Foo> maybeFoo) =>\r\n    maybeFoo switch\r\n    {\r\n        // works\r\n        None<Foo> _ => \"Theres nothing\",\r\n\r\n        // now works\r\n        SomeFoo { Value: var p } when p.Bar == 42 => p.Baz,\r\n\r\n        _ => string.Empty,\r\n    };\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38121","RelatedDescription":"Open issue \"Property patterns with generics give a syntax error\" (#38121)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"482594333","IsPullRequest":true,"CreatedAt":"2019-08-20T02:19:33","Actor":"Dotnet-GitSync-Bot","Number":"7708","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @madmir","Url":"https://github.com/dotnet/corert/pull/7708","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7708)"},{"Id":"482495794","IsPullRequest":true,"CreatedAt":"2019-08-19T19:53:03","Actor":"trylek","Number":"7707","RawContent":null,"Title":"Two small improvements in SuperIlc","State":"open","Body":"1) Add support for another CPAOT vs. Crossgen instrumentation dealing\r\nwith the check MethodRequiresMarshaling used for inlining PInvokes.\r\n\r\n2) Include output file name extension in compiler log and response\r\nfile path - there are several Pri#1 tests that include an exe and\r\ndll pair with the same name. These had previously clashing response\r\nand log file names, causing weird race conditions in parallel build.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7707","RelatedDescription":"Open PR \"Two small improvements in SuperIlc\" (#7707)"},{"Id":"481593799","IsPullRequest":true,"CreatedAt":"2019-08-19T15:30:16","Actor":"MichalStrehovsky","Number":"7700","RawContent":null,"Title":"Implement getILIntrinsicImplementation and friends","State":"closed","Body":"This ports a couple handcrafted IL intrinsics from CoreCLR (some of which are required for correctness and some only for perf). See code around getILIntrinsicImplementation in CoreCLR's JitInterface.\r\n\r\nThis is needed to be able to compile an actually working 3.0 R2R CoreLib.\r\n\r\nI've used CoreRT's `ILProvider` instead of handcrafting buffers with IL bytes like crossgen does. It's more comfortable on the generation side and it also lets us share the provider for `Unsafe` intrinsics with what we already wrote for full AOT. But we need to fix up tokens in the generated IL in JitInterface...\r\n\r\nThe `FindGenericMethodArgTypeSpec` also exists in crossgen (under the same name).  It's part of the token rewriting business. It's kind of gross, but it works.","Url":"https://github.com/dotnet/corert/pull/7700","RelatedDescription":"Closed or merged PR \"Implement getILIntrinsicImplementation and friends\" (#7700)"},{"Id":"482089932","IsPullRequest":false,"CreatedAt":"2019-08-19T06:40:24","Actor":"maikebing","Number":"7706","RawContent":null,"Title":"Use  PtrToStructure with UnmanagedType.ByValTStr will lose data, is it a BUG?","State":"closed","Body":"Code:\r\n\r\n```CSharp\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi, Pack = 1)]\r\n    public struct MSG_HEAD\r\n    {\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string NetNo;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string PlazaNo;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 3)] public string LaneID;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 14)] public string DDHM;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1)] public string LaneType;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 5)] public string MsgLen;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string MsgType;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string MsgVersion;\r\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 2)] public string Reserved;\r\n    };//------MSG_HEAD Size:32\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var data = System.Text.Encoding.ASCII.GetBytes( \"0423X9120190805111432100073A0020010333333\");\r\n            Type _t_msg_head = typeof(MSG_HEAD);\r\n            int _rs_msg_head = Marshal.SizeOf(_t_msg_head);\r\n            IntPtr _bf_msg_head = Marshal.AllocHGlobal(_rs_msg_head);\r\n            Marshal.Copy(data, 0, _bf_msg_head, _rs_msg_head);\r\n            MSG_HEAD  HEAD = (MSG_HEAD)Marshal.PtrToStructure(_bf_msg_head, _t_msg_head);\r\n            Marshal.FreeHGlobal(_bf_msg_head);\r\n            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(HEAD));\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nActual:\r\n```\r\n{\r\n\t\"NetNo\": \"0\",\r\n\t\"PlazaNo\": \"2\",\r\n\t\"LaneID\": \"X9\",\r\n\t\"DDHM\": \"2019080511143\",\r\n\t\"LaneType\": \"\",\r\n\t\"MsgLen\": \"0007\",\r\n\t\"MsgType\": \"A\",\r\n\t\"MsgVersion\": \"0\",\r\n\t\"Reserved\": \"0\"\r\n}\r\n```\r\nExpect\r\n```\r\n0423X9120190805111432100073A0020010333333\r\n{\r\n\t\"NetNo\": \"04\",\r\n\t\"PlazaNo\": \"23\",\r\n\t\"LaneID\": \"X91\",\r\n\t\"DDHM\": \"20190805111432\",\r\n\t\"LaneType\": \"1\",\r\n\t\"MsgLen\": \"00073\",\r\n\t\"MsgType\": \"A0\",\r\n\t\"MsgVersion\": \"02\",\r\n\t\"Reserved\": \"00\"\r\n}\r\n```\r\n\r\nThe value of each field is one byte less than the SizeConst specify!\r\n","Url":"https://github.com/dotnet/corert/issues/7706","RelatedDescription":"Closed issue \"Use  PtrToStructure with UnmanagedType.ByValTStr will lose data, is it a BUG?\" (#7706)"},{"Id":"481966265","IsPullRequest":true,"CreatedAt":"2019-08-18T17:14:39","Actor":"jkotas","Number":"7704","RawContent":null,"Title":"Account for .NET Core 3.0 Preview 8 SDK changes","State":"closed","Body":"Fixes #7703","Url":"https://github.com/dotnet/corert/pull/7704","RelatedDescription":"Closed or merged PR \"Account for .NET Core 3.0 Preview 8 SDK changes\" (#7704)"},{"Id":"481901315","IsPullRequest":false,"CreatedAt":"2019-08-18T17:14:39","Actor":"SomeAnon42","Number":"7703","RawContent":null,"Title":"dotnet publish is broken by a preview 8 SDK change","State":"closed","Body":"The problem has already been described in #7575.\r\n(I don't think I have the perms to simply reopen it)","Url":"https://github.com/dotnet/corert/issues/7703","RelatedDescription":"Closed issue \"dotnet publish is broken by a preview 8 SDK change\" (#7703)"},{"Id":"481966894","IsPullRequest":true,"CreatedAt":"2019-08-18T09:51:55","Actor":"Dotnet-GitSync-Bot","Number":"7705","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7705","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7705)"},{"Id":"481877106","IsPullRequest":true,"CreatedAt":"2019-08-18T08:04:03","Actor":"Dotnet-GitSync-Bot","Number":"7702","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7702","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7702)"},{"Id":"481699348","IsPullRequest":true,"CreatedAt":"2019-08-16T19:09:38","Actor":"Dotnet-GitSync-Bot","Number":"7701","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7701","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7701)"},{"Id":"480667183","IsPullRequest":true,"CreatedAt":"2019-08-15T18:29:56","Actor":"MichalStrehovsky","Number":"7693","RawContent":null,"Title":"Match PE headers with Crossgen","State":"closed","Body":"Some of these look important. Others I only did for completeness and I don't think they matter much.","Url":"https://github.com/dotnet/corert/pull/7693","RelatedDescription":"Closed or merged PR \"Match PE headers with Crossgen\" (#7693)"},{"Id":"481147068","IsPullRequest":true,"CreatedAt":"2019-08-15T16:03:55","Actor":"MichalStrehovsky","Number":"7697","RawContent":null,"Title":"Remove rdata section","State":"closed","Body":"To align with crossgen and save up to 4 kB in file size (less section padding).","Url":"https://github.com/dotnet/corert/pull/7697","RelatedDescription":"Closed or merged PR \"Remove rdata section\" (#7697)"},{"Id":"481213555","IsPullRequest":false,"CreatedAt":"2019-08-15T15:44:53","Actor":"developervariety","Number":"7699","RawContent":null,"Title":"Linux: No input file","State":"open","Body":"![ubuntu_iMCjVX1XZj](https://user-images.githubusercontent.com/47051828/63106951-f5e20f80-bf51-11e9-97aa-0f1d2e677b21.png)\r\n\r\nI compiled with WSL yesterday on Ubuntu 18.04, and when it finished compiling I installed the package. I got nothing really from it, just aborted a second later.","Url":"https://github.com/dotnet/corert/issues/7699","RelatedDescription":"Open issue \"Linux: No input file\" (#7699)"},{"Id":"481128438","IsPullRequest":true,"CreatedAt":"2019-08-15T14:20:30","Actor":"Dotnet-GitSync-Bot","Number":"7696","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7696","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7696)"},{"Id":"481157926","IsPullRequest":false,"CreatedAt":"2019-08-15T13:45:01","Actor":"gtbuchanan","Number":"7698","RawContent":null,"Title":"Invalid program detected (Invalid IL at offset '0x1') - Non-integral type for branch condition","State":"open","Body":"I have a UWP app (`Ewn.Mobile.UWP`) I have been unsuccessfully trying to build in release mode with .NET Native for weeks now. Many of my issues seem to be stemming from a lack of a 64-bit version of ILC. However, I've gotten to a point where I at least don't get an `OutOfMemoryException`. As mentioned in #5905 and https://github.com/dotnet/reactive/issues/899, I've implemented the following compiler flags in my csproj:\r\n\r\n```xml\r\n<Use64BitCompiler>true</Use64BitCompiler>\r\n<ShortcutGenericAnalysis>true</ShortcutGenericAnalysis>\r\n```\r\n\r\nHowever, I receive the following error during compilation related to one of our internal NuGet packages:\r\n\r\n### ilclog.csv\r\n```csv\r\n\"Message\",Low,\"D:\\a\\1\\s\\src\\Ewn.Extensions\\CollectionExtensions.cs(0) : fatal error N1205: 'static System.__UniversalCanon Ewn.Extensions.CollectionExtensions.AddTo<System.__UniversalCanon, System.__UniversalCanon>(System.__UniversalCanon, System.Collections.Generic.ICollection`1<System.__UniversalCanon>)' : Invalid program detected (Invalid IL at offset '0x1') - Non-integral type for branch condition\"\r\n\"Error\",,0,0,\"ILT0005: 'C:\\Program Files (x86)\\Microsoft SDKs\\UWPNuGetPackages\\runtime.win10-x86.microsoft.net.native.compiler\\2.2.3\\tools\\x86\\ilc\\Tools64\\nutc_driver.exe @\"\"C:\\Users\\taylor\\Desktop\\ewn-main\\src\\Ewn.Mobile.UWP\\obj\\x86\\Dev\\ilc\\intermediate\\MDIL\\Ewn.Mobile.UWP.rsp\"\"' returned exit code 1\"\r\n\"Message\",Low,\"Done executing task \"\"GenerateMDILGlobalAnalysis\"\" -- FAILED.\"\r\n\"Message\",Low,\"Done building target \"\"GenerateMDILGlobalAnalysis\"\" in file \"\"Nutc\"\" -- FAILED.\"\r\n\"Message\",Low,\"Done building project \"\"Nutc\"\" -- FAILED.\"\r\n\"Message\",Low,\"Compilation failed\"\r\n```\r\n\r\n### Ewn.Extensions.CollectionExtensions.AddTo\r\n```csharp\r\npublic static T1 AddTo<T1, T2>([NotNull]this T1 @this, ICollection<T2> collection)\r\n    where T1 : T2\r\n{\r\n    collection.Add(@this);\r\n    return @this;\r\n}\r\n```\r\n\r\nI honestly have no idea what could be causing this since the method is pretty basic. Do you think this is a bug or is there something I'm missing?","Url":"https://github.com/dotnet/corert/issues/7698","RelatedDescription":"Open issue \"Invalid program detected (Invalid IL at offset '0x1') - Non-integral type for branch condition\" (#7698)"},{"Id":"480667050","IsPullRequest":true,"CreatedAt":"2019-08-15T05:19:28","Actor":"MichalStrehovsky","Number":"7692","RawContent":null,"Title":"Generate more efficient sigs for READYTORUN_FIXUP_MethodEntry","State":"closed","Body":"The specialized `DefToken`/`RefToken` sigs save a byte.","Url":"https://github.com/dotnet/corert/pull/7692","RelatedDescription":"Closed or merged PR \"Generate more efficient sigs for READYTORUN_FIXUP_MethodEntry\" (#7692)"},{"Id":"480666827","IsPullRequest":true,"CreatedAt":"2019-08-15T05:18:53","Actor":"MichalStrehovsky","Number":"7690","RawContent":null,"Title":"Use CORINFO_VIRTUALCALL_STUB for virtual methods","State":"closed","Body":"Crossgen does the same thing.\r\n\r\nAlso deleting `ReadyToRunHelperId.VirtualEntry` because the constant was used in one spot, and we didn't handle it anywhere else (leading to compilation failures because the rest of the code couldn't handle it).","Url":"https://github.com/dotnet/corert/pull/7690","RelatedDescription":"Closed or merged PR \"Use CORINFO_VIRTUALCALL_STUB for virtual methods\" (#7690)"},{"Id":"480666928","IsPullRequest":true,"CreatedAt":"2019-08-15T05:18:40","Actor":"MichalStrehovsky","Number":"7691","RawContent":null,"Title":"Generate ReJit NOPs","State":"closed","Body":"Crossgen sets this flag and so I assume should we.","Url":"https://github.com/dotnet/corert/pull/7691","RelatedDescription":"Closed or merged PR \"Generate ReJit NOPs\" (#7691)"},{"Id":"480667354","IsPullRequest":true,"CreatedAt":"2019-08-15T05:18:28","Actor":"MichalStrehovsky","Number":"7694","RawContent":null,"Title":"Generate resource directory entry","State":"closed","Body":"R2RPEBuilder goes through lengths to restore .rsrc section, but drops the directory entry, making resources not actually work E2E.","Url":"https://github.com/dotnet/corert/pull/7694","RelatedDescription":"Closed or merged PR \"Generate resource directory entry\" (#7694)"},{"Id":"480784878","IsPullRequest":true,"CreatedAt":"2019-08-15T05:18:16","Actor":"Dotnet-GitSync-Bot","Number":"7695","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7695","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7695)"},{"Id":"480562337","IsPullRequest":false,"CreatedAt":"2019-08-14T16:12:27","Actor":"developervariety","Number":"7689","RawContent":null,"Title":"Cannot publish to Linux","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/issues/7689","RelatedDescription":"Closed issue \"Cannot publish to Linux\" (#7689)"},{"Id":"480293963","IsPullRequest":true,"CreatedAt":"2019-08-14T04:14:55","Actor":"Dotnet-GitSync-Bot","Number":"7688","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7688","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7688)"},{"Id":"480134459","IsPullRequest":false,"CreatedAt":"2019-08-13T23:16:39","Actor":"danwalmsley","Number":"7687","RawContent":null,"Title":"UWP unable to use .NET Native or deploy in store because rhbind fails.","State":"closed","Body":"Hi,\r\n\r\n   We have an app which when it only had a small amount of code, we were able to successfully deploy to windows store.\r\n\r\nHowever we are now unable to. \r\n\r\nWe have added rx.xml:\r\n\r\n```\r\n<Assembly Name=\"*Application*\" Dynamic=\"Excluded\" />\r\n\r\n    <Assembly Name=\"eventis.WebApi.ViewModels\" Dynamic=\"Required All\" />\r\n    <Assembly Name=\"ILMD.App\" Dynamic=\"Required All\" />\r\n\r\n    <Assembly Name=\"Newtonsoft.Json\" Dynamic=\"Required All\" />\r\n```\r\n\r\nhere when we add a few assemblies it compiles but crashes at runtime...\r\n\r\nbut if I add only 1 more directive i.e.\r\n\r\n    <Assembly Name=\"System.Reactive\" Dynamic=\"Required All\" />\r\n\r\nit fails...\r\n\r\nMy naive assesment is that rhbind is 32bit, and goes over memory limit (even though in csproj we have 64bit compiler set)\r\n\r\nAny workaround or assistance is greatly appreciated.\r\n","Url":"https://github.com/dotnet/corert/issues/7687","RelatedDescription":"Closed issue \"UWP unable to use .NET Native or deploy in store because rhbind fails.\" (#7687)"},{"Id":"479749419","IsPullRequest":true,"CreatedAt":"2019-08-13T01:57:17","Actor":"Dotnet-GitSync-Bot","Number":"7686","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @AaronRobinsonMSFT","Url":"https://github.com/dotnet/corert/pull/7686","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7686)"},{"Id":"479377606","IsPullRequest":true,"CreatedAt":"2019-08-11T16:48:06","Actor":"MichalStrehovsky","Number":"7685","RawContent":null,"Title":"Unify calling convention of casting helpers","State":"closed","Body":"Use the RyuJIT calling convention (type first, object second) everywhere.","Url":"https://github.com/dotnet/corert/pull/7685","RelatedDescription":"Closed or merged PR \"Unify calling convention of casting helpers\" (#7685)"},{"Id":"479220411","IsPullRequest":false,"CreatedAt":"2019-08-11T00:04:22","Actor":"christianrondeau","Number":"7680","RawContent":null,"Title":"Support for dotnet core 3 preview 7 TaskAsyncEnumerableExtensions","State":"closed","Body":"Compiling code that uses `TaskAsyncEnumerableExtensions` using dotnet 3.0.100-preview7-012821 compiles with this warning:\r\n\r\n```\r\nEXEC : warning : Method `[myproject]MyProject.MyAssembly.MyClass+<ExecuteAsync>d__2.MoveNext()` will always throw because: [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: System.Threading.Tasks.TaskAsyncEnumerableExtensions, System.Threading.Tasks, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a [C:\\myproject\\MyProject.Assembly\\MyProject.Assembly.csproj]\r\n```\r\n\r\nHere is the relevant parts of my `.csproj`:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <AssemblyName>myproject</AssemblyName>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <!-- I tried with and without these -->\r\n    <IlcInvariantGlobalization>true</IlcInvariantGlobalization>\r\n    <RootAllApplicationAssemblies>false</RootAllApplicationAssemblies>\r\n    <IlcGenerateStackTraceData>false</IlcGenerateStackTraceData>\r\n    <IlcDisableReflection>true</IlcDisableReflection>\r\n    <IlcOptimizationPreference>Size</IlcOptimizationPreference>\r\n  </PropertyGroup>\r\n\r\n  <!-- ... project references and microsoft configuration extensions -->\r\n\r\n</Project>\r\n```\r\n\r\nI tried adding this, hoping that it would find the missing type (if I got the first error right):\r\n\r\n```\r\n  <ItemGroup>\r\n    <IlcReference Include=\"$(NuGetPackageFolders)\\microsoft.netcore.app\\2.2.0\\ref\\netcoreapp2.2\\netstandard.dll\" />\r\n    <IlcReference Include=\"$(NuGetPackageFolders)\\microsoft.netcore.app\\2.2.0\\ref\\netcoreapp2.2\\System.Threading.Tasks.Extensions.dll\" />\r\n  </ItemGroup>\r\n```\r\n\r\nBut I now receive this error, which I have to admit, I do not understand:\r\n\r\n```\r\nInternal.TypeSystem.TypeSystemException+TypeLoadException: [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1, netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n     at Internal.TypeSystem.ThrowHelper.ThrowTypeLoadException(ExceptionStringID id, String typeName, String assemblyName)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(String nameSpace, String name, Boolean throwIfNotFound)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveTypeReference(TypeReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveTypeReference(TypeReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType(SignatureTypeCode typeCode)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType(SignatureTypeCode typeCode)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseFieldSignature()\r\n     at Internal.TypeSystem.Ecma.EcmaField.InitializeFieldType()\r\n     at Internal.TypeSystem.MetadataFieldLayoutAlgorithm.ComputeInstanceLayout(DefType defType, InstanceLayoutKind layoutKind)\r\n     at Internal.TypeSystem.DefType.ComputeInstanceLayout(InstanceLayoutKind layoutKind)\r\n     at ILCompiler.DependencyAnalysis.EETypeNode.CheckCanGenerateEEType(NodeFactory factory, TypeDesc type)\r\n     at ILCompiler.DependencyAnalysis.NodeFactory.CreateNecessaryTypeNode(TypeDesc type)\r\n     at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n     at ILCompiler.DependencyAnalysis.GenericMethodsHashtableNode.GetGenericMethodsHashtableDependenciesForMethod(DependencyList& dependencies, NodeFactory factory, MethodDesc method)\r\n     at ILCompiler.DependencyAnalysis.MethodGenericDictionaryNode.ComputeNonRelocationBasedDependencies(NodeFactory factory)\r\n     at ILCompiler.DependencyAnalysis.ObjectNode.GetStaticDependencies(NodeFactory factory)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.GetStaticDependenciesImpl(DependencyNodeCore`1 node)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ProcessMarkStack()\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.ILScanner.ILCompiler.IILScanner.Scan()\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n```\r\n\r\nIf it helps I can create a repro project, just let me know!","Url":"https://github.com/dotnet/corert/issues/7680","RelatedDescription":"Closed issue \"Support for dotnet core 3 preview 7 TaskAsyncEnumerableExtensions\" (#7680)"},{"Id":"479281464","IsPullRequest":true,"CreatedAt":"2019-08-10T19:00:28","Actor":"MichalStrehovsky","Number":"7684","RawContent":null,"Title":"Don't emit \"Generating compatible native code\" when reflection disabled","State":"closed","Body":"This mode is the opposite of compatible.","Url":"https://github.com/dotnet/corert/pull/7684","RelatedDescription":"Closed or merged PR \"Don't emit \"Generating compatible native code\" when reflection disabled\" (#7684)"},{"Id":"479280999","IsPullRequest":true,"CreatedAt":"2019-08-10T17:49:06","Actor":"MichalStrehovsky","Number":"7683","RawContent":null,"Title":"Document the \"reflection-free\" mode","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7683","RelatedDescription":"Closed or merged PR \"Document the \"reflection-free\" mode\" (#7683)"},{"Id":"479280495","IsPullRequest":true,"CreatedAt":"2019-08-10T17:48:31","Actor":"MichalStrehovsky","Number":"7682","RawContent":null,"Title":"Disabled reflection: don't crash for ldtoken field/method","State":"closed","Body":"We currently key native layout generation off the `SupportsReflection` property, so put this behind that.\r\n\r\nGoing forward, we'll want to eliminate all uses of `SupportsReflection` though: it's not exactly what we want here (and elsewhere). Native layout generation should not be tied to reflection support, since native layout is used in generic virtual method dispatch.\r\n\r\nGeneric virtual methods need to work when reflection is disabled. They currently don't.","Url":"https://github.com/dotnet/corert/pull/7682","RelatedDescription":"Closed or merged PR \"Disabled reflection: don't crash for ldtoken field/method\" (#7682)"},{"Id":"479266409","IsPullRequest":true,"CreatedAt":"2019-08-10T15:52:06","Actor":"MichalStrehovsky","Number":"7681","RawContent":null,"Title":"Clean up ProjectN parts of the compiler","State":"closed","Body":"These files were exclusively used for .NET Native to support the UTC codegen backend.\r\n\r\nI left two things that we don't use in CoreRT but might want to use:\r\n\r\n1. Support for SharedLibrary\r\n2. Windows-specific managed debugger support\r\n\r\nI'm not very firm on keeping 2.","Url":"https://github.com/dotnet/corert/pull/7681","RelatedDescription":"Closed or merged PR \"Clean up ProjectN parts of the compiler\" (#7681)"},{"Id":"479210729","IsPullRequest":false,"CreatedAt":"2019-08-10T00:48:40","Actor":"genifycom","Number":"7679","RawContent":null,"Title":"Does not work with System.Data.SqlClient","State":"open","Body":"A CoreRT built console app that uses System.Data.SqlClient does not make a connection to the database.\r\n\r\nIt reports Unable to load sni.dll","Url":"https://github.com/dotnet/corert/issues/7679","RelatedDescription":"Open issue \"Does not work with System.Data.SqlClient\" (#7679)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"479906410","IsPullRequest":true,"CreatedAt":"2019-08-20T00:32:10","Actor":"dsplaisted","Number":"3528","RawContent":null,"Title":"Miscellaneous perf fixes","State":"closed","Body":"#### Description\r\nSeveral different perf improvements:\r\n\r\n- Don't run ProcessFrameworkReferences target if there are no FrameworkReferences\r\n- Support NuGet semantic versions in packageoverrides.txt\r\n  - Without this, the packageoverrides.txt from the ASP.NET Core targeting pack will be ignored for prerelease versions of the SDK\r\n- Don't include default `PackageConflictOverrides` for .NET Core 3 and higher\r\n  - These should come from the packageoverrides.txt file in the targeting pack.  Also, the package name for the default overrides is incorrect for .NET Core 3.0+\r\n\r\n#### Customer Impact\r\nFaster build times.  On my machine:\r\n\r\n Scenario Name       | Test Name          | Metric         | Unit | Iterations |   Average |  STDEV.S |       Min |       Max\r\n:------------------- |:------------------ |:-------------- |:----:|:----------:| ---------:| --------:| ---------:| ---------:\r\nBuild Web Large 3.0 | Build (no changes) - Before| Execution Time |  ms  |     9      | 19024.212 |   245.835 | 18597.847 |  19386.137\r\nBuild Web Large 3.0 | Build (no changes) - After | Execution Time |  ms  |     9      | 17508.622 | 2037.929 | 15226.639 | 21639.623\r\n\r\n#### Regression?\r\nNo. \r\n\r\n#### Risk\r\nLow","Url":"https://github.com/dotnet/sdk/pull/3528","RelatedDescription":"Closed or merged PR \"Miscellaneous perf fixes\" (#3528)"},{"Id":"481412493","IsPullRequest":true,"CreatedAt":"2019-08-19T23:27:10","Actor":"dsplaisted","Number":"3543","RawContent":null,"Title":"Fix regression in selecting default RuntimeIdentifier","State":"closed","Body":"#### Description\r\nFixed change in behavior (regression) that was introduced when we started including the RuntimeIdentifier graph in the SDK and passing it to NuGet.\r\n\r\n#### Customer Impact\r\nThe change in behavior had to do with the automatic selection of the PlatformTarget.  In specific cases, the PlatformTarget would be set to x86, where it would have previously been set to AnyCPU.  This is because previously you had to have a (transitive) dependency on the Microsoft.NETCore.Platforms package to get the RuntimeIdentifier graph, and without it, you wouldn't get assets that didn't exactly match the default RuntimeIdentifier (win7-x86).  Since no native assets were found, the PlatformTarget defaulted to AnyCPU, even though if the RuntimeGraph had been available there would have been native assets.\r\n\r\nRoslyn ran into this, their apps switched to x86 unintentionally.  We are not sure how many other customers would be impacted, as the combination of factors necessary to see the behavior change is somewhat of an edge case.\r\n\r\n#### Regression?\r\nYes, regressed with #3406\r\n\r\n#### Risk\r\nLow\r\n\r\nFixes #3495\r\n\r\nI thought of a \"clever\" way to fix this regression.  We revert to the AnyCPU PlatformTarget if:\r\n- There are no native assets\r\n- There are native assets, but the Microsoft.NETCore.Platforms package (which was previously necessary to get the RID graph) is not transitively referenced, and there are no native assets for the exact RID win7-x86.\r\n\r\nThis should match the PlatformTarget which SDKs prior to the 3.0 SDK would have used.","Url":"https://github.com/dotnet/sdk/pull/3543","RelatedDescription":"Closed or merged PR \"Fix regression in selecting default RuntimeIdentifier\" (#3543)"},{"Id":"482540867","IsPullRequest":false,"CreatedAt":"2019-08-19T21:38:27","Actor":"rainersigwald","Number":"3549","RawContent":null,"Title":"End-to-end tests for resx scenarios","State":"open","Body":"There are a variety of resource scenarios that would be well-suited to having small end-to-end tests that build a resource-using project and run it to validate that the resource is handled correctly in the build and available at runtime.\r\n\r\nRelated MSBuild PRs that should be mined for test data: microsoft/msbuild#4607, microsoft/msbuild#4638, microsoft/msbuild#4588, microsoft/msbuild#4637.","Url":"https://github.com/dotnet/sdk/issues/3549","RelatedDescription":"Open issue \"End-to-end tests for resx scenarios\" (#3549)"},{"Id":"480317966","IsPullRequest":true,"CreatedAt":"2019-08-19T20:19:04","Actor":"BenVillalobos","Number":"3533","RawContent":null,"Title":"Opting into dependentupon convention","State":"closed","Body":"### Description\r\n\r\nIn SDK projects and new project system, we have eliminated the need for DependentUpon to make the appropriate file nesting in the IDE tree. However, there is a place where the build actually uses DependentUpon to:\r\n\r\n1. Locate a source file, and _parse (!)_ it to get first class name and namespace\r\n2. Generate .resources accordingly.\r\n\r\nBut people and features in VS rely on this and it has been a consistent source of feedback in moving to .NET Core 3.0. This opts into new behavior to use a convention instead of requiring explicit metadata.\r\n\r\nOriginal issue: https://github.com/microsoft/msbuild/issues/4488\r\n\r\n This change is dependent upon: https://github.com/microsoft/msbuild/pull/4597\r\n\r\n### Customer Impact\r\n\r\nIn a fairly common situation for projects that use resources, avoids the need to specify `DependentUpon` metadata for each resource.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Risk\r\n\r\nLow risk.\r\n\r\n### Test changes in this PR\r\nAdded `DependentUponTest`. Currently it gets skipped, but this test was verified working on a local machine using a version of MSBuild that had the corresponding fix.\r\n","Url":"https://github.com/dotnet/sdk/pull/3533","RelatedDescription":"Closed or merged PR \"Opting into dependentupon convention\" (#3533)"},{"Id":"482502721","IsPullRequest":false,"CreatedAt":"2019-08-19T20:09:47","Actor":"nguerrera","Number":"3548","RawContent":null,"Title":"Linker cannot remove user non-framework, non-package references from deps file","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/issues/3548","RelatedDescription":"Open issue \"Linker cannot remove user non-framework, non-package references from deps file\" (#3548)"},{"Id":"482502349","IsPullRequest":false,"CreatedAt":"2019-08-19T20:08:56","Actor":"nguerrera","Number":"3547","RawContent":null,"Title":"non-embedded comreference does not show up in deps file, throws FileNotFoundException at runtime","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/issues/3547","RelatedDescription":"Open issue \"non-embedded comreference does not show up in deps file, throws FileNotFoundException at runtime\" (#3547)"},{"Id":"481879019","IsPullRequest":true,"CreatedAt":"2019-08-17T14:28:45","Actor":"dotnet-maestro[bot]","Number":"3546","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190816.16\r\n- **Date Produced**: 8/17/2019 12:33 AM\r\n- **Commit**: 0e36c2410b72166a1b9a67142e652225e22feada\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19416.16\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19416.16\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3546","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3546)"},{"Id":"481657710","IsPullRequest":false,"CreatedAt":"2019-08-16T22:08:55","Actor":"mhsimkin","Number":"3545","RawContent":null,"Title":"NETDSK1005 Error when building solution with two projects","State":"closed","Body":"I'm receiving the infamous:\r\n\r\n>  NETSDK1005: Assets file '...\\obj\\project.assets.json' doesn't have a target for '.NETStandard,Version=v2.0'. Ensure that restore has run and that you have included 'netstandard2.0' in the TargetFrameworks for your project. \r\n\r\nwhen I try to build a solution that contains two projects.  One project is targeting .Net 472 and the other .Net Standard 2.  Both projects use the same physical folder since they are building the same code. \r\n\r\n`Aside: As much as I would like to multi-target in one file, I needed two nupkgs because of the order of precedence of when matching which to my target.`\r\n\r\nI get the same issue whether I use MSBuild, or dotnet from the command line or Visual Studio 2019.  Deleting the projects.assets.json file doesn't resolve the issue.\r\n\r\nI was able to work around the build issue by doing either of the following:\r\n\r\n1. having MSBuild restore and build each project individually.\r\n2. giving each project it's own project folder and then adding all the code as a link in one project. (not feasible- 200+ files/folders involved).\r\n\r\nI have attached a msbuild.log with diagnostics, Solution and Project Files.\r\n\r\n[renapi.zip](https://github.com/dotnet/sdk/files/3510159/renapi.zip)\r\n\r\n[msbuild-build.log](https://github.com/dotnet/sdk/files/3510153/msbuild-build.log)\r\n.\r\n\r\nI would like to get this resolved so that I don't need to use a 4 step process on the build server.\r\n\r\n**Build Environment:**\r\nWindows 10 Pro Build 1809\r\nVisual Studio 2019 Enterprise 16.2.2\r\n.NET Framework 4.7.2 and 4.8 \r\n\r\n**Also Installed, but not used for this build**\r\nVisual Studio 2019 Enterprise Preview 16.3.0 Preview 2\r\n.NET Core 2.2.401 and 3.0.100-preview8-013656\r\n\r\nThanks\r\n\r\n-marc","Url":"https://github.com/dotnet/sdk/issues/3545","RelatedDescription":"Closed issue \"NETDSK1005 Error when building solution with two projects\" (#3545)"},{"Id":"481578086","IsPullRequest":true,"CreatedAt":"2019-08-16T14:48:51","Actor":"dotnet-maestro[bot]","Number":"3544","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190815.27\r\n- **Date Produced**: 8/16/2019 1:27 AM\r\n- **Commit**: 98d779a16826fd6ecda6d4d4fa8da7b556b9638f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19415.27\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19415.27\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3544","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3544)"},{"Id":"481332983","IsPullRequest":true,"CreatedAt":"2019-08-15T20:50:33","Actor":"vitek-karas","Number":"3542","RawContent":null,"Title":"Allow specifying RollForward with Major/LatestMajor on all apps","State":"open","Body":"#### Description\r\ndotnet/cli#12257 - SDK doesn't allow usage of `RollForward` property in `2.*` apps. This complicates creation of tools which are supposed to run across major versions. Typically applies to .NET global tools.\r\n\r\nCurrently SDK explicitly blocks usage of `RollForward` msbuild property in projects targeting .NET Core `2.*`. Such a limitation makes sense for restrictive settings of this property (like `Disable` or `LatestPatch`) as usage of those could lead to unexpected behavioral changes when .NET 3.0 is installed on the machine. But there's no good reason to block the more relaxing values `Major` and `LatestMajor`. The fix is to change the explicit block to allow `Major` and `LatestMajor` settings even in `2.*` projects, while keep on failing for the more restrictive values (everything else).\r\nThe `RollForward` property has no effect on machines with `2.*` only runtimes. It works for all apps (regardless of version) once .NET Core 3.0 is installed on the machine.\r\n\r\n#### Customer Impact\r\n.NET Core Tools are a feature enabled as part of .NET Core 2.1. They are similar to libraries in that they are delivered by NuGet but differ in that they are bound to a specific runtime version. If a compatible runtime version is not found, the tools fail to run, with an appropriate error message. \r\n \r\nWe initially gave guidance to multi-target tools to enable running 2.x tools on 3.0 only machine. After some discussion, we decided that this guidance wasn’t acceptable as the singular answer and funded the runtime binding feature (AKA Roll Forward). The goal was to enable 2.x apps to participate in major version roll-forward but not any of the other policies that are 3.x only. The SDK currently prevents this.\r\n \r\nWe need to enable the major version roll-forward scenario for 2.x apps and tools by making the error state more surgical. Otherwise, we’ll need to go back to the initial multi-targeting guidance or tell tools writers to use a `.runtimeconfig.template`. The template idea would work, but is a very unfortunate workaround for what was intended to be a mainline scenario.\r\n\r\n#### Regression?\r\nNo - the roll forward feature is new in 3.0.\r\n\t\t\r\n#### Risk\r\nVery small - the `RollForward` msbuild property is new in 3.0 SDK, so its usage is almost certainly intentional. Affected scenarios were failing early (during build), after the fix they are going to work.","Url":"https://github.com/dotnet/sdk/pull/3542","RelatedDescription":"Open PR \"Allow specifying RollForward with Major/LatestMajor on all apps\" (#3542)"},{"Id":"481218665","IsPullRequest":false,"CreatedAt":"2019-08-15T15:56:22","Actor":"vitek-karas","Number":"3541","RawContent":null,"Title":"Write framework references for self-contained apps","State":"open","Body":"### Problem\r\nThis is continuation of issue originally described in dotnet/core-setup#7610 and the SDK counterpart to dotnet/core-setup#7732.\r\nWhen the native host loads a .NET Core component into already running .NET Core app, it tries to validate that the component's framework references can be satisfied by the app. In order to do this it needs to know which frameworks the app is using. For framework dependent apps this is trivial as the host knows which frameworks it resolved for the app. For self-contained apps though, there's no information about frameworks.\r\n\r\nCurrently framework dependent console app has `.runtimeconfig.json` like this:\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"frameworks\":\r\n    [\r\n      {\r\n        \"name\": \"Microsoft.NETCore.App\",\r\n        \"version\": \"3.0.0\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nA self-contained app on the other hand has `.runtimeconfig.json` like this:\r\n```json\r\n{\r\n  \"runtimeOptions\": {}\r\n}\r\n```\r\n\r\n### Proposal\r\nWrite the same information even for self-contained apps. The caveat is that framework references should not be written the exact same way otherwise host will think it's a framework dependent application (self-contained apps are recognized through the fact that they have no framework references).\r\n\r\n#### Write the `tfm` property\r\nThis would make self-contained apps behave consistently with framework dependent apps. The TFM is not used widely by the host, but it does come into play in specific cases around additional probe paths and `DOTNET_SHARED_STORE` functionality.\r\n\r\n*Compatibility note: It's not really a breaking change if we start writing the `tfm` property. It does change the behavior of the app slightly, but in order for it to take effect the app has to be rebuilt, so there's an explicit action by the developer.* \r\n\r\n#### Write a new `includedFrameworks` property\r\nFramework references in self-contained apps would be written to a new property `includedFrameworks` which would use the same syntax. It's an array of objects, where each object represents a framework reference. The framework reference must specify its `name` and `version`. Other properties like `rollForward` which are allowed on normal framework references will not be allowed here.\r\n\r\n*Compatibility note: Combined with the changes in the host to consume this property, it will change behavior of apps when trying to load dynamic components. But the change requires a rebuild of the app in question, so it's not a breaking change.*\r\n\r\nThe final `.runtimeconfig.json` would look like this:\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"includedFrameworks\":\r\n    [\r\n      {\r\n        \"name\": \"Microsoft.NETCore.App\",\r\n        \"version\": \"3.0.0\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nNaming is always an interesting question, so `includedFrameworks` is just one option. It could be called `embeddedFrameworks`, `containedFrameworks`, ... other suggestions are very welcome. The name should be somewhat clear about the fact that the framework is part of the app.\r\n\r\n### Impact\r\nThe proposed change makes the `.runtimeconfig.json` bigger for self-contained apps, but the change is tiny (100s of bytes).\r\n\r\nPerformance wise there is some cost to write it in the SDK, but that it very small compared to the rest of the work SDK does. The host has to parse the new information as well, so there's some cost to that, but it doesn't have to process it (just remember) during startup, so the perf impact on startup should be very small.","Url":"https://github.com/dotnet/sdk/issues/3541","RelatedDescription":"Open issue \"Write framework references for self-contained apps\" (#3541)"},{"Id":"480939380","IsPullRequest":true,"CreatedAt":"2019-08-15T00:05:41","Actor":"dotnet-bot","Number":"3540","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3540","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3540)"},{"Id":"480932346","IsPullRequest":true,"CreatedAt":"2019-08-14T23:32:31","Actor":"nguerrera","Number":"3539","RawContent":null,"Title":"Pass well-defined set of managed assemblies to linker and crossgen","State":"open","Body":"### Description\r\n\r\nBoth the linker and crossgen features currently scan the entire set of published files, looking for managed assemblies. This was meant to be temporary and the design was to pass them the set of managed assemblies designated in .deps.json. This was not trivial due to ordering issues so we have been living with the temporary design. This change implements the planned design of passing the true set of managed assemblies.\r\n\r\nThe temporary design is inefficient, there's a first chance exception for every non-dll in the publish set, and can be incorrect in the edge case where there are dlls that are not part of the applications runtime dependencies included as content.\r\n\r\nWhile working on this, bugs related to identifying the correct set of assemblies in the .deps file were fixed. It is difficult to split up the bug fixes as they were done on the foundation of the better design.\r\n\r\nIn total, 4 bugs are fixed.\r\n\r\n1. Fix #3109 -  tracked the correct design that is implemented here\r\n2. Fix #3547 - COMReference with PIA do not show up in .deps file, and therefore do not load. EmbedInteropTypes must be used.\r\n3. Fix #2660 - Project references that are not copy local are incorrectly recorded in .deps file\r\n4. Fix #3548 - linker cannot remove project references or direct file references from deps file\r\n\r\nRelates to a fifth bug, https://github.com/aspnet/AspNetCore/issues/12064 (failure to account for views assembly in linker and crossgen), but a fix for that has been made that does not depend on this one. It includes a future proofing so that it can work with both the existing design and the design implemented here.\r\n\r\n### Customer impact\r\n\r\nThis is primarily about having the planned correct design in place for the long term so that we do not have to support the temporary design indefinitely. It would be rare for an application to publish incorrectly with the temporary design.\r\n\r\nThe second bug has a simple workaround of using No-PIA, but the failure is not obvious.\r\n\r\nThe third bug has been worked around by the runtime. It now tolerates missing assemblies in .deps by default. That was also intended to be temporary so the longer we leave the SDK producing the incorrect .deps file, the longer the runtime will have to support this by default.\r\n\r\nThe fourth bug is benign for now as the linker only removes framework assemblies in this release, but this is expected to change in future releases, and it demonstrates the problem of having the poorer design in place as the foundation for these features evolving.\r\n\r\n### Regression\r\n\r\nNo\r\n\r\n\r\n### Risk\r\n\r\nMedium. The code delta is not too large, but the change is in a tricky part of the code and it took 3 tries to come up with the right approach. More regression testing is still needed, which may take until tomorrow to finish authoring.\r\n","Url":"https://github.com/dotnet/sdk/pull/3539","RelatedDescription":"Open PR \"Pass well-defined set of managed assemblies to linker and crossgen\" (#3539)"},{"Id":"480469377","IsPullRequest":true,"CreatedAt":"2019-08-14T20:29:05","Actor":"livarcocc","Number":"3536","RawContent":null,"Title":"Yaml stages","State":"closed","Body":"#### Description\r\n\r\nThis is a planned change to onboard to yaml stages.\r\n\r\n#### Customer Impact\r\n\r\nInfra-structure change.\r\n\r\n#### Regression?\r\n\r\nNo.\r\n\r\n#### Risk\r\n\r\nLow\r\n\r\n___\r\n\r\ncc @riarenas \r\n\r\nThe first two files are the important ones. The rest is an arcade update.\r\n\r\nExample stages build: https://dnceng.visualstudio.com/internal/_build/results?buildId=308530&view=results","Url":"https://github.com/dotnet/sdk/pull/3536","RelatedDescription":"Closed or merged PR \"Yaml stages\" (#3536)"},{"Id":"479845030","IsPullRequest":true,"CreatedAt":"2019-08-14T19:18:51","Actor":"nguerrera","Number":"3525","RawContent":null,"Title":"[DRAFT] Revived classic project experiment for C++/CLI","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3525","RelatedDescription":"Closed or merged PR \"[DRAFT] Revived classic project experiment for C++/CLI\" (#3525)"},{"Id":"480813850","IsPullRequest":true,"CreatedAt":"2019-08-14T18:05:25","Actor":"wli3","Number":"3538","RawContent":null,"Title":"[DRAFT] Revived classic project experiment for C++/CLI ","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3538","RelatedDescription":"Open PR \"[DRAFT] Revived classic project experiment for C++/CLI \" (#3538)"},{"Id":"480641244","IsPullRequest":true,"CreatedAt":"2019-08-14T14:01:21","Actor":"dotnet-maestro[bot]","Number":"3537","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190812.7\r\n- **Date Produced**: 8/12/2019 9:37 PM\r\n- **Commit**: 82c822ee7db08f5347e6ac44e3ed465248394a9e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19412.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19412.7\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3537","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3537)"},{"Id":"480422482","IsPullRequest":true,"CreatedAt":"2019-08-14T02:00:23","Actor":"dotnet-bot","Number":"3535","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3535","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3535)"},{"Id":"480318091","IsPullRequest":true,"CreatedAt":"2019-08-13T21:37:32","Actor":"wli3","Number":"3534","RawContent":null,"Title":"WIP -- test ci -- do we have c++cli work load in CI mahcines?","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3534","RelatedDescription":"Closed or merged PR \"WIP -- test ci -- do we have c++cli work load in CI mahcines?\" (#3534)"},{"Id":"480302574","IsPullRequest":true,"CreatedAt":"2019-08-13T18:28:59","Actor":"livarcocc","Number":"3532","RawContent":null,"Title":"Merge release/3.0.100 preview8 into release/3.0.1xx","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3532","RelatedDescription":"Open PR \"Merge release/3.0.100 preview8 into release/3.0.1xx\" (#3532)"},{"Id":"480119023","IsPullRequest":true,"CreatedAt":"2019-08-13T17:43:30","Actor":"dotnet-maestro[bot]","Number":"3530","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190812.1\r\n- **Date Produced**: 8/12/2019 1:01 PM\r\n- **Commit**: ec2dd5b3e7d11b88b2ca0688bb1685836cfad20a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19412.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19412.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3530","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3530)"},{"Id":"480119380","IsPullRequest":true,"CreatedAt":"2019-08-13T14:31:44","Actor":"dotnet-bot","Number":"3531","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3531","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3531)"},{"Id":"479960011","IsPullRequest":true,"CreatedAt":"2019-08-13T07:26:05","Actor":"peterhuene","Number":"3529","RawContent":null,"Title":"Change default apphost creation retry count to zero.","State":"closed","Body":"This commit changes the default apphost creation retry count to zero.\r\n\r\nThe `HostWriter` now internally implements a retry for relevant I/O exceptions,\r\nso the default retry at the task level would add unnecessary delay for\r\nlegitimate failure conditions.\r\n\r\nChanging the default to zero still leaves the retry at the task level that\r\nusers can optionally enable through build properties.\r\n\r\nHelps address dotnet/core-setup#7597.","Url":"https://github.com/dotnet/sdk/pull/3529","RelatedDescription":"Closed or merged PR \"Change default apphost creation retry count to zero.\" (#3529)"},{"Id":"479898972","IsPullRequest":true,"CreatedAt":"2019-08-13T04:57:51","Actor":"peterhuene","Number":"3527","RawContent":null,"Title":"Change default apphost creation retry count to zero.","State":"closed","Body":"This commit changes the default apphost creation retry count to zero.\r\n\r\nThe `HostWriter` now internally implements a retry for relevant I/O exceptions,\r\nso the default retry at the task level would add unnecessary delay for\r\nlegitimate failure conditions.\r\n\r\nChanging the default to zero still leaves the retry at the task level that\r\nusers can optionally enable through build properties.\r\n\r\nHelps address dotnet/core-setup#7597.","Url":"https://github.com/dotnet/sdk/pull/3527","RelatedDescription":"Closed or merged PR \"Change default apphost creation retry count to zero.\" (#3527)"},{"Id":"479889951","IsPullRequest":true,"CreatedAt":"2019-08-13T01:01:41","Actor":"dotnet-bot","Number":"3526","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3526","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3526)"},{"Id":"479831710","IsPullRequest":true,"CreatedAt":"2019-08-12T23:41:36","Actor":"nguerrera","Number":"3524","RawContent":null,"Title":"3.1.1xx branding","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3524","RelatedDescription":"Closed or merged PR \"3.1.1xx branding\" (#3524)"},{"Id":"479702722","IsPullRequest":true,"CreatedAt":"2019-08-12T18:18:32","Actor":"nguerrera","Number":"3523","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"Fix test that was expecting PresentationFramework.Aero not to be referenced by default, which no longer holds after https://github.com/dotnet/core-setup/pull/7601","Url":"https://github.com/dotnet/sdk/pull/3523","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#3523)"},{"Id":"479260461","IsPullRequest":true,"CreatedAt":"2019-08-12T16:51:51","Actor":"dotnet-bot","Number":"3521","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3521","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3521)"},{"Id":"479220939","IsPullRequest":true,"CreatedAt":"2019-08-12T16:51:48","Actor":"nguerrera","Number":"3520","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3520","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3520)"},{"Id":"479306325","IsPullRequest":false,"CreatedAt":"2019-08-10T21:05:23","Actor":"wli3","Number":"3522","RawContent":null,"Title":"Skip instead of Trim() if there a newline in hintpath during conflict resolution","State":"open","Body":"To align the behavior with RAR https://github.com/microsoft/msbuild/pull/4598","Url":"https://github.com/dotnet/sdk/issues/3522","RelatedDescription":"Open issue \"Skip instead of Trim() if there a newline in hintpath during conflict resolution\" (#3522)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1162097146985795584","CreatedAt":"2019-08-15T20:22:05+00:00","UserScreenname":"dotnet","Text":"You know .NET is open source, right? https://t.co/JLsyVeSFfp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":22,"RawContent":null},{"Id":"1162046045024423936","CreatedAt":"2019-08-15T16:59:01+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1161728795260252160","CreatedAt":"2019-08-14T19:58:23+00:00","UserScreenname":"dotnet","Text":"Request for comment: Consolidating .NET GitHub repos https://t.co/funhIQtZbK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":122,"FavoriteCount":58,"RawContent":null},{"Id":"1161724718740721664","CreatedAt":"2019-08-14T19:42:11+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.8 is available on Windows Update, WSUS and MU Catalog https://t.co/VmcacDaK7I","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":75,"FavoriteCount":43,"RawContent":null},{"Id":"1161408520308158464","CreatedAt":"2019-08-13T22:45:43+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":14,"FavoriteCount":1,"RawContent":null},{"Id":"1161356948542935040","CreatedAt":"2019-08-13T19:20:48+00:00","UserScreenname":"dotnet","Text":"Announcing Entity Framework Core 3.0 Preview 8 and Entity Framework 6.3 Preview 8 https://t.co/6OjVnfl9Vz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":77,"FavoriteCount":51,"RawContent":null},{"Id":"1161344983238004736","CreatedAt":"2019-08-13T18:33:15+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core and Blazor updates in .NET Core 3.0 Preview 8 https://t.co/tG9qMt5Bfl","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":153,"FavoriteCount":96,"RawContent":null},{"Id":"1161344631990149120","CreatedAt":"2019-08-13T18:31:51+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 8 https://t.co/s1RCmPhKm2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":481,"FavoriteCount":266,"RawContent":null},{"Id":"1161344365396017152","CreatedAt":"2019-08-13T18:30:48+00:00","UserScreenname":"dotnet","Text":"Want to help us improve ML .NET? Take this survey to let us know a bit about how you use, or plan to use, machine l… https://t.co/yYhlCeanKZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":25,"RawContent":null}]}},"RunOn":"2019-08-20T05:30:39.0247293Z","RunDurationInMilliseconds":17267}