{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing .NET Core Windows Forms Designer Preview 1","PublishedOn":"2019-09-30T21:00:10+00:00","CommentsCount":56,"FacebookCount":0,"Summary":"Introducing .NET Core Windows Forms Designer Preview 1\nWe just released a GA version of .NET Core 3.0 that includes support for Windows Forms and WPF. And along with that release we&#8217;re happy to...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-core-windows-forms-designer-preview-1/","RawContent":null},{"Title":".NET Framework September 2019 Preview of Quality Rollup","PublishedOn":"2019-09-26T19:36:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We have released the September 2019 Preview of Quality Rollup and Cumulative Updates for .NET Framework for Windows 10\nQuality and Reliability\nThis release contains the following quality and...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-september-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"ML.NET and Model Builder at .NET Conf 2019 (Machine Learning for .NET)","PublishedOn":"2019-09-24T19:48:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited today to announce updates to Model Builder and improvements in ML.NET. You can learn more in the “What’s new in ML.NET?.” session at .NET Conf.\nML.NET is an open-source and...","Href":"https://devblogs.microsoft.com/dotnet/ml-net-and-model-builder-at-net-conf-2019-machine-learning-for-net/","RawContent":null},{"Title":"Joining the .NET Foundation Maturity Model Pilot","PublishedOn":"2019-09-23T16:59:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Joining the .NET Foundation Maturity Model Pilot\nThe .NET Foundation is starting a new pilot program to increase quality and user confidence in open source projects, using a new project maturity...","Href":"https://devblogs.microsoft.com/dotnet/joining-the-net-foundation-maturity-model-pilot/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 and Entity Framework 6.3 General Availability","PublishedOn":"2019-09-23T16:20:13+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"We are extremely excited to announce the general availability of EF Core 3.0and EF 6.3 on nuget.org.\nThe final versions of .NET Core 3.0 and ASP.NET Core 3.0 are also available now.\nHow to get EF Core...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ef-core-3-0-and-ef-6-3-general-availability/","RawContent":null},{"Title":"Announcing F# 4.7","PublishedOn":"2019-09-23T16:06:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"We’re excited to announce general availability of F# 4.7 in conjunction with the .NET Core 3.0 release! In this post, I’ll show you how to get started, explain everything in F# 4.7 and give you a...","Href":"https://devblogs.microsoft.com/dotnet/announcing-f-4-7/","RawContent":null},{"Title":"Announcing .NET Core 3.0","PublishedOn":"2019-09-23T16:00:29+00:00","CommentsCount":99,"FacebookCount":0,"Summary":"Announcing .NET Core 3.0\nWe’re excited to announce the release of .NET Core 3.0. It includes many improvements, including adding Windows Forms and WPF, adding new JSON APIs, support for ARM64 and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/","RawContent":null},{"Title":"Release Candidate builds of Entity Framework Core 3.0 and Entity Framework 6.3 are now available","PublishedOn":"2019-09-16T21:47:32+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We previously said that preview 9 would be your last chance to test EF Core 3.0 and EF 6.3 before general availability. But it turns out that we made enough improvements to our libraries and across...","Href":"https://devblogs.microsoft.com/dotnet/release-candidate-builds-of-entity-framework-core-3-0-and-entity-framework-6-3-are-now-available/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Release Candidate 1","PublishedOn":"2019-09-16T18:45:09+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 3.0 Release Candidate 1. Just like with Preview 9, we&#8217;ve focused on polishing .NET Core 3.0 for a final release. We are now getting very, very close. We...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/","RawContent":null},{"Title":"Finalization implementation details","PublishedOn":"2019-09-16T17:43:41+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Years ago I wrote a document on making finalization scanning concurrent. At the time there was an internal team that was using finalization as a way to resurrect objects and putting them back in their...","Href":"https://devblogs.microsoft.com/dotnet/finalization-implementation-details/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10537155256","Type":"PullRequestEvent","CreatedAt":"2019-10-01T20:30:21","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Opened pull request \"Add new Cake Maintainer\" (#150) at dotnet/foundation","RelatedBody":""},{"Id":"10530380699","Type":"PullRequestEvent","CreatedAt":"2019-10-01T05:27:58","Actor":"JimBobSquarePants","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Opened pull request \"Add ImageSharp\" (#149) at dotnet/foundation","RelatedBody":""},{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10486020433","Type":"IssuesEvent","CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Opened issue \".NET Core `latest` Docker tags updated to 3.0\" (#124) at dotnet/announcements","RelatedBody":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n"},{"Id":"10427072993","Type":"IssuesEvent","CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Opened issue \".NET Core 3.0 RC 1\" (#123) at dotnet/announcements","RelatedBody":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"},{"Id":"10387173702","Type":"IssuesEvent","CreatedAt":"2019-09-10T17:23:27","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Opened issue \"September 2019 .NET Updates\" (#122) at dotnet/announcements","RelatedBody":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"10387041341","Type":"IssuesEvent","CreatedAt":"2019-09-10T17:04:51","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32971\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.7\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.8, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-09-10_\r\n"},{"Id":"10348207363","Type":"IssuesEvent","CreatedAt":"2019-09-04T19:14:06","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Opened issue \".NET Core 3.0 Preview 9\" (#120) at dotnet/announcements","RelatedBody":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n[EF Core](https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-9-and-entity-framework-6-3-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10547664119","Type":"IssuesEvent","CreatedAt":"2019-10-03T02:10:53","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27002","RelatedDescription":"Closed issue \"x64 Windows does not correctly handle __m128 returns.\" (#27002) at dotnet/coreclr","RelatedBody":"The default calling convention for x64 Windows specifies that `__m128`, `__m128i`, and `__m128d` are returned in XMM0: https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention?view=vs-2019#return-values\r\n\r\nThese types correspond to the `System.Runtime.Intrinsics.Vector128<T>` type on the managed side and it is not currently being returned in XMM0.\r\n\r\nhttps://github.com/dotnet/coreclr/pull/23899 adds support for passing `Vector128<T>` across interop boundaries and so this will need to be correctly handled."},{"Id":"10547659669","Type":"PullRequestEvent","CreatedAt":"2019-10-03T02:09:40","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27004","RelatedDescription":"Opened pull request \"Add ExceptionDispatchInfo.SetCurrentStackTrace\" (#27004) at dotnet/coreclr","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/19416\r\n\r\nTwo open questions from me as I was doing this tonight:\r\n1. Based on all of the places I ended up using this in corefx, it made the code much simpler to have SetCurrentStackTrace return the passed in instance.  @terrajobst, @bartonjs, any concerns with that from an API design perspective?\r\n2. I currently have the method checking/throwing if the Exception was previously thrown or if SetCurrentStackTrace was previously used, but I went back and forth on whether that was a good idea, and could be convinced otherwise.  Opinions?\r\n\r\ncc: @jkotas\r\n\r\nHere's an example of how this manifest.  This C# program:\r\n```C#\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Net.Sockets;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    public static async Task Main()\r\n    {\r\n        using Socket listener = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\r\n        listener.Bind(new IPEndPoint(IPAddress.Loopback, 0));\r\n        listener.Listen(1);\r\n\r\n        using Socket tmp = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\r\n        tmp.Connect(listener.LocalEndPoint);\r\n\r\n        using var c = new HttpClient();\r\n        var cts = new CancellationTokenSource();\r\n        Task<HttpResponseMessage> t = c.GetAsync(\"http://localhost:\" + ((IPEndPoint)listener.LocalEndPoint).Port, cts.Token);\r\n        await Task.Delay(1);\r\n        cts.Cancel();\r\n        await t;\r\n    }\r\n}\r\n```\r\nOn .NET Core 3.0, it outputs this:\r\n```\r\nUnhandled exception. System.Threading.Tasks.TaskCanceledException: The operation was canceled.\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at Program.Main() in c:\\Users\\stoub\\Desktop\\tmpapp\\Program.cs:line 25\r\n   at Program.<Main>()\r\n```\r\nWith this API and the corresponding changes in corefx, it now results in:\r\n```\r\nUnhandled exception. System.Threading.Tasks.TaskCanceledException: The operation was canceled.\r\n   at System.Environment.get_StackTrace()\r\n   at System.Net.Http.ConnectHelper.ConnectEventArgs.OnCompleted(SocketAsyncEventArgs _) in D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\ConnectHelper.cs:line 110\r\n   at System.Net.Sockets.SocketAsyncEventArgs.ExecutionCallback(Object state) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 423\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Net.Sockets.SocketAsyncEventArgs.FinishConnectByNameAsyncFailure(Exception exception, Int32 bytesTransferred, SocketFlags flags) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 648\r\n   at System.Net.Sockets.MultipleConnectAsync.AsyncFail(Exception e) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\MultipleConnectAsync.cs:line 338\r\n   at System.Net.Sockets.MultipleConnectAsync.InternalConnectCallback(Object sender, SocketAsyncEventArgs args) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\MultipleConnectAsync.cs:line 223\r\n   at System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(SocketAsyncEventArgs e) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 203\r\n   at System.Net.Sockets.SocketAsyncEventArgs.ExecutionCallback(Object state) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 423\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Net.Sockets.SocketAsyncEventArgs.FinishOperationAsyncFailure(SocketError socketError, Int32 bytesTransferred, SocketFlags flags) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 632\r\n   at System.Net.Sockets.SocketAsyncEventArgs.HandleCompletionPortCallbackError(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* nativeOverlapped) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.Windows.cs:line 1305\r\n   at System.Net.Sockets.SocketAsyncEventArgs.<>c.<.cctor>b__177_0(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* nativeOverlapped) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.Windows.cs:line 1267\r\n   at System.Threading.ThreadPoolBoundHandleOverlapped.CompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* nativeOverlapped)\r\n   at System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pNativeOverlapped)\r\n--- End of stack trace from previous location ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\ConnectHelper.cs:line 55\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken) in D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 625\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 665\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 331\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 523\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\RedirectHandler.cs:line 33\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\HttpClient.cs:line 521\r\n   at Program.Main() in d:\\CoreClrTest\\test.cs:line 25\r\n   at Program.<Main>()\r\n```\r\nwhich provides a lot more details about why this happened."},{"Id":"10547144130","Type":"PullRequestEvent","CreatedAt":"2019-10-02T23:49:30","Actor":"cshung","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27003","RelatedDescription":"Opened pull request \"[crossgen2] Handle Floor and Ceiling\" (#27003) at dotnet/coreclr","RelatedBody":"Fixes #26999"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10548358189","Type":"PullRequestEvent","CreatedAt":"2019-10-03T05:25:29","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12791","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#12791) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191002.24\r\n- **Date Produced**: 10/3/2019 3:42 AM\r\n- **Commit**: 58df33a9d497a5a68af81c33cdbcb31180613ea7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19502.24\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19502.24\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19502.24\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19502.24\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19502.24\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10548227078","Type":"PullRequestEvent","CreatedAt":"2019-10-03T04:50:14","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12791","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#12791) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191002.24\r\n- **Date Produced**: 10/3/2019 3:42 AM\r\n- **Commit**: 58df33a9d497a5a68af81c33cdbcb31180613ea7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19502.24\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19502.24\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19502.24\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19502.24\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19502.24\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10547855365","Type":"PullRequestEvent","CreatedAt":"2019-10-03T03:05:30","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12789","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#12789) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191002.20\r\n- **Date Produced**: 10/3/2019 1:11 AM\r\n- **Commit**: b3218cd12e968f539c95447da90608357ebda318\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19502.20\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19502.20\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19502.20\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19502.20\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19502.20\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10547768941","Type":"PullRequestEvent","CreatedAt":"2019-10-03T02:40:27","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12788","RelatedDescription":"Merged pull request \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12788) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191002.13\r\n- **Date Produced**: 10/3/2019 1:19 AM\r\n- **Commit**: cca42d9624e6adcff85c3865f1189032a202c2ed\r\n- **Branch**: refs/heads/release/3.1-preview1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview1.19502.13\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n"},{"Id":"10547732688","Type":"PullRequestEvent","CreatedAt":"2019-10-03T02:30:32","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12790","RelatedDescription":"Opened pull request \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12790) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191002.23\r\n- **Date Produced**: 10/3/2019 1:52 AM\r\n- **Commit**: d34d1570bfdf669ed94b4c939b2f39a1650e2320\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.0.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.1\r\n  - **Microsoft.NET.HostModel** -> 3.0.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.1\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n"},{"Id":"10547731651","Type":"PullRequestEvent","CreatedAt":"2019-10-03T02:30:15","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12789","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#12789) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191002.20\r\n- **Date Produced**: 10/3/2019 1:11 AM\r\n- **Commit**: b3218cd12e968f539c95447da90608357ebda318\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19502.20\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19502.20\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19502.20\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19502.20\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19502.20\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10547661758","Type":"PullRequestEvent","CreatedAt":"2019-10-03T02:10:14","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12788","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12788) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191002.13\r\n- **Date Produced**: 10/3/2019 1:19 AM\r\n- **Commit**: cca42d9624e6adcff85c3865f1189032a202c2ed\r\n- **Branch**: refs/heads/release/3.1-preview1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview1.19502.13\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10542122739","Type":"PullRequestEvent","CreatedAt":"2019-10-02T12:30:47","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1585","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1585) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191001.13\r\n- **Date Produced**: 10/2/2019 4:05 AM\r\n- **Commit**: dcc9f626eeb0751d4ba4499f623aac42d2e95c10\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19501.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19501.13\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19501.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10542049835","Type":"PullRequestEvent","CreatedAt":"2019-10-02T12:20:42","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1585","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1585) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191001.13\r\n- **Date Produced**: 10/2/2019 4:05 AM\r\n- **Commit**: dcc9f626eeb0751d4ba4499f623aac42d2e95c10\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19501.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19501.13\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19501.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10541987193","Type":"PullRequestEvent","CreatedAt":"2019-10-02T12:11:48","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1584","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1584) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191001.4\r\n- **Date Produced**: 10/1/2019 10:24 PM\r\n- **Commit**: c21a409f11386d22c6083198176868d3974de832\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19501.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10541917006","Type":"PullRequestEvent","CreatedAt":"2019-10-02T12:01:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1584","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1584) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191001.4\r\n- **Date Produced**: 10/1/2019 10:24 PM\r\n- **Commit**: c21a409f11386d22c6083198176868d3974de832\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19501.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10533166694","Type":"PullRequestEvent","CreatedAt":"2019-10-01T12:30:06","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1583","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1583) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190930.12\r\n- **Date Produced**: 10/1/2019 3:39 AM\r\n- **Commit**: 969ce665afee70b2d591e5c271525c927a8834d0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19480.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19480.12\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19480.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10533089812","Type":"PullRequestEvent","CreatedAt":"2019-10-01T12:20:00","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1583","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1583) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190930.12\r\n- **Date Produced**: 10/1/2019 3:39 AM\r\n- **Commit**: 969ce665afee70b2d591e5c271525c927a8834d0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19480.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19480.12\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19480.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10547857889","Type":"IssuesEvent","CreatedAt":"2019-10-03T03:06:14","Actor":"Connect-a","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/41388","RelatedDescription":"Closed issue \"System.DateTimeOffset Property - StartTimeOfDay\" (#41388) at dotnet/corefx","RelatedBody":"I would like to propose a new `StartTimeOfDay` property that contribute for readability.\r\n\r\n\r\ne.g.\r\n```\r\nprivate static void Main()\r\n{\r\n    var now = DateTimeOffset.Now;\r\n    var midnight = now - now.TimeOfDay;\r\n}\r\n```\r\nto\r\n```\r\nprivate static void Main()\r\n{\r\n    var midnight = DateTimeOffset.Now.StartTimeOfDay;\r\n}\r\n```\r\n\r\nI don't want to make extention methods in 'DateUtil' class."},{"Id":"10547662703","Type":"PullRequestEvent","CreatedAt":"2019-10-03T02:10:29","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/41514","RelatedDescription":"Opened pull request \"Expose, test, and use ExceptionDispatchInfo.SetCurrentStackTrace\" (#41514) at dotnet/corefx","RelatedBody":"Depends on https://github.com/dotnet/coreclr/pull/27004.\r\nFixes https://github.com/dotnet/corefx/issues/19416.\r\n\r\nI also need to tweak a couple of the projects that build for netstandard as well as netcoreapp."},{"Id":"10547481510","Type":"PullRequestEvent","CreatedAt":"2019-10-03T01:19:23","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/41495","RelatedDescription":"Merged pull request \"[System.Drawing.Common] Relax IconTests.CorrectColorDepthExtracted test\" (#41495) at dotnet/corefx","RelatedBody":"…to work on newer libgdiplus on Unix.\r\n\r\nRelated: https://github.com/mono/libgdiplus/pull/599\r\n\r\nlibgdiplus on Unix uses Cairo as the backend library for manipulating the bitmaps. Unfortunately Cairo has very limited support for different pixel formats. Thus the ARGB32 format has to be emulated using the PARGB32 format (individual channels are premultiplied with the alpha value). This may result in slight loss of precision and rounding errors when converting between the formats back and forth. Adjust the tests to be more forgiving for this scenario.\r\n\r\nNote that it worked on older libgdiplus only because there was couple of bugs that were canceling itself out. Cairo surfaces were often created with the non-premultiplied ARGB32 data and drawing operations performed on them resulted in the alpha channel not being applied correctly."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10548272721","Type":"PullRequestEvent","CreatedAt":"2019-10-03T05:02:32","Actor":"RikkiGibson","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39008","RelatedDescription":"Closed pull request \"Revert \"Use new Span/Memory APIs on System.Collections.Immutable\"\" (#39008) at dotnet/roslyn","RelatedBody":"Reverts dotnet/roslyn#38809\r\n\r\nGetting VS to be happy with the new System.Collections.Immutable version is proving pretty tricky, so we are gonna have this PR here in case we need to flow it in to get a working insertion."},{"Id":"10548271331","Type":"IssuesEvent","CreatedAt":"2019-10-03T05:02:11","Actor":"RikkiGibson","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/39017","RelatedDescription":"Opened issue \"Update System.Collections.Immutable to 1.2.4.0 in VS\" (#39017) at dotnet/roslyn","RelatedBody":"#38809 updated System.Collections.Immutable to take advantage of new API but had to be reverted due to issues integrating into VS.\r\n\r\nAt this point, we get type load exceptions in test runs. It's possible that some more projects in VS need to have binding redirects added. Once we get that figured out by making a test insertion in a dev branch we can recreate #38809 and pull into master again.\r\n\r\n/cc @agocke @tmat @ryzngard"},{"Id":"10547617521","Type":"PullRequestEvent","CreatedAt":"2019-10-03T01:57:56","Actor":"RikkiGibson","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39016","RelatedDescription":"Opened pull request \"Update config for snap\" (#39016) at dotnet/roslyn","RelatedBody":"Updates publish data and version for 16.4-p3 snap. Merge after we have everything we need merged for a good signed build out of master-vs-deps."},{"Id":"10547352439","Type":"PullRequestEvent","CreatedAt":"2019-10-03T00:43:39","Actor":"dibarbet","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39015","RelatedDescription":"Opened pull request \"Track local telemetry during remote LSP experimentation for comparison.\" (#39015) at dotnet/roslyn","RelatedBody":"track local telemetry for syntax classifications during LSP guest session.  the idea here is that walking the tree is fast, longest operation is actually building it, so that's the best comparison to make"},{"Id":"10547332198","Type":"IssuesEvent","CreatedAt":"2019-10-03T00:38:05","Actor":"akiraKido","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/38993","RelatedDescription":"Closed issue \"Pattern matching: override deconstruct\" (#38993) at dotnet/roslyn","RelatedBody":"I'm not sure if this is the right place for this issue. If it is inappropriate for this repository, I would be thankful if you could direct me to a more suitable repository. Thank you in advance.\r\n\r\n---\r\n\r\nFor pattern matching, I'd like to deconstruct a certain struct I made as follows:\r\n\r\n\tpublic struct Result<T>\r\n\t{\r\n\t\tpublic readonly bool IsSuccess;\r\n\t\tpublic readonly T Value;\r\n\t\tpublic readonly string? Message;\r\n\r\n\t\tprivate Result(bool success, T value, string? message) =>\r\n\t\t\t(IsSuccess, Value, Message) = (success, value, message);\r\n\r\n\t\tpublic void Deconstruct(out bool success, out T value, out string? message) =>\r\n\t\t\t(success, value, message) = (IsSuccess, Value, Message);\r\n\r\n\t\tpublic void Deconstruct(out bool success, out string? message) =>\r\n\t\t\t(success, message) = (IsSuccess, Message);\r\n\t\tpublic void Deconstruct(out bool success, out T value) =>\r\n\t\t\t(success, value) = (IsSuccess, Value);\r\n\r\n\r\n\t\tpublic static Result<T> Fail(string message) => new Result<T>(false, default, message);\r\n\t\tpublic static Result<T> Success(T value) => new Result<T>(true, value, null);\r\n\t}\r\n\r\nso that I would be able to do something like this:\r\n\r\n\tswitch (TryGetValue(ref input, ref length))\r\n\t{\r\n\t\tcase (false, string e):\r\n\t\t\treturn Result<JsonNode>.Fail(e);\r\n\t\tcase (true, JsonNode value):\r\n\t\t\tvalues.Add(value);\r\n\t\t\tbreak;\r\n\t}\r\n\r\nThis currently doesn't compile, saying that the deconstruction is ambiguous, despite explicitly declaring their types.\r\n\r\nThis works:\r\n\r\n\tswitch (TryGetValue(ref input, ref length))\r\n\t{\r\n\t\tcase (false, _, var e):\r\n\t\t\treturn Result<JsonNode>.Fail(e);\r\n\t\tcase (true, var value, _):\r\n\t\t\tvalues.Add(value);\r\n\t\t\tbreak;\r\n\t}\r\n\r\nbut the `_` seems verbose to me."},{"Id":"10547270575","Type":"PullRequestEvent","CreatedAt":"2019-10-03T00:21:48","Actor":"JoeRobich","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39014","RelatedDescription":"Opened pull request \"Enable warnAsError for correctness builds\" (#39014) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10545294245","Type":"IssuesEvent","CreatedAt":"2019-10-02T18:48:53","Actor":"RalfKornmannEnvision","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7807","RelatedDescription":"Opened issue \"GC thread suspension\" (#7807) at dotnet/corert","RelatedBody":"Maybe I just got something wrong here and I am looking at the wrong place.\r\n\r\nMy somewhat bigger test code finally runs stable for hours on my ARM64 system without trashing the heap or consuming all the physical memory. But so far it was only a single thread console application. For my use case I would need some threads.\r\n\r\nAs expected the GC need to suspend all managed threads to do a collection. For Windows there is some hijack code but the function for unix only contains a todo. I assume the reason for this is that the necessary os functions are missing. My target system has the same issue as I cannot suspend and resume threads there. As .net core should have the same issue on other posix systems I checked there and noticed that the jit engine has an option to inject gc probes. I assume that this is the only way to get the GC working in a multi thread environment were hijacking is not possible. Or did I missed something?\r\n\r\nIn the case I am right a short check showed me that the ilcompiler doesn't support the flags and callbacks for this yet?\r\n\r\nDo I need to add this to get the GC working with multiple threads or have I looked at the wrong place?\r\n\r\nIf this the right place does it make any sense to aim for the inline version of the gc probe or can this never work with corert and the call variant is the only solution? I already checked the code and noticed that even if the inline variant can work the call needs still be implemented as it is used in more complicated cases."},{"Id":"10536464864","Type":"PullRequestEvent","CreatedAt":"2019-10-01T18:56:38","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7806","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7806) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding"},{"Id":"10535375779","Type":"PullRequestEvent","CreatedAt":"2019-10-01T16:34:32","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7806","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7806) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10534787799","Type":"PullRequestEvent","CreatedAt":"2019-10-01T15:25:51","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7805","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7805) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @adamsitnik"},{"Id":"10530160563","Type":"PullRequestEvent","CreatedAt":"2019-10-01T04:31:35","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7805","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7805) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10530126394","Type":"PullRequestEvent","CreatedAt":"2019-10-01T04:22:32","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7804","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7804) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @Youssef1313 @safern"},{"Id":"10526521641","Type":"PullRequestEvent","CreatedAt":"2019-09-30T17:16:45","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7804","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7804) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"10518899776","Type":"PullRequestEvent","CreatedAt":"2019-09-29T14:16:15","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7803","RelatedDescription":"Merged pull request \"Delete ReadyToRun portions of the compiler and test tree\" (#7803) at dotnet/corert","RelatedBody":"The development of the ReadyToRun compiler moved to the CoreCLR repo. Keeping the sources here is just making it harder to keep the repos in sync.\r\n\r\nDeleting the testing speeds up the CI considerably."},{"Id":"10518592188","Type":"PullRequestEvent","CreatedAt":"2019-09-29T11:59:49","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7803","RelatedDescription":"Opened pull request \"Delete ReadyToRun portions of the compiler and test tree\" (#7803) at dotnet/corert","RelatedBody":"The development of the ReadyToRun compiler moved to the CoreCLR repo. Keeping the sources here is just making it harder to keep the repos in sync.\r\n\r\nDeleting the testing speeds up the CI considerably."},{"Id":"10518589270","Type":"PullRequestEvent","CreatedAt":"2019-09-29T11:58:37","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7802","RelatedDescription":"Merged pull request \"Fix Windows debug information for classes\" (#7802) at dotnet/corert","RelatedBody":"Fixes a longstanding issue where we were emitting erroneous vfptr debug entries and incorrectly mangling class names. One could only inspect things as they were statically typed in the source (so if a variable was typed as `object` in the sources, you wouldn't see any fields in the native debugger, no matter what was assigned to it).\r\n\r\nIt wasn't too terrible, so I sort of just lived with it, but this should work.\r\n\r\nWith this, casting to base classes in the debugger works.\r\n\r\n## Before\r\n\r\n![before](https://user-images.githubusercontent.com/13110571/65817093-98550a00-e203-11e9-88ce-efd8109ae303.gif)\r\n\r\n\r\n## After\r\n\r\n![after](https://user-images.githubusercontent.com/13110571/65817095-9d19be00-e203-11e9-9ec7-73ffe4587b62.gif)\r\n"},{"Id":"10516712604","Type":"PullRequestEvent","CreatedAt":"2019-09-28T19:35:07","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7667","RelatedDescription":"Merged pull request \"Add a doc on debugging CoreRT programs\" (#7667) at dotnet/corert","RelatedBody":"A couple useful tips."},{"Id":"10515879419","Type":"PullRequestEvent","CreatedAt":"2019-09-28T13:26:50","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7802","RelatedDescription":"Opened pull request \"Fix Windows debug information for classes\" (#7802) at dotnet/corert","RelatedBody":"Fixes a longstanding issue where we were emitting erroneous vfptr debug entries and incorrectly mangling class names. One could only inspect things as they were statically typed in the source (so if a variable was typed as `object` in the sources, you wouldn't see any fields in the native debugger, no matter what was assigned to it).\r\n\r\nIt wasn't too terrible, so I sort of just lived with it, but this should work.\r\n\r\nWith this, casting to base classes in the debugger works.\r\n\r\n## Before\r\n\r\n![before](https://user-images.githubusercontent.com/13110571/65817093-98550a00-e203-11e9-88ce-efd8109ae303.gif)\r\n\r\n\r\n## After\r\n\r\n![after](https://user-images.githubusercontent.com/13110571/65817095-9d19be00-e203-11e9-9ec7-73ffe4587b62.gif)\r\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10547926713","Type":"IssuesEvent","CreatedAt":"2019-10-03T03:26:51","Actor":"EatonZ","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3707","RelatedDescription":"Opened issue \"PreBuild event/target runs twice - during Build and Publish\" (#3707) at dotnet/sdk","RelatedBody":"**Visual Studio Version**: 16.3.1\r\n\r\n**Summary / Steps to Reproduce / Behavior**:\r\nI have a .NET Core 3.0 WinForms application and I have added a prebuild event to my project. It gets added to the csproj like this:\r\n```\r\n<Target Name=\"PreBuild\" BeforeTargets=\"PreBuildEvent\">\r\n  <Exec Command=\"$(ProjectDir)PreBuildTasks.exe\" />\r\n</Target>\r\n```\r\nIt basically launches my prebuild exe, which does a few things, like increment the version in AssemblyInfo. This has always worked fine until I started experimenting with .NET Core and publishing.\r\n\r\nFor context, I am going to add this right before the `Exec Command`:\r\n`<Message Importance=\"high\" Text=\"This is a message\" />`\r\n\r\nWhen I publish the project (right click project, Publish), this is what I see:\r\n![2019-10-01_1-25-35](https://user-images.githubusercontent.com/3020941/65936781-cac15b80-e3eb-11e9-93cf-d41efb6adc93.png)\r\n\r\nIt's clear the prebuild task is running twice. I spent a while researching a way to resolve this problem. The closest solution I found was [this](https://developercommunity.visualstudio.com/content/problem/30395/aspnet-publish-process-runs-build-3-times.html). I added `Condition=\"'$(DeployOnBuild)' != 'true'\"` as directed, but unfortunately it did not do anything. The other solution in that thread says the issue is fixed, so what is happening here?\r\n\r\nThis behavior may be by design, but I decided to open this issue in case it is not, and because I'd like some guidance on the correct way to solve this problem if I am going at this the wrong way. I only want my prebuild task to run on **Build**, not **Publish**."},{"Id":"10546748372","Type":"IssuesEvent","CreatedAt":"2019-10-02T22:23:15","Actor":"DamianEdwards","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3706","RelatedDescription":"Opened issue \"Support ability for FrameworkReference to import analyzers\" (#3706) at dotnet/sdk","RelatedBody":"Request came out of https://github.com/aspnet/AspNetCore/issues/14675\r\n\r\nASP.NET Core app projects today target the Web SDK which auto-imports a set of \"default\" analyzers. There are scenarios however where parts of an ASP.NET Core app are split into class libraries and then referenced from the main app project, but these class libraries use the base SDK, and manually add a `<FrameworkReference Include=\"Microsoft.AspNetCore.App\" />` to indicate their reliance on ASP.NET Core features. This, however, results in none of the default analyzers. And given the analyzers are only available via the Web SDK (they literally ship only as part of it) there is no first-class way to enable them.\r\n\r\nThe proposal here is to allow the base SDK to support a `FrameworkReference` declaring it also imports some analyzers, so that class libraries can use them."},{"Id":"10546645217","Type":"PullRequestEvent","CreatedAt":"2019-10-02T22:03:31","Actor":"tlakollo","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3705","RelatedDescription":"Opened pull request \"Improve Error Experience\" (#3705) at dotnet/sdk","RelatedBody":"As part of the improve error experience linker issue (see issue https://github.com/mono/linker/issues/653) we find out that an additional flag was needed in order to print warning messages.\r\nThis change mades possible for the linker to print valuable information like warnings when an assembly is unresolved and is going to be skipped. Likely this feature could also work to warning the user when it's using patterns that could break their application."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"501128777","IsPullRequest":true,"CreatedAt":"2019-10-01T20:30:20","Actor":"gep13","Number":"150","RawContent":null,"Title":"Add new Cake Maintainer","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Open PR \"Add new Cake Maintainer\" (#150)"},{"Id":"500670461","IsPullRequest":true,"CreatedAt":"2019-10-01T05:27:58","Actor":"JimBobSquarePants","Number":"149","RawContent":null,"Title":"Add ImageSharp","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Open PR \"Add ImageSharp\" (#149)"},{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"501750359","IsPullRequest":false,"CreatedAt":"2019-10-03T02:10:53","Actor":"tannergooding","Number":"27002","RawContent":null,"Title":"x64 Windows does not correctly handle __m128 returns.","State":"closed","Body":"The default calling convention for x64 Windows specifies that `__m128`, `__m128i`, and `__m128d` are returned in XMM0: https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention?view=vs-2019#return-values\r\n\r\nThese types correspond to the `System.Runtime.Intrinsics.Vector128<T>` type on the managed side and it is not currently being returned in XMM0.\r\n\r\nhttps://github.com/dotnet/coreclr/pull/23899 adds support for passing `Vector128<T>` across interop boundaries and so this will need to be correctly handled.","Url":"https://github.com/dotnet/coreclr/issues/27002","RelatedDescription":"Closed issue \"x64 Windows does not correctly handle __m128 returns.\" (#27002)"},{"Id":"501813093","IsPullRequest":true,"CreatedAt":"2019-10-03T02:09:39","Actor":"stephentoub","Number":"27004","RawContent":null,"Title":"Add ExceptionDispatchInfo.SetCurrentStackTrace","State":"open","Body":"Contributes to https://github.com/dotnet/corefx/issues/19416\r\n\r\nTwo open questions from me as I was doing this tonight:\r\n1. Based on all of the places I ended up using this in corefx in https://github.com/dotnet/corefx/pull/41514, it made the code much simpler to have SetCurrentStackTrace return the passed in instance.  @terrajobst, @bartonjs, any concerns with that from an API design perspective?\r\n2. I currently have the method checking/throwing if the Exception was previously thrown or if SetCurrentStackTrace was previously used, but I went back and forth on whether that was a good idea, and could be convinced otherwise.  Opinions?\r\n\r\ncc: @jkotas\r\n\r\nHere's an example of how this manifest.  This C# program:\r\n```C#\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Net.Sockets;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    public static async Task Main()\r\n    {\r\n        using Socket listener = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\r\n        listener.Bind(new IPEndPoint(IPAddress.Loopback, 0));\r\n        listener.Listen(1);\r\n\r\n        using Socket tmp = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\r\n        tmp.Connect(listener.LocalEndPoint);\r\n\r\n        using var c = new HttpClient();\r\n        var cts = new CancellationTokenSource();\r\n        Task<HttpResponseMessage> t = c.GetAsync(\"http://localhost:\" + ((IPEndPoint)listener.LocalEndPoint).Port, cts.Token);\r\n        await Task.Delay(1);\r\n        cts.Cancel();\r\n        await t;\r\n    }\r\n}\r\n```\r\nOn .NET Core 3.0, it outputs this:\r\n```\r\nUnhandled exception. System.Threading.Tasks.TaskCanceledException: The operation was canceled.\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at Program.Main() in c:\\Users\\stoub\\Desktop\\tmpapp\\Program.cs:line 25\r\n   at Program.<Main>()\r\n```\r\nWith this API and the corresponding changes in corefx, it now results in:\r\n```\r\nUnhandled exception. System.Threading.Tasks.TaskCanceledException: The operation was canceled.\r\n   at System.Environment.get_StackTrace()\r\n   at System.Net.Http.ConnectHelper.ConnectEventArgs.OnCompleted(SocketAsyncEventArgs _) in D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\ConnectHelper.cs:line 110\r\n   at System.Net.Sockets.SocketAsyncEventArgs.ExecutionCallback(Object state) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 423\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Net.Sockets.SocketAsyncEventArgs.FinishConnectByNameAsyncFailure(Exception exception, Int32 bytesTransferred, SocketFlags flags) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 648\r\n   at System.Net.Sockets.MultipleConnectAsync.AsyncFail(Exception e) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\MultipleConnectAsync.cs:line 338\r\n   at System.Net.Sockets.MultipleConnectAsync.InternalConnectCallback(Object sender, SocketAsyncEventArgs args) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\MultipleConnectAsync.cs:line 223\r\n   at System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(SocketAsyncEventArgs e) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 203\r\n   at System.Net.Sockets.SocketAsyncEventArgs.ExecutionCallback(Object state) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 423\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Net.Sockets.SocketAsyncEventArgs.FinishOperationAsyncFailure(SocketError socketError, Int32 bytesTransferred, SocketFlags flags) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 632\r\n   at System.Net.Sockets.SocketAsyncEventArgs.HandleCompletionPortCallbackError(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* nativeOverlapped) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.Windows.cs:line 1305\r\n   at System.Net.Sockets.SocketAsyncEventArgs.<>c.<.cctor>b__177_0(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* nativeOverlapped) in D:\\repos\\corefx\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.Windows.cs:line 1267\r\n   at System.Threading.ThreadPoolBoundHandleOverlapped.CompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* nativeOverlapped)\r\n   at System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pNativeOverlapped)\r\n--- End of stack trace from previous location ---\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\ConnectHelper.cs:line 55\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken) in D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 625\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 665\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 331\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 523\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\RedirectHandler.cs:line 33\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in D:\\repos\\corefx\\src\\System.Net.Http\\src\\System\\Net\\Http\\HttpClient.cs:line 521\r\n   at Program.Main() in d:\\CoreClrTest\\test.cs:line 25\r\n   at Program.<Main>()\r\n```\r\nwhich provides a lot more details about why this happened.","Url":"https://github.com/dotnet/coreclr/pull/27004","RelatedDescription":"Open PR \"Add ExceptionDispatchInfo.SetCurrentStackTrace\" (#27004)"},{"Id":"501780778","IsPullRequest":true,"CreatedAt":"2019-10-02T23:49:29","Actor":"cshung","Number":"27003","RawContent":null,"Title":"[crossgen2] Handle Floor and Ceiling","State":"open","Body":"Fixes #26999\r\n\r\n@dotnet/crossgen-contrib","Url":"https://github.com/dotnet/coreclr/pull/27003","RelatedDescription":"Open PR \"[crossgen2] Handle Floor and Ceiling\" (#27003)"},{"Id":"501587914","IsPullRequest":true,"CreatedAt":"2019-10-02T21:08:44","Actor":"idlerboris","Number":"26992","RawContent":null,"Title":"Improve TimeSpan precision","State":"closed","Body":"Fixes [dotnet/corefx#41380](https://github.com/dotnet/corefx/issues/41380)\r\n\r\nRelated corefx PR [dotnet/coreclr#41499](https://github.com/dotnet/corefx/pull/41499)\r\n\r\nChange multiplying by (x * (1.0 / BigValue)) on (x / BigValue).\r\n","Url":"https://github.com/dotnet/coreclr/pull/26992","RelatedDescription":"Closed or merged PR \"Improve TimeSpan precision\" (#26992)"},{"Id":"501205731","IsPullRequest":true,"CreatedAt":"2019-10-02T21:04:52","Actor":"SrivastavaAnubhav","Number":"26981","RawContent":null,"Title":"Change PerfEventSource to be able to use 'using'.","State":"closed","Body":"Create StartStopEvent struct in the two PerfEventCourse.cs files to ensure that stop events are always emitted when we expect them.\r\n","Url":"https://github.com/dotnet/coreclr/pull/26981","RelatedDescription":"Closed or merged PR \"Change PerfEventSource to be able to use 'using'.\" (#26981)"},{"Id":"501184790","IsPullRequest":true,"CreatedAt":"2019-10-02T19:32:43","Actor":"trylek","Number":"26978","RawContent":null,"Title":"More SuperIlc changes to enable its use in CoreCLR CI pipelines","State":"closed","Body":"1) Support for explicit specification of Crossgen path needed for\r\ncross-targeting scenarios;\r\n\r\n2) Make Corelib exclusion Crossgen2-specific to avoid regressing\r\nlegacy Crossgen testing;\r\n\r\n3) Make SuperIlc \"AnyCPU\" so that it can run on ARM.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/coreclr/pull/26978","RelatedDescription":"Closed or merged PR \"More SuperIlc changes to enable its use in CoreCLR CI pipelines\" (#26978)"},{"Id":"501170201","IsPullRequest":true,"CreatedAt":"2019-10-02T19:06:21","Actor":"franksinankaya","Number":"26975","RawContent":null,"Title":"Replace lvOtherArgReg with GetOtherArg()","State":"closed","Body":"@am11 @jkotas @janvorli @sandreenko ","Url":"https://github.com/dotnet/coreclr/pull/26975","RelatedDescription":"Closed or merged PR \"Replace lvOtherArgReg with GetOtherArg()\" (#26975)"},{"Id":"501664685","IsPullRequest":true,"CreatedAt":"2019-10-02T18:52:28","Actor":"chipitsine","Number":"27001","RawContent":null,"Title":"cleanup: remove several redundant conditions found by cppcheck","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27001","RelatedDescription":"Open PR \"cleanup: remove several redundant conditions found by cppcheck\" (#27001)"},{"Id":"501650977","IsPullRequest":false,"CreatedAt":"2019-10-02T18:24:32","Actor":"cshung","Number":"27000","RawContent":null,"Title":"[crossgen2] Making sure Vector64/128/256 are not generated unless CoreLib is part of the version bubble","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/issues/27000","RelatedDescription":"Open issue \"[crossgen2] Making sure Vector64/128/256 are not generated unless CoreLib is part of the version bubble\" (#27000)"},{"Id":"501211567","IsPullRequest":true,"CreatedAt":"2019-10-02T18:22:20","Actor":"cshung","Number":"26982","RawContent":null,"Title":"[CPAOT] Generating code for hardware intrinsic (#26772)","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26982","RelatedDescription":"Closed or merged PR \"[CPAOT] Generating code for hardware intrinsic (#26772)\" (#26982)"},{"Id":"501648292","IsPullRequest":false,"CreatedAt":"2019-10-02T18:18:59","Actor":"cshung","Number":"26999","RawContent":null,"Title":"[crossgen2] Handle Floor and Ceiling","State":"open","Body":"https://github.com/dotnet/coreclr/pull/26982#discussion_r330444620","Url":"https://github.com/dotnet/coreclr/issues/26999","RelatedDescription":"Open issue \"[crossgen2] Handle Floor and Ceiling\" (#26999)"},{"Id":"501647673","IsPullRequest":false,"CreatedAt":"2019-10-02T18:17:43","Actor":"cshung","Number":"26998","RawContent":null,"Title":"[crossgen2] Make sure hardware intrinsic are generated for CoreLib only","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/issues/26998","RelatedDescription":"Open issue \"[crossgen2] Make sure hardware intrinsic are generated for CoreLib only\" (#26998)"},{"Id":"501647408","IsPullRequest":true,"CreatedAt":"2019-10-02T18:17:10","Actor":"fadimounir","Number":"26997","RawContent":null,"Title":"Fix read ordering bug between buckets pointer and counter","State":"open","Body":"Fixes #26870 where there is a read ordering issue on this line:\r\n``` c++\r\n    // Point at the first entry in the bucket chain which would contain any entries with the given hash code.\r\n    PTR_VolatileEntry pEntry = (GetWarmBuckets())[iHash % m_cWarmBuckets];\r\n```\r\n\r\nI confirmed the fix should work by comparing the disasm. The buckets pointer is read after `m_cWarmBuckets` is read and the division executed:\r\n\r\nBefore:\r\n``` asm\r\n  353 1008b9ba 8b4e08          mov     ecx,dword ptr [esi+8]\r\n  353 1008b9bd 33d2            xor     edx,edx\r\n  353 1008b9bf 8bc3            mov     eax,ebx\r\n  353 1008b9c1 f7760c          div     eax,dword ptr [esi+0Ch]\r\n  353 1008b9c4 8b3c91          mov     edi,dword ptr [ecx+edx*4]\r\n  353 1008b9c7 85ff            test    edi,edi\r\n```\r\n\r\nAfter:\r\n``` asm\r\n  353 10086dea 8bc3            mov     eax,ebx\r\n  353 10086dec 33d2            xor     edx,edx\r\n  353 10086dee f7710c          div     eax,dword ptr [ecx+0Ch]\r\n  353 10086df1 8b4108          mov     eax,dword ptr [ecx+8]\r\n  353 10086df4 8b3c90          mov     edi,dword ptr [eax+edx*4]\r\n  353 10086df7 85ff            test    edi,edi\r\n```\r\n\r\nBased on a conversation with @janvorli, a memory barrier could also help, but would be an overkill. The instruction ordering is a good enough guarantee here, especially that there is another place in the code with a similar pattern that never crashed:\r\n``` c++\r\n    // Compute which bucket the entry belongs in based on the hash.\r\n    DWORD dwBucket = iHash % m_cWarmBuckets;\r\n\r\n    // Prepare to link the new entry at the head of the bucket chain.\r\n    pVolatileEntry->m_pNextEntry = (GetWarmBuckets())[dwBucket];\r\n```\r\n\r\nI'll also run the repro on a dedicated machine for a few 1000's of iterations to make sure it doesn't crash. This is a dedicated machine where I was able to get it to crash before.","Url":"https://github.com/dotnet/coreclr/pull/26997","RelatedDescription":"Open PR \"Fix read ordering bug between buckets pointer and counter\" (#26997)"},{"Id":"501632817","IsPullRequest":false,"CreatedAt":"2019-10-02T17:46:00","Actor":"BruceForstall","Number":"26996","RawContent":null,"Title":"Implement stack probing using helper for arm32/arm64","State":"open","Body":"x86/x64 was implemented with https://github.com/dotnet/coreclr/pull/26807. This issue tracks doing the work to implement it for arm32/arm64.\r\n\r\nThis would provide consistency in implementation, simplicity in the JIT stack probing implementation, as well as provide the benefits of stack probing exception stack traces for arm32/arm64.\r\n\r\nRelated: https://github.com/dotnet/coreclr/issues/21061\r\n","Url":"https://github.com/dotnet/coreclr/issues/26996","RelatedDescription":"Open issue \"Implement stack probing using helper for arm32/arm64\" (#26996)"},{"Id":"501597529","IsPullRequest":false,"CreatedAt":"2019-10-02T16:30:14","Actor":"stephentoub","Number":"26995","RawContent":null,"Title":"GetIsDaylightSavingsFromUtc method doing buggy ambiguous check","State":"open","Body":"https://github.com/dotnet/coreclr/blob/5b1c001bc0fb5bb1ce035c02ec275763f66defc8/src/System.Private.CoreLib/shared/System/TimeZoneInfo.cs#L1460-L1462\r\n\r\nIt's storing augmented start and end years into locals that are then never used, and is followed by a range check using the original values rather than the modified values... and this range check was already performed.  The same issue appears again below it.\r\n\r\nNot entirely sure what the code is supposed to be doing, but something is off here.","Url":"https://github.com/dotnet/coreclr/issues/26995","RelatedDescription":"Open issue \"GetIsDaylightSavingsFromUtc method doing buggy ambiguous check\" (#26995)"},{"Id":"501596129","IsPullRequest":true,"CreatedAt":"2019-10-02T16:27:27","Actor":"stephentoub","Number":"26994","RawContent":null,"Title":"Fix stackalloc reuse bug in Environment.UserDomainName","State":"open","Body":"According to the comment, this code is never expected to be used (so it should either be deleted or the comment fixed), but in the meantime, if it were to be executed, things could go badly due to potentially passing the same buffer into LookupAccountNameW for two different arguments.","Url":"https://github.com/dotnet/coreclr/pull/26994","RelatedDescription":"Open PR \"Fix stackalloc reuse bug in Environment.UserDomainName\" (#26994)"},{"Id":"501595025","IsPullRequest":true,"CreatedAt":"2019-10-02T16:25:23","Actor":"stephentoub","Number":"26993","RawContent":null,"Title":"More corelib cleanup","State":"open","Body":"Went through a bunch of SonarAnalyzer.CSharp rules.","Url":"https://github.com/dotnet/coreclr/pull/26993","RelatedDescription":"Open PR \"More corelib cleanup\" (#26993)"},{"Id":"501459097","IsPullRequest":true,"CreatedAt":"2019-10-02T15:52:49","Actor":"MichalStrehovsky","Number":"26987","RawContent":null,"Title":"Fix assert while compiling CoreLib with optimizations","State":"closed","Body":"The thing that lead to the assert was the fact that we reported a containing type for an RVA static field as not being preinitialized.\r\n\r\nThe `!field.HasRva` is the bugfix. `!field.IsThreadStatic` is just something that we also should do to match crossgen.","Url":"https://github.com/dotnet/coreclr/pull/26987","RelatedDescription":"Closed or merged PR \"Fix assert while compiling CoreLib with optimizations\" (#26987)"},{"Id":"501577000","IsPullRequest":true,"CreatedAt":"2019-10-02T15:52:15","Actor":"MichalStrehovsky","Number":"26991","RawContent":null,"Title":"Try to pregenerate canonical method bodies","State":"open","Body":"Instantiate both generic types and generic methods over `__Canon` if possible.","Url":"https://github.com/dotnet/coreclr/pull/26991","RelatedDescription":"Open PR \"Try to pregenerate canonical method bodies\" (#26991)"},{"Id":"501517169","IsPullRequest":false,"CreatedAt":"2019-10-02T14:14:45","Actor":"GPSnoopy","Number":"26990","RawContent":null,"Title":"Changing process affinity from 1 to N cores causes memory corruption and deadlocks","State":"open","Body":"**To reproduce the problem**\r\n- Launch a process with its initial thread affinity pinned to 1 core.\r\n- Process unpins itself from 1 core to multiple cores.\r\n- Process runs several asynchronous Tasks.\r\n- Process will randomly experience memory corruption (including deadlocks and spurious exceptions).\r\n\r\nWe suspect the problem has been introduced in .NET 4.8 as well as .NET Core 2.1 (or earlier).\r\n\r\n**Notes**\r\n- Confirmed to happen on Windows 7, Windows 10.\r\n- Confirmed to happen on .NET Framework 4.8, .NET Core 2.1, .NET Core 3.0.\r\n- Confirmed not to happen on .NET Framework 4.7 (as long as .NET Framework 4.8 has not been installed on the machine).\r\n- The more tasks are started, the more likely it will go wrong.\r\n- Setting initial affinity to 0x0001 (rather than 0x0002) fails to reproduce the problem.\r\n- Subsequent affinity needs to be any number of cores other than 1 (0x0FFF being used here as the test machine had 12 cores, you will need to switch to a smaller mask if your machine has less cores).\r\n\r\n**How come we are doing this**\r\nWhen submitting a job to our internal compute farm, its process gets assigned to the specific CPU cores allocated for the job to run on. Most jobs only request one CPU core, therefore their affinity mask gets set to one core.\r\n\r\nIn the case of our GPU compute farm, the CPUs are not the limiting resource. Instead we want to pin the process to the CPU cores closest to the GPU we've been assigned to. Because our farm scheduler does not seem to be able to understand the complexity of GPU and NUMA node topologies., we apply the logic above once the job has started from within the job process itself.","Url":"https://github.com/dotnet/coreclr/issues/26990","RelatedDescription":"Open issue \"Changing process affinity from 1 to N cores causes memory corruption and deadlocks\" (#26990)"},{"Id":"501501521","IsPullRequest":false,"CreatedAt":"2019-10-02T13:48:55","Actor":"NextTurn","Number":"26989","RawContent":null,"Title":"Question about GCC fastcall convention","State":"open","Body":"https://github.com/dotnet/coreclr/blob/ce66024ba7d60fc7bb72d5b780e395bd9d11719e/src/vm/fcall.h#L381-L382\r\n\r\nI don't understand this comment. I looked into the GCC sources and found that the fastcall convention uses EDX and ECX for parameters (and EAX only for the static chain pointer). Under what circumstances will GCC pass the parameter in EAX?","Url":"https://github.com/dotnet/coreclr/issues/26989","RelatedDescription":"Open issue \"Question about GCC fastcall convention\" (#26989)"},{"Id":"501481413","IsPullRequest":false,"CreatedAt":"2019-10-02T13:14:32","Actor":"EgorBo","Number":"26988","RawContent":null,"Title":"double.IsNaN submoptimal codegen for constants","State":"open","Body":"I have some IsNaN checks in my code and I expected JIT to remove them if I use a compile-time constants, e.g.\r\n```csharp\r\n[MethodImpl(MethodImplOptions.AggressiveOptimization)]\r\nstatic bool Test()\r\n{\r\n    return double.IsNaN(5);\r\n}\r\n```\r\nCurrently generates:\r\n```asm\r\nG_M30276_IG01:\r\n       push     rax\r\n       vzeroupper \r\n\r\nG_M30276_IG02:\r\n       vmovsd   xmm0, qword ptr [reloc @RWD00]\r\n       vmovsd   qword ptr [rsp], xmm0\r\n       mov      rax, qword ptr [rsp]\r\n       mov      rdx, 0xD1FFAB1E\r\n       and      rax, rdx\r\n       mov      rdx, 0xD1FFAB1E\r\n       cmp      rax, rdx\r\n       setg     al\r\n       movzx    rax, al\r\n\r\nG_M30276_IG03:\r\n       add      rsp, 8\r\n       ret      \r\nRWD00  dq\t4014000000000000h\r\n; Total bytes of code: 58\r\n```\r\nDespite the fact double.IsNaN is inlineable and pretty simple.\r\nSo I expected it to be just:\r\n```asm\r\n       mov      eax, 1\r\n       retu\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26988","RelatedDescription":"Open issue \"double.IsNaN submoptimal codegen for constants\" (#26988)"},{"Id":"501413913","IsPullRequest":true,"CreatedAt":"2019-10-02T10:46:50","Actor":"AndyAyersMS","Number":"26986","RawContent":null,"Title":"Put single-def CSEs into SSA","State":"open","Body":"If we create a single-def temp during SSE, add it into SSA so uses of the temp\r\ncan benefit from assertion prop and similar.\r\n\r\nFollow-up from some work proposed for #21973.","Url":"https://github.com/dotnet/coreclr/pull/26986","RelatedDescription":"Open PR \"Put single-def CSEs into SSA\" (#26986)"},{"Id":"501339053","IsPullRequest":true,"CreatedAt":"2019-10-02T08:05:47","Actor":"davmason","Number":"26985","RawContent":null,"Title":"Only set THREAD_IS_SUSPENDED if we are truly doing an async stack walk","State":"open","Body":"There are some checks in the stack walker that abort if we are doing something that could deadlock. This are valuable when the profiler is doing an async stackwalk, but when the runtime is suspended via `ICorProfilerInfo10::SuspendRuntime` there is no risk of a deadlock so we should let the stackwalk proceed. ","Url":"https://github.com/dotnet/coreclr/pull/26985","RelatedDescription":"Open PR \"Only set THREAD_IS_SUSPENDED if we are truly doing an async stack walk\" (#26985)"},{"Id":"501263347","IsPullRequest":true,"CreatedAt":"2019-10-02T04:07:41","Actor":"jashook","Number":"26984","RawContent":null,"Title":"Use ubuntu 1804 arm64 queue outerloop","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26984","RelatedDescription":"Open PR \"Use ubuntu 1804 arm64 queue outerloop\" (#26984)"},{"Id":"501192782","IsPullRequest":true,"CreatedAt":"2019-10-02T03:42:58","Actor":"jashook","Number":"26979","RawContent":null,"Title":"Change to use the arm32 armarch queue","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26979","RelatedDescription":"Closed or merged PR \"Change to use the arm32 armarch queue\" (#26979)"},{"Id":"501212329","IsPullRequest":true,"CreatedAt":"2019-10-02T00:34:43","Actor":"Maoni0","Number":"26983","RawContent":null,"Title":"oom (#26457)","State":"open","Body":"Bug impact:\r\n  in Server GC, when a user specifies a hardlimit but actually uses more memory than what the hardlimit specifies, if we hit the LOH alloc path we would go into an infinite loop trying to allocate on other heaps of course only to find that we fail there too. \r\n\r\nPR Risks:\r\n\r\n    Change is limited to large object alloc path, only in Server GC and only when the user is actually using more memory than the hardlimit they specified.\r\n\r\nThis is #26457 from master for 3.1\r\n\r\n+ when hardlimit is specified we should only retry when we didn't fail due to commit failure - if commit failed it means we simply didn't have as much memory as what the hardlimit specified. we should throw OOM in this case.\r\n\r\n+ added some diag info around OOM history to help with future diagnostics.\r\n\r\n(cherry picked from commit 7dca41fd36721068e610c537654765e8e42275d7)","Url":"https://github.com/dotnet/coreclr/pull/26983","RelatedDescription":"Open PR \"oom (#26457)\" (#26983)"},{"Id":"501205099","IsPullRequest":true,"CreatedAt":"2019-10-02T00:04:37","Actor":"jkoritzinsky","Number":"26980","RawContent":null,"Title":"Clean up our CMake scripts using features introduced between 3.0 and 3.14","State":"open","Body":"Now that we're using a consistent modern version of CMake on all platforms, we can significantly clean up our native build scripts.\r\n\r\nThere's a few things I decided to go fix:\r\n\r\n- Remove the `CLR_CMAKE_COMPILER` variable and use generator expressions instead.\r\n- Remove the directory-based `dac.cmake`, `crossgen.cmake`, `md_dac.cmake`, `md_wks.cmake`, and `md_dbi.cmake` files and drive their inclusion/exclusion of various defines via custom target properties and generator expressions.\r\n- Collapse any leaf CMakeLists.txt files that were only leaf nodes because of the above directory-based component definition system.\r\n- Convert PCH generation to be target-specific instead of directory-specific.\r\n- Convert linker options to be added via `add_link_options` when possible.\r\n- Refactor manual asm preprocessing and compilation (for Windows ARM and ARM64) to a single utility function.\r\n- Refactor manual preprocessing to a single xplat function.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26980","RelatedDescription":"Open PR \"Clean up our CMake scripts using features introduced between 3.0 and 3.14\" (#26980)"},{"Id":"501177577","IsPullRequest":true,"CreatedAt":"2019-10-01T22:27:01","Actor":"franksinankaya","Number":"26977","RawContent":null,"Title":"Replace lvRegNum with GetRegNum()","State":"open","Body":"@am11  @jkotas @janvorli @sandreenko ","Url":"https://github.com/dotnet/coreclr/pull/26977","RelatedDescription":"Open PR \"Replace lvRegNum with GetRegNum()\" (#26977)"},{"Id":"501172466","IsPullRequest":false,"CreatedAt":"2019-10-01T22:11:09","Actor":"GrabYourPitchforks","Number":"26976","RawContent":null,"Title":"Consuming static readonly Vector128<T> fields results in non-optimal codegen","State":"open","Body":"Sample code:\r\n\r\n```cs\r\nprivate static readonly Vector128<sbyte> Vector0x0F = Vector128.Create((sbyte)0x0F);\r\n\r\npublic static int GetMask(Vector128<sbyte> data)\r\n{\r\n    return Sse2.MoveMask(Sse2.Add(data, Vector0x0F));\r\n}\r\n```\r\n\r\nCodegen:\r\n\r\n```asm\r\n00007ffc`19901370 c5f877          vzeroupper\r\n00007ffc`19901373 c5f91001        vmovupd xmm0,xmmword ptr [rcx]\r\n00007ffc`19901377 48b8482ca75ea8010000 mov rax,1A85EA72C48h\r\n00007ffc`19901381 488b00          mov     rax,qword ptr [rax]  ; this dereference could be avoided\r\n00007ffc`19901384 c5f9fc4008      vpaddb  xmm0,xmm0,xmmword ptr [rax+8]\r\n00007ffc`19901389 c5f9d7c0        vpmovmskb eax,xmm0\r\n00007ffc`1990138d c3              ret\r\n```\r\n\r\nSince the static ctor has already been run, the JIT could be optimized to burn into the codegen the exact memory location of where the `Vector0x0F` field lives. This would allow eliding the dereference highlighted in the above codegen sample.\r\n\r\n/cc @tannergooding","Url":"https://github.com/dotnet/coreclr/issues/26976","RelatedDescription":"Open issue \"Consuming static readonly Vector128<T> fields results in non-optimal codegen\" (#26976)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"501851017","IsPullRequest":true,"CreatedAt":"2019-10-03T05:25:28","Actor":"dotnet-maestro[bot]","Number":"12791","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191002.24\r\n- **Date Produced**: 10/3/2019 3:42 AM\r\n- **Commit**: 58df33a9d497a5a68af81c33cdbcb31180613ea7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19502.24\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19502.24\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19502.24\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19502.24\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19502.24\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12791","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12791)"},{"Id":"501817771","IsPullRequest":true,"CreatedAt":"2019-10-03T03:05:30","Actor":"dotnet-maestro[bot]","Number":"12789","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191002.20\r\n- **Date Produced**: 10/3/2019 1:11 AM\r\n- **Commit**: b3218cd12e968f539c95447da90608357ebda318\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19502.20\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19502.20\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19502.20\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19502.20\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19502.20\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12789","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12789)"},{"Id":"501813241","IsPullRequest":true,"CreatedAt":"2019-10-03T02:40:26","Actor":"dotnet-maestro[bot]","Number":"12788","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191002.13\r\n- **Date Produced**: 10/3/2019 1:19 AM\r\n- **Commit**: cca42d9624e6adcff85c3865f1189032a202c2ed\r\n- **Branch**: refs/heads/release/3.1-preview1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview1.19502.13\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12788","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12788)"},{"Id":"501817834","IsPullRequest":true,"CreatedAt":"2019-10-03T02:30:31","Actor":"dotnet-maestro[bot]","Number":"12790","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191002.23\r\n- **Date Produced**: 10/3/2019 1:52 AM\r\n- **Commit**: d34d1570bfdf669ed94b4c939b2f39a1650e2320\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.0.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.1\r\n  - **Microsoft.NET.HostModel** -> 3.0.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.1\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12790","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12790)"},{"Id":"501762104","IsPullRequest":true,"CreatedAt":"2019-10-02T22:40:58","Actor":"livarcocc","Number":"12787","RawContent":null,"Title":"Update branding to 2.2.207","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/12787","RelatedDescription":"Open PR \"Update branding to 2.2.207\" (#12787)"},{"Id":"501761734","IsPullRequest":true,"CreatedAt":"2019-10-02T22:39:52","Actor":"livarcocc","Number":"12786","RawContent":null,"Title":"Update branding to 2.1.607","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/12786","RelatedDescription":"Open PR \"Update branding to 2.1.607\" (#12786)"},{"Id":"501760294","IsPullRequest":true,"CreatedAt":"2019-10-02T22:35:20","Actor":"livarcocc","Number":"12785","RawContent":null,"Title":"Update branding to 2.2.110","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/12785","RelatedDescription":"Open PR \"Update branding to 2.2.110\" (#12785)"},{"Id":"501759848","IsPullRequest":true,"CreatedAt":"2019-10-02T22:33:51","Actor":"livarcocc","Number":"12784","RawContent":null,"Title":"Updating branding to 2.1.510","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/12784","RelatedDescription":"Open PR \"Updating branding to 2.1.510\" (#12784)"},{"Id":"501232551","IsPullRequest":true,"CreatedAt":"2019-10-02T22:24:39","Actor":"dotnet-maestro[bot]","Number":"12771","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191002.3\r\n- **Date Produced**: 10/2/2019 8:53 PM\r\n- **Commit**: a3fd9237f6f104081db1ae3e9727d0f88029bda6\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.1-servicing.19502.3\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12771","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12771)"},{"Id":"501743156","IsPullRequest":true,"CreatedAt":"2019-10-02T22:20:32","Actor":"dotnet-maestro[bot]","Number":"12783","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191002.09\r\n- **Date Produced**: 10/2/2019 8:35 PM\r\n- **Commit**: 0bdbe6b3a7caf32a4f594196effe56a941980d7b\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.1-servicing-19502-09\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.0.1-servicing-19502-09\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.1-servicing-19502-09\r\n  - **Microsoft.NET.HostModel** -> 3.0.1-servicing-19502-09\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.1-servicing-19502-09\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12783","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12783)"},{"Id":"501705160","IsPullRequest":true,"CreatedAt":"2019-10-02T20:55:32","Actor":"dotnet-maestro[bot]","Number":"12782","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191002.8\r\n- **Date Produced**: 10/2/2019 7:10 PM\r\n- **Commit**: c094df5549d457f89d395ab4ab77c5cfa3665dbb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19502.8\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19502.8\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19502.8\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19502.8\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19502.8\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12782","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12782)"},{"Id":"501618774","IsPullRequest":true,"CreatedAt":"2019-10-02T20:06:42","Actor":"dotnet-maestro[bot]","Number":"12780","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191002.1\r\n- **Date Produced**: 10/2/2019 4:35 PM\r\n- **Commit**: b14db5700f6f1d12bc2cbf1acd2fff1c54845ec4\r\n- **Branch**: refs/heads/release/3.1-preview1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview1.19502.1\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12780","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12780)"},{"Id":"501662833","IsPullRequest":true,"CreatedAt":"2019-10-02T18:48:38","Actor":"crummel","Number":"12781","RawContent":null,"Title":"[source-build] A couple small source-build fixes","State":"open","Body":"- Fix the property name for the `Microsoft.TemplateSearch.Common` package version.\r\n- Add exclusions to some more test files.","Url":"https://github.com/dotnet/cli/pull/12781","RelatedDescription":"Open PR \"[source-build] A couple small source-build fixes\" (#12781)"},{"Id":"501413044","IsPullRequest":false,"CreatedAt":"2019-10-02T16:52:29","Actor":"generik0","Number":"12777","RawContent":null,"Title":"dotnet test, azure devops. Not working on with csproj and devops artifacts","State":"closed","Body":"Hi\r\nI have seen other issues (closed) regarding this matter. However none of them adress azure devopops (cload) and build agent.\r\n\r\nThe basic issue =\r\n\r\nWhen trying to run a dotnet test on a csproj, with personal nugets on devops artifacts, even though the source is added to the build agent, the nuget fail for dotnet test.\r\n\r\nThis is even is there are adde previous tasks:\r\n- dotnet restore (with nuget.config file)\r\n- dotnet build (which needs --configfile switch)\r\n\r\n## Steps to reproduce\r\n* Have a csproj that uses a nuget from devops artifacts\r\n* Have a pipleing with tasks:\r\n- dotnet restore with a **/*test.csproj search, and nuget.config including the devop artifacts\r\n- dotnet build with a **/*test.csproj search, and  --configfile swtich to the nuget.config including the devop artifacts\r\n- dotnet test **/*test.csproj \r\n\r\n\r\n## Expected  behavior\r\n\r\nI expect it not to fail for the dotnet test\r\n\r\n## Actual behavior\r\n\r\nIt fails because of nuget packages, even thought the restore and build was before\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/2411563/66038507-9a281180-e512-11e9-82fa-8fde670a6da3.png)\r\n\r\n![image](https://user-images.githubusercontent.com/2411563/66038495-93010380-e512-11e9-85e7-0755648cc35b.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/2411563/66038353-30a80300-e512-11e9-8c19-0c24faff5eeb.png)\r\n\r\n\r\nAttached is the raw log:\r\n\r\n[rawlog.txt](https://github.com/dotnet/cli/files/3680715/rawlog.txt)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12777","RelatedDescription":"Closed issue \"dotnet test, azure devops. Not working on with csproj and devops artifacts\" (#12777)"},{"Id":"501527350","IsPullRequest":true,"CreatedAt":"2019-10-02T15:20:47","Actor":"dotnet-maestro[bot]","Number":"12778","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191002.3\r\n- **Date Produced**: 10/2/2019 1:11 PM\r\n- **Commit**: a36c0669b13483d93cd74090839644932d574faa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19502.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19502.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19502.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19502.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19502.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12778","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12778)"},{"Id":"501340964","IsPullRequest":true,"CreatedAt":"2019-10-02T12:17:05","Actor":"dotnet-maestro[bot]","Number":"12774","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191002.2\r\n- **Date Produced**: 10/2/2019 10:19 AM\r\n- **Commit**: ba2095a5755a040850bdc4b423fab1ca26da4025\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19502.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19502.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19502.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19502.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19502.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12774","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12774)"},{"Id":"501395763","IsPullRequest":true,"CreatedAt":"2019-10-02T11:00:41","Actor":"dotnet-maestro[bot]","Number":"12776","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191002.01\r\n- **Date Produced**: 10/2/2019 8:57 AM\r\n- **Commit**: 93abb6b3a675b44ee35698d9640a42779b18e004\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.1-servicing-19502-01\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.0.1-servicing-19502-01\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.1-servicing-19502-01\r\n  - **Microsoft.NET.HostModel** -> 3.0.1-servicing-19502-01\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.1-servicing-19502-01\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.6.0 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12776","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12776)"},{"Id":"501371090","IsPullRequest":true,"CreatedAt":"2019-10-02T09:55:35","Actor":"dotnet-maestro[bot]","Number":"12775","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191001.24\r\n- **Date Produced**: 10/2/2019 8:04 AM\r\n- **Commit**: 0b3fcd7a02fd29017f01f01a36ea562c5fda1eec\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19501.24\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19501.24\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19501.24\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19501.24\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview1.19501.24\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12775","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12775)"},{"Id":"501310098","IsPullRequest":true,"CreatedAt":"2019-10-02T07:50:41","Actor":"dotnet-maestro[bot]","Number":"12773","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191001.11\r\n- **Date Produced**: 10/2/2019 5:53 AM\r\n- **Commit**: ff095ddf559203abd4ccf906d40b31a444344050\r\n- **Branch**: refs/heads/release/3.1-preview1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview1.19501.11\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12773","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12773)"},{"Id":"501292047","IsPullRequest":true,"CreatedAt":"2019-10-02T06:30:35","Actor":"dotnet-maestro[bot]","Number":"12772","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191001.21\r\n- **Date Produced**: 10/2/2019 4:22 AM\r\n- **Commit**: f438438d5116fa495b5493e949f131ba52ba24ba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19501.21\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19501.21\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19501.21\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19501.21\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19501.21\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12772","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12772)"},{"Id":"501229761","IsPullRequest":true,"CreatedAt":"2019-10-02T05:56:59","Actor":"dotnet-maestro[bot]","Number":"12770","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191001.22\r\n- **Date Produced**: 10/2/2019 4:15 AM\r\n- **Commit**: 64247e815ccd91459aa9137e092ce3238b25e281\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19501.22\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19501.22\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19501.22\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19501.22\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview1.19501.22\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0-preview1.19501.8 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12770","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12770)"},{"Id":"501205264","IsPullRequest":true,"CreatedAt":"2019-10-02T05:52:33","Actor":"dotnet-maestro[bot]","Number":"12769","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191001.19\r\n- **Date Produced**: 10/2/2019 3:56 AM\r\n- **Commit**: f438438d5116fa495b5493e949f131ba52ba24ba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19501.19\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19501.19\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19501.19\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19501.19\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19501.19\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12769","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12769)"},{"Id":"501196388","IsPullRequest":true,"CreatedAt":"2019-10-02T01:31:31","Actor":"dotnet-maestro[bot]","Number":"12768","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191001.13\r\n- **Date Produced**: 10/1/2019 10:07 PM\r\n- **Commit**: 44ae29e1fbc978d358c6fb3ba307f3b841a37160\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19501.13\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview1.19501.13\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19501.13\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19501.13\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19501.13\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12768","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12768)"},{"Id":"501173737","IsPullRequest":true,"CreatedAt":"2019-10-01T22:50:31","Actor":"dotnet-maestro[bot]","Number":"12767","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191001.4\r\n- **Date Produced**: 10/1/2019 9:23 PM\r\n- **Commit**: db4087769ecf5e9ac4cfd4f2b3175a28e14d60ee\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.1-servicing.19501.4\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12767","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12767)"},{"Id":"501147895","IsPullRequest":true,"CreatedAt":"2019-10-01T22:35:53","Actor":"dotnet-maestro[bot]","Number":"12765","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191001.9\r\n- **Date Produced**: 10/1/2019 8:00 PM\r\n- **Commit**: 676fe3b8c06f10db5908588a50b47161808ff468\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19501.9\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview1.19501.9\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19501.9\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19501.9\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19501.9\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12765","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12765)"},{"Id":"501156565","IsPullRequest":true,"CreatedAt":"2019-10-01T22:15:36","Actor":"dotnet-maestro[bot]","Number":"12766","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191001.10\r\n- **Date Produced**: 10/1/2019 8:18 PM\r\n- **Commit**: 1def95819b537ec19aa89e774578bc66b0507609\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19501.10\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19501.10\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19501.10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19501.10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19501.10\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12766","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12766)"},{"Id":"501125559","IsPullRequest":false,"CreatedAt":"2019-10-01T21:51:38","Actor":"JaimeStill","Number":"12764","RawContent":null,"Title":"Suggestion - dotnet CLI Tools User Installer","State":"closed","Body":"Most of the work that I do is in an environment that has no internet connection. I routinely need to transfer packages from my internet connected environment to the offline environment.\r\n\r\nWould it be possible to have a user profile based installer for the `dotnet` CLI, similar to how VS Code has a user installer? If not this, then would it be possible to have an executable download with a subset of features, similar to how the `nuget` CLI can just be downloaded as an executable?\r\n\r\nWhile I am authorized to transfer between both networks, I can't install the .NET Core SDK. I was looking into trying to use the `nuget` CLI to package missing dependencies, but ran into this:\r\n\r\n![image](https://user-images.githubusercontent.com/14102723/65997274-0f3e0d00-e467-11e9-9f01-e67543bfd106.png)  \r\n> From [Installing NuGet client tools](https://docs.microsoft.com/en-us/nuget/install-nuget-client-tools#cli-tools)\r\n\r\nAny feedback would be greatly appreciated!\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12764","RelatedDescription":"Closed issue \"Suggestion - dotnet CLI Tools User Installer\" (#12764)"},{"Id":"501062437","IsPullRequest":true,"CreatedAt":"2019-10-01T18:50:36","Actor":"dotnet-maestro[bot]","Number":"12763","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191001.8\r\n- **Date Produced**: 10/1/2019 4:47 PM\r\n- **Commit**: c8a7fa836b9a15e1a5a4398eb916666bfa9aa772\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19501.8\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19501.8\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19501.8\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19501.8\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19501.8\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12763","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12763)"},{"Id":"501044716","IsPullRequest":true,"CreatedAt":"2019-10-01T18:15:08","Actor":"dotnet-maestro[bot]","Number":"12762","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191001.7\r\n- **Date Produced**: 10/1/2019 4:21 PM\r\n- **Commit**: c8a7fa836b9a15e1a5a4398eb916666bfa9aa772\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19501.7\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19501.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19501.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19501.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19501.7\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12762","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12762)"},{"Id":"500804341","IsPullRequest":true,"CreatedAt":"2019-10-01T16:17:51","Actor":"dotnet-maestro[bot]","Number":"12761","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191001.3\r\n- **Date Produced**: 10/1/2019 2:29 PM\r\n- **Commit**: af6823b4dd45c07d22b3a3d6e44a6c05145aa28a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19501.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19501.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19501.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19501.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19501.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12761","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12761)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"501454733","IsPullRequest":true,"CreatedAt":"2019-10-02T12:30:46","Actor":"dotnet-maestro[bot]","Number":"1585","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191001.13\r\n- **Date Produced**: 10/2/2019 4:05 AM\r\n- **Commit**: dcc9f626eeb0751d4ba4499f623aac42d2e95c10\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19501.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19501.13\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19501.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1585","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1585)"},{"Id":"501445824","IsPullRequest":true,"CreatedAt":"2019-10-02T12:11:47","Actor":"dotnet-maestro[bot]","Number":"1584","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191001.4\r\n- **Date Produced**: 10/1/2019 10:24 PM\r\n- **Commit**: c21a409f11386d22c6083198176868d3974de832\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19501.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1584","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1584)"},{"Id":"500858343","IsPullRequest":true,"CreatedAt":"2019-10-01T12:30:06","Actor":"dotnet-maestro[bot]","Number":"1583","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190930.12\r\n- **Date Produced**: 10/1/2019 3:39 AM\r\n- **Commit**: 969ce665afee70b2d591e5c271525c927a8834d0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19480.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19480.12\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19480.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1583","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1583)"},{"Id":"500849552","IsPullRequest":true,"CreatedAt":"2019-10-01T12:11:41","Actor":"dotnet-maestro[bot]","Number":"1582","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190930.3\r\n- **Date Produced**: 9/30/2019 8:25 PM\r\n- **Commit**: 238f1bbb23ba67616818d0b242c5b55a18edec55\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19480.3\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1582","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1582)"},{"Id":"499857194","IsPullRequest":false,"CreatedAt":"2019-09-29T04:57:44","Actor":"B16180339","Number":"1581","RawContent":null,"Title":"Dotnet","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/issues/1581","RelatedDescription":"Closed issue \"Dotnet\" (#1581)"},{"Id":"499764886","IsPullRequest":true,"CreatedAt":"2019-09-28T12:28:37","Actor":"dotnet-maestro[bot]","Number":"1580","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190927.7\r\n- **Date Produced**: 9/28/2019 1:48 AM\r\n- **Commit**: 7e9a177824cbefaee8985a9b517ebb0ea2e17a81\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19477.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19477.7\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19477.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1580","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1580)"},{"Id":"499762811","IsPullRequest":true,"CreatedAt":"2019-09-28T12:11:24","Actor":"dotnet-maestro[bot]","Number":"1579","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190927.2\r\n- **Date Produced**: 9/27/2019 6:33 PM\r\n- **Commit**: 14abaee3dba41fbe608431fb6a4f4b2435dcac33\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19477.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1579","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1579)"},{"Id":"499412533","IsPullRequest":true,"CreatedAt":"2019-09-27T12:28:38","Actor":"dotnet-maestro[bot]","Number":"1578","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190926.10\r\n- **Date Produced**: 9/27/2019 5:59 AM\r\n- **Commit**: 296c0e71ddcc4885d30af18dea829c1923cfdc5c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19476.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19476.10\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19476.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1578","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1578)"},{"Id":"499405308","IsPullRequest":true,"CreatedAt":"2019-09-27T12:11:32","Actor":"dotnet-maestro[bot]","Number":"1577","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190926.6\r\n- **Date Produced**: 9/27/2019 1:21 AM\r\n- **Commit**: b449f372df1a3374ebdc85f42ff137dcda08776b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19476.6\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1577","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1577)"},{"Id":"498397654","IsPullRequest":true,"CreatedAt":"2019-09-26T15:09:19","Actor":"dotnet-maestro[bot]","Number":"1574","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190924.3\r\n- **Date Produced**: 9/24/2019 6:16 PM\r\n- **Commit**: 0e9ffd6464aff37aef2dc41dc2162d258f266e32\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19474.3\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1574","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1574)"},{"Id":"498433598","IsPullRequest":true,"CreatedAt":"2019-09-26T15:08:53","Actor":"mmitche","Number":"1575","RawContent":null,"Title":"Update to non prerelease","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1575","RelatedDescription":"Closed or merged PR \"Update to non prerelease\" (#1575)"},{"Id":"498844948","IsPullRequest":true,"CreatedAt":"2019-09-26T12:22:45","Actor":"dotnet-maestro[bot]","Number":"1576","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190926.1\r\n- **Date Produced**: 9/26/2019 9:11 AM\r\n- **Commit**: 0a1850cc370986c7348e09bcd1c1adcf522d6db3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19476.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19476.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19476.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1576","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1576)"},{"Id":"498249739","IsPullRequest":true,"CreatedAt":"2019-09-25T12:30:34","Actor":"dotnet-maestro[bot]","Number":"1573","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190924.3\r\n- **Date Produced**: 9/24/2019 7:06 PM\r\n- **Commit**: da147ece700c2502b91e57d99213feadcfb9c1f0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19474.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19474.3\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19474.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1573","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1573)"},{"Id":"498239365","IsPullRequest":true,"CreatedAt":"2019-09-25T12:10:59","Actor":"dotnet-maestro[bot]","Number":"1572","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190923.5\r\n- **Date Produced**: 9/24/2019 4:15 AM\r\n- **Commit**: ef4b288de587f0b86e65b3950e9095f714808ade\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19473.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1572","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1572)"},{"Id":"498151562","IsPullRequest":false,"CreatedAt":"2019-09-25T09:07:45","Actor":"NicolasDorier","Number":"1571","RawContent":null,"Title":"Github does not render the diff files of netstandard2.1 correctly","State":"open","Body":"In the [diff for netstandard2.1](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.1_diff.md), Github is showing `(Sorry about that, but we can’t show files that are this big right now.)` instead of a nicely formatted diff.\r\n\r\nProposed workaround:\r\n\r\n* Ping the github team to increase the limit\r\n* Send the dotnet team in holiday during the development of netstandard2.2 so the diff file get smaller.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1571","RelatedDescription":"Open issue \"Github does not render the diff files of netstandard2.1 correctly\" (#1571)"},{"Id":"497649559","IsPullRequest":true,"CreatedAt":"2019-09-24T12:24:38","Actor":"dotnet-maestro[bot]","Number":"1570","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190923.4\r\n- **Date Produced**: 9/23/2019 10:04 PM\r\n- **Commit**: 485441f79ead7878af206a6af61a300e1458616a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19473.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19473.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19473.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1570","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1570)"},{"Id":"497622081","IsPullRequest":false,"CreatedAt":"2019-09-24T11:15:45","Actor":"GammaFour","Number":"1569","RawContent":null,"Title":"Massive problems with no support of UWP in .NET Standard 2.1","State":"open","Body":"How can you release .NET Standard 2.1 and not support UWP? I made the mistake of upgrading my NuGet packages yesterday to the recommended versions and I've been untangling this mess ever since. My server code wants to be .NET Standard 2.1. So I go through and retarget all my common libraries only to find that I've screwed the pooch on my UWP client. This is seriously a big miss.","Url":"https://github.com/dotnet/standard/issues/1569","RelatedDescription":"Open issue \"Massive problems with no support of UWP in .NET Standard 2.1\" (#1569)"},{"Id":"497566465","IsPullRequest":false,"CreatedAt":"2019-09-24T09:24:09","Actor":"nikolay-dimitrov","Number":"1568","RawContent":null,"Title":"Reference to type 'SqlParameter' claims it is defined in 'System.Data', but it could not be found","State":"open","Body":"I have custom method over DbContext(EF 6.3) with class library targeting .NET Framework 4.7.1\r\nIm trying to migrate to .NET Standart 2.1 but into the both cases i got this error when im calling the method above from any places(the example is calling from .NET Standart 2.1 library with installed EF 6.3)\r\n\r\n    public static async Task<IList<T>> SqlQueryAsync<T>(this DbContext db, CommandType type, string sql, List<SqlParameter> parameters) where T : new()\r\n        {\r\n            var conn = db.Database.Connection.State;\r\n\r\n            if (conn == ConnectionState.Closed)\r\n                await db.Database.Connection.OpenAsync();\r\n            using (var command =  db.Database.Connection.CreateCommand())\r\n            {\r\n                command.CommandText = sql;\r\n                command.CommandType = type;\r\n                if (parameters != null && parameters.Count() > 0)\r\n                {\r\n                    foreach (var item in parameters)\r\n                    {\r\n                        DbParameter p = command.CreateParameter();\r\n                        p.DbType = item.DbType;\r\n                        p.ParameterName = item.ParameterName;\r\n                        p.Value = item.Value;\r\n                        command.Parameters.Add(p);\r\n                    }\r\n                }\r\n                var propts = typeof(T).GetProperties();\r\n                var rtnList = new List<T>();\r\n                T model;\r\n                object val;\r\n                using (var reader = await command.ExecuteReaderAsync())\r\n                {\r\n                    while (await reader.ReadAsync())\r\n                    {\r\n                        model = new T();\r\n                        foreach (var l in propts)\r\n                        {\r\n\r\n                            if (Enumerable.Range(0, reader.FieldCount).Any(i => string.Equals(reader.GetName(i), l.Name, StringComparison.OrdinalIgnoreCase)))\r\n                            {\r\n                                val = reader[l.Name];\r\n                                if (val == DBNull.Value)\r\n                                    l.SetValue(model, null);\r\n                                else\r\n                                    l.SetValue(model, val);\r\n                            }\r\n                            \r\n                        }\r\n                        rtnList.Add(model);\r\n                    }\r\n                }\r\n                return rtnList;\r\n            }\r\n        }\r\n\r\nI found simular issue https://github.com/dotnet/corefx/issues/27247# but the proposals there do not resolve the error","Url":"https://github.com/dotnet/standard/issues/1568","RelatedDescription":"Open issue \"Reference to type 'SqlParameter' claims it is defined in 'System.Data', but it could not be found\" (#1568)"},{"Id":"497516549","IsPullRequest":false,"CreatedAt":"2019-09-24T07:46:11","Actor":"YZahringer","Number":"1567","RawContent":null,"Title":".NET Standard 2.1 support on Universal Windows Platform","State":"open","Body":"Regarding the support of `.NET Standard 2.1` in UWP projects, it is written that it will be supported in the upcoming version.\r\n\r\nThis means that there will be the same problem as with the `.NET Standard 2.0` version and that we will not be able to target older versions of Windows 10? `.NET Standard 2.0` requires as min target version Windows 10 Fall Creators Update `16299`.\r\n\r\nThis is a big problem for my projects and backward compatibility. I can't remove support for older versions of Windows 10, especially `LTSC` editions. This means that my projects are blocked in `.NET Standard 1.4` and it also blocks any dependency updates:\r\n- `Xamarin.Forms 2.5` because version `>=3.0` requires `.NET Standard 2.0`\r\n- `Microsoft.EntityFrameworkCore 1.1` because version `>=2.0` requires `.NET Standard 2.0`\r\n- `.NET Core 1.1` because version `>=2.0` requires `.NET Standard 2.0`\r\n\r\nI can't ask my users to have the latest version installed, especially in business applications and Windows `LTSC` editions. I have to wait several years before removing the support of an old version.\r\n\r\nIs it planned to continue support the min target version `16299` of UWP projects with `.NET Standard 2.1`? I understand the constraints, but with Xcode I can still min target `iOS 7` and with Android I can still min target `4.4 KitKat`, still with the latest version of frameworks. And with Windows I can only support the latest version? That doesn't make much sense.","Url":"https://github.com/dotnet/standard/issues/1567","RelatedDescription":"Open issue \".NET Standard 2.1 support on Universal Windows Platform\" (#1567)"},{"Id":"497453537","IsPullRequest":false,"CreatedAt":"2019-09-24T04:51:49","Actor":"shyamutty","Number":"1566","RawContent":null,"Title":"Grpc .net client issue with .NET Core and .NET standard (2.0)","State":"closed","Body":"Severity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tNU1202\tPackage Grpc.Net.Client 0.2.23-pre1 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Package Grpc.Net.Client 0.2.23-pre1 supports: netstandard2.1 (.NETStandard,Version=v2.1)\tGrpcGreeterClient\t\r\n\r\nGrpc.Net.Client 2.23.2 dependency is .NETStandard 2.1\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1566","RelatedDescription":"Closed issue \"Grpc .net client issue with .NET Core and .NET standard (2.0)\" (#1566)"},{"Id":"497424795","IsPullRequest":false,"CreatedAt":"2019-09-24T02:51:23","Actor":"goldmannyc","Number":"1565","RawContent":null,"Title":"Where to download the netstandard.dll 2.1?","State":"open","Body":"","Url":"https://github.com/dotnet/standard/issues/1565","RelatedDescription":"Open issue \"Where to download the netstandard.dll 2.1?\" (#1565)"},{"Id":"497309683","IsPullRequest":true,"CreatedAt":"2019-09-23T20:25:00","Actor":"terrajobst","Number":"1564","RawContent":null,"Title":"Ns21 summary","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1564","RelatedDescription":"Closed or merged PR \"Ns21 summary\" (#1564)"},{"Id":"497303937","IsPullRequest":true,"CreatedAt":"2019-09-23T20:15:45","Actor":"terrajobst","Number":"1563","RawContent":null,"Title":"Update diffs to final product","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1563","RelatedDescription":"Closed or merged PR \"Update diffs to final product\" (#1563)"},{"Id":"497024033","IsPullRequest":false,"CreatedAt":"2019-09-23T10:49:00","Actor":"yb199478","Number":"1562","RawContent":null,"Title":"Is it possible to add a method that kills the process tree?","State":"open","Body":".Net standard does not provide any method to kill a process tree.","Url":"https://github.com/dotnet/standard/issues/1562","RelatedDescription":"Open issue \"Is it possible to add a method that kills the process tree?\" (#1562)"},{"Id":"496771346","IsPullRequest":true,"CreatedAt":"2019-09-22T12:23:49","Actor":"dotnet-maestro[bot]","Number":"1561","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190921.2\r\n- **Date Produced**: 9/21/2019 6:26 PM\r\n- **Commit**: 4c074ae47660448eae66a362076124177709640a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19471.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19471.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19471.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1561","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1561)"},{"Id":"496650404","IsPullRequest":true,"CreatedAt":"2019-09-21T12:33:22","Actor":"dotnet-maestro[bot]","Number":"1560","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190920.3\r\n- **Date Produced**: 9/20/2019 4:58 PM\r\n- **Commit**: 0286bce5fd360207ca707fe7024248be428cf0e9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19470.3\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19470.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19470.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1560","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1560)"},{"Id":"496648540","IsPullRequest":true,"CreatedAt":"2019-09-21T12:11:40","Actor":"dotnet-maestro[bot]","Number":"1559","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190920.9\r\n- **Date Produced**: 9/20/2019 9:08 PM\r\n- **Commit**: 84778cd659cc0509e9ebf651c73f2341ae82df8c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19470.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19470.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19470.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19470.9\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19470.9\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19470.9\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1559","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1559)"},{"Id":"496322557","IsPullRequest":true,"CreatedAt":"2019-09-20T12:34:19","Actor":"dotnet-maestro[bot]","Number":"1558","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190920.1\r\n- **Date Produced**: 9/20/2019 10:21 AM\r\n- **Commit**: ce5dfbb9ad62f95885748c7e95ebcd3ca453d1bf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19470.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19470.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19470.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1558","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1558)"},{"Id":"496312709","IsPullRequest":true,"CreatedAt":"2019-09-20T12:11:37","Actor":"dotnet-maestro[bot]","Number":"1557","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190919.8\r\n- **Date Produced**: 9/19/2019 10:34 PM\r\n- **Commit**: 67f02d61a4bff11930c10fb03f77bb4f93a37690\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19469.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19469.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19469.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19469.8\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19469.8\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19469.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1557","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1557)"},{"Id":"496006418","IsPullRequest":true,"CreatedAt":"2019-09-19T20:28:51","Actor":"dotnet-maestro[bot]","Number":"1556","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190919.4\r\n- **Date Produced**: 9/19/2019 6:33 PM\r\n- **Commit**: 19e994876c2c29b01b78cc7a2a7019eb7dfcbd54\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19469.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19469.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19469.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19469.4\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19469.4\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19469.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1556","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1556)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"501813295","IsPullRequest":true,"CreatedAt":"2019-10-03T02:10:29","Actor":"stephentoub","Number":"41514","RawContent":null,"Title":"Expose, test, and use ExceptionDispatchInfo.SetCurrentStackTrace","State":"open","Body":"Depends on https://github.com/dotnet/coreclr/pull/27004.\r\nFixes https://github.com/dotnet/corefx/issues/19416.\r\n\r\nI also need to tweak a couple of the projects that build for netstandard as well as netcoreapp.","Url":"https://github.com/dotnet/corefx/pull/41514","RelatedDescription":"Open PR \"Expose, test, and use ExceptionDispatchInfo.SetCurrentStackTrace\" (#41514)"},{"Id":"501521775","IsPullRequest":true,"CreatedAt":"2019-10-03T01:19:23","Actor":"filipnavara","Number":"41495","RawContent":null,"Title":"[System.Drawing.Common] Relax IconTests.CorrectColorDepthExtracted test","State":"closed","Body":"…to work on newer libgdiplus on Unix.\r\n\r\nRelated: https://github.com/mono/libgdiplus/pull/599\r\n\r\nlibgdiplus on Unix uses Cairo as the backend library for manipulating the bitmaps. Unfortunately Cairo has very limited support for different pixel formats. Thus the ARGB32 format has to be emulated using the PARGB32 format (individual channels are premultiplied with the alpha value). This may result in slight loss of precision and rounding errors when converting between the formats back and forth. Adjust the tests to be more forgiving for this scenario.\r\n\r\nNote that it worked on older libgdiplus only because there was couple of bugs that were canceling itself out. Cairo surfaces were often created with the non-premultiplied ARGB32 data and drawing operations performed on them resulted in the alpha channel not being applied correctly.","Url":"https://github.com/dotnet/corefx/pull/41495","RelatedDescription":"Closed or merged PR \"[System.Drawing.Common] Relax IconTests.CorrectColorDepthExtracted test\" (#41495)"},{"Id":"501795439","IsPullRequest":true,"CreatedAt":"2019-10-03T00:50:23","Actor":"safern","Number":"41513","RawContent":null,"Title":"Update experimental IsShipping and block stable properties","State":"open","Body":"When I moved to use the arcade `IsShipping` convention, I disabled publishing to NuGet.org for experimental packages. The reasoning of that, is because anything mark as non-shipping, will not make it to NuGet.org.\r\n\r\nSo we need to mark them only as `IsShippingAssembly=false` so that the `AssemblyInformationalVersion` in metadata isn't stable whenever we ship stable. Also, mark them as `SuppressFinalPackageVersion` so that it doesn't produce a stable version of the package whenever we build those. `SuppressFinalPackageVersion` is the new `BlockStable` property: https://github.com/dotnet/arcade/issues/1213\r\n\r\nThis will need to go into 3.1 in order to ship the experimental packages to NuGet.org.\r\n\r\nFYI: @GrabYourPitchforks @tannergooding \r\n\r\ncc: @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/41513","RelatedDescription":"Open PR \"Update experimental IsShipping and block stable properties\" (#41513)"},{"Id":"501767092","IsPullRequest":false,"CreatedAt":"2019-10-02T22:58:05","Actor":"Anipik","Number":"41512","RawContent":null,"Title":"Remove Configuration Group and OS Group from the Our config system","State":"open","Body":"The 3 major tasks here will to be able to \r\n- Cross-Compile.\r\n- able to pass to project to project dependencies.\r\n- should be able to find the best configurations from the project while building from the root.\r\n\r\nThe starting point here will be to make this work for a smaller repo.\r\n\r\ncc @ericstj @danmosemsft @safern @ViktorHofer ","Url":"https://github.com/dotnet/corefx/issues/41512","RelatedDescription":"Open issue \"Remove Configuration Group and OS Group from the Our config system\" (#41512)"},{"Id":"501755333","IsPullRequest":true,"CreatedAt":"2019-10-02T22:19:20","Actor":"Anipik","Number":"41511","RawContent":null,"Title":"updating packageindex with stable versions","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/41511","RelatedDescription":"Open PR \"updating packageindex with stable versions\" (#41511)"},{"Id":"501738051","IsPullRequest":false,"CreatedAt":"2019-10-02T21:32:41","Actor":"Groxan","Number":"41510","RawContent":null,"Title":"[System.Text.Json] Add Utf8JsonReader.SetState(...) method to improve custom converters performance","State":"open","Body":"I suggest adding the `Utf8JsonReader.SetState(JsonReaderState state)` method that allows you to set the reader state to any of the previous states so that you can read the JSON token, go back and read it again. This is a very useful feature especially when you are working with a custom `JsonConverter`.\r\n\r\n---\r\n\r\nLet's look at an example.\r\n\r\n### What we have\r\n\r\nImagine, we have the following models:\r\n\r\n````cs\r\ninterface IDevice\r\n{\r\n    string Kind { get; }\r\n}\r\n\r\nclass Phone : IDevice\r\n{\r\n    public string Kind => \"phone\";\r\n\r\n    public string Model { get; set; }\r\n    public string Number { get; set; }\r\n}\r\n\r\nclass Laptop : IDevice\r\n{\r\n    public string Kind => \"laptop\";\r\n\r\n    public string Model { get; set; }\r\n    public string Processor { get; set; }\r\n}\r\n````\r\n\r\n### What we want\r\n\r\nAnd we want to deserialize the following JSON to `List<IDevice>`:\r\n\r\n````json\r\n[\r\n  {\r\n    \"kind\": \"phone\",\r\n    \"model\": \"oneplus\",\r\n    \"number\": \"123456789\"\r\n  },\r\n  {\r\n    \"kind\": \"laptop\",\r\n    \"model\": \"lenovo\",\r\n    \"processor\": \"core i7\"\r\n  }\r\n]\r\n````\r\n\r\n### What we have to do\r\n\r\nTo do this, we create our own `JsonConverter<IDevice>`, and if we want to achieve maximum performance, we do it like this:\r\n\r\n````cs\r\nclass FastCustomConverter : JsonConverter<IDevice>\r\n{\r\n    public override IDevice Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\r\n    {\r\n        reader.Read();\r\n        reader.Read();\r\n\r\n        if (reader.ValueTextEquals(\"phone\"))\r\n        {\r\n            var phone = new Phone();\r\n\r\n            reader.Read();\r\n            reader.Read();\r\n            phone.Model = reader.GetString();\r\n\r\n            reader.Read();\r\n            reader.Read();\r\n            phone.Number = reader.GetString();\r\n\r\n            reader.Read();\r\n            return phone;\r\n        }\r\n        else if (reader.ValueTextEquals(\"laptop\"))\r\n        {\r\n            var laptop = new Laptop();\r\n\r\n            reader.Read();\r\n            reader.Read();\r\n            laptop.Model = reader.GetString();\r\n\r\n            reader.Read();\r\n            reader.Read();\r\n            laptop.Processor = reader.GetString();\r\n\r\n            reader.Read();\r\n            return laptop;\r\n        }\r\n        else\r\n        {\r\n            throw new JsonException();\r\n        }\r\n    }\r\n\r\n    public override void Write(Utf8JsonWriter writer, IDevice value, JsonSerializerOptions options)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n````\r\nAnd it works! Moreover, it works amazingly, and the performance is awesome in comparison with Newtonsoft.Json. But...\r\n\r\n### What's wrong\r\n\r\nBut sometimes (in fact almost always) we prefer to have well-readable code instead of maximum performance. Do you agree that writing such a converter for complex types with a large number of nested objects, to put it mildly, is a headache?\r\n\r\n### What we want to do\r\n\r\nSo, we want to do it as follows:\r\n\r\n````cs\r\nclass ReadableCustomConverter : JsonConverter<IDevice>\r\n{\r\n    public override IDevice Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\r\n    {\r\n        var root = JsonDocument.ParseValue(ref reader).RootElement;\r\n\r\n        return root.GetProperty(\"kind\").GetString() switch\r\n        {\r\n            \"phone\" => JsonSerializer.Deserialize<Phone>(root.GetRawText()),\r\n            \"laptop\" => JsonSerializer.Deserialize<Laptop>(root.GetRawText()),\r\n            _ => throw new JsonException()\r\n        };\r\n    }\r\n\r\n    public override void Write(Utf8JsonWriter writer, IDevice value, JsonSerializerOptions options)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n````\r\n\r\n### What's wrong\r\n\r\nThis also works, but much slower (~3 times slower). Obviously, we have a big overhead since we parse JSON to `JsonDocument` then convert it to raw string and then deserialize it to a specific type. Pretty dumb...\r\n\r\nThe problem is that we cannot just read the `\"kind\"` value to determine the correct type for deserialization, and then deserialize it, because the reader position is no longer at the beginning of the object.\r\n\r\n### Solution\r\n\r\nThat's why I suggest adding a function to change the position (state) of the reader, so we can create our own converter as follows:\r\n\r\n````cs\r\nclass ReadableJsonConverter : JsonConverter<IDevice>\r\n{\r\n    public override IDevice Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\r\n    {\r\n        // remember where is the beginning of the object\r\n        var initial = reader.CurrentState;\r\n\r\n        // find out the desired type\r\n        reader.Read();\r\n        reader.Read();\r\n        var kind = reader.GetString();\r\n\r\n        // return to the beginning of the object\r\n        reader.SetState(initial); //                <---------- that's what I suggest\r\n\r\n        // deserialize the object to the desired type\r\n        return kind switch\r\n        {\r\n            \"phone\" => JsonSerializer.Deserialize<Phone>(ref reader),\r\n            \"laptop\" => JsonSerializer.Deserialize<Laptop>(ref reader),\r\n            _ => throw new JsonException()\r\n        };\r\n    }\r\n\r\n    public override void Write(Utf8JsonWriter writer, IDevice value, JsonSerializerOptions options)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n````\r\n\r\nPretty short code and minimal overhead.\r\n\r\n---\r\n\r\nUnfortunately, this is a fairly common case when people have to work with JSON arrays of objects of different types, and it would be great to have an effective mechanism to handle this.","Url":"https://github.com/dotnet/corefx/issues/41510","RelatedDescription":"Open issue \"[System.Text.Json] Add Utf8JsonReader.SetState(...) method to improve custom converters performance\" (#41510)"},{"Id":"501721337","IsPullRequest":false,"CreatedAt":"2019-10-02T20:55:12","Actor":"hakeemoriola","Number":"41509","RawContent":null,"Title":"An existing connection was forcibly closed by the remote host","State":"open","Body":"am using a valid wildcard certificate for a 2.2 project the failure have after a successful login and about to load the default page\r\n\r\n`IOException: Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host.\r\nSystem.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.ThrowException(SocketError error)\r\nSystem.Net.Sockets.Socket+AwaitableSocketAsyncEventArgs.GetResult(short token)\r\nSystem.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request)\r\nSystem.Net.Security.SslState.ThrowIfExceptional()\r\nSystem.Net.Security.SslState.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)\r\nSystem.Net.Security.SslState.EndProcessAuthentication(IAsyncResult result)\r\nSystem.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult asyncResult)\r\nSystem.Net.Security.SslStream+<>c.<AuthenticateAsClientAsync>b__47_1(IAsyncResult iar)\r\nSystem.Threading.Tasks.TaskFactory<TResult>.FromAsyncCoreLogic(IAsyncResult iar, Func<IAsyncResult, TResult> endFunction, Action<IAsyncResult> endAction, Task<TResult> promise, bool requiresSynchronization)\r\nSystem.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)\r\n\r\nHttpRequestException: The SSL connection could not be established, see inner exception.\r\nSystem.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)\r\nSystem.Threading.Tasks.ValueTask<TResult>.get_Result()\r\nSystem.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\nSystem.Threading.Tasks.ValueTask<TResult>.get_Result()\r\nSystem.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask<ValueTuple<HttpConnection, HttpResponseMessage>> creationTask)\r\nSystem.Threading.Tasks.ValueTask<TResult>.get_Result()\r\nSystem.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, bool doRequestAuth, CancellationToken cancellationToken)\r\nMicrosoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\nMicrosoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\nSystem.Net.Http.HttpClient.FinishSendAsyncBuffered(Task<HttpResponseMessage> sendTask, HttpRequestMessage request, CancellationTokenSource cts, bool disposeCts)\r\n`","Url":"https://github.com/dotnet/corefx/issues/41509","RelatedDescription":"Open issue \"An existing connection was forcibly closed by the remote host\" (#41509)"},{"Id":"501704749","IsPullRequest":false,"CreatedAt":"2019-10-02T20:19:24","Actor":"pranavkm","Number":"41508","RawContent":null,"Title":"Consider throwing a meaningful error if the serializer is asked to serialize a `Task` ","State":"open","Body":"Consider\r\n\r\n```C#\r\nvar value = SomeAsyncFunc(); // This returns Task<SomeModel>\r\nvar json = JsonSerializer.Serialize(value);\r\n```\r\n\r\nThis currently throws the following error:\r\n\r\n```C#\r\nAn unhandled exception occurred while processing the request.JsonSerializationException: Self referencing loop detected for property 'task' with type 'System.Runtime.CompilerServices.AsyncTaskMethodBuilder 1+AsyncStateMachineBox 1 [System.Collections.Generic.List 1[XXXX.Models.YYY],System.Runtime.CompilerServices.IAsyncStateMachine]'. Path 'stateMachine.<>t__builder'. Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CheckForCircularReference(JsonWriter writer, object value, JsonProperty property, JsonContract contract, JsonContainerContract containerContract, JsonProperty containerProperty)\r\n```\r\n\r\nIt's almost always an indication of a non-awaited task if it's passed in to the serializer. Could this throw a more meaningful error up front if this is detected? See https://github.com/aspnet/AspNetCore/issues/13272 for previous discussions on this.","Url":"https://github.com/dotnet/corefx/issues/41508","RelatedDescription":"Open issue \"Consider throwing a meaningful error if the serializer is asked to serialize a `Task` \" (#41508)"},{"Id":"501627775","IsPullRequest":true,"CreatedAt":"2019-10-02T19:24:31","Actor":"ViktorHofer","Number":"41502","RawContent":null,"Title":"Add Microsoft.NET.Sdk.IL to the repo restore phase","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/33953","Url":"https://github.com/dotnet/corefx/pull/41502","RelatedDescription":"Closed or merged PR \"Add Microsoft.NET.Sdk.IL to the repo restore phase\" (#41502)"},{"Id":"501679238","IsPullRequest":false,"CreatedAt":"2019-10-02T19:24:03","Actor":"ViktorHofer","Number":"41507","RawContent":null,"Title":"System.Threading.Tasks.Tests.ParallelForTests.TestInvokeDOPAndCancel failed in CI","State":"open","Body":"https://dev.azure.com/dnceng/public/_build/results?buildId=374084&view=ms.vss-test-web.build-test-results-tab&runId=11444164&resultId=132449&paneView=debug\r\n\r\nConfiguration: `netcoreapp-Linux-Debug-x64-Debian.9.Amd64.Open`\r\n\r\n```\r\nTestInvokeDOPAndCancel: > FAILED! Cancellation+exception not effected.\\nExpected: False\\nActual: True\r\n\r\n   at System.Threading.Tasks.Tests.ParallelForTests.TestInvokeDOPAndCancel() in /_/src/System.Threading.Tasks.Parallel/tests/ParallelForTests.cs:line 1074\r\n```\r\n\r\ncc @stephentoub ","Url":"https://github.com/dotnet/corefx/issues/41507","RelatedDescription":"Open issue \"System.Threading.Tasks.Tests.ParallelForTests.TestInvokeDOPAndCancel failed in CI\" (#41507)"},{"Id":"501678252","IsPullRequest":true,"CreatedAt":"2019-10-02T19:21:46","Actor":"hareshambaliya","Number":"41506","RawContent":null,"Title":"Update coding-style.md","State":"open","Body":"Changed Keyboard shortcut to show white space. There was a wrong shortcut of View White Space (Ctrl+E, S) and correct one is (Ctrl+R, Ctrl+W). I don't know is it allows us to contribute/change in guidelines or not. It's my first PR. I hope it will be accepted.","Url":"https://github.com/dotnet/corefx/pull/41506","RelatedDescription":"Open PR \"Update coding-style.md\" (#41506)"},{"Id":"501638241","IsPullRequest":false,"CreatedAt":"2019-10-02T19:21:25","Actor":"erandis-vol","Number":"41505","RawContent":null,"Title":"Inconsistent floating-point parsing exceptions","State":"closed","Body":"Per the documentation the following should throw an OverflowException when using Single.Parse and Double.Parse:\r\n\r\n```csharp\r\nSingle.Parse(\"-3.40282347E+39\");\r\nSingle.Parse(\"3.40282347E+39\");\r\nDouble.Parse(\"-1.7976931348623157E+309\");\r\nDouble.Parse(\"1.7976931348623157E+309\");\r\n```\r\n\r\nAs expected, an exception is thrown on .NET Framework. On .NET Core 3.0.100 I am instead getting +/-Infinity.","Url":"https://github.com/dotnet/corefx/issues/41505","RelatedDescription":"Closed issue \"Inconsistent floating-point parsing exceptions\" (#41505)"},{"Id":"501634095","IsPullRequest":false,"CreatedAt":"2019-10-02T18:27:26","Actor":"tangsaidi","Number":"41503","RawContent":null,"Title":"HttpClient.GetAsync causes the subsequent async method to deadlock","State":"closed","Body":"After I've obtained the result from a `GetAsync()` method, when I try to call `await` on another async method, the program deadlocks for no apparent reason. I suspect it's caused by some side effects introduced by the `HttpClient`, because the program completes as expected when I replace the `GetAsync()` with a fake IO bound operation. \r\n\r\nWould someone help me with how did a deadlock happen? And is this a bug with the `System.Net.Http` library?\r\n\r\nSystem.Net.Http Version (Deadlocks)\r\n```\r\npublic static class DeadLock\r\n{\r\n    static DeadLock()\r\n    {\r\n        // should not block async method in general\r\n        // but static constructor cannot be async\r\n        int result = Setup().Result;\r\n    }\r\n    private static async Task<int> Setup()\r\n    {\r\n        string project = await GetProjects();\r\n\r\n        Console.WriteLine(\"Project retrieved \");\r\n        Console.WriteLine(project);\r\n\r\n        Task<int> simpleRequest = DoNothing(); // The program deadlocks here\r\n\r\n        Console.WriteLine(\"Projects dispatched\");\r\n        return 0;\r\n    }\r\n    private static async Task<string> GetProjects()\r\n    {\r\n        HttpClient httpClient = new HttpClient();\r\n        await httpClient.GetAsync(\"https://www.zazzle.com\");\r\n        return \"Project A\";\r\n    }\r\n    private static async Task<int> DoSomething() {\r\n        Thread.Sleep(2000);\r\n        return 0;\r\n    }\r\n    private static async Task<int> DoNothing() { return 0;}\r\n    public static string Talk() { return \"Hi\"; }\r\n}\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Console.WriteLine(\"Done \" + DeadLock.Talk());\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\n\r\nFake IO-bound operation (Completes)\r\n```\r\npublic static class DeadLock\r\n{\r\n    static DeadLock()\r\n    {\r\n        int result = Setup().Result;\r\n    }\r\n    private static async Task<int> Setup()\r\n    {\r\n        string project = await GetProjects();\r\n\r\n        Console.WriteLine(\"Project retrieved \");\r\n        Console.WriteLine(project);\r\n\r\n        Task<int> simpleRequest = DoNothing();\r\n\r\n        Console.WriteLine(\"Projects dispatched\");\r\n        return 0;\r\n    }\r\n    private static async Task<string> GetProjects()\r\n    {\r\n        await DoSomething();\r\n        return \"Project A\";\r\n    }\r\n    private static async Task<int> DoSomething() {\r\n        Thread.Sleep(2000);\r\n        return 0;\r\n    }\r\n    private static async Task<int> DoNothing() { return 0;}\r\n    public static string Talk() { return \"Hi\"; }\r\n}\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Console.WriteLine(\"Done \" + DeadLock.Talk());\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\n\r\nThe expected output is:\r\n```\r\nProject retrieved\r\nProject A\r\nProjects dispatched\r\nDone Hi\r\n```\r\nWhereas the version with HttpClient gives me\r\n```\r\nProject retrieved\r\nProject A\r\n```\r\nAnd it hangs ...\r\n\r\n\r\nEnvironment\r\nIDE: Microsoft Visual Studio Professional 2017 Version 15.9.14\r\nOS: Windows Server 2019 Standard\r\nCores: 16\r\n\r\nsupportedRuntime version=\"v4.0\" \r\nsku=\".NETFramework,Version=v4.6.1\"\r\n\r\nThanks you!\r\n","Url":"https://github.com/dotnet/corefx/issues/41503","RelatedDescription":"Closed issue \"HttpClient.GetAsync causes the subsequent async method to deadlock\" (#41503)"},{"Id":"501635525","IsPullRequest":true,"CreatedAt":"2019-10-02T17:54:43","Actor":"ViktorHofer","Number":"41504","RawContent":null,"Title":"Increasing arm64 timeout on Linux","State":"closed","Body":"https://github.com/dotnet/core-eng/issues/8011","Url":"https://github.com/dotnet/corefx/pull/41504","RelatedDescription":"Closed or merged PR \"Increasing arm64 timeout on Linux\" (#41504)"},{"Id":"501592531","IsPullRequest":false,"CreatedAt":"2019-10-02T16:20:32","Actor":"jsmcneal","Number":"41501","RawContent":null,"Title":"System.PlatformNotSupportedException raised on System.IO.Ports.SerialPort.GetPortNames()","State":"open","Body":"I am trying to enumerate serial ports in an UWP application using  SerialPort.GetPortNames() because Windows.Devices.SerialCommunication SerialDevice does not enumerate correctly for my target device (returns null).  \r\n\r\nUWP Target: Windows 10 1809\r\nMin Version: Windows 10 1809\r\n\r\nWindows Enterprise 10.01.18362\r\nMS VS Version 15.9.15\r\nMS .NET Framework Version 4.8.0.03752\r\nMicrosoft.Windows.Compatibility Version 3.0.0\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/41501","RelatedDescription":"Open issue \"System.PlatformNotSupportedException raised on System.IO.Ports.SerialPort.GetPortNames()\" (#41501)"},{"Id":"501567131","IsPullRequest":true,"CreatedAt":"2019-10-02T16:14:45","Actor":"mmitche","Number":"41496","RawContent":null,"Title":"[release/3.0] Stabilize packages for 3.0.1","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/41496","RelatedDescription":"Closed or merged PR \"[release/3.0] Stabilize packages for 3.0.1\" (#41496)"},{"Id":"501589504","IsPullRequest":true,"CreatedAt":"2019-10-02T16:14:32","Actor":"idlerboris","Number":"41499","RawContent":null,"Title":"Add tests to improving TimeSpan precision","State":"open","Body":"Fixes [dotnet/corefx#41380](https://github.com/dotnet/corefx/issues/41380)\r\n\r\nRelated coreclr PR [dotnet/coreclr#26992](https://github.com/dotnet/coreclr/pull/26992)","Url":"https://github.com/dotnet/corefx/pull/41499","RelatedDescription":"Open PR \"Add tests to improving TimeSpan precision\" (#41499)"},{"Id":"501582007","IsPullRequest":false,"CreatedAt":"2019-10-02T16:00:48","Actor":"ericstj","Number":"41497","RawContent":null,"Title":"CoreFx tests cannot use nuget packages with runtimeTargets","State":"open","Body":"Related https://github.com/dotnet/source-build/issues/1267\r\n\r\nI was trying to remove the sni package reference from runtime.depproj and instead just reference it from test projects that required it.  This produced the right information in the project assets file, but unfortunately all native assets were being removed in the final deps file.  This appears to be a bug/unexpected behavior from the GenerateDepsFile task.  I think we are confusing the task since we don't build with a shared framework reference in our tests, yet we do run against one.  I found that adding a `RuntimeFramework` item fixed the deps file, but broke the runtimeconfig (it was now missing the framework reference 😕).  I'm sure there is something more subtle going on here.  We should look deeper and make it so that our tests can reference packages with runtime specific assets and avoid putting things in our test shared framework that aren't in the real shared framework.","Url":"https://github.com/dotnet/corefx/issues/41497","RelatedDescription":"Open issue \"CoreFx tests cannot use nuget packages with runtimeTargets\" (#41497)"},{"Id":"501588605","IsPullRequest":false,"CreatedAt":"2019-10-02T15:49:53","Actor":"WilliamSBunin","Number":"41498","RawContent":null,"Title":"DateTime.Now returns incorrect time on windows computer when time zone has changed","State":"open","Body":"# Issue Title\r\n\r\nDateTime.Now returns incorrect time on windows computer when time zone has changed\r\n\r\n# General\r\n\r\n### Details\r\nI was running a windows service created in C# when I noticed my computer was set to the wrong time zone. I switched it to the correct timezone and waited for my service to do something. It did not. I restarted the service and it worked correctly. I created a test app in C# and noticed that If I change my timezone, DateTime.Now does not use the updated time. I then created a test app in .NET Core to see if it had the same behavior, and it does.\r\n\r\n### .NET Core version\r\n.NET Core 2.1\r\n\r\n### Operating System version\r\nWindows 10 Pro - 1903 (18362.207)\r\n\r\n### Test Code\r\n````\r\nusing System;\r\n\r\nnamespace DateTimeNowTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(DateTime.Now);\r\n            Console.ReadLine();\r\n            //Before pressing enter, change time zone\r\n            Console.WriteLine(DateTime.Now);\r\n        }\r\n    }\r\n}\r\n````\r\n","Url":"https://github.com/dotnet/corefx/issues/41498","RelatedDescription":"Open issue \"DateTime.Now returns incorrect time on windows computer when time zone has changed\" (#41498)"},{"Id":"501590540","IsPullRequest":false,"CreatedAt":"2019-10-02T14:41:59","Actor":"Zermond","Number":"41500","RawContent":null,"Title":"Wrong exception of class Bitmap","State":"open","Body":"# Issue Title\r\n\r\nA Wrong exception of class Bitmap\r\n\r\n# General\r\n\r\nI have a code: \r\n\r\n```\r\n            using (Bitmap bitmap = new Bitmap(fileName))\r\n            {\r\n                Console.WriteLine(bitmap.Size);\r\n            }\r\n```\r\n\r\nIf a file on path the fileName null or file not found I have an exception: \r\n`Unhandled Exception: System.ArgumentException: Parameter is not valid.`\r\n\r\nI had this bug with 3 other ways: \r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.505\r\n Commit:    b220231234\r\n\r\nRuntime Environment:\r\n OS Name:     altlinux\r\n OS Version:  8.2\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/lib64/dotnet/sdk/2.1.505/\r\n```\r\n```Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n```\r\n\r\nAnd with docker which I get from based images of Microsoft \r\n`FROM mcr.microsoft.com/dotnet/core/runtime:2.1`\r\n\r\n[ConsoleApp2.zip](https://github.com/dotnet/core/files/3681659/ConsoleApp2.zip)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/41500","RelatedDescription":"Open issue \"Wrong exception of class Bitmap\" (#41500)"},{"Id":"501507278","IsPullRequest":true,"CreatedAt":"2019-10-02T13:58:11","Actor":"filipnavara","Number":"41494","RawContent":null,"Title":"[System.Drawing.Common] Fix argument name in exception of Bitmap constructor","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/41494","RelatedDescription":"Open PR \"[System.Drawing.Common] Fix argument name in exception of Bitmap constructor\" (#41494)"},{"Id":"501497071","IsPullRequest":true,"CreatedAt":"2019-10-02T13:41:31","Actor":"dotnet-maestro[bot]","Number":"41493","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191002.2\r\n- **Date Produced**: 10/2/2019 10:19 AM\r\n- **Commit**: ba2095a5755a040850bdc4b423fab1ca26da4025\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19502.2\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19502.2\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19502.2\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191001.13\r\n- **Date Produced**: 10/2/2019 4:05 AM\r\n- **Commit**: dcc9f626eeb0751d4ba4499f623aac42d2e95c10\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19501.13\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19501.13\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20191001.2\r\n- **Date Produced**: 10/1/2019 12:47 PM\r\n- **Commit**: 8546a718287c4ff280199c45cc0184cbd6153c0c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19501.2\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41493","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard\" (#41493)"},{"Id":"501445621","IsPullRequest":true,"CreatedAt":"2019-10-02T13:40:21","Actor":"dotnet-maestro[bot]","Number":"41492","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191001.4\r\n- **Date Produced**: 10/1/2019 10:24 PM\r\n- **Commit**: c21a409f11386d22c6083198176868d3974de832\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19501.4\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.19501.4\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41492","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#41492)"},{"Id":"501342630","IsPullRequest":false,"CreatedAt":"2019-10-02T08:14:20","Actor":"dnickless","Number":"41491","RawContent":null,"Title":"System.Composition.ImportAttribute cannot be used on fields","State":"open","Body":"I am getting some compilation issue after updating an older codebase to System.Composition.\r\n\r\n![image](https://user-images.githubusercontent.com/985774/66028363-3b0bd200-e4fd-11e9-88a1-b9a7da8507ba.png)\r\n\r\nIs it possible that `AttributeUsage.Field` should be added to the declaration here?\r\n\r\nhttps://github.com/dotnet/corefx/blob/dcc9f626eeb0751d4ba4499f623aac42d2e95c10/src/System.Composition.AttributedModel/src/System/Composition/ImportAttribute.cs#L13\r\n\r\nThe documentation on https://docs.microsoft.com/en-us/dotnet/api/system.composition.importattribute?view=dotnet-plat-ext-3.0 states:\r\n\r\n> Specifies that a property, **field**, or parameter value should be provided by the host container.","Url":"https://github.com/dotnet/corefx/issues/41491","RelatedDescription":"Open issue \"System.Composition.ImportAttribute cannot be used on fields\" (#41491)"},{"Id":"501322883","IsPullRequest":true,"CreatedAt":"2019-10-02T07:27:05","Actor":"wfurt","Number":"41490","RawContent":null,"Title":"improve performance of GetAllNetworkInterfaces on Linux","State":"open","Body":"This is somewhat related to discussion in #32611 and fixes some low-hanging issues. \r\nIt does not change way how we get information but it avoids unnecessary processing.  \r\n\r\nRight now when we iterate through interfaces we always do: \r\n1. get again routing table for v4/6 for each interface. \r\n- this is particularly expensive as kernel needs to walk routing table and dump it as text while processing packets.\r\n- this can be  expensive if we ever run on system with dynamic routing\r\n2. we read and parse /etc/resolver.conf twice for each interface\r\n3. MTU is property of interface on Linux\r\n- we read same value once for each protocol family. \r\n\r\nThis change simple reads common properties once and that it used later instead if creating new copies. \r\n\r\nThe benefit depends on number of interfaces we process. With my Ubuntu VM, I get\r\n\r\n|Branch      |                  Method  |     Mean |     Error |    StdDev | Ratio |\r\n|--|------------------------ |---------:|---------:|---------:|---------:|\r\n|PR| GetAllNetworkInterfaces | 632.1 us | 12.16 us | 32.68 us | 622.5 us |\r\n| master| GetAllNetworkInterfaces | 901.1 us | 21.86 us | 42.64 us | 883.4 us |\r\n\r\nI also have physical machine with two interfaces and few virtual interfaces created by Docker\r\n\r\n|Branch      |                  Method  |     Mean |     Error |    StdDev | Ratio |\r\n|-------|------------------------ |---------:|----------:|----------:|------:|\r\n| PR|GetAllNetworkInterfaces |  1.933 ms | 0.0112 ms | 0.0099 ms |  1.00 |\r\n| master|GetAllNetworkInterfaces | 3.271 ms | 0.0091 ms | 0.0076 ms |  1.69 |\r\n\r\nNote that we still throw while internally while trying to get speed for loopback and virtual interfaces. \r\n```\r\n$ cat /sys/class/net/lo/speed\r\ncat: /sys/class/net/lo/speed: Invalid argument\r\n```","Url":"https://github.com/dotnet/corefx/pull/41490","RelatedDescription":"Open PR \"improve performance of GetAllNetworkInterfaces on Linux\" (#41490)"},{"Id":"501199606","IsPullRequest":true,"CreatedAt":"2019-10-02T05:44:23","Actor":"Anipik","Number":"41486","RawContent":null,"Title":"Fixing the official build","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/41486","RelatedDescription":"Closed or merged PR \"Fixing the official build\" (#41486)"},{"Id":"501246901","IsPullRequest":false,"CreatedAt":"2019-10-02T02:55:44","Actor":"jonwingfield","Number":"41489","RawContent":null,"Title":"WCF on Linux - Kerberos Authentication with UpnEndpointIdentity seems to be sending the wrong name-type to the KDC.","State":"open","Body":"Hi,\r\n\r\nSo I'm really struggling with getting a .NET Core app running on Linux because of Kerberos. The app is a client that is communicating with a WCF service running on a windows server. The Service runs under a service account, so the client specifies a UpnEndpointIdentity. This works great on windows, but when trying to run it on Ubuntu, I'm getting GSSAPI errors. Specifically this: \r\n\r\n>System.ServiceModel.Security.SecurityNegotiationException: Authentication failed, see inner exception.\r\n>  ---> System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception.\r\n> ---> System.ComponentModel.Win32Exception (0x80090020): GSSAPI operation failed with error - Unspecified GSS failure.  Minor code may provide more information (Server not found in Kerberos database).\r\n\r\nI'm no Kerberos expert, but I've started to dig into the Wireshark traces and it looks like on windows it's sending a request to the KDC with an sname name-type of `kRB5-NT-SRV-HST (3)`. On Ubuntu, it's instead sending name-type: `kRB5-NT-PRINCIPAL (1)`. The KDC is rejecting the request with `KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN`, which makes sense since the client is asking for a host instead of a principal.\r\n\r\nAlso, I'm able to correctly acquire a service ticket using `kgetcred` for the UPN, and I can see it correctly sent in the wireshark trace. Is this a bug in .NET Cores interaction with GSSAPI, or WCF, or am I just missing something? @davidsh Wrote some of this code so I'm hoping he can help.\r\n\r\nI'm happy to provide the Wireshark traces if that will help, or any more details needed.\r\n\r\nThanks!","Url":"https://github.com/dotnet/corefx/issues/41489","RelatedDescription":"Open issue \"WCF on Linux - Kerberos Authentication with UpnEndpointIdentity seems to be sending the wrong name-type to the KDC.\" (#41489)"},{"Id":"501243454","IsPullRequest":false,"CreatedAt":"2019-10-02T02:41:03","Actor":"FeodorFitsner","Number":"41488","RawContent":null,"Title":"Building .NET Core 3.0 RTM on FreeBSD","State":"open","Body":"I hope this is the right place to ask.\r\n\r\nAs .NET Core 3.0 matured to RTM are there any works to have an official distro for FreeBSD or at least building guidelines? Right now, top google result is [Building .NET Core 3.x on FreeBSD](https://github.com/dotnet/corefx/wiki/Building-.NET-Core-3.x-on-FreeBSD) guide by @wfurt, but it looks like it's not updated/working with .NET Core 3.0 RTM.\r\n\r\nThank you!","Url":"https://github.com/dotnet/corefx/issues/41488","RelatedDescription":"Open issue \"Building .NET Core 3.0 RTM on FreeBSD\" (#41488)"},{"Id":"501225736","IsPullRequest":false,"CreatedAt":"2019-10-02T01:29:13","Actor":"GrabYourPitchforks","Number":"41487","RawContent":null,"Title":"API proposal: StringSplitOptions.TrimEntries","State":"open","Body":"How many times have we all written the below code?\r\n\r\n```cs\r\nstring[] entries = someString.Split(',');\r\n\r\nfor (int i = 0; i < entries.Length; i++)\r\n{\r\n    string entry = entries[i].Trim();\r\n    /* operate on entry */\r\n}\r\n```\r\n\r\nEven just a cursory search of our own Framework reference sources shows that this is a common pattern:\r\n\r\n * https://referencesource.microsoft.com/#mscorlib/system/enum.cs,434\r\n * https://referencesource.microsoft.com/#mscorlib/system/AppContext/AppContextDefaultValues.cs,122\r\n * https://referencesource.microsoft.com/#PresentationFramework/src/Framework/System/Windows/Annotations/Annotation.cs,665\r\n * https://referencesource.microsoft.com/#System/compmod/system/codedom/compiler/CodeDomConfigurationHandler.cs,262\r\n * https://referencesource.microsoft.com/#System/net/System/Net/_AutoWebProxyScriptHelper.cs,582\r\n * https://referencesource.microsoft.com/#System/net/System/Net/_HeaderInfoTable.cs,84\r\n * etc.\r\n\r\nI propose adding an enum value `StringSplitOptions.TrimEntries` that would make this pattern a bit easier for folks by eliminating the need for developers to call `Trim`.\r\n\r\n```cs\r\n[Flags]\r\npublic enum StringSplitOptions\r\n{\r\n    None = 0,\r\n    RemoveEmptyEntries = 1,\r\n    TrimEntries = 2 /* new value */\r\n}\r\n```\r\n\r\nThe behavior of `string.Split` and related APIs would be as follows:\r\n\r\nIf _None_ or _RemoveEmpyEntries_ is provided, the behavior of `string.Split` under this proposal is unchanged from its behavior today.\r\n\r\nIf _TrimEntries_ is provided by itself, the `string.Split` method performs the equivalent of calling `string.Trim()` on each element of the returned array. That is, no element in the returned array will have leading or trailing whitespace. The array may contain zero-length strings for entries.\r\n\r\n```cs\r\nAssert.Equal(new[] { \"Doe\", \"John\" }, \"Doe, John\".Split(',', StringSplitOptions.TrimEntries));\r\nAssert.Equal(new[] { \"1\", \"\", \"2\", \"3\" }, \"1, , 2 , 3 \".Split(',', StringSplitOptions.TrimEntries));\r\nAssert.Equal(new[] { \"\", \"\" }, \", \".Split(',', StringSplitOptions.TrimEntries));\r\n```\r\n\r\nIf _TrimEntries_ and _RemoveEmptyEntries_ are both provided, the entries are trimmed first, _and then_ zero-length entries are removed from the returned array.\r\n\r\n```cs\r\nAssert.Equal(new[] { \"Doe\", \"John\" }, \"Doe, John\".Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries));\r\nAssert.Equal(new[] { \"1\", \"2\", \"3\" }, \"1, , 2 , 3 \".Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries));\r\nAssert.Equal(new string[0], \", \".Split(',', StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries));\r\n```\r\n\r\nAdding this enum value may be considered a breaking change if we expect that third-party components aside from `string.Split` are _consuming_ the `StringSplitOptions` enum, not simply generating the value. In theory any such third-party components should be checking their inputs and rejecting unknown flags.","Url":"https://github.com/dotnet/corefx/issues/41487","RelatedDescription":"Open issue \"API proposal: StringSplitOptions.TrimEntries\" (#41487)"},{"Id":"501197396","IsPullRequest":false,"CreatedAt":"2019-10-01T23:34:44","Actor":"eiriktsarpalis","Number":"41485","RawContent":null,"Title":"HttpStress: Automate stress runs","State":"open","Body":"Forking from conversation started in #41069 per @ViktorHofer's request.\r\n\r\nWe keep a [standalone console app](https://github.com/dotnet/corefx/tree/master/src/System.Net.Http/tests/StressTests/HttpStress) in the corefx repo which stress tests using the existing sdk. Currently, we run this by manually building corefx and running the suite against compiled bits. We're looking for a way to trigger this automatically against PR branches, ideally using an `/azp` subcommand.\r\n\r\nThings to consider:\r\n\r\n* Should probably support multiple OSes (e.g. Windows, Linux & OSX).\r\n* Should be allowed to run for arbitrary amounts of time.\r\n* Manual auditing of stress run logs (as opposed to automatically passing or failing runs).\r\n* More long-term, we should probably consider hosting client and server in separate VMs for a variety of reasons.\r\n* Want to use the httpstress as a pilot project for adding additional networking stress/performance tests. We're also looking at [aspnet/benchmarks](https://github.com/aspnet/benchmarks) for ideas here.\r\n* Should stress/performance projects live in the corefx repo? We already have the [performance](https://github.com/dotnet/performance) repo for hosting microbenchmarks, so wondering if it makes sense to do something similar with networking.\r\n\r\nI should note that @jkotalik has created an Azure pipeline that [just runs the stress suite](https://dnceng.visualstudio.com/public/_build?definitionId=560&_a=summary). I'd argue for the sake of simplicity that we should probably do just that and iterate as necessary.","Url":"https://github.com/dotnet/corefx/issues/41485","RelatedDescription":"Open issue \"HttpStress: Automate stress runs\" (#41485)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"501772064","IsPullRequest":true,"CreatedAt":"2019-10-03T05:02:31","Actor":"RikkiGibson","Number":"39008","RawContent":null,"Title":"Revert \"Use new Span/Memory APIs on System.Collections.Immutable\"","State":"closed","Body":"Reverts dotnet/roslyn#38809\r\n\r\nGetting VS to be happy with the new System.Collections.Immutable version is proving pretty tricky, so we are gonna have this PR here in case we need to flow it in to get a working insertion.","Url":"https://github.com/dotnet/roslyn/pull/39008","RelatedDescription":"Closed or merged PR \"Revert \"Use new Span/Memory APIs on System.Collections.Immutable\"\" (#39008)"},{"Id":"501854273","IsPullRequest":false,"CreatedAt":"2019-10-03T05:02:11","Actor":"RikkiGibson","Number":"39017","RawContent":null,"Title":"Update System.Collections.Immutable to 1.2.4.0 in VS","State":"open","Body":"#38809 updated System.Collections.Immutable to take advantage of new API but had to be reverted due to issues integrating into VS.\r\n\r\nAt this point, we get type load exceptions in test runs. It's possible that some more projects in VS need to have binding redirects added. Once we get that figured out by making a test insertion in a dev branch we can recreate #38809 and pull into master again.\r\n\r\n/cc @agocke @tmat @ryzngard","Url":"https://github.com/dotnet/roslyn/issues/39017","RelatedDescription":"Open issue \"Update System.Collections.Immutable to 1.2.4.0 in VS\" (#39017)"},{"Id":"501810538","IsPullRequest":true,"CreatedAt":"2019-10-03T01:57:56","Actor":"RikkiGibson","Number":"39016","RawContent":null,"Title":"Update config for snap","State":"open","Body":"Updates publish data and version for 16.4-p3 snap. Merge after we have everything we need merged for a good signed build out of master-vs-deps.","Url":"https://github.com/dotnet/roslyn/pull/39016","RelatedDescription":"Open PR \"Update config for snap\" (#39016)"},{"Id":"501793847","IsPullRequest":true,"CreatedAt":"2019-10-03T00:43:38","Actor":"dibarbet","Number":"39015","RawContent":null,"Title":"Track local telemetry during remote LSP experimentation for comparison.","State":"open","Body":"track local telemetry for syntax classifications during LSP guest session.  the idea here is that walking the tree is fast, longest operation is actually building it, so that's the best comparison to make","Url":"https://github.com/dotnet/roslyn/pull/39015","RelatedDescription":"Open PR \"Track local telemetry during remote LSP experimentation for comparison.\" (#39015)"},{"Id":"501247768","IsPullRequest":false,"CreatedAt":"2019-10-03T00:38:05","Actor":"akiraKido","Number":"38993","RawContent":null,"Title":"Pattern matching: override deconstruct","State":"closed","Body":"I'm not sure if this is the right place for this issue. If it is inappropriate for this repository, I would be thankful if you could direct me to a more suitable repository. Thank you in advance.\r\n\r\n---\r\n\r\nFor pattern matching, I'd like to deconstruct a certain struct I made as follows:\r\n\r\n\tpublic struct Result<T>\r\n\t{\r\n\t\tpublic readonly bool IsSuccess;\r\n\t\tpublic readonly T Value;\r\n\t\tpublic readonly string? Message;\r\n\r\n\t\tprivate Result(bool success, T value, string? message) =>\r\n\t\t\t(IsSuccess, Value, Message) = (success, value, message);\r\n\r\n\t\tpublic void Deconstruct(out bool success, out T value, out string? message) =>\r\n\t\t\t(success, value, message) = (IsSuccess, Value, Message);\r\n\r\n\t\tpublic void Deconstruct(out bool success, out string? message) =>\r\n\t\t\t(success, message) = (IsSuccess, Message);\r\n\t\tpublic void Deconstruct(out bool success, out T value) =>\r\n\t\t\t(success, value) = (IsSuccess, Value);\r\n\r\n\r\n\t\tpublic static Result<T> Fail(string message) => new Result<T>(false, default, message);\r\n\t\tpublic static Result<T> Success(T value) => new Result<T>(true, value, null);\r\n\t}\r\n\r\nso that I would be able to do something like this:\r\n\r\n\tswitch (TryGetValue(ref input, ref length))\r\n\t{\r\n\t\tcase (false, string e):\r\n\t\t\treturn Result<JsonNode>.Fail(e);\r\n\t\tcase (true, JsonNode value):\r\n\t\t\tvalues.Add(value);\r\n\t\t\tbreak;\r\n\t}\r\n\r\nThis currently doesn't compile, saying that the deconstruction is ambiguous, despite explicitly declaring their types.\r\n\r\nThis works:\r\n\r\n\tswitch (TryGetValue(ref input, ref length))\r\n\t{\r\n\t\tcase (false, _, var e):\r\n\t\t\treturn Result<JsonNode>.Fail(e);\r\n\t\tcase (true, var value, _):\r\n\t\t\tvalues.Add(value);\r\n\t\t\tbreak;\r\n\t}\r\n\r\nbut the `_` seems verbose to me.","Url":"https://github.com/dotnet/roslyn/issues/38993","RelatedDescription":"Closed issue \"Pattern matching: override deconstruct\" (#38993)"},{"Id":"501788712","IsPullRequest":true,"CreatedAt":"2019-10-03T00:21:47","Actor":"JoeRobich","Number":"39014","RawContent":null,"Title":"Enable warnAsError for correctness builds","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/39014","RelatedDescription":"Open PR \"Enable warnAsError for correctness builds\" (#39014)"},{"Id":"501785054","IsPullRequest":true,"CreatedAt":"2019-10-03T00:07:07","Actor":"JoeRobich","Number":"39013","RawContent":null,"Title":"NoWarn NU5128 instead of suppressing dependencies","State":"open","Body":"Our NuGet meta-packages were not being generated with package dependencies because they were being suppressed.  Temporary workaround for https://github.com/NuGet/Home/issues/8583","Url":"https://github.com/dotnet/roslyn/pull/39013","RelatedDescription":"Open PR \"NoWarn NU5128 instead of suppressing dependencies\" (#39013)"},{"Id":"501783801","IsPullRequest":true,"CreatedAt":"2019-10-03T00:02:16","Actor":"dotnet-bot","Number":"39012","RawContent":null,"Title":"Merge master to features/local-function-attributes","State":"open","Body":"\nThis is an automatically generated pull request from master into features/local-function-attributes.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/local-function-attributes\ngit reset --hard upstream/features/local-function-attributes\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/local-function-attributes --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39012","RelatedDescription":"Open PR \"Merge master to features/local-function-attributes\" (#39012)"},{"Id":"501783766","IsPullRequest":true,"CreatedAt":"2019-10-03T00:02:09","Actor":"dotnet-bot","Number":"39011","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39011","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#39011)"},{"Id":"501783581","IsPullRequest":true,"CreatedAt":"2019-10-03T00:01:25","Actor":"dotnet-bot","Number":"39010","RawContent":null,"Title":"Merge release/dev16.4-preview1-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.4-preview1-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.4-preview1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39010","RelatedDescription":"Open PR \"Merge release/dev16.4-preview1-vs-deps to master-vs-deps\" (#39010)"},{"Id":"501779745","IsPullRequest":true,"CreatedAt":"2019-10-02T23:51:05","Actor":"agocke","Number":"39009","RawContent":null,"Title":"Merge master to records","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/39009","RelatedDescription":"Closed or merged PR \"Merge master to records\" (#39009)"},{"Id":"501695425","IsPullRequest":true,"CreatedAt":"2019-10-02T23:43:52","Actor":"dotnet-bot","Number":"39002","RawContent":null,"Title":"Merge release/dev16.4-preview1-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.4-preview1-vs-deps into master-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.4-preview1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39002","RelatedDescription":"Closed or merged PR \"Merge release/dev16.4-preview1-vs-deps to master-vs-deps\" (#39002)"},{"Id":"501204657","IsPullRequest":true,"CreatedAt":"2019-10-02T23:43:27","Actor":"dotnet-bot","Number":"38991","RawContent":null,"Title":"Merge master to features/local-function-attributes","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/local-function-attributes.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/local-function-attributes\ngit reset --hard upstream/features/local-function-attributes\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/local-function-attributes --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38991","RelatedDescription":"Closed or merged PR \"Merge master to features/local-function-attributes\" (#38991)"},{"Id":"501204623","IsPullRequest":true,"CreatedAt":"2019-10-02T23:43:10","Actor":"dotnet-bot","Number":"38990","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38990","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#38990)"},{"Id":"501732067","IsPullRequest":true,"CreatedAt":"2019-10-02T22:47:44","Actor":"dustincoleman","Number":"39004","RawContent":null,"Title":"Fix favorites for expansions of nullables","State":"closed","Body":"Children of nullables in member expansions should support being added as favorites.","Url":"https://github.com/dotnet/roslyn/pull/39004","RelatedDescription":"Closed or merged PR \"Fix favorites for expansions of nullables\" (#39004)"},{"Id":"501448869","IsPullRequest":true,"CreatedAt":"2019-10-02T22:44:18","Actor":"dotnet-maestro[bot]","Number":"38996","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191001.4\r\n- **Date Produced**: 10/1/2019 10:24 PM\r\n- **Commit**: c21a409f11386d22c6083198176868d3974de832\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19501.4\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/38996","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#38996)"},{"Id":"501634348","IsPullRequest":true,"CreatedAt":"2019-10-02T22:25:28","Actor":"jasonmalinowski","Number":"38998","RawContent":null,"Title":"Delete some dead code from the rename test harness","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38998","RelatedDescription":"Closed or merged PR \"Delete some dead code from the rename test harness\" (#38998)"},{"Id":"501754538","IsPullRequest":false,"CreatedAt":"2019-10-02T22:16:46","Actor":"stanciuadrian","Number":"39007","RawContent":null,"Title":"`default` needs explicit type in if cond expr","State":"open","Body":"**Version Used**: Visual Studio Community 2019 Preview v16.4.0 preview 1.0\r\n\r\n**Steps to Reproduce**:\r\n1. Check `.NET Core 3.0 SDK` in the Individual Components section of the installer\r\n2. Compile this .NET Core console program:\r\n```csharp\r\nclass Program\r\n{\r\n    public interface Iface { }\r\n    static Iface GetImpl() => null;\r\n    static void Main(string[] args)\r\n    {\r\n        var impl = GetImpl();\r\n\r\n        if (impl != default)\r\n        {\r\n\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n[Sharplab.io](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABATAAmwEYB2AWACgBvS/OwgZnwEsA7eBAMwgGM58Aktz74q+AL616xAGyDh/AOJwYAsAAcANgAoAlPgC8APnysArps0BuKXVmEALPgCyENtuIAGANoBdfBAIAOZQurai4fT4AG6BLBqahvjKqgl6NhSR9Myc+NrMCfgAhAb4KHDcFjBhFFFRNJm1dXSSTS2UrUA===) compiles this code successfully with `Default (3.3.1)` but fails on `master (23 Sep 2019)`.\r\n \r\n**Expected Behavior**: compilation successful\r\nWas there a spec change?\r\n\r\n**Actual Behavior**:\r\nCompilation fails on the `if` line:\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tCS0019\tOperator '!=' cannot be applied to operands of type 'Program.Iface' and 'default'\tdefault1\tC:\\Work\\source\\repos\\default1\\Program.cs\t12\tActive\r\n```\r\n\r\nChanging the condition to `impl != default(Iface)` fixes the error.","Url":"https://github.com/dotnet/roslyn/issues/39007","RelatedDescription":"Open issue \"`default` needs explicit type in if cond expr\" (#39007)"},{"Id":"501746677","IsPullRequest":true,"CreatedAt":"2019-10-02T21:54:21","Actor":"TIHan","Number":"39006","RawContent":null,"Title":"F# External Access - Removed loc entries that are not used.","State":"open","Body":"This removes some resource entries that are not used in the resx file, specifically for F# external access. It effectively means we don't need to worry about loc for them. We also do not use these resources in FSharp.Editor.","Url":"https://github.com/dotnet/roslyn/pull/39006","RelatedDescription":"Open PR \"F# External Access - Removed loc entries that are not used.\" (#39006)"},{"Id":"501743731","IsPullRequest":true,"CreatedAt":"2019-10-02T21:46:43","Actor":"jasonmalinowski","Number":"39005","RawContent":null,"Title":"Delete tools that were migrated to roslyn-tools","State":"open","Body":"These live in https://github.com/dotnet/roslyn-tools and should have been deleted long ago.","Url":"https://github.com/dotnet/roslyn/pull/39005","RelatedDescription":"Open PR \"Delete tools that were migrated to roslyn-tools\" (#39005)"},{"Id":"501708986","IsPullRequest":true,"CreatedAt":"2019-10-02T20:28:04","Actor":"bgrainger","Number":"39003","RawContent":null,"Title":"Fix incorrect diagnostic message for \"using\"","State":"open","Body":"This removes the incorrect phrase \" or implement a suitable 'Dispose' method\" when `using` a type that doesn't implement `IDisposable`.\r\n\r\nFor #33746.","Url":"https://github.com/dotnet/roslyn/pull/39003","RelatedDescription":"Open PR \"Fix incorrect diagnostic message for \"using\"\" (#39003)"},{"Id":"501693728","IsPullRequest":false,"CreatedAt":"2019-10-02T19:56:14","Actor":"jnm2","Number":"39001","RawContent":null,"Title":"'Generate method' action does not appear on name token following `?.`","State":"open","Body":"**Version Used**: Visual Studio 16.3.1\r\n\r\n'Generate method' should appear for `foo?.NonExistentMethodName`, whether `foo` is a reference or value type. It currently shows up for neither.\r\n\r\nI ran into this in several unrelated projects when changing the type of `foo` somewhere else in the file and then wanting to generate the same methods that had been called on the type it used to have.\r\n\r\nThe workaround is to delete the `?` and add `.Value` if `foo` is a value-typed expression, generate the method, then manually undo.","Url":"https://github.com/dotnet/roslyn/issues/39001","RelatedDescription":"Open issue \"'Generate method' action does not appear on name token following `?.`\" (#39001)"},{"Id":"501204432","IsPullRequest":true,"CreatedAt":"2019-10-02T18:29:00","Actor":"dotnet-bot","Number":"38989","RawContent":null,"Title":"Merge release/dev16.4-preview1-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.4-preview1-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.4-preview1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38989","RelatedDescription":"Closed or merged PR \"Merge release/dev16.4-preview1-vs-deps to master-vs-deps\" (#38989)"},{"Id":"501649615","IsPullRequest":false,"CreatedAt":"2019-10-02T18:28:14","Actor":"CyrusNajmabadi","Number":"39000","RawContent":null,"Title":"Crash in OOP tore down VS (hard crash, not yellow bar).","State":"closed","Body":"Watson bucket and other relevant information.\r\n\r\n```\r\nFault bucket 125730739576, type 5\r\nEvent Name: PerfWatsonVS12Data\r\nResponse: Not available\r\nCab Id: 1196763729810304088\r\n\r\nProblem signature:\r\nP1: PerfWatsonTcdb\r\nP2: 0\r\nP3: 0\r\nP4: 0\r\nP5: 0\r\nP6: \r\nP7: \r\nP8: \r\nP9: \r\nP10: \r\n\r\nAttached files:\r\n\\\\?\\C:\\Users\\cyrus\\AppData\\Local\\Temp\\VSTelem.Out\\201910021820_D16.4_16.4.29319.158_17696_b97f4571-7b9e-4f72-a70f-8ea07281a5cd.tcdb\r\n\\\\?\\C:\\ProgramData\\Microsoft\\Windows\\WER\\Temp\\WER6675.tmp.WERInternalMetadata.xml\r\n\\\\?\\C:\\ProgramData\\Microsoft\\Windows\\WER\\Temp\\WER66A5.tmp.xml\r\nWPR_initiated_DiagTrackMiniLogger_OneTrace User Logger 20190930 1 Event Collector_0_inject.etl\r\n\\\\?\\C:\\Users\\cyrus\\AppData\\Local\\Temp\\WER66E5.tmp.etl\r\nWPR_initiated_DiagTrackMiniLogger_WPR System Collector_inject.etl\r\n\\\\?\\C:\\Users\\cyrus\\AppData\\Local\\Temp\\WER66F5.tmp.etl\r\n\\\\?\\C:\\ProgramData\\Microsoft\\Windows\\WER\\Temp\\WER6706.tmp.csv\r\n\\\\?\\C:\\ProgramData\\Microsoft\\Windows\\WER\\Temp\\WER6765.tmp.txt\r\n\\\\?\\C:\\Users\\cyrus\\AppData\\Local\\Temp\\WER6A90.tmp.WERDataCollectionStatus.txt\r\n\r\nThese files may be available here:\r\n\\\\?\\C:\\ProgramData\\Microsoft\\Windows\\WER\\ReportArchive\\NonCritical_PerfWatsonTcdb_688f135dd185f2a8133a474a2518efc6ce6cc4a_00000000_cab_9769bf93-8256-46a3-9794-2743f97428f4\r\n\r\nAnalysis symbol: \r\nRechecking for solution: 0\r\nReport Id: 9769bf93-8256-46a3-9794-2743f97428f4\r\nReport Status: 268435464\r\nHashed bucket: fb30d2b9a7acf0305d4da51668259751\r\nCab Guid: 797189b6-552d-47a5-b09b-c245836a2c58\r\n```\r\n\r\n```\r\nFaulting application name: devenv.exe, version: 16.4.29319.158, time stamp: 0x5d845bb8\r\nFaulting module name: unknown, version: 0.0.0.0, time stamp: 0x00000000\r\nException code: 0x80131623\r\nFault offset: 0x62ac6b4a\r\nFaulting process id: 0x4ee8\r\nFaulting application start time: 0x01d578b6a67c1fc8\r\nFaulting application path: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\devenv.exe\r\nFaulting module path: unknown\r\nReport Id: bff26ea4-c774-46df-9501-c81b19986300\r\nFaulting package full name: \r\nFaulting package-relative application ID: \r\n```\r\n\r\n```\r\nApplication: devenv.exe\r\nFramework Version: v4.0.30319\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage: System.InvalidOperationException: This instance must be flushed before being reinitialized.\r\n   at Nerdbank.Streams.BufferTextWriter.Initialize(IBufferWriter`1 bufferWriter, Encoding encoding)\r\n   at StreamJsonRpc.JsonMessageFormatter.WriteJToken(IBufferWriter`1 contentBuffer, JToken json)\r\n   at StreamJsonRpc.JsonMessageFormatter.Serialize(IBufferWriter`1 contentBuffer, JsonRpcMessage message)\r\n   at StreamJsonRpc.HeaderDelimitedMessageHandler.Write(JsonRpcMessage content, CancellationToken cancellationToken)\r\n   at StreamJsonRpc.PipeMessageHandler.WriteCoreAsync(JsonRpcMessage content, CancellationToken cancellationToken)\r\n   at StreamJsonRpc.MessageHandlerBase.<WriteAsync>d__15.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at StreamJsonRpc.JsonRpc.<TransmitAsync>d__115.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Threading.Tasks.ValueTask.ThrowIfCompletedUnsuccessfully()\r\n   at StreamJsonRpc.JsonRpc.<InvokeCoreAsync>d__94`1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.ServiceHub.Framework.RemoteServiceBroker.<GetPipeAsync>d__29.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.ServiceHub.Client.HubClient.<GetPipeAsync>d__33.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.ServiceHub.Client.HubClient.<RequestServiceAsync>d__30.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.<RetryRemoteCallAsync>d__0`2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.Connections.<RequestServiceAsync>d__1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.ConnectionManager.<TryCreateNewConnectionAsync>d__14.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.ConnectionManager.<TryGetConnectionFromPoolAsync>d__13.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.Remote.RemoteHostClientExtensions.<TryRunRemoteAsync>d__13.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientServiceFactory.SolutionChecksumUpdater.<>c__DisplayClass17_0.<<PushTextChanges>b__0>d.MoveNext()\r\nStack:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1<System.Exception>)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception)\r\n   at Roslyn.Utilities.TaskExtensions.ReportFatalErrorWorker(System.Threading.Tasks.Task, System.Object)\r\n   at System.Threading.Tasks.ContinuationTaskFromTask.InnerInvoke()\r\n   at System.Threading.Tasks.Task.Execute()\r\n   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)\r\n   at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task, Boolean)\r\n   at System.Threading.Tasks.TaskScheduler.TryRunInline(System.Threading.Tasks.Task, Boolean)\r\n   at System.Threading.Tasks.TaskContinuation.InlineIfPossibleOrElseQueue(System.Threading.Tasks.Task, Boolean)\r\n   at System.Threading.Tasks.StandardTaskContinuation.Run(System.Threading.Tasks.Task, Boolean)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task.FinishStageTwo()\r\n   at System.Threading.Tasks.Task.Finish(Boolean)\r\n   at System.Threading.Tasks.Task`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetException(System.Object)\r\n   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].TrySetFromTask(System.Threading.Tasks.Task, Boolean)\r\n   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessInnerTask(System.Threading.Tasks.Task)\r\n   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].ProcessCompletedOuterTask(System.Threading.Tasks.Task)\r\n   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InvokeCore(System.Threading.Tasks.Task)\r\n   at System.Threading.Tasks.UnwrapPromise`1[[System.Threading.Tasks.TaskExtensions+VoidResult, System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].Invoke(System.Threading.Tasks.Task)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n   at System.Threading.Tasks.Task.FinishStageTwo()\r\n   at System.Threading.Tasks.Task.Finish(Boolean)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)\r\n   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n\r\n```","Url":"https://github.com/dotnet/roslyn/issues/39000","RelatedDescription":"Closed issue \"Crash in OOP tore down VS (hard crash, not yellow bar).\" (#39000)"},{"Id":"501636986","IsPullRequest":true,"CreatedAt":"2019-10-02T17:55:20","Actor":"jasonmalinowski","Number":"38999","RawContent":null,"Title":"Update Formatter.OrganizeImportsAsync to make the cancellation token optional","State":"open","Body":"Resolves https://github.com/dotnet/roslyn/issues/38758","Url":"https://github.com/dotnet/roslyn/pull/38999","RelatedDescription":"Open PR \"Update Formatter.OrganizeImportsAsync to make the cancellation token optional\" (#38999)"},{"Id":"501491548","IsPullRequest":false,"CreatedAt":"2019-10-02T13:32:14","Actor":"Xargonus","Number":"38997","RawContent":null,"Title":"VS 2019 intellisense \"is\" operator not suggesting enum values","State":"open","Body":"**Version Used**: \r\nVS 2019 16.3.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. var a = DayOfWeek.Monday;\r\n2. bool equalsMonday = a == DayOfWeek.Monday\r\n3. bool isMonday = a is DayOfWeek.Monday\r\n\r\n**Expected Behavior**:\r\n\r\nIntellisense suggests DayOfWeek.{Monday, Tuesday,...} values after typing \"DayOfWeek.\" for both line 2. and 3.\r\n\r\n**Actual Behavior**:\r\n\r\nIntellisense suggests this only for the 2nd line, not when using the is operator.\r\n\r\n2:\r\n![image](https://user-images.githubusercontent.com/26150359/66048405-c0a57700-e529-11e9-9cc1-6565868dd111.png)\r\n\r\n\r\n3:\r\n![image](https://user-images.githubusercontent.com/26150359/66048375-b3888800-e529-11e9-836b-6238986f8ac7.png)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38997","RelatedDescription":"Open issue \"VS 2019 intellisense \"is\" operator not suggesting enum values\" (#38997)"},{"Id":"501348709","IsPullRequest":false,"CreatedAt":"2019-10-02T08:28:04","Actor":"zlatanov","Number":"38995","RawContent":null,"Title":"Incorrect IDE0044 (Make field readonly) when used with \"ref\"","State":"open","Body":"**Version Used**: 16.3.1\r\n\r\n**Steps to Reproduce**:\r\n``` csharp\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    private static Int32 Value;\r\n\r\n    static void Main()\r\n    {\r\n        ref var value = ref Value;\r\n        value += 1;\r\n    }\r\n}\r\n```\r\n**Expected Behavior**: No errors / warnings / messages.\r\n\r\n**Actual Behavior**:  IDE0044\tMake field readonly.\r\n\r\nHere is a counter example where it works as expected:\r\n``` csharp\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    private static Int32 Value;\r\n\r\n    static void Main()\r\n    {\r\n        ref var value = ref Value;\r\n        Increment( ref Value );\r\n    }\r\n\r\n    static void Increment( ref Int32 value ) => value += 1;\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/38995","RelatedDescription":"Open issue \"Incorrect IDE0044 (Make field readonly) when used with \"ref\"\" (#38995)"},{"Id":"501321098","IsPullRequest":false,"CreatedAt":"2019-10-02T07:22:25","Actor":"bencyoung","Number":"38994","RawContent":null,"Title":"Attribute async state machines for better introspection","State":"open","Body":"Hi,\r\n\r\nI've recently written a PoC of an async builder that allows you to suspend the thread of execution to disk and rehydrate at a later point, or even on a different machine. It appears to work ok (as long as the captures are serializable obviously), but writing the code to demangle the state machine fields was tricky and I'm pretty sure it's not right now. I've attached the code but it would be really nice if the state machine builder put some attributes on the fields so we can inspect them. E.g. \r\n\r\n[StateMachineState] on the integer state field\r\n[StateMachineInput(\"i\")] for the method arguments\r\n[StateMachineLocal(\"j\")] for captured locals\r\n[StateMachineAwaiter(index)] or similar for the awaiters\r\n\r\nI don't think it needs a lot more. Having exposed the state machine builders I'm not sure the internals of state machines could be changed easily so I don't think this is adding much of a backwards compatibility issue.\r\n\r\nOn a side note, is it possible to remove the debug bypass on the statemachines to see what's happening under the cover more easily?\r\n\r\nThanks,\r\nBen Young\r\n\r\n```csharp\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Runtime.ExceptionServices;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace MethodBuilderTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Started\");\r\n            Flow.Run(() => MyFlowData());\r\n        }\r\n\r\n        static async FlowData MyFlowData()\r\n        {\r\n            int i = 0;\r\n            var numbers = new List<int>();\r\n            while (true)\r\n            {\r\n                await Letters(i++);\r\n                numbers.Add(i);\r\n                await Flow.Checkpoint();\r\n                await Task.Delay(TimeSpan.FromSeconds(1));\r\n                Console.WriteLine(\"  \" + numbers.Count);\r\n            }\r\n        }\r\n\r\n        static async FlowData Letters(int i)\r\n        {\r\n            for (int j = 0; j < 5; ++j)\r\n            {\r\n                Console.WriteLine(i.ToString() + \" \" + (char)('A' + j));\r\n                await Flow.Checkpoint();\r\n                await Task.Delay(TimeSpan.FromSeconds(0.5));\r\n            }\r\n        }\r\n    }\r\n\r\n    static class Flow\r\n    {\r\n        internal static FlowContext FlowContext { get; set; }\r\n\r\n        public static void Run(Func<FlowData> data)\r\n        {\r\n            FlowContext = new FlowContext();\r\n            try\r\n            {\r\n                data().GetAwaiter().GetResult();\r\n            }\r\n            finally\r\n            {\r\n                FlowContext = null;\r\n            }\r\n        }\r\n\r\n        public static FlowData Checkpoint()\r\n        {\r\n            var data = new FlowData();\r\n            data.SetResult();\r\n            return data;\r\n        }\r\n    }\r\n\r\n    class FlowContext\r\n    {\r\n    }\r\n\r\n    struct Void\r\n    {\r\n    }\r\n\r\n    [AsyncMethodBuilder(typeof(FlowDataMethodBuilder))]\r\n    class FlowData : INotifyCompletion\r\n    {\r\n        private ExceptionDispatchInfo exception;\r\n\r\n        [JsonProperty]\r\n        private bool hasResult;\r\n\r\n        public FlowData GetAwaiter() => this;\r\n\r\n        public void GetResult()\r\n        {\r\n            if (this.exception != null)\r\n            {\r\n                this.exception.Throw();\r\n            }\r\n\r\n            while (!this.hasResult)\r\n            {\r\n                Thread.Sleep(0);\r\n            }\r\n        }\r\n\r\n        public bool IsCompleted => this.exception != null;\r\n\r\n        public void OnCompleted(Action completion)\r\n        {\r\n            Task.Run(completion);\r\n        }\r\n\r\n        internal void SetException(Exception e)\r\n        {\r\n            this.exception = ExceptionDispatchInfo.Capture(e);\r\n        }\r\n\r\n        internal void SetResult()\r\n        {\r\n            this.hasResult = true;\r\n        }\r\n    }\r\n\r\n    [AsyncMethodBuilder(typeof(FlowDataMethodBuilder))]\r\n    class StateMachineFlowData : FlowData\r\n    {\r\n        public StateMachineFlowData(string name)\r\n        {\r\n            this.stateMachineName = name;\r\n        }\r\n\r\n        [JsonProperty]\r\n        internal string stateMachineName;\r\n    }\r\n\r\n    class FlowState<TStateMachine> \r\n    {\r\n        internal TStateMachine stateMachine;\r\n\r\n        public void Debug()\r\n        {\r\n            Console.WriteLine($\"{this.stateMachine.GetType().IsClass}\");\r\n            Console.WriteLine(string.Join(\r\n                Environment.NewLine,\r\n                this.Capture()\r\n                    .Select(f => $\"{f.Key} {f.Value}\")));\r\n        }\r\n\r\n        public IReadOnlyDictionary<string, object> Capture()\r\n        {\r\n            return this.stateMachine\r\n                    .GetType()\r\n                    .GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)\r\n                    .Select(f => new { Name = DemangleName(f.Name), Value = f.GetValue(this.stateMachine), Type = f.FieldType })\r\n                    .Where(f => !string.IsNullOrEmpty(f.Name) && !typeof(ICriticalNotifyCompletion).IsAssignableFrom(f.Type))\r\n                    .ToDictionary(f => f.Name, f => f.Value);\r\n        }\r\n\r\n        public void RestoreState<TBuilder>(TBuilder builder, IReadOnlyDictionary<string, object> state)\r\n        {\r\n            var tr = __makeref(this.stateMachine);\r\n            foreach (var field in this.stateMachine\r\n                    .GetType()\r\n                    .GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)\r\n                    .Select(f => new { Name = DemangleName(f.Name), Field = f })\r\n                    .Where(f => !string.IsNullOrEmpty(f.Name)))\r\n            { \r\n                if(state.TryGetValue(field.Name, out var value) && value != null)\r\n                {\r\n                    field.Field.SetValueDirect(tr, field.Field.FieldType.IsAssignableFrom(value.GetType()) ? value : Convert.ChangeType(value, field.Field.FieldType));\r\n                }\r\n            }\r\n\r\n            this.stateMachine.GetType().GetField(\"<>t__builder\").SetValueDirect(tr, builder);\r\n        }\r\n\r\n        private static string DemangleName(string name)\r\n        {\r\n            if(name.StartsWith(\"<>\"))\r\n            {\r\n                if(name.Contains(\"__state\"))\r\n                {\r\n                    return \"state!\";\r\n                }\r\n                else if(name.StartsWith(\"<>u_\"))\r\n                {\r\n                    return \"awaiter\" + name.Substring(\"<>u_\".Length) + \"!\";\r\n                }\r\n\r\n                return null;\r\n            }\r\n            else if (name.StartsWith(\"<\"))\r\n            {\r\n                return name.Substring(1, name.IndexOf('>', 1) - 1) + \"_local!\";\r\n            }\r\n\r\n            return name;\r\n        }\r\n    }\r\n\r\n    class FlowDataMethodBuilder\r\n    {\r\n        private readonly static JsonSerializer Serializer = JsonSerializer.Create(new JsonSerializerSettings\r\n        {\r\n            PreserveReferencesHandling = PreserveReferencesHandling.All,\r\n            TypeNameHandling = TypeNameHandling.All,\r\n            Formatting = Formatting.Indented\r\n        });\r\n\r\n        private string fileName;\r\n\r\n        private Type stateMachineType;\r\n\r\n        private object state;\r\n\r\n        private StateMachineFlowData result;\r\n\r\n        public static FlowDataMethodBuilder Create() => new FlowDataMethodBuilder();\r\n\r\n        public FlowData Task => this.result;\r\n\r\n        public void Start<TStateMachine>(ref TStateMachine stateMachine)\r\n            where TStateMachine : IAsyncStateMachine\r\n        {\r\n            if(Flow.FlowContext == null)\r\n            {\r\n                throw new InvalidOperationException(\"No flow context\");\r\n            }\r\n\r\n            this.stateMachineType = typeof(TStateMachine);\r\n            this.fileName = this.FileName<TStateMachine>();\r\n            this.result = new StateMachineFlowData(this.stateMachineType.FullName);\r\n\r\n            var flow = EnsureState(ref stateMachine);\r\n\r\n            this.RestoreState(flow);\r\n\r\n            flow.stateMachine.MoveNext();\r\n        }\r\n\r\n        public void SetStateMachine(IAsyncStateMachine stateMachine)\r\n        {\r\n        }\r\n\r\n        public void SetException(Exception exception)\r\n        {\r\n            if (this.result == null)\r\n            {\r\n                throw new InvalidOperationException(\"Task should be active already\");\r\n            }\r\n\r\n            this.result.SetException(exception);\r\n            File.Delete(this.fileName);\r\n        }\r\n\r\n        public void SetResult() \r\n        {\r\n            if(this.result == null)\r\n            {\r\n                throw new InvalidOperationException(\"Task should be active already\");\r\n            }\r\n\r\n            this.result.SetResult();\r\n            File.Delete(this.fileName);\r\n        }\r\n\r\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(\r\n            ref TAwaiter awaiter, ref TStateMachine stateMachine)\r\n            where TAwaiter : INotifyCompletion\r\n            where TStateMachine : IAsyncStateMachine => this.HandleCompleted(ref awaiter, ref stateMachine, false);\r\n\r\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(\r\n            ref TAwaiter awaiter, ref TStateMachine stateMachine)\r\n            where TAwaiter : ICriticalNotifyCompletion\r\n            where TStateMachine : IAsyncStateMachine => this.HandleCompleted(ref awaiter, ref stateMachine, true);\r\n\r\n        internal void HandleCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine, bool useCritical)\r\n            where TAwaiter : INotifyCompletion\r\n            where TStateMachine : IAsyncStateMachine\r\n        {\r\n            if (Flow.FlowContext == null)\r\n            {\r\n                throw new InvalidOperationException(\"No flow context\");\r\n            }\r\n\r\n            var flow = EnsureState(ref stateMachine);\r\n\r\n            //flow.Debug();\r\n\r\n            if (awaiter is FlowData)\r\n            {\r\n                var writeState = flow.Capture();\r\n                using (var writer = File.CreateText(this.fileName))\r\n                {\r\n                    Serializer.Serialize(writer, writeState);\r\n                }\r\n\r\n                if (Flow.FlowContext == null)\r\n                {\r\n                    throw new InvalidOperationException(\"No flow context set\");\r\n                }\r\n\r\n                awaiter.OnCompleted(() => flow.stateMachine.MoveNext());\r\n            }\r\n            else\r\n            {\r\n                // TODO: Disable flow context here so async methods can't call back into flow\r\n                if (useCritical)\r\n                {\r\n                    ((ICriticalNotifyCompletion)awaiter).UnsafeOnCompleted(() =>\r\n                    {\r\n                        flow.stateMachine.MoveNext();\r\n                    });\r\n                }\r\n                else\r\n                {\r\n                    awaiter.OnCompleted(() =>\r\n                    {\r\n                        flow.stateMachine.MoveNext();\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        private void RestoreState<TStateMachine>(FlowState<TStateMachine> flow)\r\n        {\r\n            if (File.Exists(this.fileName))\r\n            {\r\n                using (var reader = File.OpenRead(fileName))\r\n                {\r\n                    var state = Serializer.Deserialize<Dictionary<string, object>>(new JsonTextReader(new StreamReader(reader)));\r\n\r\n                    var subState = state.Where(o => o.Value is StateMachineFlowData).SingleOrDefault();\r\n                    if(subState.Value != null)\r\n                    {\r\n                        var subBuilder = Create();\r\n                        var stateMachineType = Type.GetType(((StateMachineFlowData)subState.Value).stateMachineName);\r\n                        var method = typeof(FlowDataMethodBuilder).GetMethod(\"Start\").MakeGenericMethod(stateMachineType);\r\n                        var childStateMachine = Activator.CreateInstance(stateMachineType);\r\n                        method.Invoke(subBuilder, new[] { childStateMachine });\r\n                        state[subState.Key] = subBuilder.Task;\r\n                    }\r\n\r\n\r\n                    flow.RestoreState(this, state);\r\n                }\r\n            }\r\n        }\r\n\r\n        private string FileName<TStateMachine>() => string.Join('_', typeof(TStateMachine).Name.Split(Path.GetInvalidFileNameChars())) + \".json\";\r\n\r\n        private FlowState<TStateMachine> EnsureState<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine\r\n        {\r\n            FlowState<TStateMachine> flow;\r\n            if (this.state == null)\r\n            {\r\n                flow = new FlowState<TStateMachine>();\r\n                this.state = flow;\r\n            }\r\n            else if (this.state is FlowState<TStateMachine> existingFlow)\r\n            {\r\n                flow = existingFlow;\r\n            }\r\n            else\r\n            {\r\n                throw new InvalidOperationException(\"Changing statemachine is not supported\");\r\n            }\r\n\r\n            flow.stateMachine = stateMachine;\r\n            return flow;\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38994","RelatedDescription":"Open issue \"Attribute async state machines for better introspection\" (#38994)"},{"Id":"501210657","IsPullRequest":true,"CreatedAt":"2019-10-02T00:27:24","Actor":"allisonchou","Number":"38992","RawContent":null,"Title":"Add regex header support for configuring severity and IDE code style options with .editorconfig","State":"open","Body":"This PR builds off #35691 by fixing a few bugs mostly involving regex. It also changes which .editorconfig headers are generated for new rules based on the rule type and diagnostic file type.\r\n\r\nThe following are a few changes in the PR:\r\n\r\n**1) Adds regex support for configuring severity level and IDE code style options from the editor** \r\nPreviously, hard-coded and the majority of regex headers were not supported when configuring severity level and/or code options from the editor. Below is an example screenshot of the existing functionality with an .editorconfig file and program titled Program.cs:\r\n![5](https://user-images.githubusercontent.com/16968319/66009806-f63a5980-e470-11e9-8c7d-02eca4c69545.png)\r\n![1](https://user-images.githubusercontent.com/16968319/66006617-19aad780-e464-11e9-9834-b2696942c05b.png)\r\nAnd the below is the updated functionality, which should work for any regex header:\r\n![3](https://user-images.githubusercontent.com/16968319/66007080-bcb02100-e465-11e9-8d5a-239b8c0028b4.png)\r\n\r\n**2) Deals with duplicate rules**\r\nPreviously, if a user specified a rule multiple times in an .editorconfig file with valid headers, then only the first rule would be changed when configuring the severity level and/or code style options from the editor. Now, only the last rule is changed in accordance with how duplicate rules are actually dealt with in an .editorconfig file.\r\n\r\n**3) Verify first header in .editorconfig file is valid**\r\nPreviously, the first header in the file was always deemed to be valid no matter the name or file extension(s). The current change verifies that the first header in the .editorconfig file matches the name of the diagnostic file.\r\n\r\n**4) Changes how new headers and existing rules are generated/configured**\r\n\r\n_**Configuring existing rules:**_ We configure an existing rule in an .editorconfig file if its header contains the diagnostic file's extension.\r\nFor example, when working with a C# file, [\\*], [\\*.cs], [\\*.{cs,vb}] would all be considered valid headers when configuring existing rules. Previously, for C# files, only [\\*.cs] was recognized when configuring rules from the editor.\r\n\r\n_**Generating new rules and headers:**_ If a rule is not present in the .editorconfig file under a valid header, then we generate it while taking into consideration whether the IsPerLanguage flag is set and whether the diagnostic is a compiler diagnostic.\r\n\r\nFirst, we search for existing valid headers:\r\n1) If the diagnostic's isPerLanguage = true, it means the rule is valid for both C# and VB. Thus, if there is a valid existing header containing both [\\*.cs] and [\\*.vb], then we prioritize it.\r\n2) If isPerLanguage = false or we are dealing with a compiler diagnostic, it means the rule is only valid for one of the languages. Thus, we prioritize headers that contain only the file extension for the given language. \r\n3) If neither of the above hold true, we choose the last existing valid header. \r\n4) If no valid existing headers, we generate a new header.\r\n\r\nWhen generating a new header:\r\n1) If PerLanguage = true, we generate [*.{cs,vb}].\r\n2) If PerLanguage = false or we have a compiler diagnostic, we generate [\\*cs] or [\\*.vb] depending on the header.","Url":"https://github.com/dotnet/roslyn/pull/38992","RelatedDescription":"Open PR \"Add regex header support for configuring severity and IDE code style options with .editorconfig\" (#38992)"},{"Id":"501200704","IsPullRequest":true,"CreatedAt":"2019-10-01T23:47:29","Actor":"agocke","Number":"38988","RawContent":null,"Title":"Better array pattern index codegen","State":"open","Body":"Fixes #38942","Url":"https://github.com/dotnet/roslyn/pull/38988","RelatedDescription":"Open PR \"Better array pattern index codegen\" (#38988)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"501662946","IsPullRequest":false,"CreatedAt":"2019-10-02T18:48:52","Actor":"RalfKornmannEnvision","Number":"7807","RawContent":null,"Title":"GC thread suspension","State":"open","Body":"Maybe I just got something wrong here and I am looking at the wrong place.\r\n\r\nMy somewhat bigger test code finally runs stable for hours on my ARM64 system without trashing the heap or consuming all the physical memory. But so far it was only a single thread console application. For my use case I would need some threads.\r\n\r\nAs expected the GC need to suspend all managed threads to do a collection. For Windows there is some hijack code but the function for unix only contains a todo. I assume the reason for this is that the necessary os functions are missing. My target system has the same issue as I cannot suspend and resume threads there. As .net core should have the same issue on other posix systems I checked there and noticed that the jit engine has an option to inject gc probes. I assume that this is the only way to get the GC working in a multi thread environment were hijacking is not possible. Or did I missed something?\r\n\r\nIn the case I am right a short check showed me that the ilcompiler doesn't support the flags and callbacks for this yet?\r\n\r\nDo I need to add this to get the GC working with multiple threads or have I looked at the wrong place?\r\n\r\nIf this the right place does it make any sense to aim for the inline version of the gc probe or can this never work with corert and the call variant is the only solution? I already checked the code and noticed that even if the inline variant can work the call needs still be implemented as it is used in more complicated cases.","Url":"https://github.com/dotnet/corert/issues/7807","RelatedDescription":"Open issue \"GC thread suspension\" (#7807)"},{"Id":"501011867","IsPullRequest":true,"CreatedAt":"2019-10-01T18:56:37","Actor":"Dotnet-GitSync-Bot","Number":"7806","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7806","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7806)"},{"Id":"500653866","IsPullRequest":true,"CreatedAt":"2019-10-01T15:25:51","Actor":"Dotnet-GitSync-Bot","Number":"7805","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @adamsitnik","Url":"https://github.com/dotnet/corert/pull/7805","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7805)"},{"Id":"500408911","IsPullRequest":true,"CreatedAt":"2019-10-01T04:22:31","Actor":"Dotnet-GitSync-Bot","Number":"7804","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @Youssef1313 @safern","Url":"https://github.com/dotnet/corert/pull/7804","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7804)"},{"Id":"499907137","IsPullRequest":true,"CreatedAt":"2019-09-29T14:16:14","Actor":"MichalStrehovsky","Number":"7803","RawContent":null,"Title":"Delete ReadyToRun portions of the compiler and test tree","State":"closed","Body":"The development of the ReadyToRun compiler moved to the CoreCLR repo. Keeping the sources here is just making it harder to keep the repos in sync.\r\n\r\nDeleting the testing speeds up the CI considerably.","Url":"https://github.com/dotnet/corert/pull/7803","RelatedDescription":"Closed or merged PR \"Delete ReadyToRun portions of the compiler and test tree\" (#7803)"},{"Id":"499773007","IsPullRequest":true,"CreatedAt":"2019-09-29T11:58:37","Actor":"MichalStrehovsky","Number":"7802","RawContent":null,"Title":"Fix Windows debug information for classes","State":"closed","Body":"Fixes a longstanding issue where we were emitting erroneous vfptr debug entries and incorrectly mangling class names. One could only inspect things as they were statically typed in the source (so if a variable was typed as `object` in the sources, you wouldn't see any fields in the native debugger, no matter what was assigned to it).\r\n\r\nIt wasn't too terrible, so I sort of just lived with it, but this should work.\r\n\r\nWith this, casting to base classes in the debugger works.\r\n\r\n## Before\r\n\r\n![before](https://user-images.githubusercontent.com/13110571/65817093-98550a00-e203-11e9-88ce-efd8109ae303.gif)\r\n\r\n\r\n## After\r\n\r\n![after](https://user-images.githubusercontent.com/13110571/65817095-9d19be00-e203-11e9-9ec7-73ffe4587b62.gif)\r\n","Url":"https://github.com/dotnet/corert/pull/7802","RelatedDescription":"Closed or merged PR \"Fix Windows debug information for classes\" (#7802)"},{"Id":"499146410","IsPullRequest":true,"CreatedAt":"2019-09-27T23:17:06","Actor":"Dotnet-GitSync-Bot","Number":"7800","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams","Url":"https://github.com/dotnet/corert/pull/7800","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7800)"},{"Id":"499434828","IsPullRequest":true,"CreatedAt":"2019-09-27T15:09:03","Actor":"am11","Number":"7801","RawContent":null,"Title":"Remove duplicate enum SystemVClassificationType","State":"closed","Body":"Found the duplicate definition at: https://github.com/dotnet/corert/blob/a7ce92678876ba55a1c7a65c464363b51d777b4f/src/JitInterface/src/CorInfoTypes.cs#L1170","Url":"https://github.com/dotnet/corert/pull/7801","RelatedDescription":"Closed or merged PR \"Remove duplicate enum SystemVClassificationType\" (#7801)"},{"Id":"498529328","IsPullRequest":true,"CreatedAt":"2019-09-26T22:29:33","Actor":"Dotnet-GitSync-Bot","Number":"7798","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams @stephentoub","Url":"https://github.com/dotnet/corert/pull/7798","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7798)"},{"Id":"499086023","IsPullRequest":false,"CreatedAt":"2019-09-26T19:57:16","Actor":"jkotas","Number":"7799","RawContent":null,"Title":"CppCodeGen: Implement RVA-backed static fields","State":"open","Body":"E.g. `private static ReadOnlySpan<byte> CategoryForLatin1 => new byte[] { 1, 2, 3, ... };`. CppCodeGen allocates space for these, but does not initialize it.","Url":"https://github.com/dotnet/corert/issues/7799","RelatedDescription":"Open issue \"CppCodeGen: Implement RVA-backed static fields\" (#7799)"},{"Id":"497810701","IsPullRequest":true,"CreatedAt":"2019-09-25T21:17:24","Actor":"Dotnet-GitSync-Bot","Number":"7797","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub","Url":"https://github.com/dotnet/corert/pull/7797","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7797)"},{"Id":"496108391","IsPullRequest":false,"CreatedAt":"2019-09-24T00:16:58","Actor":"Unreal-System","Number":"7795","RawContent":null,"Title":".NET Core 3 ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner.","State":"closed","Body":"[Demo.zip](https://github.com/dotnet/corert/files/3633903/Demo.zip)\r\ndotnet --version\r\n3.0.100-rc1-014190\r\n\r\n用于 .NET Core 的 Microsoft (R) 生成引擎版本 16.3.0-preview-19455-02+4a2d77107\r\n版权所有(C) Microsoft Corporation。保留所有权利。\r\n\r\n  C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj 的还原在 101.78 ms 内完成。\r\n  你正在使用 .NET Core 的预览版。请查看 https://aka.ms/dotnet-core-preview\r\n  LoginNet -> C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\bin\\Release\\netcoreapp3.0\\win-x64\\LoginNet.dll\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : error : Code generation failed [C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj]\r\n  ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner. You can work around by running the compilation with scanner disabled.\r\n     at ILCompiler.ILScanResults.ScannedVTableProvider.GetSlice(TypeDesc type)\r\n     at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n     at ILCompiler.Compilation.HasFixedSlotVTable(TypeDesc type)\r\n     at Internal.JitInterface.CorInfoImpl.getCallInfo(CORINFO_RESOLVED_TOKEN& pResolvedToken, CORINFO_RESOLVED_TOKEN* pConstrainedResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle, CORINFO_CALLINFO_FLAGS flags, CORINFO_CALL_INFO* pResult)\r\n     at Internal.JitInterface.CorInfoImpl._getCallInfo(IntPtr thisHandle, IntPtr* ppException, CORINFO_RESOLVED_TOKEN& pResolvedToken, CORINFO_RESOLVED_TOKEN* pConstrainedResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle, CORINFO_CALLINFO_FLAGS flags, CORINFO_CALL_INFO* pResult)\r\n     --- End of inner exception stack trace ---\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.ComputeDependencyNodeDependencies(List`1 obj)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\nC:\\Users\\Admin\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27527-01\\build\\Microsoft.NETCore.Native.targets(239,5): error MSB3073: The command \"\"C:\\Users\\Admin\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-27527-01\\tools\\ilc\" @\"obj\\Release\\netcoreapp3.0\\win-x64\\native\\LoginNet.ilc.rsp\"”exited with code 1. [C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj]\r\n\r\nCan be compiled on earlier .NET Core 3 previews and CoreRT daily builds.","Url":"https://github.com/dotnet/corert/issues/7795","RelatedDescription":"Closed issue \".NET Core 3 ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner.\" (#7795)"},{"Id":"496830692","IsPullRequest":false,"CreatedAt":"2019-09-22T20:46:12","Actor":"genifycom","Number":"7796","RawContent":null,"Title":"[TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure","State":"open","Body":"Now getting this strange error:\r\n\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : error : [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure [C:\\xxx.csproj]\r\n  Internal.TypeSystem.TypeSystemException+FileNotFoundException: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure\r\n     at Internal.TypeSystem.ThrowHelper.ThrowFileNotFoundException(ExceptionStringID id, String fileName)\r\n     at ILCompiler.CompilerTypeSystemContext.GetModuleForSimpleName(String simpleName, Boolean throwIfNotFound)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveAssemblyReference(AssemblyReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveTypeReference(TypeReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType(SignatureTypeCode typeCode)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseMethodSignature()\r\n     at Internal.TypeSystem.Ecma.EcmaMethod.InitializeSignature()\r\n     at ILCompiler.DependencyAnalysis.MethodMetadataNode.GetStaticDependencies(NodeFactory factory)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.GetStaticDependenciesImpl(DependencyNodeCore`1 node)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ProcessMarkStack()\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\nC:\\Users\\DAnderson\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-28121-01\\build\\Microsoft.NETCore.Native.targets(253,5): error MSB3073: The command \"\"C:\\...\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-28121-01\\tools\\ilc\" @\"obj\\Debug\\netcoreapp2.1\\win-x64\\native\\xxx.ilc.rsp\"\" exited with code 1. [C:\\xxx.csproj]","Url":"https://github.com/dotnet/corert/issues/7796","RelatedDescription":"Open issue \"[TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure\" (#7796)"},{"Id":"494589847","IsPullRequest":true,"CreatedAt":"2019-09-17T14:13:36","Actor":"Dotnet-GitSync-Bot","Number":"7794","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7794","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7794)"},{"Id":"494273259","IsPullRequest":true,"CreatedAt":"2019-09-16T23:13:23","Actor":"Dotnet-GitSync-Bot","Number":"7793","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh @stephentoub","Url":"https://github.com/dotnet/corert/pull/7793","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7793)"},{"Id":"493430075","IsPullRequest":false,"CreatedAt":"2019-09-16T15:38:33","Actor":"RalfKornmannEnvision","Number":"7790","RawContent":null,"Title":"GC on ARM64 based \"kind of unix\" system","State":"closed","Body":"I am sorry to bother again. After fixing some more minor issues and brush up my ARM64 assembler knowledge I was finally able to run a simple hello world on my ARM64 system without crashing. Doing things like writing to the log (the system doesn't have a text based console at all), Thread.Sleep, Environment.TickCount, printing the command line arguments etc works fine. But than I made the \"mistake\" to trigger the GC. \r\n\r\nTo make a long story short after some more debugging I noticed that the unwind of the stack does not work. The reason was pretty obvious. Libunwind doesn't have any information about the function were the stack walk should be started. I am aware that there are some parts missing for ARM64 targets that I need to fill but there is one question I was not able to answer so far. Does the GC only need unwind information for the managed code part? Or do I need to provide information for the C/C++ parts and even the dynamic libs of the OS? I am aware that libunwind can fetch these information by it's own. Unfortunately the function that it uses for this is not supported by the OS my system is using.  I may be able to get the unwind sections from the runtime C/C++ code.\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7790","RelatedDescription":"Closed issue \"GC on ARM64 based \"kind of unix\" system\" (#7790)"},{"Id":"493684541","IsPullRequest":true,"CreatedAt":"2019-09-15T07:35:11","Actor":"Dotnet-GitSync-Bot","Number":"7792","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7792","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7792)"},{"Id":"493500562","IsPullRequest":true,"CreatedAt":"2019-09-14T14:02:26","Actor":"MichalStrehovsky","Number":"7791","RawContent":null,"Title":"Fix casting to pointers","State":"closed","Body":"Porting a fix made for .NET Native.\r\n\r\nA popular game engine has a `castclass void*` IL instruction in one of the generated files it ships with. This construct is weird enough that it crashes the .NET Native compiler. It doesn't crash the CoreRT compiler, but we still want the runtime side of the fix.","Url":"https://github.com/dotnet/corert/pull/7791","RelatedDescription":"Closed or merged PR \"Fix casting to pointers\" (#7791)"},{"Id":"492984849","IsPullRequest":true,"CreatedAt":"2019-09-13T13:52:21","Actor":"Dotnet-GitSync-Bot","Number":"7789","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @NextTurn","Url":"https://github.com/dotnet/corert/pull/7789","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7789)"},{"Id":"492918947","IsPullRequest":true,"CreatedAt":"2019-09-12T19:11:42","Actor":"Dotnet-GitSync-Bot","Number":"7788","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @TylerBrinkley @tarekgh @obligaron @marek-safar @jkotas @sywhang","Url":"https://github.com/dotnet/corert/pull/7788","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7788)"},{"Id":"491162081","IsPullRequest":true,"CreatedAt":"2019-09-11T00:16:26","Actor":"Dotnet-GitSync-Bot","Number":"7786","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7786","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7786)"},{"Id":"490571600","IsPullRequest":true,"CreatedAt":"2019-09-09T17:52:58","Actor":"davidwrighton","Number":"7779","RawContent":null,"Title":"Resource writing","State":"closed","Body":"- Refactor the win32 resource reading code to use more natural managed data structures\r\n- Build a Win32 resource emitter on top of refactored data structures\r\n- Replace resource section copy logic with new node to generate win32 resources","Url":"https://github.com/dotnet/corert/pull/7779","RelatedDescription":"Closed or merged PR \"Resource writing\" (#7779)"},{"Id":"491229182","IsPullRequest":false,"CreatedAt":"2019-09-09T17:33:38","Actor":"RalfKornmannEnvision","Number":"7787","RawContent":null,"Title":"finally funclets brocken for ARM64!?","State":"open","Body":"I am not sure if this is a corert or coreclr issue but as I am working on a corert port for an custom ARM64 system I start with posting it here.\r\n\r\nAfter adding code to the objectwriter and the ilcompiler I managed to get a simple hello world app running to the main method. But it than crashed during the shutdown. After some debugging i figured out that the static constructors are never called. After some more debugging I noticed that ClassConstructorRunner.GetCctor corrupts the stack frame,\r\n\r\nIt happens at the end of the method in an assembler block that i believe is the finally funclet for the using. It looks like this\r\n\r\n  28667c: a9be7bfd stp x29, x30, [sp, #-32]!\r\n  286680: f90013f3 str x19, [sp, #32]\r\n  286684: 9103a3a0 add x0, x29, #0xe8\r\n  286688: 97fc0d42 bl 189b90 <S_P_CoreLib_System_Threading_LockHolder__Dispose>\r\n  28668c: d503201f nop\r\n  286690: d503201f nop\r\n  286694: f94013f3 ldr x19, [sp, #32]\r\n  286698: a8c27bfd ldp x29, x30, [sp], #32\r\n  28669c: d65f03c0 ret\r\n\r\nThe fact that x19 is stored with an offset of 32 looks strange for me and it overwrites the already stored data. Based on other stackframes I would expect an offset of 16 here. Or the new stackframe for the funclet needs to be 16 bytes larger.\r\n\r\nDisclaimer: As the development system for the custom ARM64 system runs on windows I although use a ARM64 jit that is build to run on X64. Very simular to the protonojit but not as alt jit to get all the data needed to write the arm64 elf file that the linker for the custom ARM64 system needs. Unfortunately I don't have an ARM64 windows or linux system to check if a non cross jit generates the same code.\r\n\r\nI assume there is no ready to use jit for my use case and I need to build it anyway. In this case I could properly fix the issue but I would need a hint how the code is expected to look like.  ","Url":"https://github.com/dotnet/corert/issues/7787","RelatedDescription":"Open issue \"finally funclets brocken for ARM64!?\" (#7787)"},{"Id":"490799316","IsPullRequest":true,"CreatedAt":"2019-09-08T23:57:41","Actor":"MichalStrehovsky","Number":"7785","RawContent":null,"Title":"Mark unsafe intrinsics as reflection blocked","State":"closed","Body":"Keeping these reflection enabled pulls in quite a bit of junk (generic dictionaries, standalone method bodies, bookkeeping) that adds up to 1.5% of the size of Hello World...","Url":"https://github.com/dotnet/corert/pull/7785","RelatedDescription":"Closed or merged PR \"Mark unsafe intrinsics as reflection blocked\" (#7785)"},{"Id":"490775070","IsPullRequest":false,"CreatedAt":"2019-09-08T21:11:53","Actor":"mrzaxaryan","Number":"7784","RawContent":null,"Title":"Non-trivial marshalling is not yet supported by this compiler.","State":"closed","Body":"Can't save image to MemoryStream \r\n.NET Core v3.0.0-preview9\r\nVisual Studio 16.3.0 Preview 3.0\r\nException: `System.Exception: Method '[System.Drawing.Common]System.Drawing.SafeNativeMethods+Gdip.GdipSaveImageToStream(HandleRef,IStream,Guid&,HandleRef)' requires non-trivial marshalling that is not yet supported by this compiler.\r\n   at System.Drawing.SafeNativeMethods.Gdip.GdipSaveImageToStream(HandleRef, Interop.Ole32.IStream, Guid&, HandleRef) + 0x39\r\n   at System.Drawing.Image.Save(Stream, ImageCodecInfo, EncoderParameters) + 0x1af`\r\n","Url":"https://github.com/dotnet/corert/issues/7784","RelatedDescription":"Closed issue \"Non-trivial marshalling is not yet supported by this compiler.\" (#7784)"},{"Id":"490757817","IsPullRequest":true,"CreatedAt":"2019-09-08T20:09:59","Actor":"MichalStrehovsky","Number":"7782","RawContent":null,"Title":"Port GC changes from CoreCLR","State":"closed","Body":"Ports https://github.com/dotnet/coreclr/commit/cd42ee8fe410f71026467ad2e90116115b85f68d\r\nPorts https://github.com/dotnet/coreclr/commit/740752c9d206a465e96a4d01e7dafb6adb6ded63","Url":"https://github.com/dotnet/corert/pull/7782","RelatedDescription":"Closed or merged PR \"Port GC changes from CoreCLR\" (#7782)"},{"Id":"490760342","IsPullRequest":true,"CreatedAt":"2019-09-08T20:08:39","Actor":"MichalStrehovsky","Number":"7783","RawContent":null,"Title":"Update CoreFX","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7783","RelatedDescription":"Closed or merged PR \"Update CoreFX\" (#7783)"},{"Id":"490704961","IsPullRequest":true,"CreatedAt":"2019-09-08T05:12:25","Actor":"Dotnet-GitSync-Bot","Number":"7781","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7781","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7781)"},{"Id":"490662770","IsPullRequest":false,"CreatedAt":"2019-09-07T17:55:27","Actor":"nexon33","Number":"7780","RawContent":null,"Title":"Implement GetInterfaceMap","State":"open","Body":"I want to be able to render a view in asp.net core, I need the controller inheritance to be able to call View();\r\nIs there any simple way of doing this or should I forget about it for now?","Url":"https://github.com/dotnet/corert/issues/7780","RelatedDescription":"Open issue \"Implement GetInterfaceMap\" (#7780)"},{"Id":"490437186","IsPullRequest":true,"CreatedAt":"2019-09-06T22:57:58","Actor":"Dotnet-GitSync-Bot","Number":"7778","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7778","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7778)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"501756629","IsPullRequest":false,"CreatedAt":"2019-10-02T22:23:15","Actor":"DamianEdwards","Number":"3706","RawContent":null,"Title":"Support ability for FrameworkReference to import analyzers","State":"open","Body":"Request came out of https://github.com/aspnet/AspNetCore/issues/14675\r\n\r\nASP.NET Core app projects today target the Web SDK which auto-imports a set of \"default\" analyzers. There are scenarios however where parts of an ASP.NET Core app are split into class libraries and then referenced from the main app project, but these class libraries use the base SDK, and manually add a `<FrameworkReference Include=\"Microsoft.AspNetCore.App\" />` to indicate their reliance on ASP.NET Core features. This, however, results in none of the default analyzers. And given the analyzers are only available via the Web SDK (they literally ship only as part of it) there is no first-class way to enable them.\r\n\r\nThe proposal here is to allow the base SDK to support a `FrameworkReference` declaring it also imports some analyzers, so that class libraries can use them.","Url":"https://github.com/dotnet/sdk/issues/3706","RelatedDescription":"Open issue \"Support ability for FrameworkReference to import analyzers\" (#3706)"},{"Id":"501750161","IsPullRequest":true,"CreatedAt":"2019-10-02T22:03:31","Actor":"tlakollo","Number":"3705","RawContent":null,"Title":"Improve Error Experience","State":"open","Body":"As part of the improve error experience linker issue (see issue https://github.com/mono/linker/issues/653) we find out that an additional flag was needed in order to print warning messages.\r\nThis change mades possible for the linker to print valuable information like warnings when an assembly is unresolved and is going to be skipped. Likely this feature could also work to warning the user when it's using patterns that could break their application.","Url":"https://github.com/dotnet/sdk/pull/3705","RelatedDescription":"Open PR \"Improve Error Experience\" (#3705)"},{"Id":"501446031","IsPullRequest":true,"CreatedAt":"2019-10-02T12:02:07","Actor":"dotnet-maestro[bot]","Number":"3704","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191001.4\r\n- **Date Produced**: 10/1/2019 10:24 PM\r\n- **Commit**: c21a409f11386d22c6083198176868d3974de832\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19501.4\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3704","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3704)"},{"Id":"501395765","IsPullRequest":true,"CreatedAt":"2019-10-02T10:05:15","Actor":"dotnet-maestro[bot]","Number":"3703","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191002.23\r\n- **Date Produced**: 10/3/2019 1:52 AM\r\n- **Commit**: d34d1570bfdf669ed94b4c939b2f39a1650e2320\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.1\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3703","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3703)"},{"Id":"501147875","IsPullRequest":true,"CreatedAt":"2019-10-01T21:10:12","Actor":"dotnet-maestro[bot]","Number":"3702","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191001.24\r\n- **Date Produced**: 10/2/2019 8:04 AM\r\n- **Commit**: 0b3fcd7a02fd29017f01f01a36ea562c5fda1eec\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19501.24\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3702","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3702)"},{"Id":"500849733","IsPullRequest":true,"CreatedAt":"2019-10-01T13:32:38","Actor":"dotnet-maestro[bot]","Number":"3701","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190930.3\r\n- **Date Produced**: 9/30/2019 8:25 PM\r\n- **Commit**: 238f1bbb23ba67616818d0b242c5b55a18edec55\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19480.3\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3701","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3701)"},{"Id":"500702486","IsPullRequest":true,"CreatedAt":"2019-10-01T11:07:01","Actor":"dotnet-maestro[bot]","Number":"3699","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190930.27\r\n- **Date Produced**: 10/1/2019 8:05 AM\r\n- **Commit**: dfb28413477684834589b8b23492b48c43726e10\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19480.27\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3699","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3699)"},{"Id":"500712869","IsPullRequest":false,"CreatedAt":"2019-10-01T07:22:15","Actor":"iyhammad","Number":"3700","RawContent":null,"Title":"dotnet publish for sdk 3.x produces different output than sdk 2.x","State":"open","Body":"I've an application the uses .NET Core 2.2 and build against net472.\r\nI discovered that publishing the same app using .NET Core SDK 3.x produces different publish output than SDK 2.x. Below are sample of the different output of the 2 SDKs.\r\n![SDK 2.x](https://user-images.githubusercontent.com/5989020/65941989-03d1ee00-e435-11e9-9c6b-1c34336c86f3.png)\r\n![SDK 3.x](https://user-images.githubusercontent.com/5989020/65942012-0f251980-e435-11e9-8fb9-e9d9c937a7b7.png)\r\n\r\nIf this an intended behavior and not a bug, I believe we should warn people to explicitly specify the required SDK for building their application part of their solution using global.json Otherwise, specially if they are building using cloud tools, the system will be published with missing files.\r\nIf this is bug, I'me ready to share more insights about the application that packages that I'm using to reproduce the bug. \r\n","Url":"https://github.com/dotnet/sdk/issues/3700","RelatedDescription":"Open issue \"dotnet publish for sdk 3.x produces different output than sdk 2.x\" (#3700)"},{"Id":"499723055","IsPullRequest":true,"CreatedAt":"2019-10-01T05:49:02","Actor":"dotnet-maestro[bot]","Number":"3692","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190930.22\r\n- **Date Produced**: 10/1/2019 2:48 AM\r\n- **Commit**: dd532f6e9fa24c13246b944616f066f42ebe957a\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19480.22\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3692","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3692)"},{"Id":"501830295","IsPullRequest":false,"CreatedAt":"2019-10-01T05:41:13","Actor":"EatonZ","Number":"3707","RawContent":null,"Title":"PreBuild event/target runs twice - during Build and Publish","State":"open","Body":"**Visual Studio Version**: 16.3.1\r\n\r\n**Summary / Steps to Reproduce / Behavior**:\r\nI have a .NET Core 3.0 WinForms application and I have added a prebuild event to my project. It gets added to the csproj like this:\r\n```\r\n<Target Name=\"PreBuild\" BeforeTargets=\"PreBuildEvent\">\r\n  <Exec Command=\"$(ProjectDir)PreBuildTasks.exe\" />\r\n</Target>\r\n```\r\nIt basically launches my prebuild exe, which does a few things, like increment the version in AssemblyInfo. This has always worked fine until I started experimenting with .NET Core and publishing.\r\n\r\nFor context, I am going to add this right before the `Exec Command`:\r\n`<Message Importance=\"high\" Text=\"This is a message\" />`\r\n\r\nWhen I publish the project (right click project, Publish), this is what I see:\r\n![2019-10-01_1-25-35](https://user-images.githubusercontent.com/3020941/65936781-cac15b80-e3eb-11e9-93cf-d41efb6adc93.png)\r\n\r\nIt's clear the prebuild task is running twice. I spent a while researching a way to resolve this problem. The closest solution I found was [this](https://developercommunity.visualstudio.com/content/problem/30395/aspnet-publish-process-runs-build-3-times.html). I added `Condition=\"'$(DeployOnBuild)' != 'true'\"` as directed, but unfortunately it did not do anything. The other solution in that thread says the issue is fixed, so what is happening here?\r\n\r\nThis behavior may be by design, but I decided to open this issue in case it is not, and because I'd like some guidance on the correct way to solve this problem if I am going at this the wrong way. I only want my prebuild task to run on **Build**, not **Publish**.","Url":"https://github.com/dotnet/sdk/issues/3707","RelatedDescription":"Open issue \"PreBuild event/target runs twice - during Build and Publish\" (#3707)"},{"Id":"499679772","IsPullRequest":true,"CreatedAt":"2019-09-30T20:02:05","Actor":"wli3","Number":"3689","RawContent":null,"Title":"Better error message when c++ targeting TFM lower than 3.1","State":"closed","Body":"fix https://github.com/dotnet/sdk/issues/3626","Url":"https://github.com/dotnet/sdk/pull/3689","RelatedDescription":"Closed or merged PR \"Better error message when c++ targeting TFM lower than 3.1\" (#3689)"},{"Id":"500442644","IsPullRequest":false,"CreatedAt":"2019-09-30T18:26:00","Actor":"ghosttie","Number":"3698","RawContent":null,"Title":"publishing appears to succeed but dependencies are missing if child project has space in package id","State":"open","Body":"I had a problem that manifested as an [HTTP Error 500.31 - ANCM Failed to Find Native Dependencies](https://github.com/aspnet/AspNetCore/issues/14443) error which was misleading.\r\n\r\nThe problem turned out to be that the main project had references to other projects that had spaces in their package ids, which somehow kept them from being published correctly, even though there was no error at publish time.\r\n\r\nThis was working in .NET Core 2.2 but is not working in 3.0.\r\n\r\nAlthough there's a simple workaround (remove the spaces) I think this should be fixed, because it worked in previous versions, the error message doesn't lead to a solution, and the package id was set automatically when the project was created so it should have been set to a valid value.\r\n\r\nAn ASP.NET Core maintainer said that it wasn't a bug in their code and to try reporting it here.","Url":"https://github.com/dotnet/sdk/issues/3698","RelatedDescription":"Open issue \"publishing appears to succeed but dependencies are missing if child project has space in package id\" (#3698)"},{"Id":"500287421","IsPullRequest":true,"CreatedAt":"2019-09-30T13:44:40","Actor":"vitek-karas","Number":"3697","RawContent":null,"Title":"Implement writing includedFrameworks references for self-contained apps","State":"open","Body":"For self-contained apps which are of the right version (to maintain backward compat), write the framework references to a new `includedFrameworks` property in `.runtimeconfig.json`.\r\n\r\nWhen the native hosting APIs are used to load a managed component into a process which is running a .NET Core app, the hosting layer should validate that the new component framework requirements are met by the frameworks loaded into the process already. This is to allow the new component to communicate with the app (same FX types), but also to overcome the fact that we don't want to load frameworks twice ever.\r\n\r\nIn order to validate the framework references declared by the new component, the host must know what frameworks are loaded into the process. For framework dependent apps this works fine as the host knows which frameworks it resolved during the app startup. But for self-contained apps, the host doesn't know as everything looks like an app to it.\r\n\r\nThis change adds he new `includedFrameworks` property to the `.runtimeconfig.json` which will be used for self-contained apps (only, it should not occur when `framework` or `frameworks` properties are used). It will contain the list of frameworks which were used to build the self-contained apps. The format is the same as `frameworks` property content.\r\n\r\nTo maintain strict backward compatibility, this change will only write the new property to projects targeting `netcoreapp3.1` or higher.\r\n\r\nAs coded this assumes the change will be approved for 3.1. If it's rejected, I will follow up with a change which will make the new property occur only for 5.0 and above.\r\n\r\n#3541 - master (5.0) version","Url":"https://github.com/dotnet/sdk/pull/3697","RelatedDescription":"Open PR \"Implement writing includedFrameworks references for self-contained apps\" (#3697)"},{"Id":"499924954","IsPullRequest":false,"CreatedAt":"2019-09-29T14:25:25","Actor":"alexandrehtrb","Number":"3696","RawContent":null,"Title":"Make multilanguage project builds","State":"open","Body":"I propose that dotnet build allows multilanguage .NET projects.\r\n\r\nCurrently, a .NET project needs to be language exclusive, that is, only F#, or only C#, or only VB.NET.\r\n\r\nBut, this could change to allow .fs, .cs and .vb files to be compiled together in a same project.\r\n\r\nThe existing way of approaching this problem in F# is separate F# files in F# projects, C# files in C# projects, and VB.NET files in VB.NET projects.\r\n\r\nI originally created a discussion [here](https://github.com/fsharp/fslang-suggestions/issues/788).","Url":"https://github.com/dotnet/sdk/issues/3696","RelatedDescription":"Open issue \"Make multilanguage project builds\" (#3696)"},{"Id":"499762840","IsPullRequest":true,"CreatedAt":"2019-09-28T14:22:33","Actor":"dotnet-maestro[bot]","Number":"3693","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190927.2\r\n- **Date Produced**: 9/27/2019 6:33 PM\r\n- **Commit**: 14abaee3dba41fbe608431fb6a4f4b2435dcac33\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19477.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3693","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3693)"},{"Id":"499763174","IsPullRequest":true,"CreatedAt":"2019-09-28T12:05:23","Actor":"dotnet-bot","Number":"3695","RawContent":null,"Title":"Merge release/3.1.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3695","RelatedDescription":"Open PR \"Merge release/3.1.1xx to master\" (#3695)"},{"Id":"499763157","IsPullRequest":true,"CreatedAt":"2019-09-28T12:05:16","Actor":"dotnet-bot","Number":"3694","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3694","RelatedDescription":"Open PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#3694)"},{"Id":"499678524","IsPullRequest":true,"CreatedAt":"2019-09-28T02:53:41","Actor":"dotnet-bot","Number":"3688","RawContent":null,"Title":"Merge release/3.1.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3688","RelatedDescription":"Closed or merged PR \"Merge release/3.1.1xx to master\" (#3688)"},{"Id":"499678501","IsPullRequest":true,"CreatedAt":"2019-09-28T02:50:08","Actor":"dotnet-bot","Number":"3687","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3687","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#3687)"},{"Id":"499697830","IsPullRequest":true,"CreatedAt":"2019-09-28T00:05:15","Actor":"dotnet-bot","Number":"3691","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3691","RelatedDescription":"Open PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#3691)"},{"Id":"499697806","IsPullRequest":true,"CreatedAt":"2019-09-28T00:05:08","Actor":"dotnet-bot","Number":"3690","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.100-preview9","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.100-preview9.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.100-preview9\ngit reset --hard upstream/release/3.0.100-preview9\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.100-preview9 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3690","RelatedDescription":"Open PR \"Merge release/2.2.2xx to release/3.0.100-preview9\" (#3690)"},{"Id":"499653558","IsPullRequest":true,"CreatedAt":"2019-09-27T23:20:14","Actor":"nguerrera","Number":"3686","RawContent":null,"Title":"Flow available RIDs to R2R via targeting pack, not runtime pack","State":"closed","Body":"Follow up on feedback on merge from 3.0 -> 3.1","Url":"https://github.com/dotnet/sdk/pull/3686","RelatedDescription":"Closed or merged PR \"Flow available RIDs to R2R via targeting pack, not runtime pack\" (#3686)"},{"Id":"499169291","IsPullRequest":true,"CreatedAt":"2019-09-27T23:16:02","Actor":"dotnet-bot","Number":"3682","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3682","RelatedDescription":"Closed or merged PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#3682)"},{"Id":"499599835","IsPullRequest":false,"CreatedAt":"2019-09-27T18:58:04","Actor":"swaroop-sridhar","Number":"3685","RawContent":null,"Title":"Publish Single-file: Smart settings for IncludeSymbolsInSingleFile","State":"open","Body":"When publishing an app as a single file, the default setting is to not include PDB files in the output bundle by default (and instead leave them as separate files).\r\n\r\nHowever, this setting is unsuitable for some apps, where the `deps.json` file includes a dependency on the PDB file. This causes runtime-crash of the app when the `apphost` validates the contents against the deps.json manifest. For example: \r\nhttps://github.com/PowerShell/PowerShell/issues/10266\r\nhttps://github.com/Viir/bots/tree/adapt-for-single-file-exe-publish\r\n\r\nThe inclusion of PDB files as a dependency is almost always an error, but an app (and its dependencies/nuget packages) are not required to associate the same semantics with file-extensions. \r\n\r\nSo, if the deps.json writer finds a PDB file in the manifest, the SDK should default the `IncludeSymbolsInSingleFile` setting to true. The SDK should also issue a warning about this change, so that PDBs are not silently included -- unintentionally increasing the size of published apps.\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3685","RelatedDescription":"Open issue \"Publish Single-file: Smart settings for IncludeSymbolsInSingleFile\" (#3685)"},{"Id":"499577923","IsPullRequest":false,"CreatedAt":"2019-09-27T18:07:57","Actor":"dsplaisted","Number":"3684","RawContent":null,"Title":"Re-enable tests disabled as part of repo merge","State":"open","Body":"I'm working on merging the cli and toolset repos, and there are some tests which are failing only on non-Windows and only in CI.  I am going to disable these tests for now in order to not block the repo merge.\r\n\r\nOnce everything is merged into the SDK repo, we should investigate and re-enable them.","Url":"https://github.com/dotnet/sdk/issues/3684","RelatedDescription":"Open issue \"Re-enable tests disabled as part of repo merge\" (#3684)"},{"Id":"499515674","IsPullRequest":false,"CreatedAt":"2019-09-27T14:41:30","Actor":"aguacongas","Number":"3683","RawContent":null,"Title":"dotnet publish with a runtime identifier and no build publish the wrong version of System.Net.Http dll","State":"open","Body":"I have a wrote a Windows Service and I compile it using `donet build -c Release` and I publish it using `dotnet publish -c Release --no-build`   \r\nBut the System.Net.Http dll packaged has the file version 4.6.27110.4, it should be 4.6.27207.3.  \r\nAnd I received error that should be fixed in runtime 2.2.1 :   [System.ServiceModel.CommunicationException: The server returned an invalid or unrecognized response](https://github.com/dotnet/corefx/issues/31423)\r\n\r\nThe project .csproj declare:  \r\n``` xml\r\n<PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <RuntimeIdentifier>win7-x64</RuntimeIdentifier>\r\n    <LangVersion>latest</LangVersion>\r\n  </PropertyGroup>\r\n```\r\nThe `dotnet --info` output:\r\n```bash\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.402\r\n Commit:    c7f2f96116\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.402\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.7\r\n  Commit:  b1e29ae826\r\n\r\n.NET Core SDKs installed:\r\n  1.1.9 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.802 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.402 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\nIf I replace System.Net.Http.dll with file version 4.6.27110.4 by the one I found in dotnet\\shared\\Microsoft.NETCore.App\\2.2.1 I don't received errors. \r\n\r\nIf I don't used the --no-build args it works","Url":"https://github.com/dotnet/sdk/issues/3683","RelatedDescription":"Open issue \"dotnet publish with a runtime identifier and no build publish the wrong version of System.Net.Http dll\" (#3683)"},{"Id":"499119549","IsPullRequest":true,"CreatedAt":"2019-09-26T22:51:28","Actor":"mmitche","Number":"3681","RawContent":null,"Title":"[release/3.0.1xx] Rebrand for 3.0.101","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3681","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Rebrand for 3.0.101\" (#3681)"},{"Id":"499103379","IsPullRequest":false,"CreatedAt":"2019-09-26T20:36:17","Actor":"wli3","Number":"3680","RawContent":null,"Title":"Refresh docker images","State":"open","Body":"- [ ] Since they are outdated, it starts to fail and there is no easy fix. Like this case https://github.com/dotnet/core-sdk/pull/4955. Check all our outdate docker images. Update them to the supported version.\r\n- [ ] Check in the docker file to https://github.com/dotnet/dotnet-buildtools-prereqs-docker/ and use the image. We can save a lot of build time by using image instead of installing dependencies during the build","Url":"https://github.com/dotnet/sdk/issues/3680","RelatedDescription":"Open issue \"Refresh docker images\" (#3680)"},{"Id":"498700038","IsPullRequest":false,"CreatedAt":"2019-09-26T07:06:21","Actor":"taori","Number":"3679","RawContent":null,"Title":"Upgraded projects which compile to NS 2.1, didn't compile, downgrade, now compile fails as well","State":"open","Body":"I was trying to update an application to netcore3 to fix some issues, which spawned other issues (RazorTagHelper requiring some Configuration to operate). To attempt resolve those issues i figured i may try to update the libraries to netstandard 2.1 - that didn't fix it either, so i downgraded my projects back to 2.0.\r\n\r\nOddly enough now those libraries won't compile either even if i clean the solution + delete bin/obj manually.\r\n\r\nFehler: Es wurde versucht, einen numerischen Vergleich für \"$(_TargetFrameworkVersionWithoutV)\" auszuführen, der zu \"**.2.0**\" anstatt zu einer Zahl in Bedingung \" '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(_TargetFrameworkVersionWithoutV)' < '**2.0**' \" ausgewertet wird.  C:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.NuGetOfflineCache.targets","Url":"https://github.com/dotnet/sdk/issues/3679","RelatedDescription":"Open issue \"Upgraded projects which compile to NS 2.1, didn't compile, downgrade, now compile fails as well\" (#3679)"},{"Id":"498578523","IsPullRequest":false,"CreatedAt":"2019-09-25T23:55:16","Actor":"livarcocc","Number":"3678","RawContent":null,"Title":"Turn wpf vb template tests back","State":"open","Body":"Turned the test off because the wpf vb template has been removed for now.\r\n\r\ncc @KathleenDollard ","Url":"https://github.com/dotnet/sdk/issues/3678","RelatedDescription":"Open issue \"Turn wpf vb template tests back\" (#3678)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"497868605","IsPullRequest":false,"CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Number":"124","RawContent":null,"Title":".NET Core `latest` Docker tags updated to 3.0","State":"open","Body":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n","Url":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Open issue \".NET Core `latest` Docker tags updated to 3.0\" (#124)"},{"Id":"494223006","IsPullRequest":false,"CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Number":"123","RawContent":null,"Title":".NET Core 3.0 RC 1","State":"open","Body":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Open issue \".NET Core 3.0 RC 1\" (#123)"},{"Id":"491801748","IsPullRequest":false,"CreatedAt":"2019-09-10T17:23:20","Actor":"leecow","Number":"122","RawContent":null,"Title":"September 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Open issue \"September 2019 .NET Updates\" (#122)"},{"Id":"491794046","IsPullRequest":false,"CreatedAt":"2019-09-10T17:04:46","Actor":"blowdart","Number":"121","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core","State":"open","Body":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/121\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.6\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.7, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\nV1.1 (September 10, 2019): Fix version numbers\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-09-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121)"},{"Id":"489344106","IsPullRequest":false,"CreatedAt":"2019-09-04T19:14:05","Actor":"leecow","Number":"120","RawContent":null,"Title":".NET Core 3.0 Preview 9","State":"open","Body":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Open issue \".NET Core 3.0 Preview 9\" (#120)"},{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1179116521290960902","CreatedAt":"2019-10-01T19:31:00+00:00","UserScreenname":"dotnet","Text":"ICYMI: @nopCommerce published a step-by-step guide on migrating to https://t.co/iOiV9r53NV Core. Check it out: https://t.co/oAy68vNBJw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":43,"FavoriteCount":20,"RawContent":null},{"Id":"1178341418064138245","CreatedAt":"2019-09-29T16:11:01+00:00","UserScreenname":"dotnet","Text":"#dotNETConf is now available on demand!\n👍 83 speakers\n👍 77 sessions\n👍 40+ hours\n👍 200+ local events around the glob… https://t.co/c5lz2EkS4C","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":302,"FavoriteCount":164,"RawContent":null},{"Id":"1178059427242377217","CreatedAt":"2019-09-28T21:30:29+00:00","UserScreenname":"dotnet","Text":"Hi 👋 @timheuer. Welcome back in @dotnet land. 😀 https://t.co/85GRHHLARg","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":86,"FavoriteCount":8,"RawContent":null},{"Id":"1177599991445106695","CreatedAt":"2019-09-27T15:04:51+00:00","UserScreenname":"dotnet","Text":"The #dotNETConf live event may be over, but that just means that all the sessions are now available to watch whenev… https://t.co/iwCcdYUvJ3","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":6495,"FavoriteCount":576,"RawContent":null},{"Id":"1177009895125737478","CreatedAt":"2019-09-26T00:00:01+00:00","UserScreenname":"dotnet","Text":"…and that's a wrap!!! THANK YOU!!! from all of us at #dotNETconf! 👏 👏 👏 \n\nWatch for our on demand sessions - we'll… https://t.co/h1k6wRrSLg","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":106,"FavoriteCount":15,"RawContent":null},{"Id":"1177001086831538184","CreatedAt":"2019-09-25T23:25:01+00:00","UserScreenname":"dotnet","Text":"Be an A11Y. Build Accessible Web Sites for Everyone is streaming live @ #dotNETConf with @rachelappel The last sess… https://t.co/Cqy7FgAB9Z","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":21,"FavoriteCount":3,"RawContent":null},{"Id":"1176993538233516032","CreatedAt":"2019-09-25T22:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now @ #dotNETConf: Mixed Reality with Xamarin and Azure Spatial Anchors with @SweekritiS. Tune in:… https://t.co/VtnLnD72W9","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null},{"Id":"1176985986494021632","CreatedAt":"2019-09-25T22:25:01+00:00","UserScreenname":"dotnet","Text":"Happening now @ #dotNETConf: How containerized #SQLServer makes development easier with @michaeljolley. Watch here:… https://t.co/9sHXsLEbvX","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":27,"FavoriteCount":7,"RawContent":null},{"Id":"1176978438521008129","CreatedAt":"2019-09-25T21:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now @ #dotNETConf, @MillerMark gives us the science behind creating great UI. Check it out:… https://t.co/reMT35s4iH","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":15,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-10-03T05:30:41.9333223Z","RunDurationInMilliseconds":17088}