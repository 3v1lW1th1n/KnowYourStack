{"Data":{"GitHub":{"Issues":[{"Id":"455539882","IsPullRequest":false,"CreatedAt":"2019-06-13T05:20:58","Actor":"hillin","Number":"937","RawContent":null,"Title":"Designer: XDG0062 error on d:DesignInstance","State":"open","Body":"* .NET Core Version: 3.0 Preview 5\r\n* Windows version: Windows 10 Version 1803\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nWhen using `d:DesignInstance` for `d:DataContext` in a UserControl or Window, the designer throws an ArgumentException and reports an `XDG0062` error in the error list. A wavy line will also shown under the corresponding XAML.\r\n\r\nIt seems this only happens if another object, referenced in a `clr-namespace`, is created in the same UserControl/Window.\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n Attaching a debugger to WpfSurface.exe reveals the following exceptions:\r\n\r\n> System.ArgumentNullException\r\n  HResult=0x80004003\r\n  Message=Value cannot be null.\r\nParameter name: key\r\n  Source=System.Private.CoreLib\r\n  StackTrace:\r\n   at System.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\r\n\r\n **Expected behavior:**\r\n Does not report an error.\r\n\r\n **Minimal repro:**\r\n https://github.com/hillin/NetCoreWpfDesignerIssues, in the `DesignInstance_XDG0062` project.\r\n","Url":"https://github.com/dotnet/wpf/issues/937","RelatedDescription":"Open issue \"Designer: XDG0062 error on d:DesignInstance\" (#937)"},{"Id":"455518107","IsPullRequest":true,"CreatedAt":"2019-06-13T03:28:46","Actor":"lindexi","Number":"936","RawContent":null,"Title":"Catch all the exception in touch process This MR do not expect to merge","State":"open","Body":"Because we can not use any way to repair it when the code throw the exception and the Stylus Input thread will exit\r\n\r\nMaybe it can fix https://github.com/dotnet/wpf/issues/935\r\n\r\nIt is an evil code","Url":"https://github.com/dotnet/wpf/pull/936","RelatedDescription":"Open PR \"Catch all the exception in touch process This MR do not expect to merge\" (#936)"},{"Id":"455506795","IsPullRequest":false,"CreatedAt":"2019-06-13T02:34:12","Actor":"lindexi","Number":"935","RawContent":null,"Title":"Throw IndexOutOfRangeException in WispLogic.CoalesceAndQueueStylusEvent","State":"open","Body":"* .NET Core Version: 3.0.100-preview5-011568\r\n* Windows version: 1903 18362.145\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Find in 4.7\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nThe application crash.\r\n\r\nWe find many customs will break the application when he touch the application. I catch the `AppDomain.CurrentDomain.UnhandledException` and find the WispLogic.CoalesceAndQueueStylusEvent may be break the application. \r\n\r\nSee: https://stackoverflow.com/questions/46049673/wpf-touch-application-partially-freezes-on-net-framework-4-7\r\n\r\nAnd [Bruno V](https://stackoverflow.com/users/3357566/bruno-v) tell me that it fix in .NET 4.7.1, but it seems not fix in dotnet core.\r\n\r\nI can not debug it, because 200 users found the crash among 300,000 users.\r\n\r\n- .NET 4.7: 200 users found the crash among 300,000 users.\r\n- .NET Core 3.0: 2 users found the crash among 600 users.\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nexceptions  \r\n\r\nExceptionType: System.IndexOutOfRangeException\r\n\r\ncallstack for crashes\r\n\r\n```\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at System.Windows.Input.StylusWisp.WispLogic.CoalesceAndQueueStylusEvent(RawStylusInputReport inputReport)\r\n   at System.Windows.Input.StylusWisp.WispLogic.ProcessInputReport(RawStylusInputReport inputReport)\r\n   at System.Windows.Input.PenContext.FirePackets(Int32 stylusPointerId, Int32[] data, Int32 timestamp)\r\n   at System.Windows.Input.PenThreadWorker.FlushCache(Boolean goingOutOfRange)\r\n   at System.Windows.Input.PenThreadWorker.FireEvent(PenContext penContext, Int32 evt, Int32 stylusPointerId, Int32 cPackets, Int32 cbPacket, IntPtr pPackets)\r\n   at System.Windows.Input.PenThreadWorker.ThreadProc()\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(Object state)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ThreadHelper.ThreadStart()\r\n```\r\n \r\n **Expected behavior:**\r\n\r\nThe application can run. \r\n\r\n **Minimal repro:**\r\n \r\nAn empty WPF application and run in touch device.","Url":"https://github.com/dotnet/wpf/issues/935","RelatedDescription":"Open issue \"Throw IndexOutOfRangeException in WispLogic.CoalesceAndQueueStylusEvent\" (#935)"},{"Id":"455470431","IsPullRequest":true,"CreatedAt":"2019-06-12T23:37:53","Actor":"ryalanms","Number":"934","RawContent":null,"Title":"Bindings to System.Dynamic types fail to resolve","State":"open","Body":"`MS.Internal.SystemCoreHelper.IsIDynamicMetaObjectProvider` was returning false for `System.Dynamic.ExpandoObject` causing the PropertyPath resolution to fail. \r\n\r\nOn .NET Core, System.Core is now a facade assembly that will never be loaded by the CLR.  **All System.Core types are now forwarded to other assemblies.**  This change updates the required assemblies to those containing the forwarded types (System.Runtime, loaded by default, and System.Linq.Expressions).  AssemblyHelper.cs will now check for System.Linq.Expressions instead of System.Core before loading the extension assembly. \r\n\r\n Fixes #695.  A larger architectural fix for the extension assemblies may happen after RTM.  ","Url":"https://github.com/dotnet/wpf/pull/934","RelatedDescription":"Open PR \"Bindings to System.Dynamic types fail to resolve\" (#934)"},{"Id":"454931083","IsPullRequest":true,"CreatedAt":"2019-06-12T22:53:09","Actor":"ryalanms","Number":"919","RawContent":null,"Title":"Fix incorrect localization causing crashes in RegisterCommandHandler and KeyGestures","State":"closed","Body":"Reviewed key strings, updated strings.resx files, and updated xlf files.  \r\n\r\nConfirmed updates fix NuGet Package Explorer and loc test application provided by @Lakritzator.  (Fixes #913.)","Url":"https://github.com/dotnet/wpf/pull/919","RelatedDescription":"Closed or merged PR \"Fix incorrect localization causing crashes in RegisterCommandHandler and KeyGestures\" (#919)"},{"Id":"454606085","IsPullRequest":false,"CreatedAt":"2019-06-12T22:53:09","Actor":"Lakritzator","Number":"913","RawContent":null,"Title":"Culture de-DE issue with DataGrid","State":"closed","Body":"* .NET Core Version: 3.0.100-preview7-012343\r\n\r\n* Windows version: Windows 10 1903 & Windows 7 (6.1 build 7601 Service Pack 1)\r\n\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n \r\n **Problem description:**\r\n When the UI Culture is de-DE, any interaction (wheel, click) with a DataGrid will throw an exception (see below). This is related to https://github.com/dotnet/wpf/issues/684\r\n\r\n **Actual behavior:**\r\n```\r\nUnhandled exception. System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.ArgumentException: Requested value 'BILDAUF' was not found.\r\n   at System.Enum.TryParseByName(RuntimeType enumType, String originalValueString, ReadOnlySpan`1 value, Boolean ignoreCase, Boolean throwOnFailure, UInt64& result)\r\n   at System.Enum.TryParseInt32Enum(RuntimeType enumType, String originalValueString, ReadOnlySpan`1 value, Int32 minInclusive, Int32 maxInclusive, Boolean ignoreCase, Boolean throwOnFailure, TypeCode type, Int32& result)\r\n   at System.Enum.TryParse(Type enumType, String value, Boolean ignoreCase, Boolean throwOnFailure, Object& result)\r\n   at System.Enum.Parse(Type enumType, String value, Boolean ignoreCase)\r\n   at System.Windows.Input.KeyConverter.GetKey(String keyToken, CultureInfo culture)\r\n   at System.Windows.Input.KeyConverter.ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, Object source)\r\n   at System.Windows.Input.KeyGestureConverter.ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, Object source)\r\n   at System.ComponentModel.TypeConverter.ConvertFromInvariantString(String text)\r\n   at System.Windows.Input.KeyGesture.CreateFromResourceStrings(String keyGestureToken, String keyDisplayString)\r\n   at System.Windows.Input.KeyGesture.AddGesturesFromResourceStrings(String keyGestures, String displayStrings, InputGestureCollection gestures)\r\n   at System.Windows.Input.ComponentCommands.LoadDefaultGestureFromResource(Byte commandId)\r\n   at System.Windows.Input.RoutedCommand.GetInputGestures()\r\n   at System.Windows.Input.RoutedCommand.get_InputGesturesInternal()\r\n   at System.Windows.Input.CommandBindingCollection.FindMatch(Object targetElement, InputEventArgs inputEventArgs)\r\n   at System.Windows.Input.CommandManager.TranslateInput(IInputElement targetElement, InputEventArgs inputEventArgs)\r\n   at System.Windows.UIElement.OnMouseWheelThunk(Object sender, MouseWheelEventArgs e)\r\n   at System.Windows.Input.MouseWheelEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\n   at System.Windows.RouteItem.InvokeHandler(RoutedEventArgs routedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.EventRoute.InvokeHandlers(Object source, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseTrustedEvent(RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseEvent(RoutedEventArgs args, Boolean trusted)\r\n   at System.Windows.Input.InputManager.ProcessStagingArea()\r\n   at System.Windows.Input.InputManager.ProcessInput(InputEventArgs input)\r\n   at System.Windows.Input.InputProviderSite.ReportInput(InputReport inputReport)\r\n   at System.Windows.Interop.HwndMouseInputProvider.ReportInput(IntPtr hwnd, InputMode mode, Int32 timestamp, RawMouseActions actions, Int32 x, Int32 y, Int32 wheel)\r\n   at System.Windows.Interop.HwndMouseInputProvider.FilterMessage(IntPtr hwnd, WindowMessage msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Window.ShowHelper(Object booleanBox)\r\n   at System.Windows.Window.Show()\r\n   at System.Windows.Window.ShowDialog()\r\n   at Caliburn.Micro.WindowManager.ShowDialog(Object rootModel, Object context, IDictionary`2 settings)\r\n```\r\n\r\n **Expected behavior:**\r\n No exception\r\n\r\n **Minimal repro:**\r\n https://github.com/Lakritzator/WpfDataGridCultureBug\r\nIn fact this is just a \"dotnet new wpf\", making sure the Thread.CurrentThread.CurrentUICulture is set to the \"de-DE\" culture, and change the grid in MainWindow.xaml to DataGrid.\r\nRun the example, and use the scrollwheel (or click) on the DataGrid.\r\n\r\nI was going to supply a PR, but I'm confused! In https://github.com/dotnet/wpf/pull/796 the translations are reverted and seem to be okay.\r\n\r\nBut in the final file https://github.com/dotnet/wpf/blob/master/src/Microsoft.DotNet.Wpf/src/PresentationFramework/Resources/xlf/Strings.de.xlf#L2952 there are still translations which probably cause the issue.\r\n\r\nAnd somehow I don't know where the changes come from...\r\n\r\nMaybe @ryalanms knows what happened here.","Url":"https://github.com/dotnet/wpf/issues/913","RelatedDescription":"Closed issue \"Culture de-DE issue with DataGrid\" (#913)"},{"Id":"455432585","IsPullRequest":true,"CreatedAt":"2019-06-12T21:28:00","Actor":"stevenbrix","Number":"933","RawContent":null,"Title":"making copy-wpf more useful","State":"open","Body":"I'm trying to make our developer-guide and scripts more helpful for people new to the project. In doing so, I realized the `-local` to copy-wpf.ps1 isn't really helpful since the version of the `Microsoft.WindowsDesktop.App` runtime there is fairly old, and coincides with the version of the sdk defined in our global.json. In general, I feel like it's a better practice to use the dotnet-install script to create a dotnet install at a known location, then modify that install as you see fit. The local `.dotnet` folder should really only be used for automated testing and building our product, not modified for manual testing purposes. Since we don't build our tests against the `Microsoft.WindowsDesktop.App` runtime, copying our assemblies anywhere in that location doesn't even make sense anyways.\r\n\r\nI ran into this issue trying to validate some changes against the large suite of our DRTs that aren't built out in the open yet.\r\n","Url":"https://github.com/dotnet/wpf/pull/933","RelatedDescription":"Open PR \"making copy-wpf more useful\" (#933)"},{"Id":"455371899","IsPullRequest":false,"CreatedAt":"2019-06-12T18:54:52","Actor":"rladuca","Number":"932","RawContent":null,"Title":"Convert C# Reference Assembly Generation to Use GenAPI","State":"open","Body":"Currently, C# assemblies are building reference assemblies via [ProduceReferenceAssembly](https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-properties?view=vs-2019) (corresponding to the CSC flag [-refout](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/refout-compiler-option)).\r\n\r\nThis causes several issues:\r\n\r\n- Reference assemblies contain internal types due to WPF's use of `InternalsVisibleTo` in many of its assemblies.\r\n- Due to this, several reference assemblies may have dangling type references as we move toward the same reference assembly surface as .NET Framework.  This was also the case in .NET Framework for some reference assemblies, but this wasn't as strictly enforced.\r\n\r\nCurrently, the known dangling references are in the `PresentationCore` and `PresentationFramework` reference assemblies, the later only when `PresentationUI`'s reference assembly is removed.\r\n\r\nTo fix these, we want to switch to using the [GenAPI tool](https://github.com/dotnet/arcade/tree/a1805103791e43031355e11c0d037bca803a9593/src/Microsoft.DotNet.GenAPI) so that we can tailor the content of the reference assemblies to only contain necessary API surface area.  \r\n\r\nOur builds directly use `ProjectReference` for needed assemblies that are in the same repository and will alter these for those that are not available in the same repository (via [WpfProjectReference.targets](https://github.com/dotnet/wpf/blob/master/eng/WpfArcadeSdk/tools/WpfProjectReference.targets)).  We likely will have to update this mechanic if internal building assemblies require internals from the reference assemblies.\r\n\r\n- [ ] Call GenAPI to generate `PresentationCore`'s reference assembly\r\n- [ ] Trim output to only needed types\r\n- [ ] Do the same for the rest of the publicly building C# assemblies\r\n- [ ] Test package ingestion against dotnet-wpf-int to validate [WpfProjectReference.targets](https://github.com/dotnet/wpf/blob/master/eng/WpfArcadeSdk/tools/WpfProjectReference.targets)\r\n- [ ] Fix issues as needed\r\n- [ ] Apply GenAPI changes to dotnet-wpf-int C# assemblies","Url":"https://github.com/dotnet/wpf/issues/932","RelatedDescription":"Open issue \"Convert C# Reference Assembly Generation to Use GenAPI\" (#932)"},{"Id":"455340609","IsPullRequest":false,"CreatedAt":"2019-06-12T17:38:49","Actor":"ChrisSires","Number":"931","RawContent":null,"Title":"Tooltips associated with the Ribbon control are not hoverable","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.507\r\n Commit:    e8520940d7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.507\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.11\r\n  Commit:  d6a5616240\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n* Windows version: (`winver`)  Version 1809 (OS Build 17763.503)\r\n\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\nTooltips associated with the Ribbon control are not hoverable; it is not possible to move the mouse over the tooltip to keep the tooltip.\r\n\r\nExpected Result:\r\n\r\nHoverable: Should be able to hover on the additional content(tooltip)​\r\n\r\nActual Result:\r\n\r\nThe tooltip is not Hoverable. Tooltip is dismissed on hovering to it.\r\n \r\n **Minimal repro:**\r\n ```\r\n<Window x:Class=\"TestWPF.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\"\r\n        Name=\"NameOfWindow\">\r\n\r\n    <Grid>\r\n        <Ribbon>\r\n            <RibbonMenuButton ToolTip=\"tooltip not hoverable\" Label=\"Ribbon Menu Button\" />\r\n            <CheckBox Content=\"CheckBox\" ToolTip=\"also not hoverable\"/>\r\n        </Ribbon>\r\n    </Grid>\r\n</Window>   \r\n```\r\n\r\nNote: I expect this is the behavior for many other controls as well; this appears to be a new MAS accessibility requirement.","Url":"https://github.com/dotnet/wpf/issues/931","RelatedDescription":"Open issue \"Tooltips associated with the Ribbon control are not hoverable\" (#931)"},{"Id":"455191956","IsPullRequest":true,"CreatedAt":"2019-06-12T13:14:27","Actor":"dotnet-maestro[bot]","Number":"930","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190612.01\r\n- **Date Produced**: 6/12/2019 10:12 AM\r\n- **Commit**: b114db9944f92786a2f5e321827742ca5b4628bf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview7-27812-01\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview7.19311.9 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILDAsm** -> 3.0.0-preview7.19311.2 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview7.19311.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 3.0.0-preview7.19311.2 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview7.19311.2 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/930","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#930)"},{"Id":"455006247","IsPullRequest":false,"CreatedAt":"2019-06-12T04:27:49","Actor":"glent1","Number":"929","RawContent":null,"Title":"Duplicated frameworks in runtimeconfig.json","State":"open","Body":"**.NET Core Version:**  \r\n3.0.100-preview7-012361\r\n\r\n**Windows version:**\r\n1803 \r\n\r\n**Does the bug reproduce also in WPF for .NET Framework 4.8?:**\r\nUnlikely\r\n\r\n **Problem description:** \r\nBuild creates a runtimeconfig.json as follows ...\r\n\r\n```\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"frameworks\": [\r\n      {\r\n        \"name\": \"Microsoft.WindowsDesktop.App\",\r\n        \"version\": \"3.0.0-preview7-27811-08\"\r\n      },\r\n      {\r\n        \"name\": \"Microsoft.WindowsDesktop.App\",\r\n        \"version\": \"3.0.0-preview7-27811-08\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nApplication then fails with Invalid runtimeconfig.json\r\n\r\nEditing and removing the duplication allow the application to run\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/929","RelatedDescription":"Open issue \"Duplicated frameworks in runtimeconfig.json\" (#929)"},{"Id":"454966062","IsPullRequest":false,"CreatedAt":"2019-06-12T01:03:29","Actor":"lindexi","Number":"928","RawContent":null,"Title":"WPF shows that some windows in multithreading will be locked in the PenThreadWorker constructor ","State":"open","Body":"* .NET Core Version: 3.0.100-preview5-011568\r\n* Windows version: 1903 18362.145\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Maybe\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nWPF will initialize pen thread when the window initializing. But I find the window may be locked in PenThreadWorker constructor.\r\n\r\nThe `UnsafeNativeMethods.CreateResetEvent` will lock the thread.\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nI use multithreading to create some windows by this code and maybe the thread be locked in PenThreadWorker constructor.\r\n\r\nThe Demo code\r\n\r\n```csharp\r\n    public partial class App : Application\r\n    {\r\n        /// <inheritdoc />\r\n        protected override void OnStartup(StartupEventArgs e)\r\n        {\r\n            var thread = new Thread(() =>\r\n            {\r\n                var mainWindow = new MainWindow();\r\n                mainWindow.Show();\r\n                Dispatcher.Run();\r\n            });\r\n            thread.SetApartmentState(ApartmentState.STA);\r\n            thread.Start();\r\n\r\n            base.OnStartup(e);\r\n        }\r\n    }\r\n```\r\n\r\nThe step\r\n\r\n1. Run the code \r\n\r\n1. Use the VisualStudio to suspend the application\r\n\r\nMaybe you can find the application only create a `Stylus Input` thread and show only a main window and the other main window and the thread be locked in PenThreadWorker constructor and the window can not show\r\n\r\nWhy I need multithreading to show the windows? I need the splash window to show the welcome page and then I should show the main window in other thread to do the bussiness code and I should close the splash window when the main window showed.\r\n\r\nBut I found some users could not show the main window and the main window be lock in PenThreadWorker constructor.\r\n\r\nI use dnspy to suspend the application and find the code run in PenThreadWorker constructor and the `UnsafeNativeMethods.CreateResetEvent` will lock the thread.\r\n\r\n```csharp\r\n PenThreadWorker..ctor()  \r\n PenThread..ctor()  \r\n PenThreadPool.GetPenThreadForPenContextHelper(PenContext penContext)  \r\n PenThreadPool.GetPenThreadForPenContext(PenContext penContext)  \r\n WispTabletDeviceCollection.UpdateTabletsImpl()  \r\n WispTabletDeviceCollection.UpdateTablets()  \r\n WispTabletDeviceCollection..ctor()  \r\n WispLogic.get_WispTabletDevices()  \r\n WispLogic.RegisterHwndForInput(InputManager inputManager, PresentationSource inputSource)  \r\n HwndStylusInputProvider..ctor(HwndSource source)  \r\n HwndSource.Initialize(HwndSourceParameters parameters)  \r\n HwndSource..ctor(HwndSourceParameters parameters)  \r\n\r\n PresentationFramework.dll!System.Windows.Window.CreateSourceWindow(bool duringShow)  \r\n PresentationFramework.dll!System.Windows.Window.CreateSourceWindowDuringShow()  \r\n PresentationFramework.dll!System.Windows.Window.ShowHelper(object booleanBox)  \r\n```\r\n\r\n\r\n\r\n **Expected behavior:**\r\n\r\nThe `UnsafeNativeMethods.CreateResetEvent` do not lock the thread\r\n \r\n **Minimal repro:**\r\n \r\nCreate a empty WPF application and then change the app.xaml.cs code\r\n\r\n```csharp\r\n    public partial class App : Application\r\n    {\r\n        /// <inheritdoc />\r\n        protected override void OnStartup(StartupEventArgs e)\r\n        {\r\n            var thread = new Thread(() =>\r\n            {\r\n                var mainWindow = new MainWindow();\r\n                mainWindow.Show();\r\n                Dispatcher.Run();\r\n            });\r\n            thread.SetApartmentState(ApartmentState.STA);\r\n            thread.Start();\r\n\r\n            base.OnStartup(e);\r\n        }\r\n    }\r\n```\r\n\r\nRun the code and maybe you can find one of the main window can not show and it stop in `UnsafeNativeMethods.CreateResetEvent` and I wait for a hour but it can not run.","Url":"https://github.com/dotnet/wpf/issues/928","RelatedDescription":"Open issue \"WPF shows that some windows in multithreading will be locked in the PenThreadWorker constructor \" (#928)"},{"Id":"454959470","IsPullRequest":false,"CreatedAt":"2019-06-12T00:28:29","Actor":"ojhad","Number":"927","RawContent":null,"Title":"Fix and Re-enable failing Animation Feature Tests","State":"open","Body":"There are a total of 35 test failures in Animation Feature tests. These tests have been disabled as part of the Animation Feature Test port. They need to be fixed and re-enabled.\r\n\r\nHere is the internal PR disabling the tests: [Disabling Failing Animation Tests](https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-test/pullrequest/1626?path=%2Fsrc%2FTest%2FAnimation%2FFeatureTests%2FAnimation%2FAnimationOnElement%2FCode%2FAnimationOnElement.cs&_a=overview)\r\n\r\n**List of disabled tests:**\r\nSubArea: \"Animation.Boundary\" Name: \"BoundaryTest\"\r\nVariation:\r\n\t- ByteAnimation\r\n\t- ColorAnimation\r\n\t- DecimalAnimation\r\n        - DoubleAnimation\r\n\t- Int16Animation\r\n\t- Int32Animation\r\n\t- Int64Animation\r\n\t- Point3DAnimation\r\n\t- QuaternionAnimation\r\n\t- RectAnimation\r\n\t- SingleAnimation\r\n\t- SizeAnimation\r\n\t- ClockController\r\n\t- Vector3DAnimation\r\n\t- VectorAnimation\r\n\t- ThicknessAnimation\r\n\r\nSubArea: \"Animation.PropertyMethodEvent\" Name: \"AnimationOnElementTest\"\r\nVariation:\r\n\t- LINE\r\n\t- BORDER\r\n\t- CANVAS\r\n\t- CHECKBOX\r\n\t- IMAGE\r\n\t- LISTBOX\r\n\t- PATH\r\n\t- RECTANGLE\r\n\t- TABLE\r\n\t- VIEWPORT3D\r\n\t- MEDIAELEMENT\r\n\r\nSubArea: \"Animation.PropertyMethodEvent.Events\" Name: \"CurrentTimeInvalidatedTest\"\r\nVariation:\r\n\t- Color\r\n\t- Double\r\n\t- Double2\r\n\t- Point\r\n\t- Thickness\r\n\r\nSubArea: \"Animation.PropertyMethodEvent.Regressions\" Name: \"BigSpeedRatioTest\"\r\nVariation:\r\n\t- true\r\n\r\nSubArea: \"Animation.PropertyMethodEvent.Regressions\" Name: \"RowSpanZeroTest\"\r\nVariation:\r\n\t- true\r\n\r\nSubArea: \"Storyboards.Triggers.EventTriggers\" Name: \"EventTriggersTest\"\r\nVariation:\r\n\t- ETElement3D-KeyDown.xaml\r\n","Url":"https://github.com/dotnet/wpf/issues/927","RelatedDescription":"Open issue \"Fix and Re-enable failing Animation Feature Tests\" (#927)"},{"Id":"454937343","IsPullRequest":false,"CreatedAt":"2019-06-11T23:24:46","Actor":"SamBent","Number":"925","RawContent":null,"Title":"Fix D3DImage tests","State":"closed","Body":"(Port from .NET 4.8)  Fix broken D3DImage tests:\n\n1. Tests added in Dev11 timeframe aren't run at all, due to a dll name collision.  Rename the newer dll to \"D3DImageTestDev11.dll\".\n2. If the graphics environment isn't rich enough, the tests fail - i.e. return TestResult.Fail.   Change this to  TestResult.Ignore.   The test knows it won't be able to work, through no fault of the test or of the product code.\n3. Include HW acceleration in the environment check.  This avoids meaningless \"failures\" when running the tests over RDP (or other environments that default to software rendering).","Url":"https://github.com/dotnet/wpf/issues/925","RelatedDescription":"Closed issue \"Fix D3DImage tests\" (#925)"},{"Id":"454945427","IsPullRequest":false,"CreatedAt":"2019-06-11T23:23:41","Actor":"SamBent","Number":"926","RawContent":null,"Title":"Fix D3DImage tests","State":"open","Body":"(Port from .NET 4.8)   Fix broken D3DImage tests:\n\n1. Tests added in Dev11 timeframe aren't run at all, due to a dll name collision.  Rename the newer dll to \"D3DImageTestDev11.dll\".\n2. If the graphics environment isn't rich enough, the tests fail - i.e. return TestResult.Fail.   Change this to  TestResult.Ignore.   The test knows it won't be able to work, through no fault of the test or of the product code.\n3. Include HW acceleration in the environment check.  This avoids meaningless \"failures\" when running the tests over RDP (or other environments that default to software rendering).","Url":"https://github.com/dotnet/wpf/issues/926","RelatedDescription":"Open issue \"Fix D3DImage tests\" (#926)"},{"Id":"454936908","IsPullRequest":false,"CreatedAt":"2019-06-11T22:48:54","Actor":"SamBent","Number":"924","RawContent":null,"Title":"Fix Ribbon tests","State":"open","Body":"(Port from .NET 4.8)   Fix broken Ribbon tests:\n\n1. The ImageUtility.GetScreenBoundingRectangle method returns the wrong result when its argument is the root visual - it's off by the size of the non-client area (as it calls ClientToScreen when it shouldn't).   This confuses tests that try to click in the non-client area, e.g. title bar or resize-border.    Fixed this, as well as some futile attempts to work around it.\n2. Several tests do input in ways that rely on pre-existing state (before the test starts), and mistakenly fail if that state is unlucky.  E.g.\n   a. Previous test leaves a dropdown open.   New motion doesn't work (dropdown has capture).\n   b. Window is created near mouse position that causes an unexpected MouseEnter event (or similar)\n3. Math for choosing a new width, to test collapsing by resize, is wrong\n4. Some actions don't do anything when the Ribbon is collapsed.  Tests need to check this.\n5. Ignore failures due to \"known\" product bug - infinite layout loop involving TabHeaders panel and ContextualTabGroups panel.\n6. Scrolling a RibbonTabHeader into view doesn't always work.\n","Url":"https://github.com/dotnet/wpf/issues/924","RelatedDescription":"Open issue \"Fix Ribbon tests\" (#924)"},{"Id":"454934451","IsPullRequest":false,"CreatedAt":"2019-06-11T22:39:35","Actor":"SamBent","Number":"923","RawContent":null,"Title":"Fix Controls tests","State":"open","Body":"(Port from .NET 4.8)  Fix broken Controls tests:\n\n[0. Disable mouse-move and mouse-wheel coalescing (separate checkin).   Tests expect immediate delivery.]\n1. Add logging for mouse-wheel events in DRT.   No change to test logic, but helps debugging.\n2. Add option to trace the \"UpdateOffsets\" method in DrtControls/ContainerVirtualization.  For debugging.\n3. Faulty logic in CV.FindLastIndexInViewport - gets wrong answer when the bottom edge of the viewport lies between two containers.  (This happens in Win8+, but not on Win7, due to different sizes from Aero2 vs. Aero themes).\n3. Disabled test of ScrollToBottom in the case (DataGrid / Item scrolling / Grouping / Expander / !Virtualizing).  The product code gets this wrong when the sizes are \"just right\", which happens in Aero2 (but not in Aero).  It's a minor bug, not worth failing the whole test.\n4. Disable CV tests when Items-scrolling with hierarchical display (i.e. grouping or TreeView) when no theme is active (e.g. on server OS).  Many of the keyboard navigation actions (e.g. End, PageDown, LineUp) are failing on server - typically the test and the product code disagree by one item.   This could be test bug arising from the different heights in Classic, or product bug.   As above, a minor bug - not worth failing the whole test.\n5. Faulty logic in UpdateOffsets in the case (Key.Down / ItemScrolling).  We always scroll the next item (from the currently focused one) into view, regardless of page size, position in viewport, etc. \n6. Calendar test misinterprets Thread.Abort as a failure.   Replaced with a non-exception-ish way of cleaning up threads.\n7. DataGrid can't sort a ComboBox column until you declare how the column displays its data.   Sorting test forgot to do this.\n8. Typo in scrolling test - mouse-wheel \"Up\" verifies in the wrong direction.","Url":"https://github.com/dotnet/wpf/issues/923","RelatedDescription":"Open issue \"Fix Controls tests\" (#923)"},{"Id":"454933956","IsPullRequest":false,"CreatedAt":"2019-06-11T22:37:42","Actor":"SamBent","Number":"922","RawContent":null,"Title":"Fix VisualStateManager tests","State":"open","Body":"(Port from .NET 4.8)   Fix broken VisualStateManager tests:\n\n0. Disable mouse-move and mouse-wheel coalescing (separate checkin).  Tests assume mouse input is delivered immediately.]\n1. Disable animation when opening a ComboBox dropdown.  The tests use the position of a ComboBoxItem assuming it's visible, but if the animation hasn't finished it may not be.\n2. (AnimationDescription, ModelBaseVsmTests) Improve logic for verifying animations.  Old logic assumed animations were always in an intermediate state at checkpoint queries, but this is unwarranted due to imprecision in scheduling of queries relative to the animation clocks.  The new logic accepts values at the endpoints of the animation range, and ensures that at least one checkpoint query occurs.\n3. (ButtonAnimationBehavior) Fixed faulty logic for tracking the state of mouse button.  It was using the wrong events, and saving the wrong value \n4. (several classes) fixed problems sending input when its effect would not be felt, e.g.\n   a. mouse-move when some element has capture (e.g. mouse-button is pressed)\n   b. common states cleared in the wrong order\n   c. input has a different effect (e.g. mouse-drag in DG column header moves the column)\n5. (CalendarDayButtonAutomationBehavior)  Fixed hidden assumptions about current date.  The test stopped working 10 years after it was written.  The test failed if run near the end of a month, when the current date number for the previous month also appears.\n6. (ControlAutomationBehavior) Log result of attempted mouse-moves.  Fail if they don't set element.IsMouseOver.   This was helpful in finding the problems in (4), leaving it in to catch similar problems.\n7. (GoToStateTest) Added exceptions for some unreachable states involving ComboBoxItem (mouse over implies focus)\n8. (ItemAutomationBehavior) Test was using the wrong visual element\n9. (TreeViewItemAutomationBehavior) mouse-over tests should use the TreeViewItem's header.","Url":"https://github.com/dotnet/wpf/issues/922","RelatedDescription":"Open issue \"Fix VisualStateManager tests\" (#922)"},{"Id":"454933433","IsPullRequest":false,"CreatedAt":"2019-06-11T22:35:58","Actor":"SamBent","Number":"921","RawContent":null,"Title":"Fix ElementServices tests","State":"open","Body":"(Port from .NET 4.8)  Fix broken ElementServices tests:\n\n[0. Disable mouse-move coalescing (separate checkin).]\n1. With no coalescing, QueryCursor events occur more often.  Add them to \"expected\" list.\n2. Avoid failure due to assumption that mouse-move actually moves the mouse (it doesn't if the mouse is already in the right place before the test starts).\n3. Add Sleep after calls to SetWindowPos - workaround for OS behavior, it seems to be coalescing these as of RS3.    (This change affects TestRuntime.dll, hence applies to many other tests).","Url":"https://github.com/dotnet/wpf/issues/921","RelatedDescription":"Open issue \"Fix ElementServices tests\" (#921)"},{"Id":"454932199","IsPullRequest":false,"CreatedAt":"2019-06-11T22:31:23","Actor":"SamBent","Number":"920","RawContent":null,"Title":"Mouse-move simulation in tests","State":"open","Body":"(Port from .NET 4.8)  Fix bugs and invalid assumptions in implementations of simulated mouse-move and mouse-wheel input.","Url":"https://github.com/dotnet/wpf/issues/920","RelatedDescription":"Open issue \"Mouse-move simulation in tests\" (#920)"},{"Id":"454907582","IsPullRequest":false,"CreatedAt":"2019-06-11T21:16:34","Actor":"miguep","Number":"918","RawContent":null,"Title":"Remove PresentationUI ref assembly from WPF","State":"open","Body":"Before preview 7, we need to ensure that PresentationUI does not generate a ref assembly.\r\nIn .NET Framework, this never shiped as a ref assembly and shouldn't be included in the .NET Core set either.","Url":"https://github.com/dotnet/wpf/issues/918","RelatedDescription":"Open issue \"Remove PresentationUI ref assembly from WPF\" (#918)"},{"Id":"454681453","IsPullRequest":true,"CreatedAt":"2019-06-11T13:50:34","Actor":"dotnet-maestro[bot]","Number":"917","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190610.4\r\n- **Date Produced**: 6/10/2019 1:59 PM\r\n- **Commit**: e99b2cb79ebb6fe0050a90b41da86fe5ee32662d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview7.19310.4\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/917","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#917)"},{"Id":"454668767","IsPullRequest":true,"CreatedAt":"2019-06-11T13:36:23","Actor":"dotnet-maestro[bot]","Number":"916","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190610.2\r\n- **Date Produced**: 6/11/2019 5:30 AM\r\n- **Commit**: b8fb4ecab72d1a292f75f14222ec867d7ea77341\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview7.19310.2\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/916","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#916)"},{"Id":"454668264","IsPullRequest":true,"CreatedAt":"2019-06-11T13:30:26","Actor":"dotnet-maestro[bot]","Number":"915","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190611.01\r\n- **Date Produced**: 6/11/2019 10:34 AM\r\n- **Commit**: bba327461e7521b640be91127309760a18f12416\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview7-27811-01\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview7.19310.8 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview7.19310.8 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview7.19310.8 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview7.19310.8 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview7.19310.8 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview7.19310.8 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview7.19310.8 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview7.19310.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview7.19310.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview7.19310.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview7.19310.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview7.19310.8 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview7.19310.8 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview7.19310.8 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview7.19310.8 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILDAsm** -> 3.0.0-preview7.19310.2 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview7.19310.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 3.0.0-preview7.19310.2 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview7.19310.2 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/915","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#915)"},{"Id":"454651099","IsPullRequest":true,"CreatedAt":"2019-06-11T12:33:21","Actor":"dotnet-maestro[bot]","Number":"914","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190610.24\r\n- **Date Produced**: 6/11/2019 12:59 AM\r\n- **Commit**: f268510de7a7bcf800a6966830f8d11ff8d24e0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19310.24\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19310.24\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19310.24\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/914","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#914)"},{"Id":"454489801","IsPullRequest":true,"CreatedAt":"2019-06-11T05:40:36","Actor":"walterlv","Number":"912","RawContent":null,"Title":"Fix a incorrect spelled word.","State":"open","Body":"Actually, the correct word is `ReferencePath`.\r\n\r\n```xml\r\n<ReferencePath Include=\"xxx\" />\r\n```","Url":"https://github.com/dotnet/wpf/pull/912","RelatedDescription":"Open PR \"Fix a incorrect spelled word.\" (#912)"},{"Id":"454268329","IsPullRequest":false,"CreatedAt":"2019-06-10T17:00:01","Actor":"rladuca","Number":"911","RawContent":null,"Title":"Restructure product DLLs maintaining compatibility with old naming scheme","State":"open","Body":"In order to more effectively collect crash reports and differentiate them from .NET Framework reports, we want to ensure that all binaries are named differently than they are in .NET Framework.  This needs to be done by Preview 7 as this is, essentially, a binary composition and API change.\r\n\r\nThis was already done for the native assemblies (e.g. penimc_**cor3**), we should use the same suffix (**_cor3**).\r\n\r\nThere are several steps to follow here:\r\n- [ ]  Rename outputs in all projects (open and internal)\r\n- [ ]  Update ProjectReferences in all projects (open/internal/test)\r\n- [ ]  Update targets related to replacing ProjectReferences according to open/internal split\r\n- [ ]  Update any System.Xaml/PBT code that might rely on specific names\r\n  - [ ]  Ensure PBT works in our tests (manual and otherwise)\r\n- [ ]  Full test runs\r\n  - [ ]  Fix any test issues arising from the rename\r\n- [ ]  Create type forwarders for all assemblies using GenAPI (use different project names to libs)\r\n  * These will be static and represent a snapshot in time of the API, specifically compatible with .NET 4.8\r\n- [ ]  Update ApiCompat to ensure these forwarders are always compatible with .NET 4.8\r\n- [ ]  Inform upstream consumers of the changes to the binaries (see [here ](https://github.com/dotnet/core-setup/issues/6694)for an example).\r\n\r\nThis list will update as things progress.","Url":"https://github.com/dotnet/wpf/issues/911","RelatedDescription":"Open issue \"Restructure product DLLs maintaining compatibility with old naming scheme\" (#911)"},{"Id":"454161781","IsPullRequest":true,"CreatedAt":"2019-06-10T14:13:09","Actor":"dotnet-maestro[bot]","Number":"910","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190609.4\r\n- **Date Produced**: 6/9/2019 1:40 PM\r\n- **Commit**: b433851e238013f76eab96e19a5bb1d0fbb2272e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview7.19309.4\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/910","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#910)"},{"Id":"454151959","IsPullRequest":true,"CreatedAt":"2019-06-10T13:34:17","Actor":"dotnet-maestro[bot]","Number":"909","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190609.1\r\n- **Date Produced**: 6/9/2019 1:13 PM\r\n- **Commit**: dba3125ab43aa8ab40638c17e99026a635658ff3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview7.19309.1\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/909","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#909)"},{"Id":"454151554","IsPullRequest":true,"CreatedAt":"2019-06-10T13:18:04","Actor":"dotnet-maestro[bot]","Number":"908","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190610.02\r\n- **Date Produced**: 6/10/2019 10:42 AM\r\n- **Commit**: 3f9156d5d9b5ae4b100baeaa75011aaee88a3f4b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview7-27810-02\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview7.19309.5 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview7.19309.5 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview7.19309.5 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview7.19309.5 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview7.19309.5 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview7.19309.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview7.19309.5 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview7.19309.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview7.19309.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview7.19309.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview7.19309.5 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview7.19309.5 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview7.19309.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview7.19309.5 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview7.19309.5 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILDAsm** -> 3.0.0-preview7.19309.2 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview7.19309.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 3.0.0-preview7.19309.2 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview7.19309.2 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/908","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#908)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-06-13T05:30:50.6570508Z","RunDurationInMilliseconds":761}