{"Data":{"GitHub":{"Issues":[{"Id":"366491704","IsPullRequest":true,"CreatedAt":"2018-10-04T03:56:15","Actor":"pkulikov","Number":"1139","RawContent":null,"Title":"New API overview: added AsDynamic call","State":"closed","Body":"The example at the end of the [overview of new ML.NET API](https://github.com/dotnet/machinelearning/blob/master/docs/code/MlNetHighLevelConcepts.md#prediction-function) doesn't use `AsDynamic`:\r\n```csharp\r\nvar inputData = env.CreateDataView(new InputExample[] { example });\r\nvar outputData = model.Transform(inputData);\r\nvar output = outputData.AsEnumerable<OutputPrediction>(env, reuseRowObject: false).Single();\r\n```\r\n\r\nSo, it looks that the `AsDynamic` call in the cookbook example is not necessary.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1139","RelatedDescription":"Closed or merged PR \"New API overview: added AsDynamic call\" (#1139)"},{"Id":"366602653","IsPullRequest":true,"CreatedAt":"2018-10-04T02:53:44","Actor":"tannergooding","Number":"1145","RawContent":null,"Title":" Fix MatchNumberWithTolerance to better compare floating-point values","State":"open","Body":"This updates `MatchNumberWithTolerance` to better compare floating-point values and enables it on Windows.\r\n\r\nThe previous algorithm was not properly accounting for the distribution of binary floating-point values and would not allow a match for numbers that could have been reasonably considered as equivalent.","Url":"https://github.com/dotnet/machinelearning/pull/1145","RelatedDescription":"Open PR \" Fix MatchNumberWithTolerance to better compare floating-point values\" (#1145)"},{"Id":"366580982","IsPullRequest":false,"CreatedAt":"2018-10-04T00:42:31","Actor":"ArieJones","Number":"1144","RawContent":null,"Title":"Inconsistancy in Training With Multiple Threads ","State":"open","Body":"We are currently using version 0.50 in creating some classifier models but are seeing some strange behavior. We are currently setting the number of threads in our classifiers due to #217 and wanting to be able to control the CPU usage on the server. \r\nSo when using a classifier like so .. \r\n`var algo = new StochasticDualCoordinateAscentClassifier()\r\n                    {\r\n                        Caching = CachingOptions.Disk,\r\n                        MaxIterations = 100,\r\n                        LossFunction = new SmoothedHingeLossSDCAClassificationLossFunction(),\r\n                        Shuffle = false,\r\n                        NumThreads = System.Environment.ProcessorCount - 1 //We use one less than the number of processors available,\r\n                    };`\r\n\r\nWhat we are noticing is that if we run this from a box with 4 cores on it then we get a decent model where the microaccuracy is above 90%. However, when we move this same code over to a larger server with 8 cores we are getting wildly different results. The microaccuracy drops down to around <60%. \r\nYikes! \r\n\r\nIs there possibly something we are missing in the documentation that would address this? ","Url":"https://github.com/dotnet/machinelearning/issues/1144","RelatedDescription":"Open issue \"Inconsistancy in Training With Multiple Threads \" (#1144)"},{"Id":"366224070","IsPullRequest":true,"CreatedAt":"2018-10-03T22:42:19","Actor":"beneyal","Number":"1135","RawContent":null,"Title":"Remove ComponentCatalog from EntryPointGraph's and GraphRunner's constructors","State":"closed","Body":"Fixes #1113 .\r\n\r\nThe constructors now use env.ComponentCatalog as their catalog, instead of a catalog being passed as an argument. All call sites were changed accordingly.","Url":"https://github.com/dotnet/machinelearning/pull/1135","RelatedDescription":"Closed or merged PR \"Remove ComponentCatalog from EntryPointGraph's and GraphRunner's constructors\" (#1135)"},{"Id":"366500309","IsPullRequest":true,"CreatedAt":"2018-10-03T22:41:43","Actor":"dzban2137","Number":"1140","RawContent":null,"Title":"General grammar and punctuation fixes in README.md","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1140","RelatedDescription":"Closed or merged PR \"General grammar and punctuation fixes in README.md\" (#1140)"},{"Id":"366549418","IsPullRequest":true,"CreatedAt":"2018-10-03T22:09:38","Actor":"Anipik","Number":"1143","RawContent":null,"Title":"Improvements to the \"Scale\" SIMD algorithm","State":"open","Body":"For inputs with fewer elements than can fit in the Vector type, it falls back to scalar code.\r\nFor inputs that are not naturally aligned (the alignment is not a multiple of 4), it does exclusively unaligned loads\r\nFor all other inputs, it will do at most two unaligned loads (one each for any leading/trailing unaligned elements) and all other loads will be aligned.\r\n\r\ncc @eerhardt @tannergooding @danmosemsft ","Url":"https://github.com/dotnet/machinelearning/pull/1143","RelatedDescription":"Open PR \"Improvements to the \"Scale\" SIMD algorithm\" (#1143)"},{"Id":"366537606","IsPullRequest":true,"CreatedAt":"2018-10-03T21:30:50","Actor":"adamsitnik","Number":"1142","RawContent":null,"Title":"add .NET Core 3.0 support for the benchmarks","State":"open","Body":"@Anipik works on making the 3.0 test pass, the Benchmark test was failing so here is the fix for it","Url":"https://github.com/dotnet/machinelearning/pull/1142","RelatedDescription":"Open PR \"add .NET Core 3.0 support for the benchmarks\" (#1142)"},{"Id":"366529435","IsPullRequest":true,"CreatedAt":"2018-10-03T21:07:35","Actor":"singlis","Number":"1141","RawContent":null,"Title":"Updating the CopyColumnsEstimator and Transform to use common code (#706)","State":"open","Body":"This builds on the Estimator conversion for the CopyColumnsTransform.\r\nThis change is mainly refactoring as common code has moved to base level classes.\r\n\r\nThis change is the following:\r\n       - CopyColumnTransform now derives from OneToOneTransformerBase\r\n       - CopyColumnEstimator now derives from TrivialEstimator\r\n       - CopyColumnTransform::Mapper now derives from MapperBase\r\n       - Removed code that was no longer needed due to these changes\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1141","RelatedDescription":"Open PR \"Updating the CopyColumnsEstimator and Transform to use common code (#706)\" (#1141)"},{"Id":"366481392","IsPullRequest":false,"CreatedAt":"2018-10-03T18:59:55","Actor":"CESARDELATORRE","Number":"1138","RawContent":null,"Title":"Possible bug/issue with TensorFlow featurizer for SDCA when using PiGSTy/Static API in a migrated sample from LearningPipeline API","State":"open","Body":"### System information\r\n- Using ML.NET v0.6 and PiGSTy/Static API\r\n\r\n### Issue\r\nWe have migrated the sample using **TensorFlow as featurizer** and using the **pre-trained Inception v3 TF model**, then using an ML.NET SDCA learner for the classification.\r\n\r\nThis is the original LearningPipeline API-based sample that was working ok:\r\nhttps://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/examples/DeepLearning_TensorFlowMLNETInceptionv3ModelScoring\r\n\r\nThe new code you can test is here:\r\nrepo: https://github.com/franperezlopez/machinelearning-samples\r\nbranch: features/samples-new-api\r\n\r\nHere’s an screenshot showing the execution:\r\n\r\n![image](https://user-images.githubusercontent.com/1712635/46432381-fccdae00-c702-11e8-84ed-794cde3d6398.png)\r\n\r\n•\tFirst, basically, the variables temp1 and temp2 and really the same object in memory (in Watcher, after \"make object ID\", you can see that both are pointing to the same position in memory. These variables come  from the object returned by **predictor.Predict()**. See the code in order to understand the code flow.\r\n\r\nIf `model.AsDynamic.MakePredictionFunction<ImageNetData, ImageNetStaticPrediction>(env).Predict(testData)` is meant to always return the same object in memory, it would be advisable to show that explicitly in the API, doing something like:\r\n\r\n`model.AsDynamic.MakePredictionFunction<ImageNetData, ImageNetStaticPrediction>(env, testData).Predict()`\r\n\r\nThat way, testData is provided through the constructor instead as parameter for the function/method, so it is clearer that you can only use it “once”. But I'm not sure if the behavior is a bug, though...\r\n\r\nCan you confirm if we need to “copy by value” the PredictionFunction to a new object whenever we want to do a different prediction with new test/sample data? For example, in a loop with multiple predictions, etc.\r\n\r\n•\tSecond. The predictions we are getting are much worse in quality/probability than when using the LearningPipeline API. In the Watcher, looking at the metrics, you can see what’s going on. Basically, we’re exploring the preds.score returned by the SDCA, but it looks weird we’re getting numbers like **0.2** …?  --> When we were using the LearningPipeline for this same example we were getting probabilities around 0.999 or 0.0001.\r\no\tYou can also see in the screenshot the value for “**softmax2_pre_activation**”, which is the features vector coming from the neural network. \r\n\r\n![image](https://user-images.githubusercontent.com/1712635/46432660-a3b24a00-c703-11e8-85bd-93db619c348b.png)\r\n\r\nLooks like the SDCA is not learning anything, it is always classifying as “broccoli”. So, we don’t know what’s going on here.\r\nWe might be doing something wrong or it might be a bug?\r\n\r\n![image](https://user-images.githubusercontent.com/1712635/46432696-b7f64700-c703-11e8-8354-3c03a4448b80.png)\r\n\r\n\r\nBottom line, we’re blocked with this sample. It is not working properly with the new Static API after migrating a working sample with the LearningPipeline. \r\nEither we’re doing something wrong or there’s an issue/bug here?\r\n\r\nThanks,\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1138","RelatedDescription":"Open issue \"Possible bug/issue with TensorFlow featurizer for SDCA when using PiGSTy/Static API in a migrated sample from LearningPipeline API\" (#1138)"},{"Id":"366464164","IsPullRequest":false,"CreatedAt":"2018-10-03T18:15:27","Actor":"sfilipi","Number":"1137","RawContent":null,"Title":"Package the datasets needed for the samples in a nuget","State":"open","Body":"The samples in docs.microsoft.com need to be fully self-contained like other MSDN code samples, so the users can copy-paste and run them. \r\n\r\nFor this we could either package the datasets needed for the samples in a NuGet, or download them from this repo, via aka.ms links. \r\nI prefer the NuGet option, since the package creation and its updates are on the repository, and we can track history. We can't do the same for the links, afaik, and it is a separate system. \r\n\r\nThis issue will be considered complete when we publish the NuGet containing one dataset that we can reference from the samples. ","Url":"https://github.com/dotnet/machinelearning/issues/1137","RelatedDescription":"Open issue \"Package the datasets needed for the samples in a nuget\" (#1137)"},{"Id":"366461191","IsPullRequest":false,"CreatedAt":"2018-10-03T18:07:27","Actor":"zyw400","Number":"1136","RawContent":null,"Title":"Better error message for non-existing columns when executing graph","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows\r\n- **.NET Version (eg., dotnet --info)**: Latest master branch \r\n\r\n### Issue\r\n\r\nExecuting a graph with wrong LabelColumn name, the error messages is not very clear:\r\n\r\nMessage: System.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.\r\nParameter name: Column\r\n\r\nIf the FeatureColumn name is wrong, the error message indicates Column not found, which is better.\r\n[infert.txt](https://github.com/dotnet/machinelearning/files/2443223/infert.txt)\r\n[graph_1.txt](https://github.com/dotnet/machinelearning/files/2443224/graph_1.txt)\r\n\r\n\r\n\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1136","RelatedDescription":"Open issue \"Better error message for non-existing columns when executing graph\" (#1136)"},{"Id":"366197167","IsPullRequest":true,"CreatedAt":"2018-10-03T14:10:35","Actor":"xxdr4gon","Number":"1132","RawContent":null,"Title":"Release/preview","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1132","RelatedDescription":"Closed or merged PR \"Release/preview\" (#1132)"},{"Id":"366201200","IsPullRequest":true,"CreatedAt":"2018-10-03T07:04:33","Actor":"artidoro","Number":"1134","RawContent":null,"Title":"Conversion of Hogwild SGD to estimator","State":"open","Body":"Ongoing work on converting the trainers to estimators (#754). This PR converts Hogwild SGD  (StochasticGradientDescentClassificationTrainer binary classification trainer). \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1134","RelatedDescription":"Open PR \"Conversion of Hogwild SGD to estimator\" (#1134)"},{"Id":"366197302","IsPullRequest":false,"CreatedAt":"2018-10-03T06:49:46","Actor":"sfilipi","Number":"1133","RawContent":null,"Title":"docs.microsoft.com don't display all the extension methods for trainers","State":"open","Body":"The training methods are extensions of the TrainingContext object, organized in partial classes (ex. RegressionTrainers), that are part of the same namespace (Microsoft.ML.StaticPipe), but packaged in different dlls . \r\nSo across the dlls there are several RegressionTrainers.xml (for the partial classes)\r\n\r\nOn the documents repo, there is only one RegressionTrainers.xml file (maybe the first encountered)\r\nhttps://github.com/dotnet/ml-api-docs/tree/smoke-test/dotnet/xml/Microsoft.ML.StaticPipe\r\n\r\nIf the docs CI cannot gather all those .xml in one. \r\nWe might have to keep the extension methods  within the namespaces  of the trainers, and rely on search for discoverability.\r\nIntellisense  might suffer, as the users would have to add all namespaces to get all trainers in the suggestions. \r\n\r\nWe can keep the extensions, on classes with the same names in those namespaces. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1133","RelatedDescription":"Open issue \"docs.microsoft.com don't display all the extension methods for trainers\" (#1133)"},{"Id":"365967495","IsPullRequest":true,"CreatedAt":"2018-10-03T05:05:18","Actor":"eerhardt","Number":"1118","RawContent":null,"Title":"Update build yaml to use official container functionality","State":"closed","Body":"We were using a pre-release Azure DevOps feature to do our Linux builds: `_PREVIEW_VSTS_DOCKER_IMAGE`. This feature is now an official feature, so we should switch to the officially supported functionality.\r\n\r\nI also moved the PR validation Linux queue to use the Azure DevOps hosted Linux machines.","Url":"https://github.com/dotnet/machinelearning/pull/1118","RelatedDescription":"Closed or merged PR \"Update build yaml to use official container functionality\" (#1118)"},{"Id":"366167777","IsPullRequest":false,"CreatedAt":"2018-10-03T04:09:05","Actor":"Zruty0","Number":"1131","RawContent":null,"Title":"Investigate and fix test failures","State":"open","Body":"Our commit success rate is below 50% at this point. \r\n\r\nWe no longer have the annoying deadlock plaguing the builds, but somehow the builds are still failing quite often. Let's spend some time and improve that story.\r\n\r\nFrom casual look, there is no single culprit: we seem to randomly fail to initialize build environment, and random tests seem to fail in random places. I guess this may have to do with resource-constrained runs: maybe we should actually try running xUnit tests sequentially and see if the sporadic failures go away?","Url":"https://github.com/dotnet/machinelearning/issues/1131","RelatedDescription":"Open issue \"Investigate and fix test failures\" (#1131)"},{"Id":"366141556","IsPullRequest":false,"CreatedAt":"2018-10-03T01:35:25","Actor":"thracian2015","Number":"1130","RawContent":null,"Title":"Sample for data from relational database?","State":"open","Body":"Do we have a sample that demonstrates how to use ML.NET with data from a relational database, such as SQL Server? I don't need a complete sample but just how to pass such a dataset, instead of using TextLoader?\r\n\r\nAlso, from what I can see, the samples use LearningPipeline which I've read is deprecated. Do we have a sample that demonstrates the new API?","Url":"https://github.com/dotnet/machinelearning/issues/1130","RelatedDescription":"Open issue \"Sample for data from relational database?\" (#1130)"},{"Id":"366088589","IsPullRequest":true,"CreatedAt":"2018-10-03T00:38:00","Actor":"shauheen","Number":"1123","RawContent":null,"Title":"Update Readme","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/1123","RelatedDescription":"Closed or merged PR \"Update Readme\" (#1123)"},{"Id":"366129850","IsPullRequest":false,"CreatedAt":"2018-10-03T00:30:47","Actor":"markusweimer","Number":"1129","RawContent":null,"Title":"Build errors involving `Microsoft.ML.InternalCodeAnalyzer`","State":"open","Body":"There seems to be an issue with how the build treats `Microsoft.ML.InternalCodeAnalyzer.dll`. After `build` from the command line, I did a rebuild in VS 2017. This results in many copies of this message in the error list:\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tIDE1001\tThe analyzer assembly 'C:\\src\\machinelearning\\bin\\AnyCPU.Debug\\Microsoft.ML.InternalCodeAnalyzer\\netstandard1.3\\Microsoft.ML.InternalCodeAnalyzer.dll' has changed. Diagnostics may be incorrect until Visual Studio is restarted.\tMicrosoft.ML.Core\t\t1\tActive\r\n```\r\n\r\nAfter restarting VS and doing a mere Build instead of Rebuild, I don't get this error. Rebuilding recreates the issue.\r\n\r\nI also get some weird behavior when trying to build in Ryder, which might illuminate the issue in VS. As far as I know, Ryder uses `msbuild` directly to issue a build. When I select Build (or Rebuild) in its UI, I get this error, involving the same `Microsoft.ML.InternalCodeAnalyzer.dll`:\r\n\r\n```\r\n  Microsoft.Common.CurrentVersion.targets(4187, 5): [MSB3021] Unable to copy file \"C:\\src\\machinelearning\\bin/obj/AnyCPU.Debug\\Microsoft.ML.InternalCodeAnalyzer\\netstandard1.3\\Microsoft.ML.InternalCodeAnalyzer.dll\" to \"C:\\src\\machinelearning\\bin/AnyCPU.Debug\\Microsoft.ML.InternalCodeAnalyzer\\netstandard1.3\\Microsoft.ML.InternalCodeAnalyzer.dll\". The process cannot access the file 'C:\\src\\machinelearning\\bin/AnyCPU.Debug\\Microsoft.ML.InternalCodeAnalyzer\\netstandard1.3\\Microsoft.ML.InternalCodeAnalyzer.dll' because it is being used by another process.\r\n```\r\n\r\nI'd assume Ryder itself loads that DLL on solution load. Hence, this might be a bug in it as opposed to the ML.NET build.\r\n\r\nThat being said, the VS issue is a nuisance we should investigate.","Url":"https://github.com/dotnet/machinelearning/issues/1129","RelatedDescription":"Open issue \"Build errors involving `Microsoft.ML.InternalCodeAnalyzer`\" (#1129)"},{"Id":"366125329","IsPullRequest":false,"CreatedAt":"2018-10-03T00:06:01","Actor":"montebhoover","Number":"1128","RawContent":null,"Title":"Quickstart Tutorial is out of date (version 0.4.0)","State":"open","Body":"The first tutorial mentioned on the docs site (https://docs.microsoft.com/en-us/dotnet/machine-learning/) uses ML.NET version 0.4.0, as does the example on main GitHub readme page.  These examples require the Microsoft.ML.Legacy namespace.\r\n\r\nSnippet from example:\r\n`var pipeline = new LearningPipeline();\r\npipeline.Add(new TextLoader(dataPath).CreateFrom<SentimentData>(separator: ','));\r\n`\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1128","RelatedDescription":"Open issue \"Quickstart Tutorial is out of date (version 0.4.0)\" (#1128)"},{"Id":"366120094","IsPullRequest":true,"CreatedAt":"2018-10-02T23:52:20","Actor":"liewkev","Number":"1127","RawContent":null,"Title":"Release/preview","State":"closed","Body":"#N/A","Url":"https://github.com/dotnet/machinelearning/pull/1127","RelatedDescription":"Closed or merged PR \"Release/preview\" (#1127)"},{"Id":"366113853","IsPullRequest":true,"CreatedAt":"2018-10-02T23:08:09","Actor":"najeeb-kazmi","Number":"1126","RawContent":null,"Title":"Adding prediction benchmarks using legacy LearningPipeline API","State":"open","Body":"Adds the same benchmarks as in `PredictionEngineBench.cs` in #1014 but using the legacy `LearningPipeline` API. We want to post results publicly to show the great speed improvements in single prediction performance that were made just by switching to the new `Estimators` API, followed by further improvements that were made to the new API for prediction performance. \r\n\r\n#1013 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1126","RelatedDescription":"Open PR \"Adding prediction benchmarks using legacy LearningPipeline API\" (#1126)"},{"Id":"366101960","IsPullRequest":true,"CreatedAt":"2018-10-02T22:19:01","Actor":"ajesusflores","Number":"1125","RawContent":null,"Title":"Improve code readability","State":"open","Body":"Remove comment and move code to a new private function with a descriptive name\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1125","RelatedDescription":"Open PR \"Improve code readability\" (#1125)"},{"Id":"366089236","IsPullRequest":false,"CreatedAt":"2018-10-02T21:34:37","Actor":"klausmh","Number":"1124","RawContent":null,"Title":"Provide API to estimate memory consumption by models","State":"open","Body":"Provide an API to estimate memory consumption by model training on a single node (for models for which it is possible).","Url":"https://github.com/dotnet/machinelearning/issues/1124","RelatedDescription":"Open issue \"Provide API to estimate memory consumption by models\" (#1124)"},{"Id":"366083095","IsPullRequest":true,"CreatedAt":"2018-10-02T21:15:34","Actor":"Ivanidzo4ka","Number":"1122","RawContent":null,"Title":"Convert RFF transform to estimators","State":"open","Body":"This PR converts RFF transform to IEstimator and add PigstyExtension.","Url":"https://github.com/dotnet/machinelearning/pull/1122","RelatedDescription":"Open PR \"Convert RFF transform to estimators\" (#1122)"},{"Id":"366081820","IsPullRequest":false,"CreatedAt":"2018-10-02T21:11:58","Actor":"sfilipi","Number":"1121","RawContent":null,"Title":"SDCA regression trainer context extension ","State":"open","Body":"The SDCA extensions on the various TrainContext objects don't follow the pattern of exposing an Action<advancedSettings> for the advanced arguments; therefore there is no way to set any of the other arguments, that are not directly exposed in that method signature, like the BiasLearningRate .  \r\n\r\n\r\nfile: Microsoft.ML.StandardLearners/Standard/SdcaStatic.cs","Url":"https://github.com/dotnet/machinelearning/issues/1121","RelatedDescription":"Open issue \"SDCA regression trainer context extension \" (#1121)"},{"Id":"366070417","IsPullRequest":false,"CreatedAt":"2018-10-02T20:39:22","Actor":"codemzs","Number":"1120","RawContent":null,"Title":"Need real time series dataset for tests","State":"open","Body":"Currently we have a fake excel generated dataset and this causes asserts to fire in two of the SSA forecasting tests.","Url":"https://github.com/dotnet/machinelearning/issues/1120","RelatedDescription":"Open issue \"Need real time series dataset for tests\" (#1120)"},{"Id":"366001300","IsPullRequest":true,"CreatedAt":"2018-10-02T18:42:40","Actor":"shauheen","Number":"1119","RawContent":null,"Title":"Cherrypick release notes for 0.6","State":"closed","Body":"Cherry-pick into release for RC3 0.6","Url":"https://github.com/dotnet/machinelearning/pull/1119","RelatedDescription":"Closed or merged PR \"Cherrypick release notes for 0.6\" (#1119)"},{"Id":"365868264","IsPullRequest":true,"CreatedAt":"2018-10-02T16:51:55","Actor":"amiteshenoy","Number":"1117","RawContent":null,"Title":"Fixed a grammatical error in windows-instructions","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1117","RelatedDescription":"Closed or merged PR \"Fixed a grammatical error in windows-instructions\" (#1117)"},{"Id":"365752477","IsPullRequest":true,"CreatedAt":"2018-10-02T06:02:04","Actor":"sjain1234","Number":"1116","RawContent":null,"Title":"Release/preview","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1116","RelatedDescription":"Closed or merged PR \"Release/preview\" (#1116)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-10-04T05:30:35.988809Z","RunDurationInMilliseconds":1015}