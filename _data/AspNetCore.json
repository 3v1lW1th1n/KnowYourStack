{"Data":{"Blog":{"FeedItems":[{"Title":"Orchard Core Beta 1 released","PublishedOn":"2017-11-21T19:32:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post by Sebastien Ros on behalf of the Orchard community Two years ago, the Orchard community started developing Orchard on .NET Core. After 1,500 commits, 297,000 lines of code, 127...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/21/orchard-core-beta-annoucement/","RawContent":null},{"Title":"Announcing .NET 4.7.1 Tools for the Cloud","PublishedOn":"2017-11-17T17:41:35+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we are releasing a set of providers for ASP.NET 4.7.1 that make it easier than ever to deploy your applications to cloud services and take advantage of cloud-scale features.  This release...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/17/announcing-net-4-7-1-tools-for-the-cloud/","RawContent":null},{"Title":"Improvements to Azure Functions in Visual Studio","PublishedOn":"2017-11-15T19:00:43+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We&#8217;re excited to announce several improvements to the Azure Functions experience in Visual Studio as part of the latest update to the Azure Functions tools on top of Visual Studio 2017 v15.5....","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/15/improvements-to-azure-functions-in-visual-studio/","RawContent":null},{"Title":"Creating a Minimal ASP.NET Core Windows Container","PublishedOn":"2017-11-09T16:18:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post by Mike Rousos One of the benefits of containers is their small size, which allows them to be more quickly deployed and more efficiently packed onto a host than virtual machines...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/09/creating-a-minimal-asp-net-core-windows-container/","RawContent":null},{"Title":"Publishing a Web App to an Azure VM from Visual Studio","PublishedOn":"2017-11-01T22:35:42+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"We know virtual machines (VMs) are one of the most popular places to run apps in Azure, but publishing to a VM from Visual Studio has been a tricky experience for some. So, we’re pleased to announce...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/11/01/publishing-a-web-app-to-an-azure-vm-from-visual-studio/","RawContent":null},{"Title":"Recent updates for publishing","PublishedOn":"2017-10-31T18:18:45+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We have recently added a few interesting features for ASP.NET publishing. The updates include: Container Registry Publish Updates Create publish profile without publishing In this post, we will...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/31/recent-updates-for-publishing/","RawContent":null},{"Title":"Sharing Configuration in ASP.NET Core SPA Scenarios","PublishedOn":"2017-10-27T15:17:34+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This is a guest post from Mike Rousos ASP.NET Core 2.0 recently released and, with it, came some new templates, including new project templates for single-page applications (SPA) served from an...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/27/sharing-configuration-in-asp-net-core-spa-scenarios/","RawContent":null},{"Title":"User accounts made easy with Azure","PublishedOn":"2017-10-17T21:01:45+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"One of the most common requirements for web applications is for users create accounts for the purpose of access control and personalization. While ASP.NET templates have always made it easy to create...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/17/user-accounts-made-easy-with-azure/","RawContent":null},{"Title":"Announcing SignalR for ASP.NET Core Alpha 2","PublishedOn":"2017-10-09T22:46:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"A few weeks ago we released the alpha1 version of SignalR for ASP.NET Core 2.0. Today we are pleased to announce a release of the alpha2 version of SignalR for ASP.NET Core 2.0. This release contains...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/10/09/announcing-signalr-for-asp-net-core-alpha-2/","RawContent":null},{"Title":"Announcing SignalR (alpha) for ASP.NET Core 2.0","PublishedOn":"2017-09-14T23:41:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we are glad to announce an alpha release of SignalR for ASP.NET Core 2.0. This is the first official preview release of a new SignalR that is compatible with ASP.NET Core. It consists of a...","Href":"https://blogs.msdn.microsoft.com/webdev/2017/09/14/announcing-signalr-for-asp-net-core-2-0/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6889858485","Type":"IssuesEvent","CreatedAt":"2017-11-22T11:54:08","Actor":"afsalcodehack","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2284","RelatedDescription":"Closed issue \".NET Core 2.0.3 not available after install\" (#2284) at aspnet/Home","RelatedBody":"![1](https://user-images.githubusercontent.com/13133933/33096098-e9ae93dc-cf16-11e7-9c51-98daf3b87778.PNG)\r\n![2](https://user-images.githubusercontent.com/13133933/33096100-e9d6041c-cf16-11e7-8b69-02e4c41361f5.PNG)\r\n![3](https://user-images.githubusercontent.com/13133933/33096101-ea01883a-cf16-11e7-9e27-7302bc320f99.PNG)\r\n"},{"Id":"6888554606","Type":"IssuesEvent","CreatedAt":"2017-11-22T06:39:09","Actor":"NhlanhlaMbhele","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2286","RelatedDescription":"Closed issue \"Change the Database setting to accept both dots and commas as decimal seperators\" (#2286) at aspnet/Home","RelatedBody":"We are sitting with an issue in the Altech Multi Tenant environment where the database is expecting the coordinates to come with a comma as a decimal separator whereas the devices are sending them with dots. This causes the events to get stuck in the devices and not go through to the monitor there for not logging anything.\r\n\r\n![altech](https://user-images.githubusercontent.com/26084188/33113217-ed2b5ba0-cf5f-11e7-9b73-1e5a6e2c71f2.jpg)\r\n\r\n\r\nWe had a similar issue with Dreevo and Francois Visscher changed the code to accept both commas and dots. \r\n\r\nEnvironment Details:\r\n\r\nVPN Details\r\nUsername\t: \tNhlanhlaM\r\nPassword\t:\t2lilLj\r\n\r\nDatabase\r\nDatabase Server IP\t:\t10.0.17.229\r\nDatabase Name\t\t:\tVigildispatch\t- Contains zeno transanctional data\r\nDatabase Name\t\t:\tOpsistaging\t- Stores tracking data sent by Vigil to OPSI\t\r\nDatabase User\t\t:\tOpsiSql\r\nPassword\t\t:\tFu4$73E808Yh2XN\r\n\r\n\r\nExternal url\t\t:\thttp://dispatchmanager.vigil.co.za:8001\t-\tScheduler\r\nExternal url\t\t:\thttp://dispatchmanager.vigil.co.za:8002\t-\tMonitor\r\n\r\nuser: super\r\npassword: password\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n "},{"Id":"6888541971","Type":"IssuesEvent","CreatedAt":"2017-11-22T06:34:40","Actor":"NhlanhlaMbhele","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2286","RelatedDescription":"Opened issue \"Change the Database setting to accept both dots and commas as decimal seperators\" (#2286) at aspnet/Home","RelatedBody":"We are sitting with an issue in the Altech Multi Tenant environment where the database is expecting the coordinates to come with a comma as a decimal separator whereas the devices are sending them with dots. This causes the events to get stuck in the devices and not go through to the monitor there for not logging anything.\r\n\r\n![altech](https://user-images.githubusercontent.com/26084188/33113217-ed2b5ba0-cf5f-11e7-9b73-1e5a6e2c71f2.jpg)\r\n\r\n\r\nWe had a similar issue with Dreevo and Francois Visscher changed the code to accept both commas and dots. \r\n\r\nEnvironment Details:\r\n\r\nVPN Details\r\nUsername\t: \tNhlanhlaM\r\nPassword\t:\t2lilLj\r\n\r\nDatabase\r\nDatabase Server IP\t:\t10.0.17.229\r\nDatabase Name\t\t:\tVigildispatch\t- Contains zeno transanctional data\r\nDatabase Name\t\t:\tOpsistaging\t- Stores tracking data sent by Vigil to OPSI\t\r\nDatabase User\t\t:\tOpsiSql\r\nPassword\t\t:\tFu4$73E808Yh2XN\r\n\r\n\r\nExternal url\t\t:\thttp://dispatchmanager.vigil.co.za:8001\t-\tScheduler\r\nExternal url\t\t:\thttp://dispatchmanager.vigil.co.za:8002\t-\tMonitor\r\n\r\nuser: super\r\npassword: password\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n "},{"Id":"6888140188","Type":"IssuesEvent","CreatedAt":"2017-11-22T03:46:38","Actor":"Tratcher","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2285","RelatedDescription":"Opened issue \"Json Serializer ReferenceLoopHandling  / Truncated response / Chunked terminator behaviour\" (#2285) at aspnet/Home","RelatedBody":"_From @chrisckc on November 22, 2017 0:52_\n\nHi,\r\n\r\nThis is a continuation of an issue that i and others have previously raised with v1.x\r\n\r\n[https://github.com/aspnet/IISIntegration/issues/285](https://github.com/aspnet/IISIntegration/issues/285)\r\n\r\n[https://github.com/aspnet/AspNetCoreModule/issues/26](https://github.com/aspnet/AspNetCoreModule/issues/26)\r\n\r\nI wanted to re-test the behaviour of this so I upgraded a test project i originally created last year to demo the issue from dotnet v1.x to v2.0.0 (i am currently using SDK v2.0.3)\r\n\r\n**Previously in dotnet1.0:**\r\n\r\nPreviously in v1 when an object graph containing a circular reference was serialized, the JSON response text was truncated at the point where the circular reference would have been encountered, but the JSON was correctly closed off with the correct curly braces and square bracket. The response was also missing the Chunked Terminator and showed an error indicating such in the Chrome developer console. However the response showed a 200 OK status code caused by the fact that the response headers had already been sent before the exception was encountered (due to the response not being buffered). When i added the ResponseBuffering middleware i managed to get a 500 status code and exception to be returned.\r\n\r\n**Now in dotnet2.0:**\r\n\r\nThe behaviour in version 2 is slightly different, the status code is still 200 OK due to the unbuffered response, however the truncated JSON is now properly truncated and does not have the closing braces and square bracket etc. The Chunked terminator now seems to be present as i am no longer seeing an error in the Chrome developer console. Adding the ResponseBuffering middleware still allows a 500 status code and exception as previously.\r\n\r\nAs in v1 , using v2, if i set the serializer to ignore ReferenceLoop errors then it works fine because the self referencing loop is ignored rather than followed:\r\n`o.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;`\r\n\r\n**I have the following 4 thoughts on this:**\r\n\r\n1. The 200 status code is misleading but unavoidable due to the unbuffered response, if ultimate performance is not an issue then use the ResponseBuffering middleware to simplify client error handling behaviour.\r\n\r\n2. If you are using EF, depending on your model you will probably end up having to use ReferenceLoopHandling.Ignore unless you want to write code to manipulate your object graph to remove any loops.\r\n\r\n3. The truncated JSON is now correct in that it is no longer valid JSON so should prevent incorrect / misleading data from being unknowingly received by a client, the client's JSON parser should throw an error.\r\n\r\n4. The Chunked terminator now being present could either be a bad thing or a good thing depending on your point of view or preference. In my opinion now that the JSON is invalid the chunked terminator may as well be present so at least the response will be valid and not confuse any reverse proxy's or client libraries.\r\n\r\nSo all in all this is an improvement, however...  if i use the ResponseCompression middleware it ends up back in the land of the unknown because i now get a completely empty response body with the 200 OK status code, so a client may well think there is genuinely no data available from the request it just made, and won't know there was actually an error thrown on the server. \r\n\r\nThis is a good example of why having to rely on a quirk of behaviour to detect errors is bad, the behaviour can easily be changed by configuration changes, such as adding some middleware in this example. It seems like the only way make to make the behaviour consistent is to use response buffering, so i think this should really be the default configuration for a new .NET Core WebApi project.\r\n\r\nThe ResponseCompression middleware is working correctly in normal circumstances as i can see the response in both Postman and Chrome with the header Content-Encoding: gzip\r\n\r\nBtw. The above was tested on a Mac using the AspNetCore Kestrel server that runs when i use \"dotnet run\"\r\n\r\nI have now updated the demo repo which i used originally to dotnet2.0 and added the ResponseCompression middleware:\r\n[https://github.com/chrisckc/TodoApiDemo](https://github.com/chrisckc/TodoApiDemo)\r\n\r\n\n\n_Copied from original issue: aspnet/AspNetCoreModule#259_"},{"Id":"6886817479","Type":"IssuesEvent","CreatedAt":"2017-11-21T20:53:32","Actor":"afsalcodehack","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2284","RelatedDescription":"Opened issue \".NET Core 2.0.3 not available after install\" (#2284) at aspnet/Home","RelatedBody":"![1](https://user-images.githubusercontent.com/13133933/33096098-e9ae93dc-cf16-11e7-9c51-98daf3b87778.PNG)\r\n![2](https://user-images.githubusercontent.com/13133933/33096100-e9d6041c-cf16-11e7-8b69-02e4c41361f5.PNG)\r\n![3](https://user-images.githubusercontent.com/13133933/33096101-ea01883a-cf16-11e7-9e27-7302bc320f99.PNG)\r\n"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"6896917095","Type":"IssuesEvent","CreatedAt":"2017-11-23T21:15:39","Actor":"DevCodex","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1123","RelatedDescription":"Closed issue \"Is sticky sessions truly required for scaleout?  Or only for Redis version of scaleout?\" (#1123) at aspnet/SignalR","RelatedBody":"Is sticky sessions truly required for SignalR scaleout?  Or only for Redis version of scaleout?  \r\n\r\nIf it is required, it is likely a major new impediment to SignalR adoption in production.  Not all production environments (including ours) even have sticky session capability without networking/hardware configuration changes.\r\n\r\nAlso, is there any update on SQL Server scale out?  I have been reading that there were some tricky challenges to overcome.  Is SQL Server still on the table?\r\n\r\n"},{"Id":"6894637072","Type":"IssuesEvent","CreatedAt":"2017-11-23T10:44:24","Actor":"JinsPeter","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1150","RelatedDescription":"Opened issue \"Singlar Core Apache port forwarding issue\" (#1150) at aspnet/SignalR","RelatedBody":"I'm working on a .net core web api app where I use signalr core. I used apache to redirect the web request to www.myserver.com to http://127.0.0.1:5000 which is where my kestral runs.\r\n```\r\n<VirtualHost *:80>\r\n  ServerName www.myserver.com\r\n  ProxyPreserveHost On\r\n  ProxyPass / http://127.0.0.1:5000/\r\n  ProxyPassReverse / http://127.0.0.1:5000/\r\n  ErrorLog <errorLogLocation>/<errorLogFilename>.log\r\n  CustomLog <errorLogLocation>/<customErrorLogFilename>.log common\r\n</VirtualHost>\r\n```\r\nThe issue is the http request works fine, signalr handshake works fine, gets me the connection id, but the  websocket connection fails with a message, error establishing connection with \r\nws://www.myserver.com/SignalR?id='some-guid-here'.\r\n\r\nI'm using RHEL and Apache.\r\nIs there a way to give domain name to  Kestral in linux without apache.?\r\n"},{"Id":"6892950647","Type":"PullRequestEvent","CreatedAt":"2017-11-22T23:48:08","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1149","RelatedDescription":"Opened pull request \"Setting ContentType in the HTTP responses\" (#1149) at aspnet/SignalR","RelatedBody":"This fixes the issue #1106 where Firefox tries to parse all responses without Content-Type as Xml and displays the 'XML Parsing Error: no root element found' warning in the dev console.\r\n\r\nAlso making auth test work in IE"},{"Id":"6892277595","Type":"IssuesEvent","CreatedAt":"2017-11-22T20:19:53","Actor":"pixelhandler","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1148","RelatedDescription":"Closed issue \"Npm install issue, no dist/browser files\" (#1148) at aspnet/SignalR","RelatedBody":"When I `npm install @aspnet/signalr-client` I do not see any dist files\r\n\r\n<img width=\"148\" alt=\"signalr-wat\" src=\"https://user-images.githubusercontent.com/17178/33147896-8b2aaa9a-cf7e-11e7-8780-5630a33b71f3.PNG\">\r\n\r\nOnly a README and package.json. Is there a build step needed?\r\n\r\nLooking at https://github.com/aspnet/SignalR/blob/dev/client-ts/README.md\r\n\r\n> To use the client in a browser, copy *.js files from the dist/browser folder to your script folder include on your page using the <script> tag.\r\n\r\nThe package.json file has `\"version\": \"1.0.0-alpha2-final\"` but no `dist` directory. "},{"Id":"6892261036","Type":"IssuesEvent","CreatedAt":"2017-11-22T20:15:27","Actor":"pixelhandler","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1148","RelatedDescription":"Opened issue \"Npm install issue, no dist/browser files\" (#1148) at aspnet/SignalR","RelatedBody":"When I `npm install @aspnet/signalr-client` I do not see any dist files\r\n\r\n<img width=\"148\" alt=\"signalr-wat\" src=\"https://user-images.githubusercontent.com/17178/33147896-8b2aaa9a-cf7e-11e7-8780-5630a33b71f3.PNG\">\r\n\r\nOnly a README and package.json. Is there a build step needed?\r\n\r\nLooking at https://github.com/aspnet/SignalR/blob/dev/client-ts/README.md\r\n\r\n> To use the client in a browser, copy *.js files from the dist/browser folder to your script folder include on your page using the <script> tag."},{"Id":"6892221595","Type":"IssuesEvent","CreatedAt":"2017-11-22T20:05:11","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1136","RelatedDescription":"Closed issue \"@aspnet/signalr-client dont work with angular cli when run build prod mode\" (#1136) at aspnet/SignalR","RelatedBody":"I got this error when running ng build --prod. The source map lead me to the signalR file in node_modules\r\n\r\n![image](https://user-images.githubusercontent.com/13591213/32976230-a8bb723e-cc44-11e7-8409-922d02d5252a.png)\r\n"},{"Id":"6892173143","Type":"PullRequestEvent","CreatedAt":"2017-11-22T19:52:42","Actor":"moozzyk","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1147","RelatedDescription":"Opened pull request \"Making HttpConnection restartable (C#)\" (#1147) at aspnet/SignalR","RelatedBody":"~~(a.k.a. Opening Pandora box)~~"},{"Id":"6891148230","Type":"IssuesEvent","CreatedAt":"2017-11-22T16:09:44","Actor":"Duanthse03268","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1141","RelatedDescription":"Closed issue \"Anyway to set available time of a signalR connection\" (#1141) at aspnet/SignalR","RelatedBody":"I want to set my signalR connection just available in 30 min. How can i do this ? Does anyone has example ?"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"6897707560","Type":"IssuesEvent","CreatedAt":"2017-11-24T05:00:42","Actor":"stephenmuecke","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7080","RelatedDescription":"Opened issue \"RadioButtonFor() binding fails when using an EditorTemplate where the model is a simple property\" (#7080) at aspnet/Mvc","RelatedBody":"**Steps to reproduce**\r\n\r\nModel\r\n\r\n```c#\r\npublic class Person\r\n{\r\n    [UIHint(\"Gender\")]\r\n    public string Gender { get; set; }\r\n}\r\n```\r\n\r\nController\r\n\r\n```c#\r\npublic ActionResult Create\r\n{\r\n    Person model = new Person\r\n    {\r\n        Gender = \"Male\" // set default\r\n    };\r\n    return View(model);\r\n}\r\n```\r\n\r\nVIew\r\n\r\n```c#\r\n@model Person\r\n@using (Html.BeginForm())\r\n{\r\n    @Html.EditorFor(m => m.Gender)\r\n}\r\n```\r\n\r\nEditorTemplate (`/Views/Shared/EditorTemplates.Gender.cshtml`)\r\n\r\n```c#\r\n@model String\r\n@Html.RadioButtonFor(m => m, \"Male\")\r\n@Html.RadioButtonFor(m => m, \"Female\")\r\n```\r\n\r\n**Issue**\r\n\r\nWhen the view is generated, neither radio button is checked despite the value of the property being set in the model (the first radio button with the value of \"Male\" should be checked).\r\n\r\n**Cause**\r\n\r\nThe `RadioButtonFor()` method calls the `private static MvcHtmlString RadioButtonHelper(.....)` method and passes a value to the `string name` parameter using `ExpressionHelper.GetExpressionText(expression),`.\r\n\r\nBecause the expression is `m => m`, this returns an empty `string`, and results in the following code snippet in that method returning `false`\r\n\r\n```c#\r\nisChecked = model != null &&\r\n    !String.IsNullOrEmpty(name) && // name is empty\r\n    String.Equals(model.ToString(), valueString, StringComparison.OrdinalIgnoreCase);\r\n```\r\n\r\nwhich in turn means that the `checked` attribute is not added.\r\n\r\nNote: Not tested, but an `EditorTemplate`  for a `bool` model and using a `@Html.CheckboxFor(m => m)` is also likely to not bind correctly.\r\n    "},{"Id":"6897131863","Type":"IssuesEvent","CreatedAt":"2017-11-23T23:15:58","Actor":"ekarimi","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7079","RelatedDescription":"Opened issue \"Render ViewComponent as string from controller\" (#7079) at aspnet/Mvc","RelatedBody":"Hi,\r\nRendering viewcomponent as string can be pretty handy in some situations.\r\nI searched but couldn't find anything or there were really complex ( not for the lack of trying, just wanna know if there is a simpler solution ).\r\n\r\nCan anyone point me to the right direction?\r\nfor example :\r\n`\r\nViewComponent(typeof(SomeViewComponent)).RenderAsString()\r\n`\r\nor anything gets me that."},{"Id":"6895347696","Type":"IssuesEvent","CreatedAt":"2017-11-23T13:33:27","Actor":"simondel","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7078","RelatedDescription":"Opened issue \"Make ObjectResult inherit from StatusCodeResult\" (#7078) at aspnet/Mvc","RelatedBody":"The current [Microsoft.AspNetCore.Mvc.ObjectResult](https://docs.microsoft.com/nl-nl/dotnet/api/microsoft.aspnetcore.mvc.objectresult?view=aspnetcore-2.0) does not inherit from [Microsoft.AspNetCore.Mvc.StatusCodeResult](https://docs.microsoft.com/nl-nl/dotnet/api/microsoft.aspnetcore.mvc.statuscoderesult?view=aspnetcore-2.0). Adding this would offer a nice abstraction, as there would be a single class derived from ActionResult with a StatusCode property."},{"Id":"6895282563","Type":"IssuesEvent","CreatedAt":"2017-11-23T13:18:44","Actor":"Jenan","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7077","RelatedDescription":"Opened issue \"How return View with model in the ExceptionFilter\" (#7077) at aspnet/Mvc","RelatedBody":"Hello, \r\n\r\nI have create two exceptions: `UserFriendlyException` and `UserFriendlyViewException`.\r\n\r\nI have tried to create the `ExceptionFilter` that I need handle these two exceptions according these rules:\r\n\r\nIf is exception `UserFriendlyViewException` called then I want to return ViewResult with original ViewName and `AddModelError` and return original Model.\r\n\r\nIf is exception `UserFriendlyException` called then I want to redirect to `Error` view.\r\n\r\nThis is my `ExceptionFilterAttribute`:\r\n\r\n```\r\n    public class ControllerExceptionFilterAttribute : ExceptionFilterAttribute\r\n    {\r\n        private readonly ITempDataDictionaryFactory _tempDataDictionaryFactory;\r\n        private readonly IModelMetadataProvider _modelMetadataProvider;\r\n\r\n        public ControllerExceptionFilterAttribute(ITempDataDictionaryFactory tempDataDictionaryFactory,\r\n                    IModelMetadataProvider modelMetadataProvider)\r\n        {\r\n            _tempDataDictionaryFactory = tempDataDictionaryFactory;\r\n            _modelMetadataProvider = modelMetadataProvider;\r\n        }\r\n        public override void OnException(ExceptionContext context)\r\n        {\r\n            if (!(context.Exception is UserFriendlyException) && !(context.Exception is UserFriendlyViewException)) return;\r\n\r\n            var tempData = _tempDataDictionaryFactory.GetTempData(context.HttpContext);\r\n            //CreateNotification(NotificationHelpers.AlertType.Error, tempData, context.Exception.Message);\r\n            if (!tempData.ContainsKey(NotificationHelpers.NotificationKey)) return;\r\n\r\n            if (context.Exception is UserFriendlyViewException userFriendlyViewException)\r\n            {\r\n                context.ModelState.AddModelError(userFriendlyViewException.ErrorKey, userFriendlyViewException.Message);\r\n            }\r\n\r\n            if (context.ActionDescriptor is ControllerActionDescriptor controllerActionDescriptor)\r\n            {\r\n                //How pass here Model from context??\r\n                //If exists more views with same name but in another controller how pass correct ViewName?\r\n                var result = new ViewResult\r\n                {\r\n                    ViewName = context.Exception is UserFriendlyViewException ?\r\n                    controllerActionDescriptor.ActionName\r\n                    : \"Error\",\r\n                    TempData = tempData,\r\n                    ViewData = new ViewDataDictionary(_modelMetadataProvider, context.ModelState)\r\n                                {\r\n                                    {\"Notifications\", tempData[NotificationHelpers.NotificationKey] },\r\n                                }\r\n                };\r\n\r\n                context.ExceptionHandled = true;\r\n                context.Result = result;\r\n            }\r\n\r\n            tempData.Remove(NotificationHelpers.NotificationKey);\r\n        }\r\n    }\r\n\r\n```\r\nI have two issues:\r\n\r\n1.) How can I pass original `Model` from `ExceptionContext` to `ViewResult`?\r\n\r\n2.) How return correct ViewName for `UserFriendlyViewException` if exists more Views with same name but in another Controller?\r\n\r\n"},{"Id":"6893467571","Type":"IssuesEvent","CreatedAt":"2017-11-23T04:02:05","Actor":"dougbu","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7076","RelatedDescription":"Opened issue \"Forward `IDisableCorsAttribute` and `IAntiforgeryPolicy` to the Abstractions package\" (#7076) at aspnet/Mvc","RelatedBody":"`IDisableCorsAttribute` and `IAntiforgeryPolicy` (and `IgnoreAntiforgeryTokenAttribute`) are located in the Cors and ViewFeatures packages. This means external frameworks and extensions must reference those packages just to disable the possibly-conflicting features, even if they are aimed at API controllers. E.g. they may need to reference ViewFeatures to disable antiforgery in case their consumers reference that package -- but for no other reason.\r\n\r\nHit this while working on the ASP.NET Core WebHooks implementation. No action associated with the [`WebHookAttribute`](https://github.com/aspnet/WebHooks/blob/dev/src/Microsoft.AspNetCore.WebHooks.Receivers/WebHookAttribute.cs) needs antiforgery checks or CORS support. But, the containing Microsoft.AspNetCore.WebHooks.Receivers package would need to reference the Cors and ViewFeatures packages to disable both."},{"Id":"6893069189","Type":"IssuesEvent","CreatedAt":"2017-11-23T00:41:15","Actor":"cgountanis","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7072","RelatedDescription":"Closed issue \"Core 2 MVC (WCF to SSRS Execution) project Needs Administrator IIS AppPool to Work?\" (#7072) at aspnet/Mvc","RelatedBody":"Can anyone shed some light on a solution for this? The last thing I feel comfortable doing is giving an IIS application pool identity too much power.\r\n\r\nWorks fine within IIS Express (Visual Studio), once hosted under IIS you need to give it major user rights to work. I tried giving it elevated appPool virtual user rights on the web folder. I tried playing with the IIS authentication settings, seems to ignore all of that.\r\n\r\nI have tied a million different settings and all the old solutions for .NET are not helpful in this case.\r\n\r\nI am at a loss on this one and it is very frustrating any help would be great.\r\n\r\n```\r\n// Init the basic http binding.\r\nvar basicHttpBinding = new BasicHttpBinding()\r\n{\r\n\tMaxReceivedMessageSize = int.MaxValue,\r\n\tMaxBufferSize = int.MaxValue,\r\n\tReaderQuotas = XmlDictionaryReaderQuotas.Max\r\n};\r\n\r\n// Set the binding security mode based on the url scheme.\r\nif (new Uri(model.ReportServerUrl).Scheme.ToUpper() == \"HTTPS\")\r\n{\r\n\tbasicHttpBinding.Security.Mode = BasicHttpSecurityMode.Transport;\r\n}\r\nelse\r\n{\r\n\tbasicHttpBinding.Security.Mode = BasicHttpSecurityMode.TransportCredentialOnly;\r\n}\r\n\r\n// Binding client security transport settings.\r\nbasicHttpBinding.Security.Transport.ClientCredentialType = HttpClientCredentialType.Windows;\r\n\r\n// Create the report execution service soap client.\r\nvar serviceSoapClient = new ReportExecutionServiceSoapClient(basicHttpBinding, new EndpointAddress($\"{model.ReportServerUrl}/ReportExecution2005.asmx\"));\r\n\r\n// Credentials.\r\nserviceSoapClient.ClientCredentials.Windows.AllowedImpersonationLevel = System.Security.Principal.TokenImpersonationLevel.Impersonation;\r\nserviceSoapClient.ClientCredentials.Windows.ClientCredential = new NetworkCredential(model.Username, model.Password, model.Domain);\r\n\r\n// Init the trusted user header.\r\nvar trustedUserHeader = new TrustedUserHeader();\r\n\r\n// Load report and get response.\r\nvar loadReportResponse = serviceSoapClient.LoadReportAsync(trustedUserHeader, model.ReportPath, null).Result;\r\n\r\n// Create execution header using load report response information.\r\nvar executionHeader = new ExecutionHeader\r\n{\r\n\tExecutionID = loadReportResponse.executionInfo.ExecutionID\r\n};\r\n\r\n// Parameters.\r\nvar reportParameters = model.Parameters.ToArray();\r\nvar setExecutionParametersResponse = serviceSoapClient.SetExecutionParametersAsync(executionHeader, trustedUserHeader, reportParameters, \"en-us\").Result;\r\n\r\n// Render request.\r\nvar renderRequest = new RenderRequest(executionHeader, trustedUserHeader, model.ReportFormat, null);\r\n\r\n// Render response.\r\nvar renderResponse = serviceSoapClient.RenderAsync(renderRequest).Result;\r\n```"},{"Id":"6893068839","Type":"IssuesEvent","CreatedAt":"2017-11-23T00:41:06","Actor":"kshyju","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7064","RelatedDescription":"Closed issue \"Model binding fails when the posted form data has a key called \"Model\"\" (#7064) at aspnet/Mvc","RelatedBody":"When submit the form and if the form data has an item with key `Model`, Model binding is failing.\r\n\r\nFor example, let's say i have a view model like this and  I use that class as the param of my http post action method.\r\n\r\n    public class ModelBinderTestViewModel\r\n    {\r\n        public string Name { set; get; }\r\n        public string Model { set; get; }\r\n    }\r\nand if i am sending form data like this from my form\r\n`\r\nName=Shyju`\r\n\r\nModel binding works, but when i send \r\n\r\n```\r\nName:Shyju\r\nModel:Honda\r\n```\r\n\r\nModel binding does not work now.\r\n\r\n[Here ](https://github.com/kshyju/TempDataBug/blob/master/TempData/Views/ModelBinderTest/Index.cshtml)is the link to a minimal sample repo where you can see this issue . Just run the sample app and submit the form and you will see the results in the next view.\r\n\r\nIs this a know issue ? If yes, Is there some sort of documentation to advise users to not use `Model` as a property name.\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"6896648242","Type":"PullRequestEvent","CreatedAt":"2017-11-23T19:14:10","Actor":"neyromant","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1512","RelatedDescription":"Opened pull request \"Additional verifications in IdentityBuilder\" (#1512) at aspnet/Identity","RelatedBody":"Summary of the changes:\r\n - IdentityBuilder.AddPasswordValidator<TValidator> method was updated: a verification that TValidator implements IPasswordValidator<{UserType}> has been added.\r\n - IdentityBuilder.AddUserStore<TStore> method was updated: a verification that TStore implements IUserStore<{UserType}> has been added."},{"Id":"6888787483","Type":"IssuesEvent","CreatedAt":"2017-11-22T07:54:03","Actor":"prashantham","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1511","RelatedDescription":"Opened issue \"@ missing  in AccessDenied page \" (#1511) at aspnet/Identity","RelatedBody":"> dotnet new mvc --auth Individual -o Test\r\n> Views/Account/AccessDenied.cshtml \r\n\r\n    @{\r\n     ViewData[\"Title\"] = \"Access denied\";\r\n    }\r\n    <header>\r\n    <h2 class=\"text-danger\">ViewData[\"Title\"]</h2>\r\n    <p class=\"text-danger\">You do not have access to this resource.</p>\r\n    </header>\r\n\r\n    Should have been\r\n    <h2 class=\"text-danger\">@ViewData[\"Title\"]</h2>\r\n"},{"Id":"6888080723","Type":"IssuesEvent","CreatedAt":"2017-11-22T03:22:29","Actor":"china-live","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1510","RelatedDescription":"Opened issue \"谁能解释一下为什么用户管理可以批量添加Claim而角色管理却不能呢？\" (#1510) at aspnet/Identity","RelatedBody":"谁能解释一下为什么用户管理可以批量添加Claim而角色管理不能呢？\r\n这个bug还是有什么什么特别的考虑？\r\n\r\n![1111](https://user-images.githubusercontent.com/12002799/33108460-2f962ae4-cf77-11e7-939b-72bb9a9e69cf.png)\r\n![2222](https://user-images.githubusercontent.com/12002799/33108461-2fc9c070-cf77-11e7-8018-65fdf457fe19.png)\r\n"},{"Id":"6886508914","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:44:29","Actor":"patsadow2","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1509","RelatedDescription":"Opened issue \"Loading relations from usermanager\" (#1509) at aspnet/Identity","RelatedBody":"Hello, is there any way to load relations ?\r\n\r\n    public class ApplicationUser : IdentityUser<Guid>\r\n    {\r\n        public virtual Customer Customer { get; set; }\r\n    }\r\n\r\nafter\r\n\r\nvar user = await _userManager.FindByEmailAsync(identity.Name);\r\nuser.Customer is null ?\r\n\r\nwhen set value by new and next query the same\r\n\r\nuser.Customer still null\r\n\r\nAny advices ? BR\r\n"},{"Id":"6884237409","Type":"IssuesEvent","CreatedAt":"2017-11-21T12:17:25","Actor":"FaizulHussain","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1508","RelatedDescription":"Opened issue \"Lock user for using invalid credentials in ChangePasswordAsync\" (#1508) at aspnet/Identity","RelatedBody":"Is it possible to add the lockout feature during password change if the currentPassword is not valid? Similar to the lockout during signin (if enabled).\r\n\r\nThx"},{"Id":"6882339402","Type":"IssuesEvent","CreatedAt":"2017-11-21T03:19:42","Actor":"Singularity222","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1507","RelatedDescription":"Opened issue \"Login Providers Question\" (#1507) at aspnet/Identity","RelatedBody":"For the different social logins, a provider key is saved in the AspNetUserLogins table. What does the provider key refer to when using a Google account to sign in? Is it the user ID or something like that?"},{"Id":"6881672970","Type":"PullRequestEvent","CreatedAt":"2017-11-20T23:22:20","Actor":"natemcmaster","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1506","RelatedDescription":"Merged pull request \"Use MSBuild to set NuGet feeds instead of NuGet.config\" (#1506) at aspnet/Identity","RelatedBody":"FYI - @javiercn \r\n\r\nI noticed this repo had a reference to dotnet-core in a custom nuget.config file. I removed this as we need conditionally set feeds via MSBuild, and need to use the dependencies.props file in aspnet/Universe to mirror an partner team dependencies."},{"Id":"6880940753","Type":"PullRequestEvent","CreatedAt":"2017-11-20T20:27:35","Actor":"natemcmaster","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1506","RelatedDescription":"Opened pull request \"Use MSBuild to set NuGet feeds instead of NuGet.config\" (#1506) at aspnet/Identity","RelatedBody":"FYI - @javiercn \r\n\r\nI noticed this repo had a reference to dotnet-core in a custom nuget.config file. I removed this as we need conditionally set feeds via MSBuild, and need to use the dependencies.props file in aspnet/Universe to mirror an partner team dependencies."},{"Id":"6878118080","Type":"IssuesEvent","CreatedAt":"2017-11-20T10:41:28","Actor":"twenzel","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1505","RelatedDescription":"Opened issue \"Describe default hashing logik in docs\" (#1505) at aspnet/Identity","RelatedBody":"Please describe the currently used (v3) logic how a password is hashed (which algorythm and what salt) is used. \r\nThere is no official documentation about those information. Only some blog entries from users/non-officials. You have to dig into the code trying to find those information.\r\n\r\nPlease extend the offical docs  (https://docs.microsoft.com/de-de/aspnet/core/security/authentication/identity)"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"6895207900","Type":"PullRequestEvent","CreatedAt":"2017-11-23T13:01:30","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2180","RelatedDescription":"Opened pull request \"Proposed fix for #2151\" (#2180) at aspnet/KestrelHttpServer","RelatedBody":"- Tweak the SegmentEnumerator to avoid looking at empty segments\r\n- Changed the ReadableBufferReader's Cursor computation to avoid special\r\ncasing end.\r\n- The issue was caused by a mix of things and the interaction with pipes.\r\nThe ReadableBufferReader was moving to the next block but also skipping\r\nthe _index update since it special cases when you've reached the end of the\r\nbuffer. As a result, the cursor ended up pointing to the end of the empty\r\nblock and the pipe ended up having a negative length for the buffer.\r\n\r\nPS: I know we need to go through the patch process but it was easier to review this PR since the code was all in a single place."},{"Id":"6893977858","Type":"PullRequestEvent","CreatedAt":"2017-11-23T08:01:20","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2179","RelatedDescription":"Opened pull request \"Use ALPN support in SSLStream on .NET Core >= 2.1\" (#2179) at aspnet/KestrelHttpServer","RelatedBody":"- Always add the TlsConnectionFeature when the HttpsConnectionAdapter runs\r\n- Implemented the ITlsApplicationProtocolsFeature on the existing TlsConnectionFeature\r\n- Removed Kestrel.Tls"},{"Id":"6892290188","Type":"IssuesEvent","CreatedAt":"2017-11-22T20:23:14","Actor":"BrennanConroy","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2178","RelatedDescription":"Opened issue \"Every connection makes a Http1 and Http2 connection and does a lot of allocating\" (#2178) at aspnet/KestrelHttpServer","RelatedBody":"The http2 connection allocates at least 40k in byte arrays in the constructors.\r\n\r\nBelow are the ones I found from a quick search\r\n```\r\nHttp2Connection\r\n  - Http2Frame\r\n    - 16k byte[]\r\n  - Http2Framewriter\r\n    - Http2Frame\r\n      - 16k byte[]\r\n  - HPackDecoder\r\n    - 4k byte[]\r\n    - 4k byte[]\r\n    - 4k byte[]\r\n```\r\n\r\n@davidfowl @halter73 "},{"Id":"6891793781","Type":"IssuesEvent","CreatedAt":"2017-11-22T18:20:54","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/1334","RelatedDescription":"Closed issue \"Determining Hosting Environment While Configuring Kestrel and UseHttps\" (#1334) at aspnet/KestrelHttpServer","RelatedBody":"In the ASP.NET Core Main method below, how can I determine the hosting environment, so I can switch between different certificate files for HTTPS?\r\n\r\n```\r\npublic sealed class Program\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        new WebHostBuilder()\r\n            .UseContentRoot(Directory.GetCurrentDirectory())\r\n            .UseKestrel(\r\n                options =>\r\n                {\r\n                    if ([Development Hosting Environment])\r\n                    {\r\n                        options.UseHttps(\"DevelopmentCertificate.pfx\");\r\n                    }\r\n                    else\r\n                    {\r\n                        options.UseHttps(\"ProductionCertificate.pfx\");\r\n                    }\r\n                })\r\n            .UseIISIntegration()\r\n            .UseStartup<Startup>()\r\n            .Build()\r\n            .Run();\r\n    }\r\n}\r\n```"},{"Id":"6891786891","Type":"PullRequestEvent","CreatedAt":"2017-11-22T18:19:18","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2177","RelatedDescription":"Merged pull request \"Expose WebHostBuilderContext in UseKestrel\" (#2177) at aspnet/KestrelHttpServer","RelatedBody":"#1334 @halter73 I've poached this because it will make the configuration work easier. "}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"6891954502","Type":"PullRequestEvent","CreatedAt":"2017-11-22T18:59:12","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/pull/1781","RelatedDescription":"Closed pull request \"[Design] Added ViewImports tracking to TagHelper project system\" (#1781) at aspnet/Razor","RelatedBody":"#1744 \r\n\r\n@rynowak @NTaylorMullen \r\n\r\nUnit tests are on the way"},{"Id":"6891950917","Type":"PullRequestEvent","CreatedAt":"2017-11-22T18:58:23","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1759","RelatedDescription":"Merged pull request \"Added TagHelper discovery to Razor project system\" (#1759) at aspnet/Razor","RelatedBody":"#1744 \r\n\r\n@rynowak @NTaylorMullen \r\n\r\nPending:\r\n- ~Need to add the `OnBuildComplete` trigger for the project system.~\r\n- React to these changes on WTE\r\n- ~Tests~"},{"Id":"6891406828","Type":"PullRequestEvent","CreatedAt":"2017-11-22T16:56:46","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/1783","RelatedDescription":"Merged pull request \"Added necessary infrastructure for Tag helper project system imports tracking\" (#1783) at aspnet/Razor","RelatedBody":"#1744 \r\n\r\n@rynowak @NTaylorMullen \r\n\r\n- Moved `TextBufferProjectService` and `DefaultVisualStudioDocumentTracker` up to `Microsoft.VisualStudio.Editor.Razor`\r\n- Added `RazorDocumentManager` that acts as a facade between `RazorTextViewConnectionListener` and `VisualStudioDocumentTracker` (This is what the imports tracker will hook in to)\r\n- Moved the logic and tests around accordingly"},{"Id":"6887694799","Type":"PullRequestEvent","CreatedAt":"2017-11-22T00:56:57","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/1783","RelatedDescription":"Opened pull request \"Added necessary infrastructure for Tag helper project system imports tracking\" (#1783) at aspnet/Razor","RelatedBody":"#1744 \r\n\r\n@rynowak @NTaylorMullen \r\n\r\n- Moved `TextBufferProjectService` and `DefaultVisualStudioDocumentTracker` up to `Microsoft.VisualStudio.Editor.Razor`\r\n- Added `RazorDocumentManager` that acts as a facade between `RazorTextViewConnectionListener` and `VisualStudioDocumentTracker` (This is what the imports tracker will hook in to)\r\n- Moved the logic and tests around accordingly"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[{"Id":"6760798601","Type":"IssuesEvent","CreatedAt":"2017-10-24T22:00:58","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/67","RelatedDescription":"Closed issue \"External Logins does not set the Email\" (#67) at aspnet/Templates","RelatedBody":"- Enable Facebook Login\n- Login using Facebook for the first time\n- Email field is blank. It should be set from what we got from Facebook\n"},{"Id":"6760789807","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:58:48","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/86","RelatedDescription":"Closed issue \"Identity: Consider less generic name for ManageController\" (#86) at aspnet/Templates","RelatedBody":"Manage is a very generic name and you would probably expect http://abcdefg/Manage to be about managing something from your applications business domain rather than user accounts.\n\nManageAccount would probably be a better name.\n"},{"Id":"6760785159","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:57:37","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/115","RelatedDescription":"Closed issue \"Need more templates\" (#115) at aspnet/Templates","RelatedBody":"MVC 6 project templates should include a test project template. And the main ASP.NET 5 Preview Templates / Web Application or ... / Empty templates should have a few more sub-options, enabling for example addition and removal of XML support, creation of a minimal MVC project, or adding in EF (without choosing Individual User Accounts authentication).\n\nHopefully this will allow the new project dialogue to enable the options shown below -- plus a few options specific to MVC 6.\n![disabled project features](https://cloud.githubusercontent.com/assets/6431421/8257821/2a76a606-1665-11e5-8e75-cdb21473f6a1.png)\n"},{"Id":"6760779940","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:56:18","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/104","RelatedDescription":"Closed issue \"OrgAuth: Account Controller should return void\" (#104) at aspnet/Templates","RelatedBody":"Since https://github.com/aspnet/Mvc/issues/2409 is fixed. We should change the AccountController for SSO/ MultiOrg to return void\n"},{"Id":"6760777806","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:55:46","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/120","RelatedDescription":"Closed issue \"Template feedback\" (#120) at aspnet/Templates","RelatedBody":"Porting from MVC repo https://github.com/aspnet/Mvc/issues/2637\n"},{"Id":"6760775251","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:55:10","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/137","RelatedDescription":"Closed issue \"Need a SPA template\" (#137) at aspnet/Templates","RelatedBody":""},{"Id":"6760770959","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:54:08","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/365","RelatedDescription":"Closed issue \"Poor user and dev experience in Identity email confirmation\" (#365) at aspnet/Templates","RelatedBody":"There are two issues using the default template for identity when using email confirmation.\n\nFollowing the guide here: http://docs.asp.net/en/latest/security/authentication/accconfirm.html\n\nPoor user experience: When you click \"Register\" it sends the email off, but just redirects the user to the Home controller. Redirecting to something else to indicate they have to confirm their account would be a better example. Perhaps the default template should have such a view OOTB.\n\nPoor dev experience: When logging in with an external account (lets say Facebook) if the account doesn't exist you get thrown into AccountController.ExternalLoginConfirmation, great. This screen requires an email, so you complete the registration then you're logged in but never shoots off the email confirmation link here. Perhaps a commented out section in this action to deal with this would improve the dev experience here.\n"},{"Id":"6760770378","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:59","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/382","RelatedDescription":"Closed issue \"MVC Template Should Apply ResponseCache Attribute to Error Action\" (#382) at aspnet/Templates","RelatedBody":"HomeController.Error() should be updated:\n\n```\n    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]\n    public IActionResult Error()\n    {\n        return View();\n    }\n```\n\nThere is no good scenario where you would want errors to be cached, either on the client or via a proxy, or to have error information stored in such caches (especially if it might contain sensitive information in stack traces, etc.).\n"},{"Id":"6760769801","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:51","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/406","RelatedDescription":"Closed issue \"Add a flow for changing email in the Manage page\" (#406) at aspnet/Templates","RelatedBody":"Porting from ASP.NET Identity repo https://github.com/aspnet/Identity/issues/727\n"},{"Id":"6760769204","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:42","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/423","RelatedDescription":"Closed issue \"Don't create Project_Readme.html for ASP.NET 5 Empty\" (#423) at aspnet/Templates","RelatedBody":"I created an empty project for both ASP.NET 4 and ASP.NET 5. The ASP.NET 5 project had a Project_Readme.html and the ASP.NET 4 one did not. I'm not aware if that was on purpose or not, but we should be consistent with the empty projects. I think we should not add the Project_Readme.html for all Empty projects.\n"},{"Id":"6760768174","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:28","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/444","RelatedDescription":"Closed issue \"Support On-Premises option for Work & School Accounts\" (#444) at aspnet/Templates","RelatedBody":"Support this for Web APIs and Web Apps.\n"},{"Id":"6760767634","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:19","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/451","RelatedDescription":"Closed issue \"ValidationSummary.All should be replaced with ModelOnly\" (#451) at aspnet/Templates","RelatedBody":"All the views in the Accounts folder use\n`<div asp-validation-summary=\"ValidationSummary.All\" class=\"text-danger\"></div>`\n\nThey should just use \n`<div asp-validation-summary=\"ValidationSummary.ModelOnly\" class=\"text-danger\"></div>`\n\nSo you get each error twice. \n\n![image](https://cloud.githubusercontent.com/assets/3605364/13896326/ae916ee2-ed2b-11e5-8bf5-f9ad5246e82c.png)\n"},{"Id":"6760767057","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:11","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/490","RelatedDescription":"Closed issue \"Show external providers on the Register page\" (#490) at aspnet/Templates","RelatedBody":"The individual auth template has a login page and a register page. Login shows a password login and external providers. Register only shows a password login. Register should also show external providers, as this is where new users will go to sign-up.\n"},{"Id":"6760766431","Type":"IssuesEvent","CreatedAt":"2017-10-24T21:53:02","Actor":"Eilon","Repository":"aspnet/Templates","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Templates/issues/492","RelatedDescription":"Closed issue \"Add tests to project templates\" (#492) at aspnet/Templates","RelatedBody":"Hi,\n\nTesting is unfortunately a part of most of our jobs. I don't know if it is already planned/done but in visual studio when I create a new ASP.NET MVC 6 (or is it Core 1 ? Not sure) there are no tests. This is particularly annoying for the template including user accounts. I spent a few hours writing tests for the included templates.\n\nI was wondering whether other people would be interested ?\n"}],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"6856182602","Type":"PullRequestEvent","CreatedAt":"2017-11-15T02:15:11","Actor":"Andrew-MSFT","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Merged pull request \"Re adding\" (#1064) at aspnet/Tooling","RelatedBody":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end..."},{"Id":"6856061013","Type":"PullRequestEvent","CreatedAt":"2017-11-15T01:32:45","Actor":"cristy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Opened pull request \"Re adding\" (#1064) at aspnet/Tooling","RelatedBody":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end..."},{"Id":"6855974819","Type":"PullRequestEvent","CreatedAt":"2017-11-15T01:03:13","Actor":"Andrew-MSFT","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1063","RelatedDescription":"Merged pull request \"Webapp landing page\" (#1063) at aspnet/Tooling","RelatedBody":"This is the markdown for the Web App landing page. Let me know if there's any other changes I should make."},{"Id":"6855941091","Type":"PullRequestEvent","CreatedAt":"2017-11-15T00:52:40","Actor":"cristy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1063","RelatedDescription":"Opened pull request \"Webapp landing page\" (#1063) at aspnet/Tooling","RelatedBody":"This is the markdown for the Web App landing page. Let me know if there's any other changes I should make."},{"Id":"6855898574","Type":"PullRequestEvent","CreatedAt":"2017-11-15T00:38:13","Actor":"cartermp","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1062","RelatedDescription":"Opened pull request \"Update migrate-sql-server.md\" (#1062) at aspnet/Tooling","RelatedBody":"Removed product links in favor of all docs links, changed wording slightly, and moved Get Started to be at the top."},{"Id":"6854009328","Type":"PullRequestEvent","CreatedAt":"2017-11-14T17:26:43","Actor":"Andrew-MSFT","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1061","RelatedDescription":"Merged pull request \"Create migrate-sql-server.md\" (#1061) at aspnet/Tooling","RelatedBody":""},{"Id":"6853947838","Type":"PullRequestEvent","CreatedAt":"2017-11-14T17:14:56","Actor":"cartermp","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/pull/1061","RelatedDescription":"Opened pull request \"Create migrate-sql-server.md\" (#1061) at aspnet/Tooling","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6854180246","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:01:26","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/279","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-8700: CORS bypass can enable Information Disclosure\" (#279) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8700 CORS Bypass can enable Information Disclosure\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in some public versions of ASP.NET Core where Cross-Origin Resource Sharing (CORS) can be bypassed, leading to information disclosure.\r\n\r\n## Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications using version 2.0.0 or higher are not vulnerable.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.Mvc.Core | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3, 1.1.4 |  1.0.6<br />1.1.5\r\nMicrosoft.AspNetCore.Mvc.Cors | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3, 1.1.4 |  1.0.6<br />1.1.5\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\nNote: As part of patching ASP.NET Core MVC we update every Microsoft.AspNetCore.Mvc.* package. If, for example, you have a dependency on `Microsoft.AspNetCore.Mvc` you should update to the appropriate version first (1.0.x should be updated to 1.0.4, 1.1.x should be updated to 1.1.3), and it will also update any other vulnerable ` Microsoft.AspNetCore.Mvc` dependency.\r\n\r\n### NET Core Project formats\r\n.NET Core has two different project file formats, depending on what software created the project. \r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1 and Microsoft Visual Studio 2017.  \r\n\t\r\nYou must ensure you follow the correct update instructions for your project type.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `project.json` or `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n---\r\n\r\n**Note**: If you are using ASP.NET Core MVC in your projects you should first update the `Microsoft.AspNetCore.Mvc` version to the fixed version in the table above. If you are currently using version 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4 or 1.0.5  you should update your package version to 1.0.6. If you are using version 1.1.0, 1.1.1, 1.1.2, 1.1.3 or 1.1.4 you should update your package version to 1.1.5. This will update every MVC package to the fixed versions.\r\n\r\n---\r\n\r\n### Fixing Direct Dependencies – project.json/VS2015\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n     \"Microsoft.AspNetCore.Mvc.Core \": \"1.0.1\",\r\n    }\r\n```\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Server.Kestrel` and `Microsoft.AspNetCore.Mvc.Core`. \r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Mvc.Core` version 1.0.1.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Core` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",     \r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Fixing Direct Dependencies – csproj/VS2017\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a single direct dependency, as seen by the `PackageReference` element. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a single package `Microsoft.AspNetCore.Mvc.Core` version 1.1.5.\r\n\r\nReview your `PackageReference` elements for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Mvc.Core` version 1.1.3.\r\n\r\nTo update to the fixed package, change the version number to the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Cors` to 1.1.5.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 1.0.1 when you update your `Microsoft.AspNetCore.Mvc` package to 1.0.6, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc.Core 1.0.6 expected Microsoft.AspNetCore.Mvc.Cors >= 1.0.6 but received 1.0.1`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `csproj` or `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.lock.json` (project.json/VS2015) or `project.assets.json` (csproj/VS2017) file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2015)\r\nIf you want to use Visual Studio 2015, open your project in Visual Studio 2015 and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a reference to `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2015.\r\n\r\n![vs2015](https://cloud.githubusercontent.com/assets/796298/25858059/a1ae6624-348f-11e7-9ce9-ff2d25a3fc5b.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc`, version 1.0.1, ` vulnerable version. \r\n\r\nThe first entry under the References heading refers to the target framework your application is using. This will be `.NETCoreApp`, `.NETStandard` or `.NET-Framework-vX.Y.Z` (where X.Y.Z is an actual version number) depending on how you configured your application. Under your target framework will be the list of packages you have directly taken a dependency on. In this example, the application takes a dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In this case the `Microsoft.AspNetCore.Mvc` package takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core` and numerous other packages.\r\n\r\n#### Manually reviewing project.lock.json (project.json/VS2015)\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies. \r\n\r\n#### Fixing transitive dependencies (project.json/VS2015)\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Mvc.Cors` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Cors` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Cors\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` using the package name from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Cors`, version 1.1.4 you would add a reference to the appropriate fixed version, 1.1.5.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Cors\" Version=\"1.1.5\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2017-8700](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8700)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6854178775","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:01:10","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/278","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11883: Denial Of Service Vulnerability\" (#278) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11883: Denial Of Service Vulnerability \r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where the application is hosted through Windows Http,Sys where a malformed request can lead to a Denial Of Service.\r\n\r\n## Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications hosted using Kestrel as their web server are not affected. By default ASP.NET Core Web applications are hosted with Kestrel. Developers must make specific decisions to switch to using HTTP.SYS.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.WebListener | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4<br />1.1.0, 1.1.1, 1.1.2 ,1.1.3 | 1.0.6<br />1.1.5\r\nMicrosoft.AspNetCore.Server.HttpSys | 2.0.0 |  2.0.2\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\n\r\n### NET Core Project formats\r\n.NET Core has two different project file formats, depending on what software created the project. \r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.  \r\n\t\r\nYou must ensure you follow the correct update instructions for your project type.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `project.json` or `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n\r\n### Fixing Direct Dependencies – project.json/VS2015\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.1\",\r\n     \"Microsoft.AspNetCore.Mvc.Core \": \"1.0.6\",\r\n    }\r\n```\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Server.WebListener` and `Microsoft.AspNetCore.Mvc.Core`. \r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on the vulnerable package, `Microsoft.AspNetCore.Server.WebListener` version 1.0.1.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Server.WebListener` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",     \r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Fixing Direct Dependencies – csproj/VS2017\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.WebListener\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a two direct dependencies, as seen by the two `PackageReference` elements. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name.\r\n\r\nReview your `PackageReference` elements for any instance of the packages and versions listed above. The example shows a direct reference to the vulnerable package `Microsoft.AspNetCore.Server.WebListener` version 1.1.1.\r\n\r\nTo update to the fixed package, change the version number to the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc.Cors` to 1.1.5.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.WebListener\" Version=\"1.1.5\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 1.0.1 when you update your `Microsoft.AspNetCore.Mvc` package to 1.0.6, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc.Core 1.0.6 expected Microsoft.AspNetCore.Mvc.Cors >= 1.0.6 but received 1.0.1`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `csproj` or `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.lock.json` (project.json/VS2015) or `project.assets.json` (csproj/VS2017) file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2015)\r\nIf you want to use Visual Studio 2015, open your project in Visual Studio 2015 and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a reference to `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2015.\r\n\r\n![vs2015](https://cloud.githubusercontent.com/assets/796298/25858059/a1ae6624-348f-11e7-9ce9-ff2d25a3fc5b.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc`, version 1.0.1, ` vulnerable version. \r\n\r\nThe first entry under the References heading refers to the target framework your application is using. This will be `.NETCoreApp`, `.NETStandard` or `.NET-Framework-vX.Y.Z` (where X.Y.Z is an actual version number) depending on how you configured your application. Under your target framework will be the list of packages you have directly taken a dependency on. In this example, the application takes a dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In this case the `Microsoft.AspNetCore.Mvc` package takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core` and numerous other packages.\r\n\r\n#### Manually reviewing project.lock.json (project.json/VS2015)\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies. \r\n\r\n#### Fixing transitive dependencies (project.json/VS2015)\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Mvc.Cors` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Server.WebListener` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.WebListener\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` using the package name from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Server.WebListener` version 1.1.0 you would add a reference to the appropriate fixed version 1.1.3.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.WebListener\" Version=\"1.1.5\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11883](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11883)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6854177980","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:01:01","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/277","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11879: Open Redirect can cause Elevation Of Privilege\" (#277) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11879: Open Redirect can cause Elevation Of Privilege \r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability some public versions of ASP.NET Core where an Open Redirect exists, leading to Elevation Of Privilege.\r\n\r\n## Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nASP.NET Core applications using version 1.0.x or 1.1.x are not affected.\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.All | 2.0.0 |  2.0.1\r\nMicrosoft.AspNetCore.Mvc.Core | 2.0.0 |  2.0.1\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n---\r\n\r\nIf you are targeting .NET Core a \"meta-package\" is used, `Microsoft.AspNetCore.All`. You should begin by updating its version number to 2.0.1, this will pull in the fixed `Microsoft.AspNetCore.Mvc.Core` package.\r\n\r\nIf you are targeting .NET Framework you should first update the `Microsoft.AspNetCore` version to the version number to 2.0.1, then adjust the version number for any other packages beginning with `Microsoft.AspNetCore.` to 2.0.1.\r\n\r\n---\r\n\r\n### Fixing Direct Dependencies – Projects targeting .NET Core\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has has a reference to the vulnerable metapackage, as seen by the single `PackageReference` elements. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.0.\r\n\r\nTo update to the fixed package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.All` to 2.0.1.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### Fixing Direct Dependencies – Projects targeting .NET Framework\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has has a reference a single packages, as seen by the `PackageReference` element. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.Core` version 2.0.0.\r\n\r\nTo update to the fixed package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.Core` to 2.0.1.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers a direct reference to `Microsoft.AspNetCore.Mvc.Cors` with a version number of 2.0.0 when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.assets.json` file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the table above. If you find the assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Mvc.Core` version 2.0.0 you would add a reference to the fixed version, 2.0.1.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Kévin Chalet for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11879:](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11879)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853300618","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:26:01","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/281","RelatedDescription":"Closed issue \"Reserved\" (#281) at aspnet/Announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853299320","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:25:47","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/280","RelatedDescription":"Closed issue \"Reserved\" (#280) at aspnet/Announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853297641","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:25:29","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/279","RelatedDescription":"Closed issue \"Reserved\" (#279) at aspnet/Announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853295578","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:25:10","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/278","RelatedDescription":"Closed issue \"Reserved\" (#278) at aspnet/Announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853295199","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:25:07","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/278","RelatedDescription":"Opened issue \"Reserved\" (#278) at aspnet/Announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853293682","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:24:50","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/277","RelatedDescription":"Closed issue \"Reserved\" (#277) at aspnet/Announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6780432155","Type":"IssuesEvent","CreatedAt":"2017-10-29T14:10:51","Actor":"smitpatel","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/276","RelatedDescription":"Closed issue \"Improved end to end testing support for MVC applications: Typo?\" (#276) at aspnet/Announcements","RelatedBody":"Hi @javiercn, I think the constructor name is wrong in the first example code block in #275\r\n\r\nShouldn't it be \r\n```\r\n        public MyApplicationFunctionalTests (WebApplicationTestFixture<Startup> fixture)\r\n        {\r\n            Client = fixture.Client;\r\n        }\r\n```\r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"931580871378964481","CreatedAt":"2017-11-17T17:52:42+00:00","UserScreenname":"aspnet","Text":"Check out our new ConfigurationBuilders that make it easier than ever to use Azure Key Vault, Environment Variables… https://t.co/itxdVWOnG5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":7,"RawContent":null},{"Id":"917884946324250624","CreatedAt":"2017-10-10T22:49:59+00:00","UserScreenname":"aspnet","Text":"The #aspnet Community Standup starts now - https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":9,"RawContent":null},{"Id":"917877107904036865","CreatedAt":"2017-10-10T22:18:50+00:00","UserScreenname":"aspnet","Text":"Join us in a half hour (3:45 PM Pacific) for this week's #aspnet Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"915262407743647744","CreatedAt":"2017-10-03T17:08:57+00:00","UserScreenname":"aspnet","Text":"We're live at https://t.co/4Ioo9jNSN2 for the exciting #SignalR deep dive. Join us now!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":22,"RawContent":null},{"Id":"915242491774869504","CreatedAt":"2017-10-03T15:49:49+00:00","UserScreenname":"aspnet","Text":"Join us for some #SignalR Core demos at 10 AM PDT (UTC-7) on #ASPNET Community Standup w/ SignalR dev @moozzyk.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":57,"FavoriteCount":26,"RawContent":null},{"Id":"912821323675529216","CreatedAt":"2017-09-26T23:28:57+00:00","UserScreenname":"aspnet","Text":"This week's community links from the #ASPNET Community Standup https://t.co/M37VVhlzcZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":8,"RawContent":null},{"Id":"912799120355581952","CreatedAt":"2017-09-26T22:00:43+00:00","UserScreenname":"aspnet","Text":"Join us at 3:45 PM Pacific (UTC+8) for the #ASPNET Community Standup. #dotNetConf recap, @SignalR and more.\nhttps://t.co/sgzsUBZksP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null}]}},"RunOn":"2017-11-24T05:30:11.1462959Z","RunDurationInMilliseconds":8443}