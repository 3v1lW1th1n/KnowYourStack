{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Entity Framework Core 3.0 Preview 6 and Entity Framework 6.3 Preview 6","PublishedOn":"2019-06-13T20:35:52+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"New previews of the next versions of EF Core and EF 6 are now available on NuGet.Org.\nWhat is new in EF Core 3.0 Preview 6\nIn recent months, a lot of our efforts have been focused on a new LINQ...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-6-and-entity-framework-6-3-preview-6/","RawContent":null},{"Title":"Try the new System.Text.Json APIs","PublishedOn":"2019-06-13T17:39:05+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"For .NET Core 3.0, we&#8217;re shipping a brand new namespace called System.Text.Json with support for a reader/writer, a document object model (DOM), and a serializer. In this blog post, I&#8217;m...","Href":"https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 6","PublishedOn":"2019-06-12T17:00:14+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 6. It includes updates for compiling assemblies for improved startup, optimizing applications for size with linker and EventPipe improvements....","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-6/","RawContent":null},{"Title":"Announcing ML.NET 1.1 and Model Builder updates (Machine Learning for .NET)","PublishedOn":"2019-06-11T17:16:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers.\nML.NET offers Model Builder Model Builder (a simple UI tool for Visual Studio) and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-1-and-model-builder-updates-machine-learning-for-net/","RawContent":null},{"Title":"Migrating a Sample WPF App to .NET Core 3 (Part 2)","PublishedOn":"2019-06-10T15:23:35+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"In part 1 of this blog series, I began the process of porting a sample WPF app to .NET Core. In that post, I described the .NET Core migration process as having four steps:\nWe previously went through...","Href":"https://devblogs.microsoft.com/dotnet/migrating-a-sample-wpf-app-to-net-core-3-part-2/","RawContent":null},{"Title":"Migrating a Sample WPF App to .NET Core 3 (Part 1)","PublishedOn":"2019-06-10T15:22:01+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Olia recently wrote a post about how to port a WinForms app from .NET Framework to .NET Core. Today, I&#8217;d like to follow that up by walking through the steps to migrate a sample WPF app to .NET...","Href":"https://devblogs.microsoft.com/dotnet/migrating-a-sample-wpf-app-to-net-core-3-part-1/","RawContent":null},{"Title":"Supporting the community with WF and WCF OSS projects","PublishedOn":"2019-06-07T17:06:06+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"At the Build conference in May 2019, we mentioned that, after we add WinForms, WPF and Entity Framework 6 to .NET Core 3.0, we do not plan to add any more of the technologies from .NET Framework to...","Href":"https://devblogs.microsoft.com/dotnet/supporting-the-community-with-wf-and-wcf-oss-projects/","RawContent":null},{"Title":"Porting desktop apps to .NET Core","PublishedOn":"2019-05-28T16:00:55+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Since I&#8217;ve been working with the community on porting desktop applications from .NET Framework to .NET Core, I&#8217;ve noticed that there are two camps of folks: some want a very simple and...","Href":"https://devblogs.microsoft.com/dotnet/porting-desktop-apps-to-net-core/","RawContent":null},{"Title":"The F# development home on GitHub is now dotnet/fsharp","PublishedOn":"2019-05-20T18:16:50+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"TL;DR We&#8217;ve moved the F# GitHub repository from microsoft/visualfsharp to dotnet/fsharp, as specified in the corresponding RFC.\nF# has a somewhat strange history in its name and brand. If we...","Href":"https://devblogs.microsoft.com/dotnet/the-f-development-home-on-github-is-now-dotnet-fsharp/","RawContent":null},{"Title":"Create Interactive .NET Documentation with Try .NET","PublishedOn":"2019-05-16T20:01:47+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"When it comes to developers&#8217; documentation, it is essential that we capture their interest and lead them down the path of success as soon as possible. Across multiple languages, developer...","Href":"https://devblogs.microsoft.com/dotnet/creating-interactive-net-documentation/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"9812903344","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:28:59","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Merged pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9812878014","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:23:52","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Opened pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9596433106","Type":"PullRequestEvent","CreatedAt":"2019-05-09T18:35:22","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Merged pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."},{"Id":"9583176004","Type":"PullRequestEvent","CreatedAt":"2019-05-08T04:08:41","Actor":"mitchelsellers","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Opened pull request \"Edits to DNN Platform Information\" (#145) at dotnet/foundation","RelatedBody":"Edits to reflect changes in repository structure with recent modifications to the overall project structure."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9625371249","Type":"IssuesEvent","CreatedAt":"2019-05-14T19:27:47","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/115","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#115) at dotnet/announcements","RelatedBody":"The following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9625048568","Type":"IssuesEvent","CreatedAt":"2019-05-14T18:38:24","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Opened issue \"May 2019 .NET Updates\" (#114) at dotnet/announcements","RelatedBody":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9624436763","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:06:25","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9624425934","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"},{"Id":"9624413462","Type":"IssuesEvent","CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://* dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9832991280","Type":"PullRequestEvent","CreatedAt":"2019-06-17T05:16:12","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25187","RelatedDescription":"Merged pull request \"Update linux-instructions.md\" (#25187) at dotnet/coreclr","RelatedBody":"Update ubuntu arm container version"},{"Id":"9832501823","Type":"IssuesEvent","CreatedAt":"2019-06-17T02:37:15","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25192","RelatedDescription":"Closed issue \"Test failed: System.Diagnostics.Tests.PerformanceCounterTests.PerformanceCounter_NextValue_ProcessorCounter\" (#25192) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-corefx-jitstress2-jitstressregs/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcorefx~2F/20190615.1/workItem/System.Diagnostics.PerformanceCounter.Tests/analysis/xunit/System.Diagnostics.Tests.PerformanceCounterTests~2FPerformanceCounter_NextValue_ProcessorCounter\r\n\r\n**Failed tests:**\r\nSystem.Diagnostics.Tests.PerformanceCounterTests.PerformanceCounter_NextValue_ProcessorCounter\r\n\r\n**Log:**\r\n```\r\nAssert.True() Failure\r\nExpected: True\r\nActual:   False\r\n```"},{"Id":"9832347451","Type":"IssuesEvent","CreatedAt":"2019-06-17T01:46:00","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25194","RelatedDescription":"Opened issue \"Assert failed: !CREATE_CHECK_STRING(!\\\"Detected use of a corrupted OBJECTREF. Possible GC hole.\\\")\" (#25194) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-outerloop-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190615.1/workItem/Interop/analysis/xunit/Interop_ICustomMarshaler._ConflictingNames_MultipleALCs_MultipleALCs_~2F_ConflictingNames_MultipleALCs_MultipleALCs_cmd\r\n\r\n**Failed tests:**\r\nInterop_ICustomMarshaler._ConflictingNames_MultipleALCs_MultipleALCs_._ConflictingNames_MultipleALCs_MultipleALCs_cmd\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 4632 [0x00001218], Thread: 5856 [0x16e0]): !CREATE_CHECK_STRING(!\\\"Detected use of a corrupted OBJECTREF. Possible GC hole.\\\")\r\n\r\nCORECLR! GetCLRRuntimeHost + 0x20D3C4 (0x728b6354)\r\nCORECLR! GetCLRRuntimeHost + 0x20CD51 (0x728b5ce1)\r\nCORECLR! GetCLRRuntimeHost + 0x208683 (0x728b1613)\r\nCORECLR! GetCLRRuntimeHost + 0x1FF0C (0x726c8e9c)\r\nCORECLR! GetCLRRuntimeHost + 0x237BD1 (0x728e0b61)\r\nCORECLR! GetCLRRuntimeHost + 0x232779 (0x728db709)\r\nCORECLR! GetCLRRuntimeHost + 0x3701EE (0x72a1917e)\r\nCORECLR! GetCLRRuntimeHost + 0x376986 (0x72a1f916)\r\nCORECLR! GetCLRRuntimeHost + 0x22F240 (0x728d81d0)\r\nCORECLR! GetCLRRuntimeHost + 0x231DBF (0x728dad4f)\r\n    File: f:\\\\workspace\\\\_work\\\\1\\\\s\\\\src\\\\vm\\\\object.cpp Line: 674\r\n    Image: C:\\\\dotnetbuild\\\\work\\\\738ee127-6b75-4be2-b2f2-ec94e88da013\\\\Payload\\\\CoreRun.exe\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\738ee127-6b75-4be2-b2f2-ec94e88da013\\\\Work\\\\f1c1b826-3df4-4eb2-820f-a0e9ec0da206\\\\Exec\\\\Interop\\\\ICustomMarshaler\\\\Reports\\\\Interop.ICustomMarshaler\\\\ConflictingNames\\\\MultipleALCs\\\\MultipleALCs.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\738ee127-6b75-4be2-b2f2-ec94e88da013\\\\Payload\\\\corerun.exe\\\" MultipleALCs.exe \r\nExpected: 100\r\nActual: -1073740286\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\738ee127-6b75-4be2-b2f2-ec94e88da013\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\738ee127-6b75-4be2-b2f2-ec94e88da013\\\\Work\\\\f1c1b826-3df4-4eb2-820f-a0e9ec0da206\\\\Exec\\\\Interop\\\\ICustomMarshaler\\\\ConflictingNames\\\\MultipleALCs\\\\MultipleALCs.cmd\r\nExpected: True\r\nActual:   False\r\n```"},{"Id":"9832318873","Type":"IssuesEvent","CreatedAt":"2019-06-17T01:35:07","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25193","RelatedDescription":"Opened issue \"Test failed: baseservices_threading._events_EventWaitHandle_unit_ManualConstructTrue_ManualConstructTrue_._events_EventWaitHandle_unit_ManualConstructTrue_ManualConstructTrue_cmd\" (#25193) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-outerloop-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190615.1/workItem/baseservices.threading/analysis/xunit/baseservices_threading._events_EventWaitHandle_unit_ManualConstructTrue_ManualConstructTrue_~2F_events_EventWaitHandle_unit_ManualConstructTrue_ManualConstructTrue_cmd\r\n\r\n**Failed tests:**\r\nbaseservices_threading._events_EventWaitHandle_unit_ManualConstructTrue_ManualConstructTrue_._events_EventWaitHandle_unit_ManualConstructTrue_ManualConstructTrue_cmd\r\n\r\n**Log:**\r\n```\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\bf1ad953-943c-4b73-89ae-8987b74fa9a8\\\\Work\\\\72d867d4-2c8f-4e47-b01d-762f1ba659b5\\\\Exec\\\\baseservices\\\\threading\\\\Reports\\\\baseservices.threading\\\\events\\\\EventWaitHandle\\\\unit\\\\ManualConstructTrue\\\\ManualConstructTrue.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\bf1ad953-943c-4b73-89ae-8987b74fa9a8\\\\Payload\\\\corerun.exe\\\" ManualConstructTrue.exe \r\nTest passed\r\nTest failed\r\nExpected: 100\r\nActual: 0\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\bf1ad953-943c-4b73-89ae-8987b74fa9a8\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\bf1ad953-943c-4b73-89ae-8987b74fa9a8\\\\Work\\\\72d867d4-2c8f-4e47-b01d-762f1ba659b5\\\\Exec\\\\baseservices\\\\threading\\\\events\\\\EventWaitHandle\\\\unit\\\\ManualConstructTrue\\\\ManualConstructTrue.cmd\r\nExpected: True\r\nActual:   False\r\n```"},{"Id":"9832286635","Type":"IssuesEvent","CreatedAt":"2019-06-17T01:22:23","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25192","RelatedDescription":"Opened issue \"Test failed: System.Diagnostics.Tests.PerformanceCounterTests.PerformanceCounter_NextValue_ProcessorCounter\" (#25192) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-corefx-jitstress2-jitstressregs/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcorefx~2F/20190615.1/workItem/System.Diagnostics.PerformanceCounter.Tests/analysis/xunit/System.Diagnostics.Tests.PerformanceCounterTests~2FPerformanceCounter_NextValue_ProcessorCounter\r\n\r\n**Failed tests:**\r\nSystem.Diagnostics.Tests.PerformanceCounterTests.PerformanceCounter_NextValue_ProcessorCounter\r\n\r\n**Log:**\r\n```\r\nAssert.True() Failure\r\nExpected: True\r\nActual:   False\r\n```"},{"Id":"9832281356","Type":"IssuesEvent","CreatedAt":"2019-06-17T01:20:12","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25191","RelatedDescription":"Opened issue \"[x64] System.InvalidOperationException : Cannot process request because the process has exited.\" (#25191) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-corefx-jitstress2-jitstressregs/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcorefx~2F/20190615.1/workItem/System.Diagnostics.Process.Tests/analysis/xunit/System.Diagnostics.Tests.ProcessTests~2FTestProcessorAffinity\r\n\r\n**Failed tests:**\r\n System.Diagnostics.Tests.ProcessTests/TestProcessorAffinity \r\n\r\n**Log:**\r\n```\r\nSystem.InvalidOperationException : Cannot process request because the process (10611) has exited.\r\n   at System.Diagnostics.Process.ThrowIfExited(Boolean refresh) in /_/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 343\r\n   at System.Diagnostics.Process.EnsureState(State state) in /_/src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs:line 940\r\n   at System.Diagnostics.Process.set_ProcessorAffinity(IntPtr value) in /_/src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs:line 536\r\n   at System.Diagnostics.Tests.ProcessTests.TestProcessorAffinity() in /_/src/System.Diagnostics.Process/tests/ProcessTests.cs:line 865\r\n```"},{"Id":"9832213923","Type":"IssuesEvent","CreatedAt":"2019-06-17T00:48:37","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25131","RelatedDescription":"Closed issue \"[x86][Windows] External disassembler is not available.\" (#25131) at dotnet/coreclr","RelatedBody":"All last windows x86 JitStress jobs failed with: `External disassembler is not available`.\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=221425&view=ms.vss-test-web.build-test-results-tab\r\n\r\nWe did not have this problem in the previous run. Probably all GCStress=0xc jobs will fail as well.\r\n\r\nIt can be that the last helix update again deleted some necessary libraries from these machines (last time it was MSVC++ Redistributable dll, it was tracked in https://github.com/dotnet/core-eng/issues/6109).\r\n\r\nI will check what we are missing now.\r\n\r\ncc @MattGal @echesakov."},{"Id":"9832158135","Type":"PullRequestEvent","CreatedAt":"2019-06-17T00:18:31","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25180","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#25180) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190615.05\r\n- **Date Produced**: 6/16/2019 4:43 AM\r\n- **Commit**: f1c72ba8603d2b13484f37f62b5987564a48be12\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview7-27815-05\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n\r\n\r\n"},{"Id":"9831833254","Type":"IssuesEvent","CreatedAt":"2019-06-16T21:03:49","Actor":"Suchiman","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25190","RelatedDescription":"Opened issue \"Inconsistent/Incorrect float formatting\" (#25190) at dotnet/coreclr","RelatedBody":"Using following code\r\n```csharp\r\nvar SingleValue = 65747.125f;\r\nConsole.WriteLine(SingleValue.ToString(\"#,###.00\"));\r\nConsole.WriteLine(SingleValue.ToString());\r\n```\r\n\r\nOn [.NET Framework](https://sharplab.io/#v2:EYLgHgbALANALiATgVwHYB8ACAmAjAWACgicBmIgbyIAJbqdsa6rC63qA3AQ0WoGUAlqgDmAGwCmANS6jk46gF5qEAKwB2KGoB0ubCoBmAbibt6uAJwAKQSInTZ4rQBUA9nziIhwywCIAxDB+QVoADCE+AJQRxqymZlY2YlIycs5uHl6WUTFsAL5xRES5QA=), this results in\r\n```\r\n65,747.13\r\n65747.13\r\n```\r\nwhich isn't entirely accurate but close enough.\r\n\r\nOn [.NET Core](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEUCuA7AHwAEAmARgFgAoa0gZmoG9qACNl0k195q9/lgDcAhlBYBlAJZ4A5gBsYANWFycMFgF4WSAKwB2FHoB0ZEjoBmAbm4COZAJwAKKbIXLVMIwBUI4jFGkZRwAiAGI0UMijAAZo4IBKeOs+WzsnF3klFTVvX39Ax0Tk/gBfVOpqEqA) this gives\r\n```\r\n65,747.10\r\n65747.125\r\n```\r\nwhich actually roundtrips the floating point number (:+1:), except when you specify a format string, then the result is completely off for some reason.\r\n\r\ncc @tannergooding "},{"Id":"9831124744","Type":"IssuesEvent","CreatedAt":"2019-06-16T15:03:22","Actor":"Korporal","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25189","RelatedDescription":"Opened issue \"Question: Hardware\" (#25189) at dotnet/coreclr","RelatedBody":"Apologies if this is not the ideal place for this question but I must start somewhere. Some years ago Microsoft created the .Net [Mico Framework](https://github.com/NETMF/netmf-interpreter) and did a rather good job.\r\n\r\nHowever a few years ago support and enthusiasm from Microsoft faded and the project has languished ever since all but abandoned so far as others are concerned.\r\n\r\nThis spurned a few others to initiate their own project like .Net [nano-Framework](https://github.com/nanoframework) and [Tiny CLR](https://www.ghielectronics.com/tinyclr/features) by GHI electronics, a noted expert in the area of electronics and microcontroller products.\r\n\r\nHowever neither of these seems ideal to me:\r\n\r\n1. Only one is fully open source.\r\n2. Neither offers any prospect of supporting generics.\r\n3. The overall architecture seems ad-hoc (and based on the initial simple architecture from MS)\r\n\r\nThe inability to use generics has a huge impact once one starts to seriously design non-trivial systems and libraries and will surely have a huge impact in how much C# can penetrate this area.\r\n\r\nOf course there's [Windows 10 IoT](https://software.intel.com/en-us/iot/tools-ide/windows-10) but this targets much more powerful system, full computers with significant resources. Besides I've watched this for some time and it seems sluggish, some boards are just unavailable and so on.\r\n\r\nThe kinds of devices that the .Net Micro Framework, .Net nano-Framework and Tiny CLR target are resource constrained devices like these:\r\n\r\n1. [G400-D](https://www.ghielectronics.com/products/ucm/g400d) ([Atmel Arm](https://www.microchip.com/wwwproducts/en/AT91SAM9X35))\r\n2. [STM-32](https://www.st.com/en/evaluation-tools/32f769idiscovery.html) ([STM Arm](https://www.st.com/en/microcontrollers-microprocessors/stm32f769ni.html))\r\n\r\nBecause the kinds of constrained devices are not full computers, they don't lend themselves well to a Windows OS architecture (there is no OS) so stuff like Windows Device Drivers (devices are more fundamental and exposed to developers like DMA controllers, GPIO pins, DSP etc it is with these and other abstractions that developers work with routinely).\r\n\r\nSure Windows supports these internally but these abstractions are buried in the OS and never available to developers or exposed much at all unless they're writing a device driver.\r\n\r\nThe above two projects are admirable and function to a degree, but overall wouldn't it be better to have a true generic attempt that's fully open source and ideally with some Microsoft backing or participation?\r\n\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9831996918","Type":"PullRequestEvent","CreatedAt":"2019-06-16T22:39:41","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11571","RelatedDescription":"Opened pull request \"ToolManifestEditor catches FormatException\" (#11571) at dotnet/cli","RelatedBody":"Fix https://github.com/dotnet/cli/issues/11482\r\n\r\n"},{"Id":"9830828956","Type":"PullRequestEvent","CreatedAt":"2019-06-16T12:45:27","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11570","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/templating\" (#11570) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190615.1\r\n- **Date Produced**: 6/15/2019 12:48 PM\r\n- **Commit**: c561d7deb8e1a7ff7a73d0fd5abec8556dae922b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19315.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n"},{"Id":"9830763430","Type":"PullRequestEvent","CreatedAt":"2019-06-16T12:10:10","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11570","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/templating\" (#11570) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190615.1\r\n- **Date Produced**: 6/15/2019 12:48 PM\r\n- **Commit**: c561d7deb8e1a7ff7a73d0fd5abec8556dae922b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19315.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9830869580","Type":"PullRequestEvent","CreatedAt":"2019-06-16T13:06:10","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1256","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1256) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190615.6\r\n- **Date Produced**: 6/16/2019 6:29 AM\r\n- **Commit**: 23faf5d032feef556f5399b46a92a6e4aef7d84a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19315.6\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19315.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19315.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"9830849392","Type":"PullRequestEvent","CreatedAt":"2019-06-16T12:56:05","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1256","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1256) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190615.6\r\n- **Date Produced**: 6/16/2019 6:29 AM\r\n- **Commit**: 23faf5d032feef556f5399b46a92a6e4aef7d84a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19315.6\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19315.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19315.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"9830770112","Type":"PullRequestEvent","CreatedAt":"2019-06-16T12:13:49","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1255","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1255) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190615.2\r\n- **Date Produced**: 6/15/2019 4:13 PM\r\n- **Commit**: aa4285be7fab64e2b6e62e4d5688ea50931c407c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19315.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"9830751805","Type":"PullRequestEvent","CreatedAt":"2019-06-16T12:03:45","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1255","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1255) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190615.2\r\n- **Date Produced**: 6/15/2019 4:13 PM\r\n- **Commit**: aa4285be7fab64e2b6e62e4d5688ea50931c407c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19315.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"9828589550","Type":"PullRequestEvent","CreatedAt":"2019-06-15T13:06:53","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1254","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1254) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190614.4\r\n- **Date Produced**: 6/15/2019 3:37 AM\r\n- **Commit**: 5fa3d3b8f89302202091993681391c9b356755a7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19314.4\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19314.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19314.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"9828570837","Type":"PullRequestEvent","CreatedAt":"2019-06-15T12:56:48","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1254","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1254) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190614.4\r\n- **Date Produced**: 6/15/2019 3:37 AM\r\n- **Commit**: 5fa3d3b8f89302202091993681391c9b356755a7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19314.4\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19314.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19314.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9832917715","Type":"IssuesEvent","CreatedAt":"2019-06-17T04:52:46","Actor":"hez2010","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/38592","RelatedDescription":"Opened issue \"System.Text.Json throw exceptions on UWP in Release Build\" (#38592) at dotnet/corefx","RelatedBody":"Use System.Json.Text in UWP,\r\n```csharp\r\nJsonSerializer.ToString(new { test = \"abc\" });\r\n```\r\n```\r\nThis operation cannot be carried out because metadata for the following object was removed for performance reasons: <unavailable>\r\nNo further information is available. Rebuild in debug mode for better information.\r\n```"},{"Id":"9832250068","Type":"IssuesEvent","CreatedAt":"2019-06-17T01:06:26","Actor":"mqudsi","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/38591","RelatedDescription":"Opened issue \"`Utf8JsonReader` does not correctly resume with only a `JsonReaderState`\" (#38591) at dotnet/corefx","RelatedBody":"The way the API is currently designed and going off of the inline-documentation and online blog posts, it seems that `JsonReaderState` exists to work around the limitations of its `ref struct` type, namely, notably the inability to use it in an `async` context.\r\n\r\nThe problem is that `Utf8JsonReader` retains stateful information that is not contained in `JsonReaderState`, meaning that despite all appearances, you have to either find a way to re-use `Utf8JsonReader` objects (impossible in an `async` context) or else retrieve additional state information that must then be relayed to a new `Utf8JsonReader` instance in order to continue a previous partial read operation.\r\n\r\nI have a contained reproduction of the problem here as a single-file MSTest: https://github.com/mqudsi/StjTest\r\n\r\nI see there's a proposal in https://github.com/dotnet/corefx/issues/35252 to rather reduce the amount of state stored in a `JsonReaderState` to reduce heap allocations, which is definitely a laudable goal. But if it's possible to store a reference to the state instead, as discussed in https://github.com/dotnet/corefx/issues/33298 that would (potentially) eliminate that recurring cost.\r\n\r\nThe current API for `Utf8JsonReader` would lead one to suspect that \"state needed to continue reading\" is contained within `JsonReaderState` and `Utf8JsonReader` is the equivalent of a singleton or immutable struct, except that it also contains the result of the last `.Read` operation, and that resuming from state would continue as-is except for the loss of the disposable information about the details of the last-read token.\r\n\r\nThe real problem is that you have two different states (one in the reader and one in the state object), one of which is always needed whereas the other is only needed when starting from scratch and each comes at the cost of the other. \r\n\r\nWhat if the state were split into two different objects, and there were no possibility of misusing them thanks to type safety?\r\n\r\ne.g. \r\n\r\n* Two state types, `PartialState` and `FullState`, where `PartialState` is the information in `JsonReaderState` that *is* currently used when passed in to the `Utf8JsonReader` constructor and `FullState` is the current `JsonReaderState`.\r\n* It is not possible to pass in a `PartialState` to the constructor, you either supply a `FullState` or nothing at all. \r\n* `Utf8JsonReader.CurrentState` takes a `PartialState` value, and won't accept a `FullState` value instead\r\n* A new `Utf8JsonReader.Snapshot()` method (or a different property) that creates and returns a new `FullState` object, to be used only when a new reader will be constructed\r\n\r\nThis addresses #35252 by dropping extraneous values from `JsonReaderState` where/when they are not needed (calling against an existing `Utf8JsonReader` across `async` boundaries)  but means no gymnastics are required to create a new `Utf8JsonReader` resuming where the old one left off."},{"Id":"9832115483","Type":"PullRequestEvent","CreatedAt":"2019-06-16T23:54:55","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/38537","RelatedDescription":"Closed pull request \"[master] Update dependencies from dotnet/arcade\" (#38537) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190615.2\r\n- **Date Produced**: 6/15/2019 4:13 PM\r\n- **Commit**: aa4285be7fab64e2b6e62e4d5688ea50931c407c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19315.2\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19315.2\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19315.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19315.2\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"9831986992","Type":"IssuesEvent","CreatedAt":"2019-06-16T22:33:35","Actor":"mqudsi","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/38590","RelatedDescription":"Opened issue \"Pretty please: `JsonTokenType` to `[Flags]`\" (#38590) at dotnet/corefx","RelatedBody":"Before `System.Text.Json` finalizes, would it be possible to change the definition of `JsonTokenType` (and maybe others) to make certain operations on top of `Utf8JsonReader` more efficient?\r\n\r\nThis is what I had in mind:\r\n\r\n```csharp\r\n[Flags]\r\npublic enum JsonTokenType : byte\r\n{\r\n    None = 0,\r\n    StartObject = 1 << 0,\r\n    EndObject = 1 << 1,\r\n    StartArray = 1 << 2,\r\n    EndArray = 1 << 3,\r\n    PropertyName = 1 << 4,\r\n    String = 1 << 5,\r\n    Number = 1 << 6,\r\n    True = 1 << 7,\r\n    False = 1 << 8,\r\n    Null = 1 << 9,\r\n    Comment = 1 << 10,\r\n\r\n    // These will make things more efficient.\r\n    // You don't even have to define them if you feel they're too subjective,\r\n    // library writers can define them on their end by virtue of `JsonTokenType`\r\n    // members having power-of-two values.\r\n    Boolean = True | False,\r\n    NestedStart = StartObject | StartArray,\r\n    Literal = String | Number | Boolean | Null,\r\n    // etc.\r\n}\r\n```\r\n\r\nAs mentioned, there's no need to actually provide the definitions for `Boolean`, `NestedStart`, etc. as a dev can easily define them once on their end (although having them in the library means they can be kept in-sync), so that usages such as \"handle this `ValueSpan` if it is a boolean\" can be written as `(reader.TokenType & Boolean) != JsonTokenType.None` rather than `reader.TokenType == JsonTokenType.True || reader.TokenType == JsonTokenType.False`.\r\n\r\n(`JsonValueType` can also use this to get `JsonTokenType.Boolean`)"},{"Id":"9831960015","Type":"IssuesEvent","CreatedAt":"2019-06-16T22:17:06","Actor":"mqudsi","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/38586","RelatedDescription":"Closed issue \"System.Text.Json asynchronous streaming deserialization support\" (#38586) at dotnet/corefx","RelatedBody":"Hello team,\r\n\r\nWe've been eager to try the new `System.Text.Json` APIs for their native UTF8 support, but it seems based off [the preview release announcement](https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/) and the API exposed by the current preview release of the `System.Text.Json` that there's a lack of streaming support, i.e. reading individual JSON tokens without first having the entire document loaded into memory (and then parsed as a `JsonDocument`).\r\n\r\nThe Newtonsoft JSON library had a `JsonTextReader` that could lazily consume an underlying `Stream` and return a token at a time via `JsonTextReader.ReadAsync(..)`, which moved the document cursor/pointer to the next node in the stream. It had some shortcomings (it couldn't skip past a nested node, you had to step through it IIRC) but it served the purpose of being able to navigate asynchronously to a particular node in a JSON document and then selectively parse its value without having to first buffer the entire stream beforehand or to parse the entirety of the document in order to enumerate its nodes.\r\n\r\nI assumed that `Utf8JsonReader` would for sure do the same thing, but it seems that a `Utf8JsonReader` can only be created on top of an available `ReadOnlySequence<T>` and all its methods are blocking. `JsonDocument` can be created on top of a `Stream` and does not appear to consume the entire stream upon initialization, but only offers a `ParseAsync()` method that asynchronously reads from the underlying stream; except it consumes the entirety of the stream and loads the entire document into memory.\r\n\r\nI'm probably missing something, but is there no way to asynchronously and lazily navigate a UTF8 JSON stream, without buffering the entire document in memory and without blocking unnecessarily for IO?\r\n\r\n"},{"Id":"9831700112","Type":"IssuesEvent","CreatedAt":"2019-06-16T19:53:36","Actor":"scalablecory","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/38587","RelatedDescription":"Closed issue \"System.Text.Json Cannot Run Tests from Visual Studio\" (#38587) at dotnet/corefx","RelatedBody":"After building the System.Text.Json solution via build.cmd (or Visual Studio) the resulting assemblies are put into a `$(ArtifactsBinDir)$(TestProjectName)/netcoreapp-$(ConfigurationGroup)/` directory. \r\n\r\nThe working directory of the System.Text.Json.Tests project under Debug is set to `$(ArtifactsBinDir)$(TestProjectName)/netcoreapp-$(_bc_OSGroup)-$(ConfigurationGroup)-$(ArchGroup)/` this causes an error when trying to execute the tests with the following message box:\r\n```\r\n---------------------------\r\nMicrosoft Visual Studio\r\n---------------------------\r\nThe working directory 'E:\\code\\corefx\\artifacts\\bin\\System.Text.Json.Tests\\netcoreapp-Windows_NT-Debug-x64\\' specified in the '.NET Core xUnit Console' debug profile does not exist.\r\n---------------------------\r\nOK   \r\n---------------------------\r\n```\r\n\r\nRunning the same tests via `dotnet msbuild /t:rebuildandtest` locates the tests correctly.\r\n\r\nAm I doing something wrong or is this a mistake in the test configuration?"},{"Id":"9831698457","Type":"IssuesEvent","CreatedAt":"2019-06-16T19:52:43","Actor":"axm","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/38589","RelatedDescription":"Opened issue \"[System.Text.Json] merging two json structures\" (#38589) at dotnet/corefx","RelatedBody":"I ran into this use case recently and I was unable to find a solution. \r\n\r\nOn one hand I read the contents of a file, then I obtained the JSON representaiton of that content with\r\n\r\n```\r\nvar document = JsonDocument.Parse(fileContent);\r\n```\r\n\r\nNow I have access to all that data. The second thing I did was build a custom JSON object with the `Utf8JsonWriter`.\r\n\r\n**Question:** how can I integrate the latter object into the former (`document`)? I want to create a property in `document` (maybe nested quite deeply) and set the value of that property to the object that I build with `Utf8JsonWriter`."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9832661165","Type":"IssuesEvent","CreatedAt":"2019-06-17T03:28:24","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/36497","RelatedDescription":"Opened issue \"UseImplicitType incorrectly offered on `out _ `\" (#36497) at dotnet/roslyn","RelatedBody":"![image](https://user-images.githubusercontent.com/12466233/59576565-2a7e3b80-9075-11e9-8d0f-b085f873b16f.png)\r\n"},{"Id":"9832219953","Type":"IssuesEvent","CreatedAt":"2019-06-17T00:51:44","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/36496","RelatedDescription":"Opened issue \"Compiler \"Failed to emit module\" with empty var tuple pattern\" (#36496) at dotnet/roslyn","RelatedBody":"The following program does not compile:\r\n``` c#\r\npublic class C\r\n{\r\n    public static void Main() { }\r\n    public void M(C c)\r\n    {\r\n        if (c is var ()) { }\r\n    }\r\n    public void Deconstruct() { }\r\n}\r\n```\r\nThe error is \"error CS7038: Failed to emit module\"\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9832333787","Type":"PullRequestEvent","CreatedAt":"2019-06-17T01:40:51","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7532","RelatedDescription":"Merged pull request \"Do not generate object array thunk for byref-returning delegates\" (#7532) at dotnet/corert","RelatedBody":"Object array thunks are the weird thunks we make for delegates for the LINQ expression interpreter that dispatch to a method that takes an object array and returns object. There's no way to turn object returned from that method into a byref so we shouldn't try to make the thunks.\r\n\r\nAlso hit an assert in dynamic invoke method thunk, so fixed that too.\r\n\r\nFixes #7526."},{"Id":"9832333779","Type":"IssuesEvent","CreatedAt":"2019-06-17T01:40:51","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7526","RelatedDescription":"Closed issue \"Compilation error when using \"ref\" returns \" (#7526) at dotnet/corert","RelatedBody":"I am getting the following error:\r\n```csharp\r\nEXEC : warning : RD.XML processing will change before release (https://github.com/dotnet/corert/issues/5001) [Path/To/Project/With/Confidential/Class.csproj]\r\nEXEC : error : [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: SomeConfidentialClass ByRef, ? [Path/To/Project/With/Confidential/Class.csproj]\r\n  Internal.TypeSystem.TypeSystemException+TypeLoadException: [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: SomeConfidentialClass ByRef, ?\r\n     at Internal.TypeSystem.ThrowHelper.ThrowTypeLoadException(ExceptionStringID id, String typeName, String assemblyName)\r\n     at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc type)\r\n     at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n     at ILCompiler.DependencyAnalysis.ReadyToRunGenericHelperNode.InstantiateDependencies(NodeFactory factory, Instantiation typeInstantiation, Instantiation methodInstantiation)\r\n     at ILCompiler.DependencyAnalysis.ShadowConcreteMethodNode.GetStaticDependencies(NodeFactory factory)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.GetStaticDependenciesImpl(DependencyNodeCore`1 node)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n```\r\n\r\nWhen using \"ref\" returns like this:\r\n```csharp\r\nprivate ITransform _transform;\r\npublic ref ITransform TransformByRef => ref _transform;\r\n```\r\n\r\nIs this feature not supported in CoreRT?"},{"Id":"9832013580","Type":"PullRequestEvent","CreatedAt":"2019-06-16T22:50:15","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7533","RelatedDescription":"Opened pull request \"More precise handling of instantiating stubs according to CoreCLR\" (#7533) at dotnet/corert","RelatedBody":"I have found a few places in ceeInfoGetCallInfo where I originally\r\ndidn't fully understand the intent of the CoreCLR code so\r\nI converted it imprecisely. This change fixes two such imprecisions\r\nregarding instantiating stubs and, in doing so, fixes about\r\n300 more CoreCLR classloader Pri#1 tests.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9831885655","Type":"PullRequestEvent","CreatedAt":"2019-06-16T21:33:14","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7532","RelatedDescription":"Opened pull request \"Do not generate object array thunk for byref-returning delegates\" (#7532) at dotnet/corert","RelatedBody":"Object array thunks are the weird thunks we make for delegates for the LINQ expression interpreter that dispatch to a method that takes an object array and returns object. There's no way to turn object returned from that method into a byref so we shouldn't try to make the thunks.\r\n\r\nAlso hit an assert in dynamic invoke method thunk, so fixed that too.\r\n\r\nFixes #7526."},{"Id":"9831220060","Type":"PullRequestEvent","CreatedAt":"2019-06-16T15:45:56","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7530","RelatedDescription":"Merged pull request \"Implement obsolete Marshal.Read APIs\" (#7530) at dotnet/corert","RelatedBody":"If there's a bad obsolete API we added to .NET Core, chances are WinForms uses it."},{"Id":"9831215183","Type":"PullRequestEvent","CreatedAt":"2019-06-16T15:43:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7527","RelatedDescription":"Merged pull request \"Fix CharSet on GetProcAddress\" (#7527) at dotnet/corert","RelatedBody":"This flavor is used in NativeLibrary.GetSymbol so we didn't hit this before."},{"Id":"9830096089","Type":"PullRequestEvent","CreatedAt":"2019-06-16T05:16:48","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7529","RelatedDescription":"Merged pull request \"Scan for `Marshal.SizeOf(Type)` usage\" (#7529) at dotnet/corert","RelatedBody":"WinForms codebase is full of this pattern and there's no reason we couldn't misuse the reflection method body scanner to scan for this too."},{"Id":"9830036276","Type":"PullRequestEvent","CreatedAt":"2019-06-16T04:27:48","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7528","RelatedDescription":"Merged pull request \"Implement generation of function pointer metadata\" (#7528) at dotnet/corert","RelatedBody":"Hit this while accidentally compiling WPF, but might as well just implement this."},{"Id":"9829570080","Type":"PullRequestEvent","CreatedAt":"2019-06-15T22:13:48","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7531","RelatedDescription":"Opened pull request \"Initial support for R2RDump in SuperIlc\" (#7531) at dotnet/corert","RelatedBody":"I have added initial minimalistic support for R2RDump to SuperIlc.\r\nUsing the new switch -r2r <path> we can specify the path to the\r\nR2RDump tool and SuperIlc will use it to disassemble each\r\nsuccessfully compiled assembly in the \"naked\" and \"raw\" mode\r\n(from a completely selfish point of view these are the modes I'm\r\nusing most of the time). These dumps make it much easier to compare\r\nCPAOT and Crossgen output when analyzing the remaining failing\r\ntests.\r\n\r\nAs a caveat this cannot be yet added to automated testing because\r\nof the known backlog item \"R2RDump build doesn't publish\r\nCoreDisTools.dll it requires\" (even though the library is available\r\nin the build outputs and just copying it next to R2RDump fixes the\r\nproblem - that's what I've been doing since the very beginning).\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9829463671","Type":"PullRequestEvent","CreatedAt":"2019-06-15T21:03:47","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7530","RelatedDescription":"Opened pull request \"Implement obsolete Marshal.Read APIs\" (#7530) at dotnet/corert","RelatedBody":"If there's a bad obsolete API we added to .NET Core, chances are WinForms uses it."},{"Id":"9829305551","Type":"PullRequestEvent","CreatedAt":"2019-06-15T19:29:41","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7529","RelatedDescription":"Opened pull request \"Scan for `Marshal.SizeOf(Type)` usage\" (#7529) at dotnet/corert","RelatedBody":"WinForms codebase is full of this pattern and there's no reason we couldn't misuse the reflection method body scanner to scan for this too."},{"Id":"9829305159","Type":"PullRequestEvent","CreatedAt":"2019-06-15T19:29:27","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7528","RelatedDescription":"Opened pull request \"Implement generation of function pointer metadata\" (#7528) at dotnet/corert","RelatedBody":"Hit this while accidentally compiling WPF, but might as well just implement this."},{"Id":"9829304672","Type":"PullRequestEvent","CreatedAt":"2019-06-15T19:29:10","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7527","RelatedDescription":"Opened pull request \"Fix CharSet on GetProcAddress\" (#7527) at dotnet/corert","RelatedBody":"This flavor is used in NativeLibrary.GetSymbol so we didn't hit this before."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9831491336","Type":"PullRequestEvent","CreatedAt":"2019-06-16T18:04:31","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3315","RelatedDescription":"Merged pull request \"Add warnings related to Microsoft.NET.Sdk.WindowsDesktop\" (#3315) at dotnet/sdk","RelatedBody":"Related: #3126 \r\nThis is also needed to completely fix https://github.com/dotnet/wpf/issues/866 - we still can't support support multitargeting `netcoreapp2.2`, and also to fix https://github.com/dotnet/wpf/issues/867\r\n\r\n- Adds warning strings related to `Microsoft.NET.Sdk.WindowsDesktop`\r\n- Adds a check to warn when `UseWpf` or `UseWindowsForms` is set without including `Microsoft.NET.Sdk.WindowsDesktop`"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"456583136","IsPullRequest":true,"CreatedAt":"2019-06-17T05:16:11","Actor":"fadimounir","Number":"25187","RawContent":null,"Title":"Update linux-instructions.md","State":"closed","Body":"Update ubuntu arm container version","Url":"https://github.com/dotnet/coreclr/pull/25187","RelatedDescription":"Closed or merged PR \"Update linux-instructions.md\" (#25187)"},{"Id":"456704883","IsPullRequest":false,"CreatedAt":"2019-06-17T02:37:15","Actor":"VincentBu","Number":"25192","RawContent":null,"Title":"Test failed: System.Diagnostics.Tests.PerformanceCounterTests.PerformanceCounter_NextValue_ProcessorCounter","State":"closed","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-corefx-jitstress2-jitstressregs/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcorefx~2F/20190615.1/workItem/System.Diagnostics.PerformanceCounter.Tests/analysis/xunit/System.Diagnostics.Tests.PerformanceCounterTests~2FPerformanceCounter_NextValue_ProcessorCounter\r\n\r\n**Failed tests:**\r\nSystem.Diagnostics.Tests.PerformanceCounterTests.PerformanceCounter_NextValue_ProcessorCounter\r\n\r\n**Log:**\r\n```\r\nAssert.True() Failure\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25192","RelatedDescription":"Closed issue \"Test failed: System.Diagnostics.Tests.PerformanceCounterTests.PerformanceCounter_NextValue_ProcessorCounter\" (#25192)"},{"Id":"456708152","IsPullRequest":false,"CreatedAt":"2019-06-17T01:46:00","Actor":"VincentBu","Number":"25194","RawContent":null,"Title":"Assert failed: !CREATE_CHECK_STRING(!\\\"Detected use of a corrupted OBJECTREF. Possible GC hole.\\\")","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-outerloop-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190615.1/workItem/Interop/analysis/xunit/Interop_ICustomMarshaler._ConflictingNames_MultipleALCs_MultipleALCs_~2F_ConflictingNames_MultipleALCs_MultipleALCs_cmd\r\n\r\n**Failed tests:**\r\nInterop_ICustomMarshaler._ConflictingNames_MultipleALCs_MultipleALCs_._ConflictingNames_MultipleALCs_MultipleALCs_cmd\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 4632 [0x00001218], Thread: 5856 [0x16e0]): !CREATE_CHECK_STRING(!\\\"Detected use of a corrupted OBJECTREF. Possible GC hole.\\\")\r\n\r\nCORECLR! GetCLRRuntimeHost + 0x20D3C4 (0x728b6354)\r\nCORECLR! GetCLRRuntimeHost + 0x20CD51 (0x728b5ce1)\r\nCORECLR! GetCLRRuntimeHost + 0x208683 (0x728b1613)\r\nCORECLR! GetCLRRuntimeHost + 0x1FF0C (0x726c8e9c)\r\nCORECLR! GetCLRRuntimeHost + 0x237BD1 (0x728e0b61)\r\nCORECLR! GetCLRRuntimeHost + 0x232779 (0x728db709)\r\nCORECLR! GetCLRRuntimeHost + 0x3701EE (0x72a1917e)\r\nCORECLR! GetCLRRuntimeHost + 0x376986 (0x72a1f916)\r\nCORECLR! GetCLRRuntimeHost + 0x22F240 (0x728d81d0)\r\nCORECLR! GetCLRRuntimeHost + 0x231DBF (0x728dad4f)\r\n    File: f:\\\\workspace\\\\_work\\\\1\\\\s\\\\src\\\\vm\\\\object.cpp Line: 674\r\n    Image: C:\\\\dotnetbuild\\\\work\\\\738ee127-6b75-4be2-b2f2-ec94e88da013\\\\Payload\\\\CoreRun.exe\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\738ee127-6b75-4be2-b2f2-ec94e88da013\\\\Work\\\\f1c1b826-3df4-4eb2-820f-a0e9ec0da206\\\\Exec\\\\Interop\\\\ICustomMarshaler\\\\Reports\\\\Interop.ICustomMarshaler\\\\ConflictingNames\\\\MultipleALCs\\\\MultipleALCs.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\738ee127-6b75-4be2-b2f2-ec94e88da013\\\\Payload\\\\corerun.exe\\\" MultipleALCs.exe \r\nExpected: 100\r\nActual: -1073740286\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\738ee127-6b75-4be2-b2f2-ec94e88da013\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\738ee127-6b75-4be2-b2f2-ec94e88da013\\\\Work\\\\f1c1b826-3df4-4eb2-820f-a0e9ec0da206\\\\Exec\\\\Interop\\\\ICustomMarshaler\\\\ConflictingNames\\\\MultipleALCs\\\\MultipleALCs.cmd\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25194","RelatedDescription":"Open issue \"Assert failed: !CREATE_CHECK_STRING(!\\\"Detected use of a corrupted OBJECTREF. Possible GC hole.\\\")\" (#25194)"},{"Id":"456706585","IsPullRequest":false,"CreatedAt":"2019-06-17T01:35:07","Actor":"VincentBu","Number":"25193","RawContent":null,"Title":"Test failed: baseservices_threading._events_EventWaitHandle_unit_ManualConstructTrue_ManualConstructTrue_._events_EventWaitHandle_unit_ManualConstructTrue_ManualConstructTrue_cmd","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-outerloop-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190615.1/workItem/baseservices.threading/analysis/xunit/baseservices_threading._events_EventWaitHandle_unit_ManualConstructTrue_ManualConstructTrue_~2F_events_EventWaitHandle_unit_ManualConstructTrue_ManualConstructTrue_cmd\r\n\r\n**Failed tests:**\r\nbaseservices_threading._events_EventWaitHandle_unit_ManualConstructTrue_ManualConstructTrue_._events_EventWaitHandle_unit_ManualConstructTrue_ManualConstructTrue_cmd\r\n\r\n**Log:**\r\n```\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\bf1ad953-943c-4b73-89ae-8987b74fa9a8\\\\Work\\\\72d867d4-2c8f-4e47-b01d-762f1ba659b5\\\\Exec\\\\baseservices\\\\threading\\\\Reports\\\\baseservices.threading\\\\events\\\\EventWaitHandle\\\\unit\\\\ManualConstructTrue\\\\ManualConstructTrue.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\bf1ad953-943c-4b73-89ae-8987b74fa9a8\\\\Payload\\\\corerun.exe\\\" ManualConstructTrue.exe \r\nTest passed\r\nTest failed\r\nExpected: 100\r\nActual: 0\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\bf1ad953-943c-4b73-89ae-8987b74fa9a8\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\bf1ad953-943c-4b73-89ae-8987b74fa9a8\\\\Work\\\\72d867d4-2c8f-4e47-b01d-762f1ba659b5\\\\Exec\\\\baseservices\\\\threading\\\\events\\\\EventWaitHandle\\\\unit\\\\ManualConstructTrue\\\\ManualConstructTrue.cmd\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25193","RelatedDescription":"Open issue \"Test failed: baseservices_threading._events_EventWaitHandle_unit_ManualConstructTrue_ManualConstructTrue_._events_EventWaitHandle_unit_ManualConstructTrue_ManualConstructTrue_cmd\" (#25193)"},{"Id":"456704596","IsPullRequest":false,"CreatedAt":"2019-06-17T01:20:12","Actor":"VincentBu","Number":"25191","RawContent":null,"Title":"[x64] System.InvalidOperationException : Cannot process request because the process has exited.","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-corefx-jitstress2-jitstressregs/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcorefx~2F/20190615.1/workItem/System.Diagnostics.Process.Tests/analysis/xunit/System.Diagnostics.Tests.ProcessTests~2FTestProcessorAffinity\r\n\r\n**Failed tests:**\r\n System.Diagnostics.Tests.ProcessTests/TestProcessorAffinity \r\n\r\n**Log:**\r\n```\r\nSystem.InvalidOperationException : Cannot process request because the process (10611) has exited.\r\n   at System.Diagnostics.Process.ThrowIfExited(Boolean refresh) in /_/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 343\r\n   at System.Diagnostics.Process.EnsureState(State state) in /_/src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs:line 940\r\n   at System.Diagnostics.Process.set_ProcessorAffinity(IntPtr value) in /_/src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs:line 536\r\n   at System.Diagnostics.Tests.ProcessTests.TestProcessorAffinity() in /_/src/System.Diagnostics.Process/tests/ProcessTests.cs:line 865\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25191","RelatedDescription":"Open issue \"[x64] System.InvalidOperationException : Cannot process request because the process has exited.\" (#25191)"},{"Id":"456533833","IsPullRequest":true,"CreatedAt":"2019-06-17T00:18:31","Actor":"dotnet-maestro[bot]","Number":"25180","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190615.05\r\n- **Date Produced**: 6/16/2019 4:43 AM\r\n- **Commit**: f1c72ba8603d2b13484f37f62b5987564a48be12\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview7-27815-05\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25180","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#25180)"},{"Id":"456681911","IsPullRequest":false,"CreatedAt":"2019-06-16T21:03:48","Actor":"Suchiman","Number":"25190","RawContent":null,"Title":"Inconsistent/Incorrect float formatting","State":"open","Body":"Using following code\r\n```csharp\r\nvar SingleValue = 65747.125f;\r\nConsole.WriteLine(SingleValue.ToString(\"#,###.00\"));\r\nConsole.WriteLine(SingleValue.ToString());\r\n```\r\n\r\nOn [.NET Framework](https://sharplab.io/#v2:EYLgHgbALANALiATgVwHYB8ACAmAjAWACgicBmIgbyIAJbqdsa6rC63qA3AQ0WoGUAlqgDmAGwCmANS6jk46gF5qEAKwB2KGoB0ubCoBmAbibt6uAJwAKQSInTZ4rQBUA9nziIhwywCIAxDB+QVoADCE+AJQRxqymZlY2YlIycs5uHl6WUTFsAL5xRES5QA=), this results in\r\n```\r\n65,747.13\r\n65747.13\r\n```\r\nwhich doesn't roundtrip but rounds correctly.\r\n\r\nOn [.NET Core](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEUCuA7AHwAEAmARgFgAoa0gZmoG9qACNl0k195q9/lgDcAhlBYBlAJZ4A5gBsYANWFycMFgF4WSAKwB2FHoB0ZEjoBmAbm4COZAJwAKKbIXLVMIwBUI4jFGkZRwAiAGI0UMijAAZo4IBKeOs+WzsnF3klFTVvX39Ax0Tk/gBfVOpqEqA) this gives\r\n```\r\n65,747.10\r\n65747.125\r\n```\r\nwhich actually roundtrips the floating point number (:+1:), except when you specify a format string, then the result is completely off for some reason.\r\n\r\ncc @tannergooding ","Url":"https://github.com/dotnet/coreclr/issues/25190","RelatedDescription":"Open issue \"Inconsistent/Incorrect float formatting\" (#25190)"},{"Id":"456650669","IsPullRequest":false,"CreatedAt":"2019-06-16T15:03:21","Actor":"Korporal","Number":"25189","RawContent":null,"Title":"Question: Porting to new constrained hardware","State":"open","Body":"Apologies if this is not the ideal place for this question but I must start somewhere. Some years ago Microsoft created the .Net [Mico Framework](https://github.com/NETMF/netmf-interpreter) and did a rather good job.\r\n\r\nHowever a few years ago support and enthusiasm from Microsoft faded and the project has [languished](https://blogs.msdn.microsoft.com/netmfteam/) ever since all but abandoned so far as others are concerned.\r\n\r\nThis spurned a few others to initiate their own project like .Net [nano-Framework](https://github.com/nanoframework) and [Tiny CLR](https://www.ghielectronics.com/tinyclr/features) by GHI electronics, a noted expert in the area of electronics and microcontroller products.\r\n\r\nHowever neither of these seems ideal to me:\r\n\r\n1. Only one is fully open source.\r\n2. Neither offers any prospect of supporting generics.\r\n3. The overall architecture seems ad-hoc (and based on the initial simple architecture from MS)\r\n4. Both are based on an early and limited CLR from Microsoft.\r\n5. Architecture, core abstractions are out dated or in need of review.\r\n\r\nThe inability to use generics has a huge impact once one starts to seriously design non-trivial systems and libraries and will surely have a huge impact in how much C# can penetrate this area.\r\n\r\nOf course there's [Windows 10 IoT](https://software.intel.com/en-us/iot/tools-ide/windows-10) but this targets much more powerful systems, full computers with significant resources. Besides I've watched this for some time and it seems sluggish, some boards are just unavailable and so on.\r\n\r\nThe kinds of devices that the .Net Micro Framework, .Net nano-Framework and Tiny CLR target are termed \"resource constrained devices\" like these:\r\n\r\n1. [G400-D](https://www.ghielectronics.com/products/ucm/g400d) ([Atmel Arm](https://www.microchip.com/wwwproducts/en/AT91SAM9X35))\r\n2. [STM-32](https://www.st.com/en/evaluation-tools/32f769idiscovery.html) ([STM Arm](https://www.st.com/en/microcontrollers-microprocessors/stm32f769ni.html))\r\n\r\nBecause the kinds of constrained devices are not full computers, they don't lend themselves well to a Windows OS architecture (there is a limited OS, certainly not like Windows) so stuff like Windows Device Drivers have no real equivalent (devices are more fundamental and exposed to developers like DMA controllers, GPIO pins, DSP, UART etc it is with these and other abstractions that developers work with routinely).\r\n\r\nSure Windows supports these internally but these abstractions are buried in the OS and never available to developers or exposed much at all unless they're writing a device driver.\r\n\r\nThe above two projects are admirable and function to a degree, but overall wouldn't it be better to have a true generic attempt that's fully open source and ideally with some Microsoft backing or participation?\r\n\r\nFinally there is Windows [UWP](https://docs.microsoft.com/en-us/uwp/api/) but this needs generics and may itself not be granular enough with its abstractions for these kinds of devices. The .Net nano-Framework strives to follow this architecture but I do not think its a good fit.\r\n\r\nRight now I can get more done using C++ (On [Visual Studio](https://visualgdb.com/)) than C# and this is mainly because of the limited and somewhat outdated C# and CLR options out there.\r\n\r\nOf course I'd personally love to participate (I have [participated](https://github.com/nanoframework/Home/issues/453) to a degree in nano-Framework) but simply do not have the breadth of knowledge of CLR internals to attempt such a thing on my own. \r\n\r\nAlso I do think the architectural model needs a team effort, to summarize here's the key questions:\r\n\r\n**1. How big is the runtime and supporting libraries today.\r\n2. What options might there be for making certain features optional.\r\n3. How much effort would it take to port the CLR code here to some new device.\r\n4. Is there a detailed document that defines requirements for a port to run.**\r\n\r\nThe last question is asking what facilities and so on are required like primitives (locking, memory allocator other runtime stuff).\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/25189","RelatedDescription":"Open issue \"Question: Porting to new constrained hardware\" (#25189)"},{"Id":"456608630","IsPullRequest":true,"CreatedAt":"2019-06-16T06:39:29","Actor":"vandebm","Number":"25188","RawContent":null,"Title":"Follow-up on renaming suggestions in #24371","State":"open","Body":"Renamed parameter pInitRegZeroed to pInitRegModified as request for CodeGen relevant functions.\r\n\r\nEnhancement #24985 #24371","Url":"https://github.com/dotnet/coreclr/pull/25188","RelatedDescription":"Open PR \"Follow-up on renaming suggestions in #24371\" (#25188)"},{"Id":"456571612","IsPullRequest":true,"CreatedAt":"2019-06-16T04:20:46","Actor":"MichalStrehovsky","Number":"25184","RawContent":null,"Title":"Do not export GC entrypoints outside standalone build","State":"closed","Body":"It doesn't seem like something we would want to export outside standalone build.","Url":"https://github.com/dotnet/coreclr/pull/25184","RelatedDescription":"Closed or merged PR \"Do not export GC entrypoints outside standalone build\" (#25184)"},{"Id":"456573093","IsPullRequest":true,"CreatedAt":"2019-06-15T23:46:02","Actor":"sywhang","Number":"25186","RawContent":null,"Title":"Add active timer counter","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25186","RelatedDescription":"Closed or merged PR \"Add active timer counter\" (#25186)"},{"Id":"456544980","IsPullRequest":true,"CreatedAt":"2019-06-15T21:22:55","Actor":"wangzhaoguan","Number":"25183","RawContent":null,"Title":"目前ARM版本的runtime下都没有libsosplugin.so文件（包括3.0 preview），希望内置增加以便于在该环境上诊断问题","State":"closed","Body":"目前ARM版本的runtime下都没有libsosplugin.so文件（包括3.0 preview），希望内置增加以便于在该环境上诊断问题","Url":"https://github.com/dotnet/coreclr/pull/25183","RelatedDescription":"Closed or merged PR \"目前ARM版本的runtime下都没有libsosplugin.so文件（包括3.0 preview），希望内置增加以便于在该环境上诊断问题\" (#25183)"},{"Id":"456572047","IsPullRequest":true,"CreatedAt":"2019-06-15T20:14:25","Actor":"danmosemsft","Number":"25185","RawContent":null,"Title":"Exception format cleanup subset","State":"open","Body":"Subset of #25045 that seems reasonable to put into 3.0 as it's less likely to break output-parsing.\r\n\r\n1. Remove newline within AE message.\r\n2. Put newlines before each inner exception (this puts `---> somemessage` on their own lines)\r\n3. Stop duplicating one of the inner exceptoins in the AgE.ToString().\r\n\r\nDeferred:\r\n1. Indenting\r\n2. Removing `<---` and the various horizontal markers.\r\n\r\nTest program [original output ](https://gist.github.com/danmosemsft/ef14298ab1ee85a41b79684f7a2a94a6) and [new output](https://gist.github.com/danmosemsft/a501f2cec1348049a268629a320b86d9) (file/line numbers aren't resolving for some reason to do with Debug runtime build)","Url":"https://github.com/dotnet/coreclr/pull/25185","RelatedDescription":"Open PR \"Exception format cleanup subset\" (#25185)"},{"Id":"456543092","IsPullRequest":false,"CreatedAt":"2019-06-15T14:30:05","Actor":"Korporal","Number":"25182","RawContent":null,"Title":"Question: Should .Net remove dependency on the C runtime?","State":"open","Body":"This is just a question because I was [surprised to learn](https://github.com/dotnet/csharplang/issues/2585#issuecomment-500042937) that .Net does not implement it's own mathematical library. For example Math.Pow() relies on the C runtime which could behave differently on different platforms.\r\n\r\nThere are in fact two problems with this approach:\r\n\r\n1. Code could behave differently or compute different results on different platforms.\r\n2. The runtime used by the compiler (at compile time) is not guaranteed to be the same at runtime.\r\n\r\nEach of these strikes me as a risk, particularly in compute heavy applications like navigation, machine learning, IoT and so on.\r\n\r\nSo, do others agree? is it time that the C runtime was dumped and a solid implementation of that same code was created in C# and made part of the BCL? How much effort would this be? could the C runtime source code more or less be \"hand translated\" into C#?\r\n\r\nFor those interested I found an example of an implementation [source code here](http://www.netlib.org/fdlibm/).\r\n","Url":"https://github.com/dotnet/coreclr/issues/25182","RelatedDescription":"Open issue \"Question: Should .Net remove dependency on the C runtime?\" (#25182)"},{"Id":"456534416","IsPullRequest":true,"CreatedAt":"2019-06-15T12:45:38","Actor":"dotnet-maestro[bot]","Number":"25181","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:22ff0de4-1e59-4ef0-4dd8-08d6bc676830)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190616.1\r\n- **Date Produced**: 6/16/2019 11:18 AM\r\n- **Commit**: 0340f546c910a20e6bb029c5cfce6011d048d36a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190616.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190616.1\r\n\r\n[marker]: <> (End:22ff0de4-1e59-4ef0-4dd8-08d6bc676830)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25181","RelatedDescription":"Open PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#25181)"},{"Id":"456532547","IsPullRequest":true,"CreatedAt":"2019-06-15T12:20:40","Actor":"dotnet-maestro[bot]","Number":"25179","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190615.2\r\n- **Date Produced**: 6/15/2019 4:13 PM\r\n- **Commit**: aa4285be7fab64e2b6e62e4d5688ea50931c407c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19315.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19315.2\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25179","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#25179)"},{"Id":"456396657","IsPullRequest":true,"CreatedAt":"2019-06-15T05:32:23","Actor":"elinor-fung","Number":"25174","RawContent":null,"Title":"Fix duplicate imports in managed product build","State":"closed","Body":"Avoid duplicate imports in managed product build.\r\n\r\nSince we still have other BuildTools dependencies, a cleaner fix would require a bunch more finagling to split things up / move them about. Once we remove other BuildTools dependencies and are fully on Arcade, the nice fix should 'naturally' happen.\r\n\r\nFixes #24448","Url":"https://github.com/dotnet/coreclr/pull/25174","RelatedDescription":"Closed or merged PR \"Fix duplicate imports in managed product build\" (#25174)"},{"Id":"456490733","IsPullRequest":false,"CreatedAt":"2019-06-15T02:26:45","Actor":"noahfalk","Number":"25178","RawContent":null,"Title":"Lttng tracepoints enabled unnecessarily?","State":"open","Body":"@chrisnas sent some feedback:\r\n\r\nLast but not least, a little related bug:\r\nIf the CLR is compiled but there is no LTTng library, the genLttngProvider.py script will generate a stub for this method tracepoint_enabled:\r\n#define tracepoint_enabled(provider, name) TRUE\r\nAnd this function is used, in the end, by GCToEEInterface::UpdateGCEventStatus method. And as the value is TRUE, the GC events will be emitted anyway. Should we set it to FALSE instead?\r\n\r\n[Noah]: At first glance I agree that seems odd. We can take a look : )\r\n","Url":"https://github.com/dotnet/coreclr/issues/25178","RelatedDescription":"Open issue \"Lttng tracepoints enabled unnecessarily?\" (#25178)"},{"Id":"456489880","IsPullRequest":true,"CreatedAt":"2019-06-15T02:14:01","Actor":"andy-ms","Number":"25177","RawContent":null,"Title":"Replace 'assert' with '_ASSERTE'","State":"open","Body":"Fix https://github.com/dotnet/coreclr/pull/24777#issuecomment-501917277","Url":"https://github.com/dotnet/coreclr/pull/25177","RelatedDescription":"Open PR \"Replace 'assert' with '_ASSERTE'\" (#25177)"},{"Id":"456456270","IsPullRequest":true,"CreatedAt":"2019-06-15T01:12:53","Actor":"marek-safar","Number":"25176","RawContent":null,"Title":"Move parts of RuntimeType to shared partition","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25176","RelatedDescription":"Closed or merged PR \"Move parts of RuntimeType to shared partition\" (#25176)"},{"Id":"456440594","IsPullRequest":false,"CreatedAt":"2019-06-14T21:08:32","Actor":"msedi","Number":"25175","RawContent":null,"Title":"Array.GetValue has slowed down in .NET Core 3.0","State":"open","Body":"C# generic support for arrays is not very good. In my case I did a few benchmarks since I have to deal with a lot of different and large array types. I often need to cast from one type into another. Therefore I have was thinking of creating an ArrayView wrapper, that delegates the cast to the indexer, so that anytime I access the indexer, the cast is executed. You might think this is nonsense, but I have many cases where the data is stored as byte|uint|int|... but some algorithms only work with arrays. In most cases the data is around 512x512x1000 elements large. So my approach was like this:\r\n\r\n```\r\n  public class ArrayView<Tin, Tout> where Tin : struct where Tout : struct\r\n    {\r\n        private Tin[] array;\r\n\r\n        public ArrayView(Tin[] array_in)\r\n        {\r\n            array = array_in;\r\n        }\r\n\r\n        public Tout this[int index] => (Tout)array[index];\r\n\r\n        public Tout this[int index]\r\n        {\r\n            get\r\n            {\r\n                switch (Type.GetTypeCode(typeof(Tin)))\r\n                {\r\n                    case TypeCode.Byte: return (Tout)array[index];\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nBut this one doesn't work. `Span<T>` also do not have some sort of `static_cast<>` which I can use. What I tried then, was to benchmark a regular array index access vs. Array.GetValue() and I thought Array.GetValue is recognized by the CLR and optimized well, but when I compare my benchmark this looks horrible. Is there an explanation for this and some sort of solution for the example above?\r\n\r\n```\r\n public class ArrayGet\r\n    {\r\n        public int[] ArraySource1;\r\n        public Array ArraySource2;\r\n        public int N = 1000;\r\n\r\n        [GlobalSetup]\r\n        public void Setup()\r\n        {\r\n            ArraySource1 = new int[N];\r\n            for (int i = 0; i < N; i++) ArraySource1[i] = i;\r\n\r\n            ArraySource2 = ArraySource1;\r\n        }\r\n\r\n        [Benchmark]\r\n        public void SumClassic()\r\n        {\r\n            int sum = 0;\r\n\r\n            for (int i = 0; i < N; i++)\r\n                sum += ArraySource1[i];\r\n        }\r\n\r\n        [Benchmark]\r\n        public void SumArrayGetValue()\r\n        {\r\n            int sum = 0;\r\n\r\n            for (int i = 0; i < N; i++)\r\n                sum += (int)ArraySource2.GetValue(i);\r\n        }\r\n    }\r\n```\r\n\r\n```\r\n|           Method | Runtime |     Toolchain |        Mean |        Error |       StdDev | Ratio | RatioSD |\r\n|----------------- |-------- |-------------- |------------:|-------------:|-------------:|------:|--------:|\r\n|       SumClassic |     Clr |        net472 |          NA |           NA |           NA |     ? |       ? |\r\n|       SumClassic |    Core | netcoreapp2.2 |    707.1 ns |     1.793 ns |     1.497 ns |  1.00 |    0.00 |\r\n|       SumClassic |    Core | netcoreapp3.0 |    732.1 ns |     4.750 ns |     4.211 ns |  1.04 |    0.01 |\r\n|                  |         |               |             |              |              |       |         |\r\n| SumArrayGetValue |     Clr |        net472 |          NA |           NA |           NA |     ? |       ? |\r\n| SumArrayGetValue |    Core | netcoreapp2.2 | 76,886.0 ns | 1,467.282 ns | 1,372.496 ns |  1.00 |    0.00 |\r\n| SumArrayGetValue |    Core | netcoreapp3.0 | 79,786.7 ns | 1,128.441 ns | 1,055.544 ns |  1.04 |    0.02 |\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25175","RelatedDescription":"Open issue \"Array.GetValue has slowed down in .NET Core 3.0\" (#25175)"},{"Id":"456338160","IsPullRequest":true,"CreatedAt":"2019-06-14T18:45:46","Actor":"jashook","Number":"25171","RawContent":null,"Title":"Add a build option to skip building managed tools","State":"closed","Body":"This specifically will set __BuildManagedTools=0 and skip building R2RDump and runincontext.\r\n\r\n/cc @janvorli ","Url":"https://github.com/dotnet/coreclr/pull/25171","RelatedDescription":"Closed or merged PR \"Add a build option to skip building managed tools\" (#25171)"},{"Id":"456232893","IsPullRequest":true,"CreatedAt":"2019-06-14T18:12:10","Actor":"dotnet-maestro[bot]","Number":"25170","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:22ff0de4-1e59-4ef0-4dd8-08d6bc676830)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190614.1\r\n- **Date Produced**: 6/14/2019 11:22 AM\r\n- **Commit**: 43663b1bcc34d617b6b6cef82e2bdf1de85b3fa6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190614.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190614.1\r\n\r\n[marker]: <> (End:22ff0de4-1e59-4ef0-4dd8-08d6bc676830)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25170","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#25170)"},{"Id":"456358710","IsPullRequest":true,"CreatedAt":"2019-06-14T17:33:44","Actor":"sywhang","Number":"25173","RawContent":null,"Title":"make DiagnosticCounter and its children lock 'this' instead of String","State":"open","Body":"Fix #25157 ","Url":"https://github.com/dotnet/coreclr/pull/25173","RelatedDescription":"Open PR \"make DiagnosticCounter and its children lock 'this' instead of String\" (#25173)"},{"Id":"456345037","IsPullRequest":true,"CreatedAt":"2019-06-14T16:55:21","Actor":"benaadams","Number":"25172","RawContent":null,"Title":"Memmove: Use Vector types rather than Custom blocks","State":"open","Body":"With \"Allow pregenerating most HW intrinsics in CoreLib\" https://github.com/dotnet/coreclr/pull/24917, we can use the `Vector128` and `Vector256` types and `IsSupported` check and still have the methods R2R AoT compiled for fast start; using 128-bit copies.\r\n\r\nWhen the methods are re-compiled at Tier-1 they then upgrade to 256-bit copies.\r\n\r\nThis allows the best of both worlds.\r\n\r\n/cc @jkotas @GrabYourPitchforks @tannergooding @MichalStrehovsky\r\n\r\nNotes:\r\n\r\nDoubled the length for managed copy *after* the upgrade when the register size doubles.\r\n\r\nThe R2R version is *almost* identical; however some `lea`s creap in (I think @mikedn has a fix for this)\r\n```asm\r\nG_M6842_IG11:\r\n       movdqu   xmm0, qword ptr [rdx]\r\n       movdqu   qword ptr [rcx], xmm0\r\n       movdqu   xmm0, qword ptr [rdx+16]\r\n       movdqu   qword ptr [rcx+16], xmm0\r\n       movdqu   xmm0, qword ptr [rdx+32]\r\n       movdqu   qword ptr [rcx+32], xmm0\r\n       movdqu   xmm0, qword ptr [rdx+48]\r\n       movdqu   qword ptr [rcx+48], xmm0\r\n       add      rcx, 64\r\n       add      rdx, 64\r\n```\r\nbecomes\r\n```asm\r\nG_M6856_IG11:\r\n       mov      r11, rcx\r\n       movdqu   xmm0, qword ptr [rdx]\r\n       movdqu   qword ptr [r11], xmm0\r\n       movdqu   xmm0, qword ptr [rdx+16]\r\n       movdqu   qword ptr [r11+16], xmm0\r\n       lea      r11, [rcx+32]\r\n       lea      rsi, [rdx+32]\r\n       movdqu   xmm0, qword ptr [rsi]\r\n       movdqu   qword ptr [r11], xmm0\r\n       movdqu   xmm0, qword ptr [rsi+16]\r\n       movdqu   qword ptr [r11+16], xmm0\r\n       add      rcx, 64\r\n       add      rdx, 64\r\n```\r\nThe Tier-1 likewise\r\n```asm\r\n       vmovupd  ymm0, ymmword ptr[rdx]\r\n       vmovupd  ymmword ptr[rcx], ymm0\r\n       lea      r11, bword ptr [rcx+32]\r\n       lea      rsi, bword ptr [rdx+32]\r\n       vmovupd  ymm0, ymmword ptr[rsi]\r\n       vmovupd  ymmword ptr[r11], ymm0\r\n       add      rcx, 64\r\n       add      rdx, 64\r\n```","Url":"https://github.com/dotnet/coreclr/pull/25172","RelatedDescription":"Open PR \"Memmove: Use Vector types rather than Custom blocks\" (#25172)"},{"Id":"456227845","IsPullRequest":true,"CreatedAt":"2019-06-14T16:31:56","Actor":"dotnet-maestro[bot]","Number":"25169","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190613.08\r\n- **Date Produced**: 6/13/2019 9:26 PM\r\n- **Commit**: 2a663574a47d8ac25b9b959e5a9f9fa67fc97ecc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview7-27813-08\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25169","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#25169)"},{"Id":"456220423","IsPullRequest":true,"CreatedAt":"2019-06-14T16:29:35","Actor":"dotnet-maestro[bot]","Number":"25168","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190613.18\r\n- **Date Produced**: 6/13/2019 11:28 PM\r\n- **Commit**: 8952b877fa6bca387cd4321b33dcdf6778e31240\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19313.18\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19313.18\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19313.18\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19313.18\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25168","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#25168)"},{"Id":"456203925","IsPullRequest":false,"CreatedAt":"2019-06-14T11:41:07","Actor":"chrishaly","Number":"25167","RawContent":null,"Title":"Exception try catch performance 10 times low than java","State":"open","Body":"A compare test did, result says: performance of try catch throw Exception in .Net is over 10 times slow than in Java.\r\n\r\nReproduce:\r\n\r\nC# code\r\n``` csharp\r\n    class ExceptionPerformanceTest\r\n    {\r\n        public void Test()\r\n        {\r\n            var stopwatch = Stopwatch.StartNew();\r\n            ExceptionTest(100_000);\r\n            stopwatch.Stop();\r\n            Console.WriteLine(stopwatch.ElapsedMilliseconds);\r\n        }\r\n\r\n        private void ExceptionTest(long times)\r\n        {\r\n            for (int i = 0; i < times; i++)\r\n            {\r\n                try\r\n                {\r\n                    throw new Exception();\r\n                }\r\n                catch (Exception ex)\r\n                {\r\n                    //Ignore\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nJava Code\r\n```java\r\npublic class ExceptionPerformanceTest {\r\n\r\n    public void Test() {\r\n        Instant start = Instant.now();\r\n        ExceptionTest(100_000);\r\n        Instant end = Instant.now();\r\n        Duration duration = Duration.between(start, end);\r\n        System.out.println(duration.toMillis());\r\n\r\n    }\r\n\r\n    private void ExceptionTest(long times) {\r\n        for (int i = 0; i < times; i++) {\r\n            try {\r\n                throw new Exception();\r\n            } catch (Exception ex) {\r\n                //Ignore\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nTest Result:\r\n\r\n> .Net: 2151ms\r\n>Java: 175ms\r\n\r\n2151/175=12.29\r\n\r\nsource code at https://github.com/chrishaly/DotNetVsJavaPerformanceTest","Url":"https://github.com/dotnet/coreclr/issues/25167","RelatedDescription":"Open issue \"Exception try catch performance 10 times low than java\" (#25167)"},{"Id":"456094317","IsPullRequest":false,"CreatedAt":"2019-06-14T11:15:35","Actor":"Cronan","Number":"25165","RawContent":null,"Title":"Corporate proxy problem with docker debug build","State":"closed","Body":"Hi, I'm trying to build a debug version of dotnet core on centos 7 using docker:\r\n\r\n```sh\r\nsudo docker run --rm -v /home/dotnet-bot/coreclr:/coreclr -w /coreclr mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-d485f41-20173404063424 ./build.sh\r\n\r\nStarting with UID : 108090\r\nCommencing CoreCLR Repo build\r\n__DistroRid: linux-x64\r\n__RuntimeId: linux-x64\r\nSetting up directories for build\r\nChecking prerequisites...\r\nInstalling dotnet using Arcade...\r\nLaying out dynamically generated EventSource classes\r\nAdding CMake flags to build native tests for Linux.x64.Debug\r\nCommencing build of CoreCLR component for Linux.x64.Debug in /coreclr/bin/obj/Linux.x64.Debug\r\n/coreclr\r\n/coreclr/.dotnet/sdk/3.0.100-preview6-011681/NuGet.targets(121,5): error : Unable to load the service index for source https://api.nuget.org/v3/index.json. [/coreclr/eng/empty.csproj]\r\n/coreclr/.dotnet/sdk/3.0.100-preview6-011681/NuGet.targets(121,5): error :   The HTTP request to 'GET https://api.nuget.org/v3/index.json' has timed out after 100000ms. [/coreclr/eng/empty.csproj]\r\n\r\nBuild FAILED.\r\n\r\n/coreclr/.dotnet/sdk/3.0.100-preview6-011681/NuGet.targets(121,5): error : Unable to load the service index for source https://api.nuget.org/v3/index.json. [/coreclr/eng/empty.csproj]\r\n/coreclr/.dotnet/sdk/3.0.100-preview6-011681/NuGet.targets(121,5): error :   The HTTP request to 'GET https://api.nuget.org/v3/index.json' has timed out after 100000ms. [/coreclr/eng/empty.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:05:02.61\r\nBuild failed (exit code '1').\r\nFailed to generate native version file.\r\n\r\n```\r\n\r\nMy problem is that I'm doing this in a corporate environment where nuget.org is not permitted via the proxy.\r\nWe have an inhouse jfrog artifactory instance that I can usually point at by editing the NuGet.config files.\r\nAnd it fwds on requests to api.nuget.org.\r\nI can't get this to work in the docker build - not sure what the workaround is ...\r\n\r\n```sh\r\n\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25165","RelatedDescription":"Closed issue \"Corporate proxy problem with docker debug build\" (#25165)"},{"Id":"456182292","IsPullRequest":false,"CreatedAt":"2019-06-14T10:43:49","Actor":"PiotrSpikowski","Number":"25166","RawContent":null,"Title":"Stack Smashing Failures (SIGSEGV) instead of NullReferenceExceptions","State":"open","Body":"I don’t know if it’s related to #16276 but it’s possible to end up in the stack smashing detected failure instead of `NullReferenceException`\r\n\r\nWe are trying to consume some native libraries e.g. the IBM MQ Client. As far as I can tell the IBM MQ sets up its own signal handlers. By doing this it saves any previously registered handler for each signal. The library handles one of the signals and then attempts to call the original handler that was in effect previously.\r\n\r\nIf we only allow the library to register its own signal handlers (SIGSEGV) we end up in the `stack smashing detected` errors instead of getting `NullReferenceException`s. So the following code  crashes the entire app (e.g. on 2.2 and 3 preview):\r\n\r\n```csharp\r\nobject obj = null;\r\nobj.ToString();\r\n```\r\n\r\nI understand that we are loading and using native libraries. I also understand that Core uses signals on certain platforms in order to handle NullReferenceExceptions. I however wonder what’s the expected behaviour here and what is allowed?\r\n\r\nThe C# spec says that when a value of X is null, then a `System.NullReferenceException` is thrown. Is this guarantee broken here? In our case a native library seems to be indirectly involved which: \r\n* first is not obvious for.NET developers\r\n* secondly is not well documented\r\n\r\nIf the above signal interaction cannot be changed then maybe it’s worth documenting it e.g. in the .NET native interoperability guidelines.\r\n\r\nI guess it’s not possible to force .NET not to use signals and do explicit null checks (it might not be performance wise anyway). I recall something like this for mono set via the MONO_DEBUG (but as the name speaks it is also for debug and not release versions)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/25166","RelatedDescription":"Open issue \"Stack Smashing Failures (SIGSEGV) instead of NullReferenceExceptions\" (#25166)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"456689630","IsPullRequest":true,"CreatedAt":"2019-06-16T22:39:41","Actor":"wli3","Number":"11571","RawContent":null,"Title":"ToolManifestEditor catches FormatException","State":"open","Body":"Fix https://github.com/dotnet/cli/issues/11482\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11571","RelatedDescription":"Open PR \"ToolManifestEditor catches FormatException\" (#11571)"},{"Id":"456634619","IsPullRequest":true,"CreatedAt":"2019-06-16T12:45:27","Actor":"dotnet-maestro[bot]","Number":"11570","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190615.1\r\n- **Date Produced**: 6/15/2019 12:48 PM\r\n- **Commit**: c561d7deb8e1a7ff7a73d0fd5abec8556dae922b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19315.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11570","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11570)"},{"Id":"456531818","IsPullRequest":true,"CreatedAt":"2019-06-15T12:46:30","Actor":"dotnet-maestro[bot]","Number":"11569","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190614.1\r\n- **Date Produced**: 6/14/2019 12:48 PM\r\n- **Commit**: 15694b8f9d762edfe94551c45cb5a3d9b73ca3f6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19314.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11569","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11569)"},{"Id":"456531309","IsPullRequest":true,"CreatedAt":"2019-06-15T12:35:50","Actor":"dotnet-maestro[bot]","Number":"11568","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190614.1\r\n- **Date Produced**: 6/15/2019 12:47 AM\r\n- **Commit**: 1157aa7da48528f15a090fe49a0259e10b5a2163\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview7.19314.1\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11568","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11568)"},{"Id":"456531276","IsPullRequest":true,"CreatedAt":"2019-06-15T12:05:12","Actor":"dotnet-maestro[bot]","Number":"11567","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190615.2\r\n- **Date Produced**: 6/15/2019 4:13 PM\r\n- **Commit**: aa4285be7fab64e2b6e62e4d5688ea50931c407c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19315.2\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11567","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#11567)"},{"Id":"456517057","IsPullRequest":false,"CreatedAt":"2019-06-15T09:03:06","Actor":"mallikarjunpatala","Number":"11566","RawContent":null,"Title":"Cannot find project info.... This can indicate a missing project reference , C:\\Program Files\\dotnet\\sdk\\2.1.505\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets","State":"open","Body":"## Steps to reproduce\r\nOne PCL class is referencing another PCL classs\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11566","RelatedDescription":"Open issue \"Cannot find project info.... This can indicate a missing project reference , C:\\Program Files\\dotnet\\sdk\\2.1.505\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets\" (#11566)"},{"Id":"456458650","IsPullRequest":true,"CreatedAt":"2019-06-14T22:16:05","Actor":"dotnet-bot","Number":"11565","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11565","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11565)"},{"Id":"456360063","IsPullRequest":true,"CreatedAt":"2019-06-14T18:46:09","Actor":"peterhuene","Number":"11561","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.1.7xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11561","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.1.7xx\" (#11561)"},{"Id":"456378466","IsPullRequest":false,"CreatedAt":"2019-06-14T18:27:08","Actor":"peterhuene","Number":"11564","RawContent":null,"Title":"'Dotnet.exe publish' silently creates bad format for mis-matching architectures","State":"open","Body":"@jjxtra commented on [Thu Jun 13 2019](https://github.com/dotnet/core/issues/2869)\n\nWhen using `dotnet.exe publish` for specific runtimes, say win-x86, if using the 64 bit dotnet.exe, this runs without error, but when running the result executable, a `BadImageFormatException `is thrown. Same with target win-x64 from 32 bit dotnet.exe\r\n\r\nIt should be an error to create a runtime with the wrong 32 bit or 64 bit dotnet.exe, there should be an exception clearly stating that you need to run the dotnet.exe with the same architecture as the runtime you are targetting.\r\n\r\nAfter two days of pain, I finally realized I had to fully qualify the path to dotnet.exe as I had both 32 bit and 64 bit sdk installed. So now for my 32 bit runtime targets, I use the 32 bit dotnet.exe, for the 64 bit targets, the 64 bit dotnet.exe. All run fine without errors.\r\n\r\nPlease add this as an error condition and save many, many people a lot of pain, headaches and frustration.\r\n\r\nExample that fixes the problem in powershell:\r\n\r\n```powershell\r\n& \"c:/program files/dotnet/dotnet.exe\" publish Project.csproj -f netcoreapp2.2 -o package/linux-x64 -c Release -r linux-x64\r\n& \"c:/program files (x86)/dotnet/dotnet.exe\" publish Project.csproj -f netcoreapp2.2 -o package/win-x86 -c Release -r win-x86\r\n```\n\n---\n\n@karelz commented on [Fri Jun 14 2019](https://github.com/dotnet/core/issues/2869#issuecomment-502213331)\n\n@livarcocc @nguerrera does it belong to CLI or core-setup?\n\n---\n\n@livarcocc commented on [Fri Jun 14 2019](https://github.com/dotnet/core/issues/2869#issuecomment-502213616)\n\nCLI would be a good starting point. We can move it to core-setup if the issue was in the production of the apphost.\r\n\r\ncc @peterhuene \n\n","Url":"https://github.com/dotnet/cli/issues/11564","RelatedDescription":"Open issue \"'Dotnet.exe publish' silently creates bad format for mis-matching architectures\" (#11564)"},{"Id":"456372012","IsPullRequest":true,"CreatedAt":"2019-06-14T18:09:40","Actor":"livarcocc","Number":"11563","RawContent":null,"Title":"Update SDK to 2.2.400-preview-64213-02","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/11563","RelatedDescription":"Open PR \"Update SDK to 2.2.400-preview-64213-02\" (#11563)"},{"Id":"456371598","IsPullRequest":true,"CreatedAt":"2019-06-14T18:08:36","Actor":"livarcocc","Number":"11562","RawContent":null,"Title":"Updating SDK to 2.1.800-preview-64213-01","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/11562","RelatedDescription":"Open PR \"Updating SDK to 2.1.800-preview-64213-01\" (#11562)"},{"Id":"456071070","IsPullRequest":true,"CreatedAt":"2019-06-14T17:32:08","Actor":"peterhuene","Number":"11554","RawContent":null,"Title":"Merge release/2.2.2xx to release/2.2.3xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11554","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/2.2.3xx\" (#11554)"},{"Id":"456212804","IsPullRequest":true,"CreatedAt":"2019-06-14T17:31:16","Actor":"dotnet-bot","Number":"11555","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11555","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#11555)"},{"Id":"456059087","IsPullRequest":true,"CreatedAt":"2019-06-14T17:31:14","Actor":"peterhuene","Number":"11553","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11553","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#11553)"},{"Id":"456213334","IsPullRequest":true,"CreatedAt":"2019-06-14T17:30:48","Actor":"dotnet-maestro[bot]","Number":"11557","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190613.18\r\n- **Date Produced**: 6/13/2019 11:28 PM\r\n- **Commit**: 8952b877fa6bca387cd4321b33dcdf6778e31240\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19313.18\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11557","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11557)"},{"Id":"456296262","IsPullRequest":false,"CreatedAt":"2019-06-14T15:05:50","Actor":"enricoreich","Number":"11560","RawContent":null,"Title":"Unable to restore packages on Ubuntu 18.04 (3.0 preview7)","State":"open","Body":"Hello,\r\n\r\nI'm trying to get the latest 3.0 preview7 working on my Ubuntu 18.04 remote server using the latest tar.gz from [core-sdk](https://github.com/dotnet/core-sdk) for Linux x64.\r\nThe dotnet command is working but if I try to install new templates eg. for blazor, the restore process fires up but then -> nothing. The process stays in my process list:\r\n\r\n![Screenshot_1](https://user-images.githubusercontent.com/316637/59516876-940a1880-8ec2-11e9-968e-b2e1a6146f65.png)\r\n\r\nAfter running the command, that's all that happens:\r\n![boring](https://user-images.githubusercontent.com/316637/59518633-4d1e2200-8ec6-11e9-80b4-7535689a3f57.gif)\r\n\r\nI also tried `dotnet restore` with a newly created AspNetCoreApp project but the result is the same. \r\n\r\nAny ideas? Do I miss something here?\r\nThanks in advance!\r\n\r\n## Steps to reproduce\r\n1. Download latest preview7 tar.gz from [core-sdk](https://github.com/dotnet/core-sdk) for Linux x64\r\n2. unpack with `tar zxvf dotnet-sdk-latest-linux-x64.tar.gz -C ./dotnet3` (create destination folder befor extracting)\r\n3. setup environment variables `export DOTNET_ROOT=$HOME/dotnet3` & `export PATH=$PATH:$HOME/dotnet3`, I'm using zsh so they goes into my .zshrc (or .zprofile)\r\n4. reopen shell\r\n5. run `dotnet new -i \"Microsoft.AspNetCore.Blazor.Templates::3.0.0-preview7.*\"`\r\n6. restore process hangs with no output or any message\r\n\r\nAlso with preview6 bits as root or user, does not make any difference.\r\nIt works on Windows 10 and WSL (Ubuntu 18.04) perfectly!\r\n\r\n## Expected  behavior\r\nThe command should restore necessary files from Nuget and install new templates so they can be used with `dotnet new`\r\n\r\n## Actual behavior\r\nRestore process hangs with no output or any message.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview7-012398\r\n Commit:    028dd7635a\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /home/---/dotnet3/sdk/3.0.100-preview7-012398/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview7-27813-06\r\n  Commit:  5cfc2cab25\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview7-012398 [/home/---/dotnet3/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview7.19311.5 [/home/---/dotnet3/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview7-27813-06 [/home/---/dotnet3/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/11560","RelatedDescription":"Open issue \"Unable to restore packages on Ubuntu 18.04 (3.0 preview7)\" (#11560)"},{"Id":"456216241","IsPullRequest":true,"CreatedAt":"2019-06-14T12:53:25","Actor":"dotnet-maestro[bot]","Number":"11559","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190613.1\r\n- **Date Produced**: 6/13/2019 12:55 PM\r\n- **Commit**: 4f65a5662b1ce832c946f4120744b4da46f20d39\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19313.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11559","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11559)"},{"Id":"456213496","IsPullRequest":true,"CreatedAt":"2019-06-14T12:41:29","Actor":"dotnet-maestro[bot]","Number":"11558","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190613.3\r\n- **Date Produced**: 6/14/2019 1:49 AM\r\n- **Commit**: cb8c89e71323d667cac97fcbe6ad6cf95a11068a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview7.19313.3\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11558","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11558)"},{"Id":"456212847","IsPullRequest":true,"CreatedAt":"2019-06-14T12:04:22","Actor":"dotnet-bot","Number":"11556","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11556","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#11556)"},{"Id":"455905844","IsPullRequest":false,"CreatedAt":"2019-06-14T04:43:09","Actor":"jimbobbennett","Number":"11549","RawContent":null,"Title":"dotnet tool install fails with a local source if offline","State":"closed","Body":"## Steps to reproduce\r\n\r\nBe offline\r\nInstall a tool using a local package with the --add-sources flag\r\n\r\n\r\n## Expected  behavior\r\n\r\nThe CLI should check all sources for the tool and install it if it is found in any path, and ignore being offline unless no package is found. It should look in the add-sources path first and install from there, not caring that the nuget.org source is offline.\r\n\r\n## Actual behavior\r\n\r\nIf the add-sources flag is used it is a good indicator that that source is the one the user intends to use - and indeed this appears to be the case as the tool is installed from the add-sources path instead of nuget.org. The problem comes in that the install checks for it in the online packages as well, and when this fails due to being offline you get an error.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.503\r\n Commit:    4c506e0f35\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.503\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27626-15\r\n  Commit:  61f30f5a23\r\n\r\n.NET Core SDKs installed:\r\n  2.1.400-preview-009063 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009335 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009398 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009404 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700-preview-009597 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800-preview-009677 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.105 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview5-011568 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11549","RelatedDescription":"Closed issue \"dotnet tool install fails with a local source if offline\" (#11549)"},{"Id":"456025108","IsPullRequest":true,"CreatedAt":"2019-06-14T04:03:08","Actor":"jkotalik","Number":"11550","RawContent":null,"Title":"Add Dev cert as a real dependency","State":"closed","Body":"Fixes a dependency on the ASP.NET Core https dev cert. We made two changes to it recently, which haven't been picked up by dotnet first-time experience.\r\n\r\ncc @anurse ","Url":"https://github.com/dotnet/cli/pull/11550","RelatedDescription":"Closed or merged PR \"Add Dev cert as a real dependency\" (#11550)"},{"Id":"456030825","IsPullRequest":true,"CreatedAt":"2019-06-14T04:02:26","Actor":"dagood","Number":"11552","RawContent":null,"Title":"[release/2.2.1xx] Fix consolidated dotnet-runtime-deps Deb download","State":"closed","Body":"See https://github.com/dotnet/cli/pull/11551","Url":"https://github.com/dotnet/cli/pull/11552","RelatedDescription":"Closed or merged PR \"[release/2.2.1xx] Fix consolidated dotnet-runtime-deps Deb download\" (#11552)"},{"Id":"456030703","IsPullRequest":true,"CreatedAt":"2019-06-14T04:02:14","Actor":"dagood","Number":"11551","RawContent":null,"Title":"[release/2.1.5xx] Fix consolidated dotnet-runtime-deps Deb download","State":"closed","Body":"Account for consolidation of the dotnet-runtime-deps Debian package into a single package that applies to all Debian-based distros: https://github.com/dotnet/core-setup/issues/5812.\r\n\r\nThis fixes a build break where 404s were encountered while trying to download distro-specific packages.","Url":"https://github.com/dotnet/cli/pull/11551","RelatedDescription":"Closed or merged PR \"[release/2.1.5xx] Fix consolidated dotnet-runtime-deps Deb download\" (#11551)"},{"Id":"455702415","IsPullRequest":true,"CreatedAt":"2019-06-14T02:16:35","Actor":"dotnet-maestro[bot]","Number":"11546","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190612.21\r\n- **Date Produced**: 6/13/2019 7:23 AM\r\n- **Commit**: e5cd71926eaa13aba3138c14cd80def0ccfebb30\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19312.21\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11546","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11546)"},{"Id":"455702600","IsPullRequest":true,"CreatedAt":"2019-06-14T02:13:09","Actor":"dotnet-maestro[bot]","Number":"11547","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190612.1\r\n- **Date Produced**: 6/12/2019 9:58 PM\r\n- **Commit**: fce5096afdec48b54dfd504f2a897933beb640d6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview7.19312.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11547","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11547)"},{"Id":"455705290","IsPullRequest":true,"CreatedAt":"2019-06-13T18:38:37","Actor":"dotnet-maestro[bot]","Number":"11548","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190612.1\r\n- **Date Produced**: 6/12/2019 12:49 PM\r\n- **Commit**: 757a60649f8a929f11b178301e2cbf2c6dc82c46\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19312.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11548","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11548)"},{"Id":"455531480","IsPullRequest":false,"CreatedAt":"2019-06-13T16:53:55","Actor":"leecow","Number":"11543","RawContent":null,"Title":"PublishSingleFile with RuntimeIdentifiers fail to publish","State":"closed","Body":"@johnlarfour commented on [Tue Jun 11 2019](https://github.com/dotnet/core/issues/2851)\n\n`linux/amd64 dotnet 3.0.100-preview5-011568`\r\n\r\nStep to reproduce:\r\n```\r\ndotnet new console -o app\r\n```\r\nReplace csproj with:\r\n```\r\n﻿<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <RuntimeIdentifiers>linux-x64;win-x86;osx-x64</RuntimeIdentifiers>\r\n    <PublishSingleFile>true</PublishSingleFile>\r\n  </PropertyGroup> \r\n</Project>\r\n```\r\n```\r\ncd app\r\ndotnet publish\r\n```\r\n\r\nError:\r\n```\r\n/home/john/dotnet/sdk/3.0.100-preview5-011568/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(133,5): error NETSDK1097: It is not supported to publish an application to a single-file without specifying a RuntimeIdentifier. Please either specify a RuntimeIdentifier or set PublishSingleFile to false. [/home/john/Desktop/app/app.csproj]\r\n\r\n```\r\n\r\n\n\n","Url":"https://github.com/dotnet/cli/issues/11543","RelatedDescription":"Closed issue \"PublishSingleFile with RuntimeIdentifiers fail to publish\" (#11543)"},{"Id":"455644966","IsPullRequest":false,"CreatedAt":"2019-06-13T16:51:22","Actor":"YunWeiaa","Number":"11545","RawContent":null,"Title":"Install global tool failed with System.TypeLoadException: Could not load type 'System.Text.Json.Serialization.JsonSerializer' from assembly 'System.Text.Json","State":"closed","Body":"## Steps to reproduce\r\nRequire: machine also install netcoreapp2.1 runtime since \"dotnetsay\" is targeting 2.1. This should not be required when netcoreapp3.0 is released and dotnetsay is updated\r\n1. Create empty directory\r\n2. not yet implemented Run dotnet new tool-manifest\r\na. In the meantime copy the following and create file called dotnet-tools.json\r\n \r\n{\r\n\"version\": 1,\r\n\"isRoot\": true,\r\n\"tools\": {}\r\n}\r\n\r\n3. cd to the directory with manifest file\r\n4. run dotnet tool install dotnetsay\r\n\r\n## Expected  behavior\r\nRun dotnet tool install dotnetsay succeeded.\r\n\r\n## Actual behavior\r\nRun failed with System.TypeLoadException: Could not load type 'System.Text.Json.Serialization.JsonSerializer' from assembly 'System.Text.Json, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n```\r\n   at Microsoft.DotNet.ToolPackage.LocalToolsResolverCache.Save(IDictionary`2 restoredCommandMap)\r\n   at Microsoft.DotNet.Tools.Tool.Install.LocalToolsResolverCacheExtensions.SaveToolPackage(ILocalToolsResolverCache localToolsResolverCache, IToolPackage toolDownloadedPackage, String targetFrameworkToInstall)\r\n   at Microsoft.DotNet.Tools.Tool.Install.ToolInstallLocalCommand.Install(FilePath manifestFile)\r\n   at Microsoft.DotNet.Tools.Tool.Install.ToolInstallLocalCommand.Execute()\r\n   at Microsoft.DotNet.Tools.Tool.Install.ToolInstallCommand.Execute()\r\n   at Microsoft.DotNet.Cli.DotNetTopLevelCommandBase.RunCommand(String[] args)\r\n   at Microsoft.DotNet.Tools.Tool.ToolCommand.Run(String[] args)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n```\r\n`![image](https://user-images.githubusercontent.com/33921754/59422747-74f88180-8e03-11e9-9328-00b4f116c905.png)\r\n\r\n\r\n## Environment data\r\nD16.2/29011.391(16.2.0 preview3.0) + CLI/SDK:  3.0.100-preview7-012386\r\n\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview7-012386\r\n Commit:    23f19c91df\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012386\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview7-27812-08\r\n  Commit:  094b6111d3\r\n\r\n.NET Core SDKs installed:\r\n  2.1.800-preview-009696 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010219 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview7-012386 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview7.19311.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview7-27812-08 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview7-27812-08 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n```","Url":"https://github.com/dotnet/cli/issues/11545","RelatedDescription":"Closed issue \"Install global tool failed with System.TypeLoadException: Could not load type 'System.Text.Json.Serialization.JsonSerializer' from assembly 'System.Text.Json\" (#11545)"},{"Id":"455519628","IsPullRequest":false,"CreatedAt":"2019-06-13T16:50:19","Actor":"jhoward321","Number":"11542","RawContent":null,"Title":"System.ComponentModel.Win32Exception when using ef tools","State":"closed","Body":"## Steps to reproduce\r\nRun any dotnet ef command inside a working repo. I'm using the 2.2.107 sdk from the https://copr.fedorainfracloud.org/coprs/g/dotnet-sig/dotnet/ repo. Unfortunately there is not a newer sdk available.\r\n\r\n## Expected  behavior\r\nShow existing migrations\r\n\r\n## Actual behavior\r\n```\r\n$ dotnet ef migrations list                          \r\nSystem.ComponentModel.Win32Exception (2): No such file or directory\r\n   at Interop.Sys.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setUser, UInt32 userId, UInt32 groupId, Int32& lpChildPid, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean shouldThrow)\r\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start()\r\n   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)\r\n   at Microsoft.EntityFrameworkCore.Tools.Exe.Run(String executable, IReadOnlyList`1 args, String workingDirectory, Boolean interceptOutput)\r\n   at Microsoft.EntityFrameworkCore.Tools.Project.FromFile(String file, String buildExtensionsDir, String framework, String configuration, String runtime)\r\n   at Microsoft.EntityFrameworkCore.Tools.RootCommand.Execute()\r\n   at Microsoft.DotNet.Cli.CommandLine.CommandLineApplication.Execute(String[] args)\r\n   at Microsoft.EntityFrameworkCore.Tools.Program.Main(String[] args)\r\nNo such file or directory\r\n```\r\n\r\n## Environment data\r\n```\r\n$ dotnet --info            \r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.107\r\n Commit:    2212cac826\r\n\r\nRuntime Environment:\r\n OS Name:     fedora\r\n OS Version:  30\r\n OS Platform: Linux\r\n RID:         fedora.30-x64\r\n Base Path:   /usr/lib64/dotnet/sdk/2.2.107/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.5\r\n  Commit:  0a3c9209c0\r\n\r\n.NET Core SDKs installed:\r\n  2.2.107 [/usr/lib64/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.NETCore.App 2.2.5 [/usr/lib64/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11542","RelatedDescription":"Closed issue \"System.ComponentModel.Win32Exception when using ef tools\" (#11542)"},{"Id":"455532891","IsPullRequest":false,"CreatedAt":"2019-06-13T04:46:49","Actor":"ravarnamsft","Number":"11544","RawContent":null,"Title":"dotnet publish results in wrong runtimeTarget in dependencies.json","State":"open","Body":"## Steps to reproduce\r\nCreate a .Net core project targeting 3.0 (having installed 3.0 preview 5 SDK)\r\nAdd runtime identifiers linux-64 and win-64 to the project file.\r\nIn powershell,\r\nrun dotnet publish -c release -o outputFolder --runtime win-x64 myProject.csproj\r\ndelete the \"outputFolder\"\r\nrun dotnet publish -c release -o outputFolder --runtime linux-x64 myProject.csproj\r\n\r\nThe deps.json file in the outputFolder has run time target of win-x64 when published for linux and therefore fails to start on a linux VM. I have seen this happen the other way around as well, if I switch the ordering of the publish commands above and linux gets written to the windows deps.json file, causing the app to fail on a Windows VM.\r\n\r\n## Expected  behavior\r\nThe deps.json in the output folder should have the correct runtimeTarget.\r\n\r\n## Actual behavior\r\nThe deps.json file has the wrong runtimeTarget and the app doesn't run on the target platform.\r\n\r\n## Environment data\r\n\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011568\r\n Commit:    b487ff10aa\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview5-011568\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27626-15\r\n  Commit:  61f30f5a23\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800-preview-009696 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.107 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010219 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview5-011568 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n\r\nHere are some settings from the project file:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <TargetFrameworkVersion>v3.0</TargetFrameworkVersion>\r\n    <LangVersion>latest</LangVersion>\r\n    <RuntimeIdentifiers>linux-x64;win-x64</RuntimeIdentifiers>\r\n  </PropertyGroup>\r\n```\r\n\r\nThis used to work properly all the time in 2.1 and 2.2. Is there some static state maintained in the cli session that doesn't get reset properly?\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11544","RelatedDescription":"Open issue \"dotnet publish results in wrong runtimeTarget in dependencies.json\" (#11544)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"456638679","IsPullRequest":true,"CreatedAt":"2019-06-16T13:06:10","Actor":"dotnet-maestro[bot]","Number":"1256","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190615.6\r\n- **Date Produced**: 6/16/2019 6:29 AM\r\n- **Commit**: 23faf5d032feef556f5399b46a92a6e4aef7d84a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19315.6\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19315.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19315.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1256","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1256)"},{"Id":"456634075","IsPullRequest":true,"CreatedAt":"2019-06-16T12:13:48","Actor":"dotnet-maestro[bot]","Number":"1255","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190615.2\r\n- **Date Produced**: 6/15/2019 4:13 PM\r\n- **Commit**: aa4285be7fab64e2b6e62e4d5688ea50931c407c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19315.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19315.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1255","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1255)"},{"Id":"456535222","IsPullRequest":true,"CreatedAt":"2019-06-15T13:06:53","Actor":"dotnet-maestro[bot]","Number":"1254","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190614.4\r\n- **Date Produced**: 6/15/2019 3:37 AM\r\n- **Commit**: 5fa3d3b8f89302202091993681391c9b356755a7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19314.4\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19314.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19314.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1254","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1254)"},{"Id":"456531161","IsPullRequest":true,"CreatedAt":"2019-06-15T12:13:52","Actor":"dotnet-maestro[bot]","Number":"1253","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190614.27\r\n- **Date Produced**: 6/15/2019 1:53 AM\r\n- **Commit**: 372249cafc24384ae3488aab4e815e54c2ff3938\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19314.27\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19314.27\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19314.27\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19314.27\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19314.27\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19314.27\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1253","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1253)"},{"Id":"456237914","IsPullRequest":true,"CreatedAt":"2019-06-14T13:22:47","Actor":"dotnet-maestro[bot]","Number":"1252","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190613.10\r\n- **Date Produced**: 6/14/2019 8:01 AM\r\n- **Commit**: c3f4524c785a226bae79cc82a96f7525460e2b5e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19313.10\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19313.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19313.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1252","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1252)"},{"Id":"456212743","IsPullRequest":true,"CreatedAt":"2019-06-14T12:14:12","Actor":"dotnet-maestro[bot]","Number":"1251","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190613.18\r\n- **Date Produced**: 6/13/2019 11:28 PM\r\n- **Commit**: 8952b877fa6bca387cd4321b33dcdf6778e31240\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19313.18\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19313.18\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19313.18\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19313.18\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19313.18\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19313.18\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1251","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1251)"},{"Id":"456107920","IsPullRequest":false,"CreatedAt":"2019-06-14T07:46:44","Actor":"marzim","Number":"1250","RawContent":null,"Title":"Expose System.ServiceModel.ServiceHost in .NET Standard 2.0","State":"open","Body":"Currently we can't access the ServiceHost under the System.ServiceModel.\r\nIs there a way that we can access the ServiceHost under the NET Standard 2.0?\r\n\r\n\r\nAny inputs are much appreciated.\r\n\r\nThanks,\r\n-Marvin","Url":"https://github.com/dotnet/standard/issues/1250","RelatedDescription":"Open issue \"Expose System.ServiceModel.ServiceHost in .NET Standard 2.0\" (#1250)"},{"Id":"455732093","IsPullRequest":true,"CreatedAt":"2019-06-13T13:18:52","Actor":"dotnet-maestro[bot]","Number":"1249","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190612.7\r\n- **Date Produced**: 6/13/2019 7:43 AM\r\n- **Commit**: cc8137ede09cdf16811767a6fb262fb498d85e67\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19312.7\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19312.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19312.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1249","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1249)"},{"Id":"455728018","IsPullRequest":false,"CreatedAt":"2019-06-13T13:00:29","Actor":"SebastianStruct","Number":"1248","RawContent":null,"Title":"Multiple DLLs from referenced .NET Standard projects","State":"open","Body":"I've created three .NET Standard 2.0 class library C# projects with Visual Studio 2017 (default settings).\r\n\r\n**Projects:**\r\n\r\n- MainProject (no dependencies)\r\n- TimeProject -> Dependencies -> Projects -> MainProject\r\n- ClockProject -> Dependencies -> Projects -> TimeProject\r\n\r\nEach of them have its own output directory. The DLL file should and is placed that output directory but the problem is that the referenced project DLLs are also placed in each output directory.\r\n\r\n**Output directories and files:**\r\n- Projects\\Build\\MainProject\r\n  - MainProject.dll\r\n- Projects\\Build\\TimeProject \r\n  - TimeProject.dll\r\n- Projects\\Build\\ClockProject \r\n  - ClockProject.dll\r\n  - MainProject.dll <-- my problem\r\n\r\n**Example of ProjectReference in ClockProject.csproj file:**\r\n\r\n```\r\n<ItemGroup>\r\n  <ProjectReference Include=\"..\\TimeProject\\TimeProject.csproj\">\r\n    <Private>false</Private>\r\n  </ProjectReference>\r\n</ItemGroup>\r\n```\r\n\r\nThe ClockProject referencing the TimeProject which referencing the MainProject.\r\n\r\nI want to prevent that the ClockProject creates a MainProject.dll in its output directory because the MainProject.dll already exists in the output directory of the MainProject.","Url":"https://github.com/dotnet/standard/issues/1248","RelatedDescription":"Open issue \"Multiple DLLs from referenced .NET Standard projects\" (#1248)"},{"Id":"455701722","IsPullRequest":true,"CreatedAt":"2019-06-13T12:14:50","Actor":"dotnet-maestro[bot]","Number":"1247","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190612.21\r\n- **Date Produced**: 6/13/2019 7:23 AM\r\n- **Commit**: e5cd71926eaa13aba3138c14cd80def0ccfebb30\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19312.21\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19312.21\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19312.21\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19312.21\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19312.21\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19312.21\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1247","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1247)"},{"Id":"455203364","IsPullRequest":true,"CreatedAt":"2019-06-12T13:17:20","Actor":"dotnet-maestro[bot]","Number":"1246","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190611.10\r\n- **Date Produced**: 6/12/2019 9:52 AM\r\n- **Commit**: f5399d9d24536697a3bc36339e13ba085fc28938\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19311.10\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19311.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19311.10\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1246","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1246)"},{"Id":"455174207","IsPullRequest":true,"CreatedAt":"2019-06-12T12:14:57","Actor":"dotnet-maestro[bot]","Number":"1245","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190611.2\r\n- **Date Produced**: 6/11/2019 12:55 PM\r\n- **Commit**: dfc41299b9aadb1ca98093d660df81811eca901b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19311.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19311.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19311.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19311.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19311.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19311.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1245","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1245)"},{"Id":"454680960","IsPullRequest":true,"CreatedAt":"2019-06-11T13:19:14","Actor":"dotnet-maestro[bot]","Number":"1244","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190611.1\r\n- **Date Produced**: 6/11/2019 11:00 AM\r\n- **Commit**: a78bd7308555926f88aad3d0ecaaebae0f9204cc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19311.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19311.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19311.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1244","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1244)"},{"Id":"454649658","IsPullRequest":true,"CreatedAt":"2019-06-11T12:15:00","Actor":"dotnet-maestro[bot]","Number":"1243","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190610.24\r\n- **Date Produced**: 6/11/2019 12:59 AM\r\n- **Commit**: f268510de7a7bcf800a6966830f8d11ff8d24e0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19310.24\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19310.24\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19310.24\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19310.24\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19310.24\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19310.24\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1243","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1243)"},{"Id":"454251339","IsPullRequest":false,"CreatedAt":"2019-06-10T16:19:02","Actor":"vixisoft","Number":"1242","RawContent":null,"Title":"ExcludeFromCodeCoverageAttribute should have Justification property","State":"open","Body":"Hi,\r\n\r\nWe are trying to build our Organisation Framework for DotNetCore and while we tried to test everything, some of the methods cannot be tested directly. (EF Core Wrapper mainly)\r\n\r\nSo we added the Attribute ExcludeFromCodeCoverage but we are not satisfied with the attribute.\r\n\r\nFirst, it doesn't have any Justification property so it not clear for other person why this has been added. ( Missing expertise to test ?, Cannot be tested ?, why !)\r\n\r\nSecond, it cannot be inherited because its marked as sealed class...\r\n\r\nThere is no way we can use this attribute to help others ?\r\nTelling them why this is in place?\r\n\r\nWe put the justification in the summary at the moment but i feel it's the worse place to put it...\r\n\r\nBecause:\r\n- it's added to the documentation when it shouldn't.\r\n- Someone can erase the summary because it has been refactored or anything and kill the justification. If it was in Justification property of the attribute we could at leat keep it safe until we judge that it can be removed and tested!\r\n\r\nCan you modify this attribute? \r\nOr how can i add this justification without putting it in the summary of the method / class ?","Url":"https://github.com/dotnet/standard/issues/1242","RelatedDescription":"Open issue \"ExcludeFromCodeCoverageAttribute should have Justification property\" (#1242)"},{"Id":"454161356","IsPullRequest":true,"CreatedAt":"2019-06-10T13:16:44","Actor":"dotnet-maestro[bot]","Number":"1241","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190609.5\r\n- **Date Produced**: 6/10/2019 12:19 AM\r\n- **Commit**: 7e56d8bd8b224d834b782a98bfd7035f71c3f547\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19309.5\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19309.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19309.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1241","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1241)"},{"Id":"454137194","IsPullRequest":true,"CreatedAt":"2019-06-10T12:14:25","Actor":"dotnet-maestro[bot]","Number":"1240","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190609.1\r\n- **Date Produced**: 6/9/2019 12:42 PM\r\n- **Commit**: 45361625125cdd3119050a852bd73163ca4b73f4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19309.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19309.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19309.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19309.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19309.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19309.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1240","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1240)"},{"Id":"453895716","IsPullRequest":true,"CreatedAt":"2019-06-09T13:13:58","Actor":"dotnet-maestro[bot]","Number":"1239","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190609.1\r\n- **Date Produced**: 6/9/2019 11:19 AM\r\n- **Commit**: 48c3adf8ad0256689375060437c2e6262d5e805a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19309.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19309.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19309.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1239","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1239)"},{"Id":"453891137","IsPullRequest":true,"CreatedAt":"2019-06-09T12:09:21","Actor":"dotnet-maestro[bot]","Number":"1238","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190608.1\r\n- **Date Produced**: 6/8/2019 12:50 PM\r\n- **Commit**: 747a1bdf2a74a486fb075045cb2384fa89a7983c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19308.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19308.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19308.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19308.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19308.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19308.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1238","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1238)"},{"Id":"453791889","IsPullRequest":true,"CreatedAt":"2019-06-08T13:12:04","Actor":"dotnet-maestro[bot]","Number":"1237","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190607.10\r\n- **Date Produced**: 6/8/2019 7:24 AM\r\n- **Commit**: 20ba99aaf60ba91180f304211b096e1147564a7c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19307.10\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19307.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19307.10\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1237","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1237)"},{"Id":"453787233","IsPullRequest":true,"CreatedAt":"2019-06-08T12:14:16","Actor":"dotnet-maestro[bot]","Number":"1236","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190607.62\r\n- **Date Produced**: 6/8/2019 3:43 AM\r\n- **Commit**: 29999b2846623e2d96733577165968d09bc2bcc1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19307.62\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19307.62\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19307.62\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19307.62\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19307.62\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19307.62\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1236","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1236)"},{"Id":"453504450","IsPullRequest":true,"CreatedAt":"2019-06-07T13:16:47","Actor":"dotnet-maestro[bot]","Number":"1235","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190606.9\r\n- **Date Produced**: 6/7/2019 5:48 AM\r\n- **Commit**: de1da50fc5f972348aba2fa40ff14e1cbadb13de\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19306.9\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19306.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19306.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1235","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1235)"},{"Id":"453479367","IsPullRequest":true,"CreatedAt":"2019-06-07T12:24:35","Actor":"dotnet-maestro[bot]","Number":"1234","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190606.12\r\n- **Date Produced**: 6/6/2019 9:47 PM\r\n- **Commit**: a1805103791e43031355e11c0d037bca803a9593\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19306.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19306.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19306.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19306.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19306.12\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19306.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1234","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1234)"},{"Id":"453020508","IsPullRequest":true,"CreatedAt":"2019-06-06T13:17:28","Actor":"dotnet-maestro[bot]","Number":"1233","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190606.1\r\n- **Date Produced**: 6/6/2019 10:50 AM\r\n- **Commit**: 71aec681dd1247979e7956372abae8bbc02c9546\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19306.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19306.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19306.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1233","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1233)"},{"Id":"452992389","IsPullRequest":true,"CreatedAt":"2019-06-06T12:14:38","Actor":"dotnet-maestro[bot]","Number":"1232","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190605.13\r\n- **Date Produced**: 6/6/2019 5:54 AM\r\n- **Commit**: d05c046913964e880be08b804e7249f297617c2f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19305.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19305.13\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19305.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19305.13\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19305.13\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19305.13\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1232","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1232)"},{"Id":"452490563","IsPullRequest":true,"CreatedAt":"2019-06-05T13:16:16","Actor":"dotnet-maestro[bot]","Number":"1231","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190605.1\r\n- **Date Produced**: 6/5/2019 11:29 AM\r\n- **Commit**: 656ccfbbef3a0d75c02e17b7477122a658b92557\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19305.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19305.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19305.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1231","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1231)"},{"Id":"452464354","IsPullRequest":true,"CreatedAt":"2019-06-05T12:14:49","Actor":"dotnet-maestro[bot]","Number":"1230","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190604.23\r\n- **Date Produced**: 6/5/2019 4:12 AM\r\n- **Commit**: c9ab9c47d6c66fb9ad89e331900e06bed7463904\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19304.23\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19304.23\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19304.23\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19304.23\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19304.23\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19304.23\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1230","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1230)"},{"Id":"451983344","IsPullRequest":true,"CreatedAt":"2019-06-04T13:12:14","Actor":"dotnet-maestro[bot]","Number":"1229","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190603.11\r\n- **Date Produced**: 6/4/2019 8:34 AM\r\n- **Commit**: 6d5959cbc7d489406f8f85dba0a42f06d4a0ea9b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19303.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19303.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19303.11\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1229","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1229)"},{"Id":"451725417","IsPullRequest":false,"CreatedAt":"2019-06-03T23:00:31","Actor":"wpatter6","Number":"1228","RawContent":null,"Title":"Hosting environment or server.mappath in .net framework","State":"open","Body":"Hi, I'm building a nuget package that will be used in both .NET Framework 4.6.2+ and dotnet core MVC type applications.\r\n\r\nThere is some functionality I'm providing that requires knowing the web root path.  Within the dotnet core world, I'm able to access the hosting environment and get the web root from there. \r\n\r\nBut how can this be done for framework 4.6.2+ applications, without the hosting environment, Server.MapPath or some equivalent?  Is it possible?  \r\n\r\nI'm currently using `Directory.GetCurrentDirectory() + @\"..\\..\\\";` but this is obviously quite hacky and only supports the default hosting configuration.\r\n\r\nThanks","Url":"https://github.com/dotnet/standard/issues/1228","RelatedDescription":"Open issue \"Hosting environment or server.mappath in .net framework\" (#1228)"},{"Id":"451464633","IsPullRequest":true,"CreatedAt":"2019-06-03T12:58:57","Actor":"dotnet-maestro[bot]","Number":"1227","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190603.1\r\n- **Date Produced**: 6/3/2019 10:38 AM\r\n- **Commit**: 0eed4042f056b4d9f6f4d1bf2918e234d67a6f88\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview7.19303.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview7.19303.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview7.19303.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1227","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1227)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"456741873","IsPullRequest":false,"CreatedAt":"2019-06-17T04:52:46","Actor":"hez2010","Number":"38592","RawContent":null,"Title":"System.Text.Json throw exceptions on UWP in Release Build","State":"open","Body":"Use System.Json.Text in UWP,\r\n```csharp\r\nJsonSerializer.ToString(new { test = \"abc\" });\r\n```\r\n```\r\nFailure occurred while loading a type.\r\n\r\nThis operation cannot be carried out because metadata for the following object was removed for performance reasons: <unavailable>\r\nNo further information is available. Rebuild in debug mode for better information.\r\n```","Url":"https://github.com/dotnet/corefx/issues/38592","RelatedDescription":"Open issue \"System.Text.Json throw exceptions on UWP in Release Build\" (#38592)"},{"Id":"456702837","IsPullRequest":false,"CreatedAt":"2019-06-17T01:06:26","Actor":"mqudsi","Number":"38591","RawContent":null,"Title":"`Utf8JsonReader` does not correctly resume with only a `JsonReaderState`","State":"open","Body":"The way the API is currently designed and going off of the inline-documentation and online blog posts, it seems that `JsonReaderState` exists to work around the limitations of its `ref struct` type, namely, notably the inability to use it in an `async` context.\r\n\r\nThe problem is that `Utf8JsonReader` retains stateful information that is not contained in `JsonReaderState`, meaning that despite all appearances, you have to either find a way to re-use `Utf8JsonReader` objects (impossible in an `async` context) or else retrieve additional state information that must then be relayed to a new `Utf8JsonReader` instance in order to continue a previous partial read operation.\r\n\r\nI have a contained reproduction of the problem here as a single-file MSTest: https://github.com/mqudsi/StjTest\r\n\r\nI see there's a proposal in https://github.com/dotnet/corefx/issues/35252 to rather reduce the amount of state stored in a `JsonReaderState` to reduce heap allocations, which is definitely a laudable goal. But if it's possible to store a reference to the state instead, as discussed in https://github.com/dotnet/corefx/issues/33298 that would (potentially) eliminate that recurring cost.\r\n\r\nThe current API for `Utf8JsonReader` would lead one to suspect that \"state needed to continue reading\" is contained within `JsonReaderState` and `Utf8JsonReader` is the equivalent of a singleton or immutable struct, except that it also contains the result of the last `.Read` operation, and that resuming from state would continue as-is except for the loss of the disposable information about the details of the last-read token.\r\n\r\nThe real problem is that you have two different states (one in the reader and one in the state object), one of which is always needed whereas the other is only needed when starting from scratch and each comes at the cost of the other. \r\n\r\nWhat if the state were split into two different objects, and there were no possibility of misusing them thanks to type safety?\r\n\r\ne.g. \r\n\r\n* Two state types, `PartialState` and `FullState`, where `PartialState` is the information in `JsonReaderState` that *is* currently used when passed in to the `Utf8JsonReader` constructor and `FullState` is the current `JsonReaderState`.\r\n* It is not possible to pass in a `PartialState` to the constructor, you either supply a `FullState` or nothing at all. \r\n* `Utf8JsonReader.CurrentState` takes a `PartialState` value, and won't accept a `FullState` value instead\r\n* A new `Utf8JsonReader.Snapshot()` method (or a different property) that creates and returns a new `FullState` object, to be used only when a new reader will be constructed\r\n\r\nThis addresses #35252 by dropping extraneous values from `JsonReaderState` where/when they are not needed (calling against an existing `Utf8JsonReader` across `async` boundaries)  but means no gymnastics are required to create a new `Utf8JsonReader` resuming where the old one left off.","Url":"https://github.com/dotnet/corefx/issues/38591","RelatedDescription":"Open issue \"`Utf8JsonReader` does not correctly resume with only a `JsonReaderState`\" (#38591)"},{"Id":"456689193","IsPullRequest":false,"CreatedAt":"2019-06-16T22:33:35","Actor":"mqudsi","Number":"38590","RawContent":null,"Title":"Pretty please: `JsonTokenType` to `[Flags]`","State":"open","Body":"Before `System.Text.Json` finalizes, would it be possible to change the definition of `JsonTokenType` (and maybe others) to make certain operations on top of `Utf8JsonReader` more efficient?\r\n\r\nThis is what I had in mind:\r\n\r\n```csharp\r\n[Flags]\r\npublic enum JsonTokenType : byte\r\n{\r\n    None = 0,\r\n    StartObject = 1 << 0,\r\n    EndObject = 1 << 1,\r\n    StartArray = 1 << 2,\r\n    EndArray = 1 << 3,\r\n    PropertyName = 1 << 4,\r\n    String = 1 << 5,\r\n    Number = 1 << 6,\r\n    True = 1 << 7,\r\n    False = 1 << 8,\r\n    Null = 1 << 9,\r\n    Comment = 1 << 10,\r\n\r\n    // These will make things more efficient.\r\n    // You don't even have to define them if you feel they're too subjective,\r\n    // library writers can define them on their end by virtue of `JsonTokenType`\r\n    // members having power-of-two values.\r\n    Boolean = True | False,\r\n    Literal = String | Number | Boolean | Null,\r\n    // etc.\r\n}\r\n```\r\n\r\nAs mentioned, there's no need to actually provide the definitions for `Boolean`, `NestedStart`, etc. as a dev can easily define them once on their end (although having them in the library means they can be kept in-sync), so that usages such as \"handle this `ValueSpan` if it is a boolean\" can be written as `(reader.TokenType & Boolean) != JsonTokenType.None` rather than `reader.TokenType == JsonTokenType.True || reader.TokenType == JsonTokenType.False`.\r\n\r\n(`JsonValueType` can also use this to get `JsonTokenType.Boolean`)","Url":"https://github.com/dotnet/corefx/issues/38590","RelatedDescription":"Open issue \"Pretty please: `JsonTokenType` to `[Flags]`\" (#38590)"},{"Id":"456662262","IsPullRequest":false,"CreatedAt":"2019-06-16T22:17:06","Actor":"mqudsi","Number":"38586","RawContent":null,"Title":"System.Text.Json asynchronous streaming deserialization support","State":"closed","Body":"Hello team,\r\n\r\nWe've been eager to try the new `System.Text.Json` APIs for their native UTF8 support, but it seems based off [the preview release announcement](https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/) and the API exposed by the current preview release of the `System.Text.Json` that there's a lack of streaming support, i.e. reading individual JSON tokens without first having the entire document loaded into memory (and then parsed as a `JsonDocument`).\r\n\r\nThe Newtonsoft JSON library had a `JsonTextReader` that could lazily consume an underlying `Stream` and return a token at a time via `JsonTextReader.ReadAsync(..)`, which moved the document cursor/pointer to the next node in the stream. It had some shortcomings (it couldn't skip past a nested node, you had to step through it IIRC) but it served the purpose of being able to navigate asynchronously to a particular node in a JSON document and then selectively parse its value without having to first buffer the entire stream beforehand or to parse the entirety of the document in order to enumerate its nodes.\r\n\r\nI assumed that `Utf8JsonReader` would for sure do the same thing, but it seems that a `Utf8JsonReader` can only be created on top of an available `ReadOnlySequence<T>` and all its methods are blocking. `JsonDocument` can be created on top of a `Stream` and does not appear to consume the entire stream upon initialization, but only offers a `ParseAsync()` method that asynchronously reads from the underlying stream; except it consumes the entirety of the stream and loads the entire document into memory.\r\n\r\nI'm probably missing something, but is there no way to asynchronously and lazily navigate a UTF8 JSON stream, without buffering the entire document in memory and without blocking unnecessarily for IO?\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/38586","RelatedDescription":"Closed issue \"System.Text.Json asynchronous streaming deserialization support\" (#38586)"},{"Id":"456667634","IsPullRequest":false,"CreatedAt":"2019-06-16T19:53:36","Actor":"danstur","Number":"38587","RawContent":null,"Title":"System.Text.Json Cannot Run Tests from Visual Studio","State":"closed","Body":"After building the System.Text.Json solution via build.cmd (or Visual Studio) the resulting assemblies are put into a `$(ArtifactsBinDir)$(TestProjectName)/netcoreapp-$(ConfigurationGroup)/` directory. \r\n\r\nThe working directory of the System.Text.Json.Tests project under Debug is set to `$(ArtifactsBinDir)$(TestProjectName)/netcoreapp-$(_bc_OSGroup)-$(ConfigurationGroup)-$(ArchGroup)/` this causes an error when trying to execute the tests with the following message box:\r\n```\r\n---------------------------\r\nMicrosoft Visual Studio\r\n---------------------------\r\nThe working directory 'E:\\code\\corefx\\artifacts\\bin\\System.Text.Json.Tests\\netcoreapp-Windows_NT-Debug-x64\\' specified in the '.NET Core xUnit Console' debug profile does not exist.\r\n---------------------------\r\nOK   \r\n---------------------------\r\n```\r\n\r\nRunning the same tests via `dotnet msbuild /t:rebuildandtest` locates the tests correctly.\r\n\r\nAm I doing something wrong or is this a mistake in the test configuration?","Url":"https://github.com/dotnet/corefx/issues/38587","RelatedDescription":"Closed issue \"System.Text.Json Cannot Run Tests from Visual Studio\" (#38587)"},{"Id":"456675696","IsPullRequest":false,"CreatedAt":"2019-06-16T19:52:43","Actor":"axm","Number":"38589","RawContent":null,"Title":"[System.Text.Json] merging two json structures","State":"open","Body":"I ran into this use case recently and I was unable to find a solution. \r\n\r\nOn one hand I read the contents of a file, then I obtained the JSON representaiton of that content with\r\n\r\n```\r\nvar document = JsonDocument.Parse(fileContent);\r\n```\r\n\r\nNow I have access to all that data. The second thing I did was build a custom JSON object with the `Utf8JsonWriter`.\r\n\r\n**Question:** how can I integrate the latter object into the former (`document`)? I want to create a property in `document` (maybe nested quite deeply) and set the value of that property to the object that I build with `Utf8JsonWriter`.","Url":"https://github.com/dotnet/corefx/issues/38589","RelatedDescription":"Open issue \"[System.Text.Json] merging two json structures\" (#38589)"},{"Id":"456565010","IsPullRequest":true,"CreatedAt":"2019-06-16T19:38:39","Actor":"tarekgh","Number":"38577","RawContent":null,"Title":"Fix the failure in RegionInfo Tests","State":"closed","Body":"China region name has changed to \"China mainland\", we are updating the test to accept this new name too.\r\n\r\n#38553","Url":"https://github.com/dotnet/corefx/pull/38577","RelatedDescription":"Closed or merged PR \"Fix the failure in RegionInfo Tests\" (#38577)"},{"Id":"456673938","IsPullRequest":false,"CreatedAt":"2019-06-16T19:30:33","Actor":"MarkMichaelis","Number":"38588","RawContent":null,"Title":"Version Compatibility: netcoreapp2.0 Rounds Differently than netcoreapp3.0","State":"open","Body":"`System.Console.WriteLine(1.618033988749895)` with `netcoreapp2.0` and SDK `2.1.700` will result in the output:\r\n```\r\n1.61803398874989\r\n```\r\nHowever, changing to `netcoreapp3.0` with SDK `3.0.100-preview5-011568` will result in the output \r\n```\r\n1.618033988749895\r\n```\r\n\r\nThis would seem to be a version breaking change in behavior. While I don't particularly mind, I don't understand why the behavior is different and I want to be sure that it is intentional.  (In my case, it broke a unit test. :)","Url":"https://github.com/dotnet/corefx/issues/38588","RelatedDescription":"Open issue \"Version Compatibility: netcoreapp2.0 Rounds Differently than netcoreapp3.0\" (#38588)"},{"Id":"456648531","IsPullRequest":false,"CreatedAt":"2019-06-16T14:42:33","Actor":"tannergooding","Number":"38585","RawContent":null,"Title":"Provide an `Unsafe.SkipInit` method to allow bypassing definite assignment rules.","State":"open","Body":"### Rationale\r\n\r\nCurrently, the C# compiler has a number of definite assignment rules that may not work well with some scenarios or which may require some minimal overhead to work around.\r\n\r\nOne scenario that comes to mind is when working with union types. Here, the C# compiler doesn't understand that fields may be overlapping, or that they may never be exposed, but it requires you to initialize them anyways.\r\n\r\nYou can work-around this by taking the address of the type, but that generally involves pinning which can add unnecessary overhead in tight loops.\r\n\r\n### Proposed API\r\n\r\nI propose we expose a method which allows the user to bypass definite assignment rules for a given value. Internally, this would be implemented by returning the underlying `T`.\r\n\r\n```csharp\r\npublic static partial class Unsafe\r\n{\r\n    public static ref T SkipInit<T>(out T source);\r\n}\r\n```\r\n\r\n### Open Questions\r\n\r\nShould this be constrained to be `unmanaged` in order to (outside of various edge cases) prevent users from trying to skip zero-initializing a field to a reference type?","Url":"https://github.com/dotnet/corefx/issues/38585","RelatedDescription":"Open issue \"Provide an `Unsafe.SkipInit` method to allow bypassing definite assignment rules.\" (#38585)"},{"Id":"456637921","IsPullRequest":true,"CreatedAt":"2019-06-16T12:48:13","Actor":"dotnet-maestro[bot]","Number":"38584","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:df6412e4-c5aa-49d0-4dd9-08d6bc676830)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190616.1\r\n- **Date Produced**: 6/16/2019 11:18 AM\r\n- **Commit**: 0340f546c910a20e6bb029c5cfce6011d048d36a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190616.1\r\n\r\n[marker]: <> (End:df6412e4-c5aa-49d0-4dd9-08d6bc676830)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/38584","RelatedDescription":"Open PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#38584)"},{"Id":"456613419","IsPullRequest":false,"CreatedAt":"2019-06-16T07:49:30","Actor":"newpost","Number":"38583","RawContent":null,"Title":"Why trigger event \"AssemblyResolve\"?","State":"open","Body":"\r\n```\r\nclass Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Test();\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n\r\n        private static Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)\r\n        {\r\n            Console.WriteLine(args.Name);//System.Collections.Concurrent.resources, Version=4.0.14.0, Culture=zh-CN, PublicKeyToken=b03f5f7f11d50a3a\r\n            return null;\r\n        }\r\n\r\n        public static void Test()\r\n        {\r\n            AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;\r\n            IDictionary<string, string> dic = new ConcurrentDictionary<string, string>();\r\n            dic.Add(\"key\", \"value\");\r\n            dic.Add(\"key\", \"value\");\r\n        }\r\n    }\r\n````","Url":"https://github.com/dotnet/corefx/issues/38583","RelatedDescription":"Open issue \"Why trigger event \"AssemblyResolve\"?\" (#38583)"},{"Id":"456529442","IsPullRequest":false,"CreatedAt":"2019-06-16T04:51:05","Actor":"mmisztal1980","Number":"38570","RawContent":null,"Title":"IPGlobalProperties.GetActiveTcpListeners does not return ports in use by docker on MacOS","State":"closed","Body":"I have defined a helper class to get me the 1st available port on a host, starting with a port number I provide. I use it to start docker containers from C#, when trying to avoid port conflicts.\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Net;\r\nusing System.Net.NetworkInformation;\r\n\r\nnamespace MyProject\r\n{\r\n    public static class PortManager\r\n    {\r\n        public static ushort GetAvailablePort(ushort startingPort)\r\n        {\r\n            var portArray = new List<int>();\r\n\r\n            var properties = IPGlobalProperties.GetIPGlobalProperties();\r\n\r\n            portArray.AddRange(GetListenerPorts(() => properties.GetActiveTcpConnections().Select(x => x.LocalEndPoint), startingPort));\r\n            portArray.AddRange(GetListenerPorts(() => properties.GetActiveTcpListeners(), startingPort));\r\n            portArray.AddRange(GetListenerPorts(() => properties.GetActiveUdpListeners(), startingPort));\r\n\r\n            portArray.Sort();\r\n\r\n            for (int i = startingPort; i < ushort.MaxValue; i++)\r\n            {\r\n                if (!portArray.Contains(i))\r\n                {\r\n                    return Convert.ToUInt16(i);\r\n                }\r\n            }\r\n\r\n            return 0;\r\n        }\r\n\r\n        private static IEnumerable<int> GetListenerPorts(Func<IEnumerable<IPEndPoint>> endpointSelector, ushort startinPort)\r\n        {\r\n            return endpointSelector().Where(x => x.Port >= startinPort).Select(x => x.Port);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis code works quite fine on Windows, however I've noticed that the behavior of this code on MacOS is different, as ports in use by docker (EXPOSE {port} with `-p` flag) are ignored.\r\n\r\n- Can you comment on this behavior?\r\n- How would you recommend to get the port numbers in use by docker on MacOS (and potentially Linux)?","Url":"https://github.com/dotnet/corefx/issues/38570","RelatedDescription":"Closed issue \"IPGlobalProperties.GetActiveTcpListeners does not return ports in use by docker on MacOS\" (#38570)"},{"Id":"456597533","IsPullRequest":false,"CreatedAt":"2019-06-16T03:29:49","Actor":"abjbhat","Number":"38582","RawContent":null,"Title":"DataSet.ReadXmlSchema throws XmlSchemaException if a table namespace is specified","State":"open","Body":"## Problem description:\r\n\r\n`System.Data.DataSet.ReadXmlSchema` cannot read a data set schema written by `System.Data.DataSet.WriteXmlSchema`. Doing so results in a \r\n`System.Xml.Schema.XmlSchemaException` being thrown.\r\n\r\n## Steps to reproduce:\r\n\r\n1. Create a new `System.Data.DataSet`. \r\n1.1 Add two `System.Data.DataTable` T1 and T2 to this `DataSet`. \r\n1.2 Add a relationship between T1 and T2. \r\n1.3 Save changes to the `DataSet`\r\n1.4 Update: in step 1.1, specify a namespace for both tables.\r\n2. Write the schema using `System.Data.DataSet.WriteXmlSchema(String)` . This overload expects a string parameter, which is a name of a file. \r\n3. Try to read the schema just created to create a new `System.Data.DataSet` using `System.Data.DataSet.WriteXmlSchema(String)` by passing the same filename.\r\n4. An exception is thrown.\r\n```csharp\r\nSystem.Xml.Schema.XmlSchemaException\r\n  HResult=0x80131941\r\n  Message=The 'dbo:T1' element is not declared.\r\n  Source=System.Private.Xml\r\n  StackTrace:\r\n   at System.Xml.Schema.XmlSchemaSet.InternalValidationCallback(Object sender, ValidationEventArgs e)\r\n   at System.Xml.Schema.BaseProcessor.SendValidationEvent(XmlSchemaException e, XmlSeverityType severity)\r\n   at System.Xml.Schema.BaseProcessor.SendValidationEvent(XmlSchemaException e)\r\n   at System.Xml.Schema.Compiler.CompileElement(XmlSchemaElement xe)\r\n   at System.Xml.Schema.Compiler.CompileParticleElements(XmlSchemaComplexType complexType, XmlSchemaParticle particle)\r\n   at System.Xml.Schema.Compiler.CompileParticleElements(XmlSchemaComplexType complexType, XmlSchemaParticle particle)\r\n   at System.Xml.Schema.Compiler.CompileComplexTypeElements(XmlSchemaComplexType complexType)\r\n   at System.Xml.Schema.Compiler.Compile()\r\n   at System.Xml.Schema.Compiler.Execute(XmlSchemaSet schemaSet, SchemaInfo schemaCompiledInfo)\r\n   at System.Xml.Schema.XmlSchemaSet.Compile()\r\n   at System.Data.DataSet.ReadXSDSchema(XmlReader reader, Boolean denyResolving)\r\n   at System.Data.DataSet.ReadXmlSchema(XmlReader reader, Boolean denyResolving)\r\n   at System.Data.DataSet.ReadXmlSchema(String fileName)\r\n``` \r\n\r\nThis problem can be seen in dotnet core sdk version 2.2.300 on Windows 10 64 bit\r\n\r\n### Possibly related issues: #20263","Url":"https://github.com/dotnet/corefx/issues/38582","RelatedDescription":"Open issue \"DataSet.ReadXmlSchema throws XmlSchemaException if a table namespace is specified\" (#38582)"},{"Id":"456589545","IsPullRequest":false,"CreatedAt":"2019-06-16T00:54:39","Actor":"davidfowl","Number":"38581","RawContent":null,"Title":"[API Proposal]: JsonSerializer.TryReadValue(ref Utf8JsonReader)","State":"open","Body":"Today if the JSON passed into the JsonSerializer needs to be the fully formed, this means its basically impossible to let the caller handle buffering (which is unfortunate). This seems solvable if we add a TryReadValue which would return false if the Serializer failed to Read the full object from the Utf8JsonReader. \r\n\r\n```C#\r\npublic static class JsonSerializer\r\n{\r\n    public static bool TryReadValue(ref Utf8JsonReader reader, Type returnType, out object value, JsonSerializerOptions options = null);\r\n    public static bool TryReadValue<TValue>(ref Utf8JsonReader reader, out TValue value, JsonSerializerOptions options = null);\r\n}\r\n```\r\n\r\nThis currently wouldn't preserve the serializer state, but it would let the caller buffer an entire JSON payload from a Stream of bytes without a surrounding envelope.","Url":"https://github.com/dotnet/corefx/issues/38581","RelatedDescription":"Open issue \"[API Proposal]: JsonSerializer.TryReadValue(ref Utf8JsonReader)\" (#38581)"},{"Id":"456571603","IsPullRequest":false,"CreatedAt":"2019-06-15T20:08:17","Actor":"markzielinski","Number":"38580","RawContent":null,"Title":"Is DPI broken in 3.0.100-preview6-012264?","State":"open","Body":"I just updated from 3.0.100-preview5-011568 to 3.0.100-preview6-012264 and it looks like there were some changes made to DPI.\r\n\r\nI checked the release notes and didn't see any changes documented for DPI, however after updating to Preview 6 my WPF application now looks huge.    \r\n\r\nMy display resolution is 2560 x 1440 with the scale set to the recommended 125%. \r\n","Url":"https://github.com/dotnet/corefx/issues/38580","RelatedDescription":"Open issue \"Is DPI broken in 3.0.100-preview6-012264?\" (#38580)"},{"Id":"456570921","IsPullRequest":false,"CreatedAt":"2019-06-15T19:59:37","Actor":"MoienTajik","Number":"38579","RawContent":null,"Title":"System.Text.Json Reference Loop Handling","State":"open","Body":"One of the key features of **JSON.NET** serialization was the `ReferenceLoopHandling` which gives the ability to ignore the reference loops likes this :\r\n\r\n``` CSharp\r\npublic class Employee\r\n{\r\n    public string Name { get; set; }\r\n\r\n    public Employee Manager { get; set; }\r\n}\r\n\r\nprivate static void Main()\r\n{\r\n    var joe = new Employee { Name = \"Joe - User\" };\r\n    var mike = new Employee { Name = \"Mike - Manager\" };\r\n    joe.Manager = mike;\r\n    mike.Manager = mike;\r\n\r\n    var json = JsonConvert.SerializeObject(joe, new JsonSerializerSettings\r\n    {\r\n        Formatting = Formatting.Indented,\r\n        ReferenceLoopHandling = ReferenceLoopHandling.Ignore\r\n    });\r\n\t\r\n    Console.WriteLine(json);\r\n}\r\n```\r\n\r\nAnd it produces the appropriate result :\r\n\r\n``` CSharp\r\n{\r\n  \"Name\": \"Joe User\",\r\n  \"Manager\": {\r\n    \"Name\": \"Mike Manager\"\r\n  }\r\n}\r\n```\r\nHowever, I couldn't find such a feature in **System.Text.JSON**, And when I've tried to Serialize the same object with *JsonSerializer* :\r\n\r\n``` CSharp\r\nprivate static void Main()\r\n{\r\n    var joe = new Employee { Name = \"Joe User\" };\r\n    var mike = new Employee { Name = \"Mike Manager\" };\r\n    joe.Manager = mike;\r\n    mike.Manager = mike;\r\n\r\n    var json = JsonSerializer.ToString(joe, new JsonSerializerOptions\r\n    {\r\n        WriterOptions = new JsonWriterOptions\r\n        {\r\n            Indented = true,\r\n        }\r\n    });\r\n\r\n    Console.WriteLine(json);\r\n}\r\n```\r\n\r\nI've got this exception :\r\n`System.InvalidOperationException: 'CurrentDepth (1000) is equal to or larger than the maximum allowed depth of 1000. Cannot write the next JSON object or array.'`\r\n\r\nSo, Is this feature exist in System.Text.Json now that I couldn't find it?\r\nAnd if not, Are there any plans to support this?","Url":"https://github.com/dotnet/corefx/issues/38579","RelatedDescription":"Open issue \"System.Text.Json Reference Loop Handling\" (#38579)"},{"Id":"456568747","IsPullRequest":true,"CreatedAt":"2019-06-15T19:30:08","Actor":"steveharter","Number":"38578","RawContent":null,"Title":"Custom converter feature for JSON serializer","State":"open","Body":"Feature implementation of https://github.com/dotnet/corefx/issues/36639. Note this issue is still being review for API, so based on timing some code may need to be adjusted later.","Url":"https://github.com/dotnet/corefx/pull/38578","RelatedDescription":"Open PR \"Custom converter feature for JSON serializer\" (#38578)"},{"Id":"456557504","IsPullRequest":false,"CreatedAt":"2019-06-15T17:12:51","Actor":"JohnyL","Number":"38576","RawContent":null,"Title":"JsonSerializer outputs Unicode codes instead of characters","State":"open","Body":"I have the following code:\r\n```c#\r\npublic class Point\r\n{\r\n    public string Value { get; set; }\r\n}\r\nvar json = JsonSerializer.ToString(new Point { Value = \"This is \\\"first\\\" point.\" });\r\n```\r\nNow `json` contains the following:\r\n\r\n> {\"Value\":\"This is \\u0022first\\u0022 point.\"}","Url":"https://github.com/dotnet/corefx/issues/38576","RelatedDescription":"Open issue \"JsonSerializer outputs Unicode codes instead of characters\" (#38576)"},{"Id":"456534646","IsPullRequest":true,"CreatedAt":"2019-06-15T14:59:32","Actor":"dotnet-maestro[bot]","Number":"38574","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:df6412e4-c5aa-49d0-4dd9-08d6bc676830)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190615.1\r\n- **Date Produced**: 6/15/2019 11:24 AM\r\n- **Commit**: eab897a978e911b2043c4ee595fb5088e7d39c49\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190615.1\r\n\r\n[marker]: <> (End:df6412e4-c5aa-49d0-4dd9-08d6bc676830)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/38574","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#38574)"},{"Id":"456532792","IsPullRequest":false,"CreatedAt":"2019-06-15T13:30:25","Actor":"GSPP","Number":"38571","RawContent":null,"Title":"Improve API diff to show \"where T : notnull\"","State":"closed","Body":"In https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/api-diff/preview6/3.0-preview6_System.Collections.Generic.md there is a weird looking constraint `where TKey : object`. Confused at what this was I looked at the source:\r\n\r\nhttps://github.com/dotnet/corefx/blob/5fa3d3b8f89302202091993681391c9b356755a7/src/Common/src/CoreLib/System/Collections/Generic/IDictionary.cs#L14\r\n\r\nIt really is `where TKey : notnull`. The tool that generates these API diffs should be improved.","Url":"https://github.com/dotnet/corefx/issues/38571","RelatedDescription":"Closed issue \"Improve API diff to show \"where T : notnull\"\" (#38571)"},{"Id":"456535345","IsPullRequest":false,"CreatedAt":"2019-06-15T12:58:38","Actor":"DAXaholic","Number":"38575","RawContent":null,"Title":"Unused parameters for custom test error messages","State":"open","Body":"There are a couple of tests which pass custom test error messages to a helper method but those messages are not used.\r\nAt first glance it seems most of these cases were introduced with commit ab1743b4 \r\n\r\nIn the example below the message is passed to `EnsureOperationCanceledExceptionThrown` but never used within that helper method:\r\n\r\nhttps://github.com/dotnet/corefx/blob/ab1743b45213e88295a38e2bf9d80ded09058b18/src/System.Collections.Concurrent/tests/BlockingCollectionCancellationTests.cs#L74-L76\r\n\r\nhttps://github.com/dotnet/corefx/blob/ab1743b45213e88295a38e2bf9d80ded09058b18/src/System.Collections.Concurrent/tests/BlockingCollectionCancellationTests.cs#L163-L168\r\n\r\nThere are more examples like this (e.g. in [BarrierCancellationTests.cs](https://github.com/dotnet/corefx/blob/master/src/System.Threading/tests/BarrierCancellationTests.cs#L49-L52))\r\n\r\nIMHO the current state is a bit confusing so I suggest to either remove those unused parameters altogether or modify the helper methods to use the passed messages.\r\nThe latter approach may bring some parts back to a state which conflicts with the 'spirit' of ab1743b4, therefore I would ask for your opinions about it.","Url":"https://github.com/dotnet/corefx/issues/38575","RelatedDescription":"Open issue \"Unused parameters for custom test error messages\" (#38575)"},{"Id":"456533171","IsPullRequest":true,"CreatedAt":"2019-06-15T12:28:32","Actor":"dotnet-maestro[bot]","Number":"38573","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190615.6\r\n- **Date Produced**: 6/16/2019 6:29 AM\r\n- **Commit**: 23faf5d032feef556f5399b46a92a6e4aef7d84a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 4.6.0-preview7.19315.6\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview7.19315.6\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/38573","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#38573)"},{"Id":"456532830","IsPullRequest":true,"CreatedAt":"2019-06-15T12:24:20","Actor":"dotnet-maestro[bot]","Number":"38572","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190615.05\r\n- **Date Produced**: 6/16/2019 4:43 AM\r\n- **Commit**: f1c72ba8603d2b13484f37f62b5987564a48be12\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview7-27815-05\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-preview7-27815-05\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-preview7-27815-05\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/38572","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#38572)"},{"Id":"456525055","IsPullRequest":false,"CreatedAt":"2019-06-15T10:40:19","Actor":"hannni","Number":"38569","RawContent":null,"Title":"JsonSerializer support for immutable classes and structs.","State":"open","Body":"A common pattern is to make data objects immutable for many different reasons.\r\nFor example `Point`:\r\n\r\n```csharp\r\npublic class Point\r\n{\r\n    int X { get; }\r\n\r\n    int Y { get; }\r\n\r\n    public Point(int x, int y) => (X, Y) = (x, y);\r\n\r\n    public void Deconstruct(out int x, out int y) => (x, y) = (X, Y);\r\n}\r\n```\r\n\r\nIt would be very helpful if `JsonSerializer` supported immutable `class`es/`struct`s like that, especially since Newtonsoft Json.NET supports deserialization through the constructor.\r\n\r\nHowever there are a few issues surrounding immutable types:\r\n\r\n - Constructor parameter names are usually `camelCase` while Properties are `PascalCase`. One way to solve this is by setting `JsonSerializerOptions.PropertyNameCaseInsensitive` in to `true`. Another way is to use the [`Deconstruct`-pattern](https://docs.microsoft.com/en-us/dotnet/csharp/deconstruct#deconstructing-user-defined-types) introduced in C# 7.0, instead of Properties for serialization.\r\n\r\n - There may be several constructors (and `Deconstruct` methods). So it's not always clear which to use. Newtonsoft Json.NET uses a [JsonConstructorAttribute.htm](https://www.newtonsoft.com/json/help/html/JsonConstructorAttribute.htm), which has the disadvantage that the data objects need to know about serialization.\r\n\r\n- Constructor parameters, properties and `Deconstruct` method parameters might not match up, possibly leading to confusing situations where deserializing a previously serialized object does not work.\r\n\r\n- Immutable structs always still have a default parameterless constructor.","Url":"https://github.com/dotnet/corefx/issues/38569","RelatedDescription":"Open issue \"JsonSerializer support for immutable classes and structs.\" (#38569)"},{"Id":"456487294","IsPullRequest":false,"CreatedAt":"2019-06-15T01:37:24","Actor":"NimaAra","Number":"38568","RawContent":null,"Title":"JsonSerializer is unable to deserialize a valid JSON","State":"open","Body":"Given the following payload:\r\n\r\n```\r\n{\r\n    \"picture\": \"http://placehold.it/32x32\",\t\r\n    \"eyeColor\": \"Brown\",\t\r\n    \"registered\": \"2015-05-30T01:50:21 -01:00\"\t\r\n}\r\n```\r\n\r\nAnd the following models:\r\n\r\n```csharp\r\npublic sealed class Model\r\n{\r\n    public Color EyeColor { get; set; }\r\n    public Uri Picture { get; set; }\r\n    public DateTime Registered { get; set; }\r\n}\r\n\r\npublic enum Color\r\n{\r\n    Blue,\r\n    Green,\r\n    Brown\r\n}\r\n```\r\nAn exception is thrown when attempting to deserialize using:\r\n\r\n```csharp\r\nJsonSerializer.Parse<Model>(\r\n    json, \r\n    new JsonSerializerOptions\r\n    {\r\n        IgnoreNullValues = true,\r\n        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,\r\n        WriteIndented = false\r\n    });\r\n```\r\n\r\nException:\r\n\r\n> System.Text.Json.JsonException: 'The JSON value could not be converted to System.Uri. Path: $.picture | LineNumber: 1 | BytePositionInLine: 39.'\r\n\r\nIn fact, it is unable to deserialize **any** of the three properties and **not just the Uri**.\r\n\r\nThis is running against the following:\r\n\r\n```\r\nVersion: 3.0.0-preview6-27804-01\r\nCommit:  fdf81c6faf\r\n```\r\n\r\nThe same payload is deserialized as expected in both [UTF8Json](https://github.com/neuecc/Utf8Json) and JSON.NET.","Url":"https://github.com/dotnet/corefx/issues/38568","RelatedDescription":"Open issue \"JsonSerializer is unable to deserialize a valid JSON\" (#38568)"},{"Id":"456472841","IsPullRequest":true,"CreatedAt":"2019-06-14T23:31:14","Actor":"bartonjs","Number":"38567","RawContent":null,"Title":"Have consistent Dispose behaviors for AsymmetricAlgorithm objects","State":"open","Body":"The AsymmetricAlgorithm types weren't consistent in how they handled Dispose.  There were four predominant behaviors on use-after-Dispose\r\n\r\n* NullReferenceException (mainly from the OpenSsl implementations)\r\n* Generate a new key, like the object was fresh (the public Cng implementations)\r\n* Not notice that anything was Disposed, keep on keepin' on (the private Cng implementations in Algorithms)\r\n* Indirect ObjectDisposedExceptions 95% of the time (the Windows CSP types)\r\n\r\nThis change makes all of the types consistently go into (and stay in) a Disposed state, throwing ObjectDisposedExceptions when asked to do work in that state.\r\n\r\nFixes #33018.","Url":"https://github.com/dotnet/corefx/pull/38567","RelatedDescription":"Open PR \"Have consistent Dispose behaviors for AsymmetricAlgorithm objects\" (#38567)"},{"Id":"456450662","IsPullRequest":true,"CreatedAt":"2019-06-14T21:43:35","Actor":"Jozkee","Number":"38566","RawContent":null,"Title":"Adding unit test to cover NullReferenceException when passing null to a collection","State":"open","Body":"Fixes #37078 \r\nProblem: in v3.0.0-preview4, passing `null` to a collection through `JsonSerializer.ReadAsync` will throw an unexpected NullRef error.\r\n\r\nFix: Since I was able to reproduce the reported issue in v3.0.0-preview4 with the unit test specified in #37078, I added a simplified version of it to our tests. This error does not happen in our latest build and therefore is considered as corrected.\r\n","Url":"https://github.com/dotnet/corefx/pull/38566","RelatedDescription":"Open PR \"Adding unit test to cover NullReferenceException when passing null to a collection\" (#38566)"},{"Id":"456446234","IsPullRequest":false,"CreatedAt":"2019-06-14T21:26:53","Actor":"IvanJosipovic","Number":"38565","RawContent":null,"Title":"[System.Text.Json] Dictionary and Child Object bug ","State":"open","Body":"There appears to be bug in System.Text.Json related Dictionary and Child Objects.\r\n\r\nThe output is really bizzare. As output.Dict ends up getting a new entry that never existed before.\r\n![image](https://user-images.githubusercontent.com/9521987/59538878-11785d80-8eb0-11e9-98af-c5cf3dda620c.png)\r\n\r\n\r\n\r\n.Net Core: 3.0.100-preview6-012264\r\nSystem.Text.Json: 4.6.0-preview6.19303.8\r\n\r\n```\r\n    public class Bug2\r\n    {\r\n        [Fact]\r\n        public void Test()\r\n        {\r\n            var input = new Class1()\r\n            {\r\n                Test = \"value1\",\r\n                Child = new Class2()\r\n            };\r\n\r\n            var output = JsonSerializer.Parse<Class1>(JsonSerializer.ToString(input, new JsonSerializerOptions { IgnoreNullValues = true }));\r\n\r\n            Assert.True(output.Test == \"value1\");\r\n            Assert.Null(output.Dict);\r\n            Assert.NotNull(output.Child);\r\n            Assert.Null(output.Child.Dict);\r\n            Assert.Null(output.Child.Test);\r\n        }\r\n\r\n        class Class1\r\n        {\r\n            public string Test { get; set; }\r\n            public Dictionary<string, string> Dict { get; set; }\r\n            public Class2 Child { get; set; }\r\n        }\r\n\r\n        class Class2\r\n        {\r\n            public string Test { get; set; }\r\n            public Dictionary<string, string> Dict { get; set; }\r\n        }\r\n    }\r\n```","Url":"https://github.com/dotnet/corefx/issues/38565","RelatedDescription":"Open issue \"[System.Text.Json] Dictionary and Child Object bug \" (#38565)"},{"Id":"456439177","IsPullRequest":false,"CreatedAt":"2019-06-14T21:04:03","Actor":"ygoe","Number":"38564","RawContent":null,"Title":"WebSocket client uses a pool on Linux, long reconnect delays","State":"open","Body":"On Windows, the WebSocket client behaviour is pretty simple: Try to connect, when it fails, it will tell you immediately.\r\n\r\nOn Linux that's different. Try to connect, and it will keep retrying for a while and only then tell you that it didn't succeed. That may take a long time. While on Windows I can have retry times of a few seconds and quickly reconnect to a server, on Linux the same code can take 1-2 minutes to reconnect.\r\n\r\nI once dug into the code and found that there's some kind of HTTP client connection pool, and it wasn't used on Windows. It all looked very complex.\r\n\r\nI'm asking if you could change the behaviour on Linux to be the same as Windows: don't try again yourself, let me do that. And fail fast. I can retry faster. This is better for scenarios where the server just went away for a moment to restart and will be back up in a few seconds.\r\n\r\nTested with .NET Core 2.1 and 2.2 on win-x64, linux-x64 and linux-arm.","Url":"https://github.com/dotnet/corefx/issues/38564","RelatedDescription":"Open issue \"WebSocket client uses a pool on Linux, long reconnect delays\" (#38564)"},{"Id":"456423485","IsPullRequest":false,"CreatedAt":"2019-06-14T20:34:15","Actor":"Korporal","Number":"38563","RawContent":null,"Title":"Question - Can exception message be improved?","State":"open","Body":"Consider:\r\n\r\n```cs\r\n\r\nnamespace ConsoleApp19\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n\r\n\r\n            dynamic X = new Class();\r\n\r\n            var anon = new { X.member_1, X.member_2 };\r\n\r\n            Handler(anon.member_1, anon.member_2);\r\n\r\n        }\r\n\r\n        private static void Handler (string M1, string M2)\r\n        {\r\n            ;\r\n        }\r\n    }\r\n\r\n    class Class \r\n    {\r\n        public string member_1;\r\n        public int member_2;\r\n    }\r\n}\r\n```\r\n\r\nAt runtiime this fails with:\r\n\r\n![image](https://user-images.githubusercontent.com/12262952/59536471-a8d9b280-8ea8-11e9-974e-ee2e355bc901.png)\r\n\r\nBut it would be very helpful if the message in this situation was something like:\r\n\r\n**\"No overload of 'Handler' was found that accepts argument types dynamic(string), dynamic(int)\".**\r\n\r\nAt the time it was far from clear to us what the problem was, we initially thought some nuget version was at fault, the package (in our case Handler was a call on a class defined in a nuget package) at runtime somehow differing from that used at compile time.\r\n\r\nIt also wasn't clear until later that the members in the anonymous type were also dynamic, the perception was that `anon` was dynamic but that it's members were of a concrete type, which of course they won't be but it just wasn't crystal clear as we examined the code (it was hard to repro the crash, we only had a bug report and stack).\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/38563","RelatedDescription":"Open issue \"Question - Can exception message be improved?\" (#38563)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"456725451","IsPullRequest":false,"CreatedAt":"2019-06-17T03:28:22","Actor":"jcouv","Number":"36497","RawContent":null,"Title":"UseImplicitType incorrectly offered on `out _ `","State":"open","Body":"![image](https://user-images.githubusercontent.com/12466233/59576565-2a7e3b80-9075-11e9-8d0f-b085f873b16f.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/36497","RelatedDescription":"Open issue \"UseImplicitType incorrectly offered on `out _ `\" (#36497)"},{"Id":"456701204","IsPullRequest":false,"CreatedAt":"2019-06-17T00:51:44","Actor":"gafter","Number":"36496","RawContent":null,"Title":"Compiler \"Failed to emit module\" with empty var tuple pattern","State":"open","Body":"The following program does not compile:\r\n``` c#\r\npublic class C\r\n{\r\n    public static void Main() { }\r\n    public void M(C c)\r\n    {\r\n        if (c is var ()) { }\r\n    }\r\n    public void Deconstruct() { }\r\n}\r\n```\r\nThe error is \"error CS7038: Failed to emit module\"\r\n","Url":"https://github.com/dotnet/roslyn/issues/36496","RelatedDescription":"Open issue \"Compiler \"Failed to emit module\" with empty var tuple pattern\" (#36496)"},{"Id":"456672408","IsPullRequest":false,"CreatedAt":"2019-06-16T19:12:14","Actor":"paulomorgado","Number":"36495","RawContent":null,"Title":"Consider adding a way to add information to all reported diagnostics","State":"open","Body":"I'm building a tool to process the errorlog and I need to know the assembly, type and member each diagnostic of a successful compilation for each reported diagnostic.","Url":"https://github.com/dotnet/roslyn/issues/36495","RelatedDescription":"Open issue \"Consider adding a way to add information to all reported diagnostics\" (#36495)"},{"Id":"456640049","IsPullRequest":true,"CreatedAt":"2019-06-16T13:11:35","Actor":"YairHalberstadt","Number":"36494","RawContent":null,"Title":"Do not suggest or diagnose use compound assignment when right hand of…","State":"open","Body":"… binary operator is a throw expression\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/36467","Url":"https://github.com/dotnet/roslyn/pull/36494","RelatedDescription":"Open PR \"Do not suggest or diagnose use compound assignment when right hand of…\" (#36494)"},{"Id":"456543416","IsPullRequest":true,"CreatedAt":"2019-06-15T14:34:08","Actor":"gnovack","Number":"36493","RawContent":null,"Title":"Preserve local function preceding whitespace for Issue #35489","State":"open","Body":"This resolves #35489 by preserving the original trivia in the 'Make local function static' code fix. ","Url":"https://github.com/dotnet/roslyn/pull/36493","RelatedDescription":"Open PR \"Preserve local function preceding whitespace for Issue #35489\" (#36493)"},{"Id":"456541204","IsPullRequest":false,"CreatedAt":"2019-06-15T14:08:29","Actor":"avin-kavish","Number":"36492","RawContent":null,"Title":"Bug: Generic Default Value Literal with == operator","State":"open","Body":"**Version Used**:  7.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Attempt to compile the following\r\n\r\n```c#\r\npublic void Foo<T>(T value){\r\n\r\n    if (value == default)\r\n}\r\n```\r\n**Expected Behavior**: Compile error similar to `value == default(T)`\r\n\r\n```c#\r\npublic void Foo<T>(T value){\r\n\r\n    if (value == default(T)) // <--- compile error as expected\r\n}\r\n```\r\n\r\n\r\n**Actual Behavior**: compiles into a null check for all types including value types and leads to situations where when `T is int` and `value=0`, `value == default` evaluates to false.\r\n","Url":"https://github.com/dotnet/roslyn/issues/36492","RelatedDescription":"Open issue \"Bug: Generic Default Value Literal with == operator\" (#36492)"},{"Id":"456531018","IsPullRequest":true,"CreatedAt":"2019-06-15T14:00:20","Actor":"dotnet-bot","Number":"36487","RawContent":null,"Title":"Merge master to features/lspSupport","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/lspSupport.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36487","RelatedDescription":"Closed or merged PR \"Merge master to features/lspSupport\" (#36487)"},{"Id":"456531037","IsPullRequest":true,"CreatedAt":"2019-06-15T14:00:14","Actor":"dotnet-bot","Number":"36488","RawContent":null,"Title":"Merge master-vs-deps to features/razorSupport2","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into features/razorSupport2.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-features/razorSupport2\ngit reset --hard upstream/features/razorSupport2\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-features/razorSupport2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36488","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to features/razorSupport2\" (#36488)"},{"Id":"456531049","IsPullRequest":true,"CreatedAt":"2019-06-15T14:00:07","Actor":"dotnet-bot","Number":"36490","RawContent":null,"Title":"Merge master to features/param-nullchecking","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/param-nullchecking.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/param-nullchecking\ngit reset --hard upstream/features/param-nullchecking\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/param-nullchecking --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36490","RelatedDescription":"Closed or merged PR \"Merge master to features/param-nullchecking\" (#36490)"},{"Id":"456531004","IsPullRequest":true,"CreatedAt":"2019-06-15T13:30:13","Actor":"dotnet-bot","Number":"36486","RawContent":null,"Title":"Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps\ngit reset --hard upstream/release/dev16.3-preview1-vs-deps\ngit merge upstream/release/dev16.3-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36486","RelatedDescription":"Closed or merged PR \"Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps\" (#36486)"},{"Id":"456537915","IsPullRequest":true,"CreatedAt":"2019-06-15T13:29:15","Actor":"sharwell","Number":"36491","RawContent":null,"Title":"Show <value> documentation in Metadata as Source and Object Browser","State":"open","Body":"* Show `<value>` documentation in Metadata as Source\r\n* Show `<value>` documentation in Object Browser\r\n\r\nThis establishes the initial data flow and first features as a prerequisite for #31618 and #8627.","Url":"https://github.com/dotnet/roslyn/pull/36491","RelatedDescription":"Open PR \"Show <value> documentation in Metadata as Source and Object Browser\" (#36491)"},{"Id":"456531041","IsPullRequest":true,"CreatedAt":"2019-06-15T12:02:22","Actor":"dotnet-bot","Number":"36489","RawContent":null,"Title":"Merge master to demos/records","State":"open","Body":"\nThis is an automatically generated pull request from master into demos/records.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-demos/records\ngit reset --hard upstream/demos/records\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-demos/records --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36489","RelatedDescription":"Open PR \"Merge master to demos/records\" (#36489)"},{"Id":"456530994","IsPullRequest":true,"CreatedAt":"2019-06-15T12:01:53","Actor":"dotnet-bot","Number":"36485","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36485","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#36485)"},{"Id":"456530936","IsPullRequest":true,"CreatedAt":"2019-06-15T12:01:15","Actor":"dotnet-bot","Number":"36484","RawContent":null,"Title":"Merge master-vs-deps to release/dev16.3-preview1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master-vs-deps into release/dev16.3-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps\ngit reset --hard upstream/release/dev16.3-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-release/dev16.3-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36484","RelatedDescription":"Open PR \"Merge master-vs-deps to release/dev16.3-preview1-vs-deps\" (#36484)"},{"Id":"456530928","IsPullRequest":true,"CreatedAt":"2019-06-15T12:01:08","Actor":"dotnet-bot","Number":"36483","RawContent":null,"Title":"Merge release/dev16.2-preview3-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview3-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.2-preview3-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36483","RelatedDescription":"Open PR \"Merge release/dev16.2-preview3-vs-deps to master-vs-deps\" (#36483)"},{"Id":"456530881","IsPullRequest":true,"CreatedAt":"2019-06-15T12:00:36","Actor":"dotnet-bot","Number":"36482","RawContent":null,"Title":"Merge master to release/dev16.3-preview1","State":"open","Body":"\nThis is an automatically generated pull request from master into release/dev16.3-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.3-preview1\ngit reset --hard upstream/release/dev16.3-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.3-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36482","RelatedDescription":"Open PR \"Merge master to release/dev16.3-preview1\" (#36482)"},{"Id":"456458024","IsPullRequest":true,"CreatedAt":"2019-06-15T04:09:26","Actor":"dotnet-bot","Number":"36474","RawContent":null,"Title":"Merge release/dev16.2-preview3-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2-preview3-vs-deps into master-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.2-preview3-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-preview3-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36474","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2-preview3-vs-deps to master-vs-deps\" (#36474)"},{"Id":"456490387","IsPullRequest":true,"CreatedAt":"2019-06-15T02:21:50","Actor":"jmarolf","Number":"36481","RawContent":null,"Title":"return Guid.Default if no Guid is present in the project","State":"open","Body":"In [this PR](https://github.com/dotnet/roslyn/pull/35746) we inadvertently made a change that would cause the language service to fail to initialize if there was no project guid.\r\n\r\nUnfortunately there are a lot of projects in the world that depend on this behavior and it is unlikely that we could ship this way.\r\n\r\nfixes [AB#915798](https://dev.azure.com/devdiv/DevDiv/_workitems/edit/915798)\r\n\r\nCC: @jinujoseph ","Url":"https://github.com/dotnet/roslyn/pull/36481","RelatedDescription":"Open PR \"return Guid.Default if no Guid is present in the project\" (#36481)"},{"Id":"456458202","IsPullRequest":true,"CreatedAt":"2019-06-15T01:00:17","Actor":"dotnet-bot","Number":"36475","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36475","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#36475)"},{"Id":"456458235","IsPullRequest":true,"CreatedAt":"2019-06-15T01:00:11","Actor":"dotnet-bot","Number":"36476","RawContent":null,"Title":"Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.3-preview1 into release/dev16.3-preview1-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps\ngit reset --hard upstream/release/dev16.3-preview1-vs-deps\ngit merge upstream/release/dev16.3-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-preview1-to-release/dev16.3-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36476","RelatedDescription":"Closed or merged PR \"Merge release/dev16.3-preview1 to release/dev16.3-preview1-vs-deps\" (#36476)"},{"Id":"456458320","IsPullRequest":true,"CreatedAt":"2019-06-15T01:00:06","Actor":"dotnet-bot","Number":"36478","RawContent":null,"Title":"Merge master to demos/records","State":"closed","Body":"\nThis is an automatically generated pull request from master into demos/records.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-demos/records\ngit reset --hard upstream/demos/records\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-demos/records --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36478","RelatedDescription":"Closed or merged PR \"Merge master to demos/records\" (#36478)"},{"Id":"456457892","IsPullRequest":true,"CreatedAt":"2019-06-15T00:13:29","Actor":"dotnet-bot","Number":"36473","RawContent":null,"Title":"Merge master to release/dev16.3-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into release/dev16.3-preview1.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.3-preview1\ngit reset --hard upstream/release/dev16.3-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.3-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36473","RelatedDescription":"Closed or merged PR \"Merge master to release/dev16.3-preview1\" (#36473)"},{"Id":"456458264","IsPullRequest":true,"CreatedAt":"2019-06-15T00:13:19","Actor":"dotnet-bot","Number":"36477","RawContent":null,"Title":"Merge master to features/lspSupport","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/lspSupport.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36477","RelatedDescription":"Closed or merged PR \"Merge master to features/lspSupport\" (#36477)"},{"Id":"456458342","IsPullRequest":true,"CreatedAt":"2019-06-15T00:13:13","Actor":"dotnet-bot","Number":"36479","RawContent":null,"Title":"Merge master to features/param-nullchecking","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/param-nullchecking.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/param-nullchecking\ngit reset --hard upstream/features/param-nullchecking\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/param-nullchecking --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/36479","RelatedDescription":"Closed or merged PR \"Merge master to features/param-nullchecking\" (#36479)"},{"Id":"456446206","IsPullRequest":true,"CreatedAt":"2019-06-14T23:08:21","Actor":"TIHan","Number":"36469","RawContent":null,"Title":"Added null checks on F# external access services","State":"closed","Body":"We need to check for nulls when we map F# types to Roslyn types, vice versa, for the shim work. We got a crash in `FSharpSignatureHelpProvider` for this reason. I fixed the sig help provider, but I also put more null checks in the other places that potentially could need it.","Url":"https://github.com/dotnet/roslyn/pull/36469","RelatedDescription":"Closed or merged PR \"Added null checks on F# external access services\" (#36469)"},{"Id":"456463162","IsPullRequest":false,"CreatedAt":"2019-06-14T22:37:46","Actor":"Eilon","Number":"36480","RawContent":null,"Title":"Code Fix for IDE0067 makes code not compile (sometimes?)","State":"open","Body":"**Version Used**: \r\nVS2019 16.2.0 Preview 2.0\r\n.NET Core (tried with 2.1 and 3.0 Preview 5)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create new .NET Core project (console, class lib, etc.)\r\n2. Add this code:\r\n```c#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        var x = new FooDisposable();\r\n\r\n        var y = x.GetSomething();\r\n\r\n        Console.WriteLine(y);\r\n    }\r\n\r\n    public class FooDisposable : IDisposable\r\n    {\r\n        public int GetSomething() => 1;\r\n        public void Dispose() => throw new NotImplementedException();\r\n    }\r\n}\r\n```\r\n3. Accept the code fix suggestion to wrap `x` in a `using` statement for the `new FooDisposable()` expression:\r\n![image](https://user-images.githubusercontent.com/202643/59542216-8c924180-8eb9-11e9-8e65-3468b0a1b030.png)\r\n4. It generates invalid code:\r\n```c#\r\n        using (var x = new FooDisposable())\r\n        {\r\n            var y = x.GetSomething();\r\n        }\r\n\r\n        Console.WriteLine(y); // 'y' is no longer in scope here\r\n```\r\n\r\nNOTE: For some reason I can't always get this code fix to show up. Sometimes it shows up, sometimes it doesn't, with the exact same code. If I undo/redo/edit the code I can toggle it, but not consistently.\r\n\r\n**Expected Behavior**:\r\nI thought code fixes should generate working code - at least in relatively trivial cases? E.g.:\r\n```c#\r\n        using (var x = new FooDisposable())\r\n        {\r\n            var y = x.GetSomething();\r\n            Console.WriteLine(y); // 'y' is still in scope\r\n        }\r\n```\r\n\r\n**Actual Behavior**:\r\nInvalid code is generated\r\n","Url":"https://github.com/dotnet/roslyn/issues/36480","RelatedDescription":"Open issue \"Code Fix for IDE0067 makes code not compile (sometimes?)\" (#36480)"},{"Id":"456457165","IsPullRequest":false,"CreatedAt":"2019-06-14T22:09:48","Actor":"jasonmalinowski","Number":"36472","RawContent":null,"Title":"Completion in a tuple isn't always treated as an expression","State":"open","Body":"1. Update a new console app with this code:\r\n\r\n```\r\nstatic void Main(string[] args)\r\n{\r\n    (int i, string s) tuple;\r\n    Main(args);\r\n}\r\n```\r\n\r\n2. Before Main(args), try to write:\r\n\r\n```\r\ntuple = (default, null)\r\n```\r\n\r\n**Expected:** `default` appears in the completion list\r\n**Actual:** it doesn't.\r\n\r\n**Note:** this doesn't happen if you remove the call. I suspect because we're then parsing it as a tuple instead of a cast.","Url":"https://github.com/dotnet/roslyn/issues/36472","RelatedDescription":"Open issue \"Completion in a tuple isn't always treated as an expression\" (#36472)"},{"Id":"456453938","IsPullRequest":true,"CreatedAt":"2019-06-14T21:56:04","Actor":"fayrose","Number":"36471","RawContent":null,"Title":"Method Declaration and Indexed Variable Lowering/Code Gen","State":"open","Body":"Related to #36024\r\n\r\nThis only covers the base case of method declarations and indexed variables. __arglist is prototyped due to the question of handling its parameters (right now null-checked parameters to arglist are being incorrectly typed as postfix expressions).","Url":"https://github.com/dotnet/roslyn/pull/36471","RelatedDescription":"Open PR \"Method Declaration and Indexed Variable Lowering/Code Gen\" (#36471)"},{"Id":"456450005","IsPullRequest":true,"CreatedAt":"2019-06-14T21:41:12","Actor":"sharwell","Number":"36470","RawContent":null,"Title":"Fix configuration of accessibilities in editorconfig","State":"open","Body":"🤦‍♂️","Url":"https://github.com/dotnet/roslyn/pull/36470","RelatedDescription":"Open PR \"Fix configuration of accessibilities in editorconfig\" (#36470)"},{"Id":"456445845","IsPullRequest":false,"CreatedAt":"2019-06-14T21:25:35","Actor":"sharwell","Number":"36468","RawContent":null,"Title":"Use implicit type Fix All should simplify deconstructions","State":"open","Body":"**Version Used**: 16.2 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Always prefer `var`\r\n2. Write a deconstruction variable declaration as:\r\n\r\n    ```csharp\r\n    (bool x, bool y) = (true, true);\r\n    ```\r\n\r\n3. Apply a Fix All in Document to use implicit types\r\n\r\n**Expected Behavior**:\r\n\r\n```csharp\r\nvar (x, y) = (true, true);\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```csharp\r\n(var x, var y) = (true, true);\r\n```","Url":"https://github.com/dotnet/roslyn/issues/36468","RelatedDescription":"Open issue \"Use implicit type Fix All should simplify deconstructions\" (#36468)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"456684435","IsPullRequest":true,"CreatedAt":"2019-06-17T01:40:50","Actor":"MichalStrehovsky","Number":"7532","RawContent":null,"Title":"Do not generate object array thunk for byref-returning delegates","State":"closed","Body":"Object array thunks are the weird thunks we make for delegates for the LINQ expression interpreter that dispatch to a method that takes an object array and returns object. There's no way to turn object returned from that method into a byref so we shouldn't try to make the thunks.\r\n\r\nAlso hit an assert in dynamic invoke method thunk, so fixed that too.\r\n\r\nFixes #7526.","Url":"https://github.com/dotnet/corert/pull/7532","RelatedDescription":"Closed or merged PR \"Do not generate object array thunk for byref-returning delegates\" (#7532)"},{"Id":"456480061","IsPullRequest":false,"CreatedAt":"2019-06-17T01:40:50","Actor":"kvittokonito","Number":"7526","RawContent":null,"Title":"Compilation error when using \"ref\" returns ","State":"closed","Body":"I am getting the following error:\r\n```csharp\r\nEXEC : warning : RD.XML processing will change before release (https://github.com/dotnet/corert/issues/5001) [Path/To/Project/With/Confidential/Class.csproj]\r\nEXEC : error : [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: SomeConfidentialClass ByRef, ? [Path/To/Project/With/Confidential/Class.csproj]\r\n  Internal.TypeSystem.TypeSystemException+TypeLoadException: [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: SomeConfidentialClass ByRef, ?\r\n     at Internal.TypeSystem.ThrowHelper.ThrowTypeLoadException(ExceptionStringID id, String typeName, String assemblyName)\r\n     at ILCompiler.DependencyAnalysis.NodeFactory.CreateConstructedTypeNode(TypeDesc type)\r\n     at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n     at ILCompiler.DependencyAnalysis.ReadyToRunGenericHelperNode.InstantiateDependencies(NodeFactory factory, Instantiation typeInstantiation, Instantiation methodInstantiation)\r\n     at ILCompiler.DependencyAnalysis.ShadowConcreteMethodNode.GetStaticDependencies(NodeFactory factory)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.GetStaticDependenciesImpl(DependencyNodeCore`1 node)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n```\r\n\r\nWhen using \"ref\" returns like this:\r\n```csharp\r\nprivate ITransform _transform;\r\npublic ref ITransform TransformByRef => ref _transform;\r\n```\r\n\r\nIs this feature not supported in CoreRT?","Url":"https://github.com/dotnet/corert/issues/7526","RelatedDescription":"Closed issue \"Compilation error when using \"ref\" returns \" (#7526)"},{"Id":"456690465","IsPullRequest":true,"CreatedAt":"2019-06-16T22:50:15","Actor":"trylek","Number":"7533","RawContent":null,"Title":"More precise handling of instantiating stubs according to CoreCLR","State":"open","Body":"I have found a few places in ceeInfoGetCallInfo where I originally\r\ndidn't fully understand the intent of the CoreCLR code so\r\nI converted it imprecisely. This change fixes two such imprecisions\r\nregarding instantiating stubs and, in doing so, fixes about\r\n300 more CoreCLR classloader Pri#1 tests.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7533","RelatedDescription":"Open PR \"More precise handling of instantiating stubs according to CoreCLR\" (#7533)"},{"Id":"456575788","IsPullRequest":true,"CreatedAt":"2019-06-16T15:45:55","Actor":"MichalStrehovsky","Number":"7530","RawContent":null,"Title":"Implement obsolete Marshal.Read APIs","State":"closed","Body":"If there's a bad obsolete API we added to .NET Core, chances are WinForms uses it.","Url":"https://github.com/dotnet/corert/pull/7530","RelatedDescription":"Closed or merged PR \"Implement obsolete Marshal.Read APIs\" (#7530)"},{"Id":"456568649","IsPullRequest":true,"CreatedAt":"2019-06-16T15:43:39","Actor":"MichalStrehovsky","Number":"7527","RawContent":null,"Title":"Fix CharSet on GetProcAddress","State":"closed","Body":"This flavor is used in NativeLibrary.GetSymbol so we didn't hit this before.","Url":"https://github.com/dotnet/corert/pull/7527","RelatedDescription":"Closed or merged PR \"Fix CharSet on GetProcAddress\" (#7527)"},{"Id":"456568694","IsPullRequest":true,"CreatedAt":"2019-06-16T05:16:48","Actor":"MichalStrehovsky","Number":"7529","RawContent":null,"Title":"Scan for `Marshal.SizeOf(Type)` usage","State":"closed","Body":"WinForms codebase is full of this pattern and there's no reason we couldn't misuse the reflection method body scanner to scan for this too.","Url":"https://github.com/dotnet/corert/pull/7529","RelatedDescription":"Closed or merged PR \"Scan for `Marshal.SizeOf(Type)` usage\" (#7529)"},{"Id":"456568676","IsPullRequest":true,"CreatedAt":"2019-06-16T04:27:48","Actor":"MichalStrehovsky","Number":"7528","RawContent":null,"Title":"Implement generation of function pointer metadata","State":"closed","Body":"Hit this while accidentally compiling WPF, but might as well just implement this.","Url":"https://github.com/dotnet/corert/pull/7528","RelatedDescription":"Closed or merged PR \"Implement generation of function pointer metadata\" (#7528)"},{"Id":"456580659","IsPullRequest":true,"CreatedAt":"2019-06-15T22:13:47","Actor":"trylek","Number":"7531","RawContent":null,"Title":"Initial support for R2RDump in SuperIlc","State":"open","Body":"I have added initial minimalistic support for R2RDump to SuperIlc.\r\nUsing the new switch -r2r <path> we can specify the path to the\r\nR2RDump tool and SuperIlc will use it to disassemble each\r\nsuccessfully compiled assembly in the \"naked\" and \"raw\" mode\r\n(from a completely selfish point of view these are the modes I'm\r\nusing most of the time). These dumps make it much easier to compare\r\nCPAOT and Crossgen output when analyzing the remaining failing\r\ntests.\r\n\r\nAs a caveat this cannot be yet added to automated testing because\r\nof the known backlog item \"R2RDump build doesn't publish\r\nCoreDisTools.dll it requires\" (even though the library is available\r\nin the build outputs and just copying it next to R2RDump fixes the\r\nproblem - that's what I've been doing since the very beginning).\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7531","RelatedDescription":"Open PR \"Initial support for R2RDump in SuperIlc\" (#7531)"},{"Id":"456464202","IsPullRequest":true,"CreatedAt":"2019-06-14T22:43:05","Actor":"jkotas","Number":"7525","RawContent":null,"Title":"Update libunwind to latest","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7525","RelatedDescription":"Open PR \"Update libunwind to latest\" (#7525)"},{"Id":"456373747","IsPullRequest":false,"CreatedAt":"2019-06-14T18:14:20","Actor":"christianscheuer","Number":"7524","RawContent":null,"Title":"Finalize Alpine Linux / linux-musl-x64 support","State":"open","Body":"Thanks to @janvorli's fix in #7522 we can now build the objwriter package on Alpine Linux (in the Docker image from https://github.com/dotnet/corert/issues/7510#issuecomment-501516667 - mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.6-WithNode-cfdd435-20190521001804), by invoking:\r\n\r\n```\r\n./build.sh objwriter Release\r\n```\r\n\r\nHowever, even while the ObjectWriter package itself builds, CoreRT does not pick it up. CoreRT expects to find a published ObjectWriter package, musl edition, in the nuget feed. The error message when invoking the above is therefore (after having successfully built the native components of CoreRT + objwriter):\r\n\r\n```\r\n Restoring packages for /corertalpine/src/ILCompiler/ObjectWriter/ObjectWriter.depproj...\r\n  Installing Microsoft.DotNet.ObjectWriter 1.0.0-alpha-27619-05.\r\n/corertalpine/src/ILCompiler/ObjectWriter/ObjectWriter.depproj : error NU1101: Unable to find package runtime.linux-musl-x64.Microsoft.DotNet.ObjectWriter. No packages exist with this id in source(s): dotnetfeed dotnet-core, dotnetfeed dotnet-coreclr, myget.org dotnet-buildtools, myget.org dotnet-core, myget.org dotnet-corefxlab, myget.org system-commandline, nuget.org\r\n  Generating MSBuild file /corertalpine/bin/obj/Linux.x64.Release/ObjectWriter/ObjectWriter.depproj.nuget.g.props.\r\n  Generating MSBuild file /corertalpine/bin/obj/Linux.x64.Release/ObjectWriter/ObjectWriter.depproj.nuget.g.targets.\r\n```\r\n\r\n### Proper fix: Publish linux-musl-x64 packages\r\nI suspect the best longtime fix would be for CoreRT to publish linux-musl-x64 packages by adding a linux-musl-x64 flavor to the `eng/platform-matrix.yml`, if I'm understanding the infrastructure correctly.\r\nIf this is the way going forward, would it then be as simple as just adding it there, or do things need to be changed in other places too?\r\nSince CoreCLR builds musl flavors and we can now build those manually for CoreRT with janvorli's fix, I suspect this should be a pretty simple change, right?\r\n\r\n### Workaround for now: Patch CoreRT to pick up the built objwriter package\r\nFor now I'm fine with having to build CoreRT myself on Alpine Linux, even if we need to do some manual patches to the tree to allow CoreRT to pick up the built objwriter package.\r\nBut, how should I patch it so that it does that? I'm assuming the ObjectWriter.depproj is part of the solution (or the problem).\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7524","RelatedDescription":"Open issue \"Finalize Alpine Linux / linux-musl-x64 support\" (#7524)"},{"Id":"455898750","IsPullRequest":true,"CreatedAt":"2019-06-13T23:26:35","Actor":"janvorli","Number":"7522","RawContent":null,"Title":"Fix build with clang on Alpine Linux","State":"closed","Body":"On Alpine Linux (and some other Linuxes as well), there versioned\r\nfile name for clang exists only for clang and not clang++. So\r\nthere is e.g. clang-5.0, clang and clang++. This makes build to\r\npick only the C compiler, but leaves the C++ unspecified, so\r\ncmake picks g++ and the build fails.\r\n\r\nThis change fixes it by ensuring that we pick both clang and clang++\r\neither unversioned or versioned.","Url":"https://github.com/dotnet/corert/pull/7522","RelatedDescription":"Closed or merged PR \"Fix build with clang on Alpine Linux\" (#7522)"},{"Id":"455960432","IsPullRequest":true,"CreatedAt":"2019-06-13T23:17:23","Actor":"Dotnet-GitSync-Bot","Number":"7523","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/7523","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7523)"},{"Id":"454944688","IsPullRequest":true,"CreatedAt":"2019-06-13T18:54:32","Actor":"trylek","Number":"7516","RawContent":null,"Title":"Method call info cleanup pt. 1 - wrong method called","State":"closed","Body":"This change fixes about 280 Pri#1 Loader/classloader tests where\r\npreviously we were using slightly incorrect method info. This\r\ncorresponds to the biggest error bucket \"wrong method called\".\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7516","RelatedDescription":"Closed or merged PR \"Method call info cleanup pt. 1 - wrong method called\" (#7516)"},{"Id":"455716021","IsPullRequest":false,"CreatedAt":"2019-06-13T12:36:12","Actor":"BaCtr0x","Number":"7521","RawContent":null,"Title":"VS Code 2019 cannot open file 'kernel32.lib'","State":"open","Body":"I reinstallt everything and checked my SDK version.\r\nThe testprogram is a simple hello world program.\r\nThe error promt is:\r\nMicrosoft (R) C/C++ Optimizing Compiler Version 19.21.27702.2 for x86\r\nCopyright (C) Microsoft Corporation.  All rights reserved.\r\n\r\nhello.cpp\r\nMicrosoft (R) Incremental Linker Version 14.21.27702.2\r\nCopyright (C) Microsoft Corporation.  All rights reserved.\r\n\r\n/out:hello.exe\r\nhello.obj\r\nLINK : fatal error LNK1104: cannot open file 'kernel32.lib'","Url":"https://github.com/dotnet/corert/issues/7521","RelatedDescription":"Open issue \"VS Code 2019 cannot open file 'kernel32.lib'\" (#7521)"},{"Id":"455490633","IsPullRequest":true,"CreatedAt":"2019-06-13T04:20:34","Actor":"jkotas","Number":"7519","RawContent":null,"Title":"Delete unnecessary code","State":"closed","Body":"Fixes some errors while building with clang5.0","Url":"https://github.com/dotnet/corert/pull/7519","RelatedDescription":"Closed or merged PR \"Delete unnecessary code\" (#7519)"},{"Id":"455496226","IsPullRequest":true,"CreatedAt":"2019-06-13T04:20:10","Actor":"Dotnet-GitSync-Bot","Number":"7520","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @stephentoub @dotnet-maestro[bot]","Url":"https://github.com/dotnet/corert/pull/7520","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7520)"},{"Id":"455223188","IsPullRequest":true,"CreatedAt":"2019-06-13T01:37:18","Actor":"Dotnet-GitSync-Bot","Number":"7518","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7518","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7518)"},{"Id":"454961949","IsPullRequest":true,"CreatedAt":"2019-06-12T02:02:06","Actor":"Suchiman","Number":"7517","RawContent":null,"Title":"Unify GC sources and implement GetGCMemoryInfo","State":"closed","Body":"The first commit copies everything from coreclr (mainly formatting differences).\r\n\r\nThe second commit implements `GC.GetGCMemoryInfo` for #5680.\r\nI don't know how to test it though, the simple tests in corert yield\r\n> 'GC' does not contain a definition for 'GetGCMemoryInfo'\r\n\r\nand the [instructions](https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md#compiling-source-to-native-code-using-the-ilcompiler-you-built) are failing for me because\r\n> error MSB4064: The \"DotNetAppHostExecutableName\" parameter is not supported by the \"ComputeManagedAssemblies\" task. Verify the parameter exists on the task, and it is a settable public instance property","Url":"https://github.com/dotnet/corert/pull/7517","RelatedDescription":"Closed or merged PR \"Unify GC sources and implement GetGCMemoryInfo\" (#7517)"},{"Id":"454352531","IsPullRequest":true,"CreatedAt":"2019-06-11T23:02:11","Actor":"trylek","Number":"7507","RawContent":null,"Title":"Constrained calls pt. 2 - actually add constrained type to MethodWithToken","State":"closed","Body":"This change modifies MethodWithToken to optionally include the constrained type information and changes most places in the CPAOT compiler that were previously passing the separated triplet of MethodDesc / ModuleToken / TypeDesc to use the newly beefed up MethodWithToken.\r\n\r\nAs additional changes of note I removed the \"originalMethod\" parameter to MethodEntrypoint as it was almost unused and I deleted an orphaned method MethodGenericDictionary. I have decided to keep this change mostly mechanical to make git history cleaner.\r\n\r\nThanks\r\n\r\nTomas\r\n","Url":"https://github.com/dotnet/corert/pull/7507","RelatedDescription":"Closed or merged PR \"Constrained calls pt. 2 - actually add constrained type to MethodWithToken\" (#7507)"},{"Id":"454902237","IsPullRequest":true,"CreatedAt":"2019-06-11T23:01:35","Actor":"Dotnet-GitSync-Bot","Number":"7515","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @kouvel","Url":"https://github.com/dotnet/corert/pull/7515","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7515)"},{"Id":"454726423","IsPullRequest":true,"CreatedAt":"2019-06-11T17:57:05","Actor":"Suchiman","Number":"7513","RawContent":null,"Title":"Port GC changes from coreclr - 17","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7512\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/141926d90c54bb358cfe8d9eb641c88e94639a8c):**\r\n- https://github.com/dotnet/coreclr/commit/2832f54a6602cd4c0dff4fa65163345ab3ad953c (already merged)\r\n- https://github.com/dotnet/coreclr/commit/5a34da317e3f8cef7895d6d4ad6ed75f3a79d38e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/f143d0e3e1aff6fc5c3470a3a6e2d0732c23b7ce (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/b271aff1fa54c1385143f3b45c1bf3af01c901cd (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/e985b20260631c98a09f08cb67e93d690a6ffd0b (not applicable)\r\n- https://github.com/dotnet/coreclr/commit/67c83438bad8cd8f0ba20b370e4cace746ef57d1 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/934d73fea95b4c479b67fee0ff53caea4a325ee5 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/718598334310f6ad331ba2893ee4557beffaa74c (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/bdb995987178231ba541f22143cb3cab56309daa (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/2a175563b5c1b04083da6841f84a991ac576446a (manual port)\r\n- https://github.com/dotnet/coreclr/commit/b676246c1dd880b7290a1313cdac309fe020aa6f (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/3489e56c875c6144c729b51063300c7d60b1ae31 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/4ca032d49b0718eb40f2105f94db2b243cf94957 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/476dc1cb88a0dcedd891a0ef7a2e05d5c2f94f68 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/4c82068adb046eee3573984392a0d1e774062ae0 (gc only port, omitted changes)","Url":"https://github.com/dotnet/corert/pull/7513","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 17\" (#7513)"},{"Id":"454781157","IsPullRequest":true,"CreatedAt":"2019-06-11T17:56:14","Actor":"Dotnet-GitSync-Bot","Number":"7514","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7514","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7514)"},{"Id":"454599070","IsPullRequest":true,"CreatedAt":"2019-06-11T14:07:29","Actor":"Suchiman","Number":"7512","RawContent":null,"Title":"Port GC changes from coreclr - 16","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7511\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/060990945a0117cb824b9d1c1e6c3a336533a3ee):**\r\n- https://github.com/dotnet/coreclr/commit/cee1a8c9d9c6669318d1567c85457fbcd642587d (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/3c07febf02b67c4c5f8eef846d5aa581372e454e (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/fe355a617ff5e56c8607c2b12c650c3b95c5cfbd (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/77bd2c4aab50f84d2a0a94275072ee52f295757c (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/b56d39c5812db4780c818140083cf753aca8ca5a (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/473993d3b9b1a50931392c7689872d4f16f140f7 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/577f8b84113fdf5ff001732b93da6733842123ec (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bef5dd6507f2e8ac163941646ef9936d6ced3715 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0d9114b1f5d0b125f04f1ec17064a761fb26ba66 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/4029007b7edd290c236901a246ef48ac3e9de4b6 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/3f21a0f6cc8e0036ad536c791d7877a35d22cd01 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/c2dacd2025145c586a5569408c1427899a3767cc (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/a9b6851ad1a9551f3f654b654b094147b50e5999 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/8d93bd9080f47efd87dc5420a6e600f8dc432659 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/9733c30b27ca90d3eeb07928df6e6e5861c203bb (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/141926d90c54bb358cfe8d9eb641c88e94639a8c (gc only port)","Url":"https://github.com/dotnet/corert/pull/7512","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 16\" (#7512)"},{"Id":"454427739","IsPullRequest":true,"CreatedAt":"2019-06-11T08:59:13","Actor":"Suchiman","Number":"7511","RawContent":null,"Title":"Port GC changes from coreclr - 15","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7508\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/4932d0f6fa87b9a6e3293aacd35cecedde44d87a):**\r\n- https://github.com/dotnet/coreclr/commit/dacab04a17e0cd4ed2b321be936f233cf75bb7e8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/c1801e85024add717f518feb6a9caed60d54500f (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/5a97d8e9f14763a4ff90d14d045f0173e8d4b944 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/4685a1e008ad7cf4118e8778d89e63d87ca5b7b6 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/23fbf7e7ab231876b9d54b52bac044cdde159118 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/66009329a187634dc432854cdd7c893d972156eb (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/07f9f2f101754c38570ed75ce9a7083090769a0f (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/6100a9faf1c29b06aed3ad5bef00ce905880309d (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/cf887c943bf1dee978bc863b7481686ecee8ad83 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/cc14e6cecf6984c991fe906c9fe4b327b4f93f96 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/67f1116cea421ebbe516fafc963e213cc6f0e117 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/94359a5208206be08ff44a1fc14e0334e2af2071 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/cb8b829fd3717acc2688025341f822e4097cf5c5 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/dd80afe98f969e3a309917643c0e45e83aaa37bf (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/6e629e9ccd58be36fcc858d357cdf0811bdcb380 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/aea3b1a80d6c114e3e67bc9521bf39a8a17371d1 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/98d2b480ff9fc207f568ed2ac8dcbcb7c9d6a719 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/2c6c6c9ffe6ef40320dfce3c6e53e953485f21a6 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/d33f73f69051d2861454081bb3211615413d8ed0 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/060990945a0117cb824b9d1c1e6c3a336533a3ee (manual port)","Url":"https://github.com/dotnet/corert/pull/7511","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 15\" (#7511)"},{"Id":"454365589","IsPullRequest":true,"CreatedAt":"2019-06-11T00:21:51","Actor":"Suchiman","Number":"7508","RawContent":null,"Title":"Port GC changes from coreclr - 14","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7495\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/71f259caa6fe9a167be38fa2433003a4c35c9657):**\r\n- https://github.com/dotnet/coreclr/commit/d62143d4ae97833081c5f235a91dea95da4461a0 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/b25304c757219d3103f691f615b5fa70ed22e92e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1db91c5acd17384952d1e1f8e3079c2c8cfb78f6 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/aa13ca95d633e9251fa040533d3d5650808455c0 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/03ab0ca0f81313319f30cfd75ee56dc59d71390c (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/616fea550548af750b575f3c304d1a9b4b6ef9a6 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/9107ff1d48a2454d1ac84a8dfa97178809d8e793 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/a28b25aacdcd2adb0fdfa70bd869f53ba6565976 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/ed52a006c01a582d4d34add40c318d6f324b99ba (gc only port, except omitted cgroup conflict)\r\n- https://github.com/dotnet/coreclr/commit/46cbd93c20780bcacd9f39fe18079acf2a9f4178 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/5bb7eb68035e98e356aba68115e28ed22d3d34aa (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/36931ac7b24249201547f7ca667105014b2e4c7f (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/d559d44e02471854748763a6c7eb52cbdc56168f (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/2dfd1779ae9eebe89b223cff6fd77825301971dd (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/bd84f468ac3f82847669d49614d01eba8dd2a9a0 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0495f7377fca88999d335757e9680052cfedc51d (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/4932d0f6fa87b9a6e3293aacd35cecedde44d87a (gc only port, omitted changes)","Url":"https://github.com/dotnet/corert/pull/7508","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 14\" (#7508)"},{"Id":"454376259","IsPullRequest":true,"CreatedAt":"2019-06-11T00:21:41","Actor":"Dotnet-GitSync-Bot","Number":"7509","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @maryamariyan","Url":"https://github.com/dotnet/corert/pull/7509","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7509)"},{"Id":"454422699","IsPullRequest":false,"CreatedAt":"2019-06-11T00:01:23","Actor":"timmydo","Number":"7510","RawContent":null,"Title":"CoreRT doesn't support scratch docker image.","State":"open","Body":"See also #4552.\r\n\r\nI'd like to create a docker image like this. Sample dockerfile\r\n```\r\nFROM microsoft/dotnet:3.0-sdk AS build\r\nWORKDIR /app\r\nRUN apt-get update && apt-get install -y libkrb5-dev zlib1g-dev clang-3.9\r\nRUN wget https://github.com/dotnet/corert/raw/master/samples/HelloWorld/HelloWorld.csproj https://github.com/dotnet/corert/raw/master/samples/HelloWorld/Program.cs\r\nRUN dotnet restore --runtime linux-x64\r\nRUN dotnet publish -c Release -r linux-x64 -o out\r\n\r\nFROM scratch AS runtime\r\nWORKDIR /app\r\nCOPY --from=build /app/out/* /app/\r\nENTRYPOINT [\"/app/HelloWorld\"] \r\n```\r\n\r\nError: docker run --rm -it a7b54e604622\r\nstandard_init_linux.go:211: exec user process caused \"no such file or directory\"\r\n\r\nIf I change `scratch` to `alpine`:\r\n\r\n```\r\n/app # ldd HelloWorld\r\n        /lib64/ld-linux-x86-64.so.2 (0x7ffa3ddb4000)\r\nError loading shared library libstdc++.so.6: No such file or directory (needed by HelloWorld)\r\n        libdl.so.2 => /lib64/ld-linux-x86-64.so.2 (0x7ffa3ddb4000)\r\n        libm.so.6 => /lib64/ld-linux-x86-64.so.2 (0x7ffa3ddb4000)\r\n        librt.so.1 => /lib64/ld-linux-x86-64.so.2 (0x7ffa3ddb4000)\r\nError loading shared library libgcc_s.so.1: No such file or directory (needed by HelloWorld)\r\n        libpthread.so.0 => /lib64/ld-linux-x86-64.so.2 (0x7ffa3ddb4000)\r\n        libc.so.6 => /lib64/ld-linux-x86-64.so.2 (0x7ffa3ddb4000)\r\nError loading shared library ld-linux-x86-64.so.2: No such file or directory (needed by HelloWorld)\r\nError relocating HelloWorld: _Znam: symbol not found\r\nError relocating HelloWorld: _ZSt9terminatev: symbol not found\r\nError relocating HelloWorld: __cxa_begin_catch: symbol not found\r\nError relocating HelloWorld: __cxa_allocate_exception: symbol not found\r\nError relocating HelloWorld: _ZdlPvRKSt9nothrow_t: symbol not found\r\nError relocating HelloWorld: __cxa_guard_abort: symbol not found\r\nError relocating HelloWorld: __cxa_guard_release: symbol not found\r\nError relocating HelloWorld: _ZdlPv: symbol not found\r\nError relocating HelloWorld: _Znwm: symbol not found\r\nError relocating HelloWorld: _ZdaPv: symbol not found\r\nError relocating HelloWorld: _ZnamRKSt9nothrow_t: symbol not found\r\nError relocating HelloWorld: __cxa_throw: symbol not found\r\nError relocating HelloWorld: __cxa_thread_atexit: symbol not found\r\nError relocating HelloWorld: _Unwind_Resume: symbol not found\r\nError relocating HelloWorld: __cxa_guard_acquire: symbol not found\r\nError relocating HelloWorld: _ZnwmRKSt9nothrow_t: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv120__si_class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv120__si_class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv120__si_class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv120__si_class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv120__si_class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv120__si_class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv120__si_class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv120__si_class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv117__class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv117__class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv117__class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv117__class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv117__class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv117__class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv117__class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv121__vmi_class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZTVN10__cxxabiv121__vmi_class_type_infoE: symbol not found\r\nError relocating HelloWorld: _ZSt7nothrow: symbol not found\r\nError relocating HelloWorld: _ZTIPKc: symbol not found\r\nError relocating HelloWorld: __gxx_personality_v0: symbol not found\r\n```\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7510","RelatedDescription":"Open issue \"CoreRT doesn't support scratch docker image.\" (#7510)"},{"Id":"454186830","IsPullRequest":false,"CreatedAt":"2019-06-10T14:02:34","Actor":"eyupkayadarcin","Number":"7506","RawContent":null,"Title":"Internal.TypeSystem.TypeSystemException+TypeLoadException when using EntityFrameworkCore with Npgsql","State":"open","Body":"I've got a dotnet core 2.1 project . I'm getting a Internal.TypeSystem.TypeSystemException+TypeLoadException after compilation (using dotnet publish -r win-x64 -c release):\r\n\r\nInternal.TypeSystem.TypeSystemException+TypeLoadException: [TEMPORARY EXCEPTION MESSAGE] ClassLoadGeneral: Microsoft.EntityFrameworkCore.Storage.Internal.NpgsqlArrayTypeMapping, Npgsql.EntityFrameworkCore.PostgreSQL, Version=2.1.2.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7\r\n     at Internal.TypeSystem.ThrowHelper.ThrowTypeLoadException(ExceptionStringID id, String typeName, String assemblyName)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(String nameSpace, String name, Boolean throwIfNotFound)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveTypeReference(TypeReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType(SignatureTypeCode typeCode)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseMethodSignature()\r\n     at Internal.TypeSystem.Ecma.EcmaMethod.InitializeSignature()\r\n     at ILCompiler.DependencyAnalysis.MethodMetadataNode.GetStaticDependencies(NodeFactory factory)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.GetStaticDependenciesImpl(DependencyNodeCore`1 node)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ProcessMarkStack()\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n\r\nAnd there is any method that create automatically rd.xml file ?","Url":"https://github.com/dotnet/corert/issues/7506","RelatedDescription":"Open issue \"Internal.TypeSystem.TypeSystemException+TypeLoadException when using EntityFrameworkCore with Npgsql\" (#7506)"},{"Id":"453882867","IsPullRequest":false,"CreatedAt":"2019-06-09T10:07:51","Actor":"hez2010","Number":"7505","RawContent":null,"Title":"The code below will cause program crashing during runtime","State":"open","Body":"Bug: The code below will cause program crashing during runtime  \r\n\r\n```\r\ndotnet add package Microsoft.DotNet.ILCompiler -v 1.0.0-alpha-*\r\ndotnet publish -c Release -r win-x64\r\n```\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\nusing System.Linq.Expressions;\r\nusing System.Runtime.CompilerServices;\r\n\r\nnamespace TypeTest\r\n{\r\n    public struct GenericNum<T> : IEquatable<T>, IComparable<T>, IComparable where T : struct\r\n    {\r\n        private static Func<T, T, T> add;\r\n        private static Func<T, T, T> sub;\r\n        private static Func<T, T, T> mul;\r\n        private static Func<T, T, T> div;\r\n        private static Func<T, T, bool> equ;\r\n        private static Func<T, T, bool> neq;\r\n        private static Func<T, T, bool> grt;\r\n        private static Func<T, T, bool> lst;\r\n        public T Value { get; set; }\r\n\r\n        public GenericNum(T value)\r\n        {\r\n            if (equ == null)\r\n            {\r\n                var p1 = Expression.Parameter(typeof(T));\r\n                var p2 = Expression.Parameter(typeof(T));\r\n                var dt = Expression.Parameter(typeof(double));\r\n                add = (Func<T, T, T>)Expression.Lambda(Expression.Add(p1, p2), p1, p2).Compile();\r\n                sub = (Func<T, T, T>)Expression.Lambda(Expression.Subtract(p1, p2), p1, p2).Compile();\r\n                mul = (Func<T, T, T>)Expression.Lambda(Expression.Multiply(p1, p2), p1, p2).Compile();\r\n                div = (Func<T, T, T>)Expression.Lambda(Expression.Divide(p1, p2), p1, p2).Compile();\r\n                equ = (Func<T, T, bool>)Expression.Lambda(Expression.Equal(p1, p2), p1, p2).Compile();\r\n                neq = (Func<T, T, bool>)Expression.Lambda(Expression.NotEqual(p1, p2), p1, p2).Compile();\r\n                grt = (Func<T, T, bool>)Expression.Lambda(Expression.GreaterThan(p1, p2), p1, p2).Compile();\r\n                lst = (Func<T, T, bool>)Expression.Lambda(Expression.LessThan(p1, p2), p1, p2).Compile();\r\n            }\r\n            Value = value;\r\n        }\r\n\r\n        public int CompareTo(T other)\r\n        {\r\n            if (lst(Value, other)) return -1;\r\n            else if (grt(Value, other)) return 1;\r\n            return 0;\r\n        }\r\n\r\n        public int CompareTo(object obj)\r\n        {\r\n            if (obj is GenericNum<T> t)\r\n            {\r\n                var other = t.Value;\r\n                if (lst(Value, other)) return -1;\r\n                else if (grt(Value, other)) return 1;\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        public override bool Equals(object obj)\r\n        {\r\n            if (obj is GenericNum<T> t) return equ(this, t);\r\n            return false;\r\n        }\r\n\r\n        public override int GetHashCode() => Value.GetHashCode();\r\n\r\n        public bool Equals(T other) => equ(Value, other);\r\n\r\n        public static T operator +(GenericNum<T> left, GenericNum<T> right) => add(left.Value, right.Value);\r\n        public static T operator -(GenericNum<T> left, GenericNum<T> right) => sub(left.Value, right.Value);\r\n        public static T operator *(GenericNum<T> left, GenericNum<T> right) => mul(left.Value, right.Value);\r\n        public static T operator /(GenericNum<T> left, GenericNum<T> right) => div(left.Value, right.Value);\r\n        public static bool operator >(GenericNum<T> left, GenericNum<T> right) => grt(left.Value, right.Value);\r\n        public static bool operator <(GenericNum<T> left, GenericNum<T> right) => lst(left.Value, right.Value);\r\n        public static bool operator ==(GenericNum<T> left, GenericNum<T> right) => equ(left.Value, right.Value);\r\n        public static bool operator !=(GenericNum<T> left, GenericNum<T> right) => neq(left.Value, right.Value);\r\n\r\n        public static implicit operator T(GenericNum<T> value) => value.Value;\r\n        public static implicit operator GenericNum<T>(T value) => new GenericNum<T>(value);\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var r = new Random();\r\n            var x = new GenericNum<int>(r.Next()); //create\r\n            var y = new GenericNum<int>(r.Next()); //create\r\n            var p = x + y; //add\r\n            Console.WriteLine(p);\r\n            return;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\ndotnet --info:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.300\r\n Commit:    73efd5bd87\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.300\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27804-01\r\n  Commit:  fdf81c6faf\r\n\r\n.NET Core SDKs installed:\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-012264 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview6.19307.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27804-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview6-27804-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/corert/issues/7505","RelatedDescription":"Open issue \"The code below will cause program crashing during runtime\" (#7505)"},{"Id":"453819922","IsPullRequest":true,"CreatedAt":"2019-06-08T18:05:33","Actor":"kvittokonito","Number":"7504","RawContent":null,"Title":"Fixed errors when targeting ARM64 on Linux.","State":"open","Body":"Fixed several compilation errors found while trying to compile for ARM64 under Linux via cross-compilation.\r\n\r\nRelated to: #7500","Url":"https://github.com/dotnet/corert/pull/7504","RelatedDescription":"Open PR \"Fixed errors when targeting ARM64 on Linux.\" (#7504)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"454300900","IsPullRequest":true,"CreatedAt":"2019-06-16T18:04:30","Actor":"vatsan-madhavan","Number":"3315","RawContent":null,"Title":"Add warnings related to Microsoft.NET.Sdk.WindowsDesktop","State":"closed","Body":"Related: #3126 \r\nThis is also needed to completely fix https://github.com/dotnet/wpf/issues/866 - we still can't support support multitargeting `netcoreapp2.2`, and also to fix https://github.com/dotnet/wpf/issues/867\r\n\r\n- Adds warning strings related to `Microsoft.NET.Sdk.WindowsDesktop`\r\n- Adds a check to warn when `UseWpf` or `UseWindowsForms` is set without including `Microsoft.NET.Sdk.WindowsDesktop`","Url":"https://github.com/dotnet/sdk/pull/3315","RelatedDescription":"Closed or merged PR \"Add warnings related to Microsoft.NET.Sdk.WindowsDesktop\" (#3315)"},{"Id":"456547388","IsPullRequest":false,"CreatedAt":"2019-06-15T15:19:55","Actor":"MeikTranel","Number":"3334","RawContent":null,"Title":"Hide or Move generated *.designer.cs to obj directory","State":"open","Body":"When using .RESX files for localization the sdk currently compiles this file at design time / build time to be able to reference it as static properties from any csharp code (or xaml for that matter).\r\n\r\nThe generated file probably should not be put under version control, so my preferred way would be moving the output file of the generator into the obj directory, where it would fall under common gitignore rules.\r\n","Url":"https://github.com/dotnet/sdk/issues/3334","RelatedDescription":"Open issue \"Hide or Move generated *.designer.cs to obj directory\" (#3334)"},{"Id":"455826747","IsPullRequest":false,"CreatedAt":"2019-06-15T03:39:50","Actor":"amh1979","Number":"3329","RawContent":null,"Title":"NETSDK1073: The FrameworkReference 'NETStandard.Library' was not recognized","State":"closed","Body":"SDK: 3.0.0-preview6-27804-01\r\nMicrosoft.NET.Sdk.TargetingPackResolution.targets(185,5): error NETSDK1073: The FrameworkReference 'NETStandard.Library' was not recognized","Url":"https://github.com/dotnet/sdk/issues/3329","RelatedDescription":"Closed issue \"NETSDK1073: The FrameworkReference 'NETStandard.Library' was not recognized\" (#3329)"},{"Id":"456439257","IsPullRequest":true,"CreatedAt":"2019-06-14T23:25:37","Actor":"dsplaisted","Number":"3333","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"Replaces #3332, hopefully fixing test failures","Url":"https://github.com/dotnet/sdk/pull/3333","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#3333)"},{"Id":"456342176","IsPullRequest":true,"CreatedAt":"2019-06-14T21:04:49","Actor":"wli3","Number":"3332","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3332","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#3332)"},{"Id":"456008150","IsPullRequest":true,"CreatedAt":"2019-06-14T00:26:12","Actor":"dsplaisted","Number":"3331","RawContent":null,"Title":"Preserve metadata from Reference items","State":"open","Body":"Fix #2254 ","Url":"https://github.com/dotnet/sdk/pull/3331","RelatedDescription":"Open PR \"Preserve metadata from Reference items\" (#3331)"},{"Id":"455914987","IsPullRequest":true,"CreatedAt":"2019-06-14T00:19:59","Actor":"dsplaisted","Number":"3330","RawContent":null,"Title":"Don't hash DesignTimeBould for ResolvePackageAssets","State":"closed","Body":"Fixes #3313 ","Url":"https://github.com/dotnet/sdk/pull/3330","RelatedDescription":"Closed or merged PR \"Don't hash DesignTimeBould for ResolvePackageAssets\" (#3330)"},{"Id":"453733086","IsPullRequest":false,"CreatedAt":"2019-06-14T00:19:59","Actor":"nguerrera","Number":"3313","RawContent":null,"Title":"DesignTimeBuild is included in ResolvePackageAssets HashSettings","State":"closed","Body":"This will cause the cache to be rebuilt always when building after a design time build, or design time building after a build.\r\n\r\nThe test was updated to allow DesignTimeBuild to not be in the cache:\r\n\r\nhttps://github.com/dotnet/sdk/blob/de72490d26acee011e22f40113209323976980e0/src/Tasks/Microsoft.NET.Build.Tasks.UnitTests/GivenAResolvePackageAssetsTask.cs#L21\r\n\r\nBut it is actually written:\r\n\r\nhttps://github.com/dotnet/sdk/blob/de72490d26acee011e22f40113209323976980e0/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs#L376\r\n\r\nProbably need a test that checks the opposite of the settings hash test for DesignTimeBuild: that you can change it without influencing the hash.","Url":"https://github.com/dotnet/sdk/issues/3313","RelatedDescription":"Closed issue \"DesignTimeBuild is included in ResolvePackageAssets HashSettings\" (#3313)"},{"Id":"454941152","IsPullRequest":true,"CreatedAt":"2019-06-13T19:44:06","Actor":"nugetlurker","Number":"3321","RawContent":null,"Title":"Insert NuGet Build 5.2.0-preview2.6045 into sdk","State":"closed","Body":"Insert NuGet Build 5.2.0-preview2.6045 into sdk release/2.2.4xx branch","Url":"https://github.com/dotnet/sdk/pull/3321","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.2.0-preview2.6045 into sdk\" (#3321)"},{"Id":"454941165","IsPullRequest":true,"CreatedAt":"2019-06-13T18:55:43","Actor":"nugetlurker","Number":"3322","RawContent":null,"Title":"Insert NuGet Build 5.2.0-preview2.6045 into sdk","State":"closed","Body":"Insert NuGet Build 5.2.0-preview2.6045 into sdk release/2.1.8xx branch","Url":"https://github.com/dotnet/sdk/pull/3322","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.2.0-preview2.6045 into sdk\" (#3322)"},{"Id":"455480612","IsPullRequest":false,"CreatedAt":"2019-06-13T05:12:14","Actor":"heejaechang","Number":"3328","RawContent":null,"Title":"use different assembly version for different build task","State":"closed","Body":"a lot of times, I get something like this whenever I do branch switch and restore and open solution in VS\r\n\r\n![image](https://user-images.githubusercontent.com/1333179/59394912-5d06fc00-8d36-11e9-81c1-d2f0ad724168.png)\r\n\r\nand I believe that is happening because different dll that has same assembly version is already loaded in the msbuild which got reused.\r\n\r\ncan we make different build task dll to use different assembly version so that we don't get into this problem?","Url":"https://github.com/dotnet/sdk/issues/3328","RelatedDescription":"Closed issue \"use different assembly version for different build task\" (#3328)"},{"Id":"455469527","IsPullRequest":true,"CreatedAt":"2019-06-12T23:34:07","Actor":"nguerrera","Number":"3327","RawContent":null,"Title":"Reduce verbosity of conflict resolution","State":"open","Body":"Also:\r\n* Reduce line noise in preview message\r\n* Log info about arbitrary copy-local choice in conflict resolution\r\n\r\nFix #2468 \r\nFix #3319 ","Url":"https://github.com/dotnet/sdk/pull/3327","RelatedDescription":"Open PR \"Reduce verbosity of conflict resolution\" (#3327)"},{"Id":"454819855","IsPullRequest":true,"CreatedAt":"2019-06-12T19:59:06","Actor":"wli3","Number":"3318","RawContent":null,"Title":"Collect crash exception","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3318","RelatedDescription":"Closed or merged PR \"Collect crash exception\" (#3318)"},{"Id":"455368499","IsPullRequest":true,"CreatedAt":"2019-06-12T18:46:31","Actor":"nguerrera","Number":"3326","RawContent":null,"Title":"Support PublishReadyToRun for framework-dependent deployment","State":"open","Body":"Fix #3110 ","Url":"https://github.com/dotnet/sdk/pull/3326","RelatedDescription":"Open PR \"Support PublishReadyToRun for framework-dependent deployment\" (#3326)"},{"Id":"455273191","IsPullRequest":false,"CreatedAt":"2019-06-12T15:14:24","Actor":"dsplaisted","Number":"3325","RawContent":null,"Title":"Supply RuntimeIdentifier graph to NuGet","State":"open","Body":"Once this NuGet feature is implemented: https://github.com/NuGet/Client.Engineering/pull/96\r\n\r\nWe will need to set the appropriate property to supply the SDKs graph to NuGet, as well as remove the infrastructure that implicitly references Microsoft.NETCore.App.","Url":"https://github.com/dotnet/sdk/issues/3325","RelatedDescription":"Open issue \"Supply RuntimeIdentifier graph to NuGet\" (#3325)"},{"Id":"454848287","IsPullRequest":true,"CreatedAt":"2019-06-12T03:09:18","Actor":"nguerrera","Number":"3320","RawContent":null,"Title":"Fix duplicate resolved files to publish","State":"closed","Body":"Fix #3257 \r\n\r\nThere were two issues.\r\n\r\n1. A misunderstanding of msbuild batching rules and unqualified metadata caused satellite assemblies to be included twice (from same source location) into the publish list. (See https://github.com/microsoft/msbuild/issues/4429)\r\n2. There are assemblies with the same name and version in multiple frameworks. We have to choose one arbitrarily.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3320","RelatedDescription":"Closed or merged PR \"Fix duplicate resolved files to publish\" (#3320)"},{"Id":"454964340","IsPullRequest":true,"CreatedAt":"2019-06-12T00:55:17","Actor":"dsplaisted","Number":"3324","RawContent":null,"Title":"Use runtime pack manifest","State":"open","Body":"Use runtime pack manifest instead of using conventions and scanning folders.\r\n\r\nResources are still handled using conventions, we need updates to the runtime pack manifest in order to be able to consume them from it: https://github.com/dotnet/core-setup/issues/6768","Url":"https://github.com/dotnet/sdk/pull/3324","RelatedDescription":"Open PR \"Use runtime pack manifest\" (#3324)"},{"Id":"454941183","IsPullRequest":true,"CreatedAt":"2019-06-11T23:05:54","Actor":"nugetlurker","Number":"3323","RawContent":null,"Title":"Insert NuGet Build 5.2.0-preview2.6045 into sdk","State":"open","Body":"Insert NuGet Build 5.2.0-preview2.6045 into sdk master branch","Url":"https://github.com/dotnet/sdk/pull/3323","RelatedDescription":"Open PR \"Insert NuGet Build 5.2.0-preview2.6045 into sdk\" (#3323)"},{"Id":"454842931","IsPullRequest":false,"CreatedAt":"2019-06-11T18:36:41","Actor":"nguerrera","Number":"3319","RawContent":null,"Title":"Issues with conflict resolution logging","State":"open","Body":"1. At normal verbosity, there are unactionable messages about things that happen in very common cases. For example, every core WPF project has a conflict between WindowsBase in netcore app. Importance should be lowered so that you can still see in binlog/diag, but not otherwise. We regularly get questions about what to do about a conflict, when there is nothing to do.\r\n\r\n2. It is quite noisy to have codes associated with non-error, non-warnings. We should refactor to not bother having codes for messages. Related: https://github.com/dotnet/sdk/issues/2468\r\n\r\n3. We are concatenating strings, so we end up with a code inside a code. NETSDKXXXX: Encountered conflict yada, yada.  NETSDKYYYY. Choosing Foo.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3319","RelatedDescription":"Open issue \"Issues with conflict resolution logging\" (#3319)"},{"Id":"452976611","IsPullRequest":false,"CreatedAt":"2019-06-11T03:32:07","Actor":"vadi2","Number":"3309","RawContent":null,"Title":"\"Application host will not be customised\" - meaning?","State":"closed","Body":"I've built an application[1] on .NET Core that runs on Windows, macOS, and Linux and I'd like to reduce the friction involved in getting it running - that is, having to install the runtime separately. I've read the [single-publish](https://github.com/dotnet/designs/blob/master/accepted/single-file/design.md) and [tried out the command](https://travis-ci.com/vadi2/Hammer/builds/114541271#L323) - but I get this warning:\r\n\r\n> The application host executable will not be customized because adding resources requires that the build be performed on Windows (excluding Nano Server).\r\n\r\nWhat does it actually mean? I'm new to the .NET world so I'm not sure what customisations is it actually talking about.\r\n\r\n[1] https://github.com/vadi2/Hammer","Url":"https://github.com/dotnet/sdk/issues/3309","RelatedDescription":"Closed issue \"\"Application host will not be customised\" - meaning?\" (#3309)"},{"Id":"454317577","IsPullRequest":true,"CreatedAt":"2019-06-11T00:58:34","Actor":"dsplaisted","Number":"3316","RawContent":null,"Title":"Remove old deps file generation logic","State":"closed","Body":"No need to keep both old and new copies anymore.\r\n\r\nThis ends up deleting some of the DependencyContextBuilder unit test coverage, as with the new design the builder depends on the output of ResolvePackageAssets, which isn't so easy to mock.","Url":"https://github.com/dotnet/sdk/pull/3316","RelatedDescription":"Closed or merged PR \"Remove old deps file generation logic\" (#3316)"},{"Id":"454341820","IsPullRequest":false,"CreatedAt":"2019-06-10T19:50:29","Actor":"crummel","Number":"3317","RawContent":null,"Title":"Source-build patch removal for SDK.","State":"open","Body":"Source-build has some patches that we are currently applying to your repo.  This issue tracks removing the patches.  These patches can be found at https://github.com/dotnet/source-build/tree/release/3.0/patches/sdk.\r\n\r\nPatches that have the responsibility \"Repo\" and the Disposition \"Incorporate\" are patches that we believe are valid source-build fixes that should be moved into your repo.  Please let us know if these don't seem like good patches.  Any changes with the responsibility \"source-build\" is something that we plan to keep going forward or integrate in another way - please also let us know if you think there may be problems with those patches.\r\n\r\nPatch name | Type | Disposition | Responsibility | Notes\r\n-- | -- | -- | -- | --\r\nsdk/0001-Upgrade-to-netcoreapp2.1.patch | ToolCompat | Unknown | source-build | May go away with SDK uptake.  Otherwise needs investigation similar to   nuget-client/0001\r\nsdk/0002-Add-missing-PlatformAbstractions-reference.patch | Bug | Incorporate | Repo |  \r\nsdk/0003-Consolidate-versions.patch | Coherence | Incorporate | Repo |  \r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3317","RelatedDescription":"Open issue \"Source-build patch removal for SDK.\" (#3317)"},{"Id":"453311134","IsPullRequest":true,"CreatedAt":"2019-06-10T18:11:01","Actor":"dsplaisted","Number":"3311","RawContent":null,"Title":"Exclude Publish=\"false\" package assets from build output, don't infer Publish=\"false\" from PrivateAssets=\"all\"","State":"closed","Body":"See https://github.com/dotnet/designs/pull/78","Url":"https://github.com/dotnet/sdk/pull/3311","RelatedDescription":"Closed or merged PR \"Exclude Publish=\"false\" package assets from build output, don't infer Publish=\"false\" from PrivateAssets=\"all\"\" (#3311)"},{"Id":"453775677","IsPullRequest":false,"CreatedAt":"2019-06-08T09:32:34","Actor":"martincostello","Number":"3314","RawContent":null,"Title":"Regression in build times for Travis CI using 2.2.300 SDK","State":"open","Body":"I've noticed across several different projects I maintain that since the SDK was updated from 2.2.1xx or 2.2.2xx to 2.2.300, the time to build the projects in Travis CI has regressed by up to an order of magnitude on both Linux and macOS.\r\n\r\nHowever I'm not seeing the same regression in Azure DevOps pipelines for Linux, macOS or Windows, or AppVeyor for Windows.\r\n\r\nBelow are a selection of projects that show a build time regression immediately after merging a PR that contains a commit that updates the SDK to 2.2.300:\r\n\r\n| History | Build time pre-update | Build time post-update | Delta | PR with SDK update | Commit with SDK update |\r\n|:-:|:-:|:-:|:-:|:-:|:-:|\r\n| [project-euler](https://travis-ci.org/martincostello/project-euler/builds) | 3 min 40 sec | 37 min 13 sec | +1,015% | [#33](https://github.com/martincostello/project-euler/pull/33) | [b2c7ed3](https://github.com/martincostello/project-euler/commit/b2c7ed39e539201c6625f0d06787de42cb50abaa) |\r\n| [JustEat.StatsD](https://travis-ci.org/justeat/JustEat.StatsD/builds) |  2 min 33 sec | 12 min 19 sec | +483% | [#177](https://github.com/justeat/JustEat.StatsD/pull/177) | [4f4ac55](https://github.com/justeat/JustEat.StatsD/commit/4f4ac5505f2953efa09eef8cc304aad514e49099) |\r\n| [sqllocaldb](https://travis-ci.org/martincostello/sqllocaldb/builds) | 3 min 31 sec | 16 min 28 sec | +468% | [#88](https://github.com/martincostello/sqllocaldb/pull/88) | [671307a](https://github.com/martincostello/sqllocaldb/commit/671307a1fc216d1514f32c787aff547570408e37) |\r\n| [adventofcode](https://travis-ci.org/martincostello/adventofcode/builds) | 7 min 4 sec | 31 min 51 sec | +450% | [#72](https://github.com/martincostello/adventofcode/pull/72) | [8ecc3a7](https://github.com/martincostello/adventofcode/commit/8ecc3a77b5696e5eae735826ef510ef3599447b1) |\r\n| [JustSaying](https://travis-ci.org/justeat/JustSaying/builds) | 6 min 49 sec | 25 min 55 sec | +380% | [#545](https://github.com/justeat/JustSaying/pull/545) | [88f241c](https://github.com/justeat/JustSaying/commit/88f241c8a6bcb5768e2d57fae4aef906aacad53a) |\r\n| [httpclient-interception](https://travis-ci.org/justeat/httpclient-interception/builds) | 6 min 26 sec | 16 min 26 sec | +255% | [#85](https://github.com/justeat/httpclient-interception/pull/85) | [065c722](https://github.com/justeat/httpclient-interception/commit/065c7222669c291baf1fc75f20ce7c6f4863568c) |\r\n| [alexa-london-travel-site](https://travis-ci.org/martincostello/alexa-london-travel-site/builds) | 5 min 34 sec | 11 min 31 sec | +206% | [#267](https://github.com/martincostello/alexa-london-travel-site/pull/267) | [48b47a5](https://github.com/martincostello/alexa-london-travel-site/commit/48b47a5497e9e824fe3ba0d41ef4d9ef299773e0) |\r\n| [api](https://travis-ci.org/martincostello/api/builds) | 5 min 54 sec | 9 min 46 sec | +165% | [#112](https://github.com/martincostello/api/pull/112) | [40c1dee](https://github.com/martincostello/api/commit/40c1dee042f02e18f64c68fcdac7c4500559f907) |\r\n| [website](https://travis-ci.org/martincostello/website/builds) | 4 min 26 sec | 7 min 13 sec | +162% | [#263](https://github.com/martincostello/website/pull/263) | [3a43580](https://github.com/martincostello/website/commit/3a4358008c7022d0abf667774a26505ad9892a47) |\r\n\r\nMy hunch is that it is related to the new \"progress bar\" when running `dotnet test` which is causing the Travis agents to waste a lot of time trying to \"draw\" it because the actual test run times printed in the build output are equivalent:\r\n\r\n  * [Build before](https://travis-ci.org/martincostello/project-euler/jobs/513808297#L560) - `Time Elapsed 00:00:10.86`\r\n  * [Build after](https://travis-ci.org/martincostello/project-euler/jobs/537916269#L556) - `Time Elapsed 00:00:15.31`\r\n  * [Test before](https://travis-ci.org/martincostello/project-euler/jobs/513808297#L706) - `Test execution time: 46.8778 Seconds`\r\n  * [Test after](https://travis-ci.org/martincostello/project-euler/jobs/537916269#L700) - `Total time: 46.5308 Seconds`\r\n","Url":"https://github.com/dotnet/sdk/issues/3314","RelatedDescription":"Open issue \"Regression in build times for Travis CI using 2.2.300 SDK\" (#3314)"},{"Id":"453443961","IsPullRequest":false,"CreatedAt":"2019-06-07T10:26:09","Actor":"vitek-karas","Number":"3312","RawContent":null,"Title":"What should be default RollForward for component projects","State":"open","Body":"We haven’t made an official decision on the default value for `RollForward` in our new component scenarios.\r\n\r\nTLDR;\r\nShould we use `LatestMinor` or `LatestMajor` for component projects by default.\r\n\r\nThe long version:\r\nCurrently `RollForward` is set to `Minor` (roll to closest available version while staying with the same `major.` part of the version, then roll to latest patch of that version) for all projects by default. This is the value used when no `RollForward` is specified by the SDK in `.runtimeconfig.json`. More details about `RollForward` are here and here.\r\n\r\nFor dynamically loaded components this value would come with problems. The most important one being ordering issues. For example let’s have two COM components `A 3.0 Minor` and `B 3.1 Minor` on a machine which has both `3.0` and `3.1` installed. If the native app activates B first, it will load `3.1` runtime and then when it activates A second it will just work (since A can run on `3.1`). But if the app activates A first, it would load `3.0` (closest available match to `3.0 Minor`) and then when it would try to activate B that would fail (B is not compatible with `3.0`).\r\n\r\nTo overcome this problem the `RollForward` has two settings:\r\n* `LatestMinor` – pick the highest available version with the same `major.` part of the version (so `3.0 LatestMinor` would roll to latest `3.*` version)\r\n* `LatestMajor` – pick the highest available version (all up)\r\n\r\nIf in the above scenario A would be `3.0 LatestMinor` and B would be `3.1 LatestMinor`, no matter which one got activated first, they both would load `3.1` (as the latest `3.*` available version).\r\n\r\nSo to make it easy for users and make things just work out of the box, we would like to set `RollForward` to one of the `LatestMinor`/`LatestMajor` by default on component projects.\r\nElinor has a PR out which introduces the notion of “component project”: https://github.com/dotnet/sdk/pull/3305\r\n\r\nThe question is if we should use `LatestMinor` or `LatestMajor` as the default for component projects.\r\n\r\n*`LatestMinor`:*\r\n* Pros: Higher chance of providing the expected compatibility – in general we try really hard to avoid breaking changes for minor versions, so 3.1 is expected to be fully backward compatible with 3.0. We tell people that upgrading to minor version is “safe”.\r\n* Cons: Come .NET 5 components targeting 3.0 would not run on 5.0. Basically creating an upgrade problem. Combining components targeting both 3.0 and 5.0 would fail.\r\n\r\n*`LatestMajor`:*\r\n* Pros: No upgrade problems – all components run everywhere and together.\r\n* Cons: Potentially breaking for some components as we may introduce some breaking changes between `5.0` and `3.0`. That said `classlibs` (which components are a special case of) are already assumed to work just fine even across major versions (NuGet has no notion of compatibility ranges, and will let people use `3.0` `classlibs` in `5.0` projects).\r\n\r\nSome related discussions already happened:\r\nhttps://github.com/dotnet/core-setup/issues/5870\r\nhttps://github.com/dotnet/core-setup/issues/5062\r\n\r\nThoughs?","Url":"https://github.com/dotnet/sdk/issues/3312","RelatedDescription":"Open issue \"What should be default RollForward for component projects\" (#3312)"},{"Id":"453186764","IsPullRequest":true,"CreatedAt":"2019-06-07T01:17:19","Actor":"peterhuene","Number":"3310","RawContent":null,"Title":"Fix P/Invoke signatures for the resource updater.","State":"closed","Body":"The resource updater was not specifying a CharSet for the Windows API\r\nP/Invoke signatures and therefore the ANSI versions of the APIs were\r\nbeing used.\r\n\r\nThis caused an unhandled exception when customizing the apphost on\r\nWindows when the intermediate apphost path contained Unicode characters\r\nbecause the ANSI resource updating API couldn't find the file.\r\n\r\nFixes [AB#900429](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/900429).","Url":"https://github.com/dotnet/sdk/pull/3310","RelatedDescription":"Closed or merged PR \"Fix P/Invoke signatures for the resource updater.\" (#3310)"},{"Id":"452776840","IsPullRequest":true,"CreatedAt":"2019-06-06T20:36:55","Actor":"cdmihai","Number":"3306","RawContent":null,"Title":"Update Microsoft.NETFramework.ReferenceAssemblies in TestProject","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3306","RelatedDescription":"Closed or merged PR \"Update Microsoft.NETFramework.ReferenceAssemblies in TestProject\" (#3306)"},{"Id":"452957325","IsPullRequest":true,"CreatedAt":"2019-06-06T10:36:29","Actor":"v-zbsail","Number":"3308","RawContent":null,"Title":"LOC CHECKIN | dotnet/sdk master | 20190606","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3308","RelatedDescription":"Open PR \"LOC CHECKIN | dotnet/sdk master | 20190606\" (#3308)"},{"Id":"452816272","IsPullRequest":false,"CreatedAt":"2019-06-06T03:38:50","Actor":"kkwpsv","Number":"3307","RawContent":null,"Title":"Publish a WebApplication project using `dotnet publish` will fail when it references a project with Exe outputtype","State":"open","Body":"I have two projects. One is a ConsoleApp, the other is WebApplication. And the WebApplication has a `ProjectReference` to reference the ConsoleApp.\r\n\r\nWhen I publish the WebApplication with `--runtime`, it has an error like below:\r\n\r\n> /home/lsj/test/ConsoleApp2/ConsoleApp2.csproj : error : NETSDK1061: The project was restored using Microsoft.NETCore.App version 2.1.9, but with current settings, version 2.1.0 would be used instead. To resolve this issue, make sure the same settings are used for restore and for subsequent operations such as build or publish. Typically this issue can occur if the RuntimeIdentifier property is set during build or publish but not during restore. For more information, see https://aka.ms/dotnet-runtime-patch-selection.\r\n\r\nBut when I remove the `<OutputType>Exe</OutputType>` line from the csproj of ConsoleApp, it succeeds.\r\n\r\n\r\nI have done many tests:\r\n\r\n- If I only publish the ConsoleApp with `--runtime` and `<OutputType>Exe</OutputType>`, it will success.\r\n\r\n- If I publish the WebApplication with `--runtime` and `<OutputType>Exe</OutputType>`, it will fail, no matter on Linux or Windows, no matter with .net core 2.1 or 2.2. But it will succeed with .net core 3.0. (I think it's because that there's no any .net core 3.0.x)\r\n\r\n- If I publish the WebApplication with `--runtime` and without `<OutputType>Exe</OutputType>`, it will always succeed.\r\n\r\n- If I publish the WebApplication without `--runtime` and with `<OutputType>Exe</OutputType>`, it will always succeed.\r\n","Url":"https://github.com/dotnet/sdk/issues/3307","RelatedDescription":"Open issue \"Publish a WebApplication project using `dotnet publish` will fail when it references a project with Exe outputtype\" (#3307)"},{"Id":"452773212","IsPullRequest":true,"CreatedAt":"2019-06-06T00:16:07","Actor":"elinor-fung","Number":"3305","RawContent":null,"Title":"Add property for building a library as a component","State":"open","Body":"SDK support for the hosting scenario of loading a managed component and calling into it from a native application: https://github.com/dotnet/core-setup/blob/master/Documentation/design-docs/native-hosting.md#scenarios. This hosting scenario requires a `runtimeconfig.json` file and our recommendation for components is to have a less restrictive `rollForward` setting.\r\n\r\nSetting `IsComponent=true` should result in:\r\n- `.runtimeconfig.json` being generated\r\n- `rollForward` being set to `LatestMinor` by default","Url":"https://github.com/dotnet/sdk/pull/3305","RelatedDescription":"Open PR \"Add property for building a library as a component\" (#3305)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1139464997086515200","CreatedAt":"2019-06-14T09:30:00+00:00","UserScreenname":"dotnet","Text":"In this episode of On .NET, @merrie_mcgaw and @dcampbell share some interesting insights on the work that's going i… https://t.co/lk13vbgcLT","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":9,"RawContent":null},{"Id":"1138862091987800064","CreatedAt":"2019-06-12T17:34:16+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 6 https://t.co/33ez5lSv95","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":371,"FavoriteCount":198,"RawContent":null},{"Id":"1138808172397899781","CreatedAt":"2019-06-12T14:00:00+00:00","UserScreenname":"dotnet","Text":"Announcing ML .NET 1.1 and Model Builder updates (Machine Learning for .NET)\nhttps://t.co/XN6b6HRpSP https://t.co/3pmcAPxoN9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":65,"FavoriteCount":39,"RawContent":null},{"Id":"1138490776495697920","CreatedAt":"2019-06-11T16:58:47+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":16,"FavoriteCount":2,"RawContent":null},{"Id":"1138476484010446848","CreatedAt":"2019-06-11T16:02:00+00:00","UserScreenname":"dotnet","Text":"Find out what the @aspnet team has been working to add better support for building microservices in… https://t.co/kDZY18RslQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":43,"FavoriteCount":17,"RawContent":null},{"Id":"1138214322503426048","CreatedAt":"2019-06-10T22:40:16+00:00","UserScreenname":"dotnet","Text":"On this week's #ASPNET Community Standup, we'll be talking to @danroth27 about the Blazing Pizza demo he showed at… https://t.co/EoPKEmeHPX","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":59,"FavoriteCount":23,"RawContent":null},{"Id":"1137047014795911168","CreatedAt":"2019-06-07T17:21:48+00:00","UserScreenname":"dotnet","Text":"We're happy to support Core WF and Core WCF open source projects https://t.co/4hjysrl1X8 https://t.co/JWwVvdv01f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":141,"FavoriteCount":73,"RawContent":null}]}},"RunOn":"2019-06-17T05:30:37.1917578Z","RunDurationInMilliseconds":12562}