{"Data":{"GitHub":{"Issues":[{"Id":"478244778","IsPullRequest":false,"CreatedAt":"2019-08-08T04:30:48","Actor":"CESARDELATORRE","Number":"4093","RawContent":null,"Title":"[ImageClassification Transfer Learning] - API documentation should provide more meaningful descriptions","State":"open","Body":"Just to keep track of this. I understand we're in early preview and things can change, though. But since it is public preview, folks might review the reference in order to get any help.\r\n\r\nFor instance, the most \"unknown parameters\" for .NET developers have the following descriptions which don't \"tell you anything\":\r\n\r\n[dnncatalog.imageclassification reference](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.dnncatalog.imageclassification?view=ml-dotnet-preview#Microsoft_ML_DnnCatalog_ImageClassification_Microsoft_ML_ModelOperationsCatalog_System_String_System_String_System_String_System_String_System_String_System_String_Microsoft_ML_Transforms_DnnEstimator_Architecture_Microsoft_ML_Transforms_DnnEstimator_DnnFramework_System_Int32_System_Int32_System_Single_)\r\n\r\nPARAMETER DESCRIPTIONS:\r\n```\r\nepoch\r\nInt32\r\nNumber of training epochs.\r\n\r\nbatchSize\r\nInt32\r\nThe batch size for training.\r\n\r\nlearningRate\r\nSingle\r\nThe learning rate for training.\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4093","RelatedDescription":"Open issue \"[ImageClassification Transfer Learning] - API documentation should provide more meaningful descriptions\" (#4093)"},{"Id":"478176064","IsPullRequest":true,"CreatedAt":"2019-08-08T03:14:58","Actor":"eerhardt","Number":"4088","RawContent":null,"Title":"Update the 3.0 SDK to preview7","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4088","RelatedDescription":"Closed or merged PR \"Update the 3.0 SDK to preview7\" (#4088)"},{"Id":"478181329","IsPullRequest":true,"CreatedAt":"2019-08-07T23:25:30","Actor":"tannergooding","Number":"4091","RawContent":null,"Title":"Updating DatabaseLoader to support getting column info from a given .NET type.","State":"open","Body":"This adds limited support for determining the column info from a .NET type in order to match what TextLoader provides.","Url":"https://github.com/dotnet/machinelearning/pull/4091","RelatedDescription":"Open PR \"Updating DatabaseLoader to support getting column info from a given .NET type.\" (#4091)"},{"Id":"478179523","IsPullRequest":false,"CreatedAt":"2019-08-07T23:17:50","Actor":"CESARDELATORRE","Number":"4090","RawContent":null,"Title":"[ImageClassification Transfer Learning] - Warning mesage: \"Allocation of 553190400 exceeds 10% of system memory.\"","State":"open","Body":"Why are we getting this warning message (I get it multiple times) when training with a small set of images?\r\n\r\n\"2019-08-07 09:49:52.642800: W tensorflow/core/framework/allocator.cc:107] Allocation of 553190400 exceeds 10% of system memory.\"\r\n\r\n![image](https://user-images.githubusercontent.com/1712635/62675361-9dac7b80-b95b-11e9-9afc-a6df5aedf4ca.png)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4090","RelatedDescription":"Open issue \"[ImageClassification Transfer Learning] - Warning mesage: \"Allocation of 553190400 exceeds 10% of system memory.\"\" (#4090)"},{"Id":"478178249","IsPullRequest":false,"CreatedAt":"2019-08-07T23:12:23","Actor":"CESARDELATORRE","Number":"4089","RawContent":null,"Title":"[ImageClassification Transfer Learning] - Warning mesage: \"Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2\"","State":"open","Body":"When training with ImageClassifier/TransferLearning I get the following warning about the CPU instructions support (AVX2) from TF.NET or TensorFlow itself:\r\n\r\n`\"2019-08-07 09:49:00.996153: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2\"`\r\n\r\n![image](https://user-images.githubusercontent.com/1712635/62665952-257f8f00-b936-11e9-8066-1bfe6aa70ee7.png)\r\n\t\t\r\nI get it from sample code directly written with Tensorflow.NET and code with ML.NET-Transfer-Learning (since it uses TF.NET)\r\n\r\nPossible actions to do:\r\n\r\n**1. Do not show this on the UI**\r\nIf possible, we shouldn't show this kind of warning as feedback on the UI (command line).but probably only in a log file. \r\n\r\nIt is a warning shown to the user but the user doesn't have anything actionable thing to do, so why showing it?\r\n\r\n**2. Research why and where this is happening and if we can avoid this warning with a different TensorFlow binary?**","Url":"https://github.com/dotnet/machinelearning/issues/4089","RelatedDescription":"Open issue \"[ImageClassification Transfer Learning] - Warning mesage: \"Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2\"\" (#4089)"},{"Id":"478174763","IsPullRequest":false,"CreatedAt":"2019-08-07T22:58:30","Actor":"CESARDELATORRE","Number":"4087","RawContent":null,"Title":"[ImageClassification Transfer Learning] Simplify/Hide steps and hyper-parameters in new ImageClassification - Transfer Learning ","State":"open","Body":"Since the new (early preview) 'ImageClassification - Transfer Learning' is aimed to provide a high-level API per scenario (image classifciation in this case), we should simplify the API even further.\r\n\r\nHere's an example of a current training pipeline:\r\n\r\n```\r\n var pipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Label\")\r\n                    .Append(mlContext.Transforms.LoadImages(\"ImageObject\", null,\r\n                        \"ImagePath\"))\r\n                    .Append(mlContext.Transforms.ResizeImages(\"Image\",\r\n                        inputColumnName: \"ImageObject\", imageWidth: 299,\r\n                        imageHeight: 299))\r\n                    .Append(mlContext.Transforms.ExtractPixels(\"Image\",\r\n                        interleavePixelColors: true))\r\n                    .Append(mlContext.Model.ImageClassification(\"Image\",\r\n                        \"Label\", arch: DnnEstimator.Architecture.InceptionV3, \r\n                        epoch: 1, //an epoch is one learning cycle where the learner sees the whole training data set.\r\n                        batchSize: 20));  // batchSize sets then number of images to feed the model at a time\r\n```\r\n\r\nGood points to simplify are image transformations and \"technical\" hyper-paramenters:\r\n\r\n**1. Hide _image re-size_ step:** Since the image size is determined by the internal DNN model (TensorFlow model, currently) why don't we simply do it within the `ImageClassification` code?\r\n\r\n**2. Hide extract pixels step:** Same thing here. The extract pixels step should be hidden as part of the `ImageClassification` code. This is surfacing too much details. I expect the interleavePixelColors could also be determined by the info in the TF model .pb file, ot in the worst case based on the Architecture metadata that we could have per architecture (InceptionV3, etc.).\r\n \r\n**3. Hide EPOCH and BATCHSIZE:** These are also configuration details that, even when they currently have \"by default values\" (epoch=10 and batchSize=20), those values are not valid for *any* imageset and architecture and should vary depending on the specific image-set size and chosen architecture. I'd be good to have them initialized dynamically within the `ImageClassification` code depending on the context instead of \"fixed default values\" and parameters that surface to the user who might not know what is an EPOCH or BATCH.\r\n\r\nAfter simplifying the above points, the example code could look like the following, which looks a lot simpler and clean: :)\r\n\r\n```\r\n var pipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Label\")\r\n                    .Append(mlContext.Transforms.LoadImages(\"ImageObject\", null, \"ImagePath\"))\r\n                    .Append(mlContext.Model.ImageClassification(\"ImageObject\", \"Label\", arch: DnnEstimator.Architecture.InceptionV3));  \r\n```\r\n\r\nEven the architecture should also be simplified and maybe letting the user select per type of images to be trained, such as: Photos vs. Numbers/Digits vs. other characteristics that make one or the other architecture advisable to be used. A regular .NET developer usually won't know if he/she should use InceptionV3 vs. ResnetV2101, etc.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4087","RelatedDescription":"Open issue \"[ImageClassification Transfer Learning] Simplify/Hide steps and hyper-parameters in new ImageClassification - Transfer Learning \" (#4087)"},{"Id":"478128798","IsPullRequest":false,"CreatedAt":"2019-08-07T20:38:58","Actor":"luisquintanilla","Number":"4085","RawContent":null,"Title":"YOLOv3 ApplyOnnxModel throws Protobuf exception","State":"open","Body":"### System information\r\n\r\n-  .NET Version: 2.2\r\n-  ML.NET Version: 1.2\r\n\r\n### Issue\r\n\r\nGiven the following pipeline for the YOLOv3 full ONNX model downloaded from the Model Zoo:\r\n\r\n```\r\nvar pipeline = _mlContext.Transforms.LoadImages(\"input_1:01\", dataPath, \"ImagePath\")\r\n                .Append(_mlContext.Transforms.ResizeImages(\"input_1:01\", 416, 416))\r\n                .Append(_mlContext.Transforms.ExtractPixels(\"input_1:01\"))\r\n                .Append(_mlContext.Transforms.ApplyOnnxModel(\"concat_2:0\", \"input_1:01\", model\r\n```\r\n\r\nThe exception below is raised:\r\n\r\n```\r\nGoogle.Protobuf.InvalidProtocolBufferException: 'Protocol message was too large.  May be malicious.  Use CodedInputStream.SetSizeLimit() to increase the size limit.'\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4085","RelatedDescription":"Open issue \"YOLOv3 ApplyOnnxModel throws Protobuf exception\" (#4085)"},{"Id":"478117994","IsPullRequest":false,"CreatedAt":"2019-08-07T20:12:17","Actor":"CESARDELATORRE","Number":"4084","RawContent":null,"Title":"[ImageClassification Transfer Learning] Higher level API supporting image predictions based on image file paths and in-memory images, alternatively","State":"open","Body":"This is probably more for the long-term API of our ImageClassification Transfer Learning once the foundational features for our 'ImageClassification Transfer Learning' are in place.\r\n\r\nHowever, this is the point:\r\n\r\nWe aim to design and implement a high level API which will provide a very straightforward way of training (transfer learning) image classification and other capabilities such as object detection, etc. That also means, and is equally important, to be able to score/predict very easily according to normal scenarios which for images are two scenarios:\r\n\r\n- A. Score based on a provided image file path.\r\n- B. Score based on an in-memory image.\r\n\r\nThe second choice (B) is even more common for many apps, even more when moving to OBJECT DETECTION and LIVE VIDEO/IMAGES coming as streaming.\r\n\r\n**CURRENT STATE IN ML.NET API**\r\n\r\nThe issue is with the current API design of ML.NET where the ML.NET model scoring API completely depends on the way you created its original pipeline and what schema you were using, meaning:\r\n\r\n- If you trained an ML.NET model with image file paths, your ML.NET model expects an image  file path for scoring.\r\n\r\n- If you trained an ML.NET model with in-memory images (not a common/straightforward approach), your ML.NET model expects an in-memory image (Bitmap) when scoring.  \r\n\r\nHowever, that's not the typical scenario for a user where the easiest way for training is using image filepaths (that's the way you usually have image sets, right?), but then when scoring/predicting the user should be able to provide either a file path or an in-memory image (in-memory is more common for end-user apps vs. filepaths for batch processes) and anything else should be transparent for him.\r\n\r\nCURRENT WORKAROUND:\r\n\r\nSure, you can always go deeper and deep dive in the TensorFlow .pb model that was also generated by our \"ImageClassification Transfer Learning\", find out the input and output tensor names, implement a different ML.NET pipeline that accepts in-memory images, create that ML.NET model by running that pipeline once (it is not really training, it is just creating the needed transformers for scoring later on) and finally writing a more specific and not very straightforward code for scoring with in-memory images.\r\n\r\nThat process is what I wrote in the second part of this BLOG POST and related sample app which is using an in-memory image coming through HTTP and was provided by the end-user for predicting its class:\r\n\r\nhttps://devblogs.microsoft.com/cesardelatorre/run-with-ml-net-c-code-a-tensorflow-model-exported-from-azure-cognitive-services-custom-vision/\r\n\r\nBut that code for scoring a TF model with in-memory images is not straightforward to implement.\r\n\r\n**FUTURE HIGH LEVEL API for Image Classification, ObjectDetection and other high level SCENARIOS**\r\n\r\nThe point is that we want to create high level APIs targeting SCENARIOS (Image Classification, ObjectDetection, etc.). That means the API to use for the mentioned use cases (training and scoring) should also be very simple. It is not acceptable to have such as complexity (see BLOG POST above) if you want to score with an in-memory image.\r\n\r\nSomehow we should solve the conflict between the current ML.NET pipeline API requirements (you score with the same schema you trained) and the points I explained above.\r\nWe probably will need to create a higher level API on top of the current pipelines API which would be more oriented to SCENARIOS (ImageClassification, Object Detection). The current API in the ML.NET pipelines doesn't probably allow what I'm explaining.. \r\n\r\nAlso, that approach doesn't make our solution transparent to the underneath DNN architecture/framework (TensorFlow/Torch, etc.) since it needs the user to have specific code depending if he/she is using TensorFlow or Torch, because the user needs to take the \"under the covers\" TF .pb model and implement code for scoring which might also be specific for TensorFlow vs. Torch in the future. \r\n\r\nMoving forward, this discussion will be even more important for OBJECT DETECTION where in-memory image scoring is critical (streaming live video/images) while users might want to train based on image paths which is simpler.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4084","RelatedDescription":"Open issue \"[ImageClassification Transfer Learning] Higher level API supporting image predictions based on image file paths and in-memory images, alternatively\" (#4084)"},{"Id":"478103897","IsPullRequest":false,"CreatedAt":"2019-08-07T19:36:48","Actor":"CESARDELATORRE","Number":"4083","RawContent":null,"Title":"[ImageClassification Transfer Learning] Need simplified API for obtaining the List of predicted labels with their related scoring","State":"open","Body":"In the current implementation of ImageClassification Transfer Learning (but this also happens when scoring regular TensorFlow models) the list of predicted labels (usually categorical data of type string/text) with their related scoring (probability) is not straightforward to get. \r\n\r\nWe need a very simple and straightforward way of getting the best predicted values (such as categorical data) with their related probability.\r\n\r\nCurrently, in a typical ImagePrediction class you might have (such as in the sample link):\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/bbb6b1560dbd67640cf9c4b41640e26769ee664d/docs/samples/Microsoft.ML.Samples/Dynamic/ImageClassification/InceptionV3TransferLearning.cs#L101\r\n\r\n```\r\n    public class ImagePrediction\r\n    {\r\n        [ColumnName(\"Score\")]\r\n        public float[] Score;\r\n\r\n        [ColumnName(\"PredictedLabel\")]\r\n        public Int64 PredictedLabel;\r\n    }\r\n```\r\n\r\n1. First of all, the predicted label you get is a number (Int64) which is an **index**, not the value itself such as a categorical value. How is the user supposed to easily find out the text/categorical predicted label? - Sure, we might be able to find out through the schema API, but that is not straightforward.\r\n\r\n2. With the `PredictedLabel` field we're only getting **one** predicted label (so far, its index), but the user would  probably like to get an array with the \"best\" or even \"all\" predicted labels plus their correlated score/probability.\r\n\r\n3. The float[] array `Score` is precisely getting the probabilities for all the labels. But, how is the user supposed to easily be able to correlate those scores with their related labels (categorical values, for instance)?\r\n\r\n**ACTIONS MOVING FORWARD:**\r\n\r\n1. As initial step, the sample code above (or new sample) should show on the console output the list of all labels in their original form (categorical/text), or at least the best three predicted labels and their related score/probability. This should be done in the sample with the current API capabilities even if it is not straightforward to code for a user.\r\n\r\n2. Moving forward, since our goal is to create a simplified and high-level API for ImageClassification Transfer Learning, we should provide a way where such information is straightforward and **directly provided by the \"Prediction class\"**.  ","Url":"https://github.com/dotnet/machinelearning/issues/4083","RelatedDescription":"Open issue \"[ImageClassification Transfer Learning] Need simplified API for obtaining the List of predicted labels with their related scoring\" (#4083)"},{"Id":"478091103","IsPullRequest":false,"CreatedAt":"2019-08-07T19:04:11","Actor":"CESARDELATORRE","Number":"4082","RawContent":null,"Title":"Support stratify in TrainTestSplit() API","State":"open","Body":"Afaik, there's now way in ML.NET to split an original datasetset and create the two train/test datasets that are both balanced based on the LABEL/TARGET-CLASS or any other column (STRATIFICATION COLUMN). Am I right? \r\n\r\nI think this scenario is important so it is a lot easier to create balanced datasets that will provide a more reliable metrics when evaluating/testing a model.\r\n\r\n**Currently in Scikit-Learn:**\r\n\r\nFor instance, in  **ScitKit-Learn** you can do stratified sampling by splitting one data set so that each split are similar with respect to something. In a classification setting, it is often chosen to ensure that the train and test sets have approximately the same percentage of samples of each target class as the complete set.\r\n\r\nThis can be done in **ScitKit-Learn** with the stratify argument from **train_test_split()** where you can specify any column:\r\n\r\nhttps://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html\r\n\t\t\t\t\r\n```\r\nstratify : array-like or None (default=None)\r\nIf not None, data is split in a stratified fashion, using this as the class labels.\r\n```\r\n\t\r\n**Currently in ML.NET:**\r\n\t\t\t\t\r\nIn ML.NET in the [TrainTestSplit() API](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.dataoperationscatalog.traintestsplit?view=ml-dotnet) we have the **samplingKeyColumnName**, but that's kind of the opposite to 'Stratification column': \r\n\r\n_Name of a column to use for **grouping rows**. If two examples share the same value of the samplingKeyColumnName, they are guaranteed to appear in the same subset (train or test). This can be used to ensure no label leakage from the train to the test set. If null no row grouping will be performed._\r\n\r\nIt would be a good improvement for ML.NET to support a **stratify** feature in the [TrainTestSplit() API](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.dataoperationscatalog.traintestsplit?view=ml-dotnet)\r\n\r\nRELATED ISSUES:\r\n\r\nhttps://github.com/dotnet/machinelearning/issues/2536 (In reality we didn't have stratification column, that was a wrong name. It was the current samplingKeyColumnName)\r\n\r\nhttps://github.com/dotnet/machinelearning/issues/1204 (Here Pete was wrong by calling stratification column to a sampling Key Column Name or 'GroupPreservationColumn')","Url":"https://github.com/dotnet/machinelearning/issues/4082","RelatedDescription":"Open issue \"Support stratify in TrainTestSplit() API\" (#4082)"},{"Id":"478082909","IsPullRequest":true,"CreatedAt":"2019-08-07T18:44:08","Actor":"harishsk","Number":"4081","RawContent":null,"Title":"Made RankingEvaluator  and related classes public and increased the truncation limit. ","State":"open","Body":"Fixes #3993","Url":"https://github.com/dotnet/machinelearning/pull/4081","RelatedDescription":"Open PR \"Made RankingEvaluator  and related classes public and increased the truncation limit. \" (#4081)"},{"Id":"478079221","IsPullRequest":false,"CreatedAt":"2019-08-07T18:35:22","Actor":"CESARDELATORRE","Number":"4080","RawContent":null,"Title":"[ImageClassification Transfer Learning] Need to improve training perf/time","State":"open","Body":"I know we're on the work for this issue but I just wanted to create an issue to track it down. 👍 \r\n\r\nOur current performance/time needed for training when using the new [ImageClassification Transfer Learning](https://github.com/dotnet/machinelearning/pull/4057) is kind of huge compared to other frameworks, probably due to wrong approaches taken in the training process that can be solved soon.\r\n\r\nOn top of that we'll support GPU pretty soon, so that will improve training performace/time even further.\r\n\r\nHere are some comparisons with **TensorFlow.NET** vs. the new **ImageClassification Transfer Learning (Early preview)**:\r\n\r\n_A. ML.NET ImageClassification Transfer Learning training with 80 photo Files, 2 Folders/Categories_ --> It took 1,067 seconds --> **18 minutes**\r\n\r\n _b. TensorFlow.NET training with the same 80 photo Files, 2 Folders/Categories_ --> It took only **54 seconds (around 1 minute)**\r\n\r\nMeaning it was around 1,800% worse in training time (18 times worse).\r\n\r\nAnother test was:\r\nTF.NET training with 3,671 photo Files, 5 Folders/Categories (Flowers image set) --> It took 1,010 seconds (**16 minutes**) - I didn't test that with ML.NET ImageClassification Transfer Learning training since it would have taken hours.\r\n\r\n---\r\n\r\nDiscussing about it with Zeeshan, the issues and solutions for it have been identified and we expect to fix it pretty soon. 👍 ","Url":"https://github.com/dotnet/machinelearning/issues/4080","RelatedDescription":"Open issue \"[ImageClassification Transfer Learning] Need to improve training perf/time\" (#4080)"},{"Id":"478049352","IsPullRequest":true,"CreatedAt":"2019-08-07T17:37:18","Actor":"srsaggam","Number":"4079","RawContent":null,"Title":"[AutoML] Build fix for automl branch","State":"closed","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4079","RelatedDescription":"Closed or merged PR \"[AutoML] Build fix for automl branch\" (#4079)"},{"Id":"478195262","IsPullRequest":false,"CreatedAt":"2019-08-07T16:11:27","Actor":"jaxidian","Number":"4092","RawContent":null,"Title":"How do I max out CPU cores with AutoML?","State":"open","Body":"I'm using AutoML to find and train the \"best model possible\" for my set of data. This is awesome and works really well - thanks all!\r\n\r\nMy question/problem comes to trying to max out the CPU resources when doing this resource-intensive process. I have a workstation with 12 cores (24 threads) yet when I have AutoML hammering at my system for multiple minutes, I only see ~20-25% CPU usage with most of my cores sitting idle. Given that it is training many different models at once, shouldn't it be able to make use of every single core available, complete with SMT resources as well? Is this configurable somewhere?","Url":"https://github.com/dotnet/machinelearning/issues/4092","RelatedDescription":"Open issue \"How do I max out CPU cores with AutoML?\" (#4092)"},{"Id":"478015193","IsPullRequest":false,"CreatedAt":"2019-08-07T16:01:33","Actor":"nicolehaugen","Number":"4078","RawContent":null,"Title":"Not possible to do object detection in UWP app due to lack of support for SoftwareBitmap image type","State":"open","Body":"ML.NET 1.3.0\r\n\r\nCurrently it's not possible to do object detection using ML.NET with live streamed video frames within a UWP app.  The issue is that the live streamed video frames are stored as SoftwareBitmap types in UWP - for example:\r\n\r\n```Csharp\r\nSoftwareBitmap softwareBitmap = SoftwareBitmap.Convert(e.VideoFrame.SoftwareBitmap, BitmapPixelFormat.Bgra8, BitmapAlphaMode.Premultiplied);\r\n```\r\n\r\nWhen attempting to use ML.NET to setup a model, the input schema for the image must instead be System.Drawing.Bitmap.  For example:\r\n\r\n```Csharp\r\n var dataView = _mlContext.Data.LoadFromEnumerable(new List<ImageInputData>());\r\n\r\n            var pipeline = _mlContext.Transforms.ResizeImages(resizing: ImageResizingEstimator.ResizingKind.Fill, outputColumnName: \"image\", imageWidth: ImageSettings.imageWidth, imageHeight: ImageSettings.imageHeight, inputColumnName: nameof(ImageInputData.Image))\r\n                            .Append(_mlContext.Transforms.ExtractPixels(outputColumnName: \"image\"))\r\n                            .Append(_mlContext.Transforms.ApplyOnnxModel(modelFile: onnxModelFilePath, outputColumnNames: new[] { TinyYoloModelSettings.ModelOutput }, inputColumnNames: new[] { TinyYoloModelSettings.ModelInput }));\r\n\r\n            var mlNetModel = pipeline.Fit(dataView);\r\n\r\n….\r\n\r\n{\r\n    public class ImageInputData\r\n    {\r\n        [ImageType(416, 416)]\r\n        public Bitmap Image { get; set; }\r\n    }\r\n```\r\n\r\nIf you attempt to use SoftwareBitmap for the image type in the ImageInputData class, you get the following exception:\r\n\r\nException thrown: 'System.ArgumentOutOfRangeException' in System.Private.CoreLib.dll\r\nCould not determine an IDataView type for member Image\r\n\r\nThe issue here is that ML.NET only supports System.Drawing.Bitmap.  However, System.Drawing.Bitmap isn't available in UWP - instead, UWP uses SoftwareBitmap.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4078","RelatedDescription":"Open issue \"Not possible to do object detection in UWP app due to lack of support for SoftwareBitmap image type\" (#4078)"},{"Id":"477950724","IsPullRequest":false,"CreatedAt":"2019-08-07T14:05:31","Actor":"colbylwilliams","Number":"4077","RawContent":null,"Title":"Can't pass TransformerChain to AnomalyDetection.ChangeModelThreshold ","State":"open","Body":"ML.NET v1.3.1\r\n\r\n[AnomalyDetectionCatalog.ChangeModelThreshold](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Data/TrainCatalog.cs#L715-L721) was [added](https://github.com/dotnet/machinelearning/pull/4039) to fix issue [3990](https://github.com/dotnet/machinelearning/issues/3990).  However, I believe it should also support passing in an `ITransformerChain` where the LastTransformer is a `AnomalyPredictionTransformer` in addition to a single `AnomalyPredictionTransformer`.\r\n\r\nBecause `ChangeModelThreshold` must be [called after](https://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Tests/AnomalyDetectionTests.cs#L197-L199) `Fit`, in most real-world scenarios users will likely have a [`TransformerChain` instead of a single `ITransformer`](https://github.com/dotnet/machinelearning-samples/blob/master/samples/csharp/getting-started/AnomalyDetection_CreditCardFraudDetection/CreditCardFraudDetection.Trainer/Program.cs#L143).  But as `ChangeModelThreshold` is currently implemented, it can't be used in this context.","Url":"https://github.com/dotnet/machinelearning/issues/4077","RelatedDescription":"Open issue \"Can't pass TransformerChain to AnomalyDetection.ChangeModelThreshold \" (#4077)"},{"Id":"477941567","IsPullRequest":false,"CreatedAt":"2019-08-07T13:49:55","Actor":"colbylwilliams","Number":"4076","RawContent":null,"Title":"RandomizedPcaChangeThreshold test doesn't test threshold change","State":"open","Body":"The [RandomizedPcaChangeThreshold](https://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Tests/AnomalyDetectionTests.cs#L82-L110) test doesn't actually test changing the `Threshold`.  I believe [line 109](https://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Tests/AnomalyDetectionTests.cs#L109) shoule be [`ExecuteRandomizedPcaTrainerChangeThreshold`](https://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Tests/AnomalyDetectionTests.cs#L179) instead of `ExecutePipelineWithGivenRandomizedPcaTrainer`.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4076","RelatedDescription":"Open issue \"RandomizedPcaChangeThreshold test doesn't test threshold change\" (#4076)"},{"Id":"477933115","IsPullRequest":false,"CreatedAt":"2019-08-07T13:35:12","Actor":"ranigb","Number":"4075","RawContent":null,"Title":"alexnet fails with exception","State":"open","Body":"I am using ML.NET to get features for images using AlexNet. It was working a few month back but when I try it with the latest ML.NET bits it fails . There were some API changes that I tried to address but the most recent error I am getting is:\r\n\r\n>  '[ErrorCode:Fail] Load model from ...\\DnnImageModels\\AlexNetOnnx\\AlexNet.onnx failed:[ShapeInferenceError] Attribute pads has incorrect size'\r\n\r\n\r\nHere is the code snippet:\r\n\r\n```\r\n        static string _Run(string imagesCatalog, string imagesFolder)\r\n        {\r\n            var mlContext = new MLContext();\r\n\r\n \r\n\r\n            var cols = new[] {\r\n                        new TextLoader.Column(\"ImagePath\", DataKind.String, 0),\r\n                        new TextLoader.Column(\"Label\", DataKind.Int32, 1),\r\n                };\r\n\r\n \r\n\r\n            var data = mlContext.Data.CreateTextLoader(new TextLoader.Options()\r\n            {\r\n                Columns = cols\r\n            }).Load(imagesCatalog);\r\n\r\n \r\n\r\n            var pipeline = mlContext.Transforms.LoadImages(imageFolder:imagesFolder, outputColumnName: \"ImageReal\", inputColumnName: \"ImagePath\")\r\n            .Append(mlContext.Transforms.ResizeImages(outputColumnName:\"ImageObject\", inputColumnName:\"ImageReal\", imageWidth: 227, imageHeight: 227))\r\n            .Append(mlContext.Transforms.ExtractPixels(\"Pixels\", \"ImageObject\"))\r\n            .Append(mlContext.Transforms.DnnFeaturizeImage(\"FeaturizedImage\", m => m.ModelSelector.AlexNet(mlContext, m.OutputColumn, m.InputColumn), \"Pixels\"));\r\n\r\n      var transformedData = pipeline.Fit(data).Transform(data);\r\n\r\n```\r\n     the exception is fired in     \r\n\r\n> AlexNet(mlContext, m.OutputColumn, m.InputColumn), \"Pixels\"))   \r\n\r\n \r\n\r\n       \r\n\r\n### System information\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.302\r\n Commit:    9048955601\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.302\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.2\r\n  Commit:  811c3ce6c0\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4075","RelatedDescription":"Open issue \"alexnet fails with exception\" (#4075)"},{"Id":"477505670","IsPullRequest":true,"CreatedAt":"2019-08-07T04:24:29","Actor":"tannergooding","Number":"4070","RawContent":null,"Title":"Changing the database cursor to return default for DBNull","State":"closed","Body":"This updates the `DatabaseLoaderCursor` to support nullable columns by treating them as `default`.","Url":"https://github.com/dotnet/machinelearning/pull/4070","RelatedDescription":"Closed or merged PR \"Changing the database cursor to return default for DBNull\" (#4070)"},{"Id":"477655042","IsPullRequest":false,"CreatedAt":"2019-08-07T00:53:07","Actor":"bleroy","Number":"4074","RawContent":null,"Title":"French stopword \"les\" is misspelled","State":"open","Body":"The word \"les\" is a stopword in French, but it is misspelled \"lès\" in the [French.txt](https://github.com/dotnet/machinelearning/blob/a802127883c0020516aa573436029cabed65d591/src/Microsoft.ML.Transforms/Text/StopWords/French.txt#L27) file. I'd have fixed it directly there, but the repo is configured to only take changes on a branch.","Url":"https://github.com/dotnet/machinelearning/issues/4074","RelatedDescription":"Open issue \"French stopword \"les\" is misspelled\" (#4074)"},{"Id":"477604326","IsPullRequest":true,"CreatedAt":"2019-08-06T21:44:05","Actor":"srsaggam","Number":"4073","RawContent":null,"Title":"[AutoML] Fix for Exception thrown in cross val when one of the score equals infinity.","State":"closed","Body":"closes #4072 ","Url":"https://github.com/dotnet/machinelearning/pull/4073","RelatedDescription":"Closed or merged PR \"[AutoML] Fix for Exception thrown in cross val when one of the score equals infinity.\" (#4073)"},{"Id":"477526262","IsPullRequest":true,"CreatedAt":"2019-08-06T21:14:55","Actor":"srsaggam","Number":"4071","RawContent":null,"Title":"[AutoML] Bump version to ML.NET 1.3.1 in AutoML API and CLI and AutoML package version to 0.15.1","State":"closed","Body":"Bumping ml.net version to 1.3.1\r\nNeeds to be smoke tested by : @justinormont  Thanks.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4071","RelatedDescription":"Closed or merged PR \"[AutoML] Bump version to ML.NET 1.3.1 in AutoML API and CLI and AutoML package version to 0.15.1\" (#4071)"},{"Id":"477560950","IsPullRequest":false,"CreatedAt":"2019-08-06T19:43:46","Actor":"srsaggam","Number":"4072","RawContent":null,"Title":"[AutoML] AutoML.NET API/CLI cross val fails when one the scores is -infinity.","State":"open","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4072","RelatedDescription":"Open issue \"[AutoML] AutoML.NET API/CLI cross val fails when one the scores is -infinity.\" (#4072)"},{"Id":"478147052","IsPullRequest":false,"CreatedAt":"2019-08-06T17:07:01","Actor":"likellykang","Number":"4086","RawContent":null,"Title":"Easy way to get model parameters of AutoML's best run ","State":"open","Body":"It seems like there is no straightforward way to let users exam AutoML best run's model parameters when using AutoML API in ML.NET at this point. \r\nThis is potentially important for uses who need to re-produce AutoML's best run in other platforms. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/4086","RelatedDescription":"Open issue \"Easy way to get model parameters of AutoML's best run \" (#4086)"},{"Id":"477267713","IsPullRequest":true,"CreatedAt":"2019-08-06T11:37:58","Actor":"codemzs","Number":"4069","RawContent":null,"Title":"Update version to 1.4 and 0.16","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4069","RelatedDescription":"Closed or merged PR \"Update version to 1.4 and 0.16\" (#4069)"},{"Id":"477212058","IsPullRequest":true,"CreatedAt":"2019-08-06T09:19:24","Actor":"codemzs","Number":"4067","RawContent":null,"Title":"Increment build version.","State":"closed","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4067","RelatedDescription":"Closed or merged PR \"Increment build version.\" (#4067)"},{"Id":"477235644","IsPullRequest":true,"CreatedAt":"2019-08-06T08:18:03","Actor":"codemzs","Number":"4068","RawContent":null,"Title":"Fix packaging of DNN and Tensorflow nuget package.","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4068","RelatedDescription":"Closed or merged PR \"Fix packaging of DNN and Tensorflow nuget package.\" (#4068)"},{"Id":"477168596","IsPullRequest":true,"CreatedAt":"2019-08-06T04:52:33","Actor":"interesaaat","Number":"4066","RawContent":null,"Title":"Preview of Torch support (scoring)","State":"open","Body":"Fixes #4053 \r\n\r\nI follow the API used in TensorFlowTransformer very closely to add support for Torch. We have TorchModel class that can be loaded through mlContext.Model.LoadTorchModel(\"pathToModel\"). There is then a method on the TorchModel class that produces TorchScoringEstimator and that requires the usual names of input and output columns as well as the shape of the input vector. After calling Fit() on the pipeline we obtain a TorchTransformer that applies the Torch model to data in an IDataView column.\r\n\r\nFor training the only difference will be that instead of providing a path to a pretrained model, a TorchModel class will be created from a TorchSharp.NN.Module class.\r\n\r\nThis PR adds scoring of TorchScript models","Url":"https://github.com/dotnet/machinelearning/pull/4066","RelatedDescription":"Open PR \"Preview of Torch support (scoring)\" (#4066)"},{"Id":"477074513","IsPullRequest":false,"CreatedAt":"2019-08-05T21:51:59","Actor":"xtremertx","Number":"4065","RawContent":null,"Title":"TensorFlow exception triggered while loading model","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nWindows 10.0.17763 Enterprise (version: 1809) (x64)\r\n- **.NET Version (eg., dotnet --info)**: \r\n.NET Framework 4.7.2 (.NET Core 3.0.0-preview3-27503-5)\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI have tried to load the custom tensorflow model of YoloV2 full.\r\n- **What happened?**\r\nLoading of tensorflow model failed with an generic error.\r\n- **What did you expect?**\r\nModel to be succesfully loaded and used for object detection. As my model was converted via DarkFlow without any errors.\r\n\r\n### Source code / logs\r\n ```\r\n      // Create IDataView from empty list to obtain input data schema\r\n      var data = mlContext.Data.LoadFromEnumerable(new List<ImageNetData>());\r\n\r\n      // Define scoring pipeline\r\n      var pipeline = mlContext.Transforms.LoadImages(outputColumnName: \"input\", imageFolder: imagesFolder, inputColumnName: nameof(ImageNetData.ImagePath))\r\n                      .Append(mlContext.Transforms.ResizeImages(outputColumnName: \"input\", imageWidth: ImageNetSettings.imageWidth, imageHeight: ImageNetSettings.imageHeight, inputColumnName: \"input\"))\r\n                      .Append(mlContext.Transforms.ExtractPixels(outputColumnName: \"input\"))\r\n                      .Append(mlContext.Model.LoadTensorFlowModel(modelLocation)\r\n                      .ScoreTensorFlowModel(outputColumnNames: new[] { \"output\" }, inputColumnNames: new[] { \"input\" }, addBatchDimensionInput: true));\r\n\r\n      // Fit scoring pipeline\r\n      var model = pipeline.Fit(data);\r\n```\r\n\r\nTensorFlow exception triggered while loading model from 'C:\\Users\\Peter\\source\\repos\\NeuralLink\\NeuralLink\\bin\\Debug\\XXXX.pb'\r\n\r\n   at Microsoft.ML.Transforms.TensorFlow.TensorFlowUtils.LoadTFSession(IExceptionContext ectx, Byte[] modelBytes, String modelFile)\r\n   at Microsoft.ML.TensorflowCatalog.LoadTensorFlowModel(ModelOperationsCatalog catalog, String modelLocation)\r\n   at NeuralLink.Core.TensorFlowModelScorer.LoadModel() in C:\\Users\\Peter\\source\\repos\\NeuralLink\\NeuralLink\\Core\\TensorFlowModelScorer.cs:line 46\r\n   at NeuralLink.Pages.Analyze.<UserControl_Initialized>d__7.MoveNext() in C:\\Users\\Peter\\source\\repos\\NeuralLink\\NeuralLink\\Pages\\Analyze.xaml.cs:line 156\r\n\r\n_This is a seriouse flaw in ML.NET, I was expecting that it can load any VALID tensorflow model. I can post my model and some training images in case you want to investigate._\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4065","RelatedDescription":"Open issue \"TensorFlow exception triggered while loading model\" (#4065)"},{"Id":"477013757","IsPullRequest":false,"CreatedAt":"2019-08-05T19:11:07","Actor":"Dmitry-A","Number":"4064","RawContent":null,"Title":"[AutoML] Take dependency on ML utilities from ML.Core instead of a copy in AutoML using BestFriends","State":"open","Body":"Due to historical reasons we have copies of utility classes from ML.Core in AutoML.  I removed some of them and the system is set up to use ones from ML.Core, but some had non-trivial changes and I left them as-is to derisk current release.  In addition, some of them are used in the test project and we're not currently set up to take those references from tests.","Url":"https://github.com/dotnet/machinelearning/issues/4064","RelatedDescription":"Open issue \"[AutoML] Take dependency on ML utilities from ML.Core instead of a copy in AutoML using BestFriends\" (#4064)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-08-08T05:30:40.9697415Z","RunDurationInMilliseconds":640}