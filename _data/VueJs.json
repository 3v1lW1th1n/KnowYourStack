{"Data":{"Vue":{"Events":[{"Id":"6687657242","Type":"IssuesEvent","CreatedAt":"2017-10-08T03:23:32","Actor":"vue-issue-bot","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/6755","RelatedDescription":"Closed issue \"wo shi xin ren \" (#6755) at vuejs/vue","RelatedBody":"<!--\r\nIMPORTANT: Please use the following link to create a new issue:\r\n\r\n  https://new-issue.vuejs.org/\r\n\r\nIf your issue was not created using the app above, it will be closed immediately.\r\n\r\n中文用户请注意：\r\n请使用上面的链接来创建新的 issue。如果不是用上述工具创建的 issue 会被自动关闭。\r\n-->\r\n\r\n<!--\r\nLove vuejs? Please consider supporting us via Patreon or OpenCollective:\r\n👉  https://www.patreon.com/evanyou\r\n👉  https://opencollective.com/vuejs/donate\r\n-->\r\n"},{"Id":"6687657237","Type":"IssuesEvent","CreatedAt":"2017-10-08T03:23:32","Actor":"13774413093","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/issues/6755","RelatedDescription":"Opened issue \"wo shi xin ren \" (#6755) at vuejs/vue","RelatedBody":"<!--\r\nIMPORTANT: Please use the following link to create a new issue:\r\n\r\n  https://new-issue.vuejs.org/\r\n\r\nIf your issue was not created using the app above, it will be closed immediately.\r\n\r\n中文用户请注意：\r\n请使用上面的链接来创建新的 issue。如果不是用上述工具创建的 issue 会被自动关闭。\r\n-->\r\n\r\n<!--\r\nLove vuejs? Please consider supporting us via Patreon or OpenCollective:\r\n👉  https://www.patreon.com/evanyou\r\n👉  https://opencollective.com/vuejs/donate\r\n-->\r\n"},{"Id":"6687639807","Type":"IssuesEvent","CreatedAt":"2017-10-08T03:06:01","Actor":"yyx990803","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/6754","RelatedDescription":"Closed issue \"Improve docs for lodash throttle/debounce with watch\" (#6754) at vuejs/vue","RelatedBody":"### What problem does this feature solve?\r\nComponents may need to render less often than the state updates, for example you may have a realtime chart accompanied by a numerical display of the latest value, which should update less often than the chart. There may be multiple such components on the page at once.\r\n\r\nIn the docs here https://vuejs.org/v2/guide/computed.html#Watchers it shows how to debounce a method improperly. Try creating a simple timer component & put multiple on the page, there are race conditions the same as if you forgot to wrap data in a function. If you follow the examples in the docs, the components interfere with each other. Only one timer updates per second, instead of all timers updating every second.\r\n```\r\ngetAnswer: _.debounce(function() { \r\n} )\r\n```\r\n### What does the proposed API look like?\r\nChange the docs to show proper usage of debouncing a vue.js method, which is wrapping in a function, just like the data object. If you do this, multiple components on the page no longer interfere with each other.\r\n```\r\ncomputed: {\r\n        tick: function () {\r\n            return _.throttle(() => {\r\n                this.time =  new Date()\r\n            },1000)\r\n        }\r\n    }\r\n```\r\n\r\nIn your watch method, you then have to call `this.tick()`. This is not intuitive & the docs instruct you to create an app with race conditions instead. Ideally we could use some sort of syntactic sugar or something rxJS like instead of lodash & thunks which are verbose & clumsy.\r\n\r\nFurthermore, the user has to put the throttled method in the computed property instead of the methods property, which is also not documented & not intuitive. \r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6687612289","Type":"IssuesEvent","CreatedAt":"2017-10-08T02:38:48","Actor":"joshribakoff","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/issues/6754","RelatedDescription":"Opened issue \"Improve docs for lodash throttle/debounce with watch\" (#6754) at vuejs/vue","RelatedBody":"### What problem does this feature solve?\r\nIn the docs here https://vuejs.org/v2/guide/computed.html#Watchers it shows how to debounce a method improperly. Try creating a simple timer component & put multiple on the page, there are race conditions the same as if you forgot to wrap data in a function.\r\n```\r\ngetAnswer: _.debounce(function() { \r\n} )\r\n```\r\n### What does the proposed API look like?\r\nChange the docs to show proper usage of debouncing a vue.js method, which is wrapping in a function, just like the data object.\r\n```\r\nmethods: {\r\n        tick: function () {\r\n            return _.throttle(() => {\r\n                this.time =  new Date()\r\n            },1000)\r\n        }\r\n    }\r\n```\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6687594088","Type":"IssuesEvent","CreatedAt":"2017-10-08T02:22:23","Actor":"yyx990803","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/6753","RelatedDescription":"Closed issue \"how to make a custom directive that can use inline handlers\" (#6753) at vuejs/vue","RelatedBody":"### What problem does this feature solve?\r\nI'd like to make a directive like this\r\n````\r\n<button v-my-custom-directive:say=say('hi)>Say hi</button>\r\n````\r\nIt is same like this \r\n````\r\n<button v-on:click=\"say('hi')\">Say hi</button>\r\n````\r\n\r\nhow can I make the v-my-custom-directive can run say('hi')\r\nIn Vue 2.0  the v-my-custom-directive only can get a result of the say('hi) function\r\n\r\n### What does the proposed API look like?\r\nFor this below\r\n````\r\n<button v-my-custom-directive:say=say('hi)>Say hi</button>\r\n````\r\nVue Directive should support an inlineHandler function in the binding\r\n````\r\nVue.directive('my-custom-directive', {\r\n  bind(el, binding, vNode){\r\n     const {inlineHandler} = binding\r\n     inlineHandler() //  vue directive can run  inline handler like this. this will run say('hi')\r\n  }\r\n}\r\n````\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6687492410","Type":"IssuesEvent","CreatedAt":"2017-10-08T00:40:02","Actor":"bichikim","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/issues/6753","RelatedDescription":"Opened issue \"how to make a custom directive that can use inline handlers\" (#6753) at vuejs/vue","RelatedBody":"### What problem does this feature solve?\r\nI'd like to make a directive like this\r\n<button v-my-custom-directive:say=say('hi)>Say hi</button>\r\nIt is same like this \r\n<button v-on:click=\"say('hi')\">Say hi</button>\r\n\r\nhow to make the v-my-custom-directive can run say('hi')\r\nIn Vue 2.0  the v-my-custom-directive only can get a result of the say('hi) function\r\n\r\n### What does the proposed API look like?\r\nFor this below\r\n<button v-my-custom-directive:say=say('hi)>Say hi</button>\r\n\r\nVue.directive('my-custom-directive', {\r\n  bind(el, binding, vNode){\r\n     const {inlineHandler} = binding\r\n     inlineHandler() //  vue directive can run  inline handler like this\r\n  }\r\n}\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Router":{"Events":[{"Id":"6687042105","Type":"IssuesEvent","CreatedAt":"2017-10-07T18:36:21","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1788","RelatedDescription":"Closed issue \"Add a new history mode to allow parallel <router-view> components to work independently\" (#1788) at vuejs/vue-router","RelatedBody":"### What problem does this feature solve?\r\nThe problem occurs when building applications/tools inside of which you need to let your users reorganize their workspace. Users with different needs will configure their workspace to only show what they care about.\r\n\r\nLet's say I have an application made of 4 different modules:\r\n\r\n- Module A\r\n- Module B\r\n- Module C\r\n- Module D\r\n\r\nA user interested in modules A, B and C might configure his workspace like this:\r\n\r\n```\r\n ----------------------- ------------ \r\n| Module A              | Module B   |\r\n|                       |            |\r\n|                       |            |\r\n|                        ------------ \r\n|                       | Module C   |\r\n|                       |            |\r\n|                       |            |\r\n|                       |            |\r\n|                       |            |\r\n ----------------------- ------------ \r\n```\r\n\r\nAnother user, interested in modules A, B and D will configure his workspace differently:\r\n\r\n```\r\n ----------------------- ------------ \r\n| Module D              | Module B   |\r\n|                       |            |\r\n|                       |            |\r\n|                        ------------ \r\n|                       | Module A   |\r\n|                       |            |\r\n|                       |            |\r\n|                       |            |\r\n|                       |            |\r\n ----------------------- ------------ \r\n```\r\n\r\nHere the three sections of the page are independent. They all have their own navigation stack, their own \"Back\" button. This means that to be able to use a `<router-view>` in each section to switch between modules, we would need a history mode completely decoupled from the URL of the page. This is very different from named views, it's about allowing multiple virtual navigation roots per application instead of a single one (the URL).\r\n\r\nThe \"virtual\" history mode would keep track of the parallel navigation branches internally instead of modifying the URL.\r\n\r\n### What does the proposed API look like?\r\nUsing the \"virtual\" history mode would simply require the user to set `mode` to `'virtual'` inside of the router.\r\n\r\n```js\r\nconst router = new VueRouter({\r\n  mode: 'virtual',\r\n  route: [\r\n\t// Define routes\r\n\t{ path: '/module-a', name: 'a', component: ModuleA },\r\n\t{ path: '/module-b', name: 'b', component: ModuleB },\r\n\t...\r\n  ]\r\n})\r\n```\r\n\r\nIn templates, parallel `<router-view>` components will now work independently on their own virtual navigation branch instead of being tied to the URL of the page. Setting the root of a `<router-view>` component could then be done using either a `string` or a `Location` object, just like the `to` prop on the `<router-link>` component.\r\n\r\n```html\r\n<div class=\"section-1\">\r\n  <router-view root=\"a\"></router-view>  <!-- Using the route name -->\r\n</div>\r\n\r\n<div class=\"section-2\">\r\n  <router-view :root=\"{ path: 'module-b' }\"></router-view>  <!-- Using the path -->\r\n</div>\r\n\r\n...\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6687012332","Type":"IssuesEvent","CreatedAt":"2017-10-07T18:14:45","Actor":"vberlier","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1788","RelatedDescription":"Opened issue \"Add a new history mode to allow parallel <router-view> components to work independently\" (#1788) at vuejs/vue-router","RelatedBody":"### What problem does this feature solve?\r\nThe problem occurs when building applications/tools inside of which you need to let your users reorganize their workspace. Users with different needs will configure their workspace to only show what they care about.\r\n\r\nLet's say I have an application made of 4 different modules:\r\n\r\n- Module A\r\n- Module B\r\n- Module C\r\n- Module D\r\n\r\nA user interested in modules A, B and C might configure his workspace like this:\r\n\r\n```\r\n ----------------------- ------------ \r\n| Module A              | Module B   |\r\n|                       |            |\r\n|                       |            |\r\n|                        ------------ \r\n|                       | Module C   |\r\n|                       |            |\r\n|                       |            |\r\n|                       |            |\r\n|                       |            |\r\n ----------------------- ------------ \r\n```\r\n\r\nAnother user, interested in modules A, B and D will configure his workspace differently:\r\n\r\n```\r\n ----------------------- ------------ \r\n| Module D              | Module B   |\r\n|                       |            |\r\n|                       |            |\r\n|                        ------------ \r\n|                       | Module A   |\r\n|                       |            |\r\n|                       |            |\r\n|                       |            |\r\n|                       |            |\r\n ----------------------- ------------ \r\n```\r\n\r\nHere the three sections of the page are independent. They all have their own navigation stack, their own \"Back\" button. This means that to be able to use a `<router-view>` in each section to switch between modules, we would need a history mode completely decoupled from the URL of the page. This is very different from named views, it's about allowing multiple virtual navigation roots per application instead of a single one (the URL).\r\n\r\nThe \"virtual\" history mode would keep track of the parallel navigation branches internally instead of modifying the URL.\r\n\r\n### What does the proposed API look like?\r\nUsing the \"virtual\" history mode would simply require the user to set `mode` to `'virtual'` inside of the router.\r\n\r\n```js\r\nconst router = new VueRouter({\r\n  mode: 'virtual',\r\n  route: [\r\n\t// Define routes\r\n\t{ path: '/module-a', name: 'a', component: ModuleA },\r\n\t{ path: '/module-b', name: 'b', component: ModuleB },\r\n\t...\r\n  ]\r\n})\r\n```\r\n\r\nIn templates, parallel `<router-view>` components will now work independently on their own virtual navigation branch instead of being tied to the URL of the page. Setting the root of a `<router-view>` component could then be done using either a `string` or a `Location` object, just like the `to` prop on the `<router-link>` component.\r\n\r\n```html\r\n<div class=\"section-1\">\r\n  <router-view root=\"a\"></router-view>  <!-- Using the route name -->\r\n</div>\r\n\r\n<div class=\"section-2\">\r\n  <router-view :root=\"{ path: 'module-b' }\"></router-view>  <!-- Using the path -->\r\n</div>\r\n\r\n...\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6685473425","Type":"IssuesEvent","CreatedAt":"2017-10-06T22:15:59","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1787","RelatedDescription":"Closed issue \"Component reloaded\" (#1787) at vuejs/vue-router","RelatedBody":"### Version\r\n2.7.0\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/yyx990803/xgrjzsup/](https://jsfiddle.net/yyx990803/xgrjzsup/)\r\n\r\n### Steps to reproduce\r\n1. Change Foo Template\r\nconst Foo = { template: '<div><input>foo</div>' }\r\n\r\n2. Click Go To Foo, type something in the input\r\n\r\n3. Click Go To Bar\r\n\r\n4. Click Go To Foo\r\n\r\n### What is expected?\r\nWhat I type in input inside component \"Foo\" still exists\r\n\r\n### What is actually happening?\r\nWhat I type in input is gone, it feels like the component being reloaded\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6685400586","Type":"IssuesEvent","CreatedAt":"2017-10-06T21:50:57","Actor":"andrew-vandenbrink","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1787","RelatedDescription":"Opened issue \"Component reloaded\" (#1787) at vuejs/vue-router","RelatedBody":"### Version\r\n2.7.0\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/yyx990803/xgrjzsup/](https://jsfiddle.net/yyx990803/xgrjzsup/)\r\n\r\n### Steps to reproduce\r\n1. Change Foo Template\r\nconst Foo = { template: '<div><input>foo</div>' }\r\n\r\n2. Click Go To Foo, type something in the input\r\n\r\n3. Click Go To Bar\r\n\r\n4. Click Go To Foo\r\n\r\n### What is expected?\r\nWhat I type in input inside component \"Foo\" still exists\r\n\r\n### What is actually happening?\r\nWhat I type in input is gone, it feels like the component being reloaded\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6684701923","Type":"IssuesEvent","CreatedAt":"2017-10-06T18:43:45","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1786","RelatedDescription":"Closed issue \"router.match(location) not return query object from url like this.$route\" (#1786) at vuejs/vue-router","RelatedBody":"### Version\r\n2.7.0\r\n\r\n### Reproduction link\r\n[https://github.com/BlackCode7/vue-router-bug](https://github.com/BlackCode7/vue-router-bug)\r\n\r\n### Steps to reproduce\r\n1. git clone https://github.com/BlackCode7/vue-router-bug\r\n2. npm install\r\n3. npm run dev\r\n4. open console\r\n5. click on the \"Get console.log\" button\r\n6. Look at both objects, they should be the same but \"router.match(location)\" loses query parameters\r\n\r\n### What is expected?\r\nObjects returned by \"this.$route\" and \"router.match(location)\" should be the same\r\n\r\n### What is actually happening?\r\nThe object returned by \"router.match(location)\", contains an empty query object inside when there are query in the url\r\n\r\n---\r\nDocumentation: https://router.vuejs.org/en/api/route-object.html\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Vuex":{"Events":[{"Id":"6685331659","Type":"IssuesEvent","CreatedAt":"2017-10-06T21:29:20","Actor":"amritk","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vuex/issues/978","RelatedDescription":"Closed issue \"Client dom not matching server in SSR\" (#978) at vuejs/vuex","RelatedBody":"### Version\r\n2.4.1\r\n\r\n### Reproduction link\r\n[https://github.com/amritk/vuex-ssr-issue](https://github.com/amritk/vuex-ssr-issue)\r\n\r\n### Steps to reproduce\r\n- Set the vuex state in a child component\r\n- Use a v-if based on that same state value in the parent component, ie for a title\r\n\r\n\r\n### What is expected?\r\nIt should read the value and show/hide the component based on the value, just like in the client.\r\n\r\n### What is actually happening?\r\nThe server side rendered part does not render the component from v-if, the client does, so it shows the error:\r\n```\r\n[Vue warn]: The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.\r\n```\r\n\r\n---\r\nNow is it because the value is set too late in the child before it is read? Then what would be the correct way to set the title of the parent component from the child routes. \r\n\r\n*I used the vuetify template since it comes with SSR on the ready, Vuetify does not affect this bug.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6685320820","Type":"IssuesEvent","CreatedAt":"2017-10-06T21:26:10","Actor":"amritk","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vuex/issues/978","RelatedDescription":"Opened issue \"Client dom not matching server in SSR\" (#978) at vuejs/vuex","RelatedBody":"### Version\r\n2.4.1\r\n\r\n### Reproduction link\r\n[https://github.com/amritk/vuex-ssr-issue](https://github.com/amritk/vuex-ssr-issue)\r\n\r\n### Steps to reproduce\r\n- Set the vuex state in a child component\r\n- Use a v-if based on that same state value in the parent component, ie for a title\r\n\r\n\r\n### What is expected?\r\nIt should read the value and show/hide the component based on the value, just like in the client.\r\n\r\n### What is actually happening?\r\nThe server side rendered part does not render the component from v-if, the client does, so it shows the error:\r\n\r\n[Vue warn]: The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.\r\n\r\n\r\n---\r\nNow is it because the value is set too late in the child before it is read? Then what would be the correct way to set the title of the parent component from the child routes. \r\n\r\n*I used the vuetify template since it comes with SSR on the ready, Vuetify does not affect this bug.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"}},"RunOn":"2017-10-08T05:30:31.5922645Z","RunDurationInMilliseconds":1883}