{"Data":{"Blog":{"FeedItems":[{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel. Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7423166978","Type":"IssuesEvent","CreatedAt":"2018-03-23T03:36:00","Actor":"rockerinthelocker","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2994","RelatedDescription":"Closed issue \"Debug type set to None throws InvalidOperationException (VS 15.7 Preview 2, IIS Express , ASP.NET Core MVC 2.1)\" (#2994) at aspnet/Home","RelatedBody":"When starting an ASP.NET Core MVC 2.1 (preview 1) application (default MVC project) -- via Visual Studio 15.7 Preview 2 => IIS Express --, and **debug type** is set to **none**, the following exception is thrown.\r\n\r\n```\r\nSystem.InvalidOperationException: The debug type specified in the dependency context could be parsed. The debug type value 'none' is not supported.\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.CSharpCompiler.GetEmitOptions(CompilationOptions dependencyContextOptions)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.CSharpCompiler.EnsureOptions()\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.CSharpCompiler.get_ParseOptions()\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.CSharpCompiler.CreateSyntaxTree(SourceText sourceText)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CreateCompilation(String compilationContent, String assemblyName)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(RazorCodeDocument codeDocument, String generatedCode)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(String relativePath)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.OnCacheMiss(String normalizedPath)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorPageFactoryProvider.CreateFactory(String relativePath)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.CreateCacheResult(HashSet`1 expirationTokens, String relativePath, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.OnCacheMiss(ViewLocationExpanderContext expanderContext, ViewLocationCacheKey cacheKey)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.LocatePageFromViewLocations(ActionContext actionContext, String pageName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.FindView(ActionContext actionContext, ViewResult viewResult)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.<ExecuteAsync>d__6.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.ViewResult.<ExecuteResultAsync>d__26.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultAsync>d__19.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResultFilterAsync>d__27`2.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultFilters>d__25.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__22.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\r\n\r\n```"},{"Id":"7422867212","Type":"IssuesEvent","CreatedAt":"2018-03-23T01:50:49","Actor":"rockerinthelocker","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2994","RelatedDescription":"Opened issue \"Debug type set to None throws InvalidOperationException (VS 15.7 Preview 2, IIS Express , ASP.NET Core MVC 2.1)\" (#2994) at aspnet/Home","RelatedBody":"When starting an ASP.NET Core MVC 2.1 (preview 1) application (default MVC project) -- via Visual Studio 15.7 Preview 2 => IIS Express --, and **debug type** is set to **none**, the following exception is thrown.\r\n\r\n```\r\nSystem.InvalidOperationException: The debug type specified in the dependency context could be parsed. The debug type value 'none' is not supported.\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.CSharpCompiler.GetEmitOptions(CompilationOptions dependencyContextOptions)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.CSharpCompiler.EnsureOptions()\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.CSharpCompiler.get_ParseOptions()\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.CSharpCompiler.CreateSyntaxTree(SourceText sourceText)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CreateCompilation(String compilationContent, String assemblyName)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(RazorCodeDocument codeDocument, String generatedCode)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(String relativePath)\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.OnCacheMiss(String normalizedPath)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorPageFactoryProvider.CreateFactory(String relativePath)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.CreateCacheResult(HashSet`1 expirationTokens, String relativePath, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.OnCacheMiss(ViewLocationExpanderContext expanderContext, ViewLocationCacheKey cacheKey)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.LocatePageFromViewLocations(ActionContext actionContext, String pageName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.FindView(ActionContext actionContext, ViewResult viewResult)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.<ExecuteAsync>d__6.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.ViewResult.<ExecuteResultAsync>d__26.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultAsync>d__19.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResultFilterAsync>d__27`2.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeResultFilters>d__25.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextResourceFilter>d__22.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeAsync>d__15.MoveNext()\r\n   at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\r\n   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\r\n\r\n```"},{"Id":"7422547545","Type":"IssuesEvent","CreatedAt":"2018-03-22T23:54:28","Actor":"natemcmaster","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2911","RelatedDescription":"Closed issue \"Provide an obsolete warning when DotNetCliToolReference is used to packages that are now built-in\" (#2911) at aspnet/Home","RelatedBody":"Follow-up to https://github.com/aspnet/DotNetTools/issues/399.\r\n\r\nDotNetCliToolReference to dotnet-watch, dotnet-user-secrets, and others aren't needed and won't work anymore. However, when users upgrade their project, dotnet restore will continue to download and install the tools package silently. We should look into ways for providing some kind of warning or output on restore that indicates the user that the reference is no longer required to acquire those tools."},{"Id":"7422351414","Type":"IssuesEvent","CreatedAt":"2018-03-22T22:53:28","Actor":"rockerinthelocker","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2993","RelatedDescription":"Opened issue \"Custom Web.config - aspNetCore section gets overwritten in Debug mode\" (#2993) at aspnet/Home","RelatedBody":"After upgrading to Visual Studio 15.7 Preview 2 (added ANCM InProcess support for IIS Express), the **aspNetCore** section of a custom Web.config added to the project gets overwritten when starting IIS Express in Debug mode via Visual Studio UI. If **hostingModel=\"InProcess\"** exists, this attribute gets removed so the application won't run in-process. Also, **startupTimeLimit=\"3600\"** and **requestTimeout=\"23:00:00\"** are added. Finally, environment variables **ASPNETCORE_HTTPS_PORT** and **ASPNETCORE_ENVIRONMENT** are added as well. Of course, deploying such a messed up Web.config file to the production server doesn't work out well.\r\n"},{"Id":"7421223577","Type":"IssuesEvent","CreatedAt":"2018-03-22T18:53:40","Actor":"ryanbrandenburg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2905","RelatedDescription":"Closed issue \"Add detailed description of resource fallback behavior to documentation\" (#2905) at aspnet/Home","RelatedBody":"Let's clarify how the resource fallback behavior works for Localization, including how a `*.resx` file (vs a `*.culture.resx` file) relates. Be very explicit about parent culture fallback, Default vs Neutral language and reorder things to clarify."},{"Id":"7421197935","Type":"IssuesEvent","CreatedAt":"2018-03-22T18:48:48","Actor":"ryanbrandenburg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2991","RelatedDescription":"Opened issue \"Flaky tests: ConfigurationTests.CreatingWritingDeletingCreatingFileWillReload ConfigurationTests.TouchingFileWillReload\" (#2991) at aspnet/Home","RelatedBody":"These tests have recently taken to failing on OSx: http://aspnetci/project.html?projectId=XPlat&buildTypeId=XPlat_Mac_MacUniverseCoreCLR&tab=testDetails&testNameId=3759396832575739260&order=START_DATE_DESC&branch_XPlat=__all_branches__&itemsCount=50\r\n\r\nOffending tests include:\r\n\r\n- ConfigurationTests.CreatingWritingDeletingCreatingFileWillReload\r\n- ConfigurationTests.TouchingFileWillReload\r\n```\r\nAssert.Equal() Failure\r\n                   ↓ (pos 9)\r\nExpected: JsonValue2\r\nActual:   JsonValue1\r\n                   ↑ (pos 9)\r\n   at Microsoft.Extensions.Configuration.Test.ConfigurationTests.<TouchingFileWillReload>d__32.MoveNext() in /_/test/Config.FunctionalTests/ConfigurationTests.cs:line 598\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```\r\n\r\nA non-exhaustive list of the builds affected by this can be found here.\r\n\r\nSplit off from aspnet/DotNetTools#412."}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7423291999","Type":"PullRequestEvent","CreatedAt":"2018-03-23T04:27:44","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1697","RelatedDescription":"Closed pull request \"Remove message content from JS client logging (#1694)\" (#1697) at aspnet/SignalR","RelatedBody":""},{"Id":"7423287825","Type":"PullRequestEvent","CreatedAt":"2018-03-23T04:25:45","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1697","RelatedDescription":"Opened pull request \"Remove message content from JS client logging (#1694)\" (#1697) at aspnet/SignalR","RelatedBody":""},{"Id":"7423285819","Type":"PullRequestEvent","CreatedAt":"2018-03-23T04:24:52","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1694","RelatedDescription":"Merged pull request \"Remove message content from JS client logging\" (#1694) at aspnet/SignalR","RelatedBody":"https://github.com/aspnet/SignalR/issues/1449"},{"Id":"7423190042","Type":"PullRequestEvent","CreatedAt":"2018-03-23T03:45:08","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1696","RelatedDescription":"Opened pull request \"The rename games part 1 of many\" (#1696) at aspnet/SignalR","RelatedBody":"- React to rename of EndPoint to ConnectionHandler\r\n\r\n\r\nSee https://github.com/aspnet/KestrelHttpServer/pull/2413"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7422506101","Type":"PullRequestEvent","CreatedAt":"2018-03-22T23:40:34","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7532","RelatedDescription":"Opened pull request \"ViewDataAttribute\" (#7532) at aspnet/Mvc","RelatedBody":""},{"Id":"7422493345","Type":"PullRequestEvent","CreatedAt":"2018-03-22T23:36:26","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7524","RelatedDescription":"Closed pull request \"Cleanup ApplicationPartFactory\" (#7524) at aspnet/Mvc","RelatedBody":""},{"Id":"7422406269","Type":"PullRequestEvent","CreatedAt":"2018-03-22T23:09:27","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7531","RelatedDescription":"Opened pull request \"Feature/app part\" (#7531) at aspnet/Mvc","RelatedBody":""},{"Id":"7422306728","Type":"PullRequestEvent","CreatedAt":"2018-03-22T22:41:13","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7530","RelatedDescription":"Opened pull request \"[Fixes #7518] NullReferenceException thrown when Controller method us…\" (#7530) at aspnet/Mvc","RelatedBody":"…es Guid parameter default value\r\n\r\nNote that this is for an RC1 issue and so review it per your priorities."}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7423160221","Type":"IssuesEvent","CreatedAt":"2018-03-23T03:33:21","Actor":"binhghi5","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1691","RelatedDescription":"Closed issue \"Asp identity not working without https\" (#1691) at aspnet/Identity","RelatedBody":"- Open Visual Studio 2017\r\n- Create new ASP Web App (net core 2.0) with Individual User Account (Authentication)\r\n- Run the app with default url (https://localhost:44330)\r\n- Create new user (UserName: user1@gmail.com | Password: Abc@1234) and login ==> success!!\r\n- Stop the app\r\n- Open Properties tab -> Debug -> uncheck \"Enable SSL\" -> copy text from \"App URL\" textbox to \"Launch browser\" textbox\r\n- Run the app again (http://localhost:12421/)\r\n- Login using user1@gmail.com ===> FAIL!! (This page isn’t working HTTP ERROR 400)\r\n\r\nWithout https, some Asp identity cookies and antiforgerytoken cookies couldn't be created.\r\nAnd............................ HOW TO FIX IT?????????????????????????????????"},{"Id":"7421306695","Type":"PullRequestEvent","CreatedAt":"2018-03-22T19:09:49","Actor":"ryanbrandenburg","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1678","RelatedDescription":"Merged pull request \"Skip flaky tests\" (#1678) at aspnet/Identity","RelatedBody":""},{"Id":"7419146245","Type":"IssuesEvent","CreatedAt":"2018-03-22T13:18:46","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1341","RelatedDescription":"Reopened issue \"GDPR Support\" (#1341) at aspnet/Identity","RelatedBody":"- [x] Extension points to enable encryption of user data\r\n- [x] Extension point to enable downloading of user data\r\n- [x] Extension point to enable deletion of user data"},{"Id":"7419144544","Type":"IssuesEvent","CreatedAt":"2018-03-22T13:18:25","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/836","RelatedDescription":"Closed issue \"Consider protecting tokens in IUserAuthenticationTokenStore\" (#836) at aspnet/Identity","RelatedBody":"Since this seems geared for storing user's access tokens back to whatever external IdP, and given that you have no idea what scope those access tokens might provide access to, storing the values in plain text in the store seems a bit open. Sure, perhaps most of these tokens will be for something like a user info endpoint, but even that is indirectly PII you might be leaking if the DB is compromised. \n\nSeems like a perfect use of a decorator (only if the DI system allowed named instances/decorators).\n\nAnyway, just interested in a conversation and awareness about this.\n"},{"Id":"7419137515","Type":"IssuesEvent","CreatedAt":"2018-03-22T13:17:10","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Identity/issues/836","RelatedDescription":"Reopened issue \"Consider protecting tokens in IUserAuthenticationTokenStore\" (#836) at aspnet/Identity","RelatedBody":"Since this seems geared for storing user's access tokens back to whatever external IdP, and given that you have no idea what scope those access tokens might provide access to, storing the values in plain text in the store seems a bit open. Sure, perhaps most of these tokens will be for something like a user info endpoint, but even that is indirectly PII you might be leaking if the DB is compromised. \n\nSeems like a perfect use of a decorator (only if the DI system allowed named instances/decorators).\n\nAnyway, just interested in a conversation and awareness about this.\n"},{"Id":"7418687079","Type":"IssuesEvent","CreatedAt":"2018-03-22T11:46:57","Actor":"DianaKoenraadt","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1705","RelatedDescription":"Closed issue \"Where's the ASP.Net Identity 2.2.1 source code?\" (#1705) at aspnet/Identity","RelatedBody":"Sorry to put this in the issue tracker, but it's my last resort. I can't seem to find the Microsoft.AspNet.Identity.Core version 2.2.1 (NuGet) source code. \r\n\r\nThis NuGet package was released on 4/7/2015.\r\nIf I look at the releases of this here repo, at that date no specific release was done. If I do download the closest release, that's 1.1.2, not 2.2.1. And I see that UserManager has only one generic parameter, TUser, while at version 2.2.1 I it's TUser, TKey. \r\n\r\nSo, I'm either not looking in the right places, or I'm not using the correct version numbers. Every time I search, I'm redirected to Core, but that's explicitly not what I'm looking for. I'm at a loss.\r\n\r\nCan someone point me in the right direction please? \r\nOr, to put it a bit less specific: What's up with all the version numbers? Is there an overview somewhere? :/\r\n\r\nThank you kindly."},{"Id":"7418648593","Type":"IssuesEvent","CreatedAt":"2018-03-22T11:38:45","Actor":"DianaKoenraadt","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1705","RelatedDescription":"Opened issue \"Where's the ASP.Net 2.2.1 source code?\" (#1705) at aspnet/Identity","RelatedBody":"Sorry to put this in the issue tracker, but it's my last resort. I can't seem to find the Microsoft.AspNet.Identity.Core version 2.2.1 (NuGet) source code. \r\n\r\nThis NuGet package was released on 4/7/2015.\r\nIf I look at the releases of this here repo, at that date no specific release was done. If I do download the closest release, that's 1.1.2, not 2.2.1. And I see that UserManager has only one generic parameter, TUser, while at version 2.2.1 I it's TUser, TKey. \r\n\r\nSo, I'm either not looking in the right places, or I'm not using the correct version numbers. Every time I search, I'm redirected to Core, but that's explicitly not what I'm looking for. I'm at a loss.\r\n\r\nCan someone point me in the right direction please?\r\nThank you kindly."},{"Id":"7416213770","Type":"PullRequestEvent","CreatedAt":"2018-03-21T23:56:41","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1704","RelatedDescription":"Opened pull request \"ApplicationPartFactory part 3\" (#1704) at aspnet/Identity","RelatedBody":""}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7423315153","Type":"PullRequestEvent","CreatedAt":"2018-03-23T04:38:15","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2413","RelatedDescription":"Merged pull request \"Renames from API review\" (#2413) at aspnet/KestrelHttpServer","RelatedBody":"- Rename Microsoft.AspNetCore.Protocols.Abstractions to Microsoft.AspNetCore.Connections.Abstractions.\r\n- Renamed IConnectionHandler to IConnectionDispatcher (and related properties and types)\r\n- Added ConnectionHandler and UseConnectionHandler extension method to Connections.Abstractions.\r\n\r\nFixes #2412 \r\n\r\n/cc @natemcmaster @ryanbrandenburg @pranavkm for rename visibility. I also need to rename packages in SignalR."},{"Id":"7422886279","Type":"PullRequestEvent","CreatedAt":"2018-03-23T01:57:39","Actor":"JunTaoLuo","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2418","RelatedDescription":"Opened pull request \"Re-enable api check\" (#2418) at aspnet/KestrelHttpServer","RelatedBody":"#2350 Unblocked by https://github.com/aspnet/BuildTools/commit/d944172721e77b6ca05a512303a0859634786746"},{"Id":"7422669660","Type":"IssuesEvent","CreatedAt":"2018-03-23T00:37:15","Actor":"srininz77","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2417","RelatedDescription":"Opened issue \"chunked transfer encoding response\" (#2417) at aspnet/KestrelHttpServer","RelatedBody":"Why does Kestrel always add transfer-encoding: \"chunked\" response header? IIS doesn't do it. Is this by design or a bug?"},{"Id":"7421215184","Type":"IssuesEvent","CreatedAt":"2018-03-22T18:52:03","Actor":"sebastienros","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2416","RelatedDescription":"Opened issue \"Uncommon memory consumption with Sockets\" (#2416) at aspnet/KestrelHttpServer","RelatedBody":"I updated the reliability tests to use Sockets now that it's the default transport.\r\n\r\nThe memory consumption seems to grow, I would wait for more days to make any conclusion.\r\n\r\n![image](https://user-images.githubusercontent.com/1165805/37791801-5af0ff76-2dc7-11e8-8183-4e968954b861.png)\r\n\r\nNB: Right now I can't track the changes as EF has an issue on the latest bits."}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7422928715","Type":"IssuesEvent","CreatedAt":"2018-03-23T02:12:29","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2205","RelatedDescription":"Closed issue \"Razor extension does not report the right version number in Help->About\" (#2205) at aspnet/Razor","RelatedBody":"![image](https://user-images.githubusercontent.com/1430011/37742327-6aadcb06-2d22-11e8-8d81-b4b482476aba.png)\r\n\r\n\r\nWe will likely need to do something like : https://github.com/dotnet/roslyn/blob/14aed138a01c448143b9acf0fe77a662e3dfe2f4/src/VisualStudio/Core/Def/Utilities/ProvideRoslynVersionRegistration.cs\r\n\r\nThe code that VS gives you out of the box only provides you the ability to pass a hardcoded version, and so that's what we've always done."},{"Id":"7422797412","Type":"PullRequestEvent","CreatedAt":"2018-03-23T01:25:14","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2210","RelatedDescription":"Merged pull request \"Add a version to the Razor about dialog entry\" (#2210) at aspnet/Razor","RelatedBody":""},{"Id":"7422664627","Type":"IssuesEvent","CreatedAt":"2018-03-23T00:35:18","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2171","RelatedDescription":"Closed issue \"Codegen extra metadata on Razor Pages so Mvc can infer RouteTemplate using RazorCompiledItem\" (#2171) at aspnet/Razor","RelatedBody":"Precursor to https://github.com/aspnet/Mvc/pull/7427.\r\n\r\nWe want to use RazorCompiledItem as the be all, end all source for all things Razor. Today we don't have a way to get to the route template of a Razor Page without cross-referencing the `RazorPageAttribute`. Generating additional metadata on the Razor Page generated type would negate this."},{"Id":"7422594176","Type":"PullRequestEvent","CreatedAt":"2018-03-23T00:10:13","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2212","RelatedDescription":"Merged pull request \"Remove EnableDefaultCompiledViewAssemblyLoadBehavior and add a switch…\" (#2212) at aspnet/Razor","RelatedBody":"… to disable generating application part factory attribute"},{"Id":"7422593774","Type":"PullRequestEvent","CreatedAt":"2018-03-23T00:10:06","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2212","RelatedDescription":"Opened pull request \"Remove EnableDefaultCompiledViewAssemblyLoadBehavior and add a switch…\" (#2212) at aspnet/Razor","RelatedBody":"… to disable generating application part factory attribute"},{"Id":"7422593199","Type":"PullRequestEvent","CreatedAt":"2018-03-23T00:09:54","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2206","RelatedDescription":"Merged pull request \"Remove EnableDefaultCompiledViewAssemblyLoadBehavior\" (#2206) at aspnet/Razor","RelatedBody":""},{"Id":"7422539258","Type":"IssuesEvent","CreatedAt":"2018-03-22T23:51:48","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2211","RelatedDescription":"Opened issue \"Future Investments: Replace Partial Parsing\" (#2211) at aspnet/Razor","RelatedBody":"## Summary\r\n\r\nRazor (in the editor) runs a parsing loop on edits to update the extents of projection buffers when edits occur. \r\n\r\nThe primary goal of this process is to do as little work as possible while ensuring that the state of the various buffers reflects an accurate understanding of the document.  When an edit occurs, the editor will attempt to apply that edit to a buffer based on its bounds. Our algorithm attempts to understand if the edit being applied changes the document in a fashion that makes the underlying buffers incorrect, and will run the code generation process, and then update the buffers after a background parse to the correct extents. We refer to an edit which requires no action from us as *accepted*, and an edit which requires us to update the buffers as *rejected*. \r\n\r\nAs a secondary goal, the parsing loop must avoid interfering with various editor systems that provide Intellisense features. This means that we need to defer changes that would update the underlying buffers while completion is being shown, or about to be shown. We do this by introducing the concept of a *provisional* change, where we temporarily treat an edit as *accepted*, but queue a background update of the buffers to ensure that the result is correct eventually.\r\n\r\nTo determine which of these three states an edit falls into, we have a subsystem referred to as *partial parsing* - comprised of an annotated syntax tree and a dedicated thread per-editor. The partial parsing system is pessimistic, and does not reuse the actual Razor parser. Instead, the partial parsing system has special case code that must be correct for many basic editing and intellisense features to function.\r\n\r\nThese two goals are in tension. An algorithm that is maximally pessimistic for accepting changes would always partition the buffers correctly, but would be slow to use and prevent completion from functioning. An algorithm that was maximally permissive would get lots of things wrong, including showing lots of incorrect colorization and completion.\r\n\r\nI don't believe the current approach will meet all of our goals long terms. We are aware of IDE features that are currently broken such as signature help, and the path that we have to enable these features using the current approach is very challenging. The proposal here is to consider replacing this hand-tuned system with smarter reuse of our actual Razor parser.\r\n\r\n## Problems with the current approach\r\n\r\n**Changing projection buffers is expensive** When we redraw the projection buffer boundaries, this causes a bunch of other parts of the editor (C# and HTML) to do work. Currently we don't any differential updates in the case of a *rejected* edit, it updates everything. \r\n\r\n**Correctness is ad-hoc** [This is](https://developercommunity.visualstudio.com/content/problem/214257/razor-doesnt-recognize-a-changed-model-type-until.html?childToView=219299#comment-219299) an example of a bug that occurs when we're not pessimistic enough.\r\n\r\n**Pessimism breaks Intellisense** [This is](https://github.com/aspnet/Razor/issues/1255) and example of a bug that occurs when we're two pessimistic.\r\n\r\n**We're duplicating the code** The more we improve the fidelity of partial parsing without addressing the design issues, the more functionality we duplicate.\r\n\r\n## Proposed solution\r\n\r\nThe proposed solution is that we keep the core idea of a *reactive* parser that updates buffers, but that we use the *real* Razor parser and apply a diff to determine whether to accept or reject a parse. That means that we need to build ideas like provisional changes and regions that should always reject a change into the actual syntax tree. \r\n\r\nWhat this looks like end-to-end:\r\n- Add *provisional* data to the syntax tree\r\n- Add *rejected* data to the syntax tree \r\n- Run the *real* parser not the *partial parser*\r\n- Apply a diff to the syntax tree and determine if delta matches the edit\r\n\r\n## Prioritization and costing\r\n\r\nWe should consider carefully what we're trading off here. On one hand, expanding the set of *partial parser* cases is expensive, ad hoc and error-prone. On the other hand, doing a big investment is risky, time consuming, and don't deliver any user value unless we actually address the problems identified here.\r\n\r\nOur prioritization may change based on a few planned other investments:\r\n\r\n- If we needed to build a 'component mode' for the Razor parser (Blazor), we would need to retrofit the Razor parser with a deeper understanding of HTML which would be almost a rewrite. \r\n- If we were working on VS Code, we might want a language design that is less \"chatty\", in which case we would care deeply about the performance cost of partial parsing.\r\n- If we found more significant IDE features that don't work correctly, that might raise the priority.\r\n\r\n------\r\n\r\nThe biggest cost, and value of the Razor parser system currently is the tests. \r\n\r\nOur tests are critical since they are the best 'spec' we have for the Razor language, and the tests for the actual parser are fairly thorough. If we chose to invest here, the first step would be to modernize these tests and reduce the cost of maintenance by moving the baselines into a serialization format. Using serialization and baselines makes it easy to expect deltas in our parser's behavior, and makes it easy to automate evolution of the parser and syntax design.\r\n\r\nWe additionally should improve our coverage of the editor tests, by building a framework for  *the parser in motion*. This could look similar to what [Roslyn has](https://github.com/dotnet/roslyn/blob/master/src/EditorFeatures/CSharpTest/EditAndContinue/StatementEditingTests.cs). Currently our testing of the *partial parser* is ad-hoc and adding new tests is tedious.\r\n\r\nThese investments could happen at any time without risk or substantial diversion of our resources.\r\n\r\nI think only after doing these improvements would we have the confidence to do this work in earnest.\r\n\r\n-----\r\n\r\nAs to the costing of rewriting the *partial parser* to use the actual parser, I think the cost is probably about 3 weeks for a single engineer. This includes getting rid of the concept of 'edit handler' and replacing it with a more semantic notion on each syntax tree node. We also need to account for the cases that currently are treated as provisional in the syntax tree, so that we can still behave correctly in those cases. We need to write a *diff* algorithm to determine how the syntax tree differs and whether to *reject* the edit."},{"Id":"7422366604","Type":"PullRequestEvent","CreatedAt":"2018-03-22T22:57:42","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/pull/2209","RelatedDescription":"Closed pull request \"Add partial parsing for parenthesis\" (#2209) at aspnet/Razor","RelatedBody":"This is part of a fix for #1255 - this change enables signature help in\r\nimplicit expressions by improving the partial parsing.\r\n\r\nSpecifically we can now partial parse the addition of parenthesis at the\r\nend of an implicit expression, which is a common case for signature\r\nhelp."},{"Id":"7422130425","Type":"PullRequestEvent","CreatedAt":"2018-03-22T21:57:16","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2210","RelatedDescription":"Opened pull request \"Add a version to the Razor about dialog entry\" (#2210) at aspnet/Razor","RelatedBody":""},{"Id":"7421796524","Type":"PullRequestEvent","CreatedAt":"2018-03-22T20:47:41","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2209","RelatedDescription":"Opened pull request \"Add partial parsing for parenthesis\" (#2209) at aspnet/Razor","RelatedBody":"This is part of a fix for #1255 - this change enables signature help in\r\nimplicit expressions by improving the partial parsing.\r\n\r\nSpecifically we can now partial parse the addition of parenthesis at the\r\nend of an implicit expression, which is a common case for signature\r\nhelp."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7364725434","Type":"IssuesEvent","CreatedAt":"2018-03-12T10:19:58","Actor":"RehanSaeed","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Opened issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7307968614","Type":"IssuesEvent","CreatedAt":"2018-02-28T06:01:18","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file."},{"Id":"7307353364","Type":"IssuesEvent","CreatedAt":"2018-02-28T02:19:15","Actor":"rjamesnw","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Opened issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"976910278083432449","CreatedAt":"2018-03-22T19:55:35+00:00","UserScreenname":"aspnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/NLDaIe6hpY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":73,"FavoriteCount":47,"RawContent":null},{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":9,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":13,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":3,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 f… https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesd… https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null},{"Id":"968561906003791872","CreatedAt":"2018-02-27T19:02:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":6,"RawContent":null},{"Id":"968550190889267201","CreatedAt":"2018-02-27T18:15:34+00:00","UserScreenname":"aspnet","Text":"#ASPNET Core 2.1.0-preview1 now available https://t.co/loVh03KKfz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":69,"FavoriteCount":54,"RawContent":null},{"Id":"966009382377897985","CreatedAt":"2018-02-20T17:59:19+00:00","UserScreenname":"aspnet","Text":"Starting now! \n\nJoin the #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"965988674474188800","CreatedAt":"2018-02-20T16:37:01+00:00","UserScreenname":"aspnet","Text":"Catch the #ASPNET Community Standup today at 10 AM Pacific / 18:00 GMT with Javier C Nelson showing a preview of Ra… https://t.co/Fg8NoQJtJp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2018-03-23T05:30:10.2025019Z","RunDurationInMilliseconds":8925}