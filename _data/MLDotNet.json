{"Data":{"GitHub":{"Issues":[{"Id":"329979741","IsPullRequest":false,"CreatedAt":"2018-06-07T02:21:03","Actor":"epignosisx","Number":"317","RawContent":null,"Title":"Question: How to get accuracy in predicted label","State":"closed","Body":"Is it possible to get the accuracy/precision of a predicted label? Is there an attribute I can use the extract it? Basically some thing like:\r\n\r\n```cs\r\npublic class EmployeePrediction\r\n{\r\n    [ColumnName(\"PredictedLabel\")]\r\n    public bool Outcome;\r\n\r\n    [SomeAttribute]\r\n    public float Accuracy;\r\n}\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/317","RelatedDescription":"Closed issue \"Question: How to get accuracy in predicted label\" (#317)"},{"Id":"330091005","IsPullRequest":false,"CreatedAt":"2018-06-07T02:04:43","Actor":"zhengchun","Number":"325","RawContent":null,"Title":"Does ML.NET supports Chinese?","State":"open","Body":"For example, A Chinese `长春市长春药店`  that have many ways to extract text.\r\n\r\nBigram algorithm, its simple and fast.\r\n```\r\n长春\r\n春市\r\n市长\r\n长春\r\n春药\r\n药店\r\n```\r\n\r\nStandard algorithm.\r\n```\r\n长春市\r\n长春\r\n药店\r\n```\r\n\r\nI noticed the ML.NET was include a `NGramNgramExtractor` class that supported N-Gram algorithm, does it  support Chinese? The `Transforms.TextTransformLanguage` includes `English,French,German,Dutch,Italian,Spanish,Japanese`.\r\n\r\nIf not, how to implement custom text segmentation for other language? Hope in the future version can support custom extract text feature.\r\n\r\nThanks.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/325","RelatedDescription":"Open issue \"Does ML.NET supports Chinese?\" (#325)"},{"Id":"330077268","IsPullRequest":true,"CreatedAt":"2018-06-07T00:29:58","Actor":"zeahmed","Number":"324","RawContent":null,"Title":"Using named-tuple in OneToOneTransforms' constructor to make API more readable.","State":"open","Body":"This is a partial fix to #274 without breaking anything.\r\n\r\n- Using named-tuple in the constructor instead of unnamed-tuple.\r\n- Renamed the parameters of methods.","Url":"https://github.com/dotnet/machinelearning/pull/324","RelatedDescription":"Open PR \"Using named-tuple in OneToOneTransforms' constructor to make API more readable.\" (#324)"},{"Id":"330074648","IsPullRequest":false,"CreatedAt":"2018-06-07T00:13:05","Actor":"lqdev","Number":"323","RawContent":null,"Title":"Return Centroids for KMeansPlusPlusClusterer After Training","State":"open","Body":"### Issue\r\n\r\nOnce training is complete on a KMeansPlusPlusClusterer algorithm in the `LearningPipeline`, provide a method of accessing the centroids. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/323","RelatedDescription":"Open issue \"Return Centroids for KMeansPlusPlusClusterer After Training\" (#323)"},{"Id":"330060335","IsPullRequest":false,"CreatedAt":"2018-06-06T22:53:47","Actor":"markusweimer","Number":"322","RawContent":null,"Title":"Release notes for 0.2 are not linked from the .sln, but those for 0.1 are","State":"open","Body":"When browsing the `docs` folder via Visual Studio, there are release notes for ML.NET 0.1 listed. However, the release notes for 0.2 are missing. They are, in fact, in the file system.\r\n\r\nWe should have a consistent scheme here: Either the files are always added to the solution file, or never.","Url":"https://github.com/dotnet/machinelearning/issues/322","RelatedDescription":"Open issue \"Release notes for 0.2 are not linked from the .sln, but those for 0.1 are\" (#322)"},{"Id":"330035085","IsPullRequest":false,"CreatedAt":"2018-06-06T21:13:43","Actor":"alexanderkyte","Number":"321","RawContent":null,"Title":"Add weight quantization","State":"open","Body":"Weight quantization enables low-power edge devices to perform machine learning by trading a couple of percentage points of prediction accuracy for a very dramatic reduction in computation times. \r\n\r\nMobile devices will motivate dramatic optimizations and code changes to enable cross platform SIMD across very different devices. An alternative is to create an implementation that is fast(simple) enough and correct enough that most users never need to care about numerical performance. \r\n\r\nThe approach was initially made popular by XNOR-NET for real time edge vision classification. \r\nhttps://arxiv.org/pdf/1603.05279.pdf\r\nBut this is a generalized approach and there have been deeper analyses of the best way to negotiate the bitwidth-vs-model-accuracy scale. The training side can compress until the accuracy drops too low as part of the automatic hyperparameter tuning. This means a slight increase in training time in order to achieve low-power, high-speed streaming inference on edge processors. ","Url":"https://github.com/dotnet/machinelearning/issues/321","RelatedDescription":"Open issue \"Add weight quantization\" (#321)"},{"Id":"330014412","IsPullRequest":true,"CreatedAt":"2018-06-06T20:09:51","Actor":"codemzs","Number":"320","RawContent":null,"Title":"Include all categorical split points in feature gain map and clean up regression tree predictor for categorical splits.","State":"open","Body":"fixes #319 ","Url":"https://github.com/dotnet/machinelearning/pull/320","RelatedDescription":"Open PR \"Include all categorical split points in feature gain map and clean up regression tree predictor for categorical splits.\" (#320)"},{"Id":"330014023","IsPullRequest":false,"CreatedAt":"2018-06-06T20:08:34","Actor":"codemzs","Number":"319","RawContent":null,"Title":"Include all categorical split points in feature gain map and clean up regression tree predictor for categorical splits.","State":"open","Body":"FastTree feature gain map needs to contain feature gain per categorical split point in the case of multiple categorical values chosen as split points on a node when categorical split optimization is turned on.","Url":"https://github.com/dotnet/machinelearning/issues/319","RelatedDescription":"Open issue \"Include all categorical split points in feature gain map and clean up regression tree predictor for categorical splits.\" (#319)"},{"Id":"329655997","IsPullRequest":true,"CreatedAt":"2018-06-06T19:49:37","Actor":"Ivanidzo4ka","Number":"316","RawContent":null,"Title":"Add Cluster evaluator","State":"closed","Body":"Address #312 ","Url":"https://github.com/dotnet/machinelearning/pull/316","RelatedDescription":"Closed or merged PR \"Add Cluster evaluator\" (#316)"},{"Id":"329999025","IsPullRequest":false,"CreatedAt":"2018-06-06T19:20:44","Actor":"helloguo","Number":"318","RawContent":null,"Title":"TextLoader().CreateFrom() Unhandled Exception for version 0.2.0","State":"open","Body":"### System information\r\n\r\n- **OS Windows 10**:\r\n- **.NET Version 2.1.300-rc1-008673**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nI move my code from ML.NET version 0.1.0 to ML.NET version 0.2.0. I have a data structure `FlightData` looks like following. Then I use `pipeline.Add(new TextLoader(trainingDataSet).CreateFrom<FlightData>(useHeader: true, separator: ',', allowQuotedStrings:true));` to load the data. \r\n```\r\n    public class FlightData\r\n    {\r\n        [Column(ordinal: \"0\")]\r\n        public float QUARTER;\r\n        [Column(ordinal: \"1\")]\r\n        public float MONTH;\r\n        [Column(ordinal: \"2\")]\r\n        public float DAY_OF_MONTH;\r\n        [Column(ordinal: \"3\")]\r\n        ....\r\n    }\r\n```\r\n- **What happened?**\r\n\r\nError message: \r\n```\r\nUnhandled Exception: System.InvalidOperationException: DAY_OF_MONTH is not alphanumeric.\r\n   at Microsoft.ML.Data.TextLoader.CreateFrom[TInput](Boolean useHeader, Char separator, Boolean allowQuotedStrings, Boolean supportSparse, Boolean trimWhitespace)\r\n```\r\n\r\nAfter looking at the error msg and ML.NET source code https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML/Data/TextLoader.cs#L87, I change `DAY_OF_MONTH` to `DAYOFMONTH`. Then the error disappears. But it's common to use `_` in the variable names. \r\n- **What did you expect?**\r\n\r\nI can use `_` in variable names, which are part of Input fed to TextLoader.\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/318","RelatedDescription":"Open issue \"TextLoader().CreateFrom() Unhandled Exception for version 0.2.0\" (#318)"},{"Id":"329237995","IsPullRequest":false,"CreatedAt":"2018-06-06T17:01:50","Actor":"sfilipi","Number":"298","RawContent":null,"Title":"It would be helpful to have a ML.NET symbol package ","State":"closed","Body":" For debugging, it would be great to publish symbol package. ","Url":"https://github.com/dotnet/machinelearning/issues/298","RelatedDescription":"Closed issue \"It would be helpful to have a ML.NET symbol package \" (#298)"},{"Id":"329261557","IsPullRequest":false,"CreatedAt":"2018-06-06T00:03:52","Actor":"Ivanidzo4ka","Number":"300","RawContent":null,"Title":"Result of OVA macro doesn't respect auto normalization.","State":"closed","Body":"```\r\nvar dataPath = GetDataPath(@\"iris.txt\");\r\nusing (var env = new TlcEnvironment(42))\r\n{\r\n    var subGraph = env.CreateExperiment();\r\n    var learnerInput = new ML.Trainers.StochasticDualCoordinateAscentBinaryClassifier\r\n    {\r\n        NumThreads = 1\r\n    };\r\n    var learnerOutput = subGraph.Add(learnerInput);\r\n\r\n    var experiment = env.CreateExperiment();\r\n    var importInput = new ML.Data.TextLoader(dataPath);\r\n    importInput.Arguments.Column = new ML.Data.TextLoaderColumn[]\r\n    {\r\n        new ML.Data.TextLoaderColumn { Name = \"Label\", Source = new[] { new ML.Data.TextLoaderRange(0) } },\r\n        new ML.Data.TextLoaderColumn { Name = \"Features\", Source = new[] { new ML.Data.TextLoaderRange(1,4) } }\r\n    };\r\n\r\n    var importOutput = experiment.Add(importInput);\r\n\r\n    var oneVersusAll = new ML.Models.OneVersusAll\r\n    {\r\n        TrainingData = importOutput.Data,\r\n        Nodes = subGraph,\r\n        UseProbabilities = true,\r\n    };\r\n    var ovaOutput = experiment.Add(oneVersusAll);\r\n    var scoreInput = new ML.Transforms.DatasetScorer\r\n    {\r\n        Data = importOutput.Data,\r\n        PredictorModel = ovaOutput.PredictorModel\r\n    };\r\n    var scoreOutput = experiment.Add(scoreInput);\r\n\r\n    var evalInput = new ML.Models.ClassificationEvaluator\r\n    {\r\n        Data = scoreOutput.ScoredData\r\n    };\r\n    var evalOutput = experiment.Add(evalInput);\r\n    experiment.Compile();\r\n    experiment.SetInput(importInput.InputFile, new SimpleFileHandle(env, dataPath, false, false));\r\n    experiment.Run();\r\n}\r\n```\r\n\r\nPredictor got trained on normalized features, but during prediction time it got non-normalized features. ","Url":"https://github.com/dotnet/machinelearning/issues/300","RelatedDescription":"Closed issue \"Result of OVA macro doesn't respect auto normalization.\" (#300)"},{"Id":"329620778","IsPullRequest":true,"CreatedAt":"2018-06-05T23:40:30","Actor":"Ivanidzo4ka","Number":"310","RawContent":null,"Title":"OVA should respect normalization in underlying learner","State":"closed","Body":"Address #300 ","Url":"https://github.com/dotnet/machinelearning/pull/310","RelatedDescription":"Closed or merged PR \"OVA should respect normalization in underlying learner\" (#310)"},{"Id":"329648904","IsPullRequest":false,"CreatedAt":"2018-06-05T22:34:50","Actor":"sfilipi","Number":"315","RawContent":null,"Title":"ExecuteGraphCommand.GetOutputToPath should not throw if the outputs are null ","State":"open","Body":"### System information\r\n\r\n- **.NET Version (eg., dotnet --info)**: 0.3.0-preview-26604-1\r\n\r\n### Issue\r\n\r\nConstruct an entry-points graph invoking the CV macro, and specifying the Warnings output of the CV macro, as the overall graph output. \r\n\r\nNotice that if the run produced no warnings, (warnings idv is null) ExecuteGraphCommand.GetOutputToPath throws. I think it should just warn and proceed to saving the rest of the output. \r\n\r\n\r\n### Source code / logs\r\n\r\nGraph used:\r\n\r\n                {\r\n\t\"Inputs\": {\r\n\t\t\"TrainFile\": \"..\\\\Sent140_Train.tsv\"\r\n\t},\r\n\t\"Outputs\": {\r\n\t\t\"PredictorModel0\": \"PredictorModel0.zip\",\r\n\t\t\"Warnings0\": \"Warnings0.csv\",\r\n\t\t\"OverallMetrics0\": \"OverallMetrics0.csv\",\r\n\t\t\"PerInstanceMetrics0\": \"PerInstanceMetrics0.csv\",\r\n\t\t\"ConfusionMatrix0\": \"ConfusionMatrix0.csv\"\r\n\t},\r\n\t\"Nodes\": [\r\n\t\t{\r\n\t\t\t\"Name\": \"Data.CustomTextLoader\",\r\n\t\t\t\"Inputs\": {\r\n\t\t\t\t\"InputFile\": \"$TrainFile\",\r\n\t\t\t\t\"CustomSchema\": \" sep=tab header+ col=SentimentText:TX:3  col=Sentiment:R4:1 \"\r\n\t\t\t},\r\n\t\t\t\"Outputs\": {\r\n\t\t\t\t\"Data\": \"$TrainDataView\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"Name\": \"Models.CrossValidator\",\r\n\t\t\t\"Inputs\": {\r\n\t\t\t\t\"Kind\": \"SignatureBinaryClassifierTrainer\",\r\n\t\t\t\t\"NumFolds\": 2,\r\n\t\t\t\t\"Data\": \"$TrainDataView\",\r\n\t\t\t\t\"Nodes\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"Name\": \"Transforms.ColumnCopier\",\r\n\t\t\t\t\t\t\"Inputs\": {\r\n\t\t\t\t\t\t\t\"Column\": [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\"Name\": \"Label\",\r\n\t\t\t\t\t\t\t\t\t\"Source\": \"Sentiment\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\"Data\": \"$data0\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"Outputs\": {\r\n\t\t\t\t\t\t\t\"OutputData\": \"$Copy_DataView_Output_1528237424459_579\",\r\n\t\t\t\t\t\t\t\"Model\": \"$Copy_TransformModel_Output_1528237424459_493\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"Name\": \"Transforms.TextFeaturizer\",\r\n\t\t\t\t\t\t\"Inputs\": {\r\n\t\t\t\t\t\t\t\"Column\": {\r\n\t\t\t\t\t\t\t\t\"Name\": \"FeaturesText\",\r\n\t\t\t\t\t\t\t\t\"Source\": [\r\n\t\t\t\t\t\t\t\t\t\"SentimentText\"\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"Data\": \"$Copy_DataView_Output_1528237424459_579\",\r\n\t\t\t\t\t\t\t\"WordFeatureExtractor\": {\r\n\t\t\t\t\t\t\t\t\"Name\": \"NGram\",\r\n\t\t\t\t\t\t\t\t\"Settings\": {\r\n\t\t\t\t\t\t\t\t\t\"NgramLength\": 2,\r\n\t\t\t\t\t\t\t\t\t\"SkipLength\": 0,\r\n\t\t\t\t\t\t\t\t\t\"AllLengths\": true,\r\n\t\t\t\t\t\t\t\t\t\"MaxNumTerms\": [\r\n\t\t\t\t\t\t\t\t\t\t10000000\r\n\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\t\t\"Weighting\": \"Tf\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"CharFeatureExtractor\": {\r\n\t\t\t\t\t\t\t\t\"Name\": \"NGram\",\r\n\t\t\t\t\t\t\t\t\"Settings\": {\r\n\t\t\t\t\t\t\t\t\t\"NgramLength\": 3,\r\n\t\t\t\t\t\t\t\t\t\"SkipLength\": 0,\r\n\t\t\t\t\t\t\t\t\t\"AllLengths\": true,\r\n\t\t\t\t\t\t\t\t\t\"MaxNumTerms\": [\r\n\t\t\t\t\t\t\t\t\t\t10000000\r\n\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\t\t\"Weighting\": \"Tf\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"Outputs\": {\r\n\t\t\t\t\t\t\t\"OutputData\": \"$Text_DataView_Output_1528237424462_956\",\r\n\t\t\t\t\t\t\t\"Model\": \"$Text_TransformModel_Output_1528237424462_164\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"Name\": \"Transforms.ColumnConcatenator\",\r\n\t\t\t\t\t\t\"Inputs\": {\r\n\t\t\t\t\t\t\t\"Column\": [\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\"Name\": \"Features\",\r\n\t\t\t\t\t\t\t\t\t\"Source\": [\r\n\t\t\t\t\t\t\t\t\t\t\"FeaturesText\"\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\"Data\": \"$Text_DataView_Output_1528237424462_956\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"Outputs\": {\r\n\t\t\t\t\t\t\t\"OutputData\": \"$Concat_DataView_Output_1528237424464_228\",\r\n\t\t\t\t\t\t\t\"Model\": \"$Concat_TransformModel_Output_1528237424464_5\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"Name\": \"Trainers.AveragedPerceptronBinaryClassifier\",\r\n\t\t\t\t\t\t\"Inputs\": {\r\n\t\t\t\t\t\t\t\"TrainingData\": \"$Concat_DataView_Output_1528237424464_228\",\r\n\t\t\t\t\t\t\t\"LossFunction\": {\r\n\t\t\t\t\t\t\t\t\"Name\": \"HingeLoss\",\r\n\t\t\t\t\t\t\t\t\"Settings\": {\r\n\t\t\t\t\t\t\t\t\t\"Margin\": 1\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"NumIterations\": 10,\r\n\t\t\t\t\t\t\t\"Calibrator\": {\r\n\t\t\t\t\t\t\t\t\"Name\": \"PlattCalibrator\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"Outputs\": {\r\n\t\t\t\t\t\t\t\"PredictorModel\": \"$ap_PredictorModel_Output_1528237424465_314\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"Name\": \"Transforms.ManyHeterogeneousModelCombiner\",\r\n\t\t\t\t\t\t\"Inputs\": {\r\n\t\t\t\t\t\t\t\"TransformModels\": [\r\n\t\t\t\t\t\t\t\t\"$Copy_TransformModel_Output_1528237424459_493\",\r\n\t\t\t\t\t\t\t\t\"$Text_TransformModel_Output_1528237424462_164\",\r\n\t\t\t\t\t\t\t\t\"$Concat_TransformModel_Output_1528237424464_5\"\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\"PredictorModel\": \"$ap_PredictorModel_Output_1528237424465_314\"\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"Outputs\": {\r\n\t\t\t\t\t\t\t\"PredictorModel\": \"$PredictorModel0\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"Inputs\": {\r\n\t\t\t\t\t\"Data\": \"$data0\"\r\n\t\t\t\t},\r\n\t\t\t\t\"Outputs\": {\r\n\t\t\t\t\t\"PredictorModel\": \"$PredictorModel0\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"Outputs\": {\r\n\t\t\t\t\"PredictorModel\": \"$PredictorModel0\",\r\n\t\t\t\t\"Warnings\": \"$Warnings0\",\r\n\t\t\t\t\"OverallMetrics\": \"$OverallMetrics0\",\r\n\t\t\t\t\"PerInstanceMetrics\": \"$PerInstanceMetrics0\",\r\n\t\t\t\t\"ConfusionMatrix\": \"$ConfusionMatrix0\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}\r\n","Url":"https://github.com/dotnet/machinelearning/issues/315","RelatedDescription":"Open issue \"ExecuteGraphCommand.GetOutputToPath should not throw if the outputs are null \" (#315)"},{"Id":"329640135","IsPullRequest":false,"CreatedAt":"2018-06-05T21:58:03","Actor":"sfilipi","Number":"314","RawContent":null,"Title":"The transforms entry points don't contain function information ","State":"open","Body":"### System information\r\n\r\n- **.NET Version (eg., dotnet --info)**: 0.3.0-preview-26604-1\r\n\r\n### Issue\r\n\r\nThe transforms entry point should contain information about the way in which they manipulate the data: schema manipulation, featurizer, pre-processing etc. \r\n\r\nSystems interfacing with ML.NET through entry points might need to classify the transforms based on the function their perform over the dataset, and present them to their users in that fashion. ","Url":"https://github.com/dotnet/machinelearning/issues/314","RelatedDescription":"Open issue \"The transforms entry points don't contain function information \" (#314)"},{"Id":"329638918","IsPullRequest":false,"CreatedAt":"2018-06-05T21:53:30","Actor":"sfilipi","Number":"313","RawContent":null,"Title":"The trainer entry points don't contain sufficient information about the algorithm type (linear, tree etc)","State":"open","Body":"### System information\r\n\r\n- **.NET Version (eg., dotnet --info)**: 0.3.0-preview-26604-1\r\n\r\n### Issue\r\nThe trainer entry points don't contain any information about their algorithm type ( tree, linear)\r\nSystems interfacing with ML.NET in this fashion might need to present to their users the information classified based on this criteria. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/313","RelatedDescription":"Open issue \"The trainer entry points don't contain sufficient information about the algorithm type (linear, tree etc)\" (#313)"},{"Id":"329628280","IsPullRequest":false,"CreatedAt":"2018-06-05T21:16:59","Actor":"OliaG","Number":"312","RawContent":null,"Title":"Add API for Cluster Evaluator ","State":"open","Body":"We need a public API for Cluster Evaluator\r\n","Url":"https://github.com/dotnet/machinelearning/issues/312","RelatedDescription":"Open issue \"Add API for Cluster Evaluator \" (#312)"},{"Id":"329623049","IsPullRequest":false,"CreatedAt":"2018-06-05T21:00:35","Actor":"Ivanidzo4ka","Number":"311","RawContent":null,"Title":"Simplification of experiment methods","State":"open","Body":"Few things so far:\r\nA) We have this pattern in our code:\r\n```\r\nvar importInput = new ML.Data.TextLoader(dataPath);\r\n...\r\nexperiment.SetInput(importInput.InputFile, new SimpleFileHandle(env, dataPath, false, false));\r\n```\r\nAnd I'm not sure why I have to specify same file twice.\r\nB) We have this pattern everywhere in our code:\r\n```\r\nexperiment.Compile();\r\nexperiment.SetInput(importInput.InputFile, new SimpleFileHandle(env, dataPath, false, false));\r\nexperiment.Run();\r\n```\r\nCan we simplify this into one method instead of  3 different calls?","Url":"https://github.com/dotnet/machinelearning/issues/311","RelatedDescription":"Open issue \"Simplification of experiment methods\" (#311)"},{"Id":"329607195","IsPullRequest":false,"CreatedAt":"2018-06-05T20:11:42","Actor":"Amine-Smahi","Number":"309","RawContent":null,"Title":"TextLoader is not identified","State":"open","Body":"### System information\r\n.NET Command Line Tools (2.1.200)\r\n\r\nProduct Information:\r\n Version:            2.1.200\r\n Commit SHA-1 hash:  2edba8d7f1\r\n\r\nRuntime Environment:\r\n OS Name:     deepin\r\n OS Version:  15.5\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /home/amine-smahi/dotnet/sdk/2.1.200/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.7\r\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\r\n\r\n\r\n### Issue\r\n\r\nWhen following all Getting started with ML.NET guides or using the samples , i get a missing reference message saying that TextLoader is missing are you missing assemblies\r\n\r\n### Source code / logs\r\nfor example \r\n`  var testData = new TextLoader<SentimentData>(_testDataPath, useHeader: true, separator: \"tab\"); `\r\n","Url":"https://github.com/dotnet/machinelearning/issues/309","RelatedDescription":"Open issue \"TextLoader is not identified\" (#309)"},{"Id":"329597486","IsPullRequest":false,"CreatedAt":"2018-06-05T19:40:55","Actor":"Ivanidzo4ka","Number":"308","RawContent":null,"Title":"CollectionDataSource fail with CrossValidator and TrainTestEvaluator","State":"open","Body":"System information\r\n.NET Version (eg., dotnet --info): 0.3.0-preview-26604-1\r\n```\r\nvar pipeline = new LearningPipeline();\r\nvar data = new List<IrisData>() {\r\n    new IrisData { SepalLength = 1f, SepalWidth = 1f ,PetalLength=0.3f, PetalWidth=5.1f, Label=1},\r\n    new IrisData { SepalLength = 1f, SepalWidth = 1f ,PetalLength=0.3f, PetalWidth=5.1f, Label=1},\r\n    new IrisData { SepalLength = 1.2f, SepalWidth = 0.5f ,PetalLength=0.3f, PetalWidth=5.1f, Label=0}\r\n};\r\nvar collection = CollectionDataSource.Create(data);\r\n\r\npipeline.Add(collection);\r\npipeline.Add(new ColumnConcatenator(outputColumn: \"Features\",\r\n    \"SepalLength\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\"));\r\npipeline.Add(new StochasticDualCoordinateAscentClassifier());\r\nvar testCollection = CollectionDataSource.Create(data);\r\nvar tt = new TrainTestEvaluator().TrainTestEvaluate<IrisData, IrisPrediction>(pipeline, testCollection);\r\nvar cv = new CrossValidator() {  Kind = MacroUtilsTrainerKinds.SignatureMultiClassClassifierTrainer}.CrossValidate<IrisData, IrisPrediction>(pipeline);\r\n```\r\nMessage: System.ArgumentOutOfRangeException : Score column is missing\r\nParameter name: ScoreColumn\r\nLooks like test collection in both cases are empty during evaluation\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/308","RelatedDescription":"Open issue \"CollectionDataSource fail with CrossValidator and TrainTestEvaluator\" (#308)"},{"Id":"329596456","IsPullRequest":false,"CreatedAt":"2018-06-05T19:37:34","Actor":"Ivanidzo4ka","Number":"307","RawContent":null,"Title":"TrainTestEvaluator can't accept same collection for train and testing.","State":"open","Body":"System information\r\n.NET Version (eg., dotnet --info): 0.3.0-preview-26604-1\r\n```\r\nvar pipeline = new LearningPipeline();\r\nvar data = new List<IrisData>() {\r\n    new IrisData { SepalLength = 1f, SepalWidth = 1f ,PetalLength=0.3f, PetalWidth=5.1f, Label=1},\r\n    new IrisData { SepalLength = 1f, SepalWidth = 1f ,PetalLength=0.3f, PetalWidth=5.1f, Label=1},\r\n    new IrisData { SepalLength = 1.2f, SepalWidth = 0.5f ,PetalLength=0.3f, PetalWidth=5.1f, Label=0}\r\n};\r\nvar collection = CollectionDataSource.Create(data);\r\npipeline.Add(collection);\r\npipeline.Add(new ColumnConcatenator(outputColumn: \"Features\",\r\n    \"SepalLength\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\"));\r\npipeline.Add(new StochasticDualCoordinateAscentClassifier());\r\nvar tt = new TrainTestEvaluator().TrainTestEvaluate<IrisData, IrisPrediction>(pipeline, collection);\r\n```\r\n\r\nMessage: System.InvalidOperationException : Port 'Var_c3b11d6c322a4a65ab0b8a5c7054c94c' is already set\r\n","Url":"https://github.com/dotnet/machinelearning/issues/307","RelatedDescription":"Open issue \"TrainTestEvaluator can't accept same collection for train and testing.\" (#307)"},{"Id":"329594842","IsPullRequest":false,"CreatedAt":"2018-06-05T19:32:27","Actor":"Ivanidzo4ka","Number":"306","RawContent":null,"Title":"CrossValidation doesn't autoinfer type of task.","State":"open","Body":"System information\r\n.NET Version (eg., dotnet --info): 0.3.0-preview-26604-1\r\n\r\n```string dataPath = GetDataPath(\"iris.txt\");\r\nvar pipeline = new LearningPipeline();\r\npipeline.Add(new TextLoader(dataPath).CreateFrom<IrisData>(useHeader: false));\r\npipeline.Add(new ColumnConcatenator(outputColumn: \"Features\",\r\n    \"SepalLength\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\"));\r\npipeline.Add(new StochasticDualCoordinateAscentClassifier());\r\nvar cv = new CrossValidator() .CrossValidate<IrisData, IrisPrediction>(pipeline);\r\n```\r\nthis will fail with Score column is missing and I have to manually add kind to CrossValidator.\r\n```\r\nvar cv = new CrossValidator() { Kind = MacroUtilsTrainerKinds.SignatureMultiClassClassifierTrainer }.CrossValidate<IrisData, IrisPrediction>(pipeline);\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/306","RelatedDescription":"Open issue \"CrossValidation doesn't autoinfer type of task.\" (#306)"},{"Id":"329546783","IsPullRequest":true,"CreatedAt":"2018-06-05T17:31:37","Actor":"codemzs","Number":"304","RawContent":null,"Title":"update sample in README.MD with 0.2 features.","State":"closed","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/304","RelatedDescription":"Closed or merged PR \"update sample in README.MD with 0.2 features.\" (#304)"},{"Id":"329551913","IsPullRequest":false,"CreatedAt":"2018-06-05T17:23:09","Actor":"yaeldekel","Number":"305","RawContent":null,"Title":"CSharpApiGenerator doesn't assign default values to Optional<> type.","State":"open","Body":"The code generated for an argument that is defined as\r\nstring LabelColumn = \"Label\";\r\n\r\nis:\r\n            /// <summary>\r\n            /// Column to use for labels\r\n            /// </summary>\r\n            public string LabelColumn { get; set; } = \"Label\";\r\n\r\nbut the code generate for an argument that is defined as\r\npublic Optional<string> GroupColumn = Optional<string>.Implicit(\"GroupId\");\r\n\r\nis:\r\n\r\n            /// <summary>\r\n            /// Column to use for grouping\r\n            /// </summary>\r\n            public Microsoft.ML.Runtime.EntryPoints.Optional<string> GroupColumn { get; set; }\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/305","RelatedDescription":"Open issue \"CSharpApiGenerator doesn't assign default values to Optional<> type.\" (#305)"},{"Id":"329461592","IsPullRequest":true,"CreatedAt":"2018-06-05T14:10:19","Actor":"eerhardt","Number":"303","RawContent":null,"Title":"Update release notes link to use aka.ms. (#294)","State":"closed","Body":"Our release notes link is broken because the `Documentation` was renamed to `docs`. Fix this for the future to use a redirection link.\r\n\r\nPorting #294 to `release/preview`.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/303","RelatedDescription":"Closed or merged PR \"Update release notes link to use aka.ms. (#294)\" (#303)"},{"Id":"329351355","IsPullRequest":false,"CreatedAt":"2018-06-05T08:28:02","Actor":"linmajia","Number":"302","RawContent":null,"Title":"Shall we unify the file encodings of C# source files?","State":"open","Body":"C# source files have different file encodings. E.g. some have UTF-8 with BOM file encoding, while some have ASCII encoding.\r\n\r\n![image](https://user-images.githubusercontent.com/9329359/40964166-fa80640a-68dc-11e8-8ae7-00633e22bd56.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/302","RelatedDescription":"Open issue \"Shall we unify the file encodings of C# source files?\" (#302)"},{"Id":"329268980","IsPullRequest":true,"CreatedAt":"2018-06-05T08:13:06","Actor":"GalOshri","Number":"301","RawContent":null,"Title":"Add release notes for ML.NET 0.2","State":"closed","Body":"This adds release notes for ML.NET 0.2.","Url":"https://github.com/dotnet/machinelearning/pull/301","RelatedDescription":"Closed or merged PR \"Add release notes for ML.NET 0.2\" (#301)"},{"Id":"329251277","IsPullRequest":false,"CreatedAt":"2018-06-04T23:29:52","Actor":"sfilipi","Number":"299","RawContent":null,"Title":"Macro outputs should not be required","State":"open","Body":"### System information\r\n\r\n- windows\r\n- version 0.3.0-preview-26604-1 \r\n\r\n### Issue\r\nThe CV macro outputs (and any graph outputs) should not be mandatory. \r\nCurrently the CV macro is not checking for presence of the metrics, before  adding the metrics node to the outputs, and throwing if they are missing. \r\n\r\nI don't think any output should be required, and especially some metrics like 'Confusion Matrix' don't make sense for every kinds of task. \r\n\r\nTo reproduce, compose an entry points graph with the CV  macro present, and don't specify outputs for it. Run this graph. \r\n### Source code / logs\r\n\r\n{System.InvalidOperationException: Invalid parameter 'ConfusionMatrix': parameter does not exist.\r\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointNode.GetOutputVariableName(String paramName)\r\n   at Microsoft.ML.Runtime.EntryPoints.CrossValidationMacro.CrossValidate(IHostEnvironment env, Arguments input, EntryPointNode node)}\r\n","Url":"https://github.com/dotnet/machinelearning/issues/299","RelatedDescription":"Open issue \"Macro outputs should not be required\" (#299)"},{"Id":"329218478","IsPullRequest":true,"CreatedAt":"2018-06-04T22:55:35","Actor":"codemzs","Number":"297","RawContent":null,"Title":"Remove stale line of code from test.","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/297","RelatedDescription":"Closed or merged PR \"Remove stale line of code from test.\" (#297)"},{"Id":"329197694","IsPullRequest":true,"CreatedAt":"2018-06-04T20:36:23","Actor":"pkulikov","Number":"296","RawContent":null,"Title":"Fixed typo in the method summary","State":"closed","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/296","RelatedDescription":"Closed or merged PR \"Fixed typo in the method summary\" (#296)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-06-07T05:30:37.0528634Z","RunDurationInMilliseconds":1005}