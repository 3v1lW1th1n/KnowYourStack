{"Data":{"GitHub":{"Issues":[{"Id":"394242765","IsPullRequest":false,"CreatedAt":"2018-12-26T22:51:34","Actor":"djary","Number":"1970","RawContent":null,"Title":"wikipedia-detox-250-line-data.tsv: Unclosed quoted field on line 83.","State":"closed","Body":"https://github.com/dotnet/machinelearning/blob/master/test/data/wikipedia-detox-250-line-data.tsv\r\n\r\nWe can make this file beautiful and searchable if this error is corrected: Unclosed quoted field on line 83.\r\npls fixit","Url":"https://github.com/dotnet/machinelearning/issues/1970","RelatedDescription":"Closed issue \"wikipedia-detox-250-line-data.tsv: Unclosed quoted field on line 83.\" (#1970)"},{"Id":"394237956","IsPullRequest":false,"CreatedAt":"2018-12-26T20:41:53","Actor":"daholste","Number":"1969","RawContent":null,"Title":"MetaMulticlassTrainer throws an exception when used in an estimator chain","State":"open","Body":"### Issue\r\n\r\nSetup code:\r\n```\r\n            // load data from disk\r\n            var textLoader = new TextLoader(mlContext, new TextLoader.Arguments()\r\n                {\r\n                    Separator = \",\",\r\n                    HasHeader = true,\r\n                    Column = new[]\r\n                        {\r\n                            new TextLoader.Column(\"Label\", DataKind.R4, 0),\r\n                            new TextLoader.Column(\"Features\", DataKind.R4, 1, 784),\r\n                        }\r\n                });\r\n```\r\n\r\nCode that succeeds:\r\n```\r\n            var apTrainer = mlContext.BinaryClassification.Trainers.AveragedPerceptron();\r\n            var trainer = mlContext.MulticlassClassification.Trainers.OneVersusAll(apTrainer);\r\n            var model1 = trainer.Fit(testData);\r\n```\r\n\r\nCode for a dummy estimator chain that fails:\r\n```\r\n            IEstimator<ITransformer> pipeline = new EstimatorChain<ITransformer>();\r\n            pipeline = pipeline.Append(trainer);\r\n            var model2 = pipeline.Fit(trainData);\r\n```\r\n\r\nThis fails b/c of \r\n```\r\nLabelColumn = new SchemaShape.Column(labelColumn, SchemaShape.Column.VectorKind.Scalar, NumberType.U4, true);\r\n```\r\nin the MetaMulticlassTrainer class, which expects label column to be U4, not R4.\r\n\r\nIf I try to fix by changing the data type of Label column to U4, the code that used to succeed fails with the exception:\r\n```\r\nSystem.ArgumentOutOfRangeException: 'Training label column 'Label' type is not valid for multi-class: U4. Type must be R4 or R8.'\r\n```\r\nin TrainerUtils.CheckMultiClassLabel","Url":"https://github.com/dotnet/machinelearning/issues/1969","RelatedDescription":"Open issue \"MetaMulticlassTrainer throws an exception when used in an estimator chain\" (#1969)"},{"Id":"394201957","IsPullRequest":false,"CreatedAt":"2018-12-26T20:33:37","Actor":"kinosang","Number":"1968","RawContent":null,"Title":"Could not find input column 'MovieID'","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Mac\r\n- **.NET Version (eg., dotnet --info)**: 2.2.100, ML 0.8.0\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI modified the official e2e MovieRecommender model training program to build a genres-based recommender.\r\n- **What happened?**\r\nIn step 7 Try/test a single prediction by predicting a single movie rating for a specific user, it throw an `ArgumentOutOfRangeException:  Could not find input column 'MovieId'`\r\n\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\nCodes:\r\n```\r\n//STEP 2: Create a reader by defining the schema for reading the gallery recommendation datasets\r\nvar reader = ctx.Data.TextReader(new TextLoader.Arguments\r\n{\r\n    // Separator = \"comma\",\r\n    // HasHeader = true,\r\n    Column = new[]\r\n    {\r\n        new TextLoader.Column(\"UserId\", DataKind.Text, 0),\r\n        new TextLoader.Column(\"MovieID\", DataKind.Text, 1),\r\n        new TextLoader.Column(\"Title\", DataKind.Text, 2),\r\n        new TextLoader.Column(\"Genres\", DataKind.Text, 3),\r\n        new TextLoader.Column(\"Rating\", DataKind.Bool, 4)\r\n    }\r\n});\r\n\r\n......\r\n\r\n//STEP 4: Transform your data by encoding the two features userId and movieId. \r\n//        These encoded features will be provided as input to FieldAwareFactorizationMachine learner\r\nvar pipeline = ctx.Transforms.Categorical.OneHotEncoding(\"UserId\", \"UserIdEncoded\")\r\n    .Append(ctx.Transforms.Categorical.OneHotEncoding(\"MovieID\", \"MovieIDEncoded\")\r\n        .Append(ctx.Transforms.Text.TokenizeWords(\"Genres\", \"GenresTokens\", new[] {'|'})\r\n            .Append(ctx.Transforms.Text.ExtractWordEmbeddings(\"GenresTokens\", \"GenresEmbeddings\",\r\n                    WordEmbeddingsExtractingTransformer.PretrainedModelKind.GloVeTwitter25D)\r\n                .Append(ctx.Transforms.Concatenate(\"Features\", \"UserIdEncoded\", \"MovieIDEncoded\",\r\n                    \"GenresEmbeddings\"))\r\n                .Append(ctx.BinaryClassification.Trainers.FieldAwareFactorizationMachine(\r\n                    labelColumn: \"Rating\",\r\n                    featureColumns: new[]\r\n                    {\r\n                        \"Features\"\r\n                    })\r\n                ))));\r\n\r\n......\r\n\r\n//STEP 7:  Try/test a single prediction by predicting a single movie rating for a specific user\r\nvar predictionengine = model.MakePredictionFunction<TrainingData, RatingPrediction>(ctx); // line 76\r\nvar movieratingprediction = predictionengine.Predict(\r\n    new TrainingData\r\n    {\r\n        //Example rating prediction for userId = 6, movieId = 10 (GoldenEye)\r\n        UserId = \"6\",\r\n        MovieId = \"17\"\r\n    }\r\n);\r\n\r\n......\r\npublic class TrainingData\r\n{\r\n    public string UserId;\r\n\r\n    public string MovieId;\r\n\r\n    public string Title;\r\n\r\n    public string Genres;\r\n\r\n    public float Rating;\r\n\r\n    public string Timestamp;\r\n}\r\n```\r\n\r\nLogs:\r\n```\r\nUnhandled Exception: System.ArgumentOutOfRangeException: Could not find input column 'MovieId'\r\nParameter name: inputSchema\r\n   at Microsoft.ML.Runtime.Data.OneToOneTransformerBase.CheckInput(ISchema inputSchema, Int32 col, Int32& srcCol)\r\n   at Microsoft.ML.Runtime.Data.OneToOneTransformerBase.OneToOneMapperBase..ctor(IHost host, OneToOneTransformerBase parent, Schema inputSchema)\r\n   at Microsoft.ML.Transforms.Text.WordTokenizingTransformer.Mapper..ctor(WordTokenizingTransformer parent, Schema inputSchema)\r\n   at Microsoft.ML.Transforms.Text.WordTokenizingTransformer.MakeRowMapper(Schema schema)\r\n   at Microsoft.ML.Runtime.Data.RowToRowTransformerBase.GetRowToRowMapper(Schema inputSchema)\r\n   at Microsoft.ML.Data.TransformerChain`1.GetRowToRowMapper(Schema inputSchema)\r\n   at Microsoft.ML.Runtime.Api.PredictionEngineBase`2..ctor(IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.Runtime.Api.ComponentCreation.CreatePredictionEngine[TSrc,TDst](IHostEnvironment env, ITransformer transformer, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.Runtime.Data.PredictionFunction`2..ctor(IHostEnvironment env, ITransformer transformer)\r\n   at Microsoft.ML.Runtime.Data.PredictionFunctionExtensions.MakePredictionFunction[TSrc,TDst](ITransformer transformer, IHostEnvironment env)\r\n   at model.Program.Main(String[] args) in Program.cs:line 76\r\n```\r\n\r\nI've set breakpoint on OneToOneTransformerBase line 77\r\nhttps://github.com/dotnet/machinelearning/blob/51ea627fbc618120c7d63ab984b1b13c6d80b4a0/src/Microsoft.ML.Data/Transforms/OneToOneTransformerBase.cs#L77\r\n\r\nand I got this\r\n![](https://i.imgur.com/BED6j2R.jpg)\r\n\r\nI also tried to change the order of the transforms in pipeline, for e.g. `TokenizeWords(\"Genres\", balabala)` - `ExtractWordEmbeddings(\"GenresTokens\", balabala)` - `OneHotEncoding(\"UserId\", balabala)` - `OneHotEncoding(\"MovieID\", balabala)`, it still raises the ArgumentOutOfRangeException but shows different message (in this order the message is ` Could not find input column 'Genres'`).","Url":"https://github.com/dotnet/machinelearning/issues/1968","RelatedDescription":"Closed issue \"Could not find input column 'MovieID'\" (#1968)"},{"Id":"393795119","IsPullRequest":true,"CreatedAt":"2018-12-25T08:04:05","Actor":"codemzs","Number":"1963","RawContent":null,"Title":"Sort namespaces as per stylecop rules/.net convention and remove unused namespaces from source files.","State":"closed","Body":"Sorts namespaces as per stylecop rules/.net convention and removes unused namespaces from source files. Standardizes namespace to be always sorted as per .NET convention in source files.\r\n\r\nMy impressions after doing this change:\r\n1) There is decent amount of code under IF DEFs that seems dead and should be removed, example: \r\nIn IntArray.cs\r\n#if USE_SINGLE_PRECISION\r\n    using FloatType = System.Single;\r\n#else\r\n    using FloatType = System.Double;\r\n#endif\r\n\r\nUSE_SINGLE_PRECISION is not defined anywhere and FloatType is not at all used anywhere in the file. We should consider opening an issue to do this sort of clean up. There are many such examples.\r\n\r\n2) Consider removing Float and use float directly.   \r\n\r\nCC: @TomFinley \r\n\r\nfixes #1961\r\nfixes #1962","Url":"https://github.com/dotnet/machinelearning/pull/1963","RelatedDescription":"Closed or merged PR \"Sort namespaces as per stylecop rules/.net convention and remove unused namespaces from source files.\" (#1963)"},{"Id":"393792668","IsPullRequest":false,"CreatedAt":"2018-12-25T08:04:05","Actor":"codemzs","Number":"1962","RawContent":null,"Title":"Remove unused namespaces in source files.","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/1962","RelatedDescription":"Closed issue \"Remove unused namespaces in source files.\" (#1962)"},{"Id":"393791680","IsPullRequest":false,"CreatedAt":"2018-12-25T08:04:05","Actor":"codemzs","Number":"1961","RawContent":null,"Title":"Sort namespaces in source files as per Microsoft .NET convention","State":"closed","Body":"Parent issue #1697 \r\n\r\nStyleCop rules:\r\n**SA1210:** Using directives must be ordered alphabetically by namespace.\r\n**SA1208:** System using directives must be placed before other using directives.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1961","RelatedDescription":"Closed issue \"Sort namespaces in source files as per Microsoft .NET convention\" (#1961)"},{"Id":"393929556","IsPullRequest":false,"CreatedAt":"2018-12-24T20:55:13","Actor":"Anipik","Number":"1967","RawContent":null,"Title":"ML.net build failing with Visual Studio 2019  Version 16.0","State":"open","Body":"I just rebooted my machine. So while setting up the visual studio, I installed the latest Visual Studio 2019.\r\nThe visual studio version for this 16.0\r\n\r\nSo when I try to build the repo, I get an error as \r\n``` Error: Visual Studio 2015 or 2017 required.```\r\n\r\nMy guess is that the problem is here \r\nhttps://github.com/dotnet/machinelearning/blob/master/src/Native/build.cmd#L48\r\n\r\nThis check fails as the value of the version is 16.0\r\n\r\nI changed this line to \r\n```if %VisualStudioVersion% geq 15.0 (```\r\n\r\nand the build works fine then.\r\n\r\nis this an appropriate fix and anything else also needs to be done here ?\r\n\r\ncc @danmosemsft @safern @eerhardt @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/1967","RelatedDescription":"Open issue \"ML.net build failing with Visual Studio 2019  Version 16.0\" (#1967)"},{"Id":"393798939","IsPullRequest":true,"CreatedAt":"2018-12-24T07:39:21","Actor":"codemzs","Number":"1966","RawContent":null,"Title":"Remove Runtime in namespace from docs folder.","State":"closed","Body":"fixes #1965","Url":"https://github.com/dotnet/machinelearning/pull/1966","RelatedDescription":"Closed or merged PR \"Remove Runtime in namespace from docs folder.\" (#1966)"},{"Id":"393798905","IsPullRequest":false,"CreatedAt":"2018-12-24T07:39:20","Actor":"codemzs","Number":"1965","RawContent":null,"Title":"Remove Runtime in namespace from docs folder","State":"closed","Body":"Followup from #1697 for the documents specifically.","Url":"https://github.com/dotnet/machinelearning/issues/1965","RelatedDescription":"Closed issue \"Remove Runtime in namespace from docs folder\" (#1965)"},{"Id":"393795576","IsPullRequest":false,"CreatedAt":"2018-12-24T01:46:08","Actor":"justinormont","Number":"1964","RawContent":null,"Title":"Remove `runtime` namespace from example code","State":"open","Body":"In #1956, we removed `runtime` from the namespaces. \r\n\r\nNow we have to update the example code.\r\n\r\nFor example, we moved:\r\n* `Microsoft.ML.Runtime.Data` to `Microsoft.ML.Data`\r\n* `Microsoft.ML.Runtime.TimeSeriesProcessing` to `using Microsoft.ML.TimeSeriesProcessing`\r\n* `Microsoft.ML.Runtime.Learners` to `Microsoft.ML.Learners`\r\n\r\ncc: @JRAlexander, @codemzs ","Url":"https://github.com/dotnet/machinelearning/issues/1964","RelatedDescription":"Open issue \"Remove `runtime` namespace from example code\" (#1964)"},{"Id":"393644306","IsPullRequest":true,"CreatedAt":"2018-12-23T18:53:16","Actor":"codemzs","Number":"1956","RawContent":null,"Title":"Remove \"Runtime\" from all namespaces.","State":"closed","Body":"Partially fixes #1697 by removing \"Runtime\" from all namespaces and that is it, no moving classes to other namespaces.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1956","RelatedDescription":"Closed or merged PR \"Remove \"Runtime\" from all namespaces.\" (#1956)"},{"Id":"393761428","IsPullRequest":false,"CreatedAt":"2018-12-23T16:08:54","Actor":"TomFinley","Number":"1960","RawContent":null,"Title":"Make FastTree/LightGBM learned model suitable for public consumption","State":"open","Body":"Related to #1901. Regarding FastTree/LightGBM we may want to refine the public prediction/learned model surface a bit more.\r\n\r\nThe structures exposed here, including [`TreeEnsemble`](https://github.com/dotnet/machinelearning/blob/00577c06ff99ad07006ca8c58cf974943cb1971f/src/Microsoft.ML.FastTree/TreeEnsemble/TreeEnsemble.cs#L21) but especially [`RegressionTree`](https://github.com/dotnet/machinelearning/blob/00577c06ff99ad07006ca8c58cf974943cb1971f/src/Microsoft.ML.FastTree/TreeEnsemble/RegressionTree.cs#L22), are dual use structures in the sense that they are used for both training and prediction. This means it is irretreivably mutable (as it must be during training) even during prediction. It is polymorphic in its structure, in the sense that various structures are active and populated during training than are used during prediction -- worse, in some cases the *same* structures are used, but have distinct meanings. (E.g., the feature indices during training are distinct from those used during prediction, since if FastTree determines it can only use a subset of features, it will during training not even consider the unusable features to exist, until it is done with training and maps the structure back to the original feature space so it is usable by ML.NET.) There are other serious but (in context) comparatively minor notes, like not being either sealed or abstract, disobeying more .NET naming and implementation guidelines than I care to enumerate, etc.\r\n\r\nYet, we cannot avoid exposing *some* structure, since of course people want to inspect the trees they have learnt. And, we use this structure to represent the trained ensembles of both the FastTree and LightGBM learner, and, if we ever clean up our XGBoost wrapper so it can be open sourced (or, perhaps even, someone implements a fresh wrapper for us), maybe it will wind up using exactly that same structure. This will also serve them better since this class's structure is, for the same reasons enumerated above, incomprehensible, since about half the members on it are things people shouldn't use. (Since they are used as explained above exclusively during training.)\r\n\r\nWhat should be done instead is the following: during training there is an internal class, in fact, probably more or less the same class that exists now, with a separate *immutable* class that is exposed as the model during training, created out of instances of this class. This also implies a separate training/prediction structure of what is currently called `TreeEnsemble`, and of course the quantile trees will have to be fashioned in some way. Much of the code supporting prediction and the standard ML.NET interfaces would move into *that* set of immutable classes.","Url":"https://github.com/dotnet/machinelearning/issues/1960","RelatedDescription":"Open issue \"Make FastTree/LightGBM learned model suitable for public consumption\" (#1960)"},{"Id":"393694338","IsPullRequest":false,"CreatedAt":"2018-12-22T18:35:09","Actor":"ganik","Number":"1959","RawContent":null,"Title":" internal static partial class Utils is not accessible anymore from NimbusML","State":"open","Body":"This is a breaking changes in ML.NET 0.8 or later for NimbusML\r\nPls advise\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1959","RelatedDescription":"Open issue \" internal static partial class Utils is not accessible anymore from NimbusML\" (#1959)"},{"Id":"393693702","IsPullRequest":false,"CreatedAt":"2018-12-22T18:25:16","Actor":"ganik","Number":"1958","RawContent":null,"Title":"ArgumentAttribute is inaccessible due to its protection level from NimbusML","State":"open","Body":"ML.Runtime.CommandLine.ArgumentAttribute is inaccessible anymore from NimbusML. \r\nPlease advise how to proceed\r\n\r\nthx","Url":"https://github.com/dotnet/machinelearning/issues/1958","RelatedDescription":"Open issue \"ArgumentAttribute is inaccessible due to its protection level from NimbusML\" (#1958)"},{"Id":"393693371","IsPullRequest":false,"CreatedAt":"2018-12-22T18:20:51","Actor":"ganik","Number":"1957","RawContent":null,"Title":"Contracts is internal and inaccessible from NimbusML","State":"open","Body":"NimbusML has DotNetBridge that uses Microsoft.ML.Runtime.Contracts(..) throughout its code base. Now its not possible due to Contracts being internal. \r\nPlease advise how to proceed.","Url":"https://github.com/dotnet/machinelearning/issues/1957","RelatedDescription":"Open issue \"Contracts is internal and inaccessible from NimbusML\" (#1957)"},{"Id":"393636179","IsPullRequest":true,"CreatedAt":"2018-12-22T05:28:31","Actor":"codemzs","Number":"1955","RawContent":null,"Title":"Remove \"Runtime\" from all namespace","State":"closed","Body":"Partially fixes #1697 by removing \"Runtime\" from all namespaces and that is it, no moving classes to other namespaces. ","Url":"https://github.com/dotnet/machinelearning/pull/1955","RelatedDescription":"Closed or merged PR \"Remove \"Runtime\" from all namespace\" (#1955)"},{"Id":"393625373","IsPullRequest":false,"CreatedAt":"2018-12-22T00:24:26","Actor":"daholste","Number":"1954","RawContent":null,"Title":"TextFeaturizingEstimator does not have a setting to modify ngram length","State":"open","Body":"### Issue\r\n\r\nTextFeaturizingEstimator does not seem to have a public setting to modify the desired ngram length for extracted words / characters?\r\n\r\nSuch a setting would be really useful","Url":"https://github.com/dotnet/machinelearning/issues/1954","RelatedDescription":"Open issue \"TextFeaturizingEstimator does not have a setting to modify ngram length\" (#1954)"},{"Id":"393624233","IsPullRequest":true,"CreatedAt":"2018-12-22T00:13:41","Actor":"wschin","Number":"1953","RawContent":null,"Title":"Add an example for static pipeline with in-memory data and show how to get class probabilities","State":"open","Body":"Fixes #1947 and fixes #1881.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1953","RelatedDescription":"Open PR \"Add an example for static pipeline with in-memory data and show how to get class probabilities\" (#1953)"},{"Id":"393594805","IsPullRequest":false,"CreatedAt":"2018-12-21T21:24:04","Actor":"JakeRadMSFT","Number":"1952","RawContent":null,"Title":"MacOs support for mlContext.Transforms.LoadImages","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Mac\r\n- **.NET Version (eg., dotnet --info)**:  Ml.Net 0.8.0\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.101/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.2.101 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n\r\n### Issue\r\n\r\n- **What did you do?** \r\nTried to use the example: https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/DeepLearning_ImageClassification_TensorFlow on a Mac\r\n\r\n- **What happened?** \r\nImage /Users/jakeradzikowski/dev/experiment/mlNet/GitHubExample/ImageClassification/assets/inputs/images/broccoli.jpg was not found.\r\n\r\n- **What did you expect?**\r\nThe above path does exist ... So I expected the image to be found and loaded. Does mlContext.Transforms.LoadImages work on a MacOS?\r\n\r\n### Source code / logs\r\n\r\nSee the example referenced above.","Url":"https://github.com/dotnet/machinelearning/issues/1952","RelatedDescription":"Open issue \"MacOs support for mlContext.Transforms.LoadImages\" (#1952)"},{"Id":"393513884","IsPullRequest":true,"CreatedAt":"2018-12-21T16:18:28","Actor":"Ivanidzo4ka","Number":"1951","RawContent":null,"Title":"WIP Load entry point models","State":"open","Body":"fixes https://github.com/dotnet/machinelearning/issues/1104\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1951","RelatedDescription":"Open PR \"WIP Load entry point models\" (#1951)"},{"Id":"393277936","IsPullRequest":false,"CreatedAt":"2018-12-21T01:36:43","Actor":"wschin","Number":"1950","RawContent":null,"Title":"LightGBM extensions are not tested","State":"open","Body":"Three functions listed below are not tested (VS doesn't find any references):\r\n```csharp\r\n        public static LightGbmRankingTrainer LightGbm(this RankingContext.RankingTrainers ctx,\r\n            string labelColumn = DefaultColumnNames.Label,\r\n            string featureColumn = DefaultColumnNames.Features,\r\n            string groupIdColumn = DefaultColumnNames.GroupId,\r\n            string weights = null,\r\n            int? numLeaves = null,\r\n            int? minDataPerLeaf = null,\r\n            double? learningRate = null,\r\n            int numBoostRound = LightGbmArguments.Defaults.NumBoostRound,\r\n            Action<LightGbmArguments> advancedSettings = null)\r\n```\r\n```csharp\r\n        public static LightGbmBinaryTrainer LightGbm(this BinaryClassificationContext.BinaryClassificationTrainers ctx,\r\n            string labelColumn = DefaultColumnNames.Label,\r\n            string featureColumn = DefaultColumnNames.Features,\r\n            string weights = null,\r\n            int? numLeaves = null,\r\n            int? minDataPerLeaf = null,\r\n            double? learningRate = null,\r\n            int numBoostRound = LightGbmArguments.Defaults.NumBoostRound,\r\n            Action<LightGbmArguments> advancedSettings = null\r\n```\r\n```csharp\r\n        public static LightGbmRegressorTrainer LightGbm(this RegressionContext.RegressionTrainers ctx,\r\n            string labelColumn = DefaultColumnNames.Label,\r\n            string featureColumn = DefaultColumnNames.Features,\r\n            string weights = null,\r\n            int? numLeaves = null,\r\n            int? minDataPerLeaf = null,\r\n            double? learningRate = null,\r\n            int numBoostRound = LightGbmArguments.Defaults.NumBoostRound,\r\n            Action<LightGbmArguments> advancedSettings = null\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/1950","RelatedDescription":"Open issue \"LightGBM extensions are not tested\" (#1950)"},{"Id":"393254461","IsPullRequest":false,"CreatedAt":"2018-12-20T23:43:35","Actor":"montebhoover","Number":"1949","RawContent":null,"Title":"How to get ComponentCatalog from MLContext?","State":"open","Body":"For NimbusML we have a \"ManifestGenerator\" that creates the EntryPoint manifest.json from a given set of ML.NET assemblies.  Currently we implement this the same way it is implemented in [TestEntryPoints.cs](https://github.com/dotnet/machinelearning/blob/337cc551f1a4fb45b5efc9797803c06bd451ee29/test/Microsoft.ML.Core.Tests/UnitTests/TestEntryPoints.cs#L349), but ConsoleEnvironment has been made internal, and ML.Context doesn't have a ComponentCatalog.  What are ways I could get access to a ComponentCatalog and use JsonManifestUtils to build a new manifest.json?\r\n\r\n@Ivanidzo4ka @yaeldekel @ganik ","Url":"https://github.com/dotnet/machinelearning/issues/1949","RelatedDescription":"Open issue \"How to get ComponentCatalog from MLContext?\" (#1949)"},{"Id":"393253748","IsPullRequest":false,"CreatedAt":"2018-12-20T23:40:50","Actor":"najeeb-kazmi","Number":"1948","RawContent":null,"Title":"Public constructors for GamModelParameters","State":"open","Body":"Part of #1698 \r\n\r\nRight now, in `BinaryClassificationGamModelParameters` and `RegressionGamModelParameters` we have constructors that look like the following;\r\n\r\n```csharp\r\ninternal BinaryClassificationGamModelParameters(IHostEnvironment env, int inputLength, Dataset trainset,\r\n            double meanEffect, double[][] binEffects, int[] featureMap)\r\n            : base(env, LoaderSignature, inputLength, trainset, meanEffect, binEffects, featureMap) { }\r\n```\r\n\r\nWe want to make public constructors for all `ModelParameters` (previously `predictors`). However, for GAMs, this requires the user to pass in a training set, which is a `Dataset` object in `Microsoft.ML.FastTree.Internal`. This is not something we should expect the end user of the API to be aware of, so the constructor was not made public. Currently, `Dataset` is needed in `GamModelParametersBase` to map features to flocks and get bin upper bounds. We should rewrite GAMs so that this information is passed on from the Trainer rather than be computed when constructing the `GamModelParameters`.","Url":"https://github.com/dotnet/machinelearning/issues/1948","RelatedDescription":"Open issue \"Public constructors for GamModelParameters\" (#1948)"},{"Id":"393249901","IsPullRequest":false,"CreatedAt":"2018-12-20T23:25:35","Actor":"wschin","Number":"1947","RawContent":null,"Title":"Need Example of Generating DataView and Feeding It to Static Pipeline","State":"open","Body":"All of example (static) pipelines start with a text file, which is not very true when deploying models to apps. We need to create examples using in-memory C# data structures.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1947","RelatedDescription":"Open issue \"Need Example of Generating DataView and Feeding It to Static Pipeline\" (#1947)"},{"Id":"393247485","IsPullRequest":true,"CreatedAt":"2018-12-20T23:16:45","Actor":"Anipik","Number":"1946","RawContent":null,"Title":"Throwing exception if the underlying rsp fails with an exception","State":"open","Body":"The benchmarks involving rsps don't fail even when the underlying rsp has thrown an exception\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1946","RelatedDescription":"Open PR \"Throwing exception if the underlying rsp fails with an exception\" (#1946)"},{"Id":"393209435","IsPullRequest":false,"CreatedAt":"2018-12-20T20:59:18","Actor":"Anipik","Number":"1945","RawContent":null,"Title":"lib_lightgbm.dll is not getting loaded while running benchmarks on .NetFramework","State":"open","Body":"when we try to run this https://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Benchmarks/Numeric/Ranking.cs#L50\r\nand \r\nhttps://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Benchmarks/Text/MultiClassClassification.cs#L47\r\n\r\non .netFramework, the benchmark is not able to load the lib_lightgbm.dll\r\n```\r\nUnexpected exception: Unable to load DLL 'lib_lightgbm': The specified module could not be found. (Exception from HRESULT: 0x8007007E), 'System.DllNotFoundException'\r\n```\r\n\r\nThe benchmarks run properly on .NetCore\r\n\r\n\r\ncc @danmosemsft @eerhardt @adamsitnik ","Url":"https://github.com/dotnet/machinelearning/issues/1945","RelatedDescription":"Open issue \"lib_lightgbm.dll is not getting loaded while running benchmarks on .NetFramework\" (#1945)"},{"Id":"393178826","IsPullRequest":true,"CreatedAt":"2018-12-20T19:20:39","Actor":"wschin","Number":"1944","RawContent":null,"Title":"ONNX conversion should throw a better message","State":"open","Body":"Fixes #1396. Simply went to all SaveAsOnnx and SaveAsOnnxCore and add throwing mechanism if proper.","Url":"https://github.com/dotnet/machinelearning/pull/1944","RelatedDescription":"Open PR \"ONNX conversion should throw a better message\" (#1944)"},{"Id":"393177430","IsPullRequest":false,"CreatedAt":"2018-12-20T19:16:47","Actor":"sfilipi","Number":"1943","RawContent":null,"Title":"Should the error messages use the standart .net types, rather than the internal types?","State":"open","Body":"Most of our error messages related to type mismatch/schema mismatch use the internal R4, U4 types. \r\n\r\nShould those get scrubbed and substituted with the .net types before 1.0, to make them more user friendly?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1943","RelatedDescription":"Open issue \"Should the error messages use the standart .net types, rather than the internal types?\" (#1943)"},{"Id":"393175239","IsPullRequest":false,"CreatedAt":"2018-12-20T19:09:57","Actor":"sfilipi","Number":"1942","RawContent":null,"Title":"Reconcile the check for Probability in the BinaryClassifierEvaluator with the logic in the calibrators","State":"open","Body":"Fitting an IDataView that contains a score column(produced by a binary classifier scorer), currently will append a column with the name probability to the IDataView . \r\n\r\nIf one column with the name \"Probability\" exists, another one will be added. (Maybe if the user wants to try out different calibrators?). The calibrators don't complain about its existence. \r\n\r\nCurrently the [BinaryClassifierEvaluator](https://github.com/dotnet/machinelearning/blob/3188f1a3a176fe80902491b08024b10dd6cc2a25/src/Microsoft.ML.Data/Evaluators/BinaryClassifierEvaluator.cs#L145) checks that there are no more than one probability columns. \r\n\r\nReconcile the behavior/expectations, or is this ok, and we can leave the user cleanup if more than one Probability columns. \r\n\r\ncc @yaeldekel @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/1942","RelatedDescription":"Open issue \"Reconcile the check for Probability in the BinaryClassifierEvaluator with the logic in the calibrators\" (#1942)"},{"Id":"393173452","IsPullRequest":true,"CreatedAt":"2018-12-20T19:04:10","Actor":"ganik","Number":"1941","RawContent":null,"Title":"Fix CategoricalHashTransform to handle OutputKind \"Key\"","State":"open","Body":"fixes #1939 ","Url":"https://github.com/dotnet/machinelearning/pull/1941","RelatedDescription":"Open PR \"Fix CategoricalHashTransform to handle OutputKind \"Key\"\" (#1941)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-27T05:30:49.5773483Z","RunDurationInMilliseconds":1221}