{"Data":{"Blog":{"FeedItems":[{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current blog post focuses on introducing the new &#8220;Modernize existing .NET applications with Windows Containers and Azure&#8221; eBook which you can download here. Just as a reminder,... <a aria-label=\"read more about Modernize existing .NET apps with Windows Containers and Azure\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null},{"Title":"Introducing API Analyzer","PublishedOn":"2017-10-31T23:24:24+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"This post was written by Olia Gavrysh. Have you ever wondered which APIs are deprecated and which should you use instead? Or have you ever used an API and then found out it didn&#8217;t work on Mac or Linux? Have that ever happened to you too late when a major part of your code is... <a aria-label=\"read more about Introducing API Analyzer\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/introducing-api-analyzer/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/introducing-api-analyzer/","RawContent":null},{"Title":"Welcome to C# 7.1","PublishedOn":"2017-10-31T22:39:48+00:00","CommentsCount":25,"FacebookCount":0,"Summary":"With C# we have always tended towards major releases: bundle a lot of features up, and release less frequently. We even went so far as routinely omitting the traditional &#34;.0&#34; when we talked about C# 6.0! In the C# 7.0 &#34;wave&#34; we are trying something new. Tools such as Visual Studio upgrade on a frequent... <a aria-label=\"read more about Welcome to C# 7.1\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/welcome-to-c-7-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/welcome-to-c-7-1/","RawContent":null},{"Title":"Moving to real time test discovery in Test Explorer","PublishedOn":"2017-10-30T22:46:58+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Real time test discovery is a new Visual Studio feature that uses a Roslyn analyzer to discover tests and populate the test explorer in real time without requiring you to build your project. This feature has been introduced in Visual Studio 2017 15.5 Preview 2 behind a feature flag. You can try it out by... <a aria-label=\"read more about Moving to real time test discovery in Test Explorer\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/30/real-time-test-discovery/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/30/real-time-test-discovery/","RawContent":null},{"Title":"Entity Framework 6.2 Runtime Released","PublishedOn":"2017-10-26T21:32:59+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Today we announce the availability of EF 6.2 runtime in NuGet.org. Entity Framework (EF) is Microsoft&#8217;s traditional object/relational mapper (O/RM) for .NET Framework. To understand the difference between EF6 and EF Core, please refer to our documentation. How to obtain the new package You can install EF 6.2 either using the &#8220;Manage NuGet Packages&#8221; option... <a aria-label=\"read more about Entity Framework 6.2 Runtime Released\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/","RawContent":null},{"Title":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018","PublishedOn":"2017-10-23T16:41:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, and Juan Rodriguez, engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier 2018. We&#8217;re excited to have a new tool to use to help make .NET Core faster on Intel chips. Intel has been a strong partner in the development... <a aria-label=\"read more about .NET Core Performance Profiling with Intel® VTune™ Amplifier 2018\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/","RawContent":null},{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where to start answering these important questions. But there&#8217;s a really... <a aria-label=\"read more about Experiment with Azure for FREE!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":37,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008 R2+.  We’ve added support for targeting the .NET Framework 4.7.1 in Visual Studio 2017 15.5. The .NET Framework 4.7.1 includes improvements in several areas: Accessibility improvements... <a aria-label=\"read more about Announcing the .NET Framework 4.7.1\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. Quality and Reliability This release contains the following quality and reliability improvements. CLR Code optimization bug for x64 C# code targeting... <a aria-label=\"read more about .NET Framework October 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by .NET Core and .NET Framework. I hope it will make for an interesting read, and offer some insight into the sorts of optimization opportunities we have... <a aria-label=\"read more about RyuJIT Just-in-Time Compiler Optimization Enhancements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6803910341","Type":"IssuesEvent","CreatedAt":"2017-11-03T04:47:03","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/37","RelatedDescription":"Opened issue \"microsoft/dotnet nanoserver images now support Windows Server 1709\" (#37) at dotnet/announcements","RelatedBody":"# microsoft/dotnet nanoserver images now support Windows Server 1709\r\n\r\n[Windows Server Version 1709](https://blogs.technet.microsoft.com/windowsserver/2017/10/17/windows-server-version-1709-available-for-download/) was released in October. [microsoft/nanoserver](https://hub.docker.com/r/microsoft/nanoserver/) images have been updated to support [Windows Server 1709](https://docs.microsoft.com/en-us/windows-server/get-started/whats-new-in-windows-server-1709). These images can be identified with the `nanoserver-1709` [tag](https://hub.docker.com/r/microsoft/windowsservercore/tags/) substring.\r\n\r\nThe following repos have been updated:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #330](https://github.com/dotnet/dotnet-docker/issues/330)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker #321](https://github.com/dotnet/dotnet-docker/pull/321)\r\n* [dotnet/dotnet-docker #322](https://github.com/dotnet/dotnet-docker/issues/322)\r\n* [dotnet/dotnet-docker #329](https://github.com/dotnet/dotnet-docker/pull/329)\r\n\r\n.NET Core Docker images now support Windows Server 1709, the latest version of Windows Server.\r\n\r\nYou can see an example of 1709-based images in the following example.\r\n\r\n![.NET Core nanoserver 1709 images](https://user-images.githubusercontent.com/2608468/32360772-61680cec-c016-11e7-851d-0d962c35fe41.png)\r\n\r\nYou can identify Windows Server 1709-based .NET Core images with the tag substring `nanoserver-1709` and Windows Server 2016 images with the tag substring `nanoserver-sac2016`.\r\n\r\nChanges have been made in Windows Server 1709 that affect the [compatibility of Windows container images](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility). The practical impact is that Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creative Update hosts cannot load Windows Server 1709 images. Windows 10 Fall Creative Update and Windows Server 1709 can load both original Windows Server 2016 and Windows Server 1709 images. Windows Server 1709 requires Hyper-V isolation (`docker run --isolation=hyperv`) in order to load Windows Server 2016 images.\r\n\r\nGiven the compatibility differences with Windows container images, .NET Core images will adopt [manifest lists](https://github.com/dotnet/dotnet-docker/issues/322) so that a single logical tag, like `2.0-runtime`, can be used on both older and newer Windows 10 and Windows Server versions. `docker pull microsoft/dotnet:2.0-runtime` will pull a Windows Server 2016 image on Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creators Update machines. The same command will pull a Windows Server 1709 based image on Windows Server 1709 and Windows 10 Fall Creators Update machines. The same rules apply to FROM lines.\r\n\r\n[.NET Framework](https://github.com/dotnet/announcements/issues/36) Docker images are also using manifest lists for the same reason.\r\n\r\nYou need [Docker 17.10](https://docs.docker.com/release-notes/docker-ce/#17100-ce-2017-10-17) or later to use Windows-version-specific manifest list tags. The following change from the Docker 17.10 release notes is the one that enables this functionality.\r\n\r\n* Add support for Windows version filtering on pull [moby/moby#35090](https://github.com/moby/moby/pull/35090)\r\n\r\nYou are only recommended to use manifest tags if you want flexibility for development and deployment environments. That's what manifest tags deliver. In general, you should select the most specific tag you can. The more specific the tag, the more predictable the result of each `docker pull` and `docker build` will be.\r\n"},{"Id":"6766996801","Type":"IssuesEvent","CreatedAt":"2017-10-26T00:24:01","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/36","RelatedDescription":"Opened issue \"microsoft/dotnet-framework images now support Windows Server 1709\" (#36) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework images now support Windows Server 1709\r\n\r\n[Windows Server Version 1709](https://blogs.technet.microsoft.com/windowsserver/2017/10/17/windows-server-version-1709-available-for-download/) was released earlier this month. [microsoft/windowsservercore](https://hub.docker.com/r/microsoft/windowsservercore/) images have been updated to support [Windows Server 1709](https://docs.microsoft.com/en-us/windows-server/get-started/whats-new-in-windows-server-1709). These images can be identified with the `1709` [tag](https://hub.docker.com/r/microsoft/windowsservercore/tags/).\r\n\r\nThe following repos have been updated:\r\n\r\n* [microsoft/aspnet](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #35](https://github.com/Microsoft/dotnet-framework-docker/issues/35)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #31](https://github.com/Microsoft/dotnet-framework-docker/pull/31)\r\n* [microsoft/dotnet-framework-docker #34](https://github.com/Microsoft/dotnet-framework-docker/pull/34)\r\n* [microsoft/dotnet-framework-docker #32](https://github.com/Microsoft/dotnet-framework-docker/issues/32)\r\n\r\n.NET Framework Docker images now support Windows Server 1709, the latest version of Windows Server.\r\n\r\n.NET Framework 3.5 and 4.7.1 images are available for Windows Server 1709. Windows Server 1709 includes the .NET Framework 4.7.1. .NET Framework 4.6.2 and .NET Framework 4.7 images are only available with Windows Server 2016 images. You can see an example of 1709-based images in the following example.\r\n\r\n![.NET Framework Windows 1709 images](https://user-images.githubusercontent.com/2608468/32028249-6684a82c-b9a2-11e7-8afa-1b1abf89eb3b.png)\r\n\r\nYou can identify Windows Server 1709-based .NET Framework images with the tag substring `windowsservercore-1709` and Windows Server 2016 images with the tag substring `windowsservercore-10.0.14393`. You will likely notice that the 1709-based images are easier to identify than the Windows Server 2016 ones. \r\n\r\nChanges have been made in Windows Server 1709 that affect the [compatibility of Windows container images](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility). The practical impact is that Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creative Update hosts cannot load Windows Server 1709 images. Windows 10 Fall Creative Update and Windows Server 1709 can load both original Windows Server 2016 and Windows Server 1709 images. Windows Server 1709 requires Hyper-V isolation (`docker run --isolation=hyperv`) in order to load Windows Server 2016 images.\r\n\r\nGiven the compatibility differences with Windows container images, .NET Framework images will adopt [manifest lists](https://github.com/Microsoft/dotnet-framework-docker/issues/32) so that a single logical tag, like `4.7.1`, can be used on both older and newer Windows 10 and Windows Server versions. `docker pull microsoft/dotnet-framework:4.7.1` will pull a Windows Server 2016 image on Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creators Update machines. The same command will pull a Windows Server 1709 based image on Windows Server 1709 and Windows 10 Fall Creators Update machines. The same rules apply to FROM lines. [.NET Core](https://hub.docker.com/r/microsoft/dotnet) Docker images use this same feature to support Linux and Windows hosts and AMD64 and ARM32 hosts with the same logical tag, like `2.0-runtime`.\r\n\r\nThe following tags will be updated to use manifest lists:\r\n\r\n- `latest`\r\n- `4.7.1`\r\n- `3.5`\r\n\r\nYou need [Docker 17.10](https://docs.docker.com/release-notes/docker-ce/#17100-ce-2017-10-17) or later to use Windows-version-specific manifest list tags. The following change from the Docker 17.10 release notes is the one that enables this functionality.\r\n\r\n* Add support for Windows version filtering on pull [moby/moby#35090](https://github.com/moby/moby/pull/35090)\r\n\r\nYou are only recommended to use manifest tags if you want flexibility for development and deployment environments. That's what manifest tags deliver. In general, you should select the most specific tag you can. The more specific the tag, the more predictable the result of each `docker pull` and `docker build` will be."},{"Id":"6761784781","Type":"IssuesEvent","CreatedAt":"2017-10-25T04:03:38","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/35","RelatedDescription":"Opened issue \"microsoft/dotnet-framework latest tag updated to 4.7.1\" (#35) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework latest tag updated to 4.7.1\r\n\r\nThe [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/) was released earlier this month. The [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework) `latest` [tag](https://hub.docker.com/r/microsoft/dotnet-framework/tags/) was also updated.\r\n\r\nThe .NET Framework 4.7.1 is represented by the `microsoft/dotnet-framework:4.7.1` tag.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #33](https://github.com/Microsoft/dotnet-framework-docker/issues/33)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #28](https://github.com/Microsoft/dotnet-framework-docker/pull/28)\r\n* [microsoft/dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework 4.7.1 image is now available as a Docker image. The `latest` tag points to the same image.\r\n\r\nThe following repos were updated:\r\n\r\n* [microsoft/asp](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\nThe [microsoft/dotnet-framework-samples](https://hub.docker.com/r/microsoft/dotnet-framework-samples) repo has not yet been updated.\r\n\r\nWe recommend that you use version-specific tags for production apps. For experimentation or while an application is in development, using the `latest` tag is a fine practice.\r\n\r\nWe recently found a [significant performance issue with .NET Framework Docker images](https://github.com/dotnet/announcements/issues/33). The .NET Framework 4.7.1 image includes the fix for that problem.\r\n"},{"Id":"6729762964","Type":"IssuesEvent","CreatedAt":"2017-10-17T21:21:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/34","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash\" (#34) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8585 \r\n## Malformed Culture can cause application to crash\r\n### Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.\r\n\r\n### Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/24703 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n\r\n.NET Core 2.0 is not affected by this issue.\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nAs this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location          |\r\n|------------------|-------------------|\r\n| Windows          | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n| [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.\r\n\r\nAlso, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.\r\n\r\nIf you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable."},{"Id":"6725652001","Type":"IssuesEvent","CreatedAt":"2017-10-17T06:48:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/33","RelatedDescription":"Opened issue \".NET Framework Docker Performance Issue Resolved\" (#33) at dotnet/announcements","RelatedBody":"# .NET Framework Docker Performance Issue Resolved\r\n\r\nMultiple people have [reported](https://github.com/Microsoft/dotnet-framework-docker/issues/25) that [.NET Framework performance in Docker images is poor](https://github.com/moby/moby/issues/33096). In the cases reported, performance was an order of magnitude slower than expected.\r\n\r\nThis issue has now been resolved for [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) images. It was due to incorrectly generated NGEN images. They are now correctly generated and expected performance has been restored.\r\n\r\n## Discussion \r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #29](https://github.com/Microsoft/dotnet-framework-docker/pull/29)\r\n\r\n## Details\r\n\r\n* [dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework uses [NGEN](https://docs.microsoft.com/dotnet/framework/tools/ngen-exe-native-image-generator) as a primary mechanism for startup performance. .NET Framework assemblies are compiled to native code with the NGEN tool as part of the .NET Framework setup process. The benefit of these files is that they can be loaded and executed without any additional significant extra work required by the Common Language Runtime (CLR). The lack of  additional work means that performance is very good.\r\n\r\nNGEN image generation interacts with a Windows subsystem that is not correctly supported in Windows containers. NGEN images are generated in Windows containers, but they are not valid. Fortunately, the CLR can still run in the presence of invalid images, but code execution is much slower.\r\n\r\nWe are in the process of fixing Windows containers so that NGEN will work correctly. In the interim, we have updated the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) images to correctly generate NGEN images. The [microsoft/windowsservercore/](https://hub.docker.com/r/microsoft/windowsservercore/) images still have the performance problem that was initially reported. We are working on updating Windows containers so that NGEN works as expected. You are recommended to use the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) base image if you can, so that you can get better performance.\r\n\r\nOne of the developers that reported the performance issue shared basic performance results. The first two rows are the before state. The last row is the dotnet-framework image after the fix. The improvement is quite significant.\r\n\r\n> Runing `powershell -command (measure-command { powershell -command exit }).TotalSeconds` in various images on our CI server produced this table of timings:\r\n \r\n| time (s) | image |\r\n|----------|--------|\r\n|10.7212372| microsoft/windowsservercore |\r\n|8.3278793  | microsoft/dotnet-framework:4.7|\r\n|0.6426073  | microsoft/dotnet-framework:4.7 (after fix)|\r\n"},{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6803751694","Type":"PullRequestEvent","CreatedAt":"2017-11-03T03:25:11","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14840","RelatedDescription":"Opened pull request \"LSRA Dump: don't print unused regs\" (#14840) at dotnet/coreclr","RelatedBody":"Also, eliminate the non-terse dump mode."},{"Id":"6803715493","Type":"PullRequestEvent","CreatedAt":"2017-11-03T03:08:29","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14837","RelatedDescription":"Merged pull request \"Do not ask call about GTF_RET flag.\" (#14837) at dotnet/coreclr","RelatedBody":"GTF_RET means that this flag is valid only for GTF_RET node, but this check was missed.\r\nThe issue was in collision between GTF_RET_MERGED and GTF_CALL_UNMANAGED.\r\nIt would be nice one fine day to rewrite all `gtFlags &` with `isSmthSet` and `assert` that it is called with the right `OperGet`.\r\n\r\nThe issue example:\r\n```\r\n[000002] ------------              *  STMT      void  (IL 0x000...  ???)\r\n[000001] I-C-G-------              \\--*  CALL      void   System.GC.Collect (exactContextHnd=0x080EDF25)\r\n```\r\nThe block jump was set to (return) because of `JitTailCallStress` mode, call was inlined:\r\n`[000007] --C-G-------              \\--*  CALL unman void   System.GC._Collect` \r\nand `0x80000000` was set, then we read this value as `GTF_RET_MERGED`.\r\nFix #14376 ."},{"Id":"6803715475","Type":"IssuesEvent","CreatedAt":"2017-11-03T03:08:29","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14376","RelatedDescription":"Closed issue \"[RyuJIT/x86][TailcallStress=1] Assertion failed 'header->epilogCount <= 1'\" (#14376) at dotnet/coreclr","RelatedBody":"Found in an x86 `COMPlus_TailcallStress=1` run\r\n\r\n```\r\nAssert failure(PID 13592 [0x00003518], Thread: 11152 [0x2b90]): Assertion failed 'header->epilogCount <= 1' in 'EHTest:f3()' (IL size 6)\r\n\r\n    File: e:\\gh\\coreclr2\\src\\jit\\gcencode.cpp Line: 1628\r\n    Image: E:\\gh\\coreclr2\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n\r\nTest:\r\n```\r\nJIT\\Regression\\CLR-x86-JIT\\V1-M13-RTM\\b92289\\b92289\\b92289.cmd\r\n```\r\n"},{"Id":"6803584029","Type":"IssuesEvent","CreatedAt":"2017-11-03T02:07:36","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14550","RelatedDescription":"Closed issue \"[RyuJIT/arm32][JitStress=1] Assertion failed 'firstILBlock->hasProfileWeight()'\" (#14550) at dotnet/coreclr","RelatedBody":"From corefx x86_arm_altjit run, e.g. \"@dotnet-bot test Windows_NT x86_arm_altjit Checked corefx_jitstress1\".\r\n\r\nHappens with `COMPlus_JitStress=1`.\r\n\r\nFound in System.Threading.Tasks.Dataflow.Tests:\r\n```\r\nE:\\gh\\corefx\\bin\\tests\\System.Threading.Tasks.Dataflow.Tests\\netcoreapp-Windows_NT-Release-x86>RunTests.cmd E:\\gh\\corefx\\bin\\testhost\\netcoreapp-Windows_NT-Release-x86\\\r\nUsing E:\\gh\\corefx\\bin\\testhost\\netcoreapp-Windows_NT-Release-x86\\ as the test runtime folder.\r\nExecuting in E:\\gh\\corefx\\bin\\tests\\System.Threading.Tasks.Dataflow.Tests\\netcoreapp-Windows_NT-Release-x86\\\r\nRunning tests... Start time: 13:56:33.79\r\n\r\nE:\\gh\\corefx\\bin\\tests\\System.Threading.Tasks.Dataflow.Tests\\netcoreapp-Windows_NT-Release-x86>set COMPlus_AltJit=*\r\nE:\\gh\\corefx\\bin\\tests\\System.Threading.Tasks.Dataflow.Tests\\netcoreapp-Windows_NT-Release-x86>set COMPlus_AltJitNgen=*\r\nE:\\gh\\corefx\\bin\\tests\\System.Threading.Tasks.Dataflow.Tests\\netcoreapp-Windows_NT-Release-x86>set COMPlus_AltJitName=protononjit.dll\r\nE:\\gh\\corefx\\bin\\tests\\System.Threading.Tasks.Dataflow.Tests\\netcoreapp-Windows_NT-Release-x86>set COMPlus_NoGuiOnAssert=1\r\nE:\\gh\\corefx\\bin\\tests\\System.Threading.Tasks.Dataflow.Tests\\netcoreapp-Windows_NT-Release-x86>set COMPlus_ContinueOnAssert=0\r\nE:\\gh\\corefx\\bin\\tests\\System.Threading.Tasks.Dataflow.Tests\\netcoreapp-Windows_NT-Release-x86>set COMPlus_AltJitAssertOnNYI=1\r\nE:\\gh\\corefx\\bin\\tests\\System.Threading.Tasks.Dataflow.Tests\\netcoreapp-Windows_NT-Release-x86>set COMPlus_JitStress=1\r\n\r\nE:\\gh\\corefx\\bin\\tests\\System.Threading.Tasks.Dataflow.Tests\\netcoreapp-Windows_NT-Release-x86>call E:\\gh\\corefx\\bin\\testhost\\netcoreapp-Windows_NT-Release-x86\\\\dotnet.exe xunit.console.netcore.exe System.Threading.Tasks.Dataflow.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonwindowstests  -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing\r\nxUnit.net console test runner (32-bit .NET Core)\r\nCopyright (C) 2014 Outercurve Foundation.\r\n\r\nDiscovering: System.Threading.Tasks.Dataflow.Tests\r\nDiscovered:  System.Threading.Tasks.Dataflow.Tests\r\nStarting:    System.Threading.Tasks.Dataflow.Tests\r\n\r\nAssert failure(PID 16624 [0x000040f0], Thread: 1384 [0x0568]): Assertion failed 'firstILBlock->hasProfileWeight()' in 'System.Collections.Concurrent.ConcurrentQueue`1[KeyValuePair`2][System.Collections.Generic.KeyValuePair`2[System.Int32,System.Int64]]:EnqueueSlow(struct):this' (IL size 122)\r\n\r\n    File: e:\\gh\\coreclr2\\src\\jit\\flowgraph.cpp Line: 13204\r\n    Image: E:\\gh\\corefx\\bin\\testhost\\netcoreapp-Windows_NT-Release-x86\\dotnet.exe\r\n```\r\n\r\nFull repro:\r\n```\r\ndotnet/coreclr:\r\nE:\\gh\\coreclr2> build.cmd x86 checked\r\n\r\ndotnet/corefx:\r\nE:\\gh\\corefx> build.cmd -Release -os:Windows_NT -buildArch:x86 -- /p:CoreCLROverridePath=E:\\gh\\coreclr2\\bin\\Product\\Windows_NT.x86.Checked\r\nE:\\gh\\corefx> build-tests.cmd -Release -os:Windows_NT -buildArch:x86 -- /p:WithoutCategories=IgnoreForCI /p:PreExecutionTestScript=e:\\bugs\\SetStressModes.bat\r\n\r\nWith e:\\bugs\\SetStressModes.bat:\r\nset COMPlus_AltJit=*\r\nset COMPlus_AltJitNgen=*\r\nset COMPlus_AltJitName=protononjit.dll\r\nset COMPlus_NoGuiOnAssert=1\r\nset COMPlus_ContinueOnAssert=0\r\nset COMPlus_AltJitAssertOnNYI=1\r\nset COMPlus_JitStress=1\r\n```\r\n"},{"Id":"6803485518","Type":"PullRequestEvent","CreatedAt":"2017-11-03T01:21:26","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14801","RelatedDescription":"Merged pull request \"Fixes Assertion failed 'firstILBlock->hasProfileWeight()\" (#14801) at dotnet/coreclr","RelatedBody":"When creating a new top block we need to use inheritWeight to properly initialize the the block weight and the profile data flag"},{"Id":"6803445487","Type":"PullRequestEvent","CreatedAt":"2017-11-03T01:03:01","Actor":"rartemev","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14839","RelatedDescription":"Opened pull request \"Fixed excessed indirection in protojit for tailcalls\" (#14839) at dotnet/coreclr","RelatedBody":"Issue #13213 in case of protojit\r\nIf we have indirected `callvirt` tailcall, we might get into the situation when additional `load` is made.\r\n```\r\n...\r\n000094  4798           blx     r3               // CORINFO_HELP_RUNTIMEHANDLE_METHOD\r\n000096  4604           mov     r4, r0\r\n...\r\n0000B6  6821           ldr     r1, [r4]\r\n0000B8  6809           ldr     r1, [r1] <=== excessed inderection\r\n0000BA  F647 3EE1      movw    lr, 0x7be1\r\n0000BE  F2C6 3E98      movt    lr, 0x6398\r\n0000C2  47F0           blx     lr               // CORINFO_HELP_TAILCALL\r\n```\r\n`CORINFO_HELP_TAILCALL` helper takes invocation address as its 2nd argument. \r\n`CORINFO_HELP_RUNTIMEHANDLE_METHOD` returns `CORINFO_GENERIC_HANDLE`  which points to actual address, but indirecting 2 times we getting instruction code instead of address of the code.\r\n\r\nThe correct assembly has to be\r\n```\r\n...\r\n000094  4798           blx     r3               // CORINFO_HELP_RUNTIMEHANDLE_METHOD\r\n000096  4604           mov     r4, r0\r\n...\r\n0000B6  6825           ldr     r5, [r4]\r\n0000B8  4629           mov     r1, r5\r\n0000BA  F647 34E1      movw    r4, 0x7be1\r\n0000BE  F2C6 645A      movt    r4, 0x665a\r\n0000C2  47A0           blx     r4               // CORINFO_HELP_TAILCALL\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6803787100","Type":"IssuesEvent","CreatedAt":"2017-11-03T03:41:05","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7961","RelatedDescription":"Closed issue \"\"dotnet exec --help\" should print help\" (#7961) at dotnet/cli","RelatedBody":"`>dotnet --help` says to `Run 'dotnet COMMAND --help' for more information on a command.` amongst other things.\r\n\r\nYet `>dotnet exec --help` only prints an error message: `dotnet exec needs a managed .dll or .exe extension. The application specified was '--help'`.\r\nI expect this should print usage information.\r\n\r\nI'm using  2.1.1-preview-007094 (dotnet --version)"},{"Id":"6803634648","Type":"IssuesEvent","CreatedAt":"2017-11-03T02:31:46","Actor":"jcouv","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7961","RelatedDescription":"Opened issue \"\"dotnet exec --help\" should print help\" (#7961) at dotnet/cli","RelatedBody":"`>dotnet --help` says to `Run 'dotnet COMMAND --help' for more information on a command.` amongst other things.\r\n\r\nYet `>dotnet exec --help` only prints an error message: `dotnet exec needs a managed .dll or .exe extension. The application specified was '--help'`.\r\nI expect this should print usage information.\r\n\r\nI'm using  2.1.1-preview-007094 (dotnet --version)"},{"Id":"6803432038","Type":"PullRequestEvent","CreatedAt":"2017-11-03T00:57:03","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7960","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25902-04 (master)\" (#7960) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6802850594","Type":"PullRequestEvent","CreatedAt":"2017-11-02T21:44:05","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7958","RelatedDescription":"Merged pull request \"Removing more unecessary files from the CLI repo\" (#7958) at dotnet/cli","RelatedBody":"Removing more unecessary files from the CLI repo, now that it produces only the CLI verbs + MSBuild props/targets in a portable flavor.\r\n"},{"Id":"6802262339","Type":"IssuesEvent","CreatedAt":"2017-11-02T19:33:41","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7959","RelatedDescription":"Opened issue \"The SDK needs a tool to enable aquiring matching symbols for platforms that are being targeted\" (#7959) at dotnet/cli","RelatedBody":"We're providing zips for this scenario but we really need to have a tool that can easily get the right zips/tar.gz's that will let you debug through the platform layers.\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6802242853","Type":"IssuesEvent","CreatedAt":"2017-11-02T19:29:17","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7957","RelatedDescription":"Closed issue \"Add EF Core CLI Tools to default api templates (and more?)\" (#7957) at dotnet/cli","RelatedBody":"With ASPNETCore.All in new aspnetcore csproj via the template, we will go forward expecting all of the EF Core tasks to work easily. However, the CLI tools are not included, so users will find out the hard way that they have to go back to csproj and add them in. For experienced EF Core users, it's not a big deal, but for new users it could be a PIA.\r\n\r\n## Steps to reproduce\r\nCreate an empty folder\r\nrun dotnet new API\r\ndefine a data model (some classes , a dbcontext)\r\nrun dotnet ef migrations add init\r\n\r\n## Expected  behavior\r\nBecasue CSProj has all of the needed EF Core packages via ASPNET.All package , I woud expect that it would also have the needed migration CLI Tool Reference to EFCore.Tools.DotNet.\r\n\r\nMigration should be created\r\n\r\n## Actual behavior\r\nThrows \"No executable found matching command \"dotnet-ef\"\"error\r\nThat's because CSproj does not have \r\n  `<DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" />`\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6802220705","Type":"PullRequestEvent","CreatedAt":"2017-11-02T19:24:28","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7958","RelatedDescription":"Opened pull request \"Removing more unecessary files from the CLI repo\" (#7958) at dotnet/cli","RelatedBody":"Removing more unecessary files from the CLI repo, now that it produces only the CLI verbs + MSBuild props/targets in a portable flavor.\r\n"},{"Id":"6801591375","Type":"IssuesEvent","CreatedAt":"2017-11-02T17:17:27","Actor":"julielerman","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7957","RelatedDescription":"Opened issue \"Add EF Core CLI Tools to default api templates (and more?)\" (#7957) at dotnet/cli","RelatedBody":"With ASPNETCore.All in new aspnetcore csproj via the template, we will go forward expecting all of the EF Core tasks to work easily. However, the CLI tools are not included, so users will find out the hard way that they have to go back to csproj and add them in. For experienced EF Core users, it's not a big deal, but for new users it could be a PIA.\r\n\r\n## Steps to reproduce\r\nCreate an empty folder\r\nrun dotnet new API\r\ndefine a data model (some classes , a dbcontext)\r\nrun dotnet ef migrations add init\r\n\r\n## Expected  behavior\r\nBecasue CSProj has all of the needed EF Core packages via ASPNET.All package , I woud expect that it would also have the needed migration CLI Tool Reference to EFCore.Tools.DotNet.\r\n\r\nMigration should be created\r\n\r\n## Actual behavior\r\nThrows \"No executable found matching command \"dotnet-ef\"\"error\r\nThat's because CSproj does not have \r\n  `<DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" />`\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6801351620","Type":"PullRequestEvent","CreatedAt":"2017-11-02T16:32:59","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7952","RelatedDescription":"Merged pull request \"MSBuild 15.5.172\" (#7952) at dotnet/cli","RelatedBody":"Contains: https://github.com/Microsoft/msbuild/pull/2690\r\n\r\nI'm told to proceed assuming this is approved. Ideally we could get this going ASAP and insert in the same VS PR?\r\n\r\nVS PR: https://devdiv.visualstudio.com/DevDiv/MSBuild/_git/VS/pullrequest/92347"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6799906039","Type":"IssuesEvent","CreatedAt":"2017-11-02T12:07:20","Actor":"rebulanyum","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/571","RelatedDescription":"Opened issue \"System.Runtime.Serialization.Json nuget package error\" (#571) at dotnet/standard","RelatedBody":"Hello.\r\n\r\nI've started to use .NetCore version=1.0.0-preview2-003121 with Visual Studio 2015. My project.json file is below:\r\n\r\n```javascript\r\n{\r\n  \"version\": \"1.0.0-*\",\r\n  \"frameworks\": {\r\n    \"netstandard2.0\": {\r\n      \"dependencies\": {\r\n        \"System.Runtime.Serialization.Xml\": \"4.3.0\",\r\n        \"System.Runtime.Serialization.Json\": \"4.3.0\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nMy code file is below:\r\n```csharp\r\nusing System.Runtime.Serialization;\r\nusing System.Runtime.Serialization.Json;\r\n\r\nnamespace NetCoreTests\r\n{\r\n    public class Class1\r\n    {\r\n        public Class1()\r\n        {\r\n            XmlObjectSerializer ser = new DataContractJsonSerializer(typeof(int));\r\n        }\r\n    }\r\n}\r\n```\r\nAnd this is the error I get when I try to build the solution:\r\n```\r\nCS0029\tCannot implicitly convert type 'System.Runtime.Serialization.Json.DataContractJsonSerializer' to 'System.Runtime.Serialization.XmlObjectSerializer'\tNetCoreTests..NETStandard,Version=v2.0\r\n```\r\n\r\nLooks like `DataContractJsonSerializer` class in System.Runtime.Serialization.Json nuget package doesn't inherit `XmlObjectSerializer` class in System.Runtime.Serialization.Xml nuget package. I can see that in general there's no dependency between these 2 nuget packages; however, if you check 4 and later versions of .Net Framework `DataContractJsonSerializer` always inherits from `XmlObjectSerializer` because as far as I know every DataContractSerializer inherits from `XmlObjectSerializer`. Even in this repository this inheritance exists:\r\nhttps://github.com/dotnet/standard/blob/master/netstandard/ref/System.Runtime.Serialization.cs#L332\r\n\r\nCan you please fix the nuget packages?"},{"Id":"6797584525","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:43:27","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/570","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02201-04 (master)\" (#570) at dotnet/standard","RelatedBody":""},{"Id":"6796392181","Type":"PullRequestEvent","CreatedAt":"2017-11-01T18:51:16","Actor":"chcosta","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/569","RelatedDescription":"Opened pull request \"Change feed source\" (#569) at dotnet/standard","RelatedBody":"package feed version change for this branch was auto-updated via maestro (and I just merged the change).  This change is updating the default TF restore url.  I've already updated the Pipebuild definition in VSTS."},{"Id":"6796355754","Type":"PullRequestEvent","CreatedAt":"2017-11-01T18:43:38","Actor":"chcosta","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/566","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02201-02 (master)\" (#566) at dotnet/standard","RelatedBody":"<details><summary>Discarded auto-update commits (click to expand)</summary><auto-pr-discard-list>\r\n\r\n * [`861903d`](https://github.com/dotnet-maestro-bot/standard/commits/861903d76a2be458c8a734913fc8893aebbabe1a) Update BuildTools to prerelease-02201-02\r\n   * :hourglass: **OSX10.12** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/93/)\r\n   * :hourglass: **OSX10.12** Triggered. (1/1 on osx-10.12||OSX.1012.Amd64.Open) [Details]()\r\n   * :hourglass: **OSX10.12** Triggered. [Details]()\r\n   * :hourglass: **Ubuntu16.04** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/161/)\r\n   * :hourglass: **Ubuntu16.04** Triggered. [Details]()\r\n   * :hourglass: **Windows_NT** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/161/)\r\n   * :hourglass: **Windows_NT** Triggered. (2/23 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT** Triggered. (15/15 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT** Triggered. [Details]()\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=566)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/161/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n * [`3802602`](https://github.com/dotnet-maestro-bot/standard/commits/3802602454df6d4fe56dd4442abdc1cdf9a52484) Update BuildTools to prerelease-02131-05\r\n   * :hourglass: **OSX10.12** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/92/)\r\n   * :hourglass: **OSX10.12** Triggered. [Details]()\r\n   * :hourglass: **Ubuntu16.04** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/160/)\r\n   * :hourglass: **Ubuntu16.04** Triggered. (1/1 on ubuntu1604-20170925-1) [Details]()\r\n   * :hourglass: **Ubuntu16.04** Triggered. [Details]()\r\n   * :hourglass: **Windows_NT** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/160/)\r\n   * :hourglass: **Windows_NT** Triggered. [Details]()\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=566)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/92/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/160/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/160/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n * [`d5a9216`](https://github.com/dotnet-maestro-bot/standard/commits/d5a92167c720cad1503af9fe2c699392c0952f53) Update BuildTools to prerelease-02131-04\r\n   * :hourglass: **OSX10.12** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/91/)\r\n   * :hourglass: **OSX10.12** Triggered. (1/2 on osx-10.12||OSX.1012.Amd64.Open) [Details]()\r\n   * :hourglass: **OSX10.12** Triggered. [Details]()\r\n   * :hourglass: **Ubuntu16.04** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/159/)\r\n   * :hourglass: **Ubuntu16.04** Triggered. (1/1 on ubuntu1604-20170925-1) [Details]()\r\n   * :hourglass: **Ubuntu16.04** Triggered. [Details]()\r\n   * :hourglass: **Windows_NT** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/159/)\r\n   * :hourglass: **Windows_NT** Triggered. (1/5 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT** Triggered. [Details]()\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=566)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/91/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/159/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/159/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n * [`26f2768`](https://github.com/dotnet-maestro-bot/standard/commits/26f27684d62eebf2c74af0c6f037906807174825) Update BuildTools to prerelease-02131-03\r\n   * :hourglass: **OSX10.12** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/90/)\r\n   * :hourglass: **OSX10.12** Triggered. (6/11 on osx-10.12||OSX.1012.Amd64.Open) [Details]()\r\n   * :hourglass: **OSX10.12** Triggered. (8/10 on osx-10.12||OSX.1012.Amd64.Open) [Details]()\r\n   * :hourglass: **OSX10.12** Triggered. [Details]()\r\n   * :hourglass: **Ubuntu16.04** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/158/)\r\n   * :hourglass: **Ubuntu16.04** Triggered. [Details]()\r\n   * :hourglass: **Windows_NT** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/158/)\r\n   * :hourglass: **Windows_NT** Triggered. [Details]()\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=566)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/90/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/158/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/158/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n * [`2e902ad`](https://github.com/dotnet-maestro-bot/standard/commits/2e902ad81bd8d571a9efd9d7ef7a03ad0d1c720d) Update BuildTools to prerelease-02131-02\r\n   * :hourglass: **OSX10.12** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/87/)\r\n   * :hourglass: **OSX10.12** Triggered. [Details]()\r\n   * :hourglass: **Ubuntu16.04** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/155/)\r\n   * :hourglass: **Ubuntu16.04** Triggered. [Details]()\r\n   * :hourglass: **Windows_NT** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/155/)\r\n   * :hourglass: **Windows_NT** Triggered. [Details]()\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=566)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/87/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/155/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/155/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n * [`070b4a1`](https://github.com/dotnet-maestro-bot/standard/commits/070b4a1978c5f84300adeca56046cf40929b1d19) Update BuildTools to prerelease-02131-01\r\n   * :hourglass: **OSX10.12** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/85/)\r\n   * :hourglass: **OSX10.12** Triggered. [Details]()\r\n   * :hourglass: **Ubuntu16.04** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/153/)\r\n   * :hourglass: **Ubuntu16.04** Triggered. (5/5 on ubuntu1604-20170925-1) [Details]()\r\n   * :hourglass: **Ubuntu16.04** Triggered. [Details]()\r\n   * :hourglass: **Windows_NT** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/153/)\r\n   * :hourglass: **Windows_NT** Triggered. (4/11 on win2012-20171003) [Details]()\r\n   * :hourglass: **Windows_NT** Triggered. [Details]()\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/85/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/153/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/153/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/gr2m/wip-bot)\r\n\r\n</auto-pr-discard-list></details>"},{"Id":"6793993825","Type":"IssuesEvent","CreatedAt":"2017-11-01T10:10:40","Actor":"drieseng","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/568","RelatedDescription":"Opened issue \"UAP assembly takes precedence over .NET Standard 2.0\" (#568) at dotnet/standard","RelatedBody":"I maintain an OSS project that currently ships a nuget containing (amongst others) an UAP10 and .NET Standard 1.3 assembly.\r\n\r\nI'm now looking adding a .NET Standard 2.0 assembly, but while testing I noticed that in a UWP project the UAP10 assembly ends up being used instead of the .NET Standard 2.0 assembly.\r\n\r\nIs this the normal behavior? Where can I find a page describing the target framework precedence?\r\nI found [this](https://docs.microsoft.com/en-us/nuget/schema/target-frameworks#precedence), but it's hardly complete.\r\n\r\nI have configured the UWP project like this:\r\n* both target version and min version set to **Windows 10 Fall Creators Update**.\r\n* **Microsoft.NETCore.UniversalWindowsPlatform** version **6.0.1**.\r\n\r\nI'm using Visual Studio 2017 (15.4.1)."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6803846628","Type":"PullRequestEvent","CreatedAt":"2017-11-03T04:11:12","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25035","RelatedDescription":"Opened pull request \" Add back ChannelReader.ReadAsync to System.Threading.Channels\" (#25035) at dotnet/corefx","RelatedBody":"In the API review, we'd said to remove ReadAsync if we could, as we didn't like that it encouraged exceptions as control flow, due to exceptions getting thrown when attempting to read from a completed channel.\r\n\r\nHowever, removing it is problematic for a few reasons:\r\n- While for most channels its behavior can be achieved external to the channels on top of TryRead and WaitToReadAsync, that's not the case for UnbufferedChannel.  UnbufferedChannel.ReadAsync provides unique functionality that can only be achieved from within the implementation, as reads need to exist concurrently with writes in order for them to pair up.\r\n- Channels in go don't have the notion of completion, which means the ReadAsync equivalent is very common there.  Any code written in that style and trying to port to this will expect a similar function but will instead be forced to emulate it with WaitToReadAsync/TryRead.\r\n\r\nAs such, I'm putting it back as a base virtual method and an override just on UnbufferedChannel's implementation.\r\n\r\nI also added a commit to add some initial perf tests.\r\n\r\nContributes to #24823 \r\ncc: @kouvel"},{"Id":"6803772318","Type":"IssuesEvent","CreatedAt":"2017-11-03T03:34:14","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24368","RelatedDescription":"Closed issue \"CookieContainer doesn't return all relevant cookies\" (#24368) at dotnet/corefx","RelatedBody":"Adding a new non-matching cookie can prevent matching cookies from being found.\r\n\r\n```c#\r\nvar uri1 = new Uri(\"http://www.example.com/\");\r\nvar uri2 = new Uri(\"http://www.example.com/level1/\");\r\nvar uri3 = new Uri(\"http://www.example.com/level1/level2a\");\r\nvar uri4 = new Uri(\"http://www.example.com/level1/level2b\");\r\nvar cookieContainer = new CookieContainer();\r\n\r\ncookieContainer.Add(new Cookie(\"cookie1\", \"value1\", uri1.AbsolutePath, uri1.Host));\r\ncookieContainer.Add(new Cookie(\"cookie2\", \"value2\", uri2.AbsolutePath, uri2.Host));\r\ncookieContainer.Add(new Cookie(\"cookie3\", \"value3\", uri3.AbsolutePath, uri3.Host));\r\n\r\nvar beforeCount = cookieContainer.GetCookies(uri3).Count;\r\nConsole.WriteLine(beforeCount); // 3\r\n\r\ncookieContainer.Add(new Cookie(\"cookie4\", \"value4\", uri4.AbsolutePath, uri4.Host));\r\n\r\nvar afterCount = cookieContainer.GetCookies(uri3).Count;\r\nConsole.WriteLine(afterCount); // 2\r\n```"},{"Id":"6803772068","Type":"PullRequestEvent","CreatedAt":"2017-11-03T03:34:07","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24369","RelatedDescription":"Merged pull request \"Change CookieContainer to return all relevant cookies\" (#24369) at dotnet/corefx","RelatedBody":"Test case and fix for #24368.\r\n\r\nAdding a new non-matching cookie could cause matching cookies to not be returned."},{"Id":"6803686757","Type":"PullRequestEvent","CreatedAt":"2017-11-03T02:55:48","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24965","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to servicing-25902-03, servicing-25902-01, respectively (release/2.0.0)\" (#24965) at dotnet/corefx","RelatedBody":""},{"Id":"6803675565","Type":"IssuesEvent","CreatedAt":"2017-11-03T02:50:41","Actor":"AceHack","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25034","RelatedDescription":"Opened issue \"Please support a modern very high performance version of System.IO.Log\" (#25034) at dotnet/corefx","RelatedBody":"I'm looking for an very high performance version Algorithms for Recovery and Isolation Exploiting Semantics (ARIES) like .net standard/core namspace.  It does not need to be exactly ARIES but would need to be sufficent to be the start of a number of different data oriented projects that choose .NET.  I would use this and I think others would use this to start a new eco system of databases, no sql, messaging, streaming and data oriented .NET core open source projects."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6803894966","Type":"IssuesEvent","CreatedAt":"2017-11-03T04:38:02","Actor":"ufcpp","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22997","RelatedDescription":"Opened issue \"Optimization for range-based switch\" (#22997) at dotnet/roslyn","RelatedBody":"Ported from https://github.com/dotnet/csharplang/issues/198#issuecomment-340677919\r\n\r\n## TL; DR\r\n\r\nI want the following `switch` to be optimized to `O(log N)`.\r\n\r\n```cs\r\nswitch (codePoint)\r\n{\r\n\tcase uint i0 when 1536 <= i0 && i0 <= 1541:\r\n\tcase 1757:\r\n\tcase 1807:\r\n\tcase 2274:\r\n\tcase 3406:\r\n\tcase 69821:\r\n\tcase uint i1 when 70082 <= i1 && i1 <= 70083:\r\n```\r\n\r\n## Background\r\n\r\nI recently implemented [a Unicode grapheme breaking algorithm](https://github.com/ufcpp/GraphemeSplitter). In this library, [a `switch` statement](https://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeBreakPropertyCodeGeneratorTest/Benchmark.switch.cs) generated from [GraphemeBreakProperty](http://www.unicode.org/Public/10.0.0/ucd/auxiliary/GraphemeBreakProperty.txt) table has about 20 thousand lines.\r\n[Cascading `if` statement](https://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeBreakPropertyCodeGeneratorTest/Benchmark.if.cs) and [`case`-`when`](https://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeBreakPropertyCodeGeneratorTest/Benchmark.switchwhen.cs) versions of that is much shorter but 25 times slower than the `switch`.\r\n\r\n```cs\r\n// expanded cases (fast, but ugly and too long to compile)\r\n            switch (codePoint)\r\n            {\r\n                case 1536:\r\n                case 1537:\r\n                case 1538:\r\n                case 1539:\r\n                case 1540:\r\n                case 1541:\r\n                // ...\r\n\r\n// with case-when clause (simple, but much slower)\r\n            switch (codePoint)\r\n            {\r\n                case uint i0 when 1536 <= i0 && i0 <= 1541:\r\n                // ...\r\n\r\n// with range (I want, proposed as \"slicing\"?)\r\n            switch (codePoint)\r\n            {\r\n                case 1536..1541:\r\n                // ...\r\n```\r\n\r\n## Measurement\r\n\r\nI measured performance of:\r\n\r\n- [ByIf](https://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeBreakPropertyCodeGeneratorTest/Benchmark.cs#L76): [cascading (linear-search) `if`](https://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeBreakPropertyCodeGeneratorTest/Benchmark.if.cs)\r\n- [BySwitch](https://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeBreakPropertyCodeGeneratorTest/Benchmark.cs#L53): [`switch` with expanded `case`s](https://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeBreakPropertyCodeGeneratorTest/Benchmark.switch.cs)\r\n- [BySwitchWhen](https://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeBreakPropertyCodeGeneratorTest/Benchmark.cs#L64): [`switch` with `when` clauses](https://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeBreakPropertyCodeGeneratorTest/Benchmark.switchwhen.cs)\r\n- [ByBinaryIf](https://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeBreakPropertyCodeGeneratorTest/Benchmark.cs#L87): [binary-search `if](https://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeBreakPropertyCodeGeneratorTest/Benchmark.binif.cs)\r\n- [ByBinarySearch](https://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeBreakPropertyCodeGeneratorTest/Benchmark.cs#L42): [binary-search](https://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeBreakPropertyCodeGeneratorTest/Benchmark.search.cs#L17) with [array](https://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeBreakPropertyCodeGeneratorTest/Benchmark.items.cs)\r\n\r\n(My PC is Core i7-4790 3.60GHz.)\r\n\r\nA result:\r\n\r\n|         Method |         Mean |     Error |    StdDev |\r\n| --------------- |-------------:|----------:|----------:|\r\n| ByBinarySearch |     4.642 ms | 0.0468 ms | 0.0415 ms |\r\n|       BySwitch |     3.825 ms | 0.0473 ms | 0.0442 ms |\r\n|   BySwitchWhen |   115.310 ms | 2.7970 ms | 2.9928 ms |\r\n|           ByIf |   142.658 ms | 1.3744 ms | 1.1477 ms |\r\n|     ByBinaryIf |     2.502 ms | 0.0147 ms | 0.0137 ms |\r\n\r\n## FYR\r\n\r\n### limit number\r\n\r\nMeasurement results with [limiting number](https://github.com/ufcpp/GraphemeSplitter/blob/e53ae9195001c98ffb0d2cbb900410e71dcc6e5a/GraphemeBreakPropertyCodeGenerator/Program.cs#L42):\r\n\r\n20 lines:\r\n\r\n|        Method |     Mean |     Error |    StdDev |\r\n| --------------- |---------:|----------:|----------:|\r\n| ByBinarySearch | 2.363 ms | 0.0266 ms | 0.0222 ms |\r\n|       BySwitch | 1.262 ms | 0.0105 ms | 0.0098 ms |\r\n|   BySwitchWhen | 1.809 ms | 0.0106 ms | 0.0099 ms |\r\n|           ByIf | 1.807 ms | 0.0070 ms | 0.0062 ms |\r\n|     ByBinaryIf | 1.398 ms | 0.0075 ms | 0.0070 ms |\r\n\r\n50 lines:\r\n\r\n|         Method |     Mean |     Error |    StdDev |\r\n| --------------- |---------:|----------:|----------:|\r\n| ByBinarySearch | 3.030 ms | 0.0224 ms | 0.0210 ms |\r\n|       BySwitch | 1.333 ms | 0.0151 ms | 0.0141 ms |\r\n|   BySwitchWhen | 3.417 ms | 0.0283 ms | 0.0265 ms |\r\n|           ByIf | 3.763 ms | 0.0204 ms | 0.0191 ms |\r\n|     ByBinaryIf | 1.916 ms | 0.0109 ms | 0.0091 ms |\r\n\r\n100 lines:\r\n\r\n|         Method |     Mean |     Error |    StdDev |\r\n| --------------- |---------:|----------:|----------:|\r\n| ByBinarySearch | 3.216 ms | 0.0135 ms | 0.0120 ms |\r\n|       BySwitch | 1.416 ms | 0.0089 ms | 0.0083 ms |\r\n|   BySwitchWhen | 5.030 ms | 0.0454 ms | 0.0425 ms |\r\n|           ByIf | 6.065 ms | 0.0530 ms | 0.0496 ms |\r\n|     ByBinaryIf | 1.960 ms | 0.0158 ms | 0.0148 ms |\r\n\r\n200 lines:\r\n\r\n|         Method |      Mean |     Error |    StdDev |\r\n| --------------- |----------:|----------:|----------:|\r\n| ByBinarySearch |  3.446 ms | 0.0186 ms | 0.0174 ms |\r\n|       BySwitch |  1.483 ms | 0.0228 ms | 0.0214 ms |\r\n|   BySwitchWhen | 10.176 ms | 0.0878 ms | 0.0733 ms |\r\n|           ByIf | 12.209 ms | 0.1345 ms | 0.1258 ms |\r\n|     ByBinaryIf |  2.029 ms | 0.0228 ms | 0.0202 ms |\r\n\r\n500 lines:\r\n\r\n|         Method |      Mean |     Error |    StdDev |\r\n| --------------- |----------:|----------:|----------:|\r\n| ByBinarySearch |  3.636 ms | 0.0256 ms | 0.0240 ms |\r\n|       BySwitch |  1.518 ms | 0.0080 ms | 0.0075 ms |\r\n|   BySwitchWhen | 30.827 ms | 0.1879 ms | 0.1757 ms |\r\n|           ByIf | 33.477 ms | 0.2768 ms | 0.2590 ms |\r\n|     ByBinaryIf |  2.088 ms | 0.0136 ms | 0.0127 ms |\r\n\r\n1000 lines:\r\n\r\n|         Method |      Mean |     Error |    StdDev |\r\n|--------------- |----------:|----------:|----------:|\r\n| ByBinarySearch |  3.944 ms | 0.0433 ms | 0.0405 ms |\r\n|       BySwitch |  3.535 ms | 0.0393 ms | 0.0368 ms |\r\n|   BySwitchWhen | 36.672 ms | 0.2641 ms | 0.2205 ms |\r\n|           ByIf | 69.189 ms | 0.2750 ms | 0.2572 ms |\r\n|     ByBinaryIf |  2.316 ms | 0.0217 ms | 0.0203 ms |\r\n\r\n### executable size\r\n\r\nI also measured executable sizes.\r\n\r\n[build script](https://github.com/ufcpp/GraphemeSplitter/blob/d8ec77ea42c3d9c8a5d45b656830bcc7aca7a81c/GraphemeBreakPropertyCodeGeneratorTest/compile.ps1)\r\n\r\nDebug (`/o-`) build:\r\n\r\nName | Size (bytes)              \r\n------ | ----              \r\n BinarySearchIf.dll |  74240 \r\nLinearIf.dll      | 54272\r\n Switch.dll        | 140800\r\n SwitchWhen.dll    |  48128\r\n\r\nRelease (`/o+`) build:\r\n\r\nName | Size (bytes)              \r\n------ | ----              \r\n BinarySearchIf.dll | 31232 \r\n LinearIf.dll      |  24064 \r\n Switch.dll        | 140800 \r\n SwitchWhen.dll    |  38912 \r\n\r\n### compilation time\r\n\r\nIn addition, it requires 50 seconds to compile [the 20 thousand-line switch-case](https://github.com/ufcpp/GraphemeSplitter/blob/master/GraphemeBreakPropertyCodeGeneratorTest/Benchmark.switch.cs).\r\n\r\n"},{"Id":"6803887801","Type":"PullRequestEvent","CreatedAt":"2017-11-03T04:33:55","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22992","RelatedDescription":"Merged pull request \"Merge other branches into features/vs-for-mac-packages\" (#22992) at dotnet/roslyn","RelatedBody":"Catching this up to the content of features/vs-for-mac-refactorings and dev15.5x."},{"Id":"6803580583","Type":"IssuesEvent","CreatedAt":"2017-11-03T02:05:58","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22996","RelatedDescription":"Opened issue \"Update to new version of SQLLite\" (#22996) at dotnet/roslyn","RelatedBody":"The version to switch to 3.19.3 https://www.nuget.org/packages/SQLitePCLRaw.bundle_green/1.1.8 \r\n"},{"Id":"6803347503","Type":"PullRequestEvent","CreatedAt":"2017-11-03T00:20:51","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22842","RelatedDescription":"Merged pull request \"Variable declaration refactor\" (#22842) at dotnet/roslyn","RelatedBody":"This is the variable declaration refactor discussed over email. The following changes occurred:\r\n\r\n* IVariableDeclarationStatement -> IVariableDeclarationGroup\r\n* IVariableDeclaration is now a base interface for ISingleVariableDeclaration and IMultiVariableDeclaration. IVariableDeclaration just has an initializer.\r\n* ISingleVariableDeclaration was introduced. It has a single symbol, in addition to the initializer. This is used in C# for all variable declarations, and in VB for the individual variable declarations as part of a multi declaration.\r\n* IMultiVariableDeclaration was introduced. It has a list of ISingleVariableDeclarations which are the variable declarations that make up the top-level declaration.\r\n\r\nIn practice, this means the following:\r\n\r\nIn C#, `var x = 1` corresponds to an IVariableDeclarationGroup with 1 ISingleDeclaration. C# does not make use of IMultiVariableDeclaration.\r\n\r\nVB is a bit more complicated. `Dim x As Integer = 1` corresponds to:\r\n```\r\nIVariableDeclarationGroup\r\n    IMultiVariableDeclaration\r\n        ISingleVariableDeclaration\r\n            Symbol: x\r\n            Initializer: Nothing\r\n        Initializer: ILiteral\r\n```\r\nThe Initializer of an ISingleVariableDeclaration is only ever used for array bounds. While it would be possible to simplify this scenario for the single variable with single initializer, I felt that consistency across the board would be a better option.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/22362."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6803949800","Type":"IssuesEvent","CreatedAt":"2017-11-03T05:10:05","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/4863","RelatedDescription":"Opened issue \"String.get_Length returns 0\" (#4863) at dotnet/corert","RelatedBody":"String.get_Length started returning 0 after #4808 , which breaks printing strings and might indicate other problems. It looks like pinning a string and printing it character-by-character still works, so it could be an issue in the frozen string's length or in reading instance fields."},{"Id":"6803739907","Type":"IssuesEvent","CreatedAt":"2017-11-03T03:19:54","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4512","RelatedDescription":"Closed issue \"Implement newobj opcode using malloc\" (#4512) at dotnet/corert","RelatedBody":"Implement the newobj opcode, which both allocates memory for a new object and calls its constructor. While we'll eventually need to hook this up to the garbage collector, if we start by using malloc, it will allow much more code to run. Newobj should be added as a new case to\r\nhttps://github.com/dotnet/corert/blob/e6d0a9398e3d8fc83d047cccda302ed13610f190/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L528"},{"Id":"6803254895","Type":"IssuesEvent","CreatedAt":"2017-11-02T23:45:48","Actor":"shrah","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4768","RelatedDescription":"Closed issue \"[.NET Native] Error ILT0025 when compiling UWP app targeting SDK16299 and NETCore.UWP 6.0.1\" (#4768) at dotnet/corert","RelatedBody":"Hello,\r\nI've updated my UWP app to target the new SDK 16299 (both minimum and target version) and updated the .NETCore.UniversalWindowsPlatform NuGet package to version 6.0.1, and according to the description, this new version also includes an updated .NET Native compiler.\r\n\r\nThe issue is that I can no longer compile my app in Release mode, I get the following error:\r\n\r\n> ILT0025: inconsistent type forwarders were found for type `System.TimeZoneNotFoundException`\r\n\r\nThis is happening for other developers too.\r\nI can't downgrade to the previous NETCore.UWP package as I'm referencing some .NET Standard 2.0 libraries from my application, so I actually need the new .NET Core version.\r\n\r\nI've also sent an email and a repro to the .NET Native team last week but so far they haven't replied yet.\r\n\r\nI'm at a loss here, I haven't been able to push my app update to the Store for over two weeks now because of this issue.\r\nIs this a known bug, or is there a workaround to fix that?\r\n\r\nThank you for your help!\r\nSergio"},{"Id":"6802410898","Type":"PullRequestEvent","CreatedAt":"2017-11-02T20:06:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4861","RelatedDescription":"Merged pull request \"Port https://github.com/dotnet/coreclr/pull/14822\" (#4861) at dotnet/corert","RelatedBody":""},{"Id":"6802406046","Type":"PullRequestEvent","CreatedAt":"2017-11-02T20:05:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4862","RelatedDescription":"Merged pull request \"[ILVerify] Add net46 as additional target framework\" (#4862) at dotnet/corert","RelatedBody":"This adds `net46` as an additional target framework to ILVerify, as suggested in https://github.com/dotnet/roslyn/issues/22872."},{"Id":"6801743155","Type":"PullRequestEvent","CreatedAt":"2017-11-02T17:46:56","Actor":"ArztSamuel","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4862","RelatedDescription":"Opened pull request \"[ILVerify] Add net46 as additional target framework\" (#4862) at dotnet/corert","RelatedBody":"This adds `net46` as an additional target framework to ILVerify, as suggested in https://github.com/dotnet/roslyn/issues/22872."},{"Id":"6801700333","Type":"PullRequestEvent","CreatedAt":"2017-11-02T17:38:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4861","RelatedDescription":"Opened pull request \"Port https://github.com/dotnet/coreclr/pull/14822\" (#4861) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6802147263","Type":"PullRequestEvent","CreatedAt":"2017-11-02T19:08:29","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1710","RelatedDescription":"Opened pull request \"Don't exclude \"packages\" folder from default globs\" (#1710) at dotnet/sdk","RelatedBody":"Fixes #1708 \r\n\r\n"},{"Id":"6798852242","Type":"IssuesEvent","CreatedAt":"2017-11-02T08:03:49","Actor":"ankurjasoria","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1709","RelatedDescription":"Opened issue \"Want to migrate on dnx to cli with entity framework core\" (#1709) at dotnet/sdk","RelatedBody":"Hi Team,\r\n\r\nI have followed below url as reference\r\nhttps://github.com/dotnet/cli/blob/master/Documentation/ProjectJsonToCSProj.md\r\n\r\nand found below issue with migrate command\r\nError :\r\nPS C:\\yoyo-center-management-system-master\\CenterManagementSystem\\DEV\\src\\CenterManagementSystem.Platform> dotnet migrate\r\nNo executable found matching command \"dotnet-migrate\"\r\n\r\nI have created separate console application with the use of below cli command\r\n\r\n    dotnet new\r\n    dotnet restore\r\n    dotnet build\r\n    dotnet run\r\n    All command working fine but unable to proceed further like What is my next step ?\r\n    I am sharing you my powershall command and status as below\r\n\r\nPS C:\\test3\\myApp> dotnet build\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nmyApp -> C:\\test3\\myApp\\bin\\Debug\\netcoreapp2.0\\myApp.dll\r\n\r\nBuild succeeded.\r\n0 Warning(s)\r\n0 Error(s)\r\n\r\nTime Elapsed 00:00:01.02\r\nPS C:\\test3\\myApp> dotnet run\r\nHello World!\r\nPS C:\\test3\\myApp> dotnet migrate\r\nNo project.json file found in 'C:\\test3\\myApp'.\r\nMigration failed.\r\nPS C:\\test3\\myApp>\r\n\r\nPlease suggest me for same ?"},{"Id":"6797115451","Type":"IssuesEvent","CreatedAt":"2017-11-01T21:28:19","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1697","RelatedDescription":"Closed issue \"How to config *.runtimeconfig.json file, to let the .net standard program work fine with multiple versions SDKs.\" (#1697) at dotnet/sdk","RelatedBody":"I build a .net standard runnable program. The generated *.runtimeconfig.json file looks like follows:{\r\n    \"runtimeOptions\": {\r\n      \"framework\": {\r\n        \"name\": \"Microsoft.NETCore.App\",\r\n        \"version\": \"1.0.4\"\r\n      }\r\n    }\r\n  }\r\nIt works fine with runtime 1.0.4. However, it couldn't work with runtime 2.0.0. If I modify above version \"1.0.4\" to \"2.0.0\", the issue is solved.\r\n\r\nThe question is how to config the file *.runtimeconfig.json, to let it work fine with any SDK version."},{"Id":"6796598527","Type":"PullRequestEvent","CreatedAt":"2017-11-01T19:34:14","Actor":"tmat","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1706","RelatedDescription":"Merged pull request \"Merge release/15.5 to master\" (#1706) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171101-070039\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171101-070039 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6795865942","Type":"PullRequestEvent","CreatedAt":"2017-11-01T17:04:20","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1704","RelatedDescription":"Closed pull request \"Merge release/15.5 to master\" (#1704) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171031-070036\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171031-070036 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6795244534","Type":"IssuesEvent","CreatedAt":"2017-11-01T15:06:45","Actor":"ridomin","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1708","RelatedDescription":"Opened issue \"Sources under a folder named \"Packages\"  are ignored on build\" (#1708) at dotnet/sdk","RelatedBody":".NET Command Line Tools (15.5.0-preview-007044)\r\n\r\nAll source files and folders are included in the build, however, a folder named \"Packages\" is excluded. I've verified this behavior in CLI and VS 15.5 Preview.\r\n\r\nLooks like a regression from previous versions (checked in 15.4).\r\n\r\nRepro Steps.\r\n```\r\ndotnet new classlib\r\nmkdir Packages\r\necho 'bad c# file' > Packages/Class1.cs\r\ndotnet build\r\n```\r\n\r\nExpected. Build failed because Class1.cs is not a valid C# file\r\nObserved. Build succeed because Packages/Class1 is excluded from the build\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"926165116084658176","CreatedAt":"2017-11-02T19:12:25+00:00","UserScreenname":"dotnet","Text":"Great post and resources by @cesardelatorre: Modernize existing .NET apps with Windows Containers and #Azure https://t.co/c8HL8dfH4d #dotnet","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":51,"FavoriteCount":31,"RawContent":null},{"Id":"925135073921310720","CreatedAt":"2017-10-30T22:59:24+00:00","UserScreenname":"dotnet","Text":"Experience real time test discovery in Test Explorer https://t.co/niKJvslM5p #visualstudio","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":60,"FavoriteCount":38,"RawContent":null},{"Id":"923592986562142208","CreatedAt":"2017-10-26T16:51:42+00:00","UserScreenname":"dotnet","Text":"Wish you could run the code sample you read in a book? You can now with Azure Notebooks. https://t.co/evx8HPzzqe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":130,"FavoriteCount":78,"RawContent":null},{"Id":"923344981602942977","CreatedAt":"2017-10-26T00:26:13+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework images now support Windows Server 1709 https://t.co/enC2cjj2ds /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":22,"RawContent":null},{"Id":"923037554265296896","CreatedAt":"2017-10-25T04:04:36+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework latest tag updated to 4.7.1 https://t.co/NuV11juPrm /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":23,"RawContent":null},{"Id":"922503653402882049","CreatedAt":"2017-10-23T16:43:04+00:00","UserScreenname":"dotnet","Text":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018  https://t.co/TPKfGvwNLH /cc @intel","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":96,"FavoriteCount":56,"RawContent":null},{"Id":"921143443912474624","CreatedAt":"2017-10-19T22:38:05+00:00","UserScreenname":"dotnet","Text":"New .NET Rocks podcast with @coolcsh on understanding #dotnet standard &amp; future of #dotnetcore… https://t.co/b8BCeZKEqz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":20,"RawContent":null},{"Id":"920400974321147904","CreatedAt":"2017-10-17T21:27:47+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.1 https://t.co/Vu3bilF8bZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":387,"FavoriteCount":347,"RawContent":null}]}},"RunOn":"2017-11-03T05:30:25.7756814Z","RunDurationInMilliseconds":8774}