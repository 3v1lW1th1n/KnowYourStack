{"Data":{"GitHub":{"Issues":[{"Id":"371811471","IsPullRequest":false,"CreatedAt":"2018-10-19T05:24:40","Actor":"justinormont","Number":"1312","RawContent":null,"Title":"Hyperparameter suggestions in Visual Studio","State":"open","Body":"Is it possible to have Visual Studio's IntelliSense/HelpText for each learner's hyperparameters inform the user of the `max` (absolute limits) and `good` (generally useful) ranges for the hyperparameter?\r\n\r\nCurrently we show nothing: _(though we can show the added text)_\r\n> > >    ![image](https://user-images.githubusercontent.com/4080826/47199065-7c26c880-d324-11e8-80c2-13f05586d68a.png)\r\n\r\n\r\n\r\nWe do note the good ranges in the code for each component: \r\nhttps://github.com/dotnet/machinelearning/blob/b270b4d6b774a37e08321ba766aa8c15e81dfe77/src/Microsoft.ML.FastTree/FastTreeArguments.cs#L375\r\n\r\nWhy\r\n----\r\nShowing the `max` and `good` ranges/values for hyperparameters encourages the users to explore the ranges. While our defaults are good (honed on many datasets), the user will see gains on any particular dataset by exploring other values.\r\n\r\nHow\r\n----\r\nOne way to accomplish this is generating the XML param comments from the attributes automatically, eg: `/// <param name=\"l2Const\">The L2 regularization hyperparameter. A useful range is 0.025fâ€“0.4f</param>`. Another option is hand maintaining both locations and some sort of static analysis of our code that checks that the attribute and the XML param comments match, and gives a build error if they didn't.\r\n\r\nThanks to @eerhardt for ideas on how to accomplish.","Url":"https://github.com/dotnet/machinelearning/issues/1312","RelatedDescription":"Open issue \"Hyperparameter suggestions in Visual Studio\" (#1312)"},{"Id":"371798688","IsPullRequest":true,"CreatedAt":"2018-10-19T04:02:02","Actor":"nandaleite","Number":"1311","RawContent":null,"Title":"Fix the formatting of the XML documentation for the OnnxConverter","State":"open","Body":"Issue #1260\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1311","RelatedDescription":"Open PR \"Fix the formatting of the XML documentation for the OnnxConverter\" (#1311)"},{"Id":"371784003","IsPullRequest":true,"CreatedAt":"2018-10-19T02:35:02","Actor":"jignparm","Number":"1310","RawContent":null,"Title":"Add GC.KeepAlive() for tensor variables","State":"open","Body":"Adding a GC.KeepAlive() to prevent compiler from optimizing and prematurely GC'ing tensors. This is related to issue #1228 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1310","RelatedDescription":"Open PR \"Add GC.KeepAlive() for tensor variables\" (#1310)"},{"Id":"371780804","IsPullRequest":true,"CreatedAt":"2018-10-19T02:16:16","Actor":"artidoro","Number":"1309","RawContent":null,"Title":"WIP: Introducing PR verification x86 CI build","State":"open","Body":"Fixes #1295.\r\n\r\nThis PR adds a PR verification build for x86. Starting an x86 build is not too difficult, however running tests requires downloading an x86 .NET Core SDK\r\n\r\nMain contributions:\r\n- runs debug and release x86 build \r\n- depending on the argument -buildArch=x86 it will download the .NET Core SDK for x86 or for x64 to be able to run the tests\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1309","RelatedDescription":"Open PR \"WIP: Introducing PR verification x86 CI build\" (#1309)"},{"Id":"371771635","IsPullRequest":false,"CreatedAt":"2018-10-19T01:21:23","Actor":"sharpwood","Number":"1308","RawContent":null,"Title":"LightGBM 2.1.2.2 can not be installed on .net 4.6 ,LightGBM 2.2.1.1 can be installed ,but it does not work in ML.Net","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/1308","RelatedDescription":"Open issue \"LightGBM 2.1.2.2 can not be installed on .net 4.6 ,LightGBM 2.2.1.1 can be installed ,but it does not work in ML.Net\" (#1308)"},{"Id":"371746492","IsPullRequest":false,"CreatedAt":"2018-10-18T23:04:14","Actor":"Ivanidzo4ka","Number":"1307","RawContent":null,"Title":"Binary fast tree doesn't return tree predictor in pigsty","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/a285f8d5db15cd8bf77f3c03763bce16642f902b/src/Microsoft.ML.FastTree/FastTreeStatic.cs#L93\r\nIt returns IPredictorWithFeatureWeights<float> which I found weird since I expect tree predictor from fast tree.\r\nRegression and Multiclass returns FastTreeRegressionPredictor and FastTreeRankingPredictor which is right.","Url":"https://github.com/dotnet/machinelearning/issues/1307","RelatedDescription":"Open issue \"Binary fast tree doesn't return tree predictor in pigsty\" (#1307)"},{"Id":"371729983","IsPullRequest":true,"CreatedAt":"2018-10-18T21:57:23","Actor":"artidoro","Number":"1306","RawContent":null,"Title":"Introducing official x86 CI build","State":"open","Body":"Fixes #1295.\r\n\r\nAdding x86 official build. I tested the official build directly on VSTS and it succeeded. I also created a x86 App locally and tested that the nuget packages published to VSTS by the build worked.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1306","RelatedDescription":"Open PR \"Introducing official x86 CI build\" (#1306)"},{"Id":"371721476","IsPullRequest":true,"CreatedAt":"2018-10-18T21:29:12","Actor":"yaeldekel","Number":"1305","RawContent":null,"Title":"Change IModelCombiner to not be generic, and add unit tests","State":"open","Body":"Fixes #1304. ","Url":"https://github.com/dotnet/machinelearning/pull/1305","RelatedDescription":"Open PR \"Change IModelCombiner to not be generic, and add unit tests\" (#1305)"},{"Id":"371721158","IsPullRequest":false,"CreatedAt":"2018-10-18T21:28:14","Actor":"yaeldekel","Number":"1304","RawContent":null,"Title":"Need a non-generic version of the IModelCombiner interface","State":"open","Body":"In order to be able to define arguments that are factories of \"IModelCombiner\" where any kind of IModelCombiner can be specified, we need a non-generic version of this interface. ","Url":"https://github.com/dotnet/machinelearning/issues/1304","RelatedDescription":"Open issue \"Need a non-generic version of the IModelCombiner interface\" (#1304)"},{"Id":"371294227","IsPullRequest":true,"CreatedAt":"2018-10-18T20:41:45","Actor":"eerhardt","Number":"1290","RawContent":null,"Title":"Loading old model files is broken.","State":"closed","Body":"Older model files are failing to load due to FpTail checks in the model validation code. These checks weren't happening in the old model loading code, and they now fail on some older models.\r\n\r\nFix this by returning early when it is an older model, and there are no strings. This preserves the old behavior.\r\n\r\nFix #1289\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1290","RelatedDescription":"Closed or merged PR \"Loading old model files is broken.\" (#1290)"},{"Id":"371293099","IsPullRequest":false,"CreatedAt":"2018-10-18T20:41:45","Actor":"eerhardt","Number":"1289","RawContent":null,"Title":"Exception loading an older model file with no strings ","State":"closed","Body":"When I changed our model format for the ComponentCatalog changes (#970), I refactored some model loading code incorrectly. There are some existing models that are breaking our validation checks:\r\n\r\nThe old code was doing:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/655c2e29421f5c44133ed6515374e48cf42868a2/src/Microsoft.ML.Data/Model/ModelHeader.cs#L419-L424\r\n\r\nThe new code now does:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/a44e131b8010024d024197db4cc22a546c554fdf/src/Microsoft.ML.Data/Model/ModelHeader.cs#L482-L486\r\n\r\nNotice that it doesn't return early in the new code. Lower in the method there are checks here:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/a44e131b8010024d024197db4cc22a546c554fdf/src/Microsoft.ML.Data/Model/ModelHeader.cs#L538-L541\r\n\r\nThese checks are now failing with older model files. They were never run in the old code when there were no strings, so we shouldn't be running them anymore when reading older model files.\r\n\r\n/cc @yaeldekel ","Url":"https://github.com/dotnet/machinelearning/issues/1289","RelatedDescription":"Closed issue \"Exception loading an older model file with no strings \" (#1289)"},{"Id":"371698372","IsPullRequest":true,"CreatedAt":"2018-10-18T20:26:18","Actor":"TomFinley","Number":"1303","RawContent":null,"Title":"Hash estimator/transformer applicable to all numerics and bool","State":"open","Body":"Fixes #1031. Hashes all numeric types, and boolean types. \"Time\" types are omitted, because I don't anticipate great desire for them, but they could potentially be more easily added.\r\n\r\nI engaged in some trickery around the JIT's handlings of generics and value types in order to maintain efficiency of the previous \"explicit\" implementation. Please see the comment starting line 526 in the last commit (as of the time of writing) for more info.\r\n\r\nThere are to start three commits, that are deliberately structured in a way so as to be useful:\r\n\r\n1. Introduction of benchmarks,\r\n2. Simplification of code,\r\n3. Expanding of types.\r\n\r\nThe benchmarking is somewhat interesting. The variation between different runs of the benchmarks was all over the place with the old code (for some reason), but not on the new code for some reason. I'm not quite sure why. Anyway these were the first runs from each.\r\n\r\n## Before\r\n\r\n|            Method |        Mean |      Error |     StdDev |\r\n| ----------------- |------------ |----------- |----------- |\r\n|  HashScalarString |  4,738.1 us | 146.250 us | 168.421 us |\r\n|   HashScalarFloat |  1,172.0 us |  30.922 us |  34.370 us |\r\n|  HashScalarDouble |  1,535.2 us |  28.194 us |  26.373 us |\r\n|     HashScalarKey |    965.2 us |  18.733 us |  18.398 us |\r\n|  HashVectorString | 28,295.6 us | 554.444 us | 569.373 us |\r\n|   HashVectorFloat | 10,442.6 us |   6.021 us |   5.338 us |\r\n|  HashVectorDouble | 12,501.8 us | 240.539 us | 267.359 us |\r\n|     HashVectorKey |  9,839.5 us | 270.684 us | 265.848 us |\r\n\r\n## After\r\n\r\n|            Method |        Mean |      Error |     StdDev |\r\n| -----------------:|------------:|-----------:|-----------:|\r\n|  HashScalarString |  4,769.2 us | 125.379 us | 144.387 us |\r\n|   HashScalarFloat |  1,094.3 us |   4.808 us |   3.754 us |\r\n|  HashScalarDouble |  1,529.9 us |  33.315 us |  29.533 us |\r\n|     HashScalarKey |    960.3 us |  17.989 us |  19.248 us |\r\n|  HashVectorString | 28,513.9 us | 520.837 us | 487.191 us |\r\n|   HashVectorFloat |  9,932.0 us | 231.398 us | 257.198 us |\r\n|  HashVectorDouble | 12,264.1 us | 286.483 us | 329.915 us |\r\n|     HashVectorKey |  9,118.8 us | 178.890 us | 167.334 us || \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1303","RelatedDescription":"Open PR \"Hash estimator/transformer applicable to all numerics and bool\" (#1303)"},{"Id":"371672308","IsPullRequest":false,"CreatedAt":"2018-10-18T19:38:39","Actor":"Anipik","Number":"1302","RawContent":null,"Title":"Functions needed to be changed to use our new algorithm for aligned and unaligned loads","State":"closed","Body":"Currently these functions are just using Unaligned Loads, we can make them after by aligning the data and doing aligned loads.\r\n\r\n- [ ] AddScalerU\r\n- [ ] ScaleSrcU\r\n- [ ] AddScaleU\r\n- [ ] ScaleAddU\r\n- [ ] AddU\r\n- [ ] AddScaleCopyU\r\n- [ ] AddSU\r\n- [ ]  MulElementWiseU\r\n- [ ] SumU\r\n- [ ] SumSqU\r\n- [ ] SumSqDiffU\r\n- [ ] SumAbsU\r\n- [ ] SumAbsDiffU\r\n- [ ] MaxAbsU\r\n- [ ] MaxAbsDiffU\r\n- [ ] DotU\r\n- [ ] DotSU\r\n- [ ] Dist2\r\n- [ ] SdcaL1UpdateU\r\n- [ ] SdcaL1UpdateSU\r\n\r\nReference for algorithm https://github.com/dotnet/machinelearning/pull/1143\r\n\r\ncc @danmosemsft @tannergooding @eerhardt ","Url":"https://github.com/dotnet/machinelearning/issues/1302","RelatedDescription":"Closed issue \"Functions needed to be changed to use our new algorithm for aligned and unaligned loads\" (#1302)"},{"Id":"371635536","IsPullRequest":true,"CreatedAt":"2018-10-18T17:35:00","Actor":"yaeldekel","Number":"1301","RawContent":null,"Title":"Fix loading of old ConcatTransform models","State":"open","Body":"Fixes #1300 .","Url":"https://github.com/dotnet/machinelearning/pull/1301","RelatedDescription":"Open PR \"Fix loading of old ConcatTransform models\" (#1301)"},{"Id":"371635121","IsPullRequest":false,"CreatedAt":"2018-10-18T17:33:45","Actor":"yaeldekel","Number":"1300","RawContent":null,"Title":"Bug in ConcatTransform legacy loading","State":"open","Body":"When loading a ConcatTransform with an older version, we need to read an additional int, for sizeof(float) that used to be serialized with the transform.","Url":"https://github.com/dotnet/machinelearning/issues/1300","RelatedDescription":"Open issue \"Bug in ConcatTransform legacy loading\" (#1300)"},{"Id":"371633162","IsPullRequest":true,"CreatedAt":"2018-10-18T17:28:04","Actor":"yaeldekel","Number":"1299","RawContent":null,"Title":"Fix null reference exception in InternalSchemaDefinition and add unit tests","State":"open","Body":"Fixes #1298 , and adds some unit tests to test this case.","Url":"https://github.com/dotnet/machinelearning/pull/1299","RelatedDescription":"Open PR \"Fix null reference exception in InternalSchemaDefinition and add unit tests\" (#1299)"},{"Id":"371632719","IsPullRequest":false,"CreatedAt":"2018-10-18T17:26:50","Actor":"yaeldekel","Number":"1298","RawContent":null,"Title":"Null reference exception in InternalSchemaDefinition.cs","State":"open","Body":"There is a Create() method in line 217 of InternalSchemaDefinition.cs that calls AssertValue on its userSchemaDefinition parameter, but its value can actually be null.\r\n ","Url":"https://github.com/dotnet/machinelearning/issues/1298","RelatedDescription":"Open issue \"Null reference exception in InternalSchemaDefinition.cs\" (#1298)"},{"Id":"371608223","IsPullRequest":false,"CreatedAt":"2018-10-18T16:17:34","Actor":"markusweimer","Number":"1297","RawContent":null,"Title":"Add NOTICE file","State":"open","Body":"We are consuming a large block of code from another project in #1263. Its license requires us to keep it available in all binary and source distributions of it. The common way to do this is to have a `NOTICE` file in the root of the source repo, and in the NuGets produced. We should add the NOTICE file in that way, and update it as part of #1263 if we indeed end up copying that code into our repo.","Url":"https://github.com/dotnet/machinelearning/issues/1297","RelatedDescription":"Open issue \"Add NOTICE file\" (#1297)"},{"Id":"371438119","IsPullRequest":true,"CreatedAt":"2018-10-18T09:24:43","Actor":"Trojan2498","Number":"1296","RawContent":null,"Title":"Update CONTRIBUTING.md","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1296","RelatedDescription":"Open PR \"Update CONTRIBUTING.md\" (#1296)"},{"Id":"371333640","IsPullRequest":false,"CreatedAt":"2018-10-18T02:12:29","Actor":"artidoro","Number":"1295","RawContent":null,"Title":"Add x86 CI builds","State":"open","Body":"Currently, there is no CI build for x86. We should add Debug and Release builds for x86, and make sure that all tests succeed. This should involve changing the phase-template.yml.","Url":"https://github.com/dotnet/machinelearning/issues/1295","RelatedDescription":"Open issue \"Add x86 CI builds\" (#1295)"},{"Id":"371328436","IsPullRequest":true,"CreatedAt":"2018-10-18T01:41:56","Actor":"Ivanidzo4ka","Number":"1294","RawContent":null,"Title":"Convert CharTokenize to estimator","State":"open","Body":"Convert CharTokenize to estimator","Url":"https://github.com/dotnet/machinelearning/pull/1294","RelatedDescription":"Open PR \"Convert CharTokenize to estimator\" (#1294)"},{"Id":"371317165","IsPullRequest":true,"CreatedAt":"2018-10-18T00:35:18","Actor":"Zruty0","Number":"1293","RawContent":null,"Title":"PredictionFunction doesn't reuse output","State":"open","Body":"Fixes #1279 \r\nFixes #1138 \r\n\r\nPredict call no longer reuses the output object.\r\nTo retain the capability for efficient prediction, I added another overload to Predict which takes the output object as a parameter.","Url":"https://github.com/dotnet/machinelearning/pull/1293","RelatedDescription":"Open PR \"PredictionFunction doesn't reuse output\" (#1293)"},{"Id":"371316183","IsPullRequest":true,"CreatedAt":"2018-10-18T00:29:32","Actor":"helloguo","Number":"1292","RawContent":null,"Title":"Use FMA instruction in CpuMath for .NET Core 3","State":"open","Body":"Fix https://github.com/dotnet/machinelearning/issues/832\r\n\r\nTest with `..\\..\\Tools\\dotnetcli\\dotnet.exe run -c Release-Intrinsics --allCategories=Fma`\r\n\r\nBefore:\r\n\r\n```\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.11.1, OS=Windows 10.0.17758\r\nIntel Core i9-7980XE CPU 2.60GHz (Max: 2.59GHz), 1 CPU, 36 logical and 18 physical cores\r\n.NET Core SDK=3.0.100-alpha1-009642\r\n  [Host] : .NET Core 3.0.0-preview1-27004-04 (CoreCLR 4.6.27003.04, CoreFX 4.6.27003.02), 64bit RyuJIT\r\n\r\nToolchain=InProcessToolchain  \r\n\r\n         Method |       Mean |      Error |     StdDev |     Median |\r\n--------------- |-----------:|-----------:|-----------:|-----------:|\r\n      AddScaleU |   271.8 us |  0.3131 us |  0.2614 us |   271.9 us |\r\n     AddScaleSU | 2,890.7 us | 35.0849 us | 32.8185 us | 2,896.3 us |\r\n  AddScaleCopyU |   396.8 us |  2.2882 us |  2.1404 us |   395.7 us |\r\n         SumSqU |   195.7 us |  0.3503 us |  0.3277 us |   195.6 us |\r\n     SumSqDiffU |   194.3 us |  0.3320 us |  0.2592 us |   194.2 us |\r\n           DotU |   268.2 us |  7.1498 us | 20.7429 us |   274.9 us |\r\n          DotSU | 2,355.5 us | 47.0184 us | 46.1783 us | 2,357.3 us |\r\n          Dist2 |   276.2 us |  0.5637 us |  0.5272 us |   276.3 us |\r\n  SdcaL1UpdateU |   481.4 us |  4.9104 us |  4.5932 us |   480.9 us |\r\n SdcaL1UpdateSU | 8,043.5 us | 44.7203 us | 39.6434 us | 8,030.6 us |\r\n        MatMulX |   137.2 us |  2.9038 us |  8.1903 us |   139.6 us |\r\n```\r\nAfter:\r\n\r\n```\r\n// * Summary *\r\n\r\nBenchmarkDotNet=v0.11.1, OS=Windows 10.0.17758\r\nIntel Core i9-7980XE CPU 2.60GHz (Max: 2.59GHz), 1 CPU, 36 logical and 18 physical cores\r\n.NET Core SDK=3.0.100-alpha1-009642\r\n  [Host] : .NET Core 3.0.0-preview1-27004-04 (CoreCLR 4.6.27003.04, CoreFX 4.6.27003.02), 64bit RyuJIT\r\n\r\nToolchain=InProcessToolchain  \r\n\r\n         Method |        Mean |      Error |     StdDev |      Median |\r\n--------------- |------------:|-----------:|-----------:|------------:|\r\n      AddScaleU |   273.38 us |  0.4326 us |  0.4046 us |   273.47 us |\r\n     AddScaleSU | 2,917.50 us | 33.6275 us | 31.4552 us | 2,911.38 us |\r\n  AddScaleCopyU |   393.58 us |  1.0500 us |  0.9822 us |   393.61 us |\r\n         SumSqU |   195.53 us |  1.6073 us |  1.5035 us |   194.86 us |\r\n     SumSqDiffU |   196.62 us |  0.1949 us |  0.1824 us |   196.59 us |\r\n           DotU |   198.04 us |  0.3970 us |  0.3713 us |   198.12 us |\r\n          DotSU | 2,337.79 us | 12.5178 us | 11.7092 us | 2,337.42 us |\r\n          Dist2 |   264.65 us |  7.0762 us | 19.7257 us |   271.17 us |\r\n  SdcaL1UpdateU |   481.08 us |  1.3783 us |  1.2218 us |   480.94 us |\r\n SdcaL1UpdateSU | 8,001.56 us | 28.4807 us | 26.6409 us | 7,990.17 us |\r\n        MatMulX |    96.01 us |  0.4207 us |  0.3729 us |    95.99 us |\r\n\r\n```\r\n\r\n@eerhardt @tannergooding PTAL","Url":"https://github.com/dotnet/machinelearning/pull/1292","RelatedDescription":"Open PR \"Use FMA instruction in CpuMath for .NET Core 3\" (#1292)"},{"Id":"371315938","IsPullRequest":true,"CreatedAt":"2018-10-18T00:28:01","Actor":"CESARDELATORRE","Number":"1291","RawContent":null,"Title":"ML.NET supports x64 bits, not any 64 bits","State":"open","Body":"I believe our native assemblies are only compiled for x64\r\ne.g. we don't support ARM64\r\nSo, we should say x64, not just 64 bits, right?\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1291","RelatedDescription":"Open PR \"ML.NET supports x64 bits, not any 64 bits\" (#1291)"},{"Id":"371282969","IsPullRequest":false,"CreatedAt":"2018-10-17T21:56:57","Actor":"Zruty0","Number":"1288","RawContent":null,"Title":"Improve constructor for TextLoader","State":"open","Body":"We currently have \r\n```csharp\r\npublic TextLoader(IHostEnvironment env, Column[] columns, Action<Arguments> advancedSettings, IMultiStreamSource dataSample = null)\r\npublic TextLoader(IHostEnvironment env, Arguments args, IMultiStreamSource dataSample = null)\r\n```\r\nWe need to:\r\n1) Make the second constructor internal or private (it's used only by cmdline/dependency injection.\r\n2) Add 'separator chars' and 'has header' as non-advanced parameters\r\n\r\nThe first change will naturally trigger a lot of changes in the code that creates the `TextLoader`, this is by design.","Url":"https://github.com/dotnet/machinelearning/issues/1288","RelatedDescription":"Open issue \"Improve constructor for TextLoader\" (#1288)"},{"Id":"371282185","IsPullRequest":false,"CreatedAt":"2018-10-17T21:54:09","Actor":"Zruty0","Number":"1287","RawContent":null,"Title":"LocalEnvironment to stop being IDisposable","State":"open","Body":"The only reason we have `IHostEnvironment` as an `IDisposable` is because we clean up the temp files created using `CreateTempFile`. This functionality is not really very useful. We should remove the functionality, remove the `IDisposable` and fix all the `using` calls in the codebase (preferably to just `new MLContext`, if possible)","Url":"https://github.com/dotnet/machinelearning/issues/1287","RelatedDescription":"Open issue \"LocalEnvironment to stop being IDisposable\" (#1287)"},{"Id":"371280045","IsPullRequest":false,"CreatedAt":"2018-10-17T21:46:51","Actor":"Zruty0","Number":"1286","RawContent":null,"Title":"`MLContext.Model.Save` should accept statically typed models too","State":"open","Body":"Add an extension method in `Microsoft.ML.StaticPipe` for that","Url":"https://github.com/dotnet/machinelearning/issues/1286","RelatedDescription":"Open issue \"`MLContext.Model.Save` should accept statically typed models too\" (#1286)"},{"Id":"371265784","IsPullRequest":true,"CreatedAt":"2018-10-17T21:02:54","Actor":"Ivanidzo4ka","Number":"1285","RawContent":null,"Title":"Convert WordTokenize to estimator","State":"open","Body":"Convert WordTokenize to estimator","Url":"https://github.com/dotnet/machinelearning/pull/1285","RelatedDescription":"Open PR \"Convert WordTokenize to estimator\" (#1285)"},{"Id":"371217003","IsPullRequest":false,"CreatedAt":"2018-10-17T18:46:34","Actor":"eerhardt","Number":"1284","RawContent":null,"Title":"Make ConsoleEnvironment internal","State":"open","Body":"We don't expect external users to use the `ConsoleEnvironment` class. It should only be used for the command line tool.\r\n\r\nWe should make this class internal so it isn't part of our public API. That way we don't need to support it as a public API forever.\r\n\r\nSee https://github.com/dotnet/machinelearning/pull/1252#discussion_r225986842\r\n\r\n/cc @Zruty0 @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/1284","RelatedDescription":"Open issue \"Make ConsoleEnvironment internal\" (#1284)"},{"Id":"371205197","IsPullRequest":false,"CreatedAt":"2018-10-17T18:16:19","Actor":"wschin","Number":"1283","RawContent":null,"Title":"Support Key Types in Input Data Structures of Prediction Function","State":"open","Body":"Key types currently are not supported in input data structure of a prediction function ([an example](https://github.com/dotnet/machinelearning/blob/23659b013eb2d0233cd92072f32a6daddfe613e3/test/Microsoft.ML.Benchmarks/PredictionEngineBench.cs#L19) of prediction function). However, for recommender systems like matrix factorization, we have user and item IDs which are input keys. Do you have any plan to support key-typed input data structures?","Url":"https://github.com/dotnet/machinelearning/issues/1283","RelatedDescription":"Open issue \"Support Key Types in Input Data Structures of Prediction Function\" (#1283)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-10-19T05:30:35.8562771Z","RunDurationInMilliseconds":1126}