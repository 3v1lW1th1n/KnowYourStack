{"Data":{"Blog":{"FeedItems":[{"Title":"Use Hybrid Connections to Incrementally Migrate Applications to the Cloud","PublishedOn":"2018-10-04T22:57:53+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"As the software industry shifts to running software in the cloud, organizations are looking to migrate existing applications from on-premises to the cloud. Last week at Microsoft’s Ignite conference,...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/10/04/use-hybrid-connections-to-incrementally-migrate-applications-to-the-cloud/","RawContent":null},{"Title":"Announcing ASP.NET SignalR 2.4.0 Preview 1","PublishedOn":"2018-10-04T17:36:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the first preview of the upcoming 2.4.0 release of ASP.NET SignalR. As we mentioned in our previous blog post on the future of ASP.NET SignalR we are releasing a new minor update...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/10/04/announcing-asp-net-signalr-2-4-0-preview-1/","RawContent":null},{"Title":"Blazor 0.6.0 experimental release now available","PublishedOn":"2018-10-02T16:58:03+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"Blazor 0.6.0 is now available! This release includes new features for authoring templated components and enables using server-side Blazor with the Azure SignalR Service. We&#039;re also excited to...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/10/02/blazor-0-6-0-experimental-release-now-available/","RawContent":null},{"Title":"ASP.NET Core in Visual Studio for Mac – Help us build the best experience","PublishedOn":"2018-09-17T20:26:30+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We are working to improve the experience for ASP.NET Core developers in Visual Studio for Mac. If you are working on ASP.NET Core apps in Visual Studio for Mac, we would love to hear you feedback....","Href":"https://blogs.msdn.microsoft.com/webdev/2018/09/17/asp-net-core-in-visual-studio-for-mac-help-us-build-the-best-experience/","RawContent":null},{"Title":"The future of ASP.NET SignalR","PublishedOn":"2018-09-17T18:03:57+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"In ASP.NET Core 2.1, we brought SignalR into the ASP.NET Core family. Many of our users have asked what this means for the previous version of SignalR: ASP.NET SignalR. As a reminder, ASP.NET SignalR...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/09/17/the-future-of-asp-net-signalr/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview2 now available","PublishedOn":"2018-09-12T16:00:01+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Today we’re very happy to announce that the second preview of the next minor release of ASP.NET Core and .NET Core is now available for you to try out. We’ve been working hard on this release over the...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/09/12/asp-net-core-2-2-0-preview2-now-available/","RawContent":null},{"Title":"How to get started with Azure and .NET","PublishedOn":"2018-09-04T19:05:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Note: This content is now available as an official document Azure is a big cloud with lots of services, and for even the most experienced user it can be intimidating to know which service will best...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/09/04/how-to-get-started-with-azure-and-net/","RawContent":null},{"Title":"Library Manager Released in 15.8","PublishedOn":"2018-08-31T07:47:55+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Microsoft Library Manager (LibMan) is now available in the general release of Visual Studio 2017 as of v15.8. LibMan first previewed earlier this year, and now, after a much-anticipated wait, LibMan...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/31/library-manager-release-in-15-8/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview1: Endpoint Routing","PublishedOn":"2018-08-27T21:25:25+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Endpoint Routing in 2.2 What is it? We&#8217;re making a big investment in routing starting in 2.2 to make it interoperate more seamlessly with middleware. For 2.2 this will start with us making a few...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/27/asp-net-core-2-2-0-preview1-endpoint-routing/","RawContent":null},{"Title":"ASP.NET Core 2.2.0-preview1: SignalR Java Client","PublishedOn":"2018-08-23T20:41:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was authored by Mikael Mengistu. In ASP.NET Core 2.2 we are introducing a Java Client for SignalR. The first preview of this new client is available now. This client supports connecting to...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/08/23/asp-net-core-2-2-0-preview1-signalr-java-client/","RawContent":null}],"ResultType":"Feed"},"Home-Issues":{"Issues":[{"Id":"368446070","IsPullRequest":false,"CreatedAt":"2018-10-10T00:13:50","Actor":"csutorasr","Number":"3604","RawContent":null,"Title":"ViewComponent ViewData","State":"open","Body":"MVC and Razor Pages: https://github.com/aspnet/Mvc\r\n\r\nI tried to create a `ViewComponent` and try to use `ViewData` from it.\r\n\r\nThe *ViewComponents* are using different `ViewContext` from the page that executed it. This way I can't reach or set `ViewData`, that can be later passed to *layout* of the page.\r\n\r\nI managed to reach the data of the parent with an ugly solution, while I kept trying:\r\n\r\n```csharp\r\n(Component as IViewContextAware)?.Contextualize(ViewContext);\r\n```\r\n\r\nThis way the `ViewComponent` could reach data from the page that invoked it, but the other way of the data cannot be made, because of the new context.\r\n\r\n**You could ask why I need ViewData in ViewComponent.**\r\n\r\nI am creating a \"lot\" (I hope it will be a lot) of libraries to make it easier to create a CMS system with ASP.NET Core. The only reference in my code is the MVC and EF, and I try to keep it for later. This way any project using MVC needs some CMS functionality, that can be inserted in no time without affecting the structure of the original project (only some entities in EF).\r\n\r\nI needed a way to show views if I get a contentId.\r\nI would like to use the higher abstraction levels of the framework as changing less frequently.\r\n1. Pages with rewrite middleware was my first solution but those can be reached with the original URL too.\r\n2. ViewComponent seemed the best solution, but I couldn't set the `ViewData`.\r\n\r\nIf there's any other options that with I can solve this problem please tell me.","Url":"https://github.com/aspnet/AspNetCore/issues/3604","RelatedDescription":"Open issue \"ViewComponent ViewData\" (#3604)"},{"Id":"368167047","IsPullRequest":false,"CreatedAt":"2018-10-09T20:06:58","Actor":"simonvane","Number":"3600","RawContent":null,"Title":"Disable \"Automatic HTTP 400 responses\" for an individual action","State":"closed","Body":"The \"Automatic HTTP 400 responses\" functionality added in ASP.NET Core 2.1 is working out really well in most cases. However, I have one action where I need to do some pre-processing before the validation run.\r\n\r\nI don't want to lose the functionality for all actions by setting SuppressModelStateInvalidFilter = true. I'd like to be able to say \"don't validate\" for this action, perhaps with a SuppressModelStateInvalidFilterAttribute on the action.\r\n\r\nThat way I could retain the benefit but handle special cases myself.\r\n\r\nIs there a way to achieve this at the moment?\r\n\r\nThank you.","Url":"https://github.com/aspnet/AspNetCore/issues/3600","RelatedDescription":"Closed issue \"Disable \"Automatic HTTP 400 responses\" for an individual action\" (#3600)"},{"Id":"368363330","IsPullRequest":false,"CreatedAt":"2018-10-09T20:06:25","Actor":"addikhann","Number":"3603","RawContent":null,"Title":"The NPM script 'start' exited without indicating that the Angular CLI","State":"closed","Body":"https://stackoverflow.com/questions/52724294/how-to-solve-the-npm-script-start-exited-without-indicating-that-the-angular-c\r\ni posted here today .. but no one reply my error.. please check\r\n\r\nhttps://stackoverflow.com/questions/52714606/an-unhandled-exception-occurred-while-processing-the-request-in-netcore\r\ni am facing these error on my different machine.... i spend 9 hours in this issue but still pending both of these","Url":"https://github.com/aspnet/AspNetCore/issues/3603","RelatedDescription":"Closed issue \"The NPM script 'start' exited without indicating that the Angular CLI\" (#3603)"},{"Id":"368315535","IsPullRequest":false,"CreatedAt":"2018-10-09T17:24:12","Actor":"mkArtakMSFT","Number":"3602","RawContent":null,"Title":"Partial view not working according to culture of the page","State":"open","Body":"_From @devjani on Wednesday, 03 October 2018 13:38:15_\r\n\r\nI am using culture in my mvc 5 project. Its working perfect in while redirecting to any page except the partial view rendering for grid display using ajax post method. \r\n\r\nHow could we manage the partial view along with current culture?\r\n\r\n_Copied from original issue: aspnet/Mvc#8543_","Url":"https://github.com/aspnet/AspNetCore/issues/3602","RelatedDescription":"Open issue \"Partial view not working according to culture of the page\" (#3602)"},{"Id":"368267466","IsPullRequest":false,"CreatedAt":"2018-10-09T15:24:56","Actor":"ThisNoName","Number":"3601","RawContent":null,"Title":"Did someone break processPath during publish?","State":"open","Body":"All my previously published web applications, part of the web.config looks like this\r\n\r\n    <aspNetCore processPath=\"dotnet\" arguments=\".\\MyApp.dll\" \r\n          stdoutLogEnabled=\"false\" stdoutLogFile=\".\\logs\\stdout\" />\r\n\r\nI haven't changed anything but now they are like \r\n\r\n    <aspNetCore processPath=\".\\MyApp.exe\" arguments=\"\" \r\n          stdoutLogEnabled=\"false\" stdoutLogFile=\".\\logs\\stdout\" />\r\n\r\nI don't use anything fancy, just standard Release profile and standard publish from within VS.  \r\n\r\nThe only thing happened lately is that I update Visual Studio to 15.8.6 and I found this conversation.  \r\n\r\nhttps://github.com/aspnet/websdk/issues/408\r\n\r\nIt appears someone is talking about changing the path to app.exe in there.  What's going on?  Thanks\r\n","Url":"https://github.com/aspnet/AspNetCore/issues/3601","RelatedDescription":"Open issue \"Did someone break processPath during publish?\" (#3601)"},{"Id":"368000368","IsPullRequest":false,"CreatedAt":"2018-10-09T13:25:15","Actor":"MattHoneycutt","Number":"3599","RawContent":null,"Title":"Breaking Change related to ASP.NET Core on .NET 2.1.5?","State":"closed","Body":"I've seen something *really* strange now that .NET Core 2.1.5 is starting to roll out across Azure.  It looks like a breaking change, but maybe I've done something wrong.  \r\n\r\nThe exact same code base (built and deployed at the same time) is behaving differently in two different Azure Web apps.  Prior to today, it was behaving the same.  One app was restarted, but we haven't actually deployed anything to either of the. \r\n\r\nWe have an ASP.NET action method that takes in an array of objects, like so:\r\n\r\n```\r\n    [ApiController,\r\n     Authorize,\r\n     Route(\"widgets\")]\r\n    public class WidgetsController : Controller\r\n        [HttpPost(\"summaries\")]\r\n        public async Task<ActionResult<ResultModel[]>> SearchAll(Criteria[] criteria, bool countOnly = false)\r\n        {\r\n              // snip\r\n        }\r\n```\r\n\r\nIn one of the deployed instances, posting a form like this works as expected:\r\n\r\n```json\r\n[\r\n\t{\"parameter\":\"User\",\"comparisonType\":\"=\",\"value\":\"*\"},\r\n\t{\"parameter\":\"Status\",\"comparisonType\":\"=\",\"value\":\"New,AttemptedContact\"}\r\n]\r\n```\r\n\r\nIn the other, posting the *exact* same payload, the payload is ignored.  The criteria array is empty.\r\n\r\nI ran some tests.  If I add `[FromBody]` to the parameter, then it works as expected again.\r\n\r\nI'm having a whale of a time reproducing the issue locally.  Everything worked fine locally until I installed .NET 2.1.5.  Once I did that, I started seeing the same, incorrect behavior that I'm seeing with one of our instances in Azure.  I tried to run my app locally on a previous version of .net by using `global.json`.  The CLI reported it was running 2.1.300, but the same issue still persisted.  **Again, everything worked fine until I installed 2.1.5.**\r\n\r\nPOSTing a single object still works fine, no need for the [FromBody] attribute.  It seems to just be related to posting arrays.\r\n\r\nAny suggestions on how I can troubleshoot this further? ","Url":"https://github.com/aspnet/AspNetCore/issues/3599","RelatedDescription":"Closed issue \"Breaking Change related to ASP.NET Core on .NET 2.1.5?\" (#3599)"},{"Id":"367636369","IsPullRequest":false,"CreatedAt":"2018-10-08T21:20:24","Actor":"jkotas","Number":"3595","RawContent":null,"Title":"Scaffolding Identity Deletes All Content in site.css and site.js","State":"closed","Body":"_From @robinwilson16 on October 7, 2018 22:5_\n\nEach time I scaffold identity in a project by right-clicking the project and go to New... > Scaffolded Item and  and select Identity and add all pages I then find this deletes all content in site.css and site.js.\r\n\r\nAfter scaffolding site.js contains this code only:\r\n```\r\n// Please see documentation at https://docs.microsoft.com/aspnet/core/client-side/bundling-and-minification\r\n// for details on configuring this project to bundle and minify static web assets.\r\n\r\n// Write your JavaScript code.\r\n\r\n```\r\n\r\nAnd site.css has this:\r\n```\r\n/* Please see documentation at https://docs.microsoft.com/aspnet/core/client-side/bundling-and-minification\\ \r\nfor details on configuring this project to bundle and minify static web assets. */\r\nbody {\r\n    padding-top: 50px;\r\n    padding-bottom: 20px;\r\n}\r\n\r\n/* Wrapping element */\r\n/* Set some basic padding to keep content from hitting the edges */\r\n.body-content {\r\n    padding-left: 15px;\r\n    padding-right: 15px;\r\n}\r\n\r\n/* Carousel */\r\n.carousel-caption p {\r\n    font-size: 20px;\r\n    line-height: 1.4;\r\n}\r\n\r\n/* Make .svg files in the carousel display properly in older browsers */\r\n.carousel-inner .item img[src$=\".svg\"] {\r\n    width: 100%;\r\n}\r\n\r\n/* QR code generator */\r\n#qrCode {\r\n    margin: 15px;\r\n}\r\n\r\n/* Hide/rearrange for smaller screens */\r\n@media screen and (max-width: 767px) {\r\n    /* Hide captions */\r\n    .carousel-caption {\r\n        display: none;\r\n    }\r\n}\r\n```\r\n\r\nThis has happened to me a few times now and over the last 3 VS updates (at least) and I have only just tracked down the connection. Current version is 15.8.6.\r\n\r\nThe workaround is to take backups of these files and then overwrite changes back after scaffolding.\r\nAs I don't commit constantly I have lost a few changes each time so would be good if this bug could be fixed.\r\n\r\nRobin\n\n_Copied from original issue: dotnet/corefx#32681_","Url":"https://github.com/aspnet/AspNetCore/issues/3595","RelatedDescription":"Closed issue \"Scaffolding Identity Deletes All Content in site.css and site.js\" (#3595)"},{"Id":"367931931","IsPullRequest":false,"CreatedAt":"2018-10-08T19:58:51","Actor":"natemcmaster","Number":"3598","RawContent":null,"Title":"Discussion: unifying to fewer GitHub repos","State":"open","Body":"This is a discussion item for https://github.com/aspnet/Announcements/issues/320. Please see the announcement for details.","Url":"https://github.com/aspnet/AspNetCore/issues/3598","RelatedDescription":"Open issue \"Discussion: unifying to fewer GitHub repos\" (#3598)"},{"Id":"367858658","IsPullRequest":false,"CreatedAt":"2018-10-08T16:07:57","Actor":"pranavkm","Number":"3597","RawContent":null,"Title":"[CORS] Revive skipped CORS test","State":"open","Body":"https://github.com/aspnet/CORS/pull/182","Url":"https://github.com/aspnet/AspNetCore/issues/3597","RelatedDescription":"Open issue \"[CORS] Revive skipped CORS test\" (#3597)"},{"Id":"367715391","IsPullRequest":false,"CreatedAt":"2018-10-08T15:10:06","Actor":"Ashvini2004","Number":"3596","RawContent":null,"Title":"Specified initialization vector (IV) does not match the block size for this algorithm using TripleDesImplementation in asp.net core","State":"closed","Body":"Hi\r\nWe have normal asp.net website where we used encryption/decryption of passwords using TripleDesImplementation  algorithm.Now we are converting our site to asp.net core and just moved old encrypted passwords in new database user table. To login users in new site we need to decrypt old passwords so used same decrypt method which we were using earlier TripleDesImplementation  algorithm but throwing exception as below,\r\n\r\nSpecified initialization vector (IV) does not match the block size for this algorithm.\r\nParameter name: rgbIV\r\n\r\nAt line\r\nCryptoStream cs = new CryptoStream(ms, cryptoProvider.CreateDecryptor(KEY_192, IV_192), CryptoStreamMode.Read);\r\n\r\nIt's still working in our old site.\r\n\r\nThe encrypt and decryption code is as below:\r\n\r\n```c#\r\n\r\npublic static string Encrypt(string p_szStrValue)\r\n{\r\n    string vszEncryptedString = string.Empty;\r\n\r\n     private static byte[] KEY_192 = { XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX };\r\n     private static byte[] IV_192 =  { XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX };\r\n\r\n    if (!p_szStrValue.Trim().Equals(string.Empty))\r\n    {\r\n        TripleDESCryptoServiceProvider cryptoProvider = new TripleDESCryptoServiceProvider();\r\n        MemoryStream ms = new MemoryStream();\r\n        CryptoStream cs = new CryptoStream(ms, cryptoProvider.CreateEncryptor(KEY_192, IV_192), CryptoStreamMode.Write);\r\n        StreamWriter sw = new StreamWriter(cs);\r\n        sw.Write(p_szStrValue);\r\n        sw.Flush();\r\n        cs.FlushFinalBlock();\r\n        ms.Flush();\r\n        vszEncryptedString = Convert.ToBase64String(ms.GetBuffer(), 0, (int)ms.Length);\r\n    }\r\n    return vszEncryptedString;\r\n}\r\n\r\npublic static string Decrypt(string p_szStrValue)\r\n{\r\n    string vszDecryptedString = string.Empty;\r\n    if (!p_szStrValue.Trim().Equals(string.Empty))\r\n    {\r\n        try\r\n        {\r\n            TripleDESCryptoServiceProvider cryptoProvider = new TripleDESCryptoServiceProvider();\r\n            byte[] v_Buffer = Convert.FromBase64String(p_szStrValue);\r\n            MemoryStream ms = new MemoryStream(v_Buffer);\r\n            CryptoStream cs = new CryptoStream(ms, cryptoProvider.CreateDecryptor(KEY_192, IV_192), CryptoStreamMode.Read);\r\n            StreamReader sr = new StreamReader(cs);\r\n            vszDecryptedString = sr.ReadToEnd();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            return e.Message;\r\n        }\r\n    }\r\n    return vszDecryptedString;\r\n}\r\n\r\n```","Url":"https://github.com/aspnet/AspNetCore/issues/3596","RelatedDescription":"Closed issue \"Specified initialization vector (IV) does not match the block size for this algorithm using TripleDesImplementation in asp.net core\" (#3596)"},{"Id":"367622869","IsPullRequest":false,"CreatedAt":"2018-10-08T02:43:09","Actor":"SinxHe","Number":"3594","RawContent":null,"Title":"Microsoft.Extensions.Options ValidateOptionsResult when success","State":"open","Body":"I've found a feature in `Microsoft.Extensions.Options.DataAnnotations` when i want to develop a similarity.\r\n\r\nWhen I view the source code. I notice this below in the `ValidateOptionsResult`:\r\n\r\n```csharp\r\n/// <summary>\r\n/// Validation was successful.\r\n/// </summary>\r\npublic static readonly ValidateOptionsResult Success = new ValidateOptionsResult() \r\n{ \r\n    Skipped = true \r\n};\r\n```\r\n\r\nI am confused why successful result set `Skipped` property true rather than `Succeeded`. Is it a design or some other reasons?\r\n\r\nOn the other hand, in the source code of `DataAnnotationValidateOptions`, the annotation of code shows it will validate all options and it is a useful feature, but the code of `if (Name == null || name == Name)` appears will not validate all options when the options have not null name and i develivery null to `Validate` method:\r\n\r\n```csharp\r\n/// <summary>\r\n/// Validates a specific named options instance (or all when name is null).\r\n/// </summary>\r\n/// <param name=\"name\">The name of the options instance being validated.</param>\r\n/// <param name=\"options\">The options instance.</param>\r\n/// <returns>The <see cref=\"ValidateOptionsResult\"/> result.</returns>\r\npublic ValidateOptionsResult Validate(string name, TOptions options)\r\n{\r\n    // Null name is used to configure all named options.\r\n    if (Name == null || name == Name)\r\n    {\r\n        var validationResults = new List<ValidationResult>();\r\n        if (Validator.TryValidateObject(options,\r\n            new ValidationContext(options, serviceProvider: null, items: null), \r\n            validationResults, \r\n            validateAllProperties: true))\r\n    ...\r\n    // Ignored if not validating this instance.\r\n    return ValidateOptionsResult.Skip;\r\n}\r\n```","Url":"https://github.com/aspnet/AspNetCore/issues/3594","RelatedDescription":"Open issue \"Microsoft.Extensions.Options ValidateOptionsResult when success\" (#3594)"},{"Id":"367404039","IsPullRequest":false,"CreatedAt":"2018-10-06T00:11:52","Actor":"aspnet-hello","Number":"3593","RawContent":null,"Title":"Test failure: GetNormalizedOrigin_ReturnsPunyCodedOrigin","State":"open","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](http://aspnetci/viewLog.html?buildId=570630&buildTypeId=XPlat_Windows_Win7_Universe) with the following error:\r\n\r\n```\r\nSystem.UriFormatException : An invalid Unicode character by IDN standards was specified in the host.\r\n   at System.DomainNameHelper.IdnEquivalent(Char* hostname, Int32 start, Int32 end, Boolean& allAscii, String& bidiStrippedHost)\r\n   at System.DomainNameHelper.IdnEquivalent(Char* hostname, Int32 start, Int32 end, Boolean& allAscii, Boolean& atLeastOneValidIdn)\r\n   at System.DomainNameHelper.IdnEquivalent(String hostname)\r\n   at System.Uri.get_IdnHost()\r\n   at Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilder.GetNormalizedOrigin(String origin) in /_/src/Microsoft.AspNetCore.Cors/Infrastructure/CorsPolicyBuilder.cs:line 68\r\n   at Microsoft.AspNetCore.Cors.Infrastructure.CorsPolicyBuilderTests.GetNormalizedOrigin_ReturnsPunyCodedOrigin(String origin, String expected) in /_/test/Microsoft.AspNetCore.Cors.Test/CorsPolicyBuilderTests.cs:line 377\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @mkArtakMSFT","Url":"https://github.com/aspnet/AspNetCore/issues/3593","RelatedDescription":"Open issue \"Test failure: GetNormalizedOrigin_ReturnsPunyCodedOrigin\" (#3593)"},{"Id":"367385623","IsPullRequest":false,"CreatedAt":"2018-10-06T00:04:25","Actor":"aspnet-hello","Number":"3592","RawContent":null,"Title":"Test failure: TestLogWritesToGlobalLogFile","State":"closed","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](http://aspnetci/viewLog.html?buildId=570460&buildTypeId=Lite_UniverseTest) with the following error:\r\n\r\n```\r\nAssert.Equal() Failure\r\n                                 ↓ (pos 74)\r\nExpected: ···ging initialized at TIMESTAMP. Configure the output directory···\r\nActual:   ···ging initialized at \"TIMESTAMP\". Configure the output directo···\r\n                                 ↑ (pos 74)\r\n   at Microsoft.Extensions.Logging.Testing.Tests.AssemblyTestLogTests.<TestLogWritesToGlobalLogFile>b__7_0(String tempDir) in /_/test/Microsoft.Extensions.Logging.Testing.Tests/AssemblyTestLogTests.cs:line 108\r\n   at Microsoft.Extensions.Logging.Testing.Tests.AssemblyTestLogTests.RunTestLogFunctionalTest(Action`1 action, String testName) in /_/test/Microsoft.Extensions.Logging.Testing.Tests/AssemblyTestLogTests.cs:line 181\r\n   at Microsoft.Extensions.Logging.Testing.Tests.AssemblyTestLogTests.RunTestLogFunctionalTest(Action`1 action, String testName) in /_/test/Microsoft.Extensions.Logging.Testing.Tests/AssemblyTestLogTests.cs:line 194\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\n| [0.001s] TestLifetime Information: Starting test TestLogWritesToGlobalLogFile at 2018-10-05T21:30:34\r\n| [0.003s] Test Information: Created test log in C:\\b\\t\\buildTmp\\TestLogging_d17fe8260f964c6da93a276be1df5187\r\n| [0.007s] Test Information: Finished test log in C:\\b\\t\\buildTmp\\TestLogging_d17fe8260f964c6da93a276be1df5187\r\n| [0.011s] TestLifetime Information: Finished test TestLogWritesToGlobalLogFile in 0.0097661s\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)","Url":"https://github.com/aspnet/AspNetCore/issues/3592","RelatedDescription":"Closed issue \"Test failure: TestLogWritesToGlobalLogFile\" (#3592)"},{"Id":"367379123","IsPullRequest":false,"CreatedAt":"2018-10-05T21:47:38","Actor":"muratg","Number":"3591","RawContent":null,"Title":"Remove the old Redis dependency","State":"open","Body":"We're adding a new dependency in #3536 for 2.2.\r\n\r\nIn 3.0, let's remove Microsoft.AspNetCore.DataProtection.Redis package.\r\n\r\ncc @anurse @Tratcher @DamianEdwards @Eilon","Url":"https://github.com/aspnet/AspNetCore/issues/3591","RelatedDescription":"Open issue \"Remove the old Redis dependency\" (#3591)"},{"Id":"367364564","IsPullRequest":false,"CreatedAt":"2018-10-05T21:26:44","Actor":"aspnet-hello","Number":"3590","RawContent":null,"Title":"Test failure: TestLogWritesToGlobalLogFile","State":"closed","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](http://aspnetci/viewLog.html?buildId=570310&buildTypeId=Lite_UniverseTest) with the following error:\r\n\r\n```\r\nAssert.Equal() Failure\r\n                                 ↓ (pos 74)\r\nExpected: ···ging initialized at TIMESTAMP. Configure the output directory···\r\nActual:   ···ging initialized at \"TIMESTAMP\". Configure the output directo···\r\n                                 ↑ (pos 74)\r\n   at Microsoft.Extensions.Logging.Testing.Tests.AssemblyTestLogTests.<TestLogWritesToGlobalLogFile>b__7_0(String tempDir) in /_/test/Microsoft.Extensions.Logging.Testing.Tests/AssemblyTestLogTests.cs:line 108\r\n   at Microsoft.Extensions.Logging.Testing.Tests.AssemblyTestLogTests.RunTestLogFunctionalTest(Action`1 action, String testName) in /_/test/Microsoft.Extensions.Logging.Testing.Tests/AssemblyTestLogTests.cs:line 181\r\n   at Microsoft.Extensions.Logging.Testing.Tests.AssemblyTestLogTests.RunTestLogFunctionalTest(Action`1 action, String testName) in /_/test/Microsoft.Extensions.Logging.Testing.Tests/AssemblyTestLogTests.cs:line 194\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\n| [0.001s] TestLifetime Information: Starting test TestLogWritesToGlobalLogFile at 2018-10-05T20:00:19\r\n| [0.003s] Test Information: Created test log in D:\\b\\t\\buildTmp\\TestLogging_0f5b7a680843497899932cb02ddbd65c\r\n| [0.014s] Test Information: Finished test log in D:\\b\\t\\buildTmp\\TestLogging_0f5b7a680843497899932cb02ddbd65c\r\n| [0.016s] TestLifetime Information: Finished test TestLogWritesToGlobalLogFile in 0.0154366s\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)","Url":"https://github.com/aspnet/AspNetCore/issues/3590","RelatedDescription":"Closed issue \"Test failure: TestLogWritesToGlobalLogFile\" (#3590)"},{"Id":"367048679","IsPullRequest":false,"CreatedAt":"2018-10-05T19:23:36","Actor":"aspnet-hello","Number":"3584","RawContent":null,"Title":"Test failure: TestLogWritesToGlobalLogFile","State":"closed","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](http://aspnetci/viewLog.html?buildId=569844&buildTypeId=XPlat_Linux_UbuntuUniverseCoreCLR) with the following error:\r\n\r\n```\r\nAssert.Equal() Failure\r\n                                 ↓ (pos 74)\r\nExpected: ···ging initialized at TIMESTAMP. Configure the output directory···\r\nActual:   ···ging initialized at \"TIMESTAMP\". Configure the output directo···\r\n                                 ↑ (pos 74)\r\n   at Microsoft.Extensions.Logging.Testing.Tests.AssemblyTestLogTests.<TestLogWritesToGlobalLogFile>b__7_0(String tempDir) in /_/test/Microsoft.Extensions.Logging.Testing.Tests/AssemblyTestLogTests.cs:line 108\r\n   at Microsoft.Extensions.Logging.Testing.Tests.AssemblyTestLogTests.RunTestLogFunctionalTest(Action`1 action, String testName) in /_/test/Microsoft.Extensions.Logging.Testing.Tests/AssemblyTestLogTests.cs:line 181\r\n   at Microsoft.Extensions.Logging.Testing.Tests.AssemblyTestLogTests.RunTestLogFunctionalTest(Action`1 action, String testName) in /_/test/Microsoft.Extensions.Logging.Testing.Tests/AssemblyTestLogTests.cs:line 194\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\n| [0.001s] TestLifetime Information: Starting test TestLogWritesToGlobalLogFile at 2018-10-05T03:15:03\r\n| [0.003s] Test Information: Created test log in /mnt/temp/buildTmp/TestLogging_880f24af1ffc4d3ca1e36126378280d1\r\n| [0.004s] Test Information: Finished test log in /mnt/temp/buildTmp/TestLogging_880f24af1ffc4d3ca1e36126378280d1\r\n| [0.006s] TestLifetime Information: Finished test TestLogWritesToGlobalLogFile in 0.0057176s\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)","Url":"https://github.com/aspnet/AspNetCore/issues/3584","RelatedDescription":"Closed issue \"Test failure: TestLogWritesToGlobalLogFile\" (#3584)"},{"Id":"367306733","IsPullRequest":false,"CreatedAt":"2018-10-05T17:49:37","Actor":"JoshClose","Number":"3589","RawContent":null,"Title":"decimal.ToString(\"N\") behaving different on Ubuntu 18","State":"closed","Body":"```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.403/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  2.1.403 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\ncode: `(12345.67890).ToString(\"N\")`\r\nexpected output: `\"12,345.679\"`\r\nactual output:  `\"12345.678900\"`","Url":"https://github.com/aspnet/AspNetCore/issues/3589","RelatedDescription":"Closed issue \"decimal.ToString(\"N\") behaving different on Ubuntu 18\" (#3589)"},{"Id":"367030798","IsPullRequest":true,"CreatedAt":"2018-10-05T16:48:37","Actor":"analyticsdriven","Number":"3583","RawContent":null,"Title":"Update README.md","State":"closed","Body":"","Url":"https://github.com/aspnet/AspNetCore/pull/3583","RelatedDescription":"Closed or merged PR \"Update README.md\" (#3583)"},{"Id":"367115684","IsPullRequest":false,"CreatedAt":"2018-10-05T15:02:22","Actor":"Zigby","Number":"3585","RawContent":null,"Title":"Guid","State":"closed","Body":"To address your issues more quickly, please open the issue in the most appropriate repository.\r\n\r\nIf you're not sure exactly where to log the bug, please log the issue here and we will redirect it.\r\n\r\nASP.NET Core:\r\n - General issues: https://github.com/aspnet/Home (this repo)\r\n - MVC and Razor Pages: https://github.com/aspnet/Mvc\r\n - SignalR: https://github.com/aspnet/SignalR\r\n - Kestrel HTTP Server: https://github.com/aspnet/KestrelHttpServer\r\n - Docker: https://github.com/aspnet/aspnet-docker\r\n - Documentation: https://github.com/aspnet/Docs\r\n - Microsoft.NET.Sdk.Web: https://github.com/aspnet/websdk\r\n - See a full list here: https://github.com/aspnet\r\n   - Note: Some repos do not have active issue trackers, so if you see such a warning, please log the issue here\r\n\r\nASP.NET 4.x:\r\n - ASP.NET MVC/Web API (not Core): https://github.com/aspnet/AspNetWebStack\r\n - Katana: https://github.com/aspnet/AspNetKatana\r\n\r\nEntity Framework:\r\n - Entity Framework Core: https://github.com/aspnet/EntityFrameworkCore\r\n - Entity Framework 6: https://github.com/aspnet/EntityFramework6\r\n\r\nOther common projects:\r\n - .NET Core CLI and SDK: https://github.com/dotnet/core\r\n - .NET Core runtime: https://github.com/dotnet/coreclr\r\n - .NET Core libraries: https://github.com/dotnet/corefx\r\n - NuGet: https://github.com/NuGet/home\r\n - Visual Studio: https://developercommunity.visualstudio.com\r\n - Visual Studio Code: https://github.com/microsoft/vscode\r\n - Omnisharp (C# support for VS Code): https://github.com/omnisharp/omnisharp-vscode\r\n\r\nIf you believe you have an issue that affects the security of the platform please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://technet.microsoft.com/en-us/mt764065.aspx).\r\n\r\n---\r\n\r\nTips for opening great bugs:\r\n\r\n1. Try enabling logging (in the most verbose level) and see if the details help you in fixing the issue you are seeing. Share the logs too if it helps in diagnosing the issue faster. More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging\r\n2. If you are seeing an exception, include the full exceptions details (message and stack trace). More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling\r\n3. Please try to include as much information as possible:\r\n   1. Description of the problem:\r\n   2. Steps to reproduce (preferrably a link to a GitHub repo with a repro project)\r\n   3. The version of `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`\r\n   4. The output of `dotnet --info`\r\n","Url":"https://github.com/aspnet/AspNetCore/issues/3585","RelatedDescription":"Closed issue \"Guid\" (#3585)"},{"Id":"367152462","IsPullRequest":false,"CreatedAt":"2018-10-05T10:30:56","Actor":"RehanSaeed","Number":"3588","RawContent":null,"Title":".NET Core Version of System.Web.UI.HtmlTextWriter","State":"open","Body":"Following on from https://github.com/dotnet/corefx/issues/24169. What is the alternative? I'm using this type to do XSL transforms like so:\r\n\r\n```c#\r\nprivate static Stream XslTransform(XDocument document, XmlReader xslReader)\r\n{\r\n    var xslTransform = new XslCompiledTransform();\r\n    var stringBuilder = new StringBuilder();\r\n\r\n    using (var stringWriter = new StringWriter(stringBuilder))\r\n    {\r\n        using (var htmlWriter = new HtmlTextWriter(stringWriter))\r\n        {\r\n            xslTransform.Load(xslReader);\r\n            xslTransform.Transform(document.CreateReader(), new XsltArgumentList(), htmlWriter);\r\n            htmlWriter.Flush();\r\n        }\r\n    }\r\n\r\n    return new MemoryStream(Encoding.UTF8.GetBytes(stringBuilder.ToString()));\r\n}\r\n```","Url":"https://github.com/aspnet/AspNetCore/issues/3588","RelatedDescription":"Open issue \".NET Core Version of System.Web.UI.HtmlTextWriter\" (#3588)"},{"Id":"367137593","IsPullRequest":false,"CreatedAt":"2018-10-05T09:48:24","Actor":"leung85","Number":"3587","RawContent":null,"Title":"After install core 2.1.5, the project cannot be published","State":"open","Body":"I use visual studio 2017 15.8.6, and install core 2.1.5 download from here: \r\nhttps://www.microsoft.com/net/download/dotnet-core/2.1\r\n\r\n the version of core SDK, runtime is quite complicated,There are some problem about dependency version, and make me confuse:\r\n\r\n1. The **.net core console project** cannot be published using self-contained with visual studio 2017, \r\nError:\r\n> The project was restored using Microsoft.NETCore.App version 2.1.0, but with current settings, version 2.1.5 would be used instead. To resolve this issue, make sure the same settings are used for restore and for subsequent operations such as build or publish. Typically this issue can occur if the RuntimeIdentifier property is set during build or publish but not during restore.\r\n\r\nBut it can be published using Framework Dependent. Also, it can be publish as self-contained  if i use command `dotnet publish`  <-- Is it  intended behavior ??\r\n\r\nAfter search i lot of similar case, it suggested add `<TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>`\r\n\r\nok. that fix the problem, but why i need add this code, i expected if i have not mention the version number ,it should be use the latest.   \r\n\r\nHowever, i found that the **.net core web project** , no need to add above code , and it can be  published using both self-contained and Framework Dependent.  but it still use Microsoft.NETCore.App version 2.1.0. \r\n\r\nso i try create a new web project...\r\n\r\n2. Why new created core project default use Microsoft.NETCore.App 2.1.0, not 2.1.5. And i want use NuGet update the package, it is blocked by Project. <---????\r\n\r\n![image](https://user-images.githubusercontent.com/8042599/46526554-26cccf00-c8c1-11e8-8f44-225bf687a45d.png)\r\n\r\nok , i add `<TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>`, \r\nthen web project use` Microsoft.NETCore.App 2.1.5 `now, but when i run it using docker local, it fail.....:\r\n![image](https://user-images.githubusercontent.com/8042599/46527888-f4bd6c00-c8c4-11e8-8460-1d2d9d131604.png)\r\n\r\nthen i try use IISExpress it said the port is being used. the docker is still running after i stop debug.\r\nso i cannot simply  switch using docker and IISExpress. i need to delete the docker container.\r\n\r\nif i run IISExpress first i need to do the similar thing: close the IISExpressand clean the solution.\r\n\r\nAm i doing wrong to update an SDK??\r\n\r\n\r\n","Url":"https://github.com/aspnet/AspNetCore/issues/3587","RelatedDescription":"Open issue \"After install core 2.1.5, the project cannot be published\" (#3587)"},{"Id":"367133272","IsPullRequest":false,"CreatedAt":"2018-10-05T09:36:31","Actor":"davidfowl","Number":"3586","RawContent":null,"Title":"Poison the HttpContext after it's disposed by the HttpContextFactory","State":"open","Body":"The default HttpContextFactory should poison the HttpContext so that it throws `ObjectDisposedException` if the feature collection is accessed after the request is over. We'd do this by setting a feature collection that just throws on GetFeature\r\n\r\nRelated to #3581\r\n\r\ncc @Tratcher ","Url":"https://github.com/aspnet/AspNetCore/issues/3586","RelatedDescription":"Open issue \"Poison the HttpContext after it's disposed by the HttpContextFactory\" (#3586)"},{"Id":"366949198","IsPullRequest":false,"CreatedAt":"2018-10-04T22:31:02","Actor":"imxavi","Number":"3582","RawContent":null,"Title":"Cancelling a request through browser or Postman doesn't cancel api asych call with CancellationToken","State":"closed","Body":"Hi,\r\nI have an app with just  this middleware components:\r\napp.UseDeveloperExceptionPage();\r\napp.UseMvc();\r\n\r\nMy controller action is like this:\r\n\r\n```\r\npublic async Task<IActionResult> GetAsync(int delay, CancellationToken token)\r\n        {\r\n            _logger.LogInformation($\" <== {DateTime.Now.ToString(\"yyyy-MM-dd-HH:mm:ss:FFF\")} GetAsync  start\");\r\n            await Task.Delay(delay, token);\r\n            _logger.LogInformation($\" <== {DateTime.Now.ToString(\"yyyy-MM-dd-HH:mm:ss:FFF\")} GetAsync  stop\");\r\n            return Ok(\"Request finish succefully\");\r\n        }\r\n```\r\nthe request is with a delay of 5 seconds\r\nand in the middle I hit cancel request from Postam or the browser.\r\nthis is the log:\r\nWebApplicationCore.Controllers.ValuesController:Information:  <== 2018-10-04-22:00:04:615 GetAsync  start\r\nWebApplicationCore.Controllers.ValuesController:Information:  <==2018-10-04-22:00:09:628 GetAsync  stop\r\n\r\nshouldn't cancel the api call?\r\nthanks","Url":"https://github.com/aspnet/AspNetCore/issues/3582","RelatedDescription":"Closed issue \"Cancelling a request through browser or Postman doesn't cancel api asych call with CancellationToken\" (#3582)"},{"Id":"365786130","IsPullRequest":false,"CreatedAt":"2018-10-04T16:25:50","Actor":"phatcher","Number":"3575","RawContent":null,"Title":"Access to IServiceProvider/Startup used by TestServer","State":"closed","Body":"Is it possible to get access to the IServiceProvider and/or the Startup class used by TestServer.\r\n\r\nI'm trying to write some tests that confirm if service dependencies have been registered correctly in the underlying container.","Url":"https://github.com/aspnet/AspNetCore/issues/3575","RelatedDescription":"Closed issue \"Access to IServiceProvider/Startup used by TestServer\" (#3575)"},{"Id":"366864855","IsPullRequest":false,"CreatedAt":"2018-10-04T16:10:14","Actor":"ItsVeryWindy","Number":"3581","RawContent":null,"Title":"Accessing HttpContext after the request has completed","State":"open","Body":"Until recently I didn't actually realise that there were issues using the context after the request had completed.\r\n\r\nJust as a basic example, when I run this and execute a request with a path and query string, after the delay it writes to the console but the path and query string are empty.\r\n\r\nI wouldn't mind the fact that it could be no longer used, but there's nothing to indicate there is any sort of problem. In our case we had a background task we were passing the context to and certain logic we would execute based off something in the request wasn't being executed.\r\n\r\n```csharp\r\npublic static class Program\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        WebHost.CreateDefaultBuilder()\r\n            .Configure(appBuilder => appBuilder.Run(context =>\r\n            {\r\n                Execute(context);\r\n\r\n                return context.Response.WriteAsync($\"your request is {context.Request.Path} with query string {context.Request.QueryString}\");\r\n            })).Build().Run();\r\n    }\r\n\r\n    static async void Execute(HttpContext context)\r\n    {\r\n        await Task.Delay(10000);\r\n\r\n        Console.WriteLine($\"your request was {context.Request.Path} with query string {context.Request.QueryString}\");\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/aspnet/AspNetCore/issues/3581","RelatedDescription":"Open issue \"Accessing HttpContext after the request has completed\" (#3581)"},{"Id":"366300448","IsPullRequest":false,"CreatedAt":"2018-10-03T17:02:18","Actor":"olegsavelos","Number":"3579","RawContent":null,"Title":"Debugging Razor Class library VS 2017","State":"closed","Body":"I am trying to debug a razor class library hosted by external process.\r\nI have set the configuration to a Launch: Executable this indeed start the executable but it don't seem that Visual Studio attaches to the process as i don't see no modules to be loaded and cant break.\r\n\r\nIn contradiction with a normal .NET class library when using the same approach Visual Studio attaches correctly to the launched process and debugging/breaking is possible.\r\n\r\nHere is example of launchSettings.json\r\n\r\n  \"profiles\": {\r\n    \"SampleModule\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Programs\\\\executable.exe\",\r\n      \"workingDirectory\": \"C:\\\\Programs\\\\\"\r\n    },","Url":"https://github.com/aspnet/AspNetCore/issues/3579","RelatedDescription":"Closed issue \"Debugging Razor Class library VS 2017\" (#3579)"},{"Id":"366405214","IsPullRequest":false,"CreatedAt":"2018-10-03T15:45:35","Actor":"Iridio","Number":"3580","RawContent":null,"Title":"Double escaping and + symbol","State":"open","Body":"With .NET Core 2.1 and double escaping just the '+' sign is unescaped twice from the framework instead of once.\r\nMy code is as follow:\r\n\r\n```\r\n    [HttpGet(\"article/{productCode}/movements/{movementId:int}\")]\r\n    public async Task<IActionResult> MovementGet(string productCode, int movementId)\r\n    {\r\n    productCode = WebUtility.UrlDecode(productCode);\r\n    //... rest of the code ...\r\n    \r\n    }\r\n```\r\n\r\nI than have created a web.config in the project folder to enable the double escaping for IIS/IISExpress\r\n\r\n```\r\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n    <configuration>\r\n      <system.webServer>\r\n        <security>\r\n          <requestFiltering allowDoubleEscaping=\"true\"/>\r\n        </security>\r\n      </system.webServer>\r\n    </configuration>\r\n```\r\n\r\n\r\nA call for product code `FMB+FTR97/MB06` with double escaping would be\r\nhttp://localhost:4198/api/v1/warehouse/article/FMB%252BFTR97%252FMB06/movements/1946127\r\n\r\nThe anomaly (at least for me) is the product code the fw resolves, because I receive: `FMB+FTR97%2FMB06` instead of `FMB%2BFTR97%2FMB06` and when I call WebUtility.UrlDecode(productCode) I than get `FMB FTR97/MB06` that is wrong.\r\n\r\nAt first I though was an IIS problem, but I tried the same code with ASP.NET 4.6 (with HttpUtilities.UrlDecode) and it worked as expected, I got `FMB%2BFTR97%2FMB06`\r\n\r\nAm I using the web.config in the wrong way?\r\n","Url":"https://github.com/aspnet/AspNetCore/issues/3580","RelatedDescription":"Open issue \"Double escaping and + symbol\" (#3580)"},{"Id":"366219479","IsPullRequest":false,"CreatedAt":"2018-10-03T08:06:25","Actor":"olssonjoakim","Number":"3578","RawContent":null,"Title":"ASP.NET Core: 502.5 error on web app hosted in Azure ","State":"open","Body":"I'm receiving 502.5 error on one of our apps hosted in Azure App Service.\r\n\r\nIt starts and runs sporadically.\r\nWe have multiple instances running in Azure for different branches and theres only one of them that has this problem. The instances are exactly the same.\r\nI did remove the app service and created from scratch and it still receives the same error. \r\n\r\nFrom stdout:\r\nFail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \"0HLH7KQCG9CU5\", Request id \"0HLH7KQCG9CU5:00000001\": An unhandled exception was thrown by the application.\r\nSystem.IO.FileNotFoundException: Could not load file or assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.\r\nFile name: 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' ---> System.IO.FileNotFoundException: Could not load the specified file.\r\nFile name: 'System.Runtime'\r\n   at System.Runtime.Loader.AssemblyLoadContext.ResolveUsingEvent(AssemblyName...\r\n\r\nFrom eventlog:\r\n <Event>\r\n        <System>\r\n            <Provider Name=\"IIS AspNetCore Module\"/>\r\n            <EventID>1000</EventID>\r\n            <Level>1</Level>\r\n            <Task>0</Task>\r\n            <Keywords>Keywords</Keywords>\r\n            <TimeCreated SystemTime=\"2018-10-03T07:24:21Z\"/>\r\n            <EventRecordID>1148898187</EventRecordID>\r\n            <Channel>Application</Channel>\r\n            <Computer>RD2818781BDBF9</Computer>\r\n            <Security/>\r\n        </System>\r\n        <EventData>\r\n            <Data>Application 'MACHINE/WEBROOT/APPHOST/DEV-DRINKPLATFORM-V4' with physical root 'D:\\home\\site\\wwwroot\\' created process with commandline 'dotnet .\\DP3.Drinksystem.API.dll' but either crashed or did not reponse or did not listen on the given port '14970', ErrorCode = '0x800705b4'</Data>\r\n        </EventData>\r\n    </Event>","Url":"https://github.com/aspnet/AspNetCore/issues/3578","RelatedDescription":"Open issue \"ASP.NET Core: 502.5 error on web app hosted in Azure \" (#3578)"},{"Id":"366120474","IsPullRequest":false,"CreatedAt":"2018-10-02T23:41:12","Actor":"aspnet-hello","Number":"3577","RawContent":null,"Title":"Test failure: TransportCommunicatesErrorToApplicationWhenClientDisconnectsAbnormally","State":"open","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](http://aspnetci/viewLog.html?buildId=566978&buildTypeId=XPlat_Mac_MacUniverseCoreCLR) with the following error:\r\n\r\n```\r\nSystem.TimeoutException : Operation in TransportCommunicatesErrorToApplicationWhenClientDisconnectsAbnormally timed out at /_/test/Microsoft.AspNetCore.Http.Connections.Tests/WebSocketsTests.cs:166\r\n   at System.Threading.Tasks.TaskExtensions.OrTimeout(Task task, TimeSpan timeout, String memberName, String filePath, Nullable`1 lineNumber) in /_/test/Microsoft.AspNetCore.SignalR.Tests.Utils/TaskExtensions.cs:line 38\r\n   at Microsoft.AspNetCore.Http.Connections.Tests.WebSocketsTests.TransportCommunicatesErrorToApplicationWhenClientDisconnectsAbnormally() in /_/test/Microsoft.AspNetCore.Http.Connections.Tests/WebSocketsTests.cs:line 168\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\n| [0.131s] TestLifetime Information: Starting test TransportCommunicatesErrorToApplicationWhenClientDisconnectsAbnormally at 2018-10-02T23:14:59\r\n| [0.250s] TestLifetime Information: Starting test TransportCommunicatesErrorToApplicationWhenClientDisconnectsAbnormally at 2018-10-02T23:15:00\r\n| [5.972s] TestLifetime Information: Finished test TransportCommunicatesErrorToApplicationWhenClientDisconnectsAbnormally in 5.7223159s\r\n| [7.004s] TestLifetime Information: Finished test TransportCommunicatesErrorToApplicationWhenClientDisconnectsAbnormally in 6.8794734s\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on master.\r\n\r\nCC @Eilon (because the bot doesn't know who else to pick)","Url":"https://github.com/aspnet/AspNetCore/issues/3577","RelatedDescription":"Open issue \"Test failure: TransportCommunicatesErrorToApplicationWhenClientDisconnectsAbnormally\" (#3577)"},{"Id":"366002303","IsPullRequest":false,"CreatedAt":"2018-10-02T17:42:04","Actor":"Norgerman","Number":"3576","RawContent":null,"Title":"[proposal] Pbkdf2 support byte array as password","State":"closed","Body":"The `KeyDerivation.Pbkdf2` now takes string as password. But in my case, I need the method to take byte[] as password. `Encoding.UTF8.GetBytes` will failed when read invalid bytes.","Url":"https://github.com/aspnet/AspNetCore/issues/3576","RelatedDescription":"Closed issue \"[proposal] Pbkdf2 support byte array as password\" (#3576)"}],"ResultType":"GitHubIssue"},"Mvc-Issues":{"Issues":[{"Id":"368375182","IsPullRequest":false,"CreatedAt":"2018-10-10T00:01:19","Actor":"Eilon","Number":"8575","RawContent":null,"Title":"Disable \"Automatic HTTP 400 responses\" for an individual action","State":"closed","Body":"_From @simonvane on Tuesday, 09 October 2018 11:37:17_\r\n\r\nThe \"Automatic HTTP 400 responses\" functionality added in ASP.NET Core 2.1 is working out really well in most cases. However, I have one action where I need to do some pre-processing before the validation run.\r\n\r\nI don't want to lose the functionality for all actions by setting SuppressModelStateInvalidFilter = true. I'd like to be able to say \"don't validate\" for this action, perhaps with a SuppressModelStateInvalidFilterAttribute on the action.\r\n\r\nThat way I could retain the benefit but handle special cases myself.\r\n\r\nIs there a way to achieve this at the moment?\r\n\r\nThank you.\r\n\r\n_Copied from original issue: aspnet/Home#3600_","Url":"https://github.com/aspnet/Mvc/issues/8575","RelatedDescription":"Closed issue \"Disable \"Automatic HTTP 400 responses\" for an individual action\" (#8575)"},{"Id":"368430968","IsPullRequest":true,"CreatedAt":"2018-10-09T22:59:35","Actor":"JamesNK","Number":"8576","RawContent":null,"Title":"Fix PageRouteTransformerConvention with custom page routes","State":"open","Body":"Added a test, found a bug, fixed the bug!","Url":"https://github.com/aspnet/Mvc/pull/8576","RelatedDescription":"Open PR \"Fix PageRouteTransformerConvention with custom page routes\" (#8576)"},{"Id":"367507125","IsPullRequest":true,"CreatedAt":"2018-10-09T19:20:19","Actor":"dougbu","Number":"8565","RawContent":null,"Title":"Create a single Microsoft.Extensions.ApiDescription.Client package","State":"closed","Body":" - #8428\r\n- add signing-related and PackageVerifier configuration for new package\r\n- remove packaging configuration from dotnet-getdocument project\r\n- adjust `dotnet-getdocument` invocation to its new location\r\n- remove use of nonexistent (ignored) `dotnet-getdocument --no-build` option\r\n\r\nRemove `--uri` feature from `dotnet-getdocument`\r\n- reduce dependencies from Microsoft.AspNetCore.TestHost to Microsoft.AspNetCore.Hosting.Abstractions\r\n  - assume web site depends on that\r\n- merge `DownloadFileCore` into `DownloadFile`\r\n- remove other unecessary code e.g. `WrappedException` was never `throw`n\r\n\r\nnits:\r\n- clean up `Project` and the metadata it fetches\r\n- remove unnecessary `.props` and `.targets` files\r\n\r\nalso:\r\nUse Internal.AspNetCore.Sdk as an MSBuild SDK in new projects\r\n- follow-up to 5bddd226a3","Url":"https://github.com/aspnet/Mvc/pull/8565","RelatedDescription":"Closed or merged PR \"Create a single Microsoft.Extensions.ApiDescription.Client package\" (#8565)"},{"Id":"366985998","IsPullRequest":true,"CreatedAt":"2018-10-09T14:28:05","Actor":"effyteva","Number":"8554","RawContent":null,"Title":"Redesign the ViewEngine to be async","State":"closed","Body":"Hi,\r\nRegarding issue #7416 , I believe this covers most of it.\r\nAs far as I've noticed, the only remaining Sync parts of the view engine are two default display actions, CollectionTemplate and ObjectTemplate, as I didn't want to pull in a bigger update (which actually contains code change, except for adding Async methods).\r\nThis also can be easily resolved by changing the GetDefaultActions to Async (it's private anyway), and updating both collections of _defaultDisplayActions and _defaultEditorActions to a Func returning a Task. I could create another pull request for this as well if needed.\r\nHope this can be merged and pushed into the 2.2 release.\r\n\r\nThanks guys,\r\nEffy","Url":"https://github.com/aspnet/Mvc/pull/8554","RelatedDescription":"Closed or merged PR \"Redesign the ViewEngine to be async\" (#8554)"},{"Id":"368210128","IsPullRequest":false,"CreatedAt":"2018-10-09T13:36:31","Actor":"hez2010","Number":"8574","RawContent":null,"Title":"Support pulgins in razor pages","State":"closed","Body":"#### Is this a Bug or Feature request?:\r\nFeature Request\r\n\r\n#### Description of the problem:\r\nCurrently the content in a node will be rendered as what it has been written in cshtml files. I hope that you can provide the ability to use plugins.\r\n\r\nFor example, assuming we have a script compiler babel-loader and a UI library material-design:\r\n```html\r\n@{\r\n    var babeloption = new {\r\n        Options = new { \r\n            presets = new [] {\"babel-presets-env\" },\r\n            option = new [] { targets = new { ie = \"11\" } } \r\n        }\r\n    };\r\n}\r\n<script asp-plugin-babel-loader=\"@babeloption\">\r\n.... // The scripts in this node will be preprocessed by plugin babel-loader with option babeloption.Options before final rendering. \r\n</script>\r\n\r\n@{\r\n    var mdoption = new {\r\n        RenderAs = \"md\" // then we can use components in the library with prefix \"md:\"\r\n    };\r\n}\r\n\r\n<div asp-plugin-material-design=\"@mdoption\">\r\n   <md:button> ... </md:button>\r\n</div>\r\n\r\n<xxx asp-plugin-[plugin name]=\"[options]\">\r\n</xxx>\r\n```\r\n\r\nThe plugins can be installed from nuget or referenced from other .net standard assemblies. \r\n\r\nThis feature will brings a lot of features such as js minimize, browser polyfill, UI libraries and so on in the future (it needs supports both from official and community) and also razor will be a great solution for server rendering. \r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`: 2.1.4\r\n","Url":"https://github.com/aspnet/Mvc/issues/8574","RelatedDescription":"Closed issue \"Support pulgins in razor pages\" (#8574)"},{"Id":"368094038","IsPullRequest":false,"CreatedAt":"2018-10-09T08:24:38","Actor":"AlexeyEvlampiev","Number":"8573","RawContent":null,"Title":"Routing does not work for URI templates containing the \"azuredeploy\" child segment","State":"open","Body":"#### Is this a Bug or Feature request?:\r\nBug\r\n\r\n#### Steps to reproduce (preferably a link to a GitHub repo with a repro project):\r\n\r\n- Create  the following controller:\r\n```csharp\r\nnamespace WebApplication1.Controllers\r\n{\r\n    using System.Collections.Generic;\r\n    using Diesel.Core;\r\n    using Microsoft.AspNetCore.Mvc;\r\n\r\n    [ApiController]\r\n    [Route(\"api/brokers\")]    \r\n    public class BrokersController : ControllerBase\r\n    {\r\n        [Route(\"{brokerId:required}/{resource:regex(^azuredeplo\\\\w)}\")]\r\n        [HttpGet()]\r\n        public IEnumerable<string> Get(string brokerId)\r\n        {\r\n            return new string[] { \"value1\", \"value2\" };\r\n        }\r\n    }\r\n}\r\n```\r\n- Browse to:\r\n1) \"api/brokers/my-broker/azuredeplox\"\r\n2) \"api/brokers/my-broker/azuredeploy\"\r\n3) \"api/brokers/my-broker/azuredeploz\"\r\n\r\nExpected: all 3 requests are routed to the \"Get\" action\r\nActual: \"api/brokers/my-broker/azuredeploy\" requests result in 404 (not found)\r\n\r\n#### Description of the problem:\r\nThe \"api/brokers/{brokerId}/azuredeploy\" route cannot be established\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`:\r\nMicrosoft.AspNetCore.App (2.1.1)\r\n\r\n<!--\r\n                                    --- NOTE ---\r\n1.  Try enabling logging (in the most verbose level) and see if the details help you in fixing\r\n    the issue you are seeing. Share the logs too if it helps in diagnosing the issue faster.\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging\r\n\r\n2.  If you are seeing an exception, include the full exceptions details (message and stack trace).\r\n    More info: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/error-handling\r\n\r\n3.  If you believe you have an issue that affects the security of the platform please do\r\n    not create an issue, instead email your issue to 'secure@microsoft.com'. Your report may\r\n    be eligible for our bug bounty. More info: https://technet.microsoft.com/en-us/mt764065.aspx\r\n-->\r\n","Url":"https://github.com/aspnet/Mvc/issues/8573","RelatedDescription":"Open issue \"Routing does not work for URI templates containing the \"azuredeploy\" child segment\" (#8573)"},{"Id":"368024193","IsPullRequest":false,"CreatedAt":"2018-10-09T03:10:59","Actor":"austindrenski","Number":"8572","RawContent":null,"Title":"MVC app crashes in release but not in debug","State":"open","Body":"## Problem\r\n\r\nAn MVC application crashes in release mode (but not in debug mode) given the following conditions:\r\n1. The app is run in release mode\r\n2. The view has a model, but no model is passed to the `ViewResult`\r\n3. The view model has a property that is a `readonly struct`\r\n4. The `readonly struct` property is used in an `input` tag-helper\r\n\r\nI'm not quite sure what I'm looking at here, but the exception seems to occur outside of the normal request pipeline and does not seem to be catchable from within the MVC app. Naively, it looks like the .NET Core runtime itself is crashing over some reflection calls made when the `input` tag helper is executed.\r\n\r\n## Repro\r\nI've put together a small repro here: https://github.com/austindrenski/mvc_view_model_bug\r\n\r\n1. `dotnet run -c Release`\r\n2. `http://localhost:5000/Example/Index`\r\n3. `echo $LASTEXITCODE`\r\n\r\n```\r\nPS mvc_view_model_bug> dotnet run -c Release\r\n\r\nHosting environment: Production\r\nContent root path: mvc_view_model_bug\\bin\\Release\\netcoreapp2.1\\\r\nNow listening on: http://localhost:5000\r\nNow listening on: https://localhost:5001\r\nApplication started. Press Ctrl+C to shut down.\r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]\r\n      Request starting HTTP/1.1 GET http://localhost:5000/Example/Index\r\ninfo: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[1]\r\n      Route matched with {action = \"Index\", controller = \"Example\"}. Executing action mvc_view_model_bug.ExampleController.Index (mvc_view_model_bug)\r\ninfo: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[1]\r\n      Executing action method mvc_view_model_bug.ExampleController.Index (mvc_view_model_bug) - Validation state: Valid\r\ninfo: Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker[2]\r\n      Executed action method mvc_view_model_bug.ExampleController.Index (mvc_view_model_bug), returned result Microsoft.AspNetCore.Mvc.ViewResult in 0.3802ms.\r\ninfo: Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor[1]\r\n      Executing ViewResult, running view Index.cshtml.\r\n\r\nPS mvc_view_model_bug> echo $LASTEXITCODE\r\n\r\n-1073741819\r\n```\r\n\r\n## Version\r\n\r\n__OS:__ Windows 10.0.17134.0\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <LangVersion>latest</LangVersion>\r\n    <OutputType>exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" Version=\"2.1.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```","Url":"https://github.com/aspnet/Mvc/issues/8572","RelatedDescription":"Open issue \"MVC app crashes in release but not in debug\" (#8572)"},{"Id":"367421463","IsPullRequest":true,"CreatedAt":"2018-10-09T01:05:59","Actor":"dotnet-maestro-bot","Number":"8559","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @rynowak\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8559","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#8559)"},{"Id":"367988021","IsPullRequest":true,"CreatedAt":"2018-10-09T01:05:36","Actor":"rynowak","Number":"8571","RawContent":null,"Title":"This is a manual merge from release/2.2 to master","State":"closed","Body":"","Url":"https://github.com/aspnet/Mvc/pull/8571","RelatedDescription":"Closed or merged PR \"This is a manual merge from release/2.2 to master\" (#8571)"},{"Id":"367574767","IsPullRequest":true,"CreatedAt":"2018-10-08T22:45:33","Actor":"rynowak","Number":"8568","RawContent":null,"Title":"React to routing changes","State":"closed","Body":"","Url":"https://github.com/aspnet/Mvc/pull/8568","RelatedDescription":"Closed or merged PR \"React to routing changes\" (#8568)"},{"Id":"367922513","IsPullRequest":false,"CreatedAt":"2018-10-08T19:27:50","Actor":"pranavkm","Number":"8570","RawContent":null,"Title":"[Discussion] 3.0 - Removing Microsoft.AspNetCore.Mvc.WebApiCompatShim","State":"open","Body":"The Microsoft.AspNetCore.Mvc.WebApiCompatShim (WebApiCompatShim) package provides partial compatibility in ASP.NET Core with ASP.NET Web API 2 to simplify migrating existing Web API implementations to ASP.NET Core. However, apps using the WebApiCompatShim do not benefit from the API related features shipping in recent ASP.NET Core releases, such as improved Open API Spec genertaion, standardized error handling, and client code generation. To better focus our API efforts in 3.0, we plan to remove WebApiCompatShim. We recommend that existing applications using the WebApiCompatShim migrate to the newer `[ApiController]` model.","Url":"https://github.com/aspnet/Mvc/issues/8570","RelatedDescription":"Open issue \"[Discussion] 3.0 - Removing Microsoft.AspNetCore.Mvc.WebApiCompatShim\" (#8570)"},{"Id":"367015954","IsPullRequest":true,"CreatedAt":"2018-10-08T17:41:05","Actor":"sqdavid","Number":"8556","RawContent":null,"Title":"Fixing issue #8367","State":"closed","Body":"Summary of the changes\r\n - After Uri.TryCreate, concatenate the Fragment using the LocalPath separator.\r\n\r\nAddresses #8367 ","Url":"https://github.com/aspnet/Mvc/pull/8556","RelatedDescription":"Closed or merged PR \"Fixing issue #8367\" (#8556)"},{"Id":"367473542","IsPullRequest":false,"CreatedAt":"2018-10-08T08:11:19","Actor":"WhiteKarma","Number":"8563","RawContent":null,"Title":"argument cannot be null exception after migrating to 2.2preview2 on app.UseMvc","State":"closed","Body":"in ConfigureServices i have:\r\n\r\nservices.AddMvc(\r\n    options =>\r\n    {\r\n        options.OutputFormatters.Clear();\r\n        options.OutputFormatters.Insert(0, formatter);                                        \r\n    }).AddJsonOptions(options => options.SerializerSettings.ContractResolver = new DefaultContractResolver())\r\n      .SetCompatibilityVersion(version: CompatibilityVersion.Version_2_2); \r\n\r\n\r\nin public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory, IMailService mailService)\r\n\r\n            app.UseMvc(routes =>\r\n            {\r\n                routes.MapRoute(\r\n                    name: \"default\",\r\n                    template: \"{controller=Home}/{action=Index}/{id?}\");\r\n            });\r\n\r\nand the following exception occurs:\r\n\r\nException has occurred: CLR/System.ArgumentNullException\r\nAn exception of type 'System.ArgumentNullException' occurred in System.Private.CoreLib.dll but was not handled in user code: 'Value cannot be null.'\r\n   at System.Threading.Monitor.ReliableEnter(Object obj, Boolean& lockTaken)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.UpdateCollection()\r\n   at Microsoft.Extensions.Primitives.ChangeToken.<>c__DisplayClass0_0.<OnChange>b__0(Object s)\r\n   at System.Threading.CancellationTokenSource.InternalRegister(Action`1 callback, Object stateForCallback, SynchronizationContext syncContext, ExecutionContext executionContext)\r\n   at System.Threading.CancellationToken.Register(Action`1 callback, Object state, Boolean useSyncContext, Boolean useExecutionContext)\r\n   at Microsoft.Extensions.Primitives.CompositeChangeToken.RegisterChangeCallback(Action`1 callback, Object state)\r\n   at Microsoft.Extensions.Primitives.ChangeToken.OnChange(Func`1 changeTokenProducer, Action changeTokenConsumer)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider..ctor(IEnumerable`1 actionDescriptorProviders, IEnumerable`1 actionDescriptorChangeProviders)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitSingleton(SingletonCallSite singletonCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitSingleton(SingletonCallSite singletonCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitTransient(TransientCallSite transientCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitIEnumerable(IEnumerableCallSite enumerableCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitSingleton(SingletonCallSite singletonCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitScoped(ScopedCallSite scopedCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitSingleton(SingletonCallSite singletonCallSite, ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(IServiceCallSite callSite, TArgument argument)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine.<>c__DisplayClass1_0.<RealizeService>b__0(ServiceProviderEngineScope scope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType, ServiceProviderEngineScope serviceProviderEngineScope)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService(IServiceProvider provider, Type serviceType)\r\n   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService[T](IServiceProvider provider)\r\n   at Microsoft.AspNetCore.Builder.MvcApplicationBuilderExtensions.UseMvc(IApplicationBuilder app, Action`1 configureRoutes)\r\n   at NalandaERP.Startup.Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory, IMailService mailService)\r\n\r\nNot a clue to which argument is null. Can you please help?\r\n\r\n\r\n","Url":"https://github.com/aspnet/Mvc/issues/8563","RelatedDescription":"Closed issue \"argument cannot be null exception after migrating to 2.2preview2 on app.UseMvc\" (#8563)"},{"Id":"367635285","IsPullRequest":false,"CreatedAt":"2018-10-08T04:25:19","Actor":"JamesNK","Number":"8569","RawContent":null,"Title":"Update Newtonsoft.Json.Bson","State":"open","Body":"The version of Newtonsoft.Json.Bson used by MVC - https://www.nuget.org/packages/Newtonsoft.Json.Bson/1.0.1 - does not support `netstandard2.0`, and so brings in a big dependency graph.\r\n\r\nI'm going to release a new version of Newtonsoft.Json.Bson soon with netstandard2.0 and SourceLink. Should update MVC to use it when it is available.\r\n\r\n// @rynowak ","Url":"https://github.com/aspnet/Mvc/issues/8569","RelatedDescription":"Open issue \"Update Newtonsoft.Json.Bson\" (#8569)"},{"Id":"367490143","IsPullRequest":false,"CreatedAt":"2018-10-07T23:14:44","Actor":"TheMagnificent11","Number":"8564","RawContent":null,"Title":"ValidationProblemDetails not returned when binding validation error","State":"closed","Body":"**Is this a Bug or Feature request?**\r\nBug/question about configuration\r\n\r\n**Steps to reproduce**\r\n```\r\n    public class RegistrationRequest\r\n    {\r\n        [Description(\"Given Name\")]\r\n        [MaxLength(100)]\r\n        [Required(ErrorMessage = \"Given Name is required\")]\r\n        public string GivenName { get; set; }\r\n\r\n        [MaxLength(100)]\r\n        [Required(ErrorMessage = \"Surname is required\")]\r\n        public string Surname { get; set; }\r\n\r\n        [MaxLength(255)]\r\n        [Required(ErrorMessage = \"Email is required\")]\r\n        [EmailAddress(ErrorMessage = \"Invalid email address\")]\r\n        public string Email { get; set; }\r\n\r\n        [Required(ErrorMessage = \"Password is required\")]\r\n        public string Password { get; set; }\r\n\r\n        [Description(\"Confirm Password\")]\r\n        [Compare(nameof(Password), ErrorMessage = \"Passwords do not match\")]\r\n        public string ConfirmPassword { get; set; }\r\n    }\r\n```\r\n\r\n```\r\n    public class Startup\r\n    {\r\n        public IServiceProvider ConfigureServices(IServiceCollection services)\r\n        {\r\n            ...\r\n            services.Configure<ApiBehaviorOptions>(options =>\r\n            {\r\n                options.InvalidModelStateResponseFactory = context =>\r\n                {\r\n                    var problemDetails = new ValidationProblemDetails(context.ModelState)\r\n                    {\r\n                        Instance = context.HttpContext.Request.Path,\r\n                        Status = (int)HttpStatusCode.BadRequest,\r\n                        Detail = \"Please refer to the errors property for additional details\"\r\n                    };\r\n\r\n                    return new BadRequestObjectResult(problemDetails)\r\n                    {\r\n                        ContentTypes = \"applicaton/json\"\r\n                    };\r\n                };\r\n            });\r\n            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\r\n            ...\r\n        }\r\n    }\r\n```\r\n\r\n```\r\n    [ApiController]\r\n    [Authorize]\r\n    [Route(\"users\")]\r\n    public sealed class UserController : Controller\r\n    {\r\n        public UserController(\r\n            UserManager userManager,\r\n            IMapper mappingProvider)\r\n        {\r\n            Manager = userManager;\r\n            Mapper = mappingProvider;\r\n        }\r\n\r\n        private UserManager Manager { get; }\r\n        private IMapper Mapper { get; }\r\n\r\n        [HttpPost]\r\n        [AllowAnonymous]\r\n        [Consumes(\"application/json\")]\r\n        [Produces(\"application/json\")]\r\n        [ProducesResponseType(200)]\r\n        [ProducesResponseType(400, Type = typeof(ValidationProblemDetails))]\r\n        public async Task<IActionResult> Post([FromBody]ApiModels.RegistrationRequest request)\r\n        {\r\n            if (request == null) throw new ArgumentNullException(nameof(request));\r\n\r\n            var user = Mapper.Map<DataModels.User>(request);\r\n           \r\n            var result = await Manager.Create(user, request.Password); // return OperationResult\r\n\r\n            return result.ToActionResult();\r\n        }\r\n    }\r\n```\r\n\r\n```\r\n    public static class OperationResultExtensions\r\n    {\r\n        public static ValidationProblemDetails ToProblemDetails(this OperationResult result)\r\n        {\r\n            if (result == null) throw new ArgumentNullException(nameof(result));\r\n\r\n            var problemDetails = new ValidationProblemDetails()\r\n            {\r\n                Status = (int)HttpStatusCode.BadRequest\r\n            };\r\n\r\n            if (problemDetails.Errors != null)\r\n            {\r\n                result.Errors\r\n                   .ToList()\r\n                   .ForEach(i => problemDetails.Errors.Add(i.Key, i.Value.ToArray()));\r\n            }\r\n\r\n            return problemDetails;\r\n        }\r\n\r\n        public static IActionResult ToActionResult(this OperationResult result)\r\n        {\r\n            switch (result.Status)\r\n            {\r\n                case HttpStatusCode.OK:\r\n                    return new OkResult();\r\n\r\n                case HttpStatusCode.NotFound:\r\n                    return new NotFoundResult();\r\n\r\n                case HttpStatusCode.BadRequest:\r\n                    var problems = result.ToProblemDetails();\r\n                    return new BadRequestObjectResult(problems);\r\n\r\n                default:\r\n                    return new StatusCodeResult((int)result.Status);\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n\r\n**Description of the problem**\r\nI have an issue where when execution hits the controller and my code explicitly returns the `ValidationProblemDetails` response.\r\n\r\nHowever, when binding validation prevents execution getting to the controller, I get the following JSON response (standard model state validation object).\r\n```\r\n{\r\n  \"Email\": [\r\n    \"Invalid email address\"\r\n  ]\r\n}\r\n```\r\n\r\nWhy doesn't it return the validation problem details in the response?\r\n\r\n\r\n**Version `Microsoft.AspNetCore.App`**\r\n2.1.4\r\n","Url":"https://github.com/aspnet/Mvc/issues/8564","RelatedDescription":"Closed issue \"ValidationProblemDetails not returned when binding validation error\" (#8564)"},{"Id":"367436800","IsPullRequest":false,"CreatedAt":"2018-10-07T06:19:46","Actor":"mattiasw2","Number":"8562","RawContent":null,"Title":"Why does every public method in a controller have to have a [route] attribute?","State":"closed","Body":"My controller is generic, and uses HttpContext.Request.Query.\r\n\r\nMocking HttpContext.Request.Query is unnecessary hard, since all I need is a Dictionary<string, string>.\r\n\r\nSo, I divided my controller into two methods, both public, since the GtInternal is the one I use for unit testing.\r\n\r\n```\r\n        [HttpGet]\r\n        [Route(\"[controller]/{cmdName}\", Name = \"GetCmd\")]\r\n        [ProducesResponseType(typeof(Form), 200)]     // Ok\r\n        [ProducesResponseType(400)]     // BadRequest\r\n        public ActionResult<Form> Get([NotNull] string cmdName)\r\n        {\r\n            (Dictionary<string, string> args, string message0, bool ok) = ToDictionary(HttpContext.Request.Query);\r\n            if (!ok)  return BadRequest(message0);\r\n            return GetInternal(cmdName, args);\r\n        }\r\n\r\n        public ActionResult<Form> GetInternal([NotNull] string cmdName, Dictionary<string, string> args)\r\n        {\r\n            (CmdOkCancel cmd, string message0) = GetCmd(cmdName, args);\r\n            if (cmd == null) return BadRequest(message0);\r\n            (Form form, string message, bool ok) = cmd.GetFormForInput();\r\n            if (!ok) return BadRequest(message);\r\n\r\n            return form;\r\n        }\r\n```\r\n\r\nHowever, when I run it, I get the error below. Making the method private solves the problem, however, that defeats the purpose, since the I cannot call GetInternal from my unit tests.\r\n\r\nIs there a [NoRoute] attribute?\r\n\r\n`\r\nInvalidOperationException: Action 'sss6.Controllers.CmdController.GtInternal (sss6)' does not have an attribute route. Action methods on controllers annotated with ApiControllerAttribute must be attribute routed.\r\nMicrosoft.AspNetCore.Mvc.Internal.ApiBehaviorApplicationModelProvider.EnsureActionIsAttributeRouted(bool controllerHasSelectorModel, ActionModel actionModel)\r\n`","Url":"https://github.com/aspnet/Mvc/issues/8562","RelatedDescription":"Closed issue \"Why does every public method in a controller have to have a [route] attribute?\" (#8562)"},{"Id":"367513643","IsPullRequest":false,"CreatedAt":"2018-10-07T02:17:46","Actor":"dougbu","Number":"8567","RawContent":null,"Title":"Make it possible to change when client code generation runs","State":"open","Body":"#### Is this a Bug or Feature request?\r\nEnhancement that's part of #7947\r\n\r\n#### Description of the problem\r\nCurrently, any project that references the Microsoft.Extensions.ApiDescription.Client will have the `ServiceFileReferenceGenerator` and related targets run unconditionally before the `BeforeCompile` target. Make this conditional so that users can configure the targets to run elsewhere in the build pipeline. For example, use `$(BuildDependsOn)`, `$(CoreBuildDependsOn)`, `$(CompileDependsOn)` or `$(CoreCompileDependsOn)` and make it conditional on a documented property.\r\n\r\nNot positive where hook should land but prepending it into `$(BuildDependsOn)` seems better than current spot because the code generation targets do not rely on other `Build` or `Compile` work.\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`\r\nSee the [features/client.code.generation](https://github.com/aspnet/Mvc/tree/feature/client.code.generation) branch. That work is intended for the 2.2 Preview 3 milestone.","Url":"https://github.com/aspnet/Mvc/issues/8567","RelatedDescription":"Open issue \"Make it possible to change when client code generation runs\" (#8567)"},{"Id":"367512133","IsPullRequest":false,"CreatedAt":"2018-10-07T01:47:30","Actor":"dougbu","Number":"8566","RawContent":null,"Title":"Clean up TODOs and duplicated code in client code generation","State":"open","Body":"#### Is this a Bug or Feature request?\r\nEnhancement that's part of #7947\r\n\r\n#### Description of the problem\r\n- replace `Microsoft.DotNet.Cli.CommandLine` code with `Microsoft.Extensions.CommandLineUtils.Sources` package\r\n- replace custom lookup with `Internal.WebHostBuilderFactory.Sources` package\r\n- perhaps, replace console writing code with `Microsoft.Extensions.Logging`\r\n  - not positive because adding dependencies to the tool seems perilous\r\n\r\n#### Version of `Microsoft.AspNetCore.Mvc` or `Microsoft.AspNetCore.App` or `Microsoft.AspNetCore.All`\r\nSee the [features/client.code.generation](https://github.com/aspnet/Mvc/tree/feature/client.code.generation) branch. That work is intended for the 2.2 Preview 3 milestone.","Url":"https://github.com/aspnet/Mvc/issues/8566","RelatedDescription":"Open issue \"Clean up TODOs and duplicated code in client code generation\" (#8566)"},{"Id":"367423418","IsPullRequest":true,"CreatedAt":"2018-10-06T05:26:38","Actor":"rynowak","Number":"8560","RawContent":null,"Title":"Add security text about Host header","State":"closed","Body":"Similar changes to routing. Copy pasted the text and adjusted where necessary.","Url":"https://github.com/aspnet/Mvc/pull/8560","RelatedDescription":"Closed or merged PR \"Add security text about Host header\" (#8560)"},{"Id":"367424413","IsPullRequest":true,"CreatedAt":"2018-10-06T05:25:43","Actor":"rynowak","Number":"8561","RawContent":null,"Title":"merge release 2.2 to master","State":"closed","Body":"","Url":"https://github.com/aspnet/Mvc/pull/8561","RelatedDescription":"Closed or merged PR \"merge release 2.2 to master\" (#8561)"},{"Id":"367051744","IsPullRequest":true,"CreatedAt":"2018-10-06T04:03:55","Actor":"rynowak","Number":"8557","RawContent":null,"Title":"React to IEndpointSelectorPolicy changes","State":"closed","Body":"","Url":"https://github.com/aspnet/Mvc/pull/8557","RelatedDescription":"Closed or merged PR \"React to IEndpointSelectorPolicy changes\" (#8557)"},{"Id":"367070889","IsPullRequest":false,"CreatedAt":"2018-10-05T06:00:26","Actor":"davidfowl","Number":"8558","RawContent":null,"Title":"Storing tasks for a long time can hold onto the ExecutionContext which can leak memory (like the HttpContext)","State":"open","Body":"MVC has a couple of places where it stores Tasks in the MemoryCache or a dictionary for a long period of time. That can result in capturing the `HttpContext` and other ambient async locals which may result in a memory leak (see https://github.com/dotnet/coreclr/issues/20273).\r\n\r\nThe potential leak exists here: \r\n- https://github.com/aspnet/Mvc/blob/b156dee4f175406a7cdcaaeb2b2a393f2a6abca0/src/Microsoft.AspNetCore.Mvc.TagHelpers/CacheTagHelper.cs#L116\r\n- https://github.com/aspnet/Mvc/blob/07cc9e66c6d936cbf5f8ddf1d37fa625ab3fb365/src/Microsoft.AspNetCore.Mvc.Razor/Internal/RazorViewCompiler.cs#L196\r\n\r\ncc @pranavkm \r\n","Url":"https://github.com/aspnet/Mvc/issues/8558","RelatedDescription":"Open issue \"Storing tasks for a long time can hold onto the ExecutionContext which can leak memory (like the HttpContext)\" (#8558)"},{"Id":"367014393","IsPullRequest":true,"CreatedAt":"2018-10-05T00:09:20","Actor":"pranavkm","Number":"8555","RawContent":null,"Title":"Shortcircuit validation when using default validator provider…","State":"open","Body":"…s and no validation metadata is discovered","Url":"https://github.com/aspnet/Mvc/pull/8555","RelatedDescription":"Open PR \"Shortcircuit validation when using default validator provider…\" (#8555)"},{"Id":"366947042","IsPullRequest":true,"CreatedAt":"2018-10-04T23:23:44","Actor":"dotnet-maestro-bot","Number":"8553","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @pranavkm\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8553","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#8553)"},{"Id":"366616080","IsPullRequest":true,"CreatedAt":"2018-10-04T22:16:31","Actor":"dougbu","Number":"8549","RawContent":null,"Title":"Use Internal.AspNetCore.Sdk as an MSBuild SDK","State":"closed","Body":"- should resolve issues with occasional strange MSBuild caching issues in this repo\r\n- modeled after aspnet/Scaffolding#905\r\n- follows aspnet/BuildTools#729 recommendation to check in global.config file\r\n  - see also Microsoft/msbuild#2914","Url":"https://github.com/aspnet/Mvc/pull/8549","RelatedDescription":"Closed or merged PR \"Use Internal.AspNetCore.Sdk as an MSBuild SDK\" (#8549)"},{"Id":"366620681","IsPullRequest":true,"CreatedAt":"2018-10-04T18:25:41","Actor":"rynowak","Number":"8550","RawContent":null,"Title":"Change LinkGenerator extensions to not use Host header","State":"closed","Body":"See https://github.com/aspnet/Routing/pull/833","Url":"https://github.com/aspnet/Mvc/pull/8550","RelatedDescription":"Closed or merged PR \"Change LinkGenerator extensions to not use Host header\" (#8550)"},{"Id":"366885307","IsPullRequest":false,"CreatedAt":"2018-10-04T17:06:01","Actor":"mkArtakMSFT","Number":"8552","RawContent":null,"Title":"Throw a clearer exception when a model type has a ref-struct-typed property","State":"open","Body":"When a model type has a property of a ref-struct type, the error message that they see is pretty gnarly, and doesn't include the details about what type or property cause the problem. We need to report a clearer error.\r\n\r\nPlease see for more details: https://github.com/aspnet/Mvc/issues/8545\r\n","Url":"https://github.com/aspnet/Mvc/issues/8552","RelatedDescription":"Open issue \"Throw a clearer exception when a model type has a ref-struct-typed property\" (#8552)"},{"Id":"366623933","IsPullRequest":true,"CreatedAt":"2018-10-04T16:46:46","Actor":"dotnet-maestro-bot","Number":"8551","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @dougbu\n* @JamesNK\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8551","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#8551)"},{"Id":"366615740","IsPullRequest":true,"CreatedAt":"2018-10-04T04:55:36","Actor":"dougbu","Number":"8548","RawContent":null,"Title":"Quick fix: Remove dangling mentions of `dev` branches","State":"closed","Body":"","Url":"https://github.com/aspnet/Mvc/pull/8548","RelatedDescription":"Closed or merged PR \"Quick fix: Remove dangling mentions of `dev` branches\" (#8548)"},{"Id":"366595898","IsPullRequest":true,"CreatedAt":"2018-10-04T03:22:39","Actor":"dotnet-maestro-bot","Number":"8547","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @JamesNK\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Mvc merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Mvc.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Mvc/pull/8547","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#8547)"}],"ResultType":"GitHubIssue"},"SignalR-Issues":{"Issues":[{"Id":"368449728","IsPullRequest":false,"CreatedAt":"2018-10-10T00:33:55","Actor":"mikaelm12","Number":"3105","RawContent":null,"Title":"Discussion: SignalR Java Client Package Name Change","State":"open","Body":"This is a discussion item for https://github.com/aspnet/Announcements/issues/321. Please see the announcement for details.","Url":"https://github.com/aspnet/SignalR/issues/3105","RelatedDescription":"Open issue \"Discussion: SignalR Java Client Package Name Change\" (#3105)"},{"Id":"368429034","IsPullRequest":true,"CreatedAt":"2018-10-09T22:51:19","Actor":"mikaelm12","Number":"3104","RawContent":null,"Title":"Upgrade to RTM versioning in the Java client","State":"open","Body":"Changing from 0.1.0 to 1.0.0 👍 \r\nIssue: https://github.com/aspnet/SignalR/issues/3002","Url":"https://github.com/aspnet/SignalR/pull/3104","RelatedDescription":"Open PR \"Upgrade to RTM versioning in the Java client\" (#3104)"},{"Id":"368408477","IsPullRequest":true,"CreatedAt":"2018-10-09T22:34:20","Actor":"dotnet-maestro-bot","Number":"3102","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @mikaelm12\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/3102","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#3102)"},{"Id":"368408750","IsPullRequest":true,"CreatedAt":"2018-10-09T21:37:56","Actor":"BrennanConroy","Number":"3103","RawContent":null,"Title":"[Java] Make public API look like RxJava","State":"open","Body":"Part of https://github.com/aspnet/SignalR/issues/3073","Url":"https://github.com/aspnet/SignalR/pull/3103","RelatedDescription":"Open PR \"[Java] Make public API look like RxJava\" (#3103)"},{"Id":"368361124","IsPullRequest":true,"CreatedAt":"2018-10-09T21:28:47","Actor":"mikaelm12","Number":"3101","RawContent":null,"Title":"Remove HttpConnectionOptions","State":"closed","Body":"Removing the `HttpConnectionOptions` type as the last part of the Java client API review. Now the builder should be able to fully handle all the `HubConnection` creation options.\r\nFixes: https://github.com/aspnet/SignalR/issues/3097","Url":"https://github.com/aspnet/SignalR/pull/3101","RelatedDescription":"Closed or merged PR \"Remove HttpConnectionOptions\" (#3101)"},{"Id":"367987139","IsPullRequest":false,"CreatedAt":"2018-10-09T21:28:47","Actor":"mikaelm12","Number":"3097","RawContent":null,"Title":"[Java] Remove HttpConnectionOptions type ","State":"closed","Body":"We need to remove `HttpConnectionOptions `type and upgrade the `HubConnection `builder to replace the functionality.","Url":"https://github.com/aspnet/SignalR/issues/3097","RelatedDescription":"Closed issue \"[Java] Remove HttpConnectionOptions type \" (#3097)"},{"Id":"368355418","IsPullRequest":false,"CreatedAt":"2018-10-09T19:11:30","Actor":"ptallett","Number":"3100","RawContent":null,"Title":"Poor documentation and error messages","State":"open","Body":"I wanted to add SignalR to my existing ASP.NET Core project which was serving my Angular SPA. I started by reading this article https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-getting-started-with-signalr/\r\n\r\nwhere it clearly states that the SignalR route mapping should go at the END of the Configure method. Doing that gave me a 404 error because it was after my UseSpa method which swallows all the routes. However, I thought it might be a Cors issue, or a version mismatch. Moving those lines earlier just gave a \"Could not initialize transports\" error which sounded like it was happening too soon, so I moved it back. I noticed that putting an invalid hub name in the client made no difference, so I clearly wasn't getting through to the server.\r\n\r\n8 hours of hard slog later after reading hundreds of posts, I found one that mentioned the UseSpa swallowing the routes - if only the error had said \"Hub not found\".\r\n\r\nSo then I set about fixing the \"Could not initialize transports\" error. I tried configuring long polling, switching the version of my client library. My server was running ASP.NET Core 2.1 so that should be fine. Nothing I did would resolve the error. 4 more hours of hard slog later, I noticed that although VS was saying I was running .NET Core 2.1, it was loading some funky preview. I'd only ever installed released code on my machine so I don't know where the preview came from. If only the error had said \"Client/server version mismatch\" - surely not rocket science. So I then updated all the NuGet packages to the latest 2.1 release, but I ran into the \"Method was called with 2 arguments but was expecting 0\" error, documented in another issue, but I was making progress, it was trying to call my code. Of course my methods had the correct number of arguments but the wrong names - if only it had said \"Method not found\".\r\n\r\nSo after 12 hours of hard slog, I finally got it to work! If only the docs had been correct, if only the error messages had not just said Error negotiating: error.\r\n\r\nPlease improve the error messages and docs, SignalR is awesome!\r\n\r\nCheers,\r\nPaul","Url":"https://github.com/aspnet/SignalR/issues/3100","RelatedDescription":"Open issue \"Poor documentation and error messages\" (#3100)"},{"Id":"368104544","IsPullRequest":true,"CreatedAt":"2018-10-09T16:03:56","Actor":"Shehanka","Number":"3099","RawContent":null,"Title":"README Updated","State":"closed","Body":"LICENSE section added to the README.md","Url":"https://github.com/aspnet/SignalR/pull/3099","RelatedDescription":"Closed or merged PR \"README Updated\" (#3099)"},{"Id":"367999747","IsPullRequest":true,"CreatedAt":"2018-10-09T00:53:55","Actor":"dotnet-maestro-bot","Number":"3098","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @mikaelm12\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/3098","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#3098)"},{"Id":"367979569","IsPullRequest":true,"CreatedAt":"2018-10-09T00:31:46","Actor":"mikaelm12","Number":"3096","RawContent":null,"Title":"Change package name to com.microsoft.signalr","State":"closed","Body":"Changing the package name from `com.microsoft.aspnet.signalr` to `com.microsoft.signalr`\r\nFixes: #3091\r\n//cc @JonathanGiles look at what we're doing!","Url":"https://github.com/aspnet/SignalR/pull/3096","RelatedDescription":"Closed or merged PR \"Change package name to com.microsoft.signalr\" (#3096)"},{"Id":"367963106","IsPullRequest":false,"CreatedAt":"2018-10-09T00:31:45","Actor":"anurse","Number":"3091","RawContent":null,"Title":"Rename Java Client to com.microsoft.signalr:signalr","State":"closed","Body":"With the release of the Azure SignalR service and it's server-less model, it's entirely possible for a SignalR application to have no ASP.NET Core in it at all. As a result, the name `aspnet` in the package seems odd. Let's rename **from** `com.microsoft.aspnet:signalr` **to** `com.microsoft.signalr:signalr`.\r\n\r\nTODO: \r\n* [x] Rename the JARs/packages/etc.\r\n* [x] Get approval for the groupId `com.microsoft.signalr` from Sonatype's OSS Maven Hosting\r\n* [ ] Publish Preview 3 to the new name.","Url":"https://github.com/aspnet/SignalR/issues/3091","RelatedDescription":"Closed issue \"Rename Java Client to com.microsoft.signalr:signalr\" (#3091)"},{"Id":"367977801","IsPullRequest":true,"CreatedAt":"2018-10-08T22:57:18","Actor":"dotnet-maestro-bot","Number":"3095","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @mikaelm12\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/3095","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#3095)"},{"Id":"367976330","IsPullRequest":true,"CreatedAt":"2018-10-08T22:57:17","Actor":"mikaelm12","Number":"3094","RawContent":null,"Title":"Merge release/2.2 ","State":"closed","Body":"Java Client API Review pt2 (#3078)","Url":"https://github.com/aspnet/SignalR/pull/3094","RelatedDescription":"Closed or merged PR \"Merge release/2.2 \" (#3094)"},{"Id":"367394248","IsPullRequest":true,"CreatedAt":"2018-10-08T22:35:32","Actor":"mikaelm12","Number":"3078","RawContent":null,"Title":"Java Client API Review pt2","State":"closed","Body":"Here are the API review changes from our meeting this week!\r\n\r\nThanks @JonathanGiles for the review!","Url":"https://github.com/aspnet/SignalR/pull/3078","RelatedDescription":"Closed or merged PR \"Java Client API Review pt2\" (#3078)"},{"Id":"367966183","IsPullRequest":true,"CreatedAt":"2018-10-08T21:54:18","Actor":"bradygaster","Number":"3093","RawContent":null,"Title":"added workaround code for node.js-only users","State":"open","Body":"per request, changed incoming branch to release/2.1","Url":"https://github.com/aspnet/SignalR/pull/3093","RelatedDescription":"Open PR \"added workaround code for node.js-only users\" (#3093)"},{"Id":"367880439","IsPullRequest":true,"CreatedAt":"2018-10-08T21:53:24","Actor":"bradygaster","Number":"3087","RawContent":null,"Title":"updated js sample with temporary dependencies","State":"closed","Body":"","Url":"https://github.com/aspnet/SignalR/pull/3087","RelatedDescription":"Closed or merged PR \"updated js sample with temporary dependencies\" (#3087)"},{"Id":"367963802","IsPullRequest":false,"CreatedAt":"2018-10-08T21:44:56","Actor":"anurse","Number":"3092","RawContent":null,"Title":"Rename JavaScript client package name","State":"open","Body":"With the release of the Azure SignalR service and it's server-less model, it's entirely possible for a SignalR application to have no ASP.NET Core in it at all. As a result, the name aspnet in the package seems odd. Let's rename from `@aspnet/signalr` to something else. We can't use `signalr` though because it's already in-use by ASP.NET SignalR.\r\n\r\nIdeas:\r\n\r\n* `@microsoft/signalr`?","Url":"https://github.com/aspnet/SignalR/issues/3092","RelatedDescription":"Open issue \"Rename JavaScript client package name\" (#3092)"},{"Id":"367917864","IsPullRequest":true,"CreatedAt":"2018-10-08T19:12:26","Actor":"mikaelm12","Number":"3090","RawContent":null,"Title":"[Java] Add ability to configure headers","State":"open","Body":"Adding ability to configure headers in the Java client.\r\nFixes: https://github.com/aspnet/SignalR/issues/3064","Url":"https://github.com/aspnet/SignalR/pull/3090","RelatedDescription":"Open PR \"[Java] Add ability to configure headers\" (#3090)"},{"Id":"367610005","IsPullRequest":true,"CreatedAt":"2018-10-08T18:15:48","Actor":"dotnet-maestro-bot","Number":"3084","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @davidfowl\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/SignalR merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/SignalR.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/SignalR/pull/3084","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#3084)"},{"Id":"367895990","IsPullRequest":true,"CreatedAt":"2018-10-08T18:02:40","Actor":"BrennanConroy","Number":"3089","RawContent":null,"Title":"Add StackExchange.Redis 2.X.X package","State":"open","Body":"Some of this can be cleaned up in the 3.0 change.\r\n\r\nBasically copied all the SignalR.Redis and SignalR.Redis.Tests code into new folders and moved the TestConnectionMulitplexer file into both Test folders so the Test.Utils project wouldn't cause issues.\r\n\r\nAnd skipped/removed all the unit tests for StackExchangeRedis.Tests which is tracked by https://github.com/aspnet/SignalR/issues/3088","Url":"https://github.com/aspnet/SignalR/pull/3089","RelatedDescription":"Open PR \"Add StackExchange.Redis 2.X.X package\" (#3089)"},{"Id":"367602298","IsPullRequest":false,"CreatedAt":"2018-10-08T18:02:01","Actor":"jkotalik","Number":"3083","RawContent":null,"Title":"Remove artifact dependency for java components if Java isn't installed.","State":"closed","Body":"Trying to build universe locally and can't due to an artifact dependency:\r\n```\r\n signtool : error : Did not find modules\\SignalR\\artifacts\\build\\\\signalr-0.1.0-preview3-t00715fc90.jar at modules\\SignalR\\artifacts\\build\\\\signalr-0.1.0-preview3-t00715fc90.jar\r\n```\r\n","Url":"https://github.com/aspnet/SignalR/issues/3083","RelatedDescription":"Closed issue \"Remove artifact dependency for java components if Java isn't installed.\" (#3083)"},{"Id":"367646644","IsPullRequest":true,"CreatedAt":"2018-10-08T18:01:26","Actor":"mikaelm12","Number":"3085","RawContent":null,"Title":"Add Java Check","State":"closed","Body":"Should solve Issue: https://github.com/aspnet/SignalR/issues/3083","Url":"https://github.com/aspnet/SignalR/pull/3085","RelatedDescription":"Closed or merged PR \"Add Java Check\" (#3085)"},{"Id":"367892366","IsPullRequest":false,"CreatedAt":"2018-10-08T17:51:15","Actor":"BrennanConroy","Number":"3088","RawContent":null,"Title":"Fix skipped redis unit tests","State":"open","Body":"Updating to 2.X.X of StackExchange,Redis broke the unit tests because we can't properly mock the `ISubscriber` class.\r\n\r\nThis is for tracking https://github.com/StackExchange/StackExchange.Redis/issues/969 and fixing our unit tests once a fix has been made.","Url":"https://github.com/aspnet/SignalR/issues/3088","RelatedDescription":"Open issue \"Fix skipped redis unit tests\" (#3088)"},{"Id":"367858606","IsPullRequest":true,"CreatedAt":"2018-10-08T16:51:02","Actor":"lianying","Number":"3086","RawContent":null,"Title":"Lay/server invoke","State":"closed","Body":"Add server side invoke single client and wait for a result. #3045 \r\n\r\nFor client side: \r\n1、Make InvocatonHandler can return an object.\r\n2、Send a CompetionMessage to server when an invocation hava non-null result.\r\n\r\nFor server side:\r\n1、Add a state to HubConnectionContext which can store invocations.\r\n2、Add CompetionMessage process to HubDispatcher.","Url":"https://github.com/aspnet/SignalR/pull/3086","RelatedDescription":"Closed or merged PR \"Lay/server invoke\" (#3086)"},{"Id":"367527406","IsPullRequest":true,"CreatedAt":"2018-10-08T00:27:46","Actor":"ming13","Number":"3080","RawContent":null,"Title":"Refine documentation formatting","State":"closed","Body":"","Url":"https://github.com/aspnet/SignalR/pull/3080","RelatedDescription":"Closed or merged PR \"Refine documentation formatting\" (#3080)"},{"Id":"367597330","IsPullRequest":false,"CreatedAt":"2018-10-07T21:51:03","Actor":"aspnet-hello","Number":"3082","RawContent":null,"Title":"Test failure: StartSkipsOverTransportsThatTheClientDoesNotUnderstand","State":"open","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](http://aspnetci/viewLog.html?buildId=572202&buildTypeId=Releases_22xPublic_OsxUniverse) with the following error:\r\n\r\n```\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\n   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)\r\n   at System.Collections.Generic.Dictionary`2.TryGetValue(TKey key, TValue& value)\r\n   at Castle.DynamicProxy.ModuleScope.GetFromCache(CacheKey key)\r\n   at Castle.DynamicProxy.Generators.BaseProxyGenerator.GetFromCache(CacheKey key)\r\n   at Castle.DynamicProxy.Generators.BaseProxyGenerator.ObtainProxyType(CacheKey cacheKey, Func`3 factory)\r\n   at Castle.DynamicProxy.Generators.ClassProxyGenerator.GenerateCode(Type[] interfaces, ProxyGenerationOptions options)\r\n   at Castle.DynamicProxy.DefaultProxyBuilder.CreateClassProxyType(Type classToProxy, Type[] additionalInterfacesToProxy, ProxyGenerationOptions options)\r\n   at Castle.DynamicProxy.ProxyGenerator.CreateClassProxyType(Type classToProxy, Type[] additionalInterfacesToProxy, ProxyGenerationOptions options)\r\n   at Castle.DynamicProxy.ProxyGenerator.CreateClassProxy(Type classToProxy, Type[] additionalInterfacesToProxy, ProxyGenerationOptions options, Object[] constructorArguments, IInterceptor[] interceptors)\r\n   at Moq.Proxy.CastleProxyFactory.CreateProxy(Type mockType, ICallInterceptor interceptor, Type[] interfaces, Object[] arguments)\r\n   at Moq.Mock`1.<InitializeInstance>b__20_0()\r\n   at Moq.PexProtector.Invoke(Action action)\r\n   at Moq.Mock`1.InitializeInstance()\r\n   at Moq.Mock`1.OnGetObject()\r\n   at Moq.Mock.GetObject()\r\n   at Moq.Mock.get_Object()\r\n   at Moq.Mock`1.get_Object()\r\n   at Microsoft.AspNetCore.SignalR.Client.Tests.HttpConnectionTests.Negotiate.StartSkipsOverTransportsThatTheClientDoesNotUnderstand() in /_/test/Microsoft.AspNetCore.SignalR.Client.Tests/HttpConnectionTests.Negotiate.cs:line 330\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.2.\r\n\r\nCC @muratg","Url":"https://github.com/aspnet/SignalR/issues/3082","RelatedDescription":"Open issue \"Test failure: StartSkipsOverTransportsThatTheClientDoesNotUnderstand\" (#3082)"},{"Id":"367579721","IsPullRequest":false,"CreatedAt":"2018-10-07T18:22:38","Actor":"devrajeev","Number":"3081","RawContent":null,"Title":"SignalR Client Error java.lang.NoClassDefFoundError: com.microsoft.aspnet.signalr.-$$Lambda$CallbackMap$V5Uq2tEgd64-ZwWFXygwi8ZeV4I","State":"open","Body":"I am facing the below error while trying to use SignalR Client in android application 👎 \r\n**Error java.lang.NoClassDefFoundError: com.microsoft.aspnet.signalr.-$$Lambda$CallbackMap$V5Uq2tEgd64-ZwWFXygwi8ZeV4I**\r\n\r\nDependency I used for SignalR Android Client in build.gradle file\r\nimplementation 'com.microsoft.aspnet:signalr:0.1.0-preview1-35029'\r\n\r\nHere throwing that error 👎 \r\n\r\n> hubConnection.on(\"ReceiveMessage\", (message)-> {\r\n> \r\n>         getActivity().runOnUiThread(new Runnable() {\r\n>             @Override\r\n>             public void run() {\r\n>                 Log.d(\"MessageReceived\",message);\r\n>                 arrayAdapter.add(senderName + \" : \" +message);\r\n>                 arrayAdapter.notifyDataSetChanged();\r\n>             }\r\n>         });\r\n>     }, String.class);\r\n\r\nError Source for reference 👎 \r\n\r\nFind below error source\r\n\r\n> **10-07 23:24:39.425 18779-18779/com.cabieo.cabieoapp I/art: Rejecting re-init on previously-failed class java.lang.Class<com.microsoft.aspnet.signalr.-$$Lambda$CallbackMap$V5Uq2tEgd64-ZwWFXygwi8ZeV4I>\r\n> 10-07 23:24:39.425 18779-18779/com.cabieo.cabieoapp D/AndroidRuntime: Shutting down VM\r\n> \r\n> --------- beginning of crash\r\n> 10-07 23:24:39.600 18779-18779/com.cabieo.cabieoapp E/AndroidRuntime: FATAL EXCEPTION: main\r\n> Process: com.cabieo.cabieoapp, PID: 18779\r\n> java.lang.NoClassDefFoundError: com.microsoft.aspnet.signalr.-$$Lambda$CallbackMap$V5Uq2tEgd64-ZwWFXygwi8ZeV4I\r\n> at com.microsoft.aspnet.signalr.CallbackMap.put(CallbackMap.java:15)\r\n> at com.microsoft.aspnet.signalr.HubConnection.on(HubConnection.java:219)\r\n> at com.cabieo.cabieoapp.Fragments.ChatHomeFragment.onCreateView(ChatHomeFragment.java:70)\r\n> at android.support.v4.app.Fragment.performCreateView(Fragment.java:2354)\r\n> at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1419)\r\n> at android.support.v4.app.FragmentManagerImpl.moveFragmentToExpectedState(FragmentManager.java:1740)\r\n> at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1809)\r\n> at android.support.v4.app.BackStackRecord.executeOps(BackStackRecord.java:799)\r\n> at android.support.v4.app.FragmentManagerImpl.executeOps(FragmentManager.java:2580)\r\n> at android.support.v4.app.FragmentManagerImpl.executeOpsTogether(FragmentManager.java:2367)\r\n> at android.support.v4.app.FragmentManagerImpl.removeRedundantOperationsAndExecute(FragmentManager.java:2322)\r\n> at android.support.v4.app.FragmentManagerImpl.execPendingActions(FragmentManager.java:2229)\r\n> at android.support.v4.app.FragmentManagerImpl$1.run(FragmentManager.java:700)\r\n> at android.os.Handler.handleCallback(Handler.java:742)\r\n> at android.os.Handler.dispatchMessage(Handler.java:95)\r\n> at android.os.Looper.loop(Looper.java:157)\r\n> at android.app.ActivityThread.main(ActivityThread.java:5571)\r\n> at java.lang.reflect.Method.invoke(Native Method)\r\n> at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:745)\r\n> at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:635)\r\n> 10-07 23:24:39.607 5240-5310/? I/octvm_klo: klo lock**\r\n\r\n","Url":"https://github.com/aspnet/SignalR/issues/3081","RelatedDescription":"Open issue \"SignalR Client Error java.lang.NoClassDefFoundError: com.microsoft.aspnet.signalr.-$$Lambda$CallbackMap$V5Uq2tEgd64-ZwWFXygwi8ZeV4I\" (#3081)"},{"Id":"367462375","IsPullRequest":false,"CreatedAt":"2018-10-06T14:33:43","Actor":"sidatacom","Number":"3079","RawContent":null,"Title":"[Forms][iOS] Error CS1703 Multiple assemblies with equivalent identity","State":"open","Body":"I have a Xamarin cross client project which contain signalr. If i add the nuget package Microsoft.AspNetCore.SignalR.Protocols.MessagePack (all Versions) i get this error.\r\n\r\nthe package includes the reference to System.Reflection.Emit.\r\n\r\ni found some workarounds to fix the error for example this:\r\n\r\n```\r\n<PackageReference Include=\"System.Reflection.Emit\">\r\n  <Version>4.3.0</Version>\r\n  <ExcludeAssets>all</ExcludeAssets>\r\n</PackageReference>\r\n\r\n```\r\nbut it does not work i get an runtime error if i create an instance of an hub.\r\n\r\nthe nuget package is in a .net standard 2.0 Assembly which referenced.\r\n\r\nplease can someone remove the reference ?\r\n\r\nThx","Url":"https://github.com/aspnet/SignalR/issues/3079","RelatedDescription":"Open issue \"[Forms][iOS] Error CS1703 Multiple assemblies with equivalent identity\" (#3079)"},{"Id":"367378095","IsPullRequest":false,"CreatedAt":"2018-10-05T21:43:08","Actor":"muratg","Number":"3077","RawContent":null,"Title":"React to the new StackExchange.Redis v2.0 package ","State":"open","Body":"StackExchange released a new Redis library `StackExchange.Redis` V2.0.x\r\n\r\nWe'll be creating a new package: `Microsoft.AspNetCore.SignalR.StackExchangeRedis` which uses that. \r\n\r\ncc @anurse @Tratcher @DamianEdwards @Eilon ","Url":"https://github.com/aspnet/SignalR/issues/3077","RelatedDescription":"Open issue \"React to the new StackExchange.Redis v2.0 package \" (#3077)"},{"Id":"367377976","IsPullRequest":false,"CreatedAt":"2018-10-05T21:42:40","Actor":"muratg","Number":"3076","RawContent":null,"Title":"Remove the old Redis dependency","State":"open","Body":"We're adding a new dependency in https://github.com/aspnet/SignalR/issues/3077 for 2.2.\r\n\r\nIn 3.0, let's remove `Microsoft.AspNetCore.SignalR.Redis` package. \r\n\r\ncc @anurse @Tratcher @DamianEdwards @Eilon ","Url":"https://github.com/aspnet/SignalR/issues/3076","RelatedDescription":"Open issue \"Remove the old Redis dependency\" (#3076)"}],"ResultType":"GitHubIssue"},"Identity-Issues":{"Issues":[{"Id":"366234056","IsPullRequest":false,"CreatedAt":"2018-10-09T11:47:10","Actor":"flatproject","Number":"1989","RawContent":null,"Title":"Question: Can the cookies be customised to exclude dashes?","State":"closed","Body":"I have two apps on Azure which work great. I recently added an Application Gateway with firewall and IPS/IDS and since then any identity cookies or cookies in general that contain a double dash \"--\" are getting blocked because they match the OWASP rule \"SQL Comment Sequence Detected cookies\". I know according to [RFC6265](https://tools.ietf.org/html/rfc6265#section-4.1.1) that a hyphen is an allowed token but is there any way to customise the cookies not to include any hyphens?\r\n\r\nI have disabled the rule but i would feel more confident if i could actually fix the cookies and re-enable the rule.","Url":"https://github.com/aspnet/Identity/issues/1989","RelatedDescription":"Closed issue \"Question: Can the cookies be customised to exclude dashes?\" (#1989)"},{"Id":"367967727","IsPullRequest":true,"CreatedAt":"2018-10-08T22:00:06","Actor":"ryanbrandenburg","Number":"1999","RawContent":null,"Title":"Update Jquery.validation.Unobtrusive","State":"open","Body":"Part of https://github.com/aspnet/Templating/issues/32.\r\n\r\nThings I also did while I was at it:\r\n\r\n- Remove referenced to Bower (same as we're doing in templating).\r\n- Remove site.min.* files (same as we did in templating).\r\n- Move to CDNJS from https://ajax.aspnetcdn.com (same as we did in templating).\r\n\r\n@javiercn let me know if any of this needs to remain unchanged do to legacy. For example, should we just revert all the changes I made in */V3?","Url":"https://github.com/aspnet/Identity/pull/1999","RelatedDescription":"Open PR \"Update Jquery.validation.Unobtrusive\" (#1999)"},{"Id":"367932504","IsPullRequest":false,"CreatedAt":"2018-10-08T20:00:40","Actor":"ryanbrandenburg","Number":"1998","RawContent":null,"Title":"License headers incorrect","State":"open","Body":"While working on updating Identity to the newest jquery.validation.unobtrusive I noticed that the license headers [on some files](https://github.com/aspnet/Identity/search?l=C%23&q=%22Copyright+%28c%29+Microsoft%22) doesn't match, reporting that the license is held by Microsoft instead of the .NET Foundation.\r\n\r\nCC @Eilon for license issues, @javiercn since we already talked about this a bit.","Url":"https://github.com/aspnet/Identity/issues/1998","RelatedDescription":"Open issue \"License headers incorrect\" (#1998)"},{"Id":"367660742","IsPullRequest":false,"CreatedAt":"2018-10-08T07:51:51","Actor":"cryptotrain","Number":"1997","RawContent":null,"Title":"User Roles not being added as Role Type claims on sign in (Identity Core) (Bug? / User Error?)","State":"closed","Body":"Hello,\r\nI believe I may have found a bug or I simply have a configuration issue, but after trolling through the MSDN Documentation for a couple of days and testing/trying, I cannot seem to figure this out.\r\n\r\nMy StackOverflow Question: https://stackoverflow.com/questions/52686139/asp-net-core-2-1-identitycore-role-claims-not-being-added-on-user-sign-in\r\n\r\nI'm using **ASP.Net Core 2.1** with **IdentityCore Service**, the application is a pure API, no views at all. For authentication I'm purely using **Steam authentication** (No User/Pass login) provided by, https://github.com/aspnet-contrib/AspNet.Security.OpenId.Providers\r\n\r\n**The problem** is that when I add a Role to a user (I've already got roles seeded and I've added my own steam account to the Admin Role), the role type claims are not being added on login, therefore when an admin user attempts to access an API route protected by [Authorize(Roles = \"Admin\") I'm being returned an Unauthorized Redirect.\r\n\r\nBelow I have added all code snippets I think is required (feel free to request more).\r\n\r\nIf I use (I am currently using this as a temporary solution, but it is not ideal for future development);\r\n\r\n    services.AddIdentity<User, Role>()\r\n       .AddEntityFrameworkStores<RSContext>()\r\n       .AddSignInManager<SignInManager<User>>()\r\n       .AddRoleManager<RoleManager<Role>>()\r\n       .AddDefaultTokenProviders();\r\n\r\nThe application correctly adds the role claims on user sign in (and the Authorize attributes work), using all existing code from AuthController.cs, yet using IdentityCore it fails.\r\n\r\n**NOTE:** The API will **correctly authenticate** and set the users cookies on sign in, but does not add the users roles to the users identity claims. Therefore, Authentication is Working, Authorization is not. If I utilise the [Authorize] attribute without specifying a Role it works flawlessly and only allows Authenticated users to access the route whilst denying unAuthenticated users. This can be seen in the Testing Screenshot at the end, identities[0].isAuthenticated = True, but the admin role is not being added to the Identity's Claims. As noted above, if I do not use AddIdentityCore and use AddIdentity, the roles are added to the user's claims correctly and the [Authorize(Role = \"Admin\")] attribute will work as expected, only allowing users that are apart of the Admin role to access it.\r\n\r\nStartup.cs (Omitted irrelevant parts, eg. Database Connection)\r\n\r\n    public void ConfigureServices(IServiceCollection services)\r\n    {\r\n        IdentityBuilder builder = services.AddIdentityCore<User>(opt =>\r\n        {\r\n            opt.Password.RequireDigit = true;\r\n            opt.Password.RequiredLength = 6;\r\n            opt.Password.RequireNonAlphanumeric = true;\r\n            opt.Password.RequireUppercase = true;\r\n            opt.User.AllowedUserNameCharacters += \":/\";\r\n        });\r\n\r\n        builder = new IdentityBuilder(builder.UserType, typeof(Role), builder.Services);\r\n        builder.AddEntityFrameworkStores<RSContext>();\r\n        builder.AddSignInManager<SignInManager<User>>();\r\n        builder.AddRoleValidator<RoleValidator<Role>>();\r\n        builder.AddRoles<Role>();\r\n        builder.AddRoleManager<RoleManager<Role>>();\r\n        builder.AddClaimsPrincipalFactory<UserClaimsPrincipalFactory<User>>();\r\n        builder.AddDefaultTokenProviders();\r\n\r\n        services.AddAuthentication(options =>\r\n        {\r\n            options.DefaultScheme = IdentityConstants.ApplicationScheme;\r\n            options.DefaultChallengeScheme = IdentityConstants.ApplicationScheme;\r\n            options.DefaultAuthenticateScheme = IdentityConstants.ApplicationScheme;\r\n            options.DefaultSignInScheme = IdentityConstants.ApplicationScheme;\r\n            options.DefaultSignOutScheme = IdentityConstants.ApplicationScheme;\r\n            options.DefaultForbidScheme = IdentityConstants.ApplicationScheme;\r\n        })\r\n            .AddSteam(options =>\r\n            {\r\n                options.ApplicationKey = Configuration.GetSection(\"Authentication:Steam:Key\").Value;\r\n                options.CallbackPath = \"/api/auth/steam/callback\";\r\n                options.Events.OnAuthenticated = OnClientAuthenticated;\r\n            })\r\n            .AddIdentityCookies(options =>\r\n            {\r\n                options.ApplicationCookie.Configure(appCookie =>\r\n                {\r\n                    appCookie.Cookie.Name = \"RaidSimulator\";\r\n                    appCookie.LoginPath = \"/api/auth/login\";\r\n                    appCookie.LogoutPath = \"/api/auth/logout\";\r\n                    appCookie.Cookie.HttpOnly = true;\r\n                    appCookie.Cookie.SameSite = SameSiteMode.Lax;\r\n                    appCookie.Cookie.IsEssential = true;\r\n                    appCookie.SlidingExpiration = true;\r\n                    appCookie.Cookie.Expiration = TimeSpan.FromMinutes(1);\r\n                    appCookie.Cookie.MaxAge = TimeSpan.FromDays(7);\r\n                });\r\n                options.ExternalCookie.Configure(extCookie =>\r\n                {\r\n                    extCookie.Cookie.Name = \"ExternalLogin\";\r\n                    extCookie.LoginPath = \"/api/auth/login\";\r\n                    extCookie.LogoutPath = \"/api/auth/logout\";\r\n                    extCookie.Cookie.HttpOnly = true;\r\n                    extCookie.Cookie.SameSite = SameSiteMode.Lax;\r\n                    extCookie.Cookie.IsEssential = true;\r\n                    extCookie.Cookie.Expiration = TimeSpan.FromMinutes(10);\r\n                });\r\n            });\r\n    }\r\n\r\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env, RoleManager<Role> roleManager)\r\n    {\r\n        if (env.IsDevelopment())\r\n        {\r\n            app.UseDeveloperExceptionPage();\r\n        }\r\n\r\n        RolesSeed.Seed(roleManager).Wait();\r\n\r\n        app.UseCors();\r\n        app.UseAuthentication();\r\n        app.UseMvc();\r\n    }\r\n\r\n    // Responsible for storing/updating steam profile in database\r\n    private async Task OnClientAuthenticated(OpenIdAuthenticatedContext context)\r\n    {\r\n        var rsContext = context.HttpContext.RequestServices.GetRequiredService<RSContext>();\r\n        var userManager = context.HttpContext.RequestServices.GetRequiredService<UserManager<User>>();\r\n\r\n        var profile = context.User?.Value<JObject>(SteamAuthenticationConstants.Parameters.Response)\r\n                            ?.Value<JArray>(SteamAuthenticationConstants.Parameters.Players)?[0]?.ToObject<SteamProfile>();\r\n\r\n        // TODO: Handle this better, Redir user to an informative error page or something\r\n        if (profile == null)\r\n            return;\r\n\r\n        var dbProfile = await rsContext.SteamProfiles.FindAsync(profile.SteamId);\r\n        if (dbProfile != null)\r\n        {\r\n            rsContext.Update(dbProfile);\r\n            dbProfile.UpdateProfile(profile);\r\n            await rsContext.SaveChangesAsync();\r\n        }\r\n        else\r\n        {\r\n            await rsContext.SteamProfiles.AddAsync(profile);\r\n            await rsContext.SaveChangesAsync();\r\n        }\r\n    }\r\n\r\nAuthController.cs => The only code responsible for authenticating against the Identity.Application scheme\r\n\r\n    [HttpGet(\"callback\")]\r\n    [Authorize(AuthenticationSchemes = \"Steam\")]\r\n    public async Task<IActionResult> Callback([FromQuery]string ReturnUrl)\r\n    {\r\n        ReturnUrl = ReturnUrl?.Contains(\"api/\") == true ? \"/\" : ReturnUrl;\r\n\r\n        if (HttpContext.User.Claims.Count() > 0)\r\n        {\r\n            var provider = HttpContext.User.Identity.AuthenticationType;\r\n            var nameIdentifier = HttpContext.User.FindFirstValue(ClaimTypes.NameIdentifier);\r\n            var name = HttpContext.User.FindFirstValue(ClaimTypes.Name);\r\n\r\n            var loginResult = await signInManager.ExternalLoginSignInAsync(provider, nameIdentifier, false);\r\n            if (loginResult.Succeeded)\r\n            {\r\n                return Redirect(ReturnUrl ?? \"/api/auth/claims\");\r\n            }\r\n\r\n            var result = await userManager.CreateAsync(new User { UserName = nameIdentifier, SteamId = nameIdentifier.Split(\"/\").Last() });\r\n            if (result.Succeeded)\r\n            {\r\n                var user = await userManager.FindByNameAsync(nameIdentifier);\r\n                var identity = await userManager.AddLoginAsync(user, new UserLoginInfo(provider, nameIdentifier, name));\r\n\r\n                if (identity.Succeeded)\r\n                {\r\n                    await signInManager.ExternalLoginSignInAsync(provider, nameIdentifier, false);\r\n                    return Redirect(ReturnUrl ?? \"/api/auth/claims\");\r\n                }\r\n            }\r\n        }\r\n\r\n        return BadRequest(new { success = false });\r\n    }\r\n\r\n    [HttpGet(\"claims\")]\r\n    [Authorize]\r\n    public async Task<IActionResult> GetClaims()\r\n    {\r\n        var user = await userManager.GetUserAsync(User);\r\n        var claims =\r\n            User.Claims.Select(c => new\r\n            {\r\n                c.Type,\r\n                c.Value\r\n            });\r\n\r\n        var inAdmin = new string[] {\r\n            \"User.IsInRole(\\\"Admin\\\") = \" + User.IsInRole(\"Admin\"),\r\n            \"User.IsInRole(\\\"ADMIN\\\") = \" + User.IsInRole(\"ADMIN\"),\r\n            \"User.IsInRole(\\\"admin\\\") = \" + User.IsInRole(\"admin\"),\r\n            \"userManager.IsInRoleAsync(user, \\\"admin\\\") = \" + await userManager.IsInRoleAsync(user, \"admin\")\r\n        };\r\n\r\n        return Ok(new { success = true, data = new { claims, inAdmin, User.Identities } });\r\n    }\r\n\r\nRoleSeeder.cs\r\n\r\n    public static async Task Seed(RoleManager<Role> roleManager)\r\n    {\r\n        // Developer Role\r\n        if(!await roleManager.RoleExistsAsync(\"Developer\"))\r\n        {\r\n            var role = new Role(\"Developer\");\r\n            await roleManager.CreateAsync(role);\r\n        }\r\n        // Community Manager Role\r\n        if (!await roleManager.RoleExistsAsync(\"Community Manager\"))\r\n        {\r\n            var role = new Role(\"Community Manager\");\r\n            await roleManager.CreateAsync(role);\r\n        }\r\n        // Admin Role\r\n        if (!await roleManager.RoleExistsAsync(\"Admin\"))\r\n        {\r\n            var role = new Role(\"Admin\");\r\n            await roleManager.CreateAsync(role);\r\n        }\r\n        // Moderator Role\r\n        if (!await roleManager.RoleExistsAsync(\"Moderator\"))\r\n        {\r\n            var role = new Role(\"Moderator\");\r\n            await roleManager.CreateAsync(role);\r\n        }\r\n    }\r\n\r\nTesting Screenshot: https://i.stack.imgur.com/oarHT.png","Url":"https://github.com/aspnet/Identity/issues/1997","RelatedDescription":"Closed issue \"User Roles not being added as Role Type claims on sign in (Identity Core) (Bug? / User Error?)\" (#1997)"},{"Id":"367544074","IsPullRequest":true,"CreatedAt":"2018-10-07T11:09:39","Actor":"huysentruitw","Number":"1996","RawContent":null,"Title":"Use the correct logging category inside RegisterModel","State":"open","Body":"This pull-request fixes the logging category when messages are logged from the ASP.NET Identity UI Register page. Should be a non-breaking change.","Url":"https://github.com/aspnet/Identity/pull/1996","RelatedDescription":"Open PR \"Use the correct logging category inside RegisterModel\" (#1996)"},{"Id":"362680135","IsPullRequest":true,"CreatedAt":"2018-10-07T11:04:34","Actor":"huysentruitw","Number":"1974","RawContent":null,"Title":"Use the correct logging category inside RegisterModel","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/1974","RelatedDescription":"Closed or merged PR \"Use the correct logging category inside RegisterModel\" (#1974)"},{"Id":"367334324","IsPullRequest":true,"CreatedAt":"2018-10-05T19:22:59","Actor":"dotnet-maestro-bot","Number":"1995","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @natemcmaster\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.1-to-release/2.2:merge/release/2.1-to-release/2.2\r\ngit merge merge/release/2.1-to-release/2.2\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.1-to-release/2.2' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.1.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/1995","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#1995)"},{"Id":"367312392","IsPullRequest":true,"CreatedAt":"2018-10-05T19:09:41","Actor":"natemcmaster","Number":"1994","RawContent":null,"Title":"Update branding to 2.1.6-servicing","State":"closed","Body":"Per discussion with our team, we want to make the following changes to versioning during servicing updates:\r\n\r\n* The versioning on packages with ship with ASP.NET Core should be consistent\r\n* (No change) on packages with changes in them ship during servicing updates\r\n* Version gaps are okay. For example, this repo is producing a patch for 2.1.6, so packages will be 2.1.6. It did not patch for 2.1.4 or 2.1.3 so those versions will be skipped.\r\n\r\nThis also includes another minor change: for consistency with the rest of the .NET Core teams, pre-release servicing builds will be 2.1.x-servicing-buildnumber.","Url":"https://github.com/aspnet/Identity/pull/1994","RelatedDescription":"Closed or merged PR \"Update branding to 2.1.6-servicing\" (#1994)"},{"Id":"367074207","IsPullRequest":false,"CreatedAt":"2018-10-05T06:17:11","Actor":"yetanotherchris","Number":"1993","RawContent":null,"Title":"Example of an IClaimStore","State":"open","Body":"Hello,\r\n\r\nI'm looking through the source (EF mainly) and can't find an IClaimStore example. Does it implement it? Or is there source repo somewhere else I could find a working example?","Url":"https://github.com/aspnet/Identity/issues/1993","RelatedDescription":"Open issue \"Example of an IClaimStore\" (#1993)"},{"Id":"366874121","IsPullRequest":true,"CreatedAt":"2018-10-04T16:36:56","Actor":"dotnet-maestro-bot","Number":"1992","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @natemcmaster\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.1-to-release/2.2:merge/release/2.1-to-release/2.2\r\ngit merge merge/release/2.1-to-release/2.2\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.1-to-release/2.2' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.1.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/1992","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#1992)"},{"Id":"366753973","IsPullRequest":true,"CreatedAt":"2018-10-04T11:55:28","Actor":"Asesjix","Number":"1991","RawContent":null,"Title":"Make DbSet's virtual (#1868)","State":"open","Body":"This PR sets the virtual modifier for the DbSets in IdentityDbContext and IdentityUserContext.\r\nIssue reference: #1868 ","Url":"https://github.com/aspnet/Identity/pull/1991","RelatedDescription":"Open PR \"Make DbSet's virtual (#1868)\" (#1991)"},{"Id":"366495112","IsPullRequest":true,"CreatedAt":"2018-10-03T19:37:35","Actor":"miroslavpopovic","Number":"1990","RawContent":null,"Title":"Add missing \"private readonly\" modifiers to _userManager and _logger fields","State":"open","Body":"Two small fixes for missing \"private readonly\" modifiers in Identity UI.","Url":"https://github.com/aspnet/Identity/pull/1990","RelatedDescription":"Open PR \"Add missing \"private readonly\" modifiers to _userManager and _logger fields\" (#1990)"},{"Id":"365812687","IsPullRequest":false,"CreatedAt":"2018-10-02T09:26:41","Actor":"Ponant","Number":"1988","RawContent":null,"Title":"What is your opinion on Passwordless auth","State":"open","Body":"Hi,\r\nI understand that Password-less auth à la Medium or Slack is not RFC based standard, but I would like to have some feedback on its advantages and/or disadvantages over password-based flows as we do with asp.net identity. I would exclude from the discussion login via social providers, hence concentrating the discussion feedback around the situation where:\r\n1) User enters Email on the website or app\r\n2) Email is sent to user with a one-time login\r\n3) User checks email and clicks the link and gets logged in the browser or app.\r\n\r\nI tried to think it over and over and I see absolutely no advantage of password-based schema over password-less ones. Hence my question :)","Url":"https://github.com/aspnet/Identity/issues/1988","RelatedDescription":"Open issue \"What is your opinion on Passwordless auth\" (#1988)"},{"Id":"365232536","IsPullRequest":false,"CreatedAt":"2018-10-02T02:33:56","Actor":"NCanggoro","Number":"1985","RawContent":null,"Title":"Identity Core and Extension Identity Core Ambiguous Reference","State":"closed","Body":"The type UserManager<TUser>' exists in both 'Identity.Core, Version=1.2.7.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' and 'Microsoft.Extensions.Identity.Core, Version=2.1.3.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n","Url":"https://github.com/aspnet/Identity/issues/1985","RelatedDescription":"Closed issue \"Identity Core and Extension Identity Core Ambiguous Reference\" (#1985)"},{"Id":"365643772","IsPullRequest":false,"CreatedAt":"2018-10-01T21:08:20","Actor":"dpedrelli","Number":"1987","RawContent":null,"Title":"Table mappings not working with Core 2.1","State":"open","Body":"I have a netcoreapp2.0 in which I mapped the Identity classes to custom table names.  I created the Identity migration and it works fine.  When I update to netcoreapp2.1, I get the following error, when I attempt to access Identity:\r\n\r\n`SqlException: Invalid object name 'AspNetRoles'. `\r\n\r\nI searched the solution.  CreateIdentitySchema.Designer.cs and ApplicationDbContextModelSnapshot.cs each contain an entry that maps to the correct table.  They also contain a second entry:\r\n\r\n`            modelBuilder.Entity(\"Microsoft.AspNetCore.Identity.IdentityRole\", b =>\r\n                {\r\n                    b.HasBaseType(\"Microsoft.AspNetCore.Identity.IdentityRole<string>\");\r\n\r\n\r\n                    b.HasIndex(\"NormalizedName\")\r\n                        .IsUnique()\r\n                        .HasName(\"RoleNameIndex\")\r\n                        .HasFilter(\"[NormalizedName] IS NOT NULL\");\r\n\r\n                    b.ToTable(\"AspNetRoles\");\r\n\r\n                    b.HasDiscriminator().HasValue(\"IdentityRole\");\r\n                });\r\n`\r\n\r\nIf I edit these entries to point to the correct table, I still get the above error.  If I rollback to netcoreapp2.0, everything works as expected.","Url":"https://github.com/aspnet/Identity/issues/1987","RelatedDescription":"Open issue \"Table mappings not working with Core 2.1\" (#1987)"},{"Id":"362788242","IsPullRequest":true,"CreatedAt":"2018-10-01T18:28:40","Actor":"pranavkm","Number":"1975","RawContent":null,"Title":"Prkrishn/update master","State":"closed","Body":"","Url":"https://github.com/aspnet/Identity/pull/1975","RelatedDescription":"Closed or merged PR \"Prkrishn/update master\" (#1975)"},{"Id":"365277572","IsPullRequest":false,"CreatedAt":"2018-10-01T00:39:38","Actor":"davidrevoledo","Number":"1986","RawContent":null,"Title":"Default Values for IdentityUser","State":"open","Body":"I've realized that the configuration for the default entity `IdentityUser` \r\nhttps://github.com/aspnet/Identity/blob/master/src/EF/IdentityUserContext.cs#L134 doesn't have any configuration for the `PhoneNumber` and other values.\r\n\r\nI faced a few performance lacking using varchar(max) sizing.\r\n\r\nReference : https://sqlperformance.com/2017/06/sql-plan/performance-myths-oversizing-strings\r\n\r\nI think it'd be a good idea use some standard as default to avoid users that don't care or don't know about it have to deal with those kind of throughput issues and every once can configure like they prefer (as it is possible now) but IMO is a quite dangerous letting this as default\r\n\r\n![image](https://user-images.githubusercontent.com/8322252/46265030-2dda9280-c4f9-11e8-9649-881dec444d3b.png)\r\n\r\nAcording this with `For full international support, you'd need a VARCHAR of 15 digits.`\r\nhttps://en.wikipedia.org/wiki/E.164\r\n \r\nThanks.\r\n","Url":"https://github.com/aspnet/Identity/issues/1986","RelatedDescription":"Open issue \"Default Values for IdentityUser\" (#1986)"},{"Id":"361931683","IsPullRequest":false,"CreatedAt":"2018-09-28T19:28:01","Actor":"eriksendc","Number":"1970","RawContent":null,"Title":"Second Facebook or Google sign in returns to /account/login after iOS 12 upgrade","State":"closed","Body":"_NOTE: See my second comment on this issue. This isn't just an issue with my app (getyourpet.com). It can be reproduced with a \"File New Project\" web app. Someone needs to tell Apple what they broke fast!_\r\n\r\nHi All,\r\n\r\nI upgraded my iPhone 6s to iOS 12.0 yesterday (I was on 11.x), and I found that after the upgrade I couldn't sign in to getyourpet.com (my production site) using the Facebook button on the sign in page (/account/login) when using the Safari app. Tapping the Facebook button displayed the spinner on that button for a brief moment, but then you're just back at /account/login (though some amount of redirecting seemed to be happening behind the scenes). That led me to do a lot of experimenting. Here are some other findings:\r\n\r\n1. I had a colleague who was still on iOS 11x try signing in with Facebook. She could sign in over and over using Facebook without any issue. I then had her upgrade to iOS 12 and now both of our experiences are identical. Tapping the Facebook button displays the spinner, there's some redirecting going on, but when the spinner stops spinning you're at /account/login.\r\n\r\n2. Signing in with Facebook or Google on Chrome, Firefox, Edge and Opera are fine on my laptop.\r\n\r\n3. I tried signing in with the Google Chrome and Firefox apps. In both cases the behavior was the same as with Safari. I'm just back at /account/login.\r\n\r\n4. If I clear browser history and cookies for any of the browser apps, then signing with Facebook or Google works once. You're redirected to either the Facebook or Google authentication pages, then you're redirected back to getyourpet.com and you're signed in. But if you sign out and try signing in again, you're back at 3: tapping Facebook or Google the second time after clearing history and cookies you're just left at /account/signin.\r\n\r\n5. If I sign in using email / password then go and manage my login providers (on getyourpet.com this is in the user menu as Sign In With...) and then select to enable signing in with Facebook or Google on an account, if I've just cleared browser cache / cookies, then the user is brought to Facebook or Google to authenticate, and returned to getyourpet.com's Sign In With... page successfully. If you try enabling signing in with Facebook or Google and there's already a cookie, then you're signed out!\r\n\r\n6. I've reproduce this in all of our environments (local development on my laptop and in our QA environment).\r\n\r\nI'm trying to dig up another iPhone to reproduce this on. I won't have this until later tonight, but I did feel this is such a potentially giant issue that I thought I'd raise it quickly. Unfortunately I'm not a mobile developer, and don't have any clue as to how to get started with using some kind of tool like Fiddler to watch the traffic to/from the browser apps on my phone.\r\n\r\nAnyways, it seems like once there is an authentication cookie, somehow that's not correctly being sent to getyourpet.com?\r\n\r\nI'm sure this is the kind of issue where it's like \"oh boy, this probably isn't even real, and there's not enough to go on\". If there are things I can provide that would make further investigation possible let me know.\r\n\r\nWe're running a fairly basic ASP.NET web app that's been migrated all the way from pre-1.0 through to the latest version of 2.1 (2.1.4). I've included the relevant parts of our project file below. We run on servers running Windows 2012 R2 with the latest patches, and we run using IIS 8.5 (not native kestrel). Nothing has changed in our environment for over a week. The variable seems to be iOS 12.\r\n\r\nI know y'all don't own iOS 12, but if there was some way of knowing what's going on then there would be something concrete that could be sent to Apple. I'm afraid it's going to be a lot of trouble for a lot of sites like getyourpet.com as folks upgrade to iOS 12.\r\n\r\n-Brian Eriksen\r\n\r\n    PackageReference Include=\"angularjs\" Version=\"1.4.7\" \r\n    PackageReference Include=\"AngularJS.Messages\" Version=\"1.4.8\" \r\n    PackageReference Include=\"bootstrap\" Version=\"3.3.5\" \r\n    PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" \r\n    PackageReference Include=\"EntityFramework\" Version=\"6.2.0\" \r\n    PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"2.1.3\" PrivateAssets=\"All\" \r\n    PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.1.3\" \r\n    PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"2.1.3\" PrivateAssets=\"All\" \r\n    PackageReference Include=\"KendoUICore\" Version=\"2015.3.1111\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Antiforgery\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Authentication.Cookies\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Authentication.Facebook\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Authentication.Google\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Authentication.MicrosoftAccount\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Authentication.Twitter\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Diagnostics\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore\" Version=\"2.1.3\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Server.IISIntegration\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Mvc.TagHelpers\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel\" Version=\"2.1.3\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Routing\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Caching.Abstractions\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.Extensions.Caching.Memory\" Version=\"2.1.2\" \r\n    PackageReference Include=\"Microsoft.Extensions.Configuration.FileExtensions\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Configuration.EnvironmentVariables\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Configuration.UserSecrets\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Logging\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Logging.Configuration\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Logging.Console\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.PlatformAbstractions\" Version=\"1.1.0\" \r\n    PackageReference Include=\"Microsoft.VisualStudio.Web.BrowserLink\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.1.4\" PrivateAssets=\"All\" \r\n    PackageReference Include=\"Sendgrid\" Version=\"9.9.0\" \r\n    PackageReference Include=\"Twilio\" Version=\"5.16.4\" \r\n    PackageReference Include=\"NLog.Web.AspNetCore\" Version=\"4.6.0\" \r\n    PackageReference Include=\"NLog.Extensions.Logging\" Version=\"1.2.1\" \r\n    PackageReference Include=\"NLog\" Version=\"4.5.9\" \r\n    PackageReference Include=\"Hangfire\" Version=\"1.6.20\" \r\n    PackageReference Include=\"Hangfire.AspNetCore\" Version=\"1.6.20\" \r\n    PackageReference Include=\"Microsoft.SqlServer.Types\" Version=\"14.0.314.76\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Http.Features\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" Version=\"2.1.1\" \r\n    PackageReference Include=\"MaxMind.GeoIP2\" Version=\"3.0.0\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Owin\" Version=\"2.1.1\" \r\n    PackageReference Include=\"Microsoft.AspNet.SignalR.Owin\" Version=\"1.2.2\" \r\n    PackageReference Include=\"Microsoft.AspNet.SignalR\" Version=\"2.3.0\" \r\n    PackageReference Include=\"Microsoft.AspNet.SignalR.Redis\" Version=\"2.3.0\" \r\n    PackageReference Include=\"LinqKit.Microsoft.EntityFrameworkCore\" Version=\"1.1.15\" \r\n    PackageReference Include=\"Microsoft.AspNetCore.Mvc.Razor.ViewCompilation\" Version=\"2.1.1\" PrivateAssets=\"All\" \r\n","Url":"https://github.com/aspnet/Identity/issues/1970","RelatedDescription":"Closed issue \"Second Facebook or Google sign in returns to /account/login after iOS 12 upgrade\" (#1970)"},{"Id":"365011573","IsPullRequest":false,"CreatedAt":"2018-09-28T19:24:53","Actor":"blowdart","Number":"1984","RawContent":null,"Title":"Microsoft Security Advisory: iOS12 breaks social, WSFed and OIDC logins","State":"open","Body":"# Microsoft Security Advisory:  iOS12 breaks social, WSFed and OIDC logins\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about an incompatibly between iOS12 and some types of authentication. This advisory also provides guidance on what developers can do to remove current security restrictions added by ASP.NET to their applications to become compatible with iOS12.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/aspnet/Announcements/issues/318\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Security/issues/1864 for ASP.NET Core Cookie Authentication\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>What has changed\r\n\r\nThe recent iOS12 update has changed Safari's handling of [SameSite](https://tools.ietf.org/html/rfc6265) cookies. The SameSite attribute allows a developer to control when cookies are sent to a web site, enabling the flow to only occur when requests are from the same site. This standard was introduced to reduce exposure to Cross Site Request Forgery (CSRF) attacks. By default ASP.NET Core 2.0 and later protects its authentication cookies using the SameSite property. The change on Apple's part is not limited to ASP.NET Core applications, it is affecting multiple frameworks and authentication software which relay on HTTP forms in a browser, for example authenticating to a third party via Facebook, Twitter or browser based Open ID Connect (OIDC) mechanism.\r\n\r\nApple have stated they believe [their change is correct behavior](https://bugs.webkit.org/show_bug.cgi?id=188165), and that the fault lies in every other browser's implementation.\r\n\r\nWhile we take no stance on the correctness of browser behavior we feel that removing the SameSite protections would expose our customers, and their customers to a wider risk, as it would remove the protection provided everywhere, for all users, in any browser.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf your users can no longer login to your web application on iOS12 using Safari then you are affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix this?\r\n\r\nDevelopers can allow iOS12 Safari users to log into their applications by turn off SameSite protection in `ConfigureServices()`.\r\n\r\nIf you are using ASP.NET Core Identity you disable the protection by configuring cookies with the following code\r\n\r\n```c#\r\nservices.ConfigureExternalCookie(options =>\r\n{\r\n    // Other options\r\n    options.Cookie.SameSite = SameSiteMode.None;\r\n});\r\nservices.ConfigureApplicationCookie(options =>\r\n{\r\n    // Other options\r\n    options.Cookie.SameSite = SameSiteMode.None;\r\n});\r\n```\r\n\r\nIf you are using cookie authentication without ASP.NET Core identity you can turn off the protection with the following code\r\n\r\n```c#\r\nservices.AddCookie(CookieAuthenticationDefaults.AuthenticationScheme, options =>\r\n{\r\n    // Other options\r\n    options.Cookie.SameSite = Microsoft.AspNetCore.Http.SameSiteMode.None;\r\n})\r\n```\r\n\r\nIf you are using external OIDC providers you may be able to avoid the issue by changing the response mode your provider uses from a POST to a GET request, using the following code. Not all providers may support this.\r\n\r\n```c#\r\n.AddOpenIdConnect(\"myOIDProvider\", options => {\r\n    // Other options\r\n    options.ResponseType = \"code\";\r\n    options.ResponseMode = \"query\";\r\n};\r\n```\r\n\r\n_Note that in making these changes protection is removed for all users and all browsers. You should ensure that all your actions that make state changes are protected with [CSRF anti-forgery mechanisms](https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery) built into ASP.NET Core.\r\n\r\n#### Rebuilding your application\r\n\r\nAfter making these configuration changes you rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[Bug 188165 - iOS 12 Safari breaks ASP.NET Core 2.1 OIDC authentication](https://bugs.webkit.org/show_bug.cgi?id=188165)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 28, 2018): Advisory published.\r\n","Url":"https://github.com/aspnet/Identity/issues/1984","RelatedDescription":"Open issue \"Microsoft Security Advisory: iOS12 breaks social, WSFed and OIDC logins\" (#1984)"},{"Id":"364691707","IsPullRequest":true,"CreatedAt":"2018-09-28T18:50:34","Actor":"dotnet-maestro-bot","Number":"1982","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @natemcmaster\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/1982","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#1982)"},{"Id":"364967078","IsPullRequest":true,"CreatedAt":"2018-09-28T18:49:55","Actor":"dotnet-maestro-bot","Number":"1983","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @natemcmaster\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Identity merge/release/2.1-to-release/2.2:merge/release/2.1-to-release/2.2\r\ngit merge merge/release/2.1-to-release/2.2\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.1-to-release/2.2' on https://github.com/dotnet-maestro-bot/Identity.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.1.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Identity/pull/1983","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#1983)"},{"Id":"364670707","IsPullRequest":true,"CreatedAt":"2018-09-27T23:40:38","Actor":"natemcmaster","Number":"1979","RawContent":null,"Title":"Change spec test packages to depend on xunit.execution.core, not the xunit metapackage","State":"closed","Body":"Per xunit guidance, packages which deliver xunit bits shouldn't also depend on the xunit metapackage.\r\n\r\n> https://xunit.github.io/releases/2.3:\r\n> As a reminder: If you're extending xUnit.net and want to publish your extension as a NuGet package, you should import xunit.extensibility.core and/or xunit.extensibility.execution, not xunit or xunit.core. If you do this wrong, you might have problems generating your NuGet package via dotnet pack.\r\n\r\n","Url":"https://github.com/aspnet/Identity/pull/1979","RelatedDescription":"Closed or merged PR \"Change spec test packages to depend on xunit.execution.core, not the xunit metapackage\" (#1979)"},{"Id":"364688788","IsPullRequest":false,"CreatedAt":"2018-09-27T23:29:03","Actor":"assyadh","Number":"1981","RawContent":null,"Title":"Custom Storage for Identity Provider: What if my data source is not a storage layer?","State":"open","Body":"Hi,\r\n\r\nI was going over the Identity Provider paradigm (Managers, Stores and your custom data layer).\r\n\r\nIdentity architecture states that Managers are high-level classes which an app developer uses to perform operations, such as creating an Identity user. Stores are lower-level classes that specify how entities, such as users and roles, are persisted.\r\n\r\nHowever, here is a simplified stack trace of a Sign in operation using ASP.NET Identity (gathered by scaffolding the default template):\r\n\r\n\r\n`SignInManager.PasswordSignInAsync(TUser user, string password)`\r\n`UserManager.CheckPasswordAsync(TUser user, string password)`\r\n`UserManager<TUser>.VerifyPasswordAsync(IUserPasswordStore<TUser> store, TUser user, string password)`\r\n`IUserPasswordStore<TUser>.GetPasswordHashAsync(TUser user)`\r\n`VerifyHashedPassword(TUser user, string hash, string password)`\r\n\r\nAs you can see, **there is an assumption made by the UserManager, that the UserStore way of verifying a password is by retrieving the hash from the storage layer and comparing it to the password.**\r\n\r\nTo me, it looks like the UserManager is somehow specifying how entities are persisted.\r\n\r\nIt looks like if I am using a backend store where I don't have access to password hashes, I would have to rewrite my own SigninManager and UserManager, to get away from that hashes comparison paradigm.\r\n\r\nDo you have any plans on accommodating storage layers where you don't have access to password hashes **such as external user management services hosted in the cloud**? \r\n\r\nI can come up with a few ideas on how to add an additional layer of abstraction on how password are deemed to be stored.\r\n\r\nThanks!","Url":"https://github.com/aspnet/Identity/issues/1981","RelatedDescription":"Open issue \"Custom Storage for Identity Provider: What if my data source is not a storage layer?\" (#1981)"},{"Id":"364671279","IsPullRequest":true,"CreatedAt":"2018-09-27T23:12:44","Actor":"natemcmaster","Number":"1980","RawContent":null,"Title":" Enable MicroBuild code signing","State":"closed","Body":"Prepare for an update to buildtools. https://github.com/aspnet/BuildTools/pull/766\r\n\r\n","Url":"https://github.com/aspnet/Identity/pull/1980","RelatedDescription":"Closed or merged PR \" Enable MicroBuild code signing\" (#1980)"},{"Id":"364523675","IsPullRequest":false,"CreatedAt":"2018-09-27T15:09:49","Actor":"JustMeGaaRa","Number":"1978","RawContent":null,"Title":"Support for Activity-based authorization","State":"open","Body":"Modern authorization requires far more granularity than simple roles or policies. It's possible to implement Activity-based authorization right now, but it requires to re-implement same logic over and over for each new project.\r\n\r\nIt would be great if there was support for `IdentityRole` type to have a collection of Activities of type `TActivity`. Moreover, for `RoleManager` to have the same methods for activities as there are for claims (`AddClaimAsync`, `RemoveClaimAsync`, etc.) would be a huge improvement.\r\nAnother aspect that the current authorization API lacks is the ability to decorate the controllers and action methods with an attribute like `[ActivityAuthorize(Activity = \"User_Create\")]`.\r\n\r\nA see the activity-based authorization as it is described here: https://lostechies.com/derickbailey/2011/05/24/dont-do-role-based-authorization-checks-do-activity-based-checks/\r\n\r\nI event have a little PoC that fits the current Identity Model: https://github.com/JustMeGaaRa/Identity/commit/11767973f6f0294e9f5cd632852be186bb98e911","Url":"https://github.com/aspnet/Identity/issues/1978","RelatedDescription":"Open issue \"Support for Activity-based authorization\" (#1978)"},{"Id":"362513343","IsPullRequest":false,"CreatedAt":"2018-09-25T13:18:46","Actor":"dragankae","Number":"1973","RawContent":null,"Title":"Can't use GUID identifier on IdentityRoleClaim and IdentityUserClaim","State":"closed","Body":"I'm not able to use GUID identifier on IdentityRoleClaim and IdentityUserClaim classes. TKey is not set on the Id.\r\n\r\n![capture](https://user-images.githubusercontent.com/10271448/45870178-918eee00-bd8a-11e8-9af7-34d06918e2e8.JPG)\r\n","Url":"https://github.com/aspnet/Identity/issues/1973","RelatedDescription":"Closed issue \"Can't use GUID identifier on IdentityRoleClaim and IdentityUserClaim\" (#1973)"},{"Id":"362949630","IsPullRequest":false,"CreatedAt":"2018-09-24T21:29:23","Actor":"josejmoran","Number":"1977","RawContent":null,"Title":"Asp.Net Core takes too long to run the web application","State":"closed","Body":"When I run the application the build process takes about 45 seconds, the majority of that time is spent on some tasks that do not send any message to the Output window so I have no idea what is going on. The development loop cycle is affected by this. Usually we change a file or two and click run again, so it feels like forever every time. Is there a way to improve this, maybe keeping a list of files modified and just compiling only the changed files? If VS is only compiling the files I have created and having a Core I7 with 16GB of RAM it seems too slow to run the application.\r\n\r\nIt may be helpful to add some logging messages during the build process that show the time spent in each task so if we have a slow build we can pinpoint the task or tasks delaying the build process as well as providing this log to you guys for  a deeper analysis.","Url":"https://github.com/aspnet/Identity/issues/1977","RelatedDescription":"Closed issue \"Asp.Net Core takes too long to run the web application\" (#1977)"},{"Id":"362243280","IsPullRequest":false,"CreatedAt":"2018-09-24T21:20:09","Actor":"nicklundin08","Number":"1971","RawContent":null,"Title":"Inconsistent server response when using JWT bearer tokens to authenticate","State":"closed","Body":"I have been noticing inconsistent behavior with my web api ever since upgrading it to asp.net core. The relevant components of the project are\r\n\r\n- An asp.net core authentication server (implemented via identity server 4)\r\n- A web api (recently migrated from .net framework 4.5.1 to asp.net core)\r\n\r\nUse Case 1\r\n- Client sends an unauthenticated request to the resource server without a token\r\n- Server responds with a 401 and no content\r\n\r\nUse Case 2\r\n- Client retrieves a valid token using the client credentials grant flow from the auth server\r\n- Client sends an authenticated request to the resource server with the token\r\n- Server responds with a 200 and access to the protected resource\r\n\r\nThis worked consistently when the web api was on .net framework. However since the switch to .net core, the behavior is as follows\r\n\r\n- Client sends an unauthenticated request to the resource server without a token\r\n- Server responds with either:\r\n\t1. 200 and no content\r\n\t2. 401 and no content\r\n\t\r\n- Client retrieves token using the client credentials grant flow from the auth server\r\n- Client sends an authenticated request to the resource server with the token\r\n- Server responds with either:\r\n\t1. 200 and access to the protected resource\r\n\t2. 401 and no content\r\n\t3. 200 and no content (odd because the api would never return no content)\r\n\r\nThere doesn't seem to be any sort of pattern to the server responses.\r\n\r\nThe startup is posted below. I have tried replacing the .AddIdentityServerAuthentication with \r\n.AddJwtBearer, but the behavior was not affected.\r\n\r\nI do not believe this is an issue with the authentication server project because no code was changed and the exact same steps to obtain a token were used on the .net framework and the asp.net core versions of the web api project.\r\n\r\nI do not believe this is an environmental issue as I have seen it in a dev environment, UAT environment, and on my local machine.\r\n\r\nThe only logs I have been able to grab so far has been from our transaction log because I don't believe any exception gets thrown\r\n\r\nI realize this a very generic issue, but I am having a hard time debugging it because it appears most of this is happening in the middleware. If there is any other info I can provide please let me know. Thank you in advance for your time.\r\n\r\n```\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.301\r\n Commit:    59524873d6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.301\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.1\r\n  Commit:  6985b9f684\r\n\r\n.NET Core SDKs installed:\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n//                     LOGS                                  //\r\n\r\n**no token 200**\r\n\r\n\r\n2018-09-20 10:24:24.954 -05:00 [INF] Request starting HTTP/1.1 GET http://localhost:50107/api/v4/category  \r\n2018-09-20 10:24:24.954 -05:00 [INF] Route matched with {action = \"GetAll\", controller = \"CategoryV4\", page = \"\"}. Executing action Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost)\r\n2018-09-20 10:24:24.955 -05:00 [INF] Authorization failed.\r\n2018-09-20 10:24:24.955 -05:00 [INF] Authorization failed for the request at filter 'Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter'.\r\n2018-09-20 10:24:24.955 -05:00 [INF] Executing ChallengeResult with authentication schemes ([]).\r\n2018-09-20 10:24:24.955 -05:00 [INF] AuthenticationScheme: Bearer was challenged.\r\n2018-09-20 10:24:24.955 -05:00 [INF] Executed action Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost) in 0.5895ms\r\n2018-09-20 10:24:24.955 -05:00 [INF] Request finished in 1.17ms 200 \r\n\r\n**no token 401**\r\n\r\n2018-09-20 10:24:23.478 -05:00 [INF] Request starting HTTP/1.1 GET http://localhost:50107/api/v4/category  \r\n2018-09-20 10:24:23.532 -05:00 [INF] Route matched with {action = \"GetAll\", controller = \"CategoryV4\", page = \"\"}. Executing action Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost)\r\n2018-09-20 10:24:23.544 -05:00 [INF] Authorization failed.\r\n2018-09-20 10:24:23.545 -05:00 [INF] Authorization failed for the request at filter 'Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter'.\r\n2018-09-20 10:24:23.548 -05:00 [INF] Executing ChallengeResult with authentication schemes ([]).\r\n2018-09-20 10:24:23.912 -05:00 [INF] AuthenticationScheme: BearerIdentityServerAuthenticationJwt was challenged.\r\n2018-09-20 10:24:23.912 -05:00 [INF] AuthenticationScheme: Bearer was challenged.\r\n2018-09-20 10:24:23.915 -05:00 [INF] Executed action Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost) in 380.02320000000003ms\r\n2018-09-20 10:24:23.917 -05:00 [INF] Request finished in 439.4776ms 401 \r\n\r\n\r\n**with token 401**\r\n\r\n2018-09-20 10:25:20.177 -05:00 [INF] Request starting HTTP/1.1 GET http://localhost:50107/api/v4/category  \r\n2018-09-20 10:25:20.178 -05:00 [INF] Route matched with {action = \"GetAll\", controller = \"CategoryV4\", page = \"\"}. Executing action Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost)\r\n2018-09-20 10:25:20.178 -05:00 [INF] Authorization failed.\r\n2018-09-20 10:25:20.178 -05:00 [INF] Authorization failed for the request at filter 'Microsoft.AspNetCore.Mvc.Authorization.AuthorizeFilter'.\r\n2018-09-20 10:25:20.178 -05:00 [INF] Executing ChallengeResult with authentication schemes ([]).\r\n2018-09-20 10:25:20.178 -05:00 [INF] AuthenticationScheme: Bearer was challenged.\r\n2018-09-20 10:25:20.178 -05:00 [INF] Executed action Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost) in 0.4509ms\r\n2018-09-20 10:25:20.178 -05:00 [INF] Request finished in 0.773ms 401 \r\n\r\n**with token 200 with content**\r\n\r\n2018-09-20 10:25:53.738 -05:00 [INF] Request starting HTTP/1.1 GET http://localhost:50107/api/v4/category  \r\n2018-09-20 10:25:54.203 -05:00 [INF] Successfully validated the token.\r\n2018-09-20 10:25:54.211 -05:00 [INF] Route matched with {action = \"GetAll\", controller = \"CategoryV4\", page = \"\"}. Executing action Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost)\r\n2018-09-20 10:25:54.212 -05:00 [INF] Authorization was successful.\r\n2018-09-20 10:25:54.267 -05:00 [INF] Executing action method Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost) - Validation state: \"Valid\"\r\n2018-09-20 10:25:54.346 -05:00 [INF] Executed action method Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost), returned result Microsoft.AspNetCore.Mvc.ObjectResult in 74.5571ms.\r\n2018-09-20 10:25:54.357 -05:00 [INF] Executing ObjectResult, writing value of type 'System.Linq.Enumerable+SelectArrayIterator`2[[System.Object, System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Clarity.Api.v4.Category_v4, Clarity.Api, Version=3.19.0.0, Culture=neutral, PublicKeyToken=null]]'.\r\n2018-09-20 10:25:54.394 -05:00 [INF] Executed action Clarity.WebHost.Controllers.v4.CategoryV4Controller.GetAll (Clarity.WebHost) in 183.63160000000002ms\r\n2018-09-20 10:25:54.396 -05:00 [INF] Request finished in 658.2099ms 200 application/json; charset=utf-8\r\n\r\n//                   STARTUP                                     //\r\n\r\n\r\nStartup\r\npublic class Startup\r\n{\r\n\tpublic IConfiguration Configuration { get; }\r\n\r\n\tpublic IConfigSettings ConfigSettings { get; set; }\r\n\r\n\tpublic Startup(IConfiguration configuration)\r\n\t{\r\n\t\tConfiguration = configuration;\r\n\r\n\t\tConfigSettings = configuration.BuildClarityConfigSettings();\r\n\t}\r\n\r\n\t// This method gets called by the runtime. Use this method to add services to the container.\r\n\tpublic virtual IServiceProvider ConfigureServices(IServiceCollection services)\r\n\t{\r\n\t\tservices.AddAuthentication(options =>\r\n\t\t\t{\r\n\t\t\t\toptions.DefaultScheme = IdentityServerAuthenticationDefaults.AuthenticationScheme;\r\n\t\t\t\toptions.DefaultAuthenticateScheme = IdentityServerAuthenticationDefaults.AuthenticationScheme;\r\n\t\t\t\toptions.DefaultChallengeScheme = IdentityServerAuthenticationDefaults.AuthenticationScheme;\r\n\r\n\t\t\t})\r\n\t\t\t.AddIdentityServerAuthentication(options =>\r\n\t\t\t{\r\n\t\t\t\toptions.Authority = ConfigSettings.AuthServerAddress;\r\n\t\t\t\toptions.RequireHttpsMetadata = false;\r\n\t\t\t\t//options.ApiName = \"clarity-stock\";\r\n\t\t\t});\r\n\r\n\t\tservices\r\n\t\t\t.AddMvc();\r\n\r\n\t\treturn services.BuildClarityServiceProvider(ConfigSettings);\r\n\t}\r\n\r\n\t// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\r\n\tpublic virtual void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\r\n\t{\r\n\t\tapp.UseAuthentication();\r\n\r\n\t\tapp.UseMvc();\r\n\r\n\t\t//initialize static stuff that depends on service registration\r\n\t\tif (app.ApplicationServices.GetService<WorkerConfig>().ChannelFactoryType == typeof(DirectChannelFactory))\r\n\t\t{\r\n\t\t\tapp.ApplicationServices.GetService<IWorkerServer>().Start();\r\n\t\t}\r\n\r\n\t\tEventDispatcher.Raise(new ApplicationStartedEvent(app.ApplicationServices)).GetAwaiter().GetResult();\r\n\t}\r\n}\r\n```\r\n","Url":"https://github.com/aspnet/Identity/issues/1971","RelatedDescription":"Closed issue \"Inconsistent server response when using JWT bearer tokens to authenticate\" (#1971)"},{"Id":"362808608","IsPullRequest":true,"CreatedAt":"2018-09-22T00:14:59","Actor":"HaoK","Number":"1976","RawContent":null,"Title":"[Design] Add UI user factory","State":"open","Body":"Exploring fixes for https://github.com/aspnet/Identity/issues/1722\r\n\r\nNot sure if this might be more appropriate for 3.0 as its will be hard to do this in a non breaking change way in 2.2, basically moves away from Activator.CreateInstance infavor of a dedicated DefaultUIUserFactory which will be used to create new user instances. \r\n\r\nWe provide a default one that works for identity user based classes that have a default constructor, custom users can add their own factory implementation that implements:\r\n `TUser Create(string userName, string email)`\r\n\r\nor they can just register it inline like so with a sugar method:\r\n```\r\n            services.AddDefaultIdentity<PocoUser>()\r\n                .AddUserManager<UserManager<PocoUser>>()\r\n                .AddDefaultUIUserFactory<PocoUser>((userName,email) =>\r\n                    new PocoUser()\r\n                    {\r\n                        UserName = userName,\r\n                        Email = email\r\n                    });\r\n```\r\n\r\nThoughts @ajcvickers @javiercn @blowdart ","Url":"https://github.com/aspnet/Identity/pull/1976","RelatedDescription":"Open PR \"[Design] Add UI user factory\" (#1976)"},{"Id":"362431510","IsPullRequest":false,"CreatedAt":"2018-09-21T02:16:38","Actor":"jamiewest","Number":"1972","RawContent":null,"Title":"Improve UserManager accessibility","State":"open","Body":"I was trying to override the `CreateAsync` method [here ](https://github.com/aspnet/Identity/blob/ed28df1236db01d75463f40bcf58d9e960a206a9/src/Core/UserManager.cs#L466-L483) but I lose access to `UpdateSecurityStampInternal(TUser user)` and `GetUserLockoutStore()`. It would be helpful to make the stores as well as the updating of the security stamp accessible on derived classes.","Url":"https://github.com/aspnet/Identity/issues/1972","RelatedDescription":"Open issue \"Improve UserManager accessibility\" (#1972)"}],"ResultType":"GitHubIssue"},"Kestrel-Issues":{"Issues":[{"Id":"368434568","IsPullRequest":true,"CreatedAt":"2018-10-09T23:15:43","Actor":"Tratcher","Number":"2997","RawContent":null,"Title":"Track aborted streams for a given grace period","State":"open","Body":" #2832 Aborted streams are given a 5 second non-configurable grace period for the client to react to the abort and stop sending frames. Data and trailers received after the grace period will be considered a connection error as before.\r\n\r\nI've also pulled in #2756 (Send a RST if the request body is not read) which is directly related to draining.\r\n\r\nWe were also missing a lock around the closing the request body pipe reader.\r\n\r\nPlease review by Wed EoD so we can get this in for Preview3.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2997","RelatedDescription":"Open PR \"Track aborted streams for a given grace period\" (#2997)"},{"Id":"367995627","IsPullRequest":true,"CreatedAt":"2018-10-09T00:17:24","Actor":"dotnet-maestro-bot","Number":"2996","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @halter73\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/KestrelHttpServer.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2996","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2996)"},{"Id":"367416139","IsPullRequest":true,"CreatedAt":"2018-10-09T00:06:15","Actor":"halter73","Number":"2992","RawContent":null,"Title":"Add HTTP/2 keep-alive and request header timeouts","State":"closed","Body":"","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2992","RelatedDescription":"Closed or merged PR \"Add HTTP/2 keep-alive and request header timeouts\" (#2992)"},{"Id":"367478349","IsPullRequest":false,"CreatedAt":"2018-10-08T17:42:38","Actor":"AceHack","Number":"2993","RawContent":null,"Title":"Is there a .NET core 2.2 HttpClient that can talk to Kestrel via http2?","State":"closed","Body":"Trying to test out some http2 performance stuff.  Thanks.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2993","RelatedDescription":"Closed issue \"Is there a .NET core 2.2 HttpClient that can talk to Kestrel via http2?\" (#2993)"},{"Id":"367749127","IsPullRequest":false,"CreatedAt":"2018-10-08T11:36:30","Actor":"jaiminsoni2017","Number":"2995","RawContent":null,"Title":"4077 ECONNRESET connection reset by peer","State":"open","Body":"EXCEPTION OCCURRED:Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.Internal.ConnectionResetException|Error -4077 ECONNRESET connection reset by peer|Void ThrowFailed()|   at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.PipeCompletion.ThrowFailed()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.Pipe.GetResult(ReadResult&amp; result)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.Pipe.Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IReadableBufferAwaiter.GetResult()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody.&lt;ReadAsync&gt;d__22.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.FrameRequestStream.&lt;ReadAsyncInternal&gt;d__21.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.WebUtilities.BufferedReadStream.&lt;EnsureBufferedAsync&gt;d__37.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.WebUtilities.MultipartReaderStream.&lt;ReadAsync&gt;d__36.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.WebUtilities.FileBufferingReadStream.&lt;ReadAsync&gt;d__35.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.WebUtilities.StreamHelperExtensions.&lt;DrainAsync&gt;d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Http.Features.FormFeature.&lt;InnerReadFormAsync&gt;d__18.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.FormValueProviderFactory.&lt;AddValueProviderAsync&gt;d__1.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.&lt;CreateAsync&gt;d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.ModelBinding.CompositeValueProvider.&lt;CreateAsync&gt;d__2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerBinderDelegateProvider.&lt;&gt;c__DisplayClass0_0.&lt;&lt;CreateBinderDelegate&gt;g__Bind|0&gt;d.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.&lt;InvokeInnerFilterAsync&gt;d__14.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.&lt;InvokeNextExceptionFilterAsync&gt;d__23.MoveNext()\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvException|Error -4077 ECONNRESET connection reset by peer","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2995","RelatedDescription":"Open issue \"4077 ECONNRESET connection reset by peer\" (#2995)"},{"Id":"367549697","IsPullRequest":true,"CreatedAt":"2018-10-07T12:24:56","Actor":"rehlert95","Number":"2994","RawContent":null,"Title":"removes unsafes from HttpHeaders","State":"open","Body":"Removes unsafe from class HttpHeaders\r\n- Uses ReadOnlySpan<char> instead of Pointers\r\n\r\nAddresses #2932","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2994","RelatedDescription":"Open PR \"removes unsafes from HttpHeaders\" (#2994)"},{"Id":"367345068","IsPullRequest":false,"CreatedAt":"2018-10-06T22:05:28","Actor":"CristianVladescu","Number":"2989","RawContent":null,"Title":"High memory usage observed during Kestrel stress test","State":"closed","Body":"I have set up a little VS solution to test if Kestrel is long term stable.\r\nThe solution has 2 projects in it, KestrelMemoryLeak, and StressW. KestrelMemoryLeak is a default RazorPages project listening on port 80 using Kestrel and StressW is a console application used to send a large number of requests to Kestrel, and it's automatically launched when KestrelMemoryLeak is launched.\r\n\r\nTo reproduce the issue, simply download [KestrelMemoryLeak](https://github.com/CristianVladescu/KestrelMemoryLeak) VS solution and press Start debugging.  If you monitor memory consumption, you will notice that the memory usage will rapidly raise to 1 GB, after which growing rate will be reduced, but still growing.\r\n\r\n![](https://github.com/CristianVladescu/KestrelMemoryLeak/raw/master/KestrelMemoryLeak/Diagnostics.PNG)\r\n\r\nI plan to run a small web server on a small linux VM (600 MB RAM) and this makes it worrying. The server won't see this kind of traffic, but I want to make sure is stable in worst case scenario.\r\nIs it possible to limit memory usage?","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2989","RelatedDescription":"Closed issue \"High memory usage observed during Kestrel stress test\" (#2989)"},{"Id":"367157849","IsPullRequest":false,"CreatedAt":"2018-10-06T06:35:58","Actor":"peppy","Number":"2986","RawContent":null,"Title":"Kestrel stops processing requests for a period","State":"closed","Body":"I have been migrating a .NET Framework 4.x project to .NET core. In the process I ran into an issue with `HttpListener` not working as expected, so migrated my code to use Kestrel.\r\n\r\nThe server application is a high-performance game server that handles request and response bodies in a completely custom way. It processes around 3000req/s. After around 5-30 minutes of correct execution, the server goes into a state where it is no longer processing incoming requests. Eventually it will recover from this state, but by this point clients believe they have lost connections.\r\n\r\nI have been debugging over the last few days and have ruled out my code being the direct issue, but I have also been unable to reproduce under non-production load. I did manage to get a core dump in the hanging state and you can find the log of sos EEstack [here](https://gist.github.com/peppy/de6a599a87041c269d420036d2be81ed). I am able to share any further lldb/sos output should it be relevant.\r\n\r\nWhile I fully intend to continue investigation on my own, I want to post this here for visibility in case someone working on the project can guide me in the right direction based on the thread call stacks above.\r\n\r\nThe project was built against `.NET core 2.1.4` / `Kestrel 2.2.0-preview2-35157` on a macOS host using `dotnet publish`, running on an Ubuntu host (rid `linux-x64`).\r\n\r\nNote that I was seeing similar behaviour before migrating from `HttpListener`, so it is quite possibly something at a lower level or unrelated to Kestrel directly.\r\n\r\nAs the project this is being used in is private, I cannot link to the source, but here is an extract showing how I am using Kestrel:\r\n\r\n```csharp\r\n\r\nprivate static void StartHttpListener()\r\n{\r\n    var host = new WebHostBuilder().UseKestrel(options =>\r\n        {\r\n            options.ConfigureEndpointDefaults(o => o.NoDelay = true);\r\n        })\r\n        .Configure(app =>\r\n        {\r\n            app.Run(context =>\r\n            {\r\n                DogStatsd.Increment(\"http_requests\");\r\n                return HandleConnection(context);\r\n            });\r\n        })\r\n        .UseUrls(\"http://*:80\")\r\n        .Build();\r\n\r\n    host.Run();\r\n}\r\n\r\nprivate static Task HandleConnection(HttpContext context)\r\n{\r\n    var request = context.Request;\r\n    var response = context.Response;\r\n    \r\n    var client = UserManager.GetClientFromToken(incomingToken);\r\n    if (client == null)\r\n    {\r\n        response.StatusCode = 403;\r\n        return Task.CompletedTask;\r\n    }\r\n\r\n    var tcs = new TaskCompletionSource<bool>();\r\n    \r\n    client.SetStreams(request.Body, response.Body, (int)(request.ContentLength ?? 0), tcs);\r\n    // the request is read by the client synchronously here.\r\n\r\n    // the response is processed and written to by a separate worker pool within one second of this call.\r\n    // after the worker finishes using the response, it will set tcs.SetResult(true) to complete the returned task below.\r\n    return tcs.Task;\r\n}\r\n\r\n```\r\n\r\nThanks in advance for any help with this issue.\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2986","RelatedDescription":"Closed issue \"Kestrel stops processing requests for a period\" (#2986)"},{"Id":"366121565","IsPullRequest":true,"CreatedAt":"2018-10-05T23:10:37","Actor":"JunTaoLuo","Number":"2976","RawContent":null,"Title":"Expose status code of BadHttpRequestException","State":"closed","Body":"Addresses #2909. We should probably avoid exposing `Reason` since that level of granularity is not likely needed. ","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2976","RelatedDescription":"Closed or merged PR \"Expose status code of BadHttpRequestException\" (#2976)"},{"Id":"367369960","IsPullRequest":true,"CreatedAt":"2018-10-05T22:56:31","Actor":"dotnet-maestro-bot","Number":"2990","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/KestrelHttpServer.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2990","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2990)"},{"Id":"367378737","IsPullRequest":false,"CreatedAt":"2018-10-05T21:45:58","Actor":"sebastienros","Number":"2991","RawContent":null,"Title":"Sockets is much slower than Libuv is some cases","State":"open","Body":"Some examples in the comments from this issue https://github.com/aspnet/KestrelHttpServer/issues/2621\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2991","RelatedDescription":"Open issue \"Sockets is much slower than Libuv is some cases\" (#2991)"},{"Id":"366567402","IsPullRequest":true,"CreatedAt":"2018-10-05T21:02:38","Actor":"Tratcher","Number":"2982","RawContent":null,"Title":"Http/2 response trailers","State":"closed","Body":" #622, Depends on https://github.com/aspnet/HttpAbstractions/pull/1043.\r\n\r\nIf any headers have been added to the trailer collection then they will be sent at the end of the request where we would normally send an empty data frame with END_STREAM.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2982","RelatedDescription":"Closed or merged PR \"Http/2 response trailers\" (#2982)"},{"Id":"367330732","IsPullRequest":false,"CreatedAt":"2018-10-05T19:00:57","Actor":"Tratcher","Number":"2988","RawContent":null,"Title":"Remove ServerAddress in 3.0","State":"open","Body":"https://github.com/aspnet/KestrelHttpServer/pull/2987/commits/e9eea50966ff8bd8bcae304c107f90c9022e9e57\r\n\r\nIt was obsoleted in 2.2 and now it should be removed in 3.0.","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2988","RelatedDescription":"Open issue \"Remove ServerAddress in 3.0\" (#2988)"},{"Id":"367305514","IsPullRequest":true,"CreatedAt":"2018-10-05T18:58:24","Actor":"dotnet-maestro-bot","Number":"2987","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @Tratcher\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/KestrelHttpServer.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2987","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2987)"},{"Id":"366006200","IsPullRequest":true,"CreatedAt":"2018-10-05T17:34:01","Actor":"SonicGD","Number":"2975","RawContent":null,"Title":"Implement #2230 - Consume BindingAddress instead of ServerAddress","State":"closed","Body":"Hello. I've tried to implement changes for #2230. I've done this:\r\n\r\n1. Marked ServerAddress obsolete and suppress CS0618 errors in ServerAddressTests\r\n2. Added reference to Microsoft.AspNetCore.Http in Kestrel.Core.csproj\r\n3. Replaced usage of ServerAddress.FromUrl with BindingAddress.Parse\r\n4. Update tests\r\n\r\nI hope nothing is wrong =)","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2975","RelatedDescription":"Closed or merged PR \"Implement #2230 - Consume BindingAddress instead of ServerAddress\" (#2975)"},{"Id":"366496500","IsPullRequest":false,"CreatedAt":"2018-10-05T00:55:17","Actor":"aspnet-hello","Number":"2980","RawContent":null,"Title":"Test failure: AppCanHandleClientAbortingConnectionMidRequest","State":"closed","Body":"This issue was made automatically. If there is a problem contact ryanbrandenburg.\n\nThis test [failed](http://aspnetci/viewLog.html?buildId=567511&buildTypeId=Releases_22xPublic_UbuntuUniverse) with the following error:\r\n\r\n```\r\nMoq.MockException : \r\nExpected invocation on the mock once, but was 0 times: t => t.ConnectionStop(It.IsAny<String>())\r\nNo setups configured.\r\nPerformed invocations:\r\nILogger.IsEnabled(Information)\r\nILogger.Log<Object>(Debug, 0, [[{OriginalFormat}, TestServer is listening on port 35410]], null, System.Func`3[System.Object,System.Exception,System.String])\r\nIKestrelTrace.ConnectionStart(\"0HLH9CKIPJ3CI\")\r\nILogger.IsEnabled(Critical)\r\nILogger.BeginScope<ConnectionLogScope>([[ConnectionId, 0HLH9CKIPJ3CI]])\r\nIKestrelTrace.RequestBodyStart(\"0HLH9CKIPJ3CI\", \"0HLH9CKIPJ3CI:00000001\")\r\nIKestrelTrace.ConnectionDisconnect(\"0HLH9CKIPJ3CI\")\r\nIKestrelTrace.RequestBodyDone(\"0HLH9CKIPJ3CI\", \"0HLH9CKIPJ3CI:00000001\")\r\nIKestrelTrace.ApplicationError(\"0HLH9CKIPJ3CI\", \"0HLH9CKIPJ3CI:00000001\", Microsoft.AspNetCore.Connections.ConnectionResetException: Error -104 ECONNRESET connection reset by peer ---> Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvException: Error -104 ECONNRESET connection reset by peer\r\n   --- End of inner exception stack trace ---\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.PipeCompletion.IsCompletedOrThrow()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.GetReadAsyncResult()\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.GetResult(Int16 token)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.RawStream.ReadAsyncInternal(Memory`1 destination) in /_/src/Kestrel.Core/Adapter/Internal/RawStream.cs:line 123\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.AdaptedPipeline.ReadInputAsync(Stream stream) in /_/src/Kestrel.Core/Adapter/Internal/AdaptedPipeline.cs:line 135\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.PipeCompletion.IsCompletedOrThrow()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Http1MessageBody.PumpAsync() in /_/src/Kestrel.Core/Internal/Http/Http1MessageBody.cs:line 120\r\n   at System.IO.Pipelines.PipeCompletion.ThrowLatchedException()\r\n   at System.IO.Pipelines.PipeCompletion.IsCompletedOrThrow()\r\n   at System.IO.Pipelines.Pipe.GetReadResult(ReadResult& result)\r\n   at System.IO.Pipelines.Pipe.ReadAsync(CancellationToken token)\r\n   at System.IO.Pipelines.Pipe.DefaultPipeReader.ReadAsync(CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody.CopyToAsync(Stream destination, CancellationToken cancellationToken) in /_/src/Kestrel.Core/Internal/Http/MessageBody.cs:line 86\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpRequestStream.CopyToAsyncInternal(Stream destination, CancellationToken cancellationToken) in /_/src/Kestrel.Core/Internal/Http/HttpRequestStream.cs:line 157\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.RequestTests.<>c__DisplayClass21_0.<<AppCanHandleClientAbortingConnectionMidRequest>b__1>d.MoveNext() in /_/test/Kestrel.Transport.FunctionalTests/RequestTests.cs:line 834\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Xunit.Assert.RecordExceptionAsync(Func`1 testCode) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\Record.cs:line 82\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application) in /_/src/Kestrel.Core/Internal/Http/HttpProtocol.cs:line 532)\r\n   at Moq.Mock.ThrowVerifyException(MethodCall expected, IEnumerable`1 setups, IEnumerable`1 actualCalls, Expression expression, Times times, Int32 callCount)\r\n   at Moq.Mock.VerifyCalls(Interceptor targetInterceptor, MethodCall expected, Expression expression, Times times)\r\n   at Moq.Mock.Verify[T](Mock`1 mock, Expression`1 expression, Times times, String failMessage)\r\n   at Moq.Mock`1.Verify(Expression`1 expression, Times times)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.RequestTests.AppCanHandleClientAbortingConnectionMidRequest(ListenOptions listenOptions) in /_/test/Kestrel.Transport.FunctionalTests/RequestTests.cs:line 865\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\n| [0.002s] TestLifetime Information: Starting test AppCanHandleClientAbortingConnectionMidRequest-http://127.0.0.1:0 at 2018-10-03T19:19:32\r\n| [0.003s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting starting\r\n| [0.015s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting started\r\n| [0.016s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Loaded hosting startup assembly Libuv.FunctionalTests, Version=2.2.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\r\n| [0.016s] Microsoft.AspNetCore.Server.Kestrel Debug: TestServer is listening on port 35410\r\n| [0.016s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLH9CKIPJ3CI\" started.\r\n| [0.018s] Microsoft.AspNetCore.Hosting.Internal.WebHost Information: Request starting HTTP/1.1 POST http:///  8192\r\n| [0.019s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLH9CKIPJ3CI\", Request id \"0HLH9CKIPJ3CI:00000001\": started reading request body.\r\n| [0.023s] Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv Debug: Connection id \"0HLH9CKIPJ3CI\" reset.\r\n| [0.024s] Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv Debug: Connection id \"0HLH9CKIPJ3CI\" sending FIN.\r\n| [0.024s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLH9CKIPJ3CI\" disconnecting.\r\n| [0.031s] Microsoft.AspNetCore.Server.Kestrel Debug: Connection id \"0HLH9CKIPJ3CI\", Request id \"0HLH9CKIPJ3CI:00000001\": done reading request body.\r\n| [0.038s] Microsoft.AspNetCore.Hosting.Internal.WebHost Debug: Hosting shutdown\r\n| [0.\r\n...\r\n```\r\n\r\nOther tests within that build may have failed with a similar message, but they are not listed here. Check the link above for more info.\r\n\r\nThis test failed on 2.2.\r\n\r\nCC @muratg","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2980","RelatedDescription":"Closed issue \"Test failure: AppCanHandleClientAbortingConnectionMidRequest\" (#2980)"},{"Id":"366509002","IsPullRequest":true,"CreatedAt":"2018-10-04T23:50:51","Actor":"dotnet-maestro-bot","Number":"2981","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @halter73\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/KestrelHttpServer merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/KestrelHttpServer.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2981","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2981)"},{"Id":"366131182","IsPullRequest":true,"CreatedAt":"2018-10-04T23:48:51","Actor":"halter73","Number":"2977","RawContent":null,"Title":"Improve RequestAborted token handling","State":"closed","Body":"- Improve test reliability of tests verifying the RequestAborted token gets tripped\r\n- Once the response body is completed, don't fire the token for that request even if it is accessed later on.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2977","RelatedDescription":"Closed or merged PR \"Improve RequestAborted token handling\" (#2977)"},{"Id":"366670351","IsPullRequest":true,"CreatedAt":"2018-10-04T22:37:24","Actor":"flash2048","Number":"2983","RawContent":null,"Title":"Use logical 'or' instead of bitwise in IsConnectionReset method.","State":"closed","Body":"Now in method **IsConnectionReset** used:\r\n`return errno == ECONNRESET || errno == EPIPE || errno == ENOTCONN | errno == EINVAL;`\r\n\r\nI think need use logical '**or**' for the last comparison too like this:\r\n`return errno == ECONNRESET || errno == EPIPE || errno == ENOTCONN || errno == EINVAL;`","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2983","RelatedDescription":"Closed or merged PR \"Use logical 'or' instead of bitwise in IsConnectionReset method.\" (#2983)"},{"Id":"366955983","IsPullRequest":false,"CreatedAt":"2018-10-04T21:36:47","Actor":"imxavi","Number":"2985","RawContent":null,"Title":"middleware to cancel request if custom timeout is reached","State":"closed","Body":"Hi,\r\nI need to cancel a request if an api is taking longer than a custom timout value.\r\nmake sense to do this?:\r\n\r\n```\r\n        public async Task InvokeAsync(HttpContext context)\r\n        {\r\n            int customTimeout = 500; //ms\r\n                var timeoutToken = new CancellationTokenSource();\r\n                timeoutToken.CancelAfter(customTimeout);\r\n                context.RequestAborted = timeoutToken.Token;\r\n\r\n                await _next(context);\r\n            }\r\n        }\r\n```\r\nwill the client be able to cancel the request with the original request token?\r\nwhat approach should I do then?\r\nwe can't call Cancel() on context.RequestAborted ...\r\nthanks","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2985","RelatedDescription":"Closed issue \"middleware to cancel request if custom timeout is reached\" (#2985)"},{"Id":"366915136","IsPullRequest":false,"CreatedAt":"2018-10-04T18:29:07","Actor":"halter73","Number":"2984","RawContent":null,"Title":"Stop referencing user-replaceable features for internal logic","State":"open","Body":"E.g. the use of RequestHeaders instead of HttpRequestHeaders in the following:\r\n\r\nhttps://github.com/aspnet/KestrelHttpServer/blob/35d35f22a36c9ba564889a355f09d95a8e5b78fe/src/Kestrel.Core/Internal/Http2/Http2MessageBody.cs#L19-L26","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2984","RelatedDescription":"Open issue \"Stop referencing user-replaceable features for internal logic\" (#2984)"},{"Id":"365972490","IsPullRequest":true,"CreatedAt":"2018-10-04T16:52:24","Actor":"Tratcher","Number":"2973","RawContent":null,"Title":"Disallow any frames after a reset is received","State":"closed","Body":"#2154 This covers the last H2spec test. The spec says that the client must not send additional header or data frames on a stream after sending a reset. There was a race where additional frames would be accepted up until the request processing ended and the stream was removed from the active streams list. I added a new flag to prevent this. This is similar to the EndOfStream flag but with a different error message and it does not cause the request body to appear complete but rather aborted. Technically this could be treated as a stream error but I've opted to leave it as a connection error for now, we handle those better.\r\n\r\n#2832 (not included) is related but covers an opposite scenario where the request is aborted from the server side but the client is still allowed to send frames for a given period. The current race there is that the frames are only accepted until the request processing ends and the stream is removed from the active streams list. The client may need more time to react so we'll want to do additional work there. I've not included any changes for that in this PR because there's no functional overlap, only conceptual.","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2973","RelatedDescription":"Closed or merged PR \"Disallow any frames after a reset is received\" (#2973)"},{"Id":"366143192","IsPullRequest":true,"CreatedAt":"2018-10-03T19:41:01","Actor":"halter73","Number":"2978","RawContent":null,"Title":"Make transport logs for connection close more detailed and consistent","State":"closed","Body":"This changes logs from looking like:\r\n\r\n```\r\n[3.014s] [Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets] [Debug] Connection id \"0HLH8Q5RC14J5\" aborted.\r\n```\r\n\r\nto looking like:\r\n\r\n```\r\n[0.013s] [Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets] [Debug] Connection id \"\"0HLH8PCPTBLE8\"\" closed with reason: \"The client closed the connection.\"\r\n```\r\n\r\n```\r\n[4.021s] [Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv] [Debug] Connection id \"0HLH8PBDE42MM\" closed with reason: \"The connection was timed out by the server because the response was not read by the client at the specified minimum data rate.\"\r\n```","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2978","RelatedDescription":"Closed or merged PR \"Make transport logs for connection close more detailed and consistent\" (#2978)"},{"Id":"366244520","IsPullRequest":false,"CreatedAt":"2018-10-03T09:16:56","Actor":"cibinmathewjose","Number":"2979","RawContent":null,"Title":"Kestral is very slow when posting data","State":"open","Body":"Please get the sample source from  https://github.com/cibinmathewjose/KestrelPostIssue.git \r\nrun the code and post {\"Name\":\"test\",\"Price\":1} to http://{machine}:5000/api/products, it will take ~6 seconds.\r\n\r\nif you post {\"Price\":1} to http://{machine}:5000/api/products it will work normally.\r\n\r\nThe put request endpoint is always slow with machine name url, regardless of the data posted.\r\n\r\nAlso if you use localhost instead of machine name in url, it will always works normal. \r\nthis is the same issue as #2229 ","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2979","RelatedDescription":"Open issue \"Kestral is very slow when posting data\" (#2979)"},{"Id":"365989885","IsPullRequest":true,"CreatedAt":"2018-10-02T16:56:27","Actor":"davidfowl","Number":"2974","RawContent":null,"Title":"Suppress the execution context per operation","State":"open","Body":"Today we capture and restore the execution context per Socket operation. There's no need to do that because it already happens in the async state machine. \r\n\r\nI need to measure the performance since we're making an additional method call per operation to save it on the other side, it might be a wash. Ideally, we would just use https://github.com/dotnet/corefx/issues/32582\r\n\r\n## BEFORE\r\n![image](https://user-images.githubusercontent.com/95136/46393963-4800a600-c69c-11e8-931d-585049da089c.png)\r\n\r\n## AFTER\r\n![image](https://user-images.githubusercontent.com/95136/46393797-93ff1b00-c69b-11e8-8842-a8f318f6d8a2.png)\r\n\r\nLook at that beautiful flattened frame 😄. This is the code being avoided https://github.com/dotnet/coreclr/blob/302630ed5a3730470e9ffeeebcd38c737c03963d/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs#L126-L202","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2974","RelatedDescription":"Open PR \"Suppress the execution context per operation\" (#2974)"},{"Id":"365850738","IsPullRequest":false,"CreatedAt":"2018-10-02T14:52:14","Actor":"busesorin94","Number":"2972","RawContent":null,"Title":"SocketsHttpHandler does not take into acount new certificate authorities","State":"closed","Body":"This issue only happens on .NET Core 2.1.X, when using DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=1.\r\nSteps to reproduce:\r\n1) Have a running application which calls a service using HTTPS for which the certificate authority is not trusted on the machine\r\n2) Install the new authority on the machine and run update-ca-certificates\r\n3) Call the service from the running .NET application\r\n\r\n*Expected behavior:*\r\nThe application should take into account the newly installed certificate authority, without restarting the application\r\n\r\n*Actual behavior:*\r\nAn exception is thrown:\r\n``\r\nSystem.Net.Http.HttpRequestException: The SSL connection could not be established\r\n``\r\n\r\n*Workaround:*\r\n1) You can restart the application after you run the update-ca-certificates command\r\n2) Add the environment variable DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=0\r\n","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2972","RelatedDescription":"Closed issue \"SocketsHttpHandler does not take into acount new certificate authorities\" (#2972)"},{"Id":"365375288","IsPullRequest":false,"CreatedAt":"2018-10-02T01:23:20","Actor":"dilushi","Number":"2969","RawContent":null,"Title":"System.Reflection.ReflectionTypeLoadException: Unable to load one or more of the requested types.","State":"closed","Body":"I'm getting below error when trying to start the .Net Core API deployed on IIS. Tried many workarounds but still couldn't resolve this issue. Appreciate any support on this.\r\n\r\n> 2018-10-01T10:10:42.6383743+01:00 0HLH7FMNJ4U50:00000002 [ERR] Connection id \"\"0HLH7FMNJ4U50\"\", Request id \"\"0HLH7FMNJ4U50:00000002\"\": An unhandled exception was thrown by the application. (560e7d32)\r\n> System.Reflection.ReflectionTypeLoadException: Unable to load one or more of the requested types. Retrieve the LoaderExceptions property for more information.\r\n>    at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)\r\n>    at System.Reflection.RuntimeAssembly.get_DefinedTypes()\r\n>    at Microsoft.AspNetCore.Mvc.Controllers.ControllerFeatureProvider.PopulateFeature(IEnumerable`1 parts, ControllerFeature feature)\r\n>    at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature[TFeature](TFeature feature)\r\n>    at Microsoft.AspNetCore.Mvc.Internal.ControllerActionDescriptorProvider.GetControllerTypes()\r\n>    at Microsoft.AspNetCore.Mvc.Internal.ControllerActionDescriptorProvider.BuildModel()\r\n>    at Microsoft.AspNetCore.Mvc.Internal.ControllerActionDescriptorProvider.GetDescriptors()\r\n>    at Microsoft.AspNetCore.Mvc.Internal.ControllerActionDescriptorProvider.OnProvidersExecuting(ActionDescriptorProviderContext context)\r\n>    at Microsoft.AspNetCore.Mvc.Internal.ActionDescriptorCollectionProvider.UpdateCollection()\r\n>    at Microsoft.AspNetCore.Mvc.Internal.ActionDescriptorCollectionProvider.get_ActionDescriptors()\r\n>    at Microsoft.AspNetCore.Mvc.Internal.AttributeRoute.GetTreeRouter()\r\n>    at Microsoft.AspNetCore.Mvc.Internal.AttributeRoute.RouteAsync(RouteContext context)\r\n>    at Microsoft.AspNetCore.Routing.RouteCollection.<RouteAsync>d__9.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at Microsoft.AspNetCore.Builder.RouterMiddleware.<Invoke>d__4.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at Microsoft.AspNetCore.Server.IISIntegration.IISMiddleware.<Invoke>d__11.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at Microsoft.AspNetCore.Hosting.Internal.RequestServicesContainerMiddleware.<Invoke>d__3.MoveNext()\r\n> --- End of stack trace from previous location where exception was thrown ---\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame`1.<ProcessRequestsAsync>d__2.MoveNext()\r\n> 2018-10-01T10:10:42.6385488+01:00 0HLH7FMNJ4U50:00000002 [INF] Request finished in 11.3774ms 500  (791a596a)\r\n> \r\n\r\n#.NET Core 2.0, #API, #IIS","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2969","RelatedDescription":"Closed issue \"System.Reflection.ReflectionTypeLoadException: Unable to load one or more of the requested types.\" (#2969)"},{"Id":"365621372","IsPullRequest":false,"CreatedAt":"2018-10-01T20:06:02","Actor":"Eilon","Number":"2971","RawContent":null,"Title":"Add support for LetsEncrypt certificate acquisition and rotation in Kestrel","State":"open","Body":"Original issue: https://github.com/aspnet/Home/issues/1190\r\n\r\ncc @blowdart","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2971","RelatedDescription":"Open issue \"Add support for LetsEncrypt certificate acquisition and rotation in Kestrel\" (#2971)"},{"Id":"365416292","IsPullRequest":false,"CreatedAt":"2018-10-01T11:21:06","Actor":"nefcanto","Number":"2970","RawContent":null,"Title":"Kestrel (or something I don't know) caches my API","State":"open","Body":"I've created a bunch of services using ASP.NET Core. I've hosted them in IIS using AspNetCoreModule. Nowhere I've used caching. In fact, I'm not familiar with the concept of caching at all in ASP.NET Core.\r\n\r\nI've published this service to two different servers. Both have this environment:\r\n\r\nWindows Server 2012 R2 Standard\r\nIIS 8.5.9600.16384\r\n\r\nThe problem is that one works just fine, the other caches my API requests. I've compared IIS configuration of two servers by comparing `Windows\\System32\\inetsrv\\config` folders, and they are the same.\r\n\r\nAlso `Web.config` files are the same on both machines. I'm stuck at this point on how to find and solve the problem. The problem should be environmental, since I've not configured anything related to caching in my codebase. In other words, codebase is the same across two machines. So that can't be the source of the caching problem.\r\n\r\nIs Kestrel the culprit here? How can I make sure that Kestrel is not caching my API responses without me knowing it?\r\n\r\nThis is the response header on when it's not cached:\r\n\r\n```\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json; charset=utf-8\r\nVary: Origin\r\nServer: Kestrel\r\nAccess-Control-Allow-Credentials: true\r\nAccess-Control-Allow-Origin: http://admin.vas.taak.io\r\nDate: Mon, 01 Oct 2018 11:37:44 GMT\r\nContent-Length: 8804\r\n\r\n```","Url":"https://github.com/aspnet/KestrelHttpServer/issues/2970","RelatedDescription":"Open issue \"Kestrel (or something I don't know) caches my API\" (#2970)"},{"Id":"364933230","IsPullRequest":true,"CreatedAt":"2018-09-28T15:33:49","Actor":"parvaurea","Number":"2968","RawContent":null,"Title":"Dockerization of KestrelHttpServer (DVSPIMP-2099)","State":"closed","Body":"This pull request adds the docker-compose requirements to the repo. No Other changes Or any changes to the existing code have been made. ","Url":"https://github.com/aspnet/KestrelHttpServer/pull/2968","RelatedDescription":"Closed or merged PR \"Dockerization of KestrelHttpServer (DVSPIMP-2099)\" (#2968)"}],"ResultType":"GitHubIssue"},"Razor-Issues":{"Issues":[{"Id":"368464550","IsPullRequest":true,"CreatedAt":"2018-10-10T02:02:26","Actor":"rynowak","Number":"2640","RawContent":null,"Title":"Update VS dependencies","State":"open","Body":"Updating all of our VS dependencies to the newest public/shipped version. This is precursor for using some 16.0 bits in the near future. \r\n\r\nDoesn't include Roslyn because @NTaylorMullen is doing that separately.","Url":"https://github.com/aspnet/Razor/pull/2640","RelatedDescription":"Open PR \"Update VS dependencies\" (#2640)"},{"Id":"368364571","IsPullRequest":true,"CreatedAt":"2018-10-09T22:46:30","Actor":"ajaybhargavb","Number":"2639","RawContent":null,"Title":"New baselines for TagHelperParseTreeRewriterTest","State":"closed","Body":"Part of #2584 \r\n\r\nConverted all of the TagHelperParseTreeRewriter tests. I understand it is impossible to look through each and every test. I suggest looking at as many different types of test as possible.\r\n\r\nI'm only including the test changes here because the source may change a lot and it isn't worth reviewing at this point. If anyone is interested the source is [here](https://github.com/aspnet/Razor/commit/67bc5eb22e0e98a30f5db25e70bcb1dba1de9d57).\r\n\r\nHere is the syntax for tag helpers,\r\n``` XML\r\n  <Node Name=\"MarkupTagHelperElementSyntax\" Base=\"MarkupSyntaxNode\">\r\n    <Kind Name=\"MarkupTagHelperElement\" />\r\n    <Field Name=\"StartTag\" Type=\"MarkupTagHelperStartTagSyntax\" />\r\n    <Field Name=\"Body\" Type=\"SyntaxList&lt;RazorSyntaxNode&gt;\" Optional=\"true\" />\r\n    <Field Name=\"EndTag\" Type=\"MarkupTagHelperEndTagSyntax\" Optional=\"true\" />\r\n  </Node>\r\n  <Node Name=\"MarkupTagHelperStartTagSyntax\" Base=\"RazorBlockSyntax\">\r\n    <Kind Name=\"MarkupTagHelperStartTag\" />\r\n    <Field Name=\"Children\" Type=\"SyntaxList&lt;RazorSyntaxNode&gt;\" Override=\"true\" />\r\n  </Node>\r\n  <Node Name=\"MarkupTagHelperEndTagSyntax\" Base=\"RazorBlockSyntax\">\r\n    <Kind Name=\"MarkupTagHelperEndTag\" />\r\n    <Field Name=\"Children\" Type=\"SyntaxList&lt;RazorSyntaxNode&gt;\" Override=\"true\" />\r\n  </Node>\r\n  <Node Name=\"MarkupTagHelperAttributeSyntax\" Base=\"MarkupSyntaxNode\">\r\n    <Kind Name=\"MarkupTagHelperAttribute\" />\r\n    <Field Name=\"NamePrefix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"Name\" Type=\"MarkupTextLiteralSyntax\" />\r\n    <Field Name=\"NameSuffix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"EqualsToken\" Type=\"SyntaxToken\">\r\n      <Kind Name=\"Equals\" />\r\n    </Field>\r\n    <Field Name=\"ValuePrefix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"Value\" Type=\"MarkupTagHelperAttributeValueSyntax\" />\r\n    <Field Name=\"ValueSuffix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n  </Node>\r\n  <Node Name=\"MarkupMinimizedTagHelperAttributeSyntax\" Base=\"MarkupSyntaxNode\">\r\n    <Kind Name=\"MarkupMinimizedTagHelperAttribute\" />\r\n    <Field Name=\"NamePrefix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"Name\" Type=\"MarkupTextLiteralSyntax\" />\r\n  </Node>\r\n  <Node Name=\"MarkupTagHelperAttributeValueSyntax\" Base=\"RazorBlockSyntax\">\r\n    <Kind Name=\"MarkupTagHelperAttributeValue\" />\r\n    <Field Name=\"Children\" Type=\"SyntaxList&lt;RazorSyntaxNode&gt;\" Override=\"true\" />\r\n  </Node>\r\n```","Url":"https://github.com/aspnet/Razor/pull/2639","RelatedDescription":"Closed or merged PR \"New baselines for TagHelperParseTreeRewriterTest\" (#2639)"},{"Id":"368213511","IsPullRequest":false,"CreatedAt":"2018-10-09T13:34:57","Actor":"hez2010","Number":"2638","RawContent":null,"Title":"[Feature Request] Support pulgins in razor pages for rendering","State":"open","Body":"Currently the content in a node will be rendered as what it has been written in cshtml files. I hope that you can provide the ability to use plugins.\r\n\r\nFor example, assuming we have a script compiler babel-loader and a UI library material-design:\r\n```html\r\n@{\r\n    var babeloption = new {\r\n        Options = new { \r\n            presets = new [] {\"babel-presets-env\" },\r\n            option = new [] { targets = new { ie = \"11\" } } \r\n        }\r\n    };\r\n}\r\n<script asp-plugin-babel-loader=\"@babeloption\">\r\n.... // The scripts in this node will be preprocessed by plugin babel-loader with option babeloption.Options before final rendering. \r\n</script>\r\n\r\n@{\r\n    var mdoption = new {\r\n        RenderAs = \"md\" // then we can use components defined in the library with prefix \"md:\"\r\n    };\r\n}\r\n\r\n<div asp-plugin-material-design=\"@mdoption\">\r\n   <md:button> ... </md:button>\r\n</div>\r\n\r\n<xxx asp-plugin-[plugin name]=\"[options]\">\r\n</xxx>\r\n```\r\n\r\nThe plugins can be installed from nuget or referenced from other .net standard assemblies. \r\n\r\nThis feature will brings a lot of features such as js minimize, browser polyfill, UI libraries and so on in the future (it needs supports both from official and community) and also razor will be a great solution for server rendering. ","Url":"https://github.com/aspnet/Razor/issues/2638","RelatedDescription":"Open issue \"[Feature Request] Support pulgins in razor pages for rendering\" (#2638)"},{"Id":"367995048","IsPullRequest":true,"CreatedAt":"2018-10-09T00:11:39","Actor":"NTaylorMullen","Number":"2637","RawContent":null,"Title":"Update Roslyn version to 2.9","State":"open","Body":"- Also disabled a failing test due to version bump.\r\n\r\n#2634","Url":"https://github.com/aspnet/Razor/pull/2637","RelatedDescription":"Open PR \"Update Roslyn version to 2.9\" (#2637)"},{"Id":"367991375","IsPullRequest":false,"CreatedAt":"2018-10-08T23:51:22","Actor":"NTaylorMullen","Number":"2636","RawContent":null,"Title":"Re-enable ManualServerShutdown_NoPipeName_ShutsDownServer with different pipe name choosing mechanism","State":"open","Body":"When updating Roslyn to 2.9.0 I ran into an issue with this test where the test would try to launch a non-published variant of rzc resulting in mismatched dependencies at runtime (explosions).\r\n\r\nWe need to change the test to use a published version of rzc and use a specific pipe name instead of relying on location.","Url":"https://github.com/aspnet/Razor/issues/2636","RelatedDescription":"Open issue \"Re-enable ManualServerShutdown_NoPipeName_ShutsDownServer with different pipe name choosing mechanism\" (#2636)"},{"Id":"367856826","IsPullRequest":false,"CreatedAt":"2018-10-08T17:06:56","Actor":"HamidTheGeek","Number":"2635","RawContent":null,"Title":"Razor changes the attribute's value to the attribute's name if the value was true.","State":"closed","Body":"#### Is this a Bug or Feature request?: \r\nI am not sure that whether is it a bug or meant to be like that.\r\n\r\n\r\n#### Steps to reproduce (preferably a link to a GitHub repo with a repro project):\r\nYou just need to add the following tag to any view file and check the result.\r\n``` html\r\n<input type=\"hidden\" value=\"@true\" />\r\n<input type=\"text\" value=\"@true\" />\r\n```\r\n\r\n#### Description of the problem:\r\nIf you pass the `true` as the value of a value attribute in input tag, it generates `value=\"value\"`. So if you have this tags in a form tag and try to bind them the boolean property value would be considered as false and the string would be change to value instead of true.","Url":"https://github.com/aspnet/Razor/issues/2635","RelatedDescription":"Closed issue \"Razor changes the attribute's value to the attribute's name if the value was true.\" (#2635)"},{"Id":"367418130","IsPullRequest":false,"CreatedAt":"2018-10-06T03:13:32","Actor":"rynowak","Number":"2634","RawContent":null,"Title":"Update to Microsoft.CodeAnalysis 2.9.0 for Microsoft.CodeAnalysis.Razor","State":"open","Body":"We need to update the version of Roslyn that we reference for 2.2 to pick up C# 7.3 - currently build-time compilation can use C# 7.3 but it won't be supported during runtime compilation.\r\n\r\nThis is something we generally do each release near the end because we're usually aligning with a Roslyn release. In this case the relevant bits have been available publicly for a few months. ","Url":"https://github.com/aspnet/Razor/issues/2634","RelatedDescription":"Open issue \"Update to Microsoft.CodeAnalysis 2.9.0 for Microsoft.CodeAnalysis.Razor\" (#2634)"},{"Id":"367385188","IsPullRequest":false,"CreatedAt":"2018-10-05T22:15:05","Actor":"NTaylorMullen","Number":"2633","RawContent":null,"Title":"DocumentSnapshot system needs to understands imports better","State":"open","Body":"tl;dr; Getting imports today isn't guaranteed to be correct in the DocumentSnapshot world.\r\n\r\nWhen you go through the process of adding documents to the project system you can get into an invalid state where documents you pull from the project system may generate invalid output. Basically, adding all .cshtml files => generating their output and then adding a _ViewImports.cshtml to the project system results in all of the previous files not seeing the _ViewImports.cshtml file.\r\n\r\nSo we need to design some mechanism when every time an important import file enters the system the ProjectSnapshotManager needs to update all documents in the project to be aware.\r\n\r\nThis isn't an issue in VS windows today because we don't rely on the DocumentSnapshot system for import updates.\r\n\r\n/cc @rynowak @ajaybhargavb ","Url":"https://github.com/aspnet/Razor/issues/2633","RelatedDescription":"Open issue \"DocumentSnapshot system needs to understands imports better\" (#2633)"},{"Id":"367305852","IsPullRequest":false,"CreatedAt":"2018-10-05T18:00:22","Actor":"dehghani-mehdi","Number":"2632","RawContent":null,"Title":"Add option to disable encoding","State":"closed","Body":"Hello,\r\n\r\nSeems like Razor encode string by default, it's good for English, but not for Non-English content. it can be fixed using `@Html.Raw`, but it's not great option I think.\r\n\r\nSo would you add an option to disable encoding?\r\n\r\nThanks.","Url":"https://github.com/aspnet/Razor/issues/2632","RelatedDescription":"Closed issue \"Add option to disable encoding\" (#2632)"},{"Id":"366993151","IsPullRequest":true,"CreatedAt":"2018-10-04T23:05:51","Actor":"dotnet-maestro-bot","Number":"2631","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @natemcmaster\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Razor merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Razor.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Razor/pull/2631","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2631)"},{"Id":"365620970","IsPullRequest":true,"CreatedAt":"2018-10-04T22:15:52","Actor":"ajaybhargavb","Number":"2624","RawContent":null,"Title":"Added MarkupElementRewriter","State":"closed","Body":"#2584 \r\n\r\nThis is going to be run before and after the tag helper phase. I am currently not adding any errors at this level. All errors will be added during the tag helper phase. Sending this as a separate PR just to make sure everyone is on the same page.\r\nAdded tests","Url":"https://github.com/aspnet/Razor/pull/2624","RelatedDescription":"Closed or merged PR \"Added MarkupElementRewriter\" (#2624)"},{"Id":"366828758","IsPullRequest":false,"CreatedAt":"2018-10-04T14:51:00","Actor":"AyoubHaggui","Number":"2630","RawContent":null,"Title":"Error rzc generate exited with code -2147450749","State":"open","Body":"I didn't find the matching error code anywhere, I'm a running a net core app 2.1 I use VS2017 Enterprise.  This is the error message I get:\r\n`\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\t\trzc generate exited with code -2147450749.\tBotFlow.Portal\tC:\\Users\\SP-Ayoub\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.2\\build\\netstandard2.0\\Microsoft.AspNetCore.Razor.Design.CodeGeneration.targets\t103\t\r\n`\r\nThis is the my .csproj:\r\n\r\n```xml\r\n<PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>\r\n    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>\r\n    <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <DocumentationFile>bin\\Debug\\netcoreapp2.0\\BotFlow.Portal.xml</DocumentationFile>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"FluentValidation\" Version=\"8.0.100\" />\r\n    <PackageReference Include=\"FluentValidation.AspNetCore\" Version=\"8.0.100\" />\r\n    <PackageReference Include=\"FluentValidation.ValidatorAttribute\" Version=\"8.0.100\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" Version=\"2.1.5\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.SpaServices\" Version=\"2.1.1\" />\r\n    <PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.1.5\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"3.0.0\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.2\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <!-- Files not to publish (note that the 'dist' subfolders are re-added below) -->\r\n    <Compile Remove=\"ClientApp\\dist\\**\" />\r\n    <Compile Remove=\"ClientApp\\environments\\**\" />\r\n    <Content Remove=\"ClientApp\\**\" />\r\n    <EmbeddedResource Remove=\"ClientApp\\dist\\**\" />\r\n    <EmbeddedResource Remove=\"ClientApp\\environments\\**\" />\r\n    <None Remove=\"ClientApp\\dist\\**\" />\r\n    <None Remove=\"ClientApp\\environments\\**\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Content Include=\"ClientApp\\angular.json\" />\r\n    <Content Include=\"ClientApp\\package-lock.json\" />\r\n    <Content Include=\"ClientApp\\package.json\" />\r\n    <Content Include=\"ClientApp\\src\\tsconfig.app.json\" />\r\n    <Content Include=\"ClientApp\\src\\tsconfig.spec.json\" />\r\n    <Content Include=\"ClientApp\\src\\tslint.json\" />\r\n    <Content Include=\"ClientApp\\tsconfig.json\" />\r\n    <Content Include=\"ClientApp\\tslint.json\" />\r\n  </ItemGroup>\r\n```","Url":"https://github.com/aspnet/Razor/issues/2630","RelatedDescription":"Open issue \"Error rzc generate exited with code -2147450749\" (#2630)"},{"Id":"366593851","IsPullRequest":false,"CreatedAt":"2018-10-04T03:21:19","Actor":"Jehoel","Number":"2629","RawContent":null,"Title":"How can I configure the Razor Language Service in Visual Studio 2017?","State":"closed","Body":"(Alternative title: \"Bug report: No documentation available regarding configuring Razor Language Services in Visual Studio 2017\".)\r\n\r\nSteps:\r\n1. Open Visual Studio 2017 (I'm running Enterprise 15.8.5)\r\n1. Create a new C# .NET Framework 4.7.2 Class Library project (not .NET Core or .NET Standard)\r\n1. Open the Project Properties and specify C# language version 7.3.\r\n1. Create a new `.cshtml` file in the project root.\r\n    * As there isn't an item-template for Razor files I used the HTML Page template and renamed the file extension to `.cshtml`.\r\n1. Open the file and the Text Editor with the Razor Language Service runs.\r\n1. Observe that IntelliSense and design-time build errors indicate  and with no custom assembly references, not even `System.Core.dll` so Linq isn't available.\r\n1. Add a new C# class `MyProject.TestClass` to the project in its own `.cs` file.\r\n\r\nObservations:\r\n1. The Razor Language Service is using the C# 4.0 compiler, not the C# 7.0 compiler.\r\n1. Classes in my project like `TestClass` are acessible in the Razor file, but not types defined in other assemblies referenced by my project (e.g. `System.Linq.Enumerable` in `System.Core.dll`)\r\n1. There doesn't seem to be any way to configure the Razor Language Service.\r\n\r\n","Url":"https://github.com/aspnet/Razor/issues/2629","RelatedDescription":"Closed issue \"How can I configure the Razor Language Service in Visual Studio 2017?\" (#2629)"},{"Id":"366436987","IsPullRequest":false,"CreatedAt":"2018-10-03T17:02:16","Actor":"Eilon","Number":"2628","RawContent":null,"Title":"Debugging Razor Class library VS 2017","State":"open","Body":"_From @olegsavelos on Wednesday, 03 October 2018 11:49:34_\r\n\r\nI am trying to debug a razor class library hosted by external process.\r\nI have set the configuration to a Launch: Executable this indeed start the executable but it don't seem that Visual Studio attaches to the process as i don't see no modules to be loaded and cant break.\r\n\r\nIn contradiction with a normal .NET class library when using the same approach Visual Studio attaches correctly to the launched process and debugging/breaking is possible.\r\n\r\nHere is example of launchSettings.json\r\n\r\n  \"profiles\": {\r\n    \"SampleModule\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Programs\\\\executable.exe\",\r\n      \"workingDirectory\": \"C:\\\\Programs\\\\\"\r\n    },\r\n\r\n_Copied from original issue: aspnet/Home#3579_","Url":"https://github.com/aspnet/Razor/issues/2628","RelatedDescription":"Open issue \"Debugging Razor Class library VS 2017\" (#2628)"},{"Id":"365905929","IsPullRequest":false,"CreatedAt":"2018-10-02T21:52:19","Actor":"FlukeFan","Number":"2626","RawContent":null,"Title":"How to use pre-compiled razor views with the same name, but  in different assemblies?","State":"closed","Body":"When using `<Project Sdk=\"Microsoft.NET.Sdk.Razor\">`, razor views are compiled into a `.Views.dll` assembly.  Each of the compiled views is decorated with a `IRazorSourceChecksumMetadata` that contains an `Identifier` that is unique to the assembly.\r\n\r\nIf you have a project where multiple independent libraries have views with the same `Identifier`, is there a way to reference the correct view?\r\n\r\nFor example, consider the projects:\r\n\r\n---- Web (references lib1 & lib2)\r\n¦\r\n---- Lib1 (contains precompiled `/Index.cshtml`)\r\n¦\r\n---- Lib2 (contains precompiled `/Index.cshtml`)\r\n\r\nIf a controller returns a `ViewResult` for `/Index.cshtml`, it will always return the view from Lib1.  I think the second view is (silently) ignored.\r\n\r\nAn example project can be found here:  https://github.com/FlukeFan/MultipleRazorLib\r\n","Url":"https://github.com/aspnet/Razor/issues/2626","RelatedDescription":"Closed issue \"How to use pre-compiled razor views with the same name, but  in different assemblies?\" (#2626)"},{"Id":"365995732","IsPullRequest":true,"CreatedAt":"2018-10-02T17:18:29","Actor":"NTaylorMullen","Number":"2627","RawContent":null,"Title":"Update Razor to use the latest completion API.","State":"closed","Body":"@Eilon @rynowak this has the goods for the completion changes.\r\n\r\n@AmadeusW everything look good here?","Url":"https://github.com/aspnet/Razor/pull/2627","RelatedDescription":"Closed or merged PR \"Update Razor to use the latest completion API.\" (#2627)"},{"Id":"365631683","IsPullRequest":true,"CreatedAt":"2018-10-02T00:28:42","Actor":"dotnet-maestro-bot","Number":"2625","RawContent":null,"Title":"[automated] Merge branch 'release/2.2' => 'master'","State":"closed","Body":"I detected changes in the release/2.2 branch which have not been merged yet to master.\r\nI'm a robot and am configured to help you automatically keep master up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.2 by the following committers:\n\n* @rynowak\n* @aspnetci\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout master\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/Razor merge/release/2.2-to-master:merge/release/2.2-to-master\r\ngit merge merge/release/2.2-to-master\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\nYou can do this [using GitHub](https://help.github.com/articles/resolving-a-merge-conflict-on-github/)\r\nor using the [command line](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/).\r\n\r\nMaintainers of this repo have permission to the branch 'merge/release/2.2-to-master' on https://github.com/dotnet-maestro-bot/Razor.\r\nYou can push changes to this branch to resolve conflicts or other issues in this pull request. The bot will attempt\r\nto update this branch as more changes are discovered on release/2.2.\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.","Url":"https://github.com/aspnet/Razor/pull/2625","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.2' => 'master'\" (#2625)"},{"Id":"364598169","IsPullRequest":true,"CreatedAt":"2018-10-01T20:00:46","Actor":"rynowak","Number":"2617","RawContent":null,"Title":"Fix #2265 - Port Blazor testing improvements","State":"closed","Body":"The Blazor test infrastructure made a copy of the code in Razor and then\r\nadded some more features. This change backports the features needed for\r\nthe style of test we're using in Blazor.\r\n\r\nI updated the MVC integration tests to use the new style, but I think\r\nthere's limited value in trying to rev all of the old tests.\r\n\r\nOne feature in particular that I removed from the old infrastructure was\r\nthe automatic inference of imports based on the file system. This\r\nfeature was wierd and doesn't parallel how these features work in\r\nactuality. It's easy and more natural to test imports in new style\r\ntests.","Url":"https://github.com/aspnet/Razor/pull/2617","RelatedDescription":"Closed or merged PR \"Fix #2265 - Port Blazor testing improvements\" (#2617)"},{"Id":"363918693","IsPullRequest":false,"CreatedAt":"2018-09-28T20:50:41","Actor":"luboid","Number":"2611","RawContent":null,"Title":"Razor Class Library, error NU1201: Project ... is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Project ... supports: netcoreapp2.1 (.NETCoreApp,Version=v2.1)","State":"closed","Body":"Hi\r\nI have problem with compiling **Razor Class Library** which depend on lib **Class Library 2.1**, Visual Studio don't allow change framework from netstandard2.0 to netstandard2.1 for Razor Class Library\r\n\r\n```cmd\r\nF:\\b3next\\B3Next.Clients>dotnet build\r\nMicrosoft (R) Build Engine version 15.8.166+gd4e8d81a88 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for F:\\b3next\\B3Next.Clients\\B3Next.Clients.Web.csproj...\r\n  Restore completed in 62,68 ms for F:\\b3next\\B3Next.Clients.Interfaces\\B3Next.Clients.Interfaces.csproj.\r\nF:\\b3next\\B3Next.Clients\\B3Next.Clients.Web.csproj : error NU1201: Project B3Next.Clients.Interfaces is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Project B3Next.Clients.Interfaces supports: netcoreapp2.1 (.NETCoreApp,Version=v2.1)\r\n  Generating MSBuild file F:\\b3next\\B3Next.Clients\\obj\\B3Next.Clients.Web.csproj.nuget.g.props.\r\n  Restore failed in 1,06 sec for F:\\b3next\\B3Next.Clients\\B3Next.Clients.Web.csproj.\r\n\r\nBuild FAILED.\r\n\r\nF:\\b3next\\B3Next.Clients\\B3Next.Clients.Web.csproj : error NU1201: Project B3Next.Clients.Interfaces is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Project B3Next.Clients.Interfaces supports: netcoreapp2.1 (.NETCoreApp,Version=v2.1)\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:02.67\r\n\r\nF:\\b3next\\B3Next.Clients>dotnet --version\r\n2.1.402\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/383517/46068873-d8158b80-c182-11e8-9519-a518a3a1ffe3.png)\r\n","Url":"https://github.com/aspnet/Razor/issues/2611","RelatedDescription":"Closed issue \"Razor Class Library, error NU1201: Project ... is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Project ... supports: netcoreapp2.1 (.NETCoreApp,Version=v2.1)\" (#2611)"},{"Id":"364942828","IsPullRequest":false,"CreatedAt":"2018-09-28T18:05:25","Actor":"Ryujose","Number":"2622","RawContent":null,"Title":"Razor view compilation in standalone app for emails","State":"closed","Body":"Hello community.\r\n\r\nI want to compile razor views in an standalone app that contains those views.\r\n\r\nWhat I need to compile those views like when we're working with MVC to see if there's is any issue and prompt it (The use of MvcBuildViews to be more precise), to ensure there isn't any surprise on the email templates?\r\n\r\nRegards.","Url":"https://github.com/aspnet/Razor/issues/2622","RelatedDescription":"Closed issue \"Razor view compilation in standalone app for emails\" (#2622)"},{"Id":"364969083","IsPullRequest":false,"CreatedAt":"2018-09-28T17:02:03","Actor":"rynowak","Number":"2623","RawContent":null,"Title":"Review and update dependencies in vsixmanifest","State":"open","Body":"https://github.com/aspnet/Razor/blob/master/tooling/Microsoft.VisualStudio.RazorExtension/source.extension.vsixmanifest#L16\r\n\r\nMany of these still say 15.0 even though we're targeting 16. The MPF one in particular may cause issues. ","Url":"https://github.com/aspnet/Razor/issues/2623","RelatedDescription":"Open issue \"Review and update dependencies in vsixmanifest\" (#2623)"},{"Id":"364691620","IsPullRequest":true,"CreatedAt":"2018-09-27T23:45:33","Actor":"ajaybhargavb","Number":"2621","RawContent":null,"Title":"New baselines for RazorDirectivesTest","State":"open","Body":"Another file with lots of tests","Url":"https://github.com/aspnet/Razor/pull/2621","RelatedDescription":"Open PR \"New baselines for RazorDirectivesTest\" (#2621)"},{"Id":"364678495","IsPullRequest":true,"CreatedAt":"2018-09-27T22:47:37","Actor":"ajaybhargavb","Number":"2620","RawContent":null,"Title":"Test Directives correctly","State":"closed","Body":"Because of some unknown reasons, almost all our directives tests were testing them under CSharp context when we know that is not real scenario. This is causing a lot of confusion when generating baselines for the new tree. So I decided to fix the existing baselines first to spare all of us from confusion later on.","Url":"https://github.com/aspnet/Razor/pull/2620","RelatedDescription":"Closed or merged PR \"Test Directives correctly\" (#2620)"},{"Id":"364616495","IsPullRequest":true,"CreatedAt":"2018-09-27T21:30:51","Actor":"ajaybhargavb","Number":"2618","RawContent":null,"Title":"New baselines for CSharpBlockTest","State":"closed","Body":"Lots of tests here. Skimming it should be fine.","Url":"https://github.com/aspnet/Razor/pull/2618","RelatedDescription":"Closed or merged PR \"New baselines for CSharpBlockTest\" (#2618)"},{"Id":"364659549","IsPullRequest":false,"CreatedAt":"2018-09-27T21:25:43","Actor":"ajaybhargavb","Number":"2619","RawContent":null,"Title":"[Tracking] Parser improvements feedback","State":"open","Body":"I'm putting all the miscellaneous improvements we want to do after we get the end-to-end working in the list below,\r\n\r\n- [ ] Cleanup attribute value\r\n- [ ] Cleanup how CSharpParser.ParseBlock()` works\r\n- [ ] Cleanup MarkupElementRewriter (Original comment: https://github.com/aspnet/Razor/pull/2624#pullrequestreview-160520343)\r\n- [ ] Should we generate classified spans for a tag helper end tag?","Url":"https://github.com/aspnet/Razor/issues/2619","RelatedDescription":"Open issue \"[Tracking] Parser improvements feedback\" (#2619)"},{"Id":"364276386","IsPullRequest":false,"CreatedAt":"2018-09-27T20:19:38","Actor":"wakuflair","Number":"2615","RawContent":null,"Title":"Is it possibile to implement Razor intellisense / syntax highlighting out of Visual Studio?","State":"closed","Body":"I want to create a tool which can edit Razor page (cshtml).\r\nFor now I use [AvalonEdit](https://github.com/icsharpcode/AvalonEdit) for basic editing.\r\nIt will be more useful to add Razor intellisense and syntax highlighting features in my tool.\r\n\r\nSo can Razor Language Service help me  and is it possibile to it out of Visual Studio?\r\nI need some guide for this, thanks.","Url":"https://github.com/aspnet/Razor/issues/2615","RelatedDescription":"Closed issue \"Is it possibile to implement Razor intellisense / syntax highlighting out of Visual Studio?\" (#2615)"},{"Id":"364320661","IsPullRequest":true,"CreatedAt":"2018-09-27T19:05:28","Actor":"ajaybhargavb","Number":"2616","RawContent":null,"Title":"New baselines for CSharpStatementTest","State":"closed","Body":"Should be straightforward","Url":"https://github.com/aspnet/Razor/pull/2616","RelatedDescription":"Closed or merged PR \"New baselines for CSharpStatementTest\" (#2616)"},{"Id":"364181094","IsPullRequest":true,"CreatedAt":"2018-09-27T06:04:24","Actor":"ajaybhargavb","Number":"2614","RawContent":null,"Title":"New baselines for HtmlTagTest and HtmlErrorTest","State":"closed","Body":"This is the last of Html related baseline tests. There shouldn't be any surprises here. ","Url":"https://github.com/aspnet/Razor/pull/2614","RelatedDescription":"Closed or merged PR \"New baselines for HtmlTagTest and HtmlErrorTest\" (#2614)"},{"Id":"364159578","IsPullRequest":true,"CreatedAt":"2018-09-26T19:40:28","Actor":"ajaybhargavb","Number":"2613","RawContent":null,"Title":"New baselines for HtmlAttributesTest","State":"closed","Body":"Attributes have a more defined structure in the new tree. Might be worth a deeper review for a few tests atleast.\r\n\r\nHere is the structure of attributes,\r\n``` XML\r\n  <AbstractNode Name=\"RazorBlockSyntax\" Base=\"RazorSyntaxNode\">\r\n    <Field Name=\"Children\" Type=\"SyntaxList&lt;RazorSyntaxNode&gt;\" />\r\n  </AbstractNode>\r\n  <Node Name=\"MarkupMinimizedAttributeBlockSyntax\" Base=\"MarkupSyntaxNode\">\r\n    <Kind Name=\"MarkupMinimizedAttributeBlock\" />\r\n    <Field Name=\"NamePrefix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"Name\" Type=\"MarkupTextLiteralSyntax\" />\r\n  </Node>\r\n  <Node Name=\"MarkupAttributeBlockSyntax\" Base=\"MarkupSyntaxNode\">\r\n    <Kind Name=\"MarkupAttributeBlock\" />\r\n    <Field Name=\"NamePrefix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"Name\" Type=\"MarkupTextLiteralSyntax\" />\r\n    <Field Name=\"NameSuffix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"EqualsToken\" Type=\"SyntaxToken\">\r\n      <Kind Name=\"Equals\" />\r\n    </Field>\r\n    <Field Name=\"ValuePrefix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"Value\" Type=\"RazorBlockSyntax\" />\r\n    <Field Name=\"ValueSuffix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n  </Node>\r\n  <Node Name=\"MarkupLiteralAttributeValueSyntax\" Base=\"MarkupSyntaxNode\">\r\n    <Kind Name=\"MarkupLiteralAttributeValue\" />\r\n    <Field Name=\"Prefix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"Value\" Type=\"MarkupTextLiteralSyntax\" />\r\n  </Node>\r\n  <Node Name=\"MarkupDynamicAttributeValueSyntax\" Base=\"MarkupSyntaxNode\">\r\n    <Kind Name=\"MarkupDynamicAttributeValue\" />\r\n    <Field Name=\"Prefix\" Type=\"MarkupTextLiteralSyntax\" Optional=\"true\" />\r\n    <Field Name=\"Value\" Type=\"RazorBlockSyntax\" />\r\n  </Node>\r\n```\r\n\r\nI'm also thinking I should rename `MarkupAttributeBlockSyntax` to be just `MarkupAttributeSyntax` but that can happen later.\r\n","Url":"https://github.com/aspnet/Razor/pull/2613","RelatedDescription":"Closed or merged PR \"New baselines for HtmlAttributesTest\" (#2613)"},{"Id":"364148795","IsPullRequest":false,"CreatedAt":"2018-09-26T18:10:13","Actor":"rynowak","Number":"2612","RawContent":null,"Title":"Razor 3.0 Versioning","State":"open","Body":"There are a few things we need to do to 'turn the crank' to bootstrap the 3.0 version of Razor. A list of things I can think of right now:\r\n\r\n- [ ] Create a `Microsoft.AspNetCore.Mvc.Razor.Extensions.Version2_X` tooling shim. This needs to go into the VSIX and get loaded at tool time for 2.X projects\r\n- [ ] Do the same as the above but for the 2_X tests. We want to make sure we can make changes to the 3.0 codebase while keeping old behaviour the same. \r\n- [ ] Update `Microsoft.AspNetCore.Mvc.Razor.Extensions` to the 3.0 language version and branding in MSBuild-related properties\r\n- [ ] Define a 3.0 Razor language version value in `Razor.Language`\r\n- [ ] Unit tests for project system, ProjectEngineFactory","Url":"https://github.com/aspnet/Razor/issues/2612","RelatedDescription":"Open issue \"Razor 3.0 Versioning\" (#2612)"}],"ResultType":"GitHubIssue"},"Templates-Issues":{"Issues":[{"Id":"233959214","IsPullRequest":false,"CreatedAt":"2018-09-20T20:23:28","Actor":"mlorbetske","Number":"850","RawContent":null,"Title":"File new default names inconsistency.","State":"closed","Body":"_From @Bartmax on July 24, 2015 2:48_\n\nAll items in the file new dialog (client side) default names kind of follows a pattern but it's not consistent:\n\nStyleSheet.css\nJavaScript.js\nhtmlpage.html (all lowercase)\nCoffeeScript.coffee\njson-schema.json\npackage.json\netc.\n\nSome must have a specific name (like package.json) while others just reflect the file type. \n\nI see 2 inconsistencies here:\n\n1) casing is inconsistent.\n2) TypeScript it suggest file.ts instead of TypeScript.ts\n\n\n_Copied from original issue: aspnet/Tooling#118_","Url":"https://github.com/aspnet/Templates/issues/850","RelatedDescription":"Closed issue \"File new default names inconsistency.\" (#850)"},{"Id":"255851740","IsPullRequest":false,"CreatedAt":"2018-09-20T20:23:20","Actor":"marcusien","Number":"867","RawContent":null,"Title":"Cannot force version of the template to install","State":"closed","Body":"Hi,\r\n\r\nMaybe there's something not documented but I'd like to install a version of my own template in a specific version.\r\n\r\nWe are creating our own template for our project and we create prerelease packages for our template using semver. The problem is with \"dotnet new -i\" command, we cannot specify a specific version","Url":"https://github.com/aspnet/Templates/issues/867","RelatedDescription":"Closed issue \"Cannot force version of the template to install\" (#867)"},{"Id":"264318035","IsPullRequest":true,"CreatedAt":"2018-09-20T20:23:13","Actor":"scottsauber","Number":"870","RawContent":null,"Title":"Change Lockout wording of comment","State":"closed","Body":"The Razor Pages Identity template turns on Lockout by default, unlike the MVC one.  This comment is left over from the MVC one and it no longer lines up with what is configured in the template.  I've reworded it to be accurate.  I can change it to just remove the comment all together if you want.","Url":"https://github.com/aspnet/Templates/pull/870","RelatedDescription":"Closed or merged PR \"Change Lockout wording of comment\" (#870)"},{"Id":"266880667","IsPullRequest":true,"CreatedAt":"2017-10-24T21:42:12","Actor":"s-whaley","Number":"873","RawContent":null,"Title":"Account AccessDenied View Razor Syntax Bug Fix","State":"closed","Body":"views/account/accessdenied ViewData[title] missing @ symbol","Url":"https://github.com/aspnet/Templates/pull/873","RelatedDescription":"Closed or merged PR \"Account AccessDenied View Razor Syntax Bug Fix\" (#873)"},{"Id":"267855162","IsPullRequest":false,"CreatedAt":"2017-10-24T19:00:48","Actor":"ezeasharma","Number":"874","RawContent":null,"Title":"The project file could not be loaded for csproj","State":"closed","Body":"I migrated my .netcore 1.1 proj to 2.0 using this link https://docs.microsoft.com/en-us/aspnet/core/migration/1x-to-2x/\r\n\r\nbut when i perform \"dotnet restore -v d\" i get the following error:\r\n\r\n```\r\nBuild started 10/23/2017 19:57:01.\r\n     1>Project \"someproj.csproj\" on node 1 (Restore target(s)).\r\n     1>Building with tools version \"15.0\".\r\n     1>someproj.csproj(1,1): error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1.\r\n     1>Done Building Project \"someproj.csproj\" (Restore target(s)) -- FAILED.\r\n\r\nBuild FAILED.\r\n\r\n       \"/someproj/someproj.csproj\" (Restore target) (1) ->\r\n         /someproj.csproj(1,1): error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 1, position 1.\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\nHere is the output for dotnet --info\r\n\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nThis is my csproj file\r\n```\r\n\r\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Folder Include=\"wwwroot\\\" />\r\n    <Folder Include=\"swagger_static\\\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Serilog\" Version=\"2.4.0\" />\r\n    <PackageReference Include=\"Serilog.Extensions.Logging\" Version=\"1.4.0\" />\r\n    <PackageReference Include=\"Serilog.Sinks.Console\" Version=\"2.1.0\" />\r\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"1.0.0\" />\r\n    <PackageReference Include=\"Dapper\" Version=\"1.50.2\" />\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"System.Threading\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n  <DotNetCliToolReference Include=\"Microsoft.EntityFrameworkCore.Tools.DotNet\" Version=\"2.0.0\" />\r\n  <DotNetCliToolReference Include=\"Microsoft.Extensions.SecretManager.Tools\" Version=\"2.0.0\" />\r\n  <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n</ItemGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\..\\..\\..\\recon.curator.common\\recon.curator.common.csproj\" />\r\n    <ProjectReference Include=\"..\\..\\..\\..\\recon.curator.service\\recon.curator.service.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```","Url":"https://github.com/aspnet/Templates/issues/874","RelatedDescription":"Closed issue \"The project file could not be loaded for csproj\" (#874)"},{"Id":"232879172","IsPullRequest":false,"CreatedAt":"2017-10-24T16:37:14","Actor":"a-elnajjar","Number":"847","RawContent":null,"Title":"Post test ","State":"closed","Body":"Hi asp.net Team;\r\nI see your Templates/test/Microsoft.Web.Templates.Web.Tests/WebAPITests.cs only have tow test methods for testing and verify GET Web API is working. I want to ask can I add testing and verify methods for POST Web API?","Url":"https://github.com/aspnet/Templates/issues/847","RelatedDescription":"Closed issue \"Post test \" (#847)"},{"Id":"252192148","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:47","Actor":"Dave3of5","Number":"864","RawContent":null,"Title":"Authentication on SPA apps","State":"closed","Body":"There seems to be no template for authentication on the SPA templates.\r\n\r\nI've been looking up various blog post and third party articles on how to add Jwt Authentication but they are scattered and most are for dotnet core 1.1. It would be nice if there was a template that showed the \"correct\" way to do this in dotnet core 2.0.","Url":"https://github.com/aspnet/Templates/issues/864","RelatedDescription":"Closed issue \"Authentication on SPA apps\" (#864)"},{"Id":"252376700","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:23","Actor":"pejta2207","Number":"865","RawContent":null,"Title":"Account/ConfirmEmail - NullReferenceException in Error.cshtml when providing incorrect token","State":"closed","Body":"**Description**\r\nThe issue is related to Individual Accounts Authentication template. It seems that providing incorrect authentication code for ConfirmEmail action in AccountController (e.g. token which already expired) should result in displaying error page. However, Razor throws an exception while generating the default error view:\r\n\r\n```\r\nNullReferenceException: Object reference not set to an instance of an object.\r\nAspNetCore._Views_Shared_Error_cshtml+<ExecuteAsync>d__0.MoveNext() in Error.cshtml, line 9\r\n```\r\n\r\n**Steps to reproduce**\r\n1. Create new project with Individual Accounts Authentication template.\r\n2. Run the application.\r\n3. Register any user via the registration form.\r\n4. Retrieve UserId of the registered user.\r\n5. Try to confirm email with incorrect token, e.g. http://localhost:PORT/Account/ConfirmEmail?UserId={UserId}&Code=INVALID_CODE\r\n\r\n**Further technical details**\r\nIt's probably caused by the last line in ConfirmEmail action in AccountController:\r\n```\r\nvar result = await _userManager.ConfirmEmailAsync(user, code);\r\nreturn View(result.Succeeded ? \"ConfirmEmail\" : \"Error\");\r\n```\r\n\r\nWhen invalid token is passed, Error view is not provided with `ErrorViewModel`. When `Model` is accessed in 9th line of Error.cshtml (`@if (Model.ShowRequestId)`), it throws NullReferenceException.","Url":"https://github.com/aspnet/Templates/issues/865","RelatedDescription":"Closed issue \"Account/ConfirmEmail - NullReferenceException in Error.cshtml when providing incorrect token\" (#865)"},{"Id":"260997320","IsPullRequest":false,"CreatedAt":"2017-10-24T16:36:05","Actor":"joeaudette","Number":"868","RawContent":null,"Title":"IEmailSender should have explicitly named parameters for html vs plain text","State":"closed","Body":"There have been a number of people reporting bugs about the email confirmation link in the StarterWeb template not working.\r\n\r\nThis is happening because people implement IEmailSender and don't realize that the message being passed in is html. When they send the email as plain text the confirmation link does not work because of the url encoding.\r\n\r\nI think the \"message\" parameter of SendEmailAsync should be renamed to htmlMessage and possibly should have an additional parameter for \"plainTextMessage\" and both should be passed in from AccountController.\r\n\r\nThis would make it more clear to implementors of IEmailSender what kind of string(s) they are dealing with and how to correctly implement it.\r\n\r\nrelated issues:\r\nhttps://github.com/aspnet/Home/issues/2152\r\nhttps://github.com/aspnet/Home/issues/2217","Url":"https://github.com/aspnet/Templates/issues/868","RelatedDescription":"Closed issue \"IEmailSender should have explicitly named parameters for html vs plain text\" (#868)"},{"Id":"268102418","IsPullRequest":false,"CreatedAt":"2017-10-24T16:35:17","Actor":"Eilon","Number":"875","RawContent":null,"Title":"This repo is OBSOLETE - please see the README file for information","State":"open","Body":"Please refer to the README at https://github.com/aspnet/Templates for information.","Url":"https://github.com/aspnet/Templates/issues/875","RelatedDescription":"Open issue \"This repo is OBSOLETE - please see the README file for information\" (#875)"},{"Id":"266114525","IsPullRequest":false,"CreatedAt":"2017-10-21T00:03:24","Actor":"tverboon","Number":"872","RawContent":null,"Title":"Unnecessary User.Id provided in password reset link?","State":"closed","Body":"The user Id is provided in the callback link:\r\n\r\nhttps://github.com/aspnet/Templates/blob/f237bb024e1c8f05a7d78c215be2224022d2c153/template_feed/Microsoft.DotNet.Web.ProjectTemplates.2.0/content/StarterWeb-CSharp/Controllers/AccountController.cs#L424\r\n\r\nBut in the controller action only code is used:\r\nhttps://github.com/aspnet/Templates/blob/f237bb024e1c8f05a7d78c215be2224022d2c153/template_feed/Microsoft.DotNet.Web.ProjectTemplates.2.0/content/StarterWeb-CSharp/Controllers/AccountController.cs#L443\r\n\r\nIn my opinion it's better not to provide more information than necessary.","Url":"https://github.com/aspnet/Templates/issues/872","RelatedDescription":"Closed issue \"Unnecessary User.Id provided in password reset link?\" (#872)"},{"Id":"265394026","IsPullRequest":false,"CreatedAt":"2017-10-13T20:09:16","Actor":"jkotalik","Number":"871","RawContent":null,"Title":"Add HttpsRedirection and HSTS middleware template","State":"closed","Body":"With https://github.com/aspnet/BasicMiddleware/pull/264 being added, @Eilon asked me to write templates for this feature.\r\ncc/ @javiercn @Tratcher ","Url":"https://github.com/aspnet/Templates/issues/871","RelatedDescription":"Closed issue \"Add HttpsRedirection and HSTS middleware template\" (#871)"},{"Id":"262627101","IsPullRequest":false,"CreatedAt":"2017-10-04T00:00:30","Actor":"Rick-Anderson","Number":"869","RawContent":null,"Title":"QR Codes should be supported in templates","State":"closed","Body":"[Enabling QR Code generation for authenticator apps](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-enable-qrcodes)\r\n\r\nThat should be supported in the templates like [SMS 2FA](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/2fa) used to be. \r\n\r\nrequested by customer in [Enabling QR Code generation for authenticator apps](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-enable-qrcodes) comments","Url":"https://github.com/aspnet/Templates/issues/869","RelatedDescription":"Closed issue \"QR Codes should be supported in templates\" (#869)"},{"Id":"254163608","IsPullRequest":false,"CreatedAt":"2017-09-07T12:16:42","Actor":"elAndyG","Number":"866","RawContent":null,"Title":"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)","State":"closed","Body":"After updating angular to 4.3.6, an internal server error begins to throw \"NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor.\"\r\n\r\nSteps to reproduce:\r\n1. cmd to c:\\\r\n2. dotnet --version \r\n_2.0.0_\r\n3. mkdir dummy\r\n4. cd dummy\r\n5. dotnet new angular\r\n6. dotnet restore\r\n7. npm install\r\n8. dotnet run (prove it works)\r\n8a. ctrl+c to stop the server/build\r\n9. update all @angular from \"4.2.5\" to \"4.3.6\"\r\n10. npm update\r\n11. dotnet run\r\n...You should now crash... (see below)\r\n12. change 4.3.6 back to 4.2.5 and \r\nrepeat 10 and 11.\r\nYou should now work again.\r\n\r\nPlease let me know i there's anything else i can provide to help. Thank you!\r\n\r\n`NodeInvocationException: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]).\r\n Error: Can't resolve all parameters for HttpXsrfCookieExtractor: (?, [object Object], [object Object]). at Error (native) at syntaxError (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:37092:34) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getDependenciesMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51159:35) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getTypeMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51027:26) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getInjectableMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51013:21) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getProviderMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51304:40) at C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51233:49 at Array.forEach (native) at CompileMetadataResolver.module.exports.CompileMetadataResolver._getProvidersMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:51193:19) at CompileMetadataResolver.module.exports.CompileMetadataResolver.getNgModuleMetadata (C:\\toolkit-test\\ClientApp\\dist\\vendor.js:50848:50)\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.HttpNodeInstance+<InvokeExportAsync>d__7.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.HostingModels.OutOfProcessNodeInstance+<InvokeExportAsync>d__13.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.NodeServices.NodeServicesImpl+<InvokeExportWithPossibleRetryAsync>d__10.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.SpaServices.Prerendering.PrerenderTagHelper+<ProcessAsync>d__29.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner+<RunAsync>d__0.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nAspNetCore._Views_Home_Index_cshtml+<ExecuteAsync>d__12.MoveNext() in Index.cshtml\r\n+\r\n    ViewData[\"Title\"] = \"Home Page\";\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageCoreAsync>d__16.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderPageAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nSystem.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\nMicrosoft.AspNetCore.Mvc.Razor.RazorView+<RenderAsync>d__14.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewExecutor+<ExecuteAsync>d__21.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.ViewResult+<ExecuteResultAsync>d__26.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeResultAsync>d__19.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResultFilterAsync>d__24.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.SpaServices.Webpack.ConditionalProxyMiddleware+<Invoke>d__6.MoveNext()\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\nSystem.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()`\r\n","Url":"https://github.com/aspnet/Templates/issues/866","RelatedDescription":"Closed issue \"Cannot update @angular to 4.3.0+ (trying to update to 4.3.6)\" (#866)"},{"Id":"251697737","IsPullRequest":true,"CreatedAt":"2017-08-22T14:57:33","Actor":"phenning","Number":"862","RawContent":null,"Title":"Use template engine templates","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/pull/862","RelatedDescription":"Closed or merged PR \"Use template engine templates\" (#862)"},{"Id":"251783689","IsPullRequest":false,"CreatedAt":"2017-08-21T22:59:07","Actor":"GoshaFighten","Number":"863","RawContent":null,"Title":"Can't compile the devextreme-angular package in the Production mode using the ASP.NET Core 2.0 Angular template","State":"closed","Body":"This issue relates to the [one](https://github.com/DevExpress/devextreme-angular/issues/534). I've created an Angular application using .NET Core 2.0. The issue is reproducible regardless if I use Visual Studio 2017 15.3 or `dotnet new angular`. Everything works fine in the Development mode. But, once I publish my application with the [DevExtreme Angular](https://github.com/DevExpress/devextreme-angular) package using `dotnet publish -c Release`, I'm getting the following error:\r\n\r\n```\r\n      ERROR in ./$$_gendir/~/devextreme-angular/ui/data-grid.ngfactory.ts\r\n      Module parse failed: D:\\FromCustomers\\GH534\\NGCore\\NGCore\\$$_gendir\\node_modules\\devextreme-angular\\ui\\data-grid.ngfactory.ts Unexpected token (63:38)\r\n      You may need an appropriate loader to handle this file type.\r\n      | import * as i52 from 'devextreme-angular/core/iterable-differ-helper';\r\n      | import * as i53 from 'devextreme-angular/core/nested-option';\r\n      | export const DxDataGridModuleNgFactory:i0.NgModuleFactory<i1.DxDataGridModule> = i0.╔╡cmf(i1.DxDataGridModule,\r\n      |     ([] as any[]),(_l:any) => {\r\n      |       return i0.╔╡mod([i0.╔╡mpd(512,i0.ComponentFactoryResolver,i0.╔╡CodegenComponentFactoryResolver,\r\n       @ ./$$_gendir/ClientApp/app/components/fetchdata/fetchdata.component.ngfactory.ts 8:0-102\r\n       @ ./$$_gendir/ClientApp/app/app.module.server.ngfactory.ts\r\n       @ ./ClientApp/boot.server.ts\r\nD:\\FromCustomers\\GH534\\NGCore\\NGCore\\NGCore.csproj(41,5): error MSB3073: The command \"node node_modules/webpack/bin/webpack.js --env.prod\" exited with code 2.\r\n```\r\n\r\nI added\r\n\r\n```\r\n\"devextreme\": \"^17.1.5\",\r\n\"devextreme-angular\": \"^17.1.5\",\r\n```\r\n\r\nto the `package.json` file. Then, I added DevExtreme CSS files to the `webpack.config.vendor.js` as\r\n\r\n```\r\nconst nonTreeShakableModules = [\r\n    'bootstrap',\r\n    'bootstrap/dist/css/bootstrap.css',\r\n    'es6-promise',\r\n    'es6-shim',\r\n    'event-source-polyfill',\r\n    'jquery',\r\n    'devextreme/dist/css/dx.common.css',\r\n    'devextreme/dist/css/dx.light.css'\r\n];\r\n```\r\n\r\nIf instead of the following line in the webpack.config.js file\r\n\r\n```\r\n{ test: /\\.ts$/, include: /ClientApp/, use: isDevBuild ? ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] : '@ngtools/webpack' },\r\n```\r\n\r\nI use\r\n\r\n```\r\n{ test: /\\.ts$/, use: isDevBuild ? ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] : '@ngtools/webpack' },\r\n```\r\n\r\nor\r\n\r\n```\r\n{ test: /\\.ts$/, include: /ClientApp/, use: ['awesome-typescript-loader?silent=true', 'angular2-template-loader'] },\r\n```\r\n\r\neverything works fine. A similar configuration in a project created using Angular CLI works fine as well.\r\n\r\nThe attached `NGCore` project illustrates the issue and `test-app` created with Angular CLI illustrates that this works in a standard Angular CLI project after I call `ng eject`.\r\n\r\nWhat can be the problem here? Is it in DevExtreme modules or in your webpack configuration?\r\n[test-app.zip](https://github.com/aspnet/Templates/files/1240256/test-app.zip)\r\n[NGCore.zip](https://github.com/aspnet/Templates/files/1240259/NGCore.zip)\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/863","RelatedDescription":"Closed issue \"Can't compile the devextreme-angular package in the Production mode using the ASP.NET Core 2.0 Angular template\" (#863)"},{"Id":"248880384","IsPullRequest":false,"CreatedAt":"2017-08-09T00:05:00","Actor":"Rick-Anderson","Number":"861","RawContent":null,"Title":"Razor Page scaffolder should add `@page \"{id:int}\"` directive","State":"closed","Body":"The RP scaffolder should add `@page \"{id:int}\"` directive so generated links pass the ID as route data, not query strings.\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/861","RelatedDescription":"Closed issue \"Razor Page scaffolder should add `@page \"{id:int}\"` directive\" (#861)"},{"Id":"248842171","IsPullRequest":false,"CreatedAt":"2017-08-08T20:59:26","Actor":"Rick-Anderson","Number":"860","RawContent":null,"Title":"Razor Pages scaffolder eats    DbUpdateConcurrencyException","State":"closed","Body":"Expected behavior:\r\nScaffolder should correctly handle `DbUpdateConcurrencyException`\r\n\r\nActual behavior:\r\n`DbUpdateConcurrencyException` is caught and ignored.\r\n\r\nTo repro: \r\n\r\n* Create a RP project and add a model.\r\n* [Scaffold the model](https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/model#add-scaffold-tooling-and-perform-initial-migration)\r\n\r\nThe *Edit.cshtml.cs* file contains the following code:\r\n\r\n```cs\r\npublic async Task<IActionResult> OnPostAsync()\r\n{\r\n    if (!ModelState.IsValid)\r\n    {\r\n        return Page();\r\n    }\r\n\r\n    _context.Attach(Movie).State = EntityState.Modified;\r\n\r\n    try\r\n    {\r\n        await _context.SaveChangesAsync();\r\n    }\r\n    catch (DbUpdateConcurrencyException)\r\n    {\r\n        \r\n    }\r\n\r\n    return RedirectToPage(\"./Index\");\r\n}\r\n```\r\nIt should be\r\n\r\n```cs\r\ncatch (DbUpdateConcurrencyException)\r\n        {\r\n            if (!MovieExists(movie.ID))\r\n            {\r\n                return NotFound();\r\n            }\r\n            else\r\n            {\r\n                throw;\r\n            }\r\n        }\r\n```\r\n","Url":"https://github.com/aspnet/Templates/issues/860","RelatedDescription":"Closed issue \"Razor Pages scaffolder eats    DbUpdateConcurrencyException\" (#860)"},{"Id":"248139089","IsPullRequest":false,"CreatedAt":"2017-08-08T04:05:18","Actor":"alexavrutin","Number":"859","RawContent":null,"Title":"r1","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/issues/859","RelatedDescription":"Closed issue \"r1\" (#859)"},{"Id":"238353055","IsPullRequest":false,"CreatedAt":"2017-08-03T18:01:57","Actor":"stevedesmond-ca","Number":"851","RawContent":null,"Title":"Why do non-sentence headers end in a period?","State":"closed","Body":"See https://github.com/aspnet/Templates/blob/dev/src/Rules/StarterWeb/IndividualAuth/Views/Account/ResetPasswordConfirmation.cshtml as an example -- almost all the `<h1>`s have periods after them, when they should more likely be Title Case with no period.","Url":"https://github.com/aspnet/Templates/issues/851","RelatedDescription":"Closed issue \"Why do non-sentence headers end in a period?\" (#851)"},{"Id":"247185643","IsPullRequest":false,"CreatedAt":"2017-08-03T17:58:29","Actor":"Rick-Anderson","Number":"858","RawContent":null,"Title":"Razor Page templates use fully qualified name ","State":"closed","Body":"The constructor uses the FQN when it's not necessary. For example:\r\n\r\nSee [Pages/Movie/Index.cshtml.cs](https://github.com/aspnet/Docs/blob/master/aspnetcore/tutorials/razor-pages/razor-pages-start/sample/RazorPagesMovie/Pages/Movie/Index.cshtml.cs#L14-L16)\r\n\r\n`using RazorPagesMovie.Models;` is in the template.\r\n\r\nTo repro - follow the [Razor Pages tutorial](https://docs.microsoft.com/en-us/aspnet/core/tutorials/razor-pages/model)\r\n","Url":"https://github.com/aspnet/Templates/issues/858","RelatedDescription":"Closed issue \"Razor Page templates use fully qualified name \" (#858)"},{"Id":"246217674","IsPullRequest":false,"CreatedAt":"2017-08-03T17:56:43","Actor":"Rick-Anderson","Number":"857","RawContent":null,"Title":"Templates should use app.UseMvcWithDefaultRoute();","State":"closed","Body":"I recommend the templates use `app.UseMvcWithDefaultRoute();` rather than\r\n\r\n```csharp\r\napp.UseMvc(routes =>\r\n{\r\n    routes.MapRoute(\r\n        name: \"default\",\r\n        template: \"{controller}/{action=Index}/{id?}\");\r\n});\r\n```\r\n\r\nThe more complex code is a barrier to entry for new users who don't need this flexibility. Advanced users will have no problem adding the above code when they need it. The code above doesn't make much sense to Razor Pages developers. Recommend this change for all templates but especially for the Razor Pages template.\r\n\r\ncc @DamianEdwards  - part of the lower the barrier to entry effort.","Url":"https://github.com/aspnet/Templates/issues/857","RelatedDescription":"Closed issue \"Templates should use app.UseMvcWithDefaultRoute();\" (#857)"},{"Id":"244917331","IsPullRequest":false,"CreatedAt":"2017-08-03T17:55:35","Actor":"RehanSaeed","Number":"856","RawContent":null,"Title":"Sharing Common Files Between Templates","State":"closed","Body":"I have a ReadMe.html file which I'd like to share between my project templates. The file is mostly the same for all three templates, except that it contains a few symbols common to all my templates. I'd like to keep one copy of this file and use symbols to define template specific sections.\r\n```\r\n<html>\r\n<p>Common paragraph...</p>\r\n<!--#if MyTemplate1-->\r\n<p>MyTemplate1 paragraph...</p>\r\n<!--#endif-->\r\n<!--#if MyTemplate2-->\r\n<p>MyTemplate2 paragraph...</p>\r\n<!--#endif-->\r\n</html>\r\n```\r\n\r\nI can think of a way this might work without any help from the templating engine: Keep a common copy of the file, then copy the file into the template folders as a pre-packaging step in my build script. The disadvantage is that now I have three copies of my file unless I use a .gitignores file but then I have the extra step of having to remove the .gitignores file from the template output.\r\n\r\nI propose that you should be able to add a file as a link, then mark that file as common in your template.json file. Finally, when generating the project, the file is converted from a linked file, into a real one.\r\n","Url":"https://github.com/aspnet/Templates/issues/856","RelatedDescription":"Closed issue \"Sharing Common Files Between Templates\" (#856)"},{"Id":"244134597","IsPullRequest":false,"CreatedAt":"2017-08-03T17:30:02","Actor":"jkotalik","Number":"855","RawContent":null,"Title":"File new template error for Windows 8.1 32 bit for individual auth.","State":"closed","Body":"Steps:\r\n\r\n1. Download VS2017 Int Preview and dotnet preview3 on Windows 8.1 32 bit.\r\n2. File new... ASP.NET Core app, Web Application with Individual User Accounts Authorization\r\n3. Run application, try to register a new user\r\n\r\nExpected Results: A page would show up saying to apply migrations to the database or the user is registered.\r\nActual Results: SqlException on the SQL Server not being found. \r\n![4fce5f97](https://user-images.githubusercontent.com/8302101/28383504-3b7bf12c-6c76-11e7-91d0-5fe2675924a2.PNG)\r\n\r\n\r\nThe fix I had to do was change the ConnectionStrings' DefaultConnection from mssqllocaldb to ProjectsV12. \r\n\r\nMost likely, we would need to change https://github.com/aspnet/Templates/blob/a594b47c417593d43141d3b4eb2bc41d6ad85f20/src/Rules/StarterWeb/IndividualAuth/appsettings.json#L3 to use a variable for the database.","Url":"https://github.com/aspnet/Templates/issues/855","RelatedDescription":"Closed issue \"File new template error for Windows 8.1 32 bit for individual auth.\" (#855)"},{"Id":"244047453","IsPullRequest":false,"CreatedAt":"2017-07-20T08:45:31","Actor":"dazinator","Number":"854","RawContent":null,"Title":"typescript confiugration file item template","State":"closed","Body":"When the typescript configuration file is added to a project, by default it is \"content\" which also by default means it ends up being included in the nuget package when you do a `dotnet pack`. Given that the typescript configuration file is used primarily at build time, I don't think it should be included in a resulting nuget pack by default. Can it be changed to create this in the `csproj`:\r\n\r\n```\r\n <ItemGroup>\r\n    <Content Update=\"Scripts\\tsconfig.json\">\r\n      <Pack>false</Pack>\r\n    </Content>\r\n  </ItemGroup>\r\n```\r\n\r\nWithout this, if another project takes a dependency on this nuget package, you get build errors like this:\r\n\r\n```\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tTS18003\tBuild:No inputs were found in config file 'C:/Users/darrell.tunnell/.nuget/packages/gluon.module.themeswitcher/2.0.0/contentFiles/any/net452/Scripts/tsconfig.json'. Specified 'include' paths were '[\"**/*\"]' and 'exclude' paths were '[\"node_modules\",\"wwwroot\"]'.\tReach.GCv3.Mvc.Module.CompanyLogo\tC:\\Users\\darrell.tunnell\\Source\\Repos\\gc3-website\\src\\Reach.GCv3.Mvc.Module.CompanyLogo\\tsc\t1\t\r\n\r\n\r\n```\r\n\r\ni.e VS is doscovering the typescript configuration files within referenced nuget packages!","Url":"https://github.com/aspnet/Templates/issues/854","RelatedDescription":"Closed issue \"typescript confiugration file item template\" (#854)"},{"Id":"240276652","IsPullRequest":true,"CreatedAt":"2017-07-05T16:50:58","Actor":"ryanbrandenburg","Number":"853","RawContent":null,"Title":"Remove PackageTargetFallback","State":"closed","Body":"","Url":"https://github.com/aspnet/Templates/pull/853","RelatedDescription":"Closed or merged PR \"Remove PackageTargetFallback\" (#853)"},{"Id":"239518221","IsPullRequest":true,"CreatedAt":"2017-07-05T14:09:36","Actor":"scottaddie","Number":"852","RawContent":null,"Title":"Clarify password reset sentence in ForgotPassword view","State":"closed","Body":"The `ForgotPassword.cshtml` view includes a sentence which was missing a comma and reversed the words \"reset\" and \"password\".\r\n\r\n/cc: @phenning @mlorbetske ","Url":"https://github.com/aspnet/Templates/pull/852","RelatedDescription":"Closed or merged PR \"Clarify password reset sentence in ForgotPassword view\" (#852)"},{"Id":"233568569","IsPullRequest":false,"CreatedAt":"2017-06-05T12:14:20","Actor":"neman","Number":"849","RawContent":null,"Title":"Unable to install nuget template","State":"closed","Body":"I created nuget template. When I try to install it, I got the following error at the end\r\n\r\n```C:\\Program Files\\dotnet\\sdk\\1.0.4\\NuGet.targets(97,5): error : Unable to resolve 'Test.Templates' for '.NETCoreApp,Version=v1.0'. [C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj]\r\n\r\nGenerating MSBuild file C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\restore.csproj.nuget.g.props.\r\n  Generating MSBuild file C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\restore.csproj.nuget.g.targets.\r\n  Writing lock file to disk. Path: C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\obj\\project.assets.json\r\n  Restore failed in 13,16 sec for C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj.\r\n\r\n  Errors in C:\\Users\\nemke\\.templateengine\\dotnetcli\\v1.0.4\\scratch\\restore.csproj\r\n      Unable to resolve 'BIB.Templates' for '.NETCoreApp,Version=v1.0'.\r\n\r\n  NuGet Config files used:\r\n      C:\\Users\\nemke\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n      C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n\r\n  Feeds used:\r\n      https://api.nuget.org/v3/index.json\r\n      C:\\local-nuget\r\n      C:\\Users\\nemke\\.dotnet\\NuGetFallbackFolder\r\n      C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\r\n```\r\n\r\n#### dotnetinfo\r\n\r\n```\r\nC:\\Temp> dotnet --info\r\n.NET Command Line Tools (1.0.4)\r\n\r\nProduct Information:\r\n Version:            1.0.4\r\n Commit SHA-1 hash:  af1e6684fd\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.4\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview1-002111-00\r\n  Build    : 1ff021936263d492539399688f46fd3827169983\r\n``` \r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/849","RelatedDescription":"Closed issue \"Unable to install nuget template\" (#849)"},{"Id":"233555569","IsPullRequest":false,"CreatedAt":"2017-06-05T12:13:42","Actor":"neman","Number":"848","RawContent":null,"Title":"Wrong CLI command for template installation at nuget.org","State":"closed","Body":"When I go tu nuget.org to search for some template I got the following page for link https://www.nuget.org/packages/NetEscapades.Templates/\r\n\r\n![image](https://cloud.githubusercontent.com/assets/350314/26781234/bf4cc98c-49ed-11e7-9e4a-08bb168b6c62.png)\r\n\r\nThe command instruct to use `Install-Package NetEscapades.Templates` which does not work. \r\n\r\n```\r\nInstall-Package NetEscapades.Templates\r\nInstall-Package : No match was found for the specified search criteria and package name 'NetEscapades.Templates'. Try Get-PackageSource to see all available registered p ackage sources.\r\nAt line:1 char:1\r\n+ Install-Package NetEscapades.Templates\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\r\n```\r\nThe correct command is `dotnet new --install \"NetEscapades.Templates::*\"`\r\n\r\nWill this be fixed in future release?  Which will be the correct CLI command?\r\n\r\n","Url":"https://github.com/aspnet/Templates/issues/848","RelatedDescription":"Closed issue \"Wrong CLI command for template installation at nuget.org\" (#848)"},{"Id":"226082169","IsPullRequest":true,"CreatedAt":"2017-05-03T18:58:53","Actor":"phenning","Number":"846","RawContent":null,"Title":"Revert \"Add MVC precompilation package for 1.1\"","State":"closed","Body":"This reverts commit 461cd822646505fb53c6b0ac416af3780e32578f.\r\n\r\n# Conflicts:\r\n#\tsrc/BaseTemplates/StarterWeb/StarterWeb.csproj\r\n#\tsrc/Templates.xml","Url":"https://github.com/aspnet/Templates/pull/846","RelatedDescription":"Closed or merged PR \"Revert \"Add MVC precompilation package for 1.1\"\" (#846)"}],"ResultType":"GitHubIssue"},"Tooling-Issues":{"Issues":[{"Id":"349649932","IsPullRequest":true,"CreatedAt":"2018-08-10T20:38:21","Actor":"Andrew-MSFT","Number":"1077","RawContent":null,"Title":"Adding a .net core -> vs mapping table","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1077","RelatedDescription":"Closed or merged PR \"Adding a .net core -> vs mapping table\" (#1077)"},{"Id":"333613195","IsPullRequest":false,"CreatedAt":"2018-06-27T12:59:29","Actor":"Liero","Number":"1076","RawContent":null,"Title":"Unable to publish when using Microsoft.NET.Sdk.Razor","State":"closed","Body":"After I upgraded my solution from asp.net core 2.0 to 2.1, I'm not able to publish my web app from Visual Studio, although it can build.\r\n\r\nDuring the upgrade I've changed SDK in one of my class libraries to **Microsoft.NET.Sdk.Razor**, but now I'm getting a lot of errors and if project references were not recognized in this library when publishing.\r\n\r\n```\r\nConnecting to C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\publish\\...\r\nMyProject.Web -> C:\\Projects\\tacs\\MyProject\\MyProject.Web\\bin\\Release\\netcoreapp2.1\\MyProject.Web.dll\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1701,1702,2008 /nostdlib+ /errorreport:prompt /warn:4 /define:TRACE;RELEASE;NETCOREAPP;NETCOREAPP2_1 /errorendlocation /preferreduilang:en-US /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.antiforgery\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Antiforgery.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization.policy\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authorization.Policy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.cryptography.internal\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Cryptography.Internal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.DataProtection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Diagnostics.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.server.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Hosting.Server.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.html.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Html.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.http.features\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Features.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.jsonpatch\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.JsonPatch.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.apiexplorer\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ApiExplorer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.core\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.cors\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Cors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.dataannotations\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.formatters.json\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Formatters.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.extensions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razorpages\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.RazorPages.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.taghelpers\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.TagHelpers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.viewfeatures\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.ViewFeatures.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.language\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Language.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.runtime\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Razor.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecaching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.ResponseCaching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.routing\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.Routing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.webutilities\\2.1.0\\lib\\netstandard2.0\\Microsoft.AspNetCore.WebUtilities.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.common\\2.8.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.razor\\2.1.0\\lib\\netstandard2.0\\Microsoft.CodeAnalysis.Razor.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.CSharp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.dotnet.platformabstractions\\2.1.0\\lib\\netstandard1.3\\Microsoft.DotNet.PlatformAbstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.relational\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.Relational.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlserver\\2.1.0\\lib\\netstandard2.0\\Microsoft.EntityFrameworkCore.SqlServer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.caching.memory\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Caching.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration.binder\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.Binder.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.configuration\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netcoreapp2.0\\Microsoft.Extensions.DependencyInjection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.dependencymodel\\2.1.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.composite\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileProviders.Composite.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.filesystemglobbing\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.FileSystemGlobbing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.hosting.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Hosting.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.localization\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Localization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Abstractions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.logging\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.objectpool\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.ObjectPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.options\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Options.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.primitives\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.extensions.webencoders\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.WebEncoders.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.net.http.headers\\2.1.0\\lib\\netstandard2.0\\Microsoft.Net.Http.Headers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.VisualBasic.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\Microsoft.Win32.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.win32.registry\\4.5.0\\ref\\netstandard2.0\\Microsoft.Win32.Registry.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\mscorlib.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\netstandard.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json.bson\\1.0.1\\lib\\netstandard1.3\\Newtonsoft.Json.Bson.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\newtonsoft.json\\11.0.2\\lib\\netstandard2.0\\Newtonsoft.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\remotion.linq\\2.2.0\\lib\\netstandard1.0\\Remotion.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.AppContext.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Buffers.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Concurrent.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Immutable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.NonGeneric.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Collections.Specialized.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Annotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.DataAnnotations.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.EventBasedAsync.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ComponentModel.TypeConverter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Configuration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Console.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Core.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.Common.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Data.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.data.sqlclient\\4.5.0\\ref\\netcoreapp2.1\\System.Data.SqlClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Contracts.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Debug.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.DiagnosticSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.FileVersionInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Process.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.StackTrace.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TextWriterTraceListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tools.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.TraceSource.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Diagnostics.Tracing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Drawing.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Dynamic.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Calendars.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Globalization.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.interactive.async\\3.1.1\\lib\\netstandard1.3\\System.Interactive.Async.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.Brotli.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Compression.ZipFile.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.DriveInfo.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.FileSystem.Watcher.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.IsolatedStorage.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.MemoryMappedFiles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.Pipes.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.IO.UnmanagedMemoryStream.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Expressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Linq.Queryable.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Memory.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Http.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.HttpListener.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Mail.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NameResolution.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.NetworkInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Ping.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Requests.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.ServicePoint.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.Sockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebClient.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebHeaderCollection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.Client.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Net.WebSockets.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Numerics.Vectors.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ObjectModel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.DispatchProxy.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.ILGeneration.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Emit.Lightweight.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.TypeExtensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Reader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.ResourceManager.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Resources.Writer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime.compilerservices.unsafe\\4.5.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.CompilerServices.VisualC.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Handles.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.RuntimeInformation.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.InteropServices.WindowsRuntime.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Loader.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Numerics.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Formatters.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Json.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Runtime.Serialization.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.accesscontrol\\4.5.0\\ref\\netstandard2.0\\System.Security.AccessControl.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Claims.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Algorithms.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Csp.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.Primitives.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Cryptography.X509Certificates.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.cryptography.xml\\4.5.0\\ref\\netstandard2.0\\System.Security.Cryptography.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.permissions\\4.5.0\\ref\\netstandard2.0\\System.Security.Permissions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.Principal.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.principal.windows\\4.5.0\\ref\\netstandard2.0\\System.Security.Principal.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Security.SecureString.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceModel.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ServiceProcess.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.Encoding.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.text.encodings.web\\4.5.0\\lib\\netstandard2.0\\System.Text.Encodings.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Text.RegularExpressions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Overlapped.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Dataflow.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Extensions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Tasks.Parallel.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Thread.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.ThreadPool.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Threading.Timer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Transactions.Local.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.ValueTuple.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Web.HttpUtility.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Windows.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Linq.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.ReaderWriter.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.Serialization.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XmlSerializer.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Xml.XPath.XDocument.dll\" /reference:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\WindowsBase.dll\" /debug- /debug:portable /filealign:512 /optimize+ /out:obj\\Release\\netcoreapp2.1\\MyProject.Mail.dll /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:library /warnaserror- /utf8output /deterministic+ /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.codeanalysis.analyzers\\1.1.0\\analyzers\\dotnet\\cs\\Microsoft.CodeAnalysis.CSharp.Analyzers.dll\" /analyzer:\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.entityframeworkcore.analyzers\\2.1.0\\analyzers\\dotnet\\cs\\Microsoft.EntityFrameworkCore.Analyzers.dll\" EmailDefaults.cs EmailOptions.cs MailSender.cs NotificationService.cs RazorViewToStringRenderer.cs \"C:\\Users\\daniel.turan\\AppData\\Local\\Temp\\.NETCoreApp,Version=v2.1.AssemblyAttributes.cs\" obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_E7A71F73-0F8D-4B9B-B56E-8E70B10BC5D3.cs obj\\Release\\netcoreapp2.1\\\\TemporaryGeneratedFile_036C0B5B-1481-4323-8D20-8F5ADCB23D92.cs obj\\Release\\netcoreapp2.1\\\\Tem\tporaryGeneratedFile_5937a670-0e60-4077-877b-f7221da3dda1.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.RazorAssemblyInfo.cs obj\\Release\\netcoreapp2.1\\MyProject.Mail.AssemblyInfo.cs /warnaserror+:NU1605\r\nNotificationService.cs(15,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\nNotificationService.cs(16,12): Error CS0234: The type or namespace name 'DataAccess' does not exist in the namespace 'MyProject' (are you missing an assembly reference?)\r\n...\r\n```\r\n\r\nAlso, see https://stackoverflow.com/questions/50926116/publish-failed-when-using-microsoft-net-sdk-razor-if-reference-was-not-recognize for more details","Url":"https://github.com/aspnet/Tooling/issues/1076","RelatedDescription":"Closed issue \"Unable to publish when using Microsoft.NET.Sdk.Razor\" (#1076)"},{"Id":"257171895","IsPullRequest":false,"CreatedAt":"2018-06-25T20:46:49","Actor":"shirhatti","Number":"1057","RawContent":null,"Title":"Support for multi-line string values","State":"closed","Body":"_From @alexvy86 on August 3, 2017 21:11_\n\nI'm using Akka.NET in a project and the way they do configuration is not-quite-JSON, but still a hierarchical structure, which I haven't been able to successfully integrate into `appsettings.json`. The only way I've been able to do it is to collapse all of their hierarchy into a single-line string value, which makes it a bit of a pain to work with.\r\n\r\nFor now I just put the whole thing as CDATA in an XML file and use the `AddXmlFile()` extension from `Microsoft.Extensions.Configuration.Xml` to read it, but it'd be preferable to have it in `appsetings.json`.\n\n_Copied from original issue: aspnet/Configuration#703_","Url":"https://github.com/aspnet/Tooling/issues/1057","RelatedDescription":"Closed issue \"Support for multi-line string values\" (#1057)"},{"Id":"329605262","IsPullRequest":false,"CreatedAt":"2018-06-05T20:05:23","Actor":"AngelosP","Number":"1075","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"open","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","Url":"https://github.com/aspnet/Tooling/issues/1075","RelatedDescription":"Open issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#1075)"},{"Id":"328747170","IsPullRequest":false,"CreatedAt":"2018-06-02T14:10:13","Actor":"AceHack","Number":"1074","RawContent":null,"Title":"Docker in launchSettings.json","State":"open","Body":"Please give documentation on how to add volume mounts.  I need to add a custom volume mount into my image.","Url":"https://github.com/aspnet/Tooling/issues/1074","RelatedDescription":"Open issue \"Docker in launchSettings.json\" (#1074)"},{"Id":"328082529","IsPullRequest":true,"CreatedAt":"2018-06-01T17:41:04","Actor":"federicorinaldi","Number":"1073","RawContent":null,"Title":"Update dotnet-core-2.1.md","State":"closed","Body":"Visual Studio 2017 15.7 has been released now so this document is outdated","Url":"https://github.com/aspnet/Tooling/pull/1073","RelatedDescription":"Closed or merged PR \"Update dotnet-core-2.1.md\" (#1073)"},{"Id":"323850872","IsPullRequest":false,"CreatedAt":"2018-05-17T06:31:53","Actor":"Pichasepong","Number":"1072","RawContent":null,"Title":"can not upload file FTPS. ","State":"closed","Body":"I don't understand why can't upload result is false. At the highlights in yellow. Help me.\r\n![2018-05-17_9-21-13](https://user-images.githubusercontent.com/12063904/40155003-9812f0d8-59bb-11e8-82ae-8b8e7576b1a1.png)\r\n![2018-05-17_11-02-28](https://user-images.githubusercontent.com/12063904/40156168-efe61078-59c1-11e8-8c4c-7657ba2dd536.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1072","RelatedDescription":"Closed issue \"can not upload file FTPS. \" (#1072)"},{"Id":"268293817","IsPullRequest":false,"CreatedAt":"2018-05-17T02:25:02","Actor":"Pichasepong","Number":"1060","RawContent":null,"Title":"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. ","State":"closed","Body":"Problems installing on Server 2012 R2 ,Dot net core 1.0.1 vs 2015 tooling preview 2 error logs file.\r\n\r\n![product_dotnetcoreerror](https://user-images.githubusercontent.com/12063904/31985990-040a5f72-b991-11e7-9356-ddd06160a87c.jpg)\r\n","Url":"https://github.com/aspnet/Tooling/issues/1060","RelatedDescription":"Closed issue \"Problems .net core 1.0.1 vs 2015 tooling preview 2 error logs file.Help Me. \" (#1060)"},{"Id":"317494886","IsPullRequest":false,"CreatedAt":"2018-04-25T06:34:01","Actor":"TheAlphamerc","Number":"1071","RawContent":null,"Title":" Unable to start debugging","State":"open","Body":"The project is success fully build but unable to start debugger. See [here][2018-04-25_11-20-19.7244.Ide.log](https://github.com/aspnet/Tooling/files/1945717/2018-04-25_11-20-19.7244.Ide.log) for more details. \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1071","RelatedDescription":"Open issue \" Unable to start debugging\" (#1071)"},{"Id":"316585462","IsPullRequest":false,"CreatedAt":"2018-04-24T05:17:55","Actor":"rberger247","Number":"1070","RawContent":null,"Title":"Visual studio freezes when I run add-migration ","State":"closed","Body":"I have enabled migrations and added migrations within my project previously. However now when I run add-migration visual studio freezes and I need to close visual studio via the task manger.","Url":"https://github.com/aspnet/Tooling/issues/1070","RelatedDescription":"Closed issue \"Visual studio freezes when I run add-migration \" (#1070)"},{"Id":"308764422","IsPullRequest":false,"CreatedAt":"2018-03-27T05:23:09","Actor":"dvdobrovolskiy","Number":"1069","RawContent":null,"Title":"EntityFramework migrations not available to be applied during publish","State":"closed","Body":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc","Url":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069)"},{"Id":"304770827","IsPullRequest":false,"CreatedAt":"2018-03-14T05:33:19","Actor":"TheConservativeCoder","Number":"1068","RawContent":null,"Title":"Switch between Razor Page View and Code Behind","State":"closed","Body":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n","Url":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068)"},{"Id":"304312342","IsPullRequest":false,"CreatedAt":"2018-03-13T05:33:42","Actor":"RehanSaeed","Number":"1067","RawContent":null,"Title":"Support dotnet watch in launchSettings.json","State":"closed","Body":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine.","Url":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067)"},{"Id":"300865938","IsPullRequest":false,"CreatedAt":"2018-02-28T06:01:18","Actor":"rjamesnw","Number":"1066","RawContent":null,"Title":"Nesting bug","State":"closed","Body":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file.","Url":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066)"},{"Id":"290854647","IsPullRequest":false,"CreatedAt":"2018-01-24T01:14:53","Actor":"NeerajaRagesh","Number":"1065","RawContent":null,"Title":"Issue with Sales discount App - Odoo 9","State":"closed","Body":"I installed sales discount on total in sales order. While creating invoice am getting the below error\r\nOdoo Server Error\r\nTraceback (most recent call last):\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 638, in _handle_exception\r\nreturn super(JsonRequest, self)._handle_exception(exception)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 675, in dispatch\r\nresult = self._call_function(**self.params)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 331, in _call_function\r\nreturn checked_call(self.db, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/service/model.py\", line 119, in wrapper\r\nreturn f(dbname, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 324, in checked_call\r\nresult = self.endpoint(*a, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 933, in call\r\nreturn self.method(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/http.py\", line 504, in response_wrap\r\nresponse = f(*args, **kw)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 878, in call_kw\r\nreturn self._call_kw(model, method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/web/controllers/main.py\", line 870, in _call_kw\r\nreturn call_kw(request.env[model], method, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 681, in call_kw\r\nreturn call_kw_multi(method, model, args, kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/api.py\", line 672, in call_kw_multi\r\nresult = method(recs, *args, **kwargs)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5469, in onchange\r\nrecord._onchange_eval(name, field_onchange[name], result)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/models.py\", line 5367, in _onchange_eval\r\nmethod_res = method(self)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 456, in _onchange_invoice_line_ids\r\ntaxes_grouped = self.get_taxes_values()\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 635, in get_taxes_values\r\nval = self._prepare_tax_line_vals(line, tax)\r\nFile \"/usr/lib/python2.7/dist-packages/odoo/addons/account/models/account_invoice.py\", line 612, in _prepare_tax_line_vals\r\n'base': tax['base'],\r\nKeyError: 'base'\r\n\r\n\r\nplease give any solution\r\n","Url":"https://github.com/aspnet/Tooling/issues/1065","RelatedDescription":"Closed issue \"Issue with Sales discount App - Odoo 9\" (#1065)"},{"Id":"273994049","IsPullRequest":true,"CreatedAt":"2018-01-07T03:48:49","Actor":"cartermp","Number":"1062","RawContent":null,"Title":"Update migrate-sql-server.md","State":"closed","Body":"Removed product links in favor of all docs links, changed wording slightly, and moved Get Started to be at the top.","Url":"https://github.com/aspnet/Tooling/pull/1062","RelatedDescription":"Closed or merged PR \"Update migrate-sql-server.md\" (#1062)"},{"Id":"274003770","IsPullRequest":true,"CreatedAt":"2017-11-15T02:15:11","Actor":"cristy","Number":"1064","RawContent":null,"Title":"Re adding","State":"closed","Body":"Submitting with the right location. Not sure why the missing-template.md file got tacked on at the end...","Url":"https://github.com/aspnet/Tooling/pull/1064","RelatedDescription":"Closed or merged PR \"Re adding\" (#1064)"},{"Id":"273996633","IsPullRequest":true,"CreatedAt":"2017-11-15T01:03:12","Actor":"cristy","Number":"1063","RawContent":null,"Title":"Webapp landing page","State":"closed","Body":"This is the markdown for the Web App landing page. Let me know if there's any other changes I should make.","Url":"https://github.com/aspnet/Tooling/pull/1063","RelatedDescription":"Closed or merged PR \"Webapp landing page\" (#1063)"},{"Id":"273873058","IsPullRequest":true,"CreatedAt":"2017-11-14T17:26:42","Actor":"cartermp","Number":"1061","RawContent":null,"Title":"Create migrate-sql-server.md","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1061","RelatedDescription":"Closed or merged PR \"Create migrate-sql-server.md\" (#1061)"},{"Id":"258233429","IsPullRequest":false,"CreatedAt":"2017-09-16T14:09:00","Actor":"ctopher31","Number":"1059","RawContent":null,"Title":"Turn off file nesting in Visual Studio 2017","State":"closed","Body":"To report new issues, use the [Report a Problem](https://developercommunity.visualstudio.com/) tool. The GitHub Issue Tracker for the aspnet/Tooling repo is now deprecated in favor of the Report a Problem tool.\r\n\r\nIf you encounter a problem with Visual Studio, we want to know about it so that we can diagnose and fix it. By using the Report a Problem tool, you can collect detailed information about the problem, and send it to Microsoft with just a few button clicks. See [here](https://docs.microsoft.com/en-us/visualstudio/ide/talk-to-us) for more details. \r\n","Url":"https://github.com/aspnet/Tooling/issues/1059","RelatedDescription":"Closed issue \"Turn off file nesting in Visual Studio 2017\" (#1059)"},{"Id":"257312054","IsPullRequest":false,"CreatedAt":"2017-09-14T00:50:29","Actor":"svallis","Number":"1058","RawContent":null,"Title":"Views in class libraries removed from embedded resources under certain circumstances","State":"closed","Body":"I have a test repo which should hopefully demonstrate this problem, and I hope this is the correct repo for the issue.\r\n\r\nhttps://github.com/svallis/precompilation-classlib\r\n\r\nIf you clone and open this solution and perform the following, the issue should be clear. First, the expected results is what happens when adding views to `app`:\r\n\r\n- Go to `app1\\Views\\Home` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `app1` remains unchanged\r\n\r\nNow perform the same process on `lib1`:\r\n\r\n- Go to `lib1\\Views\\Shared` and press SHIFT+F2 and create `Test.cshtml`\r\n- Copy and paste the new file to end up with `Test - Copy.cshtml`\r\n- Build the solution\r\n- The `.csproj` file for `lib1` has the following added to it\r\n\r\n```\r\n<ItemGroup>\r\n    <EmbeddedResource Remove=\"Views\\Shared\\Test - Copy.cshtml\" />\r\n</ItemGroup>\r\n```\r\n\r\nAs you can imagine this is highly frustrating during development, and we're constantly running into it while developing features within a library. I don't know if it's an outright bug, or whether we could improve the existing rules in the `.csproj` for the library. Whatever changes are made to the library project file need to preserve existing functionality though, so that views are not included in the publish output and are embedded in the assembly. This allows everything to work both during development and after publishing with precompiled views.","Url":"https://github.com/aspnet/Tooling/issues/1058","RelatedDescription":"Closed issue \"Views in class libraries removed from embedded resources under certain circumstances\" (#1058)"},{"Id":"254062749","IsPullRequest":false,"CreatedAt":"2017-08-31T04:38:52","Actor":"matthewDDennis","Number":"1056","RawContent":null,"Title":"Docker tools fail if multiple TFMs in project file","State":"closed","Body":"If you modify your projects to have multiple frameworks with the `<TargetFrameworks>` tag, then the Docker tools does not know which framework to use as there is no `<TargetFramework>` tag.\r\n\r\nAdding the `<TargetFramework>`netcoreapp1.1`<...>` fixes the problem in Visual Studio and all the frameworks build and can debug with Docker.\r\n\r\nHowever, if you try and build a framework other than the netcoreapp1.1 with the DotNet CLI, it fails as it, as the documentation states, will ignore the `<TargetFrameworks>` tag if the `<TargetFramework>` tag is present \r\n","Url":"https://github.com/aspnet/Tooling/issues/1056","RelatedDescription":"Closed issue \"Docker tools fail if multiple TFMs in project file\" (#1056)"},{"Id":"249781859","IsPullRequest":true,"CreatedAt":"2017-08-14T15:57:44","Actor":"balachir","Number":"1055","RawContent":null,"Title":"Update known-issues-vs2017.md for VS 15.3 RTW","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1055","RelatedDescription":"Closed or merged PR \"Update known-issues-vs2017.md for VS 15.3 RTW\" (#1055)"},{"Id":"247941709","IsPullRequest":false,"CreatedAt":"2017-08-05T03:07:41","Actor":"snebjorn","Number":"1054","RawContent":null,"Title":"Q: [BrowserLink] HowTo programmatically inject custom script into page body at runtime","State":"closed","Body":"Hi, I'm curious about how you made Browser Link inject a custom script into the page body at runtime.\r\nI have to do something similar (ritterim/stuntman#158) so wondering if you've willing to share the implementation :)\r\n\r\nI also made a [stackoverflow post](https://stackoverflow.com/questions/45501245/programmatically-inject-custom-script-into-page-body-at-runtime-like-browser-l)\r\n\r\nThanks","Url":"https://github.com/aspnet/Tooling/issues/1054","RelatedDescription":"Closed issue \"Q: [BrowserLink] HowTo programmatically inject custom script into page body at runtime\" (#1054)"},{"Id":"247229183","IsPullRequest":false,"CreatedAt":"2017-08-02T06:18:35","Actor":"halter73","Number":"1053","RawContent":null,"Title":"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly","State":"closed","Body":"Given the launchSettings.json and Program.cs below, it seems that the ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly when launching both the \"IIS Express\" or \"WebApplication1\" profiles from VS 2017 26730.0.d15rel and dotnet sdk 2.0.0-preview3-006889.\r\n\r\n\r\n#### Expected output for \"IIS Express\" profile launched from VS:\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.Server.IISIntegration;Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"IIS Express\" profile launched from VS (App Insights is missing):\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.Server.IISIntegration'\r\n```\r\n\r\n#### Expected output for \"WebApplication1\" profile launched from VS:\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1;Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"WebApplication1\" profile launched from VS (HostingStartup1 is missing):\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'Microsoft.AspNetCore.ApplicationInsights.HostingStartup'\r\n```\r\n\r\n#### Actual output for \"WebApplication1\" profile launched using \"dotnet run\" (Behaves as expected)\r\n\r\n```\r\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES: 'HostingStartup1'\r\n```\r\n\r\n#### launchSettings.json\r\n```json\r\n{\r\n  \"iisSettings\": {\r\n    \"windowsAuthentication\": false,\r\n    \"anonymousAuthentication\": true,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:61008/\",\r\n      \"sslPort\": 0\r\n    }\r\n  },\r\n  \"profiles\": {\r\n    \"IIS Express\": {\r\n      \"commandName\": \"IISExpress\",\r\n      \"launchBrowser\": true,\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n        \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\": \"HostingStartup1\"\r\n      }\r\n    },\r\n    \"WebApplication1\": {\r\n      \"commandName\": \"Project\",\r\n      \"launchBrowser\": true,\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\r\n        \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\": \"HostingStartup1\"\r\n      },\r\n      \"applicationUrl\": \"http://localhost:61010/\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### Program.cs\r\n```C#\r\nusing Microsoft.AspNetCore;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing System;\r\n\r\nnamespace WebApplication1\r\n{\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            BuildWebHost(args).Run();\r\n        }\r\n\r\n        public static IWebHost BuildWebHost(string[] args)\r\n        {\r\n            Console.WriteLine(\"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES: '{0}'\", Environment.GetEnvironmentVariable(\"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES\"));\r\n\r\n            return WebHost.CreateDefaultBuilder(args)\r\n                .UseStartup<Startup>()\r\n                .Build();\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/aspnet/Tooling/issues/1053","RelatedDescription":"Closed issue \"ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable is set incorrectly\" (#1053)"},{"Id":"245422589","IsPullRequest":false,"CreatedAt":"2017-07-28T17:44:59","Actor":"varora1406","Number":"1052","RawContent":null,"Title":"Add-Migration command not working.","State":"closed","Body":"IDE : visual studio 15.3 preview 5.0\r\n.net core 2.0\r\nProject : .Net core web application (Angular template) including (Angular v4)\r\n\r\nSteps to reproduce:\r\n* Create a new project and all required nuget packages.\r\n![image](https://user-images.githubusercontent.com/24986539/28577409-559354a8-7174-11e7-9dfb-26cc7efc1228.png)\r\n\r\n* Try to use Add-Migration command. (Don't worry, context classes and rest have been done)\r\n- Result : The term 'Add-Migration' is not recognized as the name of a cmdlet, function, script file, or operable program. \r\n![image](https://user-images.githubusercontent.com/24986539/28577463-81e914c0-7174-11e7-97eb-5cd2a5fb3e28.png)\r\n","Url":"https://github.com/aspnet/Tooling/issues/1052","RelatedDescription":"Closed issue \"Add-Migration command not working.\" (#1052)"},{"Id":"241453336","IsPullRequest":false,"CreatedAt":"2017-07-08T14:19:58","Actor":"RandyBuchholz","Number":"1051","RawContent":null,"Title":"Outdated Reference in ...CodeGeneration.Design\" Version=\"2.0.0-preview2-final\"","State":"open","Body":"There was a compatibility error with Microsoft.Composition. This is being addressed https://github.com/dotnet/corefx/issues/18452.\r\n\r\nCodeGeneration.Design is still referencing the old version and gives:\r\nPackage 'Microsoft.Composition 1.0.27' was restored using '.NETFramework,Version=v4.6.1' instead the project target framework...\r\n\r\nThe correct version is 1.0.31.\r\n\r\n![image](https://user-images.githubusercontent.com/13967891/27986052-85abdeee-63be-11e7-9b53-ec7a6199d628.png)\r\n\r\n","Url":"https://github.com/aspnet/Tooling/issues/1051","RelatedDescription":"Open issue \"Outdated Reference in ...CodeGeneration.Design\" Version=\"2.0.0-preview2-final\"\" (#1051)"},{"Id":"238392758","IsPullRequest":false,"CreatedAt":"2017-07-04T19:13:11","Actor":"miloush","Number":"1048","RawContent":null,"Title":"Adding application manifest ","State":"closed","Body":"The project properties designer asks me to add manifest to the project first before it can be selected:\r\n![untitled](https://user-images.githubusercontent.com/10546952/27518138-8a52e322-59d0-11e7-99b8-78a31d72e1a3.png)\r\n\r\nHowever, there does not seem to be a manifest template in the Add New Item list for ASP.NET Core projects.\r\n\r\nEither add the manifest template, or let the properties designer generate it, or change the \"default settings\" to declare newer OS support.","Url":"https://github.com/aspnet/Tooling/issues/1048","RelatedDescription":"Closed issue \"Adding application manifest \" (#1048)"},{"Id":"239635705","IsPullRequest":true,"CreatedAt":"2017-06-29T23:09:22","Actor":"anangaur","Number":"1050","RawContent":null,"Title":"Update known-issues-vs2017-preview.md","State":"open","Body":"Removed \"No workaround...\" as there is a workaround","Url":"https://github.com/aspnet/Tooling/pull/1050","RelatedDescription":"Open PR \"Update known-issues-vs2017-preview.md\" (#1050)"},{"Id":"239016783","IsPullRequest":true,"CreatedAt":"2017-06-28T20:04:41","Actor":"balachir","Number":"1049","RawContent":null,"Title":"Updates for VS 2017 15.3 Preview 3 / .NET Core 2.0 Preview 2","State":"closed","Body":"","Url":"https://github.com/aspnet/Tooling/pull/1049","RelatedDescription":"Closed or merged PR \"Updates for VS 2017 15.3 Preview 3 / .NET Core 2.0 Preview 2\" (#1049)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"368431099","IsPullRequest":false,"CreatedAt":"2018-10-09T23:00:09","Actor":"mikaelm12","Number":"321","RawContent":null,"Title":"SignalR Java Client Package Name Change","State":"open","Body":"The SignalR java client which is currently in preview, was previously under the package name `com.microsoft.aspnet.signalr`. This was the case for the first and second previews of the Java client. Starting in preview 3 the package name will change to `com.microsoft.signalr`. This means that our groupid through maven central will change and that consuming the package through maven or gradle will be slightly different. \r\n\r\nHere's what bringing in the Java client after preview 3 releases without the actual build numbers should look similar to\r\n```xml\r\n<dependency>\r\n  <groupId>com.microsoft.signalr</groupId>\r\n  <artifactId>signalr</artifactId>\r\n  <version>PREVIEW 3 VERSION NUMBER</version>\r\n</dependency>\r\n```\r\n\r\n```gradle\r\nimplementation 'com.microsoft.signalr:signalr:PREVIEW 3 VERSION NUMBER'\r\n```","Url":"https://github.com/aspnet/Announcements/issues/321","RelatedDescription":"Open issue \"SignalR Java Client Package Name Change\" (#321)"},{"Id":"367932540","IsPullRequest":false,"CreatedAt":"2018-10-08T20:00:47","Actor":"natemcmaster","Number":"320","RawContent":null,"Title":"For contributors: unifying to fewer GitHub repos","State":"open","Body":"_Please use [this issue](https://github.com/aspnet/Home/issues/3598) for discussion._\r\n\r\nOver the next few months, we will reduce the number of repos in active development in the @aspnet organization by merging them together. We plan to condense about 53 repos into 5. Repos which merge with another will be archived on GitHub, which makes them read-only. We will also rename a few repositories. GitHub will automatically redirect URLs to issues and commits on renamed repositories. We will update the README and repo descriptions to help you navigate from archived repos to the new repo.\r\n\r\nAfter the merging is complete, the final set of repos will be as follows:\r\n\r\nRepo                            | Primary purpose\r\n--------------------------------|-----------------------------------------------\r\naspnet/AspNetCore               | ASP.NET Core runtime\r\naspnet/Extensions               | Microsoft.Extensions.* APIs\r\naspnet/EntityFrameworkCore      | Entity Framework Core\r\naspnet/Tooling                  | Visual Studio extensions, command-line tools, and MSBuild SDKs\r\naspnet/AspLabs                  | Experiments not ready for production releases\r\n\r\nTo preserve as much history as possible, we will rename aspnet/Home to aspnet/AspNetCore, and aspnet/Common to aspnet/Extensions instead of creating new repos. We will preserve commit history by merging unrelated histories into the unified repos. We will also review open issues and move them when necessary to keep them aligned with the relevant code.\r\n\r\n### Motivation\r\n\r\nOur primary motivation is simplifying both our engineering systems and our GitHub interactions with all of you. We know there are some drawbacks to working in larger repos, but we find the benefits compelling enough to move forward with this change. The new set of repos more closely aligns with the layering of the products they ship.\r\n\r\n### Timeframe\r\n\r\nWe'll be starting the first round of changes soon. We expect the entire unification effort will take us several weeks. We'll migrate repositories in phases and adjust the plan along the way, as necessary.\r\n\r\n### Archived repos\r\n\r\nThe following repos will be merged into the main repos above. They will not be used any more for active development on 2.1 LTS and new releases. The source code for the projects will move to the new project with any issues we intend to keep working on. Remaining issues and pull requests will be closed. We do not plan to delete the repos or remove tagged commits, but the projects will become read-only.\r\n\r\n* AADIntegration           \r\n* Antiforgery              \r\n* AuthSamples              \r\n* AzureIntegration         \r\n* BasicMiddleware          \r\n* BrowserLink              \r\n* Caching                  \r\n* Common                   \r\n* Configuration            \r\n* CORS                     \r\n* DataProtection           \r\n* DependencyInjection      \r\n* Diagnostics              \r\n* DotNetTools              \r\n* EventNotification        \r\n* FileSystem               \r\n* Hosting                  \r\n* HtmlAbstractions         \r\n* HttpAbstractions         \r\n* HttpClientFactory        \r\n* HttpSysServer            \r\n* Identity                 \r\n* IISIntegration           \r\n* JavaScriptServices       \r\n* JsonPatch                \r\n* KestrelHttpServer        \r\n* Localization             \r\n* Logging                  \r\n* MetaPackages             \r\n* Microsoft.Data.Sqlite    \r\n* MusicStore               \r\n* Mvc                      \r\n* MvcPrecompilation        \r\n* Options                  \r\n* Proxy                    \r\n* Razor                    \r\n* ResponseCaching          \r\n* Routing                  \r\n* Scaffolding              \r\n* Security                 \r\n* ServerTests              \r\n* Session                  \r\n* SignalR                  \r\n* StaticFiles              \r\n* Templating               \r\n* Testing                  \r\n* Universe                 \r\n* WebHooks                 \r\n* WebSockets\r\n\r\n\r\n_Please use https://github.com/aspnet/Home/issues/3598 for discussion._  ","Url":"https://github.com/aspnet/Announcements/issues/320","RelatedDescription":"Open issue \"For contributors: unifying to fewer GitHub repos\" (#320)"},{"Id":"367922912","IsPullRequest":false,"CreatedAt":"2018-10-08T19:29:02","Actor":"pranavkm","Number":"319","RawContent":null,"Title":"3.0 - Removing Microsoft.AspNetCore.Mvc.WebApiCompatShim","State":"open","Body":"The Microsoft.AspNetCore.Mvc.WebApiCompatShim (WebApiCompatShim) package provides partial compatibility in ASP.NET Core with ASP.NET Web API 2 to simplify migrating existing Web API implementations to ASP.NET Core. However, apps using the WebApiCompatShim do not benefit from the API related features shipping in recent ASP.NET Core releases, such as improved Open API Spec genertaion, standardized error handling, and client code generation. To better focus our API efforts in 3.0, we plan to remove WebApiCompatShim. We recommend that existing applications using the WebApiCompatShim migrate to the newer `[ApiController]` model.\r\n\r\nFor questions or further discussions, please use https://github.com/aspnet/Mvc/issues/8570.","Url":"https://github.com/aspnet/Announcements/issues/319","RelatedDescription":"Open issue \"3.0 - Removing Microsoft.AspNetCore.Mvc.WebApiCompatShim\" (#319)"},{"Id":"365011293","IsPullRequest":false,"CreatedAt":"2018-09-28T19:23:51","Actor":"blowdart","Number":"318","RawContent":null,"Title":"Microsoft Security Advisory: iOS12 breaks social, WSFed and OIDC logins","State":"open","Body":"# Microsoft Security Advisory:  iOS12 breaks social, WSFed and OIDC logins\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about an incompatibly between iOS12 and some types of authentication. This advisory also provides guidance on what developers can do to remove current security restrictions added by ASP.NET to their applications to become compatible with iOS12.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Identity/issues/1984 for ASP.NET Core Identity\r\nDiscussion for this issue can be found at https://github.com/aspnet/Security/issues/1864 for ASP.NET Core Cookie Authentication\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>What has changed\r\n\r\nThe recent iOS12 update has changed Safari's handling of [SameSite](https://tools.ietf.org/html/rfc6265) cookies. The SameSite attribute allows a developer to control when cookies are sent to a web site, enabling the flow to only occur when requests are from the same site. This standard was introduced to reduce exposure to Cross Site Request Forgery (CSRF) attacks. By default ASP.NET Core 2.0 and later protects its authentication cookies using the SameSite property. The change on Apple's part is not limited to ASP.NET Core applications, it is affecting multiple frameworks and authentication software which relay on HTTP forms in a browser, for example authenticating to a third party via Facebook, Twitter or browser based Open ID Connect (OIDC) mechanism.\r\n\r\nApple have stated they believe [their change is correct behavior](https://bugs.webkit.org/show_bug.cgi?id=188165), and that the fault lies in every other browser's implementation.\r\n\r\nWhile we take no stance on the correctness of browser behavior we feel that removing the SameSite protections would expose our customers, and their customers to a wider risk, as it would remove the protection provided everywhere, for all users, in any browser.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf your users can no longer login to your web application on iOS12 using Safari then you are affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix this?\r\n\r\nDevelopers can allow iOS12 Safari users to log into their applications by turn off SameSite protection in `ConfigureServices()`.\r\n\r\nIf you are using ASP.NET Core Identity you disable the protection by configuring cookies with the following code\r\n\r\n```c#\r\nservices.ConfigureExternalCookie(options =>\r\n{\r\n    // Other options\r\n    options.Cookie.SameSite = SameSiteMode.None;\r\n});\r\nservices.ConfigureApplicationCookie(options =>\r\n{\r\n    // Other options\r\n    options.Cookie.SameSite = SameSiteMode.None;\r\n});\r\n```\r\n\r\nIf you are using cookie authentication without ASP.NET Core identity you can turn off the protection with the following code\r\n\r\n```c#\r\nservices.AddCookie(CookieAuthenticationDefaults.AuthenticationScheme, options =>\r\n{\r\n    // Other options\r\n    options.Cookie.SameSite = Microsoft.AspNetCore.Http.SameSiteMode.None;\r\n})\r\n```\r\n\r\nIf you are using external OIDC providers you may be able to avoid the issue by changing the response mode your provider uses from a POST to a GET request, using the following code. Not all providers may support this.\r\n\r\n```c#\r\n.AddOpenIdConnect(\"myOIDProvider\", options => {\r\n    // Other options\r\n    options.ResponseType = \"code\";\r\n    options.ResponseMode = \"query\";\r\n};\r\n```\r\n\r\n_Note that in making these changes protection is removed for all users and all browsers. You should ensure that all your actions that make state changes are protected with [CSRF anti-forgery mechanisms](https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery) built into ASP.NET Core.\r\n\r\n#### Rebuilding your application\r\n\r\nAfter making these configuration changes you rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[Bug 188165 - iOS 12 Safari breaks ASP.NET Core 2.1 OIDC authentication](https://bugs.webkit.org/show_bug.cgi?id=188165)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 28, 2018): Advisory published.\r\n","Url":"https://github.com/aspnet/Announcements/issues/318","RelatedDescription":"Open issue \"Microsoft Security Advisory: iOS12 breaks social, WSFed and OIDC logins\" (#318)"},{"Id":"361087870","IsPullRequest":false,"CreatedAt":"2018-09-18T00:05:36","Actor":"halter73","Number":"317","RawContent":null,"Title":"Kestrel Connection Adapter Logging Namespace Changes","State":"open","Body":"The logging namespaces for Kestrel's HttpsConnectionAdapter and LoggingConnectionAdapter are changing in 2.2.0.\r\n\r\n1. The `HttpsConnectionAdapter` logging namespace is now `Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionAdapter`.\r\n2. The `LoggingConnectionAdapter` logging namespace is now `Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.LoggingConnectionAdapter`.\r\n\r\nHere's an example HttpsConnectionAdapter log prior to the change:\r\n\r\n```\r\ndbug: HttpsConnectionAdapter[2]\r\n      Authentication of the HTTPS connection timed out.\r\n```\r\n\r\nAnd after:\r\n\r\n```\r\ndbug: Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionAdapter[2]\r\n      Authentication of the HTTPS connection timed out.\r\n```","Url":"https://github.com/aspnet/Announcements/issues/317","RelatedDescription":"Open issue \"Kestrel Connection Adapter Logging Namespace Changes\" (#317)"},{"Id":"359136062","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:10","Actor":"blowdart","Number":"316","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when ASP.NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an ASP.NET Core web application. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing a specially crafted web requests to the ASP.NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles parsing web requests.\r\n\r\nThe underlying problem exists in the `System.IO.Pipelines` package. If you have other software which uses this package please follow the instructions in the [.NET Core bulletin](https://github.com/dotnet/announcements/issues/83).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2914\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses either of the packages with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.All | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nASP.NET Core 2.1 is distributed as part of the .NET Core runtime. To check the current installed runtimes open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed you will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf the highest .NET Core SDK version is less that 2.1.402 or the highest `Microsoft.AspNetCore.App` runtime version is less that 2.1.4 you are vulnerable to this issue. You may not see any SDK versions if you have only installed the runtime.\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.402 on your development machines and build servers, and the .NET Core Runtime 2.1.4 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n#### Applications not using Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/aspnet/Announcements/issues/316","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\" (#316)"},{"Id":"353145143","IsPullRequest":false,"CreatedAt":"2018-08-22T22:11:39","Actor":"pranavkm","Number":"315","RawContent":null,"Title":"3.0: Deprecating MvcPrecompilation tool ","State":"open","Body":"In ASP.NET Core 1.1, we introduced the `Microsoft.AspNetCore.Mvc.Razor.ViewCompilation` (MVC precompilation tool) package that added support for publish time compilation of Razor files (.cshtml files). Starting in ASP.NET Core 2.1, we introduced the [Razor SDK](https://docs.microsoft.com/en-us/aspnet/core/razor-pages/sdk?view=aspnetcore-2.1) that expanded on the features of the precompilation tool by adding support for build and publish time of Razor files. The SDK allows for verifying the correctness of cshtml files at build time while also improving on startup time for applications. The Razor SDK is on by default and no gesture is required to start using it.\r\n\r\nIn 3.0, we plan to remove the earlier MVC precompilation tool. Earlier versions of the package will continue receiving important bug and security fixes as part of our patch release. \r\n\r\nFor users of ASP.NET Core 2.1 or later, we recommend migrating to the Razor SDK if you haven't already. If you're currently using the precompilation tool and are unable to migrate to the Razor SDK due to bugs or missing features, please file an issue at https://github.com/aspnet/Razor/issues.\r\n\r\nPlease use https://github.com/aspnet/Mvc/issues/8313 for discussions.","Url":"https://github.com/aspnet/Announcements/issues/315","RelatedDescription":"Open issue \"3.0: Deprecating MvcPrecompilation tool \" (#315)"},{"Id":"349340221","IsPullRequest":false,"CreatedAt":"2018-08-10T00:56:39","Actor":"natemcmaster","Number":"314","RawContent":null,"Title":"3.0: deprecating Microsoft.AspNetCore.All","State":"open","Body":"Earlier this year, we announced the Microsoft.AspNetCore.App metapackage (see https://github.com/aspnet/Announcements/issues/287). That announcement said:\r\n\r\n> The existing Microsoft.AspNetCore.All meta-package will continue to be made available throughout the 2.x lifecycle, but **we recommend customers move to the new Microsoft.AspNetCore.App meta-package** and then add individual references to any of the removed packages if their app requires it.\r\n\r\nSee [our documentation for details](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/metapackage?view=aspnetcore-2.1#migrating-from-microsoftaspnetcoreall-to-microsoftaspnetcoreapp) on how to migrate from Microsoft.AspNetCore.All to .App.\r\n\r\nWe have begun working on ASP.NET Core 3.0, and as a part of that, we will stop producing the Microsoft.AspNetCore.All metapackage and the matching Microsoft.AspNetCore.All shared framework in the 3.0 nightly builds.\r\n\r\nThis package will still be available in ASP.NET Core 2.2 and will continue to receive servicing updates in ASP.NET Core 2.1.\r\n\r\nPlease use https://github.com/aspnet/Home/issues/3418 for questions or comments.\r\n","Url":"https://github.com/aspnet/Announcements/issues/314","RelatedDescription":"Open issue \"3.0: deprecating Microsoft.AspNetCore.All\" (#314)"},{"Id":"346800428","IsPullRequest":false,"CreatedAt":"2018-08-01T23:00:38","Actor":"pranavkm","Number":"313","RawContent":null,"Title":"CorsMiddleware must be explicitly configured to specify all allowed headers","State":"open","Body":"In versions of ASP.NET Core 2.1.0 and earlier, the CorsMiddleware always allowed certain headers in the `Access-Control-Request-Headers` to be sent regardless of the values configured in `CorsPolicy.Headers`. This list of headers includes:\r\n\r\n* `Accept`\r\n* `Accept-Language`\r\n* `Content-Language`\r\n* `Origin`\r\n\r\nFor instance, consider an application configured as follows:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\"));\r\n```\r\n\r\nIn 2.1 and earlier, the CORS middleware would respond successfully to a preflight request with the following request header:\r\n\r\n`Access-Control-Request-Headers: Cache-Control, Content-Language`\r\n\r\nFor 2.2.0, the CORS middleware would no longer treat this as a policy match. The server must explicitly configure policy to allow the `Content-Language` header:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\", \"Content-Language\"));\r\n```\r\n\r\nFor more information on CORS, please refer to [the documentation](https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1).","Url":"https://github.com/aspnet/Announcements/issues/313","RelatedDescription":"Open issue \"CorsMiddleware must be explicitly configured to specify all allowed headers\" (#313)"},{"Id":"345927303","IsPullRequest":false,"CreatedAt":"2018-07-30T20:44:14","Actor":"danroth27","Number":"312","RawContent":null,"Title":"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0","State":"open","Body":"As part of the 2.1.0 release, ASP.NET Core added support for build time compilation of cshtml files (Razor Views & Razor Pages). This feature is on by default and allows build time verification of the correctness of Razor files, and also faster startup performance. Additionally, MVC watches for changes to cshtml files and seamlessly updates build-time compiled views with runtime compiled views. This allows editing cshtml files and then refreshing the browser to see the changes.\r\n\r\nMVC uses the app's compilation context, details about the references and settings that were used to compile the source code (.cs) in the app, to compile views at runtime. In addition to the compilation context, MVC exposes options such as [RazorViewEngineOptions.CompilationCallback](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.compilationcallback?view=aspnetcore-2.1) and [AdditionalCompilationReferences](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.additionalcompilationreferences?view=aspnetcore-2.1) that allow configuring compilation specifically for runtime. \r\n\r\nRuntime specific customizations are unavailable at build time and consequently the two outputs could be different.\r\n\r\nTo address this inconsistency, we plan on removing APIs in MVC that change or modify runtime compilation. For 2.2.0, we're marking these APIs obsolete with the intent to remove them in 3.0.0. This is the list of affected APIs:\r\n\r\n* Properties on `Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions`\r\n    * `AdditionalCompilationReferences`\r\n    * `CompilationCallback`\r\n\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeature`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorReferenceManager`\r\n\r\nNo changes are required to your application if it does not use these APIs.\r\n\r\nApps using these APIs to add assembly references to the compilation context for runtime compilation should instead use [`ApplicationPartManager.AddApplicationPart`](https://docs.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.mvccoremvccorebuilderextensions.addapplicationpart) to add application parts for each assembly reference, or switch to a built-time compilation model (see [Create reusable UI using the Razor Class Library project](https://docs.microsoft.com/aspnet/core/razor-pages/ui-class)).\r\n\r\nOther scenarios blocked by the removal of these APIs and not covered by alternative MVC features should raised in the linked discussion issue.\r\n\r\nFor discussion, use https://github.com/aspnet/Mvc/issues/8177","Url":"https://github.com/aspnet/Announcements/issues/312","RelatedDescription":"Open issue \"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0\" (#312)"},{"Id":"339929062","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:26","Actor":"blowdart","Number":"311","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0 and 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in ASP.NET Core when a malformed request is terminated. An attacker who successfully exploited this vulnerability could cause a denial of service attack.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles such requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2708\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application is behind a forwarding proxy such is Internet Information Server, Azure Application Gateway or nginx you will not be affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Server.Kestrel.Core with a vulnerable version listed below and not hosted behind a forwarding proxy.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 2.0.4 <br /> 2.1.2\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8 <br /> 2.1.0, 2.1.1  | 2.0.9 <br /> 2.1.2\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1 | 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Server.Kestrel.Core` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET 2.0 & 2.1 not targeting the meta-packages\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects.\r\n\r\nThe `project.assets.json`files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.8\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.All` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.9\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) .\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Server.Kestrel.Core/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Server.Kestrel.Core`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.34 />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.1 (July 10, 2018): Added .App meta-package details.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/311","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\" (#311)"},{"Id":"339928979","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:13","Actor":"blowdart","Number":"310","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass in ASP.NET Core when the number of incorrect login attempts is not validated. An attacker who successfully exploited this vulnerability could try an infinite number of authentication attempts.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core validates the number of incorrect login attempts.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Identity/issues/1870\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application does not use ASP.NET Core's implementation of multi-factor authentication you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Identity with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Identity | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5 <br /> 1.1.0, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5 <br /> 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 1.0.6 <br /> 1.1.6 <br /> 2.0.4 <br /> 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Identity` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET Core 1.0, 1.1 or 2.0 not targeting the metapackage.\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Identity` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Identity` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"Microsoft.AspNetCore.Identity\" : \"1.0.5\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `Microsoft.AspNetCore.Identity`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `Microsoft.AspNetCore.Identity` version 1.0.5.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Identity` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Identity \": \"1.0.6\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Identity/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Identity`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Identity` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Identity/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Identity`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Identity` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Identity` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Identity\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Martin Knafve](https://www.linkedin.com/in/martin-knafve-99187a2/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8171](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8171)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/310","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\" (#310)"},{"Id":"336797507","IsPullRequest":false,"CreatedAt":"2018-06-28T22:10:48","Actor":"natemcmaster","Number":"309","RawContent":null,"Title":"For contributors: branch name changes in ASP.NET Core repos","State":"open","Body":"Over the coming weeks, we are planning on making the following changes to most projects in https://github.com/aspnet that are used to build ASP.NET Core.\r\n\r\n* We will create a branch named \"release/2.2\". Work on this branch will be part of [ASP.NET Core 2.2](https://github.com/aspnet/Announcements/issues/307)\r\n* We will rename the \"dev\" branch to \"master\". This is part of aligning aspnet repos with the branch naming used by other Microsoft teams.\r\n* We will change the default branch to \"master\" on GitHub.\r\n* Update the product branding on \"master\" to 3.0. Work on this branch will eventually become part of [ASP.NET Core 3.0](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/)\r\n\r\nTo help us prevent too much drift between release/2.2 and master, we will enable some automation to merge all changes from release/2.2 into master (3.0).\r\n\r\n## FAQ\r\nThis change may affect the way you help contribute to ASP.NET Core. As a result of this change and dicussion within our team, we've anticipated at least two questions you may have.\r\n\r\n#### Which branch should I use for my work?\r\n<img src=\"https://user-images.githubusercontent.com/2696087/42063035-b5fc9e42-7ae4-11e8-9916-a708fcc8e0e6.png\" width=\"500\" />\r\n\r\n#### I opened my PR to the wrong branch. What should I do?\r\n \r\nYou can edit a PR’s target branch.\r\n\r\n<img width=\"700\" alt=\"one\" src=\"https://user-images.githubusercontent.com/2696087/42063074-eb3060a8-7ae4-11e8-8ec2-d569f8e07f78.png\">\r\n<img width=\"700\" alt=\"two\" src=\"https://user-images.githubusercontent.com/2696087/42063083-f8a9564a-7ae4-11e8-91f0-f57e039085f8.png\">\r\n\r\n\r\n## Questions? Comments?\r\n\r\nThis issue is locked to reduce noise on this repo. Please use https://github.com/aspnet/Home/issues/3278 for questions and comments.\r\n\r\nThanks,\r\nNate","Url":"https://github.com/aspnet/Announcements/issues/309","RelatedDescription":"Open issue \"For contributors: branch name changes in ASP.NET Core repos\" (#309)"},{"Id":"335579239","IsPullRequest":false,"CreatedAt":"2018-06-25T21:44:22","Actor":"divega","Number":"308","RawContent":null,"Title":"EF Core 2.2 Roadmap","State":"open","Body":"## EF Core 2.2 is a small release\r\n\r\nUnlike EF Core 2.1, the 2.2 release will include a small number of new features. We are concentrating most of our efforts to add new functionality on the 3.0 release. Still, you can expect 2.2 to include lots of bugs fixes, community contributions and small improvements.\r\n\r\nYou can access the list of issues currently assigned to the 2.2 milestone using [this query](https://github.com/aspnet/EntityFrameworkCore/issues?q=is%3Aopen+is%3Aissue+milestone%3A2.2.0+sort%3Areactions-%2B1-desc) on our issue tracking system.  \r\n\r\n## Schedule\r\nThe schedule of EF Core 2.2 will align with the schedule of .NET Core and ASP.NET Core 2.2. See [the ASP.NET Core 2.2 Roadmap announcement](https://github.com/aspnet/Announcements/issues/307).\r\n\r\nOur current plan is to have three previews before we ship RTM near the end of 2018:\r\n\r\n- August – Preview 1\r\n- September - Preview 2\r\n- October - Preview 3\r\n- Before end-of-year – RTM\r\n\r\n As usual, this post reflects our current plan, but things may change as we make progress. \r\n\r\n## New features\r\n\r\n### Reverse engineering of database views into query types\r\n\r\nIn EF Core 2.1 we added query types, which allow mapping .NET objects to views and tables without keys. In 2.2, we plan to leverage this new capability to automatically map existing database views to query types. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/1679.\r\n\r\n###  Support for collections of owned entities\r\n\r\nIn EF Core 2.0 we added the concept of owned entity types, which allows modeling ownership relationship that are common between entities that are part of the same document in document-oriented databases or the same aggregate if you use Domain-Driven Design concepts in your model.\r\n\r\nUntil now, we only support reference navigation properties to owned entities. In EF Core 2.2, we plan to enhance this functionality to map collection navigation properties to owned entities. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/8172.\r\n\r\n## Other work\r\n\r\nThere are some additional work items that are not strictly EF Core 2.2 features, but we still track as part of the 2.2 milestone because we are doing the work in the same timeframe:\r\n\r\n### Cosmos DB provider\r\n\r\nA lot of our efforts are going into productizing an EF Core provider for the SQL API in Cosmos DB.\r\nWe have already created a prototype, which we have shown in demos such as in this [this EF Core 2.1 talk](https://www.youtube.com/watch?v=k55kDH_ixrQ) we did at the Microsoft Build conference.\r\n\r\nDue to competing priorities, releasing a preview of this provider has taken more than what we originally planned, but we are working on it now, and the current plan is to release a stable version by the end of this calendar year.\r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/12086. \r\n\r\n### Preview of spatial support for SQL Server\r\n\r\nWe are also focusing on adding spatial support as an extension to the SQL Server provider for EF Core.\r\nNote that the PostgreSQL provider (Npgsql) already added support in EF Core 2.1. Beside implementing this functionality for SQL Server, we are working closely with the developers of Npgsql to try to achieve a consistent and hopefully improved experience across providers.\r\n\r\nNote that we aren't committing to having a final version of the spatial support for the end of the current calendar year. But we are actively working on this now, and as we make progress, we should be able to provide a more precise estimate.   \r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/1100.\r\n\r\n### Improve test coverage for LINQ and reduce query regressions in future releases\r\n\r\nIn the last few releases, we have seen that when we commit improvements to our LINQ implementation, we often break queries that were previously working. The main challenge is that LINQ defines a huge space of possible queries to test, and it is very complex to measure what level of test coverage we have, even for a specific query operator. In the 2.2 timeframe, we will be investing on improving test coverage for this huge space. We also plan to experiment with new approaches to add appropriate coverage, and to reduce the likelihood of introducing regressions in future releases.\r\n\r\nYou can track our progress on this at https://github.com/aspnet/EntityFrameworkCore/issues/12046. \r\n\r\nFor discussion on this roadmap, please use https://github.com/aspnet/EntityFrameworkCore/issues/12465. ","Url":"https://github.com/aspnet/Announcements/issues/308","RelatedDescription":"Open issue \"EF Core 2.2 Roadmap\" (#308)"},{"Id":"335571873","IsPullRequest":false,"CreatedAt":"2018-06-25T21:19:36","Actor":"glennc","Number":"307","RawContent":null,"Title":"ASP.NET Core 2.2 Roadmap","State":"open","Body":"We have grouped the ASP.NET Core 2.2 release into a few themes:\r\n\r\n- APIs & Services\r\n- Server improvements\r\n- SignalR\r\n\r\n## Rough Schedule\r\nWe are currently planning to have 3 previews before RTM:\r\n - August – Preview 1\r\n - September - Preview 2\r\n - October - Preview 3\r\n - Before End-of-year – RTM\r\n\r\nAs with our previous roadmap posts this is what we intend right now, but it's subject to change as we continue development.\r\n\r\n## APIs and Services\r\n\r\nThe 'north star' for this version is to generate better metadata about your app and use that data to make your dev experience better and more productive. This is the main focus for 2.2.\r\n\r\n### API Controller conventions\r\nIn 2.1 we added controller specific conventions that make Web API development more convenient with the [ApiController attribute](https://docs.microsoft.com/en-us/aspnet/core/web-api/index?view=aspnetcore-2.1#annotate-class-with-apicontrollerattribute). In 2.2 we want to expand on this concept to provide metadata for API Explorer and provide a better end-to-end API documentation experience.\r\n\r\nWe want to make it possible for all MVC Core applications to have a good Swagger/OpenAPI definition by default. By following common patterns, your actions will produce rich metadata without falling into 'attribute soup' where you list every possible status code that every action in your app could return. We will include a default set of conventions that match what ASP.NET Core scaffolding generations. It will also be possible to write and share your own conventions to reflect your desired contracts. \r\n\r\nWe will include a set of analyzers that will help you find cases where code that doesn't match the API Explorer metadata, and a code-fix that provides options to explicitly specify the response type metadata, create a new convention with a different pattern, or just let you write code to satisfy the convention.\r\n\r\nAs a concrete example, you could write a convention that says \"every action method that starts with 'Create' will return an HTTP 201\". If you wrote the following code, then you would receive a warning.\r\n\r\n```csharp\r\n[HttpPost(\"/orders\")]\r\npublic ActionResult<Order> CreateOrder(OrderData orderData)\r\n{\r\n    ....\r\n    return Ok(new Order() {...});\r\n}\r\n```\r\n\r\nThis code doesn't match your Swagger/OpenAPI metadata (from the convention) - which says that this action returns a 201. Once you see this, you could `ctrl + .` to add the attributes for what we do know about this method, opting out of conventions, or you could change the code.\r\n\r\nThe analyzer will also be able to 'check your work' if you are being explicit about status codes and results using the existing attributes - it does not require you to use the conventions. Details for how this will all work can be discussed here: https://github.com/aspnet/Mvc/issues/7802\r\n\r\nLet's look at a more fleshed-out out example. The following code snippet is what is required to generate a reasonable Open API document for an action method that will get an item by ID or return a 404:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    [ProducesResponseType((int)HttpStatusCode.NotFound)]\r\n    [ProducesResponseType(typeof(CatalogItem),(int)HttpStatusCode.OK)]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\nIn 2.2 with the default conventions the following code should generate the same Open API document that the above code sample does, and this shipped analyzers will give you hints when you do something that doesn't match so you know to go and add attributes or change the conventions:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n### OpenAPI generation\r\nWith the conventions described above it will be possible for code that uses the API Explorer to generate Open API documents to be better by default, since the code you write will either follow the conventions or have attributes allowing generators to create better documents.\r\n\r\n### Dispatcher\r\nIn 2.2 we will introduce a new routing system that will expand the set of scenarios where routing is useful – tentatively called Dispatcher. \r\n\r\nThe current routing system was designed to support MVC’s historical scenarios without much thought to how routing and the composable middleware pipeline will work together. The Dispatcher is designed to run the URL matching step very early in the pipeline so that middleware can see the Endpoint that was selected as well as metadata that is associated with that endpoint. Like existing routing, the dispatcher will branch and call the actual endpoint at the end of the pipeline.\r\n\r\nA concrete example of how this helps us is with CORS. Today there is both a CORS middleware AND a CORS feature of MVC (https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1). Because routing information is deeply integrated with MVC we can't apply CORS policies that only apply to specific controllers until after we know what controller has been selected. However, if you also want CORS policies to apply to other parts of your pipeline then you need the middleware. This has been a source of confusion for many and we can simplify it if all of the middleware pipeline can have as much information about routing as MVC does today.\r\n\r\nWe’re also using this opportunity to make improvements to the performance of routing and dispatching for MVC and other scenarios.\r\n\r\n### HTTP API REPL tooling\r\nToday there are no tools built into Visual Studio or the dotnet CLI to help you execute HTTP verbs against your API. We have a great language, debugger, and framework but they are somewhat limited when it's difficult to send a POST to my app to see what happens. In 2.2 we want to build a CLI experience for exploring HTTP APIs to imcrease your API inner loop productivity. The CLI builds on all the features we've talked about above as some of its advanced features, like listing all routes in your app, are enabled by consuming the metadata we have about your app via Open API documents. That means the CLI should be useful for executing any HTTP verb, but really shines when you feed it more data like Open API docs. We intend to start by shipping this as a standalone global tool while we explore its feature set and potential.\r\n\r\nYou can see a demo and description of this in Scott Hunter and Scott Hanselman's BUILD talk here: https://youtu.be/KAIJ3ezQb3c?t=18m\r\n\r\n### API client generation (C# & TypeScript)\r\nOnce you have an API with rich metadata and done exploring and testing it, then you need to go and write some client code to call and make use of your API. We are going to build an experience for generating this code based on the same data and documentation described above. We envision a few pieces for this story, one part is a dotnet tool that can generate code from an Open API document, the other is MSBuild SDK work to allow a `ServiceReference` to another project in a solution. That reference will cause build time client code generation to happen via the tool that can generate code. We expect this to work in a similar way to the EF Core tooling experience, where your application is built and most of your startup code executed but instead of running it we use the data we have about your code to generate a client.\r\n\r\n### Authorization Server\r\nOne of the largest gaps we’ve had has been around authorization for applications beyond a simple forms based login. We plan to fill that gap with a simple to use OpenID Connect based authorization server, which will allow your ASP.NET application to act as an authentication point for your projects, be they web site to API, SPA to API, native application to an API or, for distributed applications API to API. As we are concentrating on first party applications we can make the code you need to plumb in trivial, getting as close to zero configuration as you can,  we’re not aiming to replace the excellent third-party solutions out there which enable richer scenarios like third-party applications or which provide a flexibility in configuration and authentication flow.\r\n\r\n## Server Improvements\r\n\r\n### Health Checks\r\nThis feature is a way to trivially setup an endpoint in your application that can be used to check the health of your application, potentially taking into account things like memory consumption or database availability as well as just \"can I accept a HTTP request\".\r\n\r\n### HTTP/2 in Kestrel & HttpClient\r\nThe title says it all in this case. HTTP/2 support for all. We started this work some time ago, and have had the protocol mostly implemented for a while but not compiled into the product since it wasn't ready. This version we will finish that work and implement the missing features.\r\n\r\n### In-proc ANCM\r\nRunning ASP.NET Core applications in-process in IIS, giving a significant performance boost.\r\n\r\n## SignalR\r\n\r\n### Add Java & C++ clients\r\nAllow customers using Java or C++ to connect to SignalR servers, and the [Azure SignalR Service](https://azure.microsoft.com/en-us/blog/azure-signalr-service-a-fully-managed-service-to-add-real-time-functionality/).\r\n\r\n## Other\r\nAs with all releases there is a large tail of bug fixes, performance improvements, small features, and community PRs that we will also work on. You can see the full list of work by browsing the 2.2 milestones on the various [repositories](https://github.com/aspnet/).\r\n\r\nFor discussion on the roadmap in general, use https://github.com/aspnet/Home/issues/3265","Url":"https://github.com/aspnet/Announcements/issues/307","RelatedDescription":"Open issue \"ASP.NET Core 2.2 Roadmap\" (#307)"},{"Id":"333804954","IsPullRequest":false,"CreatedAt":"2018-06-19T19:21:13","Actor":"anurse","Number":"306","RawContent":null,"Title":"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR Client from UWP applications where the minimum version is set to \"Windows 10, version 1803\". However, these fixes also require some additional dependencies.\r\n\r\n**NOTE**: UWP Applcations with a minimum version set **below** \"Windows 10, version 1803\" (for example, if the minimum version is set to \"Fall Creators Update\") are **not** affected by this issue and **do not require** these steps.\r\n\r\nIn order to use the SignalR Client in UWP applications where the minimum version is set to \"Windows 10, version 1803\" you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Add the following **additional** package references to your project. These are referenced transitively by the SignalR Client, but newer versions are required to resolve this issue. We are planning to improve this in a future patch.\r\n    * `System.Threading.Tasks.Extensions` version `4.5.1`\r\n    * `System.Runtime.CompilerServices.Unsafe` version `4.5.1`\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/2406","Url":"https://github.com/aspnet/Announcements/issues/306","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803\" (#306)"},{"Id":"333802959","IsPullRequest":false,"CreatedAt":"2018-06-19T19:15:05","Actor":"anurse","Number":"305","RawContent":null,"Title":"SignalR Client 2.1.1 in Xamarin","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR **Client** from Xamarin. However, these fixes also require an updated build of Xamarin.iOS and Xamarin.Android, as well as some additional dependencies.\r\n\r\nIn order to use the SignalR Client in Xamarin applications you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Upgrade Xamarin to the appropriate version:\r\n    * Xamarin.Android `8.4.0.1`\r\n    * Xamarin.iOS `11.14.0.4`\r\n    * These will be included in:\r\n      * Visual Studio 15.8 **Preview 3** (not released at the time of publishing, but coming soon)\r\n      * Visual Studio for Mac 7.6 **Preview 3** (not released at the time of publishing, but coming soon)\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/1886","Url":"https://github.com/aspnet/Announcements/issues/305","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in Xamarin\" (#305)"},{"Id":"329851587","IsPullRequest":false,"CreatedAt":"2018-06-06T13:30:30","Actor":"ToLearnMoe","Number":"304","RawContent":null,"Title":"怎么找工作啊","State":"closed","Body":"我学spirng的同学都上班两个月了我实习都没找到，学了给asp告诉我现在不能用了要什么点apsnet。你们行不行啊\r\n\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n\r\nThis repo is for team announcements only. See https://github.com/aspnet/announcements#announcements.\r\n\r\nTo file a bug or start a discussion, please find the appropriate repo in https://github.com/aspnet and create a new issue. \r\nFor general issue discussions please go to https://github.com/aspnet/Home/issues and create a new issue.\r\n","Url":"https://github.com/aspnet/Announcements/issues/304","RelatedDescription":"Closed issue \"怎么找工作啊\" (#304)"},{"Id":"329603099","IsPullRequest":false,"CreatedAt":"2018-06-05T20:11:55","Actor":"AngelosP","Number":"303","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"closed","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\r\n\r\nFor discussion, use https://github.com/aspnet/Tooling/issues/1075","Url":"https://github.com/aspnet/Announcements/issues/303","RelatedDescription":"Closed issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#303)"},{"Id":"327435771","IsPullRequest":false,"CreatedAt":"2018-05-29T18:26:40","Actor":"shirhatti","Number":"302","RawContent":null,"Title":"IIS in-process hosting moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving IIS in-process hosting out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will ship IIS in-process hosting as part of the ASP.NET Core 2.2 release.\r\n\r\n### Why?\r\n\r\nIIS in-process hosting  is a brand new server implementation and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/IISIntegration/issues/878","Url":"https://github.com/aspnet/Announcements/issues/302","RelatedDescription":"Open issue \"IIS in-process hosting moved out of ASP.NET Core 2.1\" (#302)"},{"Id":"322891671","IsPullRequest":false,"CreatedAt":"2018-05-14T16:32:50","Actor":"jkotalik","Number":"301","RawContent":null,"Title":"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available","State":"open","Body":"We have changed the behavior of the HttpsRedirectionMiddleware between 2.1.0-preview2 to 2.1.0-rc1. Instead of always redirecting a request to HTTPS, we will now not redirect to HTTPS if no port is available. The HTTPS port can be specified by setting ```HttpsRedirectionOptions.HttpsPort```, setting the ASPNETCORE_HTTPS_PORT environment variable, or by setting an HTTPS url in launchsettings.json.\r\n\r\nIf you want to continue keeping the original behavior the HttpsRedirectionMiddleware which redirects to port 443, you can set the ```HttpsRedirectionOptions.HttpsPort = 443```.\r\n \r\n---\r\n\r\n*Please use aspnet/BasicMiddleware#329 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/301","RelatedDescription":"Open issue \"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available\" (#301)"},{"Id":"321270218","IsPullRequest":false,"CreatedAt":"2018-05-08T17:07:04","Actor":"blowdart","Number":"300","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2553\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_","Url":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300)"},{"Id":"320441265","IsPullRequest":false,"CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Number":"299","RawContent":null,"Title":"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/WebHooks/issues/296","Url":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Open issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299)"},{"Id":"309862672","IsPullRequest":false,"CreatedAt":"2018-03-29T18:44:48","Actor":"glennc","Number":"298","RawContent":null,"Title":"Migrating from aspnetcore docker repos to dotnet","State":"open","Body":"Starting with .NET Core 2.1-preview2, we intend to migrate from using the microsoft/aspnetcore-build and microsoft/aspnetcore Docker repos to the microsoft/dotnet Docker repo.  We will continue to ship patches and security fixes for the existing aspnetcore images but any new images for 2.1 and higher will be pushed to microsoft/dotnet.\r\n\r\nDockerfiles using `microsoft/aspnetcore:<version>` should change to `microsoft/dotnet:<version>-aspnetcore-runtime`.\r\n\r\nDockerfiles using `microsoft/aspnetcore-build` that do not require Node should just change to `microsoft/dotnet:<version>-sdk`.\r\n\r\nDockerfiles using Node from the `microsoft/aspnetcore-build` image will either need to install Node into their own image or use mult-stage builds as described in the Dockerfile examples at the end of this announcement.\r\n\r\nThe `ASPNETCORE_URLS` env var that allows ASP.NET Core apps to accept traffic from outside the container will be set in all the `dotnet` images, which was a common early stumbling block for people getting started with ASP.NET Core and Docker. PR is [here](https://github.com/dotnet/dotnet-docker/pull/450)\r\n\r\n### Why the merge?\r\n\r\nFor some time we have been seeing people search for and find the `microsoft/dotnet` images and never realise that there are aspnetcore ones. This could be problematic in the past as the dotnet images were not optimised for ASP.NET Core, making things a little harder or slower. But with changes in the way ASP.NET Core works in 2.1 it was going to be much more impactful, in that ASP.NET Core applications were not likely to run on the base dotnet image. Given that we also thought it made more sense to have a single repository for all images, as ASP.NET is just part of .NET, we are taking this opportunity to remove the potential source of confusion and wasted time for our customers.\r\n\r\n### Why no Node?\r\nThere are two main reasons for this:\r\n\r\n  1. Multi-stage build now makes it easier to pull in the Node image for purely build concerns.\r\n  2. The ASP.NET Core templates no longer have a hard dependency on Node.\r\n\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n\r\n### Dockerfile examples\r\n\r\nIf you need Node then you will need to add it in your own Dockerfile, like this:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n#setup node\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\n# copy everything else and build\r\nCOPY . ./\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n#setup node, this is only needed if you use Node both at runtime and build time. Some people may only need the build part.\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\nCOPY --from=build-env /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nIf you only need Node at build then you may also be able to take advantage of multi-stage build like the following:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\nFROM node as clientBuild\r\n#Do npm restore and other Node stuff.\r\n\r\n#Merge the contents of your .NET build env and your clientBuild and publish.\r\nFROM build-env as publish\r\n# copy everything else and build\r\nCOPY --from=clientBuild . .\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n\r\nCOPY --from=publish /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n","Url":"https://github.com/aspnet/Announcements/issues/298","RelatedDescription":"Open issue \"Migrating from aspnetcore docker repos to dotnet\" (#298)"},{"Id":"305936138","IsPullRequest":false,"CreatedAt":"2018-03-16T14:09:54","Actor":"mnmr","Number":"297","RawContent":null,"Title":"Model binding accesses read-only properties in post-back","State":"closed","Body":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355.","Url":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297)"},{"Id":"305310538","IsPullRequest":false,"CreatedAt":"2018-03-14T20:08:36","Actor":"halter73","Number":"296","RawContent":null,"Title":"Managed sockets will replace libuv as Kestrel's default transport","State":"open","Body":"Starting in ASP.NET Core 2.1.0, managed sockets will be replacing libuv as Kestrel's default transport.\r\n\r\nThis change should only break applications that bind to non-TCP endpoints or explicitly call `IWebHostBuilder.UseLibuv()` and reference the libuv transport transitively through the Microsoft.AspNetCore.App and/or Microsoft.AspNetCore.Server.Kestrel NuGet packages.\r\n\r\nTo fix the break simply add a reference to Microsoft.AspNetCore.All and/or Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.\r\n\r\nWhile switching to the managed socket transport should be seamless<sup>1</sup>, if you want to continue using the libuv transport in 2.1.0 you will need to explicitly call `UseLibuv()` and reference the libuv transport either directly or through the \"All\" metapackage.\r\n\r\n<sup>1</sup> Unless you are trying to bind to a Unix domain socket or use systemd socket activation. As of 2.1, only the libuv transport supports binding to these kinds of endpoints.\r\n\r\n---\r\n\r\n*Please use aspnet/KestrelHttpServer#2360 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/296","RelatedDescription":"Open issue \"Managed sockets will replace libuv as Kestrel's default transport\" (#296)"},{"Id":"304854672","IsPullRequest":false,"CreatedAt":"2018-03-13T17:07:23","Actor":"blowdart","Number":"295","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\r\n\r\n## Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core versions 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where an elevation of privilege vulnerability exists when a ASP.NET Core web application fails to validate web requests correctly.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Home/issues/2954\r\n\r\n### Mitigation factors\r\n\r\nSites are not vulnerable to this elevation of privilege when:\r\n\r\n* The site is hosted behind a proxy, such as Internet Information Services (IIS), NGINX, or Apache, where:\r\n\r\n  * The proxy validates the host header, and\r\n  * The proxy is configured to listen on fully qualified domain names or\r\n  * The proxy is configured with a wildcard subdomain where the root domain is fully controlled by the site owner.\r\n\r\nFor example, if IIS is configured to respond to requests for `contoso.com` or `*.contoso.com` hosts, the application is protected.\r\n\r\nIf IIS is configured to respond to any request from any host, the application is vulnerable.\r\n\r\nKestrel does not have the capability to validate host headers and is vulnerable if not placed behind a proxy that performs the host header validation.\r\n\r\nApps hosted in Azure Web Apps are not susceptible to this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core hosted application which is directly exposed to the internet, or hosted behind a proxy which does not validate or restict host headers to known good values.\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.HttpOverrides | 2.0.0, 2.0.1 |  2.0.2 and later\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1 |  2.0.2 and later\r\n\r\n*No patches are available for ASP.NET Core 1.0.x or ASP.NET Core 1.1.x. Microsoft requires that you place your 1.x ASP.NET Core application behind a proxy.\r\nYou must address the configuration of your proxy to protect your application. If you're not running ASP.NET Core 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0.\r\nand add the host validating middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/.*\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected?\r\n\r\nReview the server and proxy configuration [instructions](#configuration) below to see if your system is configured correctly, and adjust the configuration if necessary.\r\n\r\n### How do I fix the issue?\r\n\r\nYou must address the [configuration](#configuration) of your server or proxy to protect your application to limit requests to known hosts.\r\n\r\nIf you're not running Kestrel 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0 and follow the 2.0 instructions below.\r\n\r\nASP.NET Core 2.0.x applications must [update your code](#app-update) to fully protect your application.\r\n\r\n#### <a name=\"configuration\"></a> Server and Proxy configuration\r\n\r\nYou must examine your externally facing server or proxy configuration and ensure it requires host headers with fully qualified domain names, or known sub-domains if you are using sub-domain wild cards.\r\n\r\n##### ASP.NET Core applications behind [IIS](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/)\r\n\r\nTo configure IIS to only respond to know hosts:\r\n\r\n* Open IIS Manager.\r\n* Expand the **Sites** node for the machine you want to configure.\r\n* Select the site by clicking on the site.\r\n* In the **Actions** list on the right-hand side of IIS Manager, click **Bindings**.\r\n* Edit any bindings that do not have a host name to specify one. Do not use a `*` wildcard unless it's against a domain under your control. For example, `*.contoso.com` is safe, `*.com` is not.\r\n\r\n##### ASP.NET Core applications running publicly on [Kestrel](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel)\r\n\r\nKestrel does not have the capability to validate host headers. It must either be placed behind a proxy that performs the host header validation or the validation must be performed within the application by adding  host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/. You must also [update your dependencies](#app-update) to fully protect your application.\r\n\r\n##### ASP.NET Core applications running on [HTTP.SYS](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys)\r\n\r\nTo configure URL prefixes and ports, you can use the `UseUrls` extension method, the `urls` command-line argument, the ASPNETCORE_URLS environment variable, or the `UrlPrefixes` property on [HttpSysOptions](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.server.httpsys.httpsysoptions). The following code example uses `UrlPrefixes`.\r\n\r\n```c#\r\npublic static IWebHost BuildWebHost(string[] args) =>\r\n    WebHost.CreateDefaultBuilder(args)\r\n        .UseStartup<Startup>()\r\n        .UseHttpSys(options =>\r\n        {\r\n            // The following options are set to default values.\r\n            options.Authentication.Schemes = AuthenticationSchemes.None;\r\n            options.Authentication.AllowAnonymous = true;\r\n            options.MaxConnections = null;\r\n            options.MaxRequestBodySize = 30000000;\r\n            options.UrlPrefixes.Add(\"http://localhost:5000\");\r\n        })\r\n        .Build();\r\n```\r\n\r\n##### ASP.NET Core applications behind [NGINX](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx)\r\n\r\nTo configure NGINX as a reverse proxy to forward requests to your ASP.NET Core app, replace the contents */etc/nginx/sites-available/default* with the following:\r\n\r\n```NGINX\r\nserver {\r\n    listen        80;\r\n    server_name   example.com *.example.com;\r\n    location / {\r\n        proxy_pass         http://localhost:5000;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header   Upgrade $http_upgrade;\r\n        proxy_set_header   Connection keep-alive;\r\n        proxy_set_header   Host $host;\r\n        proxy_cache_bypass $http_upgrade;\r\n    }\r\n}\r\n```\r\n\r\nNote that with NGINX, when there is no match for `server_name`, NGINX will pick the default server. If no default server has been defined, the first server in the conf file is the default server. Best practice is to add a specific default server which returns a status code of 444 in the conf file. An example default server configuration would be as follows:\r\n\r\n```NGINX\r\nserver {\r\n    listen   80 default_server;\r\n    # listen [::]:80 default_server deferred;\r\n    return   444;\r\n}\r\n```\r\n\r\nWith the preceding configuration file and default server, NGINX accepts public traffic on port 80 with host header `example.com` or `*.example.com`. Requests not matching these hosts won't get forwarded to Kestrel. NGINX forwards the matching requests to Kestrel at `http://localhost:5000`. See [How nginx processes a request](https://nginx.org/docs/http/request_processing.html) for more information.\r\n\r\nOnce the NGINX configuration is established, run `sudo nginx -t` to verify the syntax of the configuration files. If the configuration file test is successful, force NGINX to pick up the changes by running `sudo nginx -s reload`.\r\n\r\n##### ASP.NET Core applications behind [Apache](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-apache)\r\n\r\nConfiguration files for Apache are located within the `/etc/httpd/conf.d/` directory. Any file with the `*.conf*` extension:\r\n\r\n* Is processed in alphabetical order, and\r\n* The module configuration files in `/etc/httpd/conf.modules.d/` are processed. The module configuration files in `/etc/httpd/conf.modules.d/` contain any configuration files necessary to load modules.\r\n\r\n\r\n```\r\n<VirtualHost *:80>\r\n    ProxyPreserveHost On\r\n    ProxyPass / http://127.0.0.1:5000/\r\n    ProxyPassReverse / http://127.0.0.1:5000/\r\n    ServerName www.example.com\r\n    ServerAlias *.example.com\r\n</VirtualHost>\r\n```\r\n\r\nThe `VirtualHost` block can appear multiple times, in one or more files on a server. In the preceding configuration file, Apache accepts public traffic on port 80. The domain `www.example.com` is being served, and the `*.example.com` alias resolves to the same website. See [Name-based virtual host support](https://httpd.apache.org/docs/current/vhosts/name-based.html) for more information. Requests are proxied at the root to port 5000 of the server at 127.0.0.1. For bi-directional communication, `ProxyPass` and `ProxyPassReverse` are required.\r\n\r\nSave the file and test the configuration. If everything passes, the response is `Syntax [OK]`.\r\n\r\n```bash\r\nsudo service httpd configtest\r\n```\r\n\r\nRestart Apache:\r\n\r\n```bash\r\nsudo systemctl restart httpd\r\nsudo systemctl enable httpd\r\n```\r\n\r\n\r\n#### <a name=\"app-update\"></a> ASP.NET Core 2.0 application code updates\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.6 or later.\r\n* Updating will pull in the fixed packages listed above.\r\n\r\nIf you're targeting .NET Framework, update the packages listed above to their safe version or later.\r\n\r\nIf your application is using Kestrel without a proxy or the HttpOverrides functionality (UseForwardedHeaders with ForwardedHost) you must also add the host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/tree/release/2.0/samples/HostFilteringSample/.\r\n\r\n---\r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. You must follow the update instructions below to address both types of dependency.\r\n\r\n### Direct dependencies\r\n\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on `Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file.\r\n\r\n### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Core\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the vulnerable metapackage, as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.5.\r\n\r\nTo update the version to the secure package, change the version number to a secure package version. In this example, update `Microsoft.AspNetCore.All` to 2.0.6 or later. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.6\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Framework\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a reference to a single package, as seen by the `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.HttpOverrides` version 2.0.1.\r\n\r\nTo update to the secure package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.HttpOverrides` to 2.0.2 and later. Save the *csproj* file. The updated and secure *csproj* look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependency version.\r\n\r\n##### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to a compatible version. \r\n\r\nFor example if your project refers directly to `Microsoft.AspNetCore.Mvc.Cors` with a version number of `2.0.0`, when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your *project.json* in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n###### Reviewing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review the *project.assets.json* file.\r\n\r\n###### Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names above and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example, the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n###### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file. Visual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the vulnerable versions table above.\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your *project.assets.json* file includes references to any of the vulnerable packages shown above, then you need to fix the transitive dependencies.\r\n\r\n###### Overriding transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages this means:\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned, you must add a direct dependency to the updated version by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referring the fixed version.\r\nFor example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.HttpOverrides` version 2.0.0 you would add a reference to the fixed version, that is, 2.0.2 or later.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverride\" Version=\"2.0.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n###### Rebuilding your application\r\n\r\nRebuild your application. Test and deploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\n[Mikhail Shcherbakov](https://www.linkedin.com/in/mikhailshcherbakov/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0787)\r\n\r\n### Revisions\r\n\r\nV1.1 (Mar 15, 2018): NGINX configuration instructions updated, thanks to @buglloc\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-03-15_","Url":"https://github.com/aspnet/Announcements/issues/295","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\" (#295)"},{"Id":"304853568","IsPullRequest":false,"CreatedAt":"2018-03-13T17:04:23","Actor":"blowdart","Number":"294","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_","Url":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294)"},{"Id":"303604146","IsPullRequest":false,"CreatedAt":"2018-03-08T19:36:01","Actor":"natemcmaster","Number":"293","RawContent":null,"Title":"Moving official daily builds to the dotnet-core MyGet feed ","State":"open","Body":"As part of ongoing infrastructural changes, we will be moving official daily of ASP.NET Core to the dotnet-core myget feed. This transition will happen over the next few weeks.\r\n\r\n**Old feed:** https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\r\n**New feed:** https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n\r\nWe recommend updating to use the dotnet-core feed to continue getting the latest daily builds of ASP.NET Core.\r\n\r\nWe are making this change to make it easier for you to pull daily builds that align with the .NET Core CLI and .NET Core runtime. Some of our existing MyGet feeds will continue to exist, but will not be used for official daily builds. Instead, those feeds will only be used for builds of experimental branches of aspnetcore.\r\n\r\nOther useful links:\r\nGallery: https://dotnet.myget.org/gallery/dotnet-core\r\nNuGet v2 source: https://dotnet.myget.org/F/dotnet-core/api/v2\r\nNPM feed: https://dotnet.myget.org/F/dotnet-core/npm/\r\n\r\nPlease use https://github.com/aspnet/Home/issues/2937 for discussion.","Url":"https://github.com/aspnet/Announcements/issues/293","RelatedDescription":"Open issue \"Moving official daily builds to the dotnet-core MyGet feed \" (#293)"},{"Id":"302846756","IsPullRequest":false,"CreatedAt":"2018-03-06T20:07:15","Actor":"natemcmaster","Number":"292","RawContent":null,"Title":"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image","State":"open","Body":"We will be deprecating the following Docker images\r\n \r\n- microsoft/aspnetcore-build:1.0-1.1\r\n- microsoft/aspnetcore-build:1.0-2.0\r\n\r\nWe will not delete these images. These images will continue to receive patch update whenever a 1.0.x, 1.1.x, or 2.0.x update ships, however, we will not produce a new version which contains the 2.1 runtime.\r\n\r\n### Why?\r\n \r\nThese images existed to support CI/CD pipelines that run apps on multiple versions for .NET Core in the same container. With each release, these images have grown in size. The 1.0-2.0 image is already about 1GB, and would continue to grow with runtime updates. \r\n \r\nFortunately, recent improvements to .NET Core (such as minor version roll-forward) and Docker (multi-stage builds) have reduced the need to use an image with multiple versions of .NET Core. We have seen usage of these multi-version images declining over time, and today, they are a small percentage of our Docker image usage.\r\n\r\nRather than maintaining a single, large image with all possible .NET Core runtimes, we encourage users to use multi-stage builds. Docker's multi-stage feature allows you to compose a single Dockerfile, but still use multiple .NET Core runtimes. Also, starting in 2.1, .NET Core supports rolling forward the runtime version within the major version, which will further reduce the need to have multiple 2.x runtimes side-by-side.\r\n \r\nFor discussion, use https://github.com/aspnet/aspnet-docker/issues/349","Url":"https://github.com/aspnet/Announcements/issues/292","RelatedDescription":"Open issue \"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image\" (#292)"}],"ResultType":"GitHubIssue"},"Announcements":{"Issues":[{"Id":"368431099","IsPullRequest":false,"CreatedAt":"2018-10-09T23:00:09","Actor":"mikaelm12","Number":"321","RawContent":null,"Title":"SignalR Java Client Package Name Change","State":"open","Body":"The SignalR java client which is currently in preview, was previously under the package name `com.microsoft.aspnet.signalr`. This was the case for the first and second previews of the Java client. Starting in preview 3 the package name will change to `com.microsoft.signalr`. This means that our groupid through maven central will change and that consuming the package through maven or gradle will be slightly different. \r\n\r\nHere's what bringing in the Java client after preview 3 releases without the actual build numbers should look similar to\r\n```xml\r\n<dependency>\r\n  <groupId>com.microsoft.signalr</groupId>\r\n  <artifactId>signalr</artifactId>\r\n  <version>PREVIEW 3 VERSION NUMBER</version>\r\n</dependency>\r\n```\r\n\r\n```gradle\r\nimplementation 'com.microsoft.signalr:signalr:PREVIEW 3 VERSION NUMBER'\r\n```","Url":"https://github.com/aspnet/Announcements/issues/321","RelatedDescription":"Open issue \"SignalR Java Client Package Name Change\" (#321)"},{"Id":"367932540","IsPullRequest":false,"CreatedAt":"2018-10-08T20:00:47","Actor":"natemcmaster","Number":"320","RawContent":null,"Title":"For contributors: unifying to fewer GitHub repos","State":"open","Body":"_Please use [this issue](https://github.com/aspnet/Home/issues/3598) for discussion._\r\n\r\nOver the next few months, we will reduce the number of repos in active development in the @aspnet organization by merging them together. We plan to condense about 53 repos into 5. Repos which merge with another will be archived on GitHub, which makes them read-only. We will also rename a few repositories. GitHub will automatically redirect URLs to issues and commits on renamed repositories. We will update the README and repo descriptions to help you navigate from archived repos to the new repo.\r\n\r\nAfter the merging is complete, the final set of repos will be as follows:\r\n\r\nRepo                            | Primary purpose\r\n--------------------------------|-----------------------------------------------\r\naspnet/AspNetCore               | ASP.NET Core runtime\r\naspnet/Extensions               | Microsoft.Extensions.* APIs\r\naspnet/EntityFrameworkCore      | Entity Framework Core\r\naspnet/Tooling                  | Visual Studio extensions, command-line tools, and MSBuild SDKs\r\naspnet/AspLabs                  | Experiments not ready for production releases\r\n\r\nTo preserve as much history as possible, we will rename aspnet/Home to aspnet/AspNetCore, and aspnet/Common to aspnet/Extensions instead of creating new repos. We will preserve commit history by merging unrelated histories into the unified repos. We will also review open issues and move them when necessary to keep them aligned with the relevant code.\r\n\r\n### Motivation\r\n\r\nOur primary motivation is simplifying both our engineering systems and our GitHub interactions with all of you. We know there are some drawbacks to working in larger repos, but we find the benefits compelling enough to move forward with this change. The new set of repos more closely aligns with the layering of the products they ship.\r\n\r\n### Timeframe\r\n\r\nWe'll be starting the first round of changes soon. We expect the entire unification effort will take us several weeks. We'll migrate repositories in phases and adjust the plan along the way, as necessary.\r\n\r\n### Archived repos\r\n\r\nThe following repos will be merged into the main repos above. They will not be used any more for active development on 2.1 LTS and new releases. The source code for the projects will move to the new project with any issues we intend to keep working on. Remaining issues and pull requests will be closed. We do not plan to delete the repos or remove tagged commits, but the projects will become read-only.\r\n\r\n* AADIntegration           \r\n* Antiforgery              \r\n* AuthSamples              \r\n* AzureIntegration         \r\n* BasicMiddleware          \r\n* BrowserLink              \r\n* Caching                  \r\n* Common                   \r\n* Configuration            \r\n* CORS                     \r\n* DataProtection           \r\n* DependencyInjection      \r\n* Diagnostics              \r\n* DotNetTools              \r\n* EventNotification        \r\n* FileSystem               \r\n* Hosting                  \r\n* HtmlAbstractions         \r\n* HttpAbstractions         \r\n* HttpClientFactory        \r\n* HttpSysServer            \r\n* Identity                 \r\n* IISIntegration           \r\n* JavaScriptServices       \r\n* JsonPatch                \r\n* KestrelHttpServer        \r\n* Localization             \r\n* Logging                  \r\n* MetaPackages             \r\n* Microsoft.Data.Sqlite    \r\n* MusicStore               \r\n* Mvc                      \r\n* MvcPrecompilation        \r\n* Options                  \r\n* Proxy                    \r\n* Razor                    \r\n* ResponseCaching          \r\n* Routing                  \r\n* Scaffolding              \r\n* Security                 \r\n* ServerTests              \r\n* Session                  \r\n* SignalR                  \r\n* StaticFiles              \r\n* Templating               \r\n* Testing                  \r\n* Universe                 \r\n* WebHooks                 \r\n* WebSockets\r\n\r\n\r\n_Please use https://github.com/aspnet/Home/issues/3598 for discussion._  ","Url":"https://github.com/aspnet/Announcements/issues/320","RelatedDescription":"Open issue \"For contributors: unifying to fewer GitHub repos\" (#320)"},{"Id":"367922912","IsPullRequest":false,"CreatedAt":"2018-10-08T19:29:02","Actor":"pranavkm","Number":"319","RawContent":null,"Title":"3.0 - Removing Microsoft.AspNetCore.Mvc.WebApiCompatShim","State":"open","Body":"The Microsoft.AspNetCore.Mvc.WebApiCompatShim (WebApiCompatShim) package provides partial compatibility in ASP.NET Core with ASP.NET Web API 2 to simplify migrating existing Web API implementations to ASP.NET Core. However, apps using the WebApiCompatShim do not benefit from the API related features shipping in recent ASP.NET Core releases, such as improved Open API Spec genertaion, standardized error handling, and client code generation. To better focus our API efforts in 3.0, we plan to remove WebApiCompatShim. We recommend that existing applications using the WebApiCompatShim migrate to the newer `[ApiController]` model.\r\n\r\nFor questions or further discussions, please use https://github.com/aspnet/Mvc/issues/8570.","Url":"https://github.com/aspnet/Announcements/issues/319","RelatedDescription":"Open issue \"3.0 - Removing Microsoft.AspNetCore.Mvc.WebApiCompatShim\" (#319)"},{"Id":"365011293","IsPullRequest":false,"CreatedAt":"2018-09-28T19:23:51","Actor":"blowdart","Number":"318","RawContent":null,"Title":"Microsoft Security Advisory: iOS12 breaks social, WSFed and OIDC logins","State":"open","Body":"# Microsoft Security Advisory:  iOS12 breaks social, WSFed and OIDC logins\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about an incompatibly between iOS12 and some types of authentication. This advisory also provides guidance on what developers can do to remove current security restrictions added by ASP.NET to their applications to become compatible with iOS12.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Identity/issues/1984 for ASP.NET Core Identity\r\nDiscussion for this issue can be found at https://github.com/aspnet/Security/issues/1864 for ASP.NET Core Cookie Authentication\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>What has changed\r\n\r\nThe recent iOS12 update has changed Safari's handling of [SameSite](https://tools.ietf.org/html/rfc6265) cookies. The SameSite attribute allows a developer to control when cookies are sent to a web site, enabling the flow to only occur when requests are from the same site. This standard was introduced to reduce exposure to Cross Site Request Forgery (CSRF) attacks. By default ASP.NET Core 2.0 and later protects its authentication cookies using the SameSite property. The change on Apple's part is not limited to ASP.NET Core applications, it is affecting multiple frameworks and authentication software which relay on HTTP forms in a browser, for example authenticating to a third party via Facebook, Twitter or browser based Open ID Connect (OIDC) mechanism.\r\n\r\nApple have stated they believe [their change is correct behavior](https://bugs.webkit.org/show_bug.cgi?id=188165), and that the fault lies in every other browser's implementation.\r\n\r\nWhile we take no stance on the correctness of browser behavior we feel that removing the SameSite protections would expose our customers, and their customers to a wider risk, as it would remove the protection provided everywhere, for all users, in any browser.\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nIf your users can no longer login to your web application on iOS12 using Safari then you are affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix this?\r\n\r\nDevelopers can allow iOS12 Safari users to log into their applications by turn off SameSite protection in `ConfigureServices()`.\r\n\r\nIf you are using ASP.NET Core Identity you disable the protection by configuring cookies with the following code\r\n\r\n```c#\r\nservices.ConfigureExternalCookie(options =>\r\n{\r\n    // Other options\r\n    options.Cookie.SameSite = SameSiteMode.None;\r\n});\r\nservices.ConfigureApplicationCookie(options =>\r\n{\r\n    // Other options\r\n    options.Cookie.SameSite = SameSiteMode.None;\r\n});\r\n```\r\n\r\nIf you are using cookie authentication without ASP.NET Core identity you can turn off the protection with the following code\r\n\r\n```c#\r\nservices.AddCookie(CookieAuthenticationDefaults.AuthenticationScheme, options =>\r\n{\r\n    // Other options\r\n    options.Cookie.SameSite = Microsoft.AspNetCore.Http.SameSiteMode.None;\r\n})\r\n```\r\n\r\nIf you are using external OIDC providers you may be able to avoid the issue by changing the response mode your provider uses from a POST to a GET request, using the following code. Not all providers may support this.\r\n\r\n```c#\r\n.AddOpenIdConnect(\"myOIDProvider\", options => {\r\n    // Other options\r\n    options.ResponseType = \"code\";\r\n    options.ResponseMode = \"query\";\r\n};\r\n```\r\n\r\n_Note that in making these changes protection is removed for all users and all browsers. You should ensure that all your actions that make state changes are protected with [CSRF anti-forgery mechanisms](https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery) built into ASP.NET Core.\r\n\r\n#### Rebuilding your application\r\n\r\nAfter making these configuration changes you rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[Bug 188165 - iOS 12 Safari breaks ASP.NET Core 2.1 OIDC authentication](https://bugs.webkit.org/show_bug.cgi?id=188165)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 28, 2018): Advisory published.\r\n","Url":"https://github.com/aspnet/Announcements/issues/318","RelatedDescription":"Open issue \"Microsoft Security Advisory: iOS12 breaks social, WSFed and OIDC logins\" (#318)"},{"Id":"361087870","IsPullRequest":false,"CreatedAt":"2018-09-18T00:05:36","Actor":"halter73","Number":"317","RawContent":null,"Title":"Kestrel Connection Adapter Logging Namespace Changes","State":"open","Body":"The logging namespaces for Kestrel's HttpsConnectionAdapter and LoggingConnectionAdapter are changing in 2.2.0.\r\n\r\n1. The `HttpsConnectionAdapter` logging namespace is now `Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionAdapter`.\r\n2. The `LoggingConnectionAdapter` logging namespace is now `Microsoft.AspNetCore.Server.Kestrel.Core.Adapter.Internal.LoggingConnectionAdapter`.\r\n\r\nHere's an example HttpsConnectionAdapter log prior to the change:\r\n\r\n```\r\ndbug: HttpsConnectionAdapter[2]\r\n      Authentication of the HTTPS connection timed out.\r\n```\r\n\r\nAnd after:\r\n\r\n```\r\ndbug: Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionAdapter[2]\r\n      Authentication of the HTTPS connection timed out.\r\n```","Url":"https://github.com/aspnet/Announcements/issues/317","RelatedDescription":"Open issue \"Kestrel Connection Adapter Logging Namespace Changes\" (#317)"},{"Id":"359136062","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:10","Actor":"blowdart","Number":"316","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when ASP.NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an ASP.NET Core web application. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing a specially crafted web requests to the ASP.NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles parsing web requests.\r\n\r\nThe underlying problem exists in the `System.IO.Pipelines` package. If you have other software which uses this package please follow the instructions in the [.NET Core bulletin](https://github.com/dotnet/announcements/issues/83).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2914\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses either of the packages with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.AspNetCore.All | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3 | 2.1.4\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nASP.NET Core 2.1 is distributed as part of the .NET Core runtime. To check the current installed runtimes open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed you will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf the highest .NET Core SDK version is less that 2.1.402 or the highest `Microsoft.AspNetCore.App` runtime version is less that 2.1.4 you are vulnerable to this issue. You may not see any SDK versions if you have only installed the runtime.\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.402 on your development machines and build servers, and the .NET Core Runtime 2.1.4 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n#### Applications not using Microsoft.AspNetCore.App or Microsoft.AspNetCore.All\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/aspnet/Announcements/issues/316","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: ASP.NET Core Denial Of Service Vulnerability\" (#316)"},{"Id":"353145143","IsPullRequest":false,"CreatedAt":"2018-08-22T22:11:39","Actor":"pranavkm","Number":"315","RawContent":null,"Title":"3.0: Deprecating MvcPrecompilation tool ","State":"open","Body":"In ASP.NET Core 1.1, we introduced the `Microsoft.AspNetCore.Mvc.Razor.ViewCompilation` (MVC precompilation tool) package that added support for publish time compilation of Razor files (.cshtml files). Starting in ASP.NET Core 2.1, we introduced the [Razor SDK](https://docs.microsoft.com/en-us/aspnet/core/razor-pages/sdk?view=aspnetcore-2.1) that expanded on the features of the precompilation tool by adding support for build and publish time of Razor files. The SDK allows for verifying the correctness of cshtml files at build time while also improving on startup time for applications. The Razor SDK is on by default and no gesture is required to start using it.\r\n\r\nIn 3.0, we plan to remove the earlier MVC precompilation tool. Earlier versions of the package will continue receiving important bug and security fixes as part of our patch release. \r\n\r\nFor users of ASP.NET Core 2.1 or later, we recommend migrating to the Razor SDK if you haven't already. If you're currently using the precompilation tool and are unable to migrate to the Razor SDK due to bugs or missing features, please file an issue at https://github.com/aspnet/Razor/issues.\r\n\r\nPlease use https://github.com/aspnet/Mvc/issues/8313 for discussions.","Url":"https://github.com/aspnet/Announcements/issues/315","RelatedDescription":"Open issue \"3.0: Deprecating MvcPrecompilation tool \" (#315)"},{"Id":"349340221","IsPullRequest":false,"CreatedAt":"2018-08-10T00:56:39","Actor":"natemcmaster","Number":"314","RawContent":null,"Title":"3.0: deprecating Microsoft.AspNetCore.All","State":"open","Body":"Earlier this year, we announced the Microsoft.AspNetCore.App metapackage (see https://github.com/aspnet/Announcements/issues/287). That announcement said:\r\n\r\n> The existing Microsoft.AspNetCore.All meta-package will continue to be made available throughout the 2.x lifecycle, but **we recommend customers move to the new Microsoft.AspNetCore.App meta-package** and then add individual references to any of the removed packages if their app requires it.\r\n\r\nSee [our documentation for details](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/metapackage?view=aspnetcore-2.1#migrating-from-microsoftaspnetcoreall-to-microsoftaspnetcoreapp) on how to migrate from Microsoft.AspNetCore.All to .App.\r\n\r\nWe have begun working on ASP.NET Core 3.0, and as a part of that, we will stop producing the Microsoft.AspNetCore.All metapackage and the matching Microsoft.AspNetCore.All shared framework in the 3.0 nightly builds.\r\n\r\nThis package will still be available in ASP.NET Core 2.2 and will continue to receive servicing updates in ASP.NET Core 2.1.\r\n\r\nPlease use https://github.com/aspnet/Home/issues/3418 for questions or comments.\r\n","Url":"https://github.com/aspnet/Announcements/issues/314","RelatedDescription":"Open issue \"3.0: deprecating Microsoft.AspNetCore.All\" (#314)"},{"Id":"346800428","IsPullRequest":false,"CreatedAt":"2018-08-01T23:00:38","Actor":"pranavkm","Number":"313","RawContent":null,"Title":"CorsMiddleware must be explicitly configured to specify all allowed headers","State":"open","Body":"In versions of ASP.NET Core 2.1.0 and earlier, the CorsMiddleware always allowed certain headers in the `Access-Control-Request-Headers` to be sent regardless of the values configured in `CorsPolicy.Headers`. This list of headers includes:\r\n\r\n* `Accept`\r\n* `Accept-Language`\r\n* `Content-Language`\r\n* `Origin`\r\n\r\nFor instance, consider an application configured as follows:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\"));\r\n```\r\n\r\nIn 2.1 and earlier, the CORS middleware would respond successfully to a preflight request with the following request header:\r\n\r\n`Access-Control-Request-Headers: Cache-Control, Content-Language`\r\n\r\nFor 2.2.0, the CORS middleware would no longer treat this as a policy match. The server must explicitly configure policy to allow the `Content-Language` header:\r\n\r\n```C#\r\napp.UseCors(policy => policy.WithHeaders(\"Cache-Control\", \"Content-Language\"));\r\n```\r\n\r\nFor more information on CORS, please refer to [the documentation](https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1).","Url":"https://github.com/aspnet/Announcements/issues/313","RelatedDescription":"Open issue \"CorsMiddleware must be explicitly configured to specify all allowed headers\" (#313)"},{"Id":"345927303","IsPullRequest":false,"CreatedAt":"2018-07-30T20:44:14","Actor":"danroth27","Number":"312","RawContent":null,"Title":"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0","State":"open","Body":"As part of the 2.1.0 release, ASP.NET Core added support for build time compilation of cshtml files (Razor Views & Razor Pages). This feature is on by default and allows build time verification of the correctness of Razor files, and also faster startup performance. Additionally, MVC watches for changes to cshtml files and seamlessly updates build-time compiled views with runtime compiled views. This allows editing cshtml files and then refreshing the browser to see the changes.\r\n\r\nMVC uses the app's compilation context, details about the references and settings that were used to compile the source code (.cs) in the app, to compile views at runtime. In addition to the compilation context, MVC exposes options such as [RazorViewEngineOptions.CompilationCallback](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.compilationcallback?view=aspnetcore-2.1) and [AdditionalCompilationReferences](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.razor.razorviewengineoptions.additionalcompilationreferences?view=aspnetcore-2.1) that allow configuring compilation specifically for runtime. \r\n\r\nRuntime specific customizations are unavailable at build time and consequently the two outputs could be different.\r\n\r\nTo address this inconsistency, we plan on removing APIs in MVC that change or modify runtime compilation. For 2.2.0, we're marking these APIs obsolete with the intent to remove them in 3.0.0. This is the list of affected APIs:\r\n\r\n* Properties on `Microsoft.AspNetCore.Mvc.Razor.RazorViewEngineOptions`\r\n    * `AdditionalCompilationReferences`\r\n    * `CompilationCallback`\r\n\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeature`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider`\r\n* `Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorReferenceManager`\r\n\r\nNo changes are required to your application if it does not use these APIs.\r\n\r\nApps using these APIs to add assembly references to the compilation context for runtime compilation should instead use [`ApplicationPartManager.AddApplicationPart`](https://docs.microsoft.com/dotnet/api/microsoft.extensions.dependencyinjection.mvccoremvccorebuilderextensions.addapplicationpart) to add application parts for each assembly reference, or switch to a built-time compilation model (see [Create reusable UI using the Razor Class Library project](https://docs.microsoft.com/aspnet/core/razor-pages/ui-class)).\r\n\r\nOther scenarios blocked by the removal of these APIs and not covered by alternative MVC features should raised in the linked discussion issue.\r\n\r\nFor discussion, use https://github.com/aspnet/Mvc/issues/8177","Url":"https://github.com/aspnet/Announcements/issues/312","RelatedDescription":"Open issue \"Razor compilation APIs exposing Roslyn types being obsoleted in 2.2.0 and removed in 3.0.0\" (#312)"},{"Id":"339929062","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:26","Actor":"blowdart","Number":"311","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0 and 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in ASP.NET Core when a malformed request is terminated. An attacker who successfully exploited this vulnerability could cause a denial of service attack.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core handles such requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2708\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application is behind a forwarding proxy such is Internet Information Server, Azure Application Gateway or nginx you will not be affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Server.Kestrel.Core with a vulnerable version listed below and not hosted behind a forwarding proxy.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 2.0.4 <br /> 2.1.2\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0.1, 2.0.2, 2.0.3, 2.0.4, 2.0.5, 2.0.6, 2.0.7, 2.0.8 <br /> 2.1.0, 2.1.1  | 2.0.9 <br /> 2.1.2\r\nMicrosoft.AspNetCore.App | 2.1.0, 2.1.1 | 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Server.Kestrel.Core` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET 2.0 & 2.1 not targeting the meta-packages\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects.\r\n\r\nThe `project.assets.json`files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.8\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.All` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.9\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) .\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Server.Kestrel.Core/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Server.Kestrel.Core`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.34 />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.1 (July 10, 2018): Added .App meta-package details.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/311","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-July18: ASP.NET Core Denial Of Service Vulnerability\" (#311)"},{"Id":"339928979","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:13","Actor":"blowdart","Number":"310","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass in ASP.NET Core when the number of incorrect login attempts is not validated. An attacker who successfully exploited this vulnerability could try an infinite number of authentication attempts.\r\n\r\nThe update addresses the vulnerability by correcting how ASP.NET Core validates the number of incorrect login attempts.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Identity/issues/1870\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If your application does not use ASP.NET Core's implementation of multi-factor authentication you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core based application that uses Microsoft.AspNetCore.Identity with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Identity | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5 <br /> 1.1.0, 1.1.1, 1.1.2, 1.1.3, 1.1.4, 1.1.5 <br /> 2.0.0, 2.0.1, 2.0.2, 2.0.3 <br /> 2.1.0, 2.1.1 | 1.0.6 <br /> 1.1.6 <br /> 2.0.4 <br /> 2.1.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n### ASP.NET Core 2.1\r\n\r\nTo update ASP.NET Core 2.1 you should [download](https://www.microsoft.com/net/download) and install the .NET Core SDK 2.1.302 on your development machines and build servers, and the .NET Core Runtime 2.1.2 on your deployment servers. Your application will roll forward to these versions on an application restart.\r\n\r\n### ASP.NET Core 2.0\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage update its version number to 2.0.9 to update the `Microsoft.AspNetCore.Identity` package, recompile, and redeploy. On your deployment servers, you should [download](https://github.com/dotnet/core/blob/master/release-notes/download-archives/2.0.9-download.md) and install the .NET Core 2.0.9 using the Windows Server Hosting Bundle for Windows and the `dotnet-hosting-2.0.9` package for Linux servers.\r\n\r\n### ASP.NET Core 1.0, 1.1 or 2.0 not targeting the metapackage.\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Identity` version 2.0.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Identity` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"Microsoft.AspNetCore.Identity\" : \"1.0.5\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `Microsoft.AspNetCore.Identity`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `Microsoft.AspNetCore.Identity` version 1.0.5.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Identity` to 1.0.6.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Identity \": \"1.0.6\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Identity/2.0.0` is a reference to version 2.0.0 of `Microsoft.AspNetCore.Identity`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Identity` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Identity\" Version=\"2.0.4\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Identity/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Identity`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of  `Microsoft.AspNetCore.Identity` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.Identity` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Identity\": \"1.0.6\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Martin Knafve](https://www.linkedin.com/in/martin-knafve-99187a2/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8171](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8171)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n","Url":"https://github.com/aspnet/Announcements/issues/310","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8171: ASP.NET Core Security Feature Bypass Vulnerability\" (#310)"},{"Id":"336797507","IsPullRequest":false,"CreatedAt":"2018-06-28T22:10:48","Actor":"natemcmaster","Number":"309","RawContent":null,"Title":"For contributors: branch name changes in ASP.NET Core repos","State":"open","Body":"Over the coming weeks, we are planning on making the following changes to most projects in https://github.com/aspnet that are used to build ASP.NET Core.\r\n\r\n* We will create a branch named \"release/2.2\". Work on this branch will be part of [ASP.NET Core 2.2](https://github.com/aspnet/Announcements/issues/307)\r\n* We will rename the \"dev\" branch to \"master\". This is part of aligning aspnet repos with the branch naming used by other Microsoft teams.\r\n* We will change the default branch to \"master\" on GitHub.\r\n* Update the product branding on \"master\" to 3.0. Work on this branch will eventually become part of [ASP.NET Core 3.0](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/)\r\n\r\nTo help us prevent too much drift between release/2.2 and master, we will enable some automation to merge all changes from release/2.2 into master (3.0).\r\n\r\n## FAQ\r\nThis change may affect the way you help contribute to ASP.NET Core. As a result of this change and dicussion within our team, we've anticipated at least two questions you may have.\r\n\r\n#### Which branch should I use for my work?\r\n<img src=\"https://user-images.githubusercontent.com/2696087/42063035-b5fc9e42-7ae4-11e8-9916-a708fcc8e0e6.png\" width=\"500\" />\r\n\r\n#### I opened my PR to the wrong branch. What should I do?\r\n \r\nYou can edit a PR’s target branch.\r\n\r\n<img width=\"700\" alt=\"one\" src=\"https://user-images.githubusercontent.com/2696087/42063074-eb3060a8-7ae4-11e8-8ec2-d569f8e07f78.png\">\r\n<img width=\"700\" alt=\"two\" src=\"https://user-images.githubusercontent.com/2696087/42063083-f8a9564a-7ae4-11e8-91f0-f57e039085f8.png\">\r\n\r\n\r\n## Questions? Comments?\r\n\r\nThis issue is locked to reduce noise on this repo. Please use https://github.com/aspnet/Home/issues/3278 for questions and comments.\r\n\r\nThanks,\r\nNate","Url":"https://github.com/aspnet/Announcements/issues/309","RelatedDescription":"Open issue \"For contributors: branch name changes in ASP.NET Core repos\" (#309)"},{"Id":"335579239","IsPullRequest":false,"CreatedAt":"2018-06-25T21:44:22","Actor":"divega","Number":"308","RawContent":null,"Title":"EF Core 2.2 Roadmap","State":"open","Body":"## EF Core 2.2 is a small release\r\n\r\nUnlike EF Core 2.1, the 2.2 release will include a small number of new features. We are concentrating most of our efforts to add new functionality on the 3.0 release. Still, you can expect 2.2 to include lots of bugs fixes, community contributions and small improvements.\r\n\r\nYou can access the list of issues currently assigned to the 2.2 milestone using [this query](https://github.com/aspnet/EntityFrameworkCore/issues?q=is%3Aopen+is%3Aissue+milestone%3A2.2.0+sort%3Areactions-%2B1-desc) on our issue tracking system.  \r\n\r\n## Schedule\r\nThe schedule of EF Core 2.2 will align with the schedule of .NET Core and ASP.NET Core 2.2. See [the ASP.NET Core 2.2 Roadmap announcement](https://github.com/aspnet/Announcements/issues/307).\r\n\r\nOur current plan is to have three previews before we ship RTM near the end of 2018:\r\n\r\n- August – Preview 1\r\n- September - Preview 2\r\n- October - Preview 3\r\n- Before end-of-year – RTM\r\n\r\n As usual, this post reflects our current plan, but things may change as we make progress. \r\n\r\n## New features\r\n\r\n### Reverse engineering of database views into query types\r\n\r\nIn EF Core 2.1 we added query types, which allow mapping .NET objects to views and tables without keys. In 2.2, we plan to leverage this new capability to automatically map existing database views to query types. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/1679.\r\n\r\n###  Support for collections of owned entities\r\n\r\nIn EF Core 2.0 we added the concept of owned entity types, which allows modeling ownership relationship that are common between entities that are part of the same document in document-oriented databases or the same aggregate if you use Domain-Driven Design concepts in your model.\r\n\r\nUntil now, we only support reference navigation properties to owned entities. In EF Core 2.2, we plan to enhance this functionality to map collection navigation properties to owned entities. \r\n\r\nYou can track the progress of this at https://github.com/aspnet/EntityFrameworkCore/issues/8172.\r\n\r\n## Other work\r\n\r\nThere are some additional work items that are not strictly EF Core 2.2 features, but we still track as part of the 2.2 milestone because we are doing the work in the same timeframe:\r\n\r\n### Cosmos DB provider\r\n\r\nA lot of our efforts are going into productizing an EF Core provider for the SQL API in Cosmos DB.\r\nWe have already created a prototype, which we have shown in demos such as in this [this EF Core 2.1 talk](https://www.youtube.com/watch?v=k55kDH_ixrQ) we did at the Microsoft Build conference.\r\n\r\nDue to competing priorities, releasing a preview of this provider has taken more than what we originally planned, but we are working on it now, and the current plan is to release a stable version by the end of this calendar year.\r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/12086. \r\n\r\n### Preview of spatial support for SQL Server\r\n\r\nWe are also focusing on adding spatial support as an extension to the SQL Server provider for EF Core.\r\nNote that the PostgreSQL provider (Npgsql) already added support in EF Core 2.1. Beside implementing this functionality for SQL Server, we are working closely with the developers of Npgsql to try to achieve a consistent and hopefully improved experience across providers.\r\n\r\nNote that we aren't committing to having a final version of the spatial support for the end of the current calendar year. But we are actively working on this now, and as we make progress, we should be able to provide a more precise estimate.   \r\n\r\nYou can track our progress on this issue: https://github.com/aspnet/EntityFrameworkCore/issues/1100.\r\n\r\n### Improve test coverage for LINQ and reduce query regressions in future releases\r\n\r\nIn the last few releases, we have seen that when we commit improvements to our LINQ implementation, we often break queries that were previously working. The main challenge is that LINQ defines a huge space of possible queries to test, and it is very complex to measure what level of test coverage we have, even for a specific query operator. In the 2.2 timeframe, we will be investing on improving test coverage for this huge space. We also plan to experiment with new approaches to add appropriate coverage, and to reduce the likelihood of introducing regressions in future releases.\r\n\r\nYou can track our progress on this at https://github.com/aspnet/EntityFrameworkCore/issues/12046. \r\n\r\nFor discussion on this roadmap, please use https://github.com/aspnet/EntityFrameworkCore/issues/12465. ","Url":"https://github.com/aspnet/Announcements/issues/308","RelatedDescription":"Open issue \"EF Core 2.2 Roadmap\" (#308)"},{"Id":"335571873","IsPullRequest":false,"CreatedAt":"2018-06-25T21:19:36","Actor":"glennc","Number":"307","RawContent":null,"Title":"ASP.NET Core 2.2 Roadmap","State":"open","Body":"We have grouped the ASP.NET Core 2.2 release into a few themes:\r\n\r\n- APIs & Services\r\n- Server improvements\r\n- SignalR\r\n\r\n## Rough Schedule\r\nWe are currently planning to have 3 previews before RTM:\r\n - August – Preview 1\r\n - September - Preview 2\r\n - October - Preview 3\r\n - Before End-of-year – RTM\r\n\r\nAs with our previous roadmap posts this is what we intend right now, but it's subject to change as we continue development.\r\n\r\n## APIs and Services\r\n\r\nThe 'north star' for this version is to generate better metadata about your app and use that data to make your dev experience better and more productive. This is the main focus for 2.2.\r\n\r\n### API Controller conventions\r\nIn 2.1 we added controller specific conventions that make Web API development more convenient with the [ApiController attribute](https://docs.microsoft.com/en-us/aspnet/core/web-api/index?view=aspnetcore-2.1#annotate-class-with-apicontrollerattribute). In 2.2 we want to expand on this concept to provide metadata for API Explorer and provide a better end-to-end API documentation experience.\r\n\r\nWe want to make it possible for all MVC Core applications to have a good Swagger/OpenAPI definition by default. By following common patterns, your actions will produce rich metadata without falling into 'attribute soup' where you list every possible status code that every action in your app could return. We will include a default set of conventions that match what ASP.NET Core scaffolding generations. It will also be possible to write and share your own conventions to reflect your desired contracts. \r\n\r\nWe will include a set of analyzers that will help you find cases where code that doesn't match the API Explorer metadata, and a code-fix that provides options to explicitly specify the response type metadata, create a new convention with a different pattern, or just let you write code to satisfy the convention.\r\n\r\nAs a concrete example, you could write a convention that says \"every action method that starts with 'Create' will return an HTTP 201\". If you wrote the following code, then you would receive a warning.\r\n\r\n```csharp\r\n[HttpPost(\"/orders\")]\r\npublic ActionResult<Order> CreateOrder(OrderData orderData)\r\n{\r\n    ....\r\n    return Ok(new Order() {...});\r\n}\r\n```\r\n\r\nThis code doesn't match your Swagger/OpenAPI metadata (from the convention) - which says that this action returns a 201. Once you see this, you could `ctrl + .` to add the attributes for what we do know about this method, opting out of conventions, or you could change the code.\r\n\r\nThe analyzer will also be able to 'check your work' if you are being explicit about status codes and results using the existing attributes - it does not require you to use the conventions. Details for how this will all work can be discussed here: https://github.com/aspnet/Mvc/issues/7802\r\n\r\nLet's look at a more fleshed-out out example. The following code snippet is what is required to generate a reasonable Open API document for an action method that will get an item by ID or return a 404:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    [ProducesResponseType((int)HttpStatusCode.NotFound)]\r\n    [ProducesResponseType(typeof(CatalogItem),(int)HttpStatusCode.OK)]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\nIn 2.2 with the default conventions the following code should generate the same Open API document that the above code sample does, and this shipped analyzers will give you hints when you do something that doesn't match so you know to go and add attributes or change the conventions:\r\n\r\n```csharp\r\n[ApiController]\r\npublic class CatalogController : ControllerBase\r\n{\r\n    [HttpGet]\r\n    [Route(\"items/{id:int}\")]\r\n    public async Task<ActionResult<CatalogItem>> GetItemById(int id)\r\n    {\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n### OpenAPI generation\r\nWith the conventions described above it will be possible for code that uses the API Explorer to generate Open API documents to be better by default, since the code you write will either follow the conventions or have attributes allowing generators to create better documents.\r\n\r\n### Dispatcher\r\nIn 2.2 we will introduce a new routing system that will expand the set of scenarios where routing is useful – tentatively called Dispatcher. \r\n\r\nThe current routing system was designed to support MVC’s historical scenarios without much thought to how routing and the composable middleware pipeline will work together. The Dispatcher is designed to run the URL matching step very early in the pipeline so that middleware can see the Endpoint that was selected as well as metadata that is associated with that endpoint. Like existing routing, the dispatcher will branch and call the actual endpoint at the end of the pipeline.\r\n\r\nA concrete example of how this helps us is with CORS. Today there is both a CORS middleware AND a CORS feature of MVC (https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.1). Because routing information is deeply integrated with MVC we can't apply CORS policies that only apply to specific controllers until after we know what controller has been selected. However, if you also want CORS policies to apply to other parts of your pipeline then you need the middleware. This has been a source of confusion for many and we can simplify it if all of the middleware pipeline can have as much information about routing as MVC does today.\r\n\r\nWe’re also using this opportunity to make improvements to the performance of routing and dispatching for MVC and other scenarios.\r\n\r\n### HTTP API REPL tooling\r\nToday there are no tools built into Visual Studio or the dotnet CLI to help you execute HTTP verbs against your API. We have a great language, debugger, and framework but they are somewhat limited when it's difficult to send a POST to my app to see what happens. In 2.2 we want to build a CLI experience for exploring HTTP APIs to imcrease your API inner loop productivity. The CLI builds on all the features we've talked about above as some of its advanced features, like listing all routes in your app, are enabled by consuming the metadata we have about your app via Open API documents. That means the CLI should be useful for executing any HTTP verb, but really shines when you feed it more data like Open API docs. We intend to start by shipping this as a standalone global tool while we explore its feature set and potential.\r\n\r\nYou can see a demo and description of this in Scott Hunter and Scott Hanselman's BUILD talk here: https://youtu.be/KAIJ3ezQb3c?t=18m\r\n\r\n### API client generation (C# & TypeScript)\r\nOnce you have an API with rich metadata and done exploring and testing it, then you need to go and write some client code to call and make use of your API. We are going to build an experience for generating this code based on the same data and documentation described above. We envision a few pieces for this story, one part is a dotnet tool that can generate code from an Open API document, the other is MSBuild SDK work to allow a `ServiceReference` to another project in a solution. That reference will cause build time client code generation to happen via the tool that can generate code. We expect this to work in a similar way to the EF Core tooling experience, where your application is built and most of your startup code executed but instead of running it we use the data we have about your code to generate a client.\r\n\r\n### Authorization Server\r\nOne of the largest gaps we’ve had has been around authorization for applications beyond a simple forms based login. We plan to fill that gap with a simple to use OpenID Connect based authorization server, which will allow your ASP.NET application to act as an authentication point for your projects, be they web site to API, SPA to API, native application to an API or, for distributed applications API to API. As we are concentrating on first party applications we can make the code you need to plumb in trivial, getting as close to zero configuration as you can,  we’re not aiming to replace the excellent third-party solutions out there which enable richer scenarios like third-party applications or which provide a flexibility in configuration and authentication flow.\r\n\r\n## Server Improvements\r\n\r\n### Health Checks\r\nThis feature is a way to trivially setup an endpoint in your application that can be used to check the health of your application, potentially taking into account things like memory consumption or database availability as well as just \"can I accept a HTTP request\".\r\n\r\n### HTTP/2 in Kestrel & HttpClient\r\nThe title says it all in this case. HTTP/2 support for all. We started this work some time ago, and have had the protocol mostly implemented for a while but not compiled into the product since it wasn't ready. This version we will finish that work and implement the missing features.\r\n\r\n### In-proc ANCM\r\nRunning ASP.NET Core applications in-process in IIS, giving a significant performance boost.\r\n\r\n## SignalR\r\n\r\n### Add Java & C++ clients\r\nAllow customers using Java or C++ to connect to SignalR servers, and the [Azure SignalR Service](https://azure.microsoft.com/en-us/blog/azure-signalr-service-a-fully-managed-service-to-add-real-time-functionality/).\r\n\r\n## Other\r\nAs with all releases there is a large tail of bug fixes, performance improvements, small features, and community PRs that we will also work on. You can see the full list of work by browsing the 2.2 milestones on the various [repositories](https://github.com/aspnet/).\r\n\r\nFor discussion on the roadmap in general, use https://github.com/aspnet/Home/issues/3265","Url":"https://github.com/aspnet/Announcements/issues/307","RelatedDescription":"Open issue \"ASP.NET Core 2.2 Roadmap\" (#307)"},{"Id":"333804954","IsPullRequest":false,"CreatedAt":"2018-06-19T19:21:13","Actor":"anurse","Number":"306","RawContent":null,"Title":"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR Client from UWP applications where the minimum version is set to \"Windows 10, version 1803\". However, these fixes also require some additional dependencies.\r\n\r\n**NOTE**: UWP Applcations with a minimum version set **below** \"Windows 10, version 1803\" (for example, if the minimum version is set to \"Fall Creators Update\") are **not** affected by this issue and **do not require** these steps.\r\n\r\nIn order to use the SignalR Client in UWP applications where the minimum version is set to \"Windows 10, version 1803\" you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Add the following **additional** package references to your project. These are referenced transitively by the SignalR Client, but newer versions are required to resolve this issue. We are planning to improve this in a future patch.\r\n    * `System.Threading.Tasks.Extensions` version `4.5.1`\r\n    * `System.Runtime.CompilerServices.Unsafe` version `4.5.1`\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/2406","Url":"https://github.com/aspnet/Announcements/issues/306","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in UWP apps with Minimum Version of 1803\" (#306)"},{"Id":"333802959","IsPullRequest":false,"CreatedAt":"2018-06-19T19:15:05","Actor":"anurse","Number":"305","RawContent":null,"Title":"SignalR Client 2.1.1 in Xamarin","State":"open","Body":"ASP.NET Core 2.1.1 contains fixes to resolve blocking issues when using the SignalR **Client** from Xamarin. However, these fixes also require an updated build of Xamarin.iOS and Xamarin.Android, as well as some additional dependencies.\r\n\r\nIn order to use the SignalR Client in Xamarin applications you will need to:\r\n\r\n1. Upgrade `Microsoft.AspNetCore.SignalR.Client` to `1.0.1`. This build is now available on NuGet.\r\n1. Upgrade Xamarin to the appropriate version:\r\n    * Xamarin.Android `8.4.0.1`\r\n    * Xamarin.iOS `11.14.0.4`\r\n    * These will be included in:\r\n      * Visual Studio 15.8 **Preview 3** (not released at the time of publishing, but coming soon)\r\n      * Visual Studio for Mac 7.6 **Preview 3** (not released at the time of publishing, but coming soon)\r\n\r\nFor discussion, use https://github.com/aspnet/SignalR/issues/1886","Url":"https://github.com/aspnet/Announcements/issues/305","RelatedDescription":"Open issue \"SignalR Client 2.1.1 in Xamarin\" (#305)"},{"Id":"329851587","IsPullRequest":false,"CreatedAt":"2018-06-06T13:30:30","Actor":"ToLearnMoe","Number":"304","RawContent":null,"Title":"怎么找工作啊","State":"closed","Body":"我学spirng的同学都上班两个月了我实习都没找到，学了给asp告诉我现在不能用了要什么点apsnet。你们行不行啊\r\n\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n!!! DO NOT POST ISSUES IN THIS REPO !!!\r\n\r\nThis repo is for team announcements only. See https://github.com/aspnet/announcements#announcements.\r\n\r\nTo file a bug or start a discussion, please find the appropriate repo in https://github.com/aspnet and create a new issue. \r\nFor general issue discussions please go to https://github.com/aspnet/Home/issues and create a new issue.\r\n","Url":"https://github.com/aspnet/Announcements/issues/304","RelatedDescription":"Closed issue \"怎么找工作啊\" (#304)"},{"Id":"329603099","IsPullRequest":false,"CreatedAt":"2018-06-05T20:11:55","Actor":"AngelosP","Number":"303","RawContent":null,"Title":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/","State":"closed","Body":"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\r\n\r\nFor discussion, use https://github.com/aspnet/Tooling/issues/1075","Url":"https://github.com/aspnet/Announcements/issues/303","RelatedDescription":"Closed issue \"Microsoft.VisualStudio.Web.CodeGeneration.Tools has been deprecated in favor of https://www.nuget.org/packages/dotnet-aspnet-codegenerator/\" (#303)"},{"Id":"327435771","IsPullRequest":false,"CreatedAt":"2018-05-29T18:26:40","Actor":"shirhatti","Number":"302","RawContent":null,"Title":"IIS in-process hosting moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving IIS in-process hosting out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will ship IIS in-process hosting as part of the ASP.NET Core 2.2 release.\r\n\r\n### Why?\r\n\r\nIIS in-process hosting  is a brand new server implementation and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/IISIntegration/issues/878","Url":"https://github.com/aspnet/Announcements/issues/302","RelatedDescription":"Open issue \"IIS in-process hosting moved out of ASP.NET Core 2.1\" (#302)"},{"Id":"322891671","IsPullRequest":false,"CreatedAt":"2018-05-14T16:32:50","Actor":"jkotalik","Number":"301","RawContent":null,"Title":"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available","State":"open","Body":"We have changed the behavior of the HttpsRedirectionMiddleware between 2.1.0-preview2 to 2.1.0-rc1. Instead of always redirecting a request to HTTPS, we will now not redirect to HTTPS if no port is available. The HTTPS port can be specified by setting ```HttpsRedirectionOptions.HttpsPort```, setting the ASPNETCORE_HTTPS_PORT environment variable, or by setting an HTTPS url in launchsettings.json.\r\n\r\nIf you want to continue keeping the original behavior the HttpsRedirectionMiddleware which redirects to port 443, you can set the ```HttpsRedirectionOptions.HttpsPort = 443```.\r\n \r\n---\r\n\r\n*Please use aspnet/BasicMiddleware#329 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/301","RelatedDescription":"Open issue \"HttpsRedirectionMiddleware will not redirect to HTTPS if no port is available\" (#301)"},{"Id":"321270218","IsPullRequest":false,"CreatedAt":"2018-05-08T17:07:04","Actor":"blowdart","Number":"300","RawContent":null,"Title":"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core 2.0.\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft made an internal discovery of a security vulnerability in version 2.x of ASP.NET Core where\r\na specially crafted request can cause excess resource consumption in Kestrel.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/KestrelHttpServer/issues/2553\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigations for this issue.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Abstractions | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv | 2.0.0, 2.0.1, 2.0.2<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.3<br />2.1.0-rc1-final\r\nMicrosoft.AspNetCore.All | 2.0.0, 2.0,3, 2.0.4, 2.0.5, 2.0.6, 2.0.7<br />2.1.0-preview1, 2.1.0-preview2 | 2.0.8<br />2.1.0-rc1-final\r\n\r\n## Advisory FAQ\r\n\r\n### How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected packages](#affected-software) can be exposed to the vulnerability.\r\n\r\n### How do I fix the issue?\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.8 if you have targetted 2.0.x *OR*\r\n* Update its version number to 2.1.0-rc1-final if you have targetted previews of 2.1\r\n\r\nUpdating the metapackage will update the [affected packages](#affected-software)\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to a [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `Microsoft.AspNetCore.Server.Kestrel.Core` version 2.0.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `Microsoft.AspNetCore.Server.Kestrel.Core` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3 />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the [vulnerable packages](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `Microsoft.AspNetCore.Server.Kestrel.Core` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Core\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_","Url":"https://github.com/aspnet/Announcements/issues/300","RelatedDescription":"Open issue \"Microsoft Security Advisory ASPNETCore-Mar18: ASP.NET Core Denial Of Service Vulnerability\" (#300)"},{"Id":"320441265","IsPullRequest":false,"CreatedAt":"2018-05-04T21:52:58","Actor":"danroth27","Number":"299","RawContent":null,"Title":"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1","State":"open","Body":"We are moving ASP.NET Core WebHooks out of the ASP.NET Core 2.1 to give more time to validate the design and implementation. We will continue to ship previews ASP.NET Core WebHooks packages, but they not ship as stable packages as part of the ASP.NET Core 2.1 release.\r\n\r\n### Why?\r\n\r\n[ASP.NET Core WebHooks](https://github.com/aspnet/webhooks) is only a partial port of [ASP.NET WebHooks](https://github.com/aspnet/aspnetwebhooks) and hasn't received sufficient attention during the ASP.NET Core 2.1 release for us to feel comfortable shipping it at this time. \r\n\r\nFor discussion, use https://github.com/aspnet/WebHooks/issues/296","Url":"https://github.com/aspnet/Announcements/issues/299","RelatedDescription":"Open issue \"ASP.NET Core WebHooks moved out of ASP.NET Core 2.1\" (#299)"},{"Id":"309862672","IsPullRequest":false,"CreatedAt":"2018-03-29T18:44:48","Actor":"glennc","Number":"298","RawContent":null,"Title":"Migrating from aspnetcore docker repos to dotnet","State":"open","Body":"Starting with .NET Core 2.1-preview2, we intend to migrate from using the microsoft/aspnetcore-build and microsoft/aspnetcore Docker repos to the microsoft/dotnet Docker repo.  We will continue to ship patches and security fixes for the existing aspnetcore images but any new images for 2.1 and higher will be pushed to microsoft/dotnet.\r\n\r\nDockerfiles using `microsoft/aspnetcore:<version>` should change to `microsoft/dotnet:<version>-aspnetcore-runtime`.\r\n\r\nDockerfiles using `microsoft/aspnetcore-build` that do not require Node should just change to `microsoft/dotnet:<version>-sdk`.\r\n\r\nDockerfiles using Node from the `microsoft/aspnetcore-build` image will either need to install Node into their own image or use mult-stage builds as described in the Dockerfile examples at the end of this announcement.\r\n\r\nThe `ASPNETCORE_URLS` env var that allows ASP.NET Core apps to accept traffic from outside the container will be set in all the `dotnet` images, which was a common early stumbling block for people getting started with ASP.NET Core and Docker. PR is [here](https://github.com/dotnet/dotnet-docker/pull/450)\r\n\r\n### Why the merge?\r\n\r\nFor some time we have been seeing people search for and find the `microsoft/dotnet` images and never realise that there are aspnetcore ones. This could be problematic in the past as the dotnet images were not optimised for ASP.NET Core, making things a little harder or slower. But with changes in the way ASP.NET Core works in 2.1 it was going to be much more impactful, in that ASP.NET Core applications were not likely to run on the base dotnet image. Given that we also thought it made more sense to have a single repository for all images, as ASP.NET is just part of .NET, we are taking this opportunity to remove the potential source of confusion and wasted time for our customers.\r\n\r\n### Why no Node?\r\nThere are two main reasons for this:\r\n\r\n  1. Multi-stage build now makes it easier to pull in the Node image for purely build concerns.\r\n  2. The ASP.NET Core templates no longer have a hard dependency on Node.\r\n\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n\r\n### Dockerfile examples\r\n\r\nIf you need Node then you will need to add it in your own Dockerfile, like this:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n#setup node\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\n# copy everything else and build\r\nCOPY . ./\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n#setup node, this is only needed if you use Node both at runtime and build time. Some people may only need the build part.\r\nENV NODE_VERSION 8.9.4\r\nENV NODE_DOWNLOAD_SHA 21fb4690e349f82d708ae766def01d7fec1b085ce1f5ab30d9bda8ee126ca8fc\r\n\r\nRUN curl -SL \"https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz\" --output nodejs.tar.gz \\\r\n    && echo \"$NODE_DOWNLOAD_SHA nodejs.tar.gz\" | sha256sum -c - \\\r\n    && tar -xzf \"nodejs.tar.gz\" -C /usr/local --strip-components=1 \\\r\n    && rm nodejs.tar.gz \\\r\n    && ln -s /usr/local/bin/node /usr/local/bin/nodejs\r\n\r\nCOPY --from=build-env /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nIf you only need Node at build then you may also be able to take advantage of multi-stage build like the following:\r\n\r\n```Dockerfile\r\nFROM microsoft/dotnet:2.1-sdk as build-env\r\nWORKDIR /app\r\n\r\n# copy csproj and restore as distinct layers\r\nCOPY *.csproj ./\r\nRUN dotnet restore\r\n\r\nFROM node as clientBuild\r\n#Do npm restore and other Node stuff.\r\n\r\n#Merge the contents of your .NET build env and your clientBuild and publish.\r\nFROM build-env as publish\r\n# copy everything else and build\r\nCOPY --from=clientBuild . .\r\nRUN dotnet publish -c Release -o out\r\n\r\n# build runtime image\r\nFROM microsoft/dotnet:2.1-aspnetcore-runtime\r\nWORKDIR /app\r\n\r\nCOPY --from=publish /app/out .\r\nENTRYPOINT [\"dotnet\", \"aspnetapp.dll\"]\r\n```\r\n\r\nFor discussion and feedback on this decision you can go here: [https://github.com/aspnet/aspnet-docker/issues/403](https://github.com/aspnet/aspnet-docker/issues/403)\r\n","Url":"https://github.com/aspnet/Announcements/issues/298","RelatedDescription":"Open issue \"Migrating from aspnetcore docker repos to dotnet\" (#298)"},{"Id":"305936138","IsPullRequest":false,"CreatedAt":"2018-03-16T14:09:54","Actor":"mnmr","Number":"297","RawContent":null,"Title":"Model binding accesses read-only properties in post-back","State":"closed","Body":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355.","Url":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297)"},{"Id":"305310538","IsPullRequest":false,"CreatedAt":"2018-03-14T20:08:36","Actor":"halter73","Number":"296","RawContent":null,"Title":"Managed sockets will replace libuv as Kestrel's default transport","State":"open","Body":"Starting in ASP.NET Core 2.1.0, managed sockets will be replacing libuv as Kestrel's default transport.\r\n\r\nThis change should only break applications that bind to non-TCP endpoints or explicitly call `IWebHostBuilder.UseLibuv()` and reference the libuv transport transitively through the Microsoft.AspNetCore.App and/or Microsoft.AspNetCore.Server.Kestrel NuGet packages.\r\n\r\nTo fix the break simply add a reference to Microsoft.AspNetCore.All and/or Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.\r\n\r\nWhile switching to the managed socket transport should be seamless<sup>1</sup>, if you want to continue using the libuv transport in 2.1.0 you will need to explicitly call `UseLibuv()` and reference the libuv transport either directly or through the \"All\" metapackage.\r\n\r\n<sup>1</sup> Unless you are trying to bind to a Unix domain socket or use systemd socket activation. As of 2.1, only the libuv transport supports binding to these kinds of endpoints.\r\n\r\n---\r\n\r\n*Please use aspnet/KestrelHttpServer#2360 for further discussion.*","Url":"https://github.com/aspnet/Announcements/issues/296","RelatedDescription":"Open issue \"Managed sockets will replace libuv as Kestrel's default transport\" (#296)"},{"Id":"304854672","IsPullRequest":false,"CreatedAt":"2018-03-13T17:07:23","Actor":"blowdart","Number":"295","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\r\n\r\n## Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in ASP.NET Core versions 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where an elevation of privilege vulnerability exists when a ASP.NET Core web application fails to validate web requests correctly.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/Home/issues/2954\r\n\r\n### Mitigation factors\r\n\r\nSites are not vulnerable to this elevation of privilege when:\r\n\r\n* The site is hosted behind a proxy, such as Internet Information Services (IIS), NGINX, or Apache, where:\r\n\r\n  * The proxy validates the host header, and\r\n  * The proxy is configured to listen on fully qualified domain names or\r\n  * The proxy is configured with a wildcard subdomain where the root domain is fully controlled by the site owner.\r\n\r\nFor example, if IIS is configured to respond to requests for `contoso.com` or `*.contoso.com` hosts, the application is protected.\r\n\r\nIf IIS is configured to respond to any request from any host, the application is vulnerable.\r\n\r\nKestrel does not have the capability to validate host headers and is vulnerable if not placed behind a proxy that performs the host header validation.\r\n\r\nApps hosted in Azure Web Apps are not susceptible to this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny ASP.NET Core hosted application which is directly exposed to the internet, or hosted behind a proxy which does not validate or restict host headers to known good values.\r\n\r\nThe vulnerability also affects any ASP.NET Core 2.0 project if it uses the following package versions, which must also be [updated](#app-update), in addition to addressing your proxy configuration :\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nMicrosoft.AspNetCore.HttpOverrides | 2.0.0, 2.0.1 |  2.0.2 and later\r\nMicrosoft.AspNetCore.Server.Kestrel.Core | 2.0.0, 2.0.1 |  2.0.2 and later\r\n\r\n*No patches are available for ASP.NET Core 1.0.x or ASP.NET Core 1.1.x. Microsoft requires that you place your 1.x ASP.NET Core application behind a proxy.\r\nYou must address the configuration of your proxy to protect your application. If you're not running ASP.NET Core 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0.\r\nand add the host validating middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/.*\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected?\r\n\r\nReview the server and proxy configuration [instructions](#configuration) below to see if your system is configured correctly, and adjust the configuration if necessary.\r\n\r\n### How do I fix the issue?\r\n\r\nYou must address the [configuration](#configuration) of your server or proxy to protect your application to limit requests to known hosts.\r\n\r\nIf you're not running Kestrel 1.x behind a proxy, you must either place a proxy in front of your application or upgrade to ASP.NET Core 2.0 and follow the 2.0 instructions below.\r\n\r\nASP.NET Core 2.0.x applications must [update your code](#app-update) to fully protect your application.\r\n\r\n#### <a name=\"configuration\"></a> Server and Proxy configuration\r\n\r\nYou must examine your externally facing server or proxy configuration and ensure it requires host headers with fully qualified domain names, or known sub-domains if you are using sub-domain wild cards.\r\n\r\n##### ASP.NET Core applications behind [IIS](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/)\r\n\r\nTo configure IIS to only respond to know hosts:\r\n\r\n* Open IIS Manager.\r\n* Expand the **Sites** node for the machine you want to configure.\r\n* Select the site by clicking on the site.\r\n* In the **Actions** list on the right-hand side of IIS Manager, click **Bindings**.\r\n* Edit any bindings that do not have a host name to specify one. Do not use a `*` wildcard unless it's against a domain under your control. For example, `*.contoso.com` is safe, `*.com` is not.\r\n\r\n##### ASP.NET Core applications running publicly on [Kestrel](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel)\r\n\r\nKestrel does not have the capability to validate host headers. It must either be placed behind a proxy that performs the host header validation or the validation must be performed within the application by adding  host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/blob/release/2.0/samples/HostFilteringSample/. You must also [update your dependencies](#app-update) to fully protect your application.\r\n\r\n##### ASP.NET Core applications running on [HTTP.SYS](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/httpsys)\r\n\r\nTo configure URL prefixes and ports, you can use the `UseUrls` extension method, the `urls` command-line argument, the ASPNETCORE_URLS environment variable, or the `UrlPrefixes` property on [HttpSysOptions](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.server.httpsys.httpsysoptions). The following code example uses `UrlPrefixes`.\r\n\r\n```c#\r\npublic static IWebHost BuildWebHost(string[] args) =>\r\n    WebHost.CreateDefaultBuilder(args)\r\n        .UseStartup<Startup>()\r\n        .UseHttpSys(options =>\r\n        {\r\n            // The following options are set to default values.\r\n            options.Authentication.Schemes = AuthenticationSchemes.None;\r\n            options.Authentication.AllowAnonymous = true;\r\n            options.MaxConnections = null;\r\n            options.MaxRequestBodySize = 30000000;\r\n            options.UrlPrefixes.Add(\"http://localhost:5000\");\r\n        })\r\n        .Build();\r\n```\r\n\r\n##### ASP.NET Core applications behind [NGINX](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx)\r\n\r\nTo configure NGINX as a reverse proxy to forward requests to your ASP.NET Core app, replace the contents */etc/nginx/sites-available/default* with the following:\r\n\r\n```NGINX\r\nserver {\r\n    listen        80;\r\n    server_name   example.com *.example.com;\r\n    location / {\r\n        proxy_pass         http://localhost:5000;\r\n        proxy_http_version 1.1;\r\n        proxy_set_header   Upgrade $http_upgrade;\r\n        proxy_set_header   Connection keep-alive;\r\n        proxy_set_header   Host $host;\r\n        proxy_cache_bypass $http_upgrade;\r\n    }\r\n}\r\n```\r\n\r\nNote that with NGINX, when there is no match for `server_name`, NGINX will pick the default server. If no default server has been defined, the first server in the conf file is the default server. Best practice is to add a specific default server which returns a status code of 444 in the conf file. An example default server configuration would be as follows:\r\n\r\n```NGINX\r\nserver {\r\n    listen   80 default_server;\r\n    # listen [::]:80 default_server deferred;\r\n    return   444;\r\n}\r\n```\r\n\r\nWith the preceding configuration file and default server, NGINX accepts public traffic on port 80 with host header `example.com` or `*.example.com`. Requests not matching these hosts won't get forwarded to Kestrel. NGINX forwards the matching requests to Kestrel at `http://localhost:5000`. See [How nginx processes a request](https://nginx.org/docs/http/request_processing.html) for more information.\r\n\r\nOnce the NGINX configuration is established, run `sudo nginx -t` to verify the syntax of the configuration files. If the configuration file test is successful, force NGINX to pick up the changes by running `sudo nginx -s reload`.\r\n\r\n##### ASP.NET Core applications behind [Apache](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-apache)\r\n\r\nConfiguration files for Apache are located within the `/etc/httpd/conf.d/` directory. Any file with the `*.conf*` extension:\r\n\r\n* Is processed in alphabetical order, and\r\n* The module configuration files in `/etc/httpd/conf.modules.d/` are processed. The module configuration files in `/etc/httpd/conf.modules.d/` contain any configuration files necessary to load modules.\r\n\r\n\r\n```\r\n<VirtualHost *:80>\r\n    ProxyPreserveHost On\r\n    ProxyPass / http://127.0.0.1:5000/\r\n    ProxyPassReverse / http://127.0.0.1:5000/\r\n    ServerName www.example.com\r\n    ServerAlias *.example.com\r\n</VirtualHost>\r\n```\r\n\r\nThe `VirtualHost` block can appear multiple times, in one or more files on a server. In the preceding configuration file, Apache accepts public traffic on port 80. The domain `www.example.com` is being served, and the `*.example.com` alias resolves to the same website. See [Name-based virtual host support](https://httpd.apache.org/docs/current/vhosts/name-based.html) for more information. Requests are proxied at the root to port 5000 of the server at 127.0.0.1. For bi-directional communication, `ProxyPass` and `ProxyPassReverse` are required.\r\n\r\nSave the file and test the configuration. If everything passes, the response is `Syntax [OK]`.\r\n\r\n```bash\r\nsudo service httpd configtest\r\n```\r\n\r\nRestart Apache:\r\n\r\n```bash\r\nsudo systemctl restart httpd\r\nsudo systemctl enable httpd\r\n```\r\n\r\n\r\n#### <a name=\"app-update\"></a> ASP.NET Core 2.0 application code updates\r\n\r\n---\r\n\r\nIf you're targeting .NET Core 2.x and the `Microsoft.AspNetCore.All` \"metapackage\":\r\n\r\n* Update its version number to 2.0.6 or later.\r\n* Updating will pull in the fixed packages listed above.\r\n\r\nIf you're targeting .NET Framework, update the packages listed above to their safe version or later.\r\n\r\nIf your application is using Kestrel without a proxy or the HttpOverrides functionality (UseForwardedHeaders with ForwardedHost) you must also add the host filtering middleware provided at https://github.com/aspnet/BasicMiddleware/tree/release/2.0/samples/HostFilteringSample/.\r\n\r\n---\r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. You must follow the update instructions below to address both types of dependency.\r\n\r\n### Direct dependencies\r\n\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on `Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file.\r\n\r\n### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Core\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the vulnerable metapackage, as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a single direct dependency on `Microsoft.AspNetCore.All` version 2.0.5.\r\n\r\nTo update the version to the secure package, change the version number to a secure package version. In this example, update `Microsoft.AspNetCore.All` to 2.0.6 or later. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.6\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\n##### Fixing direct dependencies – Projects targeting .NET Framework\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has a reference to a single package, as seen by the `PackageReference` element. The name of the package is in the `Include` attribute. The package version number is in the `Version` attribute. The example shows a direct dependency on one of the vulnerable packages from the table above, `Microsoft.AspNetCore.HttpOverrides` version 2.0.1.\r\n\r\nTo update to the secure package, change the version number to the updated package version. In the example, this would be updating `Microsoft.AspNetCore.HttpOverrides` to 2.0.2 and later. Save the *csproj* file. The updated and secure *csproj* look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverrides\" Version=\"2.0.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and save your updated *csproj* file, Visual Studio will restore the new package version. You can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependency version.\r\n\r\n##### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to a compatible version. \r\n\r\nFor example if your project refers directly to `Microsoft.AspNetCore.Mvc.Cors` with a version number of `2.0.0`, when you update your `Microsoft.AspNetCore.Mvc` package to 2.0.1, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc 2.0.1 expected Microsoft.AspNetCore.Mvc.Cors >= 2.0.1 but received 2.0.0`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your *project.json* in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n###### Reviewing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review the *project.assets.json* file.\r\n\r\n###### Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names above and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example, the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n###### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file. Visual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for each of the vulnerable packages, using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the vulnerable versions table above.\r\n\r\nFor example, a search result that shows `Microsoft.AspNetCore.Mvc.Cors/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Cors`.   If your *project.assets.json* file includes references to any of the vulnerable packages shown above, then you need to fix the transitive dependencies.\r\n\r\n###### Overriding transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages this means:\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned, you must add a direct dependency to the updated version by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referring the fixed version.\r\nFor example, if your search showed a transitive reference to the vulnerable `Microsoft.AspNetCore.HttpOverrides` version 2.0.0 you would add a reference to the fixed version, that is, 2.0.2 or later.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.HttpOverride\" Version=\"2.0.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n###### Rebuilding your application\r\n\r\nRebuild your application. Test and deploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\n[Mikhail Shcherbakov](https://www.linkedin.com/in/mikhailshcherbakov/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0787)\r\n\r\n### Revisions\r\n\r\nV1.1 (Mar 15, 2018): NGINX configuration instructions updated, thanks to @buglloc\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n_Last Updated 2018-03-15_","Url":"https://github.com/aspnet/Announcements/issues/295","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0787: ASP.NET Core Elevation Of Privilege Vulnerability\" (#295)"},{"Id":"304853568","IsPullRequest":false,"CreatedAt":"2018-03-13T17:04:23","Actor":"blowdart","Number":"294","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_","Url":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294)"},{"Id":"303604146","IsPullRequest":false,"CreatedAt":"2018-03-08T19:36:01","Actor":"natemcmaster","Number":"293","RawContent":null,"Title":"Moving official daily builds to the dotnet-core MyGet feed ","State":"open","Body":"As part of ongoing infrastructural changes, we will be moving official daily of ASP.NET Core to the dotnet-core myget feed. This transition will happen over the next few weeks.\r\n\r\n**Old feed:** https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\r\n**New feed:** https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n\r\nWe recommend updating to use the dotnet-core feed to continue getting the latest daily builds of ASP.NET Core.\r\n\r\nWe are making this change to make it easier for you to pull daily builds that align with the .NET Core CLI and .NET Core runtime. Some of our existing MyGet feeds will continue to exist, but will not be used for official daily builds. Instead, those feeds will only be used for builds of experimental branches of aspnetcore.\r\n\r\nOther useful links:\r\nGallery: https://dotnet.myget.org/gallery/dotnet-core\r\nNuGet v2 source: https://dotnet.myget.org/F/dotnet-core/api/v2\r\nNPM feed: https://dotnet.myget.org/F/dotnet-core/npm/\r\n\r\nPlease use https://github.com/aspnet/Home/issues/2937 for discussion.","Url":"https://github.com/aspnet/Announcements/issues/293","RelatedDescription":"Open issue \"Moving official daily builds to the dotnet-core MyGet feed \" (#293)"},{"Id":"302846756","IsPullRequest":false,"CreatedAt":"2018-03-06T20:07:15","Actor":"natemcmaster","Number":"292","RawContent":null,"Title":"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image","State":"open","Body":"We will be deprecating the following Docker images\r\n \r\n- microsoft/aspnetcore-build:1.0-1.1\r\n- microsoft/aspnetcore-build:1.0-2.0\r\n\r\nWe will not delete these images. These images will continue to receive patch update whenever a 1.0.x, 1.1.x, or 2.0.x update ships, however, we will not produce a new version which contains the 2.1 runtime.\r\n\r\n### Why?\r\n \r\nThese images existed to support CI/CD pipelines that run apps on multiple versions for .NET Core in the same container. With each release, these images have grown in size. The 1.0-2.0 image is already about 1GB, and would continue to grow with runtime updates. \r\n \r\nFortunately, recent improvements to .NET Core (such as minor version roll-forward) and Docker (multi-stage builds) have reduced the need to use an image with multiple versions of .NET Core. We have seen usage of these multi-version images declining over time, and today, they are a small percentage of our Docker image usage.\r\n\r\nRather than maintaining a single, large image with all possible .NET Core runtimes, we encourage users to use multi-stage builds. Docker's multi-stage feature allows you to compose a single Dockerfile, but still use multiple .NET Core runtimes. Also, starting in 2.1, .NET Core supports rolling forward the runtime version within the major version, which will further reduce the need to have multiple 2.x runtimes side-by-side.\r\n \r\nFor discussion, use https://github.com/aspnet/aspnet-docker/issues/349","Url":"https://github.com/aspnet/Announcements/issues/292","RelatedDescription":"Open issue \"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image\" (#292)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1049792996743372800","CreatedAt":"2018-10-09T22:45:29+00:00","UserScreenname":"aspnet","Text":"#ASPNET Community Standup starting now!\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":4,"RawContent":null},{"Id":"1049789526162300928","CreatedAt":"2018-10-09T22:31:41+00:00","UserScreenname":"aspnet","Text":"Starting soon! #Blazor update with @aVerySpicyBoi @stevensanderson  @danroth27 @DamianEdwards @jongalloway at 3:45… https://t.co/qvemHwct7z","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":7,"RawContent":null},{"Id":"1049387182836789248","CreatedAt":"2018-10-08T19:52:55+00:00","UserScreenname":"aspnet","Text":"Don't miss this week's #ASPNET Community Standup this Tuesday at 3:45 Pacific / 22:45 UTC\n\nThis week: #Blazor updat… https://t.co/ldqMQw90HU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":52,"FavoriteCount":34,"RawContent":null},{"Id":"1047175421974831104","CreatedAt":"2018-10-02T17:24:10+00:00","UserScreenname":"aspnet","Text":"Blazor 0.6.0 experimental release now available\n\nhttps://t.co/PLXAt1u6Ha","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":261,"FavoriteCount":166,"RawContent":null},{"Id":"1044720517997973505","CreatedAt":"2018-09-25T22:49:16+00:00","UserScreenname":"aspnet","Text":"Starting now! Join us!\n\nhttps://t.co/4Ioo9jNSN2 https://t.co/SGEJxKemkG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":5,"RawContent":null},{"Id":"1044348748783005696","CreatedAt":"2018-09-24T22:11:59+00:00","UserScreenname":"aspnet","Text":"Get ready for this week's #ASPNET Community Standup - Tuesday at 3:45 PM Pacific / 22:45 UTC\n\nEndpoint Routing with… https://t.co/N6iBaMV8C0","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":8,"RawContent":null},{"Id":"1039600318093217792","CreatedAt":"2018-09-11T19:43:25+00:00","UserScreenname":"aspnet","Text":"Join us for today's #ASPNET Community Standup at 3:45 PM Pacific time with @shanselman, @DamianEdwards and… https://t.co/AADsNXNw0L","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":9,"RawContent":null},{"Id":"1034573477620006913","CreatedAt":"2018-08-28T22:48:33+00:00","UserScreenname":"aspnet","Text":"We're live on https://t.co/4Ioo9jNSN2! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"1034222603685179392","CreatedAt":"2018-08-27T23:34:18+00:00","UserScreenname":"aspnet","Text":"Get ready for this week's #ASPNET Community Standup - Tuesday at 3:45 PM Pacific / 10 UTC\n\nBenchmarks and Performan… https://t.co/0SJ32oq3iG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":9,"RawContent":null},{"Id":"1033133567704875008","CreatedAt":"2018-08-24T23:26:51+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgs22K8 Core 2.2.0-preview1: HTTP/2 in Kestrel\nhttps://t.co/II7wNqYPgG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":104,"FavoriteCount":57,"RawContent":null},{"Id":"1032696620142419968","CreatedAt":"2018-08-23T18:30:35+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgs22K8 Core 2.20-preview1: Open API Analyzers &amp; Conventions\nhttps://t.co/17azOu2fw6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":60,"FavoriteCount":32,"RawContent":null},{"Id":"1032668796392095745","CreatedAt":"2018-08-23T16:40:01+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgs22K8 Core 2.2.0-preview1: Healthchecks\nhttps://t.co/sgOqbrv2pW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":24,"RawContent":null},{"Id":"1032328487825096705","CreatedAt":"2018-08-22T18:07:45+00:00","UserScreenname":"aspnet","Text":"https://t.co/eFOzgs22K8 Core 2.2.0-preview1 now available\nhttps://t.co/IOqvW1biUh","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":192,"FavoriteCount":140,"RawContent":null}]}},"RunOn":"2018-10-10T05:30:20.8124109Z","RunDurationInMilliseconds":12962}