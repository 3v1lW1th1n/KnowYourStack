{"Data":{"GitHub":{"Issues":[{"Id":"351395002","IsPullRequest":false,"CreatedAt":"2018-08-16T22:48:03","Actor":"parag-patil","Number":"685","RawContent":null,"Title":"This is not issue - How can I get more learners/Algorithms?","State":"open","Body":"Hi Team,\r\n\r\nI am .NET developer and ML.NET is great start for me to learn Machine Learning.\r\n\r\nBeing .NET developer, I always wanted to do ML in .NET and find TensorFlow and other libraries difficult to understand on first glance.\r\n\r\nTo learn ML.NET, I am working on prediction model, best use case would be Stock prediction. As I can easily get historical data. \r\n\r\nI have following questions,\r\n\r\n1. What is the best algorithm in ML.NET for such use case? In TensorFlow and other libraries, I can see LSTM, Time Series Model and ARIMA etc...\r\n\r\n2.  How can I use one of the below in ML.NET? If available or what is alternative available?\r\n- ARIMA Model\r\n- Long Short Term Memory\r\n- Neural Net - Neural Network for prediction\r\n\r\n3. How can I use ML.NET for Neural Network? For above use case? I know below URL but I don't find proper use cases that will explain when to use which trainer.\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers?view=ml-dotnet\r\n\r\n4. Rather than predicting single output value, how can I predict series of values i.e. stock prices for next weeks or month? \r\n\r\nI am very much interested in ML.NET but being newbie I don't know from where to start. Learning things by implementing is best way and that is why I have choose Stock Prediction.\r\n\r\nRegards,\r\nParag","Url":"https://github.com/dotnet/machinelearning/issues/685","RelatedDescription":"Open issue \"This is not issue - How can I get more learners/Algorithms?\" (#685)"},{"Id":"349324749","IsPullRequest":true,"CreatedAt":"2018-08-16T20:09:10","Actor":"eerhardt","Number":"671","RawContent":null,"Title":" Move Scorers and Calibrators to use IComponentFactory.","State":"closed","Body":"Also, PartitionedFileLoader is now SubComponent-free.\r\n\r\nThis is the next round of SubComponent removal from our public API.  I've removed all `Scorer` and `Calibrator` usages of SubComponent.\r\n\r\n@Ivanidzo4ka - I still need to update this so CmdParser doesn't throw an exception.  I'll do that when I'm back in the office. I wanted to send this out now to get eyes on it while I'm out.","Url":"https://github.com/dotnet/machinelearning/pull/671","RelatedDescription":"Closed or merged PR \" Move Scorers and Calibrators to use IComponentFactory.\" (#671)"},{"Id":"351316661","IsPullRequest":true,"CreatedAt":"2018-08-16T18:23:49","Actor":"ganik","Number":"684","RawContent":null,"Title":"HashTransform to handle Floats and Doubles","State":"open","Body":"closes issue #679 ","Url":"https://github.com/dotnet/machinelearning/pull/684","RelatedDescription":"Open PR \"HashTransform to handle Floats and Doubles\" (#684)"},{"Id":"351064227","IsPullRequest":true,"CreatedAt":"2018-08-16T05:50:57","Actor":"codemzs","Number":"683","RawContent":null,"Title":"Replace DvInt* with .NET standard data types.","State":"open","Body":"This change also removes missing value handling for sbyte, short, int and long because default of these values is a null and that does not fit well with sparse vector architecture where default for missing values is a zero. ","Url":"https://github.com/dotnet/machinelearning/pull/683","RelatedDescription":"Open PR \"Replace DvInt* with .NET standard data types.\" (#683)"},{"Id":"351006515","IsPullRequest":false,"CreatedAt":"2018-08-15T23:48:44","Actor":"eerhardt","Number":"682","RawContent":null,"Title":"Consider defaulting Ensemble Stacking to a trainer in StandardLearners","State":"open","Body":"See the conversation here: https://github.com/dotnet/machinelearning/pull/681#discussion_r210432412\r\n\r\nEnsemble Stacking defaults to using FastTree when users don't specify an underlying trainer. This results in a non-ideal dependency from `Microsoft.ML.Ensemble` to `Microsoft.ML.FastTree`, and would cause problems if we ever considered separating FastTree into its own NuGet package.\r\n\r\nWe should consider making a different default trainer under our Stacking use something in the StandardLearners assembly.\r\n\r\n/cc @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/682","RelatedDescription":"Open issue \"Consider defaulting Ensemble Stacking to a trainer in StandardLearners\" (#682)"},{"Id":"350992242","IsPullRequest":true,"CreatedAt":"2018-08-15T22:38:36","Actor":"eerhardt","Number":"681","RawContent":null,"Title":" Replace SubComponent with IComponentFactory in ML.Ensemble","State":"open","Body":"The next round of SubComponent removal. Now the ML.Ensemble project is SubComponent free.\r\n\r\nWorking towards #585\r\n\r\nNote: I had to move the Argument class's fields down to the concrete class because of the way we handle `SignatureType`. You can use a generic type in an attribute.  However, this allowed me to remove the `TSig` type on the base classes, which is nice since the signature Type shouldn't be in the public API.","Url":"https://github.com/dotnet/machinelearning/pull/681","RelatedDescription":"Open PR \" Replace SubComponent with IComponentFactory in ML.Ensemble\" (#681)"},{"Id":"350937028","IsPullRequest":false,"CreatedAt":"2018-08-15T19:34:12","Actor":"adamshakhabov","Number":"680","RawContent":null,"Title":"Predict similar scheme","State":"open","Body":"_Sorry for my English._\r\n\r\n### Dataset\r\n\r\nThere is dataset which contains files which describe scheme:\r\n\r\nsample #1.txt\r\n```\r\n3103686, 2590304, 2022230, 838696\r\n5530360, 1916721, 2022230, 430823\r\n3103686, 3807071, 2022230, 430823\r\n5705725, 4022485, 2022230, 975943\r\n8043677, 3697167, 2022230, 430823\r\n8043677, 2761756, 2022230, 430823\r\n```\r\n\r\nsample #2.txt\r\n```\r\n2994926, 3072910, 2022230, 1752477\r\n7396944, 3072911, 2022230, 1752476\r\n2994926, 1981531, 5573177, 558310\r\n\r\n```\r\nEach row is rectangle element (on scheme) feature vector (x, y, width, height).\r\n\r\n### Data to predict\r\n\r\nI need train a model which can predict for such input data\r\n\r\ninput.txt\r\n```\r\n3313321, 3259181, 2022230, 558310\r\n7039277, 3454335, 2022230, 558310\r\n5253403, 4207799, 2022231, 558310\r\n4073770, 2445894, 2022230, 558310\r\n6569923, 2445894, 2022230, 558310\r\n```\r\n\r\nsimilar scheme.\r\n\r\nFor example, in the above example for input.txt prediction would be quite if model say that sample #1 most similar for input scheme.\r\n\r\n### Question\r\n\r\nWhich algorithm from ML.NET should I use to solve my task? Of cause I do not expect complete solution, just put me right way.\r\nI have a little bit sub-questions to clarify my problem:\r\n\r\n- How preparing dataset to train: by feature describe or matrix?\r\n\r\n- Before some classifier should I clustering data?","Url":"https://github.com/dotnet/machinelearning/issues/680","RelatedDescription":"Open issue \"Predict similar scheme\" (#680)"},{"Id":"350284502","IsPullRequest":false,"CreatedAt":"2018-08-15T06:18:40","Actor":"MaxAkbar","Number":"678","RawContent":null,"Title":"Incremental Learning\\Training","State":"closed","Body":"Is there a possibility of adding incremental training a model?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/678","RelatedDescription":"Closed issue \"Incremental Learning\\Training\" (#678)"},{"Id":"350526340","IsPullRequest":false,"CreatedAt":"2018-08-14T17:35:21","Actor":"ganik","Number":"679","RawContent":null,"Title":"CategoricalHashTransform should accept Floats and Doubles","State":"open","Body":"Currently CategoricalHashTransform accepts only Text or Key types.\r\n\r\nIf Double is passed in for ex, below error message is shown:\r\nError: *** System.ArgumentOutOfRangeException: 'Source column 'workclass1' has invalid type ('R8'): Expected Text or Key item type.\r\n\r\nIt would be good if it can accept numbers: Ints and Floats. \r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/679","RelatedDescription":"Open issue \"CategoricalHashTransform should accept Floats and Doubles\" (#679)"},{"Id":"350200569","IsPullRequest":true,"CreatedAt":"2018-08-13T21:27:37","Actor":"Ivanidzo4ka","Number":"677","RawContent":null,"Title":"Introduce examples for pipeline api.","State":"open","Body":"examples for #584\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/677","RelatedDescription":"Open PR \"Introduce examples for pipeline api.\" (#677)"},{"Id":"349674104","IsPullRequest":true,"CreatedAt":"2018-08-13T20:29:20","Actor":"briancylui","Number":"672","RawContent":null,"Title":"Change SseUtils call sites to call CpuMathUtils instead","State":"closed","Body":"After all active SSE intrinsics have been implemented and tested for correctness and speed, this PR asks to make all external `SseUtils` call sites call `CpuMathUtils` instead.  This would allow us to obtain a baseline performance of C# hardware intrinsics APIs in a future PR.\r\n\r\ncc: @safern @danmosemsft @eerhardt @tannergooding ","Url":"https://github.com/dotnet/machinelearning/pull/672","RelatedDescription":"Closed or merged PR \"Change SseUtils call sites to call CpuMathUtils instead\" (#672)"},{"Id":"350146246","IsPullRequest":false,"CreatedAt":"2018-08-13T18:42:33","Actor":"lefig","Number":"676","RawContent":null,"Title":"Q: Workflow","State":"open","Body":"Hi,\r\n\r\nNot an issue defect to report, but more of an expression of appreciation for an excellent project.\r\n\r\nIn addition, I have a query in terms of process...\r\n\r\nMy csv files tend to be large and the fields likely to be changing on a frequent basis. However, when building models its just so time intensive having to update the class definitions and keep in sync.\r\n\r\nDoes anyone have any suggestions please to optimise this process. Can this be done, perhaps by automated template generation. Alternatively break cv files with many fields down to more granular files. I don't know so I would welcome your thoughts.\r\n\r\nTa\r\nFig   ","Url":"https://github.com/dotnet/machinelearning/issues/676","RelatedDescription":"Open issue \"Q: Workflow\" (#676)"},{"Id":"350101322","IsPullRequest":false,"CreatedAt":"2018-08-13T16:26:29","Actor":"Zruty0","Number":"675","RawContent":null,"Title":"Docs on CategoricalOneHotVectorizer are not clear, incomplete","State":"open","Body":"The 'remarks' section on the docs is really unclear about what  the outputs do, what happens if the value is not found in the dictionary.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.categoricalonehotvectorizer?view=ml-dotnet\r\n\r\nIn addition, only 3 out of 4 options for output kind are listed, and the documentation for the enum is a stub: \r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.categoricaltransformoutputkind?view=ml-dotnet\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/675","RelatedDescription":"Open issue \"Docs on CategoricalOneHotVectorizer are not clear, incomplete\" (#675)"},{"Id":"349934829","IsPullRequest":false,"CreatedAt":"2018-08-13T08:34:06","Actor":"pan6465190","Number":"674","RawContent":null,"Title":"How to use intput data maybe not sure type.","State":"open","Body":"I want predict  power line of my pv equipment is Healthy. so the input data is a list power data(count may be not ensure). \r\n i did not find the dynamic input of the document.  can you help me. ","Url":"https://github.com/dotnet/machinelearning/issues/674","RelatedDescription":"Open issue \"How to use intput data maybe not sure type.\" (#674)"},{"Id":"349913029","IsPullRequest":false,"CreatedAt":"2018-08-13T07:16:41","Actor":"codemzs","Number":"673","RawContent":null,"Title":"C# native type system instead of DvTypes","State":"open","Body":"# C# native type system instead of DvTypes\r\n## Motivation\r\nMachine Learning datasets often have missing values and to accommodate them along with C# native types without increasing the memory footprint DvType system was created. If we were to use `Nullable<T>` then we are looking at additional memory for `HasValue` boolean field plus another 3 bytes for 4 byte alignment. The C# native types that are replaced using DvTypes are bool as DvBool, sbyte as DvInt1, int16 as DvInt2, int32 as DvInt4, int64 as DvInt8, DvDateTime as System.DateTime, DvDateTimeZone as combination of DvDateTime and DvInt2 offset, DvTimeSpan as SysTimeSpan and string as DvText. Float and Double types already have a special value called NaN that can be used for missing value. DvType system achieves a smaller memory footprint by denoting special value for missing value which is usually the smallest number that can be represented by the native type that is encapsulated by DvType, example, DvInt1's missing value indicator would be SByte.MinValue and in the case of types that represent date/time types it is a value that represent maximum ticks. \r\n\r\nWe plan to remove DvTypes to make IDataView a general commodity that can be used in other products and for this to happen it would be nice if it did not having a dependency on a special type system. If in future we find having DvTypes was useful then we can consider exposing it natively from .NET platform. Once we remove DvTypes then ML.NET platform will be using native C# types. Nullable types or float or double types can be used to represent missing value where needed. In some cases nullable types might take less memory in comparison to float types for example, byte or bool, their nullable type would occupy 2 bytes? and float would occupy 4 bytes. The burden to choose the type is on the user.\r\n\r\n## Column Types \r\nColumns in ML.NET make up the dataset and `ColumnType` defines a column. At high level there are two kinds of column, first is `PrimitiveType` and that comparises of types such as `NumberType`, `BoolType`, `TextType`, `DateTimeType`, `DateTimeZoneType`, `KeyType`, second is `Structured type` and it comparises of `VectorType`. `ColumnType` is primarily made up of `Type` and `DataKind`. `Type` could refer to any type but it is instantiated with a type referred by `DataKind` which is an identifer for data types that comprises of DvTypes, native C# types such as float, double and custom big integer UInt128. \r\n\r\n### NumberTypes\r\nNumberTypes consist of I1, U1, I2, U2, I4, U4, I8, U8, UG, R4, R8 but only I1, I2, I4, I8 are implemented using DvTypes. U1, U2, U4, U8, R4, R8 are just another names for native C# types such as byte, ushort, uint32, uint64, float and double. Float and Double have NaN capability which is used for missing values. Since I1, I2, I4, I8 will be replaced with native C# type and will also need to have option to represent missing values so we need to have two representations for each of these, one that will contain native C# type and second that will be of `Nullable` C# type to accommodate missing value, example, I1 will refer to sbyte? and I1P will refer to just sbyte. This change will need to be incorporated into `DataKind` and new `NumberType` will be created using `DataKind`. \r\n\r\n## Type conversion\r\nDvTypes have implicit and explicit override for assignment operator that handles type conversion. Lets consider DvInt1 for example:\r\n\r\n| To  | From | Current behavior | Helper routine\r\n|:-:|:-:|:-:|:-:|\r\n| DvInt1 | sbyte | Copy the value as it is | N/A\r\n| DvInt1 | sbyte? | Assign missing value if null otherwise copy the value as it is | sbyte = sbyte?\r\n| sbyte | DvInt1 | Copy if not a missing value otherwise throw exception | sbyte = sbyte?\r\n| sbyte? | DvInt1 | Assign null for missing values otherwise copy over | N/A\r\n| DvInt1 | DvBool | Assign missing value for a missing value otherwise copy value over | sbyte = bool?\r\n| DvInt1 | DvInt2 | Cast raw value from short to sbyte and compare it with original value if they are not same assign missing value otherwise casted value  | Either we disallow type conversion or we will need helper routine for every case.\r\n| DvInt1 | DvInt4 | Same as above | Same as above\r\n| DvInt1 | DvInt8 | Same as above | Same as above\r\n| DvInt1 | Float | Assign missing value when the value is NaN or out of range for sbyte | Either we disallow type conversion, or we will need helper routine for every case to check for overflow.\r\n| DvInt1 | Double | Same as above | Same as above.\r\n| Float | DvInt1 | Assign NaN for missing value | float = sbyte?\r\n| Double | DvInt1 | Same as above | double = sbyte?\r\n\r\nSimilar conversion rules exist for DvInt2, DvInt4, DvInt8 and DvBool. Unfortunately, implicit or explicit assignment overrides cannot be made for native C# types which means we will have to define helper routines for specific scenarios. How do we know where we need to handle a particular scenario? Compile\r\nthe code and find? Code inspection? \r\n\r\n## Logical, bitwise and numerical operators\r\nOperations such as `==`, `!=`, `!`, `>`, `>=`, `<`, `<=`, `+`,`-`,`*`,`pow`,`|`,`&` take place between same DvTypes only. They also handle missing values and in the case of arithmetic operators overflow is also handled. Most of these overrides are implemented but only few are actively used. For non-nullable types this is mostly not an issue except for handling overflow but for `Nullable` types we will need to implement overrides for handling nullable and non-nullable logical or bitwise or arithmetic operation. Whenever there is an overflow the resulting value is represented as missing value and the same goes when one of the operands is a missing value.\r\n\r\n## Serialization\r\nDvTypes have their own codecs for efficiently compressing data and writing it to disk, for example, to write DvBool to disk, two bits are used to represent a boolean value, 0x00 is false, 0x01 is true and 0x10 is missing value indicator. Boolean values are written at the level of int32 which has 32 bits that can\r\naccommodate 32/2 or 16 boolean values in 4 bytes as opposed to using 1 byte per boolean value using the naive approach that does not even handle missing value. We can reuse this approach to serialize bool? and bool. For DvInt types a single raw value represents a missing value and non-missing value but in the case of nullable types we can use XML serialization though it might increase the footprint on the disk. \r\n\r\n## Intermediate Language(IL) code generation\r\nML.NET contains a mini compiler that generates IL code at runtime for peak and poke functions that basically perform reflection of objects to set and get values in a more performant manner. Here we can use OpCodes.Stobj to emit IL code for `Nullable` types.\r\n\r\n## Misc.\r\nWherever ML.NET uses DvTypes internally such as DvInt4 for ranges in Key2Vec transform we could use `Nullable` types to accommodate missing values.\r\n\r\nCC: @eerhardt @Zruty0 @Ivanidzo4ka @TomFinley @shauheen ","Url":"https://github.com/dotnet/machinelearning/issues/673","RelatedDescription":"Open issue \"C# native type system instead of DvTypes\" (#673)"},{"Id":"348907770","IsPullRequest":true,"CreatedAt":"2018-08-10T22:07:36","Actor":"briancylui","Number":"668","RawContent":null,"Title":"Port all active C# hardware intrinsics APIs for SSE from SIMD native algorithms","State":"closed","Body":"### What's new:\r\n1. Implemented all remaining active SSE intrinsics, including their software fallbacks and passing unit tests\r\n2. Implemented the performance tests of all remaining active SSE intrinsics, except for those that accept `AlignedArray` as an argument\r\n3. Performance test results for all applicable, active SSE intrinsics are updated in https://github.com/briancylui/machinelearning/issues/1\r\n\r\n### Description from https://github.com/dotnet/machinelearning/pull/562:\r\n- with unit tests and performance tests for two target frameworks: .NET Core App 3.0 and .NET Standard 2.0.\r\n- .NET Core App 3.0 gets the new C# hardware intrinsics APIs, while .NET Standard 2.0 gets the original native SIMD algorithms.\r\n- Several things have made this multi-targeting feature possible.\r\n   1. The new CpuMathUtils class that contains the new APIs is implemented as a partial class with method definitions split into two separate files (src\\Microsoft.ML.CpuMath\\CpuMathUtils.[target].cs), only one of which is compiled based on the target framework.\r\n   2. The Microsoft.ML.CpuMath.csproj file makes the switching decision to compile the right files based on the target framework.\r\n\r\n### Structure:\r\n1. All new hardware intrinsics APIs are contained in src\\Microsoft.ML.CpuMath.\r\n2. Unit tests for the two target frameworks live in test\\Microsoft.ML.CpuMath.UnitTests.[target], and contain the same content except for the target framework in .csproj.\r\n3. Performance tests live in test\\Microsoft.ML.CpuMath.PerformanceTests.\r\n\r\n### Changes to users:\r\n1. Originally, users call intrinsics APIs via the SseUtils class in src\\Microsoft.ML.CpuMath\\Sse.cs, but now they call them via the new CpuMathUtils class, which will handle switching between SSE and AVX in the future.\r\n2. CpuMathUtils methods and SseUtils methods share the same signature, but CpuMathUtils methods additionally call a new helper class (SseIntrinsics) for C# implementations of SSE operations.\r\n\r\n### Future follow-up for `CpuMath` enhancement\r\n1. Suggestions on `CpuMath` enhancement in this PR scheduled for future follow-ups have been compiled into an issue page (https://github.com/briancylui/machinelearning/issues/2).\r\n\r\n### List of new SSE intrinisics implemented\r\n•\tMatMulA\r\n•\tMatMulTranA\r\n•\tMatMulPA\r\n•\tMatMulTranPA\r\n•\tSdcaL1UpdateU\r\n•\tSdcaL1UpdateSU\r\n•\tAddScaleCopyU\r\n•\tSumU\r\n•\tAddScalarU\r\n•\tSumSqDiffU\r\n•\tSumAbsDiffU\r\n•\tMaxAbsDiffU\r\n•\tMaxAbsU\r\n•\tScaleSrcU\r\n•\tScaleAddU\r\n•\tZeroItemsU\r\n•\tZeroMatrixItemsCoreU\r\n\r\ncc: @eerhardt @tannergooding @safern @danmosemsft ","Url":"https://github.com/dotnet/machinelearning/pull/668","RelatedDescription":"Closed or merged PR \"Port all active C# hardware intrinsics APIs for SSE from SIMD native algorithms\" (#668)"},{"Id":"348931057","IsPullRequest":false,"CreatedAt":"2018-08-09T17:51:10","Actor":"Ivanidzo4ka","Number":"669","RawContent":null,"Title":"Binary learners need to have IComponentFactory implementation in order to work with OVA.","State":"closed","Body":"With #622 OVA expects predictor type to be IComponentFactory, and in current moment only learner which exposed itself as  component is FastTree, and it exposes itself only as ITrainer instead of ITrainer<IPredictorProducing<Float>> required for OVA.\r\n\r\nWhich mean we have to go through all our Binary learners and expose them as ComponentKind and create proper factories. Same probably states for Regression, MultiClass, and Ranking.","Url":"https://github.com/dotnet/machinelearning/issues/669","RelatedDescription":"Closed issue \"Binary learners need to have IComponentFactory implementation in order to work with OVA.\" (#669)"},{"Id":"348979642","IsPullRequest":true,"CreatedAt":"2018-08-09T17:50:52","Actor":"Ivanidzo4ka","Number":"670","RawContent":null,"Title":"WIP Introduce I*PredictionKind*TrainerFactory and propagate them ","State":"closed","Body":"Fixes #669.\r\n\r\nNeed to kill all LoadableClasses attributes, and figure out why command line parser throw assert.\r\n\r\n@eerhardt  this is related to comment in your PR regarding subcomponents, and I just don't want you to do same job since this is about 90% complete.","Url":"https://github.com/dotnet/machinelearning/pull/670","RelatedDescription":"Closed or merged PR \"WIP Introduce I*PredictionKind*TrainerFactory and propagate them \" (#670)"},{"Id":"348723847","IsPullRequest":false,"CreatedAt":"2018-08-09T13:23:47","Actor":"sfilipi","Number":"664","RawContent":null,"Title":"Documentation fixes","State":"closed","Body":"The xml documentation has a few things to fix. \r\n\r\n- MissingValuesRowDropper.Complement link in the MissingValuesRowDropper page. \r\n- List of links on the 'more information' of the FastTree pages because of the missing type in the list. \r\n- Symsgd documentation needs to be wired to the CSharpAPI.cs\r\n - Indentation fixes for some of the examples. \r\n- Paragraphing text for CategoricalOneHotVectorizer.  \r\n","Url":"https://github.com/dotnet/machinelearning/issues/664","RelatedDescription":"Closed issue \"Documentation fixes\" (#664)"},{"Id":"348727104","IsPullRequest":true,"CreatedAt":"2018-08-08T19:47:30","Actor":"sfilipi","Number":"665","RawContent":null,"Title":"Documentation fixes for the issues in #664","State":"closed","Body":"Linked Microsoft.ML.SymSgdBinaryClassifier to its documentation. \r\nFixes the missing type in the list element of the FastTree documentation. \r\nIndented examples. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/665","RelatedDescription":"Closed or merged PR \"Documentation fixes for the issues in #664\" (#665)"},{"Id":"348849406","IsPullRequest":true,"CreatedAt":"2018-08-08T18:54:07","Actor":"codemzs","Number":"667","RawContent":null,"Title":"Add sigmoid to lightgbm parameter list and change default to 1.","State":"open","Body":"fixes #654 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/667","RelatedDescription":"Open PR \"Add sigmoid to lightgbm parameter list and change default to 1.\" (#667)"},{"Id":"348835803","IsPullRequest":false,"CreatedAt":"2018-08-08T18:13:45","Actor":"arunrules","Number":"666","RawContent":null,"Title":"Entry point 'Transforms.CategoricalOneHotVectorizer' not found","State":"open","Body":"I built my first dummy ml.net console app from my dev box and ensured it worked as expected.\r\n \r\nThen I copied the binaries (console app + a bunch of [136] Micrososft.ML.* and its dependencies) to a windows server machine and I see the following exception.\r\n \r\nUnhandled Exception: System.InvalidOperationException: Entry point 'Transforms.CategoricalOneHotVectorizer' not found\r\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointNode..ctor(IHostEnvironment env, IChannel ch, ModuleCatalog moduleCatalog, RunContext context, String id, String entryPointName, JObject inputs, JObject outputs, Boolean checkpoint, String stageId, Single cost, String label, String group, String weight, String name)\r\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointNode.ValidateNodes(IHostEnvironment env, RunContext context, JArray nodes, ModuleCatalog moduleCatalog, String label, String group, String weight, String name)\r\n   at Microsoft.ML.Runtime.EntryPoints.EntryPointGraph..ctor(IHostEnvironment env, ModuleCatalog moduleCatalog, JArray nodes)\r\n   at Microsoft.ML.Runtime.Experiment.Compile()\r\n   at Microsoft.ML.LearningPipeline.Train[TInput,TOutput]()\r\n   at MyMLApp2.Program.Train() in E:\\ML\\MyMLApp2\\MyMLApp2\\Program.cs:line 111\r\n   at MyMLApp2.Program.Main(String[] args) in E:\\ML\\MyMLApp2\\MyMLApp2\\Program.cs:line 64\r\n \r\nany idea why?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/666","RelatedDescription":"Open issue \"Entry point 'Transforms.CategoricalOneHotVectorizer' not found\" (#666)"},{"Id":"348522576","IsPullRequest":true,"CreatedAt":"2018-08-08T17:28:13","Actor":"montebhoover","Number":"662","RawContent":null,"Title":"Add reference to ImageAnalytics nuget so image transforms are packaged.","State":"closed","Body":"Add reference to ImageAnalytics nuget so image transforms/learners are packaged.\r\n\r\nFixes #661 \r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/662","RelatedDescription":"Closed or merged PR \"Add reference to ImageAnalytics nuget so image transforms are packaged.\" (#662)"},{"Id":"348521748","IsPullRequest":false,"CreatedAt":"2018-08-08T17:28:13","Actor":"montebhoover","Number":"661","RawContent":null,"Title":"Microsoft.ML.ImageAnalytics nuget doesn't produce dlls for transforms/learners.","State":"closed","Body":"After installing the Microsoft.ML.ImageAnalytics nuget and building, the packages folder for ImageAnalytics is empty.  This is due to the fact that it is not referenced by the Microsoft.ML.ImageAnalytics.csproj file.  The fix would be to add the following line to the .csproj:\r\n\r\n`<IncludeInPackage>Microsoft.ML.ImageAnalytics</IncludeInPackage>`","Url":"https://github.com/dotnet/machinelearning/issues/661","RelatedDescription":"Closed issue \"Microsoft.ML.ImageAnalytics nuget doesn't produce dlls for transforms/learners.\" (#661)"},{"Id":"348580141","IsPullRequest":false,"CreatedAt":"2018-08-08T05:28:31","Actor":"rauhs","Number":"663","RawContent":null,"Title":"System.TypeLoadException: Could not load type 'Microsoft.ML.Runtime.ITrainer`2'","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: 10.0.14\r\n- **.NET Version (eg., dotnet --info)**: 2.1.202\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nUpgraded my pipeline to v0.4. It used SDCA multi classification.\r\n\r\nOn the *first* `Train` call it always throws a\r\n\r\n```\r\nSystem.TypeLoadException: Could not load type 'Microsoft.ML.Runtime.ITrainer`2' from assembly 'Microsoft.ML.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n   at System.Reflection.CustomAttribute._CreateCaObject(RuntimeModule pModule, IRuntimeMethodInfo pCtor, Byte** ppBlob, Byte* pEndBlob, Int32* pcNamedArgs)\r\n   at System.Reflection.CustomAttribute.CreateCaObject(RuntimeModule module, IRuntimeMethodInfo ctor, IntPtr& blob, IntPtr blobEnd, Int32& namedArgs)\r\n   at System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeModule decoratedModule, Int32 decoratedMetadataToken, Int32 pcaCount, RuntimeType attributeFilterType, Boolean mustBeInheritable, IList derivedAttributes, Boolean isDecoratedTargetSecurityTransparent)\r\n   at System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeAssembly assembly, RuntimeType caType)\r\n   at System.Attribute.GetCustomAttributes(Assembly element, Type attributeType, Boolean inherit)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.CacheLoadedAssemblies()\r\n   at Microsoft.ML.Runtime.ComponentCatalog.FindLoadableClasses[TSig]()\r\n   at Microsoft.ML.Runtime.EntryPoints.ModuleCatalog..ctor(IExceptionContext ectx)\r\n   at Microsoft.ML.Runtime.EntryPoints.ModuleCatalog.CreateInstance(IExceptionContext ectx)\r\n   at Microsoft.ML.Runtime.Experiment..ctor(IHostEnvironment env)\r\n   at Microsoft.ML.LearningPipeline.Train[TInput,TOutput]()\r\n```\r\n\r\nIt works fine on subsequent training calls to similar pipelines. It worked fine under 0.3","Url":"https://github.com/dotnet/machinelearning/issues/663","RelatedDescription":"Open issue \"System.TypeLoadException: Could not load type 'Microsoft.ML.Runtime.ITrainer`2'\" (#663)"},{"Id":"348128489","IsPullRequest":true,"CreatedAt":"2018-08-07T16:31:37","Actor":"GalOshri","Number":"656","RawContent":null,"Title":"Add release notes for ML.NET 0.4","State":"closed","Body":"This adds release notes for ML.NET 0.4. \r\n\r\nNote that some of the documentation links are not available yet. They will start working after the official release.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/656","RelatedDescription":"Closed or merged PR \"Add release notes for ML.NET 0.4\" (#656)"},{"Id":"348385143","IsPullRequest":true,"CreatedAt":"2018-08-07T15:57:57","Actor":"xadupre","Number":"660","RawContent":null,"Title":"Add method AddSerialize to class Experiment to add custom entrypoints.","State":"open","Body":"Fixes #659, all entrypoints in class Experiment are stored in _jsonNodes. The method AddSerialize can appends a new node not necessarily defined in Microsoft.ML.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/660","RelatedDescription":"Open PR \"Add method AddSerialize to class Experiment to add custom entrypoints.\" (#660)"},{"Id":"348381909","IsPullRequest":false,"CreatedAt":"2018-08-07T15:50:03","Actor":"xadupre","Number":"659","RawContent":null,"Title":"Cannot create entry point for a new learner in a package with depends on Microsoft.ML.","State":"open","Body":"The Following instruction ``_jsonNodes.Add(Serialize(\"Data.DataViewReference\", input, output));`` is automatocally generated for every entrypoint but _jsonNodes is private member. I did not find a way to add a custom learner in a package which takes Microsoft.ML as a dependency.","Url":"https://github.com/dotnet/machinelearning/issues/659","RelatedDescription":"Open issue \"Cannot create entry point for a new learner in a package with depends on Microsoft.ML.\" (#659)"},{"Id":"348345674","IsPullRequest":true,"CreatedAt":"2018-08-07T14:26:17","Actor":"Nepomuceno","Number":"658","RawContent":null,"Title":"[WIP] Including Thread Id in the path to avoid collisions","State":"open","Body":"This pull request it is to try to solve the problem at #568 \r\n\r\nWhat we did was add the Thread ID in the extracted entity this might result in one entity being added more than once in case there are multi thread working int the solution. Would be good to validate that but I was unsure on how to do it. Another solution would be just to not include anything in case the file it is being extracted already. \r\n\r\nWhat it is the desired behavior for this library would be subjected to how it works if someone from the team could help in understanding that I would be grateful.","Url":"https://github.com/dotnet/machinelearning/pull/658","RelatedDescription":"Open PR \"[WIP] Including Thread Id in the path to avoid collisions\" (#658)"},{"Id":"348287385","IsPullRequest":false,"CreatedAt":"2018-08-07T11:51:09","Actor":"kdcllc","Number":"657","RawContent":null,"Title":"Adding MP3 processing support porting pyAudioAnalysis library","State":"open","Body":"This is a feature request. Currently, I have to use Python libraryhttps://github.com/tyiannak/pyAudioAnalysis in order to process MP3 files and retrieve feature set. I would like to see this library ported to ML.NET functionality.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/657","RelatedDescription":"Open issue \"Adding MP3 processing support porting pyAudioAnalysis library\" (#657)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-08-17T05:30:33.0306865Z","RunDurationInMilliseconds":1131}