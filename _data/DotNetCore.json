{"Data":{"Blog":{"FeedItems":[{"Title":"Tiered Compilation Preview in .NET Core 2.1","PublishedOn":"2018-08-02T22:22:13+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"If you are a fan of .NET performance there has been a lot great news lately such as Performance Improvements in .NET Core 2.1 and Announcing .NET Core 2.1, but we&#8217;ve got more. Tiered compilation...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/08/02/tiered-compilation-preview-in-net-core-2-1/","RawContent":null},{"Title":".NET Framework July 2018 Update","PublishedOn":"2018-07-30T23:17:45+00:00","CommentsCount":24,"FacebookCount":0,"Summary":"Update: 8/03/2018 Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See dotnet/announcements #74. Today, we released the July 2018 Update that fixes an issue in .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/","RawContent":null},{"Title":"Announcing F# 4.5 Preview","PublishedOn":"2018-07-26T19:22:31+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"We’re very excited to announce that we’ll be shipping a new language version of F# soon. The version will be F# 4.5. F# 4.5 has been developed entirely via an open RFC (requests for comments) process,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/26/announcing-f-4-5-preview/","RawContent":null},{"Title":"Advisory on July 2018 .NET Framework Updates","PublishedOn":"2018-07-21T00:55:00+00:00","CommentsCount":24,"FacebookCount":0,"Summary":"Update as of 8/03/2018: Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See dotnet/announcements #74. Update as of 7/30/2018: A new .NET Framework July 2018 Update...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3632","PublishedOn":"2018-07-19T00:30:16+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"We released the first Early Access build for the .NET Framework 4.8 last month (June-2018) and are happy to announce the next build (3632) for your feedback. This is one of the in-development builds...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/","RawContent":null},{"Title":"IL Linker — Help us build the best experience!","PublishedOn":"2018-07-11T16:44:27+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We are currently working on the IL Linker and would love to get your feedback. Please fill out the brief survey below and help shape the future of the IL Linker by telling us about your current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/11/il-linker-help-us-build-the-best-experience/","RawContent":null},{"Title":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2018-07-10T19:03:38+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.2 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core July 2018 Update","PublishedOn":"2018-07-10T17:50:29+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2018 Update. This update includes .NET Core 1.0.12, .NET Core 1.1.9, .NET Core 2.0.9 and .NET Core 2.1.2. Security .NET Core Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/","RawContent":null},{"Title":"Announcing ML.NET 0.3","PublishedOn":"2018-07-09T18:30:19+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Two months ago, at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework for .NET developers. We’ve gotten great feedback so far and would like to thank the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/announcing-ml-net-0-3/","RawContent":null},{"Title":"System.IO.Pipelines: High performance IO in .NET","PublishedOn":"2018-07-09T16:02:10+00:00","CommentsCount":42,"FacebookCount":0,"Summary":"System.IO.Pipelines is a new library that is designed to make it easier to do high performance IO in .NET. It&#8217;s a library targeting .NET Standard that works on all .NET implementations....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/system-io-pipelines-high-performance-io-in-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7951838452","Type":"IssuesEvent","CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/107","RelatedDescription":"Opened issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107) at dotnet/home","RelatedBody":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS."},{"Id":"7948314683","Type":"IssuesEvent","CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/106","RelatedDescription":"Opened issue \"Updates are not requested from local WSUS\" (#106) at dotnet/home","RelatedBody":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?"},{"Id":"7939112505","Type":"PullRequestEvent","CreatedAt":"2018-07-09T17:43:55","Actor":"slide","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Opened pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8025565746","Type":"IssuesEvent","CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Opened issue \"https://dot.net now using TLS 1.2-only\" (#77) at dotnet/announcements","RelatedBody":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689"},{"Id":"7999286881","Type":"IssuesEvent","CreatedAt":"2018-07-21T22:29:06","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Opened issue \"July 2018 .NET Updates\" (#76) at dotnet/announcements","RelatedBody":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Documents\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n"},{"Id":"7997769217","Type":"IssuesEvent","CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Opened issue \"Advisory on July 2018 .NET Framework Updates\" (#74) at dotnet/announcements","RelatedBody":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of applications that fail to start or don't run correctly after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\nDiscussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Workaround\r\n\r\nTemporarily uninstall the [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) to restore functionality until a new update has been released to correct this problem. \r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object\r\n"},{"Id":"7945147887","Type":"IssuesEvent","CreatedAt":"2018-07-10T17:00:38","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n"},{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8065596321","Type":"PullRequestEvent","CreatedAt":"2018-08-04T03:38:40","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19287","RelatedDescription":"Merged pull request \"Revert \"Build managed tests with dotnet (#19254)\"\" (#19287) at dotnet/coreclr","RelatedBody":"This reverts commit 101baee1010eaad47cd7afd1e041a7f422aefa78."},{"Id":"8065457369","Type":"IssuesEvent","CreatedAt":"2018-08-04T01:43:34","Actor":"adityamandaleeka","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/19288","RelatedDescription":"Opened issue \"Incorrect up-sizing for non-power-of-2 structs that are not LclVars\" (#19288) at dotnet/coreclr","RelatedBody":"When loading a struct from an arbitrary location, it is not safe to load any more bytes than the specified size of the struct. For instance, in the case where you're loading a 3-byte struct that's in the last three bytes of a page, the next byte following the struct may be on a page that is unmapped or not readable.\r\n\r\nA JIT dump showed this transformation during the morph process (note the `OBJ(3)` turns into an `IND int`):\r\n```\r\nfgMorphTree BB02, stmt 23 (before)\r\n               [000124] --CXG-------              *  CALL      void   Test.Foo\r\n               [000121] ------------ this in x0   +--*  LCL_VAR   ref    V00 this         \r\n               [000123] ---XG------- arg1         \\--*  OBJ(3)    struct\r\n               [000122] ------------                 \\--*  LCL_VAR   long   V05 loc4         \r\nargSlots=2, preallocatedArgCount=0, nextSlotNum=0, outgoingArgSpaceSize=0\r\n\r\nSorting the arguments:\r\nDeferred argument ('x1'):\r\n               [000123] ---XG+------              *  IND       int   \r\n               [000122] -----+------              \\--*  LCL_VAR   long   V05 loc4         \r\nReplaced with placeholder node:\r\n               [000186] ----------L-              *  ARGPLACE  int   \r\nDeferred argument ('x0'):\r\n               [000121] -----+------              *  LCL_VAR   ref    V00 this         \r\nReplaced with placeholder node:\r\n               [000188] ----------L-              *  ARGPLACE  ref   \r\n```\r\n\r\nDebugging `fgMorphArgs` shows that we’re taking this codepath which is changing the size from 3 to 4:\r\n\r\n```c++\r\n#if defined(_TARGET_ARM64_) || defined(UNIX_AMD64_ABI)\r\n                    // For ARM64 or AMD64/UX we can pass non-power-of-2 structs in a register.\r\n                    if ((howToPassStruct == SPK_PrimitiveType) && // Passed in a single register\r\n                        !isPow2(originalSize))                    // size is 3,5,6 or 7 bytes\r\n                    {\r\n                        originalSize = genTypeSize(structBaseType);\r\n                    }\r\n#endif //  _TARGET_ARM64_ || UNIX_AMD64_ABI\r\n```\r\n\r\nThis branch was modified a couple of months ago in https://github.com/dotnet/coreclr/pull/18358 to remove an additional check in there that was also checking if the source was a LclVar before adjusting the size.\r\n\r\n@CarolEidt Can you please take a look and determine whether we need to reintroduce that check or make a better fix?"},{"Id":"8065392701","Type":"PullRequestEvent","CreatedAt":"2018-08-04T00:55:20","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19287","RelatedDescription":"Opened pull request \"Revert \"Build managed tests with dotnet (#19254)\"\" (#19287) at dotnet/coreclr","RelatedBody":"This reverts commit 101baee1010eaad47cd7afd1e041a7f422aefa78."},{"Id":"8065390395","Type":"IssuesEvent","CreatedAt":"2018-08-04T00:53:41","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/19286","RelatedDescription":"Opened issue \"Need automated mechanism to ensure we don't unintentionally lose test coverage\" (#19286) at dotnet/coreclr","RelatedBody":"E.g., PR https://github.com/dotnet/coreclr/pull/19254 caused us to silently stop building pri-1 tests. This is silent because when we run tests, we run whatever tests we find.\r\n\r\nOne exception is Windows arm32/arm64, which currently have a separate list of exactly which tests we intend to run, and if the Pri-1 tests are there, they fail.\r\n\r\nWe need a mechanism that makes this a non-silent failure in all cases.\r\n"},{"Id":"8065362533","Type":"IssuesEvent","CreatedAt":"2018-08-04T00:34:36","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/19285","RelatedDescription":"Opened issue \"r2rdump test failure: FileNotFoundException HelloWorld.xml\" (#19285) at dotnet/coreclr","RelatedBody":"Looks like the x64 release build has been failing with this problem for a while.\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/release_windows_nt/\r\n\r\n```\r\n      readytorun_r2rdump._R2RDumpTest_R2RDumpTest_._R2RDumpTest_R2RDumpTest_cmd [FAIL]\r\n15:43:51         \r\n15:43:51   Unhandled Exception: System.IO.FileNotFoundException: Could not find file 'D:\\j\\workspace\\release_windo---dfb17e42\\bin\\tests\\Windows_NT.x64.Release\\readytorun\\r2rdump\\R2RDumpTest\\HelloWorld.xml'.\r\n15:43:51            at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle)\r\n15:43:51            at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n15:43:51            at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n15:43:51            at System.Xml.XmlDownloadManager.GetStream(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy) in E:\\A\\_work\\5\\s\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\XmlDownloadManager.cs:line 27\r\n15:43:51            at System.Xml.XmlUrlResolver.GetEntity(Uri absoluteUri, String role, Type ofObjectToReturn) in E:\\A\\_work\\5\\s\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\XmlUrlResolver.cs:line 66\r\n15:43:51            at System.Xml.XmlTextReaderImpl.OpenUrl() in E:\\A\\_work\\5\\s\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs:line 3087\r\n15:43:51            at System.Xml.XmlTextReaderImpl.Read() in E:\\A\\_work\\5\\s\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Core\\XmlTextReaderImpl.cs:line 1206\r\n15:43:51            at System.Xml.XmlLoader.Load(XmlDocument doc, XmlReader reader, Boolean preserveWhitespace) in E:\\A\\_work\\5\\s\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Dom\\XmlLoader.cs:line 50\r\n15:43:51            at System.Xml.XmlDocument.Load(XmlReader reader) in E:\\A\\_work\\5\\s\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Dom\\XmlDocument.cs:line 1336\r\n15:43:51            at System.Xml.XmlDocument.Load(String filename) in E:\\A\\_work\\5\\s\\corefx\\src\\System.Private.Xml\\src\\System\\Xml\\Dom\\XmlDocument.cs:line 1288\r\n15:43:51            at R2RDumpTest.TestHelpers.RunTest(String name) in D:\\j\\workspace\\release_windo---dfb17e42\\tests\\src\\readytorun\\r2rdump\\TestHelpers.cs:line 20\r\n15:43:51            at R2RDumpTest.BasicTests.Main(String[] args) in D:\\j\\workspace\\release_windo---dfb17e42\\tests\\src\\readytorun\\r2rdump\\BasicTests.cs:line 16\r\n15:43:51   \r\n15:43:51   \r\n15:43:51   Return code:      1\r\n15:43:51   Raw output file:      D:\\j\\workspace\\release_windo---dfb17e42\\bin\\tests\\Windows_NT.x64.Release\\Reports\\readytorun.r2rdump\\R2RDumpTest\\R2RDumpTest.output.txt\r\n15:43:51   Raw output:\r\n15:43:51   BEGIN EXECUTION\r\n15:43:51         The system cannot find the path specified.\r\n15:43:51         Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n15:43:51         Copyright (c) Microsoft Corporation.  All rights reserved.\r\n15:43:51         \r\n15:43:51         Native image HelloWorld.ni.dll generated successfully.\r\n15:43:51         Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n15:43:51         Copyright (c) Microsoft Corporation.  All rights reserved.\r\n15:43:51         \r\n15:43:51         Native image GcInfoTransitions.ni.dll generated successfully.\r\n15:43:51         Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n15:43:51         Copyright (c) Microsoft Corporation.  All rights reserved.\r\n15:43:51         \r\n15:43:51         Native image GenericFunctions.ni.dll generated successfully.\r\n15:43:51         Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n15:43:51         Copyright (c) Microsoft Corporation.  All rights reserved.\r\n15:43:51         \r\n15:43:51         Native image MultipleRuntimeFunctions.ni.dll generated successfully.\r\n15:43:51          \"D:\\j\\workspace\\release_windo---dfb17e42\\tests\\..\\bin\\tests\\Windows_NT.x64.Release\\Tests\\Core_Root\\corerun.exe\" R2RDumpTest.exe \r\n15:43:51         Starting the test\r\n15:43:51         Expected: 100\r\n15:43:51         Actual: -532462766\r\n15:43:51         END EXECUTION - FAILED\r\n15:43:51         FAILED\r\n15:43:51         Test Harness Exitcode is : 1\r\n15:43:51         \r\n15:43:51   To run the test:\r\n15:43:51   > set CORE_ROOT=D:\\j\\workspace\\release_windo---dfb17e42\\bin\\tests\\Windows_NT.x64.Release\\Tests\\Core_Root\r\n15:43:51   > D:\\j\\workspace\\release_windo---dfb17e42\\bin\\tests\\Windows_NT.x64.Release\\readytorun\\r2rdump\\R2RDumpTest\\R2RDumpTest.cmd\r\n15:43:51   \r\n15:43:51         Expected: True\r\n15:43:51         Actual:   False\r\n```\r\n\r\n@acmyu @nattress "},{"Id":"8065261145","Type":"PullRequestEvent","CreatedAt":"2018-08-03T23:38:56","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19284","RelatedDescription":"Opened pull request \"[WIP] Support for tracking Exception Sets with ValueNumbers\" (#19284) at dotnet/coreclr","RelatedBody":"Added support to create and track Exception sets with ValueNumbers\r\nSome cleanup in ValueNumbering as well.\r\nThe Asm Diffs produced are  fairly minimal with this set of changes.\r\nFixes #8648"},{"Id":"8065213583","Type":"IssuesEvent","CreatedAt":"2018-08-03T23:16:49","Actor":"GrabYourPitchforks","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/19283","RelatedDescription":"Opened issue \"[RyuJIT] switch statement can be further optimized when using bitmasks\" (#19283) at dotnet/coreclr","RelatedBody":"RyuJIT has room for optimization in switch statements like the case below.\r\n\r\n```cs\r\nprivate static void WriteInteger(uint i)\r\n{\r\n    string s;\r\n    switch (i & 7)\r\n    {\r\n        case 0: s = \"0\"; break;\r\n        case 1: s = \"1\"; break;\r\n        case 2: s = \"2\"; break;\r\n        case 3: s = \"3\"; break;\r\n        case 4: s = \"4\"; break;\r\n        case 5: s = \"5\"; break;\r\n        case 6: s = \"6\"; break;\r\n        case 7: s = \"7\"; break;\r\n        default: s = \"xxx\"; break;\r\n    }\r\n    Console.WriteLine(s);\r\n}\r\n```\r\n\r\nRyuJIT can optimize this by detecting the `& (2^n - 1)` in the switch statement, concluding that the resulting value must fall into the range `[ 0, 2^n - 1 ]`, and omitting code gen for all other cases. Below is the current codegen, along with my annotations of which statements can be removed with an enlightened JIT.\r\n\r\n```asm\r\n00007FF9AB5D2152  sub         esp,20h  \r\n00007FF9AB5D2155  mov         esi,ecx  \r\n00007FF9AB5D2157  and         esi,7\r\n\r\n; the two lines immediately following can be removed  \r\n00007FF9AB5D215A  cmp         esi,7  \r\n00007FF9AB5D215D  ja          00007FF9AB5D21F3  \r\n\r\n00007FF9AB5D2163  mov         eax,esi  \r\n00007FF9AB5D2165  lea         rdx,[7FF9AB5D2210h]  \r\n00007FF9AB5D216C  mov         edx,dword ptr [rdx+rax*4]  \r\n00007FF9AB5D216F  lea         rcx,[7FF9AB5D2155h]  \r\n00007FF9AB5D2176  add         rdx,rcx  \r\n00007FF9AB5D2179  jmp         rdx  \r\n00007FF9AB5D217B  mov         rax,1DF900030C0h  ; case 0\r\n00007FF9AB5D2185  mov         rcx,qword ptr [rax]  \r\n00007FF9AB5D2188  jmp         00007FF9AB5D2200  \r\n00007FF9AB5D218A  mov         rcx,1DF900030C8h  ; case 1\r\n00007FF9AB5D2194  mov         rcx,qword ptr [rcx]  \r\n00007FF9AB5D2197  jmp         00007FF9AB5D2200  \r\n00007FF9AB5D2199  mov         rcx,1DF900030D0h  ; case 2\r\n00007FF9AB5D21A3  mov         rcx,qword ptr [rcx]  \r\n00007FF9AB5D21A6  jmp         00007FF9AB5D2200  \r\n00007FF9AB5D21A8  mov         rcx,1DF900030D8h  ; case 3\r\n00007FF9AB5D21B2  mov         rcx,qword ptr [rcx]  \r\n00007FF9AB5D21B5  jmp         00007FF9AB5D2200  \r\n00007FF9AB5D21B7  mov         rcx,1DF900030E0h  ; case 4\r\n00007FF9AB5D21C1  mov         rcx,qword ptr [rcx]  \r\n00007FF9AB5D21C4  jmp         00007FF9AB5D2200  \r\n00007FF9AB5D21C6  mov         rcx,1DF900030E8h  ; case 5\r\n00007FF9AB5D21D0  mov         rcx,qword ptr [rcx]  \r\n00007FF9AB5D21D3  jmp         00007FF9AB5D2200  \r\n00007FF9AB5D21D5  mov         rcx,1DF900030F0h  ; case 6\r\n00007FF9AB5D21DF  mov         rcx,qword ptr [rcx]  \r\n00007FF9AB5D21E2  jmp         00007FF9AB5D2200  \r\n00007FF9AB5D21E4  mov         rcx,1DF900030F8h  ; case 7\r\n00007FF9AB5D21EE  mov         rcx,qword ptr [rcx]  \r\n\r\n; the three lines immediately following can be removed\r\n00007FF9AB5D21F1  jmp         00007FF9AB5D2200  \r\n00007FF9AB5D21F3  mov         rcx,1DF90003100h  ; case default\r\n00007FF9AB5D21FD  mov         rcx,qword ptr [rcx]  \r\n\r\n00007FF9AB5D2200  call        00007FF9AB5D1740  \r\n00007FF9AB5D2205  nop  \r\n00007FF9AB5D2206  add         rsp,20h  \r\n00007FF9AB5D220A  pop         rsi  \r\n00007FF9AB5D220B  ret\r\n```\r\n\r\nAdditionally, the registers used can be optimized by keeping the input value in `ecx/rcx` and not bouncing it through `esi` and `eax/rax`.\r\n\r\nFWIW, the reason I'm looking into this is that I'm investigating optimizing the `Marvin.GetHashCode(...)` logic, and I'm seeing patterns very similar to this in the optimized code."},{"Id":"8065190807","Type":"IssuesEvent","CreatedAt":"2018-08-03T23:06:57","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/19280","RelatedDescription":"Closed issue \"[Arm64] VIXL?\" (#19280) at dotnet/coreclr","RelatedBody":"Linaro is maintaining an open source aarch32/aarch64 assembler disassembler, based on work originally done by ARM.\r\n\r\nhttps://git.linaro.org/arm/vixl.git/about/LICENCE \r\n\r\nI have spent no time looking at it, but I am aware other projects are using this project.\r\n\r\nIt is not clear whether this might be useful in CoreCLR.  \r\n\r\nThis issue is just to mention its existence and allow it to possibly be considered.  Feel free to close...\r\n\r\n@BruceForstall \r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8064867453","Type":"PullRequestEvent","CreatedAt":"2018-08-03T21:18:17","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/9795","RelatedDescription":"Closed pull request \"Merge release/2.1.4xx to release/2.1.401\" (#9795) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.401.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.401\ngit reset --hard upstream/release/2.1.401\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-release/2.1.401 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8064862133","Type":"PullRequestEvent","CreatedAt":"2018-08-03T21:16:54","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9796","RelatedDescription":"Opened pull request \"Move to latest core-sdk LKG, netcoreapp3.0/netstandard2.0\" (#9796) at dotnet/cli","RelatedBody":"On a quest to re-enable code coverage tests and fix #9773, I encountered a yak and shaved it....\r\n\r\n* Bump core-sdk LKG to latest\r\n* Move netcoreap2.2 tests to netcoreapp3.0\r\n* Retarget to netcoreapp3.0 / netstandard2.0\r\n* Remove explicit references to Microsoft.NETCore.App and NETStandard.Library (use LKG implicit references instead)\r\n* Remove MicrosoftNETCoreAppPackageVersion from dependency versions\r\n* Use stable hostfxr for SDK resolver\r\n* Install 2.0 and 2.1 runtimes for netcorepp2.1 tests\r\n"},{"Id":"8064758024","Type":"PullRequestEvent","CreatedAt":"2018-08-03T20:50:40","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9795","RelatedDescription":"Opened pull request \"Merge release/2.1.4xx to release/2.1.401\" (#9795) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.401.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.401\ngit reset --hard upstream/release/2.1.401\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-release/2.1.401 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8041487850","Type":"IssuesEvent","CreatedAt":"2018-07-31T03:16:03","Actor":"DaqingshanAimi","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/846","RelatedDescription":"Closed issue \"Drawing bitmap save by EncoderParameters is bad in CentOS.\" (#846) at dotnet/standard","RelatedBody":"I have a code  to compression image,when system is windows is ok,image is 300Kb.But system is Centos is Bad,image is 1.5MB。I dont know reason.\r\n```\r\n  EncoderParameters myEncoderParameters = new EncoderParameters(1);\r\n                    EncoderParameter myEncoderParameter = new EncoderParameter(System.Drawing.Imaging.Encoder.Quality, 30);\r\n                    myEncoderParameters.Param[0] = myEncoderParameter;\r\n                    bitmap.Save(ms, GetEncoder(bitmap.RawFormat), myEncoderParameters);\r\n                    myEncoderParameters.Dispose();\r\n                    myEncoderParameter.Dispose();\r\n```"},{"Id":"8037444001","Type":"IssuesEvent","CreatedAt":"2018-07-30T12:40:42","Actor":"no1melman","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/847","RelatedDescription":"Opened issue \"System.Text.RegularExpressions.Group.Name is not in Standard\" (#847) at dotnet/standard","RelatedBody":"So looking at the [reference source for .NET 472](https://referencesource.microsoft.com/#System/regex/system/text/regularexpressions/RegexGroup.cs,800cd6e3cb366db4), the class has the public property `Name`:\r\n\r\n    public string Name\r\n        {\r\n            get\r\n            {\r\n                return _name;\r\n            }\r\n        }\r\n\r\nHowever, the decompiled source from netstandard gives this:\r\n\r\n```\r\n  public class Group : Capture\r\n  {\r\n    internal Group();\r\n\r\n    /// <summary>Gets a collection of all the captures matched by the capturing group, in innermost-leftmost-first order (or innermost-rightmost-first order if the regular expression is modified with the <see cref=\"F:System.Text.RegularExpressions.RegexOptions.RightToLeft\"></see> option). The collection may have zero or more items.</summary>\r\n    /// <returns>The collection of substrings matched by the group.</returns>\r\n    public CaptureCollection Captures { get; }\r\n\r\n    /// <summary>Gets a value indicating whether the match is successful.</summary>\r\n    /// <returns>true if the match is successful; otherwise, false.</returns>\r\n    public bool Success { get; }\r\n\r\n    /// <summary>Returns a Group object equivalent to the one supplied that is safe to share between multiple threads.</summary>\r\n    /// <param name=\"inner\">The input <see cref=\"T:System.Text.RegularExpressions.Group\"></see> object.</param>\r\n    /// <returns>A regular expression Group object.</returns>\r\n    /// <exception cref=\"T:System.ArgumentNullException\"><paramref name=\"inner\">inner</paramref> is null.</exception>\r\n    public static Group Synchronized(Group inner);\r\n  }\r\n```"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8065378467","Type":"PullRequestEvent","CreatedAt":"2018-08-04T00:45:12","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31594","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-26804-01 (master)\" (#31594) at dotnet/corefx","RelatedBody":""},{"Id":"8065366000","Type":"PullRequestEvent","CreatedAt":"2018-08-04T00:36:48","Actor":"BruceForstall","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/30923","RelatedDescription":"Merged pull request \"Change arm64 build to use public VS tools instead of private toolset\" (#30923) at dotnet/corefx","RelatedBody":""},{"Id":"8065336501","Type":"PullRequestEvent","CreatedAt":"2018-08-04T00:19:03","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31593","RelatedDescription":"Opened pull request \"Another Case where millisecond Granularity was missed\" (#31593) at dotnet/corefx","RelatedBody":"Related to https://github.com/dotnet/corefx/issues/31379\r\n\r\nIn the above mentioned issue, when we were setting lastAccessTime the attributes after seconds were getting dropped and vice versa behaviour and vice versa behaviour while setting lastWriteTime.\r\nThis was fixed by  https://github.com/dotnet/corefx/pull/31522 \r\n\r\nAnother case that was missed by https://github.com/dotnet/corefx/pull/31522 was setting  and getting LastWrite\\AccessTime property. the tests existed for this case but in all such cases the value for millisecond was zero. we were still setting zero for this case. This PR corrects that.\r\nThe PR also modifies test for this case and add some more tests for more cases"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8065695704","Type":"PullRequestEvent","CreatedAt":"2018-08-04T05:13:22","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/29071","RelatedDescription":"Opened pull request \"Avoid reporting \"uninitialized field\" for field of unconstrained type parameter in [NonNullTypes(false)] context\" (#29071) at dotnet/roslyn","RelatedBody":""},{"Id":"8065666418","Type":"IssuesEvent","CreatedAt":"2018-08-04T04:44:44","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29049","RelatedDescription":"Closed issue \"InvalidOperationException from TypeSymbolWithAnnotations.GetHashCode()\" (#29049) at dotnet/roslyn","RelatedBody":"`csc /langversion:8.0 c.cs`\r\n```c#\r\n[module: System.Runtime.CompilerServices.NonNullTypes(true)]\r\ninterface I<T> { }\r\nclass A : I<A> { }\r\nclass B<T> where T : I<A?> { }\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        new B<A>();\r\n    }\r\n}\r\n```\r\n```\r\n(9,15): warning CS8631: The type 'A' cannot be used as type parameter 'T' in the generic type or method 'B<T>'. Nullability of type argument 'A' doesn't match constraint type 'I<A?>'.\r\n\r\nUnhandled Exception: System.InvalidOperationException: This program location is thought to be unreachable.\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbolWithAnnotations.GetHashCode()\r\n   at Roslyn.Utilities.Hash.Combine[T](T newKeyPart, Int32 currentKey)\r\n   at Microsoft.CodeAnalysis.DiagnosticInfo.GetHashCode()\r\n   at Microsoft.CodeAnalysis.DiagnosticWithInfo.GetHashCode()\r\n   at System.Collections.Generic.GenericEqualityComparer`1.GetHashCode(T obj)\r\n   at System.Collections.Generic.HashSet`1.InternalGetHashCode(T item)\r\n   at System.Collections.Generic.HashSet`1.AddIfNotPresent(T value)\r\n   at Microsoft.CodeAnalysis.CommonCompiler.ReportErrors(IEnumerable`1 diagnostics, TextWriter consoleOutput, ErrorLogger errorLoggerOpt)\r\n```"},{"Id":"8065665981","Type":"IssuesEvent","CreatedAt":"2018-08-04T04:44:16","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29048","RelatedDescription":"Closed issue \"Nested nullability is dropped from constraint when type is from different assembly\" (#29048) at dotnet/roslyn","RelatedBody":"No warning reported for `new A<string>()` though `string` does not satisfy the `IEquatable<string?>` constraint.\r\n\r\n`csc /langversion:8.0 /t:library a.cs`\r\n```c#\r\nusing System;\r\npublic class A<T> where T : IEquatable<string?>\r\n{\r\n}\r\n```\r\n`csc /langversion:8.0 /r:a.dll b.cs`\r\n```c#\r\nclass B\r\n{\r\n    static void Main()\r\n    {\r\n        object o = new A<string>(); // warning\r\n    }\r\n}\r\n```"},{"Id":"8065665615","Type":"IssuesEvent","CreatedAt":"2018-08-04T04:43:54","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29041","RelatedDescription":"Closed issue \"StackOverflowException loading type parameter constraint from metadata\" (#29041) at dotnet/roslyn","RelatedBody":"`csc /langversion:8.0 /t:library a.cs`\r\n```c#\r\nusing System;\r\npublic class A<T> where T : IEquatable<T>\r\n{\r\n}\r\n```\r\n`csc /langversion:8.0 /r:a.dll b.cs`\r\n```c#\r\nclass B\r\n{\r\n    static void Main()\r\n    {\r\n        new A<string>();\r\n    }\r\n}\r\n```"},{"Id":"8065663557","Type":"PullRequestEvent","CreatedAt":"2018-08-04T04:41:53","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/29045","RelatedDescription":"Merged pull request \"Avoid IsValueType in ApplyNullableTransforms\" (#29045) at dotnet/roslyn","RelatedBody":"Avoid calling `IsValueType` in `ApplyNullableTransforms` since `ApplyNullableTransforms` may be called while the `TypeSymbol` is being constructed. (In the case of #29041, when constructing a `PETypeParameterSymbol` where the constraints reference the type parameter.)\r\n\r\nCalling `IsValueType` in `ApplyNullableTransforms` is not necessary since the `IsAnnotated` bit is only set in the `[Nullable(new bool[])]` attribute for nullable reference types."},{"Id":"8065575351","Type":"PullRequestEvent","CreatedAt":"2018-08-04T03:21:25","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/29036","RelatedDescription":"Merged pull request \"Simplify conditional expressions that are of the form 'expr ? true : false'\" (#29036) at dotnet/roslyn","RelatedBody":"When we're offering to simplify:\r\n\r\n```c#\r\nif (expr)\r\n{\r\n    return true;\r\n}\r\n\r\nreturn false;\r\n```\r\n\r\noffer to generate ```return expr``` not ```return expr ? true : false```.\r\n\r\n[jcouv updated:] Fixes https://github.com/dotnet/roslyn/issues/28999"},{"Id":"8065575346","Type":"IssuesEvent","CreatedAt":"2018-08-04T03:21:25","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/28999","RelatedDescription":"Closed issue \"UseConditional doesn't simplify `? true : false` and not other refactoring offered\" (#28999) at dotnet/roslyn","RelatedBody":"If you invoke UseConditional on the following code, we produce a `? true : false` conditional (shown in second code snippet).\r\nEither this refactoring should clean this up, or we should have a second refactoring to do that.\r\n\r\n```C#\r\n            bool isSystemNamespace()\r\n            {\r\n                if (this.Name == \"System\" && this.ContainingNamespace.IsGlobalNamespace)\r\n                {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n```\r\n\r\n```C#\r\n            bool isSystemNamespace()\r\n            {\r\n                return this.Name == \"System\" && this.ContainingNamespace.IsGlobalNamespace ? true : false;\r\n            }\r\n````\r\n![image](https://user-images.githubusercontent.com/12466233/43538405-cb3e7616-9576-11e8-9667-a2ad10a06c66.png)\r\n"},{"Id":"8065432329","Type":"IssuesEvent","CreatedAt":"2018-08-04T01:23:17","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/29070","RelatedDescription":"Opened issue \"Incorrectly reported warning CS1574: XML comment has cref attribute that could not be resolved\" (#29070) at dotnet/roslyn","RelatedBody":"Repro: \r\n\r\nCheckout branch of https://github.com/dotnet/roslyn/pull/29069 (if not merged yet) and open\r\n\r\n`src\\VisualStudio\\Core\\Impl\\CodeModel\\CodeModelTaskExtensions.cs`\r\n\r\nChange doc comment:\r\n\r\n```xml\r\n  /// <summary>\r\n  /// Does a Roslyn.Utilities.TaskExtensions.WaitAndGetResult{T} for CodeModel.\r\n  /// </summary>\r\n```\r\n\r\nto \r\n\r\n```xml\r\n  /// <summary>\r\n  /// Does a <see cref=\"Roslyn.Utilities.TaskExtensions.WaitAndGetResult{T}\"/> for CodeModel.\r\n  /// </summary>\r\n```\r\n\r\nExpected: \r\n\r\nNo warning. \r\n\r\nActual:\r\n\r\n```\r\nwarning CS1574: XML comment has cref attribute 'WaitAndGetResult{T}' that could not be resolved\r\n```\r\n\r\nCalling method:\r\n```C#\r\nRoslyn.Utilities.TaskExtensions.WaitAndGetResult<T>(task, cancellationToken);\r\n```\r\n\r\nin the method body works, so the method is definitely accessible in this context."},{"Id":"8065298945","Type":"PullRequestEvent","CreatedAt":"2018-08-03T23:59:06","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/29069","RelatedDescription":"Opened pull request \"Interactive projects refactoring\" (#29069) at dotnet/roslyn","RelatedBody":"Merges interactive projects into corresponding language service projects and InteractiveComponents VSIX to Roslyn.VisualStudio.Setup.\r\n\r\nInteractiveHost*.exe now lives under `DesktopHost` subdirectory of Roslyn.VisualStudio.Setup VSIX install directory. The directory contains the minimal set of dependencies that the host needs to execute scripts.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8064790381","Type":"PullRequestEvent","CreatedAt":"2018-08-03T20:58:37","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6178","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#6178) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik"},{"Id":"8064622571","Type":"PullRequestEvent","CreatedAt":"2018-08-03T20:17:39","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6178","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#6178) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8063778030","Type":"PullRequestEvent","CreatedAt":"2018-08-03T17:03:17","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6177","RelatedDescription":"Opened pull request \"Add support for reflection-invoking methods returning ByRefs\" (#6177) at dotnet/corert","RelatedBody":"This is a port of dotnet/coreclr#17732."},{"Id":"8061489536","Type":"IssuesEvent","CreatedAt":"2018-08-03T09:12:35","Actor":"bernd5","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6176","RelatedDescription":"Opened issue \"Documentation: cpp.rsp\" (#6176) at dotnet/corert","RelatedBody":"If I just do what is written in \"how-to-build-and-run-ilcompiler-in-visual-studio.md\" I get the following error:\r\n\r\nInternal.CommandLine.CommandLineException: \"No files matching F:\\Projekte\\corert\\bin\\obj\\Windows_NT.x64.Debug\\cpp.rsp\"\r\n\r\nThis is true, because there is no rsp file...\r\nShould it be generated during compilation? What is the usage of this file? Can I use a csproj file, too?\r\n\r\n\r\n"},{"Id":"8060630835","Type":"PullRequestEvent","CreatedAt":"2018-08-03T05:28:05","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6145","RelatedDescription":"Closed pull request \"[JustForView]Moved LocalVariableInfo to shared\" (#6145) at dotnet/corert","RelatedBody":"Related Coreclr PR https://github.com/dotnet/coreclr/pull/19184"},{"Id":"8060599754","Type":"PullRequestEvent","CreatedAt":"2018-08-03T05:15:50","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6175","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6175) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik"},{"Id":"8059914163","Type":"PullRequestEvent","CreatedAt":"2018-08-03T00:37:07","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6175","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6175) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8059540806","Type":"PullRequestEvent","CreatedAt":"2018-08-02T22:26:32","Actor":"tannergooding","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6174","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6174) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding"},{"Id":"8059172208","Type":"PullRequestEvent","CreatedAt":"2018-08-02T20:58:09","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6174","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6174) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8058839485","Type":"PullRequestEvent","CreatedAt":"2018-08-02T19:50:36","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6156","RelatedDescription":"Merged pull request \"Ready To Run Test Support\" (#6156) at dotnet/corert","RelatedBody":"This set of commits adds support for validating that ready-to-run binaries produced by ILCompiler are functional. That is, the native methods added into the IL Assembly to make fat ready-to-run binary are executed and not silently jitted. This is done by running a TraceEvent session in a test harness which executes the test via the CoreRun.exe CoreCLR test host.\r\n\r\nIn order to execute tests, a copy of CoreCLR including CoreRun.exe is required. Use a depproj to restore NetCore.App and NetCore.TestHost to a single folder in the bin/obj output folder. There is a similar XUnit runtime restore project under src\\Common\\test-runtime that we should move under \\external. This matches what other dotnet repos do. I can do that once this set of changes is approved.\r\n\r\nThe ReadyToRun ETW harness uses Microsoft.Diagnostics.Tracing NuGet package to host an ETW session while running the test executable. All jitted methods in the test binary are recorded and optionally filtered out from a white list. Any remaining methods represent methods we did not have ready-to-run implementations for at runtime. We will need to expand the logic here as we add more features, particularly for generics over value types which are currently jitted most of the time. Currently the ETW harness does dynamic capture of events. We can quite easily switch to emitting an ETL file and replaying it afterwards if needed, too.\r\n\r\nFinally, there are a set of test system integration changes to wire up ILCompiler in ready-to-run mode, to work around the fact that we directly emit the final binary and don't need a link step, and handle the extra test execution parameters (we need to pass in the location of dotnet.exe, the ETW harness path, and the location of the CoreCLR runtime).\r\n\r\nThe test runs as part of the full suite. For inner loop testing we can run `runtest.cmd /mode readytorun`"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8065450447","Type":"IssuesEvent","CreatedAt":"2018-08-04T01:37:47","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2451","RelatedDescription":"Closed issue \"Multiple framework target and binding redirect problem\" (#2451) at dotnet/sdk","RelatedBody":"Please let me know if this is not the right place for this type of issue.\r\n\r\n### Description\r\n* Multiple-targeted DLL for `net472` and `netstandard2.0`\r\n* The .NET Framework version of the dll is put in the GAC. It has to be since it is called from code that I injected into other assemblies via the .NET Profiler API.\r\n* After building (either in VS or msbuild command line), there is a `System.Interactive.Async.dll` in the binaries directory (e.g., `bin\\debug\\net471`). It is the `3.0.3000.0` version.\r\n* I then go through my automated steps to install my assemblies into a folder from which I add all of them to the GAC (this is just for the `net471` , not the `netcore2.1`, target).\r\n* I reset IIS, then run a .NET Framework-based web application (it was built against .NET Framework 4.6.1)\r\n* My profiler instruments the app, and when there is a call to my assembly, an exception occurs:\r\n\r\n```\r\nException Could not load file or assembly 'System.Interactive.Async, Version=3.0.1000.0, Culture=neutral, PublicKeyToken=94bc3704cddfc263' or one of its dependencies. The system cannot find the file specified.\r\n```\r\n\r\n* Notice that it is *not* the same version as the one that was in my `net471` binaries folder.\r\n\r\n* I discovered that `Grpc.Core`, one of my dependent assemblies, relies on version `3.0.1000.0` of `System.Interactive.Async`. \r\n\r\n* I've tried adding a binding redirect both from `3.0.1000.0` to `3.0.3000.0` (and the other way, from `3.0.3000.0` to `3.0.1000.0`) in my assembly's `app.config`. But it doesn't seem to work. \r\n\r\n* I even tried putting the binding redirect in a file named `Grpc.Core.dll.config` in the same directory as the dlls (not in the GAC though), but that didn't help.\r\n\r\n* Finally, I have no idea why the newer version of `System.Interactive.Async.dll` is even being put in my `net471` binaries folder. I walked through all of the assemblies I include in ILSpy and none of them pull that in. \r\n\r\nAny help deciphering what is going on would be fantastic. Thanks in advance!\r\n\r\nBob"},{"Id":"8065365184","Type":"IssuesEvent","CreatedAt":"2018-08-04T00:36:17","Actor":"tmat","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2454","RelatedDescription":"Opened issue \"Transitive project references missing aliases\" (#2454) at dotnet/sdk","RelatedBody":"Repro: A set of projects that have P2P references like so:\r\n\r\nD -> C \r\nC -> A (with alias = A)\r\nC -> B\r\n\r\nA and B contain class of the same name. C is ok since it only sees one definition unaliased. D ends up implicitly referencing A and B, but without any aliases. Hence D reports ambiguous reference when it tries to access the class.\r\n\r\nUnzip [Aliases.zip](https://github.com/dotnet/sdk/files/2259084/Aliases.zip) and run `dotnet build` in directory `D`.\r\n"},{"Id":"8064759138","Type":"PullRequestEvent","CreatedAt":"2018-08-03T20:50:56","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2453","RelatedDescription":"Opened pull request \"Merge release/2.2.1xx to master\" (#2453) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1025145757714640896","CreatedAt":"2018-08-02T22:26:09+00:00","UserScreenname":"dotnet","Text":"Tiered Compilation Preview in .NET Core 2.1 https://t.co/iDmpwcq86K by @noahsfalk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":214,"FavoriteCount":131,"RawContent":null},{"Id":"1022528693199990784","CreatedAt":"2018-07-26T17:06:52+00:00","UserScreenname":"dotnet","Text":"#dotNETConf is partnering with organizers around the globe to bring you local in-person events and watch parties! J… https://t.co/jOUga16bB0","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":154,"FavoriteCount":81,"RawContent":null}]}},"RunOn":"2018-08-04T05:30:28.2712116Z","RunDurationInMilliseconds":8761}