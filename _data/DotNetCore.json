{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing ML.NET 1.2 and Model Builder updates (Machine Learning for .NET)","PublishedOn":"2019-07-17T19:25:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce ML.NET 1.2 and updates to Model Builder and the CLI. ML.NET is an open-source and cross-platform machine learning framework for .NET developers. ML.NET also includes Model...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-2-and-model-builder-updates-machine-learning-for-net/","RawContent":null},{"Title":"Write Better Code Faster with Roslyn Analyzers","PublishedOn":"2019-07-10T16:40:11+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Roslyn, the .NET compiler platform, helps you catch bugs even before you run your code. One example is Roslyn’s spellcheck analyzer that is built into Visual Studio. Let’s say you are creating a...","Href":"https://devblogs.microsoft.com/dotnet/write-better-code-faster-with-roslyn-analyzers/","RawContent":null},{"Title":".NET Core July 2019 Updates – 2.1.12 and 2.2.6","PublishedOn":"2019-07-09T17:50:51+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a...","Href":"https://devblogs.microsoft.com/dotnet/net-core-july-2019/","RawContent":null},{"Title":".NET Framework July 2019 Security and Quality Rollup","PublishedOn":"2019-07-09T17:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the July 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update for .NET Framework.\nSecurity\nCVE-2019-1006 – WCF/WIF SAML Token Authentication Bypass...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-july-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Framework June 27, 2019 Cumulative Update for Windows 10 version 1903","PublishedOn":"2019-06-27T18:01:46+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we released the June 2019 Cumulative Update for .NET Framework 3.5 and 4.8 on Windows 10 version 1903.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-27-2019-cumulative-update-for-windows-10-version-1903/","RawContent":null},{"Title":"Help us shape the future of .NET for Apache Spark","PublishedOn":"2019-06-20T17:58:41+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Apache Spark™ is a general-purpose distributed processing engine for analytics over large data set typically terabytes or petabytes of data. Apache Spark can be used for processing batches of data,...","Href":"https://devblogs.microsoft.com/dotnet/help-us-shape-the-future-of-net-for-apache-spark/","RawContent":null},{"Title":"Create interactive documentation with the new Try .NET template","PublishedOn":"2019-06-20T16:05:37+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In our previous post, we announced dotnet try a global tool which allows developers to create interactive workshops and documentation. Tutorials created with dotnet try let users start learning...","Href":"https://devblogs.microsoft.com/dotnet/create-interactive-documentation-with-the-new-try-net-template/","RawContent":null},{"Title":".NET Framework June 2019 Preview of Quality Rollup","PublishedOn":"2019-06-19T00:12:52+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the June 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nWPF1\nAddresses an issue in which...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"The Evolving Infrastructure of .NET Core","PublishedOn":"2019-06-18T18:11:59+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"With .NET Core 3.0 Preview 6 out the door, we thought it would be useful to take a brief look at the history of our infrastructure systems and the significant improvements that have been made in the...","Href":"https://devblogs.microsoft.com/dotnet/the-evolving-infrastructure-of-net-core/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 6 and Entity Framework 6.3 Preview 6","PublishedOn":"2019-06-13T20:35:52+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"New previews of the next versions of EF Core and EF 6 are now available on NuGet.Org.\nWhat is new in EF Core 3.0 Preview 6\nIn recent months, a lot of our efforts have been focused on a new LINQ...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-6-and-entity-framework-6-3-preview-6/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"9812903344","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:28:59","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Merged pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9812878014","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:23:52","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Opened pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9971220766","Type":"IssuesEvent","CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Opened issue \"System.Text.Json usability study results\" (#117) at dotnet/announcements","RelatedBody":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304."},{"Id":"9963969636","Type":"IssuesEvent","CreatedAt":"2019-07-08T03:13:39","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Opened issue \"Updates to releases.json (.NET Core release metadata)\" (#116) at dotnet/announcements","RelatedBody":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, msbuild, nuget, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is a partial example of the new array based on the upcoming July update. \r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n  \"sdks\": [\r\n    {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": [\r\n            {\r\n            \"name\": \"\",\r\n            \"rid\": \"\",\r\n            \"url\": \"\",\r\n            \"hash\": \"\"\r\n            }\r\n        ]\r\n    }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the communitiy which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility comprimises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10034311093","Type":"PullRequestEvent","CreatedAt":"2019-07-18T04:25:35","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25765","RelatedDescription":null,"RelatedBody":"RuntimeHelpers is a better location for this than JitHelpers.\r\n\r\nWe can then have this be in the same Type in CoreRT as well.\r\n\r\nhttps://github.com/dotnet/corefx/issues/33706#issuecomment-512156540"},{"Id":"10034310927","Type":"PullRequestEvent","CreatedAt":"2019-07-18T04:25:32","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25765","RelatedDescription":"Closed pull request \"Move GetRawData & GetRawSzArrayData to RuntimeHelpers instead of JitHelpers\" (#25765) at dotnet/coreclr","RelatedBody":"RuntimeHelpers is a better location for this than JitHelpers.\r\n\r\nWe can then have this be in the same Type in CoreRT as well.\r\n\r\nhttps://github.com/dotnet/corefx/issues/33706#issuecomment-512156540"},{"Id":"10034099235","Type":"IssuesEvent","CreatedAt":"2019-07-18T03:22:44","Actor":"SilentCC","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25148","RelatedDescription":"Closed issue \"Why doesn't heap memory used go down after a GC in .NET Core2.2\" (#25148) at dotnet/coreclr","RelatedBody":"I wrote a test program to explore the how does GC works in ASP.NET Core.\r\n\r\nThe program ran in docker with memory limits set below 9mb.\r\n\r\nI found that the program will be killed by docker because of it used out of memory that docker limited.\r\n\r\nI thought that the GC didn't be triggered. But when I recorded the GC information in program,I found that it occurs too many times while the heap memory didn't go down. Why ?\r\n\r\nThe version of ASP.NET Core is 2.2 . I have already tried the latest version 3.0-preview5, It works fine.\r\n\r\nMy code is below:\r\n\r\n```\r\n            if (GCSettings.IsServerGC == true)\r\n                    Console.WriteLine(\"Server GC\");\r\n            else\r\n                    Console.WriteLine(\"GC WorkStationGC\");\r\n            byte[] buffer;\r\n            for (int i = 0; i <= 100; i++)\r\n            {\r\n                buffer = new byte[ 1024 * 1024];\r\n\r\n\r\n                Console.WriteLine($\"allocate number {i+1} objet \");\r\n    \r\n                var num = GC.CollectionCount(0);\r\n                var usedMemory = GC.GetTotalMemory(false) /1024 /1024;\r\n\r\n                Console.WriteLine($\"heap use {usedMemory} mb\");\r\n                Console.WriteLine($\"GC occurs {num} times\");\r\n                Thread.Sleep(TimeSpan.FromSeconds(5));\r\n           }\r\n\r\n```\r\ndocker run command:\r\n```\r\ndocker run -m 9mb -t xxx\r\n```\r\n\r\nthe result with .NET Core2.2 :\r\n\r\n```\r\nGC WorkStationGC\r\nallocate number 1 objet \r\nheap use 1 mb\r\nGC occurs 0 times\r\nallocate number 2 objet \r\nheap use 2 mb\r\nGC occurs 0 times\r\nallocate number 3 objet \r\nheap use 3 mb\r\nGC occurs 0 times\r\nallocate number 4 objet \r\nheap use 1 mb\r\nGC occurs 1 times\r\nallocate number 5 objet \r\nheap use 2 mb\r\nGC occurs 1 times\r\nallocate number 6 objet \r\nheap use 3 mb\r\nGC occurs 1 times\r\nallocate number 7 objet \r\nheap use 4 mb\r\nGC occurs 2 times\r\nallocate number 8 objet \r\nheap use 5 mb\r\nGC occurs 3 times\r\nallocate number 9 objet \r\nheap use 6 mb\r\nGC occurs 4 times\r\nallocate number 10 objet \r\nheap use 7 mb\r\nGC occurs 5 times\r\nallocate number 11 objet \r\nheap use 8 mb\r\nGC occurs 6 times\r\nallocate number 12 objet \r\nheap use 9 mb\r\nGC occurs 7 times\r\nroot@server:~/ConsoleApp3# \r\n```\r\n\r\nThe program exit when it allocated memory exceeds 9mb.While GC occurs 7 times.It seems that GC doesn't work at all.\r\n\r\nThe result with .NET Core 3.0 \r\n```\r\nGC WorkStationGC\r\nallocate number 1 objet \r\nheap use 1 mb\r\nGC occurs 0 times\r\nallocate number 2 objet \r\nheap use 2 mb\r\nGC occurs 0 times\r\nallocate number 3 objet \r\nheap use 3 mb\r\nGC occurs 0 times\r\nallocate number 4 objet \r\nheap use 1 mb\r\nGC occurs 1 times\r\nallocate number 5 objet \r\nheap use 2 mb\r\nGC occurs 1 times\r\nallocate number 6 objet \r\nheap use 3 mb\r\nGC occurs 1 times\r\nallocate number 7 objet \r\nheap use 1 mb\r\nGC occurs 2 times\r\nallocate number 8 objet \r\nheap use 2 mb\r\nGC occurs 2 times\r\nallocate number 9 objet \r\nheap use 3 mb\r\nGC occurs 2 times\r\nallocate number 10 objet \r\nheap use 1 mb\r\nGC occurs 3 times\r\nallocate number 11 objet \r\nheap use 2 mb\r\nGC occurs 3 times\r\nallocate number 12 objet \r\nheap use 3 mb\r\nGC occurs 3 times\r\nallocate number 13 objet \r\nheap use 1 mb\r\nGC occurs 4 times\r\nallocate number 14 objet \r\nheap use 2 mb\r\nGC occurs 4 times\r\nallocate number 15 objet \r\nheap use 3 mb\r\nGC occurs 4 times\r\nallocate number 16 objet \r\nheap use 1 mb\r\nGC occurs 5 times\r\nallocate number 17 objet \r\nheap use 2 mb\r\n....\r\n```\r\n\r\nThe program runs fine.\r\n\r\nI submit the same question in stack overflow simultaneous.\r\nhttps://stackoverflow.com/questions/56578084/why-doesnt-heap-memory-used-go-down-after-a-gc-in-clr"},{"Id":"10034067136","Type":"IssuesEvent","CreatedAt":"2019-07-18T03:13:54","Actor":"SilentCC","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25767","RelatedDescription":"Opened issue \"Out Of Memory Exception in .NET Core 3.0 preview 5\" (#25767) at dotnet/coreclr","RelatedBody":"Since I update my application to .NET Core 3.0 preview 5 in container scenario, the OutOfMemory exceptions come out sometimes.\r\n\r\nProduction Environments:\r\n\r\n*   production cluster:  docker swarm\r\n*   docker container cpu limit :1.5\r\n*   docker container memory limit: 2G\r\n*   docker container duplicates : 2\r\n*   PV : about  60000 per day\r\n\r\nPrevious version is .NET Core 2.2 , and it worked fine all the time.\r\nIt threw lots of OutOfMemory exceptions and restarted by docker finally last night.I think its memory exceeded docker memory limit. \r\n\r\nIt was updated to .NET Core 3.0 preview5 a few days ago.\r\n\r\nHere is error log, note that OutOfMemory exception may occurs on many different places .\r\n\r\n```\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.Data.SqlClient.SqlCommand.<>c.<ExecuteDbDataReaderAsync>b__126_0(Task`1 result)\r\n   at System.Threading.Tasks.ContinuationResultTaskFromResultTask`2.InnerInvoke()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\n```\r\n \"Message\": \"Exception of type 'System.OutOfMemoryException' was thrown.\",\r\n  \"Source\": \"System.Private.CoreLib\",\r\n  \"StackTraceString\": \"   \r\n     at System.Collections.Generic.Dictionary`2.Initialize(Int32 capacity)\\n   at System.Collections.Generic.Dictionary`2..ctor(Int32 capacity, IEqualityComparer`1 comparer)\\n \r\n     at System.Linq.Expressions.Compiler.CompilerScope..ctor(Object node, Boolean isMethod)\\n   at System.Linq.Expressions.Compiler.VariableBinder.VisitLambda[T](Expression`1 node)\\n   \r\n     at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\\n   at System.Linq.Expressions.Expression`1.Compile(Boolean preferInterpretation)\\n  \r\n```\r\n\r\n```\r\n \"Message\": \"Exception of type 'System.OutOfMemoryException' was thrown.\",\r\n  \"Source\": \"System.Private.CoreLib\",\r\n  \"StackTraceString\": \"   \r\n       at System.GC.AllocateNewArray(IntPtr typeHandle, Int32 length, Boolean zeroingOptional)\\n   at System.GC.AllocateUninitializedArray[T](Int32 length)\\n   \r\n       at System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1.Rent(Int3  2 minimumLength)\\n  \r\n       at Microsoft.AspNetCore.Http.Extensions.StreamCopyOperation.CopyToAsync(Stream source, Stream destination, Nullable`1 count, Int32 bufferSize, CancellationToken cancel)\\n   at Microsoft.AspNetCore.StaticFiles.StaticFileContext.SendAsync()\\n   \r\n       at Microsoft.AspNetCore.StaticFiles.StaticFileContext.ServeStaticFile(HttpContext context, RequestDelegate next)\\n   \r\n       at Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.Invoke(HttpContext context)\\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.<Invoke>g__Awaited|6_0(ExceptionHandlerMiddleware middleware, HttpContext context, Task task)\",\r\n```\r\n\r\n```\r\nMicrosoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.Linq.Expressions.Compiler.CompilerScope.SetParent(LambdaCompiler lc, CompilerScope parent)\r\n   at System.Linq.Expressions.Compiler.CompilerScope.Enter(LambdaCompiler lc, CompilerScope parent)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitLambdaBody(CompilerScope parent, Boolean inlined, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\r\n   at System.Linq.Expressions.Expression`1.Compile(Boolean preferInterpretation)\r\n   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateFactory(Type instanceType, Type[] argumentTypes)\r\n   at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Boolean& initialized, Object& syncLock, Func`1 valueFactory)\r\n   at Microsoft.Extensions.Http.DefaultTypedHttpClientFactory`1.CreateClient(HttpClient httpClient)\r\n   at Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.<>c__DisplayClass10_0`2.<AddTypedClient>b__0(IServiceProvider s)\r\n   at ResolveService(ILEmitResolverBuilderRuntimeContext , ServiceProviderEngineScope )\r\n   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetService(IServiceProvider sp, Type type, Type requiredBy, Boolean isDefaultParameterRequired)\r\n   at lambda_method(Closure , IServiceProvider , Object[] )\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFactoryProvider.<>c__DisplayClass5_0.<CreateControllerFactory>g__CreateController|0(ControllerContext controllerContext)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResourceFilter>g__Awaited|24_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.<Invoke>g__Awaited|6_0(ExceptionHandlerMiddleware \r\n```\r\n\r\nI suppose that  GC may be affected by GCHeapHardLimit in .NET Core 3.0.\r\nAny one can help me? Thank you very much!\r\n"},{"Id":"10033567300","Type":"PullRequestEvent","CreatedAt":"2019-07-18T00:54:57","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25766","RelatedDescription":"Opened pull request \"Arm32 restore d8-d15 in ThrowExceptionFromContextInternal\" (#25766) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10034452942","Type":"PullRequestEvent","CreatedAt":"2019-07-18T05:09:30","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/pull/11937","RelatedDescription":null,"RelatedBody":"dotnet/core-setup#7137 is fixed and so we can now unpin DependencyModel\r\n\r\nAlso, it turns out that we were running msbuild on the stage0 runtime during tests, instead of the incoming runtime from core-setup, which is now fixed. This showed up as a missing method exception during local testing of this change."},{"Id":"10034452773","Type":"PullRequestEvent","CreatedAt":"2019-07-18T05:09:25","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/11937","RelatedDescription":"Closed pull request \"Unpin DependencyModel\" (#11937) at dotnet/cli","RelatedBody":"dotnet/core-setup#7137 is fixed and so we can now unpin DependencyModel\r\n\r\nAlso, it turns out that we were running msbuild on the stage0 runtime during tests, instead of the incoming runtime from core-setup, which is now fixed. This showed up as a missing method exception during local testing of this change."},{"Id":"10033857448","Type":"PullRequestEvent","CreatedAt":"2019-07-18T02:16:40","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11941","RelatedDescription":"Opened pull request \"[master] Update dependencies from aspnet/AspNetCore\" (#11941) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190717.9\r\n- **Date Produced**: 7/18/2019 2:16 AM\r\n- **Commit**: c8b6bb3f419b3c2065662fc40e27769f132310de\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19367.9\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n"},{"Id":"10033753899","Type":"IssuesEvent","CreatedAt":"2019-07-18T01:48:26","Actor":"winnieryl","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/11940","RelatedDescription":"Opened issue \" dotnet-install.sh does not download correct version on RHEL 6 workstation\" (#11940) at dotnet/cli","RelatedBody":"https://dot.net/v1/dotnet-install.sh\r\nthis script, at line 151, it does not consider RHEL 6 Workstation, when I run this on rhel6 workstation, it downloads the wrong version fo dotnet runtime.\r\n\r\n## Steps to reproduce\r\nprepare a rhel 6 workstation, run dotnet-install.sh to install dotnet runtime\r\n\r\n## Expected  behavior\r\ndownload dotnet runtime rhel6 version\r\n\r\n## Actual behavior\r\ndoes not download the correct version\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10031376725","Type":"IssuesEvent","CreatedAt":"2019-07-17T18:04:22","Actor":"codernator","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1352","RelatedDescription":"Opened issue \"Interesting BadImageFormatException involving generics, deferred functions, and closures.\" (#1352) at dotnet/standard","RelatedBody":"I stumbled over an edge case in which it is possible to write code that compiles but generates a BadImageFormatException with HResult: 0x8007000B during runtime. I originally found it in a C# 7.3 dotnet core 2.2 API application, but have reproduced it with a simple example in LINQPad 5, which uses C#7 and I believe dotnet standard 2.  The below contains both the exception generating code as well as similar counter-examples.\r\n\r\n\t/// <summary>\r\n\t/// Demonstrate how a generic function passing a closure to of a deferred function\r\n\t/// can create a BadImageFormatException. This includes an example of the exception,\r\n\t/// and similar examples that do not create the exception.\r\n\t/// </summary>\r\n\tstatic void Main()\r\n\t{\r\n\t\t// The data type and value is not important to this example.\r\n\t\t// Only the context in which this variable is used is important.\r\n\t\tvar myClosure = 0;\r\n\t\t\r\n\t\tHereComesTheException(new object[0]);\r\n\t\t//NonGenericNoException(new object[0]);\r\n\t\t//GenericWorkAroundA(new object[0]);\r\n\t\t//GenericWorkAroundB(new object[0]);\r\n\t\r\n\t\t// This fucntion creates a BadImageFormatException. Note the\r\n\t\t// use of myClosure within a deferred function that is\r\n\t\t// inline to a foreach. As far as I could read the IL, there is no\r\n\t\t// reference to myClosure in the scope of this function.\r\n\t\tvoid HereComesTheException<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tforeach (var thing in things.Where(tt => myClosure == 0)) {}\r\n\t\t}\r\n\t\r\n\t\t// This function doesn't create a BadImageFormatException...\r\n\t\t// The only difference from HereComesTheException is that\r\n\t\t// this function is not generic.\r\n\t\tvoid NonGenericNoException(IEnumerable<object> things)\r\n\t\t{\r\n\t\t\tforeach (var thing in things.Where(tt => myClosure == 0)) {}\r\n\t\t}\r\n\t\r\n\t\t// This function doesn't create a BadImageFormatException because the\r\n\t\t// outer closure is stored in a local variable that is clearly in scope \r\n\t\t// when the deferred function is executed.\r\n\t\tvoid GenericWorkAroundA<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tvar inner = myClosure;\r\n\t\t\tforeach (var thing in things.Where(tt => inner == 0)) {}\r\n\t\t}\r\n\t\t\r\n\t\t// This function doesn't create a BadImageFormatException... \r\n\t\t// Is this because declaring the Enumerator as a local variable forces\r\n\t\t// local context to be given to myClosure?\r\n\t\tvoid GenericWorkAroundB<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tvar filtered = things.Where(tt => myClosure == 0);\r\n\t\t\tforeach (var thing in filtered) {}\r\n\t\t}\r\n\t}"},{"Id":"10028987955","Type":"PullRequestEvent","CreatedAt":"2019-07-17T13:00:53","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1351","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1351) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190716.11\r\n- **Date Produced**: 7/17/2019 5:26 AM\r\n- **Commit**: da3d086edde315db03ff9b04c2926ab22940d50c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19366.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19366.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19366.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10028910977","Type":"PullRequestEvent","CreatedAt":"2019-07-17T12:50:48","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1351","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1351) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190716.11\r\n- **Date Produced**: 7/17/2019 5:26 AM\r\n- **Commit**: da3d086edde315db03ff9b04c2926ab22940d50c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19366.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19366.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19366.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10028658935","Type":"PullRequestEvent","CreatedAt":"2019-07-17T12:15:22","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1350","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1350) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190716.4\r\n- **Date Produced**: 7/16/2019 7:16 PM\r\n- **Commit**: 0dd5e2025f0049c133a8706f40e4463b193e5d17\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19366.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10028592315","Type":"PullRequestEvent","CreatedAt":"2019-07-17T12:05:17","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1350","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1350) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190716.4\r\n- **Date Produced**: 7/16/2019 7:16 PM\r\n- **Commit**: 0dd5e2025f0049c133a8706f40e4463b193e5d17\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19366.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10025367169","Type":"PullRequestEvent","CreatedAt":"2019-07-17T01:56:05","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1348","RelatedDescription":"Merged pull request \"[automated] Merge branch 'master' => 'release/3.0'\" (#1348) at dotnet/standard","RelatedBody":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @42748379+dotnet-maestro[bot]\n* @wtgodbe\n* @terrajobst\n* @akoeplinger\n* @ericstj\n* @208120+akeeton\n* @roji\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"10025304763","Type":"PullRequestEvent","CreatedAt":"2019-07-17T01:37:58","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1349","RelatedDescription":"Opened pull request \"Add attributes for expressing nullability\" (#1349) at dotnet/standard","RelatedBody":"This issue was brought as part of a conversation with @divega from the EF team. While .NET Standard 2.1 itself won't have nullable annotations, the idea is that code building for .NET Standard 2.1 should be able to express its own nullable state. This PR adds the attribute that are needed by library authors to tweak how their APIs are treated by C#'s flow analysis.\r\n\r\nThese APIs were reviewed in https://github.com/dotnet/corefx/issues/37826."},{"Id":"10024689509","Type":"PullRequestEvent","CreatedAt":"2019-07-16T22:48:08","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1344","RelatedDescription":"Merged pull request \"Update branding to 2.2\" (#1344) at dotnet/standard","RelatedBody":"Update File/Product versions to 5.0, and package versions to 2.2. Please don't merge before noon on 7/16\r\n\r\nCC @terrajobst "},{"Id":"10024533483","Type":"PullRequestEvent","CreatedAt":"2019-07-16T22:13:05","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1348","RelatedDescription":"Opened pull request \"[automated] Merge branch 'master' => 'release/3.0'\" (#1348) at dotnet/standard","RelatedBody":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @42748379+dotnet-maestro[bot]\n* @wtgodbe\n* @terrajobst\n* @akoeplinger\n* @ericstj\n* @208120+akeeton\n* @roji\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"10022690880","Type":"PullRequestEvent","CreatedAt":"2019-07-16T17:19:37","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/1346","RelatedDescription":"Closed pull request \"[release/3.0] Update dependencies from dotnet/arcade\" (#1346) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190715.4\r\n- **Date Produced**: 7/15/2019 7:17 PM\r\n- **Commit**: fb27fd4d8a2b67d4333e33d4b898c65171c9f3c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19365.4\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10034043420","Type":"PullRequestEvent","CreatedAt":"2019-07-18T03:07:05","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/39578","RelatedDescription":"Merged pull request \"Make all events nullable\" (#39578) at dotnet/corefx","RelatedBody":"This is the corefx part of: https://github.com/dotnet/coreclr/pull/25752\r\n\r\nThe events in AppContext are baselined and not exposed in corefx: https://github.com/dotnet/corefx/blob/53dc908890102d3a888ba603a06266b85d3f4a9b/src/System.Runtime/src/MatchingRefApiCompatBaseline.txt#L2-L7\r\n\r\nThis will need to be ported to 3.0.\r\n\r\ncc: @danmosemsft @terrajobst @stephentoub "},{"Id":"10033947988","Type":"IssuesEvent","CreatedAt":"2019-07-18T02:41:33","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/39581","RelatedDescription":"Closed issue \"Test failure : System.Net.Tests.HttpWebRequestTest/PreAuthenticate_SetAndGetBooleanResponse_ValuesMatch(remoteServer: http://corefx-net-http11.azurewebsites.net/Echo.ashx) \" (#39581) at dotnet/corefx","RelatedBody":"Test `System.Net.Tests.HttpWebRequestTest/PreAuthenticate_SetAndGetBooleanResponse_ValuesMatch(remoteServer: http://corefx-net-http11.azurewebsites.net/Echo.ashx) ` has failed.\r\n\r\nMessage :\r\n```\r\nSystem.Net.WebException : The requested name is valid, but no data of the requested type was found. The requested name is valid, but no data of the requested type was found.\r\n---- System.Net.Http.HttpRequestException : The requested name is valid, but no data of the requested type was found.\r\n-------- System.Net.Sockets.SocketException : The requested name is valid, but no data of the requested type was found.\r\n```\r\nStack Trace :\r\n```\r\n  at System.Net.HttpWebRequest.GetResponse() in /_/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs:line 1004\r\n   at System.Net.Tests.HttpWebRequestTest.PreAuthenticate_SetAndGetBooleanResponse_ValuesMatch(Uri remoteServer) in /_/src/System.Net.Requests/tests/HttpWebRequestTest.cs:line 656\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs:line 73\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 626\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 666\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 332\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 524\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/RedirectHandler.cs:line 33\r\n   at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in /_/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 553\r\n   at System.Net.HttpWebRequest.SendRequest() in /_/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs:line 1217\r\n   at System.Net.HttpWebRequest.GetResponse() in /_/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs:line 1000\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs:line 54\r\n```\r\nBuild: -[20190717.35](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F~2F/20190717.35)(Master)\r\n\r\nFailing configuration:\r\n\r\n- Windows.10.Arm64.Open-arm64-Release\r\n\r\nDetails:\r\nhttps://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F~2F/20190717.35/workItem/System.Net.Requests.Tests/analysis/xunit/System.Net.Tests.HttpWebRequestTest~2FPreAuthenticate_SetAndGetBooleanResponse_ValuesMatch(remoteServer:%20http:~2F~2Fcorefx-net-http11.azurewebsites.net~2FEcho.ashx)"},{"Id":"10033792802","Type":"IssuesEvent","CreatedAt":"2019-07-18T01:59:07","Actor":"JamesNK","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/39582","RelatedDescription":"Opened issue \"HTTP2: Hang when writing sending large data to completed request\" (#39582) at dotnet/corefx","RelatedBody":"Writing large data to the request stream (Http2WriteStream retrieved from SerializeToStreamAsync) will hang if the server has finished. I would have expected Stream.WriteAsync to error.\r\n\r\nRepro:\r\n1. `git clone https://github.com/JamesNK/grpc-dotnet.git`\r\n2. `git checkout jamesnk/unimplemented-duplexstream`\r\n3. `dotnet test test\\FunctionalTests --filter Name~DuplexStream_SendToUnimplementedMethod_Hang`"},{"Id":"10033764745","Type":"IssuesEvent","CreatedAt":"2019-07-18T01:51:36","Actor":"AriNuer","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/39581","RelatedDescription":"Opened issue \"Test failure : System.Net.Tests.HttpWebRequestTest/PreAuthenticate_SetAndGetBooleanResponse_ValuesMatch(remoteServer: http://corefx-net-http11.azurewebsites.net/Echo.ashx) \" (#39581) at dotnet/corefx","RelatedBody":"Test `System.Net.Tests.HttpWebRequestTest/PreAuthenticate_SetAndGetBooleanResponse_ValuesMatch(remoteServer: http://corefx-net-http11.azurewebsites.net/Echo.ashx) ` has failed.\r\n\r\nMessage :\r\n```\r\nSystem.Net.WebException : The requested name is valid, but no data of the requested type was found. The requested name is valid, but no data of the requested type was found.\r\n---- System.Net.Http.HttpRequestException : The requested name is valid, but no data of the requested type was found.\r\n-------- System.Net.Sockets.SocketException : The requested name is valid, but no data of the requested type was found.\r\n```\r\nStack Trace :\r\n```\r\n  at System.Net.HttpWebRequest.GetResponse() in /_/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs:line 1004\r\n   at System.Net.Tests.HttpWebRequestTest.PreAuthenticate_SetAndGetBooleanResponse_ValuesMatch(Uri remoteServer) in /_/src/System.Net.Requests/tests/HttpWebRequestTest.cs:line 656\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs:line 73\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 626\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 666\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 332\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 524\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/RedirectHandler.cs:line 33\r\n   at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in /_/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 553\r\n   at System.Net.HttpWebRequest.SendRequest() in /_/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs:line 1217\r\n   at System.Net.HttpWebRequest.GetResponse() in /_/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs:line 1000\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs:line 54\r\n```\r\nBuild: -[20190717.35](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F~2F/20190717.35)(Master)\r\n\r\nFailing configuration:\r\n\r\n- Windows.10.Arm64.Open-arm64-Release\r\n\r\nDetails:\r\nhttps://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F~2F/20190717.35/workItem/System.Net.Requests.Tests/analysis/xunit/System.Net.Tests.HttpWebRequestTest~2FPreAuthenticate_SetAndGetBooleanResponse_ValuesMatch(remoteServer:%20http:~2F~2Fcorefx-net-http11.azurewebsites.net~2FEcho.ashx)"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10034340847","Type":"IssuesEvent","CreatedAt":"2019-07-18T04:34:59","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/30534","RelatedDescription":"Closed issue \"Represent unknown nullability from initial binding as \"not computed\"\" (#30534) at dotnet/roslyn","RelatedBody":""},{"Id":"10033832481","Type":"PullRequestEvent","CreatedAt":"2019-07-18T02:09:50","Actor":"petrroll","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37272","RelatedDescription":null,"RelatedBody":"Work for: #35525 and #35180\r\n\r\nBased on (previous) PRs: #37236 (and thus subsequently on #37196)"},{"Id":"10033832321","Type":"PullRequestEvent","CreatedAt":"2019-07-18T02:09:47","Actor":"petrroll","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37272","RelatedDescription":"Closed pull request \"Move refa to helpers4\" (#37272) at dotnet/roslyn","RelatedBody":"Work for: #35525 and #35180\r\n\r\nBased on (previous) PRs: #37236 (and thus subsequently on #37196)"},{"Id":"10033553755","Type":"IssuesEvent","CreatedAt":"2019-07-18T00:50:45","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31598","RelatedDescription":"Closed issue \"Need to make sure all speculative APIs on Semantic model properly pick up nullable context for the position where the speculation occurs\" (#31598) at dotnet/roslyn","RelatedBody":"See NonNullTypesContext_22 through NonNullTypesContext_37 for inspiration"},{"Id":"10033523193","Type":"IssuesEvent","CreatedAt":"2019-07-18T00:41:44","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/36101","RelatedDescription":"Closed issue \"There is no API to determine whether we are in a #nullable enable context\" (#36101) at dotnet/roslyn","RelatedBody":"If the IDE needs to know if we're in a #nullable enable'd context, there's no API today to do so. This comes up in a bunch of cases: if we're generating code from one file to another and one file has it enabled but the other doesn't, we need to know to drop annotations or add #nullable enable or other things."},{"Id":"10033462789","Type":"PullRequestEvent","CreatedAt":"2019-07-18T00:24:00","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37322","RelatedDescription":"Opened pull request \"Add initial GetDeclaredSymbol support for inferred VariableDeclaratorSyntax and SingleVariableDesignationSyntax nodes\" (#37322) at dotnet/roslyn","RelatedBody":"Add GetDeclaredSymbol support for nullability in variable declarations. Not handled are linq or foreach iteration variable declarations. Fixes https://github.com/dotnet/roslyn/issues/32459. @dotnet/roslyn-compiler for review. Foreach and linq are tracked by https://github.com/dotnet/roslyn/issues/37321.\r\n/cc @jasonmalinowski @ryzngard."},{"Id":"10033460888","Type":"IssuesEvent","CreatedAt":"2019-07-18T00:23:26","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37321","RelatedDescription":"Opened issue \"Support inferrred nullability info in GetDeclaredSymbol for inline Linq and for foreach iteration variables\" (#37321) at dotnet/roslyn","RelatedBody":"Currently we don't support these two. We need to."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10033687690","Type":"IssuesEvent","CreatedAt":"2019-07-18T01:29:27","Actor":"forestbat","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7631","RelatedDescription":"Opened issue \"Future of AOT\" (#7631) at dotnet/corert","RelatedBody":"#https://github.com/dotnet/coreclr/commit/0cc81b60eb184c92b8526348d4bb056ed563e9d6\r\n#https://github.com/dotnet/corefx/commit/1acaa2017cfc64ef1aabcf3b19d0e097af692616\r\nAs we all know，development for .NET5 has started and this project is like a forgotten corner，so in the next year（until November 2020）will MS invest more to this？\r\nAnd will AOT of C#（either corert or mono aot）support more processor structure such as MIPS or RISCV？\r\nHope your reply."},{"Id":"10032833682","Type":"PullRequestEvent","CreatedAt":"2019-07-17T21:53:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7629","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7629) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"10032691652","Type":"PullRequestEvent","CreatedAt":"2019-07-17T21:27:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7630","RelatedDescription":"Opened pull request \"Delete stale cache size detection code on Windows\" (#7630) at dotnet/corert","RelatedBody":"Fill cache size detection on Unix with CoreCLR PAL implementation"},{"Id":"10032413771","Type":"PullRequestEvent","CreatedAt":"2019-07-17T20:42:37","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7629","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7629) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10031921029","Type":"PullRequestEvent","CreatedAt":"2019-07-17T19:26:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7628","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7628) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"10030982080","Type":"PullRequestEvent","CreatedAt":"2019-07-17T17:05:31","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7628","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7628) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10030855630","Type":"PullRequestEvent","CreatedAt":"2019-07-17T16:47:02","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7627","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7627) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern"},{"Id":"10029421429","Type":"PullRequestEvent","CreatedAt":"2019-07-17T13:54:08","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7627","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7627) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10029247098","Type":"PullRequestEvent","CreatedAt":"2019-07-17T13:33:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7623","RelatedDescription":"Merged pull request \"Include Natvis in the ILCompiler package\" (#7623) at dotnet/corert","RelatedBody":"This makes strings and arrays for CoreRT-compiled programs look nicer in debuggers that support Natvis."},{"Id":"10029235804","Type":"PullRequestEvent","CreatedAt":"2019-07-17T13:32:09","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7624","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7624) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas"},{"Id":"10029211667","Type":"PullRequestEvent","CreatedAt":"2019-07-17T13:29:15","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7626","RelatedDescription":"Merged pull request \"Capture name of failing method in CodeGenerationFailedException\" (#7626) at dotnet/corert","RelatedBody":"Useful for troubleshooting."},{"Id":"10027831103","Type":"PullRequestEvent","CreatedAt":"2019-07-17T10:06:32","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7626","RelatedDescription":"Opened pull request \"Capture name of failing method in CodeGenerationFailedException\" (#7626) at dotnet/corert","RelatedBody":"Useful for troubleshooting."},{"Id":"10027721056","Type":"IssuesEvent","CreatedAt":"2019-07-17T09:51:37","Actor":"Berrysoft","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7625","RelatedDescription":"Opened issue \"CodeGenerationFailedException after July 13th\" (#7625) at dotnet/corert","RelatedBody":"```\r\nILCompiler.CodeGenerationFailedException: Code generation failed ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\n  Parameter name: index\r\n     at Internal.JitInterface.CorInfoImpl.HandleToObject(IntPtr handle)\r\n     at Internal.JitInterface.CorInfoImpl.HandleToObject(CORINFO_CLASS_STRUCT_* type)\r\n     at Internal.JitInterface.CorInfoImpl.isMoreSpecificType(CORINFO_CLASS_STRUCT_* cls1, CORINFO_CLASS_STRUCT_* cls2)\r\n     at Internal.JitInterface.CorInfoImpl._isMoreSpecificType(IntPtr thisHandle, IntPtr* ppException, CORINFO_CLASS_STRUCT_* cls1, CORINFO_CLASS_STRUCT_* cls2)\r\n     --- End of inner exception stack trace ---\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.ComputeDependencyNodeDependencies(List`1 obj)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n```\r\nThe same code built successfully in July 12th, but failed after July 13th. I suspect it is because of #7612, but I don't know the reason exactly.\r\nAddition: I tried to reproduce the bug by a \"Hello world\" program, but it is built successfully, so I even don't know how to reproduce it."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10029907016","Type":"PullRequestEvent","CreatedAt":"2019-07-17T14:48:52","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3431","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#3431) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.01\r\n- **Date Produced**: 7/17/2019 8:46 AM\r\n- **Commit**: 7cf49f78deaae14948ce59fc6d9266365888f7b6\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27917-01\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"469550449","IsPullRequest":false,"CreatedAt":"2019-07-18T03:13:52","Actor":"SilentCC","Number":"25767","RawContent":null,"Title":"Out Of Memory Exception in .NET Core 3.0 preview 5","State":"open","Body":"Since I update my application to .NET Core 3.0 preview 5 in container scenario, the OutOfMemory exceptions come out sometimes.\r\n\r\nProduction Environments:\r\n\r\n*   production cluster:  docker swarm\r\n*   docker container cpu limit :1.5\r\n*   docker container memory limit: 2G\r\n*   docker container duplicates : 2\r\n*   PV : about  60000 per day\r\n*   Application: .NET Core MVC Web\r\n*   GC type : Server GC\r\n\r\nPrevious version is .NET Core 2.2 , and it worked fine all the time until it was updated to .NET Core 3.0 a few days ago.\r\n\r\nLast night, It threw lots of OutOfMemory exceptions and restarted by docker finally.I think its memory exceeded docker memory limit. \r\n\r\nHere is error logs, note that OutOfMemory exception may occurs on many different places .\r\n\r\n```\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.Data.SqlClient.SqlCommand.<>c.<ExecuteDbDataReaderAsync>b__126_0(Task`1 result)\r\n   at System.Threading.Tasks.ContinuationResultTaskFromResultTask`2.InnerInvoke()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\n```\r\n \"Message\": \"Exception of type 'System.OutOfMemoryException' was thrown.\",\r\n  \"Source\": \"System.Private.CoreLib\",\r\n  \"StackTraceString\": \"   \r\n     at System.Collections.Generic.Dictionary`2.Initialize(Int32 capacity)\\n   at System.Collections.Generic.Dictionary`2..ctor(Int32 capacity, IEqualityComparer`1 comparer)\\n \r\n     at System.Linq.Expressions.Compiler.CompilerScope..ctor(Object node, Boolean isMethod)\\n   at System.Linq.Expressions.Compiler.VariableBinder.VisitLambda[T](Expression`1 node)\\n   \r\n     at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\\n   at System.Linq.Expressions.Expression`1.Compile(Boolean preferInterpretation)\\n  \r\n```\r\n\r\n```\r\n \"Message\": \"Exception of type 'System.OutOfMemoryException' was thrown.\",\r\n  \"Source\": \"System.Private.CoreLib\",\r\n  \"StackTraceString\": \"   \r\n       at System.GC.AllocateNewArray(IntPtr typeHandle, Int32 length, Boolean zeroingOptional)\\n   at System.GC.AllocateUninitializedArray[T](Int32 length)\\n   \r\n       at System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1.Rent(Int3  2 minimumLength)\\n  \r\n       at Microsoft.AspNetCore.Http.Extensions.StreamCopyOperation.CopyToAsync(Stream source, Stream destination, Nullable`1 count, Int32 bufferSize, CancellationToken cancel)\\n   at Microsoft.AspNetCore.StaticFiles.StaticFileContext.SendAsync()\\n   \r\n       at Microsoft.AspNetCore.StaticFiles.StaticFileContext.ServeStaticFile(HttpContext context, RequestDelegate next)\\n   \r\n       at Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.Invoke(HttpContext context)\\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.<Invoke>g__Awaited|6_0(ExceptionHandlerMiddleware middleware, HttpContext context, Task task)\",\r\n```\r\n\r\n```\r\nMicrosoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.Linq.Expressions.Compiler.CompilerScope.SetParent(LambdaCompiler lc, CompilerScope parent)\r\n   at System.Linq.Expressions.Compiler.CompilerScope.Enter(LambdaCompiler lc, CompilerScope parent)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitLambdaBody(CompilerScope parent, Boolean inlined, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\r\n   at System.Linq.Expressions.Expression`1.Compile(Boolean preferInterpretation)\r\n   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateFactory(Type instanceType, Type[] argumentTypes)\r\n   at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Boolean& initialized, Object& syncLock, Func`1 valueFactory)\r\n   at Microsoft.Extensions.Http.DefaultTypedHttpClientFactory`1.CreateClient(HttpClient httpClient)\r\n   at Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.<>c__DisplayClass10_0`2.<AddTypedClient>b__0(IServiceProvider s)\r\n   at ResolveService(ILEmitResolverBuilderRuntimeContext , ServiceProviderEngineScope )\r\n   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetService(IServiceProvider sp, Type type, Type requiredBy, Boolean isDefaultParameterRequired)\r\n   at lambda_method(Closure , IServiceProvider , Object[] )\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFactoryProvider.<>c__DisplayClass5_0.<CreateControllerFactory>g__CreateController|0(ControllerContext controllerContext)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResourceFilter>g__Awaited|24_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.<Invoke>g__Awaited|6_0(ExceptionHandlerMiddleware \r\n```\r\n\r\nI suppose that  GC may be affected by GCHeapHardLimit in .NET Core 3.0.\r\nAny one can help me? Thank you very much!\r\n","Url":"https://github.com/dotnet/coreclr/issues/25767","RelatedDescription":"Open issue \"Out Of Memory Exception in .NET Core 3.0 preview 5\" (#25767)"},{"Id":"469518685","IsPullRequest":true,"CreatedAt":"2019-07-18T00:54:56","Actor":"sdmaclea","Number":"25766","RawContent":null,"Title":"Arm32 restore d8-d15 in ThrowExceptionFromContextInternal","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25766","RelatedDescription":"Open PR \"Arm32 restore d8-d15 in ThrowExceptionFromContextInternal\" (#25766)"},{"Id":"469494790","IsPullRequest":true,"CreatedAt":"2019-07-17T23:20:41","Actor":"mjsabby","Number":"25765","RawContent":null,"Title":"Move GetRawData & GetRawSzArrayData to RuntimeHelpers instead of JitHelpers","State":"open","Body":"RuntimeHelpers is a better location for this than JitHelpers.\r\n\r\nWe can then have this be in the same Type in CoreRT as well.\r\n\r\nhttps://github.com/dotnet/corefx/issues/33706#issuecomment-512156540","Url":"https://github.com/dotnet/coreclr/pull/25765","RelatedDescription":"Open PR \"Move GetRawData & GetRawSzArrayData to RuntimeHelpers instead of JitHelpers\" (#25765)"},{"Id":"469493786","IsPullRequest":true,"CreatedAt":"2019-07-17T23:16:34","Actor":"briansull","Number":"25764","RawContent":null,"Title":"Stop forcing jumpstamp nops in ngen images","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25764","RelatedDescription":"Open PR \"Stop forcing jumpstamp nops in ngen images\" (#25764)"},{"Id":"469486763","IsPullRequest":true,"CreatedAt":"2019-07-17T22:54:07","Actor":"tannergooding","Number":"25763","RawContent":null,"Title":"Fixing Buffer::BlockCopy, JIT_MemCpy, and JIT_MemSet to just call the appropriate CRT functions for x64 Windows, as is already done for all other platforms/targets","State":"open","Body":"This resolves #25505 for release/3.0 and is a backport of https://github.com/dotnet/coreclr/pull/25750.\r\n\r\nBased on the original issue where JIT_MemCpy was changed to use rep movsb (see #7198), there was:\r\n\r\nminor improvement (~5%) for arrays of length 0 to 120\r\ngood improvement (~40%) for arrays of length 130 to 510\r\n~47% for arrays of length 130 to 310\r\n~39% for arrays of length 320 to 440\r\n~27% for arrays of length 450 to 510\r\nlittle improvement (~1%) for arrays above 510 in length\r\nThis was only tested for 520 and 1000 bytes\r\nHowever, on AMD processors, there are additional limitations around rep movsb and when it is beneficial to use. The common conditions under which it is being used in the JIT_MemCpy method today actually cause a 2x perf decrease for arrays larger than 512 bytes.\r\n\r\nHaving a custom memcpy routine adds additional maintenance burden, can be error prone, is generally not as widely tested, and does not get many of the optimizations that the CRT implementations receives. This, coupled with the overall minor improvements for small arrays on Intel processors and the 2x regression for arrays over 512 bytes on AMD processors is resulting in the custom memcpy routine being removed.\r\n\r\nIt would be beneficial for any future improvements to memcpy to be made directly against glibc and crt instead.","Url":"https://github.com/dotnet/coreclr/pull/25763","RelatedDescription":"Open PR \"Fixing Buffer::BlockCopy, JIT_MemCpy, and JIT_MemSet to just call the appropriate CRT functions for x64 Windows, as is already done for all other platforms/targets\" (#25763)"},{"Id":"469475486","IsPullRequest":false,"CreatedAt":"2019-07-17T22:22:01","Actor":"Anipik","Number":"25762","RawContent":null,"Title":"EventSource.Write corrupts nullable values in Release builds using .NET Native (UWP)","State":"closed","Body":"When using a nullable value in EventSource.Write, it appears the ETW event gets corrupted.\r\n\r\nRepro steps (Visual Studio 2019)\r\n\r\n1. Create a new \"Blank App (Universal Windows)\" project in Visual Studio\r\nThis should give you a Universal Windows project depending on Microsoft.NETCore.UniversalWindowsPlatform 6.2.8\r\n2. Paste this snippet into the ``App`` class constructor\r\n````csharp\r\n            var eventSource = new EventSource(\"ETWBugRepro\");\r\n            uint? nullableValue = 0xAABBCCDD;\r\n            eventSource.Write(\"EventWithNullableValue\", new { nullableValue });\r\n````\r\n3. Start a trace\r\n(for instance ``xperf -start ETWBugTrace -on *ETWBugRepro -f trace.etl``)\r\n4. Build the Release configuration and run\r\n5. Build the Debug configuration (alternatively just disable .NET Native compilation) and run\r\n6. Inspect the trace file\r\n(for instance ``xperf -stop ETWBugTrace && wpa trace.etl``)\r\n\r\nWithout .NET Native compilation, the event payload is\r\n``nullableValue: { HasValue: 1; Value: 0xAABBCCDD; }``\r\n\r\nWith .NET Native compilation enabled, the event payload is\r\n``nullableValue: { HasValue: 0xDD; Value: 0;}``\r\n","Url":"https://github.com/dotnet/coreclr/issues/25762","RelatedDescription":"Closed issue \"EventSource.Write corrupts nullable values in Release builds using .NET Native (UWP)\" (#25762)"},{"Id":"469474942","IsPullRequest":true,"CreatedAt":"2019-07-17T22:20:20","Actor":"echesakovMSFT","Number":"25761","RawContent":null,"Title":"[NO MERGE] SDK Style Projects","State":"open","Body":"**NO MERGE**","Url":"https://github.com/dotnet/coreclr/pull/25761","RelatedDescription":"Open PR \"[NO MERGE] SDK Style Projects\" (#25761)"},{"Id":"469470930","IsPullRequest":true,"CreatedAt":"2019-07-17T22:10:03","Actor":"josalem","Number":"25760","RawContent":null,"Title":"Delay Diagnostics IPC response till after EventPipe::Enable has completed","State":"open","Body":"This change refactors all unbuffered pipe writing (calls to `IpcStream::Write`) into their own functions, allowing `EventPipe::Enable` to run to completion without writing anything to the pipe.  This makes it possible to send the IPC response _after_ all the provider callbacks have been called.  This is a non-breaking change and should fix the reason for `SentinelEventSource` in `tests/src/eventpipe/common/IpcTraceTest.cs`.\r\n\r\nresolves #25738","Url":"https://github.com/dotnet/coreclr/pull/25760","RelatedDescription":"Open PR \"Delay Diagnostics IPC response till after EventPipe::Enable has completed\" (#25760)"},{"Id":"469470597","IsPullRequest":true,"CreatedAt":"2019-07-17T22:09:10","Actor":"stephentoub","Number":"25759","RawContent":null,"Title":"[release/3.0] Port recent nullability updates","State":"open","Body":"cc: @danmosemsft, @safern, @wtgodbe, @agocke \r\n\r\nThis ports dbc0e19e87e1ac6e2be33a1ddeea95f21ba2bc39, 45e48343c7abc064c829d53028f9e581a87ee027, and 8ba2e15201361402acd0ae9710bd37d50785cdfa to release/3.0. The third one changes the public nullable annotations around events exposed from corelib, based on recent design decisions on how we want to handle events and nullability.  The second one touches some of the same code, but more generally it's just removing a bunch of now unnecessary `!`s and `// TODO-NULLABLE` comments, and is likely to result in conflicts in the future given the number of lines it touches, so it's better to get it into the release branch given it's not impacting anything meaningful.  The first one is mostly overwritten by the third one, and so porting it results in the most automated process.  All three were cherry-picked, with no conflicts and no further manual changes quired.\r\n\r\nThe final commit is required to update the compiler used in the release branch to one with additional nullability fixes that allows all this to work.\r\n\r\nAfter this, @safern will submit corresponding PRs to corefx, both master and release/3.0 branches, to update the corresponding ref assemblies.","Url":"https://github.com/dotnet/coreclr/pull/25759","RelatedDescription":"Open PR \"[release/3.0] Port recent nullability updates\" (#25759)"},{"Id":"469464151","IsPullRequest":false,"CreatedAt":"2019-07-17T21:51:48","Actor":"sdmaclea","Number":"25758","RawContent":null,"Title":"Debugger refuses to attach to 5.0 builds","State":"open","Body":"Apparently rebranding to 5.0 has caused the debugger to assert\r\n```\r\n Assertion Failed\r\n Unsupported version of mscorlib\r\n    at Ilrun.DefaultHost.GetClrVersionFromSystemAssembly()\r\n    at Ilrun.DefaultHost.get_ClrVersionImpl()\r\n    at Ilrun.ClrVersionUtility.GetClrVersion(IHost host)\r\n    at Ilrun.DefaultSlotFactory.get_ClrVersion()\r\n    at Ilrun.DefaultSlotFactory.GetSlotForPrimitive(PrimitiveValue pv)\r\n    at Ilrun.DefaultSlotFactory.GetSlotForHostObject(Object value)\r\n    at Ilrun.Utility.GetSlotForObject(ISlotFactory factory, Object value)\r\n    at Ilrun.Utility.GetSlotForInteger(ISlotFactory factory, Int32 value)\r\n    at Ilrun.CommonSlotConst..ctor(IHost host)\r\n    at Ilrun.DefaultHost.get_CommonConst()\r\n    at Ilrun.VirtualMachine2..ctor(IHost host, Int32 maxStackDepth)\r\n    at Ilrun.VirtualMachine2..ctor(IHost host)\r\n    at Ilrun.DefaultHost.CreateVM()\r\n    at Microsoft.VisualStudio.VIL.DebuggerHost.LocalContext.CreateVM()\r\n    at Microsoft.VisualStudio.VIL.VisualStudioHost.LocalContextWrapper.CreateVM()\r\n    at Microsoft.VisualStudio.VIL.DebuggerHost.LocalContext.get_VM()\r\n    at Microsoft.VisualStudio.VIL.VisualStudioHost.VilEvaluationServices.InterpretInspectionQuery(DkmInspectionSession inspectionSession, DkmWorkList workList, DkmEvaluationFlags evalFlags, DkmFuncEvalFlags funcEvalFlags, UInt32 timeout, DkmStackWalkFrame frame, Assembly queryAssembly, String expression, String queryClassName, String queryMethodName, DkmClrCompilationResultFlags queryCompilationFlags, DkmEvaluationResultCategory resultCategory, DkmEvaluationResultAccessType accessType, DkmEvaluationResultStorageType storageType, DkmEvaluationResultTypeModifierFlags typeModifierFlags, VilEvaluationResult targetValue, Type targetType, InspectionQueryUserContext inspectionQueryUserContext, String& error, MethodInfo& queryMethod)\r\n    at VSDebugEngine.ClrInspector.VilHelper.ExecuteQueryInternal(Assembly queryAssembly, String queryTypeName, String queryMethodName, DkmClrCompilationResultFlags queryCompilationFlags, DkmEvaluationResultCategory resultCategory, DkmEvaluationResultAccessType accessType, DkmEvaluationResultStorageType storageType, DkmEvaluationResultTypeModifierFlags typeModifierFlags, DkmClrCustomTypeInfo customTypeInfo, DkmInspectionContext inspectionContext, DkmStackWalkFrame frame, String resultName, String resultFullName, ReadOnlyCollection`1 additionalFormatSpecifiers, DkmWorkList workList, EvaluationResultContinuation continuation)\r\n    at VSDebugEngine.ClrInspector.VilHelper.ExecuteInspectionQuery(DkmCompiledClrInspectionQuery query, DkmInspectionContext inspectionContext, DkmStackWalkFrame frame, String expressionName, DkmWorkList workList, EvaluationResultContinuation continuation)\r\n    at VSDebugEngine.ClrInspector.EntryPoint.Microsoft.VisualStudio.Debugger.ComponentInterfaces.IDkmClrInspectionQueryProcessor.Execute(DkmCompiledClrInspectionQuery query, DkmWorkList workList, DkmInspectionContext inspectionContext, DkmILContext iLContext, String expressionName, DkmCompletionRoutine`1 completionRoutine)\r\n    at Microsoft.VisualStudio.Debugger.EntryPoint.IDkmClrInspectionQueryProcessor_Execute(IntPtr pvClassInfo, IntPtr CompiledClrInspectionQuery, IntPtr WorkList, IntPtr InspectionContext, IntPtr ILContext, IntPtr ExpressionName, IntPtr CompletionRoutine)\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25758","RelatedDescription":"Open issue \"Debugger refuses to attach to 5.0 builds\" (#25758)"},{"Id":"469043670","IsPullRequest":true,"CreatedAt":"2019-07-17T21:14:27","Actor":"kouvel","Number":"25747","RawContent":null,"Title":"Temporarily make a default interface method test incompatible for GCStress","State":"closed","Body":"Related to https://github.com/dotnet/coreclr/issues/25690\r\nPort of https://github.com/dotnet/coreclr/pull/25746\r\n\r\nTo make test run with GCStress clean for 3.0. Issue will be fixed separately in master.","Url":"https://github.com/dotnet/coreclr/pull/25747","RelatedDescription":"Closed or merged PR \"Temporarily make a default interface method test incompatible for GCStress\" (#25747)"},{"Id":"469439830","IsPullRequest":false,"CreatedAt":"2019-07-17T21:14:15","Actor":"nick-beer","Number":"25756","RawContent":null,"Title":"Access Violation inside Assembly.Load","State":"closed","Body":"With .NET Core 3 Preview 6, while attempting to implement a custom `AssemblyLoadContext` for our internal test framework, I hit the access violation in this [mini crash dump](https://github.com/dotnet/coreclr/files/3403811/dotnet.exe.16044.zip).  A full dump can be found [here](https://1drv.ms/u/s!Agur_HvpbuEJsPsChjuAdjXqe3ew1g?e=ahWeOO).  The crash is reproducible, although I have not yet tried to reproduce outside of our software stack.\r\n\r\nThe access violation is coming from inside [nLoad](https://source.dot.net/#System.Private.CoreLib/src/System/Reflection/RuntimeAssembly.cs,0f90bb3f9b36c505) when (apparently) trying to load the System.Threading assembly.","Url":"https://github.com/dotnet/coreclr/issues/25756","RelatedDescription":"Closed issue \"Access Violation inside Assembly.Load\" (#25756)"},{"Id":"469042780","IsPullRequest":true,"CreatedAt":"2019-07-17T21:12:50","Actor":"kouvel","Number":"25746","RawContent":null,"Title":"Temporarily make a default interface method test incompatible for GCStress","State":"closed","Body":"Related to https://github.com/dotnet/coreclr/issues/25690","Url":"https://github.com/dotnet/coreclr/pull/25746","RelatedDescription":"Closed or merged PR \"Temporarily make a default interface method test incompatible for GCStress\" (#25746)"},{"Id":"469441296","IsPullRequest":true,"CreatedAt":"2019-07-17T20:56:05","Actor":"sdmaclea","Number":"25757","RawContent":null,"Title":"Arm64 support SIMD registers context to/from native context","State":"open","Body":"This is my draft of the FPSIMD_MAGIG change for arm64.\r\n\r\nIt compiles. I haven't started debugging it.\r\n\r\nIt may need stylistic feedback.","Url":"https://github.com/dotnet/coreclr/pull/25757","RelatedDescription":"Open PR \"Arm64 support SIMD registers context to/from native context\" (#25757)"},{"Id":"469374073","IsPullRequest":true,"CreatedAt":"2019-07-17T20:38:10","Actor":"stephentoub","Number":"25752","RawContent":null,"Title":"Make all event types nullable","State":"closed","Body":"Late-breaking design change: all events should be declared with nullable delegate types.\r\n\r\n@danmosemsft, this will need to be ported to release/3.0 (https://github.com/dotnet/coreclr/pull/25749 should as well to help minimize conflicts, now and in the future), and also reference assemblies updated.  We also need to do the same exercise for corefx, though I expect there are few events there in the relevant code (we need to check).\r\n\r\ncc: @safern, @dotnet/nullablefc ","Url":"https://github.com/dotnet/coreclr/pull/25752","RelatedDescription":"Closed or merged PR \"Make all event types nullable\" (#25752)"},{"Id":"469429719","IsPullRequest":false,"CreatedAt":"2019-07-17T20:31:02","Actor":"stephentoub","Number":"25754","RawContent":null,"Title":"Multiple test legs failing due to versioning issue","State":"open","Body":"Fireballs across the board:\r\nhttps://mc.dot.net/#/user/coreclr-ci/pr~2Fdotnet~2Fcoreclr~2Frefs~2Fpull~2F25752~2Fmerge/test~2Ffunctional~2Fcorefx~2F/20190717.21\r\n\r\n@wtgodbe, is this due to branding changes?  The tests are all failing early with:\r\n```\r\n~/work/a2bb0df6-4eb8-45cf-880f-93332bbf5a72/Work/5f4d5f80-f259-4465-8bb8-6ad90b69bff5/Exec ~/work/a2bb0df6-4eb8-45cf-880f-93332bbf5a72/Work/5f4d5f80-f259-4465-8bb8-6ad90b69bff5/Exec\r\nIt was not possible to find any compatible framework version\r\nThe specified framework 'Microsoft.NETCore.App', version '3.0.0' was not found.\r\n  - The following frameworks were found:\r\n      5.0.0 at [/home/helixbot/work/a2bb0df6-4eb8-45cf-880f-93332bbf5a72/Payload/shared/Microsoft.NETCore.App]\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25754","RelatedDescription":"Open issue \"Multiple test legs failing due to versioning issue\" (#25754)"},{"Id":"469436654","IsPullRequest":false,"CreatedAt":"2019-07-17T20:28:57","Actor":"stephentoub","Number":"25755","RawContent":null,"Title":"Assert failure in _buffersize_buffersize_buffersize_cmd event pipe test","State":"open","Body":"https://mc.dot.net/#/user/coreclr-ci/pr~2Fdotnet~2Fcoreclr~2Frefs~2Fpull~2F25752~2Fmerge/test~2Ffunctional~2Fcli~2F/20190717.21/workItem/PayloadGroup0/analysis/xunit/tracing_eventpipe._buffersize_buffersize_buffersize_~2F_buffersize_buffersize_buffersize_cmd\r\n```\r\nAssert failure(PID 2300 [0x000008fc], Thread: 2148 [0x0864]): !\\\"Failed to mark pending synchronous I/O operations issued by Diagnostics Server Thread as canceled.\\\"\r\n\r\nCORECLR! GetCLRRuntimeHost + 0x1F26D6 (0x7251b766)\r\nCORECLR! coreclr_shutdown_2 + 0x320A5 (0x7231f8f5)\r\nCORECLR! coreclr_shutdown_2 + 0x31FBF (0x7231f80f)\r\nCORECLR! coreclr_shutdown_2 + 0x3A539 (0x72327d89)\r\nCORERUN! <no symbol> + 0x0 (0x00e2d216)\r\nCORERUN! GetCurrentClrDetails + 0x126 (0x00e2dd66)\r\nCORERUN! GetCurrentClrDetails + 0x1D20E (0x00e4ae4e)\r\nCORERUN! GetCurrentClrDetails + 0x1D0F7 (0x00e4ad37)\r\nCORERUN! GetCurrentClrDetails + 0x1CF9D (0x00e4abdd)\r\nCORERUN! GetCurrentClrDetails + 0x1D278 (0x00e4aeb8)\r\n    File: f:\\\\workspace.3\\\\_work\\\\1\\\\s\\\\src\\\\vm\\\\diagnosticserver.cpp Line: 215\r\n    Image: C:\\\\dotnetbuild\\\\work\\\\cc236af6-3d34-4bfa-8302-77f13cb18020\\\\Payload\\\\CoreRun.exe\r\n\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\cc236af6-3d34-4bfa-8302-77f13cb18020\\\\Work\\\\797b7e18-dce6-4ba2-abb7-c564564dad05\\\\Exec\\\\tracing\\\\eventpipe\\\\Reports\\\\tracing.eventpipe\\\\buffersize\\\\buffersize\\\\buffersize.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\cc236af6-3d34-4bfa-8302-77f13cb18020\\\\Payload\\\\corerun.exe\\\" buffersize.exe \r\nTEST STARTING\r\nTEST PASSED!\r\nTEST STARTING\r\nTEST PASSED!\r\nExpected: 100\r\nActual: -1073740286\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\cc236af6-3d34-4bfa-8302-77f13cb18020\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\cc236af6-3d34-4bfa-8302-77f13cb18020\\\\Work\\\\797b7e18-dce6-4ba2-abb7-c564564dad05\\\\Exec\\\\tracing\\\\eventpipe\\\\buffersize\\\\buffersize\\\\buffersize.cmd\r\nExpected: True\r\nActual:   False\r\nStack Trace :\r\n   at tracing_eventpipe._buffersize_buffersize_buffersize_._buffersize_buffersize_buffersize_cmd() in F:\\workspace.1\\_work\\1\\s\\bin\\tests\\Windows_NT.x86.Checked\\TestWrappers\\tracing.eventpipe\\tracing.eventpipe.XUnitWrapper.cs:line 129\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25755","RelatedDescription":"Open issue \"Assert failure in _buffersize_buffersize_buffersize_cmd event pipe test\" (#25755)"},{"Id":"469427686","IsPullRequest":false,"CreatedAt":"2019-07-17T20:26:40","Actor":"gregg-miskelly","Number":"25753","RawContent":null,"Title":"Func eval of SpanDebugView crashes when stepping over stackalloc","State":"open","Body":"## Repro steps\r\n1. Create the following program\r\n2. Set a breakpoint on the commented line\r\n3. Hit F10 twice (https://github.com/dotnet/coreclr/issues/14926 tracks the need for this). You will now be stopped at the highlighted instruction (see 'Disassembly' below)\r\n4. Evaluate `mib`\r\n\r\n### Result\r\nTarget process crashes in `coreclr.dll!ClassLoader::LoadTypeHandleForTypeKey_Body` resulting in the following message from VS:\r\n\r\n\\---------------------------\r\nMicrosoft Visual Studio\r\n\\---------------------------\r\nThe target process exited with code -2146233082 while evaluating the function 'System.SpanDebugView<T>.SpanDebugView'.\r\n\r\nIf the problem happens regularly, consider disabling the Tools->Options setting \"Debugging->General->Enable property evaluation and other implicit function calls\" or debugging the cause by evaluating the expression from the Immediate window. See help for information on doing this.\r\n\\---------------------------\r\nOK   Help   \r\n\\---------------------------\r\n\r\n### Call stack\r\ncoreclr.dll!ClassLoader::LoadTypeHandleForTypeKey_Body(TypeKey * pTypeKey, TypeHandle typeHnd, ClassLoadLevel targetLevel) Line 3778\r\n\tat f:\\workspace.1\\_work\\1\\s\\src\\vm\\clsload.cpp(3778)\r\ncoreclr.dll!ClassLoader::LoadTypeHandleForTypeKey(TypeKey * pTypeKey, TypeHandle typeHnd, ClassLoadLevel targetLevel, const InstantiationContext * pInstContext) Line 3677\r\n\tat f:\\workspace.1\\_work\\1\\s\\src\\vm\\clsload.cpp(3677)\r\ncoreclr.dll!ClassLoader::LoadTypeDefThrowing(Module * pModule, unsigned int typeDef, ClassLoader::NotFoundAction fNotFoundAction, ClassLoader::PermitUninstantiatedFlag fUninstantiated, unsigned int tokenNotToLoad, ClassLoadLevel level, Instantiation * pTargetInstantiation) Line 2565\r\n\tat f:\\workspace.1\\_work\\1\\s\\src\\vm\\clsload.cpp(2565)\r\ncoreclr.dll!ClassLoader::LoadTypeDefOrRefThrowing(Module * pModule, unsigned int typeDefOrRef, ClassLoader::NotFoundAction fNotFoundAction, ClassLoader::PermitUninstantiatedFlag fUninstantiated, unsigned int tokenNotToLoad, ClassLoadLevel level) Line 2737\r\n\tat f:\\workspace.1\\_work\\1\\s\\src\\vm\\clsload.cpp(2737)\r\ncoreclr.dll!EEDbgInterfaceImpl::LoadClass(Module * pModule, unsigned int classToken) Line 951\r\n\tat f:\\workspace.1\\_work\\1\\s\\src\\vm\\eedbginterfaceimpl.cpp(951)\r\ncoreclr.dll!EEDbgInterfaceImpl::LoadMethodDef(Module * pModule, unsigned int methodDef, unsigned long numGenericArgs, TypeHandle * pGenericArgs, TypeHandle * pOwnerType) Line 803\r\n\tat f:\\workspace.1\\_work\\1\\s\\src\\vm\\eedbginterfaceimpl.cpp(803)\r\ncoreclr.dll!ResolveFuncEvalGenericArgInfo(DebuggerEval * pDE) Line 1550\r\n\tat f:\\workspace.1\\_work\\1\\s\\src\\debug\\ee\\funceval.cpp(1550)\r\ncoreclr.dll!DoNormalFuncEval(DebuggerEval * pDE, unsigned char * pCatcherStackAddr, Object * * pObjectRefArray, void * * pMaybeInteriorPtrArray, void * * pByRefMaybeInteriorPtrArray, __int64 * pBufferForArgsArray, ValueClassInfo * * ppProtectedValueClasses) Line 3087\r\n\tat f:\\workspace.1\\_work\\1\\s\\src\\debug\\ee\\funceval.cpp(3087)\r\ncoreclr.dll!GCProtectArgsAndDoNormalFuncEval(DebuggerEval * pDE, unsigned char * pCatcherStackAddr) Line 3441\r\n\tat f:\\workspace.1\\_work\\1\\s\\src\\debug\\ee\\funceval.cpp(3441)\r\ncoreclr.dll!FuncEvalHijackRealWorker(DebuggerEval * pDE, Thread * pFEFrame, FuncEvalFrame *) Line 3659\r\n\tat f:\\workspace.1\\_work\\1\\s\\src\\debug\\ee\\funceval.cpp(3659)\r\ncoreclr.dll!FuncEvalHijackWorker(DebuggerEval * pDE) Line 3782\r\n\tat f:\\workspace.1\\_work\\1\\s\\src\\debug\\ee\\funceval.cpp(3782)\r\ncoreclr.dll!FuncEvalHijack() Line 27\r\n\tat F:\\workspace.1\\_work\\1\\s\\src\\debug\\ee\\amd64\\dbghelpers.asm(27)\r\n\r\n### Notes\r\n* This reproduces on macOS and Windows on 3.0-preview6, I can also see the problem on Windows in .NET Core 2.2.5, so it doesn't seem to be a regression.\r\n* I can reproduce the same problem with `Span<char>`.\r\n* I didn't investigate if possibly VS is doing something wrong in the way we request the func-eval, so if you can't reproduce this in mdbg let me know and I can see if maybe the problem is on our side.\r\n* If I inspect the span using interpretation instead of func-eval everything works.\r\n\r\n### Program\r\n\r\n```C#\r\n        static void Main(string[] args)\r\n        {\r\n            Span<int> mib = stackalloc int[3]; // breakpoint here\r\n            mib[0] = 42;\r\n\r\n            Console.WriteLine(\"Hello World {0}!\", mib[0]);\r\n        }\r\n```\r\n\r\n### Disassembly\r\n\r\n```\r\n            Span<int> mib = stackalloc int[3];\r\n00007FFEF90D0FD9  lea         rcx,[rbp+28h]  \r\n00007FFEF90D0FDD  mov         edx,0Ch  \r\n00007FFEF90D0FE2  mov         edx,edx  \r\n00007FFEF90D0FE4  test        rdx,rdx  \r\n00007FFEF90D0FE7  je          00007FFEF90D1007  \r\n00007FFEF90D0FE9  add         rdx,0Fh  \r\n00007FFEF90D0FED  shr         rdx,4  \r\n00007FFEF90D0FF1  add         rsp,20h  \r\n00007FFEF90D0FF5  push        0  \r\n*** 00007FFEF90D0FF7  push        0    // crash when evaluate from here\r\n00007FFEF90D0FF9  dec         rdx  \r\n00007FFEF90D0FFC  jne         00007FFEF90D0FF5  \r\n00007FFEF90D0FFE  sub         rsp,20h  \r\n00007FFEF90D1002  lea         rdx,[rsp+20h]  \r\n00007FFEF90D1007  mov         r8d,3  \r\n00007FFEF90D100D  call        00007FFEF90D0730  \r\n00007FFEF90D1012  vmovdqu     xmm0,xmmword ptr [rbp+28h]  \r\n00007FFEF90D1017  vmovdqu     xmmword ptr [rbp+38h],xmm0  \r\n00007FFEF90D101C  vmovdqu     xmm0,xmmword ptr [rbp+38h]  \r\n00007FFEF90D1021  vmovdqu     xmmword ptr [rbp+48h],xmm0  \r\n```","Url":"https://github.com/dotnet/coreclr/issues/25753","RelatedDescription":"Open issue \"Func eval of SpanDebugView crashes when stepping over stackalloc\" (#25753)"},{"Id":"469352885","IsPullRequest":true,"CreatedAt":"2019-07-17T18:35:03","Actor":"sdmaclea","Number":"25751","RawContent":null,"Title":"Arm64 SingleStep revise load literal emulation","State":"closed","Body":"On Linux it is not possible to update the floating point registers during a\r\nsignal handler return from exception. The floating point registers are not in\r\nthe native context.\r\n\r\nInstead of emulating load literal, adjust the literal offset to point\r\nto a copied literal in our buffer.\r\n\r\nFixes #25694","Url":"https://github.com/dotnet/coreclr/pull/25751","RelatedDescription":"Closed or merged PR \"Arm64 SingleStep revise load literal emulation\" (#25751)"},{"Id":"468960789","IsPullRequest":true,"CreatedAt":"2019-07-17T17:28:12","Actor":"sdmaclea","Number":"25745","RawContent":null,"Title":"Arm64 Fix Rtl*Context","State":"closed","Body":"Fix issues related to save restore of FPCR/FPSR/V0/V31\r\n\r\nThere were several bugs in the assembly causing FPCR/FPSR\r\nto overwrite V0 on RtlCaptureContext.  Then restore from V0 on\r\nRtlRestoreContext","Url":"https://github.com/dotnet/coreclr/pull/25745","RelatedDescription":"Closed or merged PR \"Arm64 Fix Rtl*Context\" (#25745)"},{"Id":"469277017","IsPullRequest":true,"CreatedAt":"2019-07-17T17:01:38","Actor":"stephentoub","Number":"25749","RawContent":null,"Title":"Remove now unnecessary !s / TODO-NULLABLE comments","State":"closed","Body":"We've updated to a compiler that now respects [DoesNotReturn] and [NotNullIfNotNull], and that special-cases Interlocked.CompareExchange.  That let's us remove a ton of `!`s and `TODO-NULLABLE` comments.\r\n\r\ncc: @dotnet/nullablefc, @agocke ","Url":"https://github.com/dotnet/coreclr/pull/25749","RelatedDescription":"Closed or merged PR \"Remove now unnecessary !s / TODO-NULLABLE comments\" (#25749)"},{"Id":"469281351","IsPullRequest":true,"CreatedAt":"2019-07-17T15:16:28","Actor":"tannergooding","Number":"25750","RawContent":null,"Title":"Fixing Buffer::BlockCopy, JIT_MemCpy, and JIT_MemSet to just call the appropriate CRT functions for x64 Windows, as is already done for all other platforms/targets","State":"open","Body":"This resolves https://github.com/dotnet/coreclr/issues/25505.\r\n\r\nBased on the original issue where `JIT_MemCpy` was changed to use `rep movsb` (see https://github.com/dotnet/coreclr/pull/7198), there was:\r\n* minor improvement (~5%) for arrays of length 0 to 120\r\n* good improvement (~40%) for arrays of length 130 to 510\r\n  * ~47% for arrays of length 130 to 310\r\n  * ~39% for arrays of length 320 to 440\r\n  * ~27% for arrays of length 450 to 510\r\n* little improvement (~1%) for arrays above 510 in length\r\n  * This was only tested for 520 and 1000 bytes\r\n\r\nHowever, on AMD processors, there are additional limitations around `rep movsb` and when it is beneficial to use. The common conditions under which it is being used in the `JIT_MemCpy` method today actually cause a 2x perf decrease for arrays larger than 512 bytes.\r\n\r\nHaving a custom memcpy routine adds additional maintenance burden, can be error prone, is generally not as widely tested, and does not get many of the optimizations that the CRT implementations receives. This, coupled with the overall minor improvements for small arrays on Intel processors and the 2x regression for arrays over 512 bytes on AMD processors is resulting in the custom memcpy routine being removed.\r\n\r\nIt would be beneficial for any future improvements to `memcpy` to be made directly against `glibc` and `crt` instead.","Url":"https://github.com/dotnet/coreclr/pull/25750","RelatedDescription":"Open PR \"Fixing Buffer::BlockCopy, JIT_MemCpy, and JIT_MemSet to just call the appropriate CRT functions for x64 Windows, as is already done for all other platforms/targets\" (#25750)"},{"Id":"468928072","IsPullRequest":true,"CreatedAt":"2019-07-17T14:02:34","Actor":"ivanbuha","Number":"25741","RawContent":null,"Title":"Renamed pInitRegZeroed to pInitRegModified, per #24985","State":"closed","Body":"Renamed pInitRegZeroed to pInitRegModified. Reversed assignment of boolean values to accommodate renaming.\r\n\r\nFix #24985\r\n\r\nOut of curiosity have a question why *pInitRegZeroed is set to false after rAddr           = initReg assignment (line 6125 of this pull request).\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25741","RelatedDescription":"Closed or merged PR \"Renamed pInitRegZeroed to pInitRegModified, per #24985\" (#25741)"},{"Id":"468928850","IsPullRequest":true,"CreatedAt":"2019-07-17T13:50:58","Actor":"safern","Number":"25742","RawContent":null,"Title":" Run darc update for arcade","State":"closed","Body":"A build is finally out with the new compiler.\r\n\r\n@stephentoub  if you haven't done it I can remove the `!` in this PR for `DoesNotReturn` attributes.\r\n\r\n@agocke are the non-nullable uninitialized events warning that I needed to workaround with `null!` expected? ","Url":"https://github.com/dotnet/coreclr/pull/25742","RelatedDescription":"Closed or merged PR \" Run darc update for arcade\" (#25742)"},{"Id":"469162270","IsPullRequest":true,"CreatedAt":"2019-07-17T12:24:08","Actor":"dotnet-maestro[bot]","Number":"25748","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190716.4\r\n- **Date Produced**: 7/16/2019 7:16 PM\r\n- **Commit**: 0dd5e2025f0049c133a8706f40e4463b193e5d17\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19366.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19366.4\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25748","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#25748)"},{"Id":"468937582","IsPullRequest":true,"CreatedAt":"2019-07-17T01:10:23","Actor":"EgorBo","Number":"25744","RawContent":null,"Title":"JIT: Transform X % C == 0  to  X & (C-1) == 0","State":"open","Body":"Optimize `X % C == 0` to `X & (C-1) == 0`. This expression is used in [DateTime.IsLeapYear](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/DateTime.cs#L1191).\r\n\r\nC#:\r\n```csharp\r\nbool Test(int year) => year % 4 == 0;\r\n```\r\n\r\nOld:\r\n```asm\r\n; Method T:Test(int):bool\r\nG_M29623_IG01:\r\n\r\nG_M29623_IG02:\r\n       mov      eax, edx\r\n       sar      eax, 31\r\n       and      eax, 3\r\n       add      eax, edx\r\n       and      eax, -4\r\n       sub      edx, eax\r\n       sete     al\r\n       movzx    rax, al\r\n\r\nG_M29623_IG03:\r\n       ret      \r\n; Total bytes of code: 22\r\n```\r\nNew:\r\n```asm\r\n; Method T:Test(int):bool\r\n\r\nG_M29623_IG01:\r\n\r\nG_M29623_IG02:\r\n       test     dl, 3\r\n       sete     al\r\n       movzx    rax, al\r\n\r\nG_M29623_IG03:\r\n       ret      \r\n; Total bytes of code: 10\r\n```\r\n\r\nWill run jit diffs later.","Url":"https://github.com/dotnet/coreclr/pull/25744","RelatedDescription":"Open PR \"JIT: Transform X % C == 0  to  X & (C-1) == 0\" (#25744)"},{"Id":"468936907","IsPullRequest":true,"CreatedAt":"2019-07-17T01:06:50","Actor":"sdmaclea","Number":"25743","RawContent":null,"Title":"Arm64 restore d8-d15 in ThrowExceptionFromContextInternal","State":"open","Body":"This is either a bug or needs a comment why we never have to restore these registers when throwing from a context.","Url":"https://github.com/dotnet/coreclr/pull/25743","RelatedDescription":"Open PR \"Arm64 restore d8-d15 in ThrowExceptionFromContextInternal\" (#25743)"},{"Id":"468926574","IsPullRequest":false,"CreatedAt":"2019-07-17T00:13:45","Actor":"Kaelum","Number":"25740","RawContent":null,"Title":"StackTrace reports the wrong line number when the exception occurs within a while loop","State":"open","Body":"I created a new thread simply using:\r\n\r\n```cs\r\nThread thread = new Thread(Execute);\r\nthread.Start(cancellationToken);\r\n```\r\n\r\nwhere the `Execute` method is as defined as:\r\n\r\n```cs\r\nprivate void Execute(object data)\r\n{\r\n\tCancellationToken cancellationToken = (CancellationToken)data;\r\n\r\n\twhile (_run && !cancellationToken.IsCancellationRequested)\r\n\t{\r\n\t\t_logger.LogInformation($\"{nameof(ServiceMonitor)}: Create process for {Path.GetFileName(_appSettings.Service)}.\");\r\n\t\t_logger.LogInformation($\"{nameof(ServiceMonitor)}: Current directory: {Environment.CurrentDirectory}\");\r\n\r\n\t\tusing (_process = new Process())\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t_processDisposed = false;\r\n\t\t\t\t_process.Disposed += Process_Disposed;\r\n\r\n\t\t\t\t_process.StartInfo.FileName = _appSettings.Service;\r\n\t\t\t\t_process.StartInfo.Arguments = _appSettings.Arguments;\r\n\r\n\t\t\t\t_process.StartInfo.UseShellExecute = false;\r\n\t\t\t\t_process.StartInfo.CreateNoWindow = true;\r\n\t\t\t\t_process.Start();\r\n\r\n\t\t\t\t_logger.LogInformation($\"{nameof(ServiceMonitor)}({_appSettings.ServiceName}): - Process started\");\r\n\r\n\t\t\t\t_process.WaitForExit();\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\t_logger.LogError(ex, $\"Task.Run #00\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_process = null;\r\n\r\n\t\tthrow new Exception(\"We have failed!\");\r\n\r\n\t\t_logger.LogInformation($\"{nameof(ServiceMonitor)}({_appSettings.ServiceName}): - Process stopped\");\r\n\r\n\t\tif (_run && !cancellationToken.IsCancellationRequested)\r\n\t\t{\r\n\t\t\tThread.Sleep(_appSettings.RestartDelay * 1000);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nWhen the exception occurs within the `using` statement, the line number is correctly reported.  However, anywhere else within the `while` statement, the StackTrace will show the line number of the `while` statement, and not the actual line number of where the exception occurred.\r\n\r\nI haven't tried under different circumstances, as I'm under a time crunch and only have enough time to report the bug, and it's not preventing me from moving forward.","Url":"https://github.com/dotnet/coreclr/issues/25740","RelatedDescription":"Open issue \"StackTrace reports the wrong line number when the exception occurs within a while loop\" (#25740)"},{"Id":"468926494","IsPullRequest":true,"CreatedAt":"2019-07-17T00:13:23","Actor":"sywhang","Number":"25739","RawContent":null,"Title":"Fix first value of counter payload being skewed","State":"open","Body":"Fixes #25709. \r\n\r\nEventCounter, IncrementingPollingCounter, and IncrementingEventCounter may report a non-meaningful value when counter is enabled for the first time (or a long time after disable). This fixes it by reseting the statistics when counter is enabled, and not firing immediately when the EventSource is enabled.","Url":"https://github.com/dotnet/coreclr/pull/25739","RelatedDescription":"Open PR \"Fix first value of counter payload being skewed\" (#25739)"},{"Id":"468926256","IsPullRequest":false,"CreatedAt":"2019-07-17T00:12:14","Actor":"josalem","Number":"25738","RawContent":null,"Title":"Enabling EventPipe sends the IPC response before enabling has finished","State":"open","Body":"When the Diagnostics Server receives a Collect Tracing command, it will eventually call `EventPipe::Enable(...)`.  `Enable` is in charge of creating the session, initializing buffer flushing, initializing the file format, and sending the IPC response.  \r\n\r\nCurrently, The IPC response is sent in the constructor for `IpcStreamWriter`:\r\nhttps://github.com/dotnet/coreclr/blob/0cc81b60eb184c92b8526348d4bb056ed563e9d6/src/vm/fastserializer.cpp#L31-L33\r\n\r\nTo make sure that the IPC response is the _first_ thing sent across the pipe, as there are several unbuffered writes that follow in the construction path of `EventPipeFile`.  This means that the IPC response will be sent _before_ `EventPipe::RunWithCallbackPostponed` has called the callbacks on the list of enabled providers and before `EventPipe::EnableInternal` has been called.\r\n\r\nThis do not pose an issue for most out-of-proc scenarios, however, this poses a bit of a race for in-proc scenarios.  If a process were to connect to itself, there is a window of time where you might be listening on the pipe, but not seeing events from requested providers, e.g.\r\n```csharp\r\n            var processId = Process.GetCurrentProcess().Id;\r\n            var binaryReader = EventPipeClient.CollectTracing(processId, _sessionConfiguration, out var eventpipeSessionId);\r\n\r\n            EventPipeEventSource source = null;\r\n            var readerTask = new Task(() =>\r\n            {\r\n                source = new EventPipeEventSource(binaryReader);\r\n                source.Dynamic.All += (eventData) =>\r\n                {\r\n                    // ...\r\n                };\r\n                source.Process();\r\n            });\r\n\r\n            readerTask.Start();\r\n            _eventGeneratingAction();\r\n            EventPipeClient.StopTracing(processId, eventpipeSessionId);\r\n```\r\nIf `_eventGeneratingAction()` is sufficiently fast and this race occurs, you may not observe _any_ events from requested providers.\r\n\r\nA possible solution to this, is to find every call to `IpcStream::Write` that might occur inside `EventPipe::Enable` and refactor them into methods that can be called later, e.g., `EventPipeFile::SendHeaderInformation()`, and to defer the creation of `EventPipeSession`'s flushing thread till later in `EventPipe::Enable`.  This would allow for a flow like this:\r\n\r\n1. Diagnostics Server receives Collect Tracing command\r\n2. Call `EventPipe::Enable`\r\n3. Send IPC response\r\n4. Send file format prerequisites\r\n5. Turn on `EventPipeSession` flushing thread\r\n\r\nThis would ensure that `EventPipe::Enable` has finished turning on all the providers while still sending all the data in the correct order, i.e., IPC response, file format, events.\r\n\r\nA fix to this should be non-breaking.\r\n\r\nCC - @tommcdon @noahfalk @jorive ","Url":"https://github.com/dotnet/coreclr/issues/25738","RelatedDescription":"Open issue \"Enabling EventPipe sends the IPC response before enabling has finished\" (#25738)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"469538615","IsPullRequest":true,"CreatedAt":"2019-07-18T02:16:39","Actor":"dotnet-maestro[bot]","Number":"11941","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190717.10\r\n- **Date Produced**: 7/18/2019 4:23 AM\r\n- **Commit**: f7ba8f1002f7967b0eeb5f0da6bb35961cbbce56\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19367.10\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11941","RelatedDescription":"Open PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11941)"},{"Id":"469531653","IsPullRequest":false,"CreatedAt":"2019-07-18T01:48:25","Actor":"winnieryl","Number":"11940","RawContent":null,"Title":" dotnet-install.sh does not download correct version on RHEL 6 workstation","State":"open","Body":"https://dot.net/v1/dotnet-install.sh\r\nthis script, at line 151, it does not consider RHEL 6 Workstation, when I run this on rhel6 workstation, it downloads the wrong version fo dotnet runtime.\r\n\r\n## Steps to reproduce\r\nprepare a rhel 6 workstation, run dotnet-install.sh to install dotnet runtime\r\n\r\n## Expected  behavior\r\ndownload dotnet runtime rhel6 version\r\n\r\n## Actual behavior\r\ndoes not download the correct version\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11940","RelatedDescription":"Open issue \" dotnet-install.sh does not download correct version on RHEL 6 workstation\" (#11940)"},{"Id":"469504540","IsPullRequest":true,"CreatedAt":"2019-07-17T23:58:15","Actor":"dotnet-maestro[bot]","Number":"11939","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.12\r\n- **Date Produced**: 7/18/2019 1:25 AM\r\n- **Commit**: 02e6fc2ff8d962383f538241c899decc0d655a60\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27917-12\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27917-12\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27917-12\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11939","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#11939)"},{"Id":"469500632","IsPullRequest":true,"CreatedAt":"2019-07-17T23:43:22","Actor":"wli3","Number":"11938","RawContent":null,"Title":"AllowTrailingCommas and JsonCommentHandling.Skip for RuntimeConfig","State":"open","Body":"Fix https://github.com/dotnet/cli/issues/11918","Url":"https://github.com/dotnet/cli/pull/11938","RelatedDescription":"Open PR \"AllowTrailingCommas and JsonCommentHandling.Skip for RuntimeConfig\" (#11938)"},{"Id":"469478670","IsPullRequest":true,"CreatedAt":"2019-07-17T22:30:30","Actor":"nguerrera","Number":"11937","RawContent":null,"Title":"Unpin DependencyModel","State":"open","Body":"dotnet/core-setup#7137 is fixed and so we can now unpin DependencyModel\r\n\r\nAlso, it turns out that we were running msbuild on the stage0 runtime during tests, instead of the incoming runtime from core-setup, which is now fixed. This showed up as a missing method exception during local testing of this change.","Url":"https://github.com/dotnet/cli/pull/11937","RelatedDescription":"Open PR \"Unpin DependencyModel\" (#11937)"},{"Id":"469461723","IsPullRequest":true,"CreatedAt":"2019-07-17T22:15:39","Actor":"dotnet-maestro[bot]","Number":"11936","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190717.6\r\n- **Date Produced**: 7/17/2019 9:44 PM\r\n- **Commit**: fedf03bd47ca1c69de497f28349e4782e26874e9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19367.6\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11936","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11936)"},{"Id":"468983080","IsPullRequest":true,"CreatedAt":"2019-07-17T22:10:56","Actor":"wli3","Number":"11926","RawContent":null,"Title":"Give specific instruction for zsh on macOS for global tools PATH","State":"closed","Body":"fix https://github.com/dotnet/cli/issues/9321\r\nexample:\r\n\r\n```\r\n% dotnet tool install -g dotnetsay --add-source https://api.nuget.org/v3/index.json\r\nTools directory '/Users/williamli/.dotnet/tools' is not currently on the PATH environment variable.\r\nIf you are using zsh, you can add it to your profile by running the following command:\r\n\r\ncat << \\EOF >> ~/.zprofile\r\n# Add .NET Core SDK tools\r\nexport PATH=\"$PATH:/Users/williamli/.dotnet/tools\"\r\nEOF\r\n\r\nAnd run `zsh -l` to make it available for current session.\r\n\r\nYou can only add it to the current session by running the following command:\r\n\r\nexport PATH=\"$PATH:/Users/williamli/.dotnet/tools\"\r\n\r\nYou can invoke the tool using the following command: dotnetsay\r\nTool 'dotnetsay' (version '2.1.4') was successfully installed.\r\n```\r\n","Url":"https://github.com/dotnet/cli/pull/11926","RelatedDescription":"Closed or merged PR \"Give specific instruction for zsh on macOS for global tools PATH\" (#11926)"},{"Id":"469455756","IsPullRequest":true,"CreatedAt":"2019-07-17T21:59:35","Actor":"dotnet-maestro[bot]","Number":"11935","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.07\r\n- **Date Produced**: 7/17/2019 9:28 PM\r\n- **Commit**: fbe24089c59a9f330dfb7c4db4ae97a293685510\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27917-07\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27917-07\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27917-07\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11935","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11935)"},{"Id":"469403519","IsPullRequest":true,"CreatedAt":"2019-07-17T20:35:38","Actor":"dotnet-maestro[bot]","Number":"11933","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.05\r\n- **Date Produced**: 7/17/2019 7:29 PM\r\n- **Commit**: 6616692a7281748c11e3d6873988d85a1e79fc50\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27917-05\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27917-05\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27917-05\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11933","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11933)"},{"Id":"469407582","IsPullRequest":true,"CreatedAt":"2019-07-17T20:15:22","Actor":"dotnet-maestro[bot]","Number":"11934","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190717.4\r\n- **Date Produced**: 7/17/2019 7:39 PM\r\n- **Commit**: 4f638f8e11f827ce81c95f92a2723954826ee953\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19367.4\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11934","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11934)"},{"Id":"469163552","IsPullRequest":true,"CreatedAt":"2019-07-17T13:02:12","Actor":"dotnet-maestro[bot]","Number":"11932","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190717.2\r\n- **Date Produced**: 7/17/2019 12:26 PM\r\n- **Commit**: f4f5b16e9305d54d27aefe0076cf153efab7e119\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19367.2\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11932","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11932)"},{"Id":"469154754","IsPullRequest":true,"CreatedAt":"2019-07-17T12:37:09","Actor":"dotnet-maestro[bot]","Number":"11931","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190716.4\r\n- **Date Produced**: 7/16/2019 10:20 PM\r\n- **Commit**: 74b343a9f4db2924a37e78de817b2d314f812c16\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19366.4\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11931","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11931)"},{"Id":"469064924","IsPullRequest":true,"CreatedAt":"2019-07-17T09:16:55","Actor":"dotnet-maestro[bot]","Number":"11929","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.01\r\n- **Date Produced**: 7/17/2019 8:46 AM\r\n- **Commit**: 7cf49f78deaae14948ce59fc6d9266365888f7b6\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27917-01\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27917-01\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27917-01\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11929","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11929)"},{"Id":"469079348","IsPullRequest":false,"CreatedAt":"2019-07-17T09:16:47","Actor":"Jepson109","Number":"11930","RawContent":null,"Title":"Restore  with waning NETSDK1080 after target the project(mvc/web/webapi) framework from 2.1 to 3.0","State":"open","Body":"## Steps to reproduce\r\n1.Install .NET Core 3.0 Preview 7 build 3.0.100-preview7-012821\r\n2.Open an existing 2.1 (mvc/web/webapi) project\r\n3.Target the project(mvc/web/webapi) framework from 2.1 to 3.0\r\n\r\n## Expected  behavior\r\nDotnet restore & dotnet build successfully\r\n\r\n## Actual behavior\r\n**Dotnet restore  with warning NETSDK1080.** Details as below :\r\n![image](https://user-images.githubusercontent.com/38854445/61362997-cb028e00-a8b5-11e9-8a59-f614eb5228cf.png)\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(154,5): warning NETSDK1080: A PackageReference to Microsoft.AspNetCore.App is not necessary when targeting .NET Core 3.0 or higher. If Microsoft.NET.Sdk.Web is used, the shared framework will be referenced automatically. Otherwise, the PackageReference should be replaced with a FrameworkReference. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\n  Restore completed in 158.55 ms for C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj.\r\n\r\n**Dotnet build failed with warning and error.** Details as below :\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(154,5): warning NETSDK1080: A PackageReference to Microsoft.AspNetCore.App is not necessary when targeting .NET Core 3.0 or higher. If Microsoft.NET.Sdk.Web is used, the shared framework will be referenced automatically. Otherwise, the PackageReference should be replaced with a FrameworkReference. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(154,5): warning NETSDK1080: A PackageReference to Microsoft.AspNetCore.App is not necessary when targeting .NET Core 3.0 or higher. If Microsoft.NET.Sdk.Web is used, the shared framework will be referenced automatically. Otherwise, the PackageReference should be replaced with a FrameworkReference. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\Sdks\\Microsoft.NET.Sdk.Razor\\build\\netstandard2.0\\Sdk.Razor.CurrentVersion.targets(404,5): warning RAZORSDK1006: Detected Razor language version downgrade. This is typically caused by a reference to the Microsoft.AspNetCore.Razor.Design package. Consider removing this package reference. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nStartup.cs(39,56): warning CS0618: 'IHostingEnvironment' is obsolete: 'This type is obsolete and will be removed in a future version. The recommended alternative is Microsoft.AspNetCore.Hosting.IWebHostEnvironment.' [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nStartup.cs(35,55): warning CS0618: 'CompatibilityVersion.Version_2_1' is obsolete: 'This CompatibilityVersion value is obsolete. The recommended alternatives are Version_3_0 or later.' [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nStartup.cs(55,13): warning MVC1005: Using 'UseMvc' to configure MVC is not supported while using Endpoint Routing. To continue using 'UseMvc', please set 'MvcOptions.EnableEndpointRouting = false' inside 'ConfigureServices'. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.design\\2.1.2\\build\\netstandard2.0\\Microsoft.AspNetCore.Razor.Design.CodeGeneration.targets(69,5): error : The project C:\\Users\\v-zhuqin\\Desktop\\mvc23 must provide a value for Configuration. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\n    6 Warning(s)\r\n    1 Error(s)\r\n\r\n![image](https://user-images.githubusercontent.com/38854445/61363429-9216e900-a8b6-11e9-8a50-1a516eab7c2a.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview7-012821\r\n Commit:    6348f1068a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview7-27912-14\r\n  Commit:  4da6ee6450\r\n\r\n.NET Core SDKs installed:\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview7-012821 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview7.19365.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview7-27912-14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview7-27912-14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11930","RelatedDescription":"Open issue \"Restore  with waning NETSDK1080 after target the project(mvc/web/webapi) framework from 2.1 to 3.0\" (#11930)"},{"Id":"469008498","IsPullRequest":true,"CreatedAt":"2019-07-17T06:57:55","Actor":"dotnet-maestro[bot]","Number":"11928","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190716.14\r\n- **Date Produced**: 7/17/2019 6:22 AM\r\n- **Commit**: f7a00f0aa4a0dcf878a9345d260c8f4cf495b65e\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27916-14\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27916-14\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27916-14\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11928","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11928)"},{"Id":"468992296","IsPullRequest":true,"CreatedAt":"2019-07-17T05:55:39","Actor":"dotnet-maestro[bot]","Number":"11927","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190716.10\r\n- **Date Produced**: 7/17/2019 5:24 AM\r\n- **Commit**: 4ba66f05bf2ff20e38ae00d3ab27256df778a652\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19366.10\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11927","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11927)"},{"Id":"468964664","IsPullRequest":true,"CreatedAt":"2019-07-17T05:38:25","Actor":"dotnet-maestro[bot]","Number":"11924","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190716.13\r\n- **Date Produced**: 7/17/2019 5:04 AM\r\n- **Commit**: 5257c8c2bf8b492a8df9aaae89ebdc3b26356936\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27916-13\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27916-13\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27916-13\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11924","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11924)"},{"Id":"468965211","IsPullRequest":true,"CreatedAt":"2019-07-17T03:50:16","Actor":"dotnet-maestro[bot]","Number":"11925","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190716.8\r\n- **Date Produced**: 7/17/2019 3:19 AM\r\n- **Commit**: 892ea7e57464984fa530ad2b3e4b6a66e157392e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19366.8\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11925","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11925)"},{"Id":"468907112","IsPullRequest":true,"CreatedAt":"2019-07-17T00:04:51","Actor":"dotnet-maestro[bot]","Number":"11923","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190716.5\r\n- **Date Produced**: 7/16/2019 10:58 PM\r\n- **Commit**: 9f82b7be7523e4057cc610bc9aaadf28887952c3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19366.5\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11923","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11923)"},{"Id":"468774418","IsPullRequest":true,"CreatedAt":"2019-07-16T23:09:17","Actor":"dotnet-maestro[bot]","Number":"11921","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190716.06\r\n- **Date Produced**: 7/16/2019 10:38 PM\r\n- **Commit**: c6aac9cbaa2aafd387b8df1b78022f08c3d61aef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27916-06\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27916-06\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27916-06\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11921","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11921)"},{"Id":"468814452","IsPullRequest":true,"CreatedAt":"2019-07-16T19:37:31","Actor":"dotnet-maestro[bot]","Number":"11922","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190716.3\r\n- **Date Produced**: 7/16/2019 7:01 PM\r\n- **Commit**: 632823618751bfb299382740386b6b49953b1798\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19366.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11922","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11922)"},{"Id":"468698075","IsPullRequest":true,"CreatedAt":"2019-07-16T18:32:58","Actor":"vnwonah","Number":"11916","RawContent":null,"Title":"Fixed build failing for usernames with spaces","State":"closed","Body":"I opened an issue where the build was failing because of a space in my username <Firstname Lastname>\r\nThis was caused because $PSScriptRoot is being passed to Invoke-Expression without escaping the space in the path.\r\n\r\nFixes #11812","Url":"https://github.com/dotnet/cli/pull/11916","RelatedDescription":"Closed or merged PR \"Fixed build failing for usernames with spaces\" (#11916)"},{"Id":"468768989","IsPullRequest":true,"CreatedAt":"2019-07-16T17:46:18","Actor":"dotnet-maestro[bot]","Number":"11920","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190716.1\r\n- **Date Produced**: 7/16/2019 5:10 PM\r\n- **Commit**: 7f2a97a603b0a83a55a654f49d0290e5eae530a4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19366.1\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11920","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11920)"},{"Id":"468751864","IsPullRequest":true,"CreatedAt":"2019-07-16T17:23:13","Actor":"dotnet-maestro[bot]","Number":"11919","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190716.04\r\n- **Date Produced**: 7/16/2019 4:28 PM\r\n- **Commit**: 828432edc47ad23dfdd045351d1939b1e4f0cb27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27916-04\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27916-04\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27916-04\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11919","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11919)"},{"Id":"468736725","IsPullRequest":true,"CreatedAt":"2019-07-16T16:27:10","Actor":"dotnet-maestro[bot]","Number":"11917","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190716.03\r\n- **Date Produced**: 7/16/2019 3:56 PM\r\n- **Commit**: 828432edc47ad23dfdd045351d1939b1e4f0cb27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27916-03\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27916-03\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27916-03\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11917","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11917)"},{"Id":"468746663","IsPullRequest":false,"CreatedAt":"2019-07-16T16:17:51","Actor":"wli3","Number":"11918","RawContent":null,"Title":"enable all s.t.json options for .runtimeconfig.json","State":"open","Body":"Per https://github.com/dotnet/cli/issues/11756#issuecomment-511145296\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11918","RelatedDescription":"Open issue \"enable all s.t.json options for .runtimeconfig.json\" (#11918)"},{"Id":"468650674","IsPullRequest":false,"CreatedAt":"2019-07-16T15:38:36","Actor":"saxenark","Number":"11914","RawContent":null,"Title":"dotnet test coverage with partially failed tests","State":"closed","Body":"Hi,\r\n\r\nI am using .net core 2.2 in my ASP.NET core application. My command line to invoke tests is like so:\r\n\r\ndotnet test -v n <path_to_test_csproj> -c Release --no-build --logger:trx /p:CollectCoverage=true /p:CoverletOutputFormat=\\\"opencover,lcov,Cobertura\\\" /p:CoverletOutput=<path_to_coverage_results> --results-directory <path_to_test_results>\r\n\r\nI have added reference to coverlet like so:\r\ndotnet add package coverlet.collector\r\ndotnet add package coverlet.msbuild\r\n\r\nWhen I run the dotnet test command line (as above), there are 3 of my tests which fail and no code coverage file is geneated. I however, want the code coverage report to be generated even if the tests fail (something that Visual Studio IDE based code coverage does).\r\n\r\nHow can I achieve code coverage results even if some of my tests fail?\r\n\r\nThanks,","Url":"https://github.com/dotnet/cli/issues/11914","RelatedDescription":"Closed issue \"dotnet test coverage with partially failed tests\" (#11914)"},{"Id":"468685373","IsPullRequest":true,"CreatedAt":"2019-07-16T14:53:46","Actor":"dotnet-maestro[bot]","Number":"11915","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190716.02\r\n- **Date Produced**: 7/16/2019 2:23 PM\r\n- **Commit**: b8cf4df7912ad4e9497963fee7f70810b74176a9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27916-02\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27916-02\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27916-02\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11915","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11915)"},{"Id":"468615416","IsPullRequest":true,"CreatedAt":"2019-07-16T12:35:46","Actor":"dotnet-maestro[bot]","Number":"11913","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190715.2\r\n- **Date Produced**: 7/16/2019 12:05 AM\r\n- **Commit**: 326a2514f7162dfb8ec928f879336aa434576473\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 2.0.0-preview8.19365.2\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11913","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11913)"},{"Id":"468613882","IsPullRequest":true,"CreatedAt":"2019-07-16T12:32:04","Actor":"dotnet-maestro[bot]","Number":"11912","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190715.1\r\n- **Date Produced**: 7/15/2019 3:33 PM\r\n- **Commit**: e2ff7a7e3f8dd8e63c07b55d7083c6fb6338e7e7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19365.1\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11912","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11912)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"469365862","IsPullRequest":false,"CreatedAt":"2019-07-17T18:04:22","Actor":"codernator","Number":"1352","RawContent":null,"Title":"Interesting BadImageFormatException involving generics, deferred functions, and closures.","State":"open","Body":"I stumbled over an edge case in which it is possible to write code that compiles but generates a BadImageFormatException with HResult: 0x8007000B during runtime. I originally found it in a C# 7.3 dotnet core 2.2 API application, but have reproduced it with a simple example in LINQPad 5, which uses C#7 and I believe dotnet standard 2.  The below contains both the exception generating code as well as similar counter-examples.\r\n\r\n\t/// <summary>\r\n\t/// Demonstrate how a generic function passing a closure to of a deferred function\r\n\t/// can create a BadImageFormatException. This includes an example of the exception,\r\n\t/// and similar examples that do not create the exception.\r\n\t/// </summary>\r\n\tstatic void Main()\r\n\t{\r\n\t\t// The data type and value is not important to this example.\r\n\t\t// Only the context in which this variable is used is important.\r\n\t\tvar myClosure = 0;\r\n\t\t\r\n\t\tHereComesTheException(new object[0]);\r\n\t\t//NonGenericNoException(new object[0]);\r\n\t\t//GenericWorkAroundA(new object[0]);\r\n\t\t//GenericWorkAroundB(new object[0]);\r\n\t\r\n\t\t// This fucntion creates a BadImageFormatException. Note the\r\n\t\t// use of myClosure within a deferred function that is\r\n\t\t// inline to a foreach. As far as I could read the IL, there is no\r\n\t\t// reference to myClosure in the scope of this function.\r\n\t\tvoid HereComesTheException<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tforeach (var thing in things.Where(tt => myClosure == 0)) {}\r\n\t\t}\r\n\t\r\n\t\t// This function doesn't create a BadImageFormatException...\r\n\t\t// The only difference from HereComesTheException is that\r\n\t\t// this function is not generic.\r\n\t\tvoid NonGenericNoException(IEnumerable<object> things)\r\n\t\t{\r\n\t\t\tforeach (var thing in things.Where(tt => myClosure == 0)) {}\r\n\t\t}\r\n\t\r\n\t\t// This function doesn't create a BadImageFormatException because the\r\n\t\t// outer closure is stored in a local variable that is clearly in scope \r\n\t\t// when the deferred function is executed.\r\n\t\tvoid GenericWorkAroundA<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tvar inner = myClosure;\r\n\t\t\tforeach (var thing in things.Where(tt => inner == 0)) {}\r\n\t\t}\r\n\t\t\r\n\t\t// This function doesn't create a BadImageFormatException... \r\n\t\t// Is this because declaring the Enumerator as a local variable forces\r\n\t\t// local context to be given to myClosure?\r\n\t\tvoid GenericWorkAroundB<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tvar filtered = things.Where(tt => myClosure == 0);\r\n\t\t\tforeach (var thing in filtered) {}\r\n\t\t}\r\n\t}","Url":"https://github.com/dotnet/standard/issues/1352","RelatedDescription":"Open issue \"Interesting BadImageFormatException involving generics, deferred functions, and closures.\" (#1352)"},{"Id":"469174631","IsPullRequest":true,"CreatedAt":"2019-07-17T13:00:53","Actor":"dotnet-maestro[bot]","Number":"1351","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190716.11\r\n- **Date Produced**: 7/17/2019 5:26 AM\r\n- **Commit**: da3d086edde315db03ff9b04c2926ab22940d50c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19366.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19366.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19366.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1351","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1351)"},{"Id":"469154006","IsPullRequest":true,"CreatedAt":"2019-07-17T12:15:21","Actor":"dotnet-maestro[bot]","Number":"1350","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190716.4\r\n- **Date Produced**: 7/16/2019 7:16 PM\r\n- **Commit**: 0dd5e2025f0049c133a8706f40e4463b193e5d17\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19366.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1350","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1350)"},{"Id":"468893474","IsPullRequest":true,"CreatedAt":"2019-07-17T01:56:05","Actor":"dotnet-maestro-bot","Number":"1348","RawContent":null,"Title":"[automated] Merge branch 'master' => 'release/3.0'","State":"closed","Body":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @42748379+dotnet-maestro[bot]\n* @wtgodbe\n* @terrajobst\n* @akoeplinger\n* @ericstj\n* @208120+akeeton\n* @roji\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/standard/pull/1348","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'master' => 'release/3.0'\" (#1348)"},{"Id":"468943337","IsPullRequest":true,"CreatedAt":"2019-07-17T01:37:57","Actor":"terrajobst","Number":"1349","RawContent":null,"Title":"Add attributes for expressing nullability","State":"open","Body":"This issue was brought up as part of a conversation with @divega from the EF team. While .NET Standard 2.1 itself won't have nullable annotations (see #1118), the idea is that code building for .NET Standard 2.1 should be able to express its own nullable state. This PR adds the attribute that are needed by library authors to tweak how their APIs are treated by C#'s flow analysis.\r\n\r\nThese APIs were reviewed in https://github.com/dotnet/corefx/issues/37826.","Url":"https://github.com/dotnet/standard/pull/1349","RelatedDescription":"Open PR \"Add attributes for expressing nullability\" (#1349)"},{"Id":"468352094","IsPullRequest":true,"CreatedAt":"2019-07-16T22:48:08","Actor":"wtgodbe","Number":"1344","RawContent":null,"Title":"Update branding to 2.2","State":"closed","Body":"Update File/Product versions to 5.0, and package versions to 2.2. Please don't merge before noon on 7/16\r\n\r\nCC @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1344","RelatedDescription":"Closed or merged PR \"Update branding to 2.2\" (#1344)"},{"Id":"468383500","IsPullRequest":true,"CreatedAt":"2019-07-16T17:19:36","Actor":"dotnet-maestro[bot]","Number":"1346","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190715.4\r\n- **Date Produced**: 7/15/2019 7:17 PM\r\n- **Commit**: fb27fd4d8a2b67d4333e33d4b898c65171c9f3c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19365.4\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1346","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1346)"},{"Id":"468629163","IsPullRequest":true,"CreatedAt":"2019-07-16T12:46:38","Actor":"dotnet-maestro[bot]","Number":"1347","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190715.14\r\n- **Date Produced**: 7/16/2019 8:58 AM\r\n- **Commit**: 4b348cc28f0ec996322d4d1a62cfae300f77604e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19365.14\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19365.14\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19365.14\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1347","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1347)"},{"Id":"468375012","IsPullRequest":true,"CreatedAt":"2019-07-15T23:25:46","Actor":"dotnet-maestro[bot]","Number":"1345","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190715.4\r\n- **Date Produced**: 7/15/2019 7:17 PM\r\n- **Commit**: fb27fd4d8a2b67d4333e33d4b898c65171c9f3c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19365.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1345","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1345)"},{"Id":"468110792","IsPullRequest":true,"CreatedAt":"2019-07-15T16:09:13","Actor":"dotnet-maestro[bot]","Number":"1343","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190714.1\r\n- **Date Produced**: 7/14/2019 3:24 PM\r\n- **Commit**: c14b80faff694bae4e085bad221e2e83410e5f33\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19364.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19364.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19364.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1343","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1343)"},{"Id":"468089492","IsPullRequest":true,"CreatedAt":"2019-07-15T12:15:20","Actor":"dotnet-maestro[bot]","Number":"1342","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190714.1\r\n- **Date Produced**: 7/14/2019 1:05 PM\r\n- **Commit**: 0c81c2bbdc49749e9940bc8858ebd16026d51277\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19364.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1342","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1342)"},{"Id":"467832518","IsPullRequest":true,"CreatedAt":"2019-07-14T12:59:01","Actor":"dotnet-maestro[bot]","Number":"1341","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190713.4\r\n- **Date Produced**: 7/14/2019 1:05 AM\r\n- **Commit**: 750e954f0c82accded6ca7ac5a3b0c053de647a5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19363.4\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19363.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19363.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1341","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1341)"},{"Id":"467828224","IsPullRequest":true,"CreatedAt":"2019-07-14T12:14:03","Actor":"dotnet-maestro[bot]","Number":"1340","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190713.1\r\n- **Date Produced**: 7/13/2019 12:59 PM\r\n- **Commit**: 8c94bc75d29cd84e3592e4044100d45a341653f7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19363.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1340","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1340)"},{"Id":"467716205","IsPullRequest":true,"CreatedAt":"2019-07-13T12:54:47","Actor":"dotnet-maestro[bot]","Number":"1339","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190712.11\r\n- **Date Produced**: 7/13/2019 6:12 AM\r\n- **Commit**: 1841042b99062de13dc80098cede9413be569238\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19362.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19362.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19362.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1339","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1339)"},{"Id":"467712007","IsPullRequest":true,"CreatedAt":"2019-07-13T12:14:07","Actor":"dotnet-maestro[bot]","Number":"1338","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190712.5\r\n- **Date Produced**: 7/12/2019 10:49 PM\r\n- **Commit**: 15f50ca6a9d0b441c9927421657fb9dc91206cc9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19362.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1338","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1338)"},{"Id":"466519567","IsPullRequest":true,"CreatedAt":"2019-07-12T21:43:15","Actor":"terrajobst","Number":"1326","RawContent":null,"Title":"Expose AesCcm and AesGcm","State":"closed","Body":"Fixes #1295.\r\n\r\n/cc @alecgn","Url":"https://github.com/dotnet/standard/pull/1326","RelatedDescription":"Closed or merged PR \"Expose AesCcm and AesGcm\" (#1326)"},{"Id":"467460987","IsPullRequest":false,"CreatedAt":"2019-07-12T20:31:42","Actor":"jons-aura","Number":"1337","RawContent":null,"Title":"netcoreapp2.2 referencing netstandard2.0 dependency conflict","State":"closed","Body":"I have a netcoreapp2.2 project that references a netstandard2.0 project. When I try to build the solution I get the warning below in the log and the build fails completely in Azure Devops.\r\n\r\nAll NuGet packages are up to date.\r\n\r\nI did some searching to find existing issues but they all seem to reference .Net 4.6 or .Net 4.7 and .Net Standard rather than .Net Core\r\n\r\n```\r\n2>    Dependency \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n2>        Could not resolve this reference. Could not locate the assembly \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors.\r\n2>        Required by \"System.Reflection.Metadata\".\r\n2>    There was a conflict between \"System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" and \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n2>        \"System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was chosen because it was primary and \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was not.\r\n2>        References which depend on \"System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\System.Runtime.dll].\r\n2>            C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\System.Runtime.dll\r\n2>              Project file item includes which caused reference \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\System.Runtime.dll\".\r\n2>                C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\System.Runtime.dll\r\n2>        References which depend on \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [].\r\n2>            C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\r\n2>              Project file item includes which caused reference \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\".\r\n2>                System.Reflection.Metadata\r\n2>    C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(2106,5): warning MSB3277: Found conflicts between different versions of \"System.Runtime\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\n2>  Done executing task \"ResolveAssemblyReference\".\r\n```","Url":"https://github.com/dotnet/standard/issues/1337","RelatedDescription":"Closed issue \"netcoreapp2.2 referencing netstandard2.0 dependency conflict\" (#1337)"},{"Id":"467395066","IsPullRequest":true,"CreatedAt":"2019-07-12T12:55:56","Actor":"dotnet-maestro[bot]","Number":"1336","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190711.13\r\n- **Date Produced**: 7/12/2019 8:11 AM\r\n- **Commit**: e519628accc31bd3d5f0a3bc5f937a2ec1dd55d1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19361.13\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19361.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19361.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1336","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1336)"},{"Id":"467378098","IsPullRequest":true,"CreatedAt":"2019-07-12T12:14:08","Actor":"dotnet-maestro[bot]","Number":"1335","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190711.7\r\n- **Date Produced**: 7/12/2019 2:02 AM\r\n- **Commit**: f1b09644408f45f43f5835786b3e4bdfd2e78141\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19361.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1335","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1335)"},{"Id":"466629123","IsPullRequest":false,"CreatedAt":"2019-07-11T23:32:56","Actor":"terrajobst","Number":"1330","RawContent":null,"Title":"Clarify .NET Standard 2.1 platform support","State":"closed","Body":"The current .NET Standard 2.1 platform support [is listed](https://github.com/dotnet/standard/blob/master/docs/versions.md) as follows:\r\n\r\n\r\n|<div align=\"left\">.NET Standard</div>|             2.1 |\r\n|:-------------------------------------|------------------:|\r\n|.NET Core                             | **3.0**           |\r\n|.NET Framework                        | *N/A<sup>2</sup>* |\r\n|Mono                                  | **6.2**           |\r\n|Xamarin.iOS                           | **12.12**         |\r\n|Xamarin.Mac                           | **5.12**          |\r\n|Xamarin.Android                       | **9.3**           |\r\n|Unity                                 | *TBD*             |\r\n|Universal Windows Platform            | *TBD*             |\r\n\r\n@akoeplinger Are these the correct versions for Mono/Xamarin?\r\n\r\n@joshpeterson Do you already know the version of Unity that will support .NET Standard 2.1?\r\n\r\n/cc @dotnet/nsboard @rowanmiller ","Url":"https://github.com/dotnet/standard/issues/1330","RelatedDescription":"Closed issue \"Clarify .NET Standard 2.1 platform support\" (#1330)"},{"Id":"466944957","IsPullRequest":true,"CreatedAt":"2019-07-11T23:29:25","Actor":"akoeplinger","Number":"1333","RawContent":null,"Title":"Update Xamarin versions for NS2.1 support","State":"closed","Body":"These versions will contain the .NET Standard 2.1 updates.\r\n\r\n@marek-safar @steveisok we're still tracking Mono 2019-06 for this right?","Url":"https://github.com/dotnet/standard/pull/1333","RelatedDescription":"Closed or merged PR \"Update Xamarin versions for NS2.1 support\" (#1333)"},{"Id":"466574515","IsPullRequest":true,"CreatedAt":"2019-07-11T17:42:06","Actor":"wtgodbe","Number":"1329","RawContent":null,"Title":"Add RefEmit nullability annotations to baseline","State":"closed","Body":"CC @terrajobst @safern \r\n\r\nThese pop up when building locally, due to the added annotations in the ref: https://github.com/dotnet/corefx/commit/d688b187115d70ecd6df79a9cb9a04e46b1b00e1#diff-b17852d6d680ddb1418099b32839155c","Url":"https://github.com/dotnet/standard/pull/1329","RelatedDescription":"Closed or merged PR \"Add RefEmit nullability annotations to baseline\" (#1329)"},{"Id":"466956795","IsPullRequest":false,"CreatedAt":"2019-07-11T15:18:07","Actor":"sabmah","Number":"1334","RawContent":null,"Title":"MSBuild can't package .net 4.6.1 project w/ net core refrences. missing netstandard dll ","State":"open","Body":"I have a .net 4.6.1 class library that references these packages:\r\n\r\n- Microsoft.AspNetCore.Http.Abstractions\r\n- Microsoft.AspNetCore.Http.Features\r\n- Microsoft.AspNetCore.Mvc.Abstractions\r\n- Microsoft.AspNetCore.Routing.Abstractions\r\n\r\nI also added `<Reference Include=\"netstandard\" />` in class library .csproj file because it was complaining w/ error below. \r\n`\r\n The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n`\r\n\r\nThat class library is then referenced in another asp.net 4.6.1 web project. I'm able to build this project on TeamCity CI server and includes netstandard.dll in bin folder.\r\n\r\nBut when I package the web project using `msbuild /t:package /p:configuration=Test`, it doesn't include netstandard.dll in bin folder which causes app to not work in IIS after deployment. I get this error message.\r\n\r\n`\r\nException message: Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\n`\r\n\r\nIs there any reason that why /t:package is not including the netstandard.dll?","Url":"https://github.com/dotnet/standard/issues/1334","RelatedDescription":"Open issue \"MSBuild can't package .net 4.6.1 project w/ net core refrences. missing netstandard dll \" (#1334)"},{"Id":"466870629","IsPullRequest":true,"CreatedAt":"2019-07-11T12:55:38","Actor":"dotnet-maestro[bot]","Number":"1332","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190710.10\r\n- **Date Produced**: 7/11/2019 5:40 AM\r\n- **Commit**: e75dd151c9e5aa94cf33c7c9d14a53180df747dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19360.10\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19360.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19360.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1332","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1332)"},{"Id":"466851318","IsPullRequest":true,"CreatedAt":"2019-07-11T12:14:41","Actor":"dotnet-maestro[bot]","Number":"1331","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190710.8\r\n- **Date Produced**: 7/10/2019 11:51 PM\r\n- **Commit**: a6ae1b637ed236354529992729af875f6c8a180a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19360.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1331","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1331)"},{"Id":"466524102","IsPullRequest":true,"CreatedAt":"2019-07-11T03:12:52","Actor":"riarenas","Number":"1327","RawContent":null,"Title":"Add feeds from Versions.props to NuGet.config","State":"closed","Body":"We need all restore sources to be located in NuGet.config since internal feeds can only be restored from there. More details including next steps [here](https://github.com/dotnet/arcade/blob/master/Documentation/RestoreSourcesUpdateStatus.md)","Url":"https://github.com/dotnet/standard/pull/1327","RelatedDescription":"Closed or merged PR \"Add feeds from Versions.props to NuGet.config\" (#1327)"},{"Id":"466572937","IsPullRequest":true,"CreatedAt":"2019-07-11T03:12:43","Actor":"wtgodbe","Number":"1328","RawContent":null,"Title":" Remove myget dotnet-core feed from restore sources in Versions.props","State":"closed","Body":"It isn't needed as we can restore everything from dotnetfeed.\r\n\r\nCC @ericstj @riarenas ","Url":"https://github.com/dotnet/standard/pull/1328","RelatedDescription":"Closed or merged PR \" Remove myget dotnet-core feed from restore sources in Versions.props\" (#1328)"},{"Id":"465994202","IsPullRequest":true,"CreatedAt":"2019-07-10T20:54:41","Actor":"akeeton","Number":"1323","RawContent":null,"Title":"Fix \"compat shim\" link in FAQ","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1323","RelatedDescription":"Closed or merged PR \"Fix \"compat shim\" link in FAQ\" (#1323)"},{"Id":"466292622","IsPullRequest":true,"CreatedAt":"2019-07-10T13:04:35","Actor":"dotnet-maestro[bot]","Number":"1325","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190710.1\r\n- **Date Produced**: 7/10/2019 11:55 AM\r\n- **Commit**: dcf1c8f51bcdbd79e08cc672e327d50612690a25\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19360.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19360.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19360.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1325","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1325)"},{"Id":"466269735","IsPullRequest":true,"CreatedAt":"2019-07-10T12:14:14","Actor":"dotnet-maestro[bot]","Number":"1324","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190709.6\r\n- **Date Produced**: 7/9/2019 10:54 PM\r\n- **Commit**: 0f5dd7680174620f31c9a00cdb2ac0b0e70e631f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19359.6\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1324","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1324)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"469472057","IsPullRequest":true,"CreatedAt":"2019-07-18T03:07:04","Actor":"safern","Number":"39578","RawContent":null,"Title":"Make all events nullable","State":"closed","Body":"This is the corefx part of: https://github.com/dotnet/coreclr/pull/25752\r\n\r\nThe events in AppContext are baselined and not exposed in corefx: https://github.com/dotnet/corefx/blob/53dc908890102d3a888ba603a06266b85d3f4a9b/src/System.Runtime/src/MatchingRefApiCompatBaseline.txt#L2-L7\r\n\r\nThis will need to be ported to 3.0.\r\n\r\ncc: @danmosemsft @terrajobst @stephentoub ","Url":"https://github.com/dotnet/corefx/pull/39578","RelatedDescription":"Closed or merged PR \"Make all events nullable\" (#39578)"},{"Id":"469532425","IsPullRequest":false,"CreatedAt":"2019-07-18T02:41:33","Actor":"AriNuer","Number":"39581","RawContent":null,"Title":"Test failure : System.Net.Tests.HttpWebRequestTest/PreAuthenticate_SetAndGetBooleanResponse_ValuesMatch(remoteServer: http://corefx-net-http11.azurewebsites.net/Echo.ashx) ","State":"closed","Body":"Test `System.Net.Tests.HttpWebRequestTest/PreAuthenticate_SetAndGetBooleanResponse_ValuesMatch(remoteServer: http://corefx-net-http11.azurewebsites.net/Echo.ashx) ` has failed.\r\n\r\nMessage :\r\n```\r\nSystem.Net.WebException : The requested name is valid, but no data of the requested type was found. The requested name is valid, but no data of the requested type was found.\r\n---- System.Net.Http.HttpRequestException : The requested name is valid, but no data of the requested type was found.\r\n-------- System.Net.Sockets.SocketException : The requested name is valid, but no data of the requested type was found.\r\n```\r\nStack Trace :\r\n```\r\n  at System.Net.HttpWebRequest.GetResponse() in /_/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs:line 1004\r\n   at System.Net.Tests.HttpWebRequestTest.PreAuthenticate_SetAndGetBooleanResponse_ValuesMatch(Uri remoteServer) in /_/src/System.Net.Requests/tests/HttpWebRequestTest.cs:line 656\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs:line 73\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 626\r\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 666\r\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 332\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 524\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/RedirectHandler.cs:line 33\r\n   at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in /_/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 553\r\n   at System.Net.HttpWebRequest.SendRequest() in /_/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs:line 1217\r\n   at System.Net.HttpWebRequest.GetResponse() in /_/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs:line 1000\r\n----- Inner Stack Trace -----\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in /_/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/ConnectHelper.cs:line 54\r\n```\r\nBuild: -[20190717.35](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F~2F/20190717.35)(Master)\r\n\r\nFailing configuration:\r\n\r\n- Windows.10.Arm64.Open-arm64-Release\r\n\r\nDetails:\r\nhttps://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F~2F/20190717.35/workItem/System.Net.Requests.Tests/analysis/xunit/System.Net.Tests.HttpWebRequestTest~2FPreAuthenticate_SetAndGetBooleanResponse_ValuesMatch(remoteServer:%20http:~2F~2Fcorefx-net-http11.azurewebsites.net~2FEcho.ashx)","Url":"https://github.com/dotnet/corefx/issues/39581","RelatedDescription":"Closed issue \"Test failure : System.Net.Tests.HttpWebRequestTest/PreAuthenticate_SetAndGetBooleanResponse_ValuesMatch(remoteServer: http://corefx-net-http11.azurewebsites.net/Echo.ashx) \" (#39581)"},{"Id":"469534332","IsPullRequest":false,"CreatedAt":"2019-07-18T01:59:07","Actor":"JamesNK","Number":"39582","RawContent":null,"Title":"HTTP2: Hang when writing sending large data to completed request","State":"open","Body":"Writing large data to the request stream (Http2WriteStream retrieved from SerializeToStreamAsync) will hang if the server has finished. I would have expected Stream.WriteAsync to error.\r\n\r\nRepro:\r\n1. `git clone https://github.com/JamesNK/grpc-dotnet.git`\r\n2. `git checkout jamesnk/unimplemented-duplexstream`\r\n3. `dotnet test test\\FunctionalTests --filter Name~DuplexStream_SendToUnimplementedMethod_Hang`\r\n\r\nLogic in the test is like:\r\n1. Client makes HTTP/2 call to the server\r\n2. Client immediately starts writing 64 KB to request stream\r\n3. Server finishes response with 200. It never reads the request stream.\r\n4. Client's first write of 64 KB succeeds (i.e. doesn't hang. I don't know what has happened to the data). Client writes another block of 64 KB. Client hangs on awaiting Stream.WriteAsync.\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013248\r\n Commit:    135af55c46\r\n```","Url":"https://github.com/dotnet/corefx/issues/39582","RelatedDescription":"Open issue \"HTTP2: Hang when writing sending large data to completed request\" (#39582)"},{"Id":"469467163","IsPullRequest":true,"CreatedAt":"2019-07-17T23:40:27","Actor":"dotnet-maestro[bot]","Number":"39577","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190717.2\r\n- **Date Produced**: 7/17/2019 9:56 PM\r\n- **Commit**: 57a30905e160ad341b959cfbb08befc6a5a3d7dd\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview8.19367.2\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview8.19367.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview8.19367.2\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39577","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#39577)"},{"Id":"469499115","IsPullRequest":false,"CreatedAt":"2019-07-17T23:37:57","Actor":"wtgodbe","Number":"39580","RawContent":null,"Title":"Remove System.Private.Corelib from IgnoredReference list in 3.0 package testing","State":"open","Body":"Once we get a new `Microsoft.NETCore.App` package that has built against 5.0 CoreClr, we can stop ignoring System.Private.Corelib in package testing for `netcoreapp3.0`.\r\n\r\nSee https://github.com/dotnet/corefx/pull/39567/files#diff-2b742453e0298de8be359c65572f0886R23\r\n\r\nSee https://github.com/dotnet/corefx/pull/39567#issuecomment-512597034 for context","Url":"https://github.com/dotnet/corefx/issues/39580","RelatedDescription":"Open issue \"Remove System.Private.Corelib from IgnoredReference list in 3.0 package testing\" (#39580)"},{"Id":"469491693","IsPullRequest":true,"CreatedAt":"2019-07-17T23:09:34","Actor":"krwq","Number":"39579","RawContent":null,"Title":"Debian 10 fixes: Allow explicitly using SSLv3, TLS1.0/1.1","State":"open","Body":"Fixes: #38444\r\nPossibly fixes some other debian 10 issues (I've seen 50+ failures locally)\r\n\r\nThis fixes couple of things:\r\n- Allow explicitly using SSLv3, TLS1.0/1.1 - before this fix OpenSSL defaulted to always disable them on some OSes (no effect if you use defaults)\r\n- Same way lower bar for protocols when using AllowNoEncryption/NoEncryption\r\n- Convert System.Net.Security tests to not require IPv6 (they don't need it and it's disabled on docker by default)\r\n- Couple of test fixes\r\n\r\nWith this my test run is green on Debian10 docker image","Url":"https://github.com/dotnet/corefx/pull/39579","RelatedDescription":"Open PR \"Debian 10 fixes: Allow explicitly using SSLv3, TLS1.0/1.1\" (#39579)"},{"Id":"469451462","IsPullRequest":true,"CreatedAt":"2019-07-17T21:53:31","Actor":"stephentoub","Number":"39576","RawContent":null,"Title":"Change HttpStress app to highlight in red unchanged totals","State":"closed","Body":"When no additional operations have completed since the last time status was output, highlight that in red.","Url":"https://github.com/dotnet/corefx/pull/39576","RelatedDescription":"Closed or merged PR \"Change HttpStress app to highlight in red unchanged totals\" (#39576)"},{"Id":"469392062","IsPullRequest":true,"CreatedAt":"2019-07-17T20:39:11","Actor":"Jozkee","Number":"39573","RawContent":null,"Title":"Include file SafeHandleTest.cs into the project.","State":"closed","Body":"This test file was added under #32649 (https://github.com/dotnet/corefx/pull/32649/commits/49828f85eb32e1e78cff9ea8cef91d4c703b3433) but was never included into the test project. ","Url":"https://github.com/dotnet/corefx/pull/39573","RelatedDescription":"Closed or merged PR \"Include file SafeHandleTest.cs into the project.\" (#39573)"},{"Id":"469413472","IsPullRequest":true,"CreatedAt":"2019-07-17T19:52:55","Actor":"ehasis","Number":"39574","RawContent":null,"Title":"Port some methods of the VB Interaction module","State":"open","Body":"* Ported Choose, Partition and Switch methods\r\n* Minor changes in the Partition implementation to use StringBuilder as there was comments suggesting this\r\n* The tests is based on some code available from @danmosemsft repo","Url":"https://github.com/dotnet/corefx/pull/39574","RelatedDescription":"Open PR \"Port some methods of the VB Interaction module\" (#39574)"},{"Id":"469353321","IsPullRequest":true,"CreatedAt":"2019-07-17T17:37:47","Actor":"watfordgnf","Number":"39572","RawContent":null,"Title":"Use deterministic Process.StartTime for OS X #39434","State":"open","Body":"This fixes #39434 by using a deterministic value for `Process.StartTime` from the `pbi_start_*` values returned by `GetProcessInfoById` on Mac OS X.","Url":"https://github.com/dotnet/corefx/pull/39572","RelatedDescription":"Open PR \"Use deterministic Process.StartTime for OS X #39434\" (#39572)"},{"Id":"469339783","IsPullRequest":true,"CreatedAt":"2019-07-17T17:05:22","Actor":"Dotnet-GitSync-Bot","Number":"39571","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/39571","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#39571)"},{"Id":"469311992","IsPullRequest":false,"CreatedAt":"2019-07-17T16:11:05","Actor":"anucii","Number":"39570","RawContent":null,"Title":"[Bug] System.Linq.IQueryable SelectMany provokes a System.NullReferenceException at evaluation","State":"open","Body":"Hi,\r\n\r\nI had the following issue when trying to flatten a nested IEnumerable instance using an lambda expression. I could avoid this issue by using a function instead (hence using the Linq.Enumerable version of SelectMany).\r\nSome indications: \r\n- products are my base objects, which are related to other database entities like Suppliers\r\n- context is my connection context to my database.\r\n- I checked by all means that no null entity was retrieve in any of the intermediate collections\r\n\r\nThe failing Code:\r\n```public IEnumerable<Price> GetAll()\r\n        {\r\n            using (var context = contextFactory.Create())\r\n            {\r\n                var products = context.Set<Product>().AsNoTracking().IgnoreQueryFilters()\r\n                    .Include(p => p.Supplier)\r\n                    .Include(p => p.SecondSupplier)\r\n                    .Where(p => p.Code >= 10);\r\n\r\n                var prices = products.SelectMany(p => FromProductWrapper(p));\r\n                var ret = prices.ToList();\r\n                return ret;\r\n            }\r\n        }\r\n```\r\nThe functionning code:\r\n```public IEnumerable<Price> GetAll()\r\n        {\r\n            using (var context = contextFactory.Create())\r\n            {\r\n                var products = context.Set<Product>().AsNoTracking().IgnoreQueryFilters()\r\n                    .Include(p => p.Supplier)\r\n                    .Include(p => p.SecondSupplier)\r\n                    .Where(p => p.Code >= 10);\r\n\r\n                var prices = products.SelectMany(FromProductWrapper);\r\n                var ret = prices.ToList();\r\n                return ret;\r\n            }\r\n        }\r\n```\r\n\r\nThe wrapping method:\r\n```private IEnumerable<Price> FromProductWrapper(Product product)\r\n        {\r\n            return Price.FromProduct(product, adherentRate);\r\n        }\r\n```\r\n\r\nThe wrapped method (class method from Price):\r\n```public static IEnumerable<Price> FromProduct(Product product, decimal adherentRate)\r\n        {\r\n            bool hasAdherent = adherentRate != 1;\r\n            bool hasDirectPromo = product.PromotionPrice != null;\r\n\r\n            var basePrice = new Price(product)\r\n            {\r\n                PromotionStartDate = null,\r\n                PromotionEndDate = null,\r\n            };\r\n            yield return basePrice;\r\n\r\n            if (hasAdherent)\r\n            {\r\n                var adherentPrice = new Price(product, adherentRate);\r\n                yield return adherentPrice;\r\n            }\r\n\r\n            if (hasDirectPromo)\r\n            {\r\n                var directPromoPrice = new Price(product, PriceTypes.DirectPromo);\r\n                yield return directPromoPrice;\r\n            }\r\n        }\r\n```\r\n\r\nThe stack trace : \r\n```à Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler.IncludeLoadTreeNodeBase.Compile(QueryCompilationContext queryCompilationContext, QueryModel queryModel, Boolean trackingQuery, Boolean asyncQuery, Int32& collectionIncludeId, QuerySourceReferenceExpression targetQuerySourceReferenceExpression)\r\n\r\n   à Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler.IncludeLoadTree.Compile(QueryCompilationContext queryCompilationContext, QueryModel queryModel, Boolean trackingQuery, Boolean asyncQuery, Int32& collectionIncludeId)\r\n\r\n   à Microsoft.EntityFrameworkCore.Query.Internal.IncludeCompiler.CompileIncludes(QueryModel queryModel, Boolean trackingQuery, Boolean asyncQuery, Boolean shouldThrow)\r\n\r\n   à Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OptimizeQueryModel(QueryModel queryModel, Boolean asyncQuery)\r\n\r\n   à Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.OptimizeQueryModel(QueryModel queryModel, Boolean asyncQuery)\r\n\r\n   à Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor[TResult](QueryModel queryModel)\r\n--- Fin de la trace de la pile à partir de l'emplacement précédent au niveau duquel l'exception a été levée ---\r\n\r\n   à System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n\r\n   à Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult](Expression query, IQueryModelGenerator queryModelGenerator, IDatabase database, IDiagnosticsLogger`1 logger, Type contextType)\r\n   à Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.<>c__DisplayClass13_0`1.<Execute>b__0()\r\n\r\n   à Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc](Object cacheKey, Func`1 compiler)\r\n\r\n   à Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult](Expression query)\r\n\r\n   à Remotion.Linq.QueryableBase`1.GetEnumerator()\r\n\r\n   à System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n\r\n   à System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n\r\n   à Izibio.Persistence.ECommerce.PriceProvider.GetAll() dans Z:\\shared\\Izibio\\Izibio.Persistence\\ECommerce\\PriceProvider.cs:ligne 30\r\n\r\n   à Izibio.Core.ExportPriceTask.Execute() dans Z:\\shared\\Izibio\\Izibio.Core\\ECommerce\\ExportPriceTask.cs:ligne 15\r\n\r\n   à Izibio.Core.ECommerceTask.Export() dans Z:\\shared\\Izibio\\Izibio.Core\\ECommerce\\ECommerceTask.cs:ligne 20\r\n\r\n   à ConsoleApp1.Program.Main() dans Z:\\shared\\Izibio\\ConsoleApp1\\Program.cs:ligne 24\r\n```","Url":"https://github.com/dotnet/corefx/issues/39570","RelatedDescription":"Open issue \"[Bug] System.Linq.IQueryable SelectMany provokes a System.NullReferenceException at evaluation\" (#39570)"},{"Id":"468954887","IsPullRequest":true,"CreatedAt":"2019-07-17T15:14:33","Actor":"dotnet-maestro[bot]","Number":"39561","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190716.3\r\n- **Date Produced**: 7/17/2019 2:13 AM\r\n- **Commit**: 732894d3ae61b6cb798abd83db13454e16e88168\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19366.3\r\n\r\n[marker]: <> (End:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39561","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/standard\" (#39561)"},{"Id":"469279587","IsPullRequest":false,"CreatedAt":"2019-07-17T15:13:17","Actor":"stephentoub","Number":"39569","RawContent":null,"Title":"PrivateKeyAssociationTests.AssociatePersistedKey_CNG_RSA failed in CI with \"Unknown error\"","State":"open","Body":"https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F39567~2Fmerge/test~2Ffunctional~2Fcli~2F~2F/20190717.4/workItem/System.Security.Cryptography.X509Certificates.Tests/analysis/xunit/System.Security.Cryptography.X509Certificates.Tests.CertificateCreation.PrivateKeyAssociationTests~2FAssociatePersistedKey_CNG_RSA\r\n```\r\nWindows.10.Amd64.ClientRS5.Open-x64-Debug\r\nGet Repro environment\r\nUnhandled Exception of Type Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException\r\nMessage :\r\nInternal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : Unknown error (0xc0000001)\r\nStack Trace :\r\n   at Internal.Cryptography.CngCommon.SignHash(SafeNCryptKeyHandle keyHandle, ReadOnlySpan`1 hash, AsymmetricPaddingMode paddingMode, Void* pPaddingInfo, Int32 estimatedSize) in /_/src/Common/src/Internal/Cryptography/CngCommon.SignVerify.cs:line 30\r\n   at System.Security.Cryptography.RSACng.SignHash(Byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) in /_/src/Common/src/System/Security/Cryptography/RSACng.SignVerify.cs:line 82\r\n   at System.Security.Cryptography.RSA.SignData(Byte[] data, Int32 offset, Int32 count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) in /_/src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/RSA.cs:line 175\r\n   at System.Security.Cryptography.RSA.SignData(Byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding) in /_/src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/RSA.cs:line 153\r\n   at System.Security.Cryptography.X509Certificates.RSAPkcs1X509SignatureGenerator.SignData(Byte[] data, HashAlgorithmName hashAlgorithm) in /_/src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/RSAPkcs1X509SignatureGenerator.cs:line 24\r\n   at System.Security.Cryptography.X509Certificates.CertificateRequest.Create(X500DistinguishedName issuerName, X509SignatureGenerator generator, DateTimeOffset notBefore, DateTimeOffset notAfter, Byte[] serialNumber) in /_/src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/CertificateRequest.cs:line 595\r\n   at System.Security.Cryptography.X509Certificates.CertificateRequest.CreateSelfSigned(DateTimeOffset notBefore, DateTimeOffset notAfter) in /_/src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/CertificateRequest.cs:line 314\r\n   at System.Security.Cryptography.X509Certificates.Tests.CertificateCreation.PrivateKeyAssociationTests.AssociatePersistedKey_CNG_RSA() in /_/src/System.Security.Cryptography.X509Certificates/tests/CertificateCreation/PrivateKeyAssociationTests.cs:line 199\r\n```","Url":"https://github.com/dotnet/corefx/issues/39569","RelatedDescription":"Open issue \"PrivateKeyAssociationTests.AssociatePersistedKey_CNG_RSA failed in CI with \"Unknown error\"\" (#39569)"},{"Id":"469207678","IsPullRequest":true,"CreatedAt":"2019-07-17T15:10:22","Actor":"Dotnet-GitSync-Bot","Number":"39568","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern","Url":"https://github.com/dotnet/corefx/pull/39568","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#39568)"},{"Id":"469162102","IsPullRequest":false,"CreatedAt":"2019-07-17T13:45:24","Actor":"christophedemey","Number":"39566","RawContent":null,"Title":"Question : ValueTask or warning because of not using await","State":"closed","Body":"Hi\r\n\r\nI have an interface from an external library which i have to adhere by.\r\nIt looks like this :\r\n```\r\npublic Task<RealestateObject> Handle(RealEstatePushRequestModel request, CancellationToken cancellationToken)\r\n{\r\n}\r\n```\r\nI only have synchronous code that is required in this block.\r\nIs it better make the function async and just return the result : \r\n```\r\npublic async Task<RealestateObject> Handle(RealEstatePushRequestModel request, CancellationToken cancellationToken)\r\n{\r\n    //Much synchronous code here...\r\n    return new RealestateObject();\r\n}\r\n```\r\nWhich warns me :\r\n**This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do** \r\n\r\n**OR**\r\n\r\nI await ValueTask and return that : \r\n```\r\npublic async Task<RealestateObject> Handle(RealEstatePushRequestModel request, CancellationToken cancellationToken)\r\n{\r\n    return await GetValue(request);\r\n}\r\n\r\npublic ValueTask<RealestateObject> GetValue(RealEstatePushRequestModel request)\r\n{\r\n    //Much synchronous code here...\r\n    return new ValueTask<RealestateObject>(new RealestateObject() { ObjectKey = \"dummydata\" });\r\n}\r\n```\r\nWhich has no warnings at all.\r\n\r\n**OR** \r\n\r\nuse **Task.FromResult**.\r\n```\r\npublic Task<RealestateObject> Handle(RealEstatePushRequestModel request, CancellationToken cancellationToken)\r\n{\r\n    //Much synchronous code here...\r\n    return Task.FromResult(new RealestateObject() { ObjectKey = \"dummydata\" });\r\n}\r\n```\r\n\r\nWhich one of the scenario's is the best to use ?\r\n\r\nThanks!\r\n","Url":"https://github.com/dotnet/corefx/issues/39566","RelatedDescription":"Closed issue \"Question : ValueTask or warning because of not using await\" (#39566)"},{"Id":"468960142","IsPullRequest":true,"CreatedAt":"2019-07-17T12:53:19","Actor":"Dotnet-GitSync-Bot","Number":"39563","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corefx/pull/39563","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#39563)"},{"Id":"469172119","IsPullRequest":true,"CreatedAt":"2019-07-17T12:45:33","Actor":"dotnet-maestro[bot]","Number":"39567","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190716.2\r\n- **Date Produced**: 7/17/2019 12:46 AM\r\n- **Commit**: 0cc81b60eb184c92b8526348d4bb056ed563e9d6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19366.2\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19366.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19366.2\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39567","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/coreclr\" (#39567)"},{"Id":"469071083","IsPullRequest":false,"CreatedAt":"2019-07-17T08:59:30","Actor":"NMSAzulX","Number":"39565","RawContent":null,"Title":"Question: Has dynamic and emit execution performance been improved?","State":"open","Body":"Today, I benchmark dynamic, emit, orgin, and reflect. I was surprised to find that their performance had been greatly improved. My last test results showed that there was still a big performance gap between native and dynamic invocations. I've been looking at the dynamic performance of. Net Core, and I haven't seen any of this in the relevant articles. My question is whether these test results are reliable and when was the performance improved?\r\n\r\nHere is the result on different client:  \r\n\r\n- **PC1 :**\r\n![image](https://user-images.githubusercontent.com/16236903/61361332-eb7d1900-a8b2-11e9-932b-cd3d0f715d26.png)  \r\n\r\n- **PC2 :**\r\n![image](https://user-images.githubusercontent.com/16236903/61361504-2da65a80-a8b3-11e9-8255-0165c909f112.png)  \r\n\r\n- **PC3 :**\r\n![image](https://user-images.githubusercontent.com/16236903/61362456-cd181d00-a8b4-11e9-953d-07399867961c.png)\r\n\r\n\r\n  \r\n","Url":"https://github.com/dotnet/corefx/issues/39565","RelatedDescription":"Open issue \"Question: Has dynamic and emit execution performance been improved?\" (#39565)"},{"Id":"468990339","IsPullRequest":false,"CreatedAt":"2019-07-17T05:17:22","Actor":"hez2010","Number":"39564","RawContent":null,"Title":"Add UnderScoreCase support for System.Text.Json","State":"open","Body":"Can you add UnderScoreCase for System.Text.Json?\r\nThis naming policy is also common used. ","Url":"https://github.com/dotnet/corefx/issues/39564","RelatedDescription":"Open issue \"Add UnderScoreCase support for System.Text.Json\" (#39564)"},{"Id":"468959504","IsPullRequest":true,"CreatedAt":"2019-07-17T04:30:38","Actor":"dotnet-maestro[bot]","Number":"39562","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190716.3\r\n- **Date Produced**: 7/17/2019 2:51 AM\r\n- **Commit**: 556b874e22a9580b511976056cf9aa664a6ad8c1\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview8.19366.3\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview8.19366.3\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview8.19366.3\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39562","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#39562)"},{"Id":"468928911","IsPullRequest":true,"CreatedAt":"2019-07-17T03:37:32","Actor":"karinazhou","Number":"39559","RawContent":null,"Title":"Increase connect timeout for Functional Tests","State":"closed","Body":"Fix for issue [#37695](https://github.com/dotnet/corefx/issues/37695) by increasing the connect timeout to 30 seconds.","Url":"https://github.com/dotnet/corefx/pull/39559","RelatedDescription":"Closed or merged PR \"Increase connect timeout for Functional Tests\" (#39559)"},{"Id":"468894897","IsPullRequest":false,"CreatedAt":"2019-07-17T01:27:17","Actor":"mfow","Number":"39554","RawContent":null,"Title":"System.Text.Json double quotes","State":"closed","Body":"System.Text.Json serializes strings that contain quotes using `\\u0022` notation, rather than double quotes.\r\n\r\nSystem.Text.Json: `{\"foo\":\"this string has a \\u0022 quote in the middle.\"}`\r\nDouble quotes: `{\"foo\": \"this string has a \"\" quote in the middle.\"}`\r\nEscaped quote: `{\"foo\": \"this string has a \\\" quote in the middle.\"}`\r\n\r\n`            using (var strm = new MemoryStream())\r\n            {\r\n                using (var writer = new Utf8JsonWriter(strm))\r\n                {\r\n                    writer.WriteStartObject();\r\n                    writer.WriteString(\"foo\", @\"this string has a \"\" quote in the middle.\");\r\n                    writer.WriteEndObject();\r\n                }\r\n\r\n                strm.Seek(0, SeekOrigin.Begin);\r\n                var r = new StreamReader(strm);\r\n                string str = r.ReadToEnd();\r\n                Console.WriteLine(str);\r\n            }`\r\n\r\nEven though I believe all three are valid json, the first breaks some existing services. It also takes up more space, and IMO is less readable.\r\n\r\nSuggestion:\r\n- Add an option to serialize a quoted string using double quotes.","Url":"https://github.com/dotnet/corefx/issues/39554","RelatedDescription":"Closed issue \"System.Text.Json double quotes\" (#39554)"},{"Id":"468935788","IsPullRequest":true,"CreatedAt":"2019-07-17T01:00:58","Actor":"ahsonkhan","Number":"39560","RawContent":null,"Title":"Use relaxed JavascriptEncoder in S.T.JSON specific tests to improve coverage.","State":"open","Body":"cc @steveharter","Url":"https://github.com/dotnet/corefx/pull/39560","RelatedDescription":"Open PR \"Use relaxed JavascriptEncoder in S.T.JSON specific tests to improve coverage.\" (#39560)"},{"Id":"468894053","IsPullRequest":true,"CreatedAt":"2019-07-16T23:31:47","Actor":"stephentoub","Number":"39553","RawContent":null,"Title":"Enable HttpStress to target http.sys in addition to Kestrel","State":"closed","Body":"cc: @geoffkizer, @eiriktsarpalis, @Anipik ","Url":"https://github.com/dotnet/corefx/pull/39553","RelatedDescription":"Closed or merged PR \"Enable HttpStress to target http.sys in addition to Kestrel\" (#39553)"},{"Id":"468911489","IsPullRequest":true,"CreatedAt":"2019-07-16T23:15:30","Actor":"buyaa-n","Number":"39558","RawContent":null,"Title":"Custom converter contravariant test coverage","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/39558","RelatedDescription":"Open PR \"Custom converter contravariant test coverage\" (#39558)"},{"Id":"468911430","IsPullRequest":true,"CreatedAt":"2019-07-16T23:15:19","Actor":"dotnet-maestro[bot]","Number":"39557","RawContent":null,"Title":"[master] Update dependencies from 4 repositories","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190717.3\r\n- **Date Produced**: 7/17/2019 9:15 PM\r\n- **Commit**: bff30c3bc0a3ed3d98082de640c28150aab05627\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19367.3\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190716.4\r\n- **Date Produced**: 7/16/2019 7:16 PM\r\n- **Commit**: 0dd5e2025f0049c133a8706f40e4463b193e5d17\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19366.4\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19366.4\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19366.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19366.4\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190716.15\r\n- **Date Produced**: 7/17/2019 7:42 AM\r\n- **Commit**: 01be25074ac97ea1ecd33195bda35c9183ff1b5d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.27916.15\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.27916.15\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.27916.15\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190716.11\r\n- **Date Produced**: 7/17/2019 5:26 AM\r\n- **Commit**: da3d086edde315db03ff9b04c2926ab22940d50c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19366.11\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19366.11\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39557","RelatedDescription":"Open PR \"[master] Update dependencies from 4 repositories\" (#39557)"},{"Id":"468908504","IsPullRequest":true,"CreatedAt":"2019-07-16T23:04:10","Actor":"ericstj","Number":"39556","RawContent":null,"Title":"Make System.Runtime.Caching's implementation NETStandard based","State":"open","Body":"Fixes #35319 \r\n\r\nI chose to make the unix implementation behave as the default since it doesn't PInvoke.  You could further simplify the build of this library by removing the cross-compiling of the library and instead doing a runtime check for Windows.  This would make it more *normal* and easier to reason about.  CoreFx makes it easy (arguably) to cross-compile by runtime but that doesn't mean we should do it when a simple runtime check would suffice.","Url":"https://github.com/dotnet/corefx/pull/39556","RelatedDescription":"Open PR \"Make System.Runtime.Caching's implementation NETStandard based\" (#39556)"},{"Id":"468897153","IsPullRequest":false,"CreatedAt":"2019-07-16T22:24:59","Actor":"stephentoub","Number":"39555","RawContent":null,"Title":"Expose CancellationTokenSource.CreateLinkedTokenSource(CancellationToken)","State":"open","Body":"We currently have two `CreateLinkedTokenSource` overloads:\r\n```C#\r\npublic static CancellationTokenSource CreateLinkedTokenSource(CancellationToken token1, CancellationToken token2);\r\npublic static CancellationTokenSource CreateLinkedTokenSource(params CancellationToken[] tokens);\r\n```\r\n\r\nHowever, a fairly common scenario with `CreateLinkedTokenSource` is to use it to accept an externally provided token while also being able to cancel for internal reasons.  In such a case, you want to call:\r\n```C#\r\npublic async Task SomeMethodAsync(CancellationToken cancellationToken)\r\n{\r\n    CancellationTokenSource cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);\r\n    ...\r\n}\r\n```\r\nThis works, but it binds to the `params` overload.  To workaround that array allocation, if developers even realize they're incurring it, they can explicitly pass `default` or `CancellationToken.None`:\r\n```C#\r\n    CancellationTokenSource cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, default);\r\n```\r\n\r\n**Proposal**\r\nWe already have this overload internally:\r\nhttps://github.com/dotnet/corefx/blob/6ec67c15c3f213206e9cf66a2d69d274d3836e6b/src/Common/src/CoreLib/System/Threading/CancellationTokenSource.cs#L759\r\nWe should just make it public.","Url":"https://github.com/dotnet/corefx/issues/39555","RelatedDescription":"Open issue \"Expose CancellationTokenSource.CreateLinkedTokenSource(CancellationToken)\" (#39555)"},{"Id":"468893448","IsPullRequest":false,"CreatedAt":"2019-07-16T22:12:58","Actor":"RobinsonWM","Number":"39552","RawContent":null,"Title":"[HttpListener][Windows] HttpListener Start()/Stop()/Start()/BeginGetContext() causes ObjectDisposedException","State":"open","Body":"The code below always causes an exception on Windows.  I am using .NET Core 2.2.\r\n```csharp\r\nvar l = new System.Net.HttpListener() { Prefixes = { \"http://+/foo/\" } };\r\nl.Start();\r\nl.BeginGetContext((f) => { }, null);\r\nl.Stop();\r\nl.Start();\r\nl.BeginGetContext((f) => { }, null);\r\n```\r\n```no-highlight\r\nMessage: System.ObjectDisposedException : Cannot access a disposed object.\r\nObject name: 'System.Threading.ThreadPoolBoundHandle'.\r\n  at System.Threading.ThreadPoolBoundHandle.EnsureNotDisposed()\r\n  at System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(IOCompletionCallback callback, Object state, Object pinData)\r\n  at System.Net.AsyncRequestContext.Allocate(ThreadPoolBoundHandle boundHandle, UInt32 size)\r\n  at System.Net.ListenerAsyncResult..ctor(HttpListener listener, Object userState, AsyncCallback callback)\r\n  at System.Net.HttpListener.BeginGetContext(AsyncCallback callback, Object state)\r\n```\r\n\r\nThe documentation states that it is valid to call `.Stop()` followed by `.Start()`, so I don't believe we would expect this code to throw: https://docs.microsoft.com/en-us/dotnet/api/system.net.httplistener.stop?view=netcore-2.2#remarks\r\n\r\nI noticed this problem when porting an application from .NET Framework 4.5 to .NET Core 2.2 (that is, the code above does not throw on .NET Framework.)  The `ThreadPoolBoundHandle` appears to be handled quite differently in .NET Core, and this appears to be specific to Windows.\r\n\r\nOn Windows, `_requestQueueBoundHandle` is created lazily the first time it is accessed.  `Stop()` calls `CloseRequestQueueHandle()` which disposes `_requestQueueBoundHandle` without setting it to `null`, and calling `Start()` does not recreate it.  So the next call to `BeginGetContext()` ends up using a handle that was disposed.\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Net.HttpListener/src/System/Net/Windows/HttpListener.Windows.cs#L453\r\n","Url":"https://github.com/dotnet/corefx/issues/39552","RelatedDescription":"Open issue \"[HttpListener][Windows] HttpListener Start()/Stop()/Start()/BeginGetContext() causes ObjectDisposedException\" (#39552)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"469511213","IsPullRequest":true,"CreatedAt":"2019-07-18T00:23:59","Actor":"333fred","Number":"37322","RawContent":null,"Title":"Add initial GetDeclaredSymbol support for inferred VariableDeclaratorSyntax and SingleVariableDesignationSyntax nodes","State":"open","Body":"Add GetDeclaredSymbol support for nullability in variable declarations. Not handled are linq or foreach iteration variable declarations. @dotnet/roslyn-compiler for review. Foreach and linq are tracked by https://github.com/dotnet/roslyn/issues/37321.\r\n/cc @jasonmalinowski @ryzngard.\r\nFixes https://github.com/dotnet/roslyn/issues/32459.\r\nFixes https://github.com/dotnet/roslyn/issues/30150.","Url":"https://github.com/dotnet/roslyn/pull/37322","RelatedDescription":"Open PR \"Add initial GetDeclaredSymbol support for inferred VariableDeclaratorSyntax and SingleVariableDesignationSyntax nodes\" (#37322)"},{"Id":"469511071","IsPullRequest":false,"CreatedAt":"2019-07-18T00:23:26","Actor":"333fred","Number":"37321","RawContent":null,"Title":"Support inferrred nullability info in GetDeclaredSymbol for inline Linq and for foreach iteration variables","State":"open","Body":"Currently we don't support these two. We need to.","Url":"https://github.com/dotnet/roslyn/issues/37321","RelatedDescription":"Open issue \"Support inferrred nullability info in GetDeclaredSymbol for inline Linq and for foreach iteration variables\" (#37321)"},{"Id":"469506639","IsPullRequest":true,"CreatedAt":"2019-07-18T00:08:44","Actor":"petrroll","Number":"37319","RawContent":null,"Title":"Syntax kinds service cleanup ","State":"closed","Body":"New PR due to devops issues #37236","Url":"https://github.com/dotnet/roslyn/pull/37319","RelatedDescription":"Closed or merged PR \"Syntax kinds service cleanup \" (#37319)"},{"Id":"469506731","IsPullRequest":true,"CreatedAt":"2019-07-18T00:06:06","Actor":"RikkiGibson","Number":"37320","RawContent":null,"Title":"Delay pointer managed type check on type members until after binding","State":"open","Body":"Fixes #37051","Url":"https://github.com/dotnet/roslyn/pull/37320","RelatedDescription":"Open PR \"Delay pointer managed type check on type members until after binding\" (#37320)"},{"Id":"469505701","IsPullRequest":true,"CreatedAt":"2019-07-18T00:02:17","Actor":"dotnet-bot","Number":"37318","RawContent":null,"Title":"Merge master to features/compilerNext","State":"open","Body":"\nThis is an automatically generated pull request from master into features/compilerNext.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/compilerNext\ngit reset --hard upstream/features/compilerNext\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/compilerNext --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37318","RelatedDescription":"Open PR \"Merge master to features/compilerNext\" (#37318)"},{"Id":"469505614","IsPullRequest":true,"CreatedAt":"2019-07-18T00:01:55","Actor":"dotnet-bot","Number":"37317","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37317","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#37317)"},{"Id":"469463829","IsPullRequest":true,"CreatedAt":"2019-07-18T00:01:47","Actor":"AArnott","Number":"37316","RawContent":null,"Title":"Update System.Threading.Tasks.Extensions to 4.5.3","State":"closed","Body":"VS is trying to update other dependencies and these need the newer version.","Url":"https://github.com/dotnet/roslyn/pull/37316","RelatedDescription":"Closed or merged PR \"Update System.Threading.Tasks.Extensions to 4.5.3\" (#37316)"},{"Id":"469456746","IsPullRequest":false,"CreatedAt":"2019-07-17T21:31:46","Actor":"tmat","Number":"37315","RawContent":null,"Title":"Completion should not be displayed after switch expression","State":"open","Body":"**Version Used**: \r\n![image](https://user-images.githubusercontent.com/41759/61412731-7acc0180-a89e-11e9-8547-42512338eec0.png)\r\n\r\n**Steps to Reproduce**:\r\n\r\n```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nclass C\r\n{\r\n    public List<int> X;\r\n}\r\n\r\nclass D\r\n{\r\n    public List<int> X;\r\n}\r\n\r\nclass E\r\n{\r\n    public static bool F(object obj) => obj switch\r\n    {\r\n        C c => c.X,\r\n        D d => d.X,\r\n        _ => throw null\r\n    }|.Any(i => i == 0);\r\n}\r\n```\r\n\r\nPlace caret as indicated by `|`. Type `.`. This triggers completion:\r\n![image](https://user-images.githubusercontent.com/41759/61413040-57558680-a89f-11e9-9817-bc146b603be7.png)\r\n\r\nHowever, since switch expression is not primary expression dotting off of it is not valid, so no completion should be shown.\r\n\r\nThe same for this case:\r\n![image](https://user-images.githubusercontent.com/41759/61413298-fbd7c880-a89f-11e9-8e65-638a1a59e354.png)\r\n\r\nThis one is ok:\r\n\r\n![image](https://user-images.githubusercontent.com/41759/61413328-0d20d500-a8a0-11e9-9545-b6b41bf99c0a.png)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/37315","RelatedDescription":"Open issue \"Completion should not be displayed after switch expression\" (#37315)"},{"Id":"469452244","IsPullRequest":false,"CreatedAt":"2019-07-17T21:21:28","Actor":"RikkiGibson","Number":"37314","RawContent":null,"Title":"Quick Info shouldn't show oblivious parameters with null default values as 'not null'","State":"open","Body":"Version used: 3.3.0-beta1-19360-03\r\n\r\nThe IDE shows the null state of this variable as not-null, which seems wrong. This code is in a `#nullable disable` context.\r\n\r\n<img width=\"212\" alt=\"nullability-quick-info-2\" src=\"https://user-images.githubusercontent.com/5833655/61412373-91258d80-a89d-11e9-9fd7-cd2467f398c2.PNG\">\r\n\r\nA few thoughts:\r\n1. We could learn that this could be null by treating the default value as an assignment that might have occurred.\r\n2. We could stop showing the inferred nullability for oblivious variables, but it seems like users will lose out in other scenarios if we do this.\r\n3. We could decide that although this specific scenario looks weird, we're okay with the current behavior in the `#nullable disable` context and just move on.\r\n\r\n/cc @jasonmalinowski @333fred ","Url":"https://github.com/dotnet/roslyn/issues/37314","RelatedDescription":"Open issue \"Quick Info shouldn't show oblivious parameters with null default values as 'not null'\" (#37314)"},{"Id":"469373925","IsPullRequest":true,"CreatedAt":"2019-07-17T20:41:33","Actor":"tmat","Number":"37305","RawContent":null,"Title":"Fix bad merge","State":"closed","Body":"A couple of PRs used API that was removed in between validation and merge.","Url":"https://github.com/dotnet/roslyn/pull/37305","RelatedDescription":"Closed or merged PR \"Fix bad merge\" (#37305)"},{"Id":"469431796","IsPullRequest":false,"CreatedAt":"2019-07-17T20:35:34","Actor":"cartermp","Number":"37313","RawContent":null,"Title":"MaybeNull and flow analysis conflicting design","State":"open","Body":"**Version Used**:\r\n\r\nMicrosoft Visual Studio Community 2019 Int Preview\r\nVersion 16.3.0 Preview 1.0 [29116.102.d16.3]\r\nVisualStudio.16.IntPreview/16.3.0-pre.1.0+29116.102.d16.3\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n\r\nC# Tools   3.3.0-beta1-19360-03+7d47461d2ddd32defbc51c2cf0e75a3fef16c3d7\r\n\r\n**Steps to Reproduce**:\r\n\r\nConsider the following example:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\nnamespace ConsoleApp114\r\n{\r\n#nullable enable\r\n\r\n    public class Doot\r\n    {\r\n        private string _toot= string.Empty;\r\n\r\n        [AllowNull]\r\n        public string Toot\r\n        {\r\n            get => _toot;\r\n            set => _toot = value ?? string.Empty;\r\n        }\r\n    }\r\n    class Program\r\n    {\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            var doot = new Doot();\r\n            doot.Toot = null; // No warning, as expected\r\n            Console.Write(doot.Toot.Length); // Unexpected warning\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nNo warnings.\r\n\r\n**Actual Behavior**:\r\n\r\nWarning on `doot.MyValue.Length`.\r\n\r\nThis is because flow analysis is mistakenly thinking we made `MyValue` a `null` value (as expected, it doesn't trace the setter, which accounts for `null`).\r\n\r\nWhat I think is interesting here is that the signature of `MyValue` is saying that it allows `null` values as inputs, but does not allow `null` values for output. However, the attribute is effectively moot in this case due to flow analysis.","Url":"https://github.com/dotnet/roslyn/issues/37313","RelatedDescription":"Open issue \"MaybeNull and flow analysis conflicting design\" (#37313)"},{"Id":"469423336","IsPullRequest":true,"CreatedAt":"2019-07-17T20:17:38","Actor":"jasonmalinowski","Number":"37312","RawContent":null,"Title":"Fix make method async losing nullable annotations","State":"open","Body":"Fixes #30325. This builds on #37311.","Url":"https://github.com/dotnet/roslyn/pull/37312","RelatedDescription":"Open PR \"Fix make method async losing nullable annotations\" (#37312)"},{"Id":"469420621","IsPullRequest":true,"CreatedAt":"2019-07-17T20:10:56","Actor":"jasonmalinowski","Number":"37311","RawContent":null,"Title":"Consume construction with nullable in type inferrer","State":"open","Body":"This consists of two parts:\r\n\r\n1. Fixing a compiler bug in NormalizeWhitespace that I hit while trying to test the second part and\r\n2. Updating the type inferrer and the appropriate tests.","Url":"https://github.com/dotnet/roslyn/pull/37311","RelatedDescription":"Open PR \"Consume construction with nullable in type inferrer\" (#37311)"},{"Id":"469409217","IsPullRequest":false,"CreatedAt":"2019-07-17T19:43:10","Actor":"jasonmalinowski","Number":"37310","RawContent":null,"Title":"IMethodSymbol.Construct doesn't have a way to pass top-level nullability","State":"open","Body":"This is the same as #36046 but for IMethodSymbol.","Url":"https://github.com/dotnet/roslyn/issues/37310","RelatedDescription":"Open issue \"IMethodSymbol.Construct doesn't have a way to pass top-level nullability\" (#37310)"},{"Id":"469408351","IsPullRequest":false,"CreatedAt":"2019-07-17T19:41:20","Actor":"jasonmalinowski","Number":"37309","RawContent":null,"Title":"GetTypeInfo() on a type in a foreach loses top level nullability","State":"open","Body":"Given:\r\n\r\n    foreach (string? s in Foo())\r\n\r\nIf I pass the `string?` to GetTypeInfo we would expect to get a string that's either annotated as nullable or it's flow state is MaybeNull. (Debatable which it should be…). But we don't get either of those and it seems it's just dropped.","Url":"https://github.com/dotnet/roslyn/issues/37309","RelatedDescription":"Open issue \"GetTypeInfo() on a type in a foreach loses top level nullability\" (#37309)"},{"Id":"469406627","IsPullRequest":false,"CreatedAt":"2019-07-17T19:37:44","Actor":"jasonmalinowski","Number":"37308","RawContent":null,"Title":"NormalizeWhitespace incorrectly adds a space after a ? in a type argument list","State":"open","Body":"Run NormalizeWhitespace on an expression of:\r\n\r\n    (IList<string?>)foo\r\n\r\nIn this case it spits back:\r\n\r\n    (IList<string? >)foo","Url":"https://github.com/dotnet/roslyn/issues/37308","RelatedDescription":"Open issue \"NormalizeWhitespace incorrectly adds a space after a ? in a type argument list\" (#37308)"},{"Id":"469396710","IsPullRequest":true,"CreatedAt":"2019-07-17T19:12:42","Actor":"cston","Number":"37307","RawContent":null,"Title":"Update WRN_UninitializedNonNullableField message","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37307","RelatedDescription":"Open PR \"Update WRN_UninitializedNonNullableField message\" (#37307)"},{"Id":"469376054","IsPullRequest":false,"CreatedAt":"2019-07-17T18:27:15","Actor":"jnm2","Number":"37306","RawContent":null,"Title":"Generate single-line argument checks or allow customization","State":"open","Body":"ReSharper's 'Check parameter for null' produces one line per check:\r\n\r\n```cs\r\npublic void Foo(Action barAction, Action bazAction)\r\n{\r\n    if (barAction is null) throw new ArgumentNullException(nameof(barAction));\r\n    if (bazAction is null) throw new ArgumentNullException(nameof(bazAction));\r\n\r\n    // Actual code that I care about\r\n}\r\n```\r\n\r\nRoslyn's 'Add null check' takes five lines per check, and I haven't found a way to customize it. I'm spending time cleaning it up every time I use it:\r\n\r\n```cs\r\npublic void Foo(Action barAction, Action bazAction)\r\n{\r\n    if (barAction is null)\r\n    {\r\n        throw new ArgumentNullException(nameof(barAction));\r\n    }\r\n\r\n    if (bazAction is null)\r\n    {\r\n        throw new ArgumentNullException(nameof(bazAction));\r\n    }\r\n\r\n    // Actual code that I care about\r\n}\r\n```\r\n\r\nIt's not uncommon to have five such checks.\r\n\r\nOne day argument null checks will be a single character, but this will still apply to all the other fixes that generate argument checks.\r\n\r\n/cc @CyrusNajmabadi ","Url":"https://github.com/dotnet/roslyn/issues/37306","RelatedDescription":"Open issue \"Generate single-line argument checks or allow customization\" (#37306)"},{"Id":"469361766","IsPullRequest":false,"CreatedAt":"2019-07-17T18:20:16","Actor":"Pxtl","Number":"37304","RawContent":null,"Title":"Proposal: try/catch expressions with lambda-like syntax","State":"closed","Body":"**Problem**: try/catch is a statement, not an expression, which means you can't use it in contexts that need an expression.  It's also tedious because it means variables that are loaded inside the \"try\" block must be pre-declared, which results in a lot of repeated type and variable names.  This encourages large expansive try-blocks where all of the logic happens inside of the try, which is worse practice than small, specific catch blocks that only cover the expected site of the exception.\r\n\r\nObviously, we need a try/catch expression.\r\n\r\nPrevious proposals for try/catch expressions either encouraged empty catches(awful) or only allowed catching a single exception-type (bad) or failed to handle the ambiguity of multiple nested catches.  Or used new non-idiomatic operators or misuse of existing symbols.\r\n\r\nInstead, I'm suggesting a syntax that should be pretty idiomatic to C# 3.0 and later.\r\n\r\n**proposal**\r\n\r\nBy toy example first:\r\n\r\n```\r\nvar myValue = try => dict[key] catch((KeyNotFoundException ex) => null);\r\n```\r\n\r\nas you can see, slightly noisier than a normal Try-Catch, but still terse and clear, and leverages familiar Lambda syntax.\r\n\r\nMore elaborate example.\r\n```\r\nvar responseCode = try => doStuff().ReponseCode catch(\r\n    (HttpException ex) when (ex.Code < 500) => ex.Code, //just pass-through the response-code\r\n    (HttpException ex) => { //for 500 and up errors, log the error before returning\r\n           logger.Error(ex);\r\n           return ex.Code;\r\n    },\r\n    (Exception ex) => {  //treat all other errors as 500s.\r\n         logger.Error(ex);\r\n         return 500;\r\n    }\r\n);\r\n```\r\n\r\nso you can see, the pattern is\r\n```\r\ntry => try_expression catch(\r\n    (exception_type_1 [exception_var_1_name]) [when exception_when_expression_1] => exception_expression_1, \r\n    (exception_type_2 [exception_var_2_name]) [when exception_when_expression_2] => exception_expression_2, \r\n     ...\r\n    (exception_type_N [exception_var_N_name]) [when exception_when_expression_N] => exception_expression_N\r\n)\r\n```\r\nwhere all of `exception_expression_N` must return a type that is or can be implicit cast into the return type of `try_expression`, or they must throw.\r\n\r\nIf an exception expression needs to be broken out into a multi-statement body, then the syntax already established for doing the same for lambdas is used.\r\n\r\n`Finally` is not a thing, because it's really non-expressiony.\r\n\r\nThis also avoids the ambiguity problems - the lambda-arrows make it unambiguous compared to a normal try...catch (an existing try will never be followed by a lambda arrow).  Because all the catch blocks are in a single `catch( ... )` parens there is no ambiguity if tehre are multiple nested `try => ` blocks about which catch corresponds to which try.\r\n\r\nUsing a parens to contain multiple `(parameters) => expression`, delimited with commas, is already idiomatic C# because it's commonly done in higher-order functions, such as LINQ expressions.\r\n\r\nNo existing try...catch features such as multiple catch-blocks, when-clauses, etc. are sacrificed other than \"finally\", and the empty `catch{...}` which can be emulated with `(Exception) => null` and should never be used any time ever anyways.","Url":"https://github.com/dotnet/roslyn/issues/37304","RelatedDescription":"Closed issue \"Proposal: try/catch expressions with lambda-like syntax\" (#37304)"},{"Id":"468975273","IsPullRequest":true,"CreatedAt":"2019-07-17T18:05:15","Actor":"CyrusNajmabadi","Number":"37294","RawContent":null,"Title":"Make refactoring boilerplate more consistent.","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37294","RelatedDescription":"Closed or merged PR \"Make refactoring boilerplate more consistent.\" (#37294)"},{"Id":"469358201","IsPullRequest":true,"CreatedAt":"2019-07-17T17:48:30","Actor":"mavasani","Number":"37303","RawContent":null,"Title":"Analyzer driver performance fixes for IDE open file analysis","State":"open","Body":"IDE analyzer host invokes [CompilationWithAnalyzers.GetAnalyzerSemanticDiagnosticsAsync](http://source.roslyn.io/#q=CompilationWithAnalyzers.GetAnalyzerSemanticDiagnosticsAsync) APIs to compute open file semantic diagnostics. This PR performs the following optimizations on this code path:\r\n1. `AnalysisState.PerAnalyzerState`: Delay allocations of per-symbol dictionary values stored in `_pendingDeclarations` map until we actually start analyzing the first declaration for the symbol. This avoids unncessary allocation overhead on the dictionary pool from which these dictionaries are allocated.\r\n2. `CompilationWithAnalyzers` and `AnalyzerDriver`: Ensure that we force complete partial type trees only for symbol start analyzer(s) in the original analysis scope for which diagnostics were requested. Our current logic force completed partial tree diagnostics for all analyzers if at least one of the analyzer is a symbol start analyzer, which is always true as IDE already has few symbol start analyzers.\r\n\r\nAddresses VS Feedback performance issues [#922802](https://dev.azure.com/devdiv/DevDiv/_workitems/edit/922802) and [#922837](https://dev.azure.com/devdiv/DevDiv/_workitems/edit/922837)\r\n\r\n**NOTE:** ~~This PR currently targets master branch, but we need to decide if this meets the current 16.3 bar as the code changes are in the compiler layer, even though the affected code path/APIs are only ever invoked during IDE open file analysis.~~ Retargeted to `features/compilerNext` based on offline discussion.","Url":"https://github.com/dotnet/roslyn/pull/37303","RelatedDescription":"Open PR \"Analyzer driver performance fixes for IDE open file analysis\" (#37303)"},{"Id":"468965756","IsPullRequest":true,"CreatedAt":"2019-07-17T17:37:35","Actor":"dotnet-bot","Number":"37293","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37293","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#37293)"},{"Id":"469337392","IsPullRequest":false,"CreatedAt":"2019-07-17T16:59:31","Actor":"chbarney","Number":"37302","RawContent":null,"Title":"Build error started occuring out of the blue:  Error\t AD0001\tAnalyzer 'Microsoft.CodeAnalysis.CSharp.SimplifyThisOrMe.CSharpSimplifyThisOrMeDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException  with message 'Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind''.","State":"open","Body":"**Version Used**: \r\nMicrosoft Visual Studio Enterprise 2019\r\nVersion 16.1.6\r\nVisualStudio.16.Release/16.1.6+29102.190\r\nMicrosoft .NET Framework\r\nVersion 4.7.03190\r\n\r\nInstalled Version: Enterprise\r\n\r\nArchitecture Diagrams and Analysis Tools   00435-60000-00000-AA172\r\nMicrosoft Architecture Diagrams and Analysis Tools\r\n\r\nADL Tools Service Provider   1.0\r\nThis package contains services used by Data Lake tools\r\n\r\nApplication Insights Tools for Visual Studio Package   9.1.00429.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2019   16.1.429.50124\r\nASP.NET and Web Tools 2019\r\n\r\nASP.NET Web Frameworks and Tools 2019   16.1.429.50124\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   16.1.429.50124\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Node   1.0\r\nThis package contains the Data Lake integration nodes for Server Explorer.\r\n\r\nAzure Data Lake Tools for Visual Studio   2.3.9000.0\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Functions and Web Jobs Tools   16.1.429.50124\r\nAzure Functions and Web Jobs Tools\r\n\r\nAzure Stream Analytics Tools for Visual Studio   2.3.9000.0\r\nMicrosoft Azure Stream Analytics Tools for Visual Studio\r\n\r\nC# Tools   3.1.1-beta4-19281-06+58a4b1e79aea28115e66b06f850c83a3f1fcb6d3\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nFabric.DiagnosticEvents   1.0\r\nFabric Diagnostic Events\r\n\r\nMicrosoft Azure HDInsight Azure Node   2.3.9000.0\r\nHDInsight Node under Azure Node\r\n\r\nMicrosoft Azure Hive Query Language Service   2.3.9000.0\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   2.5\r\nMicrosoft Azure Service Fabric Tools for Visual Studio\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.3.9000.0\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft Azure Stream Analytics Node   1.0\r\nAzure Stream Analytics Node under Azure Node\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 0x10 - v2.9.20419.2\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Library Manager   1.0\r\nInstall client-side libraries easily to any web project\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nNode.js Tools   1.5.10424.1 Commit Hash:c3ce0ae0b29c0b3a755ffc12f8a685fe7ddd3600\r\nAdds support for developing and debugging Node.js apps in Visual Studio\r\n\r\nNuGet Package Manager   5.1.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSnapshot Debugging Extension   1.0\r\nSnapshot Debugging Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   16.0.61904.23160\r\nMicrosoft SQL Server Data Tools\r\n\r\nSyntax Visualizer   1.0\r\nAn extension for visualizing Roslyn SyntaxTrees.\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   16.0.10506.2004\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   3.1.1-beta4-19281-06+58a4b1e79aea28115e66b06f850c83a3f1fcb6d3\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.4 for F# 4.6   16.1.0-beta.19253.3+42526fe359672a05fd562dc16a91a43d0fe047a7\r\nMicrosoft Visual F# Tools 10.4 for F# 4.6\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for Containers   1.0\r\nVisual Studio Tools for Containers\r\n\r\nVisual Studio Tools for Kubernetes   1.0\r\nVisual Studio Tools for Kubernetes\r\n**Steps to Reproduce**:\r\n\r\n1.  Perform solution build\r\n\r\n\r\n**Expected Behavior**:\r\n\r\nNo AD0001 errors occurring.\r\n\r\n**Actual Behavior**:\r\nError\t AD0001\tAnalyzer 'Microsoft.CodeAnalysis.CSharp.SimplifyThisOrMe.CSharpSimplifyThisOrMeDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException  with message 'Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind''.\t\r\n","Url":"https://github.com/dotnet/roslyn/issues/37302","RelatedDescription":"Open issue \"Build error started occuring out of the blue:  Error\t AD0001\tAnalyzer 'Microsoft.CodeAnalysis.CSharp.SimplifyThisOrMe.CSharpSimplifyThisOrMeDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException  with message 'Unexpected value 'UnsetConversionKind' of type 'Microsoft.CodeAnalysis.CSharp.ConversionKind''.\" (#37302)"},{"Id":"469334204","IsPullRequest":true,"CreatedAt":"2019-07-17T16:52:30","Actor":"gafter","Number":"37301","RawContent":null,"Title":"Syntax factory for switch statement adds parens when needed.","State":"open","Body":"Fixes #33685\r\n\r\n/cc @jcouv @agocke \r\n","Url":"https://github.com/dotnet/roslyn/pull/37301","RelatedDescription":"Open PR \"Syntax factory for switch statement adds parens when needed.\" (#37301)"},{"Id":"469260131","IsPullRequest":false,"CreatedAt":"2019-07-17T15:27:07","Actor":"stephentoub","Number":"37300","RawContent":null,"Title":"[NotNullIfNotNull] not propagating inference from result to parameters","State":"closed","Body":"**Version Used**: \r\n```\r\nmicrosoft.net.compilers.toolset\\3.3.0-ci.final\r\nMicrosoft (R) Visual C# Compiler version 3.3.0-ci (<developer build>)\r\n```\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\nclass Foo\r\n{\r\n    [return: NotNullIfNotNull(\"location\")]\r\n    public static T Read<T>(ref T location) where T : class? => location;\r\n\r\n    public static T ThrowIfNull<T>(ref T? target) where T : class\r\n    {\r\n        if (Read(ref target) == null)\r\n        {\r\n            throw new Exception();\r\n        }\r\n        return target;\r\n    }\r\n}\r\n```\r\nSince the result of `Read` is not `null` if `location` is not null, then when we compare the result of `Read` against `null` and find that it isn't, we also know that the `target` argument to `Read` isn't null.  But the compiler doesn't appear to be inferring that here.\r\n\r\n**Expected Behavior**:\r\nNo warning.\r\n\r\n**Actual Behavior**:\r\n```\r\nerror CS8603: Possible null reference return.\r\n```\r\n\r\nIs this by design, because `NotNullIfNotNull` only considers the input nullability of `location` and there's nothing here preventing `Read` from changing the `location` to be `null`?  If so, I tried adding `[NotNullIfNotNull(\"location\")] ref T location`, to say that `Read` won't change a non-`null` `location` to be `null`, but it had no effect.\r\n\r\ncc: @cston, @jcouv, @MadsTorgersen, @dotnet/nullablefc ","Url":"https://github.com/dotnet/roslyn/issues/37300","RelatedDescription":"Closed issue \"[NotNullIfNotNull] not propagating inference from result to parameters\" (#37300)"},{"Id":"469086997","IsPullRequest":false,"CreatedAt":"2019-07-17T09:31:49","Actor":"PDostalek","Number":"37299","RawContent":null,"Title":"[loc][Query][Roslyn] Localizability of \"ERR_DuplicateNullSuppression\"","State":"open","Body":"Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nDuplicate null suppression operator ('!')\r\n\r\nFile Name:\r\nCompilers\\CSharp\\Portable\\xlf\\CSharpResources.xlf\r\n\r\n==========================================\r\nQuery:\r\nIs \"Duplicate\" a verb or an adjective here?","Url":"https://github.com/dotnet/roslyn/issues/37299","RelatedDescription":"Open issue \"[loc][Query][Roslyn] Localizability of \"ERR_DuplicateNullSuppression\"\" (#37299)"},{"Id":"469085832","IsPullRequest":true,"CreatedAt":"2019-07-17T09:29:32","Actor":"diryboy","Number":"37298","RawContent":null,"Title":"Small cleanup.","State":"open","Body":"Found small issues when trying to look for solution to #37224\r\n\r\n1. Removed a no longer needed variable `text`, it was needed to get `FilterSpan` before 4445deb5\r\n\r\n1. The first overload of `IsMemberDeclarationContext` does not handle cases with modifiers, removed from comments.\r\n\r\nNo functional changes in this PR.","Url":"https://github.com/dotnet/roslyn/pull/37298","RelatedDescription":"Open PR \"Small cleanup.\" (#37298)"},{"Id":"469072076","IsPullRequest":false,"CreatedAt":"2019-07-17T09:01:29","Actor":"MikiraSora","Number":"37297","RawContent":null,"Title":"\"Generate GetHashCode()\" is using System.HashCode when it's not available","State":"open","Body":"**Version Used**: \r\nVisualStudio Community 2019\r\nVisualStudio.16.Release/16.1.2+29001.49\r\n[VS Info Detail](https://pastebin.com/9ziznmL4)\r\nProject Target framework: .net framework 4.7.2\r\n\r\n**Steps to Reproduce**:\r\n\r\nIn my [class](https://github.com/MikiraSora/sb2cssa/blob/master/sb2cssa/CSS/Property.cs) , auto generate Equals()/GetHashCode() and Implmenet IEquatable<>. [Pic](https://puu.sh/DTR7a/9e04e2b7c9.png)\r\n\r\n**Expected Behavior**:\r\n\r\nget error `\"HashCode\"无法访问,因为它具有一定的保护级别` [Pic](https://puu.sh/DTR8J/4dcad6d07a.png)\r\n\r\n**Actual Behavior**:\r\nHope it work.","Url":"https://github.com/dotnet/roslyn/issues/37297","RelatedDescription":"Open issue \"\"Generate GetHashCode()\" is using System.HashCode when it's not available\" (#37297)"},{"Id":"469048962","IsPullRequest":false,"CreatedAt":"2019-07-17T08:11:15","Actor":"aka-STInG","Number":"37296","RawContent":null,"Title":"Please publish Microsoft.VisualStudio.LanguageServices 3.1.0 to nuget","State":"open","Body":"Please publish stable version Microsoft.VisualStudio.LanguageServices 3.1.0 to match Microsoft.CodeAnalysis.* packages.\r\n","Url":"https://github.com/dotnet/roslyn/issues/37296","RelatedDescription":"Open issue \"Please publish Microsoft.VisualStudio.LanguageServices 3.1.0 to nuget\" (#37296)"},{"Id":"468981930","IsPullRequest":true,"CreatedAt":"2019-07-17T04:39:47","Actor":"petrroll","Number":"37295","RawContent":null,"Title":"[WIP] Move refa to helpers5","State":"open","Body":"Work for: #35525 and #35180\r\nBased on (previous) PRs:  #37272 (and thus subsequently on #37236,  #37196)","Url":"https://github.com/dotnet/roslyn/pull/37295","RelatedDescription":"Open PR \"[WIP] Move refa to helpers5\" (#37295)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"469527045","IsPullRequest":false,"CreatedAt":"2019-07-18T01:29:27","Actor":"forestbat","Number":"7631","RawContent":null,"Title":"Future of AOT","State":"open","Body":"#https://github.com/dotnet/coreclr/commit/0cc81b60eb184c92b8526348d4bb056ed563e9d6\r\n#https://github.com/dotnet/corefx/commit/1acaa2017cfc64ef1aabcf3b19d0e097af692616\r\nAs we all know，development for .NET5 has started and this project is like a forgotten corner，so in the next year（until November 2020）will MS invest more to this？\r\nAnd will AOT of C#（either corert or mono aot）support more processor structure such as MIPS or RISCV？\r\nHope your reply.","Url":"https://github.com/dotnet/corert/issues/7631","RelatedDescription":"Open issue \"Future of AOT\" (#7631)"},{"Id":"469435131","IsPullRequest":true,"CreatedAt":"2019-07-17T21:53:43","Actor":"Dotnet-GitSync-Bot","Number":"7629","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7629","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7629)"},{"Id":"469455160","IsPullRequest":true,"CreatedAt":"2019-07-17T21:27:55","Actor":"jkotas","Number":"7630","RawContent":null,"Title":"Delete stale cache size detection code on Windows","State":"open","Body":"Fill cache size detection on Unix with CoreCLR PAL implementation","Url":"https://github.com/dotnet/corert/pull/7630","RelatedDescription":"Open PR \"Delete stale cache size detection code on Windows\" (#7630)"},{"Id":"469339836","IsPullRequest":true,"CreatedAt":"2019-07-17T19:26:18","Actor":"Dotnet-GitSync-Bot","Number":"7628","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7628","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7628)"},{"Id":"469207771","IsPullRequest":true,"CreatedAt":"2019-07-17T16:47:01","Actor":"Dotnet-GitSync-Bot","Number":"7627","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern","Url":"https://github.com/dotnet/corert/pull/7627","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7627)"},{"Id":"469035654","IsPullRequest":true,"CreatedAt":"2019-07-17T13:33:30","Actor":"MichalStrehovsky","Number":"7623","RawContent":null,"Title":"Include Natvis in the ILCompiler package","State":"closed","Body":"This makes strings and arrays for CoreRT-compiled programs look nicer in debuggers that support Natvis.","Url":"https://github.com/dotnet/corert/pull/7623","RelatedDescription":"Closed or merged PR \"Include Natvis in the ILCompiler package\" (#7623)"},{"Id":"469068373","IsPullRequest":true,"CreatedAt":"2019-07-17T13:32:09","Actor":"Dotnet-GitSync-Bot","Number":"7624","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7624","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7624)"},{"Id":"469103662","IsPullRequest":true,"CreatedAt":"2019-07-17T13:29:14","Actor":"MichalStrehovsky","Number":"7626","RawContent":null,"Title":"Capture name of failing method in CodeGenerationFailedException","State":"closed","Body":"Useful for troubleshooting.","Url":"https://github.com/dotnet/corert/pull/7626","RelatedDescription":"Closed or merged PR \"Capture name of failing method in CodeGenerationFailedException\" (#7626)"},{"Id":"469096443","IsPullRequest":false,"CreatedAt":"2019-07-17T09:51:35","Actor":"Berrysoft","Number":"7625","RawContent":null,"Title":"CodeGenerationFailedException after July 13th","State":"open","Body":"```\r\nILCompiler.CodeGenerationFailedException: Code generation failed ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\n  Parameter name: index\r\n     at Internal.JitInterface.CorInfoImpl.HandleToObject(IntPtr handle)\r\n     at Internal.JitInterface.CorInfoImpl.HandleToObject(CORINFO_CLASS_STRUCT_* type)\r\n     at Internal.JitInterface.CorInfoImpl.isMoreSpecificType(CORINFO_CLASS_STRUCT_* cls1, CORINFO_CLASS_STRUCT_* cls2)\r\n     at Internal.JitInterface.CorInfoImpl._isMoreSpecificType(IntPtr thisHandle, IntPtr* ppException, CORINFO_CLASS_STRUCT_* cls1, CORINFO_CLASS_STRUCT_* cls2)\r\n     --- End of inner exception stack trace ---\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.ComputeDependencyNodeDependencies(List`1 obj)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n```\r\nThe same code built successfully in July 12th, but failed after July 13th. I suspect it is because of #7612, but I don't know the reason exactly.\r\nAddition: I tried to reproduce the bug by a \"Hello world\" program, but it is built successfully, so I even don't know how to reproduce it.","Url":"https://github.com/dotnet/corert/issues/7625","RelatedDescription":"Open issue \"CodeGenerationFailedException after July 13th\" (#7625)"},{"Id":"468826889","IsPullRequest":true,"CreatedAt":"2019-07-17T08:49:41","Actor":"Dotnet-GitSync-Bot","Number":"7621","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7621","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7621)"},{"Id":"468740796","IsPullRequest":true,"CreatedAt":"2019-07-17T00:24:08","Actor":"cshung","Number":"7620","RawContent":null,"Title":"Make sure we use a 64 bit number to represent memory limit (even in 32 bit architectures)","State":"closed","Body":"Fixes #7619 \r\n\r\nAccording to @am11 in the referenced issue, Linux could tell us the memory limit is `0x7FFFFFFFFFFFFFFF` in a 32-bit architecture docker image, therefore we need to make sure when we read the number, we need to use a 64-bit number.","Url":"https://github.com/dotnet/corert/pull/7620","RelatedDescription":"Closed or merged PR \"Make sure we use a 64 bit number to represent memory limit (even in 32 bit architectures)\" (#7620)"},{"Id":"468923074","IsPullRequest":true,"CreatedAt":"2019-07-16T23:59:12","Actor":"cshung","Number":"7622","RawContent":null,"Title":"[CppCodeGen] Avoid generating typedef redefinition for delegates with vtable","State":"open","Body":"This change fixes the compilation error for issue #6415, this does not fix the issue itself yet.\r\nIn case the vtable of the delegate type is generated, [`GetCodeForVirtualMethod()`](https://github.com/dotnet/corert/blob/c3751121a3e96e750933c159d732f52a70c09857/src/ILCompiler.CppCodeGen/src/CppCodeGen/CppWriter.cs#L974) will generate a typedef for the Invoke function, and we will generate another in `GetCodeForDelegate()` as the code change shows, leading to redefinition error.\r\n\r\nThis fix detects that case and avoids generating the redefinition.","Url":"https://github.com/dotnet/corert/pull/7622","RelatedDescription":"Open PR \"[CppCodeGen] Avoid generating typedef redefinition for delegates with vtable\" (#7622)"},{"Id":"467902677","IsPullRequest":true,"CreatedAt":"2019-07-15T21:33:16","Actor":"cshung","Number":"7617","RawContent":null,"Title":"Changing assembler constant format","State":"closed","Body":"Fixes #7607 \r\n\r\nAccording to the [GNU assembler documentation](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.32.4503&rep=rep1&type=pdf), page 15, we are supposed to use the 0x format for hexadecimal numeric constants.\r\n\r\nWriting a numeric constant as `0FFh` was supported for the older version of `as`. It is now unsupported on the latest assembler (In this particular issue, Command Line Tools for Xcode Beta 2 on MacOS Mojave 10.14.5), so we must use the standard hexadecimal format.","Url":"https://github.com/dotnet/corert/pull/7617","RelatedDescription":"Closed or merged PR \"Changing assembler constant format\" (#7617)"},{"Id":"466813265","IsPullRequest":false,"CreatedAt":"2019-07-15T21:33:16","Actor":"karanjitsingh","Number":"7607","RawContent":null,"Title":"build failing on mac os","State":"closed","Body":"Trying to build on mac os 10.14.5 (18F132)\r\n\r\n```bash\r\nNitins-MacBook-Pro-2:corert vstest$ ./build.sh release\r\nUnknown CPU i386 detected, configuring as if for x64\r\nSetting up directories for build\r\nChecking pre-requisites...\r\nCommencing build of corert native components for OSX.x64.Release\r\n~/github/corert/bin/obj/Native/OSX.x64.Release ~/github/corert\r\nInvoking cmake with arguments: \"/Users/vstest/github/corert/buildscripts/..\" Release\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /Users/vstest/github/corert/bin/obj/Native/OSX.x64.Release\r\nExecuting make install -j 9 \r\n[  1%] Built target AsmOffsets\r\n[  2%] Built target jitinterface\r\n[  4%] Built target bootstrapperdll\r\n[  6%] Built target bootstrapper\r\n[  8%] Built target bootstrappercpp\r\n[  9%] Built target System.Private.CoreLib.Native\r\n[ 10%] Building ASM object System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/ConstrainedCallSupportHelpers.S.o\r\n[ 10%] Building ASM object System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/MethodEntrypointStubs.S.o\r\n[ 11%] Building ASM object System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/VTableResolver.S.o\r\n/Users/vstest/github/corert/src/Native/inc/unix/../../Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/inc/unix/../../Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/inc/unix/../../Runtime/unix/unixasmmacrosamd64.inc:310error: :34: unexpected token\r\nerror: error: DEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nunexpected token\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                    ^ \r\n                             ^\r\nmake[2]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/MethodEntrypointStubs.S.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[2]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/VTableResolver.S.o] Error 1\r\nmake[2]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/ConstrainedCallSupportHelpers.S.o] Error 1\r\nmake[1]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/all] Error 2\r\nmake[1]: *** Waiting for unfinished jobs....\r\n[ 12%] Building CXX object Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/__/gc/unix/gcenv.unix.cpp.o\r\n[ 13%] Building CXX object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/__/gc/unix/gcenv.unix.cpp.o\r\n[ 14%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallDescrWorker.S.o\r\n[ 14%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/AllocFast.S.o\r\n[ 14%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallingConventionConverterHelpers.S.o\r\n[ 15%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/ExceptionHandling.S.o\r\n[ 15%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/Interlocked.S.o\r\n[ 15%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/PInvoke.S.o\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.incerror: :310:34: unexpected token\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^ \r\n                          error:       ^\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/Interlocked.S.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallingConventionConverterHelpers.S.o] Error 1\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallDescrWorker.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/ExceptionHandling.S.o] Error 1/Users/vstest/github/corert/src/Native/Runtime/amd64/PInvoke.S:31:37: \r\nerror: unknown token in expression\r\n        mov dword ptr [rbx + 0x18], 00008000h\r\n                                    ^\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n[ 16%] Building CXX object Runtime/Full/CMakeFiles/Runtime.dir/__/__/gc/unix/gcenv.unix.cpp.o\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:73:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/PInvoke.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:206:28: error: unknown token in expression\r\n        cmp rsi, 07fffffffh\r\n                           ^\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:289:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/AllocFast.S.o] Error 1\r\n[ 16%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/AllocFast.S.o\r\n[ 16%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallDescrWorker.S.o\r\n[ 17%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallingConventionConverterHelpers.S.o\r\n[ 17%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/ExceptionHandling.S.o\r\n[ 18%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/Interlocked.S.o\r\n[ 18%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/PInvoke.S.o\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: error: unexpected token\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n   DEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h \r\n                             ^\r\n                                 ^\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:73:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:206:28: error: unknown token in expression\r\n        cmp rsi, 07fffffffh\r\n                           ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallDescrWorker.S.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:289:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallingConventionConverterHelpers.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\nunexpected token\r\n                                 ^\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/AllocFast.S.o] Error 1\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/Interlocked.S.o] Error 1\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/ExceptionHandling.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/PInvoke.S:31:37: error: unknown token in expression\r\n        mov dword ptr [rbx + 0x18], 00008000h\r\n                                    ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/PInvoke.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/gc/unix/gcenv.unix.cpp:19:10: error: \r\n      non-portable path to file '\"Volatile.h\"'; specified path differs in case\r\n      from file name on disk [-Werror,-Wnonportable-include-path]\r\n#include \"volatile.h\"\r\n         ^~~~~~~~~~~~\r\n         \"Volatile.h\"\r\n/Users/vstest/github/corert/src/Native/gc/unix/gcenv.unix.cpp:19:10: error: \r\n      non-portable path to file '\"Volatile.h\"'; specified path differs in case\r\n      from file name on disk [-Werror,-Wnonportable-include-path]\r\n#include \"volatile.h\"\r\n         ^~~~~~~~~~~~\r\n         \"Volatile.h\"\r\n/Users/vstest/github/corert/src/Native/gc/unix/gcenv.unix.cpp:19:10: error: \r\n      non-portable path to file '\"Volatile.h\"'; specified path differs in case\r\n      from file name on disk [-Werror,-Wnonportable-include-path]\r\n#include \"volatile.h\"\r\n         ^~~~~~~~~~~~\r\n         \"Volatile.h\"\r\n1 error generated.\r\nmake[2]: *** [Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/__/gc/unix/gcenv.unix.cpp.o] Error 1\r\nmake[1]: *** [Runtime/Portable/CMakeFiles/PortableRuntime.dir/all] Error 2\r\n1 error generated.\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/__/gc/unix/gcenv.unix.cpp.o] Error 1\r\nmake[1]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/all] Error 2\r\n1 error generated.\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/__/gc/unix/gcenv.unix.cpp.o] Error 1\r\nmake[1]: *** [Runtime/Full/CMakeFiles/Runtime.dir/all] Error 2\r\nmake: *** [all] Error 2\r\nFailed to build corert native components.\r\n```","Url":"https://github.com/dotnet/corert/issues/7607","RelatedDescription":"Closed issue \"build failing on mac os\" (#7607)"},{"Id":"468264724","IsPullRequest":false,"CreatedAt":"2019-07-15T18:11:42","Actor":"cshung","Number":"7619","RawContent":null,"Title":"build failed on clang5.0","State":"open","Body":"On 32 bit architectures, `size_t` is an unsigned 32 bit integer, and therefore the condition can never be true. On `clang5.0`, this becomes a warning and blocks the build.\r\n\r\n```\r\n/corert/src/Native/gc/unix/cgroup.cpp:440:31: error: comparison of constant 9223372032559808512 with expression of type 'size_t' (aka 'unsigned int') is always false [-Werror,-Wtautological-constant-out-of-range-compare]\r\n    if (physical_memory_limit > 0x7FFFFFFF00000000)\r\n        ~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~\r\n1 error generated.\r\n```\r\n\r\nHere is the associated code:\r\n```\r\n    // If there's no memory limit specified on the container this \r\n    // actually returns 0x7FFFFFFFFFFFF000 (2^63-1 rounded down to \r\n    // 4k which is a common page size). So we know we are not\r\n    // running in a memory restricted environment.\r\n    if (physical_memory_limit > 0x7FFFFFFF00000000)\r\n    {\r\n        return 0;\r\n    }\r\n```\r\nAll we have to do is to figure out what would be returned on an unrestricted 32-bit execution environment. I have tried it on a physical arm32 device, without being inside a Docker container, it returned 0 because [`FindHierarchyMount`](https://github.com/dotnet/corert/blob/98cdb7f8ccecdc886775e28448091fa59665025e/src/Native/gc/unix/cgroup.cpp#L169) finds nothing.\r\n\r\nAccording to [this thread](https://unix.stackexchange.com/questions/420906/what-is-the-value-for-the-cgroups-limit-in-bytes-if-the-memory-is-not-restricte), it appears to me that for 32-bits architectures, we should probably check against a different constant, I haven't figured that out yet.","Url":"https://github.com/dotnet/corert/issues/7619","RelatedDescription":"Open issue \"build failed on clang5.0\" (#7619)"},{"Id":"468113200","IsPullRequest":true,"CreatedAt":"2019-07-15T15:16:07","Actor":"MichalStrehovsky","Number":"7618","RawContent":null,"Title":"Adjust IL scanner for generic inlining","State":"closed","Body":"When we turned on generic inlining in RyuJIT, we started inlining things potentially across multiple shared method bodies. There is a pathological case when we may end up inlining a shared instance method on a type that otherwise wasn't allocated in the program - RyuJIT would end up asking questions about things we didn't scan.\r\n\r\nThis is because scanning happens on canonical method bodies, and dictionary dependencies are only investigated when a specific dictionary is added to the graph. If a type wasn't allocated, there's no generic dictionary to look at.\r\n\r\nThis is a conservative fix and comes with a small size on disk regression - about 16 kB on Hello World (0 kB for the \"minimal Hello World with reflection disabled\"), and about 80 kB for ASP.NET.\r\n\r\nI investigated preventing RyuJIT from inlining these methods, but RyuJIT is rather uncooperative when it comes to generic inlining. I think this is why UTC operates on runtime determined types directly rather than `__Canon`.","Url":"https://github.com/dotnet/corert/pull/7618","RelatedDescription":"Closed or merged PR \"Adjust IL scanner for generic inlining\" (#7618)"},{"Id":"467485274","IsPullRequest":true,"CreatedAt":"2019-07-14T04:43:22","Actor":"jkotas","Number":"7613","RawContent":null,"Title":"Add workaround for missing ClearInitLocals CoreLib transform","State":"closed","Body":"Ideally, we would use the same transform as CoreCLR CoreLib. However, integrating the ILLinker package used for that into CoreRT build does not look simple. For now, add a workaround to ilc.","Url":"https://github.com/dotnet/corert/pull/7613","RelatedDescription":"Closed or merged PR \"Add workaround for missing ClearInitLocals CoreLib transform\" (#7613)"},{"Id":"467771900","IsPullRequest":true,"CreatedAt":"2019-07-14T03:05:49","Actor":"Dotnet-GitSync-Bot","Number":"7616","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7616","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7616)"},{"Id":"467766531","IsPullRequest":true,"CreatedAt":"2019-07-13T23:19:58","Actor":"MichalStrehovsky","Number":"7615","RawContent":null,"Title":"Normalize instantiations in reflection method body scanner","State":"closed","Body":"Noticed we were hitting asserts compiling Draw2D. We were ending up reflection enabling a hybrid `<object, __Canon>` instantiation.","Url":"https://github.com/dotnet/corert/pull/7615","RelatedDescription":"Closed or merged PR \"Normalize instantiations in reflection method body scanner\" (#7615)"},{"Id":"467507599","IsPullRequest":true,"CreatedAt":"2019-07-13T03:13:00","Actor":"jkotas","Number":"7614","RawContent":null,"Title":"Return HardLimitBytes from GCMemoryInfo.TotalAvailableMemoryBytes (#2…","State":"closed","Body":"…5437)","Url":"https://github.com/dotnet/corert/pull/7614","RelatedDescription":"Closed or merged PR \"Return HardLimitBytes from GCMemoryInfo.TotalAvailableMemoryBytes (#2…\" (#7614)"},{"Id":"467400415","IsPullRequest":true,"CreatedAt":"2019-07-12T17:02:00","Actor":"MichalStrehovsky","Number":"7612","RawContent":null,"Title":"Split out a couple more JitInterface methods","State":"closed","Body":"Went over CorInfoImpl.cs and kicked out a couple more methods that are CoreRT specific. Calling into them in ReadyToRun mode would either crash the compiler or produce wrong code.","Url":"https://github.com/dotnet/corert/pull/7612","RelatedDescription":"Closed or merged PR \"Split out a couple more JitInterface methods\" (#7612)"},{"Id":"467070772","IsPullRequest":true,"CreatedAt":"2019-07-12T10:05:00","Actor":"MichalStrehovsky","Number":"7610","RawContent":null,"Title":"Enable generic inlining","State":"closed","Body":"RyuJIT is capable of some limited generic inlining - we just have to make sure we're resolving tokens in the inlining context.","Url":"https://github.com/dotnet/corert/pull/7610","RelatedDescription":"Closed or merged PR \"Enable generic inlining\" (#7610)"},{"Id":"467152268","IsPullRequest":true,"CreatedAt":"2019-07-11T23:33:25","Actor":"trylek","Number":"7611","RawContent":null,"Title":"Exclude methods dependent on HW intrinsics from R2R compilation","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7611","RelatedDescription":"Open PR \"Exclude methods dependent on HW intrinsics from R2R compilation\" (#7611)"},{"Id":"467053308","IsPullRequest":true,"CreatedAt":"2019-07-11T21:13:03","Actor":"cshung","Number":"7609","RawContent":null,"Title":"Converge to a single copy of volatile.h","State":"closed","Body":"Fixes #7607","Url":"https://github.com/dotnet/corert/pull/7609","RelatedDescription":"Closed or merged PR \"Converge to a single copy of volatile.h\" (#7609)"},{"Id":"467020988","IsPullRequest":true,"CreatedAt":"2019-07-11T20:42:15","Actor":"Dotnet-GitSync-Bot","Number":"7608","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7608","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7608)"},{"Id":"466031346","IsPullRequest":true,"CreatedAt":"2019-07-11T17:36:21","Actor":"Dotnet-GitSync-Bot","Number":"7606","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7606","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7606)"},{"Id":"465922181","IsPullRequest":true,"CreatedAt":"2019-07-10T19:10:17","Actor":"trylek","Number":"7604","RawContent":null,"Title":"Add CPAOT - Crossgen executable size comparison to SuperIlc","State":"closed","Body":"During investigation of the remaining bug buckets I noticed a test\r\napp that was about 3 times longer when compiled with CPAOT than\r\nwith Crossgen (on top of the fact that it was malfunctioning).\r\nI am working on a separate change to fix the size regression;\r\nin this change I'm adding monitoring of executable size comparisons\r\nto SuperIlc to help me monitor size comparisons on a regular basis.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7604","RelatedDescription":"Closed or merged PR \"Add CPAOT - Crossgen executable size comparison to SuperIlc\" (#7604)"},{"Id":"465498463","IsPullRequest":true,"CreatedAt":"2019-07-09T23:42:42","Actor":"Dotnet-GitSync-Bot","Number":"7602","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @andy-ms","Url":"https://github.com/dotnet/corert/pull/7602","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7602)"},{"Id":"465992478","IsPullRequest":false,"CreatedAt":"2019-07-09T21:26:26","Actor":"OshoNot","Number":"7605","RawContent":null,"Title":"Build failing when Adding Npgsql","State":"open","Body":"Hello,\r\n\r\nI keep getting the same problem when running the HelloWorld Sample with Npgsql.\r\n\r\nRunning `dotnet publish -r linux-x64 -c Release -v d`\r\n\r\nI get this error during the \"Exec\" task of the publish command: \r\n`Task \"Exec\"\r\n         \"/root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27906-01/tools/ilc\" @\"obj/Release/netcoreapp2.1/linux-x64/native/DbPrototype.ilc.rsp\"\r\n         Killed\r\n   1:7>/root/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27906-01/build/Microsoft.NETCore.Native.targets(248,5): error MSB3073: The command \"\"/root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27906-01/tools/ilc\" @\"obj/Release/netcoreapp2.1/linux-x64/native/DbPrototype.ilc.rsp\"\" exited with code 137. [/DbPrototype/DbPrototype.fsproj]\r\n       Done executing task \"Exec\" -- FAILED.\r\n   1:7>Done building target \"IlcCompile\" in project \"DbPrototype.fsproj\" -- FAILED.\r\n   1:7>Done Building Project \"/DbPrototype/DbPrototype.fsproj\" (Publish target(s)) -- FAILED.`\r\n\r\n\r\nOS: Ubuntu 18.04 (All pre requisites installed based on [Helloworld sample](https://github.com/dotnet/corert/tree/master/samples/HelloWorld))\r\n","Url":"https://github.com/dotnet/corert/issues/7605","RelatedDescription":"Open issue \"Build failing when Adding Npgsql\" (#7605)"},{"Id":"465653320","IsPullRequest":false,"CreatedAt":"2019-07-09T08:50:15","Actor":"MichalStrehovsky","Number":"7603","RawContent":null,"Title":"Intermittent failure in GC\\Scenarios\\StringCreator\\stringcreator","State":"open","Body":"Seen in #7601 on Windows x64 Debug.\r\n\r\n```\r\nF:\\workspace\\_work\\1\\s\\tests_downloaded\\CoreCLR\\GC\\Scenarios\\StringCreator\\stringcreator\\\\*.dll \r\n                0 file(s) copied.\r\n        Test should return with ExitCode 100 ...\r\n        Creating Strings..\r\n        Created Strings: 0 : 580328\r\n        Created Strings: 100 : 604904\r\n        Created Strings: 200 : 678632\r\n        Created Strings: 300 : 817896\r\n        Created Strings: 400 : 1014504\r\n        Created Strings: 500 : 1268456\r\n        Created Strings: 600 : 1579752\r\n        Created Strings: 700 : 1956584\r\n        Created Strings: 800 : 2390760\r\n        Created Strings: 900 : 2890472\r\n        Created Strings: 1000 : 3447528\r\n        Created Strings: 1100 : 4070120\r\n        Created Strings: 1200 : 4774632\r\n        Created Strings: 1300 : 5561184\r\n        Created Strings: 1400 : 6432976\r\n        Created Strings: 1500 : 7376576\r\n        Created Strings: 1600 : 8408368\r\n        Created Strings: 1700 : 9511968\r\n        Created Strings: 1800 : 10695568\r\n        Created Strings: 1900 : 11967360\r\n        Creating More Strings..\r\n        Created Strings: 0 : 13392616\r\n        Created Strings: 100 : 13531880\r\n        Created Strings: 200 : 13916904\r\n        Created Strings: 300 : 14457576\r\n        Created Strings: 400 : 15159200\r\n        \r\n  slicer = 1\r\n        Creating Strings..\r\n        Created Strings: 0 : 16121000\r\n        Created Strings: 100 : 16145576\r\n        Created Strings: 200 : 16218856\r\n        Created Strings: 300 : 16358120\r\n        Created Strings: 400 : 16554728\r\n        Created Strings: 500 : 16808680\r\n        Created Strings: 600 : 17119976\r\n        Created Strings: 700 : 17496808\r\n        Created Strings: 800 : 17930984\r\n        Created Strings: 900 : 18430696\r\n        Created Strings: 1000 : 18987752\r\n        Created Strings: 1100 : 19610344\r\n        Created Strings: 1200 : 20314856\r\n        Created Strings: 1300 : 21101408\r\n        Created Strings: 1400 : 21973200\r\n        Created Strings: 1500 : 22916800\r\n        Created Strings: 1600 : 23948592\r\n        Created Strings: 1700 : 25052192\r\n        Created Strings: 1800 : 26235792\r\n        Created Strings: 1900 : 1389096\r\n        Creating More Strings..\r\n        Created Strings: 0 : 2765464\r\n        Created Strings: 100 : 2912920\r\n        Created Strings: 200 : 3289752\r\n        Created Strings: 300 : 3830424\r\n        Created Strings: 400 : 4540240\r\n        \r\n  slicer = 1\r\n        Expected: 100\r\n        Actual: -1073741819\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/corert/issues/7603","RelatedDescription":"Open issue \"Intermittent failure in GC\\Scenarios\\StringCreator\\stringcreator\" (#7603)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"469180602","IsPullRequest":true,"CreatedAt":"2019-07-17T14:48:52","Actor":"dotnet-maestro[bot]","Number":"3431","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.01\r\n- **Date Produced**: 7/17/2019 8:46 AM\r\n- **Commit**: 7cf49f78deaae14948ce59fc6d9266365888f7b6\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27917-01\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3431","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3431)"},{"Id":"468375089","IsPullRequest":true,"CreatedAt":"2019-07-17T14:21:35","Actor":"dotnet-maestro[bot]","Number":"3424","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190716.4\r\n- **Date Produced**: 7/16/2019 7:16 PM\r\n- **Commit**: 0dd5e2025f0049c133a8706f40e4463b193e5d17\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19366.4\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3424","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3424)"},{"Id":"467616771","IsPullRequest":true,"CreatedAt":"2019-07-16T20:43:36","Actor":"nguerrera","Number":"3415","RawContent":null,"Title":"Select appropriate VB runtime by default","State":"closed","Body":"Fix #3387 \r\nFix #2793 \r\n\r\nThis comment in the code describes and documents the approach:\r\n\r\n```\r\nBy default, VBRuntime is chosen as follows:\r\n\r\n    .NET Framework:\r\n      Same as classic vbproj. $(FrameworkPathOverride) is passed  as\r\n      /sdkpath to compiler and Microsoft.VisualBasic.dll will be used\r\n      from there even if there is no explicit reference to it. This is\r\n      accomplished by leaving $(VBRuntime) unset.\r\n\r\n    .NET Core 3.0+:\r\n      Locate Microsoft.VisualBasic among references and pass it as\r\n      /vbruntime to compiler.\r\n\r\n    .NET Core < 3.0 or .NET Standard:\r\n      Use embedded VB runtime as there is no Microsoft.VisualBasic.dll\r\n      available that is complete enough to serve as /vbruntime.\r\n\r\n   These defaults can be overridden as follows:\r\n\r\n    $(UseReferencedVBRuntime) == true:\r\n      Use referenced Microsoft.VisualBasic regardless of TFM.\r\n\r\n      This is an escape hatch for a custom Microsoft.VisualBasic reference\r\n      that can work as /vbruntime on a target framework other than .NET Core 3.0+\r\n\r\n    $(VBRuntime) != '':\r\n      Pass it through to compiler unchanged.\r\n```","Url":"https://github.com/dotnet/sdk/pull/3415","RelatedDescription":"Closed or merged PR \"Select appropriate VB runtime by default\" (#3415)"},{"Id":"468791081","IsPullRequest":true,"CreatedAt":"2019-07-16T18:05:10","Actor":"sbomer","Number":"3430","RawContent":null,"Title":"Update stage0 SDK","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3430","RelatedDescription":"Open PR \"Update stage0 SDK\" (#3430)"},{"Id":"468382089","IsPullRequest":false,"CreatedAt":"2019-07-16T17:49:13","Actor":"tlmii","Number":"3426","RawContent":null,"Title":"Generate runtimeconfig.json with rollForwardOnNoCandidateFx value from csproj?","State":"closed","Body":"Is it possible to specify the value of [rollForwardOnNoCandidateFx ](https://github.com/dotnet/cli/blob/master/Documentation/specs/runtime-configuration-file.md#runtimeoptions-section-runtimeconfigjson)that will be in the output `[AppName].runtimeconfig.json` from the .csproj file (or otherwise within the source code)? Or does it have to be added after the fact?","Url":"https://github.com/dotnet/sdk/issues/3426","RelatedDescription":"Closed issue \"Generate runtimeconfig.json with rollForwardOnNoCandidateFx value from csproj?\" (#3426)"},{"Id":"468379242","IsPullRequest":true,"CreatedAt":"2019-07-16T17:20:35","Actor":"dotnet-maestro[bot]","Number":"3425","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b0dcab74-ed18-4631-280a-08d690bc5860)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190715.4\r\n- **Date Produced**: 7/15/2019 7:17 PM\r\n- **Commit**: fb27fd4d8a2b67d4333e33d4b898c65171c9f3c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19365.4\r\n\r\n[marker]: <> (End:b0dcab74-ed18-4631-280a-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3425","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#3425)"},{"Id":"468632752","IsPullRequest":true,"CreatedAt":"2019-07-16T16:36:04","Actor":"dotnet-maestro[bot]","Number":"3429","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190715.11\r\n- **Date Produced**: 7/16/2019 6:39 AM\r\n- **Commit**: ad9f7e33fb1a1be7eefb57849e7d71a4f9a488b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27915-11\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3429","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3429)"},{"Id":"468116152","IsPullRequest":true,"CreatedAt":"2019-07-16T12:44:00","Actor":"dotnet-maestro[bot]","Number":"3423","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190714.06\r\n- **Date Produced**: 7/15/2019 4:19 AM\r\n- **Commit**: 2bb2dcaeffb1dfeda077354449868ddac254bc3d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27914-06\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3423","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3423)"},{"Id":"468408569","IsPullRequest":false,"CreatedAt":"2019-07-16T01:58:08","Actor":"AlseinX","Number":"3428","RawContent":null,"Title":"Will there be a standard way to ship native libraries with packed nuget package?","State":"open","Body":"I believe it widely needed that:\r\n\r\n+ A csproj project could contain native libraries in a proper folder structure for maybe multiple native RIDs.\r\n+ On packing, all of these libraries are included to the nuget packages with a proper folder structure.\r\n+ On publishing, native libraries are copied to the output folder and would be embedded if `PublishSingleFile` is enabled.\r\n+ Managed code could P/Invoke these libraries with the common dll name for all RIDs (like \"abc\" is resolved to \"abc.dll\" on windows and \"libabc.so\" on linux). This must be available on both development and production environment, for native libraries from the project itself, from referenced projects, from nuget packages, and from system library paths. without manually handling the file locations and naming conventions.\r\n+ Hopefully it supports customizing naming conventions with versions, like the ncurses wide-char library version 6 is named \"libncursesw.so.6\" on linux and \"libncursesw6.dll\" on mingw on windows.\r\n\r\nThis could be implemented with manually adding MSBuild configuration and codes for loading. Since it is widely need by native wrapper libraries, there should be a simple standard way provided by the SDK.","Url":"https://github.com/dotnet/sdk/issues/3428","RelatedDescription":"Open issue \"Will there be a standard way to ship native libraries with packed nuget package?\" (#3428)"},{"Id":"468382181","IsPullRequest":true,"CreatedAt":"2019-07-15T23:46:42","Actor":"peterhuene","Number":"3427","RawContent":null,"Title":"Delete output apphost upon failure of the CreateAppHost task.","State":"open","Body":"This commit deletes the output apphost when the `CreateAppHost` task fails from\r\nan exception.\r\n\r\nPartially fixes #2989.","Url":"https://github.com/dotnet/sdk/pull/3427","RelatedDescription":"Open PR \"Delete output apphost upon failure of the CreateAppHost task.\" (#3427)"},{"Id":"468089655","IsPullRequest":true,"CreatedAt":"2019-07-15T13:56:25","Actor":"dotnet-maestro[bot]","Number":"3422","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190714.1\r\n- **Date Produced**: 7/14/2019 1:05 PM\r\n- **Commit**: 0c81c2bbdc49749e9940bc8858ebd16026d51277\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19364.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3422","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3422)"},{"Id":"467893273","IsPullRequest":true,"CreatedAt":"2019-07-14T22:47:40","Actor":"drewnoakes","Number":"3421","RawContent":null,"Title":"WIP Remove CheckForDuplicateItemsContinueOnError property","State":"open","Body":"Follows #3399.\r\n\r\nThe `CheckForDuplicateItemsContinueOnError` property was used by WPF projects.\r\n\r\nhttps://github.com/dotnet/wpf/pull/1235 makes WPF use `ContinueOnError` instead, so this temporary property can be removed once things propagate.\r\n\r\nMarked as WIP as merging should be [delayed a few days](https://github.com/dotnet/sdk/pull/3399#discussion_r302977781).","Url":"https://github.com/dotnet/sdk/pull/3421","RelatedDescription":"Open PR \"WIP Remove CheckForDuplicateItemsContinueOnError property\" (#3421)"},{"Id":"467833431","IsPullRequest":true,"CreatedAt":"2019-07-14T14:39:00","Actor":"dotnet-maestro[bot]","Number":"3420","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190713.09\r\n- **Date Produced**: 7/14/2019 4:25 AM\r\n- **Commit**: 36ad04d936c4613c1b1599b899071d411fe5c9b1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27913-09\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3420","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3420)"},{"Id":"467828256","IsPullRequest":true,"CreatedAt":"2019-07-14T14:20:08","Actor":"dotnet-maestro[bot]","Number":"3419","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190713.1\r\n- **Date Produced**: 7/13/2019 12:59 PM\r\n- **Commit**: 8c94bc75d29cd84e3592e4044100d45a341653f7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19363.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3419","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3419)"},{"Id":"467717297","IsPullRequest":true,"CreatedAt":"2019-07-13T14:41:50","Actor":"dotnet-maestro[bot]","Number":"3418","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190712.15\r\n- **Date Produced**: 7/13/2019 9:17 AM\r\n- **Commit**: a7d2e0d27b2a6be92b620de7c321a29fe42fca53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27912-15\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3418","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3418)"},{"Id":"467712059","IsPullRequest":true,"CreatedAt":"2019-07-13T14:00:05","Actor":"dotnet-maestro[bot]","Number":"3417","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190712.5\r\n- **Date Produced**: 7/12/2019 10:49 PM\r\n- **Commit**: 15f50ca6a9d0b441c9927421657fb9dc91206cc9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19362.5\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3417","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3417)"},{"Id":"467642227","IsPullRequest":true,"CreatedAt":"2019-07-13T00:05:14","Actor":"dotnet-bot","Number":"3416","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3416","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3416)"},{"Id":"467142910","IsPullRequest":true,"CreatedAt":"2019-07-12T19:42:10","Actor":"elinor-fung","Number":"3411","RawContent":null,"Title":"Update Microsoft.NET.HostModel version","State":"closed","Body":"This is for dotnet/core-setup#7173\r\n\r\nIt is also affecting Preview 7. This is just the change in master.","Url":"https://github.com/dotnet/sdk/pull/3411","RelatedDescription":"Closed or merged PR \"Update Microsoft.NET.HostModel version\" (#3411)"},{"Id":"467159353","IsPullRequest":true,"CreatedAt":"2019-07-12T19:40:27","Actor":"elinor-fung","Number":"3412","RawContent":null,"Title":"Update Microsoft.NET.HostModel version","State":"closed","Body":"This is for dotnet/core-setup#7173\r\n\r\nSame change as #3411, but for Preview 7","Url":"https://github.com/dotnet/sdk/pull/3412","RelatedDescription":"Closed or merged PR \"Update Microsoft.NET.HostModel version\" (#3412)"},{"Id":"467378256","IsPullRequest":true,"CreatedAt":"2019-07-12T14:15:20","Actor":"dotnet-maestro[bot]","Number":"3414","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190711.7\r\n- **Date Produced**: 7/12/2019 2:02 AM\r\n- **Commit**: f1b09644408f45f43f5835786b3e4bdfd2e78141\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19361.7\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3414","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3414)"},{"Id":"466851435","IsPullRequest":true,"CreatedAt":"2019-07-12T05:48:46","Actor":"dotnet-maestro[bot]","Number":"3408","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190710.8\r\n- **Date Produced**: 7/10/2019 11:51 PM\r\n- **Commit**: a6ae1b637ed236354529992729af875f6c8a180a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19360.8\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3408","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3408)"},{"Id":"467217501","IsPullRequest":true,"CreatedAt":"2019-07-12T04:57:33","Actor":"drewnoakes","Number":"3413","RawContent":null,"Title":"Document testing local builds and remove VS version","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3413","RelatedDescription":"Closed or merged PR \"Document testing local builds and remove VS version\" (#3413)"},{"Id":"467000319","IsPullRequest":true,"CreatedAt":"2019-07-12T01:34:29","Actor":"nguerrera","Number":"3410","RawContent":null,"Title":"Disable flaky test against bug","State":"closed","Body":"Good news: The test found a product bug (#3409) that it is designed to catch.\r\n\r\nBad news: It can still pass depending on what's in the nuget cache from prior tests. So the change that regressed it slipped through and now we have flaky CI.\r\n\r\nDisabling the test against the bug that it caught for now.","Url":"https://github.com/dotnet/sdk/pull/3410","RelatedDescription":"Closed or merged PR \"Disable flaky test against bug\" (#3410)"},{"Id":"465465681","IsPullRequest":true,"CreatedAt":"2019-07-11T16:37:12","Actor":"dsplaisted","Number":"3406","RawContent":null,"Title":"Supply rid graph to NuGet","State":"closed","Body":"Fix #3325","Url":"https://github.com/dotnet/sdk/pull/3406","RelatedDescription":"Closed or merged PR \"Supply rid graph to NuGet\" (#3406)"},{"Id":"466996372","IsPullRequest":false,"CreatedAt":"2019-07-11T16:36:25","Actor":"nguerrera","Number":"3409","RawContent":null,"Title":"Changing RID to one that hasn't been used before can cause design-time build failure","State":"open","Body":"I believe this regressed with #3394 \r\n\r\nIf you do not have the runtime pack in your nuget cache yet, and you change the RID of your project, the design time build will fail. Unfortunately the test that is specifically designed to test this case of changing RIDs is not reliable because dependening on state of nuget cache (say due to tests that have already run), it may pass even though the bug is present.\r\n\r\nWe need a better approach than just skipping ResolveRuntimePackAssets always in design-time builds as was done before #3394, but we can't have it fail as this will block the nomination that would restore the runtime pack.","Url":"https://github.com/dotnet/sdk/issues/3409","RelatedDescription":"Open issue \"Changing RID to one that hasn't been used before can cause design-time build failure\" (#3409)"},{"Id":"466269901","IsPullRequest":true,"CreatedAt":"2019-07-10T18:42:26","Actor":"dotnet-maestro[bot]","Number":"3407","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190709.6\r\n- **Date Produced**: 7/9/2019 10:54 PM\r\n- **Commit**: 0f5dd7680174620f31c9a00cdb2ac0b0e70e631f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19359.6\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19359.6\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3407","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3407)"},{"Id":"465287305","IsPullRequest":false,"CreatedAt":"2019-07-10T17:29:38","Actor":"vitek-karas","Number":"3405","RawContent":null,"Title":"Add a way to customize the path imprinted into apphost.exe","State":"closed","Body":"Currently there's no supported public way to customize the path to the app which is imprinted into the apphost.exe (to get the native executable). For normal apps it's always the name of the main application dll.\r\n\r\nThere are scenarios where it would be handy to be able to customize the path by redirecting it to a subfolder relative the native exe. See for example https://github.com/dotnet/core-setup/issues/5120 and https://github.com/dotnet/cli/issues/11713. It would not provide a full solution to the issue described there, but it would make it significantly easier to implement a custom solution.","Url":"https://github.com/dotnet/sdk/issues/3405","RelatedDescription":"Closed issue \"Add a way to customize the path imprinted into apphost.exe\" (#3405)"},{"Id":"465219313","IsPullRequest":true,"CreatedAt":"2019-07-10T12:04:12","Actor":"dotnet-maestro[bot]","Number":"3404","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190709.1\r\n- **Date Produced**: 7/9/2019 7:41 AM\r\n- **Commit**: ef3834feb8615429a58808cdcf9ad9284d767654\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19359.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19359.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3404","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3404)"},{"Id":"464945545","IsPullRequest":true,"CreatedAt":"2019-07-07T13:55:07","Actor":"dotnet-maestro[bot]","Number":"3403","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190706.1\r\n- **Date Produced**: 7/6/2019 12:53 PM\r\n- **Commit**: a65d0966dc28861394ce78cfdcb9d5dff370957c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19356.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19356.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3403","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3403)"},{"Id":"464847952","IsPullRequest":true,"CreatedAt":"2019-07-06T14:20:21","Actor":"dotnet-maestro[bot]","Number":"3402","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190705.2\r\n- **Date Produced**: 7/5/2019 11:56 PM\r\n- **Commit**: 3e0cbbc6fd6c6d45d7083ee0deb71cec7ea2d91f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19355.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19355.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3402","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3402)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1151259798244974592","CreatedAt":"2019-07-16T22:38:19+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1149432245909905409","CreatedAt":"2019-07-11T21:36:17+00:00","UserScreenname":"dotnet","Text":"Discover the world of .NET\n\n#dotNETConf is coming September 23 — 25\nCome celebrate the new .NET Core 3.0 launch wit… https://t.co/gVCxErAzFJ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":179,"FavoriteCount":96,"RawContent":null},{"Id":"1148794653312868355","CreatedAt":"2019-07-10T03:22:43+00:00","UserScreenname":"dotnet","Text":"New .NET libraries for Azure. Check it out. The @AzureSdk team is looking for feedback. https://t.co/B6lEi9GIuA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":55,"FavoriteCount":23,"RawContent":null}]}},"RunOn":"2019-07-18T05:30:36.8260077Z","RunDurationInMilliseconds":15680}