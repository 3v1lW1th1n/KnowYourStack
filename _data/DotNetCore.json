{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Framework 4.8 Early Access build 3632","PublishedOn":"2018-07-19T00:30:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We released the first Early Access build for the .NET Framework 4.8 last month (June-2018) and are happy to announce the next build (3632) for your feedback. This is one of the in-development builds...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/","RawContent":null},{"Title":"IL Linker — Help us build the best experience!","PublishedOn":"2018-07-11T16:44:27+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We are currently working on the IL Linker and would love to get your feedback. Please fill out the brief survey below and help shape the future of the IL Linker by telling us about your current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/11/il-linker-help-us-build-the-best-experience/","RawContent":null},{"Title":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2018-07-10T19:03:38+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.2 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core July 2018 Update","PublishedOn":"2018-07-10T17:50:29+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2018 Update. This update includes .NET Core 1.0.12, .NET Core 1.1.9, .NET Core 2.0.9 and .NET Core 2.1.2. Security .NET Core Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/","RawContent":null},{"Title":"Announcing ML.NET 0.3","PublishedOn":"2018-07-09T18:30:19+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Two months ago, at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework for .NET developers. We’ve gotten great feedback so far and would like to thank the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/announcing-ml-net-0-3/","RawContent":null},{"Title":"System.IO.Pipelines: High performance IO in .NET","PublishedOn":"2018-07-09T16:02:10+00:00","CommentsCount":33,"FacebookCount":0,"Summary":"System.IO.Pipelines is a new library that is designed to make it easier to do high performance IO in .NET. It&#8217;s a library targeting .NET Standard that works on all .NET implementations....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/system-io-pipelines-high-performance-io-in-net/","RawContent":null},{"Title":".NET Core 2.1 June Update","PublishedOn":"2018-06-22T21:08:25+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core 2.1.1. This update includes .NET Core SDK 2.1.301, ASP.NET Core 2.1.1 and .NET Core 2.1.1. See .NET Core 2.1.1 release notes for complete details on the release. Quality Updates...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/","RawContent":null},{"Title":".NET Core 2.0 will reach End of Life on October 1, 2018","PublishedOn":"2018-06-20T19:12:38+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Last Updated: 6/22/2018 .NET Core 2.0 was released on August 14, 2017. As a non-LTS release, it is supported for 3 months after the next release. .NET Core 2.1 was released on May 30th, 2018. As a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/","RawContent":null},{"Title":"The RyuJIT transition is complete!","PublishedOn":"2018-06-19T22:53:27+00:00","CommentsCount":34,"FacebookCount":0,"Summary":"RyuJIT is the code name for the .NET just-in-time compiler, one of the foundational components of the .NET runtime. In contrast, the Roslyn C# compiler compiles C# code to IL byte code. The RyuJIT...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/19/the-ryujit-transition-is-complete/","RawContent":null},{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7951838452","Type":"IssuesEvent","CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/107","RelatedDescription":"Opened issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107) at dotnet/home","RelatedBody":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS."},{"Id":"7948314683","Type":"IssuesEvent","CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/106","RelatedDescription":"Opened issue \"Updates are not requested from local WSUS\" (#106) at dotnet/home","RelatedBody":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?"},{"Id":"7939112505","Type":"PullRequestEvent","CreatedAt":"2018-07-09T17:43:55","Actor":"slide","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Opened pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7945147887","Type":"IssuesEvent","CreatedAt":"2018-07-10T17:00:38","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.3 or later <br /> 4.3.2 or later <br /> 4.4.3 or later <br /> 4.5.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-07-10_\r\n"},{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7986653606","Type":"PullRequestEvent","CreatedAt":"2018-07-19T03:29:31","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18900","RelatedDescription":"Merged pull request \"Implement GetComObjectData and SetComObjectData\" (#18900) at dotnet/coreclr","RelatedBody":"Contributes to https://github.com/dotnet/corefx/issues/31015"},{"Id":"7986474457","Type":"PullRequestEvent","CreatedAt":"2018-07-19T02:22:00","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19016","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-26719-01 (master)\" (#19016) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7986433401","Type":"PullRequestEvent","CreatedAt":"2018-07-19T02:06:41","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19015","RelatedDescription":"Opened pull request \"Eliminate arm64 contract asserts\" (#19015) at dotnet/coreclr","RelatedBody":"These methods don't trigger GC but were previously marked as if they did. Correcting the marking will eliminate spurious asserts.\r\n\r\nPTAL @BruceForstall @kouvel "},{"Id":"7986387907","Type":"PullRequestEvent","CreatedAt":"2018-07-19T01:50:19","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19014","RelatedDescription":"Opened pull request \"Update CoreClr, CoreFx to servicing-26718-03, servicing-26718-03, respectively (release/2.1)\" (#19014) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7986333569","Type":"PullRequestEvent","CreatedAt":"2018-07-19T01:29:44","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19013","RelatedDescription":"Opened pull request \"[WIP][ARM32] Handle MovRelocatableImmediate as a special case (IF_T2_N3)\" (#19013) at dotnet/coreclr","RelatedBody":""},{"Id":"7986316585","Type":"PullRequestEvent","CreatedAt":"2018-07-19T01:23:08","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/19012","RelatedDescription":"Opened pull request \"JIT: handle implicit local var references via local var attribute bit\" (#19012) at dotnet/coreclr","RelatedBody":"Instead of relying on ref count bumps, add a new attribute bit to local\r\nvars to indicate that they may have implicit references (prolog, epilog,\r\ngc, eh) and may not have any IR references.\r\n\r\nUse this attribute bit to ensure that the ref count and weighted ref count for\r\nsuch variables are never reported as zero, and as a result that these variables\r\nend up being allocated and reportable.\r\n\r\nThis is another preparatory step for #18969 and frees the jit to recompute\r\nexplicit ref counts via an IR scan without having to special case the counts\r\nfor these variables.\r\n\r\nThe jit can no longer describe implicit counts other than 1 and implicit weights\r\notehr than BB_UNITY_WEIGHT, but that currently doesn't seem to be very important.\r\n\r\nThe new bit fits into an existing padding void so LclVarDsc remains at 128 bytes\r\n(for windows x64)."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7986939338","Type":"PullRequestEvent","CreatedAt":"2018-07-19T05:27:19","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8789","RelatedDescription":"Merged pull request \"Updated document link to fix 404\" (#8789) at dotnet/cli","RelatedBody":"Known-Issues has been moved and updated, I've fixed the link to the most valid Known-Issues I could find.\r\n\r\nskipciplease"},{"Id":"7986922924","Type":"PullRequestEvent","CreatedAt":"2018-07-19T05:21:04","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8071","RelatedDescription":"Closed pull request \"Update developer-guide.md\" (#8071) at dotnet/cli","RelatedBody":"- Rename OS X to macOS (since 10.12 sierra, Apple has renamed their \"OS X\" operating system to \"macOS\").\r\n- Add Hombrew official website.\r\n"},{"Id":"7986860895","Type":"PullRequestEvent","CreatedAt":"2018-07-19T04:56:37","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9695","RelatedDescription":"Merged pull request \"Fix RPM install errors; CLI:release/2.2.1xx\" (#9695) at dotnet/cli","RelatedBody":"**build/package/Installer.RPM.targets** \r\nAddresses the current RPM errors for release/2.2.1xx due to incorrect aspnetcore-runtime & runtime internal package names: https://github.com/dotnet/cli/issues/9672\r\nEXEC : error : Package: dotnet-sdk-2.2-2.2.100_preview1_009138-1.x86_64 (/dotnet-sdk-2.2.100-preview1-009138-x64)\r\n    Requires: aspnetcore-runtime-2.2 >= 2.2.0\r\nEXEC : error : Package: dotnet-sdk-2.2-2.2.100_preview1_009138-1.x86_64 (/dotnet-sdk-2.2.100-preview1-009138-x64)\r\n    Requires: dotnet-runtime-2.2 >= 2.2.0\r\n\r\n**build/package/Installer.DEB.proj \r\nbuild/package/Installer.DEB.targets** \r\nformatting and updated comments\r\n\r\n"},{"Id":"7986820431","Type":"PullRequestEvent","CreatedAt":"2018-07-19T04:39:12","Actor":"dotnet-maestro-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9703","RelatedDescription":"Opened pull request \"Update roslyn to beta8-63119-05 (release/2.1.4xx)\" (#9703) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7986772673","Type":"PullRequestEvent","CreatedAt":"2018-07-19T04:18:28","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9702","RelatedDescription":"Merged pull request \"Passing the right BundledNETCoreAppPackageVersion\" (#9702) at dotnet/cli","RelatedBody":"…pPackageVersion version\r\n\r\nthis is a face palm. $(BundledNETCoreAppPackageVersion) is stage0's BundledNETCoreAppPackageVersion. We want to use stage2's. Which is $(_NETCoreAppPackageVersion) since \r\n\r\n`<BundledNETCoreAppPackageVersion>$(_NETCoreAppPackageVersion)</BundledNETCoreAppPackageVersion>`\r\n\r\nfixes https://github.com/dotnet/cli/issues/9701\r\n\r\nno test caught it since we don't have a good way to assert preview version(it keeps changing). But we would caught it if it is non preview"},{"Id":"7986680389","Type":"PullRequestEvent","CreatedAt":"2018-07-19T03:40:09","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/9696","RelatedDescription":"Closed pull request \"Merge release/2.1.4xx to release/2.1.401\" (#9696) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.401.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.401\ngit reset --hard upstream/release/2.1.401\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-release/2.1.401 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7986594484","Type":"PullRequestEvent","CreatedAt":"2018-07-19T03:06:26","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9702","RelatedDescription":"Opened pull request \"Passing the right BundledNETCoreAppPackageVersion\" (#9702) at dotnet/cli","RelatedBody":"…pPackageVersion version\r\n\r\nfixes https://github.com/dotnet/cli/issues/9701"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7986247010","Type":"IssuesEvent","CreatedAt":"2018-07-19T00:56:40","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/835","RelatedDescription":"Opened issue \".NET Standard vNext Review Process\" (#835) at dotnet/standard","RelatedBody":"In order to review .NET Standard vNext, I propose the following review process:\r\n\r\n1. **Review & approve the [planning document](https://github.com/dotnet/standard/pull/785)**. It covers the high-level goals of the release. I don't expect much push back there, but I'd be interested if folks have any questions or would like to add specific goals.\r\n\r\n2. **Review & approve individual [API changes with runtime-impact](https://github.com/dotnet/standard/pulls?q=is%3Aopen+is%3Apr+label%3Aruntime-impact+label%3Anetstandard-api+milestone%3A%22.NET+Standard+vNext%22)**. Those are likely the hardest ones to support, so I'd like to front load concerns in this space.\r\n\r\n3. **Review & approve [remaining API changes](https://github.com/dotnet/standard/pulls?utf8=%E2%9C%93&q=is%3Aopen+is%3Apr+-label%3Aruntime-impact+label%3Anetstandard-api+milestone%3A%22.NET+Standard+vNext%22+)**. These should be easy now 😄 \r\n\r\n@dotnet/nsboard, any concerns or questions about this process?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7986855829","Type":"PullRequestEvent","CreatedAt":"2018-07-19T04:54:30","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31179","RelatedDescription":"Merged pull request \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#31179) at dotnet/corefx","RelatedBody":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @stephentoub\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2:merge/release/2.1-to-release/2.2\r\ngit merge merge/release/2.1-to-release/2.2\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1."},{"Id":"7986847355","Type":"IssuesEvent","CreatedAt":"2018-07-19T04:50:52","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/31173","RelatedDescription":"Closed issue \"Why isn't the new UX feature (.net core 3) cross platform\" (#31173) at dotnet/corefx","RelatedBody":"A desktop ui system for .net core was probably one of the most requested features, and im glad it finally gets added. But why just for windows? ,net cor is awesome for running basiclly everywhere so why not add a ux everywhere? A wpf or win forms similar system would be what we need.\r\nI and probably a lot of other people would really appreciate this in the next version of ,net core.\r\n\r\nhttps://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/"},{"Id":"7986760480","Type":"PullRequestEvent","CreatedAt":"2018-07-19T04:13:13","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31175","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreSetup, ProjectNTfs to preview1-26719-01, preview1-26717-04, preview1-26718-04, beta-26718-00, respectively (master)\" (#31175) at dotnet/corefx","RelatedBody":""},{"Id":"7986756403","Type":"PullRequestEvent","CreatedAt":"2018-07-19T04:11:28","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31160","RelatedDescription":"Merged pull request \"support for correct Tools on Linux/ARM\" (#31160) at dotnet/corefx","RelatedBody":"I did not find any command line override. This change allows to get correct tools on arm system.\r\nThis is beginning of changes to support build on arm and match coreclr. \r\n\r\nBuild speed may vary depending on the system. But it is nice to build and run tests quickly in same workflow as x86.  "},{"Id":"7986714588","Type":"IssuesEvent","CreatedAt":"2018-07-19T03:54:14","Actor":"riverar","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31180","RelatedDescription":"Opened issue \"Why does RuntimeInformation.OSArchitecture lie to me on ARM64? 💔\" (#31180) at dotnet/corefx","RelatedBody":"Consult your nearest `Console.WriteLine(RuntimeInformation.OSArchitecture)` code, target x86, .NET Framework 4.7.2, and run the result on an ARM64 device running Windows on ARM.\r\n\r\nExpected: ARM64\r\nActual: x86\r\n\r\nWindows 10 17713 rs5_release\r\n"},{"Id":"7986694225","Type":"IssuesEvent","CreatedAt":"2018-07-19T03:45:45","Actor":"davidfowl","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/31144","RelatedDescription":"Closed issue \"PipeWriter: no way to wait for reader to catch up\" (#31144) at dotnet/corefx","RelatedBody":"When I use a `Pipe`  as a way to write to something else, there is no way for the `PipeWriter` to *flush* such that it returns a `Task` that signifies when the `PipeReader` has caught up with the `PipeWriter` up to a given point. When I'm writing directly to a stream, I can write several times, then call `await Stream.FlushAsync()` and know that everything I've written has been transmitted before continuing.\r\n\r\nBut when using a `PipeWriter`, there's no way to know when the `PipeReader` is done up to a point, short of *completing* the writer, which of course is not a repeatable thing like flushing is.\r\n\r\nEven completing the writer is really tedious. You can see a test I wrote that demonstrates that it takes **16 lines of code** to do the one-time flush operation of knowing when the reader of the pipe is caught up, as you can see below.\r\n\r\nThe `PipeWriter` has a `FlushAsync` method but from the only docs we have (the blog) [it is hinted at](https://gist.github.com/terrajobst/7e04b424ab279e711eece8f6b1c233d8#file-sample5-cs-L34-L35) that this method doesn't complete when the reader is done, but rather just gives the reader access to what we've written (and I guess serves as a force-slowdown on the writer if the reader is far behind). \r\n\r\nCan we please get a proper `FlushAsync` method that indicates when the reader has caught up with the writer at a given point?\r\n\r\n```cs\r\n[Fact]\r\npublic async Task UsePipeWriter()\r\n{\r\n    byte[] expectedBuffer = GetRandomBuffer(2048);\r\n    var stream = new MemoryStream(expectedBuffer.Length);\r\n    var writer = stream.UsePipeWriter(this.TimeoutToken);\r\n    await writer.WriteAsync(expectedBuffer.AsMemory(0, 1024), this.TimeoutToken);\r\n    await writer.WriteAsync(expectedBuffer.AsMemory(1024, 1024), this.TimeoutToken);\r\n\r\n    // As a means of waiting for the async process that copies what we write onto the stream,\r\n    // complete our writer and wait for the reader to complete also.\r\n    writer.Complete();\r\n    var readerDone = new TaskCompletionSource<object>();\r\n    writer.OnReaderCompleted(\r\n        (ex, tcs) =>\r\n        {\r\n            if (ex != null)\r\n            {\r\n                readerDone.SetException(ex);\r\n            }\r\n            else\r\n            {\r\n                readerDone.SetResult(null);\r\n            }\r\n        },\r\n        null);\r\n    await readerDone.Task.WithCancellation(this.TimeoutToken);\r\n\r\n    Assert.Equal(expectedBuffer, stream.ToArray());\r\n}\r\n```\r\n\r\nWhere `UsePipeWriter` is defined this way:\r\n\r\n```cs\r\npublic static PipeWriter UsePipeWriter(this Stream stream, CancellationToken cancellationToken = default)\r\n{\r\n    Requires.NotNull(stream, nameof(stream));\r\n\r\n    var pipe = new Pipe();\r\n    Task.Run(async delegate\r\n    {\r\n        try\r\n        {\r\n            while (true)\r\n            {\r\n                ReadResult readResult = await pipe.Reader.ReadAsync(cancellationToken);\r\n                if (readResult.Buffer.Length > 0)\r\n                {\r\n                    foreach (ReadOnlyMemory<byte> segment in readResult.Buffer)\r\n                    {\r\n                        await stream.WriteAsync(segment, cancellationToken);\r\n                    }\r\n\r\n                    await stream.FlushAsync(cancellationToken).ConfigureAwait(false);\r\n                }\r\n\r\n                pipe.Reader.AdvanceTo(readResult.Buffer.End);\r\n\r\n                if (readResult.IsCompleted)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            pipe.Reader.Complete();\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            pipe.Reader.Complete(ex);\r\n            throw;\r\n        }\r\n    }).Forget();\r\n    return pipe.Writer;\r\n}\r\n```"},{"Id":"7986644637","Type":"PullRequestEvent","CreatedAt":"2018-07-19T03:25:58","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/31179","RelatedDescription":"Opened pull request \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#31179) at dotnet/corefx","RelatedBody":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2.\r\nI'm a robot and am configured to help you automatically keep release/2.2 up to date, so\r\nI've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @stephentoub\r\n\r\n## Instructions for merging\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, please complete this PR\r\nby creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nYou can also do this on command line:\r\n```\r\ngit checkout release/2.2\r\ngit pull\r\ngit fetch --force https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2:merge/release/2.1-to-release/2.2\r\ngit merge merge/release/2.1-to-release/2.2\r\ngit push\r\n```\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging.\r\n\r\nPlease contact ASP.NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/aspnet/BuildTools/blob/master/scripts/GitHubMergeBranches.ps1."},{"Id":"7986639980","Type":"PullRequestEvent","CreatedAt":"2018-07-19T03:24:10","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/31174","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreSetup to servicing-26718-03, servicing-26718-03, servicing-26718-02, respectively (release/2.1)\" (#31174) at dotnet/corefx","RelatedBody":""},{"Id":"7986633014","Type":"IssuesEvent","CreatedAt":"2018-07-19T03:21:29","Actor":"LuceLuo","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31178","RelatedDescription":"Opened issue \"The background of the PNG picture turns white\" (#31178) at dotnet/corefx","RelatedBody":"I used \"libgdiplus --with-pango\" to solve the problem of text loss, but when using \"DrawImage\" to superimpose PNG pictures, the transparent bottom of the PNG picture turned white. I don't know whether the problem is from this project or libgdiplus. I hope that the person you know can give me the answer, thank you.\r\n\r\n  "},{"Id":"7986626096","Type":"IssuesEvent","CreatedAt":"2018-07-19T03:18:47","Actor":"Thaina","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31177","RelatedDescription":"Opened issue \"ConditionalWeakTable return ref\" (#31177) at dotnet/corefx","RelatedBody":"As of now we have `return ref` in C#. So I wish we would have more of it support on collection. And `ConditionalWeakTable` is one I think needed\r\n\r\nIt could be new class such as `ConditionalWeakTableRef<TKey,TValue>`. Just have it return reference when index. So we could attach struct to hold extension value"},{"Id":"7986538002","Type":"IssuesEvent","CreatedAt":"2018-07-19T02:45:51","Actor":"ObsidianMinor","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/31176","RelatedDescription":"Opened issue \"Resetting Pipe does not reset reader and writer awaitables\" (#31176) at dotnet/corefx","RelatedBody":"Resetting a Pipe object through Pipe.Reset does not reset reader and writer awaitables. This leads to inconsistent behavior where after resetting. read methods return empty buffers if no data is available; Whereas before resetting read methods return false or return tasks which complete when the writer is flushed.\r\n\r\nNew pipe:\r\n![complete](https://user-images.githubusercontent.com/10121870/42918064-291db938-8ada-11e8-9150-37b4a44fcf90.png)\r\nAs you can see, the `_readerAwaitable`'s IsCompleted property is false\r\n\r\nCompleted pipe:\r\n![reset](https://user-images.githubusercontent.com/10121870/42918073-30d85d68-8ada-11e8-8db2-9d336cf87f14.png)\r\nUpon completing the pipe, IsCompleted is now true as expected\r\n\r\nReset pipe:\r\n![completed](https://user-images.githubusercontent.com/10121870/42918081-3cf1d638-8ada-11e8-94ab-f14861e22a6a.png)\r\nAfter resetting the pipe, IsCompleted is still true"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7986848571","Type":"PullRequestEvent","CreatedAt":"2018-07-19T04:51:21","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28683","RelatedDescription":"Merged pull request \"Fix a bad merge\" (#28683) at dotnet/roslyn","RelatedBody":"These two PRs were green but broke when built together:\r\n\r\n- https://github.com/dotnet/roslyn/pull/28652\r\n- https://github.com/dotnet/roslyn/pull/28420\r\n\r\n<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7986738884","Type":"PullRequestEvent","CreatedAt":"2018-07-19T04:04:04","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28686","RelatedDescription":"Opened pull request \"`is` operator informs nullability analysis\" (#28686) at dotnet/roslyn","RelatedBody":"We know that `x` is not `null` following `x is string`, `x is string s`, `x is K` (where `K` is a non-null constant).\r\nWe know that `s` is not `null` following `x is string s`.\r\nWe know that `y` has the same nullability as `x` following `x is var y`.\r\nProduce a hidden warning if a `null` test could never succeed (`\"string\" is null`).\r\n\r\nRelates to https://github.com/dotnet/roslyn/issues/22152"},{"Id":"7986737393","Type":"PullRequestEvent","CreatedAt":"2018-07-19T04:03:26","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28685","RelatedDescription":"Opened pull request \"Do not qualify member accesses that appear inside attributes.\" (#28685) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/26893"},{"Id":"7986670193","Type":"IssuesEvent","CreatedAt":"2018-07-19T03:36:00","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/28684","RelatedDescription":"Opened issue \"Annotations are ignored when comparing overridden method with [NonNullTypes(false)]\" (#28684) at dotnet/roslyn","RelatedBody":"No warnings are reported for `B.F` and `B.G` even though the annotations do not match the overridden methods in `A`.\r\n```c#\r\nusing System.Runtime.CompilerServices;\r\nnamespace System.Runtime.CompilerServices\r\n{\r\n    public sealed class NonNullTypesAttribute : Attribute\r\n    {\r\n        public NonNullTypesAttribute(bool flag) { }\r\n    }\r\n}\r\n[NonNullTypes(true)]\r\nabstract class A\r\n{\r\n    internal abstract string F();\r\n    internal abstract object?[] G();\r\n}\r\n[NonNullTypes(false)]\r\nabstract class B : A\r\n{\r\n    internal override abstract string? F(); // does not match string\r\n    internal override abstract object[] G(); // does not match object?[]\r\n}\r\n```"},{"Id":"7986658903","Type":"PullRequestEvent","CreatedAt":"2018-07-19T03:31:32","Actor":"dpoeschl","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28682","RelatedDescription":"Merged pull request \"Merge dev15.8.x to dev15.8.x-vs-deps\" (#28682) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev15.8.x into dev15.8.x-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev15.8.x-to-dev15.8.x-vs-deps\ngit reset --hard upstream/dev15.8.x-vs-deps\ngit merge upstream/dev15.8.x\n# Fix merge conflicts\ngit commit\ngit push merges/dev15.8.x-to-dev15.8.x-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7986344370","Type":"PullRequestEvent","CreatedAt":"2018-07-19T01:33:50","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6098","RelatedDescription":"Merged pull request \"Refactor RyuJit\" (#6098) at dotnet/corert","RelatedBody":"Set up the consumption of RyuJit classes so that we can import CorInfoImpl.cs from multiple projects with different `#ifdef` settings for conditional compilation.\r\n\r\n* In CoreCLR ready-to-run compilation mode, we want the Jit interface implementation to know about ReadyToRunCodegenCompilation so that it can ask for nodes / services that are ready-to-run specific. We do not want to leak that stuff into the main ILCompiler.Compiler project, since vanilla CoreRT shouldn't have to know about such details.\r\n* Revert the class visibility of several JitInterface classes. We made some public to speed up the prototyping previousl.\r\n* Make the type visibility uniform in `CorInfoTypes.cs`. There was a mixture of public / internal structs / enums. I chose to make them all public so this file can be included in ILCompiler.RyuJit and its contents referenced from consuming libraries.\r\n* Define `READY_TO_RUN` when building `ILCompiler.ReadyToRun` so we can keep the `ReadyToRunCodegenCompilation` under `#ifdef`\r\n* Move Jit-specific classes to `ILCompiler.RyuJit`: `RyuJitNodeFactory`, `RyuJitCompilation`, `RyuJitCompilationBuilder`, `MethodCodeNode`, `IMethodCodeNode`"},{"Id":"7986333499","Type":"IssuesEvent","CreatedAt":"2018-07-19T01:29:42","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6115","RelatedDescription":"Opened issue \"Refactoring ILCompiler.ReadyToRun / ILCompiler.RyuJit\" (#6115) at dotnet/corert","RelatedBody":"Known list of further refactoring work:\r\n\r\n- [ ] Remove ILCompiler.ReadyToRun project's reference to ILCompiler.RyuJit\r\n  - [ ] Remove IMethodCodeNode from ILCompiler.RyuJit. It was added for System.Private.Jit. Ideally we can isolate its use to that library\r\n  - [ ] Break inheritance of `MethodWithGCInfo` from `MethodCodeNode`\r\n- [ ] JitHelper should be CoreRT-specific (should not be referenced in ILCompiler.ReadyToRun project's view of `CorInfoImpl`)"},{"Id":"7985707681","Type":"PullRequestEvent","CreatedAt":"2018-07-18T21:59:06","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6114","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#6114) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"7985361438","Type":"PullRequestEvent","CreatedAt":"2018-07-18T20:43:35","Actor":"luqunl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6113","RelatedDescription":"Opened pull request \"[WIP]Add ILanguageExceptionStackBackTrace as WellKnown CCW interface\" (#6113) at dotnet/corert","RelatedBody":""},{"Id":"7985262322","Type":"PullRequestEvent","CreatedAt":"2018-07-18T20:23:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6110","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#6110) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @vancem @pentp @jkotas @pentp"},{"Id":"7984980065","Type":"PullRequestEvent","CreatedAt":"2018-07-18T19:25:08","Actor":"acmyu","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6105","RelatedDescription":"Merged pull request \"Straightforward bugfixes and trivial additions\" (#6105) at dotnet/corert","RelatedBody":"Added some constants to FixupConstants.cs\r\nRemoved dead code from ImportSectionsTableNode.cs\r\nBugfix in VertexArray"},{"Id":"7984965081","Type":"PullRequestEvent","CreatedAt":"2018-07-18T19:21:59","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6112","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#6112) at dotnet/corert","RelatedBody":""},{"Id":"7984905811","Type":"PullRequestEvent","CreatedAt":"2018-07-18T19:09:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6109","RelatedDescription":"Merged pull request \"Make ThreadStatics a bit more faster\" (#6109) at dotnet/corert","RelatedBody":"Over lunch, I realized I could have done a bit more than I've done in #6108. This squeezes out another 7% on my microbenchmark by eliminating an array range check (with the `uint` cast trick), and factoring out the slow path. Now we're definitely faster than the CLR on the microbenchmark."},{"Id":"7984637116","Type":"PullRequestEvent","CreatedAt":"2018-07-18T18:15:46","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6112","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#6112) at dotnet/corert","RelatedBody":""},{"Id":"7984635809","Type":"PullRequestEvent","CreatedAt":"2018-07-18T18:15:30","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6111","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#6111) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7984629045","Type":"PullRequestEvent","CreatedAt":"2018-07-18T18:14:11","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6111","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#6111) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7984192475","Type":"PullRequestEvent","CreatedAt":"2018-07-18T16:47:55","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6110","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#6110) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1019598416861544453","CreatedAt":"2018-07-18T15:03:00+00:00","UserScreenname":"dotnet","Text":"#dotNETConf is back for 2018! 3 days of free #dotnet #developer content streaming live around the globe. Save the d… https://t.co/tloJwxPMb9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":302,"FavoriteCount":195,"RawContent":null},{"Id":"1019283191507582981","CreatedAt":"2018-07-17T18:10:24+00:00","UserScreenname":"dotnet","Text":"Check out the replay and learn about building reusable business objects in your applications from @RockyLhotka and… https://t.co/VnbmnXt31C","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":7,"RawContent":null},{"Id":"1019254182673436672","CreatedAt":"2018-07-17T16:15:08+00:00","UserScreenname":"dotnet","Text":"Code refactoring support in Visual Studio 2017 with @kuhlenhuth https://t.co/HkaG7b6Ac3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":59,"FavoriteCount":25,"RawContent":null},{"Id":"1019207783844139010","CreatedAt":"2018-07-17T13:10:46+00:00","UserScreenname":"dotnet","Text":"Always a great time, and two experts that are wonderful to learn from.  Tune in at 10a ET / 7a PT / 14:00 UTC / 8p… https://t.co/PQsuqaJQY4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1018952801953681411","CreatedAt":"2018-07-16T20:17:33+00:00","UserScreenname":"dotnet","Text":"Rocky's got great insight into building Enterprise applications.  Be sure to tune in tomorrow when he pair-programs… https://t.co/cdQT99n8kk","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"1018877434584817664","CreatedAt":"2018-07-16T15:18:04+00:00","UserScreenname":"dotnet","Text":"Our Jeff Fritz will be hosting another one of his FREE workshops this Friday.  This week, tune in and learn about s… https://t.co/06laByebWA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":13,"RawContent":null},{"Id":"1017101058773053445","CreatedAt":"2018-07-11T17:39:23+00:00","UserScreenname":"dotnet","Text":"Learn more about writing games with C#, .NET, and Unity right NOW on Twitch... https://t.co/UHRZk39EWG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":68,"FavoriteCount":21,"RawContent":null},{"Id":"1016825199109423104","CreatedAt":"2018-07-10T23:23:13+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog https://t.co/oBwPB86Pxf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":109,"FavoriteCount":95,"RawContent":null},{"Id":"1016742094671507456","CreatedAt":"2018-07-10T17:53:00+00:00","UserScreenname":"dotnet","Text":".NET Core July 2018 Update https://t.co/1zcc6ep8AC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":88,"FavoriteCount":78,"RawContent":null}]}},"RunOn":"2018-07-19T05:30:34.2929333Z","RunDurationInMilliseconds":8134}