{"Data":{"Blog":{"FeedItems":[{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel.Â Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing compatibility version in MVC","PublishedOn":"2018-02-27T22:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Ryan Nowak In 2.1 we&#8217;re adding a feature to address a long-standing problem for maintaining MVC &#8211; how do we make improvements to framework code without making it...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/introducing-compatibility-version-in-mvc/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Getting started with SignalR","PublishedOn":"2018-02-27T21:57:11+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Since 2013, ASP.NET developers have been using SignalR to build real-time web applications. Now, with ASP.NET Core 2.1 Preview 1, we&#8217;re bringing SignalR over to ASP.NET Core so you can build...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-getting-started-with-signalr/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Using ASP.NET Core Previews on Azure App Service","PublishedOn":"2018-02-27T19:18:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are 3 options to get ASP.NET Core 2.1 Preview applications running on Azure App Service: Installing the Preview1 site extension Deploying your app self-contained Using Web Apps for Containers...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-using-asp-net-core-previews-on-azure-app-service/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7392954136","Type":"IssuesEvent","CreatedAt":"2018-03-16T20:37:36","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2630","RelatedDescription":"Closed issue \"GetAllStrings throws \"No manifests exist for the current culture\"\" (#2630) at aspnet/Home","RelatedBody":"_From @atuzovic on Sunday, December 24, 2017 7:56:21 AM_\r\n\r\nWe have updated all our solution assemblies from 1.1.x to 2.0.1 and out of sudden this message has started to appear. \r\n\r\nWe have an MVC project that references assembly AppImpact.AspNetCore.\r\n\r\nIn assembly A we have resources for two cultures as shown on the image:\r\n- en\r\n- bs-Latn-BA\r\n\r\n![image](https://user-images.githubusercontent.com/5385262/34327624-87ea7fc2-e8c9-11e7-949e-778b52b25c97.png)\r\n\r\nIn MVC project, we create a localizer by using Create method on IStringLocalizerFactory with the following parameters (as shown on the images):\r\n- \"Buttons\" as baseName\r\n- \"AppImpact.AspNetCore\" as location\r\n\r\n![image](https://user-images.githubusercontent.com/5385262/34327639-cea9715c-e8c9-11e7-8272-8b84ce60d608.png)\r\n\r\n![image](https://user-images.githubusercontent.com/5385262/34327644-e58b22bc-e8c9-11e7-9d18-ea8b26d14d17.png)\r\n\r\nIf we inspect created localizer instance, we can see that assembly is present in _resourceNamesCache:\r\n\r\n![image](https://user-images.githubusercontent.com/5385262/34327661-5a411a08-e8ca-11e7-97e3-391ab9e4eb80.png)\r\n\r\nHighlighted value is:\r\n{[Assembly=AppImpact.AspNetCore, Version=1.2.2.0, Culture=bs-Latn-BA, PublicKeyToken=null;resourceName=AppImpact.AspNetCore.Resources.Buttons, ]}\r\n\r\nAs soon as we try to iterate through results of GetAllStrings method, we get \"No manifests exist for the current culture\".\r\n\r\n![image](https://user-images.githubusercontent.com/5385262/34327669-d22d3498-e8ca-11e7-8bd9-820c362a6d2f.png)\r\n\r\nThis code was in production for more than a year. Only difference that was done was upgrade to 2.x.\r\n\r\nFunny thing is that as soon as we rename Buttons.en.resx (or any other for that matter) to Buttons.resx (old logic with default resource), everything starts to work.\r\n\r\nWe are looking for a better solution rather than doing a mass rename of resource files.\r\n\r\nIs this behavior as expected or there is a bug?\r\n\r\nEDIT:\r\n\r\nWe have tried now the second overload of GetAllStrings method:\r\n\r\n![image](https://user-images.githubusercontent.com/5385262/34327782-bcfcc478-e8cd-11e7-9467-072bcd8041d3.png)\r\n\r\nAnd now we get a different error:\r\n\r\n![image](https://user-images.githubusercontent.com/5385262/34327785-d298f4fa-e8cd-11e7-9132-3bf5a11c2cf9.png)\r\n\r\nHowever, in the bin folder where the build is, there is a resource file for this assembly:\r\n\r\n![image](https://user-images.githubusercontent.com/5385262/34327788-fdf364be-e8cd-11e7-9a79-a05efd7c2611.png)\r\n\r\n\r\n_Copied from original issue: aspnet/Localization#433_"},{"Id":"7392313802","Type":"IssuesEvent","CreatedAt":"2018-03-16T18:14:08","Actor":"pakrym","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2871","RelatedDescription":"Closed issue \"ActivatorUtilities needs to use the longest available constructor when multiple ctors are available\" (#2871) at aspnet/Home","RelatedBody":"_From @mkArtakMSFT on February 12, 2018 18:48_\n\n_From @jbagga on February 5, 2018 21:54_\n\nFor cases that need a new constructor for a class (additional param), in order to avoid a breaking change we add an overload. However, `ActivatorUtilities` does not allow multiple applicable constructors. \r\n\r\n```\r\nMessage: System.InvalidOperationException : Multiple constructors accepting all given argument types have been found in type \r\n'Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper'. There should only be one applicable constructor.\r\n```\r\nThis restricts `TagHelpers` from changing the constructors.\r\n\r\ncc @rynowak \n\n_Copied from original issue: aspnet/Mvc#7330_\n\n_Copied from original issue: aspnet/DependencyInjection#627_"},{"Id":"7392283659","Type":"IssuesEvent","CreatedAt":"2018-03-16T18:07:54","Actor":"natemcmaster","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2967","RelatedDescription":"Closed issue \"Culture info ru-BY missed in .NET core 2.0.6 on Windows Server 2012 R2\" (#2967) at aspnet/Home","RelatedBody":"I have Localization on my asp.net core 2.0.6 and it's working on local machine. But when I publish to IIS on server 2012 r2 it's throwing an exception\r\nApplication startup exception: System.Globalization.CultureNotFoundException: Culture is not supported.\r\nParameter name: name\r\nru-by is an invalid culture identifier.\r\n   at System.Globalization.CultureInfo.InitializeFromName(String name, Boolean useUserOverride)\r\n\r\nAccording to the link https://msdn.microsoft.com/en-us/library/cc233982.aspx it's valid culture info.\r\n\r\nEvent microsoft has this localization on site https://www.microsoft.com/ru-by"},{"Id":"7392281042","Type":"IssuesEvent","CreatedAt":"2018-03-16T18:07:22","Actor":"ryanbrandenburg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2969","RelatedDescription":"Opened issue \"Flaky test: AutobahnTests.AutobahnTestSuite\" (#2969) at aspnet/Home","RelatedBody":"This test failed [on the ci](http://aspnetci/viewLog.html?buildId=422662&buildTypeId=XPlat_Windows_Win2008r2_Universe).\r\n\r\n```\r\nSystem.Net.Http.HttpRequestException : The SSL connection could not be established, see inner exception.\r\n---- System.IO.IOException : Authentication failed because the remote party has closed the transport stream.\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Server.IntegrationTesting.LoggingHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at Microsoft.AspNetCore.Server.IntegrationTesting.RetryHelper.RetryRequest(Func`1 retryBlock, ILogger logger, CancellationToken cancellationToken, Int32 retryCount)\r\n   at Microsoft.AspNetCore.Server.IntegrationTesting.RetryHelper.RetryRequest(Func`1 retryBlock, ILogger logger, CancellationToken cancellationToken, Int32 retryCount)\r\n   at Microsoft.AspNetCore.WebSockets.ConformanceTest.Autobahn.AutobahnTester.DeployTestAndAddToSpec(ServerType server, Boolean ssl, String environment, CancellationToken cancellationToken, Action`1 expectationConfig) in C:\\BuildAgent\\work\\33bdfc1cae7b2a38\\modules\\WebSockets\\test\\Microsoft.AspNetCore.WebSockets.ConformanceTest\\Autobahn\\AutobahnTester.cs:line 173\r\n   at Microsoft.AspNetCore.WebSockets.ConformanceTest.AutobahnTests.AutobahnTestSuite() in C:\\BuildAgent\\work\\33bdfc1cae7b2a38\\modules\\WebSockets\\test\\Microsoft.AspNetCore.WebSockets.ConformanceTest\\AutobahnTests.cs:line 69\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\n   at System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslState.PartialFrameCallback(AsyncProtocolRequest asyncRequest)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Net.Security.SslState.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)\r\n   at System.Net.Security.SslState.EndProcessAuthentication(IAsyncResult result)\r\n   at System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult asyncResult)\r\n   at System.Net.Security.SslStream.<>c.<AuthenticateAsClientAsync>b__44_1(IAsyncResult iar)\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Net.Http.ConnectHelper.EstablishSslConnectionAsyncCore(Stream stream, SslClientAuthenticationOptions sslOptions, CancellationToken cancellationToken)\r\n------- Stdout: -------\r\n| TestLifetime Information: Starting test AutobahnTestSuite\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Deploying [Variation] :: ServerType=Kestrel, Runtime=CoreClr, Arch=x64, BaseUrlHint=http://localhost:0, Publish=False\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Executing dotnet run --no-restore --framework netcoreapp2.1 -- --server.urls http://localhost:49352/  --server Microsoft.AspNetCore.Server.Kestrel\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: SET ASPNETCORE_ENVIRONMENT=ManagedSockets\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: SET ASPNETCORE_DETAILEDERRORS=true\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Started dotnet. Process Id : 10468\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Using launch settings from C:\\BuildAgent\\work\\33bdfc1cae7b2a38\\modules\\WebSockets\\test\\AutobahnTestApp\\Properties\\launchSettings.json...\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Using Kestrel, URL: http://localhost:49352/\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Starting Server for Scenario: Unknown\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Hosting environment: ManagedSockets\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Content root path: C:\\BuildAgent\\work\\33bdfc1cae7b2a38\\modules\\WebSockets\\test\\AutobahnTestApp\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Now listening on: http://127.0.0.1:49352\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Application started. Press Ctrl+C to shut down.\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Application ready at URL: http://127.0.0.1:49352/\r\n| AutobahnTestApp:Kestrel:NoSSL:ManagedSockets Warning: Retry count 1..\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: info: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout:       Request starting HTTP/1.1 GET http://127.0.0.1:49352/  \r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: info: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout:       Request finished in 81.5628ms 200 \r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Deploying [Variation] :: ServerType=Kestrel, Runtime=CoreClr, Arch=x64, BaseUrlHint=https://localhost:0, Publish=False\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Executing dotnet run --no-restore --framework netcoreapp2.1 -- --server.urls https://localhost:49416/  --server Microsoft.AspNetCore.Server.Kestrel\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: SET ASPNETCORE_ENVIRONMENT=ManagedSockets\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: SET ASPNETCORE_DETAILEDERRORS=true\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Started dotnet. Process Id : 7468\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Using launch settings from C:\\BuildAgent\\work\\33bdfc1cae7b2a38\\modules\\WebSockets\\test\\AutobahnTestApp\\Properties\\launchSettings.json...\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Using Kestrel, URL: https://localhost:49416/\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Starting Server for Scenario: Unknown\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Using SSL with certificate: C:\\BuildAgent\\work\\33bdfc1cae7b2a38\\modules\\WebSockets\\test\\AutobahnTestApp\\bin\\Release\\netcoreapp2.1\\TestResources\\testCert.pfx\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Hosting environment: ManagedSockets\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Content root path: C:\\BuildAgent\\work\\33bdfc1cae7b2a38\\modules\\WebSockets\\test\\AutobahnTestApp\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Now listening on: https://127.0.0.1:49416\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Application started. Press Ctrl+C to shut down.\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Application ready at URL: https://127.0.0.1:49416/\r\n| AutobahnTestApp:Kestrel:SSL:ManagedSockets Warning: Retry count 1..\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: fail: Microsoft.AspNetCore.Server.Kestrel[0]\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout:       Uncaught exception from the OnConnectionAsync method of an IConnectionAdapter.\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: System.Security.Authentication.AuthenticationException: A call to SSPI failed, see inner exception. ---> System.ComponentModel.Win32Exception: The client and server cannot communicate, because they do not possess a common algorithm\r\n```\r\n\r\nFuture instances of this failure can be found on [this](http://aspnetci/httpAuth/app/rest/builds?locator=tag:SSLCommonAlgo,sinceDate:201710010T000000-0001&fields=build(startDate,buildTypeId,status,branchName,webUrl,tags)) list.\r\n"},{"Id":"7392019641","Type":"IssuesEvent","CreatedAt":"2018-03-16T17:15:27","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2968","RelatedDescription":"Closed issue \"Announcements repository\" (#2968) at aspnet/Home","RelatedBody":"There's been a couple of cases the past few weeks where people have been commenting on or raising issues within the https://github.com/aspnet/Announcements repository, annoying everyone who subscribes to the issues for legitimate announcements\r\n\r\nE.g:\r\n\r\n* https://github.com/aspnet/Announcements/issues/297\r\n* https://github.com/aspnet/Announcements/issues/290\r\n\r\nIs it not possible to make issues read-only for non-members? I know that issues can be locked to collaborators but not sure about raising them entirely"},{"Id":"7391057220","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:26:34","Actor":"MattJeanes","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2968","RelatedDescription":"Opened issue \"Announcements repository\" (#2968) at aspnet/Home","RelatedBody":"There's been a couple of cases the past few weeks where people have been commenting on or raising issues within the https://github.com/aspnet/Announcements repository, annoying everyone who subscribes to the issues for legitimate announcements\r\n\r\nE.g:\r\n\r\n* https://github.com/aspnet/Announcements/issues/297\r\n* https://github.com/aspnet/Announcements/issues/290\r\n\r\nIs it not possible to make issues read-only for non-members? I know that issues can be locked to collaborators but not sure about raising them entirely"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7393879261","Type":"PullRequestEvent","CreatedAt":"2018-03-17T02:58:43","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1630","RelatedDescription":"Opened pull request \"Reduce the per message allocations\" (#1630) at aspnet/SignalR","RelatedBody":"- Introduce CharArrayTextReader which is a simple TextReader\r\nimplemented over a utf8 buffer. It encodes directly into the\r\nbuffer allocated by JSON.NET.\r\n\r\nWorking on getting performance results"},{"Id":"7393607368","Type":"IssuesEvent","CreatedAt":"2018-03-17T00:01:08","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1523","RelatedDescription":"Closed issue \"HMAC the Connection ID\" (#1523) at aspnet/SignalR","RelatedBody":"For additional security, we should HMAC the connection ID before sending it to the client. When we receive it, we must verify the HMAC.\r\n\r\nWe should use the [HMACSHA256](https://msdn.microsoft.com/en-us/library/system.security.cryptography.hmacsha256(v=vs.110).aspx) class. Since we require sticky sessions, the key can be random (which the default constructor automatically generates for us)"},{"Id":"7393606331","Type":"IssuesEvent","CreatedAt":"2018-03-17T00:00:41","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1555","RelatedDescription":"Closed issue \"If WriteAsync throws other connections might not be sent to\" (#1555) at aspnet/SignalR","RelatedBody":"`WriteAsync` can throw, and if it throws before going async then other connections after the faulty one won't get the Send.\r\nhttps://github.com/aspnet/SignalR/blob/1c44e8febfd57a1038715d6c74f030cebdcd14f2/src/Microsoft.AspNetCore.SignalR.Core/DefaultHubLifetimeManager.cs#L86\r\n\r\nAlso the Hub will get the error, and I think we decided it wasn't an interesting failure for the Hub to see"},{"Id":"7393605640","Type":"PullRequestEvent","CreatedAt":"2018-03-17T00:00:24","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1624","RelatedDescription":"Merged pull request \"Update client-ts versions\" (#1624) at aspnet/SignalR","RelatedBody":""},{"Id":"7393597538","Type":"PullRequestEvent","CreatedAt":"2018-03-16T23:56:53","Actor":"mikeharder","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1627","RelatedDescription":"Merged pull request \"Upgrade Microsoft.NET.Test.Sdk to 15.6.1\" (#1627) at aspnet/SignalR","RelatedBody":"* Should fix race condition which occasionally causes tests to fail (https://github.com/Microsoft/vstest/issues/1435)"},{"Id":"7393590933","Type":"PullRequestEvent","CreatedAt":"2018-03-16T23:53:59","Actor":"mikeharder","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1627","RelatedDescription":null,"RelatedBody":"* Should fix race condition which occasionally causes tests to fail (https://github.com/Microsoft/vstest/issues/1435)"},{"Id":"7393582943","Type":"IssuesEvent","CreatedAt":"2018-03-16T23:50:18","Actor":"ryanbrandenburg","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1629","RelatedDescription":"Opened issue \"Flaky tests: TransportThatFallsbackCreatesNewConnection et al\" (#1629) at aspnet/SignalR","RelatedBody":"[This](http://aspnetci/viewLog.html?buildId=423387&buildTypeId=XPlat_Windows_Win2008r2_Universe) test and others sometimes fails with a message like:\r\n```\r\nSystem.TimeoutException : Operation in TransportThatFallsbackCreatesNewConnection timed out at C:\\BuildAgent\\work\\33bdfc1cae7b2a38\\modules\\SignalR\\test\\Microsoft.AspNetCore.SignalR.Tests\\EndToEndTests.cs:69\r\n   at System.Threading.Tasks.TaskExtensions.OrTimeout(Task task, TimeSpan timeout, String memberName, String filePath, Nullable`1 lineNumber)\r\n   at Microsoft.AspNetCore.SignalR.Tests.EndToEndTests.TransportThatFallsbackCreatesNewConnection() in C:\\BuildAgent\\work\\33bdfc1cae7b2a38\\modules\\SignalR\\test\\Microsoft.AspNetCore.SignalR.Tests\\EndToEndTests.cs:line 69\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\nThis particular subset of failures is being tracked in a larger list [here](http://aspnetci/httpAuth/app/rest/builds?locator=tag:timeout,sinceDate:201710010T000000-0001&fields=build(startDate,buildTypeId,status,branchName,webUrl,tags))."},{"Id":"7393577883","Type":"PullRequestEvent","CreatedAt":"2018-03-16T23:48:06","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1589","RelatedDescription":"Merged pull request \"Ignore writeasync failures when sending to multiple connections\" (#1589) at aspnet/SignalR","RelatedBody":"#1555 "}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7394012142","Type":"PullRequestEvent","CreatedAt":"2018-03-17T04:55:37","Actor":"dougbu","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7493","RelatedDescription":"Opened pull request \"Quick fix: Add test of #2890\" (#7493) at aspnet/Mvc","RelatedBody":"- tests added (ages ago) in aspnet/Mvc@a045324 no longer fail when `__` handling removed"},{"Id":"7393592166","Type":"PullRequestEvent","CreatedAt":"2018-03-16T23:54:32","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7492","RelatedDescription":"Merged pull request \"Remove FiltersWebSite\" (#7492) at aspnet/Mvc","RelatedBody":""},{"Id":"7393591801","Type":"PullRequestEvent","CreatedAt":"2018-03-16T23:54:21","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7492","RelatedDescription":"Opened pull request \"Remove FiltersWebSite\" (#7492) at aspnet/Mvc","RelatedBody":""},{"Id":"7393591432","Type":"PullRequestEvent","CreatedAt":"2018-03-16T23:54:11","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7432","RelatedDescription":"Merged pull request \"Remove FiltersWebSite\" (#7432) at aspnet/Mvc","RelatedBody":""},{"Id":"7393472818","Type":"PullRequestEvent","CreatedAt":"2018-03-16T23:05:19","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7491","RelatedDescription":"Opened pull request \"Stop building\\testing on netcoreapp2.1\" (#7491) at aspnet/Mvc","RelatedBody":""},{"Id":"7392865021","Type":"IssuesEvent","CreatedAt":"2018-03-16T20:17:01","Actor":"shubham1413","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7490","RelatedDescription":"Opened issue \" Deserializing Web Api parameter fails in case of large json\" (#7490) at aspnet/Mvc","RelatedBody":"I have a Asp.Net Core 2.0 Web API service that has a HTTP Post Method that contains a byte[] parameter which fails to get deserialized when larger JSON like 30 mb is sent as body content thus having null value. But for small json it's been able to deserialize properly into byte array.\r\n\r\nBasically what i am trying to do is i have to send byte array to Asp.Net Core 2.0 Web Api endpoint that will upload this payload as blob storage in azure. Below is the code for Api and the calling code to this Api\r\nNote here payload parameter is having null value:\r\n\r\n```\r\n public class MyBlobController : Controller\r\n        {\r\n\r\n    [HttpPost(\"UploadPayload/{containerName}/{blobName}\")]\r\n    public async Task<string> UploadPayload(FromBody] byte[] payload,string containerName, string blobName)\r\n\r\n       {\r\n\r\n        //code for uploading blob\r\n\r\n        }\r\n    }\r\n\r\n```\r\nCalling code for this end point\r\n```\r\nvar jsondata = JsonConvert.SerializeObject(payloadData);//payload is large byte array\r\n\r\n        HttpContent content = new StringContent(jsondata, Encoding.UTF8, \"application/json\");\r\n        //Instantiating the HttpClient. \r\n        {\r\n            var HttpClientInstance = new HttpClient();\r\n\r\n            HttpClientInstance.DefaultRequestHeaders.Clear();\r\n            HttpClientInstance.DefaultRequestHeaders.AcceptLanguage.Add(new StringWithQualityHeaderValue(\"nl-NL\"));\r\n            HttpClientInstance.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));\r\n\r\n        }\r\n        HttpResponseMessage apiResponse = null;\r\n        //Sending a post request to the Blob Api.\r\n        apiResponse = await HttpClientInstance.PostAsync(\"http://localhost:8999/api/MyBlob/UploadPayload/mycontainer/myblob\", content);\r\n````\r\nI have also gone through this link https://github.com/aspnet/Mvc/issues/6623 that tells us how to change the Maximum limit size of HTTP Post request i have also enabled that setting such that it is able to accept large request but still no luck with deserialization. Please suggest something that could be really useful to resolve this use case\r\n"},{"Id":"7392837188","Type":"IssuesEvent","CreatedAt":"2018-03-16T20:10:22","Actor":"mnmr","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7489","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#7489) at aspnet/Mvc","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7392607586","Type":"PullRequestEvent","CreatedAt":"2018-03-16T19:17:16","Actor":"rynowak","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7488","RelatedDescription":"Opened pull request \"Fix #4604 for good\" (#7488) at aspnet/Mvc","RelatedBody":"```\r\ninfo: Microsoft.AspNetCore.Mvc.Infrastructure.ObjectResultExecutor[1]\r\n      Executing ObjectResult, writing value of type '<>f__AnonymousType0'.\r\n```"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7393674155","Type":"IssuesEvent","CreatedAt":"2018-03-17T00:33:51","Actor":"snoopydo","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1688","RelatedDescription":"Opened issue \"Identity mismatch between Email and Username\" (#1688) at aspnet/Identity","RelatedBody":"When using Identity it generates views and methods that confuse Email and Username.\r\n\r\nThe register view and methods ask for an Email and Password, assigns Username the value of Email.\r\n\r\nThe login view asks for Email and Password, but uses the email as a Username, via call to _signInManager.PasswordSignInAsync(...) which takes a Username and Password.\r\n\r\nThe Account/Manage view allows you to change your Email.  If I change my email I can no longer login.  If I use my previous Email I can, the Account/Manage views shows my correctly changed email and a readonly Username with my original email used at signup.\r\n\r\nThis is with a new unmodified project generated via new project in visual studio selecting individual user accounts."},{"Id":"7392033339","Type":"PullRequestEvent","CreatedAt":"2018-03-16T17:18:10","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1687","RelatedDescription":"Merged pull request \"React to Razor Sdk changes\" (#1687) at aspnet/Identity","RelatedBody":"Assembly attributes are autogened by Razor Sdk and results in duplicates"},{"Id":"7391969405","Type":"IssuesEvent","CreatedAt":"2018-03-16T17:05:32","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1616","RelatedDescription":"Closed issue \"Replace SignIn with RefreshSignIn in UI \" (#1616) at aspnet/Identity","RelatedBody":"> Manage actions lose cookie info (persistent/external login claim) when they call SignInAsync instead of RefreshSignIn\r\n\r\nSee https://github.com/aspnet/Identity/pull/1615#issuecomment-363236876\r\n\r\ncc @HaoK "},{"Id":"7391967827","Type":"PullRequestEvent","CreatedAt":"2018-03-16T17:05:14","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1655","RelatedDescription":"Merged pull request \"Use RefreshSignInAsync\" (#1655) at aspnet/Identity","RelatedBody":"Addresses #1616 "},{"Id":"7391948010","Type":"PullRequestEvent","CreatedAt":"2018-03-16T17:01:17","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1687","RelatedDescription":"Opened pull request \"React to Razor Sdk changes\" (#1687) at aspnet/Identity","RelatedBody":"Assembly attributes are autogened by Razor Sdk and results in duplicates"},{"Id":"7387898737","Type":"PullRequestEvent","CreatedAt":"2018-03-15T23:24:58","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1686","RelatedDescription":"Merged pull request \"Add Test to diagnose CI issues\" (#1686) at aspnet/Identity","RelatedBody":""}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7392211586","Type":"IssuesEvent","CreatedAt":"2018-03-16T17:53:26","Actor":"ryanbrandenburg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2401","RelatedDescription":"Opened issue \"Flaky test: Sending100ContinueDoesNotStartResponse\" (#2401) at aspnet/KestrelHttpServer","RelatedBody":"This test failed [on the ci](http://aspnetci/viewLog.html?buildId=423210&buildTypeId=Lite_KestrelHttpServer).\r\n\r\n```\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ResponseTests.<>c.<Sending100ContinueDoesNotStartResponse>b__47_0(WriteContext w)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ResponseTests.<Sending100ContinueDoesNotStartResponse>d__47.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```\r\n\r\nFuture instances of this failure will appear in [this](http://aspnetci/httpAuth/app/rest/builds?locator=tag:KestrelNullRef,sinceDate:201710010T000000-0001&fields=build(startDate,buildTypeId,status,branchName,webUrl,tags)) list."},{"Id":"7392198490","Type":"PullRequestEvent","CreatedAt":"2018-03-16T17:50:49","Actor":"pranavkm","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2400","RelatedDescription":"Closed pull request \"Test ignore\" (#2400) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7392195025","Type":"PullRequestEvent","CreatedAt":"2018-03-16T17:50:06","Actor":"ryanbrandenburg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2396","RelatedDescription":"Merged pull request \"Create or update baselines to match 2.0\" (#2396) at aspnet/KestrelHttpServer","RelatedBody":null}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7393858651","Type":"PullRequestEvent","CreatedAt":"2018-03-17T02:41:28","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2180","RelatedDescription":"Opened pull request \"Show error if page directive is not at the top of file\" (#2180) at aspnet/Razor","RelatedBody":"aspnet/Mvc#6633\r\n\r\nOnce we know that an `@page` exists in the document, we can process the same document again with `ParseLeadingDirectives=true` and make sure if the `@page` exists in the resulting code document. If not, log an error."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7364725434","Type":"IssuesEvent","CreatedAt":"2018-03-12T10:19:58","Actor":"RehanSaeed","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Opened issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7307968614","Type":"IssuesEvent","CreatedAt":"2018-02-28T06:01:18","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file."},{"Id":"7307353364","Type":"IssuesEvent","CreatedAt":"2018-02-28T02:19:15","Actor":"rjamesnw","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Opened issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7373364495","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:04:24","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application tâ¦ https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":3,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":4,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 fâ¦ https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesdâ¦ https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null},{"Id":"968561906003791872","CreatedAt":"2018-02-27T19:02:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":6,"RawContent":null},{"Id":"968550190889267201","CreatedAt":"2018-02-27T18:15:34+00:00","UserScreenname":"aspnet","Text":"#ASPNET Core 2.1.0-preview1 now available https://t.co/loVh03KKfz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":70,"FavoriteCount":54,"RawContent":null},{"Id":"966009382377897985","CreatedAt":"2018-02-20T17:59:19+00:00","UserScreenname":"aspnet","Text":"Starting now! \n\nJoin the #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"965988674474188800","CreatedAt":"2018-02-20T16:37:01+00:00","UserScreenname":"aspnet","Text":"Catch the #ASPNET Community Standup today at 10 AM Pacific / 18:00 GMT with Javier C Nelson showing a preview of Raâ¦ https://t.co/Fg8NoQJtJp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":4,"RawContent":null},{"Id":"965964952442933249","CreatedAt":"2018-02-20T15:02:46+00:00","UserScreenname":"aspnet","Text":"Jeff is working with cognitive services and Bots today on stream... check it out! https://t.co/HVyIw0Wcgd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":9,"RawContent":null},{"Id":"963791622822612994","CreatedAt":"2018-02-14T15:06:43+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz this FRIDAY at 10am / 15:00 UTC for a free online workshop to get started with ASPNet Core.â¦ https://t.co/qtufFsbfmc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":16,"RawContent":null}]}},"RunOn":"2018-03-17T05:30:09.6096741Z","RunDurationInMilliseconds":8301}