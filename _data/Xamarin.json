{"Data":{"Blog":{"FeedItems":[{"Title":"Get Started with Free Xamarin Training on Microsoft Learn","PublishedOn":"2019-06-21T19:10:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Learn how to build cross-platform mobile applications with the new Xamarin.Forms content on Microsoft Learn. The new and completely free platform where you can earn points and badges, level up, and...","Href":"https://devblogs.microsoft.com/xamarin/microsoft-learn-free-xamarin-training/","RawContent":null},{"Title":"New Xamarin.Forms XAML IntelliSense in Visual Studio for Mac","PublishedOn":"2019-06-19T18:21:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Visual Studio 2019 for Mac version 8.2 is officially available as a preview. Now featuring significant improvements to the XAML editing experience for Xamarin developers. The Xamarin.Forms XAML...","Href":"https://devblogs.microsoft.com/xamarin/xaml-intellisense-vs4m-xamarin-forms/","RawContent":null},{"Title":"Automatic Android SDK Management","PublishedOn":"2019-06-17T20:24:08+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"As a mobile developer building apps for Android, there are many tools used under the hood to build, deploy, and debug your Android applications. We know this can be an intimidating process. So to...","Href":"https://devblogs.microsoft.com/xamarin/automatic-android-sdk-management/","RawContent":null},{"Title":"Xamarin Podcast: Xamarin.Forms 4 And So Much More!","PublishedOn":"2019-06-14T16:08:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Keeping up with the latest in .NET, C#, Xamarin, and Azure is easier than ever. Co-hosts Matt Soucoup and James Montemagno cover a range of topics relevant to Xamarin developers from designing mobile...","Href":"https://devblogs.microsoft.com/xamarin/xamarin-podcast-xamarin-forms-4/","RawContent":null},{"Title":"Grial UI Kit: Building Beautiful Xamarin.Forms Apps, Faster","PublishedOn":"2019-06-12T17:07:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Leonardo Viacava. Leo is co-founder and CTO of UXDivers, creators of Grial UI Kit and Gorilla Player. UXDivers specializes in designing and coding...","Href":"https://devblogs.microsoft.com/xamarin/grial-ui-kit-xamarin-forms/","RawContent":null},{"Title":"Join the Microsoft Team at Xamarin Developer Summit","PublishedOn":"2019-06-10T16:54:04+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"On July 11-12th, the community-run Xamarin Developer Summit is set to launch in Houston, Texas. The two-day conference is packed full of amazing Xamarin content, covering a wide range of mobile...","Href":"https://devblogs.microsoft.com/xamarin/xamarin-developer-summit/","RawContent":null},{"Title":"Use Maps to Display and Navigate Users with Xamarin.Essentials","PublishedOn":"2019-06-07T16:26:32+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"A common scenario for mobile apps is to help their users get to a specific location. This may be a restaurant, office, or the trailhead for the most amazing hike in the pacific northwest. We can...","Href":"https://devblogs.microsoft.com/xamarin/maps-navagation-xamarin-essentials/","RawContent":null},{"Title":"CheckBox with Xamarin.Forms 4.1.0 Pre-Release","PublishedOn":"2019-06-05T19:34:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Just a few weeks ago we shipped Xamarin.Forms 4.0, which introduced the new Shell navigation for quickly bootstrapping your applications. As well as image source unification to make it convenient to...","Href":"https://devblogs.microsoft.com/xamarin/checkbox-xamarin-forms-4-1-0-pre-release/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in June","PublishedOn":"2019-06-03T18:50:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Jumpstart your next mobile development projects by networking with your local community and getting the latest updates about Xamarin and .NET related technologies. Discover upcoming developer events...","Href":"https://devblogs.microsoft.com/xamarin/june-developer-events-xamarin-dotnet/","RawContent":null},{"Title":"Customer Showcase: BBVA â€“ Augmented Reality House Hunting","PublishedOn":"2019-05-31T16:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently launched a case study series with invited customers to explore their applications using various Microsoft technologies that address business needs. In this post, we look at Valora View, a...","Href":"https://devblogs.microsoft.com/xamarin/bbva-xamarin-customer-showcase/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9876327009","Type":"IssuesEvent","CreatedAt":"2019-06-23T18:59:35","Actor":"FANMixco","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3274","RelatedDescription":"Opened issue \"Binding library cannot find OnBindViewHolder(Object, int) on RecyclerViews.\" (#3274) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create a new Binding Library in VS2019.\r\n2. Add this aar file: https://github.com/mancj/MaterialSearchBar, it's compiled here: https://www.dropbox.com/sh/8h8cnwxolnqa4gy/AACrXm_YNUF5YOWt1sl3hLcEa?dl=0\r\n3. Add nuget: Xamarin.Android.Support.Compat\r\n4. Add nuget: Xamarin.Android.Support.v7.CardView\r\n5. Add nuget: Xamarin.Android.Support.v7.RecyclerView\r\n6. Compile.\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nCreate a new library.\r\n\r\n### Actual Behavior\r\nNot compiling.\r\n\r\n### Version Information\r\n\r\nVisual Studio Community 2019 for Mac\r\nVersion 8.1.1 (build 27)\r\nInstallation UUID: d85b7b4f-0680-4e8b-a12d-bb9e7121e332\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 5.6.0.25 (d16-0 / 50f75273)\r\n\r\n\tPackage version: 518010028\r\n\r\nMono Framework MDK\r\nRuntime:\r\n\tMono 5.18.1.28 (2018-08/223ea7ef92e) (64-bit)\r\n\tPackage version: 518010028\r\n\r\nNuGet\r\nVersion: 5.0.2.5988\r\n\r\n.NET Core\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.11\r\n\t2.1.9\r\n\t2.1.8\r\n\t2.1.7\r\n\t2.1.6\r\n\t2.1.2\r\n\t2.1.1\r\n\t2.0.5\r\n\t2.0.0\r\n\t1.1.2\r\n\t1.0.5\r\nSDK: /usr/local/share/dotnet/sdk/2.1.700/Sdks\r\nSDK Versions:\r\n\t2.1.700\r\n\t2.1.505\r\n\t2.1.504\r\n\t2.1.503\r\n\t2.1.500\r\n\t2.1.302\r\n\t2.1.301\r\n\t2.1.4\r\n\t2.0.0\r\n\t1.0.4\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.18.1/lib/mono/msbuild/Current/bin/Sdks\r\n\r\nXamarin.Profiler\r\nVersion: 1.6.10\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\nUpdater\r\nVersion: 11\r\n\r\nApple Developer Tools\r\nXcode 10.2.1 (14490.122)\r\nBuild 10E1001\r\n\r\nXamarin.Mac\r\nVersion: 5.10.0.157 (Visual Studio Community)\r\nHash: 6bd94753\r\nBranch: d16-1\r\nBuild date: 2019-06-12 17:28:48-0400\r\n\r\nXamarin.iOS\r\nVersion: 12.10.0.157 (Visual Studio Community)\r\nHash: 6bd94753\r\nBranch: d16-1\r\nBuild date: 2019-06-12 17:28:47-0400\r\n\r\nXamarin.Android\r\nVersion: 9.3.0.23 (Visual Studio Community)\r\nCommit: HEAD/d0b48056f\r\nAndroid SDK: /Users/fanmixco/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 29.0.1\r\nSDK Build Tools Version: 27.0.3\r\n\r\nBuild Information: \r\nMono: mono/mono/2018-08@3a07bd426d3\r\nJava.Interop: xamarin/java.interop/d16-1@5ddc3e3\r\nLibZipSharp: grendello/LibZipSharp/d16-1@44de300\r\nLibZip: nih-at/libzip/rel-1-5-1@b95cf3f\r\nProGuard: xamarin/proguard/master@905836d\r\nSQLite: xamarin/sqlite/3.27.1@8212a2d\r\nXamarin.Android Tools: xamarin/xamarin-android-tools/d16-1@acabd26\r\n\r\nMicrosoft Mobile OpenJDK\r\nJava SDK: /Users/fanmixco/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.25\r\n1.8.0-25\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\nAndroid Device Manager\r\nVersion: 1.2.0.44\r\nHash: aac645b\r\nBranch: remotes/origin/d16-1\r\nBuild date: 2019-05-29 19:55:24 UTC\r\n\r\nXamarin Designer\r\nVersion: 16.1.0.467\r\nHash: f1657e133\r\nBranch: remotes/origin/d16-1-new-document-model\r\nBuild date: 2019-06-18 21:57:42 UTC\r\n\r\nXamarin Inspector\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\nBuild Information\r\nRelease ID: 801010027\r\nGit revision: ce34f6838e6457d0e7d5991a1a693415e6fcae07\r\nBuild date: 2019-06-19 19:52:58+00\r\nBuild branch: release-8.1\r\nXamarin extensions: 5104b76623e0df8e5f763f87d170279c0b788e89\r\n\r\nOperating System\r\nMac OS X 10.14.5\r\nDarwin 18.6.0 Darwin Kernel Version 18.6.0\r\n    Thu Apr 25 23:16:27 PDT 2019\r\n    root:xnu-4903.261.4~2/RELEASE_X86_64 x86_64\r\n\r\n\r\n### Log File\r\n\r\n> Severity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\n> Error\tCS0115\t'SuggestionsAdapter.OnBindViewHolder(Object, int)': no suitable method found to override\tXamarin-MaterialSearchBar\tC:\\Users\\feder\\source\\repos\\Xamarin-MaterialSearchBar\\Xamarin-MaterialSearchBar\\obj\\Release\\generated\\src\\Com.Mancj.Materialsearchbar.Adapter.SuggestionsAdapter.cs\t666\tActive"},{"Id":"9872238369","Type":"PullRequestEvent","CreatedAt":"2019-06-22T02:13:54","Actor":"brendanzagaeski","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3273","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Restore ConvertResourcesCases skipping\" (#3273) at xamarin/xamarin-android","RelatedBody":"[02c07ed6][0] introduced a refinement on `<ConvertResourcesCases/>` to\r\nallow it to skip certain \"well-known\" assemblies that don't need\r\nprocessing.  It used an MSBuild item group to define the list of\r\nwell-known assemblies.  Each item in the group was a name of a\r\nwell-known assembly, without any file extension.\r\n\r\n02c07ed6 also included an automated test that checked the build output\r\nfor each of the well-known assemblies that should be skipped when\r\nbuilding a test project.  But one of the variable names in the test code\r\nwas unintentionally switched around, so the test was actually skipping\r\nover that check for the expected assemblies.\r\n\r\nLater, [b255da27][1] adapted the assembly skipping mechanism slightly to\r\nuse custom metadata to define the list of well-known assemblies.  This\r\nwas a step toward toward using custom metadata as a more general\r\ntechnique for various other scenarios too.\r\n\r\nJust by chance, there was a tiny missing change in b255da27, which meant\r\nthat the assembly skipping behavior got unintentionally disabled.  The\r\ntrouble was that the original item group in 02c07ed6 had been using just\r\nthe name of the assembly with no file extension, while the new commit\r\nused the full path to the assembly, including the file extension, and\r\nthere were a couple lines in `ResolveLibraryProjectImports.Extract()`\r\nthat were still searching through the list of \"well-known\" assemblies\r\nusing just the name rather than the full path.\r\n\r\nSeparately, starting in version 28.0.0, the Xamarin.Android.Support.v4\r\nNuGet package started to include a `monoandroid90/` target framework\r\ndirectory.  The `__AndroidLibraryProjects__.zip` embedded resource in\r\nthe `monoandroid90/Xamarin.Android.Support.v4.dll` assembly does *not*\r\ninclude a `res/` directory, so when the `$(TargetFrameworkVersion)` is\r\n`v9.0`, the Xamarin.Android.Support.v4 assembly is no longer passed to\r\n`<ConvertResourcesCases/>` at all.  Accordingly, that assembly name can\r\nnow be removed from the list of expected skipped assemblies in the\r\n`SkipConvertResourcesCases` test.\r\n\r\nI ran the updated `SkipConvertResourcesCases` test locally, first\r\n*without* the change in `<ResolveLibraryProjectImports/>` to confirm\r\nthat it failed, and then also *with* the change to verify that it\r\nsucceeded.\r\n\r\nI also checked that these changes successfully restored the performance\r\ngains from b255da27.\r\n\r\nResults with `$(AndroidUseAapt2)` enabled:\r\n\r\n\tBefore:\r\n\t3359 ms  ConvertResourcesCases                      2 calls\r\n\t2562 ms  ResolveLibraryProjectImports               1 calls\r\n\r\n\tAfter:\r\n\t  62 ms  ConvertResourcesCases                      2 calls\r\n\t2500 ms  ResolveLibraryProjectImports               1 calls\r\n\r\nResults with `$(AndroidUseAapt2)` disabled:\r\n\r\n\tBefore:\r\n\t3237 ms  ConvertResourcesCases                      1 calls\r\n\t3234 ms  ResolveLibraryProjectImports               1 calls\r\n\r\n\tAfter:\r\n\t  94 ms  ConvertResourcesCases                      1 calls\r\n\t2641 ms  ResolveLibraryProjectImports               1 calls\r\n\r\nThis was the Xamarin.Forms.Performance.Integration.Droid project in this\r\nrepo, using an initial clean build.\r\n\r\n[0]: https://github.com/xamarin/xamarin-android/commit/02c07ed6d9e0a2559d9948750ea798ff56db28e4\r\n[1]: https://github.com/xamarin/xamarin-android/commit/5f27d0cac299cf771cf4e815c4901c7ce768ad7c"},{"Id":"9871685848","Type":"IssuesEvent","CreatedAt":"2019-06-21T22:16:48","Actor":"ndastur","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3272","RelatedDescription":"Opened issue \"R8 compiler fails if custom proguard config edited in VS 2019\" (#3272) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Open custom proguard config file in VS 2019 editor\r\n2. Edit file and save\r\n3. R8 will fail with error on compile due to a BOM character being added to the beginning of the file.\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nr8 Compiles\r\n\r\n### Actual Behavior\r\nr8 Fails to compile\r\n\r\n### Version Information\r\n\r\nVisual Studio 2019 for Mac 8.1.1\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"9871263308","Type":"PullRequestEvent","CreatedAt":"2019-06-21T20:42:53","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3267","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Fix InstantRun Building\" (#3267) at xamarin/xamarin-android","RelatedBody":"Commit 901dba8 made some changes to the way\r\n`_DefineBuildTargetAbis` works. However there\r\nwas a slight problem with the implemetation.\r\n\r\nIn our commercial debug system we will automatically\r\nadd the abi of the target device to the `_BuildTargetAbis`\r\nItemGroup. This happens quite early on in the build process.\r\nHowever the end result of this is that we have duplicate\r\nitems in the `_BuildTargetAbis` ItemGroup.\r\n\r\nThis then causes problems when we try to build the\r\n`libxamarin-app.so`. Because it uses that ItemGroup to\r\ndrive the creation and inclusion of files on disk. If\r\nwe have duplicates in the ItemGroup we end up with\r\nduplicates in the file list passed to the native linker.\r\n\r\n\ti686-linux-android-ld --unresolved-symbols=ignore-in-shared-libs \\\r\n\t\t--export-dynamic -soname libxamarin-app.so -z relro \\\r\n\t\t-z noexecstack --enable-new-dtags --eh-frame-hdr -shared \\\r\n\t\t--build-id --warn-shared-textrel --fatal-warnings \\\r\n\t\t-o obj/Debug/app_shared_libraries/x86/libxamarin-app.so \\\r\n\t\t-m elf_i386 obj/Debug/android/typemap.jm.x86.o \\\r\n\t\tobj/Debug/android/typemap.jm.x86.o \\\r\n\t\tobj/Debug/android/typemap.mj.x86.o \\\r\n\t\tobj/Debug/android/typemap.mj.x86.o \\\r\n\t\tobj/Debug/android/environment.x86.o \\\r\n\t\tobj/Debug/android/environment.x86.o\r\n\r\nnote the duplicates of the `x86.o` files. These result in the\r\nfollowing error\r\n\r\n\ti686-linux-android-ld: error: obj/Debug/android/typemap.jm.x86.o: multiple definition of 'jm_typemap_header'\r\n\r\nIt turns out the commit 901dba8 left off a Condition which\r\nwill only populate the `_BuildTargetAbis` if it is empty\r\nalready. This PR fixes that."},{"Id":"9871091220","Type":"PullRequestEvent","CreatedAt":"2019-06-21T20:09:22","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3271","RelatedDescription":"Opened pull request \"[Mono.Android] set JAVA_HOME when running dx\" (#3271) at xamarin/xamarin-android","RelatedBody":"Continuing to build  on a fresh Windows machine after b98175c1, I hit\r\na new issue:\r\n\r\n    build-tools\\scripts\\JavaCallableWrappers.targets(50,5): error MSB3073:\r\n      The command \"\"C:\\Users\\myuser\\android-toolchain\\sdk\\build-tools\\29.0.0\\dx\" --dex --no-strict --output=\"C:\\src\\xamarin-android\\bin\\Debug\\lib\\xamarin.android\\xbuild-frameworks\\MonoAndroid\\v9.0\\mono.android.dex\" \"C:\\src\\xamarin-android\\bin\\Debug\\lib\\xamarin.android\\xbuild-frameworks\\MonoAndroid\\v9.0\\mono.android.jar\"\" exited with code -1.\r\n    EXEC No suitable Java found. In order to properly use the Android Developer\r\n    Tools, you need a suitable version of Java JDK installed on your system.\r\n    We recommend that you install the JDK version of JavaSE, available here:\r\n      http://www.oracle.com/technetwork/java/javase/downloads\r\n    If you already have Java installed, you can define the JAVA_HOME environment\r\n    variable in Control Panel / System / Avanced System Settings to point to the\r\n    JDK folder.\r\n    You can find the complete Android SDK requirements here:\r\n      http://developer.android.com/sdk/requirements.html\r\n\r\nThis machine does not have any Oracle JDKs installed, so it is only\r\nusing the Coretto JDK installed in:\r\n\r\n    %userprofile%\\android-toolchain\\jdk\r\n\r\nFor this to work properly, we need to set `JAVA_HOME` during this\r\n`<Exec/>` call.\r\n\r\nAfter doing this, everything works properly."},{"Id":"9871083892","Type":"PullRequestEvent","CreatedAt":"2019-06-21T20:07:57","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/3270","RelatedDescription":"Opened pull request \"Update NDK to r20\" (#3270) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/android-ndk/ndk/wiki/Changelog-r20\r\nContext: https://android-developers.googleblog.com/2017/12/improving-app-security-and-performance.html\r\n\r\nGoogle released NDK r20 recently with the following changes:\r\n\r\n  - Updated Clang to r346389c.\r\n  - Updated libc++ to r350972.\r\n  - Add Android Q Beta 1 APIs:\r\n    - MIDI (<amidi/AMidi.h>).\r\n    - Binder.\r\n    - Extensions to several APIs from previous releases\r\n\r\nAlso, this release brings [LLD][0], the new (fast!) linker from the LLVM project\r\nwhich will become the default and only linker in the NDK in the future, so soon\r\nwe will need to start testing our software with it.\r\n\r\n[0]: https://lld.llvm.org/"},{"Id":"9869770679","Type":"IssuesEvent","CreatedAt":"2019-06-21T16:15:34","Actor":"kdubau","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3269","RelatedDescription":"Opened issue \"msbuild /t:Install fails if adb server isn't running\" (#3269) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Make sure you have a device connected and trusted\r\n3. Make sure Visual Studio is _closed_\r\n4. Make sure adb server is _not_ running, `adb kill-server`, or end it from task manger\r\n2. Unzip the attached project Wat.zip\r\n5. Run `msbuild /t:Restore C:\\path\\to\\Wat.csproj`\r\n4. Run `msbuild /t:Install C:\\path\\to\\Wat.csproj`\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n[Wat.zip](https://github.com/xamarin/xamarin-android/files/3315230/Wat.zip)\r\n\r\n### Expected Behavior\r\nIt should start adb and use the connected USB device to install the app.\r\n\r\n### Actual Behavior\r\nIt fails with the error:\r\n```\r\n\"C:\\Users\\kywhi\\Downloads\\Wat\\Wat\\Wat\\Wat.csproj\" (Install target) (1) ->\r\n(_Upload target) ->\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.Debugging.\r\ntargets(624,2): error XA0010: adb is not running. System.AggregateException: One or more errors occurred. ---> System.A\r\nggregateException: One or more errors occurred. ---> System.Net.Sockets.SocketException: No connection could be made be\r\ncause the target machine actively refused it 127.0.0.1:5037 [C:\\Users\\kywhi\\Downloads\\Wat\\Wat\\Wat\\Wat.csproj]\r\n```\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\nMicrosoft Visual Studio Enterprise 2019 Int Preview\r\nVersion 16.2.0 Preview 4.0 [29020.217.d16.2stg]\r\nVisualStudio.16.IntPreview/16.2.0-pre.4.0+29020.217.d16.2stg\r\n\r\nXamarin.Android SDK   9.4.0.34 (d16-2/7cce305)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n    Mono: mono/mono/2019-02@c6edaa62f94\r\n    Java.Interop: xamarin/java.interop/d16-2@b2b2610\r\n    LibZipSharp: grendello/LibZipSharp/d16-2@caa0c74\r\n    LibZip: nih-at/libzip/rel-1-5-1@b95cf3f\r\n    ProGuard: xamarin/proguard/master@905836d\r\n    SQLite: xamarin/sqlite/3.27.1@8212a2d\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/master@4f717b6\r\n\r\n### Log File\r\n\r\n[binlog.zip](https://github.com/xamarin/xamarin-android/files/3315249/binlog.zip)\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"9868780985","Type":"IssuesEvent","CreatedAt":"2019-06-21T13:56:50","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/3268","RelatedDescription":"Opened issue \"[spec] take advantage of aapt2 command-line options\" (#3268) at xamarin/xamarin-android","RelatedBody":"I was reviewing build performance, and the time we spend running aapt/aapt2.\r\n\r\nI noticed some command-line arguments of aapt2 that look like they could be useful:\r\nhttps://developer.android.com/studio/command-line/aapt2\r\n\r\n## aapt2 compile --no-crunch\r\n```\r\nDisables PNG processing.\r\n\r\nUse this option if you have already processed the PNG files, or if\r\nyou are creating debug builds that do not require file size reduction.\r\nEnabling this option results in a faster execution, but increases the\r\noutput file size.\r\n```\r\nMy thought was not to implement what we have for `$(AndroidExplicitCrunch)` + aapt(1), but to pass this for debug builds.\r\n\r\nSo I tried comparing a build with passing `/p:AndroidAapt2CompileExtraArgs=--no-crunch`:\r\n```\r\nBefore:\r\n5675 ms  Aapt2Compile                               2 calls\r\nAfter:\r\n4161 ms  Aapt2Compile                               2 calls\r\n```\r\nLogs: [HelloForms.zip](https://github.com/xamarin/xamarin-android/files/3314739/HelloForms.zip)\r\n\r\nThis was a \"Hello World\" Xamarin.Forms app. \r\n\r\nIf we see benefits with this app, I imagine we'd see even better with apps with lots of PNGs.\r\n\r\n### Implementation\r\n\r\nAdd a new property `$(AndroidAapt2NoCrunch)` that defaults to true for debug builds and false for release builds. If it is not blank, we will use what developers have set.\r\n\r\nWe can use `$(AndroidIncludeDebugSymbols)` to decide if it is a debug build or not, as we already do for d8: https://github.com/xamarin/xamarin-android/blob/8e2c93938b74506f204ea35e6a144342b8254fa6/src/Xamarin.Android.Build.Tasks/Xamarin.Android.D8.targets#L116\r\n\r\n## aapt2 compile --legacy\r\n\r\n```\r\nTreats errors that are permissible when using earlier versions of AAPT\r\nas warnings.\r\n\r\nThis flag should be used for unexpected compile time errors. To resolve\r\nknown behavior changes that you might get while using AAPT2.\r\n```\r\n[Behavior changes in AAPT2](https://developer.android.com/studio/command-line/aapt2#aapt2_changes)\r\n\r\n### Implementation\r\n\r\nWe don't need to use this _yet_, but when we phase out aapt(1) support.\r\n\r\nIf we removed all `<Aapt/>` calls, we should keep the `$(AndroidUseAapt2)` property that defaults to true. If set to `false`, it would pass `--legacy` to `<Aapt2Compile/>`."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9877529247","Type":"IssuesEvent","CreatedAt":"2019-06-24T04:02:46","Actor":"MarMarIV","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6638","RelatedDescription":"Opened issue \"[Bug] iOS - ListView cell height\" (#6638) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nHi, i have a problem with cell height on iOS with using DataTemplateSelector on ListView. Sometimes happend, the cell height is not calculated exactly (in screenshot)\r\n\r\n### Steps to Reproduce\r\n\r\n1. DataTemplateSelector for use diferent layout\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.4.0.1029999\r\n- IDE: VS2019 16.1.2 \r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  12.2\r\n- Affected Devices:\r\n  iPhone SE\r\n\r\n### Screenshots\r\n\r\n![8104fd3b-c4af-4cc8-bd04-963779459d9a](https://user-images.githubusercontent.com/10964247/59990836-132ae980-9645-11e9-95e3-196dd02c87f6.png)\r\n"},{"Id":"9877286820","Type":"IssuesEvent","CreatedAt":"2019-06-24T02:45:11","Actor":"CodeSwimBikeRunner","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6637","RelatedDescription":"Opened issue \"[Enhancement] Support HTML\" (#6637) at xamarin/Xamarin.Forms","RelatedBody":"## Summary\r\nThis product is so close to becoming the absolute best in the business. Allow support for HTML, heck, go to HTML fully, no one really wants xaml. You guys had to have researched how much adoption you would receive with going to HTML or allowing HTML.\r\n\r\n## Intended Use Case\r\nFor the purpose of having a better/easier to manage ui.\r\n"},{"Id":"9876689898","Type":"PullRequestEvent","CreatedAt":"2019-06-23T22:12:15","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/6636","RelatedDescription":"Opened pull request \"[iOS] Clean up Platform on PlatformRenderer disposal\" (#6636) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nNative Forms gives the user a `PlatformRenderer` (as a `UIViewController`) to use for embedding a Forms `Page`. If the user wants to free the resources used by the embedded `Page`, they currently need to call `Dispose` on the `Platform` property of the `PlatformRenderer`; calling `Dispose` on the `PlatformRenderer` itself will not free up the resources for garbage collection. This is neither intuitive nor documented.\r\n\r\nThese changes arrange the cleanup so that calling `Dispose` on either object will clean up all the necessary resources.\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #4671\r\n\r\n### API Changes ###\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n\r\n- iOS\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests \r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"9876504563","Type":"IssuesEvent","CreatedAt":"2019-06-23T20:30:55","Actor":"andreinitescu","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6635","RelatedDescription":"Opened issue \"[Bug] Template applied several times\" (#6635) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nI have a `MyViewA` derived from `TemplatedView` and `MyViewB` derived from `MyViewA`.\r\nThe `ControlTemplate` of `MyViewB` is set to a `MyLabel` derived from `Label`. The c-tor of `MyLabel` is called two times!\r\n\r\nWhile trying to debug the root cause of the issue, I noticed that the \r\n`TemplateUtilities:OnControlTemplateChanged(BindableObject bindable, object oldValue, object newValue)` is called 3 times for `bindable` parameter of type `MyViewB`:\r\n\r\noldValue: null, newValue: ControlTemplate instance (this is when `MyLabel` is created 1st time)\r\noldValue: ControlTemplate instance, newValue: null\r\noldValue: null, newValue: ControlTemplate instance (this is when `MyLabel` is created 2nd time)\r\n\r\nIt looks to me like the ControlTemplate is removed and set back.\r\n\r\nAlso, if `MyViewB` derives from `TemplatedView` instead of deriving from `MyViewA` it works correctly! `MyLabel` is only entered once! So apparently something is related with the hierarchy and implicit style.\r\n\r\nThis is an important issue which can greatly affect performance of any app using custom controls.\r\n\r\n### Steps to Reproduce\r\n\r\n```\r\n    class MyViewA : TemplatedView\r\n    {\r\n    }\r\n\r\n    class MyViewB : MyViewA\r\n    {\r\n    }\r\n\r\n    class MyLabel : Label\r\n    {\r\n        static int _iCount;\r\n\r\n        public MyLabel()\r\n        {\r\n            ++_iCount;\r\n            Text = $\"Created {_iCount} times\";\r\n        }\r\n    }\r\n```\r\n\r\n```\r\n   <Application.Resources>\r\n        <ResourceDictionary>\r\n            <Style TargetType=\"app:MyViewA\">\r\n                <Style.Setters>\r\n                    <Setter Property=\"ControlTemplate\">\r\n                        <ControlTemplate>\r\n                            <StackLayout />\r\n                        </ControlTemplate>\r\n                    </Setter>\r\n                </Style.Setters>\r\n            </Style>\r\n\r\n            <Style TargetType=\"app:MyViewB\">\r\n                <Style.Setters>\r\n                    <Setter Property=\"ControlTemplate\">\r\n                        <ControlTemplate>\r\n                            <app:MyLabel />\r\n                        </ControlTemplate>\r\n                    </Setter>\r\n                </Style.Setters>\r\n            </Style>\r\n        </ResourceDictionary>\r\n    </Application.Resources>\r\n```\r\n\r\n\r\n### Expected Behavior\r\n\r\n### Actual Behavior\r\n\r\nThe c-tor of `MyLabel` should be called once.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: I tried with XF code compiled from master\r\n- Last known good version: I don't know\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android: 9.0 <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n[TemplateIssueApp.zip](https://github.com/xamarin/Xamarin.Forms/files/3318525/TemplateIssueApp.zip)\r\n"},{"Id":"9876221837","Type":"IssuesEvent","CreatedAt":"2019-06-23T18:03:40","Actor":"pauldipietro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6633","RelatedDescription":"Closed issue \"Live / Hot Reload\" (#6633) at xamarin/Xamarin.Forms","RelatedBody":"Are there any **\"SHORT TERM\"** plans to implement a live reload (aka hot reload) feature for Xamarin.Forms that is comparable to what Flutter or React Native does? Including reloading of both Xaml and C# code of course (just xaml would not be sufficient). Long development cycle is a major problem for mobile application development and if this is not in your short term roadmap , it will certainly affect my decision of choosing this platform.\r\n\r\nP.S. Is there a place where current/potential users of your platform can vote on feature requests? It might help you greatly in guiding your efforts towards what the community expects from you."},{"Id":"9875891533","Type":"PullRequestEvent","CreatedAt":"2019-06-23T15:23:36","Actor":"adrianknight89","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/6634","RelatedDescription":"Opened pull request \"[iOS] Make ShouldChangeText virtual\" (#6634) at xamarin/Xamarin.Forms","RelatedBody":"I have a need to intercept Editor keys on iOS and selectively ignore some like the Return key. The current implementation of `ShouldChangeText` is not open for runtime polymorphism. This change fixes that."},{"Id":"9875767872","Type":"IssuesEvent","CreatedAt":"2019-06-23T14:28:01","Actor":"john-larson","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6633","RelatedDescription":"Opened issue \"Live / Hot Reload\" (#6633) at xamarin/Xamarin.Forms","RelatedBody":"Are there any **\"SHORT TERM\"** plans to implement a live / hot reload feature for Xamarin.Forms that is comparable to what Flutter or React Native does? Including reloading of both Xaml and C# code of course (just xaml would not be sufficient). Long development cycle is a major problem for mobile application development and if this is not in your short term roadmap , it will certainly affect my decision of choosing this platform.\r\n\r\nP.S. Is there a place where current/potential users of your platform can vote on feature requests? It might help you greatly in guiding your efforts towards what the community expects from you."},{"Id":"9875648275","Type":"IssuesEvent","CreatedAt":"2019-06-23T13:33:18","Actor":"TechWatching","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/6632","RelatedDescription":"Opened issue \"[Bug] Icon not correctly centered with text when using FontImageSource\" (#6632) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nIn a button, icon is not correctly centered with the text.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Add a button to a page with a text and an icon using FontImageSource\r\n2. Set ContentLayout property of  the button to \"Left,0\"\r\n3. Launch the app an go to the page\r\n\r\n### Expected Behavior\r\n\r\nIcon and text are centered  in the button, the icon appears just on the left of the text without space between them.\r\n\r\n### Actual Behavior\r\n\r\nText is centered in the button but the icon is not, there is a lot of space between text and button.\r\nIt seems that ContentLayout property is not taken into account.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin Forms 4.1\r\n- IDE: VS 2019\r\n- Platform Target Frameworks: Only tested on Android\r\n  - Android: 9.0 \r\n- Nuget Packages: Nuget from the default Shell templates\r\n- Affected Devices: All devices \r\n\r\n### Screenshots\r\n![FontImageSource_Issue](https://user-images.githubusercontent.com/15186176/59976982-03bb8a00-95cc-11e9-9db3-7fc9e6a3af51.png)\r\n\r\nThe button \"SomeText\" on the screenshot shows the icon not correctly centered.\r\n\r\n### Reproduction Link\r\nGithub repo : https://github.com/TechWatching/FontImageSourceIssue\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9877465903","Type":"IssuesEvent","CreatedAt":"2019-06-24T03:42:11","Actor":"zjli-2019","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/6410","RelatedDescription":"Opened issue \"Not a good practice to access AudioQueueBuffer.AudioData by Marshal.ReadIntPtr\" (#6410) at xamarin/xamarin-macios","RelatedBody":"I am working on iOS audio. After struggling with IntPtr-s, which might be a AudioQueueBuffer*,\r\nor pointing to raw samples, I finally managed to make things works. \r\n\r\nBut, I find below code seems not a good practice.\r\n\r\nhttps://github.com/xamarin/xamarin-macios/blob/e45c3ba794e25c4ecb1c076678b733746ca184e4/src/AudioToolbox/AudioQueue.cs#L499\r\n\r\n### Steps to Reproduce\r\n\r\nCheck the source code of AudioQueue.FillAudioData(...).\r\n\r\n```c#\r\npublic static void FillAudioData (IntPtr audioQueueBuffer, int offset, IntPtr source, int sourceOffset, nint size)\r\n{\r\n    // Here, location of field AudioData is almost *hard-coded*\r\n    IntPtr target = Marshal.ReadIntPtr (audioQueueBuffer, IntPtr.Size);\r\n    unsafe {\r\n        byte *targetp = (byte *) target;\r\n        byte *sourcep = (byte *) source;\r\n        Runtime.memcpy (targetp + offset, sourcep + sourceOffset, size);\r\n    }\r\n}\r\n```\r\n### Expected Behavior\r\n\r\n1. Use AudioQueueBuffer.AudioData;\r\n2. Use AudioQueueBuffer.CopyToAudioData(IntPtr source, int size).\r\n\r\n### Actual Behavior\r\n\r\nThe implementation seems not a good one.\r\n\r\n### Environment\r\n\r\nN/A\r\n\r\n### Build Logs\r\n\r\nN/A\r\n\r\n### Example Project (If Possible)\r\n\r\nN/A"},{"Id":"9875595822","Type":"IssuesEvent","CreatedAt":"2019-06-23T13:07:56","Actor":"joconte","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/6409","RelatedDescription":"Opened issue \"[WIKI] both subscribe and archives links are broken\" (#6409) at xamarin/xamarin-macios","RelatedBody":"![image](https://user-images.githubusercontent.com/41507018/59976681-3ebbbe80-95c8-11e9-95ab-645dc9f675b4.png)\r\n\r\n Both subscribe and archives links are broken :\r\n\r\n<img width=\"1023\" alt=\"image\" src=\"https://user-images.githubusercontent.com/41507018/59976696-70348a00-95c8-11e9-801c-8e93a2ac0b62.png\">\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1142066359947407362","CreatedAt":"2019-06-21T13:46:53+00:00","UserScreenname":"xamarinhq","Text":"Join the Xamarin team at this years largest #Xamarin conference, the Xamarin Developer Summit! July 11-12 in Houstoâ€¦ https://t.co/zcg70tbgE9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":36,"FavoriteCount":16,"RawContent":null},{"Id":"1141695710716469249","CreatedAt":"2019-06-20T13:14:03+00:00","UserScreenname":"xamarinhq","Text":"Thanks to your feedback, #VS4Mac 8.2 has some really great improvements to the XAML editing experience; including iâ€¦ https://t.co/vv0DVw9957","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":35,"FavoriteCount":8,"RawContent":null},{"Id":"1141064668477345794","CreatedAt":"2019-06-18T19:26:31+00:00","UserScreenname":"xamarinhq","Text":"On this episode of the #XamarinShow, @JamesMontemagno and #MSMVP @DanJSiegel show us a super-cool feature of Prismâ€¦ https://t.co/GLEhnDlQjp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":38,"FavoriteCount":15,"RawContent":null},{"Id":"1140735760875872256","CreatedAt":"2019-06-17T21:39:33+00:00","UserScreenname":"xamarinhq","Text":"We want to make sure youâ€™re using the latest tooling. The new and improved Automatic Android SDK Management tool isâ€¦ https://t.co/H0CSaxzj9o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":29,"RawContent":null},{"Id":"1140660631273652224","CreatedAt":"2019-06-17T16:41:01+00:00","UserScreenname":"xamarinhq","Text":"On the latest Xamarin.Essential API of the week show, we take a look at the File System Helpers API which containsâ€¦ https://t.co/GOGKCwXu6S","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":33,"FavoriteCount":11,"RawContent":null},{"Id":"1139589442732285953","CreatedAt":"2019-06-14T17:44:30+00:00","UserScreenname":"xamarinhq","Text":"Keeping up w/the latest in #dotNET, C#, &amp; #Xamarin is easier than ever. \nThis weekâ€™s #XamarinPodcast includes:\n- hiâ€¦ https://t.co/FDDO27QHDh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":32,"FavoriteCount":11,"RawContent":null},{"Id":"1138875870553300995","CreatedAt":"2019-06-12T18:29:01+00:00","UserScreenname":"xamarinhq","Text":"We make it simple for .NET developers to build beautiful cross-platform apps, fast.\nTake a look at how Grial UI Kitâ€¦ https://t.co/vceU8u475R","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":107,"FavoriteCount":48,"RawContent":null},{"Id":"1138511096380309504","CreatedAt":"2019-06-11T18:19:32+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @chewamanda, App Center Program Manager, shows us the latest features in App Centerâ€¦ https://t.co/VHxAknaumJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":28,"FavoriteCount":17,"RawContent":null},{"Id":"1138151096067792898","CreatedAt":"2019-06-10T18:29:01+00:00","UserScreenname":"xamarinhq","Text":"Join us at Xamarin Developer Summit - July 11-12. With 35+ sessions, there is something for everyone:\n- Mobile DevOâ€¦ https://t.co/Ez5mDpM1Az","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":84,"FavoriteCount":35,"RawContent":null},{"Id":"1137049335273840640","CreatedAt":"2019-06-07T17:31:01+00:00","UserScreenname":"xamarinhq","Text":"Our cross-platform API library enables any mobile app that uses the Maps API to launch a map w/ a specific locationâ€¦ https://t.co/BWS4qeqtyU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":87,"FavoriteCount":34,"RawContent":null},{"Id":"1136679096954449921","CreatedAt":"2019-06-06T16:59:49+00:00","UserScreenname":"xamarinhq","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA from the #Xamarin team https://t.co/Umwxz8RtPj","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":9,"FavoriteCount":5,"RawContent":null},{"Id":"1136666060189573120","CreatedAt":"2019-06-06T16:08:01+00:00","UserScreenname":"xamarinhq","Text":"On this week's Xamarin.Essential API of the week, we take a look at the Compass API; enabling you to monitor the deâ€¦ https://t.co/6Iq1tNqo0B","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":46,"FavoriteCount":13,"RawContent":null},{"Id":"1136362715805552641","CreatedAt":"2019-06-05T20:02:38+00:00","UserScreenname":"xamarinhq","Text":"Now available... the pre-release version of Xamarin.Forms 4.1. And we're happy to say that CheckBox &amp; improved textâ€¦ https://t.co/BGmdIAVxAO","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":155,"FavoriteCount":68,"RawContent":null},{"Id":"1135657873072148482","CreatedAt":"2019-06-03T21:21:51+00:00","UserScreenname":"xamarinhq","Text":"Jumpstart your next mobile dev projects by networking w/ your local community &amp; getting the latest updates aboutâ€¦ https://t.co/39JBottYZu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":18,"RawContent":null},{"Id":"1134529085961621504","CreatedAt":"2019-05-31T18:36:27+00:00","UserScreenname":"xamarinhq","Text":"We're starting a new case study series. Today, we look at Valora View, a mobile app created by BBVA to help customeâ€¦ https://t.co/Q0HeoB3chG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":69,"FavoriteCount":22,"RawContent":null},{"Id":"1134188986229035010","CreatedAt":"2019-05-30T20:05:01+00:00","UserScreenname":"xamarinhq","Text":"What's better than sharing 80% of code across #iOS &amp; #Android apps w/ #Xamarin? ...building a backend powered byâ€¦ https://t.co/EZc7s5adqh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":130,"FavoriteCount":36,"RawContent":null},{"Id":"1134136640929193985","CreatedAt":"2019-05-30T16:37:01+00:00","UserScreenname":"xamarinhq","Text":"August 1 2019, Android apps that ship native libraries must provide a 64-bit v of their app.â€¦ https://t.co/JSElMqVSyB","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":55,"FavoriteCount":29,"RawContent":null},{"Id":"1133821797059780608","CreatedAt":"2019-05-29T19:45:56+00:00","UserScreenname":"xamarinhq","Text":"Today on @TheXamarinShow,, @JamesMontemagno &amp; #MSMVP @NicoVermeir shows off a tool that will change the life of eveâ€¦ https://t.co/lYUf1XXB4m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":19,"RawContent":null}]}},"RunOn":"2019-06-24T05:30:56.7752707Z","RunDurationInMilliseconds":2728}