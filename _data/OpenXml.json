{"Data":{"Sdk":{"Events":[{"Id":"9347496195","Type":"PullRequestEvent","CreatedAt":"2019-03-31T02:19:57","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/584","RelatedDescription":"Merged pull request \"Fix whitespace in README\" (#584) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"9347496030","Type":"PullRequestEvent","CreatedAt":"2019-03-31T02:19:49","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/584","RelatedDescription":"Opened pull request \"Fix whitespace in README\" (#584) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"9346234044","Type":"IssuesEvent","CreatedAt":"2019-03-30T14:51:04","Actor":"Ingerdev","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/581","RelatedDescription":"Closed issue \"Wordprocessing.PermStart.Id field illegal type\" (#581) at OfficeDev/Open-XML-SDK","RelatedBody":"DocumentFormat.OpenXml.Wordprocessing.PermStart.Id field has Int32 type instead of string type\r\nas Ecma standart says. Please fix it."},{"Id":"9343656783","Type":"PullRequestEvent","CreatedAt":"2019-03-29T20:02:52","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/583","RelatedDescription":"Opened pull request \"Add Office 2016 support with a few new schema classes\" (#583) at OfficeDev/Open-XML-SDK","RelatedBody":""},{"Id":"9342040466","Type":"PullRequestEvent","CreatedAt":"2019-03-29T15:48:44","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/582","RelatedDescription":"Merged pull request \"Add better docs and exception message to InsertBefore/InsertAfter\" (#582) at OfficeDev/Open-XML-SDK","RelatedBody":"Fixes #580"},{"Id":"9342040403","Type":"IssuesEvent","CreatedAt":"2019-03-29T15:48:43","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/issues/580","RelatedDescription":"Closed issue \"Paragraph.InsertAfter Invalid Operation Error in Textbox\" (#580) at OfficeDev/Open-XML-SDK","RelatedBody":"Receiving an invalid operation error when calling Paragraph.InsertAfter when the paragraph is in a floating object/textbox. Please note the function below that I found on stack overflow. To reproduce this issue use a document that has a picturebox/textbox with word or phrase you are wanting to highlight.  It blows up on the line paragraph.InsertAfter(highlightRun, found.Run); \r\n\r\n\r\n- .NET Target: 4.6.1\r\n- DocumentFormat.OpenXml Version: 2.9.1\r\n\r\n```csharp\r\n        static void HighLightText(Paragraph paragraph, string text)\r\n        {\r\n            // Search for a first occurrence of the text in the text runs\r\n            var found = paragraph\r\n                .Descendants<Run>()\r\n                .Where(r => !string.IsNullOrEmpty(r.InnerText) && r.InnerText != \"\\\\s\" && r.GetFirstChild<Text>() != null)\r\n                .Select(r =>\r\n                {\r\n                    var runText = r.GetFirstChild<Text>();\r\n                    int index = runText.Text.IndexOf(text, StringComparison.OrdinalIgnoreCase);\r\n\r\n            // 'Run' is a reference to the text run we found,\r\n            // TextNode is a reference to the run's Text object,\r\n            // 'TokenIndex` is the index of the search string in run's text\r\n            return new { Run = r, TextNode = runText, TokenIndex = index };\r\n                })\r\n                .FirstOrDefault(o => o.TokenIndex >= 0);\r\n\r\n            // Nothing found -- escape\r\n            if (found == null || found.Run == null)\r\n            {\r\n                return;\r\n            }\r\n\r\n            // Create a node for highlighted text as a clone (to preserve formatting etc)\r\n            var highlightRun = found.Run.CloneNode(true);\r\n\r\n            // Add the highlight node after the found text run and set up the highlighting\r\n            paragraph.InsertAfter(highlightRun, found.Run);\r\n            highlightRun.GetFirstChild<Text>().Text = text;\r\n            RunProperties runPro = new RunProperties();\r\n            Highlight highlight = new Highlight { Val = HighlightColorValues.Yellow };\r\n            Vanish vv = new Vanish();\r\n\r\n            runPro.AppendChild(highlight);\r\n            runPro.AppendChild(vv);\r\n            highlightRun.InsertAt(runPro, 0);\r\n\r\n            // Check if there's some text in the text run *after* the found text\r\n            int remainderLength = found.TextNode.Text.Length - found.TokenIndex - text.Length;\r\n            if (remainderLength > 0)\r\n            {\r\n                // There is some text after the highlighted section --\r\n                // insert it in a separate text run after the highlighted text run\r\n                var remainderRun = found.Run.CloneNode(true);\r\n                paragraph.InsertAfter(remainderRun, highlightRun);\r\n                var textNode = remainderRun.GetFirstChild<Text>();\r\n                textNode.Text = found.TextNode.Text.Substring(found.TokenIndex + text.Length);\r\n\r\n                // We need to set up this to preserve the spaces between text runs\r\n                textNode.Space = new EnumValue<SpaceProcessingModeValues>(SpaceProcessingModeValues.Preserve);\r\n            }\r\n\r\n            // Check if there's some text *before* the found text\r\n            if (found.TokenIndex > 0)\r\n            {\r\n                // Something is left before the highlighted text,\r\n                // so make the original text run contain only that portion\r\n                found.TextNode.Text = found.TextNode.Text.Remove(found.TokenIndex);\r\n\r\n                // We need to set up this to preserve the spaces between text runs\r\n                found.TextNode.Space = new EnumValue<SpaceProcessingModeValues>(SpaceProcessingModeValues.Preserve);\r\n            }\r\n            else\r\n            {\r\n                // There's nothing before the highlighted text -- remove the unneeded text run\r\n                paragraph.RemoveChild(found.Run);\r\n            }\r\n        }\r\n\r\n```\r\n"},{"Id":"9335549061","Type":"PullRequestEvent","CreatedAt":"2019-03-28T18:51:25","Actor":"twsouthwick","Repository":"OfficeDev/Open-XML-SDK","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-XML-SDK/pull/582","RelatedDescription":"Opened pull request \"Add better docs and exception message to InsertBefore/InsertAfter\" (#582) at OfficeDev/Open-XML-SDK","RelatedBody":"Fixes #580"}],"ResultType":"GitHubEvent"},"PowerTools":{"Events":[{"Id":"8996877097","Type":"PullRequestEvent","CreatedAt":"2019-02-02T05:48:33","Actor":"twsouthwick","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/271","RelatedDescription":"Merged pull request \"Replace file headers with MIT license\" (#271) at OfficeDev/Open-Xml-PowerTools","RelatedBody":""},{"Id":"8996442444","Type":"PullRequestEvent","CreatedAt":"2019-02-02T01:27:29","Actor":"twsouthwick","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/271","RelatedDescription":"Opened pull request \"Replace file headers with MIT license\" (#271) at OfficeDev/Open-Xml-PowerTools","RelatedBody":""},{"Id":"8996441806","Type":"PullRequestEvent","CreatedAt":"2019-02-02T01:27:15","Actor":"tomjebo","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/270","RelatedDescription":"Closed pull request \"update DocumentFormat.OpenXml to 2.9.0\" (#270) at OfficeDev/Open-Xml-PowerTools","RelatedBody":""},{"Id":"8996440977","Type":"PullRequestEvent","CreatedAt":"2019-02-02T01:26:52","Actor":"tomjebo","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/256","RelatedDescription":"Closed pull request \"Fix issue related to text-align with rtl direction\" (#256) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"When adding style=\"direction:rtl; text-align:left\" it doesn't apply text-align property."},{"Id":"8996440049","Type":"PullRequestEvent","CreatedAt":"2019-02-02T01:26:27","Actor":"tomjebo","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/247","RelatedDescription":"Closed pull request \"Update ChartUpdater.cs\" (#247) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"UpdateChart.UpdateChart.UpdateSeries does not work on Radar chart types, it is a simple one line fix that I have used for a few years now.\r\nCloses OfficeDev/Open-Xml-PowerTools#245"},{"Id":"8996439414","Type":"PullRequestEvent","CreatedAt":"2019-02-02T01:26:11","Actor":"tomjebo","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/246","RelatedDescription":"Closed pull request \"Process page breaks\" (#246) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"Page breaks are shown like \r\n\r\n    <p:r><docx properties like font, .../><w:br type=\"page\"/></p:r>\r\n\r\nWhen converting this to HTML, this is replaced by <span></span> in the function:\r\n\r\n     // Transform w:br to h:br.\r\n     if (element.Name == W.br || element.Name == W.cr)\r\n      {\r\n           return ProcessBreak(element);\r\n      }\r\n\r\nWhich causes the page break to not appear.\r\n\r\nI have changed this so it returns a div style=\"page-break-before:always;\"  in the following function.\r\n\r\n    private static object ProcessPageBreak(XElement element)\r\n        {\r\n            XElement div = new XElement(Xhtml.div);\r\n            div.SetAttributeValue(NoNamespace.style, \"page-break-before:always;\");\r\n            XElement span = null;\r\n\r\n            return new object[]\r\n            {\r\n                div,\r\n                new XEntity(\"#x200e\"),\r\n                span\r\n         };\r\n        }\r\n\r\nWhich causes a correct page break.\r\n\r\nPS. The page break (docx) is detected in a child element. So i have to set the page break ( html) in it's parent. I detect it with the following function:\r\n\r\n     private static bool HasAPageBreak(XElement element)\r\n        {\r\n            return element.Descendants().Any(dl => dl.Name == W.br && dl.Attribute(W.type).Value == \"page\");\r\n        }\r\n"},{"Id":"8996438798","Type":"PullRequestEvent","CreatedAt":"2019-02-02T01:25:55","Actor":"tomjebo","Repository":"OfficeDev/Open-Xml-PowerTools","Organization":"OfficeDev","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/OfficeDev/Open-Xml-PowerTools/pull/241","RelatedDescription":"Closed pull request \"Document Assembler: Ability to merge in whole documents or sub-templates\" (#241) at OfficeDev/Open-Xml-PowerTools","RelatedBody":"As some interest was shown in this feature here is the pull request.\r\n\r\nFrom issue 191;\r\n\r\nImplementation is as follows;\r\n\r\n- Added two new elements; Document and DocumentTemplate\r\n- These two elements share common attributes Path and Data\r\n- The Path attribute can be either a file path or XPath that retrieves a file path from the input XML\r\n- The Data attribute is intended to hold a base64 encoded string containing the Word document contents\r\n- The DocumentTemplate element also has a Select attribute so that XML data can be passed to the template\r\n\r\ne.g.\r\n\r\n```\r\n<Repeat Select=\"//Invoice\" />\r\n<DocumentTemplate Path=\"SubTemplate.docx\" Select=\".\" />\r\n<Document Path=\"Terms.docx\" />\r\n<EndRepeat />\r\n\r\n```\r\nWith the above in place what I do is take a two pass approach.\r\n\r\nFirstly I process the Document and DocumentTemplate elements converting all to a Document element which contains a Data attribute with the base64 encoded content of the Document or assembled DocumentTemplate.\r\n\r\nThen I have introduced a second step and as such a dependency on DocumentBuilder in DocumentAssembler. I am not sure if this will be frowned upon or not :)\r\n\r\nThis second step is largely based on this post from Eric White;\r\n\r\nhttps://blogs.msdn.microsoft.com/ericwhite/2009/04/21/using-documentbuilder-with-content-controls-for-document-assembly/\r\n\r\n\r\nAlthough in my practical experience (been using this code in production for months) the Word documents generated are valid I had issues with the Unit Tests.  I think this is because we are using Office 365 and it looks like the validator only supports up-to 2013 at the minute?  I could re-author my test files in 2013 but don't have access to a copy.\r\n\r\nAny comments and feedback appreciated, this is my first pull request on an open-source project so be gentle :)"}],"ResultType":"GitHubEvent"}},"RunOn":"2019-04-01T05:30:41.0969424Z","RunDurationInMilliseconds":747}