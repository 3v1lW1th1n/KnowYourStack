{"Data":{"Blog":{"FeedItems":[{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7457508642","Type":"PullRequestEvent","CreatedAt":"2018-03-30T05:02:23","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17341","RelatedDescription":"Opened pull request \"[local gc] gc spinning part 1\" (#17341) at dotnet/coreclr","RelatedBody":"There isn't enough time left before ZBB to finish tuning the GC spinning. This PR adds the APIs so that the interface has the methods and we are free to switch to using the normalized spin methods whenever we have a chance to do the work"},{"Id":"7457255944","Type":"IssuesEvent","CreatedAt":"2018-03-30T02:59:03","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17337","RelatedDescription":"Closed issue \"[Arm64] IsIPInMarkedJitHelper -- Help \" (#17337) at dotnet/coreclr","RelatedBody":"@janvorli I need help understnding the intent of IsIPInMarkedJitHelper\r\n\r\nBased on review of comments, it seems this is used to mark a subset of JIT helpers as being in managed code\r\n\r\nFor `arm64` it currently includes\r\n```\r\n    CHECK_RANGE(JIT_MemSet)\r\n    CHECK_RANGE(JIT_MemCpy)\r\n    CHECK_RANGE(JIT_WriteBarrier)\r\n    CHECK_RANGE(JIT_CheckedWriteBarrier)\r\n```\r\n\r\nShouldn't it also include \r\n```\r\n    CHECK_RANGE(JIT_ByRefWriteBarrier)\r\n    CHECK_RANGE(JIT_Stelem_Ref)\r\n    CHECK_RANGE(JIT_Stelem_Ref_NotExactMatch)\r\n    CHECK_RANGE(JIT_Stelem_DoWrite)\r\n    CHECK_RANGE(JIT_Stelem_Ref)\r\n```\r\n\r\nI am assuming the stubs are not needed, because they are generated by the JIT and treated as managed code.  It would be really nice to understand the classification rules, constraints and requirements.\r\n\r\nAlso based on my read, these functions will effectively get retried if a signal occurs, signal will return to the caller, to call the helper again.  So these functions have functional constraints as well to not modify the call arguments.  Is my understanding here correct?"},{"Id":"7457193204","Type":"PullRequestEvent","CreatedAt":"2018-03-30T02:31:16","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17340","RelatedDescription":"Opened pull request \"Change OwnedMemory to MemoryManager and add an IMemoryOwner.\" (#17340) at dotnet/coreclr","RelatedBody":"- IRetainable is IPinnable (Release is Unpin)\r\n- OwnedMemory is split into MemoryManager and IMemoryOwner\r\n- Reorder the arguments in the ctor of MemoryHandle\r\n- Add a static method CreateFromPinnedArray and use the high bit on length for pre-pinned arrays\r\n- Reset index, length if TryGetMemoryManager returns false (cc @benaadams )\r\n\r\nUpcoming PR on the corefx side:\r\n\r\ncc @joshfree, @GrabYourPitchforks, @KrzysztofCwalina, @pakrym, @davidfowl, @jkotas, @stephentoub \r\n\r\ncc @Anipik, @safern - many of these changes will need to be mirrored"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7457503857","Type":"PullRequestEvent","CreatedAt":"2018-03-30T05:00:09","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8947","RelatedDescription":"Opened pull request \"Updating SDK to 2.1.200-preview-62730-02\" (#8947) at dotnet/cli","RelatedBody":"This brings back an SDK with a matching version of NuGet.\r\n"},{"Id":"7457456070","Type":"PullRequestEvent","CreatedAt":"2018-03-30T04:34:18","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8946","RelatedDescription":"Opened pull request \"Updating the branding of the CLI to 2.1.104.\" (#8946) at dotnet/cli","RelatedBody":"\r\n"},{"Id":"7457429191","Type":"PullRequestEvent","CreatedAt":"2018-03-30T04:19:51","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8926","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.6.2-rtm-5055 into cli\" (#8926) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.2-rtm-5055 into cli release/2.1.1xx branch"},{"Id":"7457032787","Type":"PullRequestEvent","CreatedAt":"2018-03-30T01:21:21","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8945","RelatedDescription":"Opened pull request \"WIP: Updating the runtime to 2.0.7 and the CLI branding to 2.1.104.\" (#8945) at dotnet/cli","RelatedBody":"Marked WIP because we can't merge this until the NuGet fix is in and that build is cut."},{"Id":"7457016168","Type":"PullRequestEvent","CreatedAt":"2018-03-30T01:14:08","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8944","RelatedDescription":"Opened pull request \"Updating the runtime versions and branding of the CLI\" (#8944) at dotnet/cli","RelatedBody":"Updating the runtime versions to 1.1.8 and 1.0.11 and updating the CLI branding to 1.1.9.\r\n\r\n\r\n"},{"Id":"7456963445","Type":"PullRequestEvent","CreatedAt":"2018-03-30T00:50:05","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8943","RelatedDescription":"Opened pull request \"Remove empty PATH in path\" (#8943) at dotnet/cli","RelatedBody":"Path adding logic on Windows is wrong. Windows require `;` in the end of the path.\r\n\r\nAlso filter out empty PATH. So it won't resolve to current directory\r\n\r\nhttps://stackoverflow.com/questions/11391390/placing-the-semicolon-in-the-windows-path-environment-variable"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7457305260","Type":"PullRequestEvent","CreatedAt":"2018-03-30T03:20:07","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/440","RelatedDescription":"Merged pull request \"Update reference for .NET Standard 2.0 to match final bits\" (#440) at dotnet/standard","RelatedBody":"The diff is surprisingly large, but that seems to be a result of [this CCI change](https://github.com/dotnet/buildtools/commit/7cf90764ff3f869ad6c680fb71a5c89d26a16cc5).\r\n\r\n@weshaggard "},{"Id":"7454371159","Type":"IssuesEvent","CreatedAt":"2018-03-29T14:51:34","Actor":"MohammadHamdyGhanem","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/696","RelatedDescription":"Opened issue \"XAML standard API\" (#696) at dotnet/standard","RelatedBody":"I say Microsoft should make a XAML standard API (Like .NET Standard) that should be obeyed be Xamarin.Forms, UWP and ASP.NET some XAML/C# razor. Or extend .NET Standard to include this. \r\nControls and their properties and methods should have the same names whatever the underling implementation. This will make all these components easier to learn, and make most of the code reusable.\r\n\r\n"},{"Id":"7451276904","Type":"PullRequestEvent","CreatedAt":"2018-03-29T01:58:17","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/695","RelatedDescription":"Opened pull request \"Update BuildTools to preview3-02629-02 (master)\" (#695) at dotnet/standard","RelatedBody":""},{"Id":"7451016632","Type":"PullRequestEvent","CreatedAt":"2018-03-29T00:20:18","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/694","RelatedDescription":"Merged pull request \"Update BuildTools to preview3-02628-01 (master)\" (#694) at dotnet/standard","RelatedBody":""},{"Id":"7447113182","Type":"IssuesEvent","CreatedAt":"2018-03-28T11:23:52","Actor":"Foroughi","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/686","RelatedDescription":"Closed issue \"Missing NetStatandard 2 after install my nuget package\" (#686) at dotnet/standard","RelatedBody":"I have a netstandard2 class library project, which contains some Roslyn analyzers. I'm trying to create NuGet package using a` .nuspec `and `msbuild \\t:pack` command. All working find and i can create the nuget package easily. But as soon as i register my analyzer afteer installing the package on another project i get the following error for each analyzer in my package :\r\n\r\n`An instance of analyzer [AnalyzerName] cannot be created from [AnalyzerDllFile]: Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified`\r\n\r\nHere is the .nuspec file :\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\r\n  <metadata>\r\n    <id>[PackageId]</id>\r\n    <version>1.0.9</version>\r\n    <authors>Ali</authors>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>test</description>  \r\n  <!-- Solution A i found -->\r\n  <dependencies>\r\n  <group targetFramework=\"net46\">\r\n    <dependency id=\"NETStandard.Library\" version=\"2.0.0\" />\r\n  </group>\r\n\r\n  </dependencies>\r\n     <!-- Solution B i found -->\r\n    <references>      \r\n      <reference file=\"netstandard.dll\" />\r\n  </references>\r\n  </metadata>\r\n  <files>    \r\n    <file src=\"bin\\Debug\\netstandard2.0\\[PackageName].dll\" target=\"analyzers\\dotnet\\cs\" />    \r\n    <file src=\"tools\\*.ps1\" target=\"tools\\\" />\r\n  </files>\r\n</package>\r\n```\r\n\r\n\r\n\r\nI tried many solution that i found on internet but seems I'm missing something else\r\n\r\nFYI both project are targeting to .Net Framework 4.6.1"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7457550167","Type":"PullRequestEvent","CreatedAt":"2018-03-30T05:22:32","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28640","RelatedDescription":"Opened pull request \"[WIP] Split OwnedMemory into MemoryManager and IMemoryOwner\" (#28640) at dotnet/corefx","RelatedBody":"Depends on CoreCLR PR https://github.com/dotnet/coreclr/pull/17340 (along with the mirror PR).\r\n\r\n**TODO:**\r\n- Fix MemoryPool impl and tests (cc @AtsushiKan)\r\n- Fix implementation of ReadOnlySequence and related types and adjust tests (cc @pakrym)\r\n- Consume the changed types in Pipelines and fix (cc @pakrym, @halter73)\r\n- Add more tests in System.Memory for IMemoryOwner/etc.\r\n- Remove the files from src/Common/src/CoreLib/* since they will get mirrorred automatically once the coreclr PR gets merged.\r\n\r\n**Changes:**\r\n- IRetainable is IPinnable (Release is Unpin)\r\n- OwnedMemory is split into MemoryManager and IMemoryOwner\r\n- Reorder the arguments in the ctor of MemoryHandle\r\n- Add a static method CreateFromPinnedArray and use the high bit on length for pre-pinned arrays\r\n- Make the internal ctor that took OwnedMemory public (now takes MemoryManager) and add argument validation\r\n- Reset index, length if TryGetMemoryManager returns false ( cc @benaadams )\r\n\r\ncc @joshfree, @GrabYourPitchforks, @KrzysztofCwalina, @pakrym, @davidfowl, @jkotas, @stephentoub "},{"Id":"7457286294","Type":"PullRequestEvent","CreatedAt":"2018-03-30T03:11:55","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28639","RelatedDescription":"Opened pull request \"Stop blocking explicit opt-in to old SslProtocols in SslStream and HttpClient\" (#28639) at dotnet/corefx","RelatedBody":"By default, .NET Core defaults to allowing TLSv1, TLSv1.1, and TLSv1.2.  However, whereas .NET Framework allows a developer to opt-in to SSLv2/SSLv3, .NET Core currently blocks it.  This means developers are unable to use .NET Core when they need to communicate with an endpoint they don't control and that's unfortunately limited to one of these protocols, which blocks adoption of .NET Core.\r\n\r\nThis commit stops blocking these protocols.  They're still disabled by default, and compiling against them still results in a deprecation warning, but if a developer chooses to ignore the warning and explicitly sets SslProtocols, they are at least able to use the protocols, subject to whatever the underlying operating system allows (e.g. Windows stops supporting SSLv2 as of v1607).\r\n\r\nFixes https://github.com/dotnet/corefx/issues/15661\r\ncc: @bartonjs, @GrabYourPitchforks, @davidsh\r\n(Note I'm expecting when mission control comes back up I'll still have a handful of test failures to investigate.  I also should call out that some of the impacted tests are previously ActiveIssue'd, so as part of testing this I temporarily commented out the ActiveIssue, but I reverted that commenting for the PR.)"},{"Id":"7457276564","Type":"PullRequestEvent","CreatedAt":"2018-03-30T03:07:52","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/28495","RelatedDescription":"Closed pull request \"[no merge] Just testing CI\" (#28495) at dotnet/corefx","RelatedBody":""},{"Id":"7457252918","Type":"PullRequestEvent","CreatedAt":"2018-03-30T02:57:38","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28638","RelatedDescription":"Opened pull request \"Some more allocation reduction in SocketsHttpHandler\" (#28638) at dotnet/corefx","RelatedBody":"- Pool SocketAsyncEventArgs used for establishing connections.  Today we create a new SocketAsyncEventArgs for each new connection, and it's used only for the ConnectAsync.  This establishes a bounded pool of them, such that they can be reused.  To do this, I moved the nested ConcurrentQueue.Segment type into a partial file so that we could use that directly, as it supports bounding (we can use it as a public type if/when https://github.com/dotnet/corefx/issues/24365 is addressed). FYI, @kouvel.\r\n\r\n- Zero pool lifetimes. If the PooledConnectionIdleTimeout is zero or if the PooledConnectionLifetime is zero, then no connection will ever actually be usuable from the pool.  In such a situation we can a) avoid creating the cleaning timer, and b) dispose of the connection as it's being returned to the pool, rather than waiting for it to be scavenged.\r\n\r\n- CookieContainer string allocation.  Its ctor is allocating a string that can instead be constructed once and used across all CookieContainers.\r\n\r\n- Changed HttpWebRequest to use SocketsHttpHandler directly rather than going through HttpClientHandler.\r\n\r\ncc: @geoffkizer "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7457536912","Type":"IssuesEvent","CreatedAt":"2018-03-30T05:16:13","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25829","RelatedDescription":"Opened issue \"It looks like IDiscardSymbols returned by SemanticModel are never going to be equal\" (#25829) at dotnet/roslyn","RelatedBody":"```\r\n        public override Symbol ExpressionSymbol\r\n        {\r\n            get\r\n            {\r\n                Debug.Assert((object)this.Type != null);\r\n                return new DiscardSymbol(this.Type);\r\n            }\r\n        }\r\n```\r\n\r\nExpected:\r\nSymbols for the same syntax and the same type should be equal"},{"Id":"7457465518","Type":"PullRequestEvent","CreatedAt":"2018-03-30T04:39:31","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25828","RelatedDescription":"Opened pull request \"Handle using statement in control flow graph\" (#25828) at dotnet/roslyn","RelatedBody":""},{"Id":"7457355297","Type":"PullRequestEvent","CreatedAt":"2018-03-30T03:42:46","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25739","RelatedDescription":"Merged pull request \"recursive-patterns(12): Improve switch code by using pattern variables as match automaton temps\" (#25739) at dotnet/roslyn","RelatedBody":"Fixes #20641\r\nFixes #25566\r\n\r\n@cston @agocke Please review. **There is only a single delta in this PR**, though you may see deltas from previous PRs. The optimization is not very complex but it makes a big difference in some cases (I'll point out the principal use case).\r\n\r\n/cc @dotnet/roslyn-compiler "},{"Id":"7457339998","Type":"PullRequestEvent","CreatedAt":"2018-03-30T03:35:43","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25697","RelatedDescription":"Merged pull request \"recursive-patterns(11): use stack spiller for switch expressions\" (#25697) at dotnet/roslyn","RelatedBody":"This refactoring moves the spiller between initial lowering and lambda lowering\r\n- Added some improved debug-time display for synthesized locals\r\n- Added some invariant checking regarding bound nodes.\r\n- Move invocation of the spiller into LocalRewriter.Rewrite\r\n- Add an error for when an expression tree contains a switch expression\r\n- Made the local substituter apply at the top level in the expression spiller because expressions can now contain statements (BoundSpillSequence)\r\n- Move the error ERR_ByRefTypeAndAwait to IteratorAndAsyncCaptureWalker\r\n\r\nThere are two iterations:\r\n- Most of the changes\r\n- Renaming and moving a file\r\n\r\nI separated them to make review easier, as the rename and move makes it look like a file was deleted and one added.\r\n\r\nThis is built on top of other pending reviews, so even though there are only two new iteration here, you will see iterations from previous PRs. Only the last two matter for this PR.\r\n\r\n@agocke @cston Can you review this please?\r\n/cc @dotnet/roslyn-compiler \r\n"},{"Id":"7457322925","Type":"PullRequestEvent","CreatedAt":"2018-03-30T03:27:57","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25662","RelatedDescription":"Merged pull request \"recursive-patterns(10): Rename elements of the pattern-matching implementation for clarity\" (#25662) at dotnet/roslyn","RelatedBody":"Also add documentation.\r\n\r\nOnly the third-to-last iteration is unique to this PR. The second-to-last iteration is an integration from upstream, and the last is a tiny doc bug fix.\r\n"},{"Id":"7457315397","Type":"IssuesEvent","CreatedAt":"2018-03-30T03:24:31","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25827","RelatedDescription":"Opened issue \"Make statements contiguous in BoundNodes.xml\" (#25827) at dotnet/roslyn","RelatedBody":"Currently all the pattern matching stuff is in the middle. It is possible this would undermine the performance of some kind switches."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7455835029","Type":"PullRequestEvent","CreatedAt":"2018-03-29T19:44:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5641","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5641) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7455294539","Type":"PullRequestEvent","CreatedAt":"2018-03-29T17:40:06","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5641","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5641) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7455264798","Type":"PullRequestEvent","CreatedAt":"2018-03-29T17:34:00","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5618","RelatedDescription":"Merged pull request \"Implement P/Invoke 'A' and 'W' Probing\" (#5618) at dotnet/corert","RelatedBody":"Implement probing for native function names following the A/W suffix notation used on Windows.\r\n\r\nFixes #730."},{"Id":"7455264786","Type":"IssuesEvent","CreatedAt":"2018-03-29T17:34:00","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/730","RelatedDescription":"Closed issue \"Pinvoke method \"W\" and \"A\" probing\" (#730) at dotnet/corert","RelatedBody":"(1). [DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode)]\npublic static extern bool GetProcessMemoryInfo(IntPtr hProcess, out PROCESS_MEMORY_COUNTERS ppsmemCounters, int cb);\n\nlinking phase  will fails since it can't find \"GetProcessMemoryInfo\" in any of the libs.\n\n(2).  On windows distinguish between \"W\" and \"A\" version of method.\n"},{"Id":"7455253165","Type":"PullRequestEvent","CreatedAt":"2018-03-29T17:31:35","Actor":"ahsonkhan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5640","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5640) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7451139923","Type":"PullRequestEvent","CreatedAt":"2018-03-29T01:06:36","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5640","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5640) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7451127717","Type":"PullRequestEvent","CreatedAt":"2018-03-29T01:02:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5639","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5639) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7450827964","Type":"PullRequestEvent","CreatedAt":"2018-03-28T23:15:30","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5639","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5639) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7457448682","Type":"PullRequestEvent","CreatedAt":"2018-03-30T04:30:21","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2095","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-preview3.5052 into sdk\" (#2095) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-preview3.5052 into sdk release/2.1.2xx branch"},{"Id":"7455479418","Type":"IssuesEvent","CreatedAt":"2018-03-29T18:19:42","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/754","RelatedDescription":"Closed issue \"[Performance] .NET Core project takes 4 times longer to build than a .NET Framework project\" (#754) at dotnet/sdk","RelatedBody":"_From @davkean on January 19, 2017 3:14_\n\nI tested a Console App (.NET Framework) vs Console App (.NET Core), and from the command-line the project takes 4 times longer to build (if MSBuild is hot):\r\n\r\n```\r\nmsbuild /t:rebuild\r\n```\r\n\r\nAverage time to build .NET Framework: 220 Milliseconds\r\nAverage time to build .NET Core: 800 Millseconds\r\n\r\nIn Visual Studio, via right-click Rebuild:\r\n\r\nAverage time to build .NET Framework: 50 Milliseconds\r\nAverage time to build .NET Core: 230 Millseconds\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/roslyn-project-system#1243_"},{"Id":"7455375291","Type":"IssuesEvent","CreatedAt":"2018-03-29T17:56:30","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/18","RelatedDescription":"Closed issue \"Adapt MSBuild logger to a NuGet logger\" (#18) at dotnet/sdk","RelatedBody":"When loading a LockFile, the API takes a NuGet.Common.ILogger.  In order to get good logging information from NuGet, we should implement a NuGet logger that can write to the MSBuild logger in our tasks that need to load a LockFile.\n\nSee the TODO in the LockFileCache class added in https://github.com/dotnet/sdk/pull/8.\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"977245582724022272","CreatedAt":"2018-03-23T18:07:57+00:00","UserScreenname":"dotnet","Text":"Calling all Desktop Developers: how should UI development be improved? https://t.co/lKHACsK0Sv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":104,"FavoriteCount":74,"RawContent":null},{"Id":"976910301634465792","CreatedAt":"2018-03-22T19:55:40+00:00","UserScreenname":"dotnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/OokEA8H4Mo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":230,"FavoriteCount":179,"RawContent":null}]}},"RunOn":"2018-03-30T05:30:19.4166738Z","RunDurationInMilliseconds":7478}