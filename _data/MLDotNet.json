{"Data":{"GitHub":{"Issues":[{"Id":"423019489","IsPullRequest":true,"CreatedAt":"2019-03-21T03:59:47","Actor":"wschin","Number":"3029","RawContent":null,"Title":"Polish standard trainers' catalog (Just rename some variables)","State":"closed","Body":"To fix #2680, we rename several parameters and improve some doc strings.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3029","RelatedDescription":"Closed or merged PR \"Polish standard trainers' catalog (Just rename some variables)\" (#3029)"},{"Id":"423534776","IsPullRequest":false,"CreatedAt":"2019-03-21T00:58:31","Actor":"glebuk","Number":"3040","RawContent":null,"Title":"Samples needed to show how to examine model weights","State":"open","Body":"Currently it is very difficult to inspect model parameters.  It requires a lot of casting and non-trivial DOM navigation to get to actual weights of the model.\r\nIt would be good to have samples that inspect:\r\n1. Weights of a linear model\r\n2. Splits and nodes of a tree model\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3040","RelatedDescription":"Open issue \"Samples needed to show how to examine model weights\" (#3040)"},{"Id":"423522971","IsPullRequest":true,"CreatedAt":"2019-03-20T23:58:21","Actor":"ganik","Number":"3039","RawContent":null,"Title":"[WIP] Add GetPrecisionRecallCurve API","State":"open","Body":"fixes #2645","Url":"https://github.com/dotnet/machinelearning/pull/3039","RelatedDescription":"Open PR \"[WIP] Add GetPrecisionRecallCurve API\" (#3039)"},{"Id":"423030948","IsPullRequest":true,"CreatedAt":"2019-03-20T23:23:45","Actor":"artidoro","Number":"3033","RawContent":null,"Title":"Refactoring of Options for ImagePixelExtractingEstimator","State":"closed","Body":"This PR is an example solution for #2884. Once I receive feedback on this, I will continue with the rest of the transforms.\r\n\r\nThe purpose of this PR is twofold:\r\n\r\n- does the ground work to more easily enable the refactoring of `Options`  in other transforms (commit 1)\r\n    - most of the work is in the file ColumnBindingsBase.cs.\r\n    - made `OneToOneColumn` public, removed empty class\r\n    - renamed `Name` and `Source` to `OutputColumnName` and `InputColumnName`\r\n    - added implicit operators to `OneToOneColumn` to simplify the multicolumn mapping scenario\r\n- refactors the `Options` class for `ImagePixelExtractingEstimator` (commit 2)\r\n    - moved immutable `ColumnOptions` to transformer and renamed `ColumnInfo`\r\n    - moved `Options` and `Column` to estimator\r\n    - refactored extension and constructors\r\n\r\nThe third commit fixes tests and entrypoint catalog.\r\n\r\n\r\nNote that with the combination of the implicit operators on `OneToOneColumn` and the constructor taking `OneToOneColumn` in the `Options` class, it is easier to define the multicolumn mapping scenario where the columns don't require column specific settings. For an example of the behavior see the test TestImagePixelExtractOptions in ImagesTests.cs:\r\n\r\n```csharp\r\n// options1 and 2 should be exactly the same.\r\nvar options1 = new ImagePixelExtractingEstimator.Options\r\n{\r\n    ColumnOptions = new[]\r\n    {\r\n        new ImagePixelExtractingEstimator.ColumnOptions { OutputColumnName = \"outputColumn1\", InputColumnName = \"inputColumn1\" },\r\n        new ImagePixelExtractingEstimator.ColumnOptions { OutputColumnName = \"outputColumn2\", InputColumnName = \"inputColumn2\" },\r\n        new ImagePixelExtractingEstimator.ColumnOptions { OutputColumnName = \"outputColumn3\", InputColumnName = \"inputColumn3\" }\r\n    }\r\n};\r\nvar options2 = new ImagePixelExtractingEstimator.Options((\"outputColumn1\", \"inputColumn1\"), (\"outputColumn2\", \"inputColumn2\"), (\"outputColumn3\", \"inputColumn3\"));\r\n// options3 has the same OutputColumnName as the previous two.\r\nvar options3 = new ImagePixelExtractingEstimator.Options(\"outputColumn1\", \"outputColumn2\", \"outputColumn3\");\r\n\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3033","RelatedDescription":"Closed or merged PR \"Refactoring of Options for ImagePixelExtractingEstimator\" (#3033)"},{"Id":"423466041","IsPullRequest":false,"CreatedAt":"2019-03-20T20:49:56","Actor":"prathyusha12345","Number":"3038","RawContent":null,"Title":"Getting exception when trying to evaulate in sample -PCA based Anomaly Detection","State":"open","Body":"\r\n### Issue\r\n\r\nI am trying to create a new sample based on PCA based Anomaly Detection i.e CreditRisk Detection. i am using the **German Credit Risk** data as dataset from [here](https://archive.ics.uci.edu/ml/datasets/Statlog+(German+Credit+Data)). It contains label values as 1 and 2 with 1-positive and 2-negative.\r\n\r\nI am trying to train the model on train data by dropping label column as PCA based anomaly detection trains on unsupervised data. When I am trying to evaluate I am getting the **error** as below\r\n\r\n![image](https://user-images.githubusercontent.com/22335043/54717972-addfcd80-4b16-11e9-8222-0efccdfe8252.png)\r\n\r\n\r\n### Source code / logs\r\n\r\nthe source code is available at the PR [https://github.com/dotnet/machinelearning-samples/pull/321](url)","Url":"https://github.com/dotnet/machinelearning/issues/3038","RelatedDescription":"Open issue \"Getting exception when trying to evaulate in sample -PCA based Anomaly Detection\" (#3038)"},{"Id":"423432935","IsPullRequest":false,"CreatedAt":"2019-03-20T19:27:10","Actor":"isaacabraham","Number":"3037","RawContent":null,"Title":"Working with in-memory data in F# from scripts is *painful*","State":"open","Body":"Working with latest F#4.5 and net standard I'm having huge problems trying to do even the most basic explorations with the latest ML .NET. Is there any example showing an absolutely basic example for an in-memory dataset using a simple ML algorithm?\r\n\r\nI'm talking something as simple as an example from e.g. [scikit-learn](https://mcalglobal.com/2018/02/22/machine-learning-hello-world-using-python/) e.g. the following hello world is 7 lines of code, and if you leave at the data loading side of things and just focus on the ML side of things - which is exactly what I want to do - it's the following *three lines of code*.\r\n\r\n```\r\nmodel = linear_model.LinearRegression()\r\nmodel.fit(sqfeet, price)\r\nmodel.predict( pd.DataFrame([1750]))\r\n```\r\n\r\nLets try and port this into F#. Here's the source data as a simple F# list.\r\n\r\n```fsharp\r\ntype Observation = { Area:int; Price:int }\r\nlet data =\r\n    [ { Area = 1100; Price = 119000 }\r\n      { Area = 1200; Price = 126000 }\r\n      { Area = 1300; Price = 133000 }\r\n      { Area = 1400; Price = 150000 }\r\n      { Area = 1500; Price = 161000 }\r\n      { Area = 1600; Price = 163000 }\r\n      { Area = 1700; Price = 169000 }\r\n      { Area = 1800; Price = 182000 }\r\n      { Area = 1900; Price = 201000 }\r\n      { Area = 2000; Price = 209000 } ]\r\n```\r\n\r\nI've spent a good few hours fighting with the API to try and get some - any - results. **I can't figure it out**.\r\n\r\nIssues I've encountered:\r\n\r\n1. Discoverability. The API is pretty large and not (in my personal opinion) easy to navigate your way around. The namespaces need to be reworked so that the most obvious types are easy and obvious to get to.\r\n1. F# scripts are a pain because of the \"occasional\" reliance on native DLLs. However, you can work around this (or fall back to console applications if needed).\r\n1. Error messages are painful - `I4`, `R4` etc. etc. - most people will not know what these are.\r\n1. Vector types - it seems that in order to \"use\" data with a trainer you need to \"convert\" data from e.g. `float32` into a \"vector\" of `float32`. There's no explanation of what a \"vector\" in the context of ML .NET is, nor how to create one. Is it a .NET type? How do I create it? More than that, why as a developer should I have to care about it? I just want to give some of my data to the library as quickly and easily as possible.\r\n1. Why do I need to convert from ints or floats into float32s to do some machine learning? Again, this raises the barrier to entry. This is an internal implementation detail of ML .NET, it's nothing that should be forced on the developer.\r\n1. Why do I need the `MLContext`? What does it do? Does it store some \"hidden state\"? What? Why?\r\n\r\nI managed to overcome some issues by randomly fumbling around with some existing samples until I got something that seemed to not error any more:\r\n\r\n```fsharp\r\nlet estimator, mlContext =\r\n    let mlContext = MLContext(Nullable 1)\r\n\r\n    let trainer = mlContext.Regression.Trainers.StochasticDualCoordinateAscent(DefaultColumnNames.Label, \"Features\")\r\n\r\n    EstimatorChain()\r\n        .Append(mlContext.Transforms.Conversion.ConvertType(Transforms.TypeConvertingEstimator.ColumnOptions(\"ConvertedArea\", DataKind.Single, \"Area\")))\r\n        .Append(mlContext.Transforms.CopyColumns(DefaultColumnNames.Label, \"ConvertedArea\"))\r\n        .Append(mlContext.Transforms.Conversion.ConvertType(Transforms.TypeConvertingEstimator.ColumnOptions(\"ConvertedPrice\", DataKind.Single, \"Price\")))\r\n        .Append(mlContext.Transforms.Concatenate(\"Features\", \"ConvertedPrice\"))\r\n        .AppendCacheCheckpoint(mlContext)\r\n        .Append(trainer), mlContext\r\n```\r\n\r\nNext. I try to fit my data to this model:\r\n\r\n```fsharp\r\nlet dv = mlContext.Data.LoadFromEnumerable(data)\r\nlet trained = estimator.Fit(dv)\r\n```\r\n\r\nThis returns, but then calls to `CreatePredictionEngine` fail with the error `System.ArgumentOutOfRangeException: Could not find input column 'Area'`:\r\n\r\n```fsharp\r\ntype PredictionInput = { Price : int }\r\n[<CLIMutable>]\r\ntype PredictionOutput = { Area : int }\r\n\r\nlet z = trained.CreatePredictionEngine<PredictionInput, PredictionOutput>(mlContext)\r\n\r\nz.Predict { Price = 1000 }\r\n```\r\n\r\nTo get to this stage has taken 4-8 hours of effort (including spending 30-45 minutes with your team personally :-)). I don't consider myself a complete beginner when it comes to .NET / F# / machine learning - if it takes this long to get up and running, most people will simply not bother and go to scikit-learn, breeze or whatever else it out there.\r\n\r\nI would love to see a *simple* API that looked something like this:\r\n\r\n```fsharp\r\nlet model = Trainers.Regression.StochasticDualCoordinateAscend.fit(data, \"Area\", \"Price\")\r\nlet prediction = model.Predict(1234)\r\n```\r\n\r\nor\r\n\r\n```fsharp\r\nlet model = Trainers.Regression.StochasticDualCoordinateAscend.fit(data, fun d -> d.Area, fun d -> d.Price)\r\nlet prediction = model.Predict(1234)\r\n```\r\n\r\netc. etc.\r\n\r\nI get that there are more complicated scenarios - but I feel that this library should really be starting from the lowest common denominator and working from there. At the moment it seems to be the other way around.","Url":"https://github.com/dotnet/machinelearning/issues/3037","RelatedDescription":"Open issue \"Working with in-memory data in F# from scripts is *painful*\" (#3037)"},{"Id":"423355075","IsPullRequest":true,"CreatedAt":"2019-03-20T19:07:15","Actor":"shmoradims","Number":"3035","RawContent":null,"Title":"Binary FastTree/Forest samples using T4 templates.","State":"closed","Body":"Related to #2522. The *.cs files are auto-generated. Please review the .tt and .ttinclude files.","Url":"https://github.com/dotnet/machinelearning/pull/3035","RelatedDescription":"Closed or merged PR \"Binary FastTree/Forest samples using T4 templates.\" (#3035)"},{"Id":"423404589","IsPullRequest":true,"CreatedAt":"2019-03-20T18:19:21","Actor":"zeahmed","Number":"3036","RawContent":null,"Title":"Added tests for text featurizer options (Part2).","State":"open","Body":"This PR finally fixes #2967. Test created in this PR are for the following parameters in options class\r\n* WordNgramExtractor\r\n* CharNgramExtractor\r\n* Numeric Feature Normalizer (L1, L2, etc).\r\n\r\nThe intend here is to test that TextFeaturizer is instantiated for every parameter in the options class. Here, we are not testing the internal components of TextFeaturizer.","Url":"https://github.com/dotnet/machinelearning/pull/3036","RelatedDescription":"Open PR \"Added tests for text featurizer options (Part2).\" (#3036)"},{"Id":"422984999","IsPullRequest":true,"CreatedAt":"2019-03-20T17:21:12","Actor":"sfilipi","Number":"3021","RawContent":null,"Title":"Data catalog done","State":"closed","Body":"Towards #1209 \r\n\r\nAdding a sample for TrainTestSplit. \r\nAdding doc strings for the CreateFromeEnumerable\r\nMinor fixes to xml formatting. ","Url":"https://github.com/dotnet/machinelearning/pull/3021","RelatedDescription":"Closed or merged PR \"Data catalog done\" (#3021)"},{"Id":"423338377","IsPullRequest":true,"CreatedAt":"2019-03-20T16:05:35","Actor":"wschin","Number":"3034","RawContent":null,"Title":"Rename LogisticRegressionBinaryTrainer to LbfgsLogisticRegressionTrainer","State":"open","Body":"Fix #3016 by renaming `LogisticRegressionBinaryTrainer` to `LbfgsLogisticRegressionTrainer`. Note that for multiclass case, we have `LbfgsMaximumEntropyTrainer`. In addition, as [SDCA (aka dual coordinate descent methods) outperforms L-BFGS](https://www.csie.ntu.edu.tw/~cjlin/papers/maxent_dual.pdf) when training logistic regression models, we should not make L-BFGS looks like the default trainer of logistic regression model.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3034","RelatedDescription":"Open PR \"Rename LogisticRegressionBinaryTrainer to LbfgsLogisticRegressionTrainer\" (#3034)"},{"Id":"423022848","IsPullRequest":true,"CreatedAt":"2019-03-20T01:18:30","Actor":"codemzs","Number":"3032","RawContent":null,"Title":"Add cancellation checkpoint in logistic regression.","State":"open","Body":"fixes #3031\r\n\r\nPlease read the issue before reviewing this PR.","Url":"https://github.com/dotnet/machinelearning/pull/3032","RelatedDescription":"Open PR \"Add cancellation checkpoint in logistic regression.\" (#3032)"},{"Id":"423022552","IsPullRequest":false,"CreatedAt":"2019-03-20T01:17:14","Actor":"codemzs","Number":"3031","RawContent":null,"Title":"Cancellation checkpoints in LogisticRegression","State":"open","Body":"**Goal:**\r\nImplement a way to a cancel Logistic Regression training during runtime without impacting the performance too much.\r\n\r\n**Solution proposal:**\r\nIdentify code paths that are CPU intensive such as tight loops and place a check in them for cancellation signal. \r\n\r\nBelow is the performance graphs of Logistic Regression run from [this ](https://github.com/dotnet/machinelearning/blob/3af9a5d96ade88e888894af23baef8fe4598f826/docs/samples/Microsoft.ML.Samples/Dynamic/LogisticRegression.cs#L8) example. The graph will have a function selected and red stripes indicate the position in the graph it is called.\r\n\r\n![image](https://user-images.githubusercontent.com/1211949/54652127-f0e86500-4a72-11e9-9fad-8fd034ee2a5f.png)\r\n\r\nThe checkpoint should be at `cursor.MoveNext()` in `TrainCore` method. As we can see in the graph this function is called periodically in the training process. Everything before this is CPU cycles consumed by the transforms and it is not related to Logistic Regression training cycles.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3031","RelatedDescription":"Open issue \"Cancellation checkpoints in LogisticRegression\" (#3031)"},{"Id":"423022083","IsPullRequest":true,"CreatedAt":"2019-03-20T01:14:59","Actor":"wschin","Number":"3030","RawContent":null,"Title":"Polish train catalog (renaming only)","State":"open","Body":"Related to #3029 (for StandardTrainersCatalog.cs) but for TrainCatalog.cs.\r\n\r\n- Rename `topK` to `topPredictionCount`\r\n- Rename `k` to `falsePositiveCount`","Url":"https://github.com/dotnet/machinelearning/pull/3030","RelatedDescription":"Open PR \"Polish train catalog (renaming only)\" (#3030)"},{"Id":"423015452","IsPullRequest":true,"CreatedAt":"2019-03-20T00:40:59","Actor":"codemzs","Number":"3028","RawContent":null,"Title":"Add cancellation signal checkpoints in FastTree.","State":"open","Body":"fixes #3027\r\n\r\nPlease read the issue before reviewing this PR.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3028","RelatedDescription":"Open PR \"Add cancellation signal checkpoints in FastTree.\" (#3028)"},{"Id":"423014771","IsPullRequest":false,"CreatedAt":"2019-03-20T00:37:39","Actor":"codemzs","Number":"3027","RawContent":null,"Title":"Cancellation checkpoints in FastTree","State":"open","Body":"**Goal:**\r\nImplement a way to a cancel FastTree training during runtime without impacting the performance too much.\r\n\r\n**Solution proposal:**\r\nIdentify code paths that are CPU intensive such as tight loops and place a check in them for cancellation signal. \r\n\r\nBelow are the performance graphs of FastTree run from [this ](https://github.com/dotnet/machinelearning/blob/c38f81b3957fed6aa88ea0e6b295522d5bf3f9ec/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/Regression/FastTree.cs#L12) example. The graph will have a function selected and red stripes indicate the position in the graph it is called.\r\n\r\nThe first checkpoint would be **`InitializeBins`** as evident from the below graph. We see before training there is the data prep step that is CPU intensive. In this step transpose of the dataset is created in-memory and binning of features is done. \r\n\r\n![image](https://user-images.githubusercontent.com/1211949/54650437-c646de00-4a6b-11e9-860e-c92b014b4105.png)\r\n\r\nThe second place would be somewhere in the Feature Flock creation. Here we think `CreateFlocksCore` would be ideal. Based on the below graph.\r\n\r\n![image](https://user-images.githubusercontent.com/1211949/54650452-db237180-4a6b-11e9-9aa1-9584d8732b3c.png)\r\n\r\n\r\nThe third place would be at `FeatureHistogram` ctr called by `CreateSufficientStats`. This function is called by constructor of `LeastSquaresRegressionTreeLearner` within a loop that creates `CreateSufficientStats`. We will just place a checkpoint in this loop.\r\n\r\n![image](https://user-images.githubusercontent.com/1211949/54650724-0c507180-4a6d-11e9-9ac2-7708ba680e6f.png)\r\n\r\nThe last place would be somewhere we do the splitting of the nodes and partitioning of the data to construct the tree. We see that **`FindBestThresholdForFlockThreadWorker()`** seems to be a good place to check for cancellation signal as it seems to consume bulk of CPU cycles as evident from the red stripes in the graph. We can also place the checkpoints into the functions that it calls such as `FindBestThresholdFromHistogram`, `Sumup`, `SubtractCore`, `FillSplitCandidates`, `FindBestSplitForFeature` but I think place checks in the inner function could degrade the performance. \r\n\r\n![image](https://user-images.githubusercontent.com/1211949/54649487-a7464d00-4a67-11e9-9253-2a20b9ddb67e.png)\r\n\r\nCC: @TomFinley , @eerhardt , @shauheen , @glebuk \r\n","Url":"https://github.com/dotnet/machinelearning/issues/3027","RelatedDescription":"Open issue \"Cancellation checkpoints in FastTree\" (#3027)"},{"Id":"422997963","IsPullRequest":true,"CreatedAt":"2019-03-19T23:25:23","Actor":"codemzs","Number":"3026","RawContent":null,"Title":"Add cancellation checkpoints in SDCA.","State":"open","Body":"fixes #3024\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3026","RelatedDescription":"Open PR \"Add cancellation checkpoints in SDCA.\" (#3026)"},{"Id":"422997644","IsPullRequest":false,"CreatedAt":"2019-03-19T23:24:09","Actor":"TomFinley","Number":"3025","RawContent":null,"Title":"About models, ITransform, and IDataLoader, saving/loading","State":"open","Body":"So, I had a conversation with @eerhardt and @yaeldekel, about the nature of models, in particular relating to the saving and loading routines. This is very important for us to get right, since the artifacts of what we learn and how we transform data, and their persistability, is probably the most important thing we have to do correctly.\r\n\r\nWe take the view initially that the model is the `ITransformer` (note that a chain of `ITransformer`s is itself an `ITransformer`). But, by itself this is an insufficient description, was we saw in in #2663 and its subsequent \"child\" #2735, from the point of view of model being practically \"the stuff you need to keep,\" there's a lot more to a machine learning model than merely just the `ITransformer` chain -- you also need to preserve some notion of what the input is to that. So we added these things to take either a loader, or the input schema, to be saved as part of the model.\r\n\r\nYet, is the loader a model itself? Sometimes that's precisely what we call it:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/c38f81b3957fed6aa88ea0e6b295522d5bf3f9ec/src/Microsoft.ML.Data/Model/ModelOperationsCatalog.cs#L36\r\n\r\nAnd in the same file we call it something else:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/c38f81b3957fed6aa88ea0e6b295522d5bf3f9ec/src/Microsoft.ML.Data/Model/ModelOperationsCatalog.cs#L65\r\n\r\nIt is a model in one sense because it is yet another things that takes input data and produces output data -- the fact that `ITransformer` does it specifically over `IDataView` as input *specifically* does not give it some magical, special status to allow it to be called a model, and yet not. If I take a loader, and append a transform to it, then the whole aggregate thing is *still* a loader. If it isn't a model, it only isn't one by the mere skin of its teeth. Hence the presence of the original thing, and why we have in the model operations catalog operations to save and load `IDataLoader` itself specifically.\r\n\r\nBut at the same time this duality of the term \"model\" is, as I understand @eerhardt, confusing. We have two things we're calling model. In an ideal world, I feel like if we *can* get away with just one story of what the model is, we should take it, and if there must be only one it must be `ITransformer`. We even have the situation where if you have `mlContext.Model.Save(`, the first thing that pops up is the `IDataLoader` thing, which is kind of strange.\r\n\r\nI am not quite sure what I think, since in this case I agree with whoever talks to me last with an even a vaguely convincing argument. But I think in this case I will see about getting rid of the `IDataLoader`-only APIs -- people can, if it is important, continue to save and load such things by using empty `ITransformer` chains (again, any chain of `ITransformer` is itself an `ITransformer`, including the empty chain).\r\n\r\nSince we are approaching v1, I view it as a bit more important to be conservative w.r.t. potentially confusing additions to the API, especially around something as central as the saving and loading of models. We might be able to add it back later if there's some really compelling scenario for them, that we somehow did not anticipate.\r\n\r\nWe will of course retain the saving and loading of transformers *with* loaders, since that is really important to be able to capture, but I think being consistent around the story that \"models are transformers\" as we are most places is kind of important.","Url":"https://github.com/dotnet/machinelearning/issues/3025","RelatedDescription":"Open issue \"About models, ITransform, and IDataLoader, saving/loading\" (#3025)"},{"Id":"422993685","IsPullRequest":false,"CreatedAt":"2019-03-19T23:08:26","Actor":"codemzs","Number":"3024","RawContent":null,"Title":"Cancellation checkpoint in StochasticDualCoordinateAscent ","State":"open","Body":"**Goal:**\r\nImplement a way to a cancel SDCA training during runtime without impacting the performance too much.\r\n\r\n**Solution proposal:**\r\nIdentify code paths that are CPU intensive such as tight loops and place a check in them for cancellation signal. \r\n\r\nBelow is the performance graph of SDCA run from [this ](https://github.com/dotnet/machinelearning/blob/c38f81b3957fed6aa88ea0e6b295522d5bf3f9ec/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/Regression/StochasticDualCoordinateAscent.cs#L9)example.\r\n\r\n![image](https://user-images.githubusercontent.com/1211949/54647615-63037e80-4a60-11e9-9c91-a24c1cb5728f.png)\r\n\r\nWe see that **MoveNext() in TrainWithoutLock** seems to be a good place to check for cancellation signal as it seems to consume bulk of CPU cycles as evident from the red stripes in the graph.\r\n\r\nThe second checkout point would be **CheckConvergence** as evident from the below graph (look for red stripes):\r\n\r\n![image](https://user-images.githubusercontent.com/1211949/54647749-fdfc5880-4a60-11e9-8ec6-aec689a7abb1.png)\r\n\r\nCC: @TomFinley , @eerhardt , @shauheen , @glebuk \r\n","Url":"https://github.com/dotnet/machinelearning/issues/3024","RelatedDescription":"Open issue \"Cancellation checkpoint in StochasticDualCoordinateAscent \" (#3024)"},{"Id":"422991070","IsPullRequest":true,"CreatedAt":"2019-03-19T22:58:28","Actor":"singlis","Number":"3023","RawContent":null,"Title":"Adds the openmp library to the MklRedist nuget package.","State":"open","Body":"Adds the openmp library to the MklRedist nuget package.\r\nFixes #3015\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3023","RelatedDescription":"Open PR \"Adds the openmp library to the MklRedist nuget package.\" (#3023)"},{"Id":"422989138","IsPullRequest":true,"CreatedAt":"2019-03-19T22:51:20","Actor":"eerhardt","Number":"3022","RawContent":null,"Title":"Move KeyType, VectorType and VBuffer to ML.DataView","State":"open","Body":"Fix #2986 \r\n\r\nEasiest to review commit-by-commit. Major changes:\r\n\r\n1. Moved the types into the ML.DataView assembly.\r\n2. Renamed KeyType and VectorType to have `DataViewType` suffixes.\r\n3. VBufferEditor had an \"internal-only\" option that is now public: `maxValuesCapacity`. This was needed so VBufferUtils could operate effectively. If VBufferUtils needs it, chances are someone else will need it.\r\n4. Removed VectorType's constructor that takes a `VectorType template`, and replaced it with a new constructor that takes an `ImmutableArray<int> dims`.","Url":"https://github.com/dotnet/machinelearning/pull/3022","RelatedDescription":"Open PR \"Move KeyType, VectorType and VBuffer to ML.DataView\" (#3022)"},{"Id":"422984304","IsPullRequest":true,"CreatedAt":"2019-03-19T22:34:03","Actor":"Ivanidzo4ka","Number":"3020","RawContent":null,"Title":"[WIP] Align with code in LightGBM for Categorical features","State":"open","Body":"Potentially fixes https://github.com/dotnet/machinelearning/issues/1625\r\nHonestly have no idea what I'm doing here, so I would appreciate any feedback.\r\n\r\nNeed tests.","Url":"https://github.com/dotnet/machinelearning/pull/3020","RelatedDescription":"Open PR \"[WIP] Align with code in LightGBM for Categorical features\" (#3020)"},{"Id":"422951696","IsPullRequest":true,"CreatedAt":"2019-03-19T21:01:12","Actor":"codemzs","Number":"3019","RawContent":null,"Title":"Rename Save API for DataLoader to SaveDataLoader.","State":"open","Body":"towards #2991\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3019","RelatedDescription":"Open PR \"Rename Save API for DataLoader to SaveDataLoader.\" (#3019)"},{"Id":"422949235","IsPullRequest":true,"CreatedAt":"2019-03-19T20:59:03","Actor":"codemzs","Number":"3018","RawContent":null,"Title":"Rename Save API for DataLoader to SaveDataLoader.","State":"closed","Body":"towards #2991\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3018","RelatedDescription":"Closed or merged PR \"Rename Save API for DataLoader to SaveDataLoader.\" (#3018)"},{"Id":"422944550","IsPullRequest":true,"CreatedAt":"2019-03-19T20:44:37","Actor":"zeahmed","Number":"3017","RawContent":null,"Title":"[WIP] TT Template for managing samples...","State":"open","Body":"As we are going along with making sample standalone, I have been observing that there is a lot of code duplication in the sample. I am proposing to use tt template for managing our samples.\r\n\r\nThe code in this PR shows how to make a template for samples to reduce the copy-paste of common code as well as minimize the code to review every time someone pushes a sample.\r\n\r\nPlease do not merge this PR. I have already tagged it as WIP.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3017","RelatedDescription":"Open PR \"[WIP] TT Template for managing samples...\" (#3017)"},{"Id":"422933332","IsPullRequest":false,"CreatedAt":"2019-03-19T20:17:54","Actor":"wschin","Number":"3016","RawContent":null,"Title":"The \"Binary\" in \"LogisticRegressionBInaryTrainer\" Looks Redundant","State":"open","Body":"As title. Logistic regression is clearly a binary classifier, so we can consider dropping \"Binary\" among \"LogisticRegressionBinaryTrainer\".","Url":"https://github.com/dotnet/machinelearning/issues/3016","RelatedDescription":"Open issue \"The \"Binary\" in \"LogisticRegressionBInaryTrainer\" Looks Redundant\" (#3016)"},{"Id":"422896100","IsPullRequest":false,"CreatedAt":"2019-03-19T18:47:48","Actor":"singlis","Number":"3015","RawContent":null,"Title":"Missing libompd library for MklRedist nuget","State":"open","Body":"### Issue\r\nWith the latest changes to add openmp back with mkl, the libompd library for windows needs to be packaged as part of the MklRedist nuget package.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3015","RelatedDescription":"Open issue \"Missing libompd library for MklRedist nuget\" (#3015)"},{"Id":"422888031","IsPullRequest":false,"CreatedAt":"2019-03-19T18:28:48","Actor":"eyadek","Number":"3014","RawContent":null,"Title":"Can't find CollectionDataSource class ","State":"open","Body":"### System information\r\n\r\n- **OS Windows**\r\n- **.NET Version 4.7.2**: \r\n\r\n### Issue\r\n\r\nHi, I'm using ML.NET 0.11 in an ASP.Net MVC 5 Web App. the .Net version is 4.7.2 and I can use the CollectionDataSource to load data from list to the pipeline. How can I use it?\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3014","RelatedDescription":"Open issue \"Can't find CollectionDataSource class \" (#3014)"},{"Id":"422877546","IsPullRequest":false,"CreatedAt":"2019-03-19T18:05:05","Actor":"artidoro","Number":"3013","RawContent":null,"Title":"All transforms extensions should be tested","State":"open","Body":"PR #2959 introduces new extensions and internalizes all the ones that rely on `ColumnOptions`.\r\nMost new extensions call the same constructor as the ones that were made internal. \r\n\r\nHowever, it would be best to make sure that all transforms extensions are being used in some tests.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3013","RelatedDescription":"Open issue \"All transforms extensions should be tested\" (#3013)"},{"Id":"422874003","IsPullRequest":false,"CreatedAt":"2019-03-19T17:57:11","Actor":"vinodshanbhag","Number":"3012","RawContent":null,"Title":"Need public constructor and settable properties on RegressionMetrics and their sibling classes ","State":"open","Body":"AutoML API returns Metric for each hypothesis it builds and runs.\r\nWhen data is small autoML API internally does cross validate (instead of train validate) and the metric it wants to return is the average of the metric from training each fold.\r\nCurrently it is not possible to build a new metric object and populate it with average values since the RegressionMetric and their siblings etc don't have public constructor.\r\n\r\nCan we please provide a public constructor to these Metric classes?\r\nIt will be great if we can accomadate for 0.12 release.\r\n\r\n@TomFinley @shauheen  \r\n","Url":"https://github.com/dotnet/machinelearning/issues/3012","RelatedDescription":"Open issue \"Need public constructor and settable properties on RegressionMetrics and their sibling classes \" (#3012)"},{"Id":"422864934","IsPullRequest":true,"CreatedAt":"2019-03-19T17:37:22","Actor":"yaeldekel","Number":"3011","RawContent":null,"Title":"Fix bug in TextLoader","State":"open","Body":"Fixes #2996.","Url":"https://github.com/dotnet/machinelearning/pull/3011","RelatedDescription":"Open PR \"Fix bug in TextLoader\" (#3011)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-03-21T05:30:34.792687Z","RunDurationInMilliseconds":699}