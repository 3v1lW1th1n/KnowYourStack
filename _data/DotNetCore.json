{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Entity Framework Core 2.1 Preview 2","PublishedOn":"2018-04-11T18:02:40+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today we’re releasing the second preview of EF Core 2.1, alongside .NET Core 2.1 Preview 2 and ASP.NET Core 2.1 Preview 2. Thank you so much to everyone who has tried our early builds and has helped...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-entity-framework-core-2-1-preview-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 2","PublishedOn":"2018-04-11T17:53:44+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 2. The release is now ready for broad testing, as we get closer to a final build within the next two to three months. We&#8217;d appreciate any feedback...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/","RawContent":null},{"Title":"Explore Azure Cosmos DB with .NET Core and MongoDB","PublishedOn":"2018-04-09T16:00:47+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Have you had to design general purpose &#8220;metadata&#8221; tables in your SQL database that basically store column names and values? Do you often serialize/de-serialize XML or JSON from your SQL...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/09/explore-cosmosdb-with-net-core-and-mongodb/","RawContent":null},{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":49,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7540206534","Type":"PullRequestEvent","CreatedAt":"2018-04-17T05:10:30","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17505","RelatedDescription":"Merged pull request \"Enable support DllImport a native assembly whose name contains '.'\" (#17505) at dotnet/coreclr","RelatedBody":"Currently, In Windows, if the name your native dll specified in DllImport contains '.', such as Test.Foo, DllImport will only search for file Test.Foo and it won't search for file Test.Foo.dll\r\n\r\nThe fix is to append \".dll\" if the native dll name specified in DllImport doesn't contain \".dll\" .\r\n\r\nFix #17150"},{"Id":"7540206522","Type":"IssuesEvent","CreatedAt":"2018-04-17T05:10:30","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17150","RelatedDescription":"Closed issue \"Not possible to DllImport a native assembly with a \".\" in its file name\" (#17150) at dotnet/coreclr","RelatedBody":"Since our tooling doesn't support customers to compile for each OS, it currently isn't possible to name a native assembly using namespace names, like \"Microsoft.Foo.Bar\", and use the assembly in a `DllImport` successfully on both Windows and non-Windows.\r\n\r\n## Repro:\r\nCreate a native assembly named `Test.Foo`.  On Windows it is named `Test.Foo.dll`.  On Linux it is named `Test.Foo.so`.  On macOS it is named `Test.Foo.dylib`.\r\n\r\nIt is not possible to create a C# `DllImport` into this native assembly from a single managed assembly.\r\n\r\nOn Windows, if you use:\r\n\r\n```C#\r\n        internal const string NativePath = \"Test.Foo\";\r\n\r\n        [DllImport(NativePath)]\r\n        public static extern bool Bar();\r\n```\r\n\r\nYou get an error:\r\n\r\n`System.DllNotFoundException : Unable to load DLL 'Test.Foo': The specified module could not be found. (Exception from HRESULT: 0x8007007E)`\r\n\r\nSo you need to use `Test.Foo.dll` in order for Windows to load it.\r\n\r\nHowever, doing this causes it to fail on non-Windows.  On non-Windows if you use:\r\n\r\n```C#\r\n        internal const string NativePath = \"Test.Foo.dll\";\r\n\r\n        [DllImport(NativePath)]\r\n        public static extern bool Bar();\r\n```\r\n\r\nYou get the error:\r\n\r\n`System.DllNotFoundException: Unable to load shared library 'Test.Foo.dll' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: libTest.Foo.dll: cannot open shared object file: No such file or directory`\r\n\r\nUsing `strace`, it shows that we are not stripping the `.dll` off of the name during probing:\r\n\r\n```\r\nopen(\"/mnt/shared/TestML/runtimes/linux-x64/native/Test.Foo.dll.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/home/eerhardt/dotnet/shared/Microsoft.NETCore.App/2.1.0-preview3-26322-05/Test.Foo.dll.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/mnt/shared/TestML/Test.Foo.dll.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 82\r\nfstat(82, {st_mode=S_IFREG|0644, st_size=95952, ...}) = 0\r\nmmap(NULL, 95952, PROT_READ, MAP_PRIVATE, 82, 0) = 0x7ff76fd9f000\r\nclose(82)                               = 0\r\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\r\nopen(\"/lib/x86_64-linux-gnu/Test.Foo.dll.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/lib/x86_64-linux-gnu/Test.Foo.dll.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/lib/Test.Foo.dll.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/lib/Test.Foo.dll.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nmunmap(0x7ff76fd9f000, 95952)           = 0\r\nopen(\"/mnt/shared/TestML/runtimes/linux-x64/native/libTest.Foo.dll.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/home/eerhardt/dotnet/shared/Microsoft.NETCore.App/2.1.0-preview3-26322-05/libTest.Foo.dll.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/mnt/shared/TestML/libTest.Foo.dll.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 82\r\nfstat(82, {st_mode=S_IFREG|0644, st_size=95952, ...}) = 0\r\nmmap(NULL, 95952, PROT_READ, MAP_PRIVATE, 82, 0) = 0x7ff76fd9f000\r\nclose(82)                               = 0\r\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\r\nopen(\"/lib/x86_64-linux-gnu/libTest.Foo.dll.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/lib/x86_64-linux-gnu/libTest.Foo.dll.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/lib/libTest.Foo.dll.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/lib/libTest.Foo.dll.so\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nmunmap(0x7ff76fd9f000, 95952)           = 0\r\nopen(\"/mnt/shared/TestML/runtimes/linux-x64/native/Test.Foo.dll\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/home/eerhardt/dotnet/shared/Microsoft.NETCore.App/2.1.0-preview3-26322-05/Test.Foo.dll\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/mnt/shared/TestML/Test.Foo.dll\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 82\r\nfstat(82, {st_mode=S_IFREG|0644, st_size=95952, ...}) = 0\r\nmmap(NULL, 95952, PROT_READ, MAP_PRIVATE, 82, 0) = 0x7ff76fd9f000\r\nclose(82)                               = 0\r\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\r\nopen(\"/lib/x86_64-linux-gnu/Test.Foo.dll\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/lib/x86_64-linux-gnu/Test.Foo.dll\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/lib/Test.Foo.dll\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/lib/Test.Foo.dll\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nmunmap(0x7ff76fd9f000, 95952)           = 0\r\nopen(\"/mnt/shared/TestML/runtimes/linux-x64/native/libTest.Foo.dll\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/home/eerhardt/dotnet/shared/Microsoft.NETCore.App/2.1.0-preview3-26322-05/libTest.Foo.dll\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/mnt/shared/TestML/libTest.Foo.dll\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 82\r\nfstat(82, {st_mode=S_IFREG|0644, st_size=95952, ...}) = 0\r\nmmap(NULL, 95952, PROT_READ, MAP_PRIVATE, 82, 0) = 0x7ff76fd9f000\r\nclose(82)                               = 0\r\naccess(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)\r\nopen(\"/lib/x86_64-linux-gnu/libTest.Foo.dll\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/lib/x86_64-linux-gnu/libTest.Foo.dll\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/lib/libTest.Foo.dll\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nopen(\"/usr/lib/libTest.Foo.dll\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\nmunmap(0x7ff76fd9f000, 95952)           = 0\r\n```\r\n\r\n## Possible solution\r\n\r\nWe could add another variation on non-Windows that stripped the `.dll` off of the library name, and then append `.so` or `.dylib` to it.  This would allow the name `Test.Foo.dll` to work on all currently supported platforms.\r\n\r\n/cc @jkotas @stephentoub "},{"Id":"7540092539","Type":"PullRequestEvent","CreatedAt":"2018-04-17T04:24:20","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17602","RelatedDescription":"Opened pull request \"Add missing FlushInstructionCache to ResetTargetInterlocked\" (#17602) at dotnet/coreclr","RelatedBody":"Not sure if it's necessary considering the interlocked operation, but it's there in Precode::SetTargetInterlocked so I assume it's necessary. Probably no issue anyway, it's unlikely that call counting won't be done as a result of the instruction cache. No change to perf. On arm32 and arm64 executable code is not changed, so no need for the flush there."},{"Id":"7539557900","Type":"PullRequestEvent","CreatedAt":"2018-04-17T01:14:22","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17513","RelatedDescription":"Merged pull request \"[X86] Fix cross toolchain library paths\" (#17513) at dotnet/coreclr","RelatedBody":"\t- fix internal tests building\r\n\r\n@dotnet/arm32-contrib please review"},{"Id":"7539556479","Type":"PullRequestEvent","CreatedAt":"2018-04-17T01:13:52","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17595","RelatedDescription":"Merged pull request \"[Arm64] Add memory barrier after interlocked operations\" (#17595) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/coreclr/issues/17591"},{"Id":"7539556466","Type":"IssuesEvent","CreatedAt":"2018-04-17T01:13:51","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17591","RelatedDescription":"Closed issue \"[Arm64] Interlocked operations in the runtime need an additional memory barrier\" (#17591) at dotnet/coreclr","RelatedBody":"The issue is explained in the discussion of PR https://github.com/dotnet/coreclr/pull/17508:\r\n- https://github.com/dotnet/coreclr/pull/17508#issuecomment-381305227\r\n- https://github.com/dotnet/coreclr/pull/17508#issuecomment-381405138\r\n\r\nThe extra memory barrier is necessary to guarantee that the store from the interlocked operation occurs before a load following the interlocked operation.\r\n\r\nhttps://github.com/dotnet/coreclr/pull/17567 fixes the issue in the JIT, which was seen in https://github.com/dotnet/coreclr/issues/17178.\r\n\r\nThis issue is to track a similar change to the runtime."},{"Id":"7539553515","Type":"PullRequestEvent","CreatedAt":"2018-04-17T01:12:48","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17589","RelatedDescription":"Merged pull request \"Move master to 2.2-preview1\" (#17589) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7539548640","Type":"IssuesEvent","CreatedAt":"2018-04-17T01:11:07","Actor":"shanselman","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9083","RelatedDescription":"Opened issue \"Microsoft.NET.Build.Tasks.ResolvePackageAssets\" task could not be loaded - 2.1.300-preview2-008530\" (#9083) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nI upgraded my .NET 2.1 Preview 1 site to Preview 2 and I'm unable to load the Test Project in VSCode/OmniSharp running code/dotnet/omnisharp under **2.1.300-preview2-008530**\r\n\r\n```\r\n[info]: OmniSharp.MSBuild.ProjectManager\r\n        Loading project: d:\\github\\hanselminutes-core\\hanselminutes.core.tests\\hanselminutes.core.tests.csproj\r\n[fail]: OmniSharp.MSBuild.ProjectLoader\r\n        The \"Microsoft.NET.Build.Tasks.ResolvePackageAssets\" task could not be loaded from the assembly C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008530\\Sdks\\Microsoft.NET.Sdk\\targets\\..\\tools\\net46/Microsoft.NET.Build.Tasks.dll.  Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n[warn]: OmniSharp.MSBuild.ProjectManager\r\n        Failed to load project file 'd:\\github\\hanselminutes-core\\hanselminutes.core.tests\\hanselminutes.core.tests.csproj'.\r\n\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\nD:\\github\\hanselminutes-core>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview2-008530\r\n Commit:    822ae6d43a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17133\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008530\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview2-26406-04\r\n  Commit:  6833f3026b\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0-preview1-005077 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2-vspre-006949 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.1-preview-007118 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.1 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview1-008174 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview2-008530 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26406-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n```\r\n\r\n\r\n\r\n[omnisharp.log](https://github.com/dotnet/cli/files/1917781/omnisharp.log)\r\n"},{"Id":"7539142025","Type":"IssuesEvent","CreatedAt":"2018-04-16T22:55:10","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9082","RelatedDescription":"Closed issue \"Error on PackAsTool when target framework is lower than netcoreapp2.1\" (#9082) at dotnet/cli","RelatedBody":"https://github.com/dotnet/cli/issues/9073#issuecomment-381771163"},{"Id":"7539092589","Type":"IssuesEvent","CreatedAt":"2018-04-16T22:40:46","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9082","RelatedDescription":"Opened issue \"Error on PackAsTool when target framework is lower than netcoreapp2.1\" (#9082) at dotnet/cli","RelatedBody":"https://github.com/dotnet/cli/issues/9073#issuecomment-381771163"},{"Id":"7538975222","Type":"PullRequestEvent","CreatedAt":"2018-04-16T22:09:56","Actor":"kasper3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9081","RelatedDescription":"Opened pull request \"Update dotnet manpages for Unix\" (#9081) at dotnet/cli","RelatedBody":"@nguerrera, @livarcocc, @omajid \r\n\r\nran the script from https://github.com/dotnet/cli/pull/8938#issue-178419267 to update manpages for RC."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7537003851","Type":"IssuesEvent","CreatedAt":"2018-04-16T15:45:42","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/708","RelatedDescription":"Opened issue \"Wrong reference path in NETStandard.Library.targets\" (#708) at dotnet/standard","RelatedBody":"@cannehag commented on [Thu Apr 12 2018](https://github.com/dotnet/core/issues/1440)\n\n# After installing NetStandard.Library 2.0.2, a lot of warning occur.\r\nNetStandard.Library.targets 2.0.2 have \r\n<Reference Include=\"$(MSBuildThisFileDirectory)\\ref\\Microsoft.Win32.Primitives.dll...\r\nAccording to documentation MSBuildThisFileDirectory will include a final slash, thus giving a path with double slash and the error message \r\nThe referenced component 'C:\\Users\\xxx\\.nuget\\packages\\netstandard.library\\2.0.2\\build\\netstandard2.0\\\\ref\\Microsoft.Win32.Primitives.dll could not be found'\r\n\r\nVersion 2.0.1 does not have this issue since the targets file is including *.dll from another path\r\n<ReferenceCopyLocalPaths Condition=\"'$(_NetStandardLibraryLibPath)' != ''\" Include=\"$(_NetStandardLibraryLibPath)*.dll\">\r\n\n\n---\n\n@elementalpete commented on [Mon Apr 16 2018](https://github.com/dotnet/core/issues/1440#issuecomment-381640157)\n\nI experienced the same issue after upgrading (path in warning message contains a double slash, actual path has only a single slash).  Downgrading to 2.0.1 solved the issue for now.\n\n"},{"Id":"7520936673","Type":"IssuesEvent","CreatedAt":"2018-04-12T15:42:33","Actor":"akaylh","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/707","RelatedDescription":"Opened issue \"Need DbProviderFactories\" (#707) at dotnet/standard","RelatedBody":"DbProviderFactories is very  important feature,Please support in standard.\r\nBTW I know already in .net core 2.1."},{"Id":"7516946311","Type":"PullRequestEvent","CreatedAt":"2018-04-12T00:40:56","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/700","RelatedDescription":"Merged pull request \"Update BuildTools to preview3-02711-02 (master)\" (#700) at dotnet/standard","RelatedBody":""},{"Id":"7514495259","Type":"IssuesEvent","CreatedAt":"2018-04-11T15:51:18","Actor":"lmagyar","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/706","RelatedDescription":"Closed issue \"Failed assembly resolution in XAML workflow projects\" (#706) at dotnet/standard","RelatedBody":"**Situation:**\r\n* using VS 15.6.5\r\n* a net461 project uses old project format but the new PackageReference tag\r\n* the net461 project contains XAML Workflow Activity definitions\r\n* the net461 project refers directly to a netstandard2.0 NuGet package or refers to a net461 NuGet package that has references to netstandard projects, ie. it's a mixed environment\r\n  * indirect: Microsoft.Orleans.Core v1.5.3 (net461 project)\r\n  * direct: Orleans.Activities v0.4.0, Abp v3.4.0 (netstandard2.0 projects)\r\n\r\n**Problem:**\r\n* build warnings, that some (quite random) .dll-s has an incorrect format\r\n* it's only a warning, but the application really fails with `System.NotSupportedException: Expression Activity type 'CSharpValue'1' requires compilation in order to run.  Please ensure that the workflow has been compiled.`\r\n\r\nIn case of referring to Orleans.Activities NuGet pkg the build warnings:\r\n* `Could not compile workflow expressions because file 'file:///C:\\Users\\xxx\\.nuget\\packages\\system.reflection.typeextensions\\4.4.0\\ref\\net461\\System.Reflection.TypeExtensions.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n* `Could not run workflow validation because file 'System.Reflection.TypeExtensions, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n\r\nIn case of referring to Microsoft.Orleans.Core NuGet pkg the build warnings:\r\n* `Could not compile workflow expressions because file 'file:///C:\\Users\\xxx\\.nuget\\packages\\system.net.http\\4.3.0\\ref\\net46\\System.Net.Http.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n* `Could not run workflow validation because file 'System.Net.Http, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n\r\nIn case of referring to Abp NuGet pkg the build warnings:\r\n* `Could not compile workflow expressions because file 'file:///C:\\Users\\xxx\\.nuget\\packages\\system.runtime.compilerservices.unsafe\\4.4.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n* `Could not run workflow validation because file 'System.Runtime.CompilerServices.Unsafe, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n\r\n**Repros:**\r\n* see [developer community problem](https://developercommunity.visualstudio.com/content/problem/202765/failed-assembly-resolution-in-xaml-workflow-projec.html) though nobody cares about these reports...\r\n* [lmagyar/Orleans.Activities/tree/samples-xaml \"permalink\"](https://github.com/lmagyar/Orleans.Activities/tree/75f54b293bd06a1a71d4ce490e864117b7d5571d)\r\n  * **NOTE:** If you want to run the solution,\r\n    * there is another error #704, before running it, copy a netfx.force.conflicts.dll to the `Arithmetical.DevSiloHost` output dir\r\n    * first start manually `Arithmetical.DevSiloHost` wait 5s to start up, then start manually `Arithmetical.DevClusterClient`!\r\n\r\nreferring #704 #481 dotnet/sdk#1930\r\n\r\nI don't know whether dotnet/project-system is a better place for this issue?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7540222642","Type":"PullRequestEvent","CreatedAt":"2018-04-17T05:16:32","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29151","RelatedDescription":"Merged pull request \"Fix CS0177 when compiled on Mono\" (#29151) at dotnet/corefx","RelatedBody":"Since .NET Core compiles code using reference assemblies where all structs are empty so the following usages are fine:\r\n```\r\nbool Foo(out Guid id)\r\n{\r\n   return true; //id is not set but it's okay for empty structs\r\n}\r\n```\r\n\r\nBut it doesn't work on Mono (and .NET Framework). Similar to https://github.com/dotnet/corefx/pull/17432\r\n\r\n\r\n\r\n"},{"Id":"7539629411","Type":"PullRequestEvent","CreatedAt":"2018-04-17T01:39:12","Actor":"MisinformedDNA","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29154","RelatedDescription":"Opened pull request \"Add command line install\" (#29154) at dotnet/corefx","RelatedBody":""},{"Id":"7539621083","Type":"PullRequestEvent","CreatedAt":"2018-04-17T01:36:20","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28840","RelatedDescription":"Merged pull request \"Clean up dead code for System.Collections*\" (#28840) at dotnet/corefx","RelatedBody":"#17905 "},{"Id":"7539458369","Type":"PullRequestEvent","CreatedAt":"2018-04-17T00:38:40","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29153","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview3-26417-01, preview3-26416-04, respectively (master)\" (#29153) at dotnet/corefx","RelatedBody":""},{"Id":"7539343449","Type":"IssuesEvent","CreatedAt":"2018-04-16T23:58:48","Actor":"dotMorten","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29150","RelatedDescription":"Closed issue \"new SqlDouble(NaN) is only allowed on NETFX\" (#29150) at dotnet/corefx","RelatedBody":"SqlDouble has a weird platform difference:\r\n```cs\r\n        public SqlDouble(double value)\r\n        {\r\n#if !netfx\r\n            if (!double.IsFinite(value))\r\n#else\r\n            if (double.IsInfinity(value) || double.IsNaN(value))\r\n#endif\r\n            {\r\n                throw new OverflowException(SQLResource.ArithOverflowMessage);\r\n            }\r\n            else\r\n            {\r\n                m_value = value;\r\n                m_fNotNull = true;\r\n            }\r\n        }\r\n```\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Data.Common/src/System/Data/SQLTypes/SQLDouble.cs#L40\r\n\r\nThis means I can insert NaN values when using the .NET Framework, but when running the same code on a different platform, I get a crash here.\r\nEasy to reproduce:\r\n```\r\nnew SqlDouble(double.NaN); //Crashes on anything but NETFX\r\n```\r\n\r\nThis is rather problematic because NaN is commonly used in the SqlGeometry and SqlGeography datatypes to represent Z and M values, where for instance a line generally contains Z measurements, but on some vertices they might not be available. The behavior is described in [Microsoft SQL Server CLR Types Serialization Formats ](https://msdn.microsoft.com/en-us/library/ee320529(v=sql.105).aspx) on Page 9:\r\n\r\n![image](https://user-images.githubusercontent.com/1378165/38840339-f587cb66-4193-11e8-8ea6-ed0038daaded.png)\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7540121582","Type":"PullRequestEvent","CreatedAt":"2018-04-17T04:36:17","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26186","RelatedDescription":"Opened pull request \"Offer 'readonly' completion in type contexts\" (#26186) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\nType \"public\" then expect that you are offered a completion for \"readonly\", so you can type \"public readonly struct\". Prior to this PR, the completion was not offered.\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/26120\r\n\r\n### Workarounds, if any\r\nYou can always spell out \"readonly\" without completion help.\r\n\r\n### Risk & Performance impact\r\nLow. This follows the same pattern used for \"public\" and other similar keyword recommenders.\r\n\r\n### Is this a regression from a previous update?\r\nNo. \"readonly struct\" is a new feature in 15.7.\r\n\r\n### Root cause analysis\r\nThis was missed in the IDE test pass.\r\n\r\n### How was the bug found?\r\nReported by customer."},{"Id":"7540049123","Type":"PullRequestEvent","CreatedAt":"2018-04-17T04:06:19","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26185","RelatedDescription":"Opened pull request \"GoToImplementation: only include abstract symbols if they are types\" (#26185) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\nInvoke GoToImplementation on a method declared as abstract and with one implementation. The current behavior (since 15.6) is to list both the declaration and the implementation.\r\nSuch behavior makes sense for types, but not for methods/properties/etc.\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/26167\r\n\r\n### Workarounds, if any\r\nYou can still use GoToImplementation, but, in simple cases with a single implementation, you will have to click on a listing of two symbols, instead of directly being taken to the implementation.\r\n\r\n### Risk & Performance impact\r\nLow. This is adding a simple check when filtering down the list of implementation symbols.\r\n\r\n### Is this a regression from a previous update?\r\nYes. In 15.6, the rule for GoToImplementation was relaxed to include abstract symbols (https://github.com/dotnet/roslyn/pull/23360). This makes sense for type symbols, but as a customer reported, this doesn't make as much sense for other symbols, such as methods.\r\nThe impact is that in simple cases (where there is only one implementation), we're listing two locations, when one location is really not an implementation. Filtering down to just one location allows to jump directly to the implementation.\r\n\r\n### How was the bug found?\r\nReported by customer.\r\n\r\nTagging @CyrusNajmabadi @dotnet/roslyn-ide for review.\r\nTagging @jinujoseph for bar check. Any chance to fit this in 15.7? If not, I'll retarget to 15.8."},{"Id":"7539710826","Type":"PullRequestEvent","CreatedAt":"2018-04-17T02:07:16","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26130","RelatedDescription":"Merged pull request \"__arglist cannot have an argument passed by 'in' or 'out'\" (#26130) at dotnet/roslyn","RelatedBody":"Fixes #22455\r\n\r\ncc @VSadov @dotnet/roslyn-compiler "},{"Id":"7539603753","Type":"PullRequestEvent","CreatedAt":"2018-04-17T01:30:37","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26184","RelatedDescription":"Opened pull request \"Fixes mapping of active statement when changing ctor body from block to expression\" (#26184) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\n\r\nVS crashes when program is stopped at a breakpoint placed on the constructor declaration (not on its body) and the constructor body is changed from a block to an expression.\r\n\r\n### Bugs this fixes\r\n\r\n[VSO 590387](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/590387)\r\n\r\n### Workarounds, if any\r\n\r\nNone.\r\n\r\n### Risk\r\n\r\nSmall.\r\n\r\n### Performance impact\r\n\r\nSmall.\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nMissing unit test.\r\n\r\n### How was the bug found?\r\n\r\nCustomer reported.\r\n\r\n### Test documentation updated?\r\n"},{"Id":"7539352404","Type":"IssuesEvent","CreatedAt":"2018-04-17T00:01:41","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26183","RelatedDescription":"Opened issue \"flaky unit test \" (#26183) at dotnet/roslyn","RelatedBody":"test is failing with this\r\n\r\n    Roslyn.VisualStudio.Next.UnitTests.Remote.VisualStudioDiagnosticAnalyzerExecutorTests.TestCancellation\r\nSystem.InvalidOperationException: Should have been disposed!\r\n\r\n   en Microsoft.CodeAnalysis.ThrowingTraceListener.Fail(String message, String detailMessage)\r\n   en System.Diagnostics.TraceListener.Fail(String message)\r\n   en System.Diagnostics.TraceInternal.Fail(String message)\r\n   en System.Diagnostics.Debug.Assert(Boolean condition, String message)\r\n   en Roslyn.Utilities.Contract.Assert(Boolean condition, String message)\r\n   en Roslyn.Utilities.Contract.Requires(Boolean condition, String message)\r\n   en Microsoft.CodeAnalysis.Remote.RemoteHostClient.Connection.Finalize()\r\n"},{"Id":"7539179094","Type":"PullRequestEvent","CreatedAt":"2018-04-16T23:06:18","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26182","RelatedDescription":"Merged pull request \"Fix publish error\" (#26182) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7540237495","Type":"PullRequestEvent","CreatedAt":"2018-04-17T05:22:07","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5718","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5718) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7540216780","Type":"PullRequestEvent","CreatedAt":"2018-04-17T05:14:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5716","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5716) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7540215856","Type":"IssuesEvent","CreatedAt":"2018-04-17T05:14:01","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5717","RelatedDescription":"Opened issue \"Enable support DllImport a native assembly whose name contains '.'\" (#5717) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/pull/17505 to CoreRT"},{"Id":"7539502678","Type":"PullRequestEvent","CreatedAt":"2018-04-17T00:54:51","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5716","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5716) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7539499043","Type":"PullRequestEvent","CreatedAt":"2018-04-17T00:53:30","Actor":"ahsonkhan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5715","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5715) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7538883980","Type":"PullRequestEvent","CreatedAt":"2018-04-16T21:48:11","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5715","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5715) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7538723806","Type":"PullRequestEvent","CreatedAt":"2018-04-16T21:14:23","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5714","RelatedDescription":"Opened pull request \"[WIP] Conservative GC reporting test review\" (#5714) at dotnet/corert","RelatedBody":"This is the test used to test #5585 . The code path is reliably hit in a Debug build, but in a Release build the GC stack lower bound is not set in `StackFrameIterator`, which causes the upper bound calculation to not be called. \r\nTo emulate a Release build, I tested the changes above assuming no frame pointer. \r\nAny feedback or suggestions on a better approach would be welcome.\r\n\r\n@sergiy-k "},{"Id":"7538566719","Type":"IssuesEvent","CreatedAt":"2018-04-16T20:42:56","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5704","RelatedDescription":"Closed issue \"Unable to compile when using System.ServiceProcess.ServiceController\" (#5704) at dotnet/corert","RelatedBody":"Hey!\r\n\r\nI've been experimenting with the CoreRT for a while now and I'm attempting to compile a windows service to a native binary. The compilation goes through fine otherwise and I can run my code in non-service mode just fine, but when attempting to run it as a service I run into the following metadata marshaling issue:\r\n\r\n```\r\nFailed: EETypeRva:0x00A0F388: Interop+Advapi32+SERVICE_TABLE_ENTRY is missing structure marshalling data. To enable structure marshalling data, add a MarshalStructure directive to the application rd.xml file. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=393965\r\n   at agent!<BaseAddress>+0x1bbe9d\r\n   at System.Runtime.InteropServices.Marshal.SizeOf(Type) + 0x4e\r\n   at System.ServiceProcess.ServiceBase.Run(ServiceBase[]) + 0x62\r\n   at Agent.Windows.Program.Main(String[]) + 0x154\r\n```\r\n\r\nNow since `Interop.Advapi32` is imported via static reference from the common lib ([see here](https://github.com/dotnet/corefx/blob/master/src/System.ServiceProcess.ServiceController/src/System/ServiceProcess/ServiceBase.cs#L16)), I didn't find a way to allow MarshalStructure via rd.xml.\r\n\r\nThe first crash is at [line 603](https://github.com/dotnet/corefx/blob/master/src/System.ServiceProcess.ServiceController/src/System/ServiceProcess/ServiceBase.cs#L603) of ServiceBase and probably some other calls would crash as well.\r\n\r\nI'm guessing to fix this the best approach would be to refactor the `System.ServiceProcess.ServiceController` to be more AOT friendly, but as it stands I just don't have the time at this standing moment to figure out how to do a custom build nor the time to learn the code base well enough to patch it myself :(\r\n\r\nAny suggestions?\r\n"},{"Id":"7538433109","Type":"PullRequestEvent","CreatedAt":"2018-04-16T20:17:16","Actor":"tarekgh","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5711","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5711) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7538304373","Type":"IssuesEvent","CreatedAt":"2018-04-16T19:52:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5713","RelatedDescription":"Opened issue \"Bad code generated for GetType() in generic code with optimizations on\" (#5713) at dotnet/corert","RelatedBody":"Repro:\r\n\r\n```csharp\r\n// dotnet publish -r win-x64 -c Release\r\n\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void bar(Type t)\r\n    {\r\n        Console.WriteLine(t.ToString());\r\n    }\r\n\r\n    static void foo<T>(T t)\r\n    {\r\n        bar(t.GetType());\r\n    }\r\n\r\n    static void Main(string[] args)\r\n    {\r\n        foo(new DateTime());\r\n    }\r\n}\r\n```"},{"Id":"7537994783","Type":"IssuesEvent","CreatedAt":"2018-04-16T18:50:47","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/issues/5704","RelatedDescription":"Reopened issue \"Unable to compile when using System.ServiceProcess.ServiceController\" (#5704) at dotnet/corert","RelatedBody":"Hey!\r\n\r\nI've been experimenting with the CoreRT for a while now and I'm attempting to compile a windows service to a native binary. The compilation goes through fine otherwise and I can run my code in non-service mode just fine, but when attempting to run it as a service I run into the following metadata marshaling issue:\r\n\r\n```\r\nFailed: EETypeRva:0x00A0F388: Interop+Advapi32+SERVICE_TABLE_ENTRY is missing structure marshalling data. To enable structure marshalling data, add a MarshalStructure directive to the application rd.xml file. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=393965\r\n   at agent!<BaseAddress>+0x1bbe9d\r\n   at System.Runtime.InteropServices.Marshal.SizeOf(Type) + 0x4e\r\n   at System.ServiceProcess.ServiceBase.Run(ServiceBase[]) + 0x62\r\n   at Agent.Windows.Program.Main(String[]) + 0x154\r\n```\r\n\r\nNow since `Interop.Advapi32` is imported via static reference from the common lib ([see here](https://github.com/dotnet/corefx/blob/master/src/System.ServiceProcess.ServiceController/src/System/ServiceProcess/ServiceBase.cs#L16)), I didn't find a way to allow MarshalStructure via rd.xml.\r\n\r\nThe first crash is at [line 603](https://github.com/dotnet/corefx/blob/master/src/System.ServiceProcess.ServiceController/src/System/ServiceProcess/ServiceBase.cs#L603) of ServiceBase and probably some other calls would crash as well.\r\n\r\nI'm guessing to fix this the best approach would be to refactor the `System.ServiceProcess.ServiceController` to be more AOT friendly, but as it stands I just don't have the time at this standing moment to figure out how to do a custom build nor the time to learn the code base well enough to patch it myself :(\r\n\r\nAny suggestions?\r\n"},{"Id":"7537992428","Type":"IssuesEvent","CreatedAt":"2018-04-16T18:50:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5704","RelatedDescription":"Closed issue \"Unable to compile when using System.ServiceProcess.ServiceController\" (#5704) at dotnet/corert","RelatedBody":"Hey!\r\n\r\nI've been experimenting with the CoreRT for a while now and I'm attempting to compile a windows service to a native binary. The compilation goes through fine otherwise and I can run my code in non-service mode just fine, but when attempting to run it as a service I run into the following metadata marshaling issue:\r\n\r\n```\r\nFailed: EETypeRva:0x00A0F388: Interop+Advapi32+SERVICE_TABLE_ENTRY is missing structure marshalling data. To enable structure marshalling data, add a MarshalStructure directive to the application rd.xml file. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=393965\r\n   at agent!<BaseAddress>+0x1bbe9d\r\n   at System.Runtime.InteropServices.Marshal.SizeOf(Type) + 0x4e\r\n   at System.ServiceProcess.ServiceBase.Run(ServiceBase[]) + 0x62\r\n   at Agent.Windows.Program.Main(String[]) + 0x154\r\n```\r\n\r\nNow since `Interop.Advapi32` is imported via static reference from the common lib ([see here](https://github.com/dotnet/corefx/blob/master/src/System.ServiceProcess.ServiceController/src/System/ServiceProcess/ServiceBase.cs#L16)), I didn't find a way to allow MarshalStructure via rd.xml.\r\n\r\nThe first crash is at [line 603](https://github.com/dotnet/corefx/blob/master/src/System.ServiceProcess.ServiceController/src/System/ServiceProcess/ServiceBase.cs#L603) of ServiceBase and probably some other calls would crash as well.\r\n\r\nI'm guessing to fix this the best approach would be to refactor the `System.ServiceProcess.ServiceController` to be more AOT friendly, but as it stands I just don't have the time at this standing moment to figure out how to do a custom build nor the time to learn the code base well enough to patch it myself :(\r\n\r\nAny suggestions?\r\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7539289088","Type":"PullRequestEvent","CreatedAt":"2018-04-16T23:41:09","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2133","RelatedDescription":"Merged pull request \"Add back NuGetSourceType=Package metadata in package resolution\" (#2133) at dotnet/sdk","RelatedBody":"This was used in a few places to distinguish between refs coming from NuGet from others.\r\n\r\nIn particular, it caused all nuget refs to be copied to refs/folder on Build with PreserveCompilationContext=true.\r\n\r\nFix #2121"},{"Id":"7539071981","Type":"PullRequestEvent","CreatedAt":"2018-04-16T22:35:20","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2147","RelatedDescription":"Merged pull request \"Update the branding of the SDK to 2.2.100-preview1.\" (#2147) at dotnet/sdk","RelatedBody":""},{"Id":"7538105438","Type":"PullRequestEvent","CreatedAt":"2018-04-16T19:12:17","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2147","RelatedDescription":"Opened pull request \"Update the branding of the SDK to 2.2.100-preview1.\" (#2147) at dotnet/sdk","RelatedBody":""},{"Id":"7538092495","Type":"PullRequestEvent","CreatedAt":"2018-04-16T19:09:43","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2146","RelatedDescription":"Opened pull request \"Merge master into release/2.1.3xx\" (#2146) at dotnet/sdk","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"985915431499259904","CreatedAt":"2018-04-16T16:18:50+00:00","UserScreenname":"dotnet","Text":"Join our @csharpfritz and his pair-programming guest @fiercekittenz tomorrow for some LIVE CODING and discussion ab… https://t.co/Vll8gfdlKQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":5,"RawContent":null},{"Id":"984485381071450112","CreatedAt":"2018-04-12T17:36:20+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core 2.1.0-preview2 now available https://t.co/W0wBUDkqXt","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":89,"FavoriteCount":76,"RawContent":null},{"Id":"984130513383317505","CreatedAt":"2018-04-11T18:06:13+00:00","UserScreenname":"dotnet","Text":"Announcing Entity Framework Core 2.1 Preview 2 https://t.co/SS9hInyJlJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":124,"FavoriteCount":81,"RawContent":null},{"Id":"984127988592623616","CreatedAt":"2018-04-11T17:56:11+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 2.1 Preview 2 https://t.co/T8ah6NSIAq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":424,"FavoriteCount":254,"RawContent":null},{"Id":"983818840961269761","CreatedAt":"2018-04-10T21:27:44+00:00","UserScreenname":"dotnet","Text":"Explore CosmosDB with .NET Core and MongoDB https://t.co/9VeWPHkIKo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":111,"FavoriteCount":37,"RawContent":null},{"Id":"983697698778841088","CreatedAt":"2018-04-10T13:26:22+00:00","UserScreenname":"dotnet","Text":"Join our @csharpfritz with guest @jonskeet for some live coding this morning as they discuss managing DateTime valu… https://t.co/c6k5MACy5Z","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2018-04-17T05:30:21.0919017Z","RunDurationInMilliseconds":8331}