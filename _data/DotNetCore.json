{"Data":{"Blog":{"FeedItems":[{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2018-11-14T20:30:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,018 years. In the Japanese calendar, however, a new era begins...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/14/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null},{"Title":".NET Framework November 2018 Security and Quality Rollup","PublishedOn":"2018-11-14T00:24:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the November 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework September 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/13/net-framework-november-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET Core tooling update for Visual Studio 2017 version 15.9","PublishedOn":"2018-11-13T18:09:43+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Starting with Visual Studio 2017 version 15.9, we’ve changed how the Visual Studio tooling for .NET consumes .NET Core SDKs. Prior to this change, installing a preview version of the .NET Core SDK...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/13/net-core-tooling-update-for-visual-studio-2017-version-15-9/","RawContent":null},{"Title":"Cross-platform Time Zones with .NET Core","PublishedOn":"2018-11-13T18:00:21+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Developing applications that span multiple operating systems in .NET Core while working with Time Zone information can lead to unexpected results for developers not familiar with the differences in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/13/cross-platform-time-zones-with-net-core/","RawContent":null},{"Title":"Building C# 8.0","PublishedOn":"2018-11-13T00:00:02+00:00","CommentsCount":143,"FacebookCount":0,"Summary":"Building C# 8.0 The next major version of C# is C# 8.0. It&#8217;s been in the works for quite some time, even as we built and shipped the minor releases C# 7.1, 7.2 and 7.3, and I&#8217;m quite...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/12/building-c-8-0/","RawContent":null},{"Title":"Announcing ML.NET 0.7 (Machine Learning .NET)","PublishedOn":"2018-11-08T20:57:16+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We&#8217;re excited to announce today the release of ML.NET 0.7 &#8211; the latest release of the cross-platform and open source machine learning framework for .NET developers (ML.NET 0.1 was released...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/08/announcing-ml-net-0-7-machine-learning-net/","RawContent":null},{"Title":"Understanding the Whys, Whats, and Whens of ValueTask","PublishedOn":"2018-11-07T18:00:31+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"The .NET Framework 4 saw the introduction of the System.Threading.Tasks namespace, and with it the Task class. This type and the derived Task&#60;TResult&#62; have long since become a staple of .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/07/understanding-the-whys-whats-and-whens-of-valuetask/","RawContent":null},{"Title":"Announcing .NET Standard 2.1","PublishedOn":"2018-11-05T17:42:38+00:00","CommentsCount":107,"FacebookCount":0,"Summary":"Since we shipped .NET Standard 2.0 about a year ago, we&#8217;ve shipped two updates to .NET Core 2.1 and are about to release .NET Core 2.2. It&#8217;s time to update the standard to include some of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3673","PublishedOn":"2018-10-30T19:27:39+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"We are happy to share the next Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a single package that bundles the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/30/announcing-net-framework-4-8-early-access-build-3673/","RawContent":null},{"Title":"Bringing .NET application performance analysis to Linux","PublishedOn":"2018-10-24T21:36:02+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Both the Windows and Linux ecosystems have a swath of battle-hardened performance analysis and investigation tools. But up until recently, developers and platform engineers could use none of these...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/24/bringing-net-application-performance-analysis-to-linux/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8615388364","Type":"PullRequestEvent","CreatedAt":"2018-11-19T20:23:18","Actor":"pkgw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Opened pull request \"Update WorldWide Telescope\" (#118) at dotnet/foundation","RelatedBody":"Some layout fixes, but the main change is that @pkgw is now the project director."},{"Id":"8578587104","Type":"PullRequestEvent","CreatedAt":"2018-11-13T05:53:19","Actor":"leastprivilege","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Opened pull request \"Update identityserver.md\" (#117) at dotnet/foundation","RelatedBody":"significant whitespace"},{"Id":"8578321898","Type":"PullRequestEvent","CreatedAt":"2018-11-13T04:22:33","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Merged pull request \"Update identityserver.md\" (#114) at dotnet/foundation","RelatedBody":""},{"Id":"8573927252","Type":"PullRequestEvent","CreatedAt":"2018-11-12T13:30:25","Actor":"scottbrady91","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Opened pull request \"Update to IdentityManager project\" (#116) at dotnet/foundation","RelatedBody":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo."},{"Id":"8573265026","Type":"PullRequestEvent","CreatedAt":"2018-11-12T11:25:41","Actor":"leastprivilege","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Opened pull request \"Create identitymodel.md\" (#115) at dotnet/foundation","RelatedBody":""},{"Id":"8573235551","Type":"PullRequestEvent","CreatedAt":"2018-11-12T11:20:18","Actor":"leastprivilege","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Opened pull request \"Update identityserver.md\" (#114) at dotnet/foundation","RelatedBody":""},{"Id":"8520090559","Type":"PullRequestEvent","CreatedAt":"2018-11-01T16:20:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Merged pull request \"Update logo for couchbase-lite in projects.json\" (#113) at dotnet/foundation","RelatedBody":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser."},{"Id":"8448824845","Type":"PullRequestEvent","CreatedAt":"2018-10-19T12:44:07","Actor":"SeanKilleen","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Opened pull request \"Update logo for couchbase-lite in projects.json\" (#113) at dotnet/foundation","RelatedBody":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65"},{"Id":"8341294365","Type":"IssuesEvent","CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Opened issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112) at dotnet/foundation","RelatedBody":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8582735181","Type":"IssuesEvent","CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Opened issue \".NET Core November Update - 2.1.6 and SDK 2.1.500\" (#91) at dotnet/announcements","RelatedBody":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018[(https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8630652700","Type":"PullRequestEvent","CreatedAt":"2018-11-22T03:10:32","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21160","RelatedDescription":"Opened pull request \"[WIP] Combine 21149 and 21097 to try and get a dump of the arm64 failure\" (#21160) at dotnet/coreclr","RelatedBody":""},{"Id":"8630524084","Type":"PullRequestEvent","CreatedAt":"2018-11-22T02:25:16","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21159","RelatedDescription":"Opened pull request \"Queue ValueTaskAwaiter IAsyncStateMachineBox directly to ThreadPool\" (#21159) at dotnet/coreclr","RelatedBody":"https://github.com/dotnet/coreclr/pull/20308 introduced some ExecutionContext faster paths when executing from the ThreadPool. However when running ASP.NET Core (stripped Platform); these paths are not used as the ValueTask continuation is provided to Pipelines as a `Action<object>, object` pair.\r\n\r\nThis leads to the allocation of a `QueueUserWorkItemCallbackDefaultContext<TState>` per ThreadPool queue and a more involved execution path:\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/48877788-c6580980-edfc-11e8-9bd2-a13144ce4edf.png)\r\n\r\nWe can recognise the callback for a `ValueTaskAwaiter`'s AsyncStateMachineBox and instead queue directly to the ThreadPool both skipping the additional allocation and using the faster ExecutionContext path:\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/48877927-51390400-edfd-11e8-8749-dfd4330ea18d.png)\r\n\r\n/cc @davidfowl @stephentoub "},{"Id":"8630501295","Type":"PullRequestEvent","CreatedAt":"2018-11-22T02:16:54","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21158","RelatedDescription":"Opened pull request \"Update CoreClr to preview-27122-01 (master)\" (#21158) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"8630449326","Type":"PullRequestEvent","CreatedAt":"2018-11-22T01:57:51","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21157","RelatedDescription":"Opened pull request \"Delete System.AppDomainSetup\" (#21157) at dotnet/coreclr","RelatedBody":"Contributes to #21028"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8630172501","Type":"IssuesEvent","CreatedAt":"2018-11-22T00:11:25","Actor":"normj","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10297","RelatedDescription":"Closed issue \"Multi Targeting with Global Tools\" (#10297) at dotnet/cli","RelatedBody":"I'm looking for suggestions on how to handle multiple target frameworks. I have a tool that will be inspecting some target assemblies and I want the global tool to be using the same framework as the target assemblies were complied for.\r\n\r\nI had tried the following csproj file where I conditionally set the `ToolCommandName` based on the TFM\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFrameworks>netcoreapp2.1;netcoreapp2.2</TargetFrameworks>\r\n    <IsPackable>true</IsPackable>\r\n    <PackAsTool>true</PackAsTool>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(TargetFramework)' == 'netcoreapp2.1'\">\r\n    <ToolCommandName>dotnet-tfm-test-2.1</ToolCommandName>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(TargetFramework)' == 'netcoreapp2.2'\">\r\n    <ToolCommandName>dotnet-tfm-test-2.2</ToolCommandName>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nBut it looks like the ToolCommandName is not evaluated at build time but instead at pack time so in my nuget package the netcoreapp2.1 and netcoreapp2.2 file DotnetToolSettings.xml is setting command name to dotnet-tfm-test-2.2 for both the netcoreapp2.1 and netcoreapp2.2 version.\r\n\r\nSo far the best plan I have come up with is to create two different projects and publish two separate global tools. \r\n"},{"Id":"8629933535","Type":"PullRequestEvent","CreatedAt":"2018-11-21T22:50:33","Actor":"nkolev92","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10380","RelatedDescription":"Opened pull request \"Fix the dotnet nuget parsing\" (#10380) at dotnet/cli","RelatedBody":"Fixes https://github.com/NuGet/Home/issues/7519. \r\n\r\nWe added support for the --interactive flag in the dotnet nuget commands.\r\nhttps://github.com/NuGet/NuGet.Client/pull/2414\r\nhttps://github.com/NuGet/NuGet.Client/pull/2395\r\n\r\nWe didn't add the parsing logic in CLI. "},{"Id":"8629801814","Type":"PullRequestEvent","CreatedAt":"2018-11-21T22:13:16","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/10376","RelatedDescription":"Closed pull request \"zh-Hans misspelling \"推出\" to \"退出\"\" (#10376) at dotnet/cli","RelatedBody":"fix misspelling \"推出\" to \"退出\""},{"Id":"8629798942","Type":"PullRequestEvent","CreatedAt":"2018-11-21T22:12:29","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10370","RelatedDescription":"Merged pull request \"update dotnet-new-nunit dependency version\" (#10370) at dotnet/cli","RelatedBody":"Update dotnet-new-nunit dependency version to latest 1.6.0 (requested in https://github.com/nunit/dotnet-new-nunit/issues/18)\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8628628658","Type":"PullRequestEvent","CreatedAt":"2018-11-21T17:57:16","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/978","RelatedDescription":"Merged pull request \"Make sure Signing target finds packages to sign\" (#978) at dotnet/standard","RelatedBody":"This will fix a build error where we can't find any packages to sign. The problem was caused by me moving the `PackageOutputPath` property from `Directory.Build.props` to `Directory.Build.targets`, which was a workaround to allow us to continue outputting packages to the bin dir while using Arcade's packaging tasks. Once we're outputting packages to `artifacts`, we can revert this PR.\r\n\r\nCC @danmosemsft @JohnTortugo"},{"Id":"8626741279","Type":"PullRequestEvent","CreatedAt":"2018-11-21T13:11:28","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/979","RelatedDescription":"Merged pull request \"Update dependency files\" (#979) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18570.17\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18570.17\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18570.17\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18570.17\r\n\r\n"},{"Id":"8626683193","Type":"PullRequestEvent","CreatedAt":"2018-11-21T13:01:24","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/979","RelatedDescription":"Opened pull request \"Update dependency files\" (#979) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18570.17\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18570.17\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18570.17\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18570.17\r\n\r\n"},{"Id":"8623146917","Type":"PullRequestEvent","CreatedAt":"2018-11-20T22:38:08","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/978","RelatedDescription":"Opened pull request \"Make sure Signing target finds packages to sign\" (#978) at dotnet/standard","RelatedBody":"This will fix a build error where we can't find any packages to sign. The problem was caused by me moving the `PackageOutputPath` property from `Directory.Build.props` to `Directory.Build.targets`, which was a workaround to allow us to continue outputting packages to the bin dir while using Arcade's packaging tasks. Once we're outputting packages to `artifacts`, we can revert this PR.\r\n\r\nCC @danmosemsft "},{"Id":"8619716551","Type":"PullRequestEvent","CreatedAt":"2018-11-20T13:11:36","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/977","RelatedDescription":"Merged pull request \"Update dependency files\" (#977) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18569.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18569.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18569.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18569.4\r\n\r\n"},{"Id":"8619658782","Type":"PullRequestEvent","CreatedAt":"2018-11-20T13:01:30","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/977","RelatedDescription":"Opened pull request \"Update dependency files\" (#977) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18569.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18569.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18569.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18569.4\r\n\r\n"},{"Id":"8616736966","Type":"IssuesEvent","CreatedAt":"2018-11-20T01:40:49","Actor":"verb0se","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/976","RelatedDescription":"Opened issue \"Could not load file or assembly System.Configuration.ConfigurationManager\" (#976) at dotnet/standard","RelatedBody":"Upgrading some .NET Framework projects to Standard 2.0, I've installed the System.Configuration.ConfigurationManager package v4.5.0 via NuGet on all projects.  Getting the following error:\r\n\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'System.Configuration.ConfigurationManager, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\n  \r\nJust to see if the issue might have been due to something with the current solution, I created a new Standard 2.0 console app, installed the System.Configuration.ConfigurationManager package v4.5.0 via NuGet as the only dependency, and got the same error.\r\n\r\nFrom the deps.json file:\r\n\r\n\"System.Configuration.ConfigurationManager/4.5.0\": {\r\n        \"dependencies\": {\r\n          \"System.Security.Cryptography.ProtectedData\": \"4.5.0\",\r\n          \"System.Security.Permissions\": \"4.5.0\"\r\n        },\r\n        \"runtime\": {\r\n          \"lib/netstandard2.0/System.Configuration.ConfigurationManager.dll\": {\r\n            \"assemblyVersion\": \"4.0.1.0\",\r\n            \"fileVersion\": \"4.6.26515.6\"\r\n          }\r\n        }\r\n      }\r\n\r\nWe would like to use System.Configuration.ConfigurationManager with our upgrade but I can't seem to load it from a project \r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8630916978","Type":"PullRequestEvent","CreatedAt":"2018-11-22T04:57:32","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/33659","RelatedDescription":"Opened pull request \"Add more multi-segment JsonReader tests and set complex json value flag correctly.\" (#33659) at dotnet/corefx","RelatedBody":"Part of https://github.com/dotnet/corefx/issues/33584.\r\n\r\nImproved coverage from ~70% to ~80%."},{"Id":"8630895195","Type":"PullRequestEvent","CreatedAt":"2018-11-22T04:48:22","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/33658","RelatedDescription":"Opened pull request \"Pipelines to use UnsafeQueueUserWorkItem\" (#33658) at dotnet/corefx","RelatedBody":"`ExecutionContext` is handed externally by the scheduler\r\n\r\n/cc @pakrym @davidfowl @stephentoub "},{"Id":"8630889690","Type":"IssuesEvent","CreatedAt":"2018-11-22T04:45:55","Actor":"rahuldutta90","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/33582","RelatedDescription":"Closed issue \"Does FileInfo.Length always return the actual filelength of a file\" (#33582) at dotnet/corefx","RelatedBody":"I have a library targetting netcoreapp1.1. I have this code snippet:\r\n\r\n```c#\r\nDirectoryInfo dir = new DirectoryInfo(SourcePath);\r\nIEnumerable<FileInfo> enumFiles = dir.EnumerateFiles();\r\nforeach (var file in enumFiles)\r\n{\r\n    Use file.length\r\n}\r\n```\r\n\r\nIs it possible for the file.length to be returned 0 for files with sizes ranging from 4MB to 70MB?"},{"Id":"8630775973","Type":"PullRequestEvent","CreatedAt":"2018-11-22T03:57:05","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/33656","RelatedDescription":"Merged pull request \"Remove netstandard configs from more unit test projects\" (#33656) at dotnet/corefx","RelatedBody":"These \"UnitTests\" test product internals by building in the product src, which means there's no benefit in running them on configurations other than netcoreapp, and because they build in product src, having a netstandard configuration limits the ability to use netcoreapp-only features in those source files."},{"Id":"8630499540","Type":"PullRequestEvent","CreatedAt":"2018-11-22T02:16:16","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/33657","RelatedDescription":"Opened pull request \"Update CoreClr to preview-27122-01 (master)\" (#33657) at dotnet/corefx","RelatedBody":""},{"Id":"8630459056","Type":"PullRequestEvent","CreatedAt":"2018-11-22T02:01:24","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/33656","RelatedDescription":"Opened pull request \"Remove netstandard configs from more unit test projects\" (#33656) at dotnet/corefx","RelatedBody":"These \"UnitTests\" test product internals by building in the product src, which means there's no benefit in running them on configurations other than netcoreapp, and because they build in product src, having a netstandard configuration limits the ability to use netcoreapp-only features in those source files."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8630891955","Type":"IssuesEvent","CreatedAt":"2018-11-22T04:46:55","Actor":"TessenR","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31313","RelatedDescription":"Opened issue \"Breaking changes in conditional expression parsing (nullable reference types)\" (#31313) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nBranch master (28 Oct 2018)\r\nLatest commit bfade8 by Sam Harwell:\r\nMerge pull request #30815 from eladeyal-intel/patch-1\r\n\r\nDelete 0\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile the following code:\r\n```cs\r\nclass A\r\n{\r\n  struct S {}\r\n\r\n  public static void Main()\r\n  {\r\n    object obj = 1;\r\n    obj = obj is S?[] ? null : (object) null;\r\n  }\r\n}\r\n```\r\n\r\nhttps://sharplab.io/#v2:EYLgtghgzgLgpgJwD4AEBMACAggWAFADe+GGsCArgMYwYDKGBAvvsRigMxsCMAbGwCwYAshACWAOwAUASlZE8JEgHtgAKzjUMK1RgC8GLgG5WytXq1nRUOgH4A2gF0MNjOPIAbdxhAZJ2jTDSrh7uxgoYzHiMQA=\r\n\r\n**Expected Behavior**:\r\n\r\nThe code is compiled without errors just as it does now in VS2017\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\n    error CS1002: ; expected\r\n    error CS1002: ; expected\r\n    error CS1513: } expected\r\n    error CS0201: Only assignment, call, increment, decrement, await, and new object expressions can be used as a statement\r\n```"},{"Id":"8630808637","Type":"PullRequestEvent","CreatedAt":"2018-11-22T04:10:36","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31312","RelatedDescription":"Opened pull request \"Upgrade changes 2\" (#31312) at dotnet/roslyn","RelatedBody":""},{"Id":"8630539652","Type":"PullRequestEvent","CreatedAt":"2018-11-22T02:30:35","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/29443","RelatedDescription":"Closed pull request \"Merges/dev15.8.x to master\" (#29443) at dotnet/roslyn","RelatedBody":""},{"Id":"8630464186","Type":"IssuesEvent","CreatedAt":"2018-11-22T02:03:18","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24046","RelatedDescription":"Closed issue \"Debugger is not finding source embedded in PDB with SHA256 hash, only SHA1\" (#24046) at dotnet/roslyn","RelatedBody":"Consuming PDB with VS 15.5.2, producing PDB with Microsoft.CodeAnalysis 2.6.1 and System.Reflection.Metadata 1.5.0.\r\n\r\nInserting my own embedded source for each document is working great if I use `EmbeddedText.FromStream` with `SourceHashAlgorithm.Sha1` and `MetadataBuilder.AddDocument` with the [SHA-1 guid](https://github.com/dotnet/roslyn/blob/ee2a411ff9aeb2f78da962e2abaa0b69da3f925c/src/Compilers/Core/Portable/PEWriter/DebugSourceDocument.cs#L80).\r\n\r\nIf I use `SourceHashAlgorithm.Sha256` and the [SHA-256 guid](https://github.com/dotnet/roslyn/blob/ee2a411ff9aeb2f78da962e2abaa0b69da3f925c/src/Compilers/Core/Portable/PEWriter/DebugSourceDocument.cs#L83), VS fails to find the source and even says:\r\n\r\n> Locating source for *'original file path*'. (No checksum.)\r\n\r\nWhy would it say \"no checksum\" with that path?\r\n\r\nhttps://github.com/dotnet/roslyn/blob/ee2a411ff9aeb2f78da962e2abaa0b69da3f925c/src/Compilers/Core/Portable/PEWriter/DebugSourceDocument.cs#L71-L73\r\n\r\nIs something different with Dev15? Would a minimal repro be helpful?\r\n  "},{"Id":"8630292019","Type":"PullRequestEvent","CreatedAt":"2018-11-22T00:58:22","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31311","RelatedDescription":"Opened pull request \"Upgrade changes.\" (#31311) at dotnet/roslyn","RelatedBody":"To help with diagnosing https://github.com/dotnet/roslyn/issues/31310"},{"Id":"8630274843","Type":"IssuesEvent","CreatedAt":"2018-11-22T00:51:29","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31310","RelatedDescription":"Opened issue \"Updated to 15.9p6, now VS prompts to upgrade many projects\" (#31310) at dotnet/roslyn","RelatedBody":"Looks to eb the same as https://github.com/dotnet/roslyn/issues/31053\r\n\r\nI allowed the upgrade, and my projects are now full of changes like:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/48875362-81f14d00-edad-11e8-8887-8b24e6eb9f63.png)\r\n\r\nUnfortunately, all my projects do not load anymore either:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/48875389-afd69180-edad-11e8-86c1-96e60b389a4e.png)\r\n"},{"Id":"8630220717","Type":"PullRequestEvent","CreatedAt":"2018-11-22T00:30:04","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31307","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#31307) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8630212237","Type":"IssuesEvent","CreatedAt":"2018-11-22T00:26:46","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31309","RelatedDescription":"Opened issue \"SimpleTypeName snippet function does not return expected value\" (#31309) at dotnet/roslyn","RelatedBody":"I was creating a snippet to apply a custom attribute.  I Used the SimpleTypeName function to get the attribute name literal to be printed.  But the value returned is not as expected.\n\nsnippet\n=======\n        &lt;Literal Editable=&quot;false&quot;&gt;\n          &lt;ID&gt;Test&lt;/ID&gt;\n          &lt;ToolTip&gt;\n          &lt;/ToolTip&gt;\n          &lt;Default&gt;\n          &lt;/Default&gt;\n          &lt;Function&gt;SimpleTypeName(global::Company.Product.Project.Framework.MyXXXAttribute)&lt;/Function&gt;\n        &lt;/Literal&gt;\n\nbelow the code uses &quot;[$Test$(...]&quot; in it.\n==========================\n\nNow, when I insert this snippet, I find two issues as below\n1.  The expansion does not remove the 'Attribute' part which is a normal case with using  applying attributes.\n\n2.  If I am inside a class which is inside a namespace Company.Product.Project.YYYY and I already have using Company.Product.Project.Framework; the snippet still expands to [Framework.MyXXXAttribute] instead of [MyXXX]\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/356498/simpletypename-snippet-function-does-not-return-ex.html\nVSTS ticketId: 705077_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8629801305","Type":"PullRequestEvent","CreatedAt":"2018-11-21T22:13:09","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6603","RelatedDescription":"Merged pull request \"Use netcore3.0 CoreCLR for R2R testing\" (#6603) at dotnet/corert","RelatedBody":"Replace use of 2.1 runtime with a recent version from master targetting netcoreapp3.0. This version now includes System.Runtime.Intrinsics, which was previously named System.Runtime.Intrinsics.Experimental (and lived in a separate Nuget package) meaning the test drop we used couldn't bind against it.\r\n\r\nruntest.cmd /coreclr all /mode readytorun fail rate improved from 489 -> 346 (2001/2347 or 85% pass rate)."},{"Id":"8629394172","Type":"PullRequestEvent","CreatedAt":"2018-11-21T20:35:28","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6603","RelatedDescription":"Opened pull request \"Use netcore3.0 CoreCLR for R2R testing\" (#6603) at dotnet/corert","RelatedBody":"Replace use of 2.1 runtime with a recent version from master targetting netcoreapp3.0. This version now includes System.Runtime.Intrinsics, which was previously named System.Runtime.Intrinsics.Experimental (and lived in a separate Nuget package) meaning the test drop we used couldn't bind against it.\r\n\r\nruntest.cmd /coreclr all /mode readytorun fail rate improved from 489 -> 346 (2001/2347 or 85% pass rate)."},{"Id":"8628490542","Type":"PullRequestEvent","CreatedAt":"2018-11-21T17:32:30","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6600","RelatedDescription":"Merged pull request \"Prevent generating bad SafeHandle marshalling\" (#6600) at dotnet/corert","RelatedBody":"These marshalers are not implemented yet.\r\n\r\nFixes #6556."},{"Id":"8628490518","Type":"IssuesEvent","CreatedAt":"2018-11-21T17:32:30","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6556","RelatedDescription":"Closed issue \"Bad marshalling for SafeHandle\" (#6556) at dotnet/corert","RelatedBody":"Our checked in multimodule tests hit bad IL while running with CHK RyuJIT (when compiling the framework for multimodule). I think this is the struct marshaler, judging from the method name.\r\n\r\nWe are actually also hitting the same bad IL assert in the WebApi sample, so this might well be one of the stress bugs we have been chasing:\r\n\r\n```\r\n// [S.P.CompilerGenerated]Internal.CompilerGenerated.<Module>.NativeToManaged__SecPkgContext_IssuerListInfoEx(__NativeType__SecPkgContext_IssuerListInfoEx&,SecPkgContext_IssuerListInfoEx&)\r\n.method void NativeToManaged__SecPkgContext_IssuerListInfoEx(valuetype Internal.CompilerGenerated.__NativeType__SecPkgContext_IssuerListInfoEx&, valuetype [System.Net.Security]Interop/SspiCli/SecPkgContext_IssuerListInfoEx&) cil managed\r\n{\r\n  // Code size: 41\r\n  .maxstack 2\r\n  .locals init (class [System.Private.CoreLib]System.Runtime.InteropServices.SafeHandle V_0,\r\n      native int V_1,\r\n      class [System.Private.CoreLib]System.Runtime.InteropServices.SafeHandle V_2,\r\n      uint32 V_3,\r\n      uint32 V_4,\r\n      uint32 V_5)\r\n\r\n  IL_0000:  ldarg.0\r\n  IL_0001:  ldfld       native int Internal.CompilerGenerated.__NativeType__SecPkgContext_IssuerListInfoEx::aIssuers\r\n  IL_0006:  stloc.1\r\n  IL_0007:  ldloc.1\r\n  IL_0008:  stloc.0\r\n  IL_0009:  ldloc.0\r\n  IL_000A:  stloc.2\r\n  IL_000B:  ldarg.1\r\n  IL_000C:  ldloc.2\r\n  IL_000D:  stfld       class [System.Private.CoreLib]System.Runtime.InteropServices.SafeHandle [System.Net.Security]Interop/SspiCli/SecPkgContext_IssuerListInfoEx::aIssuers\r\n  IL_0012:  ldarg.0\r\n  IL_0013:  ldfld       uint32 Internal.CompilerGenerated.__NativeType__SecPkgContext_IssuerListInfoEx::cIssuers\r\n  IL_0018:  stloc.s     4\r\n  IL_001A:  ldloc.s     4\r\n  IL_001C:  stloc.3\r\n  IL_001D:  ldloc.3\r\n  IL_001E:  stloc.s     5\r\n  IL_0020:  ldarg.1\r\n  IL_0021:  ldloc.s     5\r\n  IL_0023:  stfld       uint32 [System.Net.Security]Interop/SspiCli/SecPkgContext_IssuerListInfoEx::cIssuers\r\n  IL_0028:  ret\r\n}\r\n```"},{"Id":"8628223685","Type":"PullRequestEvent","CreatedAt":"2018-11-21T16:49:34","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6599","RelatedDescription":"Merged pull request \"Make ThreadPool.UnsafeQueueUserWorkItem<TState> public\" (#6599) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/pull/21125 to CoreRT"},{"Id":"8628148099","Type":"PullRequestEvent","CreatedAt":"2018-11-21T16:38:23","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6602","RelatedDescription":"Opened pull request \"Properly report intrinsic fields\" (#6602) at dotnet/corert","RelatedBody":"We were hitting an assert in RyuJIT because we were reporting IntPtr.Zero as an intrinsic even if we were not trying to `CORINFO_ACCESS_GET`.\r\n\r\nI fixed that part and also went ahead to port the rest of getFieldIntrinsic from CoreCLR. We'll need this anyway."},{"Id":"8628117308","Type":"IssuesEvent","CreatedAt":"2018-11-21T16:33:54","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6601","RelatedDescription":"Opened issue \"Report CORINFO_FIELD_INTRINSIC_EMPTY_STRING to RyuJIT\" (#6601) at dotnet/corert","RelatedBody":"We are not reporting `CORINFO_FIELD_INTRINSIC_EMPTY_STRING` to RyuJIT because it's hitting what appears to be a RyuJIT bug in late devirtualization (see assert in the jitdump). Likely because our string literals are different than string literals RyuJIT normally sees in CoreCLR.\r\n\r\nTo repro, uncomment the line in CorInfoImpl.cs that references this issue and build a multimodule release System.Private.CoreLib.\r\n\r\n[jitdump.txt](https://github.com/dotnet/corert/files/2604999/jitdump.txt)\r\n"},{"Id":"8628116590","Type":"PullRequestEvent","CreatedAt":"2018-11-21T16:33:47","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6600","RelatedDescription":"Opened pull request \"Prevent generating bad SafeHandle marshalling\" (#6600) at dotnet/corert","RelatedBody":"These marshalers are not implemented yet.\r\n\r\nFixes #6556."},{"Id":"8627829686","Type":"PullRequestEvent","CreatedAt":"2018-11-21T15:53:31","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6599","RelatedDescription":"Opened pull request \"Make ThreadPool.UnsafeQueueUserWorkItem<TState> public\" (#6599) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/pull/21125 to CoreRT"},{"Id":"8627503903","Type":"IssuesEvent","CreatedAt":"2018-11-21T15:07:27","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6596","RelatedDescription":"Closed issue \"wasm: question - how to specify additional flags for em++ and emcc \" (#6596) at dotnet/corert","RelatedBody":"I'm experimenting with adding threading support to the wasm build.  For that to work, the cpp, and any other library needs to be built with `-s USE_PTHREADS=1`.  In particular I would like to build \r\n```\r\nlibPortableRuntime.bc \r\nlibbootstrappercpp.bc\r\nlibSystem.Private.CoreLib.Native.bc\r\n```\r\nwith this option.  I think this could be part of my current problem as when I look at the LLVM, I only see `thread_local` on `@t_pShadowStackTop = internal thread_local global i8* null` whereas I would hope to see it also on at least `tls_CurrentThread` in `threadstore.cpp`.  I tried setting `set EMMAKEN_CFLAGS=-s USE_PTHREADS=1` and `build clean` but that didn't seem to help although I'm having a hard time finding the actual command that is used in the build output.  Can someone help me understand the build system a bit more so that I know where I would have to add this flag for it to be picked up by the `em++` and `emcc` commands?\r\n\r\nThanks"},{"Id":"8625950210","Type":"IssuesEvent","CreatedAt":"2018-11-21T10:47:31","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6598","RelatedDescription":"Closed issue \"UWP 6.2.2 System.Runtime.CompilerServices.Unsafe duplicate file error\" (#6598) at dotnet/corert","RelatedBody":"APPX1101: Payload contains two or more files with the same destination path 'System.Runtime.CompilerServices.Unsafe.dll'\r\n\r\nWhen using .Net Native 6.2.2 to compile UWP projects using libraries with unsafe code, e.g. Microsoft.EntityFrameworkCore.Sqlite, System.Reactive 4.1.2, and others.\r\n\r\nReposted from https://github.com/Microsoft/dotnet/issues/925 ."},{"Id":"8625928011","Type":"IssuesEvent","CreatedAt":"2018-11-21T10:43:46","Actor":"charlesroddie","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6598","RelatedDescription":"Opened issue \"UWP 6.2.2 System.Runtime.CompilerServices.Unsafe duplicate file error\" (#6598) at dotnet/corert","RelatedBody":"APPX1101: Payload contains two or more files with the same destination path 'System.Runtime.CompilerServices.Unsafe.dll'\r\n\r\nWhen using .Net Native 6.2.2 to compile UWP projects using libraries with unsafe code, e.g. Microsoft.EntityFrameworkCore.Sqlite, System.Reactive 4.1.2, and others.\r\n\r\nReposted from https://github.com/Microsoft/dotnet/issues/925 ."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8630145030","Type":"PullRequestEvent","CreatedAt":"2018-11-22T00:01:11","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2688","RelatedDescription":"Opened pull request \"Merge release/2.2.1xx to release/2.2.2xx\" (#2688) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8630144907","Type":"PullRequestEvent","CreatedAt":"2018-11-22T00:01:09","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2687","RelatedDescription":"Opened pull request \"Merge release/2.1.5xx to release/2.2.1xx\" (#2687) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8628503302","Type":"PullRequestEvent","CreatedAt":"2018-11-21T17:34:45","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2686","RelatedDescription":"Opened pull request \"Enable BuildMVCApp performance test\" (#2686) at dotnet/sdk","RelatedBody":"Enable 'BuildMVCApp' performance test; rev stage0 to: '3.0.100-preview-009775'\r\n\r\nAddresses: https://github.com/dotnet/sdk/issues/2668"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1064967345070882817","CreatedAt":"2018-11-20T19:42:55+00:00","UserScreenname":"dotnet","Text":"Find out what's new in F# 4.5 from Phillip Carter (@_cartermp) in this episode of the #OnDotNet show.\n\nhttps://t.co/B5Q1Xt828F","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":64,"FavoriteCount":32,"RawContent":null},{"Id":"1062754536018898946","CreatedAt":"2018-11-14T17:10:01+00:00","UserScreenname":"dotnet","Text":"Hear the latest and greatest on the future of .NET and check out demos of #dotNET Core . You'll also get a chance t… https://t.co/yskyvl0xjt","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":77,"FavoriteCount":40,"RawContent":null}]}},"RunOn":"2018-11-22T05:30:31.0468053Z","RunDurationInMilliseconds":7559}