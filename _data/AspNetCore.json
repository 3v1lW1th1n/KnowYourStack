{"Data":{"Blog":{"FeedItems":[{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel.Â Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing compatibility version in MVC","PublishedOn":"2018-02-27T22:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Ryan Nowak In 2.1 we&#8217;re adding a feature to address a long-standing problem for maintaining MVC &#8211; how do we make improvements to framework code without making it...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/introducing-compatibility-version-in-mvc/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Getting started with SignalR","PublishedOn":"2018-02-27T21:57:11+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Since 2013, ASP.NET developers have been using SignalR to build real-time web applications. Now, with ASP.NET Core 2.1 Preview 1, we&#8217;re bringing SignalR over to ASP.NET Core so you can build...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-getting-started-with-signalr/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Using ASP.NET Core Previews on Azure App Service","PublishedOn":"2018-02-27T19:18:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are 3 options to get ASP.NET Core 2.1 Preview applications running on Azure App Service: Installing the Preview1 site extension Deploying your app self-contained Using Web Apps for Containers...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-using-asp-net-core-previews-on-azure-app-service/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7398299930","Type":"IssuesEvent","CreatedAt":"2018-03-19T05:20:35","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2971","RelatedDescription":"Closed issue \"Model is not binding with the values in WEB API GET method when data is Json\" (#2971) at aspnet/Home","RelatedBody":"I have a GET method where I'm passing a JSON object. The object is the stringified value of a List of a POCO. The Model Binder fails to bind to the object in this method. \r\n\r\n        [HttpGet(\"Test2\")]\r\n        public object Check(List<SearchModel> data)\r\n        {\r\n            //var d = Newtonsoft.Json.JsonConvert.DeserializeObject<List<SearchModel>>(data);\r\n            if (data != null)\r\n            {\r\n                return data;\r\n            }\r\n            return Request.QueryString.Value;\r\n        }\r\n\r\n   public class SearchModel\r\n    {\r\n        public string Column { get; set; }\r\n        public object Value { get; set; }\r\n        public Matcher Matcher { get; set; }\r\n    }\r\n\r\n    public enum Matcher\r\n    {\r\n        Equals,\r\n        Contains,\r\n        GreaterThan,\r\n        LessThan\r\n    }\r\n\r\nHere the data is not exactly null either. It's just an empty object\r\n![image](https://user-images.githubusercontent.com/37064591/37557489-408f3ad4-2a2b-11e8-85cf-eed974e2937a.png)\r\n\r\nI tried it with FromQuery as well. Still no luck\r\n![image](https://user-images.githubusercontent.com/37064591/37557660-f338b82a-2a2d-11e8-8ad8-d5c087f6f402.png)\r\n\r\n\r\nWhen the same method is changed as POST then the binder works perfectly and binds the data to the JSON sent in the body. So Model Binder is not broken but just not working in the case of the GET.\r\n\r\n![image](https://user-images.githubusercontent.com/37064591/37557629-6d994568-2a2d-11e8-86b1-4fd6d362b632.png)\r\n\r\n\r\nWhen I try with string type, it does come as a JSON and then the DeserializeObject method deserializes it to the required object\r\n\r\n![image](https://user-images.githubusercontent.com/37064591/37557551-34d774ee-2a2c-11e8-8d74-86fd56d3d318.png)\r\n\r\n\r\n"},{"Id":"7398288703","Type":"IssuesEvent","CreatedAt":"2018-03-19T05:15:41","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2976","RelatedDescription":"Opened issue \"Bind event on injected object (PropertyChanged is always null)\" (#2976) at aspnet/Home","RelatedBody":"_From @LeonidasFettikus on March 1, 2018 8:55_\n\nIn an .Net Core WebAPI, I am injecting an custom `IWritableOptions `object (derived from `IOptionsSnapshot`) through the constructor of a service that I configured via the `ConfigureServices `method. This object has an even receiver that fires every time a property is changed on that object. Inside my service, I subscribe to the event of the object passed through the constructor. \r\n\r\nThen, I have a controller that also gets an `IWritableOptions `object passed through the constructor via DI. I use this controller to change the value of the property for which I configured an event receiver. \r\n\r\nSo far so good. When I use the controller to change the values of my object, however, the event isn't triggered. I suspect that the runtime is instantiating multiple instances of my `IWritableOptions ` class and that the event isn't triggered because of that.\r\n\r\nCan anybody clarify if this is possible?\r\n\r\nLinks:\r\n\r\nRepository that demonstrates what I am trying to do: [Link](https://github.com/LeonidasFettikus/EventDI)\r\nImplementation of my service class: [Link](https://www.stevejgordon.co.uk/asp-net-core-2-ihostedservice)\r\nImplementation of my `IWritableOptions` class: [Link](https://stackoverflow.com/questions/40970944/how-to-update-values-into-appsetting-json)\r\n\r\nIn the repository, the relevant code is in ClientService.cs. `PropertyChanged `is never triggered here.\n\n_Copied from original issue: dotnet/core#1317_"},{"Id":"7397571860","Type":"IssuesEvent","CreatedAt":"2018-03-18T23:34:26","Actor":"jasondaicoder","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2965","RelatedDescription":"Closed issue \".net Core web application using DataProtection with redis as storage provider\" (#2965) at aspnet/Home","RelatedBody":"Hi guys,\r\n\r\nI have a .net core 2.0 web api project which is deployed as AWS Lambda using data protection with redis as storage provider. I followed the article https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/overview?tabs=aspnetcore2x to set up. I also use x.509 certificate for the key encryption. However I always get the below errors during the startup.\r\n\r\nSome code for the set up\r\n```c#\r\nX509Certificate2 cert = new X509Certificate2(Convert.FromBase64String(certificate), certPassword);\r\nvar redis = ConnectionMultiplexer.Connect(dpRedisConStr);\r\nservices.AddDataProtection()\r\n             .PersistKeysToRedis(redis)\r\n             .ProtectKeysWithCertificate(cert);\r\n```\r\n[Error] Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager: An exception occurred while processing the key element '<key id=\"a0604cb3-8f04-43f0-a9eb-a2ed5138a486\" version=\"1\" />'. \r\n\r\n[Warning] Microsoft.AspNetCore.DataProtection.KeyManagement.DefaultKeyResolver: Key {a0604cb3-8f04-43f0-a9eb-a2ed5138a486} is ineligible to be the default key because its CreateEncryptor method failed. \r\n\r\nCan anyone give some advice?\r\n\r\nCheers\r\n\r\nJason"},{"Id":"7397398124","Type":"IssuesEvent","CreatedAt":"2018-03-18T21:47:52","Actor":"gfoidl","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2975","RelatedDescription":"Opened issue \"Move AspNetCoreBenchmarkAttribute to shared BenchmarkRunner.Sources\" (#2975) at aspnet/Home","RelatedBody":"# Background / Motivation\r\n\r\n[BenchmarkRunner.Sources](https://github.com/aspnet/Common/tree/75b76ebb8129b2080bca88eb456675abf63ddab3/shared/Microsoft.AspNetCore.BenchmarkRunner.Sources) contains common code for easily setting up benchmarks:\r\n ```xml\r\n<ItemGroup>\r\n  <Compile Include=\"..\\..\\shared\\Microsoft.AspNetCore.BenchmarkRunner.Sources\\**\\*.cs\">\r\n    <Link>Shared\\%(FileName)%(Extension)</Link>\r\n  </Compile>\r\n</ItemGroup>\r\n```\r\nSo the benchmark-project just needs to add the intrinsically benchmark-code, for instance [Microsoft.Extensions.Primitives.Performance](https://github.com/aspnet/Common/tree/75b76ebb8129b2080bca88eb456675abf63ddab3/benchmarks/Microsoft.Extensions.Primitives.Performance).\r\n\r\nQuite easy -- one may think...\r\nWhen running the benchmarks I always get trapped by `No loggers defined, you will not see any progress!`.\r\nIt's because there needs to be added the `AspNetCoreBenchmark` at assembly-level (via AssemblyInfo.cs). \r\n\r\n# Proposal\r\n\r\nTo make the \"setup\" for benchmark-projects consistent with e.g. `Program.cs` this attribute should be moved to the shared sources, so no manual adding / copying of AssemblyInfo.cs is needed.\r\n\r\nIn https://github.com/aspnet/SignalR/pull/1251#discussion_r158564943 something similar was mentioned.\r\n\r\n# Affected projects\r\n\r\n* [Microsoft.Extensions.Primitives.Performance](https://github.com/aspnet/Common/blob/a344c4f677f777e6788ac67a0a44f134edb991c3/benchmarks/Microsoft.Extensions.Primitives.Performance/Properties/AssemblyInfo.cs#L4)\r\n* [Microsoft.Extensions.ObjectPool.Performance](https://github.com/aspnet/Common/blob/36b7064bbfc7954ecaf7a423ac11e699ba836c6b/benchmarks/Microsoft.Extensions.ObjectPool.Performance/Properties/AssemblyInfo.cs#L4)\r\n* [Kestrel.Performance](https://github.com/aspnet/KestrelHttpServer/blob/e7cc0d33af55c60ca386f774ab30dfdab2305c73/benchmarks/Kestrel.Performance/AssemblyInfo.cs#L1)\r\n* [Microsoft.AspNetCore.SignalR.Microbenchmarks](https://github.com/aspnet/SignalR/blob/f08311f33707a5528b8b35576620a9953ca1e13b/benchmarks/Microsoft.AspNetCore.SignalR.Microbenchmarks/AssemblyInfo.cs#L1)\r\n* [Microsoft.AspNetCore.Razor.Performance](https://github.com/aspnet/Razor/blob/98e74b9a69b7b277fc9a78c068de967185104d69/benchmarks/Microsoft.AspNetCore.Razor.Performance/AssemblyInfo.cs#L1)\r\n* [DI.Performance](https://github.com/aspnet/DependencyInjection/blob/8e1f92f95c885a4b046f50f085d47c539e6f6792/benchmarks/DI.Performance/AssemblyInfo.cs#L1)\r\n* [Microsoft.AspNetCore.Mvc.Performance](https://github.com/aspnet/Mvc/blob/997544077a0ed6535c2eac9f0590f8d7afe0677d/benchmarks/Microsoft.AspNetCore.Mvc.Performance/AssemblyInfo.cs#L1)"},{"Id":"7397321278","Type":"IssuesEvent","CreatedAt":"2018-03-18T21:02:40","Actor":"louislewis2","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2974","RelatedDescription":"Opened issue \"Environment Variables Options Reloading Azure Hosted\" (#2974) at aspnet/Home","RelatedBody":"Hi,\r\n\r\nBased on the documentation, working with reloading options when the underlying \r\ndata source changes is really great.\r\n\r\nHowever could this be implemented when we are updating settings under the Application Settings\r\nfor an App in Azure?\r\n\r\nWe use a json file, for default values and so on. When we deploy to Azure we switch to using Application Settings, which get pulled in by the call AddEnvironmentVariables();\r\n\r\nWe would like to not expect from our production environment team to have to understand, that if a change request is made for setting a, then would need to login in to Azure, navigate to the App Service Editor, make a change to that file (by someone who is not a developer), then save the changes and verify that setting was changed correctly. We prefer this file is not touched or edited at runtime.\r\n\r\nThe Application Settings in Azure, is a great way for that team to manage settings against change control requests. The issue currently is that when a change is made here, the application must be restarted so that the change can take affect. On a production system this is not ideal.\r\n\r\nI am aware that there are many other ways to handle application settings, I did however want to make use of the Application Settings specifically within Azure, as it is a \"standard\" way of handling this kind of operation across different applications, different teams. Basically as long as we hosted in an Azure Application Service, we could use this single method."},{"Id":"7395283059","Type":"IssuesEvent","CreatedAt":"2018-03-17T20:09:06","Actor":"Matthew-Bonner","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2973","RelatedDescription":"Closed issue \"Add ability to write options to file\" (#2973) at aspnet/Home","RelatedBody":"At the moment there is no way to write options to file, leading to various different ways to achieve this.\r\n\r\nIt would be good, as we had this ability in Web Forms, to be able to make changes to options and write them back to file.\r\n\r\nSee:\r\nhttps://stackoverflow.com/questions/40970944/how-to-update-values-into-appsetting-json\r\n\r\nMy use case is that I want to use this to create a plugin system whereby people can edit the plugin options in the browser and write them back to disk. I would like to use the IOptions interface to do so to keep the codebase consistent."},{"Id":"7395248531","Type":"IssuesEvent","CreatedAt":"2018-03-17T19:46:22","Actor":"Matthew-Bonner","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2973","RelatedDescription":"Opened issue \"Add ability to write options to file\" (#2973) at aspnet/Home","RelatedBody":"At the moment there is no way to write options to file, leading to various different ways to achieve this.\r\n\r\nIt would be good, as we had this ability in Web Forms, to be able to make changes to options and write them back to file.\r\n\r\nSee:\r\nhttps://stackoverflow.com/questions/40970944/how-to-update-values-into-appsetting-json\r\n\r\nMy use case is that I want to use this to create a plugin system whereby people can edit the plugin options in the browser and write them back to disk. I would like to use the IOptions interface to do so to keep the codebase consistent."},{"Id":"7394928513","Type":"IssuesEvent","CreatedAt":"2018-03-17T16:32:21","Actor":"HappyNomad","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2972","RelatedDescription":"Opened issue \"Remove `IContractResolver` from everywhere in Json Patch library\" (#2972) at aspnet/Home","RelatedBody":"The Json.Net contract resolver that's first passed to `JsonPatchDocument`'s constructor is then passed among numerous methods and objects throughout the code.  In spite of making it available like this,\r\n\r\n1. It's not actually used anywhere in the library's current code.\r\n2. It likely won't be the same contract resolver used by the serializer, anyway.\r\n\r\nRather than being useful, it makes the various method signatures of `JsonPatchDocument`, `ObjectVisitor`, `IAdapter` and its implementations unnecessarily verbose, harder to understand, and cumbersome to use.\r\n\r\nI propose removing all occurrences of `IContractResolver`.  Customizations can still access the serializer's contract resolver if they need to.  The [`JsonPatchInputFormatter`](https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Formatters.Json/JsonPatchInputFormatter.cs) could then be eliminated, as well."}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7398213035","Type":"PullRequestEvent","CreatedAt":"2018-03-19T04:40:52","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1639","RelatedDescription":"Opened pull request \"The payload property was never used\" (#1639) at aspnet/SignalR","RelatedBody":""},{"Id":"7397507477","Type":"IssuesEvent","CreatedAt":"2018-03-18T22:53:18","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1618","RelatedDescription":"Closed issue \"Reduce per message reading allocations in JsonHubProtocol\" (#1618) at aspnet/SignalR","RelatedBody":"Today in the JsonHubProtocol to read a single message, we allocate\r\n - A new byte[] with the data sliced from the original buffer\r\n - A MemoryStream wrapping that byte[]\r\n - A StreamReader wrapping that MemoryStream (which itself has a 1K byte[] and 2K char[])\r\n - A JsonTextReader that allocates internally a 1K buffer from an optional array pool (which we don't currently use) \r\n\r\nhttps://github.com/aspnet/SignalR/blob/b0e5483a5c9452446169664f525cc3279ae4d0ad/src/Microsoft.AspNetCore.SignalR.Common/Internal/Protocol/JsonHubProtocol.cs#L52-L58\r\n\r\nhttps://github.com/aspnet/SignalR/blob/8b8c7107a8e0b4a2123f8a8178525f1da8aaeb16/src/Microsoft.AspNetCore.SignalR.Common/Internal/Protocol/JsonHubProtocol.cs#L72\r\n\r\nThe protocol parsers themselves are stateless and singleton which makes caching hard unless we use an object pool on the server. On the client, the protocol is allocated per client connection (which makes sense). The other complication is that the exact same code is shared on client and server so that makes it hard to specialize for the sever though these optimization should apply to the client as well."},{"Id":"7397506986","Type":"IssuesEvent","CreatedAt":"2018-03-18T22:52:57","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1545","RelatedDescription":"Closed issue \"Add better logic around deserializing headers\" (#1545) at aspnet/SignalR","RelatedBody":"Currently when deserializing messages we grab the header value and check if there are any headers to write. This causes an allocation per send that we could easily avoid\r\nhttps://github.com/aspnet/SignalR/blob/0eb2b96c45964be461394e73b960dd634fca405f/src/Microsoft.AspNetCore.SignalR.Common/Internal/Protocol/HubInvocationMessage.cs#L16\r\n\r\n![dict](https://user-images.githubusercontent.com/7574801/37066103-ab192ef4-2158-11e8-8218-3233d8cead80.PNG)\r\n"},{"Id":"7397506460","Type":"IssuesEvent","CreatedAt":"2018-03-18T22:52:36","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1549","RelatedDescription":"Closed issue \"Improve JsonHubProtocol parsing of JSON message\" (#1549) at aspnet/SignalR","RelatedBody":"Today when parsing incoming messages `JsonHubProtocol` loads the whole JSON document into a `JObject` and then pulls data out of it as needed. This has the overhead of allocating many JObject/JArray/JValue instances and their own internal data structures (lists, dictionaries, box primitives, etc). Also arguments are parsed once into JTokens, and then those JTokens will be read again by the serializer.\r\n\r\nChanging parse message to use `JsonTextReader` directly would be more efficient - both in allocations and amount of work done - but poses some challenges. The reader is forward only, and JSON objects are unordered.\r\n\r\nParse message will need to handle data coming in any order, e.g. arguments might be read before the method name, or the message type might come last. Ideally we would want arguments deserialized directly from the reader, but in cases where we don't know the method name yet - and therefor don't know the argument types - we'll need to temporarily cached them in a JArray as a fallback.\r\n\r\nhttps://github.com/aspnet/SignalR/blob/0eb2b96c45964be461394e73b960dd634fca405f/src/Microsoft.AspNetCore.SignalR.Common/Internal/Protocol/JsonHubProtocol.cs#L69-L111"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7398299819","Type":"IssuesEvent","CreatedAt":"2018-03-19T05:20:31","Actor":"Eilon","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7500","RelatedDescription":"Opened issue \"Model is not binding with the values in WEB API GET method when data is Json\" (#7500) at aspnet/Mvc","RelatedBody":"_From @onlyanup on March 17, 2018 16:32_\n\nI have a GET method where I'm passing a JSON object. The object is the stringified value of a List of a POCO. The Model Binder fails to bind to the object in this method. \r\n\r\n        [HttpGet(\"Test2\")]\r\n        public object Check(List<SearchModel> data)\r\n        {\r\n            //var d = Newtonsoft.Json.JsonConvert.DeserializeObject<List<SearchModel>>(data);\r\n            if (data != null)\r\n            {\r\n                return data;\r\n            }\r\n            return Request.QueryString.Value;\r\n        }\r\n\r\n   public class SearchModel\r\n    {\r\n        public string Column { get; set; }\r\n        public object Value { get; set; }\r\n        public Matcher Matcher { get; set; }\r\n    }\r\n\r\n    public enum Matcher\r\n    {\r\n        Equals,\r\n        Contains,\r\n        GreaterThan,\r\n        LessThan\r\n    }\r\n\r\nHere the data is not exactly null either. It's just an empty object\r\n![image](https://user-images.githubusercontent.com/37064591/37557489-408f3ad4-2a2b-11e8-85cf-eed974e2937a.png)\r\n\r\nI tried it with FromQuery as well. Still no luck\r\n![image](https://user-images.githubusercontent.com/37064591/37557660-f338b82a-2a2d-11e8-8ad8-d5c087f6f402.png)\r\n\r\n\r\nWhen the same method is changed as POST then the binder works perfectly and binds the data to the JSON sent in the body. So Model Binder is not broken but just not working in the case of the GET.\r\n\r\n![image](https://user-images.githubusercontent.com/37064591/37557629-6d994568-2a2d-11e8-86b1-4fd6d362b632.png)\r\n\r\n\r\nWhen I try with string type, it does come as a JSON and then the DeserializeObject method deserializes it to the required object\r\n\r\n![image](https://user-images.githubusercontent.com/37064591/37557551-34d774ee-2a2c-11e8-8d74-86fd56d3d318.png)\r\n\r\n\r\n\n\n_Copied from original issue: aspnet/Home#2971_"},{"Id":"7398266662","Type":"IssuesEvent","CreatedAt":"2018-03-19T05:05:56","Actor":"Eilon","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7499","RelatedDescription":"Opened issue \"ASPNET CORE MVC not working with External DotNet Standard Library\" (#7499) at aspnet/Mvc","RelatedBody":"_From @Phoenigore on December 27, 2017 17:1_\n\n# Issue Title\r\n\r\nASPNET CORE MVC not working with External DotNet Standard Library\r\n\r\n# General\r\n\r\nWhen you want to use a DotNet Standard Library 2.0 project into AspNet Core MVC Project from another solution, the AspNetCore MVC program crash with this error.\r\n\r\nInvalidOperationException: Cannot find compilation library location for package 'Name.Of.DotNetStandard2.0Project'\r\nMicrosoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths(ICompilationAssemblyResolver resolver, List<string> assemblies).\r\n\r\nThe same test with an AspNet MVC 4.6 Framework project is a success\r\n\r\nRegards\r\n\n\n_Copied from original issue: dotnet/core#1184_"},{"Id":"7398264919","Type":"IssuesEvent","CreatedAt":"2018-03-19T05:05:12","Actor":"Eilon","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7498","RelatedDescription":"Opened issue \"Multiple validation schemes\" (#7498) at aspnet/Mvc","RelatedBody":"_From @incompletude on January 6, 2018 6:10_\n\nI'm not sure I have a issue but I'm not sure how to approach these problems and I hope you guys can point me to the right direction. \r\n\r\nThe first problem is related to the `[Required]` and `[BindRequired]` DataAnnotations. Seems to me a bit hacky to make my Id property nullable so I can use the Required parameter. I tried `[BindRequired]` parameter instead, and it doesn't make a difference, I get a valid model state no matter what.\r\n\r\n```\r\n    public class Category\r\n    {\r\n        [Required]\r\n        public virtual int? Id { get; set; }\r\n        public virtual string Name { get; set; }\r\n    }\r\n\r\n    [HttpPost]\r\n    public IActionResult Post([FromBody]Category category)\r\n    {\r\n    }\r\n\r\n    public class ModelStateValidationFilter : ActionFilterAttribute\r\n    {\r\n        public override void OnActionExecuting(ActionExecutingContext context)\r\n        {\r\n            if (context.ModelState.IsValid == false)\r\n            {\r\n                var errors = context.ModelState\r\n                    .SelectMany(x => x.Value.Errors, (y, z) => z.Exception == null ? z.ErrorMessage : z.Exception.Message);\r\n                context.Result = new ObjectResult(new { type = \"model\", errors }) { StatusCode = 422 };\r\n            }\r\n            base.OnActionExecuting(context);\r\n        }\r\n    }\r\n```\r\n\r\nCurrently, I use the following code so I can get different validation schemes for different http verbs. It looks extremely ugly to me. Is there a native more elegant way to achieve this considering I use a catch all errors filter?\r\n```\r\n    public class Category\r\n    {\r\n        public virtual int? Id { get; set; }\r\n        public virtual string Name { get; set; }\r\n        public virtual Permission Permission { get; set; }\r\n    }\r\n\r\n    public class CategoryCreate : Category\r\n    {\r\n        [Required]\r\n        public override string Name { get; set; }\r\n    }\r\n\r\n    public class CategoryUserCreate : Category\r\n    {\r\n        [Required]\r\n        public override int? Id { get; set; }\r\n        [Required]\r\n        public override Permission Permission { get; set; }\r\n    }\r\n\r\n    [HttpPost]\r\n    public IActionResult Post1([FromBody]CategoryCreate category)\r\n    {\r\n    }\r\n\r\n    [HttpPost]\r\n    public IActionResult Post2([FromBody]CategoryUserCreate category)\r\n    {\r\n    }\r\n```\r\nNice work, thank you all.\r\n\r\n\r\n\r\n\r\n\r\n  \n\n_Copied from original issue: dotnet/core#1193_"},{"Id":"7397330830","Type":"IssuesEvent","CreatedAt":"2018-03-18T21:08:28","Actor":"zokiad","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7497","RelatedDescription":"Opened issue \"How to remove integrity script on fallback ?\" (#7497) at aspnet/Mvc","RelatedBody":"Hi,\r\n\r\nOn my project .net core 2.1 preview 1, I include script like:\r\n\r\n```html\r\n       <script src=\"https://cdn.jsdelivr.net/npm/jquery@3.3.1/dist/jquery.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\" asp-fallback-test=\"window.jQuery\" asp-fallback-src=\"~/js/jquery.min.js\" asp-append-version=\"true\"></script>\r\n       <script src=\"https://cdn.jsdelivr.net/npm/jquery-validation@1.17.0/dist/jquery.validate.min.js\" integrity=\"sha256-F6h55Qw6sweK+t7SiOJX+2bpSAa3b/fnlrVCJvmEj1A=\" crossorigin=\"anonymous\" asp-fallback-test=\"jQuery.fn.validate\" asp-fallback-src=\"~/js/jquery.validate.min.js\" asp-append-version=\"true\"></script>\r\n\r\n```\r\n\r\nThe generated html code is:\r\n\r\n```html\r\n        <script src=\"https://cdn.jsdelivr.net/npm/jquery@3.3.1/dist/jquery.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\r\n<script>(window.jQuery||document.write(\"\\u003Cscript src=\\u0022\\/js\\/jquery.min.js?v=FgpCb_KJQlLNfOu91ta32o_NMZxltwRo8QtmkMRdAu8\\u0022 integrity=\\u0022sha256-FgpCb\\/KJQlLNfOu91ta32o\\/NMZxltwRo8QtmkMRdAu8=\\u0022 crossorigin=\\u0022anonymous\\u0022\\u003E\\u003C\\/script\\u003E\"));</script>\r\n        <script src=\"https://cdn.jsdelivr.net/npm/jquery-validation@1.17.0/dist/jquery.validate.min.js\" integrity=\"sha256-F6h55Qw6sweK+t7SiOJX+2bpSAa3b/fnlrVCJvmEj1A=\" crossorigin=\"anonymous\"></script>\r\n<script>(jQuery.fn.validate||document.write(\"\\u003Cscript src=\\u0022\\/js\\/jquery.validate.min.js?v=F6h55Qw6sweK-t7SiOJX-2bpSAa3b_fnlrVCJvmEj1A\\u0022 integrity=\\u0022sha256-F6h55Qw6sweK\\u002Bt7SiOJX\\u002B2bpSAa3b\\/fnlrVCJvmEj1A=\\u0022 crossorigin=\\u0022anonymous\\u0022\\u003E\\u003C\\/script\\u003E\"));</script>\r\n    \r\n```\r\n\r\n## **Issue:**\r\nintegrity is propagate to fallback in document .write:*\r\ndocument.write(\"\\u003Cscript src=\\u0022\\/js\\/jquery.validate.min.js?v=F6h55Qw6sweK-t7SiOJX-2bpSAa3b_fnlrVCJvmEj1A\\u0022 **integrity=\\u0022sha256-F6h55Qw6sweK\\u002Bt7SiOJX\\u002B2bpSAa3b\\/fnlrVCJvmEj1A=\\u0022** crossorigin=\\u0022anonymous\\u0022\\u003E\\u003C\\/script\\u003E\"));\r\n\r\nOn windows, bower get file in windows format. CDN use unix format. Thus, the integrity is not the same but the js text is same.\r\nHow to remove or recalculate integrity on fallback (local file) ?\r\n\r\nRegards"},{"Id":"7395047921","Type":"IssuesEvent","CreatedAt":"2018-03-17T17:42:32","Actor":"RandyBuchholz","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7496","RelatedDescription":"Opened issue \"Razor Pages Feature - Search for Page by Folder Name\" (#7496) at aspnet/Mvc","RelatedBody":"## Proposal\r\nIn addition to serving `index` and `default` as default pages for Razor Page routes, the routing engine also searches for a Razor Page with a name that matches the name of the containing folder.\r\n\r\nGiven the folders/files:\r\n```\r\nPages\r\n   Action1\r\n      SubAction\r\n          SubAction.cshtml\r\n```\r\n\r\nIt would be nice to be able to use the route\r\n```\r\nAction/SubAction\r\n```\r\ninstead of \r\n```\r\nAction/SubAction/SubAction\r\n```\r\nThis providers a cleaner url without having to clutter the application with many `index` or `default` pages, and use clearer naming.\r\n"},{"Id":"7394702446","Type":"IssuesEvent","CreatedAt":"2018-03-17T14:17:21","Actor":"ngohungphuc","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7495","RelatedDescription":"Opened issue \"[Question] Get current user login info in ASP.Net Core 2.0\" (#7495) at aspnet/Mvc","RelatedBody":"I want to get current user login info like username, id. The following code work good but is there any cleaner way to achieve it.\r\n```\r\nprivate readonly IHttpContextAccessor _httpContextAccessor;\r\n        private readonly IGenericRepository<User> _userRepository;\r\n        private readonly UserManager<User> _userManager;\r\n\r\n        private readonly string _currentUserGuid;\r\n        private readonly string _currentUserName;\r\n        private readonly List<string> _currentUserRoles;\r\n\r\n        public UserService(\r\n            UserManager<User> userManager,\r\n            IHttpContextAccessor httpContextAccessor,\r\n            IGenericRepository<User> userRepository)\r\n        {\r\n            _userManager = userManager;\r\n            _httpContextAccessor = httpContextAccessor;\r\n            _userRepository = userRepository;\r\n            _currentUserGuid = GetCurrentUserClaims().UserId;\r\n            _currentUserName = GetCurrentUserClaims().UserName;\r\n            _currentUserRoles = GetCurrentUserClaims().UserRoles;\r\n        }\r\n\r\n        public async Task<User> GetCurrentUserAsync()\r\n        {\r\n           return await _userRepository.GetByIdAsync(_currentUserGuid);\r\n        }\r\n\r\n        public string GetCurrentUserGuid()\r\n        {\r\n            return _currentUserGuid;\r\n        }\r\n\r\n        public string GetCurrentUserName()\r\n        {\r\n            return _currentUserName;\r\n        }\r\n\r\n        public List<string> GetCurrentUserRole()\r\n        {\r\n            return _currentUserRoles;\r\n        }\r\n\r\n        private UserClaims GetCurrentUserClaims()\r\n        {\r\n            var userClaims = new UserClaims();\r\n            var claims = _httpContextAccessor.HttpContext.User.Claims.ToList();\r\n            foreach (var claim in claims)\r\n            {\r\n                switch (claim.Type)\r\n                {\r\n                    case UserClaimsKey.Sub:\r\n                        userClaims.UserId = claim.Value;\r\n                        break;\r\n                    case UserClaimsKey.Name:\r\n                        userClaims.UserName = claim.Value;\r\n                        break;\r\n                    case UserClaimsKey.Role:\r\n                        userClaims.UserRoles.Add(claim.Value);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            return userClaims;\r\n        }\r\n```"},{"Id":"7394125073","Type":"IssuesEvent","CreatedAt":"2018-03-17T06:40:45","Actor":"Dmitry44","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7494","RelatedDescription":"Opened issue \"Razor Pages and Filters\" (#7494) at aspnet/Mvc","RelatedBody":"Hi!\r\nI am trying to use ExceptionFilterAttribute on razor pages. It works fine on the top of PageModel:\r\n\r\n```\r\n[ApiExceptionFilter]\r\npublic class EditModel : PageModelBase\r\n```\r\n\r\nBut it doesn't work on page handler:\r\n\r\n```\r\n[ApiExceptionFilter]\r\npublic async Task<IActionResult> OnGetAsync(int id)\r\n```\r\n\r\nIs it possible to use filters on the handler level?"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7396900348","Type":"IssuesEvent","CreatedAt":"2018-03-18T16:58:54","Actor":"jeffhube","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1690","RelatedDescription":"Opened issue \"AddDefaultUI() throws when using IdentityUser<T>\" (#1690) at aspnet/Identity","RelatedBody":"If your user and role inherit from IdentityUser\\<T\\> / IdentityRole\\<T\\> instead of IdentityUser / IdentityRole, then AddDefaultUI() throws.\r\n\r\nProject to reproduce here: https://github.com/jeffhube/aspnet-identity-test\r\n\r\n```csharp\r\npublic class ApplicationDbContext : IdentityDbContext<ApplicationUser, ApplicationRole, Guid>\r\n{\r\n}\r\n\r\npublic class ApplicationUser : IdentityUser<Guid>\r\n{\r\n}\r\n\r\npublic class ApplicationRole : IdentityRole<Guid>\r\n{\r\n}\r\n\r\nservices.AddIdentity<ApplicationUser, ApplicationRole>()\r\n    .AddEntityFrameworkStores<ApplicationDbContext>()\r\n    .AddDefaultTokenProviders()\r\n    .AddDefaultUI();\r\n```\r\n\r\n```\r\nUnhandled Exception: System.ArgumentException: GenericArguments[0], 'IdentityTest.ApplicationUser', on 'Microsoft.AspNetCore.Identity.UI.IdentityDefaultUIConfigureOptions`1[TUser]' violates the constraint of type 'TUser'. ---> System.TypeLoadException: GenericArguments[0], 'IdentityTest.ApplicationUser', on 'Microsoft.AspNetCore.Identity.UI.IdentityDefaultUIConfigureOptions`1[TUser]' violates the constraint of type parameter 'TUser'.\r\n   at System.RuntimeTypeHandle.Instantiate(RuntimeTypeHandle handle, IntPtr* pInst, Int32 numGenericArgs, ObjectHandleOnStack type)\r\n   at System.RuntimeTypeHandle.Instantiate(Type[] inst)\r\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\r\n   --- End of inner exception stack trace ---\r\n   at System.RuntimeType.ValidateGenericArguments(MemberInfo definition, RuntimeType[] genericArguments, Exception e)\r\n   at System.RuntimeType.MakeGenericType(Type[] instantiation)\r\n   at Microsoft.AspNetCore.Identity.IdentityBuilderUIExtensions.AddDefaultUI(IdentityBuilder builder)\r\n   at IdentityTest.Startup.ConfigureServices(IServiceCollection services) in C:\\Users\\Jeff\\Desktop\\IdentityTest\\Startup.cs:line 32\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Hosting.ConventionBasedStartup.ConfigureServices(IServiceCollection services)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.EnsureApplicationServices()\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.Initialize()\r\n   at Microsoft.AspNetCore.Hosting.WebHostBuilder.Build()\r\n   at IdentityTest.Program.BuildWebHost(String[] args) in C:\\Users\\Jeff\\Desktop\\IdentityTest\\Program.cs:line 21\r\n   at IdentityTest.Program.Main(String[] args) in C:\\Users\\Jeff\\Desktop\\IdentityTest\\Program.cs:line 17\r\n```"},{"Id":"7394703042","Type":"IssuesEvent","CreatedAt":"2018-03-17T14:17:46","Actor":"ngohungphuc","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1689","RelatedDescription":"Opened issue \"[Question] Get current user login info in ASP.Net Core 2.0\" (#1689) at aspnet/Identity","RelatedBody":"I want to get current user login info like username, id. The following code work good but is there any cleaner way to achieve it.\r\n```cs\r\nprivate readonly IHttpContextAccessor _httpContextAccessor;\r\n        private readonly IGenericRepository<User> _userRepository;\r\n        private readonly UserManager<User> _userManager;\r\n\r\n        private readonly string _currentUserGuid;\r\n        private readonly string _currentUserName;\r\n        private readonly List<string> _currentUserRoles;\r\n\r\n        public UserService(\r\n            UserManager<User> userManager,\r\n            IHttpContextAccessor httpContextAccessor,\r\n            IGenericRepository<User> userRepository)\r\n        {\r\n            _userManager = userManager;\r\n            _httpContextAccessor = httpContextAccessor;\r\n            _userRepository = userRepository;\r\n            _currentUserGuid = GetCurrentUserClaims().UserId;\r\n            _currentUserName = GetCurrentUserClaims().UserName;\r\n            _currentUserRoles = GetCurrentUserClaims().UserRoles;\r\n        }\r\n\r\n        public async Task<User> GetCurrentUserAsync()\r\n        {\r\n           return await _userRepository.GetByIdAsync(_currentUserGuid);\r\n        }\r\n\r\n        public string GetCurrentUserGuid()\r\n        {\r\n            return _currentUserGuid;\r\n        }\r\n\r\n        public string GetCurrentUserName()\r\n        {\r\n            return _currentUserName;\r\n        }\r\n\r\n        public List<string> GetCurrentUserRole()\r\n        {\r\n            return _currentUserRoles;\r\n        }\r\n\r\n        private UserClaims GetCurrentUserClaims()\r\n        {\r\n            var userClaims = new UserClaims();\r\n            var claims = _httpContextAccessor.HttpContext.User.Claims.ToList();\r\n            foreach (var claim in claims)\r\n            {\r\n                switch (claim.Type)\r\n                {\r\n                    case UserClaimsKey.Sub:\r\n                        userClaims.UserId = claim.Value;\r\n                        break;\r\n                    case UserClaimsKey.Name:\r\n                        userClaims.UserName = claim.Value;\r\n                        break;\r\n                    case UserClaimsKey.Role:\r\n                        userClaims.UserRoles.Add(claim.Value);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            return userClaims;\r\n        }\r\n```"},{"Id":"7393674155","Type":"IssuesEvent","CreatedAt":"2018-03-17T00:33:51","Actor":"snoopydo","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1688","RelatedDescription":"Opened issue \"Identity mismatch between Email and Username\" (#1688) at aspnet/Identity","RelatedBody":"When using Identity it generates views and methods that confuse Email and Username.\r\n\r\nThe register view and methods ask for an Email and Password, assigns Username the value of Email.\r\n\r\nThe login view asks for Email and Password, but uses the email as a Username, via call to _signInManager.PasswordSignInAsync(...) which takes a Username and Password.\r\n\r\nThe Account/Manage view allows you to change your Email.  If I change my email I can no longer login.  If I use my previous Email I can, the Account/Manage views shows my correctly changed email and a readonly Username with my original email used at signup.\r\n\r\nThis is with a new unmodified project generated via new project in visual studio selecting individual user accounts."},{"Id":"7392033339","Type":"PullRequestEvent","CreatedAt":"2018-03-16T17:18:10","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1687","RelatedDescription":"Merged pull request \"React to Razor Sdk changes\" (#1687) at aspnet/Identity","RelatedBody":"Assembly attributes are autogened by Razor Sdk and results in duplicates"},{"Id":"7391969405","Type":"IssuesEvent","CreatedAt":"2018-03-16T17:05:32","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1616","RelatedDescription":"Closed issue \"Replace SignIn with RefreshSignIn in UI \" (#1616) at aspnet/Identity","RelatedBody":"> Manage actions lose cookie info (persistent/external login claim) when they call SignInAsync instead of RefreshSignIn\r\n\r\nSee https://github.com/aspnet/Identity/pull/1615#issuecomment-363236876\r\n\r\ncc @HaoK "},{"Id":"7391967827","Type":"PullRequestEvent","CreatedAt":"2018-03-16T17:05:14","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1655","RelatedDescription":"Merged pull request \"Use RefreshSignInAsync\" (#1655) at aspnet/Identity","RelatedBody":"Addresses #1616 "},{"Id":"7391948010","Type":"PullRequestEvent","CreatedAt":"2018-03-16T17:01:17","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1687","RelatedDescription":"Opened pull request \"React to Razor Sdk changes\" (#1687) at aspnet/Identity","RelatedBody":"Assembly attributes are autogened by Razor Sdk and results in duplicates"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7394780708","Type":"IssuesEvent","CreatedAt":"2018-03-17T15:05:08","Actor":"benaadams","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2402","RelatedDescription":"Opened issue \"Is a Null Header Value a Set header value?\" (#2402) at aspnet/KestrelHttpServer","RelatedBody":"Setting a Header to null \r\n* doesn't change its count (stays at zero)\r\n* doesn't change the Response output (header is not output)\r\n\r\nHowever it will cause an error if a real value is added after:\r\n\r\n```csharp\r\napp.Run(async (context) =>\r\n{\r\n    var resposne = context.Response;\r\n\r\n    // Prints zero\r\n    Console.WriteLine(resposne.Headers[\"warning\"].Count);\r\n\r\n    // Does not change response\r\n    resposne.Headers.Add(\"warning\", new StringValues((string)null));\r\n\r\n    // Prints zero\r\n    Console.WriteLine(resposne.Headers[\"warning\"].Count);\r\n\r\n    // Throws: System.ArgumentException: An item with the same key has already been added.\r\n    resposne.Headers.Add(\"warning\", new StringValues(\"Hello\"));\r\n\r\n    await context.Response.WriteAsync(\"Hello World!\");\r\n});\r\n```\r\nShould it not throw, but set the value? (as no value is set)"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7394395829","Type":"IssuesEvent","CreatedAt":"2018-03-17T10:34:15","Actor":"snielsson","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2181","RelatedDescription":"Opened issue \"build broken\" (#2181) at aspnet/Razor","RelatedBody":"Cloned and ran build.cmd but got:\r\n\r\nC:\\Projects\\5_Misc\\Razor>build.cmd\r\nDownloading KoreBuild 2.1.0-preview2-15728\r\nUsing KoreBuild 2.1.0-preview2-15728\r\nC:\\Projects\\5_Misc\\Razor\\run.ps1 : A parameter cannot be found that matches parameter name 'CI'.\r\nAt line:1 char:126\r\n+ ... ulture = '';& 'C:\\Projects\\5_Misc\\Razor\\run.ps1' default-build ; exit ...\r\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : InvalidArgument: (:) [run.ps1], ParameterBindingException\r\n    + FullyQualifiedErrorId : NamedParameterNotFound,run.ps1"},{"Id":"7393858651","Type":"PullRequestEvent","CreatedAt":"2018-03-17T02:41:28","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2180","RelatedDescription":"Opened pull request \"Show error if page directive is not at the top of file\" (#2180) at aspnet/Razor","RelatedBody":"aspnet/Mvc#6633\r\n\r\nOnce we know that an `@page` exists in the document, we can process the same document again with `ParseLeadingDirectives=true` and make sure if the `@page` exists in the resulting code document. If not, log an error."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7364725434","Type":"IssuesEvent","CreatedAt":"2018-03-12T10:19:58","Actor":"RehanSaeed","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Opened issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7307968614","Type":"IssuesEvent","CreatedAt":"2018-02-28T06:01:18","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file."},{"Id":"7307353364","Type":"IssuesEvent","CreatedAt":"2018-02-28T02:19:15","Actor":"rjamesnw","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Opened issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7373364495","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:04:24","Actor":"blowdart","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/294","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\" (#294) at aspnet/Announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0808: ASP.NET Core Denial Of Service Vulnerability\r\n\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in public ASP.NET Core 1.0, 1.1 and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in all public versions of ASP.NET Core where, if an application is hosted behind Internet Information Server (IIS) a remote unauthenticated attacker can use a specially crafted request can cause a Denial of Service.\r\n\r\n## Dicussion\r\n\r\nDiscussion for this issue can be found at https://github.com/aspnet/IISIntegration/issues/658\r\n\r\n### Mitigation Factors\r\nAny site hosted behind a different proxy, such as nginx or an application hosted in Azure, which uses Application Request Routing (ARR) as a proxy is not affected. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft ASP.NET Core project if it is hosted behind an IIS server running AspNetCoreModule (ANCM) prior to 7.1.1990.0.\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\nOpen a PowerShell prompt and run the following command\r\n\r\n```powershell\r\n(Get-Item $env:SystemDrive\\Windows\\System32\\inetsrv\\aspnetcore.dll).VersionInfo\r\n```\r\n\r\nor use the Windows file properties dialog to check the version on `C:\\Windows\\System32\\inetsrv\\aspnetcore.dll`, where C: is your OS install drive.\r\n\r\nIf the file version is less than 7.1.1990.0 you are affected.\r\n\r\n### How do I fix the issue? \r\nInstall the latest version of the ASP.NET Core Hosting Bundle \r\n(You need only install a single version, i.e. installing Version 2.0 will protect Version 1.0/1.1 .NET Core applications and vice versa. Choose the one that corresponds to the highest runtime version on your server).\r\n\r\n* [Hosting Bundle for ASP.NET Core 1.0/1.1](https://go.microsoft.com/fwlink/?linkid=869677)\r\n* [Hosting Bundle for ASP.NET Core 2.0](https://go.microsoft.com/fwlink/?linkid=869674)\r\n\r\nThen restart IIS by running \r\n\r\n```\r\nnet stop was /y\r\nnet start w3svc\r\n```\r\n\r\nfrom an elevated command line.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgements\r\n\r\nAndrei Gorlov\r\n\r\n### External Links\r\n\r\n[CVE-2018-0808](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0808)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application tâ¦ https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":3,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 fâ¦ https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesdâ¦ https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null},{"Id":"968561906003791872","CreatedAt":"2018-02-27T19:02:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":6,"RawContent":null},{"Id":"968550190889267201","CreatedAt":"2018-02-27T18:15:34+00:00","UserScreenname":"aspnet","Text":"#ASPNET Core 2.1.0-preview1 now available https://t.co/loVh03KKfz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":70,"FavoriteCount":54,"RawContent":null},{"Id":"966009382377897985","CreatedAt":"2018-02-20T17:59:19+00:00","UserScreenname":"aspnet","Text":"Starting now! \n\nJoin the #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"965988674474188800","CreatedAt":"2018-02-20T16:37:01+00:00","UserScreenname":"aspnet","Text":"Catch the #ASPNET Community Standup today at 10 AM Pacific / 18:00 GMT with Javier C Nelson showing a preview of Raâ¦ https://t.co/Fg8NoQJtJp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":4,"RawContent":null},{"Id":"965964952442933249","CreatedAt":"2018-02-20T15:02:46+00:00","UserScreenname":"aspnet","Text":"Jeff is working with cognitive services and Bots today on stream... check it out! https://t.co/HVyIw0Wcgd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":9,"RawContent":null},{"Id":"963791622822612994","CreatedAt":"2018-02-14T15:06:43+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz this FRIDAY at 10am / 15:00 UTC for a free online workshop to get started with ASPNet Core.â¦ https://t.co/qtufFsbfmc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":16,"RawContent":null}]}},"RunOn":"2018-03-19T05:30:10.7885578Z","RunDurationInMilliseconds":9313}