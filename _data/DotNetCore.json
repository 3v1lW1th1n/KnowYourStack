{"Data":{"Blog":{"FeedItems":[{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7463144829","Type":"PullRequestEvent","CreatedAt":"2018-04-01T00:35:01","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17377","RelatedDescription":"Opened pull request \"Update CoreClr to preview3-26401-01 (master)\" (#17377) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7462787580","Type":"PullRequestEvent","CreatedAt":"2018-03-31T19:54:40","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17376","RelatedDescription":"Opened pull request \"Increase crst level for ReadyToRunInfo's map lock\" (#17376) at dotnet/coreclr","RelatedBody":"Fixes regex-redux-1 failure seen in https://github.com/dotnet/coreclr/issues/15309\r\n- HashMap lookups and insertions occur under a level 0 lock and may enter cooperative GC mode inside the lock. A GC that is triggered may delete some dynamic code, which takes another level 0 lock. It does not look like it's possible for a deadlock as a result.\r\n- Fixed by increasing the crst level for the lock used in ReadyToRunInfo"},{"Id":"7462727813","Type":"PullRequestEvent","CreatedAt":"2018-03-31T19:13:32","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17375","RelatedDescription":"Opened pull request \"Enable building of Ubuntu/arm crossarch components in netci\" (#17375) at dotnet/coreclr","RelatedBody":"@BruceForstall Do you think is it safe now to enable building crosscomponents for Ubuntu arm (which automatically enables R2R crossgen-ing of S.P.C.dll before tests running). FYI, I rebased dev/unit_test_workflow to include #17342 changes.\r\n\r\nInnerloop is green and just one pri1 test failed during Normal (Loader/binding/assemblies/assemblybugs/177066w/repro177066/repro177066.sh).\r\n\r\n/cc @RussKeldorph "},{"Id":"7462701290","Type":"PullRequestEvent","CreatedAt":"2018-03-31T18:55:32","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17374","RelatedDescription":"Opened pull request \"Update BuildTools, CoreClr, CoreFx, PgoData to preview2-02629-01, preview2-26330-05, preview2-26330-05, release-20180228-0037, respectively (release/2.1)\" (#17374) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7462494295","Type":"PullRequestEvent","CreatedAt":"2018-03-31T16:41:25","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17363","RelatedDescription":null,"RelatedBody":"When there are nested calls, and there is a non-ptr on the stack below the last ptr popped by the inner call, the `argHigh` and `argCnt` values can get out of sync."},{"Id":"7462494232","Type":"PullRequestEvent","CreatedAt":"2018-03-31T16:41:22","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17363","RelatedDescription":"Closed pull request \"GC info fix: correctly adjust argCnt\" (#17363) at dotnet/coreclr","RelatedBody":"When there are nested calls, and there is a non-ptr on the stack below the last ptr popped by the inner call, the `argHigh` and `argCnt` values can get out of sync."},{"Id":"7462466418","Type":"PullRequestEvent","CreatedAt":"2018-03-31T16:24:23","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16899","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to , servicing-26329-01, respectively (release/1.1.0)\" (#16899) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7462465127","Type":"PullRequestEvent","CreatedAt":"2018-03-31T16:23:38","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17371","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to preview3-26331-05, preview3-26331-05, respectively (master)\" (#17371) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7462412586","Type":"PullRequestEvent","CreatedAt":"2018-03-31T15:53:22","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17180","RelatedDescription":"Merged pull request \"Fix the code-size estimation for AVX/AVX2 ExtractVector128\" (#17180) at dotnet/coreclr","RelatedBody":"The code size of `vextracti/f128` could be different based on the base register of the dst address.\r\n\r\nThe bug was detected by JITStress tests.\r\n\r\n@CarolEidt @tannergooding "},{"Id":"7462287629","Type":"IssuesEvent","CreatedAt":"2018-03-31T14:33:26","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17373","RelatedDescription":"Closed issue \"AES with PKCS7 not supported on macOS\" (#17373) at dotnet/coreclr","RelatedBody":"With the following code:\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.Text;\r\n\r\nnamespace Bang.CustomClient\r\n{\r\n    public static class ApiCipher\r\n    {\r\n        public static byte[] key = Encoding.ASCII.GetBytes(\"1234123412341234\");\r\n        public static byte[] iv = Encoding.ASCII.GetBytes(\"1234123412341234\");\r\n        public static byte[] decrypt(byte[] ciphertext)\r\n        {\r\n            using (var aes = Aes.Create())\r\n            {\r\n                Debug.Assert(aes != null, nameof(aes) + \" != null\");\r\n                aes.Key = key;\r\n                aes.IV = iv;\r\n                aes.Padding = PaddingMode.None;\r\n\r\n                using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))\r\n                {\r\n                    var result = decryptor.TransformFinalBlock(ciphertext, 0, ciphertext.Length);\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var bin = File.ReadAllBytes(\"http\");\r\n            var dec = ApiCipher.decrypt(bin);\r\n            Console.Write(Encoding.ASCII.GetString(dec));\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nIf I comment `aes.Padding = PaddingMode.None;` (i.e. use PKCS7 padding), the program will throw:\r\n\r\n```\r\nUnhandled Exception: System.Security.Cryptography.CryptographicException: Specified padding mode is not valid for this algorithm.\r\n   at Internal.Cryptography.UniversalCryptoDecryptor.DepadBlock(Byte[] block, Int32 offset, Int32 count)\r\n   at Internal.Cryptography.UniversalCryptoDecryptor.UncheckedTransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount)\r\n   at Internal.Cryptography.UniversalCryptoTransform.TransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount)\r\n   at Bang.CustomClient.ApiCipher.decrypt(Byte[] ciphertext) in /Users/coderfox/Dev/Projects/BanGDreamHack/Bang.CustomClient/ApiCipher.cs:line 36\r\n   at Bang.CustomClient.Program.Main(String[] args) in /Users/coderfox/Dev/Projects/BanGDreamHack/Bang.CustomClient/Program.cs:line 12\r\n```\r\n\r\nBut if I uncomment the line, the program works.\r\n\r\nBesides, I have validated the input file with python, and it successfully decrypts.\r\n\r\nI am using dotnet-sdk `2.1.103` on macOS `10.13.1 (17B48)`.\r\n\r\nFile `http` in `base64` is:\r\n\r\n```\r\naeqsmc3eMswgJkz34BACmqZSo96E61H43Q5oK9NqXzM=\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7463375103","Type":"PullRequestEvent","CreatedAt":"2018-04-01T04:10:40","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8962","RelatedDescription":"Opened pull request \"Fix prodcon\" (#8962) at dotnet/cli","RelatedBody":"Updates the SDK to the latest version available.\r\nFixes an issue where test assets were not respecting the Orchestrated package versions, leading to a conflict with the Microsoft.NetCore.App version, which now errors out when building/publishing.\r\n\r\nThere is still one issue happening, which is when generating the project tools deps.json, because of that, marking this PR as WIP.\r\n"},{"Id":"7463373422","Type":"PullRequestEvent","CreatedAt":"2018-04-01T04:08:57","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8961","RelatedDescription":"Closed pull request \"Update SDK to 2.1.300-preview2-62731-04\" (#8961) at dotnet/cli","RelatedBody":"I want the SDK code to match the SDK's prodcon code."},{"Id":"7462990596","Type":"PullRequestEvent","CreatedAt":"2018-03-31T22:18:24","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8961","RelatedDescription":"Opened pull request \"Update SDK to 2.1.300-preview2-62731-04\" (#8961) at dotnet/cli","RelatedBody":"I want the SDK code to match the SDK's prodcon code."},{"Id":"7462687450","Type":"PullRequestEvent","CreatedAt":"2018-03-31T18:46:02","Actor":"dotnet-maestro-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8960","RelatedDescription":"Opened pull request \"Update clicommandlineparser, climigrate, coresetup, coresetup, coresetup, fsharp, msbuild, roslyn, sdk, templating, templating, templating, websdk to alpha-62730-03, alpha-62730-04, preview2-26330-03, preview2-26330-03, preview2-26330-03, rtm-180330-0, preview-000143, beta4-62730-07, preview2-62730-09, beta3-20180330-1538568, beta3-20180330-1538568, beta3-20180330-1538568, preview2-20180330-1538569, respectively (release/2.1.3xx)\" (#8960) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7461503688","Type":"PullRequestEvent","CreatedAt":"2018-03-31T03:50:30","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8945","RelatedDescription":"Merged pull request \"Updating the runtime to 2.0.7 and the CLI branding to 2.1.105.\" (#8945) at dotnet/cli","RelatedBody":"Marked WIP because we can't merge this until the NuGet fix is in and that build is cut."},{"Id":"7461289600","Type":"IssuesEvent","CreatedAt":"2018-03-31T00:59:23","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8959","RelatedDescription":"Opened issue \"Flaky Test: Microsoft.DotNet.Migration.Tests.GivenThatIWantToMigrateSolutions.ItMigratesAndBuildsSln\" (#8959) at dotnet/cli","RelatedBody":"This test fails in CI with the stack below:\r\n\r\nLatest failure: https://ci.dot.net/job/dotnet_cli/job/master/job/release_windows_nt_x64_prtest/2583/\r\n\r\n```\r\ntacktrace\r\n\r\n                                        MESSAGE:\r\n                                        Expected command to pass but it did not.\r\nFile Name: D:\\j\\workspace\\release_windo---f861f43b\\bin\\2\\win-x64\\dotnet\\dotnet.exe\r\nArguments: build \"TestApp\\TestApp.sln\"\r\nWorkingDir:: D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\r\nExit Code: 1\r\nStdOut:\r\nMicrosoft (R) Build Engine version 15.7.124.19828 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 102.36 ms for D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestLibrary\\TestLibrary.csproj.\r\n  Restore completed in 73.53 ms for D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\src\\subdir\\subdir.csproj.\r\n  Restore completed in 93.46 ms for D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\TestApp.csproj.\r\n  You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452\r\n  You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452\r\n  You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452\r\n  subdir -> D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\src\\subdir\\bin\\Release\\netstandard1.5\\subdir.dll\r\n  TestLibrary -> D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestLibrary\\bin\\Release\\netstandard1.5\\TestLibrary.dll\r\nobj\\Release\\netcoreapp1.1\\TestApp.AssemblyInfo.cs(10,12): error CS0579: Duplicate 'System.Reflection.AssemblyCompanyAttribute' attribute [D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\TestApp.csproj]\r\nobj\\Release\\netcoreapp1.1\\TestApp.AssemblyInfo.cs(11,12): error CS0579: Duplicate 'System.Reflection.AssemblyConfigurationAttribute' attribute [D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\TestApp.csproj]\r\nobj\\Release\\netcoreapp1.1\\TestApp.AssemblyInfo.cs(12,12): error CS0579: Duplicate 'System.Reflection.AssemblyFileVersionAttribute' attribute [D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\TestApp.csproj]\r\nobj\\Release\\netcoreapp1.1\\TestApp.AssemblyInfo.cs(13,12): error CS0579: Duplicate 'System.Reflection.AssemblyInformationalVersionAttribute' attribute [D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\TestApp.csproj]\r\nobj\\Release\\netcoreapp1.1\\TestApp.AssemblyInfo.cs(14,12): error CS0579: Duplicate 'System.Reflection.AssemblyProductAttribute' attribute [D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\TestApp.csproj]\r\nobj\\Release\\netcoreapp1.1\\TestApp.AssemblyInfo.cs(15,12): error CS0579: Duplicate 'System.Reflection.AssemblyTitleAttribute' attribute [D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\TestApp.csproj]\r\nobj\\Release\\netcoreapp1.1\\TestApp.AssemblyInfo.cs(16,12): error CS0579: Duplicate 'System.Reflection.AssemblyVersionAttribute' attribute [D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\TestApp.csproj]\r\n\r\nBuild FAILED.\r\n\r\nobj\\Release\\netcoreapp1.1\\TestApp.AssemblyInfo.cs(10,12): error CS0579: Duplicate 'System.Reflection.AssemblyCompanyAttribute' attribute [D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\TestApp.csproj]\r\nobj\\Release\\netcoreapp1.1\\TestApp.AssemblyInfo.cs(11,12): error CS0579: Duplicate 'System.Reflection.AssemblyConfigurationAttribute' attribute [D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\TestApp.csproj]\r\nobj\\Release\\netcoreapp1.1\\TestApp.AssemblyInfo.cs(12,12): error CS0579: Duplicate 'System.Reflection.AssemblyFileVersionAttribute' attribute [D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\TestApp.csproj]\r\nobj\\Release\\netcoreapp1.1\\TestApp.AssemblyInfo.cs(13,12): error CS0579: Duplicate 'System.Reflection.AssemblyInformationalVersionAttribute' attribute [D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\TestApp.csproj]\r\nobj\\Release\\netcoreapp1.1\\TestApp.AssemblyInfo.cs(14,12): error CS0579: Duplicate 'System.Reflection.AssemblyProductAttribute' attribute [D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\TestApp.csproj]\r\nobj\\Release\\netcoreapp1.1\\TestApp.AssemblyInfo.cs(15,12): error CS0579: Duplicate 'System.Reflection.AssemblyTitleAttribute' attribute [D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\TestApp.csproj]\r\nobj\\Release\\netcoreapp1.1\\TestApp.AssemblyInfo.cs(16,12): error CS0579: Duplicate 'System.Reflection.AssemblyVersionAttribute' attribute [D:\\j\\workspace\\release_windo---f861f43b\\bin\\3\\win-x64\\test\\dotnet-migrate.Tests\\ItMigratesAndBuildsSln\\PJAppWithSlnAndXprojRefs\\TestApp\\TestApp.csproj]\r\n    0 Warning(s)\r\n    7 Error(s)\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"7461278757","Type":"IssuesEvent","CreatedAt":"2018-03-31T00:51:46","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7550","RelatedDescription":"Closed issue \"openSUSE Leap 42.1 has end-of-life'd - no builds available for 42.2/42.3\" (#7550) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nGo to https://www.microsoft.com/net/download/linux\r\n\r\n## Expected  behaviour\r\n\r\nBuilds available for openSUSE Leap 42.2 (released November 2016) and 42.3 (released July 2017).\r\n\r\n## Actual behaviour\r\n\r\nA build is only available for 42.1, which hit [end-of-life in May 2017](https://lists.opensuse.org/opensuse-announce/2017-05/msg00002.html).\r\n\r\n## Background\r\n\r\nAs 42.1 has hit end-of-life, it's [package repo](http://download.opensuse.org/distribution/leap/) is no longer available, meaning its very difficult to build an openSUSE image to test our net core code against.\r\n\r\nNote, this was raised in https://github.com/dotnet/cli/issues/5834, but closed with an incorrect answer (it referred to 42.1, which had already been superseded).\r\n\r\nInterestingly, on https://www.microsoft.com/net/core#linuxopensuse, it refers to 42.2, but https://www.microsoft.com/net/download/linux refers to 42.1.\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7462410593","Type":"IssuesEvent","CreatedAt":"2018-03-31T15:52:06","Actor":"metadings","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/698","RelatedDescription":"Closed issue \"New Version Hell\" (#698) at dotnet/standard","RelatedBody":"Look. I thought .NET would solve this problem.\r\n\r\nNow you do have .NET Framework 2.0, 4.0, 4.5, .NET Standard 1.x, 2.x, .NET Core 1.x, 2.x - you could compile once for all of them, but you've decided to use stupid `#if NETSTANDARD1_x` directives without value (like [this](https://github.com/metadings/Blake2B.cs/pull/2/files)). You do have a lot of DLLs again and no way to detect which platform is running (`readonly static bool IsMono = Type.GetType(\"Mono.Runtime\") != null`).\r\n\r\nI want you to cancel .NET standard; in favor of just .NET framework (and mono)."},{"Id":"7462024550","Type":"IssuesEvent","CreatedAt":"2018-03-31T11:14:43","Actor":"metadings","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/698","RelatedDescription":"Opened issue \"New Version Hell\" (#698) at dotnet/standard","RelatedBody":"Look. I thought .NET would solve this problem.\r\n\r\nNow you do have .NET Framework 2.0, 4.0, 4.5, .NET Standard 1.x, 2.x, .NET Core 1.x, 2.x - you could compile for all of them, but you've decided to use stupid #if directives. You do have a lot of DLLs again and no way to detect which platform is running (IsMono = Type.GetType(\"Mono.Runtime\") != null).\r\n\r\nI want you to cancel .NET core and standard; in favor of just .NET and mono."},{"Id":"7460346731","Type":"IssuesEvent","CreatedAt":"2018-03-30T19:16:00","Actor":"jnm2","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/697","RelatedDescription":"Opened issue \"Trimmer tries to run when assemblies are missing\" (#697) at dotnet/standard","RelatedBody":"When project B depends on project A and something causes project A to stop compiling, this appears for project B:\r\n\r\n> Error MSB4018 The \"TrimFiles\" task failed unexpectedly. System.IO.FileNotFoundException: Could not find file 'ProjectA\\bin\\Debug\\ProjectA.exe'.\r\n\r\n```\r\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n   at Microsoft.DotNet.Build.Tasks.FileNode.PopulateDependenciesInternal(IDictionary`2 allFiles, Boolean preferNativeImage, ILog log, Stack`1 stack)\r\n   at Microsoft.DotNet.Build.Tasks.FileNode.PopulateDependencies(IDictionary`2 allFiles, Boolean preferNativeImage, ILog log)\r\n   at Microsoft.DotNet.Build.Tasks.TrimFiles.GetFiles(IDictionary`2 packages)\r\n   at Microsoft.DotNet.Build.Tasks.TrimFiles.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n```\r\n\r\n(build\\Microsoft.Packaging.Tools.Trimming.targets, line 71)\r\n\r\nI don't know if this is the whole picture, but when I ran into this I added `Condition=\"Exists(@(IntermediateAssembly))\"` to the main trimming target which had `AfterTargets=\"CoreCompile\"`.\r\n\r\n/cc @ericstj \r\n"},{"Id":"7457305260","Type":"PullRequestEvent","CreatedAt":"2018-03-30T03:20:07","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/440","RelatedDescription":"Merged pull request \"Update reference for .NET Standard 2.0 to match final bits\" (#440) at dotnet/standard","RelatedBody":"The diff is surprisingly large, but that seems to be a result of [this CCI change](https://github.com/dotnet/buildtools/commit/7cf90764ff3f869ad6c680fb71a5c89d26a16cc5).\r\n\r\n@weshaggard "},{"Id":"7454371159","Type":"IssuesEvent","CreatedAt":"2018-03-29T14:51:34","Actor":"MohammadHamdyGhanem","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/696","RelatedDescription":"Opened issue \"XAML standard API\" (#696) at dotnet/standard","RelatedBody":"I say Microsoft should make a XAML standard API (Like .NET Standard) that should be obeyed be Xamarin.Forms, UWP and ASP.NET some XAML/C# razor. Or extend .NET Standard to include this. \r\nControls and their properties and methods should have the same names whatever the underling implementation. This will make all these components easier to learn, and make most of the code reusable.\r\n\r\n"},{"Id":"7451276904","Type":"PullRequestEvent","CreatedAt":"2018-03-29T01:58:17","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/695","RelatedDescription":"Opened pull request \"Update BuildTools to preview3-02629-02 (master)\" (#695) at dotnet/standard","RelatedBody":""},{"Id":"7451016632","Type":"PullRequestEvent","CreatedAt":"2018-03-29T00:20:18","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/694","RelatedDescription":"Merged pull request \"Update BuildTools to preview3-02628-01 (master)\" (#694) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7463443242","Type":"IssuesEvent","CreatedAt":"2018-04-01T05:23:12","Actor":"GrabYourPitchforks","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/28693","RelatedDescription":"Closed issue \"ArrayMemoryPool<T> should pool ArrayMemoryPoolBuffer\" (#28693) at dotnet/corefx","RelatedBody":"Using bounded ConcurrentQueue.Segment as per https://github.com/dotnet/corefx/pull/28638 (to have upper limit on number pooled)\r\n\r\nOtherwise it allocates for every `Rent`; which is a bit poor for a pool\r\n\r\n/cc @pakrym @GrabYourPitchforks @ahsonkhan @davidfowl @stephentoub "},{"Id":"7463368862","Type":"IssuesEvent","CreatedAt":"2018-04-01T04:04:17","Actor":"Petermarcu","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28694","RelatedDescription":"Opened issue \"Console ReadKey echo escapes\" (#28694) at dotnet/corefx","RelatedBody":"@devel0 commented on [Sat Mar 31 2018](https://github.com/dotnet/core/issues/1398)\n\nUsing Console.ReadKey(true) should not echo control keys but in linux terminal I got `^[OC` echos.\r\n\r\n## version\r\n\r\n- **dotnet version** : 2.1.101\r\n- **os** : ubuntu 17.10\r\n\r\n## repro\r\n\r\n```\r\nConsole.ReadKey(true);\r\n```\r\n\r\n- press \"right arrow\" key\r\n\r\n### expected\r\n\r\n- no echoes\r\n\r\n### current behavior\r\n\r\n- echoed `^[OC` to the console\r\n\n\n"},{"Id":"7463308395","Type":"IssuesEvent","CreatedAt":"2018-04-01T03:07:22","Actor":"benaadams","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28693","RelatedDescription":"Opened issue \"ArrayMemoryPool<T> should pool ArrayMemoryPoolBuffer\" (#28693) at dotnet/corefx","RelatedBody":"Using bounded ConcurrentQueue.Segment as per https://github.com/dotnet/corefx/pull/28638 (to have upper limit on number pooled)"},{"Id":"7463265309","Type":"PullRequestEvent","CreatedAt":"2018-04-01T02:28:43","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28688","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#28688) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7463215342","Type":"PullRequestEvent","CreatedAt":"2018-04-01T01:41:04","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28692","RelatedDescription":"Opened pull request \"Fix intermittent crashes on FileSystemEnumeration on Unix\" (#28692) at dotnet/corefx","RelatedBody":"The code uses a leased byte[] to call readdir_r and the native struct (dirent) is stored in this array. The DirectoryEntry struct then points to the name of the file in the middle of the array. If the array is moved by GC before the struct is used it starts to point to a bogus name. \r\n\r\nFixes #27740 \r\nFixes #27504 \r\nFixes #27038\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7463300504","Type":"PullRequestEvent","CreatedAt":"2018-04-01T03:00:56","Actor":"angelina-dev","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25866","RelatedDescription":"Opened pull request \"Generate Constructor should not copy \"protected\" from abstract base class (#25238)\" (#25866) at dotnet/roslyn","RelatedBody":""},{"Id":"7463100767","Type":"PullRequestEvent","CreatedAt":"2018-03-31T23:55:02","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25865","RelatedDescription":"Opened pull request \"WIP: Add features to offer using conditional expressions ```?:``` over explicit if-statement flows.\" (#25865) at dotnet/roslyn","RelatedBody":"For example, with: \r\n\r\n![image](https://user-images.githubusercontent.com/4564579/38168541-146b3906-3504-11e8-9dbd-6ebacc4c6c95.png)\r\n\r\nWe offer:\r\n\r\n![image](https://user-images.githubusercontent.com/4564579/38168544-1d5a1640-3504-11e8-8c42-9fe5ea0600b0.png)\r\n\r\nTodo:\r\n\r\n[ ] - VB\r\n[ ] - Tests\r\n[ ] - Better formatting for large or multi-line clauses in the ```?:``` expression.\r\n[ ] - Support this for ```if```-statements with ```return``` statements in their bodies."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7462130052","Type":"PullRequestEvent","CreatedAt":"2018-03-31T12:39:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5643","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5643) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7461748066","Type":"PullRequestEvent","CreatedAt":"2018-03-31T07:32:29","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5643","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5643) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7461202402","Type":"PullRequestEvent","CreatedAt":"2018-03-31T00:07:38","Actor":"ahsonkhan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5642","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5642) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7460989580","Type":"PullRequestEvent","CreatedAt":"2018-03-30T22:31:31","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5642","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5642) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7459227263","Type":"IssuesEvent","CreatedAt":"2018-03-30T14:26:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5604","RelatedDescription":"Closed issue \"Net Native compilation fails with Out of Memory (Xamarin/UWP)\" (#5604) at dotnet/corert","RelatedBody":"_From @sebastianfilke on March 22, 2018 13:54_\n\nWe have a big problem with the net native compilation in a relative big project.\r\nThe release build only works if we disable the option “Compile with .NET Native tool chain” or “Optimize code”.\r\nOtherwise the build takes up to 10 minutes and ends with an out of memory error.\r\n\r\nThe build log file is attached: [build.log](https://github.com/dotnet/core/files/1837784/build.log)\r\n\r\nThere is also an ilcRepro.zip file attached:\r\nhttps://drive.google.com/file/d/1bhEwZco0fugxxRDxj0hi86jnb9eJIpOV/view?usp=sharing\r\n\r\nWe tried several different settings in the Default.rd.xml, but nothing worked yet.\r\n\r\n•\tWe comment out the application assembly tag\r\n<!-- <Assembly Name=\"*Application*\" Dynamic=\"Required All\" DoNotOptimize=\"true\"/> -->\r\n•\tWe also tried to add an extra assembly tag for every assembly and with DoNotOptimize\r\n\r\nBut neither worked. \r\n\r\nPlease give me an advice or another solution. I don’t know if this is a bug or an assembly doesn’t worked or is not ready for net native.\r\n\n\n_Copied from original issue: dotnet/core#1372_"},{"Id":"7455835029","Type":"PullRequestEvent","CreatedAt":"2018-03-29T19:44:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5641","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5641) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7455294539","Type":"PullRequestEvent","CreatedAt":"2018-03-29T17:40:06","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5641","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5641) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7455264798","Type":"PullRequestEvent","CreatedAt":"2018-03-29T17:34:00","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5618","RelatedDescription":"Merged pull request \"Implement P/Invoke 'A' and 'W' Probing\" (#5618) at dotnet/corert","RelatedBody":"Implement probing for native function names following the A/W suffix notation used on Windows.\r\n\r\nFixes #730."},{"Id":"7455264786","Type":"IssuesEvent","CreatedAt":"2018-03-29T17:34:00","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/730","RelatedDescription":"Closed issue \"Pinvoke method \"W\" and \"A\" probing\" (#730) at dotnet/corert","RelatedBody":"(1). [DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode)]\npublic static extern bool GetProcessMemoryInfo(IntPtr hProcess, out PROCESS_MEMORY_COUNTERS ppsmemCounters, int cb);\n\nlinking phase  will fails since it can't find \"GetProcessMemoryInfo\" in any of the libs.\n\n(2).  On windows distinguish between \"W\" and \"A\" version of method.\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7463107093","Type":"IssuesEvent","CreatedAt":"2018-04-01T00:00:47","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2103","RelatedDescription":"Closed issue \"Unexpected NU5104 reported\" (#2103) at dotnet/sdk","RelatedBody":"**Version Used**:\r\n2.1.200-preview-007474\r\n`C:\\Program Files\\dotnet\\sdk\\2.1.200-preview-007474\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(198,5): warning NU5104`\r\n\r\n**Symptom**:\r\nAll of my projects are preview and have prefix in their versions, but packing target claims they cannot dependent on preview packages.\r\n\r\n**Reproduction**:\r\nhttps://github.com/amatukaze/HeavenlyWind.Infrastructure/tree/38fff7c6cae4bcdf53b708696e1006f24e49e361\r\n\r\n**About Installation**:\r\nI've installed both stable and preview version of visual studio, and no SDK manually installed. .NET Core workload only installed with stable version. Not sure why the build uses a preview version of SDK. And I want to use stable version for production builds."},{"Id":"7463033941","Type":"IssuesEvent","CreatedAt":"2018-03-31T22:55:18","Actor":"huoyaoyuan","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2103","RelatedDescription":"Opened issue \"Unexpected NU5104 reported\" (#2103) at dotnet/sdk","RelatedBody":"**Version Used**:\r\n2.1.200-preview-007474\r\n`C:\\Program Files\\dotnet\\sdk\\2.1.200-preview-007474\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(198,5): warning NU5104`\r\n\r\n**Symptom**:\r\nAll of my projects are preview and have prefix in their versions, but packing target claims they cannot dependent on preview packages.\r\n\r\n**Reproduce**:\r\n`https://github.com/amatukaze/HeavenlyWind.Infrastructure/tree/38fff7c6cae4bcdf53b708696e1006f24e49e361`\r\n\r\n**About Installation**:\r\nI've installed both stable and preview version of visual studio, and no SDK manually installed. .NET Core workload only installed with stable version. Not sure why the build uses a preview version of SDK. And I want to use stable version for production builds."},{"Id":"7461454010","Type":"PullRequestEvent","CreatedAt":"2018-03-31T03:07:24","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2102","RelatedDescription":"Opened pull request \"Merge release/2.1.1xx to release/2.1.2xx\" (#2102) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.1xx into release/2.1.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.1xx-to-release/2.1.2xx\ngit reset --hard upstream/release/2.1.2xx\ngit merge upstream/release/2.1.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.1xx-to-release/2.1.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7461244212","Type":"PullRequestEvent","CreatedAt":"2018-03-31T00:30:39","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2088","RelatedDescription":"Merged pull request \"Fix case sensitivity when mapping project paths to project infos.\" (#2088) at dotnet/sdk","RelatedBody":"When a solution contains a path to a project that differs by case for a project\r\nreference identity, the build fails because the project info can't be found.\r\n\r\nThe fix is to make the internal map case insensitive, allowing the case\r\ndifference in a project's path in the solution file.\r\n\r\nFixes dotnet/cli#8048."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"977245582724022272","CreatedAt":"2018-03-23T18:07:57+00:00","UserScreenname":"dotnet","Text":"Calling all Desktop Developers: how should UI development be improved? https://t.co/lKHACsK0Sv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":105,"FavoriteCount":74,"RawContent":null},{"Id":"976910301634465792","CreatedAt":"2018-03-22T19:55:40+00:00","UserScreenname":"dotnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/OokEA8H4Mo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":231,"FavoriteCount":179,"RawContent":null}]}},"RunOn":"2018-04-01T05:30:19.7060945Z","RunDurationInMilliseconds":7711}