{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":30,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":240,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7153843273","Type":"PullRequestEvent","CreatedAt":"2018-01-26T04:29:24","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16018","RelatedDescription":"Merged pull request \"Iteration 1: Create and Partially Plumb EventPipeSession\" (#16018) at dotnet/coreclr","RelatedBody":"Contributes to #15128.\r\n\r\nThis change contains two main pieces of functionality:\r\n\r\n1. Creates and partially plumbs through a new EventPipeSession class that is responsible for representing a running collection session.  This change does not yet expose EventPipeSession externally or allow for multiple sessions.  This will be in a forthcoming PR, and will be required in order to implement https://github.com/dotnet/designs/blob/master/accepted/cross-platform-performance-monitoring.md.\r\n\r\n2. Modifies the COMPlus configuration variables that can set EventPipe behavior to make them more full featured.  This change depends on the existence of a session (or at least would have otherwise required lots of throw-away code).  These variables can be set as follows:\r\n\r\n```\r\n# Enable EventPipe on start-up:\r\nexport COMPlus_EnableEventPipe=1\r\n\r\n# Set the output file (note: first process to create the file wins):\r\nexport COMPlus_EventPipeOutputFile=/path/to/output/file.netperf\r\n\r\n# Specify the provider, keyword, level tuples to be enabled:\r\nexport COMPlus_EventPipeConfig=Microsoft-Windows-DotNETRuntime:0x8001:4,Microsoft-Windows-DotNETRuntimePrivate:0x1:4\r\n```\r\n\r\ncc:@wfurt"},{"Id":"7153842089","Type":"PullRequestEvent","CreatedAt":"2018-01-26T04:28:49","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16025","RelatedDescription":"Merged pull request \"Fix Windows-Specific EventPipe Bugs\" (#16025) at dotnet/coreclr","RelatedBody":"1. Any events that are gated by the ETW \"IsEnabled\" macros will not be emitted to the EventPipe unless they are also enabled for ETW.\r\n2. An arithmetic order of operations error caused SampleProfiler to sleep for a very long period of time between samples."},{"Id":"7153822530","Type":"IssuesEvent","CreatedAt":"2018-01-26T04:18:49","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16030","RelatedDescription":"Opened issue \"EventPipe: Switch to CAPTURE_STATE and Remove Rundown Provider\" (#16030) at dotnet/coreclr","RelatedBody":"The runtime already has support for ETW CAPTURE_STATE.  We should use this support in EventPipe instead of using the rundown provider.  We can then remove rundown."},{"Id":"7153540353","Type":"PullRequestEvent","CreatedAt":"2018-01-26T02:22:42","Actor":"MattGal","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16029","RelatedDescription":"Opened pull request \"Fix ContainerName generation\" (#16029) at dotnet/coreclr","RelatedBody":"Ideally this should eventually include more things (there's a lot of rules around container naming) but at a minimum simply ToLower()ing it helps a lot (you cannot create a container name with capital letters)"},{"Id":"7153527514","Type":"PullRequestEvent","CreatedAt":"2018-01-26T02:17:58","Actor":"swgillespie","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16000","RelatedDescription":"Merged pull request \"[Local GC] FEATURE_EVENT_TRACE 3/n: Defining and Firing Dynamic Events \" (#16000) at dotnet/coreclr","RelatedBody":"This PR implements the [Defining and Firing Dynamic Events](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/standalone-gc-eventing.md#defining-and-firing-dynamic-events) portion of the standalone GC eventing spec.\r\n\r\n## Defining Events\r\n\r\nUnder this scheme, a new dynamic event can be added by adding a macro describing it to `src\\gc\\gcevents.h`. For example, this macro invocation defines a new dynamic event `GCMyNewDynamicEvent` has a level of Verbose, has the single keyword GC, and has a payload consisting of two `uint32_t`s:\r\n\r\n```c++\r\nDYNAMIC_EVENT(GCEvent2, GCEventLevel_Verbose, GCEventKeyword_GC, uint32_t, uint32_t)\r\n```\r\n\r\nThe general syntax for `DYNAMIC_EVENT` is\r\n\r\n```\r\nDYNAMIC_EVENT(<event name>, <level>, <keyword>, ...<arguments>)\r\n```\r\n\r\nWhere `arguments` are zero or more types that form the payload of the dynamic event. Dynamic events are always associated with the default ETW provider and not the private one.\r\n\r\nUnder the hood, the definition macro invocation results in two functions being generated. In\r\nthe above example, these two functions are generated:\r\n\r\n```c++\r\ninline bool GCEventEnabledGCEvent2()\r\n{\r\n    return GCEventStatus::IsEnabled(GCEventProvider_Default, GCEventKeyword_GC, GCEventLevel_Verbose);\r\n}\r\n\r\ntemplate<typename... EventActualArguments>\r\ninline void GCEventFireGCEvent2(EventActualArguments... arguments)\r\n{\r\n    FireDynamicEvent<uint32_t, uint32_t>(\"GCEvent2\", arguments...);\r\n}\r\n```\r\n\r\n`FireDynamicEvent` is a helper templated method that 1) serializes the event payload into a binary format and 2) sends the binary payload across the GC/EE interface via `IGCToCLREventSink::FireDynamicEvent`, where the event is handed off to the platform logger(s). `FireDynamicEvent` is a variadic template whose template arguments are the types of the event payload specified in the declaration and whose actual arguments are the values that will form the payload of the event.\r\n\r\n## Firing Events\r\n\r\nThe above two auto-generated functions allow us to hide the template complexity between the two macros used in https://github.com/dotnet/coreclr/pull/15957: `EVENT_ENABLED` and `FIRE_EVENT`.\r\n\r\nFor example, the following code would check if the above dynamic event is enabled and, if it is, fires the event:\r\n\r\n```c++\r\nif (EVENT_ENABLED(GCEvent2))\r\n{\r\n    FIRE_EVENT(GCEvent2, 11, 88);\r\n}\r\n```\r\n\r\nNote that this exactly the syntax for firing a known event - at the call site there is no distinction between a known event and a dynamic one.\r\n\r\nOn the EE side of the GC/EE interface, the EE defines a single event for dynamic events called `GCDynamicEvent`, whose level is `LogAlways` and whose keyword consists of all keywords that are used by the GC to fire events. This ensures that the `GCDynamicEvent` will always be enabled on the underlying ETW provider if there ever is a dynamic event that is enabled.\r\n\r\nThis is an example ETW payload that I received when testing this feature with the above dynamic event:\r\n\r\n```\r\n<Event MSec=  \"3345.6193\" PID=\"271000\" PName=\"Process(271000)\" TID=\"271064\" EventName=\"EventID(39)\"\r\n  TimeStamp=\"01/23/18 16:33:31.171744\" ID=\"39\" Version=\"0\" Keywords=\"0x03F00003\" TimeStampQPC=\"624,394,476,297\"\r\n  Level=\"Always\" ProviderName=\"Microsoft-Windows-DotNETRuntime\" ProviderGuid=\"e13c0d23-ccbc-4e12-931b-d9cc2eee27e4\" ClassicProvider=\"False\"\r\n  Opcode=\"41\" Task=\"1\" Channel=\"0\" PointerSize=\"8\"\r\n  CPU=\"4\" EventIndex=\"67\" TemplateType=\"UnhandledTraceEvent\">\r\n  <Payload Length=\"32\">\r\n       0:  47  0 43  0 45  0 76  0 | 65  0 6e  0 74  0 32  0   G.C.E.v. e.n.t.2.\r\n      10:   0  0  8  0  0  0  b  0 |  0  0 58  0  0  0  2  0   ........ ..X.....\r\n  </Payload>\r\n</Event>\r\n```\r\n\r\n(note that PerfView, which produced this event dump, is not aware what this event is because I haven't installed the manifest that I built - the payload is the most interesting part of this snippet.)\r\n\r\n## Serializing Event Payloads\r\n\r\nPayload serialization is driven by the `EventSerializationTraits` in `src\\gc\\gcevent_serializers.h`. It should be implemented for all types that will be serialized as event payloads. This PR provides only one such implementation, for `uint32_t`, but new implementations can be added as they are needed for new dynamic events.\r\n\r\nThe serialization scheme is extremely simple and doesn't preclude more sophisticated serialization schemes in the future. The provided implementation of `EventSerializationTraits` for `uint32_t` serializes a `uint32_t` as a four-byte little-endian integer, but the code in this file is not opinionated at all about how things are serialized."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7153820030","Type":"PullRequestEvent","CreatedAt":"2018-01-26T04:17:34","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8480","RelatedDescription":"Merged pull request \"Fix test folder cannot delete and missing test\" (#8480) at dotnet/cli","RelatedBody":"There is a bug that prevent folder with space in the end to be deleted on corefx. I will file it later.\r\n\r\nThe space in the test is needed due to shim used to cannot handle space in the be PATH."},{"Id":"7153520793","Type":"PullRequestEvent","CreatedAt":"2018-01-26T02:15:29","Actor":"KevinRansom","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8481","RelatedDescription":"Opened pull request \"Update fsharp compiler to match preview 4\" (#8481) at dotnet/cli","RelatedBody":"Update the F# compiler to match the bits in preview 4.\r\n"},{"Id":"7153017807","Type":"PullRequestEvent","CreatedAt":"2018-01-25T23:21:10","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8480","RelatedDescription":"Opened pull request \"Fix test folder cannot delete and missing test\" (#8480) at dotnet/cli","RelatedBody":"There is a bug that prevent folder with space in the end to be deleted on corefx. I will file it later.\r\n\r\nThe space in the test is needed due to shim used to cannot handle space in the be PATH."},{"Id":"7152960837","Type":"IssuesEvent","CreatedAt":"2018-01-25T23:04:54","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/6114","RelatedDescription":"Closed issue \"Localization work for the CLI\" (#6114) at dotnet/cli","RelatedBody":"- [x] Produce CLI's satellite assemblies (PR #6800)\r\n- [x] Carry CLI dependencies' satellite assemblies (#5007)\r\n- [x] Pay-for-play (#6877)\r\n\r\nBlocking partner issues:\r\n- [x] https://github.com/Microsoft/msbuild/issues/2187 (In PR)\r\n- [x] https://github.com/Microsoft/msbuild/issues/2203 (In PR)\r\n- [ ] https://github.com/NuGet/Home/issues/5382\r\n\r\n"},{"Id":"7152954273","Type":"PullRequestEvent","CreatedAt":"2018-01-25T23:03:06","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8475","RelatedDescription":"Merged pull request \"MSBuild 15.6.70\" (#8475) at dotnet/cli","RelatedBody":"This went in yesterday for 15.6 preview 4.\r\nhttps://devdiv.visualstudio.com/DevDiv/MSBuild/_git/VS/pullrequest/103205?_a=overview\r\n\r\nIt contains a fix for pre-processor output (there was an ordering issue with implicit imports from SDKs in certain cases). Very low priority, only affects `/pp` flag. Feel free to not insert for preview 4 if this is the only item (we've been off by 0.0.1ish in a preview before)."},{"Id":"7152841432","Type":"IssuesEvent","CreatedAt":"2018-01-25T22:34:22","Actor":"mattscheffer","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8479","RelatedDescription":"Opened issue \"Dotnet install doesn't fail when installing two tools with different package ids but the same Command Name\" (#8479) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCreate 2 projects to be used with different names\r\n```\r\ndotnet new console -n proj1\r\ndotnet new console -n proj2\r\n```\r\nEdit the project file for each and add the following\r\n```\r\n<PackAsTool>True</PackAsTool>\r\n<ToolCommandName>mytool1</ToolCommandName>\r\n```\r\nShould be the same command name for each.\r\nRun dotnet pack in each project file folder\r\nCopy the package to your local NuGet feed (or run the next commands with --source tags)\r\nAttempt to install both\r\n```\r\ndotnet install tool -g proj1\r\ndotnet install tool -g proj2\r\n```\r\n\r\n## Expected  behavior\r\nThe second install should fail as it has the same tool name as proj1.\r\n\r\n## Actual behavior\r\nBoth install.\r\n![image](https://user-images.githubusercontent.com/10537189/35416084-bf348000-01dc-11e8-9660-eb1cd6539280.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.300-preview2-008017)\r\n\r\nProduct Information:\r\n Version:            2.1.300-preview2-008017\r\n Commit SHA-1 hash:  f4a0d2db0e\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008017\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview2-26123-02\r\n  Build    : b64cb46124df1f7e64d7b7cde1034f693b270ceb\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7151351258","Type":"PullRequestEvent","CreatedAt":"2018-01-25T17:13:23","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/630","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02425-01 (master)\" (#630) at dotnet/standard","RelatedBody":""},{"Id":"7149575857","Type":"IssuesEvent","CreatedAt":"2018-01-25T11:27:48","Actor":"archanasoni","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/629","RelatedDescription":"Opened issue \"Question:Is there a common api to load unmanaged dll in .net standard 2.0 ?\" (#629) at dotnet/standard","RelatedBody":"Hi,\r\n\r\nWe're working to have .net standard 2.0 support for IBM .Net Provider. We have dependency on unmanaged\\native dll and currently we are loading it via LoadUnmanagedDllFromPath(..) from System.Runtime.Loader pkg.\r\nWe want our package to work with Full Framework as well.. Since System.Runtime.Loader pkg do not support FullFramework, we need to figure out alternate way of loading unmanaged dll.\r\nOne way we could see using  DllImport.. or Platform invoke. But in this case we have to deal with Linux and OSX. Which we are trying to avoid..  \r\nOur question are-\r\n1. Is there a way or common api across the platforms to load unmanaged dll in .Net standard 2.0\r\n2. What are the best way to Handle\\load unmanaged dll ?\r\n\r\nWarm Regards,\r\nArchana"},{"Id":"7147470769","Type":"PullRequestEvent","CreatedAt":"2018-01-25T00:56:13","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/627","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02423-02 (master)\" (#627) at dotnet/standard","RelatedBody":""},{"Id":"7143189352","Type":"IssuesEvent","CreatedAt":"2018-01-24T09:56:56","Actor":"cincuranet","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/628","RelatedDescription":"Opened issue \"Adding ITuple to .NET Standard\" (#628) at dotnet/standard","RelatedBody":"The `ITuple` interface is available in .NET Core 2.0 and .NET Framework 4.7.1. Is there anything preventing it being added to .NET Standard as well? The `ValueTuple` itself is part of .NET Standard."},{"Id":"7140329255","Type":"PullRequestEvent","CreatedAt":"2018-01-23T20:13:01","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/627","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02423-01 (master)\" (#627) at dotnet/standard","RelatedBody":""},{"Id":"7140094288","Type":"PullRequestEvent","CreatedAt":"2018-01-23T19:26:10","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/622","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02422-01 (master)\" (#622) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7153818340","Type":"PullRequestEvent","CreatedAt":"2018-01-26T04:16:43","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26597","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-26126-00, beta-26126-00, respectively (master)\" (#26597) at dotnet/corefx","RelatedBody":""},{"Id":"7153791538","Type":"PullRequestEvent","CreatedAt":"2018-01-26T04:03:57","Actor":"joshfree","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26551","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC to prerelease-02425-02, preview2-26125-07, preview2-26126-03, preview2-26125-06, beta-26125-01, beta-26125-01, respectively (master)\" (#26551) at dotnet/corefx","RelatedBody":""},{"Id":"7153479843","Type":"PullRequestEvent","CreatedAt":"2018-01-26T02:00:08","Actor":"caesar1995","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26596","RelatedDescription":"Opened pull request \"Make sure HttpListenerContext will not deallocate twice\" (#26596) at dotnet/corefx","RelatedBody":"Under certain stress conditions, HttpListener.EndGetContext (GetContextAsync) will throw NullReferenceException\r\nas it tries to deallocate an internal HttpListenerContext object twice while processing authentication.\r\nThis fix ensures that the code will not deallocate twice.\r\n\r\nI have verified that the issue will repro on .NET Core 2.0, but I didn't ported the .NET Framework stress test, \r\nbecause the test may regress networking CI runs. It is ignored on .NET Framework test run as well\r\n`[Ignore] // TODO: Failed with System.TimeoutException when running on dev machine.`\r\n\r\nThis issue was reported in internal bug 200343."},{"Id":"7153471750","Type":"PullRequestEvent","CreatedAt":"2018-01-26T01:57:21","Actor":"tannergooding","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26432","RelatedDescription":"Merged pull request \"Adding the `Vector64<T>` type to the S.R.Intrinsics assembly\" (#26432) at dotnet/corefx","RelatedBody":"FYI. @sdmaclea, @eerhardt "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7153593908","Type":"IssuesEvent","CreatedAt":"2018-01-26T02:43:10","Actor":"paul1956","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24467","RelatedDescription":"Opened issue \"VB TryGetValue with Tuples has issues\" (#24467) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS Enterprise 15.5.4, Roslyn 2.6\r\n**Steps to Reproduce**:\r\n1. With the code below NewNodeList is always empty after TryGetValue\r\n```\r\n    <TestMethod()> Public Sub TryGetValueOfTupleTestMethod()\r\n        Dim Node As Integer = 1\r\n        Dim OldNodeList As New SyntaxList(Of StatementSyntax)\r\n        OldNodeList = OldNodeList.Add(SyntaxFactory.ParseExecutableStatement(\"Dim X As Integer\"))\r\n        Dim RemoveStatement As Boolean\r\n        Dim NewNodeList As New SyntaxList(Of StatementSyntax)\r\n\r\n        StatementDictionary.Add(Node, (OldNodeList, True))\r\n        If Not StatementDictionary.TryGetValue(Node, (OldNodeList, RemoveStatement)) Then\r\n            ' Do Something and NewNodeList is correctly empty\r\n            Assert.False(True, \"StatementDictionary found something when it shouldn't\")\r\n        End If\r\n        'Get here when the node is found in the dictionary, next 3 lines pass\r\n        Assert.NotEmpty(StatementDictionary(Node).Item1)\r\n        Assert.Equal(StatementDictionary(Node).Item1.ToString, \"Dim X As Integer\")\r\n        Assert.True(StatementDictionary(Node).RemoveStatement)\r\n        ' Next 2 lines both fail\r\n        Assert.True(RemoveStatement, \"Boolean Tuple Dictionary Failed\")\r\n        Assert.NotEmpty(NewNodeList)\r\n    End Sub\r\n```\r\nBut if you execute the statement below NewNodeList has correct value, is something broken with TryGetValue and Tuples\r\n```\r\n    NewNodesList = StatementDictionary(node).Item1\r\n```\r\n**Expected Behavior**:\r\nNewNodeList and RemoveStatement have the value stored in Dictionary when Key Matches or if dictionaries don't work with Tuples I expect an error somewhere.\r\n**Actual Behavior**:\r\nNewNodeList is always empty and ReturnStatement has wrong value"},{"Id":"7153503440","Type":"IssuesEvent","CreatedAt":"2018-01-26T02:08:59","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24466","RelatedDescription":"Closed issue \"EnC test scenario: Non-remappable region should be reused if no edits are made\" (#24466) at dotnet/roslyn","RelatedBody":"**Steps to Reproduce**:\r\n\r\n1. Create C# console application with following code:\r\n\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        FuncTest(100);\r\n    }\r\n\r\n    static int FuncTest(int i)\r\n    {\r\n        int j = 0; //set a condition breakpoint here: i==20\r\n\r\n        if (i == 0)\r\n        {\r\n            return 0;\r\n        }\r\n        else\r\n        {\r\n            return FuncTest(i - 1);\r\n        }\r\n    }\r\n}     \r\n```\r\n\r\n2. Set a condition breakpoint (\"i==20\") at line \"int j = 0;\"\r\n3. F5\r\n4. ENC: Add new line \"j++\";\r\n5. F10\r\n6. F10\r\n \r\n**Expected Behavior**:\r\n\r\n![image](https://user-images.githubusercontent.com/41759/35421921-bb6a9824-01fa-11e8-94e8-fee9b45f6c22.png)\r\n\r\n**Actual Behavior**:\r\n\r\n![image](https://user-images.githubusercontent.com/41759/35421929-c193b9a6-01fa-11e8-984e-6758a1722581.png)\r\n\r\n\r\n"},{"Id":"7153502467","Type":"IssuesEvent","CreatedAt":"2018-01-26T02:08:37","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24466","RelatedDescription":"Opened issue \"EnC test scenario: Non-remappable region should be reused if no edits are made\" (#24466) at dotnet/roslyn","RelatedBody":"**Steps to Reproduce**:\r\n\r\n1. Create C# console application with following code:\r\n\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        FuncTest(100);\r\n    }\r\n\r\n    static int FuncTest(int i)\r\n    {\r\n        int j = 0; //set a condition breakpoint here: i==20\r\n\r\n        if (i == 0)\r\n        {\r\n            return 0;\r\n        }\r\n        else\r\n        {\r\n            return FuncTest(i - 1);\r\n        }\r\n    }\r\n}     \r\n```\r\n\r\n2. Set a condition breakpoint (\"i==20\") at line \"int j = 0;\"\r\n3. F5\r\n4. ENC: Add new line \"j++\";\r\n5. F10\r\n6. F10\r\n \r\n**Expected Behavior**:\r\n\r\n![image](https://user-images.githubusercontent.com/41759/35421921-bb6a9824-01fa-11e8-94e8-fee9b45f6c22.png)\r\n\r\n**Actual Behavior**:\r\n\r\n![image](https://user-images.githubusercontent.com/41759/35421929-c193b9a6-01fa-11e8-984e-6758a1722581.png)\r\n\r\n\r\n"},{"Id":"7153422603","Type":"PullRequestEvent","CreatedAt":"2018-01-26T01:39:21","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24465","RelatedDescription":"Opened pull request \"Support binary operators in call graph generation\" (#24465) at dotnet/roslyn","RelatedBody":"This adds support for all currently unsupported binary operators to call graph generation. This does not yet support compound assignment.\r\nI also added a testing trait for new tests, so we can easily run all test involved with creating the dataflow framework."},{"Id":"7153290481","Type":"IssuesEvent","CreatedAt":"2018-01-26T00:52:03","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24006","RelatedDescription":"Closed issue \"Null reference exception on shutdown VS with Interactive window executing\" (#24006) at dotnet/roslyn","RelatedBody":"From VSO: 514822\r\n```\r\nMicrosoft.VisualStudio.InteractiveWindow!Microsoft.VisualStudio.InteractiveWindow.InteractiveWindow.UIThread[[Microsoft.VisualStudio.Text.Span,_Microsoft.VisualStudio.Text.Data]]\r\nat Microsoft.VisualStudio.InteractiveWindow!Microsoft.VisualStudio.InteractiveWindow.InteractiveWindow.Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.WriteLine in InteractiveWindow.cs\r\nat Microsoft.VisualStudio.InteractiveWindow!Microsoft.VisualStudio.InteractiveWindow.InteractiveWindowWriter.WriteLine in OutputWriter.cs\r\nat mscorlib.ni!System.IO.TextWriter.WriteLine in textwriter.cs\r\nat Microsoft.CodeAnalysis.InteractiveFeatures!Microsoft.CodeAnalysis.Interactive.InteractiveHost.ReportProcessExited in InteractiveHost.cs\r\nat Microsoft.CodeAnalysis.InteractiveFeatures!Microsoft.CodeAnalysis.Interactive.InteractiveHost.OnProcessExited in InteractiveHost.cs\r\nat Microsoft.CodeAnalysis.InteractiveFeatures!Microsoft.CodeAnalysis.Interactive.InteractiveHost+RemoteService+__c__DisplayClass8_0 in InteractiveHost.RemoteService.cs\r\n```"},{"Id":"7153289418","Type":"PullRequestEvent","CreatedAt":"2018-01-26T00:51:40","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24058","RelatedDescription":"Merged pull request \"unregister onExit event handler on disposing interactive host\" (#24058) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\n\r\nCustomer shuts down Visual Studio. There is a race condition when closing the Interactive Window and the corresponding process.\r\n\r\nWhen the process is closed before the window (within this or another scenario), it sends a message to display it in the interactive window. If the window was closed somewhere between checks the it is open and executing a command to output the message, an failure happens.\r\n\r\n### Bugs this fixes\r\nVSO 514822 and corresponding: https://github.com/dotnet/roslyn/issues/24006 \r\n\r\n### Workarounds, if any\r\n\r\nNone\r\n\r\n### Risk\r\n\r\nLow\r\n\r\n### Performance impact\r\n\r\nNone\r\n\r\n### Is this a regression from a previous update?\r\nNo\r\n\r\n### How was the bug found?\r\nWatson hits"},{"Id":"7153207639","Type":"PullRequestEvent","CreatedAt":"2018-01-26T00:23:00","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24461","RelatedDescription":"Merged pull request \"Merge dev15.6.x to dev15.6.x-vs-deps\" (#24461) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7153385465","Type":"PullRequestEvent","CreatedAt":"2018-01-26T01:25:59","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5291","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5291) at dotnet/corert","RelatedBody":""},{"Id":"7153384480","Type":"PullRequestEvent","CreatedAt":"2018-01-26T01:25:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5290","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5290) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7153274195","Type":"PullRequestEvent","CreatedAt":"2018-01-26T00:46:17","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5290","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5290) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7149927710","Type":"IssuesEvent","CreatedAt":"2018-01-25T12:51:32","Actor":"13xforever","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5289","RelatedDescription":"Opened issue \"Microsoft.NETCore.Native.Publish.targets(54,5): error : The PrivateSdkAssemblies ItemGroup is required for _ComputeAssembliesToCompileToNative\" (#5289) at dotnet/corert","RelatedBody":"I followed the examples, but when I try to `$ dotnet publish -c Release`, I always get this error.\r\n\r\n```\r\n~\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-26125-01\\build\\Microsoft.NETCore.Native.Publish.targets(54,5): error : The PrivateSdkAssemblies ItemGroup is required for _ComputeAssembliesToCompileToNative [my.csproj]\r\n```\r\n\r\nAll I can find is issue #4913, but I can't figure out what I must do with my csproj."},{"Id":"7147608672","Type":"PullRequestEvent","CreatedAt":"2018-01-25T01:42:22","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5288","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5288) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7147573785","Type":"PullRequestEvent","CreatedAt":"2018-01-25T01:30:33","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5288","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5288) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7147397690","Type":"PullRequestEvent","CreatedAt":"2018-01-25T00:31:40","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5287","RelatedDescription":"Opened pull request \"[WIP] Enable CoreFX tests on CoreRT\" (#5287) at dotnet/corert","RelatedBody":"This enables running CoreFX tests on CoreRT. A couple of points\r\n\r\n- A number of tests have a dependency on the `CoreFX.Private.TestUtilities` assembly. We need a way to distribute this - as either a NuGet package or fetching built assemblies as correlation payloads from build machines. Any suggestions on this would be great.\r\n\r\n- No shell script changes - most of this change is cross-plat, but only called on Windows\r\n\r\n- Test URL - will change according to whichever version we pick, run and \"freeze\" \r\n\r\n- Some minor points marked with TODOs\r\n\r\ncc @MichalStrehovsky @jkotas @sergiy-k "}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7153270564","Type":"PullRequestEvent","CreatedAt":"2018-01-26T00:45:11","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1902","RelatedDescription":"Opened pull request \"Adding the Runtime Identifier and PlatformTarget to the error message\" (#1902) at dotnet/sdk","RelatedBody":"Adding the Runtime Identifier and PlatformTarget to the error message for when they don't match.\r\n\r\nFixes https://github.com/dotnet/sdk/issues/1616"},{"Id":"7153037198","Type":"IssuesEvent","CreatedAt":"2018-01-25T23:26:57","Actor":"pranavkm","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1729","RelatedDescription":"Closed issue \"Compiling Mvc's functional tests with 2.2 SDK targeting netcoreapp2.1 is compiled with PlatformTarget x64\" (#1729) at dotnet/sdk","RelatedBody":"The title is super specific because I wasn't able to reproduce this with a smaller sample. \r\n\r\nI’ve been working on updating AspNetCore’s repositories to use the 2.2 SDK and the 2.1 runtime. For the latter, I’ve been attempting to add the netcoreapp2.1 as a cross-compile target to our test projects. Xunit’s test discovery for one of these updated project’s test started failing with a BadImageFormatException. Digging in to the logs \\ outputs revealed the following differences between the netcoreapp2.0 and 2.1 binaries:\r\n\r\na)\tThe 2.1 binary has Architecture x86 as opposed to 2.0 binary which has AnyCPU (64-bit preferred)\r\nb)\tThe SDK compiles the 2.1 binary with a PlatformTarget of x86 versus an empty PlatformTarget on netcoreapp2.0\r\n\r\n\r\n| netcoreapp2.1 | netcoreapp2.0 |\r\n|---------------|---------------|\r\n|  ![2 1](https://user-images.githubusercontent.com/174281/32748742-03d52e98-c872-11e7-8f3c-548a54d81f51.jpg)  | ![netcoreapp20](https://user-images.githubusercontent.com/174281/32748817-36683e72-c872-11e7-8f28-7f9e7f693f0a.jpg)| \r\n\r\nHere’s the csproj in question: https://github.com/aspnet/Mvc/blob/dev/test/Microsoft.AspNetCore.Mvc.FunctionalTests/Microsoft.AspNetCore.Mvc.FunctionalTests.csproj#L9\r\n\r\nSpecifying a PlatformTarget fixes the test discovery issue, but I’m just trying to figure out what might cause this difference. Of the two places I saw this, the common feature was that it was a `netcoreapp2.1` project referencing another `netcoreapp2.1` project"},{"Id":"7152952614","Type":"PullRequestEvent","CreatedAt":"2018-01-25T23:02:38","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1857","RelatedDescription":"Merged pull request \"Speed up package asset resolution\" (#1857) at dotnet/sdk","RelatedBody":"Raise only package assets that are used to build\r\n\r\nThe new task (ResolvePackageAssets) unlike the old ResolvePackageDependencies, only raises items that that will actually be consumed by the build. The new\r\nitems are also much easier to consume in targets and do not require \"joins\" to resolve paths, querying via WithMetadataValue, etc.\r\n\r\nI'm seeing about 10% speed gain in single MVC project, and 15% in OrchardCore on incremental `dotnet build` (with restore).  The gains when the binary log is enabled are more pronounced: about 25% with 4X improvement in working setm and 2X improvement in .binlog size + time to open in structured log viewer! Not to mention, that the log is much easier to interpret without all of the extra items.\r\n\r\nThere is a breaking change here: \r\n- If you use the old items from RunResolvePackageDependencies, then you need to depend-on/invoke that target. The code has not been deleted, it just won't be invoked if you don't use it. This is not a common sceanario.\r\n- There are also intermediate _Xxx (\"private\") items that have disappeared.\r\n- Duplicate/unnecessary metadata has been trimmed from items (e.g. NuGetPackageId vs PackageName).\r\n\r\ncc @dsplaisted @livarcocc @mikeharder "},{"Id":"7152844973","Type":"IssuesEvent","CreatedAt":"2018-01-25T22:35:15","Actor":"itadapter","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1901","RelatedDescription":"Opened issue \"Debugging NetStandard 2 asembly fails with \"Unable to break execution 0x80004005\"\" (#1901) at dotnet/sdk","RelatedBody":".Net Standard Assembly. Using .NET 4.7.1 launch project - a console app linking DYNAMICALY (via Assembly.load()) to the target DLL.  The breakpoints are not hit. The PAUSE does not work. VS 2017 15.5.5; tried running as admin; does not help.\r\n\r\nAn attempt to Pause the process:\r\n\r\n![image](https://user-images.githubusercontent.com/2273574/35416036-b29bdb22-01f5-11e8-9df5-ecb6bb5a6321.png)\r\n\r\nAnyone can shed some light?\r\n"},{"Id":"7152566203","Type":"IssuesEvent","CreatedAt":"2018-01-25T21:30:49","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1735","RelatedDescription":"Closed issue \"HighEntropyVA not set by default for 64-bit .net core apps\" (#1735) at dotnet/sdk","RelatedBody":"1. Create default .net core console app\r\n2. Set configuration to x64, compile\r\n\r\nresult: high entropy va bit not set in PE.\r\n\r\nAdding relevant MSBUILD property with correct value to the project resolves the issue. So the problem appears to be that our default property settings need to be corrected.\r\n\r\n    <HighEntropyVA>true</HighEntropyVA>"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"956524881096708096","CreatedAt":"2018-01-25T13:51:17+00:00","UserScreenname":"dotnet","Text":"Jeff and Maira - improving https://t.co/QxdK7Ocjtg LIVE at 10am ET / 15:00 UTC.  Check it out! https://t.co/jlSeKESN3g","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":5,"RawContent":null},{"Id":"955790963024257024","CreatedAt":"2018-01-23T13:14:57+00:00","UserScreenname":"dotnet","Text":"Check out @csharpfritz and @condrong at 10am ET, 15:00 UTC talking about new @AspNet Core features and benefits for… https://t.co/BLXAg7rubK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":4,"RawContent":null},{"Id":"954763538328883201","CreatedAt":"2018-01-20T17:12:20+00:00","UserScreenname":"dotnet","Text":"Jeff is close to his first follower goal!  Follow him on Mixer or Twitch and he will host a FREE workshop live on s… https://t.co/EefnkSEqfe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":6,"RawContent":null},{"Id":"954724179533758465","CreatedAt":"2018-01-20T14:35:56+00:00","UserScreenname":"dotnet","Text":"Join Jeff at 10am ET (-5:00 UTC) for a live coding stream about .NET, .NET Core, C#, and Visual Studio.  He'll also… https://t.co/dWA8n7Ttph","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":7,"RawContent":null},{"Id":"953279226869960704","CreatedAt":"2018-01-16T14:54:13+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz today to learn more about .NET and ask questions about .NET, .NET Core, Visual Studio or ASPNet. https://t.co/ZtyD9ubcE6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2018-01-26T05:30:19.7532612Z","RunDurationInMilliseconds":7870}