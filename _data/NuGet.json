{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1","PublishedOn":"2020-02-19T00:44:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last November, we shared our two-stage plan for deprecating TLS 1.0/1.1 on NuGet.org and actions you can take today to ensure your systems use TLS 1.2. In this post, we will go into more details and a...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/","RawContent":null},{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11692220922","Type":"PullRequestEvent","CreatedAt":"2020-03-05T21:20:00","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7859","RelatedDescription":"Merged pull request \"Reject broken ZIPs on API push with better message\" (#7859) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/Engineering/issues/3046\r\n\r\nThis was a little tricky to repro locally, when reading a ZIP of disk because the behavior of `FileStream` and `HttpInputStream` (the stream from an ASP.NET file upload) is different. `FileStream` does not throw when you seek out of bounds. It only throws when you read. `HttpInputStream` throws when you seek out of bounds, thus the `ArgumentOutOfRangeException` we see on server side."},{"Id":"11691774471","Type":"PullRequestEvent","CreatedAt":"2020-03-05T20:24:30","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7862","RelatedDescription":"Opened pull request \"Expose domain and diagnostics source in MEF container\" (#7862) at NuGet/NuGetGallery","RelatedBody":"This enables synchronous initialization (via the constructor) of the cookie compliance shim.\r\nAlso, move the refresh to the background so that initial start-up is not slowed down.\r\n\r\nFully lights up with https://nuget.visualstudio.com/NuGetMicrosoft/_git/NuGet.Shims/pullrequest/1342.\r\nRelated to https://github.com/NuGet/Engineering/issues/2980."},{"Id":"11690319737","Type":"IssuesEvent","CreatedAt":"2020-03-05T17:32:05","Actor":"jslootweg","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7861","RelatedDescription":"Closed issue \"Download count isn't updated when self-hosting in IIS\" (#7861) at NuGet/NuGetGallery","RelatedBody":"I have configured a instance of NuGet Gallery running under IIS using SQL Server as the database.  The download count doesn't appear to updating regardless of whether the download is via NuGet Install-Package or through the package download link on the website."},{"Id":"11689277263","Type":"IssuesEvent","CreatedAt":"2020-03-05T15:49:24","Actor":"jslootweg","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7861","RelatedDescription":"Opened issue \"Download count isn't updated when self-hosting in IIS\" (#7861) at NuGet/NuGetGallery","RelatedBody":"I have configured a instance of NuGet Gallery running under IIS using SQL Server as the database.  The download count doesn't appear to updating regardless of whether the download is via NuGet Install-Package or through the package download link on the website."},{"Id":"11684271215","Type":"PullRequestEvent","CreatedAt":"2020-03-05T06:17:16","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7860","RelatedDescription":"Merged pull request \"[ECR] Update the server common dependencies to 2.69.0\" (#7860) at NuGet/NuGetGallery","RelatedBody":"Update the server common dependencies to 2.69.0.\r\nIntroduce the logs around the catching control of secret reader."},{"Id":"11682791443","Type":"PullRequestEvent","CreatedAt":"2020-03-05T01:16:06","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7860","RelatedDescription":"Opened pull request \"[ECR] Update the server common dependencies to 2.69.0\" (#7860) at NuGet/NuGetGallery","RelatedBody":"Update the server common dependencies to 2.69.0.\r\nIntroduce the logs around the catching control of secret reader."},{"Id":"11682648625","Type":"PullRequestEvent","CreatedAt":"2020-03-05T00:48:09","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7859","RelatedDescription":"Opened pull request \"Reject broken ZIPs on API push with better message\" (#7859) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/Engineering/issues/3046"},{"Id":"11680847140","Type":"PullRequestEvent","CreatedAt":"2020-03-04T21:04:06","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7858","RelatedDescription":"Merged pull request \"[ECR] Enable the active update of SQL certificates without restarting.\" (#7858) at NuGet/NuGetGallery","RelatedBody":"In order to enable the on-line active update of SQL certificates, we should not inject the SQL connection string to build the \"SqlConnectionFactory\".\r\nTest locally and verify the behavior."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11693948340","Type":"IssuesEvent","CreatedAt":"2020-03-06T02:17:18","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9264","RelatedDescription":"Opened issue \"Package Manager UI - Package Sources for VSO.\" (#9264) at NuGet/Home","RelatedBody":""},{"Id":"11693449933","Type":"IssuesEvent","CreatedAt":"2020-03-06T00:35:02","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9263","RelatedDescription":"Opened issue \"Consider updating to newer versions of Newtonsoft.Json\" (#9263) at NuGet/Home","RelatedBody":"https://github.com/NuGet/NuGet.Client/pull/3271#discussion_r388639812\r\n\r\n//cc @zivkan "},{"Id":"11693326779","Type":"IssuesEvent","CreatedAt":"2020-03-06T00:12:10","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8792","RelatedDescription":"Closed issue \"Logged output is too verbose for large project trees\" (#8792) at NuGet/Home","RelatedBody":"# Details about Problem\r\n\r\nWhen restoring a repo with a lot of projects (>500), NuGet logs an output message for every project, even if the project is up-to-date.  Instead, it should log a message for any actual action taken and then a summary indicating how many projects are up-to-date and took part in no-op.\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): Any\r\n\r\nNuGet version (x.x.x.xxx): Any\r\n\r\ndotnet.exe --version (if appropriate): Any\r\n\r\nVS version (if appropriate): Any\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Any\r\n\r\nWorked before? If so, with which NuGet version: Any\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Restore a large number of projects\r\n\r\n... The output scrolls by for a few seconds even if everything is up-to-date.\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"11693188555","Type":"IssuesEvent","CreatedAt":"2020-03-05T23:57:11","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9262","RelatedDescription":"Opened issue \"[Accessibility] No keyboard gestures to edit the sources in the NuGet Package Manager Options window. \" (#9262) at NuGet/Home","RelatedBody":"Affected Branch: \r\nAffected Build: \r\nAffected Product Language: \r\n\r\nSteps to reproduce:\r\n\r\nGo to the Available Package Sources view. \r\n\r\nUse the arrow keys to navigate through the list of sources. When getting to the bottom source, you can navigate to the edit source section. There is no gesture to allows you to change the first n-1 sources. \r\n\r\nThis has always been a problem (since 14.x)\r\n\r\n"},{"Id":"11693162458","Type":"IssuesEvent","CreatedAt":"2020-03-05T23:56:06","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9261","RelatedDescription":"Opened issue \"Allocation Spike/GC Pause: NuGet.Commands.RestoreCommand.BuildAssetsFile\" (#9261) at NuGet/Home","RelatedBody":"With a median allocation rate of 152.0 Mb/s, in 2121 cabs, representing 4.57 percent of cabs analyzed\r\nNuGet.Commands.RestoreCommand.BuildAssetsFile\r\nhas been identified as a blame candidate for an allocation spike.\r\n\r\nWorst case example: 1633.0 Mb/s for 1000.0 ms ending at 27095.644192503503:\r\n\r\nMost recent example: 253.0 MB/s for 1000.0 ms ending at 3372.8011: \r\n\r\nStats from Worst Case cab: 708.0 ms spent in GC\r\nGCReasons: [\"AllocSmall:151\"] GcTypes: [\"NonConcurrentGC:151\"]\r\n\r\nTypes Allocated: [\"System.String:3469 System.String\",\"System.Int32[]:3135 System.Int32[]\",\"System.String[]:1546 System.String[]\",\"Enumerator[Microsoft.Extensions.FileSystemGlobbing.Internal.IPatternContext]:1297 Enumerator[Microsoft.Extensions.FileSystemGlobbing.Internal.IPatternContext]\",\"System.Char[]:773 System.Char[]\"]\r\n\r\nOther Blame Candidates Seen:[\"NuGet.Commands.RestoreCommand+<ExecuteAsync>d__32.MoveNext:4\",\"NuGet.Commands.RestoreCommand.BuildAssetsFile:4\",\"Microsoft.Extensions.FileSystemGlobbing.Internal.MatcherContext.Match:3\",\"NuGet.Commands.LockFileBuilder.CreateLockFile:2\",\"NuGet.Commands.LockFileUtils.CreateLockFileTargetLibrary:2\",\"NuGet.Commands.LockFileUtils.AddAssets:2\",\"NuGet.Commands.LockFileUtils.AddContentFiles:1\"]\r\n\r\nSteve J Steiner, [958533]()"},{"Id":"11692022972","Type":"IssuesEvent","CreatedAt":"2020-03-05T20:55:09","Actor":"cdmihai","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9247","RelatedDescription":"Closed issue \"GeneratePackageOnBuild does not pack transitive crosstargeting projects from non solution builds\" (#9247) at NuGet/Home","RelatedBody":"If you have:\r\n- three projects, A->B->C\r\n- C is crosstargeting\r\n- A and C have GeneratePackageOnBuild set to true\r\n- Build A.csproj\r\n\r\nThen A will pack and C won't. The expected behaviour is for C to pack as well.\r\n\r\nA.csproj\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\B\\B.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nB.csproj\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\C\\C.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nC.csproj\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;netstandard1.6;</TargetFrameworks>\r\n\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nBuild with `dotnet msbuild /restore A\\A.csproj`\r\n\r\ndotnet.exe --version (if appropriate): 3.1.200-preview-015002\r\nOS version (i.e. win10 v1607 (14393.321)): win10 \r\n"},{"Id":"11691362254","Type":"IssuesEvent","CreatedAt":"2020-03-05T19:35:02","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9231","RelatedDescription":"Closed issue \"The pack targets should have PackageOutputPath default to OutputPath\" (#9231) at NuGet/Home","RelatedBody":"In sdk based projects it's already done in the default framework properties.\r\nIn legacy package reference projects, the customer is required to set PackageOutputPath.\r\n\r\nrelated https://github.com/NuGet/docs.microsoft.com-nuget/pull/1922"},{"Id":"11690711906","Type":"IssuesEvent","CreatedAt":"2020-03-05T18:17:35","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9089","RelatedDescription":"Closed issue \"net5.0 tfm support\" (#9089) at NuGet/Home","RelatedBody":"Properly support TFM for .NET 5.0.\r\n\r\nSpec: https://github.com/terrajobst/designs/blob/net5/accepted/2020/net5/net5.md\r\nPR to merge into main design repo: https://github.com/dotnet/designs/pull/92"},{"Id":"11690665320","Type":"IssuesEvent","CreatedAt":"2020-03-05T18:12:02","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9260","RelatedDescription":"Opened issue \"additional pull request feedback for net5.0 tfm work.\" (#9260) at NuGet/Home","RelatedBody":"about 3 feedback items to still investigate and consider from https://github.com/NuGet/NuGet.Client/pull/3265"},{"Id":"11689821589","Type":"IssuesEvent","CreatedAt":"2020-03-05T16:40:33","Actor":"cristinamanum","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9151","RelatedDescription":"Closed issue \"[CPVM] Directory.Packages.props deployment\" (#9151) at NuGet/Home","RelatedBody":"The Directory.Packages.props needs to be deployed by three installers\r\n\r\n-  VS\r\n- VS BuildTools \r\n- dotnetsdk \r\n\r\n\r\nIt needs to reach the following location\r\n$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Imports\\Microsoft.Common.props\\ImportBefore \r\n\r\n\r\n"},{"Id":"11689767715","Type":"IssuesEvent","CreatedAt":"2020-03-05T16:35:18","Actor":"cristinamanum","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9232","RelatedDescription":"Closed issue \"New EnableCentralPackageVersions property breaks Microsoft.Build.CentralPackageVersions\" (#9232) at NuGet/Home","RelatedBody":"This change: https://github.com/NuGet/NuGet.Client/commit/08ded6ff38ec67e25c094d28e77cb23c15ee674b#diff-3b0018f61173d0adf1ba163a23821381 is causing incompatibility with [Microsoft.Build.CentralPackageVersions](https://github.com/microsoft/MSBuildSdks/tree/master/src/CentralPackageVersions). Both use the `$(EnableCentralPackageVersions)` property and so conflict.\r\n\r\nSpecifically, this line in NuGet.targets:\r\n```xml\r\n    <EnableCentralPackageVersions Condition=\"'$(EnableCentralPackageVersions)' == ''\">false</EnableCentralPackageVersions>\r\n```\r\n\r\nThis disables the feature in the `Microsoft.Build.CentralPackageVersions` SDK."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"11608975127","Type":"IssuesEvent","CreatedAt":"2020-02-25T23:07:38","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/42","RelatedDescription":"Opened issue \"Deprecating TLS 1.0 and 1.1 on NuGet.org – Stage 1\" (#42) at NuGet/Announcements","RelatedBody":"## NuGet.org will temporarily remove support for TLS 1.0/1.1 on February 26, 2020\r\n\r\nWe plan to temporarily remove support for TLS 1.0/1.1 across 3 time slots in a 24 hour period, for 4 hours each, to ensure overlap with normal working hours across the globe. If you discover that you are impacted and cannot identify a workaround, please open an issue on the NuGet Gallery GitHub repo.\r\n\r\nRead this blog post to learn more and to identify the test slot time in your time zone - https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org-stage-1/\r\n\r\n"},{"Id":"11502675218","Type":"IssuesEvent","CreatedAt":"2020-02-12T19:33:43","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/41","RelatedDescription":"Opened issue \"Support pre-release packages with floating versions\" (#41) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Support pre-release packages with floating versions](https://github.com/NuGet/Home/wiki/Support-pre-release-packages-with-floating-versions) | https://github.com/NuGet/Home/issues/912|"},{"Id":"11467027718","Type":"IssuesEvent","CreatedAt":"2020-02-08T01:39:00","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/40","RelatedDescription":"Opened issue \"Add nuget sources command to the dotnet CLI\" (#40) at NuGet/Announcements","RelatedBody":"|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Add nuget sources command to the dotnet CLI](https://github.com/NuGet/Home/wiki/Add-nuget-sources-command-to-the-dotnet-CLI) | https://github.com/NuGet/Home/issues/4126|"},{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are… https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2020-03-06T05:30:48.736772Z","RunDurationInMilliseconds":3207}