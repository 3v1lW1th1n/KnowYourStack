{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Framework 4.8 Early Access Build 3707","PublishedOn":"2018-12-15T02:11:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We have another early access build to share today! This release includes several accessibility, performance, reliability and stability fixes across the major framework libraries. We will continue to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/14/announcing-net-framework-4-8-early-access-build-3707/","RawContent":null},{"Title":"Visual Studio 2019 Preview .NET Productivity","PublishedOn":"2018-12-14T00:13:41+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"As you hopefully heard, the first preview of Visual Studio 2019 is now available. In this post I’ll cover some of the productivity improvements for .NET developers we’re most excited about. For a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/13/visual-studio-2019-net-productivity/","RawContent":null},{"Title":".NET Framework December 2018 Security and Quality Rollup","PublishedOn":"2018-12-11T18:23:48+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the December 2018 Security and Quality Rollup. Security CVE-2018-8540 – Windows Remote Code Execution Vulnerability This security update resolves a vulnerability in Microsoft...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/11/net-framework-december-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Open Sourcing XAML Behaviors for WPF","PublishedOn":"2018-12-10T19:27:32+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are excited to announce that we are open sourcing XAML Behaviors for WPF. In the past, we open sourced XAML Behaviors for UWP which has been a great success and the Behaviors NuGet package...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/10/open-sourcing-xaml-behaviors-for-wpf/","RawContent":null},{"Title":"Take C# 8.0 for a spin","PublishedOn":"2018-12-05T23:51:33+00:00","CommentsCount":79,"FacebookCount":0,"Summary":"Take C# 8.0 for a spin Yesterday we announced the first preview of both Visual Studio 2019 (Making every developer more productive with Visual Studio 2019) and .NET Core 3.0 (Announcing .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/take-c-8-0-for-a-spin/","RawContent":null},{"Title":".NET Framework December 5, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2018-12-05T22:00:42+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the December 5, 2018 Preview of .NET Framework Cumulative Update for Windows 10 version 1809 and Windows Server 2019. For more information about the new Cumulative Updates for...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/net-framework-december-4-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 1 and Open Sourcing Windows Desktop Frameworks","PublishedOn":"2018-12-04T16:41:34+00:00","CommentsCount":80,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3 Preview 1. It is the first public release of .NET Core 3. We have some exciting new features to share and would love your feedback. You can develop .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-3-preview-1-and-open-sourcing-windows-desktop-frameworks/","RawContent":null},{"Title":"Announcing .NET Core 2.2","PublishedOn":"2018-12-04T16:36:50+00:00","CommentsCount":30,"FacebookCount":0,"Summary":"We’re excited to announce the release of .NET Core 2.2. It includes diagnostic improvements to the runtime, support for ARM32 for Windows and Azure Active Directory for SQL Client. The biggest...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-2-2/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.2","PublishedOn":"2018-12-04T16:30:21+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today we&#8217;re making the final version of EF Core 2.2 available, alongside ASP.NET Core 2.2 and .NET Core 2.2. This is the latest release of our open-source and cross-platform object-database...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-entity-framework-core-2-2/","RawContent":null},{"Title":"Announcing ML.NET 0.8 – Machine Learning for .NET","PublishedOn":"2018-12-04T16:00:11+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform framework (Windows, Linux, macOS) which makes machine learning accessible for .NET developers. ML.NET allows you to create and use machine learning models...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-ml-net-0-8-machine-learning-for-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8760892630","Type":"IssuesEvent","CreatedAt":"2018-12-16T11:57:54","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Opened issue \"No logo provided for Prism\" (#126) at dotnet/foundation","RelatedBody":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157"},{"Id":"8760886115","Type":"IssuesEvent","CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Opened issue \"Missing logo for MVVM Light Toolkit\" (#125) at dotnet/foundation","RelatedBody":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139"},{"Id":"8760884091","Type":"IssuesEvent","CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Opened issue \"Missing logo for Umbraco\" (#124) at dotnet/foundation","RelatedBody":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151"},{"Id":"8760881728","Type":"IssuesEvent","CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Opened issue \"Missing logo for Steeltoe\" (#123) at dotnet/foundation","RelatedBody":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130"},{"Id":"8760867764","Type":"PullRequestEvent","CreatedAt":"2018-12-16T11:40:46","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Opened pull request \"targets the existing document\" (#122) at dotnet/foundation","RelatedBody":""},{"Id":"8650911785","Type":"PullRequestEvent","CreatedAt":"2018-11-27T00:35:00","Actor":"JamesNK","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Opened pull request \"Add Newtonsoft.Json\" (#121) at dotnet/foundation","RelatedBody":"// @jongalloway "},{"Id":"8645831625","Type":"PullRequestEvent","CreatedAt":"2018-11-26T09:33:50","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Merged pull request \"Added Telerik info\" (#120) at dotnet/foundation","RelatedBody":""},{"Id":"8645829054","Type":"PullRequestEvent","CreatedAt":"2018-11-26T09:33:23","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Merged pull request \"Added Telerik UWP proj\" (#119) at dotnet/foundation","RelatedBody":""},{"Id":"8645355358","Type":"PullRequestEvent","CreatedAt":"2018-11-26T07:59:20","Actor":"stefanov-stefan","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Opened pull request \"Added Telerik info\" (#120) at dotnet/foundation","RelatedBody":""},{"Id":"8645349176","Type":"PullRequestEvent","CreatedAt":"2018-11-26T07:57:50","Actor":"stefanov-stefan","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Opened pull request \"Added Telerik UWP proj\" (#119) at dotnet/foundation","RelatedBody":""},{"Id":"8637227393","Type":"PullRequestEvent","CreatedAt":"2018-11-23T10:32:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Merged pull request \"Update WorldWide Telescope\" (#118) at dotnet/foundation","RelatedBody":"Some layout fixes, but the main change is that @pkgw is now the project director."},{"Id":"8637225303","Type":"PullRequestEvent","CreatedAt":"2018-11-23T10:31:49","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Merged pull request \"Update identityserver.md\" (#117) at dotnet/foundation","RelatedBody":"significant whitespace"},{"Id":"8615388364","Type":"PullRequestEvent","CreatedAt":"2018-11-19T20:23:18","Actor":"pkgw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Opened pull request \"Update WorldWide Telescope\" (#118) at dotnet/foundation","RelatedBody":"Some layout fixes, but the main change is that @pkgw is now the project director."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8752496804","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:22:59","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8752467326","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:12:36","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Opened issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8741036679","Type":"IssuesEvent","CreatedAt":"2018-12-12T12:56:54","Actor":"bilalMlaik","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment"},{"Id":"8740711774","Type":"IssuesEvent","CreatedAt":"2018-12-12T11:57:02","Actor":"bilalMlaik","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Opened issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\nI am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.iothub.simulator:\r\n    image: ${DOCKER_REGISTRY-}ttcoreiothubsimulator\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.IotHub.Simulator/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.labourtelemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcorelabourtelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.LabourTelemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.telemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoretelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Telemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  redis:\r\n    image: redis\r\n    command: redis-server --appendonly yes\r\n    ports:\r\n      - '6379:6379'\r\n    volumes:\r\n      - ${APPDATA}/redis:/bitnami/redis/data\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.16\r\n\r\n  mqtt:\r\n    image: eclipse-mosquitto\r\n    hostname: mqtt\r\n    container_name: mqtt\r\n    expose:\r\n      - \"1883\"\r\n      - \"9001\"\r\n    ports:\r\n      - \"1883:1883\"\r\n      - \"9001:9001\"\r\n    volumes:\r\n      - ${APPDATA}/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.8\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\n"},{"Id":"8582735181","Type":"IssuesEvent","CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Opened issue \".NET Core November Update - 2.1.6 and SDK 2.1.500\" (#91) at dotnet/announcements","RelatedBody":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018[(https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8776563375","Type":"PullRequestEvent","CreatedAt":"2018-12-19T05:09:59","Actor":"sbomer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21591","RelatedDescription":"Merged pull request \"Add build timeout\" (#21591) at dotnet/coreclr","RelatedBody":"This should fix official build failures that are timing out because\r\nthe jobs are waiting to obtain an exclusive lock on the blob\r\nfeed."},{"Id":"8776411482","Type":"IssuesEvent","CreatedAt":"2018-12-19T04:10:38","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21593","RelatedDescription":"Closed issue \"[arm] Test failure: System.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException\" (#21593) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_corefx_jitstressregs0x1000_tst/40/\r\n\r\n**Failed tests:**\r\nSystem.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException\r\n\r\n**Failed log:**\r\n```\r\nSystem.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException(date: 2018-12-17T20:37:16.7985554-08:00, hours: 1.79769313486232E+308) [FAIL]\r\n      Assert.Throws() Failure\r\n      Expected: typeof(System.ArgumentOutOfRangeException)\r\n      Actual:   (No exception was thrown)\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm_cross_che---ab665b7f\\_\\fx\\src\\CoreFx.Private.TestUtilities\\src\\System\\AssertExtensions.cs(83,0): at System.AssertExtensions.Throws[T](String paramName, Func`1 testCode)\r\n        D:\\j\\workspace\\arm_cross_che---ab665b7f\\_\\fx\\src\\System.Runtime\\tests\\System\\DateTimeTests.cs(494,0): at System.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException(DateTime date, Double hours)\r\n    System.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException(date: 2018-12-17T20:37:16.7989204-08:00, hours: -1.79769313486232E+308) [FAIL]\r\n      Assert.Throws() Failure\r\n      Expected: typeof(System.ArgumentOutOfRangeException)\r\n      Actual:   (No exception was thrown)\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm_cross_che---ab665b7f\\_\\fx\\src\\CoreFx.Private.TestUtilities\\src\\System\\AssertExtensions.cs(83,0): at System.AssertExtensions.Throws[T](String paramName, Func`1 testCode)\r\n        D:\\j\\workspace\\arm_cross_che---ab665b7f\\_\\fx\\src\\System.Runtime\\tests\\System\\DateTimeTests.cs(494,0): at System.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException(DateTime date, Double hours)\r\n```"},{"Id":"8776161188","Type":"IssuesEvent","CreatedAt":"2018-12-19T02:45:09","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21594","RelatedDescription":"Opened issue \"Regression in AsSpan for uint[] Datatype\" (#21594) at dotnet/coreclr","RelatedBody":"Netcoreapp 3.0\r\nSdk Version 3.0.100-preview-009841\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.17134.471 (1803/April2018Update/Redstone4)\r\nIntel Xeon CPU E5-1650 v4 3.60GHz, 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.0.100-alpha1-009630\r\n  [Host]     : .NET Core 3.0.0-preview1-26928-03 (CoreCLR 4.6.26927.03, CoreFX 4.6.26927.03), 64bit RyuJIT\r\n  Job-TQETEJ : .NET Core 3.0.0-preview1-26928-03 (CoreCLR 4.6.26927.03, CoreFX 4.6.26927.03), 64bit RyuJIT\r\n\r\nBuildConfiguration=Release-Intrinsics  Toolchain=netcoreapp3.0  InvocationCount=1  \r\nMaxIterationCount=20  UnrollFactor=1  WarmupCount=1  \r\n\r\n```\r\n|                 Method |     Mean |     Error |    StdDev |    Median | Extra Metric |\r\n|----------------------- |---------:|----------:|----------:|----------:|-------------:|\r\n| AsSpanForUnitBenchmark | 1.445 us | 0.8379 us | 0.9649 us | 0.8400 us |            - |\r\n\r\nSdk version 2.1.401\r\nNetcoreapp2.1\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.17134.471 (1803/April2018Update/Redstone4)\r\nIntel Xeon CPU E5-1650 v4 3.60GHz, 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.0.100-alpha1-009630\r\n  [Host]     : .NET Core 2.1.6 (CoreCLR 4.6.27019.06, CoreFX 4.6.27019.05), 64bit RyuJIT\r\n  Job-JARWGC : .NET Core 2.1.6 (CoreCLR 4.6.27019.06, CoreFX 4.6.27019.05), 64bit RyuJIT\r\n\r\nBuildConfiguration=Release  Toolchain=netcoreapp2.1  InvocationCount=1  \r\nMaxIterationCount=20  UnrollFactor=1  WarmupCount=1  \r\n\r\n```\r\n|                 Method |     Mean |    Error |   StdDev |   Median | Extra Metric |\r\n|----------------------- |---------:|---------:|---------:|---------:|-------------:|\r\n| AsSpanForUnitBenchmark | 48.75 ns | 29.60 ns | 29.07 ns | 65.00 ns |            - |\r\n\r\nThe code for this benchmark is\r\n``` C#\r\n\r\npublic uint[] input;\r\npublic int end;\r\n\r\n [IterationSetup(Target = nameof(AsSpanForUnitBenchmark))]\r\npublic void setup()\r\n {\r\n       int min = 0;\r\n        int max = 100000;\r\n       Random randNum = new Random();\r\n       end = randNum.Next(min, max);\r\n\r\n        input = new uint[max]\r\n       for (int i = 0; i < input.Length; i++)\r\n        {\r\n               input[i] = (uint)randNum.Next(min, max);\r\n        }\r\n}\r\n\r\n[Benchmark]\r\npublic void AsSpanForUnitBenchmark()\r\n{\r\n    input.AsSpan(0, end);\r\n}\r\n```\r\n\r\ncc @danmosemsft @adamsitnik @GrabYourPitchforks \r\n"},{"Id":"8775969741","Type":"IssuesEvent","CreatedAt":"2018-12-19T01:44:08","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21593","RelatedDescription":"Opened issue \"[arm] Test failure: System.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException\" (#21593) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_corefx_jitstressregs0x1000_tst/40/\r\n\r\n**Failed tests:**\r\nSystem.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException\r\n\r\n**Failed log:**\r\n```\r\nSystem.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException(date: 2018-12-17T20:37:16.7985554-08:00, hours: 1.79769313486232E+308) [FAIL]\r\n      Assert.Throws() Failure\r\n      Expected: typeof(System.ArgumentOutOfRangeException)\r\n      Actual:   (No exception was thrown)\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm_cross_che---ab665b7f\\_\\fx\\src\\CoreFx.Private.TestUtilities\\src\\System\\AssertExtensions.cs(83,0): at System.AssertExtensions.Throws[T](String paramName, Func`1 testCode)\r\n        D:\\j\\workspace\\arm_cross_che---ab665b7f\\_\\fx\\src\\System.Runtime\\tests\\System\\DateTimeTests.cs(494,0): at System.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException(DateTime date, Double hours)\r\n    System.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException(date: 2018-12-17T20:37:16.7989204-08:00, hours: -1.79769313486232E+308) [FAIL]\r\n      Assert.Throws() Failure\r\n      Expected: typeof(System.ArgumentOutOfRangeException)\r\n      Actual:   (No exception was thrown)\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm_cross_che---ab665b7f\\_\\fx\\src\\CoreFx.Private.TestUtilities\\src\\System\\AssertExtensions.cs(83,0): at System.AssertExtensions.Throws[T](String paramName, Func`1 testCode)\r\n        D:\\j\\workspace\\arm_cross_che---ab665b7f\\_\\fx\\src\\System.Runtime\\tests\\System\\DateTimeTests.cs(494,0): at System.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException(DateTime date, Double hours)\r\n```"},{"Id":"8775936327","Type":"IssuesEvent","CreatedAt":"2018-12-19T01:33:29","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21445","RelatedDescription":"Closed issue \"thousand test failures in corefx.\" (#21445) at dotnet/coreclr","RelatedBody":"Examples in baseline jobs: [x64](https://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_corefx_baseline/710/), [x86](https://ci.dot.net/job/dotnet_coreclr/job/master/view/x86/job/jitstress/job/x86_checked_windows_nt_corefx_baseline/682/testReport/).\r\n\r\nI have not found an exisiting issue, please close this as dup if there is one.\r\nMost of tests fail with:\r\n`System.PlatformNotSupportedException : This platform does not support distributed transactions.` or CoreFX asserts.\r\nAre these tests new?\r\n"},{"Id":"8775852211","Type":"PullRequestEvent","CreatedAt":"2018-12-19T01:07:10","Actor":"fiigii","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21480","RelatedDescription":null,"RelatedBody":"This PR implements the remaining BMI1/2 intrinsic. \r\n\r\nAfter this PR, BMI1 and BMI2 get fully implemented and all the intrinsic APIs proposed in https://github.com/dotnet/corefx/issues/22940 are enabled for .NET Core 3.0.\r\n\r\nClose https://github.com/dotnet/coreclr/issues/18712 and close https://github.com/dotnet/corefx/issues/22940\r\n\r\n@tannergooding @CarolEidt "},{"Id":"8775852043","Type":"PullRequestEvent","CreatedAt":"2018-12-19T01:07:08","Actor":"fiigii","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21480","RelatedDescription":"Closed pull request \"Implement the remaining BMI1/2 intrinsic\" (#21480) at dotnet/coreclr","RelatedBody":"This PR implements the remaining BMI1/2 intrinsic. \r\n\r\nAfter this PR, BMI1 and BMI2 get fully implemented and all the intrinsic APIs proposed in https://github.com/dotnet/corefx/issues/22940 are enabled for .NET Core 3.0.\r\n\r\nClose https://github.com/dotnet/coreclr/issues/18712 and close https://github.com/dotnet/corefx/issues/22940\r\n\r\n@tannergooding @CarolEidt "},{"Id":"8775816891","Type":"PullRequestEvent","CreatedAt":"2018-12-19T00:56:30","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21592","RelatedDescription":"Opened pull request \"Update CoreFx to preview.18618.7 (master)\" (#21592) at dotnet/coreclr","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"8775758977","Type":"PullRequestEvent","CreatedAt":"2018-12-19T00:38:24","Actor":"sbomer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21591","RelatedDescription":"Opened pull request \"Add build timeout\" (#21591) at dotnet/coreclr","RelatedBody":"This should fix official build failures that are timing out because\r\nthe jobs are waiting to obtain an exclusive lock on the blob\r\nfeed."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8776390113","Type":"IssuesEvent","CreatedAt":"2018-12-19T04:02:23","Actor":"aaronlcope","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10493","RelatedDescription":"Opened issue \"dotnet build-server shutdown won't stop dotnet.exe during tests\" (#10493) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n(inside a shell script)\r\ndotnet test /nodereuse:false\r\n\r\nCtrl-C to exit build. \r\nCtrl-C is trapped on user entry (snippet from shell script)\r\ntrap \"trap_ctrlc\" 2\r\nfunction trap_ctrlc ()\r\n{\r\n    dotnet build-server shutdown --msbuild --razor --vbcscompiler\r\n    # where is the option for tests? --test\r\n    # IMPORTANT: my project uses xunit\r\n    exit 2\r\n}\r\n\r\n## Expected  behavior\r\nI would think that the tests run under msbuild...which, if you cancel during the middle of tests, the shutdown of the build server should kill the associated dotnet.exe processes, but it doesn't. I try to build again w/out shutting those processes down and the build fails b/c the dll is in use (by one or both of the orphaned dotnet.exe processes). As soon as I manually kill the orphaned dotnet.exe processes in task manager, I can then build again.\r\n\r\n## Actual behavior\r\nIf I cancel (Ctrl-C) prior to the tests starting, the build server shuts down all the dotnet.exe processes properly. The only orphaned dotnet.exe processes left around on cancellation of the shell script is whenever I interrupt the script while the xunit test runner is running.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview1-002702 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003121 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.0-rc2-3002702 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"8775368595","Type":"IssuesEvent","CreatedAt":"2018-12-18T22:51:18","Actor":"richlander","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10492","RelatedDescription":"Opened issue \"Cannot use `dotnet new` to target older runtimes\" (#10492) at dotnet/cli","RelatedBody":"I have both .NET Core 3 Preview 1 and .NET Core 2.2 SDKs installed. I want to do this:\r\n\r\n```console\r\ndotnet new console app22 --framework netcoreapp2.2\r\n```\r\nIt doesn't work. I'm not happy using global.json for this scenario. I should be able to target any .NET Core version that I want. If that version isn't supported on my machine currently, I should get instructions on what to do."},{"Id":"8774920411","Type":"PullRequestEvent","CreatedAt":"2018-12-18T21:21:04","Actor":"vitek-karas","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10491","RelatedDescription":"Opened pull request \"Improve --roll-forward-on-no-candidate-fx usage text.\" (#10491) at dotnet/cli","RelatedBody":"Make it explicit that the --roll-forward-on-no-candidate-fx options requires a value. Modify the description since the argument sets the behavior (it doesn't just enable it, it can also disable and so on).\r\n\r\nRelated to dotnet/core-setup#4873"},{"Id":"8773876670","Type":"PullRequestEvent","CreatedAt":"2018-12-18T18:06:19","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10489","RelatedDescription":"Merged pull request \"Update dependency files\" (#10489) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n\r\n"},{"Id":"8773753169","Type":"PullRequestEvent","CreatedAt":"2018-12-18T17:44:43","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10490","RelatedDescription":"Merged pull request \"Update dependency files\" (#10490) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18617.2\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8775926323","Type":"PullRequestEvent","CreatedAt":"2018-12-19T01:30:19","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1013","RelatedDescription":"Merged pull request \"Add missing readonly modifiers\" (#1013) at dotnet/standard","RelatedBody":"This fixes #842 (or at least is a sizable down payment)."},{"Id":"8775926318","Type":"IssuesEvent","CreatedAt":"2018-12-19T01:30:19","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/842","RelatedDescription":"Closed issue \"Future netstandard should reflect struct readonly changes\" (#842) at dotnet/standard","RelatedBody":"I think we should bring such changes in as they also have a potential performance impact and compilation against NS should not have a negative performance impact."},{"Id":"8775924431","Type":"PullRequestEvent","CreatedAt":"2018-12-19T01:29:44","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1020","RelatedDescription":"Merged pull request \"Reduce noise in reference assemblies\" (#1020) at dotnet/standard","RelatedBody":"This doesn't change any APIs. It's just reducing noise from in the textual diff of the reference assemblies.\r\n\r\n* Fix trailing whitespace (69cb85e)\r\n* Mark types as partial (c9725f7)\r\n* Replace handwritten base calls with generated ones (78649f6)\r\n"},{"Id":"8771897252","Type":"PullRequestEvent","CreatedAt":"2018-12-18T13:01:40","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1028","RelatedDescription":"Opened pull request \"Update dependency files\" (#1028) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18617.7\r\n\r\n"},{"Id":"8767790142","Type":"PullRequestEvent","CreatedAt":"2018-12-17T20:52:31","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1027","RelatedDescription":"Opened pull request \"Build Standard entirely against Arcade, without Buildtools [WIP]\" (#1027) at dotnet/standard","RelatedBody":"This cuts out buildtools entirely from the Standard repo, so that we fully rely on the Arcade SDK to build against instead. This is still a WIP, as I still need to replace the functionality of `ValidateApiCompatForSrc` from Buildtools: https://github.com/dotnet/buildtools/blob/6844ee12987d5bc1a031dbaf2fe7cbc7fdfaa35d/src/Microsoft.DotNet.Build.Tasks/PackageFiles/ApiCompat.targets#L26. However, it currently builds successfully (at least on Windows), so I figured I'd put up a PR for feedback.\r\n\r\n@ericstj @safern @danmosemsft @ViktorHofer  PTAL"},{"Id":"8767250717","Type":"PullRequestEvent","CreatedAt":"2018-12-17T19:11:23","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1014","RelatedDescription":"Merged pull request \"Add IAsyncDisposable\" (#1014) at dotnet/standard","RelatedBody":"This adds API support for the new C# 8 feature to call dispose asynchronously:\r\n\r\n```C#\r\nawait using(var stream = File.OpenWrite(path))\r\n{\r\n    await data.WriteAsync(stream);\r\n}\r\n```\r\n\r\nFor more details, see:\r\n\r\nhttps://github.com/dotnet/csharplang/blob/master/proposals/async-streams.md"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8776516734","Type":"IssuesEvent","CreatedAt":"2018-12-19T04:51:36","Actor":"SeanFeldman","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34157","RelatedDescription":"Opened issue \"GZipStream compatibility - different results on .NET Framework and .NET Core\" (#34157) at dotnet/corefx","RelatedBody":"## Expected behaviour \r\n\r\nTo produce identical compressed result for the same original byte array on .NET Framework and .NET Core.\r\n\r\n## Actual behaviour\r\n\r\nResults of `GZipStream` on .NET Framework and .NET Core are different.\r\n\r\n## Repro\r\n\r\n1. An array of 1500 characters 'A'\r\n2. Compressed using `GZipStream`\r\n3. Verified results on .NET Framework (4.6.1) and .NET Core (2.1) that should be identical, but they are not.\r\n\r\n### Results\r\n\r\nPlatform                          | Compressed result in hexa\r\n---------------------------|----------------------------------------\r\n.NET Framework<br> 4.6.1     | 1f8b080000000000040073741c05a360148c825130dc00004d6f6cebdc050000\r\n.NET Core 2.2.100<br>Commit b9f2fa0ca8<br><br>Host 2.2.0 Commit 1249f08fed    | 1f8b080000000000000b73741c05a321301a02a321301a028ec30c00004d6f6cebdc050000"},{"Id":"8776257084","Type":"IssuesEvent","CreatedAt":"2018-12-19T03:15:26","Actor":"JimBobSquarePants","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/34156","RelatedDescription":"Opened issue \"System.Drawing.Common throws when saving with EncoderParameters \" (#34156) at dotnet/corefx","RelatedBody":"Using NetCoreApp 2.1 on Windows with either\r\n\r\nSystem.Drawing.Common 4.5.1\r\nSystem.Drawing.Common 4.6.0-preview.18571.3\r\n\r\nwhen saving a jpeg using either overload:\r\n\r\n`public void Save(String filename, ImageCodecInfo encoder, EncoderParameters encoderParams)`\r\n`public void Save(Stream stream, ImageCodecInfo encoder, EncoderParameters encoderParams)`\r\n\r\nThe following exception is thrown.\r\n\r\n> {System.ArgumentException: Parameter is not valid.\r\n> at System.Drawing.Image.Save(Stream stream, ImageCodecInfo encoder, EncoderParameters encoderParams)\r\n\r\n![System Drawing exception](https://user-images.githubusercontent.com/385879/50196721-60798600-0398-11e9-955d-4609466a3c33.png)\r\n\r\n\r\nSaving the image without the params works as expected.\r\n\r\nI've attached the following program to allow reproduction.\r\n[SDIssue.zip](https://github.com/dotnet/corefx/files/2693093/SDIssue.zip)\r\n"},{"Id":"8776040682","Type":"PullRequestEvent","CreatedAt":"2018-12-19T02:06:18","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/34154","RelatedDescription":"Merged pull request \"Update publish symbols task to fix freebsd symbols publishing\" (#34154) at dotnet/corefx","RelatedBody":"Update publish symbols package that contains fix for freebsd symbols publishing. "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8776540159","Type":"IssuesEvent","CreatedAt":"2018-12-19T05:00:46","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31934","RelatedDescription":"Closed issue \"Cannot build the repository\" (#31934) at dotnet/roslyn","RelatedBody":"I'm on master using 15.9 latest and I cannot build our repository anymore. Whenever I build I get the following error: \r\n\r\n> C:\\Users\\jaredpar\\code\\roslyn\\src\\ExpressionEvaluator\\Core\\Source\\FunctionResolver\\MetadataDecoder.cs(18,13): err or CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to ass embly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. [C:\\Users\\jaredpar\\code\\r oslyn\\src\\ExpressionEvaluator\\Core\\Source\\FunctionResolver\\Microsoft.CodeAnalysis.FunctionResolver.csproj]\r\n\r\nI've tried all manner of debugging this:\r\n\r\n- Cleaned my enlistment (`git clean -dfx .`)\r\n- Ran Restore.cmd and manually `msbuild /t:restore` \r\n- Updated my VS and dotnet installs (15.9 latest and 2.1.401) \r\n- Looked into the binary log and there is nothnig interesting there. "},{"Id":"8776526820","Type":"PullRequestEvent","CreatedAt":"2018-12-19T04:55:38","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31932","RelatedDescription":"Merged pull request \"Disable warn as error in build correctness\" (#31932) at dotnet/roslyn","RelatedBody":"This re-establishes our warning only behavior for the build correctness\r\nleg. Fixes a regression introduced in #31913"},{"Id":"8776501640","Type":"IssuesEvent","CreatedAt":"2018-12-19T04:45:40","Actor":"anirudhagupta","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31854","RelatedDescription":"Closed issue \"C# 8 Beta negative index not working in VS 2019  preview 1.1\" (#31854) at dotnet/roslyn","RelatedBody":"I am trying to compile this code but it's making exception in VS 2019 preview 1.1.\r\n\r\nI tried go to build > advanced. set c# 8 beta and latest but none of them make it compile.\r\nIt's show me a bulb to upgrade project to c#8 but it still doesn't make it work. Is anyone explain if this can be compile in latest preview VS (in public) or I am missing something here\r\n\r\n![image](https://user-images.githubusercontent.com/35772421/50071763-d646eb80-01f8-11e9-9c1f-4d986240c978.png)\r\n"},{"Id":"8776437575","Type":"PullRequestEvent","CreatedAt":"2018-12-19T04:20:46","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31927","RelatedDescription":"Merged pull request \"Set the ulimit higher to avoid too many open files when running build.sh\" (#31927) at dotnet/roslyn","RelatedBody":"Many builds have been failing the Linux_Test coreclr build with Too many open files.\r\n\r\n```console\r\n2018-12-18T21:04:36.3036095Z   Restoring packages for /data/agent/_work/7/s/src/CodeStyle/CSharp/Tests/Microsoft.CodeAnalysis.CSharp.CodeStyle.UnitTests.csproj...\r\n2018-12-18T21:04:36.3107197Z   Restoring packages for /data/agent/_work/7/s/src/CodeStyle/Core/Analyzers/Microsoft.CodeAnalysis.CodeStyle.csproj...\r\n2018-12-18T21:04:37.9511911Z   Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/roslyn-tools/nuget/v3/flatcontainer/system.threading.tasks.parallel/index.json'.\r\n2018-12-18T21:04:37.9512179Z   Too many open files in system\r\n2018-12-18T21:04:37.9512597Z   Retrying 'FindPackagesByIdAsync' for source 'https://api.nuget.org/v3-flatcontainer/system.text.regularexpressions/index.json'.\r\n2018-12-18T21:04:37.9512669Z   Too many open files\r\n2018-12-18T21:04:37.9513048Z   Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/roslyn-tools/nuget/v3/flatcontainer/system.threading.tasks.parallel/index.json'.\r\n2018-12-18T21:04:37.9513175Z   Too many open files in system\r\n2018-12-18T21:04:37.9513557Z   Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/symreader-native/nuget/v3/flatcontainer/system.text.regularexpressions/index.json'.\r\n2018-12-18T21:04:37.9513628Z   Too many open files in system\r\n```\r\n\r\nFor example attempts 1 and 2 from this build for #31648 - [Logs](https://dnceng.visualstudio.com/public/_build/results?buildId=60451)"},{"Id":"8776422131","Type":"IssuesEvent","CreatedAt":"2018-12-19T04:14:51","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31934","RelatedDescription":"Opened issue \"Cannot build the repository\" (#31934) at dotnet/roslyn","RelatedBody":"I'm on master using 15.9 latest and I cannot build our repository anymore. Whenever I build I get the following error: \r\n\r\n> C:\\Users\\jaredpar\\code\\roslyn\\src\\ExpressionEvaluator\\Core\\Source\\FunctionResolver\\MetadataDecoder.cs(18,13): err or CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to ass embly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. [C:\\Users\\jaredpar\\code\\r oslyn\\src\\ExpressionEvaluator\\Core\\Source\\FunctionResolver\\Microsoft.CodeAnalysis.FunctionResolver.csproj]\r\n\r\nI've tried all manner of debugging this:\r\n\r\n- Cleaned my enlistment (`git clean -dfx .`)\r\n- Ran Restore.cmd and manually `msbuild /t:restore` \r\n- Updated my VS and dotnet installs (15.9 latest and 2.1.401) \r\n- Looked into the binary log and there is nothnig interesting there. "},{"Id":"8776412689","Type":"PullRequestEvent","CreatedAt":"2018-12-19T04:11:07","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31293","RelatedDescription":"Merged pull request \"Correct the Syntax of IUnaryOperation (logical not) in control flow g…\" (#31293) at dotnet/roslyn","RelatedBody":"…raph\r\n\r\nIn the current release, the IOperation control flow graph for a method:\r\n```cs\r\nvoid f() {\r\n    var x = !g(); \r\n}\r\n```\r\ncontains an `IUnaryOperation` for the logical not, but its `Syntax` is `InvocationExpressionSyntax` `g()` instead of `PrefixUnaryExpressionSyntax` `!g()`."},{"Id":"8776303880","Type":"PullRequestEvent","CreatedAt":"2018-12-19T03:31:30","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31933","RelatedDescription":"Opened pull request \"Fix formatting error\" (#31933) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8773509334","Type":"PullRequestEvent","CreatedAt":"2018-12-18T17:02:46","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6688","RelatedDescription":"Merged pull request \"Do not use R2R helpers for casting and allocation\" (#6688) at dotnet/corert","RelatedBody":"This avoids generation of some of the helpers in favor of RyuJIT generating code that does what the helper would do. While this causes an about 1% regression in size of the generated executable, the benefit is better code density and fewer calls."},{"Id":"8772881580","Type":"IssuesEvent","CreatedAt":"2018-12-18T15:32:46","Actor":"MarcoRossignoli","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6694","RelatedDescription":"Opened issue \"[ILVerify]Add '--tokens' switch\" (#6694) at dotnet/corert","RelatedBody":"Today when ILVerify found issue we report tokens/offsets value for type system item for IL methods i.e.\r\n```\r\n[IL]: Error: [C:\\git\\corert\\bin\\Windows_NT.x64.Debug\\ILVerification.Tests\\Tests\\BranchingTests.dll : BranchingTestsType::Branching.FromTryIntoFinally_Invalid_BranchOutOfTry.BranchIntoHandler()][offset 0x00000004] Branch out of try block.\r\n```\r\nWe added some new type check and we decided to not report token value for it because they are not useful for regular use i.e.\r\n```\r\n[MD]: Error: Interface implementation has a duplicate. Class '[InterfaceImplementation]InterfaceImplHasDuplicate_InvalidType_InterfaceImplHasDuplicate' Interface: '[InterfaceDefinition]Interface'\r\n```\r\nHowever there are some scenario where tokens are useful, for instance on obfuscated code.\r\nWe should refactor code to have token values only if a user pass '--tokens'  switch to command line.\r\nReference https://github.com/dotnet/corert/pull/6687#discussion_r241916514"},{"Id":"8772713497","Type":"PullRequestEvent","CreatedAt":"2018-12-18T15:09:14","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6687","RelatedDescription":"Merged pull request \"[ILVerify]Added more tests\" (#6687) at dotnet/corert","RelatedBody":"Added some new tests to new type check.\r\n\r\n/cc @jkotas "},{"Id":"8772681796","Type":"IssuesEvent","CreatedAt":"2018-12-18T15:04:43","Actor":"IonKiwi","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6693","RelatedDescription":"Opened issue \"ILVerify InvalidCastException Unable to cast object of type 'Internal.TypeSystem.InstantiatedGenericParameter' to type 'Internal.TypeSystem.MetadataType'\" (#6693) at dotnet/corert","RelatedBody":"ILVerify reports the following error:\r\n\r\n```\r\nError: Unable to cast object of type 'Internal.TypeSystem.InstantiatedGenericParameter' to type 'Internal.TypeSystem.MetadataType'.\r\n```\r\n\r\nWith the following code:\r\n\r\n```\r\n    public class DocumentElement\r\n    {\r\n        public abstract class DocumentElementList<T> : ObservableCollection<T> where T : DocumentElement\r\n        {\r\n            protected override void InsertItem(int index, T item)\r\n            {\r\n                item.DoNotifyParent();\r\n            }\r\n        }\r\n\r\n        protected void DoNotifyParent()\r\n        {\r\n        }\r\n    }\r\n```\r\n\r\nWhen I verify it using PEVerify, there are no errors.\r\n\r\n"},{"Id":"8771765200","Type":"PullRequestEvent","CreatedAt":"2018-12-18T12:37:47","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6692","RelatedDescription":"Merged pull request \"Update RyuJIT\" (#6692) at dotnet/corert","RelatedBody":"Picks up a JitInterface change."},{"Id":"8771468525","Type":"PullRequestEvent","CreatedAt":"2018-12-18T11:42:11","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6692","RelatedDescription":"Opened pull request \"Update RyuJIT\" (#6692) at dotnet/corert","RelatedBody":"Picks up a JitInterface change."},{"Id":"8769692738","Type":"PullRequestEvent","CreatedAt":"2018-12-18T05:32:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6524","RelatedDescription":"Closed pull request \"Dynamic statics cleanup\" (#6524) at dotnet/corert","RelatedBody":"This change cleans up my change for initial dynamic statics support\r\nper Zach's PR feedback. I have introduced new symbolic constants\r\nand propagated them through the relevant code to mark up where\r\nwe're referring to the regular vs. thread-local static indices.\r\n\r\nThanks\r\n\r\nTomas"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8775967205","Type":"PullRequestEvent","CreatedAt":"2018-12-19T01:43:18","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2745","RelatedDescription":"Closed pull request \"Insert NuGet Build 5.0.0-preview1.5707 into sdk\" (#2745) at dotnet/sdk","RelatedBody":"Keeping it consistent with 2.2.2xx train"},{"Id":"8775966201","Type":"PullRequestEvent","CreatedAt":"2018-12-19T01:43:03","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2762","RelatedDescription":"Opened pull request \"Updating NuGet and CLI version.\" (#2762) at dotnet/sdk","RelatedBody":""},{"Id":"8775637216","Type":"PullRequestEvent","CreatedAt":"2018-12-19T00:01:31","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2761","RelatedDescription":"Opened pull request \"Merge release/2.2.2xx to master\" (#2761) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8773714851","Type":"PullRequestEvent","CreatedAt":"2018-12-18T17:37:52","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2758","RelatedDescription":"Merged pull request \"Merge release/2.2.1xx to release/2.2.2xx\" (#2758) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"open","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Open issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2018-12-16T11:40:46","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Open PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2018-11-27T00:35:00","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"open","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Open PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"},{"Id":"294070713","IsPullRequest":true,"CreatedAt":"2018-05-18T19:06:02","Actor":"karann-msft","Number":"98","RawContent":null,"Title":"Updates to reflect the latest information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/98","RelatedDescription":"Closed or merged PR \"Updates to reflect the latest information\" (#98)"},{"Id":"316146229","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:34","Actor":"Cheesebaron","Number":"100","RawContent":null,"Title":"Create mvvmcross.md","State":"closed","Body":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415","Url":"https://github.com/dotnet/foundation/pull/100","RelatedDescription":"Closed or merged PR \"Create mvvmcross.md\" (#100)"},{"Id":"321003666","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:07","Actor":"shauheen","Number":"102","RawContent":null,"Title":"Update projects.json adding MLNET","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/102","RelatedDescription":"Closed or merged PR \"Update projects.json adding MLNET\" (#102)"},{"Id":"321003407","IsPullRequest":true,"CreatedAt":"2018-05-18T19:04:23","Actor":"shauheen","Number":"101","RawContent":null,"Title":"Create mlnet.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/101","RelatedDescription":"Closed or merged PR \"Create mlnet.md\" (#101)"},{"Id":"293777118","IsPullRequest":true,"CreatedAt":"2018-03-29T07:03:03","Actor":"mairaw","Number":"97","RawContent":null,"Title":"update CLA PDF link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/97","RelatedDescription":"Closed or merged PR \"update CLA PDF link\" (#97)"},{"Id":"307656482","IsPullRequest":false,"CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Number":"99","RawContent":null,"Title":"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux ","State":"open","Body":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n","Url":"https://github.com/dotnet/foundation/issues/99","RelatedDescription":"Open issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"392394062","IsPullRequest":true,"CreatedAt":"2018-12-19T05:09:59","Actor":"sbomer","Number":"21591","RawContent":null,"Title":"Add build timeout","State":"closed","Body":"This should fix official build failures that are timing out because\r\nthe jobs are waiting to obtain an exclusive lock on the blob\r\nfeed.","Url":"https://github.com/dotnet/coreclr/pull/21591","RelatedDescription":"Closed or merged PR \"Add build timeout\" (#21591)"},{"Id":"392406996","IsPullRequest":false,"CreatedAt":"2018-12-19T04:10:37","Actor":"VincentBu","Number":"21593","RawContent":null,"Title":"[arm] Test failure: System.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException","State":"closed","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_corefx_jitstressregs0x1000_tst/40/\r\n\r\n**Failed tests:**\r\nSystem.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException\r\n\r\n**Failed log:**\r\n```\r\nSystem.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException(date: 2018-12-17T20:37:16.7985554-08:00, hours: 1.79769313486232E+308) [FAIL]\r\n      Assert.Throws() Failure\r\n      Expected: typeof(System.ArgumentOutOfRangeException)\r\n      Actual:   (No exception was thrown)\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm_cross_che---ab665b7f\\_\\fx\\src\\CoreFx.Private.TestUtilities\\src\\System\\AssertExtensions.cs(83,0): at System.AssertExtensions.Throws[T](String paramName, Func`1 testCode)\r\n        D:\\j\\workspace\\arm_cross_che---ab665b7f\\_\\fx\\src\\System.Runtime\\tests\\System\\DateTimeTests.cs(494,0): at System.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException(DateTime date, Double hours)\r\n    System.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException(date: 2018-12-17T20:37:16.7989204-08:00, hours: -1.79769313486232E+308) [FAIL]\r\n      Assert.Throws() Failure\r\n      Expected: typeof(System.ArgumentOutOfRangeException)\r\n      Actual:   (No exception was thrown)\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm_cross_che---ab665b7f\\_\\fx\\src\\CoreFx.Private.TestUtilities\\src\\System\\AssertExtensions.cs(83,0): at System.AssertExtensions.Throws[T](String paramName, Func`1 testCode)\r\n        D:\\j\\workspace\\arm_cross_che---ab665b7f\\_\\fx\\src\\System.Runtime\\tests\\System\\DateTimeTests.cs(494,0): at System.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException(DateTime date, Double hours)\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21593","RelatedDescription":"Closed issue \"[arm] Test failure: System.Tests.DateTimeTests.AddHours_NewDateOutOfRange_ThrowsArgumentOutOfRangeException\" (#21593)"},{"Id":"392397680","IsPullRequest":true,"CreatedAt":"2018-12-19T00:56:29","Actor":"dotnet-maestro-bot","Number":"21592","RawContent":null,"Title":"Update CoreFx to preview.18618.9 (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/21592","RelatedDescription":"Open PR \"Update CoreFx to preview.18618.9 (master)\" (#21592)"},{"Id":"392392985","IsPullRequest":true,"CreatedAt":"2018-12-19T00:33:03","Actor":"jkoritzinsky","Number":"21590","RawContent":null,"Title":"Remove extraneous eightbytes check for native structures and add tests.","State":"open","Body":"Fixes #21585.","Url":"https://github.com/dotnet/coreclr/pull/21590","RelatedDescription":"Open PR \"Remove extraneous eightbytes check for native structures and add tests.\" (#21590)"},{"Id":"392376423","IsPullRequest":true,"CreatedAt":"2018-12-18T23:17:24","Actor":"CarolEidt","Number":"21589","RawContent":null,"Title":"Transform SIMD8 to FIELD_LIST if promoted","State":"open","Body":"Fix #21546","Url":"https://github.com/dotnet/coreclr/pull/21589","RelatedDescription":"Open PR \"Transform SIMD8 to FIELD_LIST if promoted\" (#21589)"},{"Id":"392374934","IsPullRequest":true,"CreatedAt":"2018-12-18T23:11:25","Actor":"BruceForstall","Number":"21588","RawContent":null,"Title":"[WIP] NO-MERGE Test re-enabling Windows arm64 corefx tests","State":"open","Body":"The ones that haven't been investigated, and don't have\r\nindividual issues. See if any pass. Note that these are not\r\ndisabled for Linux/arm64.","Url":"https://github.com/dotnet/coreclr/pull/21588","RelatedDescription":"Open PR \"[WIP] NO-MERGE Test re-enabling Windows arm64 corefx tests\" (#21588)"},{"Id":"392370925","IsPullRequest":true,"CreatedAt":"2018-12-18T22:56:54","Actor":"fiigii","Number":"21587","RawContent":null,"Title":"Add AggressiveInlining for Vector<T>.op_Multiply","State":"open","Body":"This PR makes Burgers.Test3 ~3.3X faster. The perf issue is detected from https://github.com/dotnet/coreclr/pull/21518#issuecomment-448370240.\r\nBefore\r\n![image](https://user-images.githubusercontent.com/1263030/50188026-095ead00-02d5-11e9-81a5-9c5f86780e74.png)\r\nAfter\r\n![image](https://user-images.githubusercontent.com/1263030/50188064-21cec780-02d5-11e9-8be0-6d25cd30f4d3.png)\r\n","Url":"https://github.com/dotnet/coreclr/pull/21587","RelatedDescription":"Open PR \"Add AggressiveInlining for Vector<T>.op_Multiply\" (#21587)"},{"Id":"392359600","IsPullRequest":true,"CreatedAt":"2018-12-18T22:18:03","Actor":"kouvel","Number":"21586","RawContent":null,"Title":"Normalize a few more spin-wait loops","State":"open","Body":"- Fixed a few more spin-waits to normalize the spin-wait duration between processors\r\n- These spin-waits have so far not needed to be retuned to avoid unreasonably long spin-wait durations. They can be retuned as necessary in the future.\r\n  - Added a version of YieldProcessorNormalized() that normalizes based on spin-wait counts tuned for pre-Skylake processors for spin-wait loops that have not been retuned.\r\n- Moved some files around to make YieldProcessorNormalized() and the like available in more places. Initialization is still only done in the VM. Uses outside the VM will use the defaults, where there would be no significant change from before.","Url":"https://github.com/dotnet/coreclr/pull/21586","RelatedDescription":"Open PR \"Normalize a few more spin-wait loops\" (#21586)"},{"Id":"391937860","IsPullRequest":true,"CreatedAt":"2018-12-18T21:26:55","Actor":"trylek","Number":"21573","RawContent":null,"Title":"Add support for parsing field signatures","State":"closed","Body":"This change adds basic field signature parsing support to R2RDump\r\nand it improves parsing of two fixup types (FIELD_ADDRESS and\r\nCCTOR_TRIGGER).\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/coreclr/pull/21573","RelatedDescription":"Closed or merged PR \"Add support for parsing field signatures\" (#21573)"},{"Id":"392333491","IsPullRequest":false,"CreatedAt":"2018-12-18T20:59:59","Actor":"jkoritzinsky","Number":"21585","RawContent":null,"Title":"Incorrect marshalling for a struct with a nested struct larger than 8 bytes on SystemV AMD64 ABI","State":"open","Body":"Given the structures and signature below:\r\n\r\n```csharp\r\n    public struct SeqStruct\r\n    {\r\n        public int a;\r\n        public bool b;\r\n        public string str;\r\n\r\n        public SeqStruct(int _a, bool _b, string _str)\r\n        {\r\n            a = _a;\r\n            b = _b;\r\n            str = String.Concat(_str, \"\");\r\n        }\r\n    }\r\n\r\n    public struct NestedStruct\r\n    {\r\n        public SeqStruct value;\r\n    }\r\n\r\n    [DllImport(\"LayoutClassNative\")]\r\n    private static extern bool SimpleNestedLayoutClassByValue(NestedStruct p);\r\n```\r\n\r\nAnd the native side:\r\n\r\n```cpp\r\nstruct SeqClass\r\n{\r\n    int a; \r\n    bool b;\r\n    char* str;\r\n};\r\nstruct NestedLayoutClass\r\n{\r\n    SeqClass str;\r\n};\r\n\r\nextern \"C\" DLL_EXPORT BOOL STDMETHODCALLTYPE SimpleNestedLayoutClassByValue(NestedLayoutClass v);\r\n```\r\n\r\nThe SystemV ABI expects the `v` parameter to be enregistered. However, the runtime passes the value of `v` on the stack instead of enregistering it. I've traced the problem to be\r\nhttps://github.com/dotnet/coreclr/blob/12a8870119b3e8023d68868792b29c28991168b3/src/vm/methodtable.cpp#L2651-L2656\r\n\r\nThis check is too broad eagerly marks the `NestedStruct` type as not enregisterable.\r\n\r\nThis bug is blocking one of the tests in #20867.\r\n\r\ncc: @janvorli @CarolEidt @RussKeldorph ","Url":"https://github.com/dotnet/coreclr/issues/21585","RelatedDescription":"Open issue \"Incorrect marshalling for a struct with a nested struct larger than 8 bytes on SystemV AMD64 ABI\" (#21585)"},{"Id":"392315550","IsPullRequest":false,"CreatedAt":"2018-12-18T20:08:10","Actor":"swaroop-sridhar","Number":"21584","RawContent":null,"Title":"Investigate semantics of DllImportSearchPath attribute on Non-Windows platforms","State":"open","Body":"Currently, the [DllImportSearchPath](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.dllimportsearchpath?view=netframework-4.7.2) attribute on PInvokes and assemblies mostly only has meaning on Windows. Attributes other than SearchAssemblyDirectory are ignored for non-windows platforms. Should the other enum values have semantics on other platforms? \r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/21584","RelatedDescription":"Open issue \"Investigate semantics of DllImportSearchPath attribute on Non-Windows platforms\" (#21584)"},{"Id":"391837341","IsPullRequest":true,"CreatedAt":"2018-12-18T19:51:50","Actor":"CarolEidt","Number":"21567","RawContent":null,"Title":"Test for #20657 SIMD byref bug","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21567","RelatedDescription":"Closed or merged PR \"Test for #20657 SIMD byref bug\" (#21567)"},{"Id":"392292443","IsPullRequest":false,"CreatedAt":"2018-12-18T19:03:56","Actor":"Anipik","Number":"21583","RawContent":null,"Title":"Regression  for hashing on netcoreapp3.0","State":"open","Body":"MurmurHash function is slower on netcoreapp3.0 as compared to netcore2.1. This is most probably due to codegen.\r\nThe numbers are\r\nsdk = 3.0.100-preview-009841\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.17134.471 (1803/April2018Update/Redstone4)\r\nIntel Xeon CPU E5-1650 v4 3.60GHz, 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.0.100-alpha1-009630\r\n  [Host]     : .NET Core 3.0.0-preview1-26928-03 (CoreCLR 4.6.26927.03, CoreFX 4.6.26927.03), 64bit RyuJIT\r\n  Job-GLYGMU : .NET Core 3.0.0-preview1-26928-03 (CoreCLR 4.6.26927.03, CoreFX 4.6.26927.03), 64bit RyuJIT\r\n\r\nBuildConfiguration=Release-Intrinsics  Toolchain=netcoreapp3.0  MaxIterationCount=20  \r\nWarmupCount=1  \r\n\r\n```\r\n|              Method |     Mean |    Error |   StdDev | Extra Metric |\r\n|-------------------- |---------:|---------:|---------:|-------------:|\r\n| MurmurHashBenchmark | 231.0 ns | 4.122 ns | 3.654 ns |            - |\r\n\r\n\r\n\r\n``` ini\r\n sdk version 2.1.401\r\n\r\n```\r\n|              Method |     Mean |     Error |    StdDev | Extra Metric |\r\n|-------------------- |---------:|----------:|----------:|-------------:|\r\n| MurmurHashBenchmark | 197.8 ns | 0.9518 ns | 0.8438 ns |            - |\r\n\r\n\r\nthe associated code is \r\n```C#\r\nchar[] input2;\r\nuint arg;\r\n\r\n[GlobalSetup(Target = nameof(MurmurHashBenchmark))]\r\npublic void setup2()\r\n{\r\n    int min = 0;\r\n    int max = 100;\r\n    Random randNum = new Random();\r\n    arg = (uint)randNum.Next(min, max);\r\n\r\n    input2 = new char[max];\r\n\r\n    for (int i = 0; i < input2.Length; i++)\r\n    {\r\n        input2[i] = (char)randNum.Next(min, 128);\r\n    }\r\n\r\n}\r\n\r\n[Benchmark]\r\npublic void MurmurHashBenchmark()\r\n{\r\n    ReadOnlySpan<char> _t = input2.AsSpan();\r\n    MurmurHash(arg, _t);\r\n}\r\n\r\npublic void MurmurHash(uint hash, ReadOnlySpan<char> span)\r\n{\r\n    ulong cur = 0;\r\n    int bits = 0;\r\n    for (int ich = 0; ich < span.Length; ich++)\r\n    {\r\n        uint ch = span[ich];\r\n        cur |= ch << bits;\r\n        bits += 8;\r\n\r\n        if (bits >= 32)\r\n        {\r\n            hash = MurmurRound(hash, (uint)cur);\r\n            cur = cur >> 32;\r\n            bits -= 32;\r\n        }\r\n    }\r\n}\r\n\r\npublic static uint MurmurRound(uint hash, uint chunk)\r\n{\r\n    chunk *= 0xCC9E2D51;\r\n    chunk = Rotate(chunk, 15);\r\n    chunk *= 0x1B873593;\r\n\r\n    hash ^= chunk;\r\n    hash = Rotate(hash, 13);\r\n    hash *= 5;\r\n    hash += 0xE6546B64;\r\n\r\n    return hash;\r\n}\r\n\r\nprivate static uint Rotate(uint x, int r)\r\n{\r\n    return (x << r) | (x >> (32 - r));\r\n}\r\n\r\n```\r\n\r\ncc @danmosemsft @tannergooding @eerhardt ","Url":"https://github.com/dotnet/coreclr/issues/21583","RelatedDescription":"Open issue \"Regression  for hashing on netcoreapp3.0\" (#21583)"},{"Id":"392283863","IsPullRequest":false,"CreatedAt":"2018-12-18T18:39:00","Actor":"BruceForstall","Number":"21582","RawContent":null,"Title":"[Linux/arm32] GCStress=C Illegal instruction failure","State":"open","Body":"Seen in several runs, not on the same test.\r\n\r\nExamples:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_ubuntu_gcstress0xc_tst/40/consoleFull\r\n```\r\n14:22:05 \r\n      Loader_classloader._TypeGeneratorTests_TypeGeneratorTest716_Generated716_Generated716_._TypeGeneratorTests_TypeGeneratorTest716_Generated716_Generated716_sh [FAIL]\r\n14:22:05         /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_gcstress0xc_tst/bin/tests/Linux.arm.Checked/Loader/classloader/TypeGeneratorTests/TypeGeneratorTest716/Generated716/Generated716.sh: line 244: 26244 Illegal instruction     $_DebuggerFullPath \"$CORE_ROOT/corerun\" $ExePath $CLRTestExecutionArguments\r\n```\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_ubuntu_gcstress0xc_tst/39/consoleFull\r\n```\r\n11:32:05 \r\n      baseservices_threading._paramthreadstart_ThreadStartOperations_2_ThreadStartOperations_2_._paramthreadstart_ThreadStartOperations_2_ThreadStartOperations_2_sh [FAIL]\r\n11:32:05         ../ThreadStartOperations/ThreadStartOperations.sh: 28: ../ThreadStartOperations/ThreadStartOperations.sh: source: not found\r\n11:32:05         ../ThreadStartOperations/ThreadStartOperations.sh: 167: ../ThreadStartOperations/ThreadStartOperations.sh: shopt: not found\r\n11:32:05         Illegal instruction\r\n11:32:05         /n/nReturn code:      1\r\n```\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_ubuntu_gcstress0xc_tst/38/consoleFull\r\n```\r\n14:48:57       Loader_classloader._TypeGeneratorTests_TypeGeneratorTest1113_Generated1113_Generated1113_._TypeGeneratorTests_TypeGeneratorTest1113_Generated1113_Generated1113_sh [FAIL]\r\n14:48:57         /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_gcstress0xc_tst/bin/tests/Linux.arm.Checked/Loader/classloader/TypeGeneratorTests/TypeGeneratorTest1113/Generated1113/Generated1113.sh: line 244: 31774 Illegal instruction     $_DebuggerFullPath \"$CORE_ROOT/corerun\" $ExePath $CLRTestExecutionArguments\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21582","RelatedDescription":"Open issue \"[Linux/arm32] GCStress=C Illegal instruction failure\" (#21582)"},{"Id":"392282563","IsPullRequest":false,"CreatedAt":"2018-12-18T18:34:59","Actor":"BruceForstall","Number":"21581","RawContent":null,"Title":"[Linux/arm32] GCStress=C assert: \"(m_pStartFrame != NULL) || (m_flags & POPFRAMES) || (m_pRealStartFrame == m_pThread->GetFrame()) || (bRedirectedPinvoke)\"","State":"open","Body":"Seen in several arm32 GCStress=C runs, but not every run, and not the same test. Some examples:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_ubuntu_gcstress0xc_flow/44/\r\n```\r\n14:32:49       Loader_classloader._TypeGeneratorTests_TypeGeneratorTest1038_Generated1038_Generated1038_._TypeGeneratorTests_TypeGeneratorTest1038_Generated1038_Generated1038_sh [FAIL]\r\n14:32:49         \r\n14:32:49 \r\n        Assert failure(PID 443 [0x000001bb], Thread: 504 [0x01f8]): (m_pStartFrame != NULL) || (m_flags & POPFRAMES) || (m_pRealStartFrame == m_pThread->GetFrame()) || (bRedirectedPinvoke)\r\n14:32:49             File: /mnt/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu/src/vm/stackwalk.cpp Line: 1577\r\n14:32:49             Image: /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_gcstress0xc_tst/bin/tests/Linux.arm.Checked/Tests/Core_Root/corerun\r\n14:32:49         \r\n14:32:49         /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_gcstress0xc_tst/bin/tests/Linux.arm.Checked/Loader/classloader/TypeGeneratorTests/TypeGeneratorTest1038/Generated1038/Generated1038.sh: line 244:   443 Aborted                 $_DebuggerFullPath \"$CORE_ROOT/corerun\" $ExePath $CLRTestExecutionArguments\r\n```\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_ubuntu_gcstress0xc_flow/42/\r\n```\r\n11:36:45 \r\n      GC_Coverage._LargeObjectAlloc2_LargeObjectAlloc2_._LargeObjectAlloc2_LargeObjectAlloc2_sh [FAIL]\r\n11:36:45         \r\n11:36:45 \r\n        Assert failure(PID 28988 [0x0000713c], Thread: 29011 [0x7153]): (m_pStartFrame != NULL) || (m_flags & POPFRAMES) || (m_pRealStartFrame == m_pThread->GetFrame()) || (bRedirectedPinvoke)\r\n11:36:45             File: /mnt/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu/src/vm/stackwalk.cpp Line: 1577\r\n11:36:45             Image: /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_gcstress0xc_tst/bin/tests/Linux.arm.Checked/Tests/Core_Root/corerun\r\n11:36:45         \r\n11:36:45         /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_gcstress0xc_tst/bin/tests/Linux.arm.Checked/GC/Coverage/LargeObjectAlloc2/LargeObjectAlloc2.sh: line 244: 28988 Aborted                 $_DebuggerFullPath \"$CORE_ROOT/corerun\" $ExePath $CLRTestExecutionArguments\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/21581","RelatedDescription":"Open issue \"[Linux/arm32] GCStress=C assert: \"(m_pStartFrame != NULL) || (m_flags & POPFRAMES) || (m_pRealStartFrame == m_pThread->GetFrame()) || (bRedirectedPinvoke)\"\" (#21581)"},{"Id":"391922198","IsPullRequest":true,"CreatedAt":"2018-12-18T16:35:40","Actor":"BruceForstall","Number":"21571","RawContent":null,"Title":"Disable GitHub_19361 for Linux arm32","State":"closed","Body":"It currently times out and fails on Debug.\r\n\r\nTracking: #20232","Url":"https://github.com/dotnet/coreclr/pull/21571","RelatedDescription":"Closed or merged PR \"Disable GitHub_19361 for Linux arm32\" (#21571)"},{"Id":"392018090","IsPullRequest":false,"CreatedAt":"2018-12-18T16:31:52","Actor":"AriNuer","Number":"21577","RawContent":null,"Title":"[arm64/linux] System.Threading.Tasks.Tests.AsyncTaskMethodBuilderTests.AsyncMethodsDropsStateMachineAndExecutionContextUponCompletion failed with System.TimeoutException","State":"closed","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs8_tst/66/\r\n**Failed test:**\r\nSystem.Threading.Tasks.Tests.AsyncTaskMethodBuilderTests.AsyncMethodsDropsStateMachineAndExecutionContextUponCompletion\r\n\r\n**Failed log:**\r\n```\r\n~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs8_tst/_/fx/artifacts/bin/tests/System.Threading.Tasks.Tests/netcoreapp-Linux-Release-arm64 ~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs8_tst/_/fx/artifacts/bin/tests/System.Threading.Tasks.Tests/netcoreapp-Linux-Release-arm64\r\n[37m  Discovering: System.Threading.Tasks.Tests (method display = ClassAndMethod, method display options = None)\r\n[m[37m  Discovered:  System.Threading.Tasks.Tests (found 530 of 706 test cases)\r\n[m[37m  Starting:    System.Threading.Tasks.Tests (parallel test collections = on, max threads = 46)\r\n[m[33;1m    System.Threading.Tasks.Tests.TaskSchedulerTests.GetTaskSchedulersForDebugger_DebuggerAttached_ReturnsAllSchedulers [SKIP]\r\n[m[37m      Condition(s) not met: \"DebuggerIsAttached\"\r\n[m[33;1m    System.Threading.Tasks.Tests.TaskSchedulerTests.GetScheduledTasksForDebugger_DebuggerAttached_ReturnsTasksFromCustomSchedulers [SKIP]\r\n[m[37m      Condition(s) not met: \"DebuggerIsAttached\"\r\n[m[31;1m    System.Threading.Tasks.Tests.AsyncTaskMethodBuilderTests.AsyncMethodsDropsStateMachineAndExecutionContextUponCompletion [FAIL]\r\n[m[37m      System.TimeoutException : Task timed out after 60000ms\r\n[m[30;1m      Stack Trace:\r\n[m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs8/_/fx/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(54,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter[TResult](Task`1 task, Int32 millisecondsTimeout)\r\n[m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs8/_/fx/src/System.Threading.Tasks/tests/System.Runtime.CompilerServices/AsyncTaskMethodBuilderTests.cs(564,0): at System.Threading.Tasks.Tests.AsyncTaskMethodBuilderTests.AsyncMethodsDropsStateMachineAndExecutionContextUponCompletion()\r\n[m[37m        --- End of stack trace from previous location where exception was thrown ---\r\n[m[37m  Finished:    System.Threading.Tasks.Tests\r\n[m[37m=== TEST EXECUTION SUMMARY ===\r\n[m[37m   System.Threading.Tasks.Tests  Total: 635, Errors: 0, Failed: 1, Skipped: 2, Time: 87.805s\r\n[m[m~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs8_tst/_/fx/artifacts/bin/tests/System.Threading.Tasks.Tests/netcoreapp-Linux-Release-arm64\r\n----- end 15:21:35 ----- exit code 1 ----------------------------------------------------------\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21577","RelatedDescription":"Closed issue \"[arm64/linux] System.Threading.Tasks.Tests.AsyncTaskMethodBuilderTests.AsyncMethodsDropsStateMachineAndExecutionContextUponCompletion failed with System.TimeoutException\" (#21577)"},{"Id":"392147162","IsPullRequest":true,"CreatedAt":"2018-12-18T13:03:28","Actor":"dotnet-maestro[bot]","Number":"21580","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18617.7\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/21580","RelatedDescription":"Open PR \"Update dependency files\" (#21580)"},{"Id":"392087142","IsPullRequest":false,"CreatedAt":"2018-12-18T10:21:05","Actor":"albahari","Number":"21579","RawContent":null,"Title":"StackOverflowException fires ICorDebug Exception callback only if on main thread","State":"open","Body":"Tested on Windows with .NET Core 2.2 and  3.0.100-preview-009812\r\n\r\nWhen a StackOverflowException or other program-terminating exception is thrown on a worker thread, it cannot be debugged because ICorDebugManagedCallback2 does not fire the Exception callback. \r\n\r\nYou can reproduce this in Visual Studio as follows:\r\n\r\n```\r\nclass Program\r\n{\r\n    static void Main (string[] args)\r\n    {\r\n        new Thread (() => Foo ()).Start ();\r\n        Console.ReadLine ();\r\n    }\r\n\r\n    static void Foo() => Foo ();\r\n}\r\n```\r\n\r\nWhen running with the VS debugger, the process terminates and no exception dialog appears.\r\n\r\nThe problem is worse in LINQPad because all query code runs on a worker thread.","Url":"https://github.com/dotnet/coreclr/issues/21579","RelatedDescription":"Open issue \"StackOverflowException fires ICorDebug Exception callback only if on main thread\" (#21579)"},{"Id":"392027408","IsPullRequest":false,"CreatedAt":"2018-12-18T07:24:27","Actor":"dotnet-mc-bot","Number":"21578","RawContent":null,"Title":"Test failure: Loader_classloader._TypeInitialization_CctorsWithSideEffects_UntrustedCodeBFI_UntrustedCodeBFI_/_TypeInitialization_CctorsWithSideEffects_UntrustedCodeBFI_UntrustedCodeBFI_cmd","State":"open","Body":"Opened on behalf of @AriNuer\n\nThe test `Loader_classloader._TypeInitialization_CctorsWithSideEffects_UntrustedCodeBFI_UntrustedCodeBFI_/_TypeInitialization_CctorsWithSideEffects_UntrustedCodeBFI_UntrustedCodeBFI_cmd` has failed.\n\nFailure Message:\n```\nError: Could not load file or assembly 'System.Security.AccessControl, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.\n (Exception from HRESULT: 0x80070002)\nError compiling UntrustedCodeBFI.org: Could not find or load a specific file. (Exception from HRESULT: 0x80131621)\nError: compilation failed for \\\"UntrustedCodeBFI.org\\\" (0x80131621)\n\n\nReturn code:      1\nRaw output file:      /home/helixbot/dotnetbuild/work/e51ced19-9fa8-434e-8ad4-0ac50f70b4a1/Work/54a49b55-2ee7-46b3-95f3-109c77820d45/Unzip/Reports\\\\Loader.classloader\\\\TypeInitialization\\\\CctorsWithSideEffects\\\\UntrustedCodeBFI\\\\UntrustedCodeBFI.output.txt\nRaw output:\nBEGIN EXECUTION\nin takeLock\n/home/helixbot/dotnetbuild/work/e51ced19-9fa8-434e-8ad4-0ac50f70b4a1/Payload/crossgen /Platform_Assemblies_Paths /home/helixbot/dotnetbuild/work/e51ced19-9fa8-434e-8ad4-0ac50f70b4a1/Payload:/home/helixbot/dotnetbuild/work/e51ced19-9fa8-434e-8ad4-0ac50f70b4a1/Work/54a49b55-2ee7-46b3-95f3-109c77820d45/Unzip/TypeInitialization/CctorsWithSideEffects/UntrustedCodeBFI/IL:/home/helixbot/dotnetbuild/work/e51ced19-9fa8-434e-8ad4-0ac50f70b4a1/Work/54a49b55-2ee7-46b3-95f3-109c77820d45/Unzip/TypeInitialization/CctorsWithSideEffects/UntrustedCodeBFI /in UntrustedCodeBFI.org /out UntrustedCodeBFI.exe\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nCrossgen failed with exitcode: 33\nin ReleaseLock\nTest Harness Exitcode is : 1\n\nTo run the test:\n> set CORE_ROOT=/home/helixbot/dotnetbuild/work/e51ced19-9fa8-434e-8ad4-0ac50f70b4a1/Payload\n> /home/helixbot/dotnetbuild/work/e51ced19-9fa8-434e-8ad4-0ac50f70b4a1/Work/54a49b55-2ee7-46b3-95f3-109c77820d45/Unzip/TypeInitialization/CctorsWithSideEffects/UntrustedCodeBFI/UntrustedCodeBFI.sh\n\nExpected: True\nActual:   False\n```\n\nStack Trace:\n```\n   at Loader_classloader._TypeInitialization_CctorsWithSideEffects_UntrustedCodeBFI_UntrustedCodeBFI_._TypeInitialization_CctorsWithSideEffects_UntrustedCodeBFI_UntrustedCodeBFI_cmd() in E:\\A\\_work\\168\\s\\bin\\tests\\Windows_NT.x64.Release\\TestWrappers\\Loader.classloader\\Loader.classloader.XUnitWrapper.cs:line 134021\n```\n\nBuild : 3.0 - 20181218.01 (Core Tests)\nFailing configurations:\n- Ubuntu.1804.Amd64-x64\n  - \nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fcoreclr~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20181218.01/workItem/Loader.classloader.XUnitWrapper/analysis/xunit/Loader_classloader._TypeInitialization_CctorsWithSideEffects_UntrustedCodeBFI_UntrustedCodeBFI_~2F_TypeInitialization_CctorsWithSideEffects_UntrustedCodeBFI_UntrustedCodeBFI_cmd","Url":"https://github.com/dotnet/coreclr/issues/21578","RelatedDescription":"Open issue \"Test failure: Loader_classloader._TypeInitialization_CctorsWithSideEffects_UntrustedCodeBFI_UntrustedCodeBFI_/_TypeInitialization_CctorsWithSideEffects_UntrustedCodeBFI_UntrustedCodeBFI_cmd\" (#21578)"},{"Id":"392016876","IsPullRequest":false,"CreatedAt":"2018-12-18T06:40:21","Actor":"AriNuer","Number":"21576","RawContent":null,"Title":"[Linux/arm64] System.Net.Sockets.Tests.SendReceive.ReceiveIovMaxUdp_SuccessOrMessageSize failures","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs4_tst/64/testReport/\r\n**Failed test:**\r\n System.Net.Sockets.Tests.SendReceive.ReceiveIovMaxUdp_SuccessOrMessageSize\r\n\r\n**Failed log:**\r\n```\r\n~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs4_tst/_/fx/artifacts/bin/tests/System.Net.Sockets.Tests/netcoreapp-Linux-Release-arm64 ~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs4_tst/_/fx/artifacts/bin/tests/System.Net.Sockets.Tests/netcoreapp-Linux-Release-arm64\r\n[37m  Discovering: System.Net.Sockets.Tests (method display = ClassAndMethod, method display options = None)\r\n[m[37m  Discovered:  System.Net.Sockets.Tests (found 688 of 1052 test cases)\r\n[m[37m  Starting:    System.Net.Sockets.Tests (parallel test collections = on, max threads = 46)\r\n[m[33;1m    System.Net.Sockets.Tests.KeepAliveTest.Socket_KeepAlive_RetryCount_Failure [SKIP]\r\n[m[37m      Condition(s) not met: \"IsWindowsBelow1703\"\r\n[m[33;1m    System.Net.Sockets.Tests.UnixDomainSocketTest.Socket_CreateUnixDomainSocket_Throws_OnWindows [SKIP]\r\n[m[37m      Condition(s) not met: \"IsSubWindows10\"\r\n[m[31;1m    System.Net.Sockets.Tests.SendReceive.ReceiveIovMaxUdp_SuccessOrMessageSize [FAIL]\r\n[m[37m      Assert.True() Failure\r\n[m[37m      Expected: True\r\n[m[37m      Actual:   False\r\n[m[30;1m      Stack Trace:\r\n[m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs4/_/fx/src/System.Net.Sockets/tests/FunctionalTests/SendReceive.cs(1104,0): at System.Net.Sockets.Tests.SendReceive.ReceiveIovMaxUdp_SuccessOrMessageSize()\r\n[m[37m        --- End of stack trace from previous location where exception was thrown ---\r\n[m[33;1m    System.Net.Sockets.Tests.CreateSocket.Ctor_Raw_Success [SKIP]\r\n[m[37m      Condition(s) not met: \"SupportsRawSockets\"\r\n[m[33;1m   System.Net.Sockets.Tests: [Long Running Test] 'System.Net.Sockets.Tests.NetworkStreamTest.ReadWrite_Memory_LargeWrite_Success', Elapsed: 00:02:07\r\n[m[37m  Finished:    System.Net.Sockets.Tests\r\n[m[37m=== TEST EXECUTION SUMMARY ===\r\n[m[37m   System.Net.Sockets.Tests  Total: 877, Errors: 0, Failed: 1, Skipped: 3, Time: 244.718s\r\n[m[m~/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_jitstressregs4_tst/_/fx/artifacts/bin/tests/System.Net.Sockets.Tests/netcoreapp-Linux-Release-arm64\r\n----- end 16:20:30 ----- exit code 1 ----------------------------------------------------------\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21576","RelatedDescription":"Open issue \"[Linux/arm64] System.Net.Sockets.Tests.SendReceive.ReceiveIovMaxUdp_SuccessOrMessageSize failures\" (#21576)"},{"Id":"391811388","IsPullRequest":true,"CreatedAt":"2018-12-18T06:23:13","Actor":"sywhang","Number":"21566","RawContent":null,"Title":"Add .NET Core version to EventLog","State":"closed","Body":"Address https://github.com/dotnet/coreclr/issues/21563\r\n\r\nExample output:\r\n![eventlogfix](https://user-images.githubusercontent.com/30421794/50103493-94a84780-01dc-11e9-9a57-ee2e3a8b69d2.jpg)\r\n","Url":"https://github.com/dotnet/coreclr/pull/21566","RelatedDescription":"Closed or merged PR \"Add .NET Core version to EventLog\" (#21566)"},{"Id":"392003431","IsPullRequest":true,"CreatedAt":"2018-12-18T05:34:15","Actor":"odhanson","Number":"21575","RawContent":null,"Title":"Added support for debugging a sandboxed app on Mac","State":"open","Body":"#### Description\r\nThis change fixes the usage of IPC while debugging and running in a sandbox. When running in a sandbox, the temporary folder for each process will be different. Thus the pipes being created in TwoWayPipe right now would be created in different directories in the debugger process and the process being debugged.\r\nThis change configures the folder to be used based on the application group ID that the sandboxed app belongs to.\r\nFor the same reasons, the names semaphores being used to synchronize the debugger attach need to be prefixed with the application group ID. This change was abit more involved since the name of the semaphore is limited to 31 characters, so we had to encode the semaphore names differently to make them shorter.\r\n\r\nLast, new APIs to the debugger shim were added to support this new feature. This change only handles the runtime side and the dbgshim. An additional change to vsdbg needs to be done to use the new APIs.\r\n\r\nBackports: 5b687cf517\r\n\r\n#### Customer Impact\r\nWithout this change, its impossible to debug a .netcore application hosted inside a sandboxed application on Mac. This change is needed to support some projects that depend on 2.2\r\n\r\n#### Regression?\r\nNo\r\n\r\n#### Risk\r\nOther than a refactor, the existing codepath for non sandboxed scenarios was not changed. The API is completely backwards compatible. Both manual tests on all platforms was done and in addition the automated diagnostics tests are being run against a private build of this branch.","Url":"https://github.com/dotnet/coreclr/pull/21575","RelatedDescription":"Open PR \"Added support for debugging a sandboxed app on Mac\" (#21575)"},{"Id":"391811334","IsPullRequest":true,"CreatedAt":"2018-12-18T04:44:25","Actor":"Dotnet-GitSync-Bot","Number":"21565","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @StanislavUshakov","Url":"https://github.com/dotnet/coreclr/pull/21565","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#21565)"},{"Id":"391942653","IsPullRequest":true,"CreatedAt":"2018-12-18T01:28:17","Actor":"BruceForstall","Number":"21574","RawContent":null,"Title":"Add dotnet info to PMI asm diffs output","State":"closed","Body":"This might help diagnose issues.","Url":"https://github.com/dotnet/coreclr/pull/21574","RelatedDescription":"Closed or merged PR \"Add dotnet info to PMI asm diffs output\" (#21574)"},{"Id":"391931548","IsPullRequest":true,"CreatedAt":"2018-12-18T01:25:16","Actor":"BruceForstall","Number":"21572","RawContent":null,"Title":"Disable System.Runtime.Tests for Linux arm64 corefx tests","State":"closed","Body":"Failure with System.Tests.ExceptionTests.ThrowStatementDoesNotResetExceptionStackLineOtherMethod\r\nin JitStress=2.\r\n\r\nTracking: #21223","Url":"https://github.com/dotnet/coreclr/pull/21572","RelatedDescription":"Closed or merged PR \"Disable System.Runtime.Tests for Linux arm64 corefx tests\" (#21572)"},{"Id":"391890905","IsPullRequest":true,"CreatedAt":"2018-12-18T00:50:55","Actor":"jkoritzinsky","Number":"21569","RawContent":null,"Title":"Add tests for marshalling a System.Drawing.Color.","State":"closed","Body":"Add tests for marshalling a `System.Drawing.Color` object to an `OLE_COLOR` value in COM marshalling scenarios.","Url":"https://github.com/dotnet/coreclr/pull/21569","RelatedDescription":"Closed or merged PR \"Add tests for marshalling a System.Drawing.Color.\" (#21569)"},{"Id":"391909474","IsPullRequest":true,"CreatedAt":"2018-12-17T22:06:10","Actor":"jkoritzinsky","Number":"21570","RawContent":null,"Title":"[WIP, PR for Personal Review] Template implementation of GCProtect","State":"open","Body":"Out of curiosity, I decided to see if I could convert the GCPROTECT_* family of macros into templated functions. I was able to do so with C++17 language features.\r\n\r\nAdditionally, with an `-O2` optimization level, the generated assembly is identical if not better than the assembly for the currently generated code.\r\n\r\nI've converted over a few of the usages of `GCPROTECT_*` so far as examples in this PR.\r\n\r\n@davidwrighton we talked about this a few weeks back. Though you might want to take a look.","Url":"https://github.com/dotnet/coreclr/pull/21570","RelatedDescription":"Open PR \"[WIP, PR for Personal Review] Template implementation of GCProtect\" (#21570)"},{"Id":"392418176","IsPullRequest":false,"CreatedAt":"2018-12-17T20:54:35","Actor":"Anipik","Number":"21594","RawContent":null,"Title":"Regression in AsSpan for uint[] Datatype","State":"open","Body":"Netcoreapp 3.0\r\nSdk Version 3.0.100-preview-009841\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.17134.471 (1803/April2018Update/Redstone4)\r\nIntel Xeon CPU E5-1650 v4 3.60GHz, 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.0.100-alpha1-009630\r\n  [Host]     : .NET Core 3.0.0-preview1-26928-03 (CoreCLR 4.6.26927.03, CoreFX 4.6.26927.03), 64bit RyuJIT\r\n  Job-TQETEJ : .NET Core 3.0.0-preview1-26928-03 (CoreCLR 4.6.26927.03, CoreFX 4.6.26927.03), 64bit RyuJIT\r\n\r\nBuildConfiguration=Release-Intrinsics  Toolchain=netcoreapp3.0  InvocationCount=1  \r\nMaxIterationCount=20  UnrollFactor=1  WarmupCount=1  \r\n\r\n```\r\n|                 Method |     Mean |     Error |    StdDev |    Median | Extra Metric |\r\n|----------------------- |---------:|----------:|----------:|----------:|-------------:|\r\n| AsSpanForUnitBenchmark | 1.445 us | 0.8379 us | 0.9649 us | 0.8400 us |            - |\r\n\r\nSdk version 2.1.401\r\nNetcoreapp2.1\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.17134.471 (1803/April2018Update/Redstone4)\r\nIntel Xeon CPU E5-1650 v4 3.60GHz, 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.0.100-alpha1-009630\r\n  [Host]     : .NET Core 2.1.6 (CoreCLR 4.6.27019.06, CoreFX 4.6.27019.05), 64bit RyuJIT\r\n  Job-JARWGC : .NET Core 2.1.6 (CoreCLR 4.6.27019.06, CoreFX 4.6.27019.05), 64bit RyuJIT\r\n\r\nBuildConfiguration=Release  Toolchain=netcoreapp2.1  InvocationCount=1  \r\nMaxIterationCount=20  UnrollFactor=1  WarmupCount=1  \r\n\r\n```\r\n|                 Method |     Mean |    Error |   StdDev |   Median | Extra Metric |\r\n|----------------------- |---------:|---------:|---------:|---------:|-------------:|\r\n| AsSpanForUnitBenchmark | 48.75 ns | 29.60 ns | 29.07 ns | 65.00 ns |            - |\r\n\r\nThe code for this benchmark is\r\n``` C#\r\n\r\npublic uint[] input;\r\npublic int end;\r\n\r\n [IterationSetup(Target = nameof(AsSpanForUnitBenchmark))]\r\npublic void setup()\r\n {\r\n       int min = 0;\r\n        int max = 100000;\r\n       Random randNum = new Random();\r\n       end = randNum.Next(min, max);\r\n\r\n        input = new uint[max]\r\n       for (int i = 0; i < input.Length; i++)\r\n        {\r\n               input[i] = (uint)randNum.Next(min, max);\r\n        }\r\n}\r\n\r\n[Benchmark]\r\npublic void AsSpanForUnitBenchmark()\r\n{\r\n    input.AsSpan(0, end);\r\n}\r\n```\r\n\r\ncc @danmosemsft @adamsitnik @GrabYourPitchforks \r\n","Url":"https://github.com/dotnet/coreclr/issues/21594","RelatedDescription":"Open issue \"Regression in AsSpan for uint[] Datatype\" (#21594)"},{"Id":"391854438","IsPullRequest":true,"CreatedAt":"2018-12-17T19:20:42","Actor":"echesakovMSFT","Number":"21568","RawContent":null,"Title":"Use Alpine container with Node.js in Azure DevOps","State":"open","Body":"Use an alpine container with node built from source (microsoft/dotnet-buildtools-prereqs:alpine-3.6-WithNode-f4d3fe3-2018121300501)\r\n\r\nTesting in https://dnceng.visualstudio.com/public/_build/results?buildId=59687\r\n/cc: @safern ","Url":"https://github.com/dotnet/coreclr/pull/21568","RelatedDescription":"Open PR \"Use Alpine container with Node.js in Azure DevOps\" (#21568)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"392432051","IsPullRequest":false,"CreatedAt":"2018-12-19T04:02:22","Actor":"aaronlcope","Number":"10493","RawContent":null,"Title":"dotnet build-server shutdown won't stop dotnet.exe during tests","State":"open","Body":"## Steps to reproduce\r\n(inside a shell script)\r\ndotnet test /nodereuse:false\r\n\r\nCtrl-C to exit build. \r\nCtrl-C is trapped on user entry (snippet from shell script)\r\ntrap \"trap_ctrlc\" 2\r\nfunction trap_ctrlc ()\r\n{\r\n    dotnet build-server shutdown --msbuild --razor --vbcscompiler\r\n    # where is the option for tests? --test\r\n    # IMPORTANT: my project uses xunit\r\n    exit 2\r\n}\r\n\r\n## Expected  behavior\r\nI would think that the tests run under msbuild...which, if you cancel during the middle of tests, the shutdown of the build server should kill the associated dotnet.exe processes, but it doesn't. I try to build again w/out shutting those processes down and the build fails b/c the dll is in use (by one or both of the orphaned dotnet.exe processes). As soon as I manually kill the orphaned dotnet.exe processes in task manager, I can then build again.\r\n\r\n## Actual behavior\r\nIf I cancel (Ctrl-C) prior to the tests starting, the build server shuts down all the dotnet.exe processes properly. The only orphaned dotnet.exe processes left around on cancellation of the shell script is whenever I interrupt the script while the xunit test runner is running.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview1-002702 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003121 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.0-rc2-3002702 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10493","RelatedDescription":"Open issue \"dotnet build-server shutdown won't stop dotnet.exe during tests\" (#10493)"},{"Id":"392369304","IsPullRequest":false,"CreatedAt":"2018-12-18T22:51:18","Actor":"richlander","Number":"10492","RawContent":null,"Title":"Cannot use `dotnet new` to target older runtimes","State":"open","Body":"I have both .NET Core 3 Preview 1 and .NET Core 2.2 SDKs installed. I want to do this:\r\n\r\n```console\r\ndotnet new console --framework netcoreapp2.2 -o app22\r\n```\r\nIt doesn't work. I'm not happy using global.json for this scenario. I should be able to target any .NET Core version that I want. If that version isn't supported on my machine currently, I should get instructions on what to do.\r\n\r\nSomething like this: https://github.com/dotnet/templating/blob/master/README.md#info-for-dotnet-new-users ","Url":"https://github.com/dotnet/cli/issues/10492","RelatedDescription":"Open issue \"Cannot use `dotnet new` to target older runtimes\" (#10492)"},{"Id":"392340749","IsPullRequest":true,"CreatedAt":"2018-12-18T21:21:03","Actor":"vitek-karas","Number":"10491","RawContent":null,"Title":"Improve --roll-forward-on-no-candidate-fx usage text.","State":"open","Body":"Make it explicit that the --roll-forward-on-no-candidate-fx options requires a value. Modify the description since the argument sets the behavior (it doesn't just enable it, it can also disable and so on).\r\n\r\nRelated to dotnet/core-setup#4873","Url":"https://github.com/dotnet/cli/pull/10491","RelatedDescription":"Open PR \"Improve --roll-forward-on-no-candidate-fx usage text.\" (#10491)"},{"Id":"392147416","IsPullRequest":true,"CreatedAt":"2018-12-18T18:06:19","Actor":"dotnet-maestro[bot]","Number":"10489","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10489","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10489)"},{"Id":"392147458","IsPullRequest":true,"CreatedAt":"2018-12-18T17:44:43","Actor":"dotnet-maestro[bot]","Number":"10490","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18617.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10490","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10490)"},{"Id":"392005502","IsPullRequest":true,"CreatedAt":"2018-12-18T05:45:15","Actor":"flcdrg","Number":"10488","RawContent":null,"Title":"dotnet-install.ps1 - Only modify PATH if necessary","State":"open","Body":"Implements #10487\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10488","RelatedDescription":"Open PR \"dotnet-install.ps1 - Only modify PATH if necessary\" (#10488)"},{"Id":"392001609","IsPullRequest":false,"CreatedAt":"2018-12-18T05:24:25","Actor":"flcdrg","Number":"10487","RawContent":null,"Title":"dotnet-install.ps1 always modifies PATH","State":"open","Body":"## Steps to reproduce\r\n\r\nRun dotnet-install.ps1 more than once\r\n\r\n## Expected  behavior\r\n\r\nOnly one instance of \"C:\\Users\\David\\AppData\\Local\\Microsoft\\dotnet\" exists in PATH\r\n\r\n## Actual behavior\r\n\r\nPATH contains multiple references to the same directory\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10487","RelatedDescription":"Open issue \"dotnet-install.ps1 always modifies PATH\" (#10487)"},{"Id":"391959966","IsPullRequest":false,"CreatedAt":"2018-12-18T01:34:42","Actor":"wli3","Number":"10486","RawContent":null,"Title":"Block --interactive and --verbose:quiet","State":"open","Body":"only warning and error will show. So the output of `--interactive` will not be printed. Need to consider where to implement this, MSBuild or CLI","Url":"https://github.com/dotnet/cli/issues/10486","RelatedDescription":"Open issue \"Block --interactive and --verbose:quiet\" (#10486)"},{"Id":"391940539","IsPullRequest":true,"CreatedAt":"2018-12-18T00:01:08","Actor":"dotnet-bot","Number":"10485","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10485","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10485)"},{"Id":"391911957","IsPullRequest":false,"CreatedAt":"2018-12-17T22:14:07","Actor":"allanrodriguez","Number":"10484","RawContent":null,"Title":"NETSDK1007 error when building solution with ProjectReference tags in specific order","State":"open","Body":"## Steps to reproduce\r\n1. Build the [attached solution](https://github.com/dotnet/cli/files/2688002/NetSdk1007.zip). It should build successfully.\r\n2. In the NetSdk1007/NetSdk1007.csproj file, switch the position of the two ProjectReference tags such that they look like this:\r\n```\r\n<ItemGroup>\r\n  <ProjectReference Include=\"..\\Dependency.Mocks\\Dependency.Mocks.csproj\" />\r\n  <ProjectReference Include=\"..\\LibraryUnderTest\\LibraryUnderTest.csproj\" />\r\n</ItemGroup>\r\n```\r\n3. Rebuild the solution using `dotnet build --no-incremental`.\r\n\r\n## Expected  behavior\r\nThe solution should build successfully for the .NET Core 2.1 and .NET Framework 4.7.1 platforms as in step 1.\r\n\r\n## Actual behavior\r\nBuilding the solution fails with the error `NETSDK1007: Cannot find project info for 'C:\\Projects\\NetSdk1007\\Dependency\\Dependency.csproj'. This can indicate a missing project reference.` The .NET Core build fails but the .NET Framework build succeeds.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.502\r\n Commit:    c74ce8f29f\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.502\\\r\n\r\nHost (useful for support):\r\n\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:`\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```","Url":"https://github.com/dotnet/cli/issues/10484","RelatedDescription":"Open issue \"NETSDK1007 error when building solution with ProjectReference tags in specific order\" (#10484)"},{"Id":"391702774","IsPullRequest":true,"CreatedAt":"2018-12-17T16:55:36","Actor":"dotnet-maestro[bot]","Number":"10483","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18616.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10483","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10483)"},{"Id":"391702745","IsPullRequest":true,"CreatedAt":"2018-12-17T16:55:24","Actor":"dotnet-maestro[bot]","Number":"10482","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18616.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10482","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10482)"},{"Id":"391562210","IsPullRequest":false,"CreatedAt":"2018-12-17T16:40:14","Actor":"John0King","Number":"10480","RawContent":null,"Title":"`dotnet build /p:myproperty=value`  not always set property and no `dotnet run /p:property=value`","State":"closed","Body":"## Steps to reproduce\r\n1. create a console project \r\n```csproj\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <DefineConstants Condition=\" '$(XXX)' == '1'\">X1</DefineConstants>\r\n    <DefineConstants Condition=\" '$(XXX)' == '2'\">X2</DefineConstants>\r\n    <DefineConstants Condition=\" '$(XXX)' == '3'\">X3</DefineConstants>\r\n  </PropertyGroup>\r\n  <Target Name=\"LogMyX\" BeforeTargets=\"Build\">\r\n    <Message Importance=\"high\" Text=\"'MyLogX $(XXX)'\" />\r\n  </Target>\r\n  <Target Name=\"LogMyXX\" AfterTargets=\"Build\">\r\n    <Message Importance=\"high\" Text=\"'MyLogX $(XXX)'\" />\r\n  </Target>\r\n</Project>\r\n```\r\n2. create a .cs file \r\n```C#\r\nclass Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n#if X1 \r\n            Console.WriteLine(\"Hello X1!\");\r\n#elif X2\r\n            Console.WriteLine(\"Hello X2!\");\r\n#elif X3\r\n            Console.WriteLine(\"Hello X3!\");\r\n#endif\r\n        }\r\n    }\r\n```\r\n## Expected  behavior\r\n`dotnet build /p:xxx=1`  =>compile log:\"MyLogX 1\"=>(run)  => \"Hello X1\"\r\n`dotnet build /p:xxx=2`  =>compile log:\"MyLogX 2\"=>(run)  => \"Hello X2\"\r\n`dotnet build /p:xxx=3`  =>compile log:\"MyLogX 3\"=>(run)  => \"Hello X3\"\r\n\r\n## Actual behavior\r\n`dotnet build /p:xxx=1`  =>compile log:\"MyLogX 1\"=>(run)  => \"Hello X1\"\r\n`dotnet build /p:xxx=2`  =>compile log:\"MyLogX 2\"=>(run)  => \"Hello X1\"\r\n`dotnet build /p:xxx=3`  =>compile log:\"MyLogX 3\"=>(run)  => \"Hello X1\"\r\n\r\n**I must use `dotnet clean` before `dotnet build`  or save the csproj file again**\r\n\r\nand I can not use `dotnet run /p:xxx=1`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   2.1.502\r\n Commit:    c74ce8f29f\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.502\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10480","RelatedDescription":"Closed issue \"`dotnet build /p:myproperty=value`  not always set property and no `dotnet run /p:property=value`\" (#10480)"},{"Id":"391694348","IsPullRequest":false,"CreatedAt":"2018-12-17T16:36:11","Actor":"mmisztal1980","Number":"10481","RawContent":null,"Title":"dotnet restore hangs on a TFS build agent","State":"closed","Body":"## Steps to reproduce\r\nHere's our build log obtained with **dotnet restore -v diag**\r\nhttps://gist.github.com/mmisztal1980/6ce8e016da620efbf0aa4693d4bc85b9\r\n\r\n## Expected  behavior\r\nWe expect our build agent to complete this step (TFS dotnet task  v2.*, targeting **/*.csproj (linked by default))\r\n\r\n## Actual behavior\r\nThe build appears to hang after iterating over the last project in the **/*.csproj.\r\nThe last target appears to be **_GenerateRestoreProjectPathWalk** \r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\noctopus@build14:~/agent/_work/1/s/src$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.500\r\n Commit:    b68b931422\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.500/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n\r\nWe'd apreciate some information how to diagnose this situation as we do not see any errors. This behavior has been observed in the master and feature branches of our repo.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10481","RelatedDescription":"Closed issue \"dotnet restore hangs on a TFS build agent\" (#10481)"},{"Id":"391412591","IsPullRequest":false,"CreatedAt":"2018-12-17T01:39:35","Actor":"AArnott","Number":"10477","RawContent":null,"Title":"dotnet.exe claims `--roll-forward-on-no-candidate-fx` switch exists, but denies that if you use it","State":"closed","Body":"The dotnet CLI tool documents that a `--roll-forward-on-no-candidate-fx` switch exists:\r\n\r\n```\r\ndotnet -h\r\n.NET Core SDK (3.0.100-preview-009812)\r\nUsage: dotnet [runtime-options] [path-to-application] [arguments]\r\n\r\nExecute a .NET Core application.\r\n\r\nruntime-options:\r\n  --additionalprobingpath <path>     Path containing probing policy and assemblies to probe for.\r\n  --additional-deps <path>           Path to additional deps.json file.\r\n  --fx-version <version>             Version of the installed Shared Framework to use to run the application.\r\n  --roll-forward-on-no-candidate-fx  Roll forward on no candidate shared framework is enabled.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\n```\r\n\r\nBut when I use it, it denies that it's a valid switch, and follows up with usage docs that once again repeat that it *does* exist.\r\n\r\n## Expected  behavior\r\n\r\nI expect it to run like it does without the switch:\r\n\r\n```\r\ndotnet D:\\git\\Nerdbank.GitVersioning\\src\\nerdbank-gitversioning.npm\\out\\nbgv.cli\\tools\\netcoreapp2.1\\any\\nbgv.dll get-version\r\nVersion:                      2.3.41.20022\r\nAssemblyVersion:              2.3.41.20022\r\nAssemblyInformationalVersion: 2.3.41+364e6d9de7\r\nNuGet package Version:        2.3.41-g364e6d9de7\r\nNPM package Version:          2.3.41-364e6d9de7\r\n```\r\n\r\n## Actual behavior\r\n\r\nIt fails, claiming the switch isn't recognized:\r\n\r\n```\r\ndotnet --roll-forward-on-no-candidate-fx D:\\git\\Nerdbank.GitVersioning\\src\\nerdbank-gitversioning.npm\\out\\nbgv.cli\\tools\\netcoreapp2.1\\any\\nbgv.dll get-version\r\nUnknown option: --roll-forward-on-no-candidate-fx\r\n.NET Core SDK (3.0.100-preview-009812)\r\nUsage: dotnet [runtime-options] [path-to-application] [arguments]\r\n\r\nExecute a .NET Core application.\r\n\r\nruntime-options:\r\n  --additionalprobingpath <path>     Path containing probing policy and assemblies to probe for.\r\n  --additional-deps <path>           Path to additional deps.json file.\r\n  --fx-version <version>             Version of the installed Shared Framework to use to run the application.\r\n  --roll-forward-on-no-candidate-fx  Roll forward on no candidate shared framework is enabled.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\n\r\nUsage: dotnet [sdk-options] [command] [command-options] [arguments]\r\n\r\nExecute a .NET Core SDK command.\r\n\r\nsdk-options:\r\n  -d|--diagnostics  Enable diagnostic output.\r\n  -h|--help         Show command line help.\r\n  --info            Display .NET Core information.\r\n  --list-runtimes   Display the installed runtimes.\r\n  --list-sdks       Display the installed SDKs.\r\n  --version         Display .NET Core SDK version in use.\r\n\r\nSDK commands:\r\n  add               Add a package or reference to a .NET project.\r\n  build             Build a .NET project.\r\n  build-server      Interact with servers started by a build.\r\n  clean             Clean build outputs of a .NET project.\r\n  help              Show command line help.\r\n  list              List project references of a .NET project.\r\n  migrate           Migrate a project.json project to an MSBuild project.\r\n  msbuild           Run Microsoft Build Engine (MSBuild) commands.\r\n  new               Create a new .NET project or file.\r\n  nuget             Provides additional NuGet commands.\r\n  pack              Create a NuGet package.\r\n  publish           Publish a .NET project for deployment.\r\n  remove            Remove a package or reference from a .NET project.\r\n  restore           Restore dependencies specified in a .NET project.\r\n  run               Build and run a .NET project output.\r\n  sln               Modify Visual Studio solution files.\r\n  store             Store the specified assemblies in the runtime package store.\r\n  test              Run unit tests using the test runner specified in a .NET project.\r\n  tool              Install or manage tools that extend the .NET experience.\r\n  vstest            Run Microsoft Test Engine (VSTest) commands.\r\n\r\nAdditional commands from bundled tools:\r\n  dev-certs         Create and manage development certificates.\r\n  ef                Entity Framework Core command-line tools.\r\n  sql-cache         SQL Server cache command-line tools.\r\n  user-secrets      Manage development user secrets.\r\n  watch             Start a file watcher that runs a command when files change.\r\n\r\nRun 'dotnet [command] --help' for more information on a command.\r\n```\r\n\r\n## Environment data\r\n\r\n```\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400-preview-009063 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400-preview-009088 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400-preview-009171 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009266 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009297 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009324 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009335 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009398 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009404 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009431 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009648 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0-preview3-35364 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0-preview3-35364 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5-servicing-26911-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0-preview3-27001-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10477","RelatedDescription":"Closed issue \"dotnet.exe claims `--roll-forward-on-no-candidate-fx` switch exists, but denies that if you use it\" (#10477)"},{"Id":"391102977","IsPullRequest":true,"CreatedAt":"2018-12-17T01:37:21","Actor":"dotnet-maestro[bot]","Number":"10472","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18613.20\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18614.3\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18615.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10472","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10472)"},{"Id":"391443346","IsPullRequest":false,"CreatedAt":"2018-12-16T21:15:15","Actor":"rbonestell","Number":"10478","RawContent":null,"Title":"dotnet pack includes extraneous files making nupkg large ","State":"closed","Body":"## Steps to reproduce\r\n1. Create a .NET Core 2.1 class library containing at least 1 class.\r\n2. Add values to the following properties of your .csproj\r\n- PackageId\r\n- Description\r\n3. Run `dotnet pack` on that new project.\r\n\r\n## Expected  behavior\r\nResulting .nupkg contains only the .dll output of the class library project in the lib/netcoreapp2.1/ folder contained within, and the entire nupkg size should be in the single-digit KBs.\r\n\r\n_When the .csproj file **doesn't** have the `<PackageId>` or `<Description>` nodes within the `<PropertyGroup>` then the resulting .nupkg file is ~3**KB**._\r\n\r\n## Actual behavior\r\nResulting .nupkg contains large list of Microsoft System, netstandard, etc. DLL files causing the package to balloon over 2MB in size.\r\n\r\n_When the .csproj file **does** have the `<PackageId>` or `<Description>` nodes within the `<PropertyGroup>` then the resulting .nupkg file is ~2.5**MB**._\r\n\r\nScreenshot of resulting nupkg lib folder contents: https://i.imgur.com/vcsXbvo.png\r\n\r\n**Note:** This occurs on every machine I've attempted this on (Windows and MacOS) as well as AppVeyor CI.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    51868761f2\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.100/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10478","RelatedDescription":"Closed issue \"dotnet pack includes extraneous files making nupkg large \" (#10478)"},{"Id":"391471697","IsPullRequest":false,"CreatedAt":"2018-12-16T14:18:37","Actor":"fubar-coder","Number":"10479","RawContent":null,"Title":"dotnet --info shows runtimes and sdks twice","State":"open","Body":"## Steps to reproduce\r\n\r\ndotnet --info\r\n\r\n## Expected  behavior\r\n\r\nShow every SDK and runtime once.\r\n\r\n## Actual behavior\r\n\r\nShows every SDK and runtime twice.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```text\r\n.NET Core SDK (gemäß \"global.json\"):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nLaufzeitumgebung:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   c:\\program files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [c:\\program files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [c:\\program files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [c:\\program files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [c:\\program files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [c:\\program files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [c:\\program files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [c:\\program files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n","Url":"https://github.com/dotnet/cli/issues/10479","RelatedDescription":"Open issue \"dotnet --info shows runtimes and sdks twice\" (#10479)"},{"Id":"391374688","IsPullRequest":false,"CreatedAt":"2018-12-15T15:38:13","Actor":"Jjagg","Number":"10476","RawContent":null,"Title":"Two projects with different framework targets in same directory cause build conflict","State":"closed","Body":"## Steps to reproduce\r\n\r\n```\r\n$ dotnet new classlib -o standard\r\n$ cd standard\r\n$ cp standard.csproj other.csproj\r\n# edit framework.csproj to target another runtime e.g. netstandard1.6\r\n$ dotnet build other.csproj\r\n$ dotnet build standard.csproj\r\n```\r\n\r\n## Expected  behavior\r\nBoth builds pass.\r\n\r\n## Actual behavior\r\nThe second build fails with the following error:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.2.101\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(208,5): \r\n    error NETSDK1005: Assets file '<path>\\standard\\obj\\project.assets.json' doesn't have a target for '.NETStandard,Version=v2.0'. \r\n    Ensure that restore has run and that you have included 'netstandard2.0' in the TargetFrameworks for your project. [<path>\\standard\\standard.csproj]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nEDIT: Woops, this should probably have been posted to msbuild, right?","Url":"https://github.com/dotnet/cli/issues/10476","RelatedDescription":"Closed issue \"Two projects with different framework targets in same directory cause build conflict\" (#10476)"},{"Id":"391298695","IsPullRequest":false,"CreatedAt":"2018-12-14T22:19:57","Actor":"dsplaisted","Number":"10475","RawContent":null,"Title":"Acquire and use AppHost for framework dependent apps targeting .NET Core 3 and up","State":"open","Body":"Currently, the AppHost is in the package dependency graph of Microsoft.NETCore.App, and the `ResolvePackageAssets` task finds it in the assets file so that it can be copied to the output directory and renamed for framework-dependent apps.\r\n\r\nWith .NET Core 3.0, we will be using [targeting packs](https://github.com/dotnet/cli/issues/10006) instead of package references, so we will need another way to acquire and locate the apphost.\r\n\r\nLikely, we will implement this by generating \"download only package references\" for a package which contains the app host.  This will depend on the RID, so we will need to use the RID graph (see #10104) to resolve the best apphost RID to use.\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10475","RelatedDescription":"Open issue \"Acquire and use AppHost for framework dependent apps targeting .NET Core 3 and up\" (#10475)"},{"Id":"391290462","IsPullRequest":false,"CreatedAt":"2018-12-14T21:47:14","Actor":"vitek-karas","Number":"10474","RawContent":null,"Title":"Project with multiple RuntimeIdentifiers is missing exe in Self Contained deployment","State":"open","Body":"_From @Suchiman on December 13, 2018 17:20_\n\nWith a csproj looking like\r\n```csproj\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <RuntimeIdentifiers>win10-x64;win7-x86</RuntimeIdentifiers>\r\n    <LangVersion>latest</LangVersion>\r\n    <AspNetCoreModuleName>AspNetCoreModule</AspNetCoreModuleName>\r\n    <AspNetCoreHostingModel>OutOfProcess</AspNetCoreHostingModel>\r\n  </PropertyGroup>\r\n```\r\nand a publish definition looking like\r\n```XML\r\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup>\r\n    <WebPublishMethod>Package</WebPublishMethod>\r\n    <LastUsedBuildConfiguration>Release</LastUsedBuildConfiguration>\r\n    <LastUsedPlatform>Any CPU</LastUsedPlatform>\r\n    <SiteUrlToLaunchAfterPublish />\r\n    <LaunchSiteAfterPublish>True</LaunchSiteAfterPublish>\r\n    <ExcludeApp_Data>False</ExcludeApp_Data>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <ProjectGuid>33bc8379-5f2a-45eb-ae65-aa8cd2c62a72</ProjectGuid>\r\n    <DesktopBuildPackageLocation>$(BUILD_ARTIFACTSTAGINGDIRECTORY)\\Project.zip</DesktopBuildPackageLocation>\r\n    <PackageAsSingleFile>true</PackageAsSingleFile>\r\n    <DeployIisAppPath />\r\n    <PublishDatabaseSettings>\r\n      <Objects xmlns=\"\" />\r\n    </PublishDatabaseSettings>\r\n    <SelfContained>true</SelfContained>\r\n    <UseAppHost>true</UseAppHost>\r\n    <_IsPortable>false</_IsPortable>\r\n    <RuntimeIdentifier>win7-x86</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nPerforming a publish will generate an self contained looking output except that the `Project.exe` is missing and there's only a `Project.dll`\r\n\r\nChanging \r\n```csproj\r\n    <RuntimeIdentifiers>win10-x64;win7-x86</RuntimeIdentifiers>\r\n```\r\nto\r\n```csproj\r\n    <RuntimeIdentifier>win7-x86</RuntimeIdentifier>\r\n```\r\nfixes this but has https://github.com/dotnet/core-setup/issues/4865 as a side effect\n\n_Copied from original issue: dotnet/core#2147_","Url":"https://github.com/dotnet/cli/issues/10474","RelatedDescription":"Open issue \"Project with multiple RuntimeIdentifiers is missing exe in Self Contained deployment\" (#10474)"},{"Id":"391045743","IsPullRequest":false,"CreatedAt":"2018-12-14T17:35:04","Actor":"yevchenko-oleksandr","Number":"10471","RawContent":null,"Title":"deleted","State":"closed","Body":"\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10471","RelatedDescription":"Closed issue \"deleted\" (#10471)"},{"Id":"391198702","IsPullRequest":true,"CreatedAt":"2018-12-14T17:24:36","Actor":"livarcocc","Number":"10473","RawContent":null,"Title":"Updating MSBuild to 16.0.0-preview.284","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/10473","RelatedDescription":"Open PR \"Updating MSBuild to 16.0.0-preview.284\" (#10473)"},{"Id":"390981849","IsPullRequest":true,"CreatedAt":"2018-12-14T06:23:08","Actor":"livarcocc","Number":"10470","RawContent":null,"Title":"Update MSBuild to 16.0.0-preview.284","State":"open","Body":"This should contain the binding redirect fix that we need to unblock the SDk builds.\r\n\r\nThis msbuild version will also need to be inserted into the dotnet/toolset repo.\r\n","Url":"https://github.com/dotnet/cli/pull/10470","RelatedDescription":"Open PR \"Update MSBuild to 16.0.0-preview.284\" (#10470)"},{"Id":"390923155","IsPullRequest":false,"CreatedAt":"2018-12-14T00:58:22","Actor":"wli3","Number":"10469","RawContent":null,"Title":"Extra new line when tool restore is successful","State":"open","Body":"```\r\nλ dotnet tool restore\r\nTool 't-rex' (version '1.0.109') was restored. Available commands: t-rex\r\nTool 'dotnetsay' (version '2.1.4') was restored. Available commands: dotnetsay\r\n\r\n\r\nRestore was successful.\r\n```","Url":"https://github.com/dotnet/cli/issues/10469","RelatedDescription":"Open issue \"Extra new line when tool restore is successful\" (#10469)"},{"Id":"390254603","IsPullRequest":false,"CreatedAt":"2018-12-13T15:05:55","Actor":"nguerrera","Number":"10466","RawContent":null,"Title":"Issues compiling after installing SDK 2.2","State":"closed","Body":"_From @SkinnySackboy on December 11, 2018 15:45_\n\nHi,\r\n\r\nHaving already been using .NET Core 2.0 and 2.1 in production already, earlier this week we decided to start upgrading to .NET Core 2.2. On our machines (i.e. in Visual Studio), so far so good - we installed the SDK without having modified any projects and everything still works as it always used to.\r\n\r\nOn our TeamCity agents, we decided to do the same as we have in the past, i.e. to install the .NET Core 2.2 SDK. This is where the interesting problems start. Suddenly, our existing solutions which contain a .NET Core 2.1 project (event unit tests) started failing with the following error:\r\n\r\n**error NU1202: Package Microsoft.NETCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Package Microsoft.NETCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)**\r\n\r\nThis does not happen from Visual Studio - it only seems to happen when using the dotnet CLI. It gets even more interesting as if we first compile from Visual Studio and subsequently run dotnet build from the command line, it all works. If however you delete the bin/obj folders, dotnet build from the command line fails with the previous error.\r\n\r\nHas anyone else come across this issue, as I was not expecting the mere presence of the 2.2 SDK to suddenly cause all previous builds still targeting .NET Core 2.1 to start failing?\r\n\r\nThanks in advance\n\n_Copied from original issue: dotnet/core#2130_","Url":"https://github.com/dotnet/cli/issues/10466","RelatedDescription":"Closed issue \"Issues compiling after installing SDK 2.2\" (#10466)"},{"Id":"390362977","IsPullRequest":false,"CreatedAt":"2018-12-12T22:51:13","Actor":"ap0llo","Number":"10467","RawContent":null,"Title":"dotnet pack: Cannot change PackageId based on TFM","State":"closed","Body":"## Scenario\r\n\r\nI'm tyring to package up a console application / tool targeting both `netcoreapp2.1` and `net461`. For .NET Core I want to provide the tool as global tool, for .NET framework, the tool should be packaged as a \"tools\" package (a plain `.exe` inside the `tools` directory). I'd like to create two packages, one for each target platform.\r\n\r\n## Steps to reproduce\r\n\r\n1. Create a new console application: `dotnet new console`\r\n2. Add `net461` as additional target framework\r\n3. Set `PackageId` using a conditional `PropertyGroup`\r\n4. Run `dotnet build` and `dotnet pack`\r\n\r\nProject file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFrameworks>net461;netcoreapp2.1</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\" '$(TargetFramework)' == 'net461' \">\r\n    <IsTool>true</IsTool>    \r\n    <PackageId>Package_MultiTargeted_NetFramework</PackageId>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\" '$(TargetFramework)' == 'netcoreapp2.1' \">\r\n    <PackAsTool>true</PackAsTool>\r\n    <PackageId>Package_MultiTargeted_NetCore</PackageId>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n(Full repo, including a Framework-only and core-only tool can be found [here](https://github.com/ap0llo/repro-dotnet-pack-targetframework-dependent-packageid))\r\n\r\n\r\n## Expected  behavior\r\n`dotnet pack` creates two NuGet packages:\r\n\r\n- one package named `Package_MultiTargeted_NetFramework` containing only the .NET Framework exe inside the `tools` folder\r\n- a second package named `Package_MultiTargeted_NetCore` containing the .NET Core global tool (inside the `tools\\netcoreapp2.1\\any` folder)\r\n\r\n## Actual behavior\r\n\r\nA single package named `MultiTargetedTool` is created, containing \r\n\r\n- the .NET Core global tool\r\n- A `net461` build of the project inside the `lib` folder\r\n- A `netcoreapp2.1` build of the proejct inside the `lib` folder\r\n\r\n![image](https://user-images.githubusercontent.com/2821818/49891736-8c9c8080-fe47-11e8-847e-e775f3d6231e.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10467","RelatedDescription":"Closed issue \"dotnet pack: Cannot change PackageId based on TFM\" (#10467)"},{"Id":"390396402","IsPullRequest":false,"CreatedAt":"2018-12-12T20:29:57","Actor":"dagood","Number":"10468","RawContent":null,"Title":"Add 'dotnet tool install' failure potential reason: 'tool requires a runtime that is not installed'","State":"open","Body":"From https://github.com/dotnet/source-build/issues/926#issuecomment-446345298:\r\n\r\n> [@tmds] 'requires a runtime that is not installed' should be added to 'This failure may have been caused by'.\r\n\r\nhttps://github.com/dotnet/cli/blob/22cbfcb49bd9a38292ac6f66a14158b426daefdb/src/dotnet/commands/dotnet-tool/install/LocalizableStrings.resx#L182-L189\r\n\r\nFailure context:\r\n\r\n```\r\n$ dotnet tool install -g dotnet-dev-certs\r\nerror NU1202: Package dotnet-dev-certs 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1) / any. Package dotnet-dev-certs 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2) / any\r\nThe tool package could not be restored.\r\nTool 'dotnet-dev-certs' failed to install. This failure may have been caused by:\r\n\r\n* You are attempting to install a preview release and did not use the --version option to specify the version.\r\n* A package by this name was found, but it was not a .NET Core tool.\r\n* The required NuGet feed cannot be accessed, perhaps because of an Internet connection problem.\r\n* You mistyped the name of the tool.\r\n```\r\n\r\n/cc @wli3 ","Url":"https://github.com/dotnet/cli/issues/10468","RelatedDescription":"Open issue \"Add 'dotnet tool install' failure potential reason: 'tool requires a runtime that is not installed'\" (#10468)"},{"Id":"390037621","IsPullRequest":false,"CreatedAt":"2018-12-12T18:13:44","Actor":"xavierjohn","Number":"10465","RawContent":null,"Title":"dotnet 2.1.6 publish with --self-contained false produces apphost.exe that does not work","State":"closed","Body":"Trying to publish a .net core exe without the runtime using the following command\r\n\r\n## Steps to reproduce\r\ndotnet publish --configuration Release --runtime win7-x64 --self-contained false --output c:\\outputfolder\r\n\r\n## Expected  behavior\r\nProduces a {application}.exe\r\n\r\n## Actual behavior\r\nProduces apphost.exe that does not work.\r\n\r\nI can run the program using\r\ndotnet.exe application.dll\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.17134\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\2.1.500\\\r\n\r\nHost (useful for support):\r\nVersion: 2.1.6\r\nCommit: 3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10465","RelatedDescription":"Closed issue \"dotnet 2.1.6 publish with --self-contained false produces apphost.exe that does not work\" (#10465)"},{"Id":"390022633","IsPullRequest":false,"CreatedAt":"2018-12-12T05:52:07","Actor":"donhuvy","Number":"10464","RawContent":null,"Title":"No webpage was found for the web address: https://localhost:5001/","State":"closed","Body":"## Steps to reproduce\r\nUse Windows 10 Pro, Visual studio 2019 Preview\r\n```\r\ndotnet new webapi\r\ndotnet restore\r\ndotnet run\r\n```\r\n\r\n## Expected  behavior\r\nhttps://localhost:5001/ Show webpage\r\n\r\n## Actual behavior\r\nhttps://localhost:5001/ Error\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nC:\\Users\\donhuvy>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.600-preview-009426\r\n Commit:    48b4f2105d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.600-preview-009426\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n<img width=\"960\" alt=\"dotnet1\" src=\"https://user-images.githubusercontent.com/1328316/49840337-8d9cc600-fde5-11e8-9969-957e01a3e58a.png\">\r\n<img width=\"800\" alt=\"dotnet2\" src=\"https://user-images.githubusercontent.com/1328316/49840338-8e355c80-fde5-11e8-8c46-d314285e44c2.png\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10464","RelatedDescription":"Closed issue \"No webpage was found for the web address: https://localhost:5001/\" (#10464)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"390377097","IsPullRequest":true,"CreatedAt":"2018-12-19T01:30:18","Actor":"terrajobst","Number":"1013","RawContent":null,"Title":"Add missing readonly modifiers","State":"closed","Body":"This fixes #842 (or at least is a sizable down payment).","Url":"https://github.com/dotnet/standard/pull/1013","RelatedDescription":"Closed or merged PR \"Add missing readonly modifiers\" (#1013)"},{"Id":"390839367","IsPullRequest":true,"CreatedAt":"2018-12-19T01:29:43","Actor":"terrajobst","Number":"1020","RawContent":null,"Title":"Reduce noise in reference assemblies","State":"closed","Body":"This doesn't change any APIs. It's just reducing noise from in the textual diff of the reference assemblies.\r\n\r\n* Fix trailing whitespace (69cb85e)\r\n* Mark types as partial (c9725f7)\r\n* Replace handwritten base calls with generated ones (78649f6)\r\n","Url":"https://github.com/dotnet/standard/pull/1020","RelatedDescription":"Closed or merged PR \"Reduce noise in reference assemblies\" (#1020)"},{"Id":"392146465","IsPullRequest":true,"CreatedAt":"2018-12-18T13:01:40","Actor":"dotnet-maestro[bot]","Number":"1028","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18617.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1028","RelatedDescription":"Open PR \"Update dependency files\" (#1028)"},{"Id":"391885087","IsPullRequest":true,"CreatedAt":"2018-12-17T20:52:31","Actor":"wtgodbe","Number":"1027","RawContent":null,"Title":"Build Standard entirely against Arcade, without Buildtools [WIP]","State":"open","Body":"This cuts out buildtools entirely from the Standard repo, so that we fully rely on the Arcade SDK to build against instead. This is still a WIP, as I still need to replace the functionality of `ValidateApiCompatForSrc` from Buildtools: https://github.com/dotnet/buildtools/blob/6844ee12987d5bc1a031dbaf2fe7cbc7fdfaa35d/src/Microsoft.DotNet.Build.Tasks/PackageFiles/ApiCompat.targets#L26. However, it currently builds successfully (at least on Windows), so I figured I'd put up a PR for feedback.\r\n\r\n@ericstj @safern @danmosemsft @ViktorHofer @chcosta PTAL\r\n\r\nCC @karelz ","Url":"https://github.com/dotnet/standard/pull/1027","RelatedDescription":"Open PR \"Build Standard entirely against Arcade, without Buildtools [WIP]\" (#1027)"},{"Id":"390383237","IsPullRequest":true,"CreatedAt":"2018-12-17T19:11:23","Actor":"terrajobst","Number":"1014","RawContent":null,"Title":"Add IAsyncDisposable","State":"closed","Body":"This adds API support for the new C# 8 feature to call dispose asynchronously:\r\n\r\n```C#\r\nawait using(var stream = File.OpenWrite(path))\r\n{\r\n    await data.WriteAsync(stream);\r\n}\r\n```\r\n\r\nFor more details, see:\r\n\r\nhttps://github.com/dotnet/csharplang/blob/master/proposals/async-streams.md","Url":"https://github.com/dotnet/standard/pull/1014","RelatedDescription":"Closed or merged PR \"Add IAsyncDisposable\" (#1014)"},{"Id":"391702003","IsPullRequest":true,"CreatedAt":"2018-12-17T15:07:31","Actor":"dotnet-maestro[bot]","Number":"1026","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18616.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1026","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1026)"},{"Id":"391465145","IsPullRequest":true,"CreatedAt":"2018-12-16T19:53:13","Actor":"dotnet-maestro[bot]","Number":"1025","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18615.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1025","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1025)"},{"Id":"391463924","IsPullRequest":false,"CreatedAt":"2018-12-16T12:45:44","Actor":"dmitriyse","Number":"1024","RawContent":null,"Title":"[Proposal] .Net Standard 3.0.0 with breaking changes, semantic versioning and migration toolset","State":"open","Body":"Please open new .NetStandard branch with deep refresh of .Net API surface.\r\nCurrently .NetStandard 2.0 and it's successor .NetStandard 2.1 contains everything that were added in .net since version 1.0. Some API is already outdated and another will become outdated soon.\r\n\r\n.Net Standard 2.1 have some positive movements. It's drops some components to out of standard into additional components.\r\n\r\nBut it's not enough. It's time to stay in .Net Standard only good and modern parts.\r\nFor example:\r\n```CSharp\r\npublic class List<T>\r\n{\r\n     // ...\r\n     void CopyTo(T[] array);\r\n     // ...\r\n}\r\n```\r\ncan be replaced with:\r\n\r\n```CSharp\r\npublic class List<T>\r\n{\r\n     // ...\r\n     void CopyTo(Span<T> output);\r\n     // ...\r\n}\r\n```\r\nAssemblies targeting .NetStandard 2.0, .NetStandard 2.1 and proposed .NetStandard 3.0.0 should be capable to work side-by-side inside the same AppDomain.\r\n\r\nTODO: Add diagram.\r\n","Url":"https://github.com/dotnet/standard/issues/1024","RelatedDescription":"Open issue \"[Proposal] .Net Standard 3.0.0 with breaking changes, semantic versioning and migration toolset\" (#1024)"},{"Id":"391376312","IsPullRequest":true,"CreatedAt":"2018-12-15T13:41:30","Actor":"dotnet-maestro[bot]","Number":"1023","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18614.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1023","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1023)"},{"Id":"391131649","IsPullRequest":false,"CreatedAt":"2018-12-14T14:26:01","Actor":"HelgeKeck","Number":"1022","RawContent":null,"Title":"Wrong NetworkInterfaceType on OS X Mojave with .Net Standard 2.0 for WiFi Adapter","State":"open","Body":"On OS X Mojave with .Net Standard 2.0\r\n\r\nfor the WiFi Adapter, System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType()\r\n\r\nreturns\r\nNetworkInterfaceType.Ethernet\r\ninstead of\r\nNetworkInterfaceType.Wireless80211","Url":"https://github.com/dotnet/standard/issues/1022","RelatedDescription":"Open issue \"Wrong NetworkInterfaceType on OS X Mojave with .Net Standard 2.0 for WiFi Adapter\" (#1022)"},{"Id":"391102384","IsPullRequest":true,"CreatedAt":"2018-12-14T13:21:43","Actor":"dotnet-maestro[bot]","Number":"1021","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18613.20\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1021","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1021)"},{"Id":"390833738","IsPullRequest":true,"CreatedAt":"2018-12-13T19:52:44","Actor":"terrajobst","Number":"1019","RawContent":null,"Title":"Require support for default implementations of interfaces","State":"open","Body":"This marker will require all implementations of .NET Standard 2.1 to support default implementations of interfaces. Needless to say that this has runtime impact. The benefit of doing this in the standard is that it allows library authors to use this feature for their interfaces. The downside is that that this is potentially a lot of runtime work. I'm curious to how the board feels about absorbing that change for .NET Standard 2.1, especially @dotnet/nsboard-xamarin and @dotnet/nsboard-unity.","Url":"https://github.com/dotnet/standard/pull/1019","RelatedDescription":"Open PR \"Require support for default implementations of interfaces\" (#1019)"},{"Id":"390830254","IsPullRequest":true,"CreatedAt":"2018-12-13T19:42:55","Actor":"terrajobst","Number":"1018","RawContent":null,"Title":"WIP: Add support for Index and Range","State":"open","Body":"This adds the basic APIs for `Index` and `Range`. However, it misses most of the [companion APIs](https://github.com/dotnet/designs/blob/master/accepted/system-range/system-range.md#companion-apis) because they don't even exist in CoreFx yet. The work is tracked in https://github.com/dotnet/corefx/issues/34076. Once done, I'll update the PR to reflect the final API shape.\r\n\r\nFor now, this PR is just a tracking item to remind us to get it done for 2.1.","Url":"https://github.com/dotnet/standard/pull/1018","RelatedDescription":"Open PR \"WIP: Add support for Index and Range\" (#1018)"},{"Id":"390822437","IsPullRequest":true,"CreatedAt":"2018-12-13T19:20:57","Actor":"terrajobst","Number":"1017","RawContent":null,"Title":"WIP: Add IAsyncEnumerable<T>","State":"open","Body":"This API is depending on the CoreFX work: dotnet/corefx#33909. Once we closed on the design I'll update this PR.","Url":"https://github.com/dotnet/standard/pull/1017","RelatedDescription":"Open PR \"WIP: Add IAsyncEnumerable<T>\" (#1017)"},{"Id":"390444044","IsPullRequest":true,"CreatedAt":"2018-12-13T18:57:05","Actor":"wtgodbe","Number":"1015","RawContent":null,"Title":"Enable publishing to build-assets registry","State":"closed","Body":"Now that Standard is placing build output in `artifacts`, we can opt-in to publishing build assets to the BAR.\r\n\r\n@chcosta @mmitche PTAL","Url":"https://github.com/dotnet/standard/pull/1015","RelatedDescription":"Closed or merged PR \"Enable publishing to build-assets registry\" (#1015)"},{"Id":"390668875","IsPullRequest":true,"CreatedAt":"2018-12-13T13:31:43","Actor":"dotnet-maestro[bot]","Number":"1016","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18612.12\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18612.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1016","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1016)"},{"Id":"390354570","IsPullRequest":true,"CreatedAt":"2018-12-12T23:16:02","Actor":"terrajobst","Number":"1012","RawContent":null,"Title":"Add private fields for structs","State":"closed","Body":"No public API changes, but this fixes #678. \r\n\r\nIn a nutshell, the compiler needs to know whether a struct has any fields in order to apply definitive assignment rules. While stripping all private fields from types is generally OK, we can't do this for structs. Fortunately, for private fields the compiler doesn't really care what they are, but what their characteristics are. For example:\r\n\r\n1. Does the struct have any fields?\r\n\r\n2. Does the struct contain any reference types (to validate generic instantiations that have the unmanaged constraint)?\r\n\r\n3. Does the struct use the generic parameter in a field declaration (to validate cyclic layout problems)?\r\n\r\nThis adds dummy fields to structs to conform to these rules. These aren't computed separately but are instead taken from .NET Core.\r\n\r\nFor more details, see this issue in CoreFX:\r\n\r\nhttps://github.com/dotnet/corefx/issues/6185","Url":"https://github.com/dotnet/standard/pull/1012","RelatedDescription":"Closed or merged PR \"Add private fields for structs\" (#1012)"},{"Id":"390224712","IsPullRequest":false,"CreatedAt":"2018-12-12T19:00:27","Actor":"YairHalberstadt","Number":"1011","RawContent":null,"Title":"Add HashSet.TryGetValue to .Net Standard","State":"closed","Body":"This method is already implemented by .Net Core 2.0 and .Net Framework 4.7.2, so I imagine this would be relatively easy to include in .Net Standard 2.1.","Url":"https://github.com/dotnet/standard/issues/1011","RelatedDescription":"Closed issue \"Add HashSet.TryGetValue to .Net Standard\" (#1011)"},{"Id":"388028724","IsPullRequest":true,"CreatedAt":"2018-12-12T18:55:14","Actor":"terrajobst","Number":"999","RawContent":null,"Title":"Sync .NET Standard's RefEmit with .NET Framework","State":"closed","Body":"Fixes #987\r\n\r\nThe point of the sync is to get increase parity with .NET Framework and thus making it easier to port more existing code to .NET Standard 2.1 (or any platform implementing it).","Url":"https://github.com/dotnet/standard/pull/999","RelatedDescription":"Closed or merged PR \"Sync .NET Standard's RefEmit with .NET Framework\" (#999)"},{"Id":"390052989","IsPullRequest":true,"CreatedAt":"2018-12-12T16:50:02","Actor":"terrajobst","Number":"1009","RawContent":null,"Title":"Clean-up reference assembly","State":"closed","Body":"This aligns the physical representation of the reference assembly with how it look like in .NET Core. No changes to the API surface; it's just to remove noise in future diffs.","Url":"https://github.com/dotnet/standard/pull/1009","RelatedDescription":"Closed or merged PR \"Clean-up reference assembly\" (#1009)"},{"Id":"390215935","IsPullRequest":true,"CreatedAt":"2018-12-12T13:46:59","Actor":"dotnet-maestro[bot]","Number":"1010","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18611.14\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18611.14\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18611.14\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18611.14\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1010","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1010)"},{"Id":"389518834","IsPullRequest":true,"CreatedAt":"2018-12-12T03:42:31","Actor":"terrajobst","Number":"1007","RawContent":null,"Title":"Update FWLinks to use https instead of http","State":"closed","Body":"This change only affects the string for `[Obsolete]` message.\r\n\r\nJustification: It's generally bad to use `http` these day. Plus, it causes noise in the diffs.","Url":"https://github.com/dotnet/standard/pull/1007","RelatedDescription":"Closed or merged PR \"Update FWLinks to use https instead of http\" (#1007)"},{"Id":"389753658","IsPullRequest":true,"CreatedAt":"2018-12-11T13:11:39","Actor":"dotnet-maestro[bot]","Number":"1008","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18610.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18610.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18610.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18610.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1008","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1008)"},{"Id":"389020595","IsPullRequest":true,"CreatedAt":"2018-12-09T13:10:59","Actor":"dotnet-maestro[bot]","Number":"1006","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18608.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18608.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18608.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18608.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1006","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1006)"},{"Id":"388920215","IsPullRequest":true,"CreatedAt":"2018-12-08T13:10:58","Actor":"dotnet-maestro[bot]","Number":"1005","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18607.6\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18607.6\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1005","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1005)"},{"Id":"388645771","IsPullRequest":true,"CreatedAt":"2018-12-07T13:16:15","Actor":"dotnet-maestro[bot]","Number":"1004","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18606.9\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18606.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1004","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1004)"},{"Id":"388551526","IsPullRequest":false,"CreatedAt":"2018-12-07T08:26:51","Actor":"he-dev","Number":"1003","RawContent":null,"Title":"Documentation still not up-to-date","State":"open","Body":"I'd be great if you could keep the documentation up-to-date. Currently the only place where you can find anything about these two _super-secret_ elements:\r\n\r\n- `AppendTargetFrameworkToOutputPath`\r\n- `AppendRuntimeIdentifierToOutputPath `\r\n\r\nis this [comment](https://github.com/dotnet/standard/issues/512#issuecomment-332291043). Are there any more _hidden_ settings? \r\n\r\nDo you think you could improve this and maybe also add other _unofficial_ yet fully supported settings (if there are any)?","Url":"https://github.com/dotnet/standard/issues/1003","RelatedDescription":"Open issue \"Documentation still not up-to-date\" (#1003)"},{"Id":"388402668","IsPullRequest":true,"CreatedAt":"2018-12-06T22:17:23","Actor":"wtgodbe","Number":"1002","RawContent":null,"Title":"Move build output from `bin` to `artifacts`","State":"closed","Body":"This allows Arcade to take over in deciding where we output our build artifacts, so we no longer have everything going into the `bin` dir. I don't believe there's anywhere else that explicitly depends on Standard's `bin` dir, but please let me know if you think I'm missing anything.\r\n\r\n@ericstj @ViktorHofer @weshaggard PTAL\r\n\r\n@danmosemsft CC","Url":"https://github.com/dotnet/standard/pull/1002","RelatedDescription":"Closed or merged PR \"Move build output from `bin` to `artifacts`\" (#1002)"},{"Id":"388373169","IsPullRequest":true,"CreatedAt":"2018-12-06T20:04:55","Actor":"ericstj","Number":"1001","RawContent":null,"Title":"Remove Trimming package from dotnet/standard","State":"closed","Body":"Fixes: https://github.com/dotnet/standard/issues/788\r\n\r\nThose looking for an officially supported trimming tool should try:\r\nhttps://github.com/dotnet/core/blob/master/samples/linker-instructions.md\r\n\r\nThe assembly level linker has moved to:\r\nhttps://github.com/ericstj/Microsoft.Packaging.Tools.Trimming","Url":"https://github.com/dotnet/standard/pull/1001","RelatedDescription":"Closed or merged PR \"Remove Trimming package from dotnet/standard\" (#1001)"},{"Id":"388204009","IsPullRequest":true,"CreatedAt":"2018-12-06T13:11:37","Actor":"dotnet-maestro[bot]","Number":"1000","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18605.14\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18605.14\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18605.14\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18605.14\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1000","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1000)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"392440121","IsPullRequest":false,"CreatedAt":"2018-12-19T04:51:35","Actor":"SeanFeldman","Number":"34157","RawContent":null,"Title":"GZipStream compatibility - different results on .NET Framework and .NET Core","State":"open","Body":"## Expected behaviour \r\n\r\nTo produce identical compressed result for the same original byte array on .NET Framework and .NET Core.\r\n\r\n## Actual behaviour\r\n\r\nResults of `GZipStream` on .NET Framework and .NET Core are different.\r\n\r\n## Repro\r\n\r\n1. An array of 1500 characters 'A'\r\n2. Compressed using `GZipStream`\r\n3. Verified results on .NET Framework (4.6.1) and .NET Core (2.1) that should be identical, but they are not.\r\n\r\nCode available [here](https://github.com/SeanFeldman/CoreFX-GZipStream-issue-34157).\r\n\r\n### Results\r\n\r\nPlatform                          | Compressed result in hexa\r\n---------------------------|----------------------------------------\r\n.NET Framework<br> 4.6.1     | 1f8b080000000000040073741c05a360148c825130dc00004d6f6cebdc050000\r\n.NET Core 2.2.100<br>Commit b9f2fa0ca8<br><br>Host 2.2.0 Commit 1249f08fed    | 1f8b080000000000000b73741c05a321301a02a321301a028ec30c00004d6f6cebdc050000\r\n\r\nExecuted on Windows 10 Pro 64bit 1809 build 17763.134","Url":"https://github.com/dotnet/corefx/issues/34157","RelatedDescription":"Open issue \"GZipStream compatibility - different results on .NET Framework and .NET Core\" (#34157)"},{"Id":"392423873","IsPullRequest":false,"CreatedAt":"2018-12-19T03:15:25","Actor":"JimBobSquarePants","Number":"34156","RawContent":null,"Title":"System.Drawing.Common throws when saving with EncoderParameters ","State":"open","Body":"Using NetCoreApp 2.1 on Windows with either\r\n\r\nSystem.Drawing.Common 4.5.1\r\nSystem.Drawing.Common 4.6.0-preview.18571.3\r\n\r\nwhen saving a jpeg using either overload:\r\n\r\n`public void Save(String filename, ImageCodecInfo encoder, EncoderParameters encoderParams)`\r\n`public void Save(Stream stream, ImageCodecInfo encoder, EncoderParameters encoderParams)`\r\n\r\nThe following exception is thrown.\r\n\r\n> {System.ArgumentException: Parameter is not valid.\r\n> at System.Drawing.Image.Save(Stream stream, ImageCodecInfo encoder, EncoderParameters encoderParams)\r\n\r\n![System Drawing exception](https://user-images.githubusercontent.com/385879/50196721-60798600-0398-11e9-955d-4609466a3c33.png)\r\n\r\n\r\nSaving the image without the params works as expected.\r\n\r\nI've attached the following program to allow reproduction.\r\n[SDIssue.zip](https://github.com/dotnet/corefx/files/2693093/SDIssue.zip)\r\n","Url":"https://github.com/dotnet/corefx/issues/34156","RelatedDescription":"Open issue \"System.Drawing.Common throws when saving with EncoderParameters \" (#34156)"},{"Id":"392397579","IsPullRequest":true,"CreatedAt":"2018-12-19T02:06:18","Actor":"safern","Number":"34154","RawContent":null,"Title":"Update publish symbols task to fix freebsd symbols publishing","State":"closed","Body":"Update publish symbols package that contains fix for freebsd symbols publishing. ","Url":"https://github.com/dotnet/corefx/pull/34154","RelatedDescription":"Closed or merged PR \"Update publish symbols task to fix freebsd symbols publishing\" (#34154)"},{"Id":"392405635","IsPullRequest":true,"CreatedAt":"2018-12-19T01:36:59","Actor":"Marusyk","Number":"34155","RawContent":null,"Title":"Utf8JsonReader throw when isFinal is true and the first call to Read returns false","State":"open","Body":"Please review this first step. #34081","Url":"https://github.com/dotnet/corefx/pull/34155","RelatedDescription":"Open PR \"Utf8JsonReader throw when isFinal is true and the first call to Read returns false\" (#34155)"},{"Id":"392397278","IsPullRequest":true,"CreatedAt":"2018-12-19T00:54:42","Actor":"dotnet-maestro-bot","Number":"34153","RawContent":null,"Title":"Update CoreFx to preview.18618.9 (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34153","RelatedDescription":"Open PR \"Update CoreFx to preview.18618.9 (master)\" (#34153)"},{"Id":"392373301","IsPullRequest":true,"CreatedAt":"2018-12-19T00:39:22","Actor":"safern","Number":"34150","RawContent":null,"Title":"[DARC] Add Helix.Sdk and Tasks.Feed package to Versions.Details.xml and run darc update","State":"closed","Body":"Run a darc manual update and add Helix.Sdk and Tasks.Feed package to Version.Details.xml so that we get autoupdate for those guys as well.","Url":"https://github.com/dotnet/corefx/pull/34150","RelatedDescription":"Closed or merged PR \"[DARC] Add Helix.Sdk and Tasks.Feed package to Versions.Details.xml and run darc update\" (#34150)"},{"Id":"392385336","IsPullRequest":true,"CreatedAt":"2018-12-18T23:56:37","Actor":"wtgodbe","Number":"34152","RawContent":null,"Title":"Invoke eng/common/build scripts from perf.groovy instead of root build scripts","State":"open","Body":"For https://github.com/dotnet/corefx/issues/34065\r\n\r\nWe should be directly invoking the common build scripts from `perf.groovy`, rather than relying on the root build scripts. This will allow us to pass msbuild arguments that don't start with `/p`\r\n\r\n@tmat @ViktorHofer @v-haren PTAL\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/34152","RelatedDescription":"Open PR \"Invoke eng/common/build scripts from perf.groovy instead of root build scripts\" (#34152)"},{"Id":"392375544","IsPullRequest":false,"CreatedAt":"2018-12-18T23:13:44","Actor":"tquerec","Number":"34151","RawContent":null,"Title":"DirectoryObjectSecurity.GetAccessRules throws NullReferenceException when SetSecurityDescriptorBinaryForm is used to initialize the object","State":"open","Body":"+ @dsgouda who committed the initial version of these files.\r\n\r\nDuring .NET core a new private field ( _securityDescriptor ) was added to DirectoryObjectSecurity.  This field obscures the _securityDescriptor field in the base class ( ObjectSecurity ).  ObjectSecurity exposes a public method, SetSecurityDescriptorBinaryForm which is expected to populate the object with a user supplied descriptor.  If SetSecurityDescriptorBinaryForm is called on a directoryobjectsecurity class only objectSecurity._securityDescriptor is populated.  DirectoryObjectSecurity._securityDescriptor is still null.  When DirectoryObjectSecurity.GetAccessRules is called, it accesses DirectoryObjectSecurity._securityDescriptor which is null.  It appears DirectoryObjectSecurity._securityDescriptor was added when the code was ported .NET core as the current full framework versions do not have the new private field.  The issue was identified using the ActiveDirectoryPowershell module in PSH core as it uses these objects to inspect the permissions on a principal.\r\n\r\n**To repro**\r\n\r\nOpen PSH core on Windows 1809 or later\r\nRun Get-ADUser administrator -prop *\r\n\r\ncmd will fail with NullReferenceException\r\n\r\nPS C:\\Users\\administrator.TQDFT5D> get-aduser administrator -prop *\r\nget-aduser : Object reference not set to an instance of an object.\r\nAt line:1 char:1\r\n+ get-aduser administrator -prop *\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+ CategoryInfo          : NotSpecified: (administrator:ADUser) [Get-ADUser], NullReferenceException\r\n+ FullyQualifiedErrorId : ActiveDirectoryCmdlet:System.NullReferenceException,Microsoft.ActiveDirectory.Management.Commands.GetADUser\r\n\r\n**Stack Trace**\r\n\r\nPS C:\\Users\\administrator.TQDFT5D> $error[0].Exception.StackTrace\r\n   at System.Security.AccessControl.DirectoryObjectSecurity.GetRules(Boolean access, Boolean includeExplicit, Boolean includeInherited, Type targetType)\r\n   at System.Security.AccessControl.DirectoryObjectSecurity.GetAccessRules(Boolean includeExplicit, Boolean includeInherited, Type targetType)\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADAccountFactory`1.ScanACLForChangePasswordRight(ActiveDirectorySecurity adsSecurity, Boolean& denySelfFound, Boolean& denyWorldFound, Boolean& allowSelfFound, Boolean& allowWorldFound)\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADAccountFactory`1.ToExtendedCannotChangePassword(String extendedAttribute, String[] directoryAttributes, ADEntity userObj, ADEntity directoryObj, CmdletSessionInfo cmdletSessionInfo)\r\n   at Microsoft.ActiveDirectory.Management.Commands.AttributeConverterEntry.InvokeToExtendedConverter(ADEntity userObj, ADEntity directoryObj, CmdletSessionInfo cmdletSessionInfo)\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADFactory`1.Construct(ADEntity directoryObj, AttributeSetRequest requestedAttributes)\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADPrincipalFactory`1.Construct(ADEntity directoryObj, AttributeSetRequest requestedAttributes)\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADFactory`1.GetExtendedObjectFromIdentity(T identityObj, String identityQueryPath, ICollection`1 propertiesToFetch, Boolean showDeleted, Boolean showLinkTtl)\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADFactory`1.GetExtendedObjectFromIdentity(T identityObj, String identityQueryPath, ICollection`1 propertiesToFetch, Boolean showDeleted)\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADGetCmdletBase`3.ADGetCmdletBaseProcessCSRoutine()\r\n   at Microsoft.ActiveDirectory.Management.CmdletSubroutinePipeline.Invoke()\r\n   at Microsoft.ActiveDirectory.Management.Commands.ADCmdletBase`1.ProcessRecord()\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/34151","RelatedDescription":"Open issue \"DirectoryObjectSecurity.GetAccessRules throws NullReferenceException when SetSecurityDescriptorBinaryForm is used to initialize the object\" (#34151)"},{"Id":"392280230","IsPullRequest":true,"CreatedAt":"2018-12-18T22:15:20","Actor":"safern","Number":"34145","RawContent":null,"Title":"Add update versions repository step to new official builds pipeline","State":"closed","Body":"Until we stop doing this step once all repos are using the new dependency flow we need buildtools since the update versions task lives in buildtools. If we realize we will need this step longer than expected, we can then move this task to some package coming from arcade.\r\n\r\ncc: @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/34145","RelatedDescription":"Closed or merged PR \"Add update versions repository step to new official builds pipeline\" (#34145)"},{"Id":"392314639","IsPullRequest":true,"CreatedAt":"2018-12-18T22:11:19","Actor":"safern","Number":"34148","RawContent":null,"Title":"Add FreeBSD leg to new official build system","State":"closed","Body":"Tested in: https://dnceng.visualstudio.com/internal/_build/results?buildId=60446\r\n\r\ncc: @danmosemsft @MattGal ","Url":"https://github.com/dotnet/corefx/pull/34148","RelatedDescription":"Closed or merged PR \"Add FreeBSD leg to new official build system\" (#34148)"},{"Id":"392335175","IsPullRequest":false,"CreatedAt":"2018-12-18T21:05:02","Actor":"danmosemsft","Number":"34149","RawContent":null,"Title":"Consider removing SyncRoot on popular collections in favor of object in ConditionalWeakTable","State":"open","Body":"There are apps where it's common to have a lot of empty or small lists and/or dictionaries. (MSBuild was one, at least at one time.) It would be nice to make these cheaper on memory. As the caller it's possible to reduce the memory cost by using strategies like `List<T>.Empty`, copy on write, and/or custom versions for low counts (MSBuild did all those), but that adds complexity and a longer code path.\r\n\r\nBoth these types have a private field for _syncRoot. They don't use it themselves, it's for external use. If we could remove that it would shrink them all by 4-8 bytes. Right now the current size of an empty List<T> looks like 24-48 bytes so that's 17%. (The reduction in the size of a collection with contents would be much smaller.)\r\n\r\nIt would be possible to remove _syncRoot by returning `this` but in the unlikely case where calling code was already using `this` for some other locking purpose that could cause deadlock or thread safety problems. Instead, we could safely return an object from the`ConditionalWeakTable`. That would be safe and indistinguishable by callers.\r\n\r\nRetrieving this object would be significantly slower so this would only be worth it if it was rarely used. I think SyncRoot was deprecated almost from the beginning. My guess is that usage is low or very low (apisof.net won't help us here as it doesn't show usage through interfaces). If that's true the heavy usage of these types might make this change worthwhile.\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/34149","RelatedDescription":"Open issue \"Consider removing SyncRoot on popular collections in favor of object in ConditionalWeakTable\" (#34149)"},{"Id":"392299724","IsPullRequest":true,"CreatedAt":"2018-12-18T19:24:55","Actor":"bgribaudo","Number":"34147","RawContent":null,"Title":"Adding Kill(bool entireProcessTree) -- terminates a process tree","State":"open","Body":"[Implements API approved by #26234]\r\n\r\n## Summary\r\nWhen `Kill(bool entireProcessTree)`'s argument is false, behaves identical to `Kill()`; when true, terminates the current process and all descendant processes (children, grandchildren, etc.).\r\n\r\n## Platform Implementation Status\r\nImplemented for Windows, OSX and Linux; not implemented for UAP, UnknownUnix or FreeBSD. \r\n\r\n## Notes\r\nPotential low-hanging fruit: Behind-the-scenes, the logic in this PR enumerates child processes. This functionality could be leveraged to easily implement #25855. \r\n\r\nWindows-specific logic inspired by [msbuild's NativeMethodsShared KillTree](https://github.com/Microsoft/msbuild/blob/0591c15d6c638cad38091fbe625dde968f86748d/src/Shared/NativeMethodsShared.cs#L1068).\r\n\r\n[This PR replaces #31827]","Url":"https://github.com/dotnet/corefx/pull/34147","RelatedDescription":"Open PR \"Adding Kill(bool entireProcessTree) -- terminates a process tree\" (#34147)"},{"Id":"392293485","IsPullRequest":false,"CreatedAt":"2018-12-18T19:06:59","Actor":"TonyHenrique","Number":"34146","RawContent":null,"Title":"System.Data.SqlClient throwing System.PlatformNotSupportedException when used in Azure Functions (v2)","State":"open","Body":"I have a code running on Azure Functions (v2) and System.Data.SqlClient version 4.5.1 \r\nWhen I upgrade System.Data.SqlClient to 4.6.0, I get this error:\r\n\r\n_System.Data.SqlClient is not supported on this platform._\r\n\r\n```\r\n2018-12-18T19:00:02.737 [Information] Executing 'LiquidaTitulo' (Reason='This function was programmatically called via the host APIs.', Id=241ebfdf-39d7-4299-8fe7-2bd9a6e08244)\r\n2018-12-18T19:00:10.228 [Error] Executed 'LiquidaTitulo' (Failed, Id=241ebfdf-39d7-4299-8fe7-2bd9a6e08244)\r\nSystem.Data.SqlClient is not supported on this platform.\r\n```\r\n\r\nThen I downgraded System.Data.SqlClient to version 4.5.1 and it is working now.","Url":"https://github.com/dotnet/corefx/issues/34146","RelatedDescription":"Open issue \"System.Data.SqlClient throwing System.PlatformNotSupportedException when used in Azure Functions (v2)\" (#34146)"},{"Id":"392276252","IsPullRequest":false,"CreatedAt":"2018-12-18T18:15:54","Actor":"GrabYourPitchforks","Number":"34144","RawContent":null,"Title":"Create ASCII ToUpper / ToLower APIs","State":"open","Body":"To make @KrzysztofCwalina happy. :)\r\n\r\nNetworking protocols and parsers in particular use ASCII very frequently - even more so than UTF-8. It would be useful to introduce high-performance APIs that work very specifically on ASCII text without trying to interpret it as UTF-8.\r\n\r\n```cs\r\nnamespace System.Text\r\n{\r\n   public static class AsciiUtility\r\n   {\r\n      /*\r\n       * Converts all [a-z] bytes to [A-Z], or vice versa.\r\n       * All other bytes (even non-ASCII bytes) remain unchanged.\r\n       * If destination.Length < source.Length, returns -1.\r\n       * Else returns source.Length.\r\n       */\r\n\r\n      public static int ToLowerInvariant(ReadOnlySpan<byte> source, Span<byte> destination);\r\n      public static int ToUpperInvariant(ReadOnlySpan<byte> source, Span<byte> destination);\r\n\r\n      // In-place APIs - do we need these?\r\n      // You could just pass the same buffer for 'source' and\r\n      // 'destination' above.\r\n      public static void ToLowerInvariantInPlace(Span<byte> buffer);\r\n      public static void ToUpperInvariantInPlace(Span<byte> buffer);\r\n   }\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/34144","RelatedDescription":"Open issue \"Create ASCII ToUpper / ToLower APIs\" (#34144)"},{"Id":"392177215","IsPullRequest":true,"CreatedAt":"2018-12-18T17:45:37","Actor":"dotnet-maestro-bot","Number":"34140","RawContent":null,"Title":"Update CoreClr, CoreSetup to preview-27218-02, preview-27218-01, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34140","RelatedDescription":"Closed or merged PR \"Update CoreClr, CoreSetup to preview-27218-02, preview-27218-01, respectively (master)\" (#34140)"},{"Id":"392257792","IsPullRequest":false,"CreatedAt":"2018-12-18T17:22:55","Actor":"WenceyWang","Number":"34143","RawContent":null,"Title":"Make a new interface IRandom","State":"open","Body":"`System.Random` is using an obscure algorithm and do not support XML Serialization or data contract or sth else.\r\n\r\nWe have to write another pRNG generator to cover these requirements. It is not wise to let these new class to inheritance `System.Random` because it's not an inheritance, They just have a same interface.\r\n\r\nWe need a new interface which `System.Random` implement it, which make it possible to write some extension function work for both `System.Random` and other classes that implement this interface.\r\n","Url":"https://github.com/dotnet/corefx/issues/34143","RelatedDescription":"Open issue \"Make a new interface IRandom\" (#34143)"},{"Id":"392254177","IsPullRequest":false,"CreatedAt":"2018-12-18T17:13:06","Actor":"terrajobst","Number":"34142","RawContent":null,"Title":"Struct readonly modifiers","State":"open","Body":"We should make a mass over all the structs as we seem to keep finding types that could be read-only but aren't, for example: all the `XxxTypeHandle` types, such as `RuntimeTypeHandle`  and `RuntimeMethodHandle`.\r\n\r\n_Originally posted by @marek-safar in https://github.com/dotnet/standard/pull/1013#issuecomment-448217455_","Url":"https://github.com/dotnet/corefx/issues/34142","RelatedDescription":"Open issue \"Struct readonly modifiers\" (#34142)"},{"Id":"392249420","IsPullRequest":false,"CreatedAt":"2018-12-18T17:01:02","Actor":"SamuelEnglard","Number":"34141","RawContent":null,"Title":"LINQ Merge Method for `IReadOnlyDictionary<TKey, TValue>`","State":"open","Body":"**Rational**\r\n\r\nWe have [`Enumerable.Concat`](https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.concat) and [`Enumerable.Union`](https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.union) for creating merged views of `IEnumerable`. While this can be used with Dictionaries by viewing them as `IEnumerable<KeyValuePair<TKey, TValue>>`, it is not very nice to use.\r\n\r\n**Proposed API**\r\n\r\n```csharp\r\npublic static class DictionaryExtensions\r\n{\r\n    /// <summary>\r\n    ///     Merges two <see cref=\"IReadOnlyDictionary{TKey, TValue}\"/> into one <see cref=\"IReadOnlyDictionary{TKey, TValue}\"/>.\r\n    /// </summary>\r\n    /// <typeparam name=\"TKey\">The type of the keys in the two <see cref=\"IReadOnlyDictionary{TKey, TValue}\"/>.</typeparam>\r\n    /// <typeparam name=\"TValue\">The type of the values in the two <see cref=\"IReadOnlyDictionary{TKey, TValue}\"/>.</typeparam>\r\n    /// <param name=\"this\">The first <see cref=\"IReadOnlyDictionary{TKey, TValue}\"/> to merge.</param>\r\n    /// <param name=\"other\">The second <see cref=\"IReadOnlyDictionary{TKey, TValue}\"/> to merge.</param>\r\n    /// <returns>An <see cref=\"IReadOnlyDictionary{TKey, TValue}\"/> that has the key/value pairs of both <paramref name=\"this\"/> and <paramref name=\"other\"/>.</returns>\r\n    /// <exception cref=\"ArgumentNullException\"><paramref name=\"this\"/> or <paramref name=\"other\"/> is <see langword=\"null\"/>.</exception>\r\n    public static IReadOnlyDictionary<TKey, TValue> Merge<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> @this, IReadOnlyDictionary<TKey, TValue> other)\r\n}\r\n```\r\n\r\n**Open Questions**\r\n\r\n* What to do when both Dictionaries have the same key? My personal implementation returns the value from the first dictionary.\r\n","Url":"https://github.com/dotnet/corefx/issues/34141","RelatedDescription":"Open issue \"LINQ Merge Method for `IReadOnlyDictionary<TKey, TValue>`\" (#34141)"},{"Id":"392173548","IsPullRequest":false,"CreatedAt":"2018-12-18T14:10:56","Actor":"JianpingLiu0225","Number":"34139","RawContent":null,"Title":"BytesTransmitted and BytesReceived should be long type in LinuxIPInterfaceStatistics","State":"open","Body":"file `corefx/src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/LinuxIPInterfaceStatistics.cs`\r\nyou have\r\n\r\n```c#\r\n        public LinuxIPInterfaceStatistics(string name)\r\n        {\r\n            _table = StringParsingHelpers.ParseInterfaceStatisticsTableFromFile(NetworkFiles.InterfaceListingFile, name);\r\n\r\n            // sys/class/net/<interfacename>/tx_queue_len\r\n            string transmitQueueLengthFilePath = Path.Combine(NetworkFiles.SysClassNetFolder, name, NetworkFiles.TransmitQueueLengthFileName);\r\n            _transmitQueueLength = StringParsingHelpers.ParseRawIntFile(transmitQueueLengthFilePath);\r\n\r\n        }\r\n        public override long BytesReceived { get { return _table.BytesReceived; } }\r\n        public override long BytesSent { get { return _table.BytesTransmitted; } }\r\n```\r\n\r\nwhere `_table.BytesReceived` and `_table.BytesTransmitted` returned in `StringParsingHelpers.ParseInterfaceStatisticsTableFromFile` are uint type which has a max value of 2^32 - 1. \r\n\r\nthe fix needs to be in the `corefx/src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/StringParsingHelpers.Statistics.cs` to use `long` type in the struct `IPInterfaceStatisticsTable`","Url":"https://github.com/dotnet/corefx/issues/34139","RelatedDescription":"Open issue \"BytesTransmitted and BytesReceived should be long type in LinuxIPInterfaceStatistics\" (#34139)"},{"Id":"391971432","IsPullRequest":true,"CreatedAt":"2018-12-18T08:23:05","Actor":"dotnet-maestro-bot","Number":"34138","RawContent":null,"Title":"Update CoreClr, CoreSetup to preview-27218-01, preview-27217-02, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34138","RelatedDescription":"Closed or merged PR \"Update CoreClr, CoreSetup to preview-27218-01, preview-27217-02, respectively (master)\" (#34138)"},{"Id":"391953393","IsPullRequest":true,"CreatedAt":"2018-12-18T03:39:24","Actor":"krwq","Number":"34137","RawContent":null,"Title":"Disable TimeZoneInfo_DisplayNameStartsWithOffset on Win 7","State":"closed","Body":"Fixes #34106 \r\n\r\nI do not see this test doing anything which could be improved. Win7 likely contains some invalid data in the registry since we don't do much in TZI code except for reading from registry","Url":"https://github.com/dotnet/corefx/pull/34137","RelatedDescription":"Closed or merged PR \"Disable TimeZoneInfo_DisplayNameStartsWithOffset on Win 7\" (#34137)"},{"Id":"391930388","IsPullRequest":true,"CreatedAt":"2018-12-18T01:00:38","Actor":"safern","Number":"34133","RawContent":null,"Title":"Add publish symbols to new official builds","State":"closed","Body":"With this the only thing left to remove the old builds is add FreeBSD which is next, and we should be getting agents soon and also update the versions repo 😄 \r\n\r\ncc: @danmosemsft","Url":"https://github.com/dotnet/corefx/pull/34133","RelatedDescription":"Closed or merged PR \"Add publish symbols to new official builds\" (#34133)"},{"Id":"391951672","IsPullRequest":false,"CreatedAt":"2018-12-18T00:53:02","Actor":"danmosemsft","Number":"34136","RawContent":null,"Title":"FormatDescription() on an EventRecord does not work if properties are passed in explicitly","State":"open","Body":"\r\nFrom user feedback at \r\nhttps://developercommunity.visualstudio.com/content/problem/385483/eventrecordformatdescriptionienumberable.html\r\n\r\nI verified this same issue exists in the code being ported to .NET Core here https://github.com/dotnet/corefx/pull/33662\r\n\r\n===========start report\r\nTLDR: The EventRecord.FormatDescription(IEnumerable<object> values) in the System.Diagnostics.Eventing namespace is not properly inserting the provided values, and is instead returning as if empty strings were supplied.\r\n\r\nAll testing has been performed on Windows 10, build 17134.345, with .NET Framework 4.7.2.  The project I'm using for testing/reproduction has been tested targeting .NET 4.0, .NET 4.5, .NET 4.5.2, .NET 4.6.2, and .NET 4.7.1, and all display the issue.  \r\n\r\nWhen calling EventRecord.FormatDescription() with no parameters, the event returns properly formatted, with an example shown below: \r\n\r\n\"Application 'C:\\Program Files\\Microsoft Office\\root\\Office16\\ONENOTEM.EXE' (pid 14832) cannot be restarted - Application SID does not match Conductor SID..\"\r\n\r\nHowever, there is an overload available, EventRecord.FormatDescription(IEnumerable<object> values), the function returns a string that essentially appears as if all the supplied values were empty.  Here's an example of the same event above called with the overload using all of the same property values (meaning the output should be identical):\r\n\r\n\"Application '' (pid 0) cannot be restarted - .\"\r\n\r\nI've tried both passing the event properties collection in directly, as well as preparing the parameters as a List<object> that is then cast to an IEnumerable<object> prior to passing it in in hopes of removing any odd conversion issues.\r\n\r\nI've stepped through the reference source, and the .NET framework isn't really doing any heavy lifting here, it's basically just a passthrough layer to the underlying WinEvt API, ultimately calling the function described here - https://docs.microsoft.com/en-us/windows/desktop/api/winevt/nf-winevt-evtformatmessage\r\n\r\n This leads me to believe one of two things is the case:\r\n\r\nOption 1: The .NET Framework is misusing the WinEvt API, perhaps failing to supply a proper value for one of the inputs or flags, and thus getting an odd result.  I'm really hoping this is the answer, as I think it would be the easiest to resolve.\r\n\r\nOption 2: The underlying WinEvt API is not working as expected even with a proper call.  I have no idea how to even begin debugging (or even reporting) an error at this layer, but I'm assuming the MS folks have the tools and connections to follow up on this.  \r\n\r\nThis seems to potentially have been reported as far back as 2007 (https://qa.social.msdn.microsoft.com/Forums/vstudio/en-US/7e0f9fd5-c421-4e13-ac02-211e51189305/how-to-use-eventrecordformatdescriptionienumerableobject?forum=netfxbcl), and I'm also seeing a recent StackOverflow issue that seems to be the same (https://stackoverflow.com/questions/53328834/cannot-get-eventrecord-formatdescriptionienumerableobject-to-work)\r\n\r\nI've posted basic reproduction code to a GitHub repo, available here: https://github.com/OperatorOverload/WinEventErrorRepro\r\n\r\n```c#\r\n            EventLogQuery eventsQuery = new EventLogQuery(\"Application\",\r\n                PathType.LogName, queryString);\r\n            EventLogReader = new EventLogReader(\"*[System/Level=3]\");\r\n\r\n            for (EventRecord eventInstance = logReader.ReadEvent();\r\n                    eventInstance != null; eventInstance = logReader.ReadEvent())\r\n            {\r\n                List<object> varRepSet = new List<object>();\r\n                for (int i = 0; i < eventInstance.Properties.Count; i++)\r\n                {\r\n                    varRepSet.Add((object)(eventInstance.Properties[i].Value.ToString()));\r\n                }\r\n\r\n                    //WORKS\r\n                    string description1 = eventInstance.FormatDescription();\r\n\r\n                    //BROKEN: format description with the built-in properties array\r\n                    string description2 = eventInstance.FormatDescription(eventInstance.Properties);\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/34136","RelatedDescription":"Open issue \"FormatDescription() on an EventRecord does not work if properties are passed in explicitly\" (#34136)"},{"Id":"391949211","IsPullRequest":true,"CreatedAt":"2018-12-18T00:42:08","Actor":"VasiliyNovikov","Number":"34135","RawContent":null,"Title":"Fixed IPv6 address parsing on Linux from /proc/net/tcp6, /proc/net/udp6","State":"open","Body":"Here is the current logic:\r\nhttps://github.com/dotnet/corefx/blob/f7539b726c4bc2385b7f49e5751c1cff2f2c7368/src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/StringParsingHelpers.Connections.cs#L297\r\n```cs\r\n            for (int i = 0; i < 16; i++)\r\n            {\r\n                addressBytes[i] = (byte)(HexToByte(hexAddress[(i * 2)])\r\n                                    + HexToByte(hexAddress[(i * 2) + 1]));\r\n            }\r\n```\r\nIt has 2 issues:\r\n1. It misses left shift by 4 bits of high peace of byte:\r\n2. It parses the whole sequence as a single byte array but instead it should parse it as sequence of 32-bit hex integers. \r\n\r\nAnd it was not caught in the tests since this logic was indirectly verified by itself.\r\nTest uses it to validate parsing of connections from /proc/net/tcp6:\r\nhttps://github.com/dotnet/corefx/blob/bed8a614c02bc24488a3208b80a5553f0e43b3d7/src/System.Net.NetworkInformation/tests/FunctionalTests/ConnectionsParsingTests.cs#L34\r\nUsage\r\nAnd parsing logic itself uses it:\r\nhttps://github.com/dotnet/corefx/blob/bed8a614c02bc24488a3208b80a5553f0e43b3d7/src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/StringParsingHelpers.Connections.cs#L240\r\n","Url":"https://github.com/dotnet/corefx/pull/34135","RelatedDescription":"Open PR \"Fixed IPv6 address parsing on Linux from /proc/net/tcp6, /proc/net/udp6\" (#34135)"},{"Id":"391946618","IsPullRequest":true,"CreatedAt":"2018-12-18T00:28:52","Actor":"Wraith2","Number":"34134","RawContent":null,"Title":"SqlClient minor memory improvements","State":"open","Body":"Some work was done in https://github.com/dotnet/corefx/pull/34047 to limit allocation of closures and move to explicit state passing for continuations. This PR continues/finishes that work and cleans up some of the async code to be more readable.\r\n\r\nAsyncHelper had a few methods which took unused parameters, either internal or external connections, with names that indicated those connections were going to be closed. The parameters were never used. I judged these to be dead code and eliminated the parameters and all call sites using them.\r\n\r\nthe function ContinueTaskPend was removed as dead code with no callers.\r\n\r\nI recommend looking at the changes side by side, the inline diff makes them look confusing\r\n\r\n/cc @saurabh500 @AfsanehR @keeratsingh ","Url":"https://github.com/dotnet/corefx/pull/34134","RelatedDescription":"Open PR \"SqlClient minor memory improvements\" (#34134)"},{"Id":"391859122","IsPullRequest":true,"CreatedAt":"2018-12-17T23:44:43","Actor":"safern","Number":"34128","RawContent":null,"Title":"Disable isExternal in helix tests for new CI system for now","State":"closed","Body":"Right now the username is not retrievable in a simple manner rather than adding an extra step where we do a web request and parse the result.\r\n\r\ncc: @danmosemsft \r\n\r\n@dotnet-bot skip CI please","Url":"https://github.com/dotnet/corefx/pull/34128","RelatedDescription":"Closed or merged PR \"Disable isExternal in helix tests for new CI system for now\" (#34128)"},{"Id":"391917335","IsPullRequest":true,"CreatedAt":"2018-12-17T22:31:08","Actor":"wfurt","Number":"34132","RawContent":null,"Title":"update IPv6 parsing for tcp info","State":"open","Body":"fixes #33257 \r\n\r\nThis would be found long time ago if tests did not use same function we test for validation.\r\n\r\nThere were two issues with the implementation:\r\n- when we calculate byte value we need to shift first digit by 4 bits to get upper half of the byte instead of simply adding them together.\r\n- The hex value is written out as four network-byte integers instead of monolithic sequence we assume.   \r\n \r\nI updated existing tests as well as I added one more entry with global IPv6 unicast and I verified that we get same result as `netstat -W -6 -tn`\r\n","Url":"https://github.com/dotnet/corefx/pull/34132","RelatedDescription":"Open PR \"update IPv6 parsing for tcp info\" (#34132)"},{"Id":"391902574","IsPullRequest":true,"CreatedAt":"2018-12-17T21:45:23","Actor":"geoffkizer","Number":"34131","RawContent":null,"Title":"HTTP2: Respect SETTINGS_INITIAL_WINDOW_SIZE and rework SendAsync code structure","State":"open","Body":"Fixes #34059 \r\n\r\nUpdate: I pushed another commit that also implements SETTINGS_MAX_CONCURRENT_STREAMS.\r\n\r\nFixes #31296 \r\nFixes #31514 \r\nFixes #31812\r\nFixes #31813\r\n\r\n@dotnet/ncl ","Url":"https://github.com/dotnet/corefx/pull/34131","RelatedDescription":"Open PR \"HTTP2: Respect SETTINGS_INITIAL_WINDOW_SIZE and rework SendAsync code structure\" (#34131)"},{"Id":"391878752","IsPullRequest":true,"CreatedAt":"2018-12-17T20:32:30","Actor":"Marusyk","Number":"34129","RawContent":null,"Title":" System.Security.Cryptography.Pkcs. Refactor DllImports","State":"open","Body":"Issue #33774\r\n\r\nShould I also move all SafeHandles from `System.Security.Cryptography.Pkcs\\src\\Microsoft\\Win32\\SafeHandles` to `Common\\src\\Microsoft\\Win32\\SafeHandles` ?\r\n\r\nBased on #33988\r\n\r\nPlease review","Url":"https://github.com/dotnet/corefx/pull/34129","RelatedDescription":"Open PR \" System.Security.Cryptography.Pkcs. Refactor DllImports\" (#34129)"},{"Id":"391840984","IsPullRequest":false,"CreatedAt":"2018-12-17T18:41:40","Actor":"Tanya-Solyanik","Number":"34127","RawContent":null,"Title":"There is some unprintable characters(&#39) in intellisense description text of System.Drawing.ColorConverter.ConvertFrom() method in the .NET Core app","State":"open","Body":"\r\nVS: Visual Studio 2019 Version 16.0 Preview 1 28329.73\r\nOS: RS6 X64\r\n.NET Version: .NET 4.8 03702.00\r\n.NET SDK: .NET Core 3.0 3.0.100-preview-009812\r\n \r\nSteps to reproduce:\r\nInstall .NET Core 3.0 SDK available from https://github.com/dotnet/core-sdk.\r\nCreate a new WinForms application by using .net core SDK command(e.g. dotnet new winforms –o “MyApp”).\r\nOpen the project, then add System.Drawing.ColorConverter.ConvertFrom() method to buttonExit_Click event.\r\nLook at the intellisense.\r\n Actual:\r\nThe ‘converter’s’ is changed as ‘converter&#39‘.\r\n\r\nVS: Visual Studio 2019 Version 16.0 Preview 1 28329.73\r\nOS: RS6 X64\r\n.NET Version: .NET 4.8 03702.00\r\n.NET SDK: .NET Core 3.0 3.0.100-preview-009812\r\n \r\nSteps to reproduce:\r\nInstall .NET Core 3.0 SDK available from https://github.com/dotnet/core-sdk.\r\nCreate a new WinForms application by using .net core SDK command(e.g. dotnet new winforms –o “MyApp”).\r\nOpen the project, then add System.Drawing.ColorConverter.ConvertFrom() method to buttonExit_Click event.\r\nLook at the intelligence.\r\n Actual:\r\nThe ‘converter’s’ is changed as ‘converter&#39‘.\r\n![image](https://user-images.githubusercontent.com/15823268/50107458-a511ef80-01e7-11e9-9ea6-3b57fe78b471.png)\r\n\r\n\r\nExpected:\r\nThe correct string should be ‘converter’s’.\r\n\r\n![image](https://user-images.githubusercontent.com/15823268/50107483-b5c26580-01e7-11e9-97ab-4706cc3d7410.png)\r\n\r\n\r\n\r\nsrc/System.Drawing.Common/src/System/Drawing/ColorConverter.cs#L121\r\n///      Converts the given object to the **converter's** native type.\r\n\r\nOn build SDK: 3.0.100-preview-009839 `ConvertFrom` method does not show in intellisense at all. \r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/34127","RelatedDescription":"Open issue \"There is some unprintable characters(&#39) in intellisense description text of System.Drawing.ColorConverter.ConvertFrom() method in the .NET Core app\" (#34127)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"392434053","IsPullRequest":false,"CreatedAt":"2018-12-19T05:00:46","Actor":"jaredpar","Number":"31934","RawContent":null,"Title":"Cannot build the repository","State":"closed","Body":"I'm on master using 15.9 latest and I cannot build our repository anymore. Whenever I build I get the following error: \r\n\r\n> C:\\Users\\jaredpar\\code\\roslyn\\src\\ExpressionEvaluator\\Core\\Source\\FunctionResolver\\MetadataDecoder.cs(18,13): err or CS0012: The type 'ValueType' is defined in an assembly that is not referenced. You must add a reference to ass embly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'. [C:\\Users\\jaredpar\\code\\r oslyn\\src\\ExpressionEvaluator\\Core\\Source\\FunctionResolver\\Microsoft.CodeAnalysis.FunctionResolver.csproj]\r\n\r\nI've tried all manner of debugging this:\r\n\r\n- Cleaned my enlistment (`git clean -dfx .`)\r\n- Ran Restore.cmd and manually `msbuild /t:restore` \r\n- Updated my VS and dotnet installs (15.9 latest and 2.1.401) \r\n- Looked into the binary log and there is nothnig interesting there. ","Url":"https://github.com/dotnet/roslyn/issues/31934","RelatedDescription":"Closed issue \"Cannot build the repository\" (#31934)"},{"Id":"392425744","IsPullRequest":true,"CreatedAt":"2018-12-19T04:55:37","Actor":"jaredpar","Number":"31932","RawContent":null,"Title":"Disable warn as error in build correctness","State":"closed","Body":"This re-establishes our warning only behavior for the build correctness\r\nleg. Fixes a regression introduced in #31913","Url":"https://github.com/dotnet/roslyn/pull/31932","RelatedDescription":"Closed or merged PR \"Disable warn as error in build correctness\" (#31932)"},{"Id":"392397109","IsPullRequest":true,"CreatedAt":"2018-12-19T04:20:46","Actor":"JoeRobich","Number":"31927","RawContent":null,"Title":"Set the ulimit higher to avoid too many open files when running build.sh","State":"closed","Body":"Many builds have been failing the Linux_Test coreclr build with Too many open files.\r\n\r\n```console\r\n2018-12-18T21:04:36.3036095Z   Restoring packages for /data/agent/_work/7/s/src/CodeStyle/CSharp/Tests/Microsoft.CodeAnalysis.CSharp.CodeStyle.UnitTests.csproj...\r\n2018-12-18T21:04:36.3107197Z   Restoring packages for /data/agent/_work/7/s/src/CodeStyle/Core/Analyzers/Microsoft.CodeAnalysis.CodeStyle.csproj...\r\n2018-12-18T21:04:37.9511911Z   Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/roslyn-tools/nuget/v3/flatcontainer/system.threading.tasks.parallel/index.json'.\r\n2018-12-18T21:04:37.9512179Z   Too many open files in system\r\n2018-12-18T21:04:37.9512597Z   Retrying 'FindPackagesByIdAsync' for source 'https://api.nuget.org/v3-flatcontainer/system.text.regularexpressions/index.json'.\r\n2018-12-18T21:04:37.9512669Z   Too many open files\r\n2018-12-18T21:04:37.9513048Z   Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/roslyn-tools/nuget/v3/flatcontainer/system.threading.tasks.parallel/index.json'.\r\n2018-12-18T21:04:37.9513175Z   Too many open files in system\r\n2018-12-18T21:04:37.9513557Z   Retrying 'FindPackagesByIdAsync' for source 'https://dotnetmyget.blob.core.windows.net/artifacts/symreader-native/nuget/v3/flatcontainer/system.text.regularexpressions/index.json'.\r\n2018-12-18T21:04:37.9513628Z   Too many open files in system\r\n```\r\n\r\nFor example attempts 1 and 2 from this build for #31648 - [Logs](https://dnceng.visualstudio.com/public/_build/results?buildId=60451)","Url":"https://github.com/dotnet/roslyn/pull/31927","RelatedDescription":"Closed or merged PR \"Set the ulimit higher to avoid too many open files when running build.sh\" (#31927)"},{"Id":"392426763","IsPullRequest":true,"CreatedAt":"2018-12-19T03:31:29","Actor":"sharwell","Number":"31933","RawContent":null,"Title":"Fix formatting error","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/31933","RelatedDescription":"Open PR \"Fix formatting error\" (#31933)"},{"Id":"392423365","IsPullRequest":true,"CreatedAt":"2018-12-19T03:12:42","Actor":"Cosifne","Number":"31931","RawContent":null,"Title":"SetupAuthoring for Roslyn localization","State":"open","Body":"[Issue](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/723558)\r\nSo this PR will enable \r\nExpressionEvaluatorPackage.vsix, Roslyn.VisualStudio.InteractiveComponents.vsix and Roslyn.VisualStudio.Setup.vsix contains the Satellite Dlls.\r\n\r\nAs for Microsoft.CodeAnalysis.Compilers.vsix, I checked my current VS2017 directory under C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn and there is no Resources file in there, so I guess it won't need it. @tmeschter for double check.\r\n ","Url":"https://github.com/dotnet/roslyn/pull/31931","RelatedDescription":"Open PR \"SetupAuthoring for Roslyn localization\" (#31931)"},{"Id":"392404752","IsPullRequest":false,"CreatedAt":"2018-12-19T01:32:09","Actor":"gafter","Number":"31930","RawContent":null,"Title":"Need an IOperation for C# switch expression","State":"open","Body":"We need to design, implement, and test an IOperation node for the C# switch expression.\r\n","Url":"https://github.com/dotnet/roslyn/issues/31930","RelatedDescription":"Open issue \"Need an IOperation for C# switch expression\" (#31930)"},{"Id":"392333588","IsPullRequest":true,"CreatedAt":"2018-12-19T01:15:29","Actor":"tmat","Number":"31915","RawContent":null,"Title":"Enable Arcade dependency flow","State":"closed","Body":"Enables flowing Arcade scripts and SDK automatically to Roslyn.\r\n\r\nThis means that Roslyn will receive auto-generated and auto-merged PRs that \r\n1) update global.json to the latest Arcade SDK\r\n2) update scripts in `eng/common` to exactly match the ones in Arcade repo (https://github.com/dotnet/arcade/tree/master/eng/common)\r\nAny changes made to these scripts in Roslyn repo will be discarded.\r\n3) Updates `eng/Versions.Details.xml`, which tracks dependencies across .NET Core stack.\r\n\r\nDetails can be found at https://github.com/dotnet/arcade/blob/master/Documentation/DependencyFlowOnboarding.md\r\n","Url":"https://github.com/dotnet/roslyn/pull/31915","RelatedDescription":"Closed or merged PR \"Enable Arcade dependency flow\" (#31915)"},{"Id":"392329836","IsPullRequest":true,"CreatedAt":"2018-12-19T00:58:32","Actor":"Meir017","Number":"31914","RawContent":null,"Title":"use more nameof keyword for generate code","State":"closed","Body":"This will cleanup the file [`Syntax.xml.Main.Generated.cs`](https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/Generated/Syntax.xml.Main.Generated.cs#L4301) and use `nameof` instead of constant strings","Url":"https://github.com/dotnet/roslyn/pull/31914","RelatedDescription":"Closed or merged PR \"use more nameof keyword for generate code\" (#31914)"},{"Id":"392398015","IsPullRequest":true,"CreatedAt":"2018-12-19T00:58:15","Actor":"sandyarmstrong","Number":"31929","RawContent":null,"Title":"EditorFeatures.Text IVTs for MonoDevelop","State":"open","Body":"Since https://github.com/dotnet/roslyn/pull/30868, `ContentTypeNames`\r\nhas moved to this assembly. Type forwarding doesn't seem to work for\r\nIVT.","Url":"https://github.com/dotnet/roslyn/pull/31929","RelatedDescription":"Open PR \"EditorFeatures.Text IVTs for MonoDevelop\" (#31929)"},{"Id":"392397522","IsPullRequest":false,"CreatedAt":"2018-12-19T00:55:45","Actor":"akshita31","Number":"31928","RawContent":null,"Title":"VersionStamp throwing contract fail error when running in docker container","State":"open","Body":"**Version Used**: \r\n2.9.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a xunit project - `dotnet new xunit` and inside a microsoft/dotnet:2.1.403-sdk-alpine\r\n2. Invoke the CompletionService.GetCompletionAsync for `Assert.` (I am using roslyn as an API and not in VisualStudio)\r\n\r\n**Expected Behavior**:\r\nCompletion is obtained\r\n\r\n**Actual Behavior**:\r\nException is thrown : \r\nException has occurred: CLR/System.InvalidOperationException\r\nException thrown: 'System.InvalidOperationException' in Microsoft.CodeAnalysis.Workspaces.dll: 'Unexpected false'\r\n   at Roslyn.Utilities.Contract.Fail(String message) in D:\\roslyn\\src\\Workspaces\\Core\\Portable\\Utilities\\Contract.cs:line 52\r\n\r\nHere is the call stack: \r\n<details>\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.Contract.Fail(string message) Line 52 (Contract.cs:52)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.Contract.ThrowIfFalse(bool condition, string message) Line 32 (Contract.cs:32)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.VersionStamp.VersionStamp(System.DateTime utcLastModified, int localIncrement, int globalIncrement) Line 55 (VersionStamp.cs:55)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.VersionStamp.GetNewerVersion(Microsoft.CodeAnalysis.VersionStamp version) Line 113 (VersionStamp.cs:113)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.ProjectState.ComputeLatestDocumentTopLevelChangeVersionAsync(System.Collections.Immutable.IImmutableDictionary<Microsoft.CodeAnalysis.DocumentId, Microsoft.CodeAnalysis.DocumentState> documentStates, System.Collections.Immutable.IImmutableDictionary<Microsoft.CodeAnalysis.DocumentId, Microsoft.CodeAnalysis.TextDocumentState> additionalDocumentStates, System.Threading.CancellationToken cancellationToken) Line 199 (ProjectState.cs:199)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.ProjectState..ctor.AnonymousMethod__5(System.Threading.CancellationToken c) Line 104 (ProjectState.cs:104)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.AsyncLazy<Microsoft.CodeAnalysis.VersionStamp>.StartAsynchronousComputation(Roslyn.Utilities.AsyncLazy<Microsoft.CodeAnalysis.VersionStamp>.AsynchronousComputationToStart computationToStart, Roslyn.Utilities.AsyncLazy<Microsoft.CodeAnalysis.VersionStamp>.Request requestToCompleteSynchronously, System.Threading.CancellationToken callerCancellationToken) Line 388 (AsyncLazy`1.cs:388)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.AsyncLazy<Microsoft.CodeAnalysis.VersionStamp>.GetValueAsync(System.Threading.CancellationToken cancellationToken) Line 344 (AsyncLazy`1.cs:344)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.ProjectState.GetLatestDocumentTopLevelChangeVersionAsync(System.Threading.CancellationToken cancellationToken) Line 250 (ProjectState.cs:250)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.ProjectState.GetSemanticVersionAsync(System.Threading.CancellationToken cancellationToken) Line 255 (ProjectState.cs:255)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.ComputeDependentSemanticVersionAsync(Microsoft.CodeAnalysis.SolutionState solution, System.Threading.CancellationToken cancellationToken) Line 909 (SolutionState.CompilationTracker.cs:909)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.GetDependentSemanticVersionAsync.AnonymousMethod__0(System.Threading.CancellationToken c) Line 900 (SolutionState.CompilationTracker.cs:900)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.AsyncLazy<Microsoft.CodeAnalysis.VersionStamp>.StartAsynchronousComputation(Roslyn.Utilities.AsyncLazy<Microsoft.CodeAnalysis.VersionStamp>.AsynchronousComputationToStart computationToStart, Roslyn.Utilities.AsyncLazy<Microsoft.CodeAnalysis.VersionStamp>.Request requestToCompleteSynchronously, System.Threading.CancellationToken callerCancellationToken) Line 388 (AsyncLazy`1.cs:388)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.AsyncLazy<Microsoft.CodeAnalysis.VersionStamp>.GetValueAsync(System.Threading.CancellationToken cancellationToken) Line 344 (AsyncLazy`1.cs:344)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.GetDependentSemanticVersionAsync(Microsoft.CodeAnalysis.SolutionState solution, System.Threading.CancellationToken cancellationToken) Line 903 (SolutionState.CompilationTracker.cs:903)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.GetDependentSemanticVersionAsync(Microsoft.CodeAnalysis.ProjectId projectId, System.Threading.CancellationToken cancellationToken) Line 353 (SolutionState.cs:353)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Project.GetDependentSemanticVersionAsync(System.Threading.CancellationToken cancellationToken) Line 336 (Project.cs:336)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SemanticModelWorkspaceService.SemanticModelWorkspaceServiceFactory.SemanticModelService.GetSemanticModelForNodeAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.SyntaxNode node, System.Threading.CancellationToken cancellationToken) Line 58 (SemanticModelWorkspaceServiceFactory.cs:58)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.GetSemanticModelForNodeAsync(Microsoft.CodeAnalysis.SemanticModelWorkspaceService.ISemanticModelService semanticModelService, Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsService syntaxFactService, Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.SyntaxNode node, Microsoft.CodeAnalysis.Text.TextSpan span, System.Threading.CancellationToken cancellationToken) Line 108 (DocumentExtensions.cs:108)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.GetSemanticModelForSpanAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan span, System.Threading.CancellationToken cancellationToken) Line 66 (DocumentExtensions.cs:66)\r\nMicrosoft.CodeAnalysis.CSharp.Features.dll!Microsoft.CodeAnalysis.CSharp.Completion.Providers.ExplicitInterfaceMemberCompletionProvider.ProvideCompletionsAsync(Microsoft.CodeAnalysis.Completion.CompletionContext context) Line 51 (ExplicitInterfaceMemberCompletionProvider.cs:51)\r\nMicrosoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.GetContextAsync(Microsoft.CodeAnalysis.Completion.CompletionProvider provider, Microsoft.CodeAnalysis.Document document, int position, Microsoft.CodeAnalysis.Completion.CompletionTrigger triggerInfo, Microsoft.CodeAnalysis.Options.OptionSet options, Microsoft.CodeAnalysis.Text.TextSpan? defaultSpan, System.Threading.CancellationToken cancellationToken) Line 457 (CompletionServiceWithProviders.cs:457)\r\nMicrosoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.ComputeNonEmptyCompletionContextsAsync(Microsoft.CodeAnalysis.Document document, int caretPosition, Microsoft.CodeAnalysis.Completion.CompletionTrigger trigger, Microsoft.CodeAnalysis.Options.OptionSet options, Microsoft.CodeAnalysis.Text.TextSpan defaultItemSpan, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Completion.CompletionProvider> providers, System.Threading.CancellationToken cancellationToken) Line 314 (CompletionServiceWithProviders.cs:314)\r\nMicrosoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.Completion.CompletionServiceWithProviders.GetCompletionsAsync(Microsoft.CodeAnalysis.Document document, int caretPosition, Microsoft.CodeAnalysis.Completion.CompletionTrigger trigger, System.Collections.Immutable.ImmutableHashSet<string> roles, Microsoft.CodeAnalysis.Options.OptionSet options, System.Threading.CancellationToken cancellationToken) Line 249 (CompletionServiceWithProviders.cs:249)\r\nWorkspaceServer.dll!WorkspaceServer.Servers.Roslyn.RoslynWorkspaceServer.GetCompletionList(MLS.Protocol.WorkspaceRequest request, Clockwise.Budget budget) Line 79 (c:\\Users\\akagarw\\try.dot.net\\MLS-Agent\\WorkspaceServer\\Servers\\Roslyn\\RoslynWorkspaceServer.cs:79)\r\n[Resuming Async Method] (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder<MLS.Protocol.Completion.CompletionResult>.AsyncStateMachineBox<WorkspaceServer.Servers.Roslyn.RoslynWorkspaceServer.<GetCompletionList>d__8>.MoveNext() (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox box, bool allowInlining) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.RunContinuations(object continuationObject) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task<(System.__Canon, System.__Canon)>.TrySetResult((System.__Canon, System.__Canon) result) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder<(Microsoft.CodeAnalysis.Compilation, System.Collections.Generic.IReadOnlyCollection<Microsoft.CodeAnalysis.Document>)>.SetExistingTaskResult((Microsoft.CodeAnalysis.Compilation, System.Collections.Generic.IReadOnlyCollection<Microsoft.CodeAnalysis.Document>) result) (Unknown Source:0)\r\nWorkspaceServer.dll!WorkspaceServer.Servers.Roslyn.WorkspaceBuildExtensions.GetCompilation(WorkspaceServer.Workspaces.WorkspaceBuild build, System.Collections.Generic.IReadOnlyCollection<MLS.Project.Execution.SourceFile> sources, Clockwise.Budget budget) Line 144 (c:\\Users\\akagarw\\try.dot.net\\MLS-Agent\\WorkspaceServer\\Servers\\Roslyn\\WorkspaceBuildExtensions.cs:144)\r\n[Resuming Async Method] (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder<(Microsoft.CodeAnalysis.Compilation, System.Collections.Generic.IReadOnlyCollection<Microsoft.CodeAnalysis.Document>)>.AsyncStateMachineBox<WorkspaceServer.Servers.Roslyn.WorkspaceBuildExtensions.<GetCompilation>d__2>.MoveNext() (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox box, bool allowInlining) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.RunContinuations(object continuationObject) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task<System.__Canon>.TrySetResult(System.__Canon result) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.Compilation>.SetExistingTaskResult(Microsoft.CodeAnalysis.Compilation result) (Unknown Source:0)\r\nClockwise.dll!Clockwise.BudgetExtensions.CancelIfExceeds<Microsoft.CodeAnalysis.Compilation>(System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Compilation> task, Clockwise.Budget budget, System.Func<Microsoft.CodeAnalysis.Compilation> ifCancelled) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.Compilation>.AsyncStateMachineBox<Clockwise.BudgetExtensions.<CancelIfExceeds>d__1<Microsoft.CodeAnalysis.Compilation>>.MoveNext() (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox box, bool allowInlining) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.RunContinuations(object continuationObject) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task<System.__Canon>.TrySetResult(System.__Canon result) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.Compilation>.SetExistingTaskResult(Microsoft.CodeAnalysis.Compilation result) (Unknown Source:0)\r\nClockwise.dll!Clockwise.TaskExtensions.CancelAfter<Microsoft.CodeAnalysis.Compilation>(System.Threading.Tasks.Task<Microsoft.CodeAnalysis.Compilation> task, System.Threading.CancellationToken cancellationToken, System.Func<Microsoft.CodeAnalysis.Compilation> ifCancelled) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.Compilation>.AsyncStateMachineBox<Clockwise.TaskExtensions.<CancelAfter>d__0<Microsoft.CodeAnalysis.Compilation>>.MoveNext() (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(System.Runtime.CompilerServices.IAsyncStateMachineBox box, bool allowInlining) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.RunContinuations(object continuationObject) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task<System.__Canon>.TrySetResult(System.__Canon result) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.TaskFactory.CompleteOnInvokePromise.Invoke(System.Threading.Tasks.Task completingTask) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.RunContinuations(object continuationObject) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.Tasks.Task<System.__Canon>.TrySetResult(System.__Canon result) (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Runtime.CompilerServices.AsyncTaskMethodBuilder<Microsoft.CodeAnalysis.Compilation>.SetExistingTaskResult(Microsoft.CodeAnalysis.Compilation result) (Unknown Source:0)\r\nMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.SolutionState.CompilationTracker.GetCompilationSlowAsync(Microsoft.CodeAnalysis.SolutionState solution, System.Threading.CancellationToken cancellationToken) Line 323 (SolutionState.CompilationTracker.cs:323)\r\n[Resuming Async Method] (Unknown Source:0)\r\nSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) (Unknown Source:0)\r\n\r\n</details>\r\n\r\nAnalysis\r\n\r\n1. I am using this code inside my service. And it is important to note here that I am getting this exception only for the completions and only for an xunit project. Also when I run it locally on my Windows machine and even on a Linux machine everything works fine. Only when running inside the above mentioned docker container the error occurs.\r\n2. The same code path get exercised for the \"console\" project in my service and everything works fine for it.\r\n2. The VersionStamp constructor is throwing the error on the condition that the datetime kind is \"Local\" and not a \"Utc\". http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Workspace/Solution/VersionStamp.cs,55\r\n","Url":"https://github.com/dotnet/roslyn/issues/31928","RelatedDescription":"Open issue \"VersionStamp throwing contract fail error when running in docker container\" (#31928)"},{"Id":"392386239","IsPullRequest":true,"CreatedAt":"2018-12-19T00:00:36","Actor":"dotnet-bot","Number":"31926","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"open","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31926","RelatedDescription":"Open PR \"Merge master to features/editorconfig-in-compiler\" (#31926)"},{"Id":"392386203","IsPullRequest":true,"CreatedAt":"2018-12-19T00:00:28","Actor":"dotnet-bot","Number":"31925","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31925","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#31925)"},{"Id":"392386156","IsPullRequest":true,"CreatedAt":"2018-12-19T00:00:17","Actor":"dotnet-bot","Number":"31924","RawContent":null,"Title":"Merge dev16.0.x-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.0.x-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0.x-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0.x-vs-deps\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.0.x-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31924","RelatedDescription":"Open PR \"Merge dev16.0.x-vs-deps to master-vs-deps\" (#31924)"},{"Id":"392348676","IsPullRequest":true,"CreatedAt":"2018-12-18T23:55:49","Actor":"AlekseyTs","Number":"31919","RawContent":null,"Title":"Rename members of NullableContextOptions enum.","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/31919","RelatedDescription":"Closed or merged PR \"Rename members of NullableContextOptions enum.\" (#31919)"},{"Id":"392380455","IsPullRequest":true,"CreatedAt":"2018-12-18T23:34:23","Actor":"Meir017","Number":"31923","RawContent":null,"Title":"[WIP] use cleaner syntax for C# Generated.cs files","State":"open","Body":"waiting for #31914 \r\n\r\nsummary of changes:\r\n\r\n- [ ] use lambda-expression for one-line methods\r\n- [ ] move each test class into it's own namespace block and use the specific using statement in it to simplify the code  `\\src\\Compilers\\CSharp\\Test\\Syntax\\Generated\\Syntax.Test.xml.Generated.cs`","Url":"https://github.com/dotnet/roslyn/pull/31923","RelatedDescription":"Open PR \"[WIP] use cleaner syntax for C# Generated.cs files\" (#31923)"},{"Id":"392341492","IsPullRequest":true,"CreatedAt":"2018-12-18T23:14:34","Actor":"agocke","Number":"31917","RawContent":null,"Title":"Remove last PROTOTYPE comment and add reference to bug","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/31917","RelatedDescription":"Closed or merged PR \"Remove last PROTOTYPE comment and add reference to bug\" (#31917)"},{"Id":"392375588","IsPullRequest":false,"CreatedAt":"2018-12-18T23:13:55","Actor":"AmadeusW","Number":"31922","RawContent":null,"Title":"AsyncCompletion in Debugger: potential commit chars is empty","State":"open","Body":"**Version Used**: 28417.110.d16.0stg\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Launch completion in a debugger text view\r\n2. Observe the potential commit characters returned by the implementation of `IAsyncCompletionCommitManager`\r\n\r\n**Expected Behavior**:\r\nCompletion commits when I press dot, space or parenthesis\r\n\r\n**Actual Behavior**:\r\nCompletion dismisses when I press dot, space or parenthesis\r\n\r\n![image](https://user-images.githubusercontent.com/1673956/50188729-678c8f80-02d7-11e9-8d16-f70285395164.png)","Url":"https://github.com/dotnet/roslyn/issues/31922","RelatedDescription":"Open issue \"AsyncCompletion in Debugger: potential commit chars is empty\" (#31922)"},{"Id":"392323157","IsPullRequest":true,"CreatedAt":"2018-12-18T22:27:06","Actor":"tmat","Number":"31913","RawContent":null,"Title":"Update enc/common/tools to the latest","State":"closed","Body":"Fixes sign build issue.","Url":"https://github.com/dotnet/roslyn/pull/31913","RelatedDescription":"Closed or merged PR \"Update enc/common/tools to the latest\" (#31913)"},{"Id":"392361885","IsPullRequest":true,"CreatedAt":"2018-12-18T22:25:56","Actor":"gafter","Number":"31921","RawContent":null,"Title":"Add test to record order of evaluation.","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/31921","RelatedDescription":"Open PR \"Add test to record order of evaluation.\" (#31921)"},{"Id":"392360019","IsPullRequest":true,"CreatedAt":"2018-12-18T22:19:27","Actor":"gafter","Number":"31920","RawContent":null,"Title":"MatchFailureException to SwitchExpressionException","State":"open","Body":"Fixes #31911","Url":"https://github.com/dotnet/roslyn/pull/31920","RelatedDescription":"Open PR \"MatchFailureException to SwitchExpressionException\" (#31920)"},{"Id":"392297571","IsPullRequest":true,"CreatedAt":"2018-12-18T21:41:12","Actor":"sharwell","Number":"31910","RawContent":null,"Title":"Add missing .editorconfig formatting settings","State":"closed","Body":"These settings are already applied by Formatting Analyzer during builds, but might get overridden by user settings when attempting to format documents inside the IDE. Explicitly specifying the options in\r\n.editorconfig means the options are uniformly applied inside and outside the IDE.","Url":"https://github.com/dotnet/roslyn/pull/31910","RelatedDescription":"Closed or merged PR \"Add missing .editorconfig formatting settings\" (#31910)"},{"Id":"392345137","IsPullRequest":true,"CreatedAt":"2018-12-18T21:34:10","Actor":"chborl","Number":"31918","RawContent":null,"Title":"Keybinding reset gold bar is displayed when not applicable","State":"open","Body":"Fix for reverted PR: #31132\r\n\r\nFixes https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_workitems/edit/659765\r\n\r\nIn some scenarios we display the gold bar with \"We notice you suspended 'ReSharper Ultimate'. Reset Keymappings to continue to navigate and refactor\" when ReSharper is in fact running. This occurs when launching VS by opening a project that takes a while to load, for example a project that last had a XAML page open.\r\n\r\nWe originally did a single check for ReSharper's Suspend button; if it was active ReSharper was assumed to be running, if not it was assumed to be suspended.\r\n\r\nThis fix will instead periodically check for ReSharper's Resume button to be active, and if that doesn't occur after a reasonable amount of time will assume ReSharper is running.","Url":"https://github.com/dotnet/roslyn/pull/31918","RelatedDescription":"Open PR \"Keybinding reset gold bar is displayed when not applicable\" (#31918)"},{"Id":"392339633","IsPullRequest":false,"CreatedAt":"2018-12-18T21:17:53","Actor":"agocke","Number":"31916","RawContent":null,"Title":"EditorConfig settings don't apply to diagnostics with locations in AdditionalFiles","State":"open","Body":"The root of this issue is what to do about the APIs.\r\n\r\nRight now, all the diagnostic options that are applied by the compiler are either on the CompilationOptions or on the SyntaxTree. For AdditionalFiles, the most logical analogous place is directly on the AdditionalText class. However, the compiler never sees this class, so it can't be used for filtering. Moreover, the source of a SyntaxTree for diagnostic filtering is the `Location`, which has a `SyntaxTree` property. There's no corresponding `AdditionalFile` to grab off the location.\r\n\r\nEven worse, the way that Locations are produced right now, if you want to create a diagnostic in an AdditionalFile, you must pass the file path, not an AdditionalFile. So if we want to let EditorConfig files filter diagnostics already created on AdditionalFiles, we have to actually map a path, not an AdditionalFile.\r\n\r\nThe question is how to do this and where to add the APIs.","Url":"https://github.com/dotnet/roslyn/issues/31916","RelatedDescription":"Open issue \"EditorConfig settings don't apply to diagnostics with locations in AdditionalFiles\" (#31916)"},{"Id":"392320934","IsPullRequest":false,"CreatedAt":"2018-12-18T20:23:00","Actor":"johnkellyoxford","Number":"31912","RawContent":null,"Title":"C# compiler should recognise #nullable and prevent CS8632 occurring within #nullable blocks","State":"open","Body":"**Version Used**: VS 2019 Preview 1, C# 8.0 beta, <NullableReferenceTypes> true in .csproj\r\n\r\n**Steps to Reproduce**:\r\nBuild this:\r\n```\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Security.Cryptography;\r\n\r\nnamespace Playground\r\n{\r\n    internal static class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n#nullable enable\r\n            string? a;\r\n            #nullable disable\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nAll good, except for the unused warning\r\n\r\n**Actual Behavior**:\r\n\"Warning\tAD0001\tAnalyzer 'Microsoft.CodeAnalysis.Formatting.FormattingDiagnosticAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'Unexpected false'.\"","Url":"https://github.com/dotnet/roslyn/issues/31912","RelatedDescription":"Open issue \"C# compiler should recognise #nullable and prevent CS8632 occurring within #nullable blocks\" (#31912)"},{"Id":"392312310","IsPullRequest":false,"CreatedAt":"2018-12-18T19:59:16","Actor":"gafter","Number":"31911","RawContent":null,"Title":"Rename System.MatchFailureException to System.Runtime.CompilerServices.SwitchExpressionException","State":"open","Body":"See the change in https://github.com/dotnet/corefx/issues/33284#issuecomment-448332714 to the proposed `System.MatchFailureException`, which is now `System.Runtime.CompilerServices.SwitchExpressionException `.  Adjust the compiler and tests accordingly.","Url":"https://github.com/dotnet/roslyn/issues/31911","RelatedDescription":"Open issue \"Rename System.MatchFailureException to System.Runtime.CompilerServices.SwitchExpressionException\" (#31911)"},{"Id":"392279365","IsPullRequest":false,"CreatedAt":"2018-12-18T18:25:11","Actor":"TessenR","Number":"31909","RawContent":null,"Title":"Dereference doesn't update null state if there's an unrelated conditional qualifier","State":"open","Body":"**Version Used**: \r\n\r\nBranch master (28 Oct 2018)\r\nLatest commit bfade8 by Sam Harwell:\r\nMerge pull request #30815 from eladeyal-intel/patch-1\r\n\r\nDelete 0\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile the following code\r\n```cs\r\n#nullable enable\r\nclass C\r\n{\r\n  public C? f;\r\n  public int? Test1(C? c) => c?.f.M(c.f.ToString()); \r\n  public int? Test2(C? c) => c.f.M(c.f.ToString()); \r\n  public int M(string s) => s.Length;\r\n}\r\n```\r\n\r\nhttps://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABAJgoGFGBvRiipgMwcA/BQBmAbl78hAS1wxRAFTiwAjAAp2ogMYBKCgF4AfBR3CAdGIsBZDTqsWlAewDKMBPIDmGvXokU0oIU8ooUKrAsWroGJmaOdg7WLu6euD5+AUFyChR2TGoADBRQsaZQFgAy1F4wABZSDAC+QA==\r\n\r\n**Expected Behavior**:\r\n\r\nSingle warning for dereferencing `c.f` in `Test1` according to https://github.com/dotnet/roslyn/issues/26749\r\n\r\n**Actual Behavior**:\r\n\r\nCS8602 is reported multiple times for subsequent dereferences of `c.f` if there's a conditional access in the first dereference (i.e. the problem is present in`Test1` but not in `Test2`)\r\n```\r\n    warning CS8602: Possible dereference of a null reference.\r\n    warning CS8602: Possible dereference of a null reference.\r\n    warning CS8602: Possible dereference of a null reference.\r\n    warning CS8602: Possible dereference of a null reference.\r\n    warning CS0649: Field 'C.f' is never assigned to, and will always have its default value null\r\n```","Url":"https://github.com/dotnet/roslyn/issues/31909","RelatedDescription":"Open issue \"Dereference doesn't update null state if there's an unrelated conditional qualifier\" (#31909)"},{"Id":"392277521","IsPullRequest":false,"CreatedAt":"2018-12-18T18:19:48","Actor":"sharwell","Number":"31908","RawContent":null,"Title":"Treat acronyms/initialisms as words in naming conventions","State":"open","Body":"Currently, sequences of capital letters are treated as single-letter words during naming convention analysis. For camelCase and PascalCase naming, only the first and last letters of a sequence of capital letters should be treated as the start of a word. The last should only be treated as the start of a word if it is followed by a lowercase letter.\r\n\r\nSee #26556\r\n\r\nExamples:\r\n\r\n| Name | Words | To camelCase | To PascalCase |\r\n| --- | --- | --- | --- |\r\n| DTE | DTE | dte | DTE |\r\n| UIShellService | UI, Shell, Service | uiShellService | UiShellService |\r\n| anyCPUPlatformName | any, CPU, Platform, Name | anyCpuPlatformName | AnyCpuPlatformName |\r\n| DTEEvents | DTE, Events | dteEvents | DteEvents |\r\n| SERIALIZATION_DESCRIPTION | SERIALIZATION, DESCRIPTION | serializationDescription | SerializationDescription |","Url":"https://github.com/dotnet/roslyn/issues/31908","RelatedDescription":"Open issue \"Treat acronyms/initialisms as words in naming conventions\" (#31908)"},{"Id":"392272437","IsPullRequest":false,"CreatedAt":"2018-12-18T18:04:16","Actor":"cston","Number":"31907","RawContent":null,"Title":"\"warning IDE0055\" reported for `!` operator","State":"open","Body":"```C#\r\n// warning IDE0055: Fix formatting\r\nvar returnType = (_useMethodSignatureReturnType ? _methodSignatureOpt! : method).ReturnType;\r\n```","Url":"https://github.com/dotnet/roslyn/issues/31907","RelatedDescription":"Open issue \"\"warning IDE0055\" reported for `!` operator\" (#31907)"},{"Id":"392270054","IsPullRequest":false,"CreatedAt":"2018-12-18T17:57:35","Actor":"cston","Number":"31906","RawContent":null,"Title":"Infer nullability of receiver from `?.` expression compared with non-null","State":"open","Body":"Currently reporting a warning for second `s.ToString();`\r\n```C#\r\nclass Program\r\n{\r\n    static void F(string? s)\r\n    {\r\n        if (s?.Length != null)\r\n            s.ToString();\r\n\r\n        if (s?.Length == 1)\r\n            s.ToString(); // warning: may be null\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/31906","RelatedDescription":"Open issue \"Infer nullability of receiver from `?.` expression compared with non-null\" (#31906)"},{"Id":"392264962","IsPullRequest":false,"CreatedAt":"2018-12-18T17:43:13","Actor":"TessenR","Number":"31905","RawContent":null,"Title":"Nullable flow analysis works incorrectly with nested conditional accesses","State":"open","Body":"**Version Used**: \r\n\r\nBranch master (28 Oct 2018)\r\nLatest commit bfade8 by Sam Harwell:\r\nMerge pull request #30815 from eladeyal-intel/patch-1\r\n\r\nDelete 0\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile and run the following code\r\n```cs\r\n    #nullable enable\r\n    class C\r\n    {\r\n      public C? Nested;\r\n\r\n      public void Test1(C? c) => c?.Nested?.M(c.Nested.ToString());\r\n      public void Test2(C? c) => c.Nested?.M(c.Nested.ToString());\r\n      public void Test3(C c) => c?.Nested?.M(c.Nested.ToString());\r\n\r\n      public void M(string s) => System.Console.WriteLine(s.Length);\r\n\r\n      static void Main()\r\n      {\r\n        var c = new C();\r\n        c.Test1(c);\r\n        c.Test2(c);\r\n        c.Test3(c);\r\n      }\r\n    }\r\n```\r\n\r\nhttps://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ACX2DEAdgK4A2pEwpc2chl1AsAFB7YACATNgMItsBvfmw4BmXgH5sAOTiw4KANwthbduPYAWbABU5MAIwAKHlIDGASmwBeAHzYzEgHSz5KZwFkjZl/oVOdAHsAZRgEAEtCAHMjCwtlVhF1Dm09WE4Tcys7B183T288+BQAkLDImLiEkTEU3X1REwds+0cihQKfV2LS0Ijo2PiVRLUNbS92AwAGbCgWjgMnSYBOIygnABk6KJgACyHmVTxJgDY6jwhI2KPcIRGRADcIBAcbbEI4AHdeWOqa3LShm8B3+AP0GUsfxqPkBjUhN2wAF8joigA==\r\n\r\n**Expected Behavior**:\r\n\r\nNo warnings. It's impossible for the `Nested` field to be null at the point it's unconditionally dereferenced  (unless it's modified outside of the analyzed method butI believe nullable walker ignores such possibility by design)\r\n\r\n**Actual Behavior**:\r\n\r\n`Test1` and `Test3` have false warnings for dereferencing a possible null reference.\r\n```\r\n    warning CS8602: Possible dereference of a null reference.\r\n    warning CS8602: Possible dereference of a null reference.\r\n    warning CS8602: Possible dereference of a null reference.\r\n    warning CS0649: Field 'C.Nested' is never assigned to, and will always have its default value null\r\n```","Url":"https://github.com/dotnet/roslyn/issues/31905","RelatedDescription":"Open issue \"Nullable flow analysis works incorrectly with nested conditional accesses\" (#31905)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"391384225","IsPullRequest":true,"CreatedAt":"2018-12-18T17:02:45","Actor":"MichalStrehovsky","Number":"6688","RawContent":null,"Title":"Do not use R2R helpers for casting and allocation","State":"closed","Body":"This avoids generation of some of the helpers in favor of RyuJIT generating code that does what the helper would do. While this causes an about 1% regression in size of the generated executable, the benefit is better code density and fewer calls.","Url":"https://github.com/dotnet/corert/pull/6688","RelatedDescription":"Closed or merged PR \"Do not use R2R helpers for casting and allocation\" (#6688)"},{"Id":"392209645","IsPullRequest":false,"CreatedAt":"2018-12-18T15:32:45","Actor":"MarcoRossignoli","Number":"6694","RawContent":null,"Title":"[ILVerify]Add '--tokens' switch","State":"open","Body":"Today when ILVerify found issue we report tokens/offsets value for type system item for IL methods i.e.\r\n```\r\n[IL]: Error: [C:\\git\\corert\\bin\\Windows_NT.x64.Debug\\ILVerification.Tests\\Tests\\BranchingTests.dll : BranchingTestsType::Branching.FromTryIntoFinally_Invalid_BranchOutOfTry.BranchIntoHandler()][offset 0x00000004] Branch out of try block.\r\n```\r\nWe added some new type check and we decided to not report token value for it because they are not useful for regular use i.e.\r\n```\r\n[MD]: Error: Interface implementation has a duplicate. Class '[InterfaceImplementation]InterfaceImplHasDuplicate_InvalidType_InterfaceImplHasDuplicate' Interface: '[InterfaceDefinition]Interface'\r\n```\r\nHowever there are some scenario where tokens are useful, for instance on obfuscated code.\r\nWe should refactor code to have token values only if a user pass '--tokens'  switch to command line.\r\nReference https://github.com/dotnet/corert/pull/6687#discussion_r241916514","Url":"https://github.com/dotnet/corert/issues/6694","RelatedDescription":"Open issue \"[ILVerify]Add '--tokens' switch\" (#6694)"},{"Id":"391298312","IsPullRequest":true,"CreatedAt":"2018-12-18T15:09:12","Actor":"MarcoRossignoli","Number":"6687","RawContent":null,"Title":"[ILVerify]Added more tests","State":"closed","Body":"Added some new tests to new type check.\r\n\r\n/cc @jkotas ","Url":"https://github.com/dotnet/corert/pull/6687","RelatedDescription":"Closed or merged PR \"[ILVerify]Added more tests\" (#6687)"},{"Id":"392197040","IsPullRequest":false,"CreatedAt":"2018-12-18T15:04:42","Actor":"IonKiwi","Number":"6693","RawContent":null,"Title":"ILVerify InvalidCastException Unable to cast object of type 'Internal.TypeSystem.InstantiatedGenericParameter' to type 'Internal.TypeSystem.MetadataType'","State":"open","Body":"ILVerify reports the following error:\r\n\r\n```\r\nError: Unable to cast object of type 'Internal.TypeSystem.InstantiatedGenericParameter' to type 'Internal.TypeSystem.MetadataType'.\r\n```\r\n\r\nWith the following code:\r\n\r\n```\r\n    public class DocumentElement\r\n    {\r\n        public abstract class DocumentElementList<T> : ObservableCollection<T> where T : DocumentElement\r\n        {\r\n            protected override void InsertItem(int index, T item)\r\n            {\r\n                item.DoNotifyParent();\r\n            }\r\n        }\r\n\r\n        protected void DoNotifyParent()\r\n        {\r\n        }\r\n    }\r\n```\r\n\r\nWhen I verify it using PEVerify, there are no errors.\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/6693","RelatedDescription":"Open issue \"ILVerify InvalidCastException Unable to cast object of type 'Internal.TypeSystem.InstantiatedGenericParameter' to type 'Internal.TypeSystem.MetadataType'\" (#6693)"},{"Id":"392118165","IsPullRequest":true,"CreatedAt":"2018-12-18T12:37:47","Actor":"MichalStrehovsky","Number":"6692","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"Picks up a JitInterface change.","Url":"https://github.com/dotnet/corert/pull/6692","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#6692)"},{"Id":"390122572","IsPullRequest":true,"CreatedAt":"2018-12-18T05:28:55","Actor":"kvochko","Number":"6678","RawContent":null,"Title":"Generate ARM CFIs in the correct order","State":"closed","Body":"This is a CoreRT counterpart to https://github.com/dotnet/coreclr/pull/21505 . Since CFI codes are now generated in prolog, they are already in reverse order, so we don't need to reverse them in CoreRT.\r\nFixes #6626 \r\nCC @jkotas @alpencolt ","Url":"https://github.com/dotnet/corert/pull/6678","RelatedDescription":"Closed or merged PR \"Generate ARM CFIs in the correct order\" (#6678)"},{"Id":"391811403","IsPullRequest":true,"CreatedAt":"2018-12-18T04:45:33","Actor":"Dotnet-GitSync-Bot","Number":"6690","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @StanislavUshakov","Url":"https://github.com/dotnet/corert/pull/6690","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#6690)"},{"Id":"391923515","IsPullRequest":true,"CreatedAt":"2018-12-18T00:30:21","Actor":"trylek","Number":"6691","RawContent":null,"Title":"Fix for static enum field placement","State":"closed","Body":"I found out that my static field placement changes were incorrect\r\nfor enums. This change fixes the deficiency and, in doing so,\r\nit fixes one of the remaining CoreCLR Top200 bug buckets.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6691","RelatedDescription":"Closed or merged PR \"Fix for static enum field placement\" (#6691)"},{"Id":"390931623","IsPullRequest":true,"CreatedAt":"2018-12-17T00:37:04","Actor":"Dotnet-GitSync-Bot","Number":"6686","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @mattwarren","Url":"https://github.com/dotnet/corert/pull/6686","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#6686)"},{"Id":"391466998","IsPullRequest":true,"CreatedAt":"2018-12-17T00:36:49","Actor":"MichalStrehovsky","Number":"6689","RawContent":null,"Title":"Suppress integral constant overflow warnings","State":"closed","Body":"These always show up in CppCodegen because we have a type in CoreLib where the C# compiler generated a `GetHashCode` method with a static integer constant overflow.","Url":"https://github.com/dotnet/corert/pull/6689","RelatedDescription":"Closed or merged PR \"Suppress integral constant overflow warnings\" (#6689)"},{"Id":"390863483","IsPullRequest":false,"CreatedAt":"2018-12-13T21:17:03","Actor":"tannergooding","Number":"6685","RawContent":null,"Title":"Ensure that the `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types are properly handled with regards to struct packing/layout","State":"open","Body":"The `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types are special and are directly mapped as the primitive ABI types (typically referred to as `__m64`, `__m128`, and `__m256`). ProjectN should ensure that these types are appropriately handled before they ship so that types are laid out appropriately in memory and so that it does not become a breaking change to fix them in the future.\r\n\r\nCoreCLR is already correctly handling these types in the VM layer: https://github.com/dotnet/coreclr/blob/master/src/vm/methodtablebuilder.cpp#L9521","Url":"https://github.com/dotnet/corert/issues/6685","RelatedDescription":"Open issue \"Ensure that the `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types are properly handled with regards to struct packing/layout\" (#6685)"},{"Id":"390747404","IsPullRequest":true,"CreatedAt":"2018-12-13T20:33:53","Actor":"trylek","Number":"6683","RawContent":null,"Title":"Clean up CPAOT statics management per Michal's advice","State":"closed","Body":"Based on PR discussion towards my previous change I have prepared\r\nanother PR to clean up static management. I have modified the\r\nimplementation of ComputeHasGCStaticBase in ReadyToRunCompilerContext\r\nand I reverted some of my changes to CorInfoImpl.\r\n\r\nI still don't see how to completely eliminate R2R-specific code\r\nin getFieldInfo as I believe we need the special flag\r\nCORINFO_FIELD_FLAGS.CORINFO_FLG_FIELD_STATIC_IN_HEAP so that JIT takes\r\ncare of the automatic unboxing and we need special treatment\r\nfor fields with types outside of the version bubble.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6683","RelatedDescription":"Closed or merged PR \"Clean up CPAOT statics management per Michal's advice\" (#6683)"},{"Id":"390771984","IsPullRequest":true,"CreatedAt":"2018-12-13T18:06:21","Actor":"Dotnet-GitSync-Bot","Number":"6684","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @fiigii","Url":"https://github.com/dotnet/corert/pull/6684","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6684)"},{"Id":"390693664","IsPullRequest":false,"CreatedAt":"2018-12-13T14:05:37","Actor":"kbaladurin","Number":"6682","RawContent":null,"Title":"[CppCodeGen] Inheritance is missing in some cases","State":"open","Body":"Following sample compiles incorrectly:\r\n```cs\r\nusing System;\r\n\r\nnamespace Hello\r\n{\r\n    internal class Program\r\n    {\r\n        class A<T, U>\r\n        {\r\n\r\n        }\r\n\r\n        class C<T>\r\n        {\r\n\r\n        }\r\n\r\n        class B<T> : A<string, C<T>>\r\n        {\r\n\r\n        }\r\n\r\n        private static void Main(string[] args)\r\n        {\r\n            var b = new B<string>();\r\n            Console.WriteLine(\"b = \" + b);\r\n        }\r\n    }\r\n}\r\n```\r\n`B<System.__Canon>` doesn't inherit `A`:\r\n```\r\nnamespace Hello { namespace Hello { class Program_B_1_A__System___Canon_V_ {\r\n                public:\r\n                        static MethodTable * __getMethodTable();\r\n                        static void _ctor(::Hello::Hello::Program_B_1_A__System___Canon_V_*);\r\n                        static void unbox__ctor(::Hello::Hello::Program_B_1_A__System___Canon_V_*);\r\n};\r\n};};\r\n```\r\n\r\nOne of the problems is that `B<System.__Canon>` is emitted before `A<System.__Canon, System.__Canon>`. So the check `_emittedTypes.Contains(nodeType.BaseType)` in `CppWriter.OutputTypeNode` returns false. Are there any guarantees that base type is emitted before type itself?\r\n\r\nThank you!","Url":"https://github.com/dotnet/corert/issues/6682","RelatedDescription":"Open issue \"[CppCodeGen] Inheritance is missing in some cases\" (#6682)"},{"Id":"390340707","IsPullRequest":true,"CreatedAt":"2018-12-12T17:55:04","Actor":"trylek","Number":"6681","RawContent":null,"Title":"Initial support for GC ref map emission in the CPAOT compiler","State":"open","Body":"I have basically forked away ArgIterator and TransitionBlock from\r\nthe calling convention converter and I adapted it to use by the\r\nCPAOT compiler. I have not yet added multi-architecture support,\r\nfor now it only works for the compiler build architecture. There are\r\nalso a few NotImplemented cases I'll fix once I hit them in testing.\r\n\r\nMy initial thinking is that, after finalizing this code and after\r\nwe start working on other architectures, I'll further refactor this\r\ncode based on JanK's suggestion by merging in preprocessed versions\r\nof the ArgIterator source file for the four architectures.\r\n\r\nI also plan to further experiment with runtime architecture\r\nvirtualization that I tried to prototype in a trimmed-down\r\nclone of TransitionBlock I coded up for the purpose of R2RDump\r\nGC ref map decoder and I'm quite pleased with the result which\r\nlooks quite elegant and compact to me.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6681","RelatedDescription":"Open PR \"Initial support for GC ref map emission in the CPAOT compiler\" (#6681)"},{"Id":"390260931","IsPullRequest":true,"CreatedAt":"2018-12-12T15:59:02","Actor":"Dotnet-GitSync-Bot","Number":"6680","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @pentp","Url":"https://github.com/dotnet/corert/pull/6680","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6680)"},{"Id":"389384132","IsPullRequest":true,"CreatedAt":"2018-12-12T15:15:55","Actor":"MarcoRossignoli","Number":"6669","RawContent":null,"Title":"[ILVerify]Check interface method implementation","State":"closed","Body":"closes https://github.com/dotnet/corert/issues/6203\r\nOutput message:\r\n```\r\n[MD]: Error: Class implements interface but not method, Class: '[InterfaceImplementation]MissingMethod_InvalidType_InterfaceMethodNotImplemented' Interface: '[InterfaceDefinition]Interface' Method: [InterfaceDefinition]Interface.M1()(class:02000004 interface:09000004 method:06000001).\r\n```\r\n\r\n/cc @jkotas @MichalStrehovsky","Url":"https://github.com/dotnet/corert/pull/6669","RelatedDescription":"Closed or merged PR \"[ILVerify]Check interface method implementation\" (#6669)"},{"Id":"390184149","IsPullRequest":false,"CreatedAt":"2018-12-12T14:01:12","Actor":"jojify","Number":"6679","RawContent":null,"Title":"Failed to build Chromely (https://github.com/mattkol/Chromely)","State":"closed","Body":"Chromely is built using .Net standard 2.0.\r\nI used latest pre- release version (Install-Package Chromely.CefGlue.Winapi -Version 68.0.0-pre01).\r\nPlease find the attached screenshot.\r\n![sh1](https://user-images.githubusercontent.com/3658295/49859167-dc198700-fe1c-11e8-8782-9f575d75dabe.png)\r\n\r\nI followed steps from the link exactly. (https://github.com/mattkol/Chromely/wiki/Getting-Started-CefGlue-Winapi-(.NET-Core)). \r\nWhen I build the program using visual studio, it runs perfectly. \r\n\r\nBut again when I tried to build using CoreRT, I got the native executable in the native folder. It shows an error:-Value can't be null. parameter name :path1. Attached screen shot.\r\n![sc2](https://user-images.githubusercontent.com/3658295/49860871-a8d8f700-fe20-11e8-83d5-01f549154887.png)\r\n\r\n[chromely Sample.zip](https://github.com/mattkol/Chromely/files/2671351/chromely.Sample.zip)\r\n\r\nI am trying to build a native application using chromely. It will be great if you can take a look into this.\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/6679","RelatedDescription":"Closed issue \"Failed to build Chromely (https://github.com/mattkol/Chromely)\" (#6679)"},{"Id":"390121697","IsPullRequest":true,"CreatedAt":"2018-12-12T12:10:26","Actor":"MichalStrehovsky","Number":"6677","RawContent":null,"Title":"Add comment to WinRT SystemSupportsLeapSeconds","State":"closed","Body":"Per https://github.com/dotnet/corert/pull/6672#issuecomment-446430564.","Url":"https://github.com/dotnet/corert/pull/6677","RelatedDescription":"Closed or merged PR \"Add comment to WinRT SystemSupportsLeapSeconds\" (#6677)"},{"Id":"389955581","IsPullRequest":true,"CreatedAt":"2018-12-12T04:40:26","Actor":"Dotnet-GitSync-Bot","Number":"6676","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/6676","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6676)"},{"Id":"389835095","IsPullRequest":true,"CreatedAt":"2018-12-11T16:02:59","Actor":"MichalStrehovsky","Number":"6675","RawContent":null,"Title":"Make it possible to align at 32 byte boundaries","State":"open","Body":"This will be necessary to support computing layout for types that embed `Vector256`.\r\n\r\nFollow up on https://github.com/dotnet/corert/pull/6663#issuecomment-445574774.\r\n\r\nThis is foundational work needed to support the new HW intrinsics. We may or may not end up implementing function multiversioning for ready to run for .NET Core 3.0 CPAOT, but being able to compute the layout will let us at least pregenerate method bodies that pass through vector types without actually calling the intrinsics.\r\n\r\nSee individual commits. I'm flexible on whether we should include 47bacbd.","Url":"https://github.com/dotnet/corert/pull/6675","RelatedDescription":"Open PR \"Make it possible to align at 32 byte boundaries\" (#6675)"},{"Id":"389776056","IsPullRequest":true,"CreatedAt":"2018-12-11T13:55:45","Actor":"MichalStrehovsky","Number":"6674","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6674","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6674)"},{"Id":"389496528","IsPullRequest":true,"CreatedAt":"2018-12-11T12:18:32","Actor":"Dotnet-GitSync-Bot","Number":"6671","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/6671","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6671)"},{"Id":"389609642","IsPullRequest":true,"CreatedAt":"2018-12-11T10:03:32","Actor":"jkotas","Number":"6673","RawContent":null,"Title":"Delete unnecessary struct initialization","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6673","RelatedDescription":"Closed or merged PR \"Delete unnecessary struct initialization\" (#6673)"},{"Id":"389401689","IsPullRequest":true,"CreatedAt":"2018-12-11T06:06:22","Actor":"MichalStrehovsky","Number":"6670","RawContent":null,"Title":"Rename IlogB -> ILogB","State":"closed","Body":"This was updated in dotnet/coreclr#20912. Fortunately, ApiCompat found it in dotnet/corefx#33956.","Url":"https://github.com/dotnet/corert/pull/6670","RelatedDescription":"Closed or merged PR \"Rename IlogB -> ILogB\" (#6670)"},{"Id":"389560609","IsPullRequest":true,"CreatedAt":"2018-12-11T06:01:27","Actor":"tarekgh","Number":"6672","RawContent":null,"Title":"Fix leap seconds mirrored code","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6672","RelatedDescription":"Closed or merged PR \"Fix leap seconds mirrored code\" (#6672)"},{"Id":"389240063","IsPullRequest":true,"CreatedAt":"2018-12-10T15:53:16","Actor":"Dotnet-GitSync-Bot","Number":"6668","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @stephentoub @tarekgh","Url":"https://github.com/dotnet/corert/pull/6668","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6668)"},{"Id":"389194828","IsPullRequest":true,"CreatedAt":"2018-12-10T09:32:45","Actor":"MichalStrehovsky","Number":"6667","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"Probably needed to unblock #6663.","Url":"https://github.com/dotnet/corert/pull/6667","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#6667)"},{"Id":"389067443","IsPullRequest":true,"CreatedAt":"2018-12-10T03:28:03","Actor":"MichalStrehovsky","Number":"6666","RawContent":null,"Title":"Fix handling of intrinsic types in RyuJIT","State":"closed","Body":"This should unblock integrations from CoreCLR.","Url":"https://github.com/dotnet/corert/pull/6666","RelatedDescription":"Closed or merged PR \"Fix handling of intrinsic types in RyuJIT\" (#6666)"},{"Id":"389067160","IsPullRequest":false,"CreatedAt":"2018-12-09T21:40:30","Actor":"MichalStrehovsky","Number":"6665","RawContent":null,"Title":"Auto layout algorithm doesn't compute the right size","State":"open","Body":"Found when I was running the tests Tanner added in dotnet/coreclr#15961 (while half of the tests focuses on Vector64/128/256, the second half is a general purpose test and we're failing computing the right sizes).\r\n\r\nI have a fix that is halfway there in https://github.com/MichalStrehovsky/corert/commit/7f94460a4a0e2ea550dfdf26c4c5603bfc22faf3.\r\n\r\nWhat it lacks is handling of Align8 and unit tests.\r\n\r\nFor the record, here's the relevant part of the output of Tanner's test:\r\n\r\n```\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Char].\r\n     Expected: 4; Actual: 3\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Double].\r\n     Expected: 16; Actual: 9\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Int16].\r\n     Expected: 4; Actual: 3\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Int32].\r\n     Expected: 8; Actual: 5\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Int64].\r\n     Expected: 16; Actual: 9\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.IntPtr].\r\n     Expected: 16; Actual: 9\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.Single].\r\n     Expected: 8; Actual: 5\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.UInt16].\r\n     Expected: 4; Actual: 3\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.UInt32].\r\n     Expected: 8; Actual: 5\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.UInt64].\r\n     Expected: 16; Actual: 9\r\n\r\nUnexpected Size for AutoLayoutMinPacking`1[System.UIntPtr].\r\n     Expected: 16; Actual: 9\r\n```","Url":"https://github.com/dotnet/corert/issues/6665","RelatedDescription":"Open issue \"Auto layout algorithm doesn't compute the right size\" (#6665)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"389994622","IsPullRequest":true,"CreatedAt":"2018-12-19T01:43:18","Actor":"jainaashish","Number":"2745","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into sdk","State":"closed","Body":"Keeping it consistent with 2.2.2xx train","Url":"https://github.com/dotnet/sdk/pull/2745","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5707 into sdk\" (#2745)"},{"Id":"392406799","IsPullRequest":true,"CreatedAt":"2018-12-19T01:43:03","Actor":"livarcocc","Number":"2762","RawContent":null,"Title":"Updating NuGet and CLI version.","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/2762","RelatedDescription":"Open PR \"Updating NuGet and CLI version.\" (#2762)"},{"Id":"392386471","IsPullRequest":true,"CreatedAt":"2018-12-19T00:01:31","Actor":"dotnet-bot","Number":"2761","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2761","RelatedDescription":"Open PR \"Merge release/2.2.2xx to master\" (#2761)"},{"Id":"392125219","IsPullRequest":true,"CreatedAt":"2018-12-18T17:37:52","Actor":"dotnet-bot","Number":"2758","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2758","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2758)"},{"Id":"392146705","IsPullRequest":true,"CreatedAt":"2018-12-18T17:35:43","Actor":"dotnet-maestro[bot]","Number":"2759","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18617.7\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2759","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2759)"},{"Id":"392203074","IsPullRequest":false,"CreatedAt":"2018-12-18T15:18:06","Actor":"weltkante","Number":"2760","RawContent":null,"Title":"References specified in the project file are sometimes dropped and replaced by wrong versions","State":"open","Body":"MsBuild loses assembly references specified in our project file if the SDK happens to import the same assembly (possibly in a different version) from nuget packages.\r\n\r\nWe have an ASP.NET Core project which pulls in Newtonsoft.Json with 11.0.2 package version. Our project file has an explicit reference to Newtonsoft.Json 12.0.0.0 assembly version. The reference is specified via HintPath because we do not want to update every single project file (we have a lot) when we change the 3rd party components we deploy.\r\n```xml\r\n    <Reference Include=\"Newtonsoft.Json\">\r\n      <HintPath>$(ReferenceBasePath)Newtonsoft.Json.dll</HintPath>\r\n    </Reference>\r\n```\r\nThe bug is in [`ResolveLockFileReferences`](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.PackageDependencyResolution.targets#L448) target where in line 448 you are removing references via their name. Since you generate package references without strong identity you will remove any corresponding references specified in the project using the same name, even though they might have different metadata.\r\n\r\nmsbuild logging says\r\n```\r\n    _JoinedResolvedCompileFileDefinitions=\r\n        Newtonsoft.Json\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\newtonsoft.json\\11.0.2\\lib\\net45\\Newtonsoft.Json.dll\r\n                NuGetPackageId=Newtonsoft.Json\r\n                NuGetPackageVersion=11.0.2\r\n                NuGetSourceType=Package\r\n                Private=false\r\n        System.Collections.Immutable\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\system.collections.immutable\\1.5.0\\lib\\netstandard2.0\\System.Collections.Immutable.dll\r\n                NuGetPackageId=System.Collections.Immutable\r\n                NuGetPackageVersion=1.5.0\r\n                NuGetSourceType=Package\r\n                Private=false\r\n        System.Reflection.Metadata\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\system.reflection.metadata\\1.6.0\\lib\\netstandard2.0\\System.Reflection.Metadata.dll\r\n                NuGetPackageId=System.Reflection.Metadata\r\n                NuGetPackageVersion=1.6.0\r\n                NuGetSourceType=Package\r\n                Private=false\r\n    Entfernte Elemente: \r\n    Reference=\r\n        Newtonsoft.Json\r\n                HintPath=..\\..\\..\\ThirdParty\\Newtonsoft.Json.dll\r\n        System.Collections.Immutable\r\n                HintPath=..\\..\\..\\ThirdParty\\System.Collections.Immutable.dll\r\n        System.Reflection.Metadata\r\n                HintPath=..\\..\\..\\ThirdParty\\System.Reflection.Metadata.dll\r\n    Hinzugefügte Elemente: \r\n    Reference=\r\n        Newtonsoft.Json\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\newtonsoft.json\\11.0.2\\lib\\net45\\Newtonsoft.Json.dll\r\n                NuGetPackageId=Newtonsoft.Json\r\n                NuGetPackageVersion=11.0.2\r\n                NuGetSourceType=Package\r\n                Private=false\r\n        System.Collections.Immutable\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\system.collections.immutable\\1.5.0\\lib\\netstandard2.0\\System.Collections.Immutable.dll\r\n                NuGetPackageId=System.Collections.Immutable\r\n                NuGetPackageVersion=1.5.0\r\n                NuGetSourceType=Package\r\n                Private=false\r\n        System.Reflection.Metadata\r\n                ExternallyResolved=true\r\n                HintPath=C:\\Users\\username\\.nuget\\packages\\system.reflection.metadata\\1.6.0\\lib\\netstandard2.0\\System.Reflection.Metadata.dll\r\n                NuGetPackageId=System.Reflection.Metadata\r\n                NuGetPackageVersion=1.6.0\r\n                NuGetSourceType=Package\r\n                Private=false\r\n```\r\nThe problem goes away if we specify the reference as\r\n```xml\r\n    <Reference Include=\"Newtonsoft.Json, Version=12.0.0.0\">\r\n      <HintPath>$(ReferenceBasePath)Newtonsoft.Json.dll</HintPath>\r\n    </Reference>\r\n```\r\nbut this is something we do *not* want due to the amount of projects and number of references we would have to maintain manually. For us assembly references are uniquely defined by the version checked into source control in their corresponding third party folder.\r\n\r\nWhile debugging the issue I have seen other msbuild target files acknowledge this problem by rebuilding the references list instead of selectively removing references. Something like\r\n```xml\r\n    <ItemGroup>\r\n      <Reference Remove=\"@(Reference)\"/>\r\n      <Reference Include=\"@(_ModifiedReferences)\"/>\r\n    </ItemGroup>\r\n```\r\nUnfortunately I can't seem to find the place again where I've seen it, but I hope you get the idea of the problem.","Url":"https://github.com/dotnet/sdk/issues/2760","RelatedDescription":"Open issue \"References specified in the project file are sometimes dropped and replaced by wrong versions\" (#2760)"},{"Id":"391940621","IsPullRequest":true,"CreatedAt":"2018-12-18T03:30:25","Actor":"dotnet-bot","Number":"2757","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2757","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#2757)"},{"Id":"391887120","IsPullRequest":true,"CreatedAt":"2018-12-17T21:54:39","Actor":"wli3","Number":"2756","RawContent":null,"Title":"No apphost in PackAsTool","State":"closed","Body":"fix #https://github.com/dotnet/sdk/issues/2749","Url":"https://github.com/dotnet/sdk/pull/2756","RelatedDescription":"Closed or merged PR \"No apphost in PackAsTool\" (#2756)"},{"Id":"391643563","IsPullRequest":false,"CreatedAt":"2018-12-17T16:31:07","Actor":"YunWeiaa","Number":"2754","RawContent":null,"Title":"For .Net Core 3.0, create a winforms app, dotnet run without the windows box poping up.","State":"closed","Body":"### Description:\r\nCreate a winforms app. Build and run. \r\ndotnet new winforms -o MyWinFormsApp \r\ncd MyWinFormsApp \r\ndotnet build \r\ndotnet run\r\n\r\n**Expected**: It should appear a windows box like this\r\n![image](https://user-images.githubusercontent.com/33921754/50080741-c4c90800-0227-11e9-8163-39413bd95ebe.png)\r\n\r\n**Actual**: It doesn’t pop up a windows box.\r\n![image](https://user-images.githubusercontent.com/33921754/50080827-f17d1f80-0227-11e9-9d5e-a6298d7667fb.png)\r\n### Test Environment:\r\nD16.0/28414.68(16.0 preview 2.0) + CLI\\SDK: 3.0.100-preview-009839 \r\ndotnet --info:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009839\r\n Commit:    ee9fe44627\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009839\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27216-02\r\n  Commit:  79edbd4d15\r\n\r\n.NET Core SDKs installed:\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009648 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009839 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27216-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27214-12 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2754","RelatedDescription":"Closed issue \"For .Net Core 3.0, create a winforms app, dotnet run without the windows box poping up.\" (#2754)"},{"Id":"391504131","IsPullRequest":true,"CreatedAt":"2018-12-17T16:23:27","Actor":"dagood","Number":"2753","RawContent":null,"Title":"Exclude unit test projects from source-build","State":"closed","Body":"Reopening https://github.com/dotnet/sdk/pull/2642. (I don't seem to have permissions to reopen the PR in-place.)\r\n\r\n> This is a patch for removing test dependencies from source-build: https://github.com/dotnet/source-build/pull/847.\r\n> \r\n> RepoToolset picks up on this `ExcludeFromSourceBuild` property I'm adding and disables restore and build.\r\n> \r\n> @nguerrera, PTAL.\r\n\r\nThis is the patch directly: https://github.com/dotnet/source-build/blob/ecc7b00f5b7cf2d21cb6f545669690f7ab4996fc/patches/sdk/0001-Exclude-unit-test-projects-from-source-build.patch. Getting patch fixes pulled into the repo is important to us to avoid maintenance costs.","Url":"https://github.com/dotnet/sdk/pull/2753","RelatedDescription":"Closed or merged PR \"Exclude unit test projects from source-build\" (#2753)"},{"Id":"391702193","IsPullRequest":true,"CreatedAt":"2018-12-17T16:23:00","Actor":"dotnet-maestro[bot]","Number":"2755","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18616.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2755","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2755)"},{"Id":"391465182","IsPullRequest":true,"CreatedAt":"2018-12-16T21:53:20","Actor":"dotnet-maestro[bot]","Number":"2750","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18615.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2750","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2750)"},{"Id":"391496812","IsPullRequest":true,"CreatedAt":"2018-12-16T20:07:57","Actor":"nguerrera","Number":"2752","RawContent":null,"Title":"Use latest signtool to avoid MAX_PATH issue in official builds","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2752","RelatedDescription":"Closed or merged PR \"Use latest signtool to avoid MAX_PATH issue in official builds\" (#2752)"},{"Id":"390333769","IsPullRequest":false,"CreatedAt":"2018-12-16T19:45:26","Actor":"abpiskunov","Number":"2747","RawContent":null,"Title":"Add publish capabilities for SDK based ClassLibraries and ConsoleApps","State":"closed","Body":"Per our discussion with @nguerrera and @davkean we need to switch to new capabilities schema for publish (see below). To accomplish that one of the workitems is to add\r\n\r\n- FolderPublish to SDK-based class libraries and console apps , along with WPF and WinForms (if it is not present yet)\r\n- AppServicePublish to SDK-based class libraries and console apps \r\n\r\nThis needs to happen in P2 and earlier rather than later since Publish would need to commit and test changes after all capabilities are added.\r\n\r\nCapabilities \r\n \r\n•         \"Publish\": all projects that support any kind of publish should contain this capability\r\no    All .NET project types\r\n•         \"FolderPublish\": if project supports publishing to folder\r\no    Class libraries  (classic and core). Note: we don't own Publish for classic class libraries and classic ConsoleApps, ClickOnce does. There should be separate work item tracking ClickOnce support for our publish framework. However we can add capability now and it would light up when ClickOnce adds apublish provider.\r\no    Console app (classic, core). \r\no    WebSites, WAP, Web core\r\no    WPF (core and classic)\r\no    WinForms (classic and core)\r\n•         \"AppServicePublish\": if project is publishable to any web related publish target: Web, AppService, etc \r\no    Console apps (classic and core)\r\no    WebSites, WAP, Web core\r\n \r\nPotential pending capabilities:\r\n•         \"ClickOnce\"\r\no    Classic console apps\r\no    WPF (classic)\r\no    WinForms (classic)\r\n•         \"MSIX\"\r\no    Console apps (classic and core)\r\no    WPF (classic and core)\r\no    WinForms (classic and core)\r\n \r\n \r\n \r\nProviders \r\n \r\n•         FolderProvider: AppliesTo(\"Publish&FolderPublish\")\r\n•         AppServiceProvider: AppliesTo(\"Publish&AppServicePublish\")\r\n•         IISProvider: AppliesTo(\"Publish&Web\")\r\n•         AzureVMProvider: AppliesTo(\"Publish&Web\")\r\n•         AppServiceLinuxProvider: AppliesTo(\"Publish&DotNetCoreWeb\")\r\n•         ContainerRegistryProvider:AppliesTo(Publish&AppServicePublish&(Web|DotnetCoreWeb))\r\n•         ClickOnceProvider:AppliesTo(Publish&ClickOnce)\r\n•         MSIXProvider:AppliesTo(Publish&MSIX)\r\n \r\n \r\nWorkitems:\r\n \r\n•\tAdd FolderPublish to WPF and WinForms (classic and core), Class Libraries and Console Apps (classic and core). Some of them already have it , just make sure all of them have. <- CSharp & SDK\r\n•\tAdd AppServicePublish to Console apps (classic and core) <- CSharp and SDK\r\n•\tAdd AppServicePublish to WebSites, WAP, and Core Web <- WAP and WebSdk\r\n \r\nClickOnce and MSIX I would leave to their owner to request/add when they are ready.\r\n","Url":"https://github.com/dotnet/sdk/issues/2747","RelatedDescription":"Closed issue \"Add publish capabilities for SDK based ClassLibraries and ConsoleApps\" (#2747)"},{"Id":"391486333","IsPullRequest":false,"CreatedAt":"2018-12-16T17:09:36","Actor":"joaorosado","Number":"2751","RawContent":null,"Title":"Properties defined in target files do not get applied with multiple TargetFrameworks","State":"open","Body":"I'm adding multitargeting to net461 and netstandard2.0 in some of my projects as a migration path.\r\nWhile doing this and trying I noticed that in one of the targets all the generate AssemblyInfo had the default values.\r\n\r\nCurrently I have a import on my projects that adds extra targets and sets the common properties consistently on all of them.\r\n`<Import Project=\"$(ProjectDir)..\\..\\Commons\\Common.targets\" />`\r\n\r\nthis target file is taking care of the properties import inside (but the problem also occurs if they are defined explicitly in the .targets) \r\n`<Import Project=\"Common.props\" />`\r\n\r\nThis worked fine with one target and in the generated assembly info file that Visual Studio is doing automatically (I can see both files in disk being changed correctly).\r\nBut then when actually doing the real build the AssemblyInfo on the **second** target gets all the default values.\r\n\r\nI've found 2 workarounds for this:\r\n- Import the \"Common.props\" directly on my project.\r\n- Add an empty \"Directory.Build.props\" file on the root of my repository. <- not sure why this fixes it\r\n\r\nWhile I'm OK with any of the workarounds, I'm really worried that other target files get incorrect properties and that the second target framework gets build incorrectly.\r\n\r\nHow is the correct way of doing this?\r\n\r\nTested with both VS 15.9.3 and 15.9.4 \r\n\r\nEdit: can't seem to get any of my workarounds to work now that upgraded to 15.9.4 :(","Url":"https://github.com/dotnet/sdk/issues/2751","RelatedDescription":"Open issue \"Properties defined in target files do not get applied with multiple TargetFrameworks\" (#2751)"},{"Id":"389753827","IsPullRequest":true,"CreatedAt":"2018-12-15T21:44:35","Actor":"dotnet-maestro[bot]","Number":"2742","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18610.4\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18611.14\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18612.12\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18614.3\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2742","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2742)"},{"Id":"389564061","IsPullRequest":true,"CreatedAt":"2018-12-15T20:53:14","Actor":"nguerrera","Number":"2740","RawContent":null,"Title":"Fix the build","State":"closed","Body":"Two severe issues:\r\n\r\n1. Official build is failing, and it's apparently at a line where we are attempting to use undefined $env:VSSDKInstall. It is unclear what this line was accomplishing so I've removed it. I suspect it may have been working around past arcade version issues. Does that ring a bell?\r\n\r\n2. In the port to arcade, the act of running tests against full msbuild was coupled to building with full msbuild whereas before it was a custom build argument. Now the latest arcade is always building with VS when available, which means our tests are not running on core on Windows on any leg. I've tied it to an env var instead of the build engine. This also removes the requirement to have VS installed to build. It is now used only when testing full msbuild as it was originally.\r\n\r\nFixes #2589\r\n\r\nChanges to eng\\common are mirrored in https://github.com/dotnet/arcade/pull/1594\r\n\r\nAlso fixed some annoyances encountered while debugging this:\r\n\r\n* build on command line will use stage0 sdk always, not ambient sdk on PATH\r\n\r\n* dogfood script now puts stage0 dotnet on PATH too\r\n\r\n* Locate stage0 bundled versions irrespective of SDK version used to build. This could cause tests to fail in VS if using an ambient SDK from Program Files. \r\n","Url":"https://github.com/dotnet/sdk/pull/2740","RelatedDescription":"Closed or merged PR \"Fix the build\" (#2740)"},{"Id":"390007564","IsPullRequest":true,"CreatedAt":"2018-12-14T00:15:33","Actor":"dotnet-bot","Number":"2746","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2746","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2746)"},{"Id":"390902820","IsPullRequest":false,"CreatedAt":"2018-12-13T23:21:33","Actor":"wli3","Number":"2749","RawContent":null,"Title":"Pack as tool should not generate exe in nupkg","State":"open","Body":"We generate an executable by default as a new 3.0.xxx feature. However, we should not generate such file during PackAsTool. It should not be harmful however it would be flagged or signed by infrastructure","Url":"https://github.com/dotnet/sdk/issues/2749","RelatedDescription":"Open issue \"Pack as tool should not generate exe in nupkg\" (#2749)"},{"Id":"390775310","IsPullRequest":false,"CreatedAt":"2018-12-13T17:53:16","Actor":"nphmuller","Number":"2748","RawContent":null,"Title":"Option to treat NETSDK warnings as errors","State":"closed","Body":"While updating to 2.2.100 I noticed a couple of warnings were added. Like `NETSDK1071`.\r\nIn my CI I build using the `TreatWarningsAsErrors` flag (`dotnet build /p:TreatWarningsAsErrors=\"true\"`)`.\r\n\r\nThe build still completed succesfully, while `NETSDK1071` was thrown.\r\n\r\nWhat is the recommended way to force a build to fail if any of these warnings are thrown from the SDK?\r\nThe most user friendly way would be to use the same flag as msbuild. But that doesn't seem to be supported atm.","Url":"https://github.com/dotnet/sdk/issues/2748","RelatedDescription":"Closed issue \"Option to treat NETSDK warnings as errors\" (#2748)"},{"Id":"388856924","IsPullRequest":true,"CreatedAt":"2018-12-11T20:00:15","Actor":"dotnet-bot","Number":"2734","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2734","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2734)"},{"Id":"389616201","IsPullRequest":true,"CreatedAt":"2018-12-11T18:52:09","Actor":"wli3","Number":"2741","RawContent":null,"Title":"Merge/2.1.6xx to 2.2.2xx","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2741","RelatedDescription":"Closed or merged PR \"Merge/2.1.6xx to 2.2.2xx\" (#2741)"},{"Id":"389836302","IsPullRequest":true,"CreatedAt":"2018-12-11T17:33:37","Actor":"nugetlurker","Number":"2743","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5707 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2743","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5707 into sdk\" (#2743)"},{"Id":"389836305","IsPullRequest":true,"CreatedAt":"2018-12-11T17:33:03","Actor":"nugetlurker","Number":"2744","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5707 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-preview1.5707 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2744","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-preview1.5707 into sdk\" (#2744)"},{"Id":"389095908","IsPullRequest":true,"CreatedAt":"2018-12-11T05:51:42","Actor":"dsplaisted","Number":"2738","RawContent":null,"Title":"Support ASP.NET Core PackageReference when targeting .NET Core 3.0 or higher","State":"closed","Body":"Fixes dotnet/cli#10124\r\n\r\nAlso fixes #2527","Url":"https://github.com/dotnet/sdk/pull/2738","RelatedDescription":"Closed or merged PR \"Support ASP.NET Core PackageReference when targeting .NET Core 3.0 or higher\" (#2738)"},{"Id":"389501017","IsPullRequest":true,"CreatedAt":"2018-12-11T01:22:12","Actor":"wli3","Number":"2739","RawContent":null,"Title":"Use PackageVersion for shim gen","State":"closed","Body":"fix #2698\r\nPackageVersion should be the source of truth for nuget layout.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/3c9b61826814dc800a2a295f0985ce4f295483d6/src/NuGet.Core/NuGet.Build.Tasks.Pack/NuGet.Build.Tasks.Pack.targets#L28","Url":"https://github.com/dotnet/sdk/pull/2739","RelatedDescription":"Closed or merged PR \"Use PackageVersion for shim gen\" (#2739)"},{"Id":"388920248","IsPullRequest":true,"CreatedAt":"2018-12-09T18:55:11","Actor":"dotnet-maestro[bot]","Number":"2736","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18607.6\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18608.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2736","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2736)"},{"Id":"389031990","IsPullRequest":false,"CreatedAt":"2018-12-09T15:09:06","Actor":"nguerrera","Number":"2737","RawContent":null,"Title":"NetCore2.1->2.2 Upgrade Issue; TargetFramework dropped/not recognized","State":"open","Body":"_From @pinkfloydx33 on December 5, 2018 13:40_\n\nI'm trying to upgrade my web application from netCore 2.1 to 2.2. I have updated the TargetFramework to netcoreapp2.2 and I receive the following errors upon restore/build/clean:\r\n\r\n```\r\nMyProduct.Web.csproj : error NU1202: Package Microsoft.AspNetCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Package Microsoft.AspNetCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)\r\nMyProduct.Web.csproj : error NU1202: Package Microsoft.NETCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Package Microsoft.NETCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)\r\nMyProduct.Web.csproj : error NU1202: Package Microsoft.AspNetCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1) / win-x64. Package Microsoft.AspNetCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)\r\nMyProduct.Web.csproj : error NU1202: Package Microsoft.NETCore.App 2.2.0 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1) / win-x64. Package Microsoft.NETCore.App 2.2.0 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)\r\n```\r\n\r\nI have also done a manual clean (deleting obj/bin directories). \r\n\r\nI **can** build if I change from using `<TargetFramework>` to `<TargetFrameworks>`, however I'd rather not do this and attempt to locate the underlying issue. I have two test projects in the same solution that reference the main project. I was able to migrate _them_ to netcoreapp2.2 without switching to TargetFramework**s**, I would like to do the same thing for the main web app.\r\n\r\nWhen I use TargetFramework (singular), Visual Studio updates the dependencies graph and removes the SDK node:\r\n![image](https://user-images.githubusercontent.com/395615/49516771-63d52380-f868-11e8-9f5c-49ac2676585f.png)\r\n\r\nI've tried adding a global.json specifying the SDK version directly as 2.2.100 but that doesn't make any difference.\r\n\r\nHere is my .csproj file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n\t<PropertyGroup>\r\n\t\t<AssemblyName>MyProduct.Web</AssemblyName>\r\n\t\t<OutputType>Exe</OutputType>\r\n\t\t<TargetFramework>netcoreapp2.2</TargetFramework>\r\n\t\t<PreserveCompilationContext>true</PreserveCompilationContext>\r\n\t\t<LangVersion>latest</LangVersion>\r\n\t</PropertyGroup>\r\n\r\n\t<PropertyGroup>\r\n\t\t<GenerateAssemblyInfo>false</GenerateAssemblyInfo>\r\n\t\t<PackageId>$(AssemblyName)</PackageId>\r\n\t\t<Authors>MyCompany</Authors>\r\n\t</PropertyGroup>\r\n\r\n\t<PropertyGroup Condition=\"'$(Configuration)' == 'Debug'\">\r\n\t\t<RazorCompileOnBuild>false</RazorCompileOnBuild>\r\n\t\t<RazorCompileOnPublish>false</RazorCompileOnPublish>\r\n\t</PropertyGroup>\r\n\r\n\t<PropertyGroup Condition=\"'$(Configuration)'=='Debug'\">\r\n\t  <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n\t</PropertyGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<None Update=\"wwwroot\\**\\*\">\r\n\t\t\t<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>\r\n\t\t</None>\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<ProjectReference Include=\"..\\MyProduct.Web.Core\\MyProduct.Web.Core.csproj\" />\r\n\t\t<ProjectReference Include=\"..\\MyProduct.Web.Api.Contracts\\MyProduct.Web.Api.Contracts.csproj\" />\r\n\t\t<ProjectReference Include=\"..\\MyProduct.Web.ViewModels\\MyProduct.Web.ViewModels.csproj\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<PackageReference Include=\"Microsoft.AspNetCore.App\" />\r\n\t\t<PackageReference Include=\"BeginCollectionItemCore\" Version=\"1.0.4\" />\r\n\t\t<PackageReference Include=\"Novell.Directory.Ldap.NETStandard\" Version=\"2.3.5\" />\r\n\t\t<PackageReference Include=\"Microsoft.AspNetCore.Authentication.Cookies\" Version=\"2.2.0\" />\r\n\t\t<PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"2.2.0\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<PackageReference Include=\"Microsoft.AspNetCore.Razor.Design\" Version=\"2.2.0\" PrivateAssets=\"All\" />\r\n\t\t<PackageReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Design\" Version=\"2.2.0\" PrivateAssets=\"All\" />\r\n\t\t<DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.4\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<Content Update=\"Views\\_ViewImports.cshtml\">\r\n\t\t\t<Pack>$(IncludeRazorContentInPack)</Pack>\r\n\t\t</Content>\r\n\t</ItemGroup>\r\n\r\n</Project>\r\n```\n\n_Copied from original issue: dotnet/corefx#33834_","Url":"https://github.com/dotnet/sdk/issues/2737","RelatedDescription":"Open issue \"NetCore2.1->2.2 Upgrade Issue; TargetFramework dropped/not recognized\" (#2737)"},{"Id":"388893591","IsPullRequest":false,"CreatedAt":"2018-12-08T06:49:25","Actor":"yyjdelete","Number":"2735","RawContent":null,"Title":"`Invalid runtimeconfig.json` is produced when duplicate FrameworkReference exists in 3.0preview","State":"open","Body":"Move from aspnet/AspNetCore#4490\r\n\r\n### Step\r\ndotnet sdk 3.0.0-preview-27122-01 is needed.\r\n1. `dotnet new webapi`\r\n2. change the csproj to add an FrameworkReference   `<FrameworkReference Include=\"Microsoft.AspNetCore.App\" />`\r\n3. `dotnet run`\r\n\r\nIt can also be reproduce with `dotnet new console` by add more than one same FrameworkReference\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n***NOTE:***\r\nWhen the number of duplicated FrameworkReference is changed, the `xxx.runtimeconfig.json` only change after an `dotnet clean` and build, seems the cache and build have different rule in this special case? Not sure if it's another issue, or just an part of this.\r\n\r\n### Expected\r\nBuild error, or run successful.\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.AspNetCore.App\",\r\n      \"version\": \"3.0.0-preview-18579-0056\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Actual\r\nBuild successful, but run failed with `Invalid runtimeconfig.json`. See the duplicate `Microsoft.AspNetCore.App` in `frameworks` here.\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"frameworks\": [\r\n      {\r\n        \"name\": \"Microsoft.AspNetCore.App\",\r\n        \"version\": \"3.0.0-preview-18579-0056\"\r\n      },\r\n      {\r\n        \"name\": \"Microsoft.AspNetCore.App\",\r\n        \"version\": \"3.0.0-preview-18579-0056\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### Details\r\ndotnet --info\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n<details>\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.18290\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009404 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100-preview3-009430 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0-preview3-35497 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0-preview3-35497 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0-preview3-27014-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n</details>","Url":"https://github.com/dotnet/sdk/issues/2735","RelatedDescription":"Open issue \"`Invalid runtimeconfig.json` is produced when duplicate FrameworkReference exists in 3.0preview\" (#2735)"},{"Id":"388822770","IsPullRequest":false,"CreatedAt":"2018-12-08T00:32:25","Actor":"dagood","Number":"2733","RawContent":null,"Title":"Incorrect \"repository\" element in Microsoft.NET.Sdk's nuspec","State":"closed","Body":"In this nupkg from a recent build:\r\nhttps://dotnetfeed.blob.core.windows.net/dotnet-core/flatcontainer/microsoft.net.sdk/3.0.100-preview.18603.1/microsoft.net.sdk.3.0.100-preview.18603.1.nupkg\r\n\r\nThe nuspec contains this line:\r\n\r\n```\r\n<repository type=\"git\" url=\"https://github.com//\" commit=\"7bb277dbfdfe52a71b9decc88897510cc8d6be42\" />\r\n```\r\n\r\n`https://github.com//` should be `https://github.com/dotnet/sdk`\r\n\r\nThis might be an Arcade issue, failure to detect the source? I'm not familiar enough with how packaging works now to quickly find where this is happening.\r\n\r\n(I was only looking for the commit, but figured I should file this issue for the wrong url anyway.)","Url":"https://github.com/dotnet/sdk/issues/2733","RelatedDescription":"Closed issue \"Incorrect \"repository\" element in Microsoft.NET.Sdk's nuspec\" (#2733)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalMlaik","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"},{"Id":"319700544","IsPullRequest":false,"CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Number":"65","RawContent":null,"Title":".NET Framework Runtime and Builder Docker repos have merged ","State":"open","Body":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n","Url":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Open issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65)"},{"Id":"315285808","IsPullRequest":false,"CreatedAt":"2018-04-18T00:20:13","Actor":"richlander","Number":"64","RawContent":null,"Title":"April 2018 .NET Updates","State":"open","Body":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [Announcing the .NET Framework 4.7.2](https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/)\r\n* No new patch releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Open issue \"April 2018 .NET Updates\" (#64)"},{"Id":"305721744","IsPullRequest":false,"CreatedAt":"2018-03-15T21:13:36","Actor":"mairaw","Number":"63","RawContent":null,"Title":"Transport Layer Security (TLS) best practices with the .NET Framework article published","State":"open","Body":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices for .NET Framework applications at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675","Url":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Open issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1073371092515840000","CreatedAt":"2018-12-14T00:16:25+00:00","UserScreenname":"dotnet","Text":"C# and Visual Basic files get Regex language support in @VisualStudio 2019 Preview\nhttps://t.co/NL5QgAl9hq https://t.co/WWTK6BT5RG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":358,"FavoriteCount":131,"RawContent":null},{"Id":"1072638045227270144","CreatedAt":"2018-12-11T23:43:33+00:00","UserScreenname":"dotnet","Text":"Blogged: .NET Framework December 2018 Security and Quality Rollup https://t.co/5PllosL5i2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":8,"RawContent":null},{"Id":"1072146418868064256","CreatedAt":"2018-12-10T15:10:00+00:00","UserScreenname":"dotnet","Text":"Learn about writing tests for @AzureFunctions with Senior Program Manager Jeff Hollan (@jeffhollan) in this episode… https://t.co/18tWdVma7r","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":31,"FavoriteCount":11,"RawContent":null},{"Id":"1070731847620050944","CreatedAt":"2018-12-06T17:29:00+00:00","UserScreenname":"dotnet","Text":"Learn about the latest F# Tooling Updates for Visual Studio 2017 from @_cartermp in this episode of the #OnDotNet s… https://t.co/wSjVH0qlRz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":28,"FavoriteCount":15,"RawContent":null}]}},"RunOn":"2018-12-19T05:30:47.9988335Z","RunDurationInMilliseconds":26149}