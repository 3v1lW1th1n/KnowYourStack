{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core 2.1 June Update","PublishedOn":"2018-06-22T21:08:25+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We released .NET Core 2.1.1. This update includes .NET Core SDK 2.1.301, ASP.NET Core 2.1.1 and .NET Core 2.1.1. See .NET Core 2.1.1 release notes for complete details on the release. Quality Updates...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/","RawContent":null},{"Title":".NET Core 2.0 will reach End of Life on October 1, 2018","PublishedOn":"2018-06-20T19:12:38+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Last Updated: 6/22/2018 .NET Core 2.0 was released on August 14, 2017. As a non-LTS release, it is supported for 3 months after the next release. .NET Core 2.1 was released on May 30th, 2018. As a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/","RawContent":null},{"Title":"The RyuJIT transition is complete!","PublishedOn":"2018-06-19T22:53:27+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"RyuJIT is the code name for the .NET just-in-time compiler, one of the foundational components of the .NET runtime. In contrast, the Roslyn C# compiler compiles C# code to IL byte code. The RyuJIT...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/19/the-ryujit-transition-is-complete/","RawContent":null},{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null},{"Title":".NET Framework June 2018 Security and Quality Rollup","PublishedOn":"2018-06-13T19:29:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the June 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework May 2018 Security and Quality Rollup for the latest security updates. Quality and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3621!","PublishedOn":"2018-06-06T21:19:43+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.8 Early Access build 3621 for your feedback. This is one of the in-development builds of the next version of the .NET Framework. The changes in this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/","RawContent":null},{"Title":"Announcing ML.NET 0.2","PublishedOn":"2018-06-06T04:36:25+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Last month at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework. We would like to thank the community for the engagement so far in helping us shape ML.NET....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/05/announcing-ml-net-0-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1","PublishedOn":"2018-05-30T17:22:16+00:00","CommentsCount":71,"FacebookCount":0,"Summary":"We&#8217;re excited to announce the release of .NET Core 2.1. It includes improvements to performance, to the runtime and tools. It also includes a new way to deploy tools as NuGet packages....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1","PublishedOn":"2018-05-30T17:22:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today we are excited to announce the release of Entity Framework (EF) Core 2.1. This is the latest production-ready release of our open-source and cross-platform data access technology. We are...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-entity-framework-core-2-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7697526900","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:48","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Merged pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7697525283","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:25","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Merged pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7697523628","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:02","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Merged pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7697521624","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:34","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Merged pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415"},{"Id":"7697519505","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/102","RelatedDescription":"Merged pull request \"Update projects.json adding MLNET\" (#102) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "},{"Id":"7719029569","Type":"IssuesEvent","CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil\" (#70) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7883245646","Type":"PullRequestEvent","CreatedAt":"2018-06-27T03:41:34","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18664","RelatedDescription":"Merged pull request \"Issue_18420 More Dead String\" (#18664) at dotnet/coreclr","RelatedBody":"Removed any strings in \\src\\inc\\corerror.xml that appeared only in one or more of the following:\r\n\\src\\dlls\\mscorrc\\mscorrc.rc\r\n\\src\\pal\\prebuilt\\corerror\\mscorurt.rc\r\n\\src\\pal\\prebuilt\\inc\\corerror.h\r\n\r\nFix #18420"},{"Id":"7883245634","Type":"IssuesEvent","CreatedAt":"2018-06-27T03:41:34","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18420","RelatedDescription":"Closed issue \"Make a pass to remove dead strings from mscorrc.rc\" (#18420) at dotnet/coreclr","RelatedBody":"Some strings in [mscorrc.rc](https://github.com/dotnet/coreclr/blob/master/src/dlls/mscorrc/mscorrc.rc) seem to be dead. eg\r\n`IDS_SERIALIZATION_NONFREEZABLE_TYPE` `IDS_EE_IJWLOAD_CROSSVERSION_DISALLOWED` `IDS_EE_TORNSTATE` `IDS_CLASSLOAD_SH_SUBCLASS_FINALIZER`\r\n\r\nIt should not be too hard to write a script that removes any strings whose identifiers only appear in mscorrc\\mscorrc.rc and mscorrc\\resource.h.\r\n\r\nSeparately, src\\inc\\corerror.xml which generates mscorurt.rc and coreerror.h may also be worth looking at. eg : `CLR_OPTSVC_E_CONTROLLER_INTERRUPT` `NGEN_E_EXE_MACHINE_TYPE_MISMATCH`"},{"Id":"7883222921","Type":"IssuesEvent","CreatedAt":"2018-06-27T03:32:11","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18218","RelatedDescription":"Closed issue \"Number.FormatFixed throws IndexOutOfRangeException if NumberGroupSizes is empty\" (#18218) at dotnet/coreclr","RelatedBody":"The following code crashes on .NET Core (2.1-300) but works on .NET4.x and Mono\r\n(we have it as a test in mono)\r\n```\r\nvar nfi = NumberFormatInfo.InvariantInfo.Clone() as NumberFormatInfo;\r\nnfi.NumberGroupSizes = new int[] { };\r\nvar str = Int32.MinValue.ToString(\"N1\", nfi);\r\n```\r\nStacktrace:\r\n```\r\nUnhandled Exception: System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at System.Number.FormatFixed(ValueStringBuilder& sb, NumberBuffer& number, Int32 nMinDigits, Int32 nMaxDigits, NumberFormatInfo info, Int32[] groupDigits, String sDecimal, String sGroup)\r\n   at System.Number.FormatNumber(ValueStringBuilder& sb, NumberBuffer& number, Int32 nMinDigits, Int32 nMaxDigits, NumberFormatInfo info)\r\n   at System.Number.FormatInt32(Int32 value, ReadOnlySpan`1 format, IFormatProvider provider)\r\n   at System.Int32.ToString(String format, IFormatProvider provider)\r\n   at ConsoleApp2.Program.Main(String[] args) in Program.cs:line 12\r\n```"},{"Id":"7883219169","Type":"PullRequestEvent","CreatedAt":"2018-06-27T03:30:39","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18667","RelatedDescription":"Merged pull request \"[release/2.1] Fix number formatting exception with empty NumberGroupSizes array\" (#18667) at dotnet/coreclr","RelatedBody":"Port https://github.com/dotnet/coreclr/pull/18221 to release/2.1.\r\nCloses https://github.com/dotnet/coreclr/issues/18218."},{"Id":"7883214976","Type":"PullRequestEvent","CreatedAt":"2018-06-27T03:29:01","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18502","RelatedDescription":"Merged pull request \"Allow ILCodeVersion to fallback to default IL\" (#18502) at dotnet/coreclr","RelatedBody":"For compat with profilers that used our APIs in unexpected ways we can allow\r\nthe ILCodeVersion to fallback to the default IL code when no IL was explicitly\r\ngiven.\r\n\r\nThis is the 2.1 port for #18448\r\n"},{"Id":"7883181888","Type":"PullRequestEvent","CreatedAt":"2018-06-27T03:16:17","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18309","RelatedDescription":"Merged pull request \"[release/2.1] Use WChar instead of char\" (#18309) at dotnet/coreclr","RelatedBody":"Use WCHAR to avoid truncate -- pTarget is WCHAR*.\r\n\r\nThis PR is for 2.1 servicing.\r\n\r\nFix: #18269"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7882914635","Type":"PullRequestEvent","CreatedAt":"2018-06-27T01:36:26","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9568","RelatedDescription":"Merged pull request \"Update SDK to 2.1.400-preview-63027-01\" (#9568) at dotnet/cli","RelatedBody":""},{"Id":"7882798752","Type":"PullRequestEvent","CreatedAt":"2018-06-27T00:51:08","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9567","RelatedDescription":"Merged pull request \"Updating branding to 401.\" (#9567) at dotnet/cli","RelatedBody":""},{"Id":"7882798323","Type":"PullRequestEvent","CreatedAt":"2018-06-27T00:50:57","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9568","RelatedDescription":"Opened pull request \"Update SDK to 2.1.400-preview-63027-01\" (#9568) at dotnet/cli","RelatedBody":""},{"Id":"7882680303","Type":"IssuesEvent","CreatedAt":"2018-06-27T00:05:34","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9476","RelatedDescription":"Closed issue \"Nuget packages restore failed (Yellow triangle)\" (#9476) at dotnet/cli","RelatedBody":"@fatih905 commented on [Fri Jun 08 2018](https://github.com/dotnet/core/issues/1674)\n\nThis my error message,  help me pls.\r\n\r\n'C:\\Users\\erol_\\source\\repos\\WebApplication38\\WebApplication38\\obj\\project.assets.json' not found. Run a NuGet package restore to generate this file.\tWebApplication38\tC:\\Program Files\\dotnet\\sdk\\2.1.300\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets\t198\t\r\n\n\n---\n\n@Petermarcu commented on [Tue Jun 12 2018](https://github.com/dotnet/core/issues/1674#issuecomment-396792771)\n\nCan you try running 'dotnet restore' on your project from the command line? \n\n"},{"Id":"7882600806","Type":"PullRequestEvent","CreatedAt":"2018-06-26T23:37:18","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9566","RelatedDescription":"Opened pull request \"Log a verbose message when DOTNET_CLI_HOME is being used.\" (#9566) at dotnet/cli","RelatedBody":"This commit logs a diagnostic message when the `DOTNET_CLI_HOME` variable is\r\nused.  This enables users to determine where first-run-experience and global\r\ntool files are being written to.\r\n\r\nFixes #9510.\r\n"},{"Id":"7882574837","Type":"PullRequestEvent","CreatedAt":"2018-06-26T23:28:16","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9565","RelatedDescription":"Opened pull request \"Merge dev/repo-refactoring into master\" (#9565) at dotnet/cli","RelatedBody":"This was a clean merge.\r\n\r\nWe will also need to update the build defs for cli and core-sdk."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7880568064","Type":"IssuesEvent","CreatedAt":"2018-06-26T16:17:18","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/779","RelatedDescription":"Closed issue \"netstandard equivalent of Environment.UserName on Linux\" (#779) at dotnet/standard","RelatedBody":"Environment.UserName documentation in netstandard says \" Gets the user name of the person who is currently logged on to the Windows operating system.\"\r\n\r\nWhat is its equivalent for netstandard on linux? Does the same property work on Linux as well?"},{"Id":"7879886077","Type":"IssuesEvent","CreatedAt":"2018-06-26T14:32:14","Actor":"yuessir","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/784","RelatedDescription":"Opened issue \"netstandard2.0.3 library project is not compatible with netcoreapp2.0 core proj?\" (#784) at dotnet/standard","RelatedBody":"Hi all \r\nI have two projects:\r\nProject FoundationA.Lib e : .Net Standard project.\r\nProject FoundationB.Lib e : .Net Core 2.1 project.\r\n\r\nAs FoundationA.Lib reference to  FoundationB.Lib  and\r\nI got the error like following: \r\n\"Project FoundationA.Lib is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Project FoundationB.Lib supports: netcoreapp2.1 (.NETCoreApp,Version=v2.1)\"\r\n\r\nIs it normal? or what details do I have to pay attention to?\r\nThanks.\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7877227494","Type":"IssuesEvent","CreatedAt":"2018-06-26T06:04:01","Actor":"TheRealMal","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/783","RelatedDescription":"Opened issue \"System.Numerics missing Vector2 and others\" (#783) at dotnet/standard","RelatedBody":"![missing-vector2](https://user-images.githubusercontent.com/28099273/41891784-ca8148c0-78e3-11e8-88cd-3db4e7454bb2.png)\r\n\r\nI'm trying to move library code from \"Framework\" to \"Standard 2.0/Core 2.1\" so that I can then reference the standard/core dll from the remaining legacy framework programs. Overall that process, despite all the marketing material available, has been a confusing mess of opaque terms and broken dreams.\r\n\r\nIn any event, I believe everything I have read (per the .NET implementation support table) indicates that the current Standard version and Core version should work together without issue. Yet the above pictured problem has added another layer of aggravation. I have looked, without success, to find a way to marry this dependency error.\r\n\r\nPossibly related to #250.\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7883487727","Type":"PullRequestEvent","CreatedAt":"2018-06-27T05:25:01","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30688","RelatedDescription":"Opened pull request \"use separate kevent() calls on FreeBSD for read and write event notifications.\" (#30688) at dotnet/corefx","RelatedBody":"This is somewhat speculative change but it impacts only FreeBSD.\r\nWe got bootstrap cli working on FreeBSD but msbuild and Roslyn were sometimes hanging.\r\n\r\nInvestigation pointed to some problems with kqueue and named pipes. \r\nWhen socket buffer is filled, send() fails with EWOULDBLOCK.\r\nWe would use kevent() to ask kernel to notify when socket is writable but the notification would never come. Unit tests from System.IO.Pipes were also failing. \r\n\r\nAfter some experiments I found out that kevent() works as expected if I separate requests fore read and write notifications to two separate calls. From reading docs it should work as it was written but it does not. \r\n\r\nI can open issue to track this and investigate more. But this changes allows msbuild and Roslyn to function and we can build coreclr and corefx using source-build. All named pipe tests are passing now on FreeBSD.\r\n"},{"Id":"7883422722","Type":"IssuesEvent","CreatedAt":"2018-06-27T04:58:54","Actor":"PeterWone","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30687","RelatedDescription":"Opened issue \"GetAllNetworkInterfaces STILL NotImplemented\" (#30687) at dotnet/corefx","RelatedBody":"Two years on and 2.1 is out there. But [issues detailed in #9675](https://github.com/dotnet/corefx/issues/9675) _still_ have not been addressed.\r\n\r\n#9675 is marked as an enhancement. I find that astonishing. The documentation says it works, and it doesn't. That's a bug, and a serious one if you need to enumerate interfaces.\r\n\r\nOne of the responses to #9675 suggests we use [Windows.Networking.Connectivity.NetworkInformation]\r\n(https://msdn.microsoft.com/en-us/library/windows/apps/windows.networking.connectivity.networkinformation.aspx) but this was not a fruitful line of investigation.\r\n\r\nNobody expects you to do everything at once, but this is not something that can be ignored. If it were something higher level I might do a PR and fix it myself, but the low level network stuff is out of my league. I wouldn't be so bent out of shape over this if I hadn't discovered this was reported two years ago and then closed without correction."},{"Id":"7883229352","Type":"PullRequestEvent","CreatedAt":"2018-06-27T03:34:50","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/30212","RelatedDescription":"Merged pull request \"[release/2.1] Fix WinHttpHandler when using authenticating proxies\" (#30212) at dotnet/corefx","RelatedBody":"*Port of #30196 to release/2.1*\r\n\r\nThis was a regression from .NET Core 2.0 due to PR #28105.\r\n\r\nProxy authentication using system default proxy settings that involve a PAC file\r\n(either autodiscovery or explicit PAC file) cause a NullReferenceException in WinHttpHandler in the\r\nCheckResponseForAuthentication() method.\r\n\r\nThis problem is only discovered when using an authenticating proxy server (any auth scheme) that is\r\ndiscovered using PAC files. This is considered the \"system default\" proxy. When this occurs, the\r\nhandler's Proxy property is null and dereferencing it caused the exception.\r\n\r\nDue to the problems described in #6997, the uri of the proxy can't be determined yet since it is only\r\nknown to WinHTTP. Fixing #6997 is complicated and impacts performance. However, in most cases, as\r\nlong as the credentials are a NetworkCredential object, knowing the uri of the proxy is needed.\r\n\r\nI tested this manually using the steps I described in #30191. I did not add any tests to this PR since\r\nthey can't be run in CI. However, I am working on a task that will eventually add Enterprise-Scenario\r\ntesting like this (PAC files, authenticating proxies, etc.) to our systems.\r\n\r\nFixes #30191\r\nContributes to #6997"},{"Id":"7883218466","Type":"IssuesEvent","CreatedAt":"2018-06-27T03:30:24","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30686","RelatedDescription":"Opened issue \"MemoryMappedFile.CreateFromFile constraints on Unix should be loosened to support IFCHR\" (#30686) at dotnet/corefx","RelatedBody":"MemoryMappedFile.CreateFromFile enforces a variety of constraints about the target file.  Those constraints make sense when working with disk-based files, but they don't all make sense when working with special files.  For example, it should be possible to create a map for /dev/mem, but such a special file has zero length, which causes a bunch of the checks in both MemoryMappedFile and MemoryMappedView to fail."},{"Id":"7883064662","Type":"IssuesEvent","CreatedAt":"2018-06-27T02:32:22","Actor":"nomadsoar","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30685","RelatedDescription":"Opened issue \"Running Microsoft/Mobius with .NetCore 2.1.301 occurs SerializationException: \"Serializing delegates is not supported on this platform\"\" (#30685) at dotnet/corefx","RelatedBody":"I tried to run [Microsoft/Mobius](https://github.com/Microsoft/Mobius) with .NetCore v2.1.301 instead of mono because .NetCore has better performance than mono.\r\n\r\nHowever, for some action functions such as first(), take(), fold() and etc. in Mobius will occur below exception:\r\n\r\n ```\r\nUnhandled Exception: System.Runtime.Serialization.SerializationException: Serializing delegates is not supported on this platform.\r\n   at System.MulticastDelegate.GetObjectData(SerializationInfo info, StreamingContext context)\r\n   at System.Runtime.Serialization.Formatters.Binary.WriteObjectInfo.InitSerialize(Object obj, ISurrogateSelector surrogateSelector, StreamingContext context, SerObjectInfoInit serObjectInfoInit, IFormatterConverter converter, ObjectWriter objectWriter, SerializationBinder binder)\r\n   at System.Runtime.Serialization.Formatters.Binary.ObjectWriter.Write(WriteObjectInfo objectInfo, NameInfo memberNameInfo, NameInfo typeNameInfo)\r\n   at System.Runtime.Serialization.Formatters.Binary.ObjectWriter.Serialize(Object graph, BinaryFormatterWriter serWriter, Boolean fCheck)\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream serializationStream, Object graph, Boolean check)\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream serializationStream, Object graph)\r\n   at Microsoft.Spark.CSharp.Core.SparkContext.BuildCommand(CSharpWorkerFunc workerFunc, SerializedMode deserializerMode, SerializedMode serializerMode) in /home/neil/CathayLia/CathayLia_v5.0-NetCoreSpark/Adapter/Core/SparkContext.cs:line 607\r\n   at Microsoft.Spark.CSharp.Core.PipelinedRDD`1.get_RddProxy() in /home/neil/CathayLia/CathayLia_v5.0-NetCoreSpark/Adapter/Core/PipelinedRDD.cs:line 97\r\n   at Microsoft.Spark.CSharp.Core.RDD`1.GetNumPartitions() in /home/neil/CathayLia/CathayLia_v5.0-NetCoreSpark/Adapter/Core/RDD.cs:line 197\r\n   at Microsoft.Spark.CSharp.Core.RDD`1.Take(Int32 num) in /home/neil/CathayLia/CathayLia_v5.0-NetCoreSpark/Adapter/Core/RDD.cs:line 803\r\n   at Microsoft.Spark.CSharp.Core.RDD`1.First() in /home/neil/CathayLia/CathayLia_v5.0-NetCoreSpark/Adapter/Core/RDD.cs:line 854\r\n   at Cathaylife.CathayLiability.Main(String[] args) in /home/neil/CathayLia/CathayLia_v5.0-NetCoreSpark/NetCoreSparkLiability/Program.cs:line 122\r\n```\r\n\r\nThis exception will not occur if I run Microsoft/Mobius with mono.\r\n\r\nBelow is my environment information:\r\nOS: CentOS 7.5\r\nNetCore: 2.1.301\r\nMono: 5.12\r\nMicrosoft/Mobius: 2.0.200\r\nReferred Nuget package:\r\n- log4net: 2.0.8\r\n- Microsoft.Extensions.Configuration.Xml: 2.1.1\r\n- Newtonsoft.Json: 11.0.2\r\n- Razorvine.Pyrolite.NetCore: 1.0.0\r\n- Razorvine.Serpent.NetCore: 1.18.0\r\n\r\nIs there any solution for it ? \r\n\r\nThank you.\r\n"},{"Id":"7883049461","Type":"IssuesEvent","CreatedAt":"2018-06-27T02:26:45","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30666","RelatedDescription":"Closed issue \"Add support for interpolation within appsettings\" (#30666) at dotnet/corefx","RelatedBody":"Currently, any app configuration entries in your appsettings.json file must be a direct value type, ex:\r\n\r\n    \"TargetDirectories\": {\r\n        \"RootDir\": \"/path/to/rootdir/\",\r\n        \"SubDir1\": \"subdir1\",\r\n        \"SubDir2\": \"subdir2\"\r\n    }\r\n\r\nIf I, as a developer, want to concatenate or otherwise combine configuration parameters, I have to wire all of it up manually within my code:\r\n\r\n    public class TargetDirectories\r\n    {\r\n        public string RootDir { get; set; }\r\n        public string SubDir1 { get; set; }\r\n        public string SubDir2 { get; set; }\r\n        public string FullDirectoryPath => $\"{RootDir}/{SubDir1}/{SubDir2}\";\r\n    }\r\n\r\nThis is more error prone and verbose than it could be, especially since a proper implementation would likely want to check to ensure configuration values were parsed properly and exist on the model object prior to accessing them.\r\n\r\nMy hope is that support could be added to interpolate values within the config file such that combinations like the above example could be defined solely within the configuration file itself:\r\n\r\n    \"TargetDirectories\": {\r\n        \"RootDir\": \"/path/to/rootdir/\",\r\n        \"SubDir1\": \"subdir1\",\r\n        \"SubDir2\": \"subdir2\",\r\n        \"FullDirectoryPath\": \"${RootDir}/${SubDir1}/${SubDir2}\"\r\n    }\r\n\r\n(note: I'm using the same syntax used by [the python configparser library](https://docs.python.org/3.4/library/configparser.html#interpolation-of-values) just for the sake of example. Whatever syntax is most appropriate for .net core could be chosen.)\r\n\r\nThis would follow the same expected behavior as the rest of the existing configuration tools, such that we could still map our configuration entries to a configuration model class:\r\n\r\n    public class TargetDirectories\r\n    {\r\n        public string RootDir { get; set; }\r\n        public string SubDir1 { get; set; }\r\n        public string SubDir2 { get; set; }\r\n        public string FullDirectoryPath { get; set };\r\n    }\r\n```\r\n\r\n// Startup.cs\r\n\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n...\r\n\r\n    services.Configure<TargetDirectories>(Configuration.GetSection(\"TargetDirectories\"));\r\n\r\n...\r\n}\r\n```\r\n\r\nThoughts?\r\n"},{"Id":"7882997488","Type":"PullRequestEvent","CreatedAt":"2018-06-27T02:07:34","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/30516","RelatedDescription":"Merged pull request \"[release/2.1] Fix SocketsHttpHandler for Windows auth proxy CONNECT tunneling\" (#30516) at dotnet/corefx","RelatedBody":"*Port of #30478 to release/2.1*\r\n\r\nSocketsHttpHandler wasn't even trying to send Negotiate/NTLM auth tokens to a proxy. This was due\r\nto some invalid logic regarding the \"usingProxy\" field in HttpConnection. Reworked this logic to\r\nbe clearer about the various kinds of proxy scenarios.\r\n\r\nI refactored the loopback proxy server and made it much more robust. It can now handle multiple\r\nrequests and multiple connections which helps test against the other handlers whose behavior is\r\ndifferent in this area. I plan to do further work in consolidating the LoopbackServer and\r\nLoopbackProxyServer classes in future PRs.\r\n\r\nI created a separate HttpClientHandlerTest.Proxy.cs file and moved many existing proxy tests and\r\nadded new tests. The current HttpClientHandlerTest.cs file is still over 3000 lines and needs more\r\nrefactoring to make it easier to maintain and track test scenario coverage.\r\n\r\nFixes #30330"},{"Id":"7882963049","Type":"PullRequestEvent","CreatedAt":"2018-06-27T01:54:39","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/28184","RelatedDescription":"Closed pull request \"ImmutableArray<T>.Builder.Add splitted in fast- and cold-path\" (#28184) at dotnet/corefx","RelatedBody":"# Description\r\n\r\nBased on https://github.com/dotnet/corefx/pull/28177#discussion_r175290368\r\n`Add` is split in a fast-path without resizing the array, and a cold-path that does the resize.\r\nOn the fast-path the bounds-check for the array-access is also eliminated.\r\n\r\n# Benchmarks\r\n\r\nCode for benchmarks is taken from [svick](https://github.com/svick/Benchmark/tree/66aed74)\r\n\r\n`SimpleAdd` is the original code, i.e. before https://github.com/dotnet/corefx/pull/28177\r\n`TweakedAdd` is code of https://github.com/dotnet/corefx/pull/28177\r\n`SplitAdd` is code of this PR.\r\n\r\n## win-x64\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.10.11, OS=Windows 10 Redstone 3 [1709, Fall Creators Update] (10.0.16299.309)\r\nProcessor=Intel Core i7-7700HQ CPU 2.80GHz (Kaby Lake), ProcessorCount=8\r\nFrequency=2742189 Hz, Resolution=364.6722 ns, Timer=TSC\r\n.NET Core SDK=2.1.300-preview1-008174\r\n  [Host]     : .NET Core 2.1.0-preview1-26216-03 (Framework 4.6.26216.04), 64bit RyuJIT\r\n  DefaultJob : .NET Core 2.1.0-preview1-26216-03 (Framework 4.6.26216.04), 64bit RyuJIT\r\n\r\n\r\n```\r\n|     Method |     Mean |     Error |    StdDev |\r\n|----------- |---------:|----------:|----------:|\r\n|  SimpleAdd | 4.192 us | 0.0240 us | 0.0213 us |\r\n| TweakedAdd | 2.178 us | 0.0203 us | 0.0190 us |\r\n|   SplitAdd | 1.950 us | 0.0140 us | 0.0124 us |\r\n\r\n## linux-x64\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.10.11, OS=ubuntu 16.04\r\nProcessor=Intel Core i7-7700HQ CPU 2.80GHz (Kaby Lake), ProcessorCount=4\r\n.NET Core SDK=2.1.300-preview1-008174\r\n  [Host]     : .NET Core 2.1.0-preview1-26216-03 (Framework 4.6.26216.04), 64bit RyuJIT\r\n  DefaultJob : .NET Core 2.1.0-preview1-26216-03 (Framework 4.6.26216.04), 64bit RyuJIT\r\n\r\n\r\n```\r\n|     Method |     Mean |     Error |    StdDev |   Median |\r\n|----------- |---------:|----------:|----------:|---------:|\r\n|  SimpleAdd | 4.823 us | 0.0891 us | 0.0790 us | 4.816 us |\r\n| TweakedAdd | 2.547 us | 0.0521 us | 0.1318 us | 2.505 us |\r\n|   SplitAdd | 2.232 us | 0.0434 us | 0.0426 us | 2.228 us |\r\n\r\n## linux-x64 (different CPU)\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.10.11, OS=ubuntu 17.10\r\nProcessor=Intel Xeon CPU 2.60GHz, ProcessorCount=2\r\n.NET Core SDK=2.1.4\r\n  [Host]     : .NET Core 2.0.5 (Framework 4.6.0.0), 64bit RyuJIT\r\n  DefaultJob : .NET Core 2.0.5 (Framework 4.6.0.0), 64bit RyuJIT\r\n\r\n\r\n```\r\n|     Method |     Mean |     Error |    StdDev |   Median |\r\n|----------- |---------:|----------:|----------:|---------:|\r\n|  SimpleAdd | 6.320 us | 0.1574 us | 0.2673 us | 6.182 us |\r\n| TweakedAdd | 3.947 us | 0.0767 us | 0.0788 us | 3.933 us |\r\n|   SplitAdd | 3.439 us | 0.2023 us | 0.2408 us | 3.306 us |\r\n\r\n# Notes\r\n\r\nIn https://github.com/dotnet/corefx/pull/28177#discussion_r175297033 @svick reports that this change decreases perf on his machine. That's why I tested on three different machines, and all show a perf improvement. [List<T>.Add](https://github.com/dotnet/coreclr/blob/4e1ec7f1dfd70d1a84fcc3282add9bdf3be115e3/src/mscorlib/shared/System/Collections/Generic/List.cs#L238), [Stack<T>.Push](https://github.com/gfoidl/corefx/blob/36ae61031f94c7d92ce8750c088bfa640b5ccb1e/src/System.Collections/src/System/Collections/Generic/Stack.cs#L290) and similar classes use this pattern and all show an improvement."},{"Id":"7882954692","Type":"PullRequestEvent","CreatedAt":"2018-06-27T01:51:32","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/30684","RelatedDescription":"Merged pull request \"Disable DrawBezier/DrawLine_PointFs tests\" (#30684) at dotnet/corefx","RelatedBody":"cc: @stephentoub @JeremyKuhne \r\n\r\nrelated issue: https://github.com/dotnet/corefx/issues/30683"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7883449235","Type":"PullRequestEvent","CreatedAt":"2018-06-27T05:09:46","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28153","RelatedDescription":"Opened pull request \"Reduce IO costs in AnalyzerFileWatcherService\" (#28153) at dotnet/roslyn","RelatedBody":"This service tries to watch analyzer files to see if they've changed, and if they have inform the user that they'll have to restart Visual Studio. It did this via two ways:\r\n\r\n1. When a file was first added, it's modification time was stored in a dictionary, which was checked in any subsequent entry.\r\n2. Via file watchers.\r\n\r\nThe first approach was broken in an interesting way: each time a reference was added, we'd add the modification time to the map (doing the IO to get the time). This overwrote the previous value, even if the value had changed in the middle. Then, we'd do the IO a second time, checking against the value we had just stored. As a result, the window where we could detect a change in the first approach was very\r\ntiny.\r\n\r\nI attempt to rectify what seems to be the intent here and also speed it up. First off, we won't overwrite previous values so the first approach has a better chance of actually working. Also, we'll read the data\r\nonce instead of twice. Further more, once the file watcher (second approach) is active, we'll just stop reading timesetamps entirely, because by then there's no reason to use the first approach at all.\r\n\r\nNote this approach still has a flaw: if the file is modified between when we do any timestamp checking, and the file watcher is active, we'll completely miss the change and report nothing, at least until somebody tries adding the analyzer again. This isn't new; it seems this was already broken anyways. We could just always force the file watcher immediately, but that might be tied up if somebody else is using the service so we're still assuming IO is cheaper in that case.\r\n\r\nThis change is intended as a quick reward without churning this area more fully; it's also possible we could move more of this to a separate thread; doing so would require the proof that it's safe. I'll revisit this once this becomes the big fish to fry again.\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n### Customer scenario\r\n\r\nUser opens a large solution; it takes longer than they'd like.\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nDon't use analyzers.\r\n\r\n### Risk\r\n\r\nLow: just changing how one particular codepath is handled when adding analyzers.\r\n\r\n### Performance impact\r\n\r\nBetter: opening a csproj/msvbprj-based Roslyn.sln, this shaves off approximately 600ms from solution load in my testing on my dev VM.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nNo, always been like this.\r\n\r\n### Root cause analysis\r\n\r\nWe were repeatedly asking for file modification times for a file when we could reduce the number of IO operations. Even if IO was free, the CPU overhead wasn't.\r\n\r\n### How was the bug found?\r\n\r\nPerformance trace analysis of solution load, looking for low-hanging fruit.\r\n\r\n</details>\r\n"},{"Id":"7883221974","Type":"PullRequestEvent","CreatedAt":"2018-06-27T03:31:47","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28152","RelatedDescription":"Opened pull request \"Extract code for classifying a document span into its own helper class.\" (#28152) at dotnet/roslyn","RelatedBody":""},{"Id":"7883058386","Type":"PullRequestEvent","CreatedAt":"2018-06-27T02:30:05","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/28108","RelatedDescription":"Merged pull request \"Bind goto case expression even in presence of errors\" (#28108) at dotnet/roslyn","RelatedBody":"Fixes #18225\r\n"},{"Id":"7883058377","Type":"IssuesEvent","CreatedAt":"2018-06-27T02:30:05","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/18225","RelatedDescription":"Closed issue \"Missing child IOperations for an IInvalidStatement for a goto case statement outside switch statement\" (#18225) at dotnet/roslyn","RelatedBody":"Source:\r\n```\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        /*<bind>*/goto case 1;/*</bind>*/\r\n    }\r\n}\r\n```\r\n\r\nIOperation:\r\n```\r\nIInvalidStatement (OperationKind.InvalidStatement, IsInvalid)\r\n```\r\n\r\nIOperation tree is missing the ILiteralExpression child.\r\nIssue seems to be here: http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp/Binder/Binder_Statements.cs,434"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7882496144","Type":"PullRequestEvent","CreatedAt":"2018-06-26T23:01:54","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6020","RelatedDescription":"Opened pull request \"Moved SafeWaitHandle and cancellationToken to shared\" (#6020) at dotnet/corert","RelatedBody":"Coreclr PR:- "},{"Id":"7882487133","Type":"PullRequestEvent","CreatedAt":"2018-06-26T22:59:10","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6019","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#6019) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"7882325299","Type":"PullRequestEvent","CreatedAt":"2018-06-26T22:12:36","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6019","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#6019) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"7879787692","Type":"PullRequestEvent","CreatedAt":"2018-06-26T14:17:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6018","RelatedDescription":"Merged pull request \"Fix bogus assert in ArraySortHelper\" (#6018) at dotnet/corert","RelatedBody":"Fixes #6016.\r\nResolves #6015.\r\n\r\nRegression test that will also hit the code path in CoreCLR is in dotnet/corefx#30664."},{"Id":"7879787660","Type":"IssuesEvent","CreatedAt":"2018-06-26T14:17:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6015","RelatedDescription":"Closed issue \"Access Violation in System.Tests.TupleTests\" (#6015) at dotnet/corert","RelatedBody":"System.Tests.TupleTests.CompareTo and System.Tests.TupleTests.Equals_GetHashCode return a null address during interface dispatch. \r\nThese were regressed because of a silent failure in CoreFX CI (fixed by #6014) \r\n\r\nShared stack trace (cut down for brevity)\r\n```\r\nxunit_console_netcore!S_P_CoreLib_System_Tuple_1<Int16>__System_Collections_IStructuralComparable_CompareTo + 0x11c\r\nxunit_console_netcore!System_Runtime_Tests_System_Tests_TupleTests_TupleTestDriver_10___c__DisplayClass20_0<Int16__Int32__Int64__System___Canon__Char__Single__Double__S_P_CoreLib_System_DateTime__System___Canon__S_P_CoreLib_System_TimeSpan>___IStructuralComparable_NullComparer_ThrowsNullReferenceException_b__0 + 0x43\r\nxunit_console_netcore!xunit_assert_Xunit_Assert__RecordException_0 + 0x4b\r\nxunit_console_netcore!xunit_assert_Xunit_Assert__Throws_0<System___Canon> + 0x5f\r\nxunit_console_netcore!System_Runtime_Tests_System_Tests_TupleTests_TupleTestDriver_10<Int16__Int32__Int64__System___Canon__Char__Single__Double__S_P_CoreLib_System_DateTime__System___Canon__S_P_CoreLib_System_TimeSpan>__IStructuralComparable_NullComparer_ThrowsNullReferenceException + 0xa1\r\nxunit_console_netcore!System_Runtime_Tests_System_Tests_TupleTests_TupleTestDriver_10<Int16__Int32__Int64__System___Canon__Char__Single__Double__S_P_CoreLib_System_DateTime__System___Canon__S_P_CoreLib_System_TimeSpan>__CompareTo + 0xff\r\nxunit_console_netcore!System_Runtime_Tests_System_Tests_TupleTests__CompareTo + 0x127\r\n[...]\r\n```"},{"Id":"7879787646","Type":"IssuesEvent","CreatedAt":"2018-06-26T14:17:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6016","RelatedDescription":"Closed issue \"Assert in System.Tests.ArrayTests\" (#6016) at dotnet/corert","RelatedBody":"`Sort_Array_Array_NonGeneric` fails with an Access Violation.\r\nStack trace below:\r\n```\r\n\r\nThese were regressed because of a silent failure in CoreFX CI (fixed by #6014)\r\n\r\nKERNELBASE!RaiseFailFastException + 0x74\r\nxunit_console_netcore!S_P_CoreLib_Interop_mincore__PInvoke_RaiseFailFastException + 0x56\r\nxunit_console_netcore!S_P_CoreLib_Interop_mincore__RaiseFailFastException + 0x102\r\nxunit_console_netcore!S_P_CoreLib_System_RuntimeExceptionHelpers__FailFast_1 + 0x1a9\r\nxunit_console_netcore!S_P_CoreLib_System_RuntimeExceptionHelpers__FailFast + 0x27\r\nxunit_console_netcore!S_P_CoreLib_System_Diagnostics_Debug__ShowDialog + 0xb0\r\nxunit_console_netcore!S_P_CoreLib_System_Action_4<System___Canon__System___Canon__System___Canon__System___Canon>__InvokeOpenStaticThunk + 0x4d\r\nxunit_console_netcore!S_P_CoreLib_System_Diagnostics_Debug__Assert_1 + 0xca\r\nxunit_console_netcore!S_P_CoreLib_System_Diagnostics_Debug__Assert + 0x45\r\nxunit_console_netcore!S_P_CoreLib_System_Collections_Generic_ArraySortHelper_2<System___Canon__System___Canon>__SwapIfGreaterWithItems + 0x71\r\nxunit_console_netcore!S_P_CoreLib_System_Collections_Generic_ArraySortHelper_2<System___Canon__System___Canon>__IntroSort + 0x115\r\nxunit_console_netcore!S_P_CoreLib_System_Collections_Generic_ArraySortHelper_2<System___Canon__System___Canon>__IntrospectiveSort + 0x133\r\nxunit_console_netcore!S_P_CoreLib_System_Collections_Generic_ArraySortHelper_2<System___Canon__System___Canon>__Sort + 0x12c\r\nxunit_console_netcore!S_P_CoreLib_System_Array__Sort_15<System___Canon__System___Canon> + 0x1f1\r\nxunit_console_netcore!S_P_CoreLib_System_Array__SortImpl + 0x138\r\nxunit_console_netcore!S_P_CoreLib_System_Array__Sort_6 + 0x2a4\r\nxunit_console_netcore!System_Runtime_Tests_System_Tests_ArrayTests__Sort_Array_Array_NonGeneric + 0x289\r\n```\r\n\r\nThe failed assert is this\r\nhttps://github.com/dotnet/corert/blob/8e3635626e4b7068d1aaf234b49b5e920721ca67/src/System.Private.CoreLib/shared/System/Collections/Generic/ArraySortHelper.cs#L429\r\n"},{"Id":"7878567118","Type":"PullRequestEvent","CreatedAt":"2018-06-26T10:39:07","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6018","RelatedDescription":"Opened pull request \"Fix bogus assert in ArraySortHelper\" (#6018) at dotnet/corert","RelatedBody":"Fixes #6016.\r\nResolves #6015.\r\n\r\nRegression test that will also hit the code path in CoreCLR is in dotnet/corefx#30664."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7883039566","Type":"PullRequestEvent","CreatedAt":"2018-06-27T02:22:57","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2367","RelatedDescription":"Merged pull request \"Merge release/2.1.4xx to master\" (#2367) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7882705674","Type":"PullRequestEvent","CreatedAt":"2018-06-27T00:15:01","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2336","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.8.0-preview3.5278 into sdk\" (#2336) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.8.0-preview3.5278 into sdk release/2.1.4xx branch"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1010269960948465665","CreatedAt":"2018-06-22T21:15:03+00:00","UserScreenname":"dotnet","Text":".NET Core 2.0 End of Life Extended to October 1, 2018 https://t.co/KQAlfqjfGv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":50,"FavoriteCount":52,"RawContent":null},{"Id":"1010268594725269504","CreatedAt":"2018-06-22T21:09:37+00:00","UserScreenname":"dotnet","Text":".NET Core 2.1 June Update https://t.co/GJkOJkg0zJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":133,"FavoriteCount":85,"RawContent":null},{"Id":"1010144767924154368","CreatedAt":"2018-06-22T12:57:34+00:00","UserScreenname":"dotnet","Text":"It's #fsharp Friday on Fritz and Friends with our friend @csharpfritz  -- tune in today and learn about… https://t.co/tBMBYu7qnC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":11,"RawContent":null},{"Id":"1009783192751099904","CreatedAt":"2018-06-21T13:00:48+00:00","UserScreenname":"dotnet","Text":"These two are always great to learn from separately, and today they're working together.  You won't want to miss… https://t.co/DhpOULOjfn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":3,"RawContent":null},{"Id":"1009514602428710912","CreatedAt":"2018-06-20T19:13:31+00:00","UserScreenname":"dotnet","Text":".NET Core 2.0 will reach End of Life on September 1, 2018 https://t.co/5PoTWEAQgt","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":267,"FavoriteCount":303,"RawContent":null},{"Id":"1009477602791133186","CreatedAt":"2018-06-20T16:46:30+00:00","UserScreenname":"dotnet","Text":"Call for papers now open for #dotnetconf virtual event in September! Present to our worldwide community. No travel… https://t.co/KraqcAKxAo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":355,"FavoriteCount":253,"RawContent":null},{"Id":"1009207915775811584","CreatedAt":"2018-06-19T22:54:51+00:00","UserScreenname":"dotnet","Text":"The RyuJIT transition is complete! https://t.co/JhkSV0Aybh","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":322,"FavoriteCount":171,"RawContent":null}]}},"RunOn":"2018-06-27T05:30:34.2739729Z","RunDurationInMilliseconds":8595}