{"Data":{"Blog":{"FeedItems":[{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null},{"Title":"Introducing API Analyzer","PublishedOn":"2017-10-31T23:24:24+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"This post was written by Olia Gavrysh. Have you ever wondered which APIs are deprecated and which should you use instead? Or have you ever used an API and then found out it didn&#8217;t work on Mac or...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/introducing-api-analyzer/","RawContent":null},{"Title":"Welcome to C# 7.1","PublishedOn":"2017-10-31T22:39:48+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"With C# we have always tended towards major releases: bundle a lot of features up, and release less frequently. We even went so far as routinely omitting the traditional &#34;.0&#34; when we talked...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/31/welcome-to-c-7-1/","RawContent":null},{"Title":"Moving to real time test discovery in Test Explorer","PublishedOn":"2017-10-30T22:46:58+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Real time test discovery is a new Visual Studio feature that uses a Roslyn analyzer to discover tests and populate the test explorer in real time without requiring you to build your project. This...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/30/real-time-test-discovery/","RawContent":null},{"Title":"Entity Framework 6.2 Runtime Released","PublishedOn":"2017-10-26T21:32:59+00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Today we announce the availability of EF 6.2 runtime in NuGet.org. Entity Framework (EF) is Microsoft&#8217;s traditional object/relational mapper (O/RM) for .NET Framework. To understand the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/26/entity-framework-6-2-runtime-released/","RawContent":null},{"Title":".NET Core Performance Profiling with Intel® VTune™ Amplifier 2018","PublishedOn":"2017-10-23T16:41:13+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"This post was written by Varun Venkatesan, Li Tian, and Juan Rodriguez, engineers at Intel. They are excited to share .NET Core-specific enhancements that Intel has made to VTune Amplifier 2018....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/23/net-core-performance-profiling-with-intel-vtune-amplifier-2018/","RawContent":null},{"Title":"Experiment with Azure for FREE!","PublishedOn":"2017-10-19T14:00:11+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"What is Azure? What can it do for me? Do I need it? How do I find out? How do I use it? Will it help my business? Can it help my career? With all the things Azure can do, it&#8217;s hard to know where...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/19/experiment-with-azure-for-free/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6828894301","Type":"IssuesEvent","CreatedAt":"2017-11-08T22:02:15","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/39","RelatedDescription":"Opened issue \"Introducing Xml Serializer Generator for .NET Core\" (#39) at dotnet/announcements","RelatedBody":"# Introducing Xml Serializer Generator for .NET Core\r\nLike the Xml Serializer Generator (sgen.exe) on desktop, Microsoft.XmlSerializer.Generator NuGet package is the solution for .NET Core and .NET Standard Libraries. It creates an Xml serialization assembly for types contained in an assembly in order to improve the startup performance of Xml serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\n\r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/xmlserializergenerator-instructions.md). \r\n\r\n## Discussion \r\nPlease share your thoughts and have any discussions with us at: \r\n\r\n- [dotnet/corefx #25138](https://github.com/dotnet/corefx/issues/25138) \r\n\r\n## Details\r\nWhen the Xml Serializer Generator is not used, an XmlSerializer generates serialization code for each type every time when an application runs. You can improve the startup performance of Xml serialization by simply adding the reference of Microsoft.XmlSerializer.Generator NuGet package to your project. Xml Serializer Generator will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/corefx](https://github.com/dotnet/corefx/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "},{"Id":"6823588799","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:25","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Closed issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds [about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs"},{"Id":"6823588782","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:25","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/31","RelatedDescription":"Closed issue \"Issues with .NET Standard 2.0 with .NET Framework & NuGet\" (#31) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\nWe've designed .NET Standard & our tooling so that projects targeting .NET Framework 4.6.1 can consume NuGet packages & projects targeting .NET Standard 2.0 or earlier. Unfortunately, we've seen a few issues around that scenario. The purpose of this document is to summarize the issues, outline our plan on addressing them, and providing workarounds you can deploy with today's state of our tooling.\r\n\r\n## Symptoms and root cause\r\n\r\nThe [primary symptom](https://github.com/dotnet/standard/issues/410) is that applications crash with a `FileLoadException` or a `FileNotFoundException`. Another symptom is warnings at build time regarding assembly versions. This is due to one or both of the following issues:\r\n\r\n1. Missing binding redirects\r\n2. Missing binaries that come from indirect NuGet packages\r\n\r\n### Missing binding redirects\r\n\r\n.NET Standard 1.x was based around contracts. Many of these contracts shipped with .NET Framework 4.5 and later. However, different versions of .NET Framework picked up different versions of these contracts, as by-design of contract versioning. As a side effect of marking .NET Framework 4.6.1 as implementing .NET Standard 2.0, some projects will now start picking up binaries built for .NET Standard 1.5 and 1.6 (as opposed to previously where .NET Framework 4.6.1 was considered as implementing .NET Standard 1.4). This results in mismatches of the assembly versions between what was shipped in .NET Framework and what was part of .NET Standard 1.5/1.6.\r\n\r\nThis can be addressed by binding redirects. As writing them by hand sucks, we added an [Automatic Binding Redirect Generation][abrg] feature in .NET Framework 4.5.1. This feature is opt-in. Unfortunately, it's not enabled based on target framework, but by which target framework was selected when the project was created (as the feature is turned on via an MSBuild property that is conditionally emitted by the template). In practice, this means it's mostly off you often upgrade existing projects, rather than creating new ones.\r\n\r\n[abrg]: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection\r\n\r\n### Missing binaries\r\n\r\nThere are two primary flavors of NuGet: `packages.config` and `PackageReference`.\r\n\r\n* With `packages.config`, each project has a config file with a flattened graph of all the NuGet dependencies. The project file in turn has direct links to all the assets. The assets are selected at install time. None of this includes indirect NuGet references coming from referenced projects.\r\n\r\n* With `PackageReference` each project contains MSBuild `PackageReference` items. The project file contains no references to any assets as the assets are selected at build time. Package restore will compute the graph of all packages, including indirect NuGet references coming from referenced projects.\r\n\r\nThe default for .NET Framework projects is `packages.config`. This ensures more compatibility because `PackageReference` doesn't support all the features that `packages.config` did, for example, PowerShell install scripts and content.\r\n\r\nThe only supported mode for SDK-style projects (.NET Core/.NET Standard) is `PackageReference`. This means that a .NET Framework project referencing a .NET Standard project ends up crossing the streams between two different NuGet models. When the .NET Standard project references NuGet packages that the .NET Framework project doesn't reference, the application ends up missing all binaries coming from those packages.\r\n\r\nWhy has this worked before? Because with` packages.config`, all dependencies are copied to each project's output folder. MSBuild copies them up from there. With `PackageReference`, we don't copy the binaries because it relies on the consuming project to see its dependencies and extract the proper asset itself. This allows the consuming project to pick up the right assets for packages that use bait & switch (which many of the .NET packages must do).\r\n\r\n### Plan\r\n\r\nThe plan is to address these issues moving forward as follows:\r\n\r\n1. **Converge on `PackageReference` for all project types**, including .NET Framework. The short-term plan for (1) is to start blocking project-to-project references in Visual Studio 15.4 that will end up crossing the streams between `packages.config` and `PackageReference`. This block is UI only; you can still edit the reference by editing the project by hand. The error message will instruct you to switch the .NET Framework project to `PackageReference` if you want to reference a .NET Standard project. Referencing .NET Standard binaries or NuGet packages will not require this, it's only about project-to-project references. In later releases, we plan on providing a converter. The challenge is that `packages.config` has features we can't offer for `PackagReference` across the board, in particular PowerShell install scripts and content. We'll need good guidance and mitigations, if applicable.\r\n\r\n2. **Ensure binding redirects are on by default**. Short term, this means we need to fix our target files to make sure we turn on automatic binding redirect generation. However, binding redirects don't work well in all scenarios, when there is no application project (like unit tests or add-ins). We need to work on a plan to bring the regular “higher wins” binding policy without binding redirects. This needs a proposal and proper vetting, but it seems we've reached the point where this is necessary.\r\n\r\n## Workarounds\r\n\r\n### Regular .NET Framework projects\r\n\r\n1. Enable [automatic binding redirects][abrg] in the root .NET Framework application.\r\n2. Make sure your root application project doesn't use `packages.config` but uses `PackageReference` for NuGet packages\r\n    * If you currently don't have `packages.config`, simply add `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` to your project file\r\n    * If you currently do have a `packages.config`, convert the contents to packages references in the project file. The syntax is like this:\r\n        - `<PackageReference Include=\"package-id\" Version=\"package-version\" />`\r\n\r\n### ASP.NET web applications and web sites\r\n\r\n1. Web applications and web sites don't support automatic binding redirect generation. In order to resolve binding conflicts, you need to double click the warning in the error list and Visual Studio will add them to your `web.config` file.\r\n2. In web application projects, you should enable `PackageReference` like mentioned above. In web sites, you cannot use `PackageReference` as there is no project file. In that case, you need to install all NuGet packages into your web site that any of the direct or indirect project references depend on.\r\n\r\n### Unit tests projects\r\n\r\nBy default, binding redirects aren't added to class library projects. This is problematic for unit testing projects as they are essentially like apps. So in addition to what's outlined in [automatic binding redirects][abrg] you also need to specify `GenerateBindingRedirectsOutputType`:\r\n\r\n```xml\r\n<PropertyGroup>\r\n    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n    <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n</PropertyGroup>\r\n```\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/standard/issues/481."},{"Id":"6823588769","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:25","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/29","RelatedDescription":"Closed issue \".NET Core Runtime ARM32 builds now available\" (#29) at dotnet/announcements","RelatedBody":"# .NET Core Runtime ARM32 builds now available\r\n\r\nThe .NET Core team is now producing ARM32 builds for .NET Core Runtime 2.0+, for both Linux and Windows. These builds are great for using on Raspberry Pi. The builds are not yet supported by Microsoft and have preview status. Please give us feedback.\r\n\r\nDocker ARM32 images are also available at [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/). See [microsoft/dotnet Docker Hub README adopts segmented OS/Arch style](https://github.com/dotnet/announcements/issues/27) for a related announcement.\r\n\r\nThere are two good sources of .NET Core ARM32 samples that you can use to get started:\r\n\r\n* [.NET Core on Raspberry Pi](https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md)\r\n* [.NET Core Docker Raspberry Pi Samples](https://github.com/dotnet/dotnet-docker-samples#arm32--raspberry-pi)\r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n* [dotnet/coreclr #13369](https://github.com/dotnet/coreclr/issues/13369)\r\n\r\n## Details\r\n\r\n* [dotnet/coreclr label:arch-arm32](https://github.com/dotnet/coreclr/issues?utf8=%E2%9C%93&q=label%3Aarch-arm32%20)\r\n\r\nThe team is producing Runtime and not SDK builds for .NET Core. As a result, you need to build your applications on another operating system and then copy to a Raspberry Pi (or similar device) to run. The samples provided above show you how to do that.\r\n\r\nYou can get builds from the following links. Official builds are not yet provided.\r\n\r\n* [.NET Core 2.0.0 ARM32 build](https://dotnetcli.blob.core.windows.net/dotnet/Runtime/2.0.0/dotnet-runtime-2.0.0-linux-arm.tar.gz)\r\n* [.NET Core 2.0 servicing builds](https://github.com/dotnet/core/blob/master/daily-builds-servicing.md)\r\n* [.NET Core 2.1 daily builds](https://github.com/dotnet/core/blob/master/daily-builds.md)\r\n\r\nNote that ARM32 is sometimes referred to as `armhf`, which refers to [hardware floating point capability](https://en.wikipedia.org/wiki/ARM_architecture#VFP).\r\n\r\nThe SDK has not been made available for ARM32 to yet as it doesn't fit within a reasonable performance envelope (space and time) for ARM32. We will resolve this although it isn't a top priority currently (unless feedback suggests otherwise). Our belief is that building on a desktop or build machine will be both more efficient and a reasonable work around to doing development on the Pi for the time being. We also wanted to prioritize the runtime being available since it's necessary for anything to work.\r\n\r\nA more near-term need is unit testing on ARM32. There is no replacement for running tests on device. We intend to publish short-term workarounds for this and work on a longer-term solution that is easy to use."},{"Id":"6823588709","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:24","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/16","RelatedDescription":"Closed issue \".NET Core 2.0 multi-arch tags now use Debian Stretch\" (#16) at dotnet/announcements","RelatedBody":"# .NET Core 2.0 multi-arch tags now use Debian Stretch\r\n\r\n## Summary\r\n\r\n[.NET Core 2.0 Docker multi-arch tags](https://hub.docker.com/r/microsoft/dotnet/) now use [Debian Stretch](https://www.debian.org/releases/stretch/) instead of [Debian Jessie](https://www.debian.org/releases/jessie/). .NET Core 2.0 Debian Jessie tags will still be provided. Debian Stretch is considered by the .NET Core team to be a better default choice for .NET Core Docker Linux image users for the lifetime of .NET Core 2.x.  There are no plans to update .NET Core 1.x in the same way.\r\n\r\n## Details\r\n\r\n- [Debian 9 Stretch released](https://www.debian.org/News/2017/20170617)\r\n- [Change 2.0 multi-arch tags to be based on stretch -- dotnet/dotnet-docker-nightly #322](https://github.com/dotnet/dotnet-docker-nightly/pull/322)\r\n- [.NET Core Docker images will move to multi-arch based tags -- dotnet/announcements #14](https://github.com/dotnet/announcements/issues/14)\r\n\r\n## Impact\r\n\r\nThe impact of this change should be minimal. It is possible that you may notice differences in Debian Stretch relative to Debian Jessie. This change would be considered a breaking change if it was made for existing 1.x multi-arch tags. It is considered acceptable because it is being made between major .NET versions (during .NET Core 2.0 preview phase).\r\n\r\nThe `latest` tag will be switched to the .NET Core 2.0 SDK when .NET Core 2.0 ships as RTM. This change will result in `latest` changing from Debian Jessie to Debian Stretch."},{"Id":"6823588682","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:23","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/12","RelatedDescription":"Closed issue \"Microsoft Security Advisory 4021279: Vulnerabilities in .NET Core, ASP.NET Core Could Allow Elevation of Privilege \" (#12) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory 4021279: Vulnerabilities in .NET Core, ASP.NET Core Could Allow Elevation of Privilege\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about vulnerabilities in public .NET Core and ASP.NET Core. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\n.NET Core & ASP.NET Core are the next generation of .NET that provide a familiar and modern framework for web and cloud scenarios. These products are actively developed by the .NET and ASP.NET team in collaboration with a community of open source developers, running on Windows, Mac OS X and Linux. When .NET Core was released, the version number was reset to 1.0.0 to reflect the fact that it is a separate product from its predecessor -.NET.\r\n\r\n## Discussion\r\nTo discuss the ASP.NET Core issues please see https://github.com/aspnet/Mvc/issues/6246\r\nTo discuss the CoreFX Core issues please see https://github.com/dotnet/corefx/issues/19535\r\n\r\n## Issue CVEs and Description\r\nCVE\t| Description\r\n----|-------------\r\n[CVE-2017-0248](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0248) | Security Feature Bypass\r\n[CVE-2017-0247](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0247) | Denial of Service\r\n[CVE-2017-0249](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0249) | Elevation of Privilege \r\n[CVE-2017-0256](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0256) | Spoofing\r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses the following affected package versions.\r\n\r\nPackage name | Package versions | Fixed package versions\r\n---------------- | ------------------- | -------------------------\r\nSystem.Text.Encodings.Web | 4.0.0<br />4.3.0  | 4.0.1<br />4.3.1\r\nSystem.Net.Http | 4.1.1<br />4.3.1  | 4.1.2<br />4.3.2|\r\nSystem.Net.Http.WinHttpHandler | 4.0.1<br />4.3.0 |  4.0.2<br />4.3.1\r\nSystem.Net.Security | 4.0.0<br />4.3.0 |  4.0.1<br />4.3.1\r\nSystem.Net.WebSockets.Client | 4.0.0<br />4.3.0 |  4.0.1<br />4.3.1\r\nMicrosoft.AspNetCore.Mvc | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Core | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Abstractions | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.ApiExplorer | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Cors | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.DataAnnotations | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Formatters.Json | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Formatters.Xml | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Localization | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Razor.Host | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.Razor | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.TagHelpers | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\nMicrosoft.AspNetCore.Mvc.WebApiCompatShim | 1.0.0, 1.0.1, 1.0.2, 1.0.3<br />1.1.0, 1.1.1, 1.1.2 |  1.0.4<br />1.1.3\r\n\r\n## Advisory FAQ\r\n### How do I know if I am affected? \r\n\r\n.NET Core and ASP.NET Core have two types of dependencies: direct and transitive. If your project has a direct or transitive dependency on any of the packages and versions listed above, you are affected.\r\nNote: As part of patching ASP.NET Core MVC we update every Microsoft.AspNetCore.Mvc.* package. If, for example, you have a dependency on `Microsoft.AspNetCore.Mvc` you should update to the appropriate version first (1.0.x should be updated to 1.0.4, 1.1.x should be updated to 1.1.3), and it will also update any other vulnerable ` Microsoft.AspNetCore.Mvc` dependency.\r\n\r\n### NET Core Project formats\r\n.NET Core has two different project file formats, depending on what software created the project. \r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1 and Microsoft Visual Studio 2017.  \r\n\t\r\nYou must ensure you follow the correct update instructions for your project type.\r\n\r\n### Direct Dependencies\r\nDirect dependencies are dependencies where you specifically add a package to your project. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project then you have taken a direct dependency on` Microsoft.AspNetCore.Mvc`.\r\n\r\nDirect dependencies are discoverable by reviewing your `project.json` or `csproj` file.\r\n\r\n### Transitive Dependencies\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if you add the `Microsoft.AspNetCore.Mvc` package to your project it depends on the `Microsoft.AspNetCore.Mvc.Core` package (among others). Your project has a direct dependency on `Microsoft.AspNetCore.Mvc` and a transitive dependency on the `Microsoft.AspNetCore.Mvc.Core` package.\r\nTransitive dependencies are reviewable in the Visual Studio Solution Explorer window, which supports searching, or by reviewing the `project.lock.json` file contained in the root directory of your project for `project.json` projects or the `project.assets.json` file contained in the obj directory of your project for `csproj` projects. These files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n## How do I fix my affected application?\r\nYou will need to fix both direct dependencies and review and fix any transitive dependencies. The affected packages and versions in the previous “Affected Software” section include each vulnerable package, the vulnerable versions, and the patched versions\r\n\r\n---\r\n\r\n**Note**: If you are using ASP.NET Core MVC in your projects you should first update the `Microsoft.AspNetCore.Mvc` version according to the affected versions table above. If you are currently using version 1.0.0, 1.0.1, 1.0.2 or 1.0.3 you should update your package version to 1.0.4. If you are using version 1.1.0, 1.1.1 or 1.1.2 you should update your package version to 1.1.3. This will update every MVC package to the fixed versions.\r\n\r\n---\r\n\r\n### Fixing Direct Dependencies – project.json/VS2015\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n     \"Microsoft.AspNetCore.Mvc \": \"1.0.1\",\r\n    }\r\n```\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Server.Kestrel` and `Microsoft.AspNetCore.Mvc`. \r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on one of the vulnerable packages, `Microsoft.AspNetCore.Mvc` version 1.0.1.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc` to 1.0.4.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.1\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.4\",     \r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Fixing Direct Dependencies – csproj/VS2017\r\nOpen your `projectname.csproj` file in your editor, or right click the project in Visual Studio 2017 and choose `Edit projectname.csproj` from the content menu, where projectname is the name of your project. Look for `PackageReference` nodes. The following shows an example project file:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.2\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe example has two direct package dependencies, as seen by the two `PackageReference` elements. The name of the package is in the Include attribute, and the package version number is in the Version attribute that is exposed to the right of the package name. The example shows two packages `Microsoft.AspNetCore` version 1.1.1, and `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nReview your `PackageReference` elements for any instance of the packages and versions listed above. In the example above, there is a direct dependency on one of the vulnerable packages, `Microsoft.AspNetCore.Mvc` version 1.1.2.\r\n\r\nTo update to the fixed package, change the version number to the appropriate package for your release. In the example, this would be updating `Microsoft.AspNetCore.Mvc` to 1.1.3.\r\n\r\nAfter updating the vulnerable package version, save your `csproj` file. The example `csproj` would now look as follows:\r\n\r\n``` XML\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0 \" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `csproj` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\n### After updating your direct dependencies\r\n\r\nRecompile your application.\r\n\r\nIf after recompilation you see a Dependency conflict warning, you must update your other direct dependencies to the appropriate version. \r\n\r\nFor example if your project refers to `Microsoft.AspNetCore.Routing` with a version number of 1.0.1 when you update your `Microsoft.AspNetCore.Mvc` package to 1.0.4, compilation will throw:\r\n\r\n`NU1012      Dependency conflict. Microsoft.AspNetCore.Mvc.Core 1.0.4 expected Microsoft.AspNetCore.Routing >= 1.0.4 but received 1.0.1`\r\n\r\nTo fix this, edit the version for the expected package to be the version expected by updating your `csproj` or `project.json` in the same way that you used to update the vulnerable package versions.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\n### Reviewing Transitive Dependencies \r\n\r\nThere are two ways to view transitive dependencies. You can either use Visual Studio’s Solution Explorer, or you can review your `project.lock.json` (project.json/VS2015) or `project.assets.json` (csproj/VS2017) file.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2015)\r\nIf you want to use Visual Studio 2015, open your project in Visual Studio 2015 and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a reference to `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2015.\r\n\r\n![vs2015](https://cloud.githubusercontent.com/assets/796298/25858059/a1ae6624-348f-11e7-9ce9-ff2d25a3fc5b.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc`, version 1.0.1, ` vulnerable version. \r\n\r\nThe first entry under the References heading refers to the target framework your application is using. This will be `.NETCoreApp`, `.NETStandard` or `.NET-Framework-vX.Y.Z` (where X.Y.Z is an actual version number) depending on how you configured your application. Under your target framework will be the list of packages you have directly taken a dependency on. In this example, the application takes a dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In this case the `Microsoft.AspNetCore.Mvc` package takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core` and numerous other packages.\r\n\r\n#### Manually reviewing project.lock.json (project.json/VS2015)\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for each of the vulnerable packages, using the format `AssemblyName/`. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Core/1.0.1` is a reference to v1.0.1 of `Microsoft.AspNetCore.Mvc.Core`.   If your `project.lock.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\n#### Fixing transitive dependencies (project.json/VS2015)\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.1.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.Net.Security` version 4.0.0 you would add a reference to the appropriate fixed version, 4.0.1. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.Net.Security\": \"4.0.1\",\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.1.0\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.1.1\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Using Visual Studio Solution Explorer (VS2017)\r\n\r\nIf you want to use Solution Explorer, open your project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for each of the vulnerable package names and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017.\r\n\r\n![vs2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In these results, you can see we have found references to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2.\r\n\r\nUnder the Dependencies node will be a NuGet node. Under the NuGet node will be the list of packages you have directly taken a dependency on and their versions. In this example, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions. In the example the `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer` which in turn takes a dependency on a vulnerable version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n#### Manually reviewing project.assets.json (VS2017)\r\n\r\nOpen the `project.assets.json` file from your project’s obj directory in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nSearch the `project.assets.json` file for each of the vulnerable packages, using the format `AssemblyName/`. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `Microsoft.AspNetCore.Mvc.Core/1.1.0` is a reference to v1.1.0 of `Microsoft.AspNetCore.Mvc.Core`.   If your `project.assets.json` file includes references to any of the vulnerable packages shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `csproj` file to override the transitive dependency. Open your `projectname.csproj` file in your editor, or right click on the project in Visual Studio 2017 and choose Edit `projectname.csproj` from the content menu, where `projectname` is the name of your project. Look for `PackageReference` nodes, for example:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `csproj` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.Net.Security` version 4.3.0 you would add a reference to the appropriate fixed version, 4.3.1.\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PackageTargetFallback>$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Security\" Version=\"4.3.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.3\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"1.0.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\nAfter you have added the direct dependency reference, save your `csproj` file.\r\n\r\nIf you are using Visual Studio, save your updated `csproj` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n### Rebuilding your application\r\nFinally rebuild your application, test as you would do normally and redeploy using your favored deployment mechanism.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\t\r\n### Disclaimer\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\nMicrosoft [thanks](https://go.microsoft.com/fwlink/?LinkId=21127) the following for working with us to help protect customers:\r\n\r\n- David Fernandez of [Sidertia Solutions](https://www.sidertia.com/Home) for reporting the ASP.NET Core Denial of Service Vulnerability (CVE-2017-0247)\r\n- Joonwoo Yu, Hyoung-Kee Choi of [Sungkyunkwan University](http://hit.skku.edu/~hkchoi/) for reporting the .NET Security Feature Bypass (CVE-2017-0248)\r\n- [Mikhail Shcherbakov](https://www.linkedin.com/in/mikhailshcherbakov) for reporting the ASP.NET Core Spoofing Vulnerability (CVE-2017-0256)\r\n\r\n### Revisions\r\n\r\n- V1.0 (May 9, 2017): Advisory published.\r\n- V1.1 (May 10, 2017): Advisory revised to include a table of issue CVEs and their descriptions. This is an informational change only."},{"Id":"6823588661","Type":"IssuesEvent","CreatedAt":"2017-11-08T00:48:23","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/6","RelatedDescription":"Closed issue \"Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'. Derived types must either match the security accessibility of the base type or be less accessible.\" (#6) at dotnet/announcements","RelatedBody":"# Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'\r\n\r\n## Summary\r\n\r\nUsing System.Net.Http 4.1.0-4.3.0 results in an exception when starting a web app that's .NET 4.6.1:\r\n* Inheritance security rules violated by type: 'System.Net.Http.WebRequestHandler'. Derived types must either match the security accessibility of the base type or be less accessible.\r\n\r\nDetails in https://github.com/dotnet/corefx/issues/11100\r\nUpdated [System.Net.Http 4.3.1 package](https://www.nuget.org/packages/System.Net.Http/4.3.1) contains a fix and is available on nuget.\r\n\r\n## Impact\r\n\r\nHere's list of technical breaking changes caused by the solution withworkarounds for each.\r\nNote that these new behaviors are specific when running on net46 / Desktop. When you run on .NET Core, the behavior is intact.\r\n\r\n1. `HttpClientHandler.CheckCertificateRevocationList` (introduced in System.Net.Http 4.1)\r\n    * New behavior: Throws `PlatformNotSupportedException`\r\n    * Workaround: Use `ServicePointManager.CheckCertificateRevocationList` instead (impacts the whole AppDomain, not just single `HttpClientHandler` as it did in System.Net.Http 4.1-4.3)\r\n2. `HttpClientHandler.SslProtocols` (introduced in System.Net.Http 4.1)\r\n    * New behavior: Throws `PlatformNotSupportedException`\r\n    * Workaround: Use `ServicePointManager.SecurityProtocol` instead (impacts the whole AppDomain, not just single `HttpClientHandler` as it did in System.Net.Http 4.1-4.3)\r\n3. `HttpClientHandler.ServerCertificateCustomValidationCallback` (introduced in System.Net.Http 4.1)\r\n    * New behavior: Works fine, except that the first parameter of type `HttpRequestMessage` is always `null`\r\n    * Workaround: Use `ServicePointManager.ServerCertificateValidationCallback`\r\n4. HTTP/2.0 support (introduced in System.Net.Http 4.1)\r\n    * New behavior: System.Net.Http (for net46 = Desktop) no longer supports HTTP/2.0 protocol on Windows 10.\r\n    * Workaround: Target System.Net.Http.WinHttpHandler NuGet package instead.\r\n    * Details:\r\n      * HTTP/2.0 support is part of the new CoreFx HTTP stack which on Windows is based on WinHTTP.  The original HTTP stack in .NET Framework 4.6 did not support HTTP/2.0 protocol.  If HTTP/2.0 protocol is needed, there is a separate NuGet package, System.Net.Http.WinHttpHandler which provides a new HttpClient handler. This handler is similar in features to `HttpClientHandler` (the normal default handler for HttpClient) but will support HTTP/2.0 protocol.  When using HttpClient on .NET Core runtime, the WinHttpHandler is actually built-in to HttpClientHandler.  But on .NET Framework, you need to explicitly use WinHttpHandler.\r\n      * Regardless of whether you are running using .NET Framework runtime (with WinHttpHandler) or .NET Core runtime using HttpClientHandler (or WinHttpHandler), there are additional requirements in order to get HTTP/2.0 protocol working on Windows:\r\n        * The client must be running on Windows 10 Anniversary Build (build 14393 or later).\r\n        * The `HttpRequestMessage.Version` must be explicitly set to 2.0 (the default is normally 1.1). Sample code:\r\n\r\n```c#\r\n            var handler = new WinHttpHandler();\r\n            var client = new HttpClient(handler);\r\n            var request = new HttpRequestMessage(HttpMethod.Get, \"http://www.example.com\");\r\n            request.Version = new Version(2, 0);\r\n\r\n            HttpResponseMessage response = await client.SendAsync(request);\r\n```\r\n\r\n## Rationale\r\n\r\nAfter much discussion it was decided the best way forward would be to revert the HttpClientHandler implementation in net46 build of CoreFX back to using original .NET Framework HTTP stack instead of WinHTTP (WinHttpHandler) based stack.\r\n\r\nAdditionally, we will revise the implementation of the new APIs on HttpClientHandler we introduced in 4.1.0.0 OOB package so that it works accordingly for the net46 build. [Details and tracking progress](https://github.com/dotnet/corefx/issues/11100#issuecomment-276293185).\r\n\r\n---\r\n\r\n*As a reminder, announcement threads are locked. Please use the [original issue](https://github.com/dotnet/corefx/issues/11100) for feedback and questions. Thanks!*"},{"Id":"6818829276","Type":"IssuesEvent","CreatedAt":"2017-11-07T07:50:38","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/10","RelatedDescription":"Closed issue \"RyuJIT is the x86 JIT in .NET Core 2.0 – Replacing JIT32\" (#10) at dotnet/announcements","RelatedBody":"# RyuJIT is the x86 JIT in .NET Core 2.0 – Replacing JIT32\r\n\r\n## Summary\r\n\r\nThe RyuJIT JIT compiler will be used for all platform combinations for .NET Core 2.0 and beyond. JIT32 will be removed from the product. For .NET Core 1.x, RyuJIT is used for x64 and JIT32 is used for x86 chip support.\r\n\r\nWe intend for RyuJIT to be a 100% functionally compatible replacement for JIT32. RyuJIT has gone through extensive stress testing. This brings the .NET Core 32-bit product behavior much closer to the 64-bit product behavior.\r\n\r\nWe will publish more information on this change later. For now, this is just the announcement.\r\n\r\nNote: Windows is the only supported 32-bit platform for .NET Core 1.x and 2.x.\r\n\r\n### Details:\r\n\r\n- [Make RyuJIT/x86 the default x86 JIT (dotnet/coreclr #8260)](https://github.com/dotnet/coreclr/pull/8260)\r\n\r\n## Impact\r\n\r\n**Open Source** - RyuJIT is open source. JIT32 is not open source.\r\n\r\n**Single JIT Codebase** - There is now a single codebase for the CoreCLR JIT. This helps everyone who is working on platform expansion and who is investing in JIT improvements. An example is Samsung, who is investing in Linux x86 with RyuJIT x86.\r\n\r\n**Performance** - RyuJIT generally takes longer to compile than JIT32, but its optimizer can generate faster code. The performance difference may not be significant, depending on the application. In initial testing with ASP.NET, we found that the difference didn't matter. Please help us make RyuJIT faster! We will continue investing in RyuJIT performance (which often helps all architectures). If you notice performance regressions, we’re very interested to hear your results. Please contact us.\r\n\r\n**Features!** - RyuJIT has more features than JIT32. The feature gap with JIT32 will grow over time. The following features are now available to x86 workloads (due to this change): \r\n- SIMD\r\n- Fast Span&lt;T&gt; support\r\n- Inlining improvements\r\n- Devirtualization\r\n- Significantly better floating point performance\r\n- Better performance with value types (structs)\r\n\r\n**Possible compatibility concerns:** \r\n- floating-point precision\r\n- undefined behaviors (programs that happened to work that had bugs in them) especially around interop, inlining differences (GetCallerAssembly intrinsic).\r\n\r\nPlease test! If an x86 program was working in 1.x, and failing in 2.x, please report it on GitHub or at ryujit@microsoft.com. \r\n\r\nPlease see some of our past [blog posts on RyuJIT](https://blogs.msdn.microsoft.com/dotnet/tag/ryujit/) to learn more about it.\r\n\r\n## Rationale\r\n\r\nRyuJIT is the current and future platform of JIT compilation for .NET. We will use it for all platform combinations going forward. We're  more efficient as a developer community if we have a single codebase to learn, work on and improve."},{"Id":"6818827976","Type":"IssuesEvent","CreatedAt":"2017-11-07T07:50:13","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/15","RelatedDescription":"Closed issue \".NET Framework 4.7 Docker Image Now Available\" (#15) at dotnet/announcements","RelatedBody":"## 4.7 image is now available on [Docker Hub](https://hub.docker.com/r/microsoft/dotnet-framework/).\r\n\r\n### Summary\r\n- The latest tag of the .NET Framework image now points to the 4.7 image.\r\n- The way our images layer is now different (although this shouldn’t affect anyone). Read more on the [design and discussion](https://github.com/dotnet/designs/issues/7).\r\n- Check it out with the [4.7 Docker Image Sample](https://github.com/Microsoft/dotnet-framework-docker-samples/tree/master/dotnetapp-4.7)\r\n\r\n### Feedback\r\nPlease try it out! General feedback can be logged in the [.NET Framework Docker issues](https://github.com/Microsoft/dotnet-framework-docker/issues).\r\n[Microsoft/dotnet-framework-docker #22 ](https://github.com/Microsoft/dotnet-framework-docker/issues/22) is open for discussion.\r\n"},{"Id":"6818827238","Type":"IssuesEvent","CreatedAt":"2017-11-07T07:50:00","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/22","RelatedDescription":"Closed issue \".NET Core Support for macOS High Sierra\" (#22) at dotnet/announcements","RelatedBody":"# .NET Core Support for macOS High Sierra\r\n\r\n## Summary\r\n\r\n.NET Core 1.x and 2.0 do not currently support macOS High Sierra (version 10.13, currently in beta) due to changes in macOS. The .NET Core team has been testing macOS High Sierra builds and has filed bugs with Apple so that the two products can work better together.\r\n\r\nWe intend to have both .NET Core 1.x and 2.0 supporting macOS High Sierra by the time Apple ships the final production release. We are hoping to ship .NET Core 2.0 RTW with High Sierra support.\r\n\r\nAs .NET Core support for macOS High Sierra is improved, this announcement will be updated with the new status.\r\n\r\n## Impact\r\n\r\n.NET Core does not work on macOS High Sierra.\r\n\r\n## Details\r\n\r\n* [dotnet/core #677](https://github.com/dotnet/core/issues/677) -- tracking bug\r\n* [dotnet/corefx #22243](https://github.com/dotnet/corefx/pull/22243) -- workaround for issue 33294006, listed below.\r\n\r\nWe have reported the following issues to Apple as part of supporting .NET Core on macOS High Sierra.\r\n\r\n> Note: The issue links can only be accessed by Apple employees.\r\n\r\n* [33275095](https://bugreport.apple.com/web/?problemID=33275095) SSL Failure: macOS 10.13 (17A291j) SecureTransport in server mode can select ciphersuites not applicable to the TLS version.\r\n\r\n    **.NET Core Note:** When hosting an [SslStream](https://docs.microsoft.com/dotnet/api/system.net.security.sslstream?view=netcore-2.0) limited to TLS 1.0 or TLS 1.1 clients other than Apple SecureTransport may fail to connect.\r\n\r\n* [33143630](https://bugreport.apple.com/web/?problemID=33143630) macOS 10.13 (17A291j) SecTrustExecute fails with no error building revocation-enabled chain against a self-issued certificate.\r\n    \r\n    **.NET Core Note:** In this situation an Apple-specific derived type of CryptographicException will be thrown with a message of “No error”.\r\n\r\n* [33294006](https://bugreport.apple.com/web/?problemID=33294006) macOS 10.13 (17A291j) libcurl changing to LibreSSL changes thread-safety model from safe to unsafe \r\n    \r\n    **.NET Core Note:** A functioning workaround is in place, but it may regress performance for parallel HTTP requests (to avoid crashes caused by the loss of thread safety).\r\n\r\n* [32948209](https://bugreport.apple.com/web/?problemID=32948209) CCCryptorReset returns kCCUnimplemented for ECB on 10.13.\r\n\r\n    **.NET Core Note:** .NET Core has worked around this regression, so it should not be user-impacting."},{"Id":"6818826376","Type":"IssuesEvent","CreatedAt":"2017-11-07T07:49:43","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/27","RelatedDescription":"Closed issue \"microsoft/dotnet Docker Hub README adopts segmented OS/Arch style\" (#27) at dotnet/announcements","RelatedBody":"# microsoft/dotnet Docker Hub README adopts segmented OS/Arch style\r\n\r\nThe Docker Hub README style used by [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) has been updated to use a new model that is segmented by OS and chip architecture.\r\n\r\nYou can see an example of the new style in the following image. \r\n\r\n<img width=\"803\" alt=\"screen shot 2017-08-13 at 10 44 34 pm\" src=\"https://user-images.githubusercontent.com/2608468/29259667-0c73b3e4-8079-11e7-9c43-26894534ca7a.png\">\r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #275](https://github.com/dotnet/dotnet-docker/issues/275)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #328](https://github.com/dotnet/dotnet-docker-nightly/pull/328)\r\n* [moby/moby #33759](https://github.com/moby/moby/issues/33759)\r\n\r\nThe [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo (and by extension [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)) has been steadily  growing with each release of .NET Core and also of the underlying operating systems that we support. We wanted to present simple-to-read tag lists.  As the repo has grown, the tag list has gotten longer and more complicated. \r\n\r\nThe addition of `arm32v7` to the repo caused us to spend considerable time thinking about repo organization generally. We looked at other approaches and also talked to Docker employees about their long-term plans for `arm32v7` in particular.\r\n\r\nWe considered various options:\r\n\r\n* Split the repo by architecture (this seemed to match what Debian and other official repos were doing). See [debian](https://hub.docker.com/_/debian/) and [arm32v7/debian](https://hub.docker.com/r/arm32v7/debian/). Note how the [Debian GitHub repo](https://github.com/debuerreotype/docker-debian-artifacts) is structured, branching by architecture.\r\n* Split the repo by SDK and Runtime. We've discussed this multiple times but we believe that discoverability would be a significant challenge. Also, other peer development platforms do not segment on the SDK/Runtime boundary.\r\n* Stay the course on the repo structure, but adopt a new (hopefully better) approach for the tag list.\r\n\r\nThere are three main reasons that we adopted a new README style:\r\n\r\n* Multi-arch tags are visually awkward when you have multiple versions of an operating system for a given tag type. For example, the dotnet repo offers both Debian 8 and 9 variants of the `2-sdk` tag. Only one of them can participate in the multi-arch tag while the other variant (in this case Debian 8) is only available with the longer tag name: `2.0.0-sdk-jessie`. The way the bullets in the tag list compose looks odd, as you can see in the following image. It also doesn't communicate the relationship between tags well. <img width=\"724\" alt=\"screen shot 2017-08-13 at 11 14 22 pm\" src=\"https://user-images.githubusercontent.com/2608468/29260189-2f58da84-807d-11e7-868e-7e1f888fd42d.png\">\r\n* A multi-arch-first tag list works well when all OSes offer the same image types, but is poor at showing differences when they don't. The .NET Core offering for `arm32v7` is quite limited currently. We wanted to make that obvious.\r\n* We believe that most users look at the README with a specific OS in mind. We thought that it was best to cater to that, providing a simplified view for a given OS.\r\n\r\nThe downside is that this README style is unique (AFAIK). We've never tried to be novel with our Docker offering, but fit into existing conventions. This is our first significant departure from Docker norms. There is a lot changing in the Docker space, with multi-arch and `arm32v7` being top of the list (as it relates to this topic). As a result, we thought that now was a good time for experimentation based on the conclusion that the existing README style no longer scales to our needs. Our conversations with Docker employees also led us to believe that there are no good established answers to these challenges.\r\n\r\nPlease give us your feedback @ [dotnet/dotnet-docker #275](https://github.com/dotnet/dotnet-docker/issues/275)."},{"Id":"6818825541","Type":"IssuesEvent","CreatedAt":"2017-11-07T07:49:27","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/11","RelatedDescription":"Closed issue \".NET Designs Repository Created\" (#11) at dotnet/announcements","RelatedBody":"# .NET Designs Repository Created\r\n\r\n## Summary\r\n\r\n.NET designs now have a home on GitHub at [dotnet/designs](https://github.com/dotnet/designs). This repository and the process it uses is intended to be very similar to [dotnet/csharplang](https://github.com/dotnet/csharplang). We want to share .NET design documents and get much earlier feedback on plans.\r\n\r\n## Details\r\n\r\nThe repository was just created. You can see two designs that you can participate on. More designs will show up over time. These two designs were selected as the initial set since the current behavior for both has received significant feedback.\r\n\r\n- [.NET Core 2+ Naming and Versioning](https://github.com/dotnet/designs/issues/2)\r\n- [.NET Core 2+ Version Binding](https://github.com/dotnet/designs/issues/3)\r\n\r\nA separate repository was created for a few reasons:\r\n\r\n- .NET designs may need to be implemented in multiple repos, including runtime, framework and language repos.\r\n- .NET designs may or may not be specific to .NET Core.\r\n\r\nThanks in advance for your participation in this repository."},{"Id":"6803910341","Type":"IssuesEvent","CreatedAt":"2017-11-03T04:47:03","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/37","RelatedDescription":"Opened issue \"microsoft/dotnet nanoserver images now support Windows Server 1709\" (#37) at dotnet/announcements","RelatedBody":"# microsoft/dotnet nanoserver images now support Windows Server 1709\r\n\r\n[Windows Server Version 1709](https://blogs.technet.microsoft.com/windowsserver/2017/10/17/windows-server-version-1709-available-for-download/) was released in October. [microsoft/nanoserver](https://hub.docker.com/r/microsoft/nanoserver/) images have been updated to support [Windows Server 1709](https://docs.microsoft.com/en-us/windows-server/get-started/whats-new-in-windows-server-1709). These images can be identified with the `nanoserver-1709` [tag](https://hub.docker.com/r/microsoft/windowsservercore/tags/) substring.\r\n\r\nThe following repos have been updated:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #330](https://github.com/dotnet/dotnet-docker/issues/330)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker #321](https://github.com/dotnet/dotnet-docker/pull/321)\r\n* [dotnet/dotnet-docker #322](https://github.com/dotnet/dotnet-docker/issues/322)\r\n* [dotnet/dotnet-docker #329](https://github.com/dotnet/dotnet-docker/pull/329)\r\n\r\n.NET Core Docker images now support Windows Server 1709, the latest version of Windows Server.\r\n\r\nYou can see an example of 1709-based images in the following example.\r\n\r\n![.NET Core nanoserver 1709 images](https://user-images.githubusercontent.com/2608468/32360772-61680cec-c016-11e7-851d-0d962c35fe41.png)\r\n\r\nYou can identify Windows Server 1709-based .NET Core images with the tag substring `nanoserver-1709` and Windows Server 2016 images with the tag substring `nanoserver-sac2016`.\r\n\r\nChanges have been made in Windows Server 1709 that affect the [compatibility of Windows container images](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility). The practical impact is that Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creative Update hosts cannot load Windows Server 1709 images. Windows 10 Fall Creative Update and Windows Server 1709 can load both original Windows Server 2016 and Windows Server 1709 images. Windows Server 1709 requires Hyper-V isolation (`docker run --isolation=hyperv`) in order to load Windows Server 2016 images.\r\n\r\nGiven the compatibility differences with Windows container images, .NET Core images will adopt [manifest lists](https://github.com/dotnet/dotnet-docker/issues/322) so that a single logical tag, like `2.0-runtime`, can be used on both older and newer Windows 10 and Windows Server versions. `docker pull microsoft/dotnet:2.0-runtime` will pull a Windows Server 2016 image on Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creators Update machines. The same command will pull a Windows Server 1709 based image on Windows Server 1709 and Windows 10 Fall Creators Update machines. The same rules apply to FROM lines.\r\n\r\n[.NET Framework](https://github.com/dotnet/announcements/issues/36) Docker images are also using manifest lists for the same reason.\r\n\r\nYou need [Docker 17.10](https://docs.docker.com/release-notes/docker-ce/#17100-ce-2017-10-17) or later to use Windows-version-specific manifest list tags. The following change from the Docker 17.10 release notes is the one that enables this functionality.\r\n\r\n* Add support for Windows version filtering on pull [moby/moby#35090](https://github.com/moby/moby/pull/35090)\r\n\r\nYou are only recommended to use manifest tags if you want flexibility for development and deployment environments. That's what manifest tags deliver. In general, you should select the most specific tag you can. The more specific the tag, the more predictable the result of each `docker pull` and `docker build` will be.\r\n"},{"Id":"6766996801","Type":"IssuesEvent","CreatedAt":"2017-10-26T00:24:01","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/36","RelatedDescription":"Opened issue \"microsoft/dotnet-framework images now support Windows Server 1709\" (#36) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework images now support Windows Server 1709\r\n\r\n[Windows Server Version 1709](https://blogs.technet.microsoft.com/windowsserver/2017/10/17/windows-server-version-1709-available-for-download/) was released earlier this month. [microsoft/windowsservercore](https://hub.docker.com/r/microsoft/windowsservercore/) images have been updated to support [Windows Server 1709](https://docs.microsoft.com/en-us/windows-server/get-started/whats-new-in-windows-server-1709). These images can be identified with the `1709` [tag](https://hub.docker.com/r/microsoft/windowsservercore/tags/).\r\n\r\nThe following repos have been updated:\r\n\r\n* [microsoft/aspnet](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #35](https://github.com/Microsoft/dotnet-framework-docker/issues/35)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #31](https://github.com/Microsoft/dotnet-framework-docker/pull/31)\r\n* [microsoft/dotnet-framework-docker #34](https://github.com/Microsoft/dotnet-framework-docker/pull/34)\r\n* [microsoft/dotnet-framework-docker #32](https://github.com/Microsoft/dotnet-framework-docker/issues/32)\r\n\r\n.NET Framework Docker images now support Windows Server 1709, the latest version of Windows Server.\r\n\r\n.NET Framework 3.5 and 4.7.1 images are available for Windows Server 1709. Windows Server 1709 includes the .NET Framework 4.7.1. .NET Framework 4.6.2 and .NET Framework 4.7 images are only available with Windows Server 2016 images. You can see an example of 1709-based images in the following example.\r\n\r\n![.NET Framework Windows 1709 images](https://user-images.githubusercontent.com/2608468/32028249-6684a82c-b9a2-11e7-8afa-1b1abf89eb3b.png)\r\n\r\nYou can identify Windows Server 1709-based .NET Framework images with the tag substring `windowsservercore-1709` and Windows Server 2016 images with the tag substring `windowsservercore-10.0.14393`. You will likely notice that the 1709-based images are easier to identify than the Windows Server 2016 ones. \r\n\r\nChanges have been made in Windows Server 1709 that affect the [compatibility of Windows container images](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility). The practical impact is that Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creative Update hosts cannot load Windows Server 1709 images. Windows 10 Fall Creative Update and Windows Server 1709 can load both original Windows Server 2016 and Windows Server 1709 images. Windows Server 1709 requires Hyper-V isolation (`docker run --isolation=hyperv`) in order to load Windows Server 2016 images.\r\n\r\nGiven the compatibility differences with Windows container images, .NET Framework images will adopt [manifest lists](https://github.com/Microsoft/dotnet-framework-docker/issues/32) so that a single logical tag, like `4.7.1`, can be used on both older and newer Windows 10 and Windows Server versions. `docker pull microsoft/dotnet-framework:4.7.1` will pull a Windows Server 2016 image on Windows Server 2016, Windows 10 Anniversary Update, and Windows 10 Creators Update machines. The same command will pull a Windows Server 1709 based image on Windows Server 1709 and Windows 10 Fall Creators Update machines. The same rules apply to FROM lines. [.NET Core](https://hub.docker.com/r/microsoft/dotnet) Docker images use this same feature to support Linux and Windows hosts and AMD64 and ARM32 hosts with the same logical tag, like `2.0-runtime`.\r\n\r\nThe following tags will be updated to use manifest lists:\r\n\r\n- `latest`\r\n- `4.7.1`\r\n- `3.5`\r\n\r\nYou need [Docker 17.10](https://docs.docker.com/release-notes/docker-ce/#17100-ce-2017-10-17) or later to use Windows-version-specific manifest list tags. The following change from the Docker 17.10 release notes is the one that enables this functionality.\r\n\r\n* Add support for Windows version filtering on pull [moby/moby#35090](https://github.com/moby/moby/pull/35090)\r\n\r\nYou are only recommended to use manifest tags if you want flexibility for development and deployment environments. That's what manifest tags deliver. In general, you should select the most specific tag you can. The more specific the tag, the more predictable the result of each `docker pull` and `docker build` will be."},{"Id":"6761784781","Type":"IssuesEvent","CreatedAt":"2017-10-25T04:03:38","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/35","RelatedDescription":"Opened issue \"microsoft/dotnet-framework latest tag updated to 4.7.1\" (#35) at dotnet/announcements","RelatedBody":"# microsoft/dotnet-framework latest tag updated to 4.7.1\r\n\r\nThe [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/) was released earlier this month. The [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework) `latest` [tag](https://hub.docker.com/r/microsoft/dotnet-framework/tags/) was also updated.\r\n\r\nThe .NET Framework 4.7.1 is represented by the `microsoft/dotnet-framework:4.7.1` tag.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #33](https://github.com/Microsoft/dotnet-framework-docker/issues/33)\r\n\r\n## Details\r\n\r\n* [microsoft/dotnet-framework-docker #28](https://github.com/Microsoft/dotnet-framework-docker/pull/28)\r\n* [microsoft/dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework 4.7.1 image is now available as a Docker image. The `latest` tag points to the same image.\r\n\r\nThe following repos were updated:\r\n\r\n* [microsoft/asp](https://hub.docker.com/r/microsoft/aspnet/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework)\r\n* [microsoft/wcf](https://hub.docker.com/r/microsoft/wcf)\r\n\r\nThe [microsoft/dotnet-framework-samples](https://hub.docker.com/r/microsoft/dotnet-framework-samples) repo has not yet been updated.\r\n\r\nWe recommend that you use version-specific tags for production apps. For experimentation or while an application is in development, using the `latest` tag is a fine practice.\r\n\r\nWe recently found a [significant performance issue with .NET Framework Docker images](https://github.com/dotnet/announcements/issues/33). The .NET Framework 4.7.1 image includes the fix for that problem.\r\n"},{"Id":"6729762964","Type":"IssuesEvent","CreatedAt":"2017-10-17T21:21:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/34","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash\" (#34) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8585 \r\n## Malformed Culture can cause application to crash\r\n### Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.\r\n\r\n### Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/24703 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n\r\n.NET Core 2.0 is not affected by this issue.\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nAs this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location          |\r\n|------------------|-------------------|\r\n| Windows          | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n| [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.\r\n\r\nAlso, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.\r\n\r\nIf you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6830236721","Type":"PullRequestEvent","CreatedAt":"2017-11-09T05:27:03","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14949","RelatedDescription":"Merged pull request \"[RyuJIT/arm32] Fix GC hole in address mode generation requiring temps\" (#14949) at dotnet/coreclr","RelatedBody":"In cases requiring a temp register to compute a portion of an LEA,\r\nwhere the partial computation involves a GCREF/BYREF base register,\r\nthe temp register must be marked as a BYREF, so it can get\r\nupdated during a GC.\r\n\r\nThis fixes a case like this:\r\n```\r\nadd r2, r0, r1 LSL 2\r\nldr r0, [r2+24]\r\n```\r\n\r\nwhere `r2` needs to be marked BYREF.\r\n\r\nRelated to #14856."},{"Id":"6830086633","Type":"PullRequestEvent","CreatedAt":"2017-11-09T04:19:48","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14906","RelatedDescription":"Merged pull request \"Add string support to ReadOnlyMemory<char>\" (#14906) at dotnet/coreclr","RelatedBody":"cc: @ahsonkhan, @jkotas, @KrzysztofCwalina \r\n\r\n(I have a separate PR for corefx that updates the ref and adds tests, as well as updates the implementation there, but I'll hold off on putting that up until I address any feedback on the implementation here, as it's almost identical there.)\r\n\r\nContributes to https://github.com/dotnet/corefx/issues/25085"},{"Id":"6829803637","Type":"IssuesEvent","CreatedAt":"2017-11-09T02:29:20","Actor":"GCCFeli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14950","RelatedDescription":"Opened issue \"Build CoreCLR for iOS\" (#14950) at dotnet/coreclr","RelatedBody":"Is there any plan to get an iOS build?"},{"Id":"6829761260","Type":"PullRequestEvent","CreatedAt":"2017-11-09T02:14:18","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14918","RelatedDescription":"Merged pull request \"Don't allow unsafe CpBlk for legacy backend\" (#14918) at dotnet/coreclr","RelatedBody":"The arm32 legacy backend does not implement the code to disable/re-enable\r\nGC interruptibility based on the gtBlkOpGcUnsafe flag. So, disable\r\nthat mode of OBJ to BLK morphing.\r\n\r\nFixes an arm32 legacy backend GCStress=C case in #14856."},{"Id":"6829729418","Type":"PullRequestEvent","CreatedAt":"2017-11-09T02:02:48","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14949","RelatedDescription":"Opened pull request \"[RyuJIT/arm32] Fix GC hole in address mode generation requiring temps\" (#14949) at dotnet/coreclr","RelatedBody":"In cases requiring a temp register to compute a portion of an LEA,\r\nwhere the partial computation involves a GCREF/BYREF base register,\r\nthe temp register must be marked as a BYREF, so it can get\r\nupdated during a GC.\r\n\r\nThis fixes a case like this:\r\n```\r\nadd r2, r0, r1 LSL 2\r\nldr r0, [r2+24]\r\n```\r\n\r\nwhere `r2` needs to be marked BYREF.\r\n\r\nRelated to #14856."},{"Id":"6829602844","Type":"PullRequestEvent","CreatedAt":"2017-11-09T01:19:29","Actor":"vancem","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14948","RelatedDescription":"Opened pull request \"Fix build break when VS2015 is not installed.\" (#14948) at dotnet/coreclr","RelatedBody":"If you ONLY install VS2017 (now the common scneario)\r\nand build coreclr, it will fail  with COM with a Class_Not_Registered error\r\n\r\nThis is because a build-tools package is depending on an old COM object\r\nthat has gone way in VS2017.\r\n\r\nWhile we sort getting a proper fix, this makes the work-around (which\r\nis registering the DLL by hand) discoverable.\r\n\r\nSee https://github.com/dotnet/coreclr/issues/11305 for details.\r\n\r\n@lt72 @russellhadley @briansull "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6829920553","Type":"PullRequestEvent","CreatedAt":"2017-11-09T03:11:06","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7984","RelatedDescription":"Opened pull request \"Changes in the Transport feed DLL requires our response; release/2.0.0\" (#7984) at dotnet/cli","RelatedBody":"Changes in the Transport feed DLL requires our response; update Transport feed DLL version and base URL.\r\n\r\nDefining \"BuildTasksFeedDll\" & relevent 'UsingTask' no longer needed as PublishNupkgToTransportFeed.targets uses the imported Microsoft.DotNet.Build.Tasks.Feed.targets to locate the Feed DLL\r\n\r\n\r\n"},{"Id":"6829767518","Type":"PullRequestEvent","CreatedAt":"2017-11-09T02:16:28","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7981","RelatedDescription":"Merged pull request \"Correcting 'PUBLISH_TO_AZURE_BLOB' and 'PUBLISH_NUPKG_TO_AZURE_BLOB'\" (#7981) at dotnet/cli","RelatedBody":"Correcting 'PUBLISH_TO_AZURE_BLOB' and 'PUBLISH_NUPKG_TO_AZURE_BLOB' Booleans - 'false' should not be conveyed by the empty string.\r\n\r\nTo be clear the conditionals are: “true”/anything other than “true”\r\n"},{"Id":"6829655146","Type":"PullRequestEvent","CreatedAt":"2017-11-09T01:37:13","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7983","RelatedDescription":"Merged pull request \"Updating the SDK and Support package on the CLI\" (#7983) at dotnet/cli","RelatedBody":"cc: @livarcocc @dsplaisted @weshaggard @AlexGhiondea \r\n\r\nUpdating the versions of the SDK and the support package on the CLI for 15.5.\r\n"},{"Id":"6829256664","Type":"PullRequestEvent","CreatedAt":"2017-11-08T23:33:14","Actor":"joperezr","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7983","RelatedDescription":"Opened pull request \"Updating the SDK and Support package on the CLI\" (#7983) at dotnet/cli","RelatedBody":"cc: @livarcocc @dsplaisted @weshaggard @AlexGhiondea \r\n\r\nUpdating the versions of the SDK and the support package on the CLI for 15.5.\r\n"},{"Id":"6828999070","Type":"PullRequestEvent","CreatedAt":"2017-11-08T22:25:45","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7982","RelatedDescription":"Merged pull request \"Correcting 'PUBLISH_TO_AZURE_BLOB' and 'PUBLISH_NUPKG_TO_AZURE_BLOB'; 2.0.0\" (#7982) at dotnet/cli","RelatedBody":"Correcting 'PUBLISH_TO_AZURE_BLOB' and 'PUBLISH_NUPKG_TO_AZURE_BLOB' Booleans - 'false' should not be conveyed by the empty string.\r\n\r\nThe Publish.targets is different enough in release/2.0.0 because master has an 'AllLinuxDistros' leg"},{"Id":"6828992723","Type":"PullRequestEvent","CreatedAt":"2017-11-08T22:24:22","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7978","RelatedDescription":"Merged pull request \"Removing Tier 1 repos from Nuget.config\" (#7978) at dotnet/cli","RelatedBody":"Removing Tier 1 repos from Nuget.config; Tier 1 packages are coming from the internal 'dotnet-core' feed.\r\n\r\nAddresses: https://github.com/dotnet/core-eng/issues/1949\r\n\r\n\r\n"},{"Id":"6828686801","Type":"PullRequestEvent","CreatedAt":"2017-11-08T21:18:14","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/7979","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/15.5\" (#7979) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171108-080034\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171108-080034 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6827873503","Type":"PullRequestEvent","CreatedAt":"2017-11-08T18:28:30","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7982","RelatedDescription":"Opened pull request \"Correcting 'PUBLISH_TO_AZURE_BLOB' and 'PUBLISH_NUPKG_TO_AZURE_BLOB'; 2.0.0\" (#7982) at dotnet/cli","RelatedBody":"Correcting 'PUBLISH_TO_AZURE_BLOB' and 'PUBLISH_NUPKG_TO_AZURE_BLOB' Booleans - 'false' should not be conveyed by the empty string.\r\n\r\nThe Publish.targets is different enough in release/2.0.0 because master has an 'AllLinuxDistros' leg"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6825131750","Type":"IssuesEvent","CreatedAt":"2017-11-08T09:26:05","Actor":"xiedongweo","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/578","RelatedDescription":"Opened issue \"SqlConnection in .net standard 2.0 can't access SQL Server\" (#578) at dotnet/standard","RelatedBody":"I'm using \"System.Data.SqlClient\" namespace relevant APIs in .net standard 2.0 to access data from my remote sql server. I'm using these APIs in UWP app.\r\n\r\nThis is my sql connection string:\r\n`String connsql = @\"Data Source=10.1xx.xxx.xxx;Initial Catalog=UWPTest;User Id=sa;Password=Password\";`\r\n\r\nI used this connection string to connect to my sql server, but I got the following exception:\r\n`System.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 35 - An internal exception was caught) ---> System.AggregateException: One or more errors occurred. (An attempt was made to access a socket in a way forbidden by its access permissions 10.157.12.153:1433) ---> System.Net.Internals.SocketExceptionFactory+ExtendedSocketException: An attempt was made to access a socket in a way forbidden by its access permissions 10.157.12.153:1433\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)\r\n   at System.Net.Sockets.Socket.<>c.<ConnectAsync>b__267_0(IAsyncResult iar)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Data.SqlClient.SNI.SNITCPHandle.<ConnectAsync>d__22.MoveNext()\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task.Wait(TimeSpan timeout)\r\n   at System.Data.SqlClient.SNI.SNITCPHandle..ctor(String serverName, Int32 port, Int64 timerExpire, Object callbackObject, Boolean parallel)\r\n---> (Inner Exception #0) System.Net.Internals.SocketExceptionFactory+ExtendedSocketException (0x80004005): An attempt was made to access a socket in a way forbidden by its access permissions 10.157.12.153:1433\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)\r\n   at System.Net.Sockets.Socket.<>c.<ConnectAsync>b__267_0(IAsyncResult iar)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Data.SqlClient.SNI.SNITCPHandle.<ConnectAsync>d__22.MoveNext()<---\r\n\r\n   at System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, Object providerInfo, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, Boolean applyTransientFaultHandling)\r\n   at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)\r\n   at System.Data.SqlClient.SqlConnection.Open()\r\n   at SQLServerSample.MainPage.OnNavigatedTo(NavigationEventArgs e)\r\nClientConnectionId:00000000-0000-0000-0000-000000000000`\r\n\r\nBut, the same code worked well in windows console application:\r\n` String connsql = @\"Data Source=10.1xx.xx.xxx;Initial Catalog=UWPTest;User Id=sa;Password=Password\";\r\n\r\n            try\r\n            {\r\n                using (SqlConnection conn = new SqlConnection())\r\n                {\r\n                    conn.ConnectionString = connsql;\r\n                    conn.Open(); \r\n                    String sql = \"select * from dbo.Table_1\";\r\n                    SqlCommand cmd = new SqlCommand(sql, conn);\r\n                    SqlDataReader dr = cmd.ExecuteReader();\r\n                    while (dr.Read())\r\n                    {\r\n                        Debug.WriteLine(dr[\"ID\"] + \": \" + dr[\"Name\"]);\r\n                    }\r\n                    conn.Close();\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Debug.WriteLine(ex);\r\n            }`\r\n\r\nSo, I do not know where  the issue is. \r\nAre there any different things between UWP and classic win32 application in .net standard 2.0?\r\nHow to solve this issue?"},{"Id":"6822836123","Type":"PullRequestEvent","CreatedAt":"2017-11-07T21:29:45","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/577","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02207-01 (master)\" (#577) at dotnet/standard","RelatedBody":""},{"Id":"6822322355","Type":"IssuesEvent","CreatedAt":"2017-11-07T19:40:46","Actor":"twtdev","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/576","RelatedDescription":"Opened issue \"WPF Design-time exceptions with NET Standard 2.0 class library, citing System.ComponentModel.Annotations, Version=4.2.0.0\" (#576) at dotnet/standard","RelatedBody":"I have posted [this](https://stackoverflow.com/q/46865023/1628429) StackOverflow question, but to no avail. \r\nTL;DR I only experience problems at _design-time_, not run-time. I only started experiencing the problem after upgrading my PCL projects to NET Standard 2.0 and my NuGet format to PackageReference.\r\nAs a result, pretty much all of my dialog boxes are crippled at design-time. \r\n\r\nHere is a simple repro:\r\n[WpfAppToTestDesignTimeError.zip](https://github.com/dotnet/standard/files/1451363/WpfAppToTestDesignTimeError.zip)\r\n\r\nOpen the solution, compile, open MainWindow.xaml--no problem.\r\nNow, open MainWindowViewModel and uncomment the 2nd property (the one whose type comes from the NET Standard 2 library), compile and note the exception in MainWindow.\r\n"},{"Id":"6819512071","Type":"IssuesEvent","CreatedAt":"2017-11-07T10:28:41","Actor":"WalterEbbers","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/575","RelatedDescription":"Opened issue \".NET Standard 2.0 / .NET Framework 4.6.1 Could not load file or assembly 'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.\" (#575) at dotnet/standard","RelatedBody":"Hi,\r\nI have a .NET Standard 2.0 library which references a few NET 4.6.1 libraries. \r\nThe .NET Standard library will be used in a .NET Core web application. \r\nThe .NET 4.6.1 Framework uses library 'System.ServiceModel.dll' FOR WCF calls.\r\n\r\nI try to do the following. \r\nMy .NET Core webapp goes to the .NET Standard library which calls something from my .NET Framework 4.6.1 project. But at that moment i get the following error: \r\n'Could not load file or assembly 'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.'\r\n\r\nThe 'System.ServiceModel.dll' is referenced as a assemblyreference in the .NET Standard project and the .NET Core webapp. \r\n\r\nI really thought that this would work but sadly it doesn't. Is this a issue with the .NET libraries?\r\nDo i need to change things in my .NET Standard / Core project?\r\n\r\nThnx in advance :) \r\n\r\nWalter\r\n\r\n\r\n\r\n"},{"Id":"6818599708","Type":"IssuesEvent","CreatedAt":"2017-11-07T06:35:50","Actor":"JasonGLYao","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/574","RelatedDescription":"Closed issue \"Serializing DataTable object to Json  with different results between .net framework 4 and .NetCore 2.0\" (#574) at dotnet/standard","RelatedBody":"We will get different result while do serializing works for system.Data.DataTable  objects .\r\n\r\n----------dotnet core ------------------\r\n{\"DataTable.RemotingVersion\":{\"Major\":2,\"Minor\":0,\"Build\":-1,\"Revision\":-1,\"MajorRevision\":-1,\"MinorRevision\":-1},\"XmlSchema\":\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?>\\r\\n<xs:schema xmlns=\\\"\\\" xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">\\r\\n  <xs:element name=\\\"RECORDSET\\\">\\r\\n    <xs:complexType>\\r\\n      <xs:sequence>\\r\\n        <xs:element name=\\\"ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_CODE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_DESC\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_GROUP_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_ALIAS\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_VALUE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARENT_PARAM_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"STATE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"USER_CREATED\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"DATETIME_CREATED\\\" type=\\\"xs:dateTime\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"DATETIME_MODIFIED\\\" type=\\\"xs:dateTime\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"USER_MODIFIED\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"ORG_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"SEQ\\\" type=\\\"xs:int\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"IS_SYS\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"Parent_Param_Code\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_GROUP_DESC\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n      </xs:sequence>\\r\\n    </xs:complexType>\\r\\n  </xs:element>\\r\\n  <xs:element name=\\\"tmpDataSet\\\" msdata:IsDataSet=\\\"true\\\" msdata:MainDataTable=\\\"RECORDSET\\\" msdata:UseCurrentLocale=\\\"true\\\">\\r\\n    <xs:complexType>\\r\\n      <xs:choice minOccurs=\\\"0\\\" maxOccurs=\\\"unbounded\\\" />\\r\\n    </xs:complexType>\\r\\n  </xs:element>\\r\\n</xs:schema>\",\"XmlDiffGram\":\"<diffgr:diffgram xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\" xmlns:diffgr=\\\"urn:schemas-microsoft-com:xml-diffgram-v1\\\">\\r\\n  <tmpDataSet>\\r\\n    <RECORDSET diffgr:id=\\\"RECORDSET1\\\" msdata:rowOrder=\\\"0\\\">\\r\\n      <ID>2CD297F1338F473EB3A532ACC976DD3C</ID>\\r\\n      <PARAM_CODE>NO_FINISHED_BY_MO</PARAM_CODE>\\r\\n      <PARAM_DESC>NO_FINISHED_BY_MO</PARAM_DESC>\\r\\n      <PARAM_GROUP_ID>017dfbc924c811e787ddfa163e3e120a</PARAM_GROUP_ID>\\r\\n      <PARAM_ALIAS>NO_FINISHED_BY_MO</PARAM_ALIAS>\\r\\n      <PARAM_VALUE>Y</PARAM_VALUE>\\r\\n      <STATE>A</STATE>\\r\\n      <USER_CREATED>MGE</USER_CREATED>\\r\\n      <DATETIME_CREATED>2017-11-07T09:33:52+08:00</DATETIME_CREATED>\\r\\n      <ORG_ID>dc7b73bb81f644d4b9ef58445130505d</ORG_ID>\\r\\n      <SEQ>2</SEQ>\\r\\n      <IS_SYS>N</IS_SYS>\\r\\n    </RECORDSET>\\r\\n  </tmpDataSet>\\r\\n</diffgr:diffgram>\"}\r\n\r\n\r\n-------------.net framework -------------------------\r\n[\r\n{\r\n\"ID\": \"2CD297F1338F473EB3A532ACC976DD3C\",\r\n\"PARAM_CODE\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_DESC\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_GROUP_ID\": \"017dfbc924c811e787ddfa163e3e120a\",\r\n\"PARAM_ALIAS\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_VALUE\": \"Y\",\r\n\"PARENT_PARAM_ID\": null,\r\n\"STATE\": \"A\",\r\n\"USER_CREATED\": \"MGE\",\r\n\"DATETIME_CREATED\": \"2017-11-07T09:33:52\",\r\n\"DATETIME_MODIFIED\": null,\r\n\"USER_MODIFIED\": null,\r\n\"ORG_ID\": \"dc7b73bb81f644d4b9ef58445130505d\",\r\n\"SEQ\": 2,\r\n\"IS_SYS\": \"N\",\r\n\"Parent_Param_Code\": null,\r\n\"PARAM_GROUP_DESC\": null\r\n}\r\n]\r\n\r\n\r\n------------------------------------\r\ncould we align it to the .net Framework one?\r\n\r\n"},{"Id":"6818144609","Type":"IssuesEvent","CreatedAt":"2017-11-07T03:25:15","Actor":"JasonGLYao","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/574","RelatedDescription":"Opened issue \"DataTable Serialized with different results between .net framework 4 and .NetCore 2.0\" (#574) at dotnet/standard","RelatedBody":"We will get different result while do serializing works for system.Data.DataTable  objects .\r\n----------dotnet core ------------------\r\n{\"DataTable.RemotingVersion\":{\"Major\":2,\"Minor\":0,\"Build\":-1,\"Revision\":-1,\"MajorRevision\":-1,\"MinorRevision\":-1},\"XmlSchema\":\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-16\\\"?>\\r\\n<xs:schema xmlns=\\\"\\\" xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\" xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\">\\r\\n  <xs:element name=\\\"RECORDSET\\\">\\r\\n    <xs:complexType>\\r\\n      <xs:sequence>\\r\\n        <xs:element name=\\\"ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_CODE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_DESC\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_GROUP_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_ALIAS\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_VALUE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARENT_PARAM_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"STATE\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"USER_CREATED\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"DATETIME_CREATED\\\" type=\\\"xs:dateTime\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"DATETIME_MODIFIED\\\" type=\\\"xs:dateTime\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"USER_MODIFIED\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"ORG_ID\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"SEQ\\\" type=\\\"xs:int\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"IS_SYS\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"Parent_Param_Code\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n        <xs:element name=\\\"PARAM_GROUP_DESC\\\" type=\\\"xs:string\\\" msdata:targetNamespace=\\\"\\\" minOccurs=\\\"0\\\" />\\r\\n      </xs:sequence>\\r\\n    </xs:complexType>\\r\\n  </xs:element>\\r\\n  <xs:element name=\\\"tmpDataSet\\\" msdata:IsDataSet=\\\"true\\\" msdata:MainDataTable=\\\"RECORDSET\\\" msdata:UseCurrentLocale=\\\"true\\\">\\r\\n    <xs:complexType>\\r\\n      <xs:choice minOccurs=\\\"0\\\" maxOccurs=\\\"unbounded\\\" />\\r\\n    </xs:complexType>\\r\\n  </xs:element>\\r\\n</xs:schema>\",\"XmlDiffGram\":\"<diffgr:diffgram xmlns:msdata=\\\"urn:schemas-microsoft-com:xml-msdata\\\" xmlns:diffgr=\\\"urn:schemas-microsoft-com:xml-diffgram-v1\\\">\\r\\n  <tmpDataSet>\\r\\n    <RECORDSET diffgr:id=\\\"RECORDSET1\\\" msdata:rowOrder=\\\"0\\\">\\r\\n      <ID>2CD297F1338F473EB3A532ACC976DD3C</ID>\\r\\n      <PARAM_CODE>NO_FINISHED_BY_MO</PARAM_CODE>\\r\\n      <PARAM_DESC>NO_FINISHED_BY_MO</PARAM_DESC>\\r\\n      <PARAM_GROUP_ID>017dfbc924c811e787ddfa163e3e120a</PARAM_GROUP_ID>\\r\\n      <PARAM_ALIAS>NO_FINISHED_BY_MO</PARAM_ALIAS>\\r\\n      <PARAM_VALUE>Y</PARAM_VALUE>\\r\\n      <STATE>A</STATE>\\r\\n      <USER_CREATED>MGE</USER_CREATED>\\r\\n      <DATETIME_CREATED>2017-11-07T09:33:52+08:00</DATETIME_CREATED>\\r\\n      <ORG_ID>dc7b73bb81f644d4b9ef58445130505d</ORG_ID>\\r\\n      <SEQ>2</SEQ>\\r\\n      <IS_SYS>N</IS_SYS>\\r\\n    </RECORDSET>\\r\\n  </tmpDataSet>\\r\\n</diffgr:diffgram>\"}\r\n-------------.net framework -------------------------\r\n[\r\n{\r\n\"ID\": \"2CD297F1338F473EB3A532ACC976DD3C\",\r\n\"PARAM_CODE\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_DESC\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_GROUP_ID\": \"017dfbc924c811e787ddfa163e3e120a\",\r\n\"PARAM_ALIAS\": \"NO_FINISHED_BY_MO\",\r\n\"PARAM_VALUE\": \"Y\",\r\n\"PARENT_PARAM_ID\": null,\r\n\"STATE\": \"A\",\r\n\"USER_CREATED\": \"MGE\",\r\n\"DATETIME_CREATED\": \"2017-11-07T09:33:52\",\r\n\"DATETIME_MODIFIED\": null,\r\n\"USER_MODIFIED\": null,\r\n\"ORG_ID\": \"dc7b73bb81f644d4b9ef58445130505d\",\r\n\"SEQ\": 2,\r\n\"IS_SYS\": \"N\",\r\n\"Parent_Param_Code\": null,\r\n\"PARAM_GROUP_DESC\": null\r\n}\r\n]\r\n------------------------------------\r\ncould we align it to the .net Framework one?\r\n\r\n"},{"Id":"6817738225","Type":"PullRequestEvent","CreatedAt":"2017-11-07T01:01:08","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/515","RelatedDescription":"Merged pull request \"Merge Dev/release/2.0.0 into release/2.0.0\" (#515) at dotnet/standard","RelatedBody":"cc @eerhardt \r\n\r\nJust putting this PR to be ready to merge and test it in CI. "},{"Id":"6817737491","Type":"PullRequestEvent","CreatedAt":"2017-11-07T01:00:55","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/570","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02203-01 (master)\" (#570) at dotnet/standard","RelatedBody":"<details><summary>Discarded auto-update commits (click to expand)</summary><auto-pr-discard-list>\r\n\r\n * [`1e8ed77`](https://github.com/dotnet-maestro-bot/standard/commits/1e8ed77dc7e02d878de3cb7dc1db65ec4a401dc0) Update BuildTools to prerelease-02202-02\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=570)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/99/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/167/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/167/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`2a3aa0e`](https://github.com/dotnet-maestro-bot/standard/commits/2a3aa0ee6bb63c6a758ca7cc732022675c9d7dc3) Update BuildTools to prerelease-02202-01\r\n   * :x: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/166/)\r\n   * :x: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/166/)\r\n   * :hourglass: **OSX10.12** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/98/)\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=570)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`7a573da`](https://github.com/dotnet-maestro-bot/standard/commits/7a573dae6852c30dc7ad48cd54d3cff6a85bcc1f) Update BuildTools to prerelease-02201-05\r\n   * :x: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/97/)\r\n   * :x: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/165/)\r\n   * :x: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/165/)\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=570)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`cb4d6a3`](https://github.com/dotnet-maestro-bot/standard/commits/cb4d6a336e3f97ef50f67ddb744d035c96521d48) Update BuildTools to prerelease-02201-04\r\n   * :hourglass: **OSX10.12** Triggered. (27/35 on osx-10.12||OSX.1012.Amd64.Open)\r\n   * :hourglass: **Ubuntu16.04** Started. [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/164/)\r\n   * :hourglass: **Windows_NT** Triggered. (13/43 on win2012-20171003)\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=570)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n\r\n</auto-pr-discard-list></details>"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6830110224","Type":"PullRequestEvent","CreatedAt":"2017-11-09T04:30:26","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25143","RelatedDescription":"Merged pull request \"Reenabling disabled Memory test for uapaot that was previously missed\" (#25143) at dotnet/corefx","RelatedBody":"The tests that were disabled in https://github.com/dotnet/corefx/pull/23905 can now be re-enabled since the bugs have been fixed for uapaot.\r\n\r\nMissed this one when enabling the tests as part of https://github.com/dotnet/corefx/pull/24385\r\n\r\nFixes https://github.com/dotnet/corefx/issues/23952\r\n\r\ncc @safern, @KrzysztofCwalina, @leekir"},{"Id":"6830054034","Type":"PullRequestEvent","CreatedAt":"2017-11-09T04:04:58","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25141","RelatedDescription":"Merged pull request \"Fill a few System.Threading.Channels test gaps\" (#25141) at dotnet/corefx","RelatedBody":"Coverage now at 99.8% line and 98.5% branch.\r\n\r\ncc: @kouvel "},{"Id":"6829701338","Type":"IssuesEvent","CreatedAt":"2017-11-09T01:53:07","Actor":"ajcvickers","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/8123","RelatedDescription":"Closed issue \"Allow DisplayAttribute on Class declarations\" (#8123) at dotnet/corefx","RelatedBody":"Hello, I'd like you to consider allowing `DisplayAttribute` on class declarations. Forgive me if this is a duplicate, I haven't found anything related. Some use cases for it:\n- Auto-generate form captions\n- Auto-generate report captions\n- Use this information to extend nested property captions (like `Person.Details.Address` could get a label as `Personal info / Address`)\n- Auto-generate documentation (consuming `Description` and `Order` for example)\n- etc.\n"},{"Id":"6829696215","Type":"PullRequestEvent","CreatedAt":"2017-11-09T01:51:16","Actor":"ajcvickers","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24923","RelatedDescription":"Merged pull request \"Allow DisplayAttribute on Class declarations\" (#24923) at dotnet/corefx","RelatedBody":"Contributes to #8123 \r\ncc: @divega "},{"Id":"6829693296","Type":"PullRequestEvent","CreatedAt":"2017-11-09T01:50:15","Actor":"kouvel","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25144","RelatedDescription":"Opened pull request \"Fix some tests after https://github.com/dotnet/coreclr/pull/14864\" (#25144) at dotnet/corefx","RelatedBody":"Fix for some test failures in https://github.com/dotnet/corefx/pull/25131"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6830234591","Type":"IssuesEvent","CreatedAt":"2017-11-09T05:26:09","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23088","RelatedDescription":"Closed issue \"Assert Compound Assignment tree shape in BoundAssignmentOperator.Validate\" (#23088) at dotnet/roslyn","RelatedBody":"https://github.com/dotnet/roslyn/pull/23041#issuecomment-343035552"},{"Id":"6830233225","Type":"IssuesEvent","CreatedAt":"2017-11-09T05:25:34","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23090","RelatedDescription":"Closed issue \"Adjust assert wording\" (#23090) at dotnet/roslyn","RelatedBody":"IInstanceReceiver->IInstanceOperation\r\nhttps://github.com/dotnet/roslyn/pull/22972#discussion_r149861173"},{"Id":"6830208183","Type":"IssuesEvent","CreatedAt":"2017-11-09T05:14:41","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23093","RelatedDescription":"Opened issue \"Directly test ICompoundAssignmentOperation.GetIn/OutConversion directly.\" (#23093) at dotnet/roslyn","RelatedBody":"https://github.com/dotnet/roslyn/pull/23041#discussion_r149866255\r\nCurrently tested indirectly by the TestOperationWalker."},{"Id":"6830186721","Type":"PullRequestEvent","CreatedAt":"2017-11-09T05:04:57","Actor":"natidea","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23092","RelatedDescription":"Opened pull request \"Merge master to dev15.5.x\" (#23092) at dotnet/roslyn","RelatedBody":"This is a pull request from master into dev15.5.x.\r\n\r\n``` bash\r\ngit fetch --all\r\ngit checkout merges/master-to-dev15.5.x-20171108-Manual\r\ngit reset --hard upstream/dev15.5.x\r\ngit merge upstream/master\r\n# Fix merge conflicts\r\ngit commit\r\ngit push merges/master-to-dev15.5.x-20171108-Manual --force\r\n```\r\n\r\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6830130065","Type":"IssuesEvent","CreatedAt":"2017-11-09T04:39:30","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23091","RelatedDescription":"Opened issue \"Optimize `foreach` into `for` for Span/ReadOnlySpan\" (#23091) at dotnet/roslyn","RelatedBody":"https://github.com/dotnet/coreclr/pull/14922   introduces foreach pattern support in Span/ReadOnlySpan\r\n\r\nSimilarly to arrays and string, we can detect and emit `for` loop instead of `foreach` which would be faster for reasons explained in the linked PR.\r\n\r\n\r\n"},{"Id":"6830129670","Type":"PullRequestEvent","CreatedAt":"2017-11-09T04:39:18","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23087","RelatedDescription":null,"RelatedBody":"This is a draft version of the analyzer runner tool which should be used for execution analyzers against a given solution and measuring their performance.\r\n\r\nThe code is based on [StyleCopAnalyzers](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/)"},{"Id":"6830129557","Type":"PullRequestEvent","CreatedAt":"2017-11-09T04:39:14","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23087","RelatedDescription":"Closed pull request \"Analyzer Runner tool\" (#23087) at dotnet/roslyn","RelatedBody":"This is a draft version of the analyzer runner tool which should be used for execution analyzers against a given solution and measuring their performance.\r\n\r\nThe code is based on [StyleCopAnalyzers](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/)"},{"Id":"6830124763","Type":"PullRequestEvent","CreatedAt":"2017-11-09T04:37:05","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23077","RelatedDescription":"Merged pull request \"Ensure that we track additional member symbols in the VB binder conte…\" (#23077) at dotnet/roslyn","RelatedBody":"…xt and populate the additional field/property symbols initialized by VB AsNew clause that initializes more than one field/property\r\n\r\nNote: This change also includes an API change to `IPropertyInitializer` as VB WithEvents declaration with AsNew clause initializer can initialize multiple properties.\r\nFixes #17813 \r\nvso :https://devdiv.visualstudio.com/DevDiv/NET%20Developer%20Experience%20Productivity/_workitems/edit/521939"},{"Id":"6830124757","Type":"IssuesEvent","CreatedAt":"2017-11-09T04:37:05","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/17813","RelatedDescription":"Closed issue \"BoundFieldInitializer for field initializer initializing multiple fields contains only a single field\" (#17813) at dotnet/roslyn","RelatedBody":"Look at this comment for details: https://github.com/dotnet/roslyn/pull/17716#discussion_r105797433\r\n\r\nSkipped unit test: Microsoft.CodeAnalysis.VisualBasic.UnitTests.Semantics.IOperationTests.MultipleFieldInitializers\r\n\r\n```\r\nPublic Sub MultipleFieldInitializers()\r\n            Dim source = <![CDATA[\r\nClass C\r\n\tDim x, y As New Object\r\nEnd Class\r\n]]>.Value\r\n            Dim compilation = CreateCompilationWithMscorlib(source, options:=TestOptions.ReleaseDll, parseOptions:=TestOptions.Regular)\r\n\r\n            Dim tree = compilation.SyntaxTrees.Single()\r\n            Dim node = tree.GetRoot().DescendantNodes().OfType(Of AsNewClauseSyntax)().Single()\r\n\r\n            compilation.VerifyOperationTree(node, expectedOperationTree:=<![CDATA[\r\nIFieldInitializer (2 initialized fields) (OperationKind.FieldInitializerAtDeclaration)\r\n  Field_1: C.x As System.Object\r\n  Field_2: C.y As System.Object\r\n  IObjectCreationExpression (Constructor: Sub System.Object..ctor()) (OperationKind.ObjectCreationExpression, Type: System.Object)\r\n]]>.Value)\r\n        End Sub\r\n```"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6830020270","Type":"PullRequestEvent","CreatedAt":"2017-11-09T03:50:42","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4895","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4895) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6829995063","Type":"PullRequestEvent","CreatedAt":"2017-11-09T03:40:24","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4893","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4893) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6829408951","Type":"PullRequestEvent","CreatedAt":"2017-11-09T00:20:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4894","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#4894) at dotnet/corert","RelatedBody":""},{"Id":"6829408601","Type":"PullRequestEvent","CreatedAt":"2017-11-09T00:20:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4894","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#4894) at dotnet/corert","RelatedBody":""},{"Id":"6829124110","Type":"PullRequestEvent","CreatedAt":"2017-11-08T22:56:31","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4893","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4893) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6828620388","Type":"PullRequestEvent","CreatedAt":"2017-11-08T21:04:16","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4892","RelatedDescription":"Merged pull request \"Delete reference to workaround that is no longer necessary\" (#4892) at dotnet/corert","RelatedBody":""},{"Id":"6828181747","Type":"PullRequestEvent","CreatedAt":"2017-11-08T19:31:48","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4892","RelatedDescription":"Opened pull request \"Delete reference to workaround that is no longer necessary\" (#4892) at dotnet/corert","RelatedBody":""},{"Id":"6827952523","Type":"PullRequestEvent","CreatedAt":"2017-11-08T18:44:31","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4886","RelatedDescription":"Merged pull request \"Add \"start\" to ThrowHelper\" (#4886) at dotnet/corert","RelatedBody":"Non-shared part of https://github.com/dotnet/coreclr/pull/14906"},{"Id":"6827498487","Type":"PullRequestEvent","CreatedAt":"2017-11-08T17:12:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4891","RelatedDescription":"Merged pull request \"ObjWriter integration\" (#4891) at dotnet/corert","RelatedBody":"ObjWriter integration patch:\r\n\t- remove CoreCLR dependence\r\n\t- fix build with the latest LLVM 5 version\r\n\t- add documentation\r\n\r\n@dotnet/arm32-corert-contrib please review"},{"Id":"6826519463","Type":"PullRequestEvent","CreatedAt":"2017-11-08T14:23:53","Actor":"BredPet","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4891","RelatedDescription":"Opened pull request \"ObjWriter integration\" (#4891) at dotnet/corert","RelatedBody":"ObjWriter integration patch:\r\n\t- remove CoreCLR dependence\r\n\t- fix build with the latest LLVM 5 version\r\n\t- add documentation\r\n\r\n@dotnet/arm32-corert-contrib please review"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6829912215","Type":"PullRequestEvent","CreatedAt":"2017-11-09T03:08:08","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1718","RelatedDescription":"Opened pull request \"Add perf tests\" (#1718) at dotnet/sdk","RelatedBody":"Adds some initial perf tests.\r\n\r\n@tannergooding @nguerrera @livarcocc for review"},{"Id":"6829107816","Type":"PullRequestEvent","CreatedAt":"2017-11-08T22:52:17","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1712","RelatedDescription":"Merged pull request \"Changes to the msbuild extensions targets that will enable copying the shims for net471 case\" (#1712) at dotnet/sdk","RelatedBody":"cc: @AlexGhiondea @weshaggard @dsplaisted @livarcocc \r\n\r\nThese are the required changes for copying the required shims in order to run a net471 app that contains assets that were built using the support package. An example of a case that is currently broken is the following:\r\n\r\n- A is a netstandard based library (could be ns1.5+)\r\n- B is a net461 library that has a dependency to A. It also uses the type HttpClient. (HttpClient is in one of the affected assemblies, there are 12 affected assemblies in total)\r\n- C is a net471 app that consumes B. When trying to run the app on net471, it will crash since it won't be able to find System.Net.Http.dll version 4.2.0.0.\r\n\r\nThe reason behind it is that since the net461 library depends on a NS1.5+ library, it will be built against the shims contained in the support package. These shims, have in some cases a higher assembly version than the one we have inbox on net471 (in 12 cases as I mentioned above). That means that your net461 library, will depend on a higher assembly version of a library than the ones present inbox on net471, which will cause a missing assembly error."},{"Id":"6829042311","Type":"PullRequestEvent","CreatedAt":"2017-11-08T22:35:51","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1667","RelatedDescription":"Closed pull request \"Include updated Http and Compression libraries for .NET 4.7.1 if necessary\" (#1667) at dotnet/sdk","RelatedBody":"Fixes #1647.  .NET 4.7.1 has support for .NET Standard 2.0 built-in, so most of the facades aren't necessary.  However, the assembly versions of System.Net.Http and System.IO.Compression in .NET 4.7.1 are still 4.0.0.0.  This means that the versions from the contract NuGet packages (which are versioned 4.1.0.0 or higher) would be preferred to the in-box version (which is newer).  So if there is a dependency on the \"contract\" version of these DLLs, or on netstandard.dll, we use the 4.2.0.0 version of the DLLs from the .NET Standard 2.0 \"facades\".  (Though these DLLs are not actually facades, they contain the implementation.)\r\n\r\nAlso updates the stage 0 version of the CLI, and fixes a failure it caused with our FilterCopyLocal targets, as described [here](https://github.com/dotnet/sdk/issues/933#issuecomment-337795307).\r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"927634989499301888","CreatedAt":"2017-11-06T20:33:10+00:00","UserScreenname":"dotnet","Text":"Windows Docker Tag Scheme Changed https://t.co/ULufUyjXq6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":35,"RawContent":null},{"Id":"926165116084658176","CreatedAt":"2017-11-02T19:12:25+00:00","UserScreenname":"dotnet","Text":"Great post and resources by @cesardelatorre: Modernize existing .NET apps with Windows Containers and #Azure https://t.co/c8HL8dfH4d #dotnet","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":73,"FavoriteCount":42,"RawContent":null},{"Id":"925135073921310720","CreatedAt":"2017-10-30T22:59:24+00:00","UserScreenname":"dotnet","Text":"Experience real time test discovery in Test Explorer https://t.co/niKJvslM5p #visualstudio","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":60,"FavoriteCount":38,"RawContent":null},{"Id":"923592986562142208","CreatedAt":"2017-10-26T16:51:42+00:00","UserScreenname":"dotnet","Text":"Wish you could run the code sample you read in a book? You can now with Azure Notebooks. https://t.co/evx8HPzzqe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":132,"FavoriteCount":78,"RawContent":null},{"Id":"923344981602942977","CreatedAt":"2017-10-26T00:26:13+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework images now support Windows Server 1709 https://t.co/enC2cjj2ds /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":22,"RawContent":null},{"Id":"923037554265296896","CreatedAt":"2017-10-25T04:04:36+00:00","UserScreenname":"dotnet","Text":"microsoft/dotnet-framework latest tag updated to 4.7.1 https://t.co/NuV11juPrm /cc @Docker","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":23,"RawContent":null}]}},"RunOn":"2017-11-09T05:30:21.4590739Z","RunDurationInMilliseconds":8072}