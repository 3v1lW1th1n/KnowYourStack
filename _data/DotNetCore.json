{"Data":{"Blog":{"FeedItems":[{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7428580350","Type":"PullRequestEvent","CreatedAt":"2018-03-24T03:18:00","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17157","RelatedDescription":"Merged pull request \"Generate native image for System.Private.CoreLib.dll during Linux/arm build.sh\" (#17157) at dotnet/coreclr","RelatedBody":"This PR adds generating of native image for `System.Private.CoreLib.dll` for Linux/arm if run on Linux/x64 dev machine and `./build.sh cross crosscomponent` specified (in other words, if `x86_arm/crossgen` is built)\r\n\r\n**Merge after:** #17160\r\n\r\n@RussKeldorph @jashook PTAL"},{"Id":"7428495752","Type":"PullRequestEvent","CreatedAt":"2018-03-24T02:12:47","Actor":"4creators","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17134","RelatedDescription":"Closed pull request \"Enable partially implemented Intel HW intrinsics ISAs - CoreCLR part of changes\" (#17134) at dotnet/coreclr","RelatedBody":""},{"Id":"7428494338","Type":"PullRequestEvent","CreatedAt":"2018-03-24T02:11:44","Actor":"4creators","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17184","RelatedDescription":"Opened pull request \"Enable partially implemented Intel HW intrinsics ISAs - CoreCLR part of changes\" (#17184) at dotnet/coreclr","RelatedBody":"This issue is a first step to implement https://github.com/dotnet/corefx/issues/28363"},{"Id":"7428461351","Type":"PullRequestEvent","CreatedAt":"2018-03-24T01:48:01","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17183","RelatedDescription":"Opened pull request \"Update CoreFx to preview3-26323-09 (master)\" (#17183) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7428461106","Type":"PullRequestEvent","CreatedAt":"2018-03-24T01:47:51","Actor":"rakeshsinghranchi","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17182","RelatedDescription":"Opened pull request \"Enable building Ubuntu.18.04 distro specific nuget packages\" (#17182) at dotnet/coreclr","RelatedBody":"Official build is not producing Ubuntu.18.04 specific nuget packages out of release/1.1.0 branch. This will enable building those nuget packages. "},{"Id":"7428458865","Type":"PullRequestEvent","CreatedAt":"2018-03-24T01:46:14","Actor":"stilettk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17181","RelatedDescription":"Opened pull request \"List: improved performance of InsertRange for lazy enumerable\" (#17181) at dotnet/coreclr","RelatedBody":"# Summary\r\nFixes #14876. Improved performance of `InsertRange()` when inserting lazy `IEnumerable` in the middle of a list **by up to 99%**.\r\n\r\n# Description\r\nDetailed explanation can also be found in #14876. Short description:\r\n\r\nIf `IEnumerable` is being inserted in the list (not added to the end), it simply inserts items one-ny-one, shifting right part of the list on each iteration. It results in O(M*N) complexity. Improved logic is to enumerate collection to the end of the list and then move enumerated items to desired position. This is O(max(M,N)) complexity.\r\n\r\n# Benchmarks\r\n\r\nI have tested by inserting `IEnumerable` to the beginning of the list (worst possible scenario). For example, Insert1000In100000List means inserting enumerable with 1000 items to list with 100000 items.\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.10.13, OS=Windows 10 Redstone 1 [1607, Anniversary Update] (10.0.14393.2125)\r\nIntel Core i7-7800X CPU 3.50GHz (Kaby Lake), 1 CPU, 6 logical cores and 6 physical cores\r\n.NET Core SDK=2.1.300-preview3-008391\r\n  [Host]     : .NET Core 2.0.5 (CoreCLR 4.6.26020.03, CoreFX 4.6.26018.01), 64bit RyuJIT\r\n  Job-HXIMAP : .NET Core ? (CoreCLR 4.6.0.0, CoreFX 4.6.26420.0), 64bit RyuJIT\r\n  Job-MVNXHZ : .NET Core ? (CoreCLR 4.6.26310.01, CoreFX 4.6.26420.0), 64bit RyuJIT\r\n\r\n\r\n```\r\n|                  Method | Toolchain |         Mean |        Error |       StdDev |\r\n|------------------------ |---------- |-------------:|-------------:|-------------:|\r\n|  Insert1000In100000List |    before |  17,031.6 us |   199.233 us |   186.362 us |\r\n| Insert1000In1000000List |    before | 277,366.5 us | 3,890.782 us | 3,449.077 us |\r\n|  Insert10000In10000List |    before |  16,673.8 us |   177.103 us |   165.662 us |\r\n|  Insert1000In100000List |     after |     788.1 us |     8.808 us |     8.239 us |\r\n| Insert1000In1000000List |     after |   6,302.9 us |    83.200 us |    73.755 us |\r\n|  Insert10000In10000List |     after |     149.2 us |     2.440 us |     2.282 us |\r\n\r\n# Remarks\r\nThere is a special case: what if `IEnumerable` throws an exception? By default list will end up in incorrect state: inserted items will be at the end of the list, not in desired position. I was choosing between two possible solutions:\r\n\r\n1. Return the list to original state\r\n2. Restore the list to a valid state\r\n\r\nI have chosen second approach for consistency, because `AddRange` (=`InsertRange` at the end) works the same way: in case of exception it ends up in a partially inserted enumerable too."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7428487477","Type":"IssuesEvent","CreatedAt":"2018-03-24T02:06:47","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8891","RelatedDescription":"Closed issue \"Cannot dotnet pack a .NET Standard library referencing xunit\" (#8891) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. Create a .NET Standard Library (2.0)\r\n2. Add a package reference to xunit (the testing framework)\r\n3. Try to create a package either with `dotnet pack` or using the \"Pack\" menu from Visual Studio\r\n\r\n## Expected  behavior\r\n\r\nThe package (nupkg) is generated\r\n\r\n## Actual behavior\r\n\r\nNothing is created.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nProduct Information:\r\n Version:            2.1.103\r\n Commit SHA-1 hash:  60218cecb5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17127\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.103\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.6\r\n  Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d\r\n\r\n\r\n\r\n\r\n"},{"Id":"7428474777","Type":"PullRequestEvent","CreatedAt":"2018-03-24T01:57:59","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8844","RelatedDescription":"Merged pull request \"Bundle dotnet-ef\" (#8844) at dotnet/cli","RelatedBody":"Part of aspnet/EntityFrameworkCore#10554\r\n\r\ncc @ajcvickers @DamianEdwards"},{"Id":"7428473221","Type":"PullRequestEvent","CreatedAt":"2018-03-24T01:56:46","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8885","RelatedDescription":"Merged pull request \"Update Roslyn to 2.8.0-beta3-62722-05\" (#8885) at dotnet/cli","RelatedBody":"@jaredpar @jasonmalinowski one of you confirm that this is what you have for 15.7 Preview3."},{"Id":"7428396016","Type":"IssuesEvent","CreatedAt":"2018-03-24T01:04:56","Actor":"SuperJMN","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8891","RelatedDescription":"Opened issue \"Cannot dotnet pack a .NET Standard library referencing xunit\" (#8891) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. Create a .NET Standard Library (2.0)\r\n2. Add a package reference to xunit (the testing framework)\r\n3. Try to create a package either with `dotnet pack` or using the \"Pack\" menu from Visual Studio\r\n\r\n## Expected  behavior\r\n\r\nThe package (nupkg) is generated\r\n\r\n## Actual behavior\r\n\r\nNothing is created.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nProduct Information:\r\n Version:            2.1.103\r\n Commit SHA-1 hash:  60218cecb5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17127\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.103\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.6\r\n  Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7416830969","Type":"PullRequestEvent","CreatedAt":"2018-03-22T03:32:16","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/691","RelatedDescription":"Opened pull request \"Update BuildTools to preview3-02622-01 (master)\" (#691) at dotnet/standard","RelatedBody":""},{"Id":"7416827294","Type":"PullRequestEvent","CreatedAt":"2018-03-22T03:30:59","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/687","RelatedDescription":"Merged pull request \"Update BuildTools to preview3-02620-10 (master)\" (#687) at dotnet/standard","RelatedBody":""},{"Id":"7416814357","Type":"IssuesEvent","CreatedAt":"2018-03-22T03:26:19","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/684","RelatedDescription":"Closed issue \"System.AppContext.GetData is in netstandard1.6 but not net462\" (#684) at dotnet/standard","RelatedBody":"@nothrow commented on [Fri Feb 23 2018](https://github.com/dotnet/core/issues/1281)\n\n# Issue Title\r\n\r\nSome .NET Standard calls are not implemented as expected in .NET Framework\r\n\r\n# General\r\n\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.appcontext.getdata?view=netstandard-1.6#System_AppContext_GetData_System_String_\r\n\r\nHere, it says that AppContext.GetData is supported in NetStandard 1.6, 2.0, but .NET Framework 4.7.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n\r\nthis one says, that .NET 461 is fully supporting .NET Standard 2.0.\r\n\r\nI have application, that is compiled as .NET Standard library, and then is expected to be called from some kind of service host, that is either net462, or netcoreapp (based on platform it is running on). However, some of the libraries (Microsoft.Extensions.DependencyModel) for netstandard uses this call.\r\n\n\n---\n\n@svick commented on [Fri Feb 23 2018](https://github.com/dotnet/core/issues/1281#issuecomment-368089059)\n\nThis is expected. .Net Framework 4.6.1 behaves as if it supported .Net Standard 2.0 and it does support the vast majority of it, but not everything. Specifically, it does not support APIs that were added in .Net Standard 1.5 and 1.6.\r\n\r\nFor more details, see [.NET Framework 4.6.1 supporting .NET Standard 2.0](https://github.com/dotnet/standard/tree/master/docs/netstandard-20#net-framework-461-supporting-net-standard-20).\r\n\r\nAs for your specific case, Microsoft.Extensions.DependencyModel 2.0.4 has versions for .Net Framework 4.5.1, .Net Standard 1.3 and .Net Standard 1.6. How exactly are you distributing your application/library? Maybe there's a way to use the .Net Framework 4.5.1 version of Microsoft.Extensions.DependencyModel from your .Net Framework 4.6.2 host?\n\n---\n\n@nothrow commented on [Thu Mar 01 2018](https://github.com/dotnet/core/issues/1281#issuecomment-369511734)\n\nThanks for the link, I missed this specific document. \r\n\r\n> Considering the number of APIs that .NET Framework 4.6.1 will not support is low and that these are all brand-new APIs with low adoption we believe this is a much better trade-off.\r\n\r\nThis is kind of unfortunate, since the brand new API is used by ASP.NET Core, so eventually anyone wanting to combine netstandard + full framework with web will probably hit the wall here.\r\n\r\nI had troubles with 4.5.1 version, so I ended up with shipping my own forked version of DependencyModel. \r\n\r\nJust a suggestion, there is bunch of #if DOTNETCORE s  in `Microsoft.Extensions.DependencyModel`. Wouldn't it make sense to have libraries with #ifs in `runtime/`, so the correct one will be resolved, based on framework at run-time, not at compile-time?\r\n\r\n\n\n---\n\n@svick commented on [Thu Mar 01 2018](https://github.com/dotnet/core/issues/1281#issuecomment-369566176)\n\n> eventually anyone wanting to combine netstandard + full framework with web will probably hit the wall here\r\n\r\nI don't think so, that's what the .Net Framework 4.5.1 version is for. I think you're in a special situation, where you're distributing a single DLL to multiple frameworks, so that doesn't help. But most people will be fine.\r\n\r\n> Wouldn't it make sense to have libraries with #ifs in `runtime/`, so the correct one will be resolved, based on framework at run-time, not at compile-time?\r\n\r\nI don't know, I'm not sure that would actually work. You might consider creating a new issue about that in the repo where that code lives: [dotnet/core-setup](https://github.com/dotnet/core-setup).\n\n---\n\n@Petermarcu commented on [Wed Mar 14 2018](https://github.com/dotnet/core/issues/1281#issuecomment-373257629)\n\n@terrajobst , sounds like this one is just unfortunately hitting the small set of API's that fell through the cracks. Anything actionable here? Should we move this to the standard repo or close?\n\n"},{"Id":"7416804653","Type":"IssuesEvent","CreatedAt":"2018-03-22T03:22:58","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/683","RelatedDescription":"Closed issue \"netstandard2.0 library, dependent on Microsoft.Win32.Registry, doesn't work from net471 when loaded via MEF\" (#683) at dotnet/standard","RelatedBody":"@jherby2k commented on [Wed Feb 28 2018](https://github.com/dotnet/core/issues/1311)\n\n# Issue Title\r\n\r\nI'm building a .net standard 2.0 library that uses MEF to load extensions. The MEF parts are also .net standard 2.0.\r\n\r\nEverything works fine when called from netcore2.0 test project. But if i have the test project also target net471, calls to Microsoft.Win32.Registry from the MEF part fail (Registry.LocalMachine returns null). I assume this is because Microsoft.Win32.Registry has a net461-specific library that isn't present.\r\n\r\nI see this problem doesn't exist if, instead of using MEF, i just directly depend on the part. I imagine MEF prevents the framework-specific dependencies from flowing through correctly. Any suggestions?\r\n\r\n# General\r\n\r\nYou can repro this by cloning https://github.com/jherby2k/AudioWorks.git then changing the AudioWorks.Api.Tests projects to also target net471. Tests using the AudioWorks.Extensions.Apple extension will fail because it can't read the registry.\n\n"},{"Id":"7415822023","Type":"PullRequestEvent","CreatedAt":"2018-03-21T22:06:25","Actor":"dagood","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/690","RelatedDescription":"Merged pull request \"Update BuildTools to 2.1.0-preview2-02621-01, fix up build\" (#690) at dotnet/standard","RelatedBody":" * Ported https://github.com/dotnet/corefx/pull/26686 \"Building non-Windows builds using the CLI's MSBuild\"\r\n * Set `<RunMatchingRefApiCompat>false</RunMatchingRefApiCompat>` globally. This came from https://github.com/dotnet/buildtools/pull/1949. I think it should be turned off and baselined (like https://github.com/dotnet/corefx/pull/27881) but I'm not familiar with this infra, or if it makes sense to do that in a `release/2.0.0` branch.\r\n\r\nThis was driven by attempting to build on Fedora 26, but I also successfully built on Windows.\r\n\r\nDoing this for https://github.com/dotnet/source-build/pull/371#issuecomment-375013767"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7428519349","Type":"PullRequestEvent","CreatedAt":"2018-03-24T02:30:37","Actor":"4creators","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/28377","RelatedDescription":"Closed pull request \"Enable partially implemented Intel HW intrinsics ISAs - CoreFX part of changes\" (#28377) at dotnet/corefx","RelatedBody":""},{"Id":"7428517009","Type":"PullRequestEvent","CreatedAt":"2018-03-24T02:28:49","Actor":"4creators","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28443","RelatedDescription":"Opened pull request \"Enable partially implemented Intel HW intrinsics ISAs - CoreFX part\" (#28443) at dotnet/corefx","RelatedBody":"This change is a CoreFX part of https://github.com/dotnet/coreclr/pull/17184\r\n\r\nFixes #28363 "},{"Id":"7428482573","Type":"PullRequestEvent","CreatedAt":"2018-03-24T02:03:12","Actor":"kouvel","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28442","RelatedDescription":"Opened pull request \"Fix some monitor tests, add one for lock wait paths\" (#28442) at dotnet/corefx","RelatedBody":"- The monitor tests were not running because it was not a public class, fixed\r\n- Fixed some tests, for instance some argument exceptions could be improved to include parameter name (this issue exists elsewhere too), for now I have just changed the tests to reflect current coreclr/desktop behavior\r\n- Added a test to hit spinning/waiting paths for thin lock and aware lock"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7428733516","Type":"PullRequestEvent","CreatedAt":"2018-03-24T05:28:16","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25698","RelatedDescription":"Opened pull request \"Add BasicBlock.IsReachable property.\" (#25698) at dotnet/roslyn","RelatedBody":""},{"Id":"7428623532","Type":"PullRequestEvent","CreatedAt":"2018-03-24T03:52:18","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25562","RelatedDescription":"Merged pull request \"Allow deconstruction of 'default' literal\" (#25562) at dotnet/roslyn","RelatedBody":"This language change needs to be confirmed with LDM, but I think it would make sense to allow (and give `default` the type from the left-hand-side). This would be consistent with `default` being allowed in tuple equality (`(1, 2) == default`).\r\n\r\nRelates to discussion: https://github.com/dotnet/csharplang/issues/1358\r\n\r\n### Customer scenario\r\n`(int i, string j) = default; // error CS8131: Deconstruct assignment requires an expression with a type on the right-hand-side.`\r\n`(i, s) = default; // error CS8131: Deconstruct assignment requires an expression with a type on the right-hand-side.`\r\nWith this PR, this change becomes allowed.\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/25559\r\n\r\n### Workarounds, if any\r\nYou could write `(default, default)` instead.\r\n\r\n### Risk\r\n### Performance impact\r\nLow. The only change is to extend the logic to fix the type of tuple literals in deconstructions to also fix the type of `default` literal.\r\n\r\n### Is this a regression from a previous update?\r\nNo. This is a minor language feature.\r\n\r\nTagging @gafter "},{"Id":"7428489133","Type":"PullRequestEvent","CreatedAt":"2018-03-24T02:08:00","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25660","RelatedDescription":null,"RelatedBody":"Merge-blocking tests for:\r\n\r\n- [x] for the \"indexing movable fixed buffer\"\r\n- [x] for the \"custom fixed\""},{"Id":"7428488977","Type":"PullRequestEvent","CreatedAt":"2018-03-24T02:07:52","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25660","RelatedDescription":"Closed pull request \"Add tests for the \"fixed\" features.\" (#25660) at dotnet/roslyn","RelatedBody":"Merge-blocking tests for:\r\n\r\n- [x] for the \"indexing movable fixed buffer\"\r\n- [x] for the \"custom fixed\""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7428364766","Type":"PullRequestEvent","CreatedAt":"2018-03-24T00:46:16","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5613","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5613) at dotnet/corert","RelatedBody":""},{"Id":"7428225987","Type":"PullRequestEvent","CreatedAt":"2018-03-23T23:39:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5613","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5613) at dotnet/corert","RelatedBody":""},{"Id":"7428224942","Type":"PullRequestEvent","CreatedAt":"2018-03-23T23:39:26","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5610","RelatedDescription":"Merged pull request \"Fix \"dotnet publish\" on Unix\" (#5610) at dotnet/corert","RelatedBody":"dotnet publish fails with:\r\n\r\n```\r\nHelloWorld -> /home/jkotas/xxx/bin/Debug/netcoreapp2.0/linux-x64/publish/\r\n/home/jkotas/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-2632301/build/Microsoft.NETCore.Native.Publish.targets(72,5): error MSB3030: Could not copy the file \"bin/Debug/netcoreapp2.0/linux-x64/native/HelloWorld.pdb\" because it was not found. [/home/jkotas/xxx/HelloWorld.csproj]\r\n```"},{"Id":"7428224520","Type":"PullRequestEvent","CreatedAt":"2018-03-23T23:39:15","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5612","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5612) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7428221835","Type":"PullRequestEvent","CreatedAt":"2018-03-23T23:38:04","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5612","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5612) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7428199375","Type":"IssuesEvent","CreatedAt":"2018-03-23T23:28:27","Actor":"up2pixy","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5611","RelatedDescription":"Opened issue \".Net Native tool chain - UWP won't launch when using Microsoft.NETCore.UniversalWindowsPlatform 6.0.x\" (#5611) at dotnet/corert","RelatedBody":"We have a centennial UWP app which is using `Microsoft.NETCore.UniversalWindowsPlatform 6.0.x`.\r\nIt has UWP part, WPF part, and a .NetStardard 1.4 part for shard components\r\n\r\nIt can build and run normally with debug build configuration, but when building with release (compile with .Net Native tool chain) the app won't launch. \r\n\r\nWhen I check the event viewer, I see following errors:\r\n`The server xxxxxxxx did not register with DCOM within the required timeout.`\r\n\r\nWhen we downgrade the `Microsoft.NETCore.UniversalWindowsPlatform` nuget to version 5.3.x, we can launch the app which is compiled with .Net Native tool chain\r\n\r\nWhen we upgrade the Microsoft.NETCore.UniversalWindowsPlatform nuget to version 5.4 (Microsoft.Net.Native.Compiler 1.7.0) We can launch the app but it crashes right after launch. \r\n(Faulting module name: mrt100_app.dll, version: 1.6.24903.0, time stamp: 0x586b2b6d)\r\n\r\nCould you please help to trouble shoot this issue? We really want to use `Microsoft.NETCore.UniversalWindowsPlatform 6.0.x` that includes many more features from c# 7.0. Thanks!\r\n\r\nHere is the build log when we use `Microsoft.NETCore.UniversalWindowsPlatform 6.0.x`\r\nThe build log is too big (26MB) so I zipped it here.\r\n[BuildLog.zip](https://github.com/dotnet/corert/files/1843822/BuildLog.zip)\r\n\r\nThanks again!\r\n\r\n"},{"Id":"7427955565","Type":"IssuesEvent","CreatedAt":"2018-03-23T22:03:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/2703","RelatedDescription":"Closed issue \"Breakpoints in managed code with gdb on Linux doesn't work\" (#2703) at dotnet/corert","RelatedBody":"I tried to set breakpoints in managed code with gdb on Linux.  The breakpoints are not hitting. Also \"info function\" doesn't include the list of managed functions. I can see the function names in the frame, so I am assuming the symbols are there. gdb version 7.7\r\n\r\nIt didn't work for me with lldb on OSX either."},{"Id":"7427942401","Type":"PullRequestEvent","CreatedAt":"2018-03-23T21:59:17","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5610","RelatedDescription":"Opened pull request \"Fix \"dotnet publish\" on Unix\" (#5610) at dotnet/corert","RelatedBody":"dotnet publish fails with:\r\n\r\n```\r\nHelloWorld -> /home/jkotas/xxx/bin/Debug/netcoreapp2.0/linux-x64/publish/\r\n/home/jkotas/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-2632301/build/Microsoft.NETCore.Native.Publish.targets(72,5): error MSB3030: Could not copy the file \"bin/Debug/netcoreapp2.0/linux-x64/native/HelloWorld.pdb\" because it was not found. [/home/jkotas/xxx/HelloWorld.csproj]\r\n```"},{"Id":"7427510462","Type":"PullRequestEvent","CreatedAt":"2018-03-23T20:11:15","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5609","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5609) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7427275533","Type":"IssuesEvent","CreatedAt":"2018-03-23T19:16:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5593","RelatedDescription":"Closed issue \"Issue with Process.Start()\" (#5593) at dotnet/corert","RelatedBody":"When I try to start an external program using Process.Start, I'm greeted with this: \r\n![screenshot 27](https://user-images.githubusercontent.com/20741641/37733061-38e764c4-2d1d-11e8-9bc5-bed73e2bc3ac.png)\r\n\r\nIt's supposed to execute an external program which it downloaded.\r\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7428095073","Type":"PullRequestEvent","CreatedAt":"2018-03-23T22:48:38","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2085","RelatedDescription":"Opened pull request \"Roll forward self-contained apps to latest patch version\" (#2085) at dotnet/sdk","RelatedBody":"- Bring back behavior where self-contained apps will roll-forward to the latest patch the SDK knows about\r\n  - We had reverted this in #1574\r\n  - Hopefully the implementation here should be a bit easier to follow\r\n- Add an error message when the version of .NET Core in the assets file is different than what was expected based on current settings: `The project was restored using Microsoft.NETCore.App version 2.0.0, but with current settings, version 2.0.6 would be used instead.  To resolve this issue, make sure the same settings are used for restore and for subsequent operations such as build or publish.  Typically this issue can occur if the RuntimeIdentifier property is set during build or publish but not during restore.`\r\n- Fix various test issues\r\n\r\nRelated: #1570\r\n\r\n@nguerrera @livarcocc @dotnet/dotnet-cli for review"},{"Id":"7428089950","Type":"PullRequestEvent","CreatedAt":"2018-03-23T22:46:52","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2006","RelatedDescription":"Merged pull request \"Fix issues with dogfood environment setup\" (#2006) at dotnet/sdk","RelatedBody":"1. There's a typo in the extensions targets in some branches\r\n2. The .sh had the old-old incorrect extensions targets path\r\n3. DotNetRoot was not set early enough in .sh\r\n4. .sh was still setting CustomAfter targets"},{"Id":"7428088790","Type":"PullRequestEvent","CreatedAt":"2018-03-23T22:46:27","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2081","RelatedDescription":"Merged pull request \"Merge release/2.1.3xx to master\" (#2081) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7428078599","Type":"PullRequestEvent","CreatedAt":"2018-03-23T22:42:58","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2079","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.7.0-preview3.5038 into sdk\" (#2079) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-preview3.5038 into sdk master branch"},{"Id":"7427129915","Type":"PullRequestEvent","CreatedAt":"2018-03-23T18:43:07","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2083","RelatedDescription":"Opened pull request \"Handle asset file reading errors more robustly\" (#2083) at dotnet/sdk","RelatedBody":"The recent episode where an assembly binding conflict resulted in nonsensical \"Missing target in assets file\" errors revealed several holes in how errors in the assets file are handled. This ensures that we never allow a bogus empty lock file to surface to our build logic and that all messages from NuGet or System.IO are preseved in the build output."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"977245582724022272","CreatedAt":"2018-03-23T18:07:57+00:00","UserScreenname":"dotnet","Text":"Calling all Desktop Developers: how should UI development be improved? https://t.co/lKHACsK0Sv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":47,"FavoriteCount":33,"RawContent":null},{"Id":"976910301634465792","CreatedAt":"2018-03-22T19:55:40+00:00","UserScreenname":"dotnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/OokEA8H4Mo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":201,"FavoriteCount":160,"RawContent":null},{"Id":"976141100074373120","CreatedAt":"2018-03-20T16:59:08+00:00","UserScreenname":"dotnet","Text":"Check out this video from @csharpfritz and @jasonbock talking about @roslyn Analyzers and making your code easier t… https://t.co/Nv8pTxt0zP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":9,"RawContent":null},{"Id":"975544139893825536","CreatedAt":"2018-03-19T01:27:02+00:00","UserScreenname":"dotnet","Text":"We agree with this sentiment very much! We often retweet blog posts that came to our attention. While it doesn't im… https://t.co/GtFpUrShX8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":27,"FavoriteCount":5,"RawContent":null},{"Id":"974694823067246592","CreatedAt":"2018-03-16T17:12:09+00:00","UserScreenname":"dotnet","Text":"Check out the latest On .NET show with @jeremylikness &amp; @jplane talking .NET Core and containers. #dotnetcore https://t.co/NfFbKIsLTw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2018-03-24T05:30:19.3862647Z","RunDurationInMilliseconds":7781}