{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T00:00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T00:00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T00:00:00","CommentsCount":16,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T00:00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:00:00","CommentsCount":24,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T00:00:00","CommentsCount":21,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T00:00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T00:00:00","CommentsCount":50,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6687016337","Type":"IssuesEvent","CreatedAt":"2017-10-07T18:17:42","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14383","RelatedDescription":"Opened issue \"[RyuJIT/arm32][GCStress=4] Failures in GCStress run\" (#14383) at dotnet/coreclr","RelatedBody":"I ran the RyuJIT/arm32 pri-1 tests on Windows hardware, with `COMPlus_GCStress=4`, and saw 204 failures, 10942 pass.\r\n\r\nMany (but not all) of the failures are the common assert indicating bad GC information:\r\n```\r\nTEST_CMD_LINE: JIT\\jit64\\gc\\misc\\structret6_3> C:\\brucefo\\Windows_NT.arm.Release.2017-10-06\\JIT\\jit64\\gc\\misc\\structret6_3\\structret6_3.cmd \r\n\r\nBEGIN EXECUTION\r\n \"c:\\brucefo\\core_root\\Windows_NT.arm.Checked.2017-10-06\\corerun.exe\" structret6_3.exe \r\n\r\nAssert failure(PID 7592 [0x00001da8], Thread: 6776 [0x1a78]): !CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")\r\n\r\n!  + 0x0 (0x00000000)\r\n    File: e:\\gh\\coreclr2\\src\\vm\\object.cpp Line: 1819\r\n    Image: c:\\brucefo\\core_root\\Windows_NT.arm.Checked.2017-10-06\\CoreRun.exe\r\n\r\nExpected: 100\r\nActual: 123456789\r\nEND EXECUTION - FAILED\r\nFAILED\r\n```\r\n\r\nMany of the tests look to be related to structs, or exception handling.\r\n\r\nThere are likely to be multiple different causes for these failures.\r\n\r\nAll the failed tests:\r\n```\r\nTests.lst=_dbgthrow.cmd_7830\r\nTests.lst=_il_dbgcastclass_catch.cmd_6797\r\nTests.lst=_il_dbgfilter.cmd_11282\r\nTests.lst=_il_dbghuge_gcref.cmd_98\r\nTests.lst=_il_dbghuge_struct.cmd_1734\r\nTests.lst=_il_dbgisinst_catch.cmd_9146\r\nTests.lst=_il_dbgtest_implicit.cmd_10113\r\nTests.lst=_il_relcastclass_catch.cmd_4232\r\nTests.lst=_il_relfilter.cmd_2245\r\nTests.lst=_il_relisinst_catch.cmd_11096\r\nTests.lst=_il_relknight.cmd_4493\r\nTests.lst=_il_relrefarg_i1.cmd_10887\r\nTests.lst=_il_relrefloc_i2.cmd_6208\r\nTests.lst=_il_relrefloc_o.cmd_40\r\nTests.lst=_il_relrefloc_o2.cmd_5665\r\nTests.lst=_il_relrefloc_r4.cmd_8718\r\nTests.lst=_il_relrefloc_r8.cmd_2528\r\nTests.lst=_il_relrefloc_u2.cmd_8947\r\nTests.lst=_il_reltest_implicit.cmd_806\r\nTests.lst=_il_relthread-race.cmd_6666\r\nTests.lst=_relthrow.cmd_10975\r\nTests.lst=_speed_dbgthrow.cmd_10067\r\nTests.lst=_speed_relthrow.cmd_631\r\nTests.lst=437044.cmd_10304\r\nTests.lst=ArrayCreateInstance2b.cmd_3144\r\nTests.lst=b02345.cmd_4358\r\nTests.lst=b07900.cmd_3881\r\nTests.lst=b112982.cmd_8489\r\nTests.lst=b13569.cmd_10869\r\nTests.lst=b16399.cmd_4334\r\nTests.lst=b26496.cmd_9315\r\nTests.lst=b302558.cmd_3591\r\nTests.lst=b309539.cmd_6644\r\nTests.lst=b309576.cmd_37\r\nTests.lst=b321799.cmd_1634\r\nTests.lst=b33183.cmd_4258\r\nTests.lst=b441487.cmd_10976\r\nTests.lst=Baadbaad.cmd_2370\r\nTests.lst=BaseClass.cmd_6478\r\nTests.lst=binarytrees.cmd_7301\r\nTests.lst=binarytrees3.cmd_4184\r\nTests.lst=bindhandleinvalid.cmd_7988\r\nTests.lst=bindhandleinvalid3.cmd_11143\r\nTests.lst=bindhandleinvalid4.cmd_2092\r\nTests.lst=bindhandleinvalid5.cmd_318\r\nTests.lst=bindhandleinvalid6.cmd_2744\r\nTests.lst=boxunboxvaluetype_do.cmd_7\r\nTests.lst=boxunboxvaluetype_r.cmd_6226\r\nTests.lst=boxunboxvaluetype_ro.cmd_6993\r\nTests.lst=calli_excep.cmd_1064\r\nTests.lst=caninline_d.cmd_6344\r\nTests.lst=caninline_do.cmd_3927\r\nTests.lst=caninline_r.cmd_8672\r\nTests.lst=caninline_ro.cmd_9049\r\nTests.lst=Case1.cmd_8560\r\nTests.lst=case1.cmd_9154\r\nTests.lst=case11.cmd_8858\r\nTests.lst=case12.cmd_5538\r\nTests.lst=case14.cmd_262\r\nTests.lst=case15.cmd_8622\r\nTests.lst=case2.cmd_10566\r\nTests.lst=case3.cmd_10915\r\nTests.lst=case4.cmd_4484\r\nTests.lst=case5.cmd_6196\r\nTests.lst=case6.cmd_10325\r\nTests.lst=case7.cmd_5508\r\nTests.lst=case8.cmd_2804\r\nTests.lst=case9.cmd_10923\r\nTests.lst=castclassvaluetype_d.cmd_2095\r\nTests.lst=castclassvaluetype_do.cmd_6021\r\nTests.lst=castclassvaluetype_r.cmd_9730\r\nTests.lst=castclassvaluetype_ro.cmd_8242\r\nTests.lst=CircularCctorFourThreads.cmd_5035\r\nTests.lst=CircularCctorThreeThreads03.cmd_3051\r\nTests.lst=client.cmd_986\r\nTests.lst=CollidedUnwind.cmd_8131\r\nTests.lst=ddb87766.cmd_5825\r\nTests.lst=Dev11_4421.cmd_10658\r\nTests.lst=DictEnumIDictEnumget_Entry.cmd_3872\r\nTests.lst=DictEnumIDictEnumget_Key.cmd_8982\r\nTests.lst=DictEnumIDictEnumget_Value.cmd_5520\r\nTests.lst=DictEnumIEnumget_Current.cmd_11133\r\nTests.lst=DictionaryICollectionCopyTo.cmd_1565\r\nTests.lst=DictionaryICollectionCopyTo2.cmd_8759\r\nTests.lst=EHPatternTests.cmd_11092\r\nTests.lst=excepobj.cmd_7191\r\nTests.lst=exceptions.cmd_5701\r\nTests.lst=fannkuch-redux.cmd_11386\r\nTests.lst=fasta.cmd_11039\r\nTests.lst=fastaredux.cmd_10129\r\nTests.lst=Finalizer.cmd_6081\r\nTests.lst=GCKeepAlive.cmd_8869\r\nTests.lst=general_class_instance01.cmd_5494\r\nTests.lst=general_class_static01.cmd_8510\r\nTests.lst=general_struct_instance01.cmd_7469\r\nTests.lst=general_struct_static01.cmd_577\r\nTests.lst=GetGeneration_fail.cmd_10025\r\nTests.lst=GoryManagedPresent.cmd_5766\r\nTests.lst=GoryNativePast.cmd_3924\r\nTests.lst=HandlerException.cmd_3191\r\nTests.lst=hfa_sd0A_r.cmd_7167\r\nTests.lst=hfa_sd0B_d.cmd_7353\r\nTests.lst=hfa_sd0B_r.cmd_4438\r\nTests.lst=hfa_sd0G_r.cmd_10723\r\nTests.lst=hfa_sd1A_r.cmd_525\r\nTests.lst=hfa_sd1G_r.cmd_1954\r\nTests.lst=hfa_sd2A_d.cmd_8260\r\nTests.lst=hfa_sd2A_r.cmd_8128\r\nTests.lst=hfa_sd2B_d.cmd_5688\r\nTests.lst=hfa_sd2B_r.cmd_752\r\nTests.lst=hfa_sd2G_d.cmd_4210\r\nTests.lst=hfa_sd2G_r.cmd_1362\r\nTests.lst=hfa_sf0A_r.cmd_10307\r\nTests.lst=hfa_sf0B_d.cmd_5236\r\nTests.lst=hfa_sf0B_r.cmd_2860\r\nTests.lst=hfa_sf1A_r.cmd_7852\r\nTests.lst=hfa_sf2A_d.cmd_5804\r\nTests.lst=hfa_sf2A_r.cmd_7031\r\nTests.lst=hfa_sf2B_d.cmd_3846\r\nTests.lst=hfa_sf2B_r.cmd_7325\r\nTests.lst=huge_struct.cmd_8601\r\nTests.lst=InlineThrow.cmd_2281\r\nTests.lst=jaggedarr_cs_do.cmd_3344\r\nTests.lst=LdfldaHack.cmd_10205\r\nTests.lst=lifetime1.cmd_3806\r\nTests.lst=lifetime2.cmd_9676\r\nTests.lst=mandelbrot.cmd_11382\r\nTests.lst=MarshalClassTests.cmd_5485\r\nTests.lst=moduleHandleCache.cmd_2246\r\nTests.lst=MultipleException.cmd_5527\r\nTests.lst=MutualThdRecur-fptr.cmd_5907\r\nTests.lst=nbody.cmd_11148\r\nTests.lst=NestedEx1.cmd_3353\r\nTests.lst=NestedEx2.cmd_4313\r\nTests.lst=NestedException.cmd_1353\r\nTests.lst=NoGC.cmd_11390\r\nTests.lst=OOMException01.cmd_4785\r\nTests.lst=override_override1.cmd_8398\r\nTests.lst=Pending.cmd_5724\r\nTests.lst=pi-digits.cmd_4164\r\nTests.lst=pumpFromCctor.cmd_1154\r\nTests.lst=Recurse.cmd_5745\r\nTests.lst=RecursiveException.cmd_7608\r\nTests.lst=RecursiveRethrow.cmd_6185\r\nTests.lst=RecursiveThrowNew.cmd_1299\r\nTests.lst=regexdna.cmd_5103\r\nTests.lst=repro177066.cmd_2212\r\nTests.lst=RethrowAndFinally.cmd_9249\r\nTests.lst=revcomp.cmd_3664\r\nTests.lst=self_override3.cmd_11010\r\nTests.lst=semdemo.cmd_1794\r\nTests.lst=semtest.cmd_5191\r\nTests.lst=spectralnorm.cmd_7789\r\nTests.lst=StackTracePreserveTests.cmd_901\r\nTests.lst=straccess2_cs_do.cmd_3513\r\nTests.lst=straccess2_cs_ro.cmd_2232\r\nTests.lst=stringarr_cs_ro.cmd_6254\r\nTests.lst=StringCompareOrdinal2.cmd_1273\r\nTests.lst=struct9_2.cmd_5807\r\nTests.lst=structret1_1.cmd_5198\r\nTests.lst=structret1_2.cmd_7200\r\nTests.lst=structret1_3.cmd_5062\r\nTests.lst=structret2_1.cmd_4001\r\nTests.lst=structret2_2.cmd_1242\r\nTests.lst=structret2_3.cmd_3507\r\nTests.lst=structret3_1.cmd_3198\r\nTests.lst=structret3_2.cmd_4020\r\nTests.lst=structret3_3.cmd_8029\r\nTests.lst=structret4_1.cmd_10882\r\nTests.lst=structret4_2.cmd_11286\r\nTests.lst=structret4_3.cmd_3274\r\nTests.lst=structret5_1.cmd_10355\r\nTests.lst=structret5_2.cmd_4782\r\nTests.lst=structret5_3.cmd_809\r\nTests.lst=structret6_1.cmd_2824\r\nTests.lst=structret6_2.cmd_4235\r\nTests.lst=structret6_3.cmd_420\r\nTests.lst=switch6.cmd_4866\r\nTests.lst=test1.cmd_9881\r\nTests.lst=test532654_b.cmd_1907\r\nTests.lst=test640474.cmd_6259\r\nTests.lst=TestAPIs.cmd_939\r\nTests.lst=threadstatic07.cmd_7048\r\nTests.lst=throw_cs_d.cmd_10584\r\nTests.lst=throw_cs_d.cmd_3208\r\nTests.lst=throw_cs_do.cmd_2138\r\nTests.lst=throw_cs_do.cmd_2821\r\nTests.lst=throw_cs_r.cmd_10973\r\nTests.lst=throw_cs_r.cmd_2662\r\nTests.lst=throw_cs_ro.cmd_10070\r\nTests.lst=throw_cs_ro.cmd_6786\r\nTests.lst=ThrowInCatch.cmd_8628\r\nTests.lst=ThrowInFinally.cmd_5152\r\nTests.lst=ThrowInFinallyNestedInTry.cmd_9693\r\nTests.lst=TryCatchInFinally.cmd_608\r\nTests.lst=trythrowexcept_d.cmd_3661\r\nTests.lst=trythrowexcept_r.cmd_484\r\nTests.lst=UserExceptionThread.cmd_650\r\nTests.lst=Vector3Interop_r.cmd_7398\r\nTests.lst=Vector3Interop_ro.cmd_2124\r\nTests.lst=vsw529206ModuleCctor.cmd_5359\r\nTests.lst=vsw529206ModuleCctor.cmd_5726\r\nTests.lst=vsw529206StaticCctor.cmd_7060\r\nTests.lst=waitallex1.cmd_3595\r\n```\r\n"},{"Id":"6686931871","Type":"PullRequestEvent","CreatedAt":"2017-10-07T17:17:49","Actor":"mikedn","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14382","RelatedDescription":"Opened pull request \"Removed unused opers and code\" (#14382) at dotnet/coreclr","RelatedBody":"* GT_DIV_HI and GT_MOD_HI are not used anywhere\r\n* genCodeForBinary doesn't handle GT_MUL_LONG\r\n* OperIsHigh is not used anywhere"},{"Id":"6686931674","Type":"PullRequestEvent","CreatedAt":"2017-10-07T17:17:40","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14381","RelatedDescription":"Opened pull request \"JIT: improve type equality opts for generic and prejitted code\" (#14381) at dotnet/coreclr","RelatedBody":"Handle cases where a `GetType()` call on a generically typed object\r\nfeeds into a type equality comparison.\r\n\r\nThese calls have constraint prefixes. For value classes the constraint\r\ntells us the type and so we can avoid the box and call and just construct\r\nthat type directly. For ref classes the type test can usually reduce to\r\na method table comparison.\r\n\r\nAlso, handle cases that arise in prejiited code better, by generalizing\r\nhow the jit looks for class handles from type construction trees.\r\n\r\nAdded test cases.\r\n\r\nCloses #14304."},{"Id":"6686810855","Type":"PullRequestEvent","CreatedAt":"2017-10-07T15:55:20","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14380","RelatedDescription":"Opened pull request \"Update CoreFx, PgoData to preview1-25807-02, master-20171007-0052, respectively (master)\" (#14380) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6686806353","Type":"PullRequestEvent","CreatedAt":"2017-10-07T15:52:06","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14378","RelatedDescription":"Merged pull request \"Update CoreFx, PgoData to preview1-25807-01, master-20171007-0052, respectively (master)\" (#14378) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6686357923","Type":"PullRequestEvent","CreatedAt":"2017-10-07T09:56:26","Actor":"janvorli","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14370","RelatedDescription":"Merged pull request \"Fix numa build break\" (#14370) at dotnet/coreclr","RelatedBody":"This change fixes a break in build of coreclr on machines with libnuma\r\ninstalled. The problem was that the numa header contains a couple of\r\ninlined functions and we were using one of them. That made it to\r\nhave a hard reference to a function from the numa library that we\r\nneed to be soft so that coreclr can work even on machines without\r\nthe libnuma installed.\r\nFortunately, this inlined function was just a pass through wrapper around\r\nanother function from the library, so defining a symbol with the name of the \r\ninline function to the name of the function it calls fixes the problem. While\r\nwe could replace all uses of the inline function in our source code by\r\nthe other function, the way I did it preserves the readability of the code \r\n(numa_allocate_cpumask is matched by numa_free_cpumask)"},{"Id":"6686344638","Type":"IssuesEvent","CreatedAt":"2017-10-07T09:44:21","Actor":"luboid","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14379","RelatedDescription":"Opened issue \"IL working in .Net Framework but not in .Net Core 2.0\" (#14379) at dotnet/coreclr","RelatedBody":"Hi,\r\n\r\nI have project \r\n\r\nhttps://github.com/luboid/ES5.Script/tree/dotnet-core-2 \r\n\r\nwhich compile JavaScript to IL, here is problematic case \r\n\r\nhttps://github.com/luboid/ES5.Script/tree/dotnet-core-2/TestConsole/test-cases/not-working\r\n\r\n*.frmw.txt IL code generated by .Net Framework\r\n*.core.txt IL code generated by .Net Core\r\n\r\nIL code is identical and there is no differences and generate exception :\r\n\r\nSystem.InvalidProgramException: Common Language Runtime detected an invalid program.\r\n\r\nwhen executed in .Net Core\r\n\r\nI'am using \r\n\r\nhttp://blogs.msdn.com/b/haibo_luo/archive/2005/10/25/484861.aspx\r\n\r\nto catch IL\r\n\r\nES5.Script\\EcmaScript\\EcmaScriptCompiler.cs:line 384\r\n\r\n\r\nWin 10 (version:1703, build:15063.608) \r\nVS 2017 (version:15.3.5)\r\n.Net Core 2.0\r\n.Net Framework 4.7.02046\r\n\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6687776664","Type":"IssuesEvent","CreatedAt":"2017-10-08T05:20:31","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7592","RelatedDescription":"Closed issue \"publish ignores folders with underscore in name\" (#7592) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCreate folder in wwwroot directory with the name \"jspm_packages\" prior to running publish\r\nRun dot net publish\r\n\r\n## Expected  behavior\r\nThe wwwroot folder in the output directory should contain a folder named \"jspm_packages\"\r\n\r\n## Actual behavior\r\nThe folder \"jspm_packages\" is missing from the wwwroot folder in the output directory.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6687123105","Type":"IssuesEvent","CreatedAt":"2017-10-07T19:35:01","Actor":"Leoat12","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7787","RelatedDescription":"Opened issue \"Cannot run application in another machine due to wrong path for dependencies. \" (#7787) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1) Create a project with the following .csproj.\r\n\r\n`<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <RuntimeIdentifiers>win10-x64;ubuntu.16.04-x64</RuntimeIdentifiers>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"MySql.Data\" Version=\"8.0.9-dmr\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n    <PackageReference Include=\"NUnit\" Version=\"3.8.1\" />\r\n    <PackageReference Include=\"TweetinviAPI\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>`\r\n\r\n2) Use the following commands:\r\n`PS> dotnet restore\r\nPS> dotnet publish -c Release -r ubuntu.16.04-x64`\r\n\r\n3) Execute the program on Ubuntu machine.\r\n\r\n## Expected  behavior\r\n\r\nThe applications is run successfully. \r\n\r\n## Actual behavior\r\n\r\nIt throws an error:\r\n`Error:\r\n  An assembly specified in the application dependencies manifest (Twitter.deps.json) was not found:\r\n    package: 'Autofac', version: '4.6.0'\r\n    path: 'lib/netstandard1.1/Autofac.dll'`\r\n\r\n## Environment data\r\n\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n## Diagnostic \r\n\r\nIt is failing to looking for the dependencies in the right place. On _runtimeconfig.dev.json_ file there is this in all deployments.\r\n\r\n`{\r\n  \"runtimeOptions\": {\r\n    \"additionalProbingPaths\": [\r\n      \"C:\\\\Users\\\\leoat\\\\.dotnet\\\\store\\\\|arch|\\\\|tfm|\",\r\n      \"C:\\\\Users\\\\leoat\\\\.nuget\\\\packages\",\r\n      \"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\NuGetFallbackFolder\"\r\n    ]\r\n  }\r\n}`\r\n\r\nThese paths exist on my computer, but not in the target Ubuntu machine, of course. I can reproduce the error on my own computer by removing all these paths. As a self-contained deployment, it should be looking for the dependencies on the _publish_ folder, they are all there, but it is looking for them in the wrong place.\r\n\r\n**Thanks you for the help!** \r\n\r\n\r\n\r\n\r\n"},{"Id":"6686799126","Type":"IssuesEvent","CreatedAt":"2017-10-07T15:46:58","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7786","RelatedDescription":"Opened issue \"System.IO.FileNotFoundException when using PrivateAssets = \"All\"\" (#7786) at dotnet/cli","RelatedBody":"@KshitizGIT commented on [Sun Sep 03 2017](https://github.com/dotnet/core/issues/933)\n\nI have a project layout like this.\r\n\r\nAssembly A -> Assembly B -> Assembly C.\r\n\r\nProgram lives in Assembly A.\r\nClassB lives in Assembly B.\r\nClassC lives in Assembly C.\r\n\r\nI don't want AssemblyC to be directly accessible in AssemblyA. So I added   PrivateAssets = \"All\" in the ProjectReference element in the AssemblyB.csproj file \r\n\r\nClassB creates a instance of ClassC.\r\n\r\nProgram creates a instance of ClassB.\r\n\r\nBut this is causing a System.IO.FileNotFoundException : Couldnot load file or assembly 'C'.\r\n\r\nI have attached the project. Please look into it.\r\n\r\n[Dependency.zip](https://github.com/dotnet/core/files/1272843/Dependency.zip)\r\n\r\n\n\n"},{"Id":"6686462671","Type":"IssuesEvent","CreatedAt":"2017-10-07T11:30:28","Actor":"danielzoeller","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7765","RelatedDescription":"Closed issue \"Can't build dotnet core 2.0 console apps after reinstall\" (#7765) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nI previously had dotnet 2.0 and VS 2017 installed and working fine.  I had to do a system restore on my surface pro and then VS 2017 stopped working.  I uninstalled VS 2017 and dotnet core.  Then reinstalled both but I specifically can't get dotnet core 2.0 console apps to build.  Strangely enough, asp.net core 2.0 apps seem to be working just fine.  Also, I can build console apps for dotnet 1.1 just fine as well.\r\n\r\nEven a simple Hello world app created from the CLI doesn't seem to work:\r\n\r\n$ dotnet new console\r\n$ dotnet restore\r\n$ dotnet run\r\n\r\n## Expected  behavior\r\nConsole app should run.\r\n\r\n## Actual behavior\r\nHere is the error I get:\r\n\r\n```\r\nC:\\Users\\danzo\\AppData\\Local\\Temp\\.NETCoreApp,Version=v2.0.AssemblyAttributes.cs(4,20): error CS0400: The type or namespace name 'System' could not be found in the global namespace (are you missing an assembly reference?) [C:\\Users\\danzo\\Source\\repos\\Hello\\Hello.csproj]\r\nobj\\Debug\\netcoreapp2.0\\Hello.AssemblyInfo.cs(10,12): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?) [C:\\Users\\danzo\\Source\\repos\\Hello\\Hello.csproj]\r\nobj\\Debug\\netcoreapp2.0\\Hello.AssemblyInfo.cs(11,12): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?) \r\n\r\n[OMITTED ABOUT 30 SIMILAR ERRORS FOR BREVITY]\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\n## Environment data\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n----------------------------------------------------\r\n**Thank you for any help you can provide me!**\r\n\r\n\r\n\r\n\r\n"},{"Id":"6685871949","Type":"PullRequestEvent","CreatedAt":"2017-10-07T02:01:48","Actor":"KevinRansom","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7785","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-25806-02 (master)\" (#7785) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6685744185","Type":"IssuesEvent","CreatedAt":"2017-10-07T00:22:51","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7782","RelatedDescription":"Closed issue \"publish command with -o directive creating directories nested recursively\" (#7782) at dotnet/cli","RelatedBody":"@randolfrf commented on [Tue Aug 22 2017](https://github.com/dotnet/core/issues/885)\n\n# Publish command with -o directive creates nested directories at the -o target\r\n\r\nI have a brand new asp.net core 2 mvc web project. When I run: \r\n\r\n`$dotnet publish -c release -o ./app/compiled`\r\n\r\nApp is built in release mode and published to /app/compiled. Everything works fine. I have the following structure:\r\n..\r\n/app\r\n/app/compiled/\r\n/app/wwwroot/\r\n/app/wwwroot/css\r\n/app/wwwroot/images\r\n/app/wwwroot/js\r\n/app/wwwroot/lib\r\n/app/wwwroot/lib/... (a few more inside lib, with lib data)\r\n..\r\n\r\nThis structured is the intended one, but when trying to run again the command:\r\n\r\n`$dotnet publish -c release -o ./app/compiled`\r\n\r\nI end up with this structure:\r\n\r\n..\r\n/app\r\n/app/compiled/\r\n/app/compiled/app\r\n/app/compiled/app/compiled\r\n/app/compiled/app/compiled/wwwroot\r\n/app/compiled/app/compiled/wwwroot/lib\r\n/app/compiled/app/compiled/wwwroot/lib/... (a few more within lib, one for each package BUT WITHOUT CONTENT)\r\n/app/wwwroot/\r\n/app/wwwroot/css\r\n/app/wwwroot/images\r\n/app/wwwroot/js\r\n/app/wwwroot/lib\r\n/app/wwwroot/lib/... (a few more inside lib with lib data)\r\n..\r\n\r\nEvery time I run the publish with output command a new /app/compiled/ directory with partial contents is being created in the previous /app/compiled/ directory. After 4 executions I end up having:\r\n\r\n/app/compiled/app/compiled/app/compiled/app/compiled/\r\n\r\n# General\r\n\r\nI'm running .netCore 2, installed SDK from https://www.microsoft.com/net/download/core, on a fresh new machine running macOS 10.12.6. \r\n\r\nI'm running: \r\n\r\n`dotnet new mvc`\r\n\r\nAs template and that's all. No other nuget package, nor any other extension.\n\n---\n\n@randolfrf commented on [Tue Aug 22 2017](https://github.com/dotnet/core/issues/885#issuecomment-324185318)\n\nJust to be clear, If I try again with another project (of another type) the behavior is the same.\n\n"},{"Id":"6685447062","Type":"PullRequestEvent","CreatedAt":"2017-10-06T22:06:42","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7785","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25806-02 (master)\" (#7785) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"6685396798","Type":"IssuesEvent","CreatedAt":"2017-10-06T21:49:43","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7784","RelatedDescription":"Opened issue \"Invalid .csproj.nuget.g.props file generated on dotnet restore on Linux\" (#7784) at dotnet/cli","RelatedBody":"@AnisAli commented on [Mon Sep 11 2017](https://github.com/dotnet/core/issues/960)\n\n# invalid csproj.nuget.g.props file generated by dotnet restore on Linux\r\n\r\nI do have binary zip file and want to pack that zip file in nupkg as content therefore I am adding my binary file as content in csproj file\r\n\r\n**basicmodule.csproj**\r\n\r\n```\r\n <ItemGroup>\r\n    <Content Include=\"package.zip\">\r\n     <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n     <Pack>True</Pack>\r\n      <BuildAction>Content</BuildAction>\r\n      <PackagePath>contentFiles\\any\\any\\MyPackage\\package.zip</PackagePath>\r\n    </Content>\r\n </ItemGroup>\r\n```\r\n\r\nafter packing basicmodule.csproj  getting nuget package \"basicmodule.1.0.1.nupkg and used this nuget package in another project called advancemodule.csproj\r\n\r\n**basicmodule.1.0.1 nuspec file** after packing basicmodule.csproj\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>BasicModule</id>\r\n    <version>1.0.1</version>\r\n    <authors>BasicModule</authors>\r\n    <owners>BasicModule</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>The BasicModule is a simple example</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETStandard2.0\">\r\n        <dependency id=\"Contracts\" version=\"1.0.1.2\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n    <contentFiles>\r\n      <files include=\"any/any/MyPackage/package.zip\" buildAction=\"Content\" />\r\n    </contentFiles>\r\n  </metadata>\r\n</package>\r\n```\r\n\r\nWhen I run dotnet restore on advancemodule.csproj in the Linux enviornment, dotnet restore generates the basicmodule.1.0.1.csproj.nuget.g.props file with incorrect XML tag, instead of content tag for package.zip it generates compile tag\r\n\r\n**basicmodule.1.0.1.csproj.nuget.g.props** generated inside obj folder after dotnet restore\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\r\n<Project ToolsVersion=\"14.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n    <RestoreSuccess Condition=\" '$(RestoreSuccess)' == '' \">True</RestoreSuccess>\r\n    <RestoreTool Condition=\" '$(RestoreTool)' == '' \">NuGet</RestoreTool>\r\n    <ProjectAssetsFile Condition=\" '$(ProjectAssetsFile)' == '' \">/build/src/BasicModule/obj/project.assets.json</ProjectAssetsFile>\r\n    <NuGetPackageRoot Condition=\" '$(NuGetPackageRoot)' == '' \">/root/.nuget/packages/</NuGetPackageRoot>\r\n    <NuGetPackageFolders Condition=\" '$(NuGetPackageFolders)' == '' \">/root/.nuget/packages/;/usr/share/dotnet/sdk/NuGetFallbackFolder</NuGetPackageFolders>\r\n    <NuGetProjectStyle Condition=\" '$(NuGetProjectStyle)' == '' \">PackageReference</NuGetProjectStyle>\r\n    <NuGetToolVersion Condition=\" '$(NuGetToolVersion)' == '' \">4.3.0</NuGetToolVersion>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>\r\n  </PropertyGroup>\r\n  <ItemGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n   \r\n <Compile \r\nInclude=\"$(NuGetPackageRoot)basicmodule/1.0.1/contentfiles/any/any/MyPackage/package.zip\" Condition=\"Exists('$(NuGetPackageRoot)basic$\r\n      <NuGetPackageId>BasicModule</NuGetPackageId>\r\n      <NuGetPackageVersion>1.0.1</NuGetPackageVersion>\r\n      **<NuGetItemType>Compile</NuGetItemType>**\r\n      <Private>False</Private>\r\n      <Link>MyPackage/package.zip</Link>\r\n    </Compile>\r\n\r\n  </ItemGroup>\r\n  <ImportGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n    <Import Project=\"$(NuGetPackageRoot)xunit.runner.visualstudio/2.2.0/build/netcoreapp1.0/xunit.runner.visualstudio.props\" Condition=\"Exists('$(NuGetPackageRoot)xunit.runner.visualstudio/$\r\n    <Import Project=\"/usr/share/dotnet/sdk/NuGetFallbackFolder/microsoft.netcore.app/2.0.0/build/netcoreapp2.0/Microsoft.NETCore.App.props\" Condition=\"Exists('/usr/share/dotnet/sdk/NuGetFal$\r\n    <Import Project=\"$(NuGetPackageRoot)microsoft.net.test.sdk/15.3.0-preview-20170628-02/build/netcoreapp1.0/Microsoft.Net.Test.Sdk.props\" Condition=\"Exists('$(NuGetPackageRoot)microsoft.n$\r\n  </ImportGroup>\r\n</Project>\r\n```\r\n\r\nBecause of **<Compile>** tag for contentfile in basicmodule.1.0.1.csproj.nuget.g.props getting error during dotnet build\r\n\r\n> `CSC : error CS2015: '/root/localnuget/basicmodule/1.0.1/contentFiles/any/any/MyPackage/package.zip' is a binary file instead of a text file [/build/src/AdvanceModule/AdvanceModule.csproj]`\r\n\r\n\r\n## Expected Behavior should be same as Windows \r\n\r\n - generate csproj.nuget.g.props file with Content tag like\r\n```\r\n<Content Include=\"$(NuGetPackageRoot)basicmodule\\1.0.1\\contentFiles\\any\\any\\MyPackage\\package.zip\" Condition=\"Exists('$(NuGetPackageRoot)basicmodule\\1.0.1\\contentFiles\\any\\any\\MyPackage\\package.zip')\">\r\n      <NuGetPackageId>BasicModule</NuGetPackageId>\r\n      <NuGetPackageVersion>1.0.1</NuGetPackageVersion>\r\n      <NuGetItemType>Content</NuGetItemType>\r\n      <Private>False</Private>\r\n      <Link>MyPackage\\package.zip</Link>\r\n    </Content>\r\n```\r\n## Actual \r\n```\r\n<Compile \r\nInclude=\"$(NuGetPackageRoot)basicmodule/1.0.1/contentfiles/any/any/MyPackage/package.zip\" Condition=\"Exists('$(NuGetPackageRoot)basic$\r\n      <NuGetPackageId>BasicModule</NuGetPackageId>\r\n      <NuGetPackageVersion>1.0.1</NuGetPackageVersion>\r\n      **<NuGetItemType>Compile</NuGetItemType>**\r\n      <Private>False</Private>\r\n      <Link>MyPackage/package.zip</Link>\r\n    </Compile>\r\n``` \r\nbecause of this compiler try to compile package.zip file\r\n\r\n\n\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6685680055","Type":"IssuesEvent","CreatedAt":"2017-10-06T23:45:39","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/529","RelatedDescription":"Opened issue \".NET Standard and Click Once\" (#529) at dotnet/standard","RelatedBody":"## Summary\r\n\r\nThere is currently a bug that prevents ClickOnce setups from correctly deploying all the necessary .NET Standard support files. But you can work this around by editing your project file.\r\n\r\n## Symptoms and root cause\r\n\r\nRunning the application from inside of Visual Studio succeeds, so does publishing and installing. But when the application is launched, it crashes with with an exception [like this one](https://github.com/dotnet/core/issues/1010):\r\n\r\n> Unable to initialize the application (Could not load file or assembly 'System.Runtime, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The System cannot find the file specified.\r\n\r\nThe root cause is bug in the way ClickOnce discovers and packages dependencies from the application project.\r\n\r\n## Workaround\r\n\r\nIn order to make sure the right files are added to your installer, you need to add a custom target to your project file:\r\n\r\n1. Right click your project and select **Unload Project**.\r\n2. Then, right click your project again and select **Edit \\<your project\\>**.\r\n3. Locate the first `<Import>` element and copy & paste the code from below before the `<Import>` element.\r\n4. Right click your project and select **Reload Project**\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <PublishFile Include=\"netfx.force.conflicts\">\r\n      <Visible>False</Visible>\r\n      <PublishState>Exclude</PublishState>\r\n      <IncludeHash>True</IncludeHash>\r\n      <FileType>Assembly</FileType>\r\n    </PublishFile>\r\n  </ItemGroup>\r\n  <Target Name=\"FixClickOnceDependencies\" BeforeTargets=\"_DeploymentComputeClickOnceManifestInfo\">\r\n    <ItemGroup>\r\n      <_noCopyRefs Include=\"@(ReferencePath)\" Condition=\"'%(ReferencePath.Private)' == 'false'\" />\r\n      <_noCopyRefsByFileName Include=\"@(_noCopyRefs->'%(FileName)')\">\r\n        <OriginalItem>%(Identity)</OriginalItem>\r\n      </_noCopyRefsByFileName>\r\n      <_libByFileName Include=\"@(ReferenceCopyLocalPaths->'%(FileName)')\">\r\n        <OriginalItem>%(Identity)</OriginalItem>\r\n      </_libByFileName>\r\n      <_overlappingRefByFileName Include=\"@(_noCopyRefsByFileName)\" Condition=\"'@(_noCopyRefsByFileName)' == '@(_libByFileName)' AND '%(Identity)' != ''\" />\r\n      <_overlappingLibByFileName Include=\"@(_libByFileName)\" Condition=\"'@(_noCopyRefsByFileName)' == '@(_libByFileName)' AND '%(Identity)' != ''\" />\r\n      <_overlappingRef Include=\"@(_overlappingRefByFileName->'%(OriginalItem)')\" />\r\n      <_overlappingLib Include=\"@(_overlappingLibByFileName->'%(OriginalItem)')\" />\r\n    </ItemGroup>\r\n    <ItemGroup Condition=\"'@(_overlappingRef)' != ''\">\r\n      <ReferencePath Remove=\"@(_overlappingRef)\" />\r\n      <ReferencePath Include=\"@(_overlappingLib)\">\r\n        <Private>True</Private>\r\n      </ReferencePath>\r\n    </ItemGroup>\r\n  </Target>\r\n```"},{"Id":"6685025919","Type":"IssuesEvent","CreatedAt":"2017-10-06T20:06:21","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/528","RelatedDescription":"Opened issue \".Close() on TcpClient & Socket missing for some platforms\" (#528) at dotnet/standard","RelatedBody":"@danielgerlag commented on [Mon Sep 11 2017](https://github.com/dotnet/core/issues/956)\n\n# .Close() on TcpClient & Socket missing for some platforms\r\n\r\n.Close() on TcpClient & Socket (System.Net.Sockets) is available in .net standard 2.0, only if compiling on a Windows machine... if I try compile on a Mac, these methods are missing.\r\nAlso, have to explicitly reference `System.Net.Sockets` when building from the Mac.\r\n\r\n# General\r\n\r\n.NET Standard 2.0\r\nWindows 10 vs. MacOS\r\n\n\n---\n\n@Petermarcu commented on [Thu Oct 05 2017](https://github.com/dotnet/core/issues/956#issuecomment-334622113)\n\n@weshaggard, we use the same ref's in both cases don't we? Any idea what may be going on?\n\n---\n\n@weshaggard commented on [Fri Oct 06 2017](https://github.com/dotnet/core/issues/956#issuecomment-334810208)\n\nYes we use the same ref everywhere when targeting netstandard20. @danielgerlag can you share more of how you are building? \r\n\r\nClose should be available on both of those types when targeting netstandard20\n\n"},{"Id":"6678441453","Type":"IssuesEvent","CreatedAt":"2017-10-05T14:15:42","Actor":"Priya-John","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/527","RelatedDescription":"Opened issue \"HttpCookie class is not present in .netCore\" (#527) at dotnet/standard","RelatedBody":""},{"Id":"6674601934","Type":"PullRequestEvent","CreatedAt":"2017-10-04T19:06:28","Actor":"eerhardt","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/525","RelatedDescription":"Merged pull request \"[dev/release/2.0.0] Move web sources before potentially local sources\" (#525) at dotnet/standard","RelatedBody":"Followup to https://github.com/dotnet/standard/pull/523 (initial API implementation). Adds a workaround to a `--source` bug that I added to the CoreFX repo API PR discussed at https://github.com/dotnet/corefx/pull/24378#discussion_r142285244."},{"Id":"6670813476","Type":"IssuesEvent","CreatedAt":"2017-10-04T02:27:22","Actor":"tmenier","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/526","RelatedDescription":"Opened issue \"Did the term \"portable\" die with PCLs?\" (#526) at dotnet/standard","RelatedBody":"Not sure if this is a good place this question. I have a library that used to be a PCL and has since been updated to target .NET Standard. Should I no longer say the library is \"portable\"? Is there a replacement term I should use? \"Portable\" seems appropriate, yet the term seems to have died with PCLs and I'm not entirely sure why. Thanks!"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6687158524","Type":"PullRequestEvent","CreatedAt":"2017-10-07T20:01:48","Actor":"maryamariyan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24498","RelatedDescription":"Opened pull request \"Allow ProcessStart when folder in CurDirectory has same name as file in ExecDirectory\" (#24498) at dotnet/corefx","RelatedBody":"Allow ProcessStart when folder in current directory has same name as file in execution directory"},{"Id":"6687109496","Type":"PullRequestEvent","CreatedAt":"2017-10-07T19:25:09","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24489","RelatedDescription":"Merged pull request \"Calculate CoreCLRSymbols from ReferenceCopyLocalPaths\" (#24489) at dotnet/corefx","RelatedBody":"The way I had it was with the nuget id hardcoded and adding the RID from `$(PackageRID)`. When `TargetGroup=uap` this RID has `win10` on it and obviously the package name being built up doesn't exist so when trying to download it we would get a warning, this fixes that warning.\r\n\r\ncc: @weshaggard @danmosemsft "},{"Id":"6687105796","Type":"PullRequestEvent","CreatedAt":"2017-10-07T19:22:17","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24493","RelatedDescription":"Merged pull request \"Add Configurations.props to performance tests\" (#24493) at dotnet/corefx","RelatedBody":"Fixes: https://github.com/dotnet/corefx/issues/24153\r\n\r\nIf we don't have Configurations.props we get the default build configuration which doesn't match with the bin placing configurations. After chatting with @weshaggard offline we decided to add Configurations.props into performance tests projects.\r\n\r\ncc: @danmosemsft @ericstj @stephentoub "},{"Id":"6687105790","Type":"IssuesEvent","CreatedAt":"2017-10-07T19:22:17","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24153","RelatedDescription":"Closed issue \"Perf tests are broken when run from project test directory\" (#24153) at dotnet/corefx","RelatedBody":"I'm trying to build and run the System.Collections perf tests.  Following the instructions at https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/performance-tests.md, I did a:\r\n```\r\ngit clean -xdf\r\nbuild -release\r\n```\r\nfrom the root of my repo, and then from `src\\System.Collections\\tests\\Performance` did:\r\n```\r\nmsbuild /t:BuildAndTest /p:Performance=true /p:ConfigurationGroup=Release /p:TargetOS=Windows_NT\r\n```\r\nand I get the error:\r\n```\r\nThe application to execute does not exist: 'corefx\\bin\\tests\\System.Collections.Performance.Tests\\netcoreapp-Windows_NT-Release-x64\\PerfRunner.exe'"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6686605042","Type":"IssuesEvent","CreatedAt":"2017-10-07T13:29:12","Actor":"Drawaes","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22589","RelatedDescription":"Opened issue \"Closure causes anonymous type to allocate even if unused\" (#22589) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nLatest netcore and 2.0\r\n**Steps to Reproduce**:\r\n\r\n1. Method that has a closure at the bottom of method\r\n2. Add an if statement and pass in false to exit early\r\n3. The anonymous type is created and allocated even though the code is never touched\r\n\r\n**Expected Behavior**:\r\nOnly allocate if the type is actually needed\r\n\r\n**Actual Behavior**:\r\nType is allocated everytime\r\n\r\n[Repro Code Solution](https://github.com/Drawaes/dotnetXperiments/blob/master/WhyUAllocate/WhyUAllocate/TestClass.cs)\r\n\r\nWhy disassembling with ILdasm you can clearly see the problem (it news the annon type at the top of the method)\r\n\r\n![image](https://user-images.githubusercontent.com/16406969/31308272-df0a6af6-ab6b-11e7-8cd0-7f17d138933b.png)\r\n\r\nThis was noticed during refactoring of SslStream internal classes\r\n\r\n/cc @benaadams @stephentoub  - This was the allocation seen during testing\r\n\r\n\r\n\r\n"},{"Id":"6685872674","Type":"PullRequestEvent","CreatedAt":"2017-10-07T02:02:26","Actor":"KevinRansom","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22538","RelatedDescription":"Merged pull request \"Merge master to dev15.5.x\" (#22538) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into dev15.5.x.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev15.5.x-20171005-070013\ngit reset --hard upstream/dev15.5.x\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-dev15.5.x-20171005-070013 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6687560230","Type":"PullRequestEvent","CreatedAt":"2017-10-08T01:48:51","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4692","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#4692) at dotnet/corert","RelatedBody":""},{"Id":"6687560074","Type":"PullRequestEvent","CreatedAt":"2017-10-08T01:48:41","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4692","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#4692) at dotnet/corert","RelatedBody":""},{"Id":"6686997756","Type":"PullRequestEvent","CreatedAt":"2017-10-07T18:03:58","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4691","RelatedDescription":"Opened pull request \"Update RyuJIT\" (#4691) at dotnet/corert","RelatedBody":""},{"Id":"6686913469","Type":"IssuesEvent","CreatedAt":"2017-10-07T17:05:18","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/4690","RelatedDescription":"Opened issue \"InitializeArray intrinsic must always be expanded\" (#4690) at dotnet/corert","RelatedBody":"I'm hitting the `NO_WAY(\"JIT must expand the intrinsic!\");` in Microsoft.CSharp assembly. This is in the same spirit as dotnet/coreclr#9948.\r\n\r\nTo repro, compile a hello world app with\r\n\r\n```\r\n--singlemethodtypename Microsoft.CSharp.RuntimeBinder.Semantics.ExpressionBinder,Microsoft.CSharp --singlemethodname .cctor --codegenopt NGenDump=*\r\n```\r\n\r\nFrom the looks, this is caused by a stack spill somewhere else than `ldtoken`. This doesn't repro if `-O` is passed.\r\n\r\nNGenDump: \r\n[ngendump.txt](https://github.com/dotnet/corert/files/1366303/ngendump.txt)\r\n\r\n"},{"Id":"6685911246","Type":"PullRequestEvent","CreatedAt":"2017-10-07T02:38:15","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4688","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#4688) at dotnet/corert","RelatedBody":""},{"Id":"6685812261","Type":"PullRequestEvent","CreatedAt":"2017-10-07T01:11:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4689","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4689) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6685801949","Type":"PullRequestEvent","CreatedAt":"2017-10-07T01:03:48","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4689","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4689) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6685796565","Type":"PullRequestEvent","CreatedAt":"2017-10-07T00:59:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4688","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#4688) at dotnet/corert","RelatedBody":""},{"Id":"6685782476","Type":"PullRequestEvent","CreatedAt":"2017-10-07T00:49:12","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4687","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4687) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6685764218","Type":"PullRequestEvent","CreatedAt":"2017-10-07T00:36:14","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4687","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4687) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6685469657","Type":"PullRequestEvent","CreatedAt":"2017-10-06T22:14:33","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4686","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4686) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6684718613","Type":"PullRequestEvent","CreatedAt":"2017-10-06T18:47:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4685","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4685) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6684711395","Type":"PullRequestEvent","CreatedAt":"2017-10-06T18:46:06","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4685","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4685) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"916703209548214272","CreatedAt":"2017-10-07T16:34:11+00:00","UserScreenname":"dotnet","Text":"Join @terrajobst at his fire place for a story about .NET Standard versioning. https://t.co/8JAOGpk0Pm","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":43,"FavoriteCount":21,"RawContent":null},{"Id":"912821941706268673","CreatedAt":"2017-09-26T23:31:24+00:00","UserScreenname":"dotnet","Text":"Build a web service with F# and .NET Core 2.0 https://t.co/2jSgo1gbty","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":112,"FavoriteCount":64,"RawContent":null}]}},"RunOn":"2017-10-08T05:30:19.7707661Z","RunDurationInMilliseconds":6474}