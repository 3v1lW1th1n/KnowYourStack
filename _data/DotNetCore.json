{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":69,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":226,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":24,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"},{"Id":"6854176970","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:00:49","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11770 : Malformed Certificate can cause Denial of Service\" (#44) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11770 \r\n## Malformed Certificate can cause Denial of Service\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed certificate or other ASN.1 formatted data could lead to a denial of service via an infinite loop on Linux and macOS.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.8, 1.1.5 and 2.0.1. Developers are advised to update their .NET Core SDK to version 2.0.3 or 1.1.5.\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n.NET Core applications running on Windows are not affected by this vulnerability. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed blow and is running on Linux.\r\n\r\nPlatform  | Runtime Version | Fixed runtime version\r\n----------------|----------------| -------------------------\r\nLinux | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4<br />2.0.0 |  1.0.8<br />1.1.5<br />2.0.1\r\nmacOS | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4 |  1.0.8<br />1.1.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.7 or lower, or 1.1.2 or lower, or 2.0.0 is affected. The default version of the .NET core runtime can be listed by running `dotnet --info`, which should produce output in the form of \r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n\r\nAs this only displays the latest version of the runtime installed it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.8, 1.1.5 or 2.0.1 then any applications targeting .NET Core will be vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Version 1.1.5 will also install version 1.0.8 of the runtime.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Bachraty Gergely for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8585)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853282986","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:23:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/48","RelatedDescription":"Closed issue \"Reserved\" (#48) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853280485","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:35","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Closed issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853280272","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:33","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Opened issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853278942","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:20","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Closed issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6954925612","Type":"PullRequestEvent","CreatedAt":"2017-12-07T04:27:46","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15401","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to preview1-26006-09, preview1-26006-07, respectively (master)\" (#15401) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6954924610","Type":"IssuesEvent","CreatedAt":"2017-12-07T04:27:19","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15403","RelatedDescription":"Closed issue \"'dotnet run' is slow\" (#15403) at dotnet/coreclr","RelatedBody":"Hi,\r\n\r\nEven on a minimal console application, `dotnet run` takes about 4s on my MacBook Pro:\r\n\r\n```\r\n$ time dotnet run\r\n\r\nreal\t0m4.670s\r\nuser\t0m3.668s\r\nsys\t0m1.249s\r\n```\r\n\r\nIf I run the `.dll` from my project instead, it's much faster:\r\n\r\n```\r\n$ time dotnet bin/Debug/netcoreapp2.0/electronsharp-poc.dll\r\n\r\nreal\t0m0.070s\r\nuser\t0m0.039s\r\nsys\t0m0.027s\r\n```\r\n\r\nIs this expected, or is there any way to make it faster? The `.csproj` file is for a blank project I just created, I'll include it here for reference:\r\n\r\n```csproj\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```"},{"Id":"6954865763","Type":"PullRequestEvent","CreatedAt":"2017-12-07T04:01:19","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15340","RelatedDescription":"Merged pull request \"New intrinsic type recognition\" (#15340) at dotnet/coreclr","RelatedBody":"This PR extends the target of `IntrinsicAttribute` to `Struct`, which provides an efficient approach to search for hardware SIMD types.\r\n\r\nSolve the JIT throughput issue in https://github.com/dotnet/coreclr/pull/15244 "},{"Id":"6954842636","Type":"PullRequestEvent","CreatedAt":"2017-12-07T03:51:50","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15410","RelatedDescription":"Opened pull request \"Add optional integer offset to OwnedMemory Pin\" (#15410) at dotnet/coreclr","RelatedBody":"Resolves: https://github.com/dotnet/corefx/issues/25229\r\n\r\nRelated to https://github.com/dotnet/corefx/pull/25770"},{"Id":"6954750568","Type":"PullRequestEvent","CreatedAt":"2017-12-07T03:16:51","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15399","RelatedDescription":"Merged pull request \"Null Check added to GetFullPath Function in Unix\" (#15399) at dotnet/coreclr","RelatedBody":""},{"Id":"6954406984","Type":"IssuesEvent","CreatedAt":"2017-12-07T01:15:33","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15409","RelatedDescription":"Opened issue \"JIT: don't set morphed flag in gtFoldExpr and friends\" (#15409) at dotnet/coreclr","RelatedBody":"Re #15386. Having these utility methods set the morphed flag when morph is active makes it hard to use them to precondition the code. Instead defer the flag setting to morph proper."},{"Id":"6954345450","Type":"IssuesEvent","CreatedAt":"2017-12-07T00:54:44","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15408","RelatedDescription":"Opened issue \"[LSRA][RyuJIT] Consider merging allocating free & busy regs\" (#15408) at dotnet/coreclr","RelatedBody":"Currently, LSRA iterates over all the free registers, and then iterates again if it has to find a register to spill. It would probably be more efficient, as well as more effective, to combine these passes. In particular, it would avoid the situation where we make a bad register choice for a critical `Interval` simply because it is the only free register, when it may be better to spill a less important `Interval`.\r\nIn particular, it seems like this may be the best approach to address #13735."},{"Id":"6954224427","Type":"PullRequestEvent","CreatedAt":"2017-12-07T00:13:13","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15407","RelatedDescription":"Opened pull request \"Reduce arm/armlb/arm64 GCStress=3 and HeapVerify=1 jobs to weekly\" (#15407) at dotnet/coreclr","RelatedBody":"This will reduce our ARM64 hardware load."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6954924568","Type":"IssuesEvent","CreatedAt":"2017-12-07T04:27:19","Actor":"jkotas","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8178","RelatedDescription":"Opened issue \"'dotnet run' is slow\" (#8178) at dotnet/cli","RelatedBody":"_From @perlun on December 6, 2017 21:30_\n\nHi,\r\n\r\nEven on a minimal console application, `dotnet run` takes about 4s on my MacBook Pro:\r\n\r\n```\r\n$ time dotnet run\r\n\r\nreal\t0m4.670s\r\nuser\t0m3.668s\r\nsys\t0m1.249s\r\n```\r\n\r\nIf I run the `.dll` from my project instead, it's much faster:\r\n\r\n```\r\n$ time dotnet bin/Debug/netcoreapp2.0/electronsharp-poc.dll\r\n\r\nreal\t0m0.070s\r\nuser\t0m0.039s\r\nsys\t0m0.027s\r\n```\r\n\r\nIs this expected, or is there any way to make it faster? The `.csproj` file is for a blank project I just created, I'll include it here for reference:\r\n\r\n```csproj\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\n\n_Copied from original issue: dotnet/coreclr#15403_"},{"Id":"6954590549","Type":"IssuesEvent","CreatedAt":"2017-12-07T02:19:38","Actor":"qqbuby","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8177","RelatedDescription":"Opened issue \".NET Core SDK 2.1.2 \" (#8177) at dotnet/cli","RelatedBody":"Visual Studio 2017 15.5 has been released, and along with the `.NET Command Line Tools (2.1.2)` , however what I want to known where can we download  the standalone `.NET Command Line Tools (2.1.2)`  ?\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6953944146","Type":"IssuesEvent","CreatedAt":"2017-12-06T22:51:01","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8175","RelatedDescription":"Closed issue \"Dotnet should \"@\" names conflicting keywords in template\" (#8175) at dotnet/cli","RelatedBody":"dotnet new may end up creating invalid-code if its folder conflicts with a keyword\r\nExample:\r\n```csharp\r\nusing System;\r\n\r\nnamespace class\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Steps to reproduce\r\nmkdir class\r\ncd class\r\ndotnet new console\r\ndotnet build\r\n\r\n## Expected  behavior\r\ncompiles\r\n\r\n## Actual behavior\r\n```\r\nProgram.cs(3,11): error CS1001: Identifier expected [***/class/class.csproj]\r\nProgram.cs(3,11): error CS1514: { expected [***/class/class.csproj]\r\nProgram.cs(3,16): error CS1001: Identifier expected [***/class/class.csproj]\r\nProgram.cs(4,2): error CS1513: } expected [***/class/class.csproj]\r\n```\r\n## Environment data\r\n```dotnet --info\r\n.NET Command Line Tools (2.0.3)\r\n\r\nProduct Information:\r\n Version:            2.0.3\r\n Commit SHA-1 hash:  eb1d5ee318\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.3/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6953420126","Type":"PullRequestEvent","CreatedAt":"2017-12-06T20:58:00","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8125","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.6.0-preview1-4688 into cli\" (#8125) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.0-preview1-4688 into cli master branch\r\n\r\nCC: @livarcocc "},{"Id":"6953312592","Type":"IssuesEvent","CreatedAt":"2017-12-06T20:33:31","Actor":"hsorbo","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8175","RelatedDescription":"Opened issue \"dotnet new should escape keywords\" (#8175) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nmkdir class\r\ncd class\r\ndotnet new console\r\ndotnet build\r\n\r\n## Expected  behavior\r\ncompiles\r\n\r\n## Actual behavior\r\nProgram.cs(3,11): error CS1001: Identifier expected [***/class/class.csproj]\r\nProgram.cs(3,11): error CS1514: { expected [***/class/class.csproj]\r\nProgram.cs(3,16): error CS1001: Identifier expected [***/class/class.csproj]\r\nProgram.cs(4,2): error CS1513: } expected [***/class/class.csproj]\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6952357007","Type":"IssuesEvent","CreatedAt":"2017-12-06T17:10:49","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8174","RelatedDescription":"Closed issue \"dotnet new -i Can give unhelpful error messages\" (#8174) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n`dotnet new -i \"giraffe-template:*\"`\r\n\r\n## Expected  behavior\r\n\r\n> \"giraffe-template:*\" is not a valid template name\r\nOr some similar message\r\n\r\n## Actual behavior\r\n```\r\nLength cannot be less than zero.\r\nParameter name: length\r\n   at System.String.Substring(Int32 startIndex, Int32 length)\r\n   at Microsoft.TemplateEngine.Cli.Installer.InstallLocalPackages(IReadOnlyList`1 packageNames)\r\n   at Microsoft.TemplateEngine.Cli.Installer.InstallPackages(IEnumerable`1 installationRequests)\r\n   at Microsoft.TemplateEngine.Cli.New3Command.EnterInstallFlow()\r\n   at Microsoft.TemplateEngine.Cli.New3Command.EnterMaintenanceFlow()\r\n   at Microsoft.TemplateEngine.Cli.New3Command.<ExecuteAsync>d__59.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at Microsoft.TemplateEngine.Cli.CommandParsing.NewCommandInputCli.<>c__DisplayClass19_0.<<OnExecute>b__0>d.MoveNext()\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.0.3)\r\n\r\nProduct Information:\r\n Version:            2.0.3\r\n Commit SHA-1 hash:  12f0c7efcc\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.3\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6952203589","Type":"IssuesEvent","CreatedAt":"2017-12-06T16:42:57","Actor":"tyteen4a03","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8159","RelatedDescription":"Closed issue \"\"Could not load file or assembly 'System.Runtime, Version=4.2.0.0'\"\" (#8159) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. `dotnet new classlib --framework netcoreapp2.0`\r\n2. `dotnet publish`\r\n3. In PowerShell, `Import-Module` the DLL in bin/Debug/netcoreapp2.0/publish/\r\n\r\n## Expected behavior\r\nNo errors reported\r\n\r\n## Actual behavior\r\n\r\n```\r\nImport-Module : Could not load file or assembly 'System.Runtime, Version=4.2.0.0, Culture=neutral,\r\nPublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\nAt line:1 char:1\r\n+ Import-Module .\\Test.dll\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Import-Module], FileNotFoundException\r\n    + FullyQualifiedErrorId : System.IO.FileNotFoundException,Microsoft.PowerShell.Commands.ImportModuleCommand\r\n```\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.0.3)\r\n\r\nProduct Information:\r\n Version:            2.0.3\r\n Commit SHA-1 hash:  12f0c7efcc\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.3\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n\r\n(I realise that I should use `Add-Type`, but I'm using `Import-Module` because `Add-Type` makes the actual exception hard(er) to reach.)"},{"Id":"6950053531","Type":"IssuesEvent","CreatedAt":"2017-12-06T09:25:04","Actor":"BenHewins","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8174","RelatedDescription":"Opened issue \"dotnet new -i Can give unhelpful error messages\" (#8174) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n`dotnet new -i \"giraffe-template:*\"`\r\n\r\n## Expected  behavior\r\n\r\n> \"giraffe-template:*\" is not a valid template name\r\nOr some similar message\r\n\r\n## Actual behavior\r\n`Length cannot be less than zero.\r\nParameter name: length\r\n   at System.String.Substring(Int32 startIndex, Int32 length)\r\n   at Microsoft.TemplateEngine.Cli.Installer.InstallLocalPackages(IReadOnlyList`1 packageNames)\r\n   at Microsoft.TemplateEngine.Cli.Installer.InstallPackages(IEnumerable`1 installationRequests)\r\n   at Microsoft.TemplateEngine.Cli.New3Command.EnterInstallFlow()\r\n   at Microsoft.TemplateEngine.Cli.New3Command.EnterMaintenanceFlow()\r\n   at Microsoft.TemplateEngine.Cli.New3Command.<ExecuteAsync>d__59.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at Microsoft.TemplateEngine.Cli.CommandParsing.NewCommandInputCli.<>c__DisplayClass19_0.<<OnExecute>b__0>d.MoveNext()`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (2.0.3)\r\n\r\nProduct Information:\r\n Version:            2.0.3\r\n Commit SHA-1 hash:  12f0c7efcc\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.3\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6948639364","Type":"PullRequestEvent","CreatedAt":"2017-12-06T01:26:43","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/594","RelatedDescription":"Closed pull request \"Update versions.md\" (#594) at dotnet/standard","RelatedBody":"quick link to .NET Framework system requirements to easily check which OS is supported."},{"Id":"6947749059","Type":"PullRequestEvent","CreatedAt":"2017-12-05T21:24:29","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/596","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02304-01 (master)\" (#596) at dotnet/standard","RelatedBody":""},{"Id":"6941976997","Type":"PullRequestEvent","CreatedAt":"2017-12-04T22:00:44","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/596","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02304-01 (master)\" (#596) at dotnet/standard","RelatedBody":""},{"Id":"6934208277","Type":"IssuesEvent","CreatedAt":"2017-12-02T16:58:57","Actor":"jeremyVignelles","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/595","RelatedDescription":"Opened issue \"Add UnmanagedType.LPUTF8Str marshalling in .net standard\" (#595) at dotnet/standard","RelatedBody":"Hi,\r\nI'm currently writing a .net standard wrapper around libvlc, and I need to marshall strings from/to UTF-8.\r\n\r\nFor that, It would be really helpful to have the `UnmanagedType.LPUTF8Str` enumeration available.\r\n\r\nFrom https://apisof.net/catalog/System.Runtime.InteropServices.UnmanagedType.LPUTF8Str, it looks like everything is there in .net core and .net framework.\r\n\r\nWould it be possible to add that UTF8 support in the upcoming releases of .net standard?"},{"Id":"6932629749","Type":"PullRequestEvent","CreatedAt":"2017-12-01T22:41:14","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/593","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02301-01 (master)\" (#593) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6954913737","Type":"PullRequestEvent","CreatedAt":"2017-12-07T04:22:24","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25689","RelatedDescription":"Merged pull request \"Including pre-release versions of VS for builds\" (#25689) at dotnet/corefx","RelatedBody":"Fixes #25684"},{"Id":"6954913733","Type":"IssuesEvent","CreatedAt":"2017-12-07T04:22:23","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25684","RelatedDescription":"Closed issue \"build.cmd fails when only VS pre-release is installed\" (#25684) at dotnet/corefx","RelatedBody":"On this line\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/run.cmd#L24\r\n\r\nI only have VS2017 15.6 which is pre-release. `vswhere.exe` fails to list it as it now requires the `-prerelease` flag to list these versions. It then falls back to VS14 and fails to build binary assets.\r\n\r\n"},{"Id":"6954912376","Type":"PullRequestEvent","CreatedAt":"2017-12-07T04:21:48","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25758","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreSetup to preview1-26006-09, preview1-26006-07, preview1-26006-02, respectively (master)\" (#25758) at dotnet/corefx","RelatedBody":""},{"Id":"6954818735","Type":"PullRequestEvent","CreatedAt":"2017-12-07T03:42:26","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25770","RelatedDescription":"Opened pull request \"Change Pin to take an optional integer offset\" (#25770) at dotnet/corefx","RelatedBody":"Resolves: https://github.com/dotnet/corefx/issues/25229\r\n\r\nDepends on similar changes to be made in coreclr first for CI to pass - PR to come.\r\n\r\ncc @KrzysztofCwalina, @jkotas, @stephentoub, @pakrym, @davidfowl"},{"Id":"6954551059","Type":"IssuesEvent","CreatedAt":"2017-12-07T02:05:36","Actor":"karelz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25756","RelatedDescription":"Closed issue \"Task.WhenAll support for Tuples\" (#25756) at dotnet/corefx","RelatedBody":"`Task.WhenAll` should have a (set of) overload(s) to support returning the wrapped Tasks' results in a strongly typed `Tuple`.\r\n\r\nAn oversimplified implementation of this would look something like this\r\n```csharp\r\npublic static async Task<(T1, T2)> WhenAll<T1, T2>(Task<T1> task1, Task<T2> task2)\r\n{\r\n    return (await task1, await task2);\r\n}\r\n```\r\n... and the usage would look something like this\r\n```csharp\r\nvar (x, y) = await Task.WhenAll(AsyncMethod1(), AsyncMethod2());\r\n```\r\n\r\nI believe it would be relatively easy to implement but its value is huge as it allows to write simple but very efficient code that executes in parallel. \r\n\r\nThink about initialization logic when we have to gather information from different parts of the system, doing a bunch of `async` calls and either `await`-ing them one-by-one or collect the `Task`s, throw them in a `Task.WhenAll` and then extract the `Result`s. \r\n\r\nWith `Tuple` being supported on a language level with decomposition, I think this would be a logical addition to the `Task` library."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6954924216","Type":"IssuesEvent","CreatedAt":"2017-12-07T04:27:10","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23545","RelatedDescription":"Closed issue \"SemanticModel.GetTypeInfo().Type is null for array initializers without \" (#23545) at dotnet/roslyn","RelatedBody":"**Version Used**: latest\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\nbyte[] arr = { };\r\n```\r\n\r\n1. Find the `InitializerExpression` node correspoding to `{ }`.\r\n2. Evaluate `semanticModel.GetTypeInfo(node, ct).Type` with this node.\r\n\r\n**Expected Behavior**: Returns an `ITypeSymbol` corresponding to `System.Byte[]`.\r\n\r\n**Actual Behavior**: Returns `null`. However, `ConvertedType` is `System.Byte[]`. Is this intentional behavior?\r\n\r\nFiled on request of @mavasani, https://github.com/dotnet/roslyn-analyzers/pull/1339#issuecomment-347002451"},{"Id":"6954791074","Type":"PullRequestEvent","CreatedAt":"2017-12-07T03:31:45","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23630","RelatedDescription":"Opened pull request \"Separate debugging workspace service and EnC service\" (#23630) at dotnet/roslyn","RelatedBody":"<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"6954453106","Type":"PullRequestEvent","CreatedAt":"2017-12-07T01:31:17","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23629","RelatedDescription":"Opened pull request \"Forbid 'default' as a case constant or a pattern.\" (#23629) at dotnet/roslyn","RelatedBody":"Has been reviewed by LDM and compat council.\r\n\r\n### Customer scenario\r\n\r\nThe C# language design team wants to forbid the use of a default expression `default` (without the type between parens) as a constant pattern for pattern-matching, to make room for evolution of that feature in C# 8.0. We are treating this as a bug fix against the `default` literal feature that was introduced in C# 7.1, and as such we want to get the change in as soon as possible.\r\n\r\n### Bugs this fixes\r\n\r\nFixes #23499\r\n\r\n### Workarounds, if any\r\n\r\nN/A\r\n\r\n### Risk\r\n\r\nLow, though there is a slight compat risk if people have already written code like `case default:`. We think that is unlikely, as it produced a warning before.\r\n\r\n### Performance impact\r\n\r\nOnly trivial additional complexity in the compiler.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nN/A\r\n\r\n### Root cause analysis\r\n\r\nWe did not predict the future well enough. 😉 \r\n\r\n### How was the bug found?\r\n\r\nWe discovered this while designing recursive patterns.\r\n\r\n### Test documentation updated?\r\n\r\nN/A\r\n\r\n@dotnet/roslyn-compiler @jcouv Please review for 15.6\r\n"},{"Id":"6954326257","Type":"IssuesEvent","CreatedAt":"2017-12-07T00:48:03","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23628","RelatedDescription":"Opened issue \"OOM while workign in Roslyn.sln\" (#23628) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\n15.6.0 P1 27205.0.d15.6\r\n\r\n**Crash dump**:\r\n\r\n%internal_share%\r\n\r\n"},{"Id":"6954325084","Type":"IssuesEvent","CreatedAt":"2017-12-07T00:47:37","Actor":"kentcb","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23609","RelatedDescription":"Closed issue \"Cannot build on Mac\" (#23609) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\n2.6.0-beta1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Consume the 2.6.0-beta1 analyzers from a netstandard library\r\n2. Try to build the library on Mac \r\n\r\n**Expected Behavior**:\r\n\r\nIt builds.\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\nCSC error CS8032: An instance of analyzer Microsoft.NetCore.Analyzers.Runtime.TestForNaNCorrectlyAnalyzer cannot be created from /Users/vagrant/.nuget/packages/microsoft.netcore.analyzers/2.6.0-beta1/analyzers/dotnet/cs/Microsoft.NetCore.Analyzers.dll : Could not load type of field 'Microsoft.NetCore.Analyzers.Runtime.TestForNaNCorrectlyAnalyzer:_comparisonOperators' (5) due to: Could not resolve type with token 0100008c (from typeref, class/assembly Microsoft.CodeAnalysis.Operations.BinaryOperatorKind, Microsoft.CodeAnalysis, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35) assembly:Microsoft.CodeAnalysis, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35 type:Microsoft.CodeAnalysis.Operations.BinaryOperatorKind member:<none>. [/Users/vagrant/git/Src/Utility/Utility.csproj]\r\n```"},{"Id":"6954323403","Type":"IssuesEvent","CreatedAt":"2017-12-07T00:47:00","Actor":"kentcb","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23601","RelatedDescription":"Closed issue \"CA1507 has faulty heuristic\" (#23601) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\n2.6.0-beta1 running in VS 15.5.\r\n\r\n**Steps to Reproduce**:\r\n\r\nThis code:\r\n```C#\r\npublic JourneyMode? JourneyMode\r\n{\r\n    get => this.journeyMode;\r\n    set => this.RaiseAndSetIfChanged(ref this.journeyMode, value);\r\n}\r\n```\r\n\r\nTriggers this warning:\r\n```\r\nUse nameof in place of string literal 'JourneyMode'\r\n```\r\n\r\nApplying the faulty fix results in this (invalid) code:\r\n\r\n```C#\r\npublic JourneyMode? JourneyMode\r\n{\r\n    get => this.journeyMode;\r\n    set => nameof(@this);\r\n}\r\n```\r\n\r\nIt seems to stem from the fact that `RaiseAndSetIfChanged` leverages the `[CallerMemberName]` attribute to gain access to the caller's name.\r\n\r\n**Expected Behavior**:\r\n\r\nNo warning triggered.\r\n\r\n**Actual Behavior**:\r\n```\r\nUse nameof in place of string literal 'Xxx'\r\n```"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6953933458","Type":"PullRequestEvent","CreatedAt":"2017-12-06T22:48:22","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5073","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5073) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6953820158","Type":"PullRequestEvent","CreatedAt":"2017-12-06T22:23:56","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5073","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5073) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6951403813","Type":"PullRequestEvent","CreatedAt":"2017-12-06T14:22:39","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5072","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5072) at dotnet/corert","RelatedBody":""},{"Id":"6951401983","Type":"PullRequestEvent","CreatedAt":"2017-12-06T14:22:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5072","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5072) at dotnet/corert","RelatedBody":""},{"Id":"6948415091","Type":"PullRequestEvent","CreatedAt":"2017-12-06T00:12:26","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5071","RelatedDescription":"Merged pull request \"Delete unnecessary whitespace\" (#5071) at dotnet/corert","RelatedBody":""},{"Id":"6948164411","Type":"PullRequestEvent","CreatedAt":"2017-12-05T23:00:13","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5071","RelatedDescription":"Opened pull request \"Delete unnecessary whitespace\" (#5071) at dotnet/corert","RelatedBody":""},{"Id":"6947801190","Type":"PullRequestEvent","CreatedAt":"2017-12-05T21:36:02","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5070","RelatedDescription":"Merged pull request \"Fix for non-Windows package publishing\" (#5070) at dotnet/corert","RelatedBody":"Fixes an issue which is causing Linux and Mac package builds to break.\r\n\r\nAs we're not creating the same .pdbs on all platforms, building packages on Linux and Mac would break with a \"File Not Found\". The workaround isn't necessary outside of Windows. \r\n@jkotas @MichalStrehovsky "}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6954462936","Type":"IssuesEvent","CreatedAt":"2017-12-07T01:34:38","Actor":"yyjdelete","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1801","RelatedDescription":"Opened issue \"`dotnet pack` product broken .nupkg with the latest daily build(2.2.0-preview1)\" (#1801) at dotnet/sdk","RelatedBody":"Test with dotnet sdk `2.2.0-preview1-007736`/7622/7460, Windows 10 x64(17064).\r\nAnd `2.1.1` in VS15.5preview5 works well.\r\n\r\n# Step:\r\n1. Install the latest daily build of sdk\r\n2. `dotnet new classlib`\r\n3. `dotnet pack`\r\n4. Open the output .nupkg with `NuGet Package Explorer` or some zip manager( and try unpack it), and get an error.\r\n5. Found the `.nuspec` file in the `nupkg` has wrong CRC(but the packed data is right)"},{"Id":"6953406658","Type":"PullRequestEvent","CreatedAt":"2017-12-06T20:54:57","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1800","RelatedDescription":"Opened pull request \"Merge remote-tracking branch 'origin/release/2.1' \" (#1800) at dotnet/sdk","RelatedBody":""},{"Id":"6950710871","Type":"IssuesEvent","CreatedAt":"2017-12-06T11:50:55","Actor":"nil4","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1799","RelatedDescription":"Opened issue \"Where is the SDK 2.1.2 installer? (VS 15.5 includes it)\" (#1799) at dotnet/sdk","RelatedBody":"Upgrading Visual Studio 2017 to [version 15.5](https://blogs.msdn.microsoft.com/visualstudio/2017/12/04/visual-studio-2017-version-15-5-visual-studio-for-mac-released/) brings SDK version 2.1.2:\r\n\r\n```cmd\r\n> dotnet --version\r\n2.1.2\r\n\r\n> dotnet --info\r\n.NET Command Line Tools (2.1.2)\r\n\r\nProduct Information:\r\n Version:            2.1.2\r\n Commit SHA-1 hash:  5695315371\r\n\r\nRuntime Environment:\r\n [..snip..]\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n```\r\n\r\nTo upgrade build agents to the same SDK version, I searched [.NET Downloads](https://www.microsoft.com/net/download/windows) and [.NET Core downloads archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md), and the latest available version is 2.0.3, with SDK 2.0.3. \r\n\r\nWhere is the SDK v2.1.2 installer?"},{"Id":"6949722956","Type":"PullRequestEvent","CreatedAt":"2017-12-06T08:00:44","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1798","RelatedDescription":"Opened pull request \"Merge release/15.5 to master\" (#1798) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171206-080044\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171206-080044 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6949722871","Type":"PullRequestEvent","CreatedAt":"2017-12-06T08:00:43","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1797","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/15.5\" (#1797) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/15.5.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/15.5-20171206-080042\ngit reset --hard upstream/release/15.5\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/15.5-20171206-080042 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6948339479","Type":"PullRequestEvent","CreatedAt":"2017-12-05T23:49:02","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1795","RelatedDescription":"Merged pull request \"Merge remote-tracking branch 'dotnet/release/2.0.0' into release/2.1.x \" (#1795) at dotnet/sdk","RelatedBody":""},{"Id":"6948111554","Type":"PullRequestEvent","CreatedAt":"2017-12-05T22:46:31","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1796","RelatedDescription":"Opened pull request \"First draft enabling performance tests...\" (#1796) at dotnet/sdk","RelatedBody":""},{"Id":"6946946230","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:32:56","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1795","RelatedDescription":"Opened pull request \"Merge remote-tracking branch 'dotnet/release/2.0.0' into release/2.1.x \" (#1795) at dotnet/sdk","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"935927507911524352","CreatedAt":"2017-11-29T17:44:41+00:00","UserScreenname":"dotnet","Text":"Who doesn’t? Purple. All. The. Things. https://t.co/65KzPWuvbK","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":30,"FavoriteCount":4,"RawContent":null},{"Id":"933058673206730752","CreatedAt":"2017-11-21T19:44:57+00:00","UserScreenname":"dotnet","Text":".NET Core Alpine Image Ready for Testing https://t.co/SsQtOGuAFD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":213,"FavoriteCount":155,"RawContent":null},{"Id":"932677600715071488","CreatedAt":"2017-11-20T18:30:42+00:00","UserScreenname":"dotnet","Text":"Looking to migrate your existing .NET apps to the cloud but need our help? Fill out this survey and let us know: https://t.co/g6xbbWkX93","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":15,"RawContent":null}]}},"RunOn":"2017-12-07T05:30:20.4308928Z","RunDurationInMilliseconds":7860}