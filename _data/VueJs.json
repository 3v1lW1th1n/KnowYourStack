{"Data":{"Vue":{"Events":[{"Id":"6974936690","Type":"PullRequestEvent","CreatedAt":"2017-12-12T03:43:07","Actor":"felixbuenemann","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/pull/7224","RelatedDescription":"Opened pull request \"fix(#7223): fix double escaping of ssrNode attribute values\" (#7224) at vuejs/vue","RelatedBody":"This fixes a double escaping of attribute values in the SSR optimizing\r\ncompiler, because literal attribute values get escaped early during the\r\ncall to `addAttr` inside `processAttrs` before it is known, if this\r\nattribute will be serialized to an _ssrNode string template.\r\n\r\nLater on the _ssrNode string template gets escaped again to preserve\r\nwhitespace and this causes double escaping of the whitespace inside the\r\nattribute value.\r\n\r\nThis approach fixes the problem by undoing the escaping by parsing the\r\nattribute value JSON in `genAttrSegment`, which is the easiest fix to\r\nthe problem, but probably not the best.\r\n\r\nThis fixes #7223 at least for the cases where I encountered the problem.\r\n\r\nSee #7223 for an in-depth description of the problem and a test-case.\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#development-setup\r\n- [ ] New/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n\r\nI would love to add a breaking test, that shows that the fix is working, but I'm not sure were to add it with the large test suite, so some advise on that would be appreciated."}],"ResultType":"GitHubEvent"},"Router":{"Events":[{"Id":"6970307489","Type":"IssuesEvent","CreatedAt":"2017-12-11T09:51:07","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1934","RelatedDescription":"Closed issue \"Why is route.props updated with a delay?\" (#1934) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/k6qxo3z3](https://codesandbox.io/s/k6qxo3z3)\r\n\r\n### Steps to reproduce\r\nset to route `props: route => ({ ..route.query })`\r\ntry change props via router.push()\r\n\r\n### What is expected?\r\nI expect to see that if the query changes, then the props will change immediately.\r\n\r\n### What is actually happening?\r\nFirst, the query changes, and then the route props changes after nextTick\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6970235912","Type":"IssuesEvent","CreatedAt":"2017-12-11T09:35:33","Actor":"edDimensi","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1934","RelatedDescription":"Opened issue \"Why is route.props updated with a delay?\" (#1934) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/k6qxo3z3](https://codesandbox.io/s/k6qxo3z3)\r\n\r\n### Steps to reproduce\r\nset to route `props: route => ({ ..route.query })`\r\ntry change props via router.push()\r\n\r\n### What is expected?\r\nI expect to see that if the query changes, then the props will change immediately.\r\n\r\n### What is actually happening?\r\nFirst, the query changes, and then the route props changes after nextTick\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Vuex":{"Events":[{"Id":"6974515951","Type":"IssuesEvent","CreatedAt":"2017-12-12T01:12:34","Actor":"darrinmn9","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vuex/issues/953","RelatedDescription":"Closed issue \"Proposal: Add helpers mapStateTo{Mutation/Action} for improved form handling\" (#953) at vuejs/vuex","RelatedBody":"### What problem does this feature solve?\r\nProvides seamless form handling integration between v-model and Vuex. This allows a user to easily create two-way computed properties for Vuex object properties as outlined at the bottom of https://vuex.vuejs.org/en/forms.html. This removes alot of the verbosity of creating two-way computed properties, and allows an easier transition if someone is refactoring a component written with local Vue `data`  ` v-model`, to Vuex.\r\n\r\n(apologies ahead of time if my variable names are poorly chosen)\r\n\r\n### What does the proposed API look like?\r\ntemplate:\r\n\r\n`<input v-model=\"firstName\">`\r\n\r\n`<input v-model=\"lastName\">`\r\n\r\n\r\n```javascript\r\ncomputed: {\r\n   ...mapState('user', ['profile']),\r\n   ...mapStateToMutation('user', 'updateProfile', this.profile)\r\n}\r\n```\r\nthe specified mutation `updateProfile` will receive a payload `{property, value}` anytime the setter is called.\r\n\r\npseudo implementation details:\r\n```javascript\r\nfunction mapStateToMutation(namespace, mutationName, vuexObject){\r\n  const twoWayComputed = {};\r\n  const properties = /* all vuexObject own properties */\r\n  \r\n  properties.forEach(function(property) {\r\n    twoWayComputed[property] = {\r\n      get() {\r\n        return vuexObject[property]\r\n      },\r\n      set(value) {\r\n        this.$store.commit(`${nameSpace}/${mutationName}`, {property, value})\r\n      }\r\n    }\r\n  })\r\n  \r\n  return twoWayComputed\r\n}\r\n\r\n```\r\n\r\nThis similar structure could be used for an action as well, incase a user wanted to perform async operations on update of a property. And going further, the api could be extended to allow custom get/set functions to be defined by the user.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6971797335","Type":"IssuesEvent","CreatedAt":"2017-12-11T15:08:23","Actor":"etki","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vuex/issues/1087","RelatedDescription":"Opened issue \"Proposal: Component-like methods\" (#1087) at vuejs/vuex","RelatedBody":"### What problem does this feature solve?\r\nCurrently, Vuex allows to have set of custom getters which act as computed properties for components, but doesn't have anything like component methods. While this may seem to contradict with some of Vuex principles (methods usually imply some kind of action, which in turn is implied to be in mutations/actions), it doesn't necessarily do so: just like getters, there is need for some helper computational functionality that takes some arguments. Imagine that i have application that may have several modes turned on and i need to check if some specific mode is set. If i would have something like `.hasMode(mode)` method, it would be a breeze.\r\n\r\n### What does the proposed API look like?\r\n```js\r\n{\r\n  methods: {\r\n     hasMode (state, payload, rootState) {\r\n        return state.modes.indexOf(payload) > -1\r\n     }\r\n  }\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"}},"RunOn":"2017-12-12T05:30:37.9495352Z","RunDurationInMilliseconds":2028}