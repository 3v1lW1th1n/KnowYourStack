{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin.Forms 3.5: A Little Bindable Love","PublishedOn":"2019-01-11T18:06:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post contributed by Andrei Nitescu, a mobile developer since 2013 and frequent contributor to Xamarin.Forms. He shares about his experiences with other developers on his blog, and...","Href":"https://blog.xamarin.com/xamarin-forms-3-5-a-little-bindable-love/","RawContent":null},{"Title":"Hackathon Superweapon: F# and Fabulous","PublishedOn":"2019-01-10T20:27:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Recently, I participated in Hack for the Sea, a weekend devoted to applying tech to marine conservation. One of our local challenges was a “cross-platform mobile app for reporting marine debris.” A...","Href":"https://blog.xamarin.com/hackathon-superweapon-f-and-fabulous/","RawContent":null},{"Title":"Xamarin and .NET Community Events in January","PublishedOn":"2019-01-02T19:00:12+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It&#8217;s a new year with tons of new and awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page....","Href":"https://blog.xamarin.com/xamarin-and-net-community-events-in-january/","RawContent":null},{"Title":"Accessing Native Features the Cross-Platform Way with Xamarin.Essentials","PublishedOn":"2018-12-19T22:46:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Every mobile application requires access to native functionality. When developing native mobile apps with Xamarin, developers are able to integrate deeply into iOS and Android since Xamarin exposes...","Href":"https://blog.xamarin.com/accessing-native-features-xamarin-essentials/","RawContent":null},{"Title":"November 2018 Xamarin and Azure Office Hours Recap","PublishedOn":"2018-12-14T21:08:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"I ❤️ every single developer. And I want to hear your stories. I want to hear about your successes, your &#8220;not-so-much&#8221; successes, and any questions or concerns you may have about our...","Href":"https://blog.xamarin.com/office-hours-november-2018-xamarin-azure/","RawContent":null},{"Title":"Xamarin.Forms 4.0 Feature Preview: An Entirely New Point of (Collection)View","PublishedOn":"2018-12-07T19:00:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As part of the upcoming Xamarin.Forms 4.0 release, we are implementing the all new CollectionView control. The CollectionView is intended to be a successor to the ListView, improving upon its design...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-feature-preview-an-entirely-new-point-of-collectionview/","RawContent":null},{"Title":"The Future of Mobile Development: Xamarin.Forms 4.0 Preview","PublishedOn":"2018-12-05T19:59:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Yesterday at Microsoft Connect(); 2018 we announced our plans for Xamarin.Forms 4.0 and shared a public preview. Let&#8217;s now take a deeper look at the big changes, starting with Xamarin.Forms...","Href":"https://blog.xamarin.com/xamarin-forms-4-0-preview/","RawContent":null},{"Title":"Connect(); 2018 Xamarin Announcements","PublishedOn":"2018-12-04T16:21:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, at Microsoft Connect(); 2018, we have several exciting announcements about brand new capabilities and foundational improvements in the Xamarin platform driven by your generous feedback....","Href":"https://blog.xamarin.com/connect-2018-xamarin-announcements/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in December","PublishedOn":"2018-12-02T20:46:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Here are just a few of the awesome community-run events scheduled this month. Get the full list of mobile developer engagements happening all over the world through our Community page. There you will...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-december/","RawContent":null},{"Title":"Multi-targeting with Android Support Library v28","PublishedOn":"2018-11-28T18:09:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting with Xamarin’s Android Support Library version 28, we are introducing multi-targeting. This includes assemblies for older support library versions when your application&#8217;s...","Href":"https://blog.xamarin.com/multi-targeting-with-android-support-library-v28/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8892053326","Type":"PullRequestEvent","CreatedAt":"2019-01-15T19:07:11","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2611","RelatedDescription":"Merged pull request \"[C++ification] Glue and utilities code changes\" (#2611) at xamarin/xamarin-android","RelatedBody":" * Use `new/delete/delete[]` more\r\n * Avoid calling the `printf` family of functions in favor of new, template, `string_concat` in the `Utils` class. When `sprintf` is used to concatenate just strings we can do better by not calling the C varargs functions and generate very efficient code.\r\n * Replace C `strdup` calls with our, based on `new`, strdup implementation"},{"Id":"8891264349","Type":"PullRequestEvent","CreatedAt":"2019-01-15T16:57:42","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2349","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Add warning & error codes to GenerateJavaStubs\" (#2349) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/1560\r\n\r\nBackground discussion about the new wording for this particular warning\r\nand error:\r\n- https://github.com/xamarin/xamarin-android/pull/2258#discussion_r222789036\r\n- https://github.com/xamarin/xamarin-android/pull/2258#discussion_r222798838\r\n\r\nThe new wording aims to be more actionable.  It is also more compact\r\nthan the old wording when there are multiple conflicts.\r\n\r\nA possible future enhancement could be to move the warning into the\r\n`ConvertCustomView` task so that it only appears when a managed type\r\nname from an Android resource file matches more than one line in the\r\nacw-map.  That way, if a user wants to solve the issue by using\r\n`[Register]` attributes or assembly-qualified type names rather than\r\nrenaming the managed types, the build process will automatically stop\r\nshowing the warning.\r\n\r\nThis pull request also includes a fix from Jonathan Peppers for\r\n`GenerateJavaStubs`.  That fix is not strictly required for the changes\r\nto the warning and error, but it is included here because it touches\r\nneighboring source code.\r\nFixes: #2266"},{"Id":"8891264323","Type":"IssuesEvent","CreatedAt":"2019-01-15T16:57:41","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2266","RelatedDescription":"Closed issue \"Duplicate Java Callable Wrapper names are allowed when they shouldn't be.\" (#2266) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create a solution consisting of three projects: `App.csproj`, `Lib1.csproj`, `Lib2.csproj`, in which `App.csproj` references *both* `Lib1.csproj` and `Lib2.csproj`.\r\n2. Add the following file to both `Lib1.csproj` and `Lib2.csproj`:\r\n\r\n    ```csharp\r\n    using System;\r\n    using Android.Runtime;\r\n    \r\n    namespace Lib1\r\n    {\r\n      [Register(\"examplelib.EmptyClass\")]\r\n      public class EmptyClass : Java.Lang.Object\r\n      {\r\n      }\r\n    }\r\n    ```\r\n3. Create an `.apk`: `msbuild /t:SignAndroidPackage App.csproj`\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nIt should error out, as we have two assemblies which will each generate an `example lib.EmptyClass` Java type.\r\n\r\n### Actual Behavior\r\n\r\nWarnings:\r\n\r\n```\r\nwarning : Duplicate managed type found! Mappings between managed types and Java types must be unique. First Type: 'Lib1.EmptyClass, Lib1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'; Second Type: 'Lib1.EmptyClass, Lib2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.\r\nwarning : References to the type 'Lib1.EmptyClass' will refer to 'Lib1.EmptyClass, Lib1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.\r\n```\r\n\r\n### Discussion:\r\n\r\nThe warning is correct, in that it should be emitted.  However, *because* we emit that warning, we don't check for duplicate Java Callable Wrapper names.  The problem is here: \r\n\r\nhttps://github.com/xamarin/xamarin-android/blob/5c80b4b260981cf16d74cdcbc8dfc4215c01ec83/src/Xamarin.Android.Build.Tasks/Tasks/GenerateJavaStubs.cs#L188\r\n"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8894314201","Type":"IssuesEvent","CreatedAt":"2019-01-16T03:27:56","Actor":"alexanderzuban","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4995","RelatedDescription":"Opened issue \"[Enhancement] Android NavigationPageRenderer navigation behaviour\" (#4995) at xamarin/Xamarin.Forms","RelatedBody":"## Summary\r\nWill be great to change Xamarin.Forms.Platform.Android.AppCompat.NavigationPageRenderer OnClick handlers for the back button to be consistent with the hardware button. There are some \"hacks\" in forums with ways to customize back button behavior, and it seems they don't work with the master detail page.\r\n \r\n## API Changes\r\n\r\nChange \r\n \r\n`\r\npublic void OnClick(AView v)\r\n\t\t{\r\n\t\t\tElement?.PopAsync();\r\n\t\t}\r\n`\r\nand \r\n`\r\npublic void OnClick(AView v)\r\n\t\t\t{\r\n\t\t\t\t_element?.PopAsync();\r\n\t\t\t}\r\n`\r\nwith the Element?.OnBackButtonPressed(); \r\n\r\n\r\nFrom source code default implementation if the OnBackButtonPressed does PopAsync but this will give a way to customize back behaviour in a unify way without ugly hacks. "},{"Id":"8893413152","Type":"IssuesEvent","CreatedAt":"2019-01-15T23:18:43","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3787","RelatedDescription":"Closed issue \"[Android] Xamarin Forms currently doesn't work on API 15\" (#3787) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nControl.TrackDrawable, Control.LineSpacingMultiplier, and _view.LineSpacingExtra\r\nAre only available on API 16\r\n\r\n### Steps to Reproduce\r\n1.  Run the Xamarin Forms Control Gallery\r\n\r\n### Expected Behavior\r\nControl Gallery should run on API 15\r\n\r\n### Actual Behavior\r\nControl Gallery crashing on API 15\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.2\r\n- Last known good version: 3.0\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - Android: 9.0\r\n\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8894392112","Type":"PullRequestEvent","CreatedAt":"2019-01-16T03:52:03","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5417","RelatedDescription":"Opened pull request \"Clarify usage of `[NullAllowed]` in our bindings\" (#5417) at xamarin/xamarin-macios","RelatedBody":"First part to fix https://github.com/xamarin/xamarin-macios/issues/5416\n\nWe currently allow the `[NullAllowed]` attribute anywhere an attribute\ncan be used on metadata (i.e. no `AttributeUsage` is used).\n\nHowever the generator only process the attribute in some specific cases,\n*silently* ignoring others. This leads to situations such as\n\n```csharp\n[NullAllowed, Export (\"setInputHandler:\")]\nvoid SetInputHandler (AUInputHandler handler);\n```\n\nwhere a `null` argument will throw an `ArgumentNullException` because\n`[NullAllowed]` does not mean anything on a method declaration.\n\nTo avoid such confusion `[NullAllowed]` should be added on each parameter\n(even if all of them requires it) and if a `null` return value is\npossible then use `[return: NullAllowed]`.\n\nThis PR allows XI/XM bindings to be built, without error, when this\npatch is applied.\n\n```diff\ndiff --git a/src/generator-attributes.cs b/src/generator-attributes.cs\nindex 965d8469..77162253 100644\n--- a/src/generator-attributes.cs\n+++ b/src/generator-attributes.cs\n@@ -250,6 +250,7 @@ public class IsThreadStaticAttribute : Attribute {\n\n // When applied to a member, generates the member as static\n // and passes IntPtr.Zero or null if the parameter is null\n+[AttributeUsage (AttributeTargets.Property | AttributeTargets.ReturnValue | AttributeTargets.Parameter)]\n public class NullAllowedAttribute : Attribute {\n        public NullAllowedAttribute () {}\n }\n```\n\nNote that it's unlikely we'll apply this patch _as-is_ to avoid breaking\nexisting projects. A better approach (in a future PR) is to have the\ngenerator (instead of the C# compiler) issue a warning (instead of an\nerror) when a `NullAllowed` is ignored."},{"Id":"8892970249","Type":"IssuesEvent","CreatedAt":"2019-01-15T21:48:46","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5416","RelatedDescription":"Opened issue \"[NullAllowed] can be applied on methods leading to easy (review) mistakes\" (#5416) at xamarin/xamarin-macios","RelatedBody":"Right now this case is silently ignored (both by the compiler and by the generator) which can lead to mistakes that are easy to miss while reviewing bindings.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Apply diff\r\n\r\n```diff\r\ndiff --git a/src/generator-attributes.cs b/src/generator-attributes.cs\r\nindex 965d8469..77162253 100644\r\n--- a/src/generator-attributes.cs\r\n+++ b/src/generator-attributes.cs\r\n@@ -250,6 +250,7 @@ public class IsThreadStaticAttribute : Attribute {\r\n \r\n // When applied to a member, generates the member as static\r\n // and passes IntPtr.Zero or null if the parameter is null\r\n+[AttributeUsage (AttributeTargets.Property | AttributeTargets.ReturnValue | AttributeTargets.Parameter)]\r\n public class NullAllowedAttribute : Attribute {\r\n        public NullAllowedAttribute () {}\r\n }\r\n```\r\n\r\n2. Build\r\n\r\n### Expected Behavior\r\n\r\nno error\r\n\r\n### Actual Behavior\r\n\r\nMany errors\r\n\r\n### Environment\r\n\r\nmaster"},{"Id":"8892929044","Type":"PullRequestEvent","CreatedAt":"2019-01-15T21:41:11","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5415","RelatedDescription":"Closed pull request \"[generator] Flow the `[NullAllowed]` information when generating `_Extensions` methods. Fixes #5408\" (#5415) at xamarin/xamarin-macios","RelatedBody":"Otherwise we can end up without argument checks and de-reference null\narguments to get the `Handle` property.\n\nExample from #5403 binding original issue:\n\n```diff\ndiff --git a/src/appkit.cs b/src/appkit.cs\nindex daf22b75..48390cb8 100644\n--- a/src/appkit.cs\n+++ b/src/appkit.cs\n@@ -431,6 +431,7 @@ namespace AppKit {\n        interface NSAppearanceCustomization {\n\n                [Mac (10,9)]\n+               [NullAllowed]\n                [Export (\"appearance\", ArgumentSemantic.Strong)]\n                NSAppearance Appearance { get; set; }\n```\n\n```csharp\n\t\t[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]\n\t\tpublic static void SetAppearance (this INSAppearanceCustomization This, NSAppearance value)\n\t\t{\n\t\t\tglobal::AppKit.NSApplication.EnsureUIThread ();\n\t\t\tglobal::ObjCRuntime.Messaging.void_objc_msgSend_IntPtr (This.Handle, Selector.GetHandle (\"setAppearance:\"), value.Handle);\n\t\t}\n```\n\nReviewing requires checking the bot-generated \"Generator Diff\" too.\n\nTests to be added along the binding fix for #5403\n\nreference: https://github.com/xamarin/xamarin-macios/issues/5408"},{"Id":"8892732458","Type":"PullRequestEvent","CreatedAt":"2019-01-15T21:05:46","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5415","RelatedDescription":"Opened pull request \"[generator] Flow the `[NullAllowed]` information when generating `_Extensions` methods. Fixes #5408\" (#5415) at xamarin/xamarin-macios","RelatedBody":"Otherwise we can end up without argument checks and de-reference null\narguments to get the `Handle` property.\n\nExample from #5403 binding original issue:\n\n```diff\ndiff --git a/src/appkit.cs b/src/appkit.cs\nindex daf22b75..48390cb8 100644\n--- a/src/appkit.cs\n+++ b/src/appkit.cs\n@@ -431,6 +431,7 @@ namespace AppKit {\n        interface NSAppearanceCustomization {\n\n                [Mac (10,9)]\n+               [NullAllowed]\n                [Export (\"appearance\", ArgumentSemantic.Strong)]\n                NSAppearance Appearance { get; set; }\n```\n\n```csharp\n\t\t[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]\n\t\tpublic static void SetAppearance (this INSAppearanceCustomization This, NSAppearance value)\n\t\t{\n\t\t\tglobal::AppKit.NSApplication.EnsureUIThread ();\n\t\t\tglobal::ObjCRuntime.Messaging.void_objc_msgSend_IntPtr (This.Handle, Selector.GetHandle (\"setAppearance:\"), value.Handle);\n\t\t}\n```\n\nReviewing requires checking the bot-generated \"Generator Diff\" too.\n\nTests to be added along the binding fix for #5403\n\nreference: https://github.com/xamarin/xamarin-macios/issues/5408"},{"Id":"8892162690","Type":"IssuesEvent","CreatedAt":"2019-01-15T19:25:53","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5364","RelatedDescription":"Closed issue \"[interpreter]AVCustomEdit fails to launch with System.ArgumentOutOfRangeException\" (#5364) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Install Xamarin.iOS build from master branch, 12.7.0.30 (master): aa77c67) or latest Version: 12.7.0.35 (Visual Studio Enterprise), Hash: 327c0a8\r\n2. Build and run AVCustomEdit sample on a 64 bit device in debug mode.\r\n\r\n### Expected Behavior\r\nApp should build and launch successfully\r\n### Actual Behavior\r\nApp builds successfully but fails to launch with exception System.ArgumentOutOfRangeException\r\n### Environment\r\n```\r\n=== Visual Studio Enterprise 2017 for Mac (Preview) ===\r\n\r\nVersion 7.8 Preview (7.8 build 1487)\r\nInstallation UUID: fe2e3011-6fdf-476f-9a39-d7d6b435ddd1\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 5.6.0.1 (d16-0 / 2e9867a4)\r\n\r\n\tPackage version: 518000225\r\n\r\n=== Mono Framework MDK ===\r\n\r\nRuntime:\r\n\tMono 5.18.0.225 (2018-08/bac9fc1f889) (64-bit)\r\n\tPackage version: 518000225\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.8.0.5385\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Version: 2.1.2\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Version: 2.1.302\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.18.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Updater ===\r\n\r\nVersion: 11\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.1 (14460.46)\r\nBuild 10B61\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 5.2.1.12 (Visual Studio Enterprise)\r\nHash: 65ec520f\r\nBranch: \r\nBuild date: 2018-12-05 12:06:09-0500\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 12.7.0.35 (Visual Studio Enterprise)\r\nHash: 327c0a8d\r\nBranch: master\r\nBuild date: 2019-01-08 23:25:33-0800\r\n\r\n=== Xamarin.Android ===\r\n\r\nNot Installed\r\n\r\n=== Microsoft Mobile OpenJDK ===\r\n\r\nJava SDK: Not Found\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 7.8.1.0\r\nHash: 06ceaea1\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 708001487\r\nGit revision: 0311f28ad5352750c02c4854a36587e47f4806be\r\nBuild date: 2018-12-19 18:37:11+00\r\nBuild branch: release-7.8\r\nXamarin extensions: 1de2700808f1ef0e06199d64e043bc2ae523d700\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.14.1\r\nDarwin 18.2.0 Darwin Kernel Version 18.2.0\r\n    Fri Oct  5 19:41:49 PDT 2018\r\n    root:xnu-4903.221.2~2/RELEASE_X86_64 x86_64\r\n\r\n```\r\n\r\n### Build Logs\r\n\r\nBuild Log: https://gist.github.com/GouriKumari/58041ff294c74327d2212a2270ac59f3\r\nCrash Log: https://gist.github.com/GouriKumari/c405f340fb5aa6fd0764689ae991dd2a\r\nException Log: https://gist.github.com/GouriKumari/c5fe480825bb6267330ff82316a0d084\r\n\r\n### Example Project (If Possible)\r\nhttps://github.com/xamarin/ios-samples/tree/master/AVCustomEdit\r\n\r\n### Additional Info\r\nLaunches successfully with interpreter disabled."},{"Id":"8892145995","Type":"PullRequestEvent","CreatedAt":"2019-01-15T19:23:00","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5414","RelatedDescription":"Opened pull request \"[d16-0 P3] Merge pull request #5402 from migueldeicaza/fix-uigesturerecognizer-r…\" (#5414) at xamarin/xamarin-macios","RelatedBody":"…egression\r\n\r\n[UIKit] UIGestureRecognizer's custon OnDispose method needs to queue the actual operation on the main thread\r\n\r\n#5388"},{"Id":"8892103523","Type":"PullRequestEvent","CreatedAt":"2019-01-15T19:15:45","Actor":"migueldeicaza","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5402","RelatedDescription":"Merged pull request \"[UIKit] UIGestureRecognizer's custon OnDispose method needs to queue the actual operation on the main thread\" (#5402) at xamarin/xamarin-macios","RelatedBody":"Proposed fixed for:\r\n\r\nhttps://github.com/xamarin/xamarin-macios/issues/5388"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1083829954515750923","CreatedAt":"2019-01-11T20:56:12+00:00","UserScreenname":"xamarinhq","Text":"...just posted on the Xamarin Blog, Andrei Nitescu shares one of his contributions to Xamarin.Forms, the bindable l… https://t.co/rp3eVPLbYl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":99,"FavoriteCount":41,"RawContent":null},{"Id":"1083399709526503424","CreatedAt":"2019-01-10T16:26:34+00:00","UserScreenname":"xamarinhq","Text":"Our very first Mobile .NET #CommunityStandup will be live in about 30 minutes at 9am Pacific! @maddyleger1,… https://t.co/vmFHIKZTIt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":57,"FavoriteCount":19,"RawContent":null},{"Id":"1080559862642282502","CreatedAt":"2019-01-02T20:22:01+00:00","UserScreenname":"xamarinhq","Text":"It’s a new year with tons of new and awesome Xamarin and .NET Community events coming this month. Get the full list… https://t.co/ZOykEyCRBN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":59,"FavoriteCount":22,"RawContent":null},{"Id":"1075783769876033536","CreatedAt":"2018-12-20T16:03:32+00:00","UserScreenname":"xamarinhq","Text":"Introducing Xamarin.Essentials, a new library that abstracts native APIs into a set of cross-platform APIs giving y… https://t.co/EMM97iFY9o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":271,"FavoriteCount":119,"RawContent":null},{"Id":"1072256672498966533","CreatedAt":"2018-12-10T22:28:06+00:00","UserScreenname":"xamarinhq","Text":"CarouselView is Here! Xamarin.Forms 4.0 now includes an entirely new point of view. ...as part of the upcoming rele… https://t.co/Vh8UMRM4ez","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":153,"FavoriteCount":69,"RawContent":null},{"Id":"1070425707770195968","CreatedAt":"2018-12-05T21:12:30+00:00","UserScreenname":"xamarinhq","Text":"Yesterday at Microsoft Connect(); 2018 we announced our plans &amp; preview for Xamarin.Forms 4.0. This post will give… https://t.co/oNXLJGsrQ8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":144,"FavoriteCount":74,"RawContent":null},{"Id":"1070075277101944833","CreatedAt":"2018-12-04T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"Today, at #MSFTConnect 2018, we have several exciting announcements about brand new capabilities and foundational i… https://t.co/olEK9QjR1j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":54,"FavoriteCount":38,"RawContent":null},{"Id":"1069721699225088008","CreatedAt":"2018-12-03T22:35:02+00:00","UserScreenname":"xamarinhq","Text":"Here's what we have coming up this month for #Xamarin and #dotNET Developer Events in December:… https://t.co/oAMbLqXh9f","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":45,"FavoriteCount":18,"RawContent":null},{"Id":"1068601941339582469","CreatedAt":"2018-11-30T20:25:31+00:00","UserScreenname":"xamarinhq","Text":"Now announcing multi-targeting with Android Support Library v28. \n\n...but what is multi-targeting you ask? Well, no… https://t.co/oBJ1j9vP6P","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":53,"RawContent":null},{"Id":"1067915081495846913","CreatedAt":"2018-11-28T22:56:10+00:00","UserScreenname":"xamarinhq","Text":"The Xamarin #Android team has been working hard on improving Build Performance &amp; Reliability in both #VS2017 v15.9… https://t.co/c4iSbZJDy9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":82,"FavoriteCount":45,"RawContent":null},{"Id":"1063457672048058371","CreatedAt":"2018-11-16T15:44:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing the release of Xamarin.Forms 3.4.0 w/ even more bug fixes and another new highly requested feature, an I… https://t.co/EJadLHYi73","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":178,"FavoriteCount":105,"RawContent":null},{"Id":"1063145593562902528","CreatedAt":"2018-11-15T19:03:56+00:00","UserScreenname":"xamarinhq","Text":"Build and deploy #ethereum smart contracts using the new @trufflesuite extension for #VSCode from @MSFTBlockchain… https://t.co/nEbiFUYaM2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":37,"FavoriteCount":18,"RawContent":null},{"Id":"1062819180100100099","CreatedAt":"2018-11-14T21:26:53+00:00","UserScreenname":"xamarinhq","Text":"Want to get started w/ mobile dev using C# &amp; #Xamarin? We've got a Twitch Workshop for that.\n\nComing Friday, Nov 16… https://t.co/ce2vH9dC4t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":114,"FavoriteCount":61,"RawContent":null},{"Id":"1058039721652297729","CreatedAt":"2018-11-01T16:55:01+00:00","UserScreenname":"xamarinhq","Text":"Get all the links you need for the world-wide, community-run mobile dev engagements happening for the Xamarin &amp;… https://t.co/eiJXYtWfvG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":43,"FavoriteCount":26,"RawContent":null},{"Id":"1053027600086552576","CreatedAt":"2018-10-18T20:58:38+00:00","UserScreenname":"xamarinhq","Text":"TY2 you &amp; the Xamarin.Forms team we've filled in some of the features you’ve told us are important to building your… https://t.co/lwqRjrIFEi","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":31,"RawContent":null},{"Id":"1052217100041945088","CreatedAt":"2018-10-16T15:18:00+00:00","UserScreenname":"xamarinhq","Text":"A full day of community-driven sessions on cross-platform mobile application development with Xamarin, DevOps with… https://t.co/07SVz6rgLT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":53,"FavoriteCount":22,"RawContent":null},{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":54,"FavoriteCount":29,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":38,"RawContent":null}]}},"RunOn":"2019-01-16T05:30:58.4285188Z","RunDurationInMilliseconds":3119}