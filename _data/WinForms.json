{"Data":{"GitHub":{"Issues":[{"Id":"505929192","IsPullRequest":true,"CreatedAt":"2019-10-11T15:49:16","Actor":"hughbe","Number":"2075","RawContent":null,"Title":"Cleanup NMTOOLBARW/TBBUTTONINFOW/TBBUTTON","State":"open","Body":"## Proposed Changes\r\n- Cleanup NMTOOLBAR\r\n- Cleanup TBBUTTONINFOW\r\n- Cleanup TBBUTTON\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2075)","Url":"https://github.com/dotnet/winforms/pull/2075","RelatedDescription":"Open PR \"Cleanup NMTOOLBARW/TBBUTTONINFOW/TBBUTTON\" (#2075)"},{"Id":"505884509","IsPullRequest":true,"CreatedAt":"2019-10-11T14:24:50","Actor":"vladimir-krestov","Number":"2074","RawContent":null,"Title":"[Accessibility][ScreenReader]: Fixing tooltip text announcing by NVDA/Narrator","State":"open","Body":"<!-- Please read CONTRIBUTING.md before submitting a pull request -->\r\n\r\nFixes #2073\r\nOriginal bug: [987952](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/987952)\r\n\r\n## Proposed changes\r\n\r\n- Add AnnounceText method to raise UIA notification (ScreenReader says notification text) when a tooltip is shown\r\n- Add IToolTip interface and implement it to unite elements (Control, ToolStripItem, DataGridViewElement) which can have a tooltip (this is necessary to the correct, simple and short implementation of raising UIA notification.)\r\n\r\n> ScreenReader reads the tooltip text of elements of in turn.\r\n\r\n<!-- We are in TELL-MODE the following section must be completed -->\r\n\r\n## Customer Impact\r\n\r\n- A user can hear a text of a shown tooltip\r\n\r\n## Regression? \r\n\r\n- No\r\n\r\n## Risk\r\n\r\n- No\r\n\r\n<!-- end TELL-MODE -->\r\n\r\n\r\n## Screenshots <!-- Remove this section if PR does not change UI -->\r\n\r\n### Before\r\n![image](https://user-images.githubusercontent.com/49272759/66658882-11fce700-ec4b-11e9-95ab-769287de4313.png)\r\n\r\n<!-- TODO -->\r\n\r\n### After\r\n![image](https://user-images.githubusercontent.com/49272759/66658891-16c19b00-ec4b-11e9-91aa-47ad841fb406.png)\r\n\r\n![2](https://user-images.githubusercontent.com/49272759/66658939-2ccf5b80-ec4b-11e9-9cf2-8246ce386889.gif)\r\n\r\n<!-- TODO -->\r\n\r\n\r\n## Test methodology <!-- How did you ensure quality? -->\r\n\r\n- Manual UI testing\r\n\r\n\r\n## Accessibility testing  <!-- Remove this section if PR does not change UI -->\r\n\r\n- Using NVDA and Narrator\r\n<!--\r\n     Microsoft prioritizes making our products accessible. \r\n     WinForms has a key role in allowing developers to create accessible apps. \r\n     \r\n     When submitting a change which impacts UI in any way, including adding new UI or\r\n     modifying existing controls the developer needs to run the Accessibility Insights\r\n     tool (https://accessibilityinsights.io/) and verify that there are no changes or\r\n     regressions. \r\n     \r\n     The developer should run the Fast Pass over the impacted control(s) and provide\r\n     a snapshot of the passing results along with before/after snapshots of the UI.\r\n     More info: (https://accessibilityinsights.io/docs/en/web/getstarted/fastpass)\r\n  -->\r\n\r\n\r\n \r\n\r\n## Test environment(s) <!-- Remove any that don't apply -->\r\n\r\n- .NET Core Version: 3.1.0-preview1.19458.7\r\n- Microsoft Windows [Version 10.0.18362.356]\r\n\r\n<!-- Mention language, UI scaling, or anything else that might be relevant -->\r\n\r\n\r\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2074)","Url":"https://github.com/dotnet/winforms/pull/2074","RelatedDescription":"Open PR \"[Accessibility][ScreenReader]: Fixing tooltip text announcing by NVDA/Narrator\" (#2074)"},{"Id":"505868040","IsPullRequest":false,"CreatedAt":"2019-10-11T13:55:14","Actor":"vladimir-krestov","Number":"2073","RawContent":null,"Title":"[Accessibility][ScreenReader]: NVDA/Narrator are not reading the ToolTip message","State":"open","Body":"* .NET Core Version: 3.1.0-preview1.19458.7\r\n* Have you experienced this same bug with .NET Framework?: Yes\r\n\r\n**Original bug:**\r\n- [Bug 987952](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/987952)\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\n- A user can't hear a tooltip text using NVDA/Narrator\r\n\r\n**Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n- NVDA/Narrator don't read a message from shown ToolTip\r\n\r\n**Expected behavior:**\r\n- NVDA/Narrator should announce ToolTip text\r\n![image](https://user-images.githubusercontent.com/49272759/66656755-453d7700-ec47-11e9-9ed1-9cb8c857e030.png)\r\n\r\n\r\n**Minimal repro:**\r\n- Create .Net Core app\r\n- Add some control and ToolTip\r\n- Connect the control with the ToolTip\r\n- Run the test app and NVDA/Narrator\r\n- Listen what NVDA/Narrator say\r\n\r\n**Test app:**\r\n- [[Core][NVDA]ToolTipError.zip](https://github.com/dotnet/winforms/files/3717915/Core.NVDA.ToolTipError.zip)\r\n\r\n","Url":"https://github.com/dotnet/winforms/issues/2073","RelatedDescription":"Open issue \"[Accessibility][ScreenReader]: NVDA/Narrator are not reading the ToolTip message\" (#2073)"},{"Id":"505820764","IsPullRequest":true,"CreatedAt":"2019-10-11T12:24:00","Actor":"dotnet-maestro[bot]","Number":"2072","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c0fa602a-d869-4965-7860-08d72198640e)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191011.7\r\n- **Date Produced**: 10/11/2019 10:17 PM\r\n- **Commit**: 97143226be5921b048f408f65c9c2fb2a47fe064\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19511.7\r\n\r\n[marker]: <> (End:c0fa602a-d869-4965-7860-08d72198640e)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2072)\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19511.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19511.1 (parent: Microsoft.NETCore.App)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/2072","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#2072)"},{"Id":"505811494","IsPullRequest":true,"CreatedAt":"2019-10-11T12:02:35","Actor":"dotnet-maestro[bot]","Number":"2071","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191011.1\r\n- **Date Produced**: 10/11/2019 12:51 PM\r\n- **Commit**: 64a027b8d8b3a8e8e214bb00da02148335e3bd92\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19511.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19511.1\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2071)\r\n","Url":"https://github.com/dotnet/winforms/pull/2071","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#2071)"},{"Id":"505779372","IsPullRequest":true,"CreatedAt":"2019-10-11T10:48:16","Actor":"hughbe","Number":"2070","RawContent":null,"Title":"Structify NMTVDISPINFOW","State":"open","Body":"## Proposed Changes\r\n- Turn NMTVDISPINFOW into a (blittable) struct\r\n- Rename to NMTVDISPINFOW\r\n- Move to interop\r\n\r\nhttps://docs.microsoft.com/en-us/windows/win32/api/commctrl/ns-commctrl-nmtvdispinfow\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2070)","Url":"https://github.com/dotnet/winforms/pull/2070","RelatedDescription":"Open PR \"Structify NMTVDISPINFOW\" (#2070)"},{"Id":"505570305","IsPullRequest":false,"CreatedAt":"2019-10-11T00:09:00","Actor":"JeremyKuhne","Number":"2069","RawContent":null,"Title":"Consider using structs to wrap simple native typedefs","State":"open","Body":"We've been using enums to wrap `typedef`s from Windows. For example:\r\n\r\n``` C\r\ntypedef int BOOL;\r\n```\r\n\r\nWe're [wrapping as](https://github.com/dotnet/winforms/blob/master/src/Common/src/Interop/Interop.BOOL.cs):\r\n\r\n``` C#\r\npublic enum BOOL : int\r\n{\r\n    FALSE = 0,\r\n    TRUE = 1\r\n}\r\n```\r\n\r\nWhile enums are more directly aligned with `typedef`, they don't provide other advantages that C# can provide, such as implicit operators. This can be useful in the case of `BOOL`, where checking `if (b == BOOL.TRUE)` is **not** correct as anything other than `BOOL.FALSE` is true.\r\n\r\nWe mitigate this somewhat with extension methods and copious comments, but it still makes for less than ideal consumption. `if (SomeMethod().IsTrue())` isn't natural.\r\n\r\nUsing a struct with a single internal field is functionally equivalent from an interop perspective. It allows you to use operators with can make code much easier to write:\r\n\r\n``` C#\r\npublic readonly struct BOOL\r\n{\r\n    public int RawValue { get; }\r\n    public BOOL(bool b) => RawValue = b ? 1 : 0;\r\n    public BOOL(int b) => RawValue = b;\r\n    public bool IsTrue => RawValue != 0;\r\n    public bool IsFalse => RawValue == 0;\r\n    public static implicit operator bool(BOOL b) => b.IsTrue;\r\n    public static implicit operator BOOL(bool b) => new BOOL(b);\r\n}\r\n\r\n[DllImport]\r\nBOOL SomeMethod(BOOL value);\r\n\r\n// Can now be used like\r\nif (SomeMethod(true))\r\n\r\n// Instead of\r\nif (SomeMethod(BOOL.TRUE).IsTrue())\r\n```\r\n\r\nThe downsides are:\r\n\r\n1. It isn't technically correct, but .NET treats it the way we want\r\n2. It isn't as easy to optimize as `enum`, but the difference is trivial\r\n3. Core turned down the struct pattern, but doesn't have the volume of APIs WinForms does\r\n\r\nUpsides are:\r\n\r\n1. Natural code flow\r\n2. Less risk of misuse\r\n\r\nAnother thing that is possible with structs that _isn't_ with enums is wrapping pointers. Notably things like `HWND`, `HBITMAP`, etc. Using structs can allow us to strongly type our APIs:\r\n\r\n``` C#\r\npublic readonly struct HWND\r\n{\r\n    public IntPtr Value { get; }\r\n    public HWND(IntPtr handle) => Value = handle;\r\n}\r\n```\r\n\r\nWith pointer size objects added to the mix I'd argue that using structs for `typedef` is the best pattern to be using in WinForms.\r\n\r\nDiscussed [here](https://github.com/dotnet/winforms/pull/1978#pullrequestreview-299083926).\r\n\r\ncc: @hughbe, @zsd4yr, @russkie, @weltkante","Url":"https://github.com/dotnet/winforms/issues/2069","RelatedDescription":"Open issue \"Consider using structs to wrap simple native typedefs\" (#2069)"},{"Id":"505363968","IsPullRequest":true,"CreatedAt":"2019-10-11T00:08:00","Actor":"hughbe","Number":"2063","RawContent":null,"Title":"Cleanup NMLISTVIEW","State":"closed","Body":"## Proposed Changes\r\n- Move NMLISTVIEW to Interop\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2063)","Url":"https://github.com/dotnet/winforms/pull/2063","RelatedDescription":"Closed or merged PR \"Cleanup NMLISTVIEW\" (#2063)"},{"Id":"505090487","IsPullRequest":false,"CreatedAt":"2019-10-10T23:43:40","Actor":"vladimir-krestov","Number":"2059","RawContent":null,"Title":".NET Core project template doesn't have a manifest file","State":"closed","Body":"* .NET Core Version: 3.1.0-preview1.19458.7\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\n- It needs to add a manifest file to Core project template in order for the new app to opt-in into all the latest fixes from Windows. \r\n\r\n**Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n- Core project template doesn't have a manifest file\r\n\r\n**Expected behavior:**\r\n- Core project template must have a manifest file\r\n\r\n**Minimal repro:**\r\n- Create new .Net Core app\r\n\r\n**Manifest file:**\r\n- [ManifestFile.zip](https://github.com/dotnet/winforms/files/3708508/ManifestFile.zip)\r\n","Url":"https://github.com/dotnet/winforms/issues/2059","RelatedDescription":"Closed issue \".NET Core project template doesn't have a manifest file\" (#2059)"},{"Id":"505547964","IsPullRequest":false,"CreatedAt":"2019-10-10T22:46:37","Actor":"AdamYoblick","Number":"2068","RawContent":null,"Title":"Port yaml cleanup from winforms-designer","State":"open","Body":"Specifically:\r\n\r\n- Making the variables easier to read\r\n- Only running debug on public builds\r\n\r\nSee https://github.com/dotnet/winforms-designer/pull/963","Url":"https://github.com/dotnet/winforms/issues/2068","RelatedDescription":"Open issue \"Port yaml cleanup from winforms-designer\" (#2068)"},{"Id":"505224653","IsPullRequest":true,"CreatedAt":"2019-10-10T19:40:08","Actor":"dotnet-maestro[bot]","Number":"2060","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191009.5\r\n- **Date Produced**: 10/9/2019 10:22 PM\r\n- **Commit**: 1acb4c3ce4c6497388752adad31825ae7cdb7e2a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19509.5\r\n\r\n[marker]: <> (End:4d0c844d-0758-4fc5-c1ad-08d6354da8a8)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2060)","Url":"https://github.com/dotnet/winforms/pull/2060","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2060)"},{"Id":"505430098","IsPullRequest":false,"CreatedAt":"2019-10-10T18:13:45","Actor":"AdamYoblick","Number":"2067","RawContent":null,"Title":"Enable Roslyn Analyzers","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n* Have you experienced this same bug with .NET Framework?: Yes/No\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\nPort the fixes for Roslyn Analyzer violations from the VS source to the winforms source. See https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/206917 for details.\r\n\r\n**Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\n**Expected behavior:**\r\n\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/2067","RelatedDescription":"Open issue \"Enable Roslyn Analyzers\" (#2067)"},{"Id":"505380643","IsPullRequest":true,"CreatedAt":"2019-10-10T16:28:45","Actor":"hughbe","Number":"2066","RawContent":null,"Title":"Cleanup ChooseColor","State":"open","Body":"## Proposed Changes\r\n- Cleanup and structify ChooseColor\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2066)","Url":"https://github.com/dotnet/winforms/pull/2066","RelatedDescription":"Open PR \"Cleanup ChooseColor\" (#2066)"},{"Id":"505370466","IsPullRequest":true,"CreatedAt":"2019-10-10T16:08:45","Actor":"hughbe","Number":"2065","RawContent":null,"Title":"Cleanup SendKeys interop","State":"open","Body":"## Proposed Changes\r\n- Cleanup GetKeyboardState/SetKeyboardState\r\n- Cleanup BlockInput\r\n- Cleanup GetAsyncKeyState\r\n- Cleanup OemKeyScan\r\n- Structify EVENTMSG\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2065)","Url":"https://github.com/dotnet/winforms/pull/2065","RelatedDescription":"Open PR \"Cleanup SendKeys interop\" (#2065)"},{"Id":"505369351","IsPullRequest":true,"CreatedAt":"2019-10-10T16:06:39","Actor":"hughbe","Number":"2064","RawContent":null,"Title":"Rename and structify OLEINPLACEFRAMEINFO","State":"open","Body":"## Proposed Changes\r\n- Rename tagOIFI to OLEINPLACEFRAMEINFO\r\n- Structify\r\n- Cleanup\r\n\r\nhttps://docs.microsoft.com/en-us/windows/win32/api/oleidl/ns-oleidl-oleinplaceframeinfo\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2064)","Url":"https://github.com/dotnet/winforms/pull/2064","RelatedDescription":"Open PR \"Rename and structify OLEINPLACEFRAMEINFO\" (#2064)"},{"Id":"505362494","IsPullRequest":true,"CreatedAt":"2019-10-10T15:54:29","Actor":"hughbe","Number":"2062","RawContent":null,"Title":"Cleanup SYSTEMTIME and dependencies","State":"open","Body":"## Proposed Changes\r\n- Cleanup SYSTEMTIME\r\n- Cleanup NMDATETIMECHANGE\r\n- Cleanup NMDAYSTATE\r\n- Cleanup NMSELCHANGE\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2062)","Url":"https://github.com/dotnet/winforms/pull/2062","RelatedDescription":"Open PR \"Cleanup SYSTEMTIME and dependencies\" (#2062)"},{"Id":"505361052","IsPullRequest":true,"CreatedAt":"2019-10-10T15:52:03","Actor":"hughbe","Number":"2061","RawContent":null,"Title":"Cleanup OleCreatePropertyFrame","State":"open","Body":"## Proposed Changes\r\n- Consolidate overloads\r\n- Cleanup interop to avoid array allocation\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2061)","Url":"https://github.com/dotnet/winforms/pull/2061","RelatedDescription":"Open PR \"Cleanup OleCreatePropertyFrame\" (#2061)"},{"Id":"505060225","IsPullRequest":false,"CreatedAt":"2019-10-10T06:18:47","Actor":"0x084E","Number":"2058","RawContent":null,"Title":"NotifyIcon ContextMenuStrip is shown above taskbar","State":"open","Body":"* .NET Core Version: 3.0.100\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n**Problem description:**\r\nA NotifyIcons ContextMenuStrip is shown above the taskbar and not within.\r\n\r\nI think the reason for this is that ToolStripDropDown.WorkingAreaConstrained is always returning true in .NET Core ([Net.Core Source](https://source.dot.net/#System.Windows.Forms/System/Windows/Forms/ToolStripDropDown.cs,8513f6aa3e2a13ef,references) / [.NET Framework Source](https://referencesource.microsoft.com/#System.Windows.Forms/winforms/Managed/System/WinForms/ToolStripDropDown.cs,8513f6aa3e2a13ef,references))\r\n\r\n.NET Core 3\r\n![image](https://user-images.githubusercontent.com/7345141/66543472-c278c700-eb35-11e9-9591-631ff7c0e034.png)\r\n\r\n.NET Framework 4.8\r\n![image](https://user-images.githubusercontent.com/7345141/66543527-e805d080-eb35-11e9-867c-3989e5ebc640.png)\r\n\r\n**Actual behavior:**\r\nContextMenu is shown above the taskbar.\r\n\r\n**Expected behavior:**\r\nContextMenu should be shown within the taskbar.\r\n\r\n**Minimal repro:**\r\nCreate a NotifyIcon, set ContextMenuStrip property, show the icon and right click.","Url":"https://github.com/dotnet/winforms/issues/2058","RelatedDescription":"Open issue \"NotifyIcon ContextMenuStrip is shown above taskbar\" (#2058)"},{"Id":"504983597","IsPullRequest":true,"CreatedAt":"2019-10-10T02:38:51","Actor":"merriemcgaw","Number":"2057","RawContent":null,"Title":"Fix link to PLM zip","State":"closed","Body":"Non-Code change. Just updating the instructions to link to the script that turns PLM on/off and resets settings for the first release. We'll update again as soon as we've got the public release with UI that enables/disables instead of feature flags\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2057)","Url":"https://github.com/dotnet/winforms/pull/2057","RelatedDescription":"Closed or merged PR \"Fix link to PLM zip\" (#2057)"},{"Id":"503898426","IsPullRequest":false,"CreatedAt":"2019-10-09T23:58:15","Actor":"Amy-Li02","Number":"2048","RawContent":null,"Title":"The CellFormatting event of datagridview cannot be fired for cells that are not headers","State":"closed","Body":"* .NET Core Version: (3.1.100-preview1-14455 from release branch)\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n\r\n**Minimal repro:**\r\n1. Build and run the attached application.\r\n[CellFormattingEvent.zip](https://github.com/dotnet/winforms/files/3701402/CellFormattingEvent.zip)\r\n2. **Double click** on \"D\" cell, so that entire cell cannot be selected(only selected cell 's text). \r\n3. Then **focus on(not click)** the first cell of \"A\".\r\n![ReproSteps gif](https://user-images.githubusercontent.com/49627022/66378630-70755b80-e9e6-11e9-8719-30e577768fe9.gif)\r\n\r\n**Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nThe CellFormatting event of datagridview cannot be fired, and the tooltip will display .\r\n\r\n**Expected behavior:**\r\nThe CellFormatting event of datagridview should be fired.","Url":"https://github.com/dotnet/winforms/issues/2048","RelatedDescription":"Closed issue \"The CellFormatting event of datagridview cannot be fired for cells that are not headers\" (#2048)"},{"Id":"504564648","IsPullRequest":false,"CreatedAt":"2019-10-09T23:13:29","Actor":"Wagnerp","Number":"2054","RawContent":null,"Title":"[Question]: Overriding Scrollbars","State":"closed","Body":"Hi,\r\n\r\nI'm the developer for the `Krypton Toolkit Suite` projects hosted here on GitHub, and I was wondering if there was a way to override the default scrollbars for controls with some custom made scrollbars as seen below?\r\n\r\n![image](https://user-images.githubusercontent.com/949607/66474563-74a68500-ea89-11e9-8f30-1714520af7f3.png)\r\n","Url":"https://github.com/dotnet/winforms/issues/2054","RelatedDescription":"Closed issue \"[Question]: Overriding Scrollbars\" (#2054)"},{"Id":"503395186","IsPullRequest":true,"CreatedAt":"2019-10-09T22:58:00","Actor":"hughbe","Number":"2046","RawContent":null,"Title":"Cleanup ImageList interop and add tests","State":"closed","Body":"## Proposed Changes\r\n- Cleanup ImageList_ interop\r\n- Add ImageList tests\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2046)","Url":"https://github.com/dotnet/winforms/pull/2046","RelatedDescription":"Closed or merged PR \"Cleanup ImageList interop and add tests\" (#2046)"},{"Id":"504845353","IsPullRequest":false,"CreatedAt":"2019-10-09T19:24:47","Actor":"cston","Number":"2056","RawContent":null,"Title":"Support WindowsFormsApplicationBase.IsSingleInstance","State":"open","Body":"Support for \"single instance\" applications (see `WindowsFormsApplicationBase.IsSingleInstance`) has not been ported to .NET Core.\r\n\r\nThe [reference source](https://github.com/microsoft/referencesource/blob/master/Microsoft.VisualBasic/runtime/msvbalib/ApplicationServices/WindowsFormsApplicationBase.vb) implementation relies on `System.Runtime.Remoting` to communicate with other instances, and `Remoting` is not available on .NET Core.","Url":"https://github.com/dotnet/winforms/issues/2056","RelatedDescription":"Open issue \"Support WindowsFormsApplicationBase.IsSingleInstance\" (#2056)"},{"Id":"504611058","IsPullRequest":true,"CreatedAt":"2019-10-09T17:43:35","Actor":"dotnet-maestro[bot]","Number":"2055","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c0fa602a-d869-4965-7860-08d72198640e)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191008.9\r\n- **Date Produced**: 10/9/2019 5:01 AM\r\n- **Commit**: 5491acd84b92034d5d53e226682f053a7b376ad9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19508.9\r\n\r\n[marker]: <> (End:c0fa602a-d869-4965-7860-08d72198640e)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2055)","Url":"https://github.com/dotnet/winforms/pull/2055","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#2055)"},{"Id":"504539031","IsPullRequest":false,"CreatedAt":"2019-10-09T09:50:55","Actor":"pcfulife2","Number":"2053","RawContent":null,"Title":"How about supporting ARM64.","State":"open","Body":"Windows 10 supports ARM64 processors. And, Windows 10 on ARM64 can run x86 applications. But, performance is significantly low because of emulation. And, it cannot run native AMD64 applications. So, some developers recompile their applications for better performance.\r\n\r\nWin32 API supports ARM processors. (I saw native ARM64 applications which is not an UWP app) But, WinForms does not support ARM64 but only x86/AMD64. If WinForms supports ARM64, many WinForms applications will be able to run efficiently with ARM processors.","Url":"https://github.com/dotnet/winforms/issues/2053","RelatedDescription":"Open issue \"How about supporting ARM64.\" (#2053)"},{"Id":"504365724","IsPullRequest":false,"CreatedAt":"2019-10-09T01:58:18","Actor":"Vino-Wang","Number":"2052","RawContent":null,"Title":"The color of the Linklabel is black in runtime when targeting .NET Core 5.0","State":"open","Body":"* .NET Core Version: (.NET Core SDK 5.0.100 - alpha1 5.0.100.14858)\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**More info:**\r\nThis issue cannot reproduce when targeting .NET Core 3.0.\r\n\r\n**Actual behavior:** <!-- callstack for crashes / exceptions -->\r\nThe color of the Linklabel text is black and user cannot distinguish between clicking and no clicking.\r\n![Issue](https://user-images.githubusercontent.com/18568603/66445983-415cf980-ea7b-11e9-8856-69365774c4b1.png)\r\n\r\n**Expected behavior:**\r\nThe color of the Linklabel text is blue.\r\n![Expected_NET3 0](https://user-images.githubusercontent.com/18568603/66445986-4457ea00-ea7b-11e9-8558-17c102b2614c.png)\r\n\r\n**Minimal repro:**\r\n1.\tInstall .NET Core 5.0 from Master branch + latest VSIX package.\r\n2.\tCreate a new .NET Core application with modifying the <TargetFramework> to netcoreapp5.0\r\n3.\tAdd a linklabel to the form designer.\r\n4.\tRun the app.","Url":"https://github.com/dotnet/winforms/issues/2052","RelatedDescription":"Open issue \"The color of the Linklabel is black in runtime when targeting .NET Core 5.0\" (#2052)"},{"Id":"504198994","IsPullRequest":true,"CreatedAt":"2019-10-09T01:04:06","Actor":"cston","Number":"2050","RawContent":null,"Title":"Handle case where modal dialog is closed automatically","State":"closed","Body":"Fixes failing Microsoft.VisualBasic.IntegrationTests.\r\n\r\n## Proposed changes\r\n\r\nHandle the case where test modal dialog is closed automatically.\r\n\r\n## Customer Impact\r\n\r\nNone.\r\n\r\n## Regression? \r\n\r\nTest regression in https://github.com/dotnet/winforms/commit/187f3007da2d64e43ce38e50bc57bbea9850ad8a\r\n\r\n## Risk\r\n\r\nLow. This is a test change only.\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2050)","Url":"https://github.com/dotnet/winforms/pull/2050","RelatedDescription":"Closed or merged PR \"Handle case where modal dialog is closed automatically\" (#2050)"},{"Id":"504007101","IsPullRequest":true,"CreatedAt":"2019-10-08T22:06:08","Actor":"dotnet-maestro[bot]","Number":"2049","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c0fa602a-d869-4965-7860-08d72198640e)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191007.10\r\n- **Date Produced**: 10/8/2019 5:40 AM\r\n- **Commit**: 57ba280ee32511c6f5c2ebcd2bfaaf4a1db74648\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19507.10\r\n\r\n[marker]: <> (End:c0fa602a-d869-4965-7860-08d72198640e)\r\n\r\n\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2049)","Url":"https://github.com/dotnet/winforms/pull/2049","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#2049)"},{"Id":"504266924","IsPullRequest":true,"CreatedAt":"2019-10-08T21:01:23","Actor":"zsd4yr","Number":"2051","RawContent":null,"Title":"set EmbedUntrackedSources to embed SR files into the PDB in order to satisfy SourceLink check","State":"closed","Body":"\n\n###### Microsoft Reviewers: [Open in CodeFlow](http://wpcp.azurewebsites.net/CodeFlowProtocolProxy2.php?pullrequest=https://github.com/dotnet/winforms/pull/2051)","Url":"https://github.com/dotnet/winforms/pull/2051","RelatedDescription":"Closed or merged PR \"set EmbedUntrackedSources to embed SR files into the PDB in order to satisfy SourceLink check\" (#2051)"},{"Id":"503542192","IsPullRequest":false,"CreatedAt":"2019-10-07T15:54:38","Actor":"hughbe","Number":"2047","RawContent":null,"Title":"Setting TabControl.Alignment with a handle recreates the handle twice","State":"open","Body":"Should only do it once:\r\n\r\nProblematic code: we set `Multiline = true` which causes the handle to be recreated before we recreate is again\r\n```cs\r\n            set\r\n            {\r\n                if (alignment != value)\r\n                {\r\n                    //valid values are 0x0 to 0x3\r\n                    if (!ClientUtils.IsEnumValid(value, (int)value, (int)TabAlignment.Top, (int)TabAlignment.Right))\r\n                    {\r\n                        throw new InvalidEnumArgumentException(nameof(value), (int)value, typeof(TabAlignment));\r\n                    }\r\n\r\n                    alignment = value;\r\n                    if (alignment == TabAlignment.Left || alignment == TabAlignment.Right)\r\n                    {\r\n                        Multiline = true;\r\n                    }\r\n\r\n                    RecreateHandle();\r\n                }\r\n            }\r\n```","Url":"https://github.com/dotnet/winforms/issues/2047","RelatedDescription":"Open issue \"Setting TabControl.Alignment with a handle recreates the handle twice\" (#2047)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-10-13T05:30:52.6828544Z","RunDurationInMilliseconds":533}