{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":105,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Modernize existing .NET apps with Windows Containers and Azure","PublishedOn":"2017-11-01T23:14:48+00:00","CommentsCount":22,"FacebookCount":0,"Summary":"As part of the series of posts announced at this initial blog post (.NET Application Architecture Guidance) that explores each of the architecture areas currently covered by our team, this current...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/01/modernize-existing-net-apps-with-windows-containers-and-azure/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6767783059","Type":"IssuesEvent","CreatedAt":"2017-10-26T05:52:31","Actor":"HarelM","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Opened issue \"File system watcher crach\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6854176970","Type":"IssuesEvent","CreatedAt":"2017-11-14T18:00:49","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Reopened issue \"Microsoft Security Advisory CVE-2017-11770 : Malformed Certificate can cause Denial of Service\" (#44) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-11770 \r\n## Malformed Certificate can cause Denial of Service\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed certificate or other ASN.1 formatted data could lead to a denial of service via an infinite loop on Linux and macOS.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.8, 1.1.5 and 2.0.1. Developers are advised to update their .NET Core SDK to version 2.0.3 or 1.1.5.\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n.NET Core applications running on Windows are not affected by this vulnerability. \r\n\r\n## Affected Software\r\nThe vulnerabilities affect any Microsoft .NET Core project if it uses any of affected runtime versions listed blow and is running on Linux.\r\n\r\nPlatform  | Runtime Version | Fixed runtime version\r\n----------------|----------------| -------------------------\r\nLinux | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4<br />2.0.0 |  1.0.8<br />1.1.5<br />2.0.1\r\nmacOS | 1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7<br />1.1.0, 1.1.1, 1.1.2, 1.1.4 |  1.0.8<br />1.1.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.7 or lower, or 1.1.2 or lower, or 2.0.0 is affected. The default version of the .NET core runtime can be listed by running `dotnet --info`, which should produce output in the form of \r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n\r\nAs this only displays the latest version of the runtime installed it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/       |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.8, 1.1.5 or 2.0.1 then any applications targeting .NET Core will be vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Version 1.1.5 will also install version 1.0.8 of the runtime.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### Acknowledgments\r\n\r\nThanks to Bachraty Gergely for reporting this issue.\r\n\r\n### External Links\r\n\r\n[CVE-2017-11770](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8585)\r\n\r\n### Revisions\r\n\r\nV1.0 (Nov 14, 2017): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2017-11-14_"},{"Id":"6853282986","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:23:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/48","RelatedDescription":"Closed issue \"Reserved\" (#48) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853280485","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:35","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Closed issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853280272","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:33","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/47","RelatedDescription":"Opened issue \"Reserved\" (#47) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n\r\n"},{"Id":"6853278942","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:20","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Closed issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853278548","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:22:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/46","RelatedDescription":"Opened issue \"Reserved\" (#46) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853276874","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:58","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/45","RelatedDescription":"Closed issue \"Reserved\" (#45) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853274106","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Closed issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6853272527","Type":"IssuesEvent","CreatedAt":"2017-11-14T15:21:12","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/44","RelatedDescription":"Opened issue \"Reserved\" (#44) at dotnet/announcements","RelatedBody":"_This issue has been reserved for a potential future security announcement._\r\n\r\nThis does **not** mean a security advisory is coming soon, it simply gives us the ability to predict the issue number that will be used in the future.\r\n"},{"Id":"6840049093","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:55","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/27","RelatedDescription":"Reopened issue \"microsoft/dotnet Docker Hub README adopts segmented OS/Arch style\" (#27) at dotnet/announcements","RelatedBody":"# microsoft/dotnet Docker Hub README adopts segmented OS/Arch style\r\n\r\nThe Docker Hub README style used by [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) has been updated to use a new model that is segmented by OS and chip architecture.\r\n\r\nYou can see an example of the new style in the following image. \r\n\r\n<img width=\"803\" alt=\"screen shot 2017-08-13 at 10 44 34 pm\" src=\"https://user-images.githubusercontent.com/2608468/29259667-0c73b3e4-8079-11e7-9c43-26894534ca7a.png\">\r\n\r\n## Discussion\r\n\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #275](https://github.com/dotnet/dotnet-docker/issues/275)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #328](https://github.com/dotnet/dotnet-docker-nightly/pull/328)\r\n* [moby/moby #33759](https://github.com/moby/moby/issues/33759)\r\n\r\nThe [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo (and by extension [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)) has been steadily  growing with each release of .NET Core and also of the underlying operating systems that we support. We wanted to present simple-to-read tag lists.  As the repo has grown, the tag list has gotten longer and more complicated. \r\n\r\nThe addition of `arm32v7` to the repo caused us to spend considerable time thinking about repo organization generally. We looked at other approaches and also talked to Docker employees about their long-term plans for `arm32v7` in particular.\r\n\r\nWe considered various options:\r\n\r\n* Split the repo by architecture (this seemed to match what Debian and other official repos were doing). See [debian](https://hub.docker.com/_/debian/) and [arm32v7/debian](https://hub.docker.com/r/arm32v7/debian/). Note how the [Debian GitHub repo](https://github.com/debuerreotype/docker-debian-artifacts) is structured, branching by architecture.\r\n* Split the repo by SDK and Runtime. We've discussed this multiple times but we believe that discoverability would be a significant challenge. Also, other peer development platforms do not segment on the SDK/Runtime boundary.\r\n* Stay the course on the repo structure, but adopt a new (hopefully better) approach for the tag list.\r\n\r\nThere are three main reasons that we adopted a new README style:\r\n\r\n* Multi-arch tags are visually awkward when you have multiple versions of an operating system for a given tag type. For example, the dotnet repo offers both Debian 8 and 9 variants of the `2-sdk` tag. Only one of them can participate in the multi-arch tag while the other variant (in this case Debian 8) is only available with the longer tag name: `2.0.0-sdk-jessie`. The way the bullets in the tag list compose looks odd, as you can see in the following image. It also doesn't communicate the relationship between tags well. <img width=\"724\" alt=\"screen shot 2017-08-13 at 11 14 22 pm\" src=\"https://user-images.githubusercontent.com/2608468/29260189-2f58da84-807d-11e7-868e-7e1f888fd42d.png\">\r\n* A multi-arch-first tag list works well when all OSes offer the same image types, but is poor at showing differences when they don't. The .NET Core offering for `arm32v7` is quite limited currently. We wanted to make that obvious.\r\n* We believe that most users look at the README with a specific OS in mind. We thought that it was best to cater to that, providing a simplified view for a given OS.\r\n\r\nThe downside is that this README style is unique (AFAIK). We've never tried to be novel with our Docker offering, but fit into existing conventions. This is our first significant departure from Docker norms. There is a lot changing in the Docker space, with multi-arch and `arm32v7` being top of the list (as it relates to this topic). As a result, we thought that now was a good time for experimentation based on the conclusion that the existing README style no longer scales to our needs. Our conversations with Docker employees also led us to believe that there are no good established answers to these challenges.\r\n\r\nPlease give us your feedback @ [dotnet/dotnet-docker #275](https://github.com/dotnet/dotnet-docker/issues/275)."},{"Id":"6840048672","Type":"IssuesEvent","CreatedAt":"2017-11-10T22:00:48","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/24","RelatedDescription":"Reopened issue \" .NET Standard 2.0 is final\" (#24) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n[.NET Standard 2.0](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.0.md) is final. \r\n\r\nYou can now start producing .NET Standard 2.0 libraries and NuGet packages. Please use the latest [.NET Core 2.0 Preview 2](https://www.microsoft.com/net/core/preview) as it contains many improvements that were necessary to provide a good experience.\r\n      \r\n## Details\r\n\r\n* **Bigger API Surface**: We have more than doubled the set of available APIs from **13k** in [.NET Standard 1.6](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard1.6.md) to **32k** in [.NET Standard 2.0](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.0.md). Most of the added APIs are .NET Framework APIs. These additions make it much easier to port existing code to .NET Standard, and, by extension, to any .NET implementation of .NET Standard, such as .NET Core 2.0 and the upcoming version of UWP.\r\n\r\n* **.NET Framework compatibility mode**: The vast majority of NuGet packages are currently still targeting .NET Framework. Many projects are currently blocked from moving to .NET Standard because not all their dependencies are targeting .NET Standard yet. That's why we added a compatibility mode that allows .NET Standard projects to depend on .NET Framework libraries as if they were compiled for .NET Standard. Of course, this may not work in all cases (for instance, if the .NET Framework binaries uses WPF), but we found that [70% of all NuGet packages on nuget.org are API compatible][video] with .NET Standard 2.0, so in practice it unblocks many projects.\r\n\r\n[video]: https://www.youtube.com/watch?v=iIlQer4LEac\r\n\r\n* **Broad platform support**. .NET Standard 2.0 is [supported on the following platforms](https://github.com/dotnet/standard/blob/master/docs/versions.md):\r\n    - .NET Framework 4.6.1\r\n    - .NET Core 2.0\r\n    - Mono 5.4\r\n    - Xamarin.iOS 10.14\r\n    - Xamarin.Mac 3.8\r\n    - Xamarin.Android 7.5\r\n    - UWP is work in progress and will ship later this year.\r\n\r\n## Tooling Prerequisites\r\n\r\nIn general, make sure you run the latest version of the tooling:\r\n\r\n* **.NET Core SDK**. You always need to install [.NET Core 2.0 Preview 2](https://www.microsoft.com/net/core/preview). This also includes the CLI (`dotnet`) for building packages, so if you only want to use the CLI, you can stop here.\r\n* **Visual Studio**. If you want to use Visual Studio for authoring .NET Standard 2.0 libraries, you also need to install [Visual Studio 2017 15.3](https://www.visualstudio.com/vs/preview/). Make sure to use 15.3 and not an earlier version, as this release addressed a couple of key issues to provide a good experience. If you only need to consume .NET Standard 2.0 libraries, you can do that even in Visual Studio 2015 but you'll need NuGet client 3.6 or higher ([download from Nuget.org/downloads](https://www.nuget.org/downloads))\r\n* **Visual Studio for Mac**. The latest version of [Visual Studio for Mac](https://www.visualstudio.com/vs/visual-studio-mac/) supports building .NET Standard 2.0 libraries. \r\n* **Rider**. The [latest version](https://www.jetbrains.com/rider/download) also has support for .NET Standard 2.0.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nFor discussion, see https://github.com/dotnet/standard/issues/439."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6868083176","Type":"IssuesEvent","CreatedAt":"2017-11-17T04:33:17","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15019","RelatedDescription":"Closed issue \"嵌入coreclr的一些问题\" (#15019) at dotnet/coreclr","RelatedBody":"我想做一个东西，想把coreclr嵌入到我自己的应用程序中，然后运行一些c#代码，我想像lua那样可以绑定一些c/c++的方法让c#来调用，但是好像没有相关的资料\r\n我在网上查到的资料都是c#通过dllimport来载入动态链接库的方式来调用c/c++的方法，但是我嵌入coreclr后不想再调用动态链接库的方法，而是调用嵌入了coreclr的应用程序本身的一些方法\r\n我想知道是否能够目前coreclr是否能实现？谢谢了！"},{"Id":"6867931288","Type":"PullRequestEvent","CreatedAt":"2017-11-17T03:26:45","Actor":"davidni","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15070","RelatedDescription":"Opened pull request \"Fix #15057 MemoryStream.CopyToAsync calls Write / WriteAsync with count=0\" (#15070) at dotnet/coreclr","RelatedBody":""},{"Id":"6867830771","Type":"PullRequestEvent","CreatedAt":"2017-11-17T02:48:20","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15065","RelatedDescription":"Merged pull request \"Do not call fgCheckStmtAfterTailCall if already has aborted tail call.\" (#15065) at dotnet/coreclr","RelatedBody":"Do not check stmts after the tail call candidate if the optimization has been aborted already.\r\n\r\nFix #15056"},{"Id":"6867830769","Type":"IssuesEvent","CreatedAt":"2017-11-17T02:48:20","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15056","RelatedDescription":"Closed issue \"jit\\gtstructs.h Line: 56 assert(found)\" (#15056) at dotnet/coreclr","RelatedBody":"There are 3 regressions with jitstress=2 after #14945:\r\n```\r\nJIT_Performance._CodeQuality_Roslyn_CscBench_CscBench_._CodeQuality_Roslyn_CscBench_CscBench_cmd\r\nJIT_Regression._JitBlue_DevDiv_461649_DevDiv_461649_DevDiv_461649_._JitBlue_DevDiv_461649_DevDiv_461649_DevDiv_461649_cmd\r\nmanaged_Compilation._Compilation_Compilation_._Compilation_Compilation_cmd\r\n```\r\n[Ci run.](https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/x64_checked_windows_nt_jitstress2_prtest/64/#showFailuresLink)"},{"Id":"6867599544","Type":"PullRequestEvent","CreatedAt":"2017-11-17T01:25:02","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15069","RelatedDescription":"Opened pull request \"Add TryFormat span-based methods to most primitive types\" (#15069) at dotnet/coreclr","RelatedBody":"The end result of this PR is a TryFormat method being added to:\r\n- Boolean\r\n- SByte\r\n- Byte\r\n- Int16\r\n- Int32\r\n- Int64\r\n- UInt16\r\n- UInt32\r\n- UInt64\r\n\r\nHowever, most of the commits lead up to that by porting code from corert to the shared partition.  corert's formatting implementation is a managed port of the native formatting implementation in coreclr.  This then moves coreclr back to using the same managed implementation.  I've split this into a bunch of commits to help make it easier to review.  The primary goals here are:\r\n- Exposing TryFormat on our primitive types\r\n- Consolidating on a single managed parsing/formatting implementation shared across coreclr/corert\r\n- Not regressing performance\r\n\r\nThe first commit brings the core NumberBuffer type to the shared partition.  Until we've entirely removed formatting from native code, we still need NumberBuffer to play well with the NUMBER type that's used for the remaining decimal, double, and float formatting in the runtime.\r\n\r\nThe next commit moves the integer parsing logic into shared.  This parsing logic was already in managed code in coreclr, with almost identical code in corert.  This rationalizes the two and moves that to shared.\r\n\r\nThe next commit rationalizes a difference between NUMBER in coreclr and NumberBuffer in corert: coreclr had a buffer for 50 chars whereas corert for 32.  There doesn't appear to be any necessary reason to have the larger size, so this consolidates to the 32.\r\n\r\nThe next commit separates out the decimal and floating-point parsing logic and moves it to shared; the formatting logic for decimal, double, single remain in native for now.\r\n\r\nThen a bunch of commits add in optimizations that were causing the managed implementation to be significantly slower than the native.  Many of these involve reviewing the native code and making the managed implementation look more like it, e.g. using pointers more to avoid bounds checks and the like.\r\n\r\nAdditionally, several commits delete now dead code, such as the majority of the formatting implementation from the runtime.\r\n\r\nFinally, two commits add additional features.  One adds the new TryFormat methods that build on this managed formatting, and another that uses TryFormat in StringBuilder to avoid string allocations in methods like StringBuilder.Append(int).\r\n\r\nI ran a bunch of Benchmark.NET tests locally.  Though there's a lot of fluctation on my machine, my takeaways are:\r\n- There are significant improvements in the new implementation for \"G\" (the default) and \"D\", upwards of 10-20%.\r\n- \"X\" appears to be 5-10% faster in the managed implementation.\r\n- \"E\" and \"F\" are 5-10% slower in the managed implementation.\r\n- The rest appear to be within noise in one direction or the other.\r\n\r\nThere's likely room for further improvement, and it should hopefully be easier now that it's managed and shared with corert.  We can also look at reducing the amount of unsafe code involved, switching over to using spans as we determine it doesn't regress perf impactfully.\r\n\r\nI also did not do a lot to clean up the formatting of the code from corert.  That can be done subsequently.\r\n\r\nNote, too, that this port enables TryFormat, which is allocation-free, compared to ToString, which needs to of course allocate the resulting string.\r\n\r\ncc: @jkotas, @vancem, @AtsushiKan, @KrzysztofCwalina, @danmosemsft \r\nContributes to https://github.com/dotnet/corefx/issues/22403\r\nContributes to https://github.com/dotnet/coreclr/issues/13544\r\nContributes to https://github.com/dotnet/corefx/issues/22616"},{"Id":"6867578988","Type":"PullRequestEvent","CreatedAt":"2017-11-17T01:17:51","Actor":"fiigii","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15068","RelatedDescription":"Opened pull request \"Generic hardware intrinsics throw exception for non-numeric types\" (#15068) at dotnet/coreclr","RelatedBody":"Intel hardware intrinsics should throw exceptions with `System.NotSupportedException: Specified type is not supported` on `Vector128/256<T>` that is instantiated by non-numeric types."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6868019594","Type":"IssuesEvent","CreatedAt":"2017-11-17T04:03:41","Actor":"Petermarcu","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8042","RelatedDescription":"Opened issue \".NET Core SDK 2.0.3 has hard-coded version string in bundle UI\" (#8042) at dotnet/cli","RelatedBody":"@barnson commented on [Thu Nov 16 2017](https://github.com/dotnet/core-setup/issues/3427)\n\n## Steps to reproduce\r\n\r\n* Install dotnet-sdk-2.0.3-win-x64.exe, downloaded from https://www.microsoft.com/net/download/windows.\r\n\r\n## Expected  behavior\r\n\r\nThe `Success` page tells me I installed version 2.0.3.\r\n\r\n## Actual behavior\r\n\r\n![image](https://user-images.githubusercontent.com/916265/32928786-c04e0ae8-cb21-11e7-9f4e-1093c96eed3a.png)\r\n\r\nThe loc string `FirstTimeWelcomeMessage` used on the `Success` page in the bundle has hard-coded `2.0.0` strings.\r\n\r\n## Environment data\r\n\r\nn/a\n\n"},{"Id":"6867795067","Type":"IssuesEvent","CreatedAt":"2017-11-17T02:34:43","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7909","RelatedDescription":"Closed issue \"cli-tool: running a cil-tool via dotnet produces unmanaged unhandler exception\" (#7909) at dotnet/cli","RelatedBody":"I have a netcoreapp2.0 console project with output \"dotnet-xxx\" assembly (Exe) for a tool. The tool can run fine (`dotnet dotnet-xxx.dll`). Now I want to use it as CliTool in other projects.\r\n\r\nI packed the tool as a nuget package with `<packageType name=\"DotnetCliTool\" />` then installed it in a project via DotNetCliToolReference  reference:\r\n\r\n    <DotNetCliToolReference Include=\"Croc.XFW3.DotnetCliTool\" Version=\"3.0.0\" />\r\n\r\nBut when I try to run it via dotnet I'm getting an unmanaged unhandled exception:\r\n\r\nUnhandled Exception:\r\n   Cannot print exception string because Exception.ToString() failed.\r\n\r\nWindows debug dialog pops up, inside debugger (VS) I only can see this:\r\n\r\nUnhandled exception at 0x00007FFB9AE13FB8 (KernelBase.dll) in dotnet.exe: 0xE0434352 (parameters: 0xFFFFFFFF80131534, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x00007FFB3E430000).\r\n\r\nNot much.\r\n\r\nThe tool package installed to a folder specified in `globalPackagesFolder` option in local nuget.config.\r\nThere're pdb and all json from build output in that folder.\r\ndotnet-xxx.dll\r\ndotnet-xxx.pdb\r\ndotnet-xxx.deps.json\r\ndotnet-xxx.runtimeconfig.json\r\ndotnet-xxx.runtimeconfig.dev.json\r\n\r\nHow can I diagnose what's wrong?\r\n\r\np.s. the tool isn't public so I can't share reproducible code unfortunately\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n"},{"Id":"6867789023","Type":"IssuesEvent","CreatedAt":"2017-11-17T02:32:26","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7886","RelatedDescription":"Closed issue \"Feature Request: CLI feature update NuGet packages on solution, project, and/or folder level.\" (#7886) at dotnet/cli","RelatedBody":"It could potentially be beneficial to have a CLI command that would allow for the updating of NuGet packages from the solution level.\r\n\r\nAs we add more projects to our solutions, the projects created more recently often (as expected) have more up to date versions of packages.  In our case, we are creating several solutions, some of which depend on some library projects.  We could go into each solution, and update the packages, but this is extremely time consuming.\r\n\r\nPart of the way we were getting around this, was to have an \"all\" solution, that contained all projects.  This would allow the use of the \"Manage NuGet packages\" dialogue to update all packages at once.  At this point however, VS seems to crash based on the number of projects in the \"all\" solution (in the neighborhood of 100).\r\n\r\nIt would be extremely useful if a `dotnet nuget update` command or similar was made available, at either the solution, project, or folder (assuming it could traverse directories) level.  I'm not sure if this is such a special potential use case or not, but thought I'd throw it out there.\r\n\r\nI'd imagine certain options would be useful such as:\r\n\r\n`-consolidate` (similar to the GUI, determine all packages used, and get them all updated to the same version\r\n`-update` - updates all nuget packages to the latest version\r\n`-update-pre` - updates all nuget packages to the latest version, can use pre-release packages rather than only stable.\r\n\r\n* when given a solution file, determine projects in solution, then nuget packages used across projects\r\n* when given a project file, update only packages pertaining to that project file\r\n* when given a folder, determine projects contained within folder, and nuget packages for each project.\r\n\r\nThoughts?  I couldn't imagine I'm the only one where the \"Solution manage nuget packages\" from Visual Studio sort of bombs out.\r\n\r\n"},{"Id":"6867776383","Type":"PullRequestEvent","CreatedAt":"2017-11-17T02:27:49","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7997","RelatedDescription":"Merged pull request \"Update tab-completion.md\" (#7997) at dotnet/cli","RelatedBody":"At the time this doc was written, the completion functionality was not yet in the master branch and release build, so I'm updating it to reflect the fact that this is now generally available."},{"Id":"6867775563","Type":"PullRequestEvent","CreatedAt":"2017-11-17T02:27:29","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7992","RelatedDescription":"Merged pull request \"Inserting dotnet/templating rel/2.1.0-preview1 into cli master\" (#7992) at dotnet/cli","RelatedBody":"dotnet/templating build 1.0.0-beta3-20171109-311\r\n"},{"Id":"6867746412","Type":"PullRequestEvent","CreatedAt":"2017-11-17T02:16:46","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8040","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.5.0-rtm-4651 into cli\" (#8040) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.5.0-rtm-4651 into cli release/15.5 branch"},{"Id":"6867719074","Type":"IssuesEvent","CreatedAt":"2017-11-17T02:07:16","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7411","RelatedDescription":"Closed issue \"dotnet restore fails when csproj contains an Import element with a relative path or $(ProjectDir) or $(SolutionDir)\" (#7411) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n  1. Create a blank Windows UWP project with Visual Studio 2015\r\n  2. Edit the `.csproj` (old format) and add an `<Import>` element\r\n  3. Make the import element use a relative path:\r\n    ```\r\n    <Import Project=\"targets\\dummy.targets\" />\r\n    ```\r\n    or\r\n    ```\r\n    <Import Project=\"$(SolutionDir)targets\\dummy.targets\" />\r\n    ```\r\n    or\r\n    ```\r\n    <Import Project=\"$(ProjectDir)targets\\dummy.targets\" />\r\n    ```\r\n\r\n## Expected  behavior\r\n\r\n`dotnet restore path\\to\\project.csproj` parses the `.csproj` correctly, just like Visual Studio or MSBuild does.\r\n\r\n## Actual behavior\r\n\r\n`dotnet restore path\\to\\project.csproj` complains the `<Import>` element can't find the `dummy.targets` file. \r\n\r\nAssuming `C:\\Projects\\dummy\\dummy.csproj` and `C:\\Projects\\dummy\\targets\\dummy.targets`.\r\nEven the error reporting is erratic: when you e.g. change the `<Import>` statement to\r\n```\r\n<Import Project=\"$(ProjectDir)XXXtargets\\dummy.targets\" />\r\n```\r\n\r\nThe error message says:\r\n```\r\nC:\\Projects\\dummy\\dummy.csproj(4,3): error MSB4019: The imported project \"C:\\Projects\\dummy\\XXXtargets\\dummy.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.\r\n```\r\n\r\nBut if you use\r\n```\r\n<Import Project=\"$(ProjectDir)targets\\dummy.targets\" />\r\n```\r\n\r\nThe error message says:\r\n```\r\nC:\\Projects\\dummy\\dummy.csproj(4,3): error MSB4019: The imported project \"C:\\targets\\dummy.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.\r\n```\r\n\r\n\r\nMy analysis (from the outside) is the following:\r\n  - when the `<Import>` element is evaluated, `$(ProjectDir)` and `$(SolutionDir)` are not set and my `.targets` file is not found (for a reason)\r\n - `$(ProjectDir)` and `$(SolutionDir)` get set **before** printing the error message complicating the analysis\r\n\r\nMy workaround is to explicitly pass `/p:SolutionDir=\"%CD%\\\\\"` when launching `dotnet restore` from the `.sln` directory.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (1.0.3)\r\n\r\nProduct Information:\r\n Version:            1.0.3\r\n Commit SHA-1 hash:  37224c9917\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.3\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6867019251","Type":"PullRequestEvent","CreatedAt":"2017-11-16T22:27:21","Actor":"dseefeld","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/585","RelatedDescription":"Merged pull request \"Add retry logic for setup of dotnet cli\" (#585) at dotnet/standard","RelatedBody":"Copy init-tools.sh retry logic from corefx.  Also adding display_error_message() function.\r\n\r\nFixes dotnet/core-eng#1966"},{"Id":"6866646378","Type":"PullRequestEvent","CreatedAt":"2017-11-16T21:03:38","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/586","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02216-01 (master)\" (#586) at dotnet/standard","RelatedBody":""},{"Id":"6863668777","Type":"IssuesEvent","CreatedAt":"2017-11-16T10:57:06","Actor":"valeriob","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/584","RelatedDescription":"Closed issue \"Guide on how to build a netstandard library with native dependencies\" (#584) at dotnet/standard","RelatedBody":"Hi,\r\nis there some documentation already about it ? I looked for it without luck.\r\nMaybe where i can understand also the packaging story and the resolution, publishing etc. to diagnose problems.\r\n\r\nThanks"},{"Id":"6861388302","Type":"PullRequestEvent","CreatedAt":"2017-11-15T23:05:41","Actor":"jcagme","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/577","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02215-01 (master)\" (#577) at dotnet/standard","RelatedBody":"<details><summary>Discarded auto-update commits (click to expand)</summary><auto-pr-discard-list>\r\n\r\n * [`1b89883`](https://github.com/dotnet-maestro-bot/standard/commits/1b898838df83cd248e0959eaf63e511955106710) Update BuildTools to prerelease-02214-03\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=577)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/113/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/184/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/184/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`7fd93db`](https://github.com/dotnet-maestro-bot/standard/commits/7fd93db33ffd29fc214e3d17d134d1a599212366) Update BuildTools to prerelease-02213-01\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=577)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/110/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/181/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/181/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`97ddc45`](https://github.com/dotnet-maestro-bot/standard/commits/97ddc45eb5d9364ab37dd31b74b4a667089fa47d) Update BuildTools to prerelease-02210-05\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=577)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`a10466a`](https://github.com/dotnet-maestro-bot/standard/commits/a10466a48da962f5fd9854682b0f3335c8a10bd8) Update BuildTools to prerelease-02210-04\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=577)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`afd36ca`](https://github.com/dotnet-maestro-bot/standard/commits/afd36ca99111932dc7149ccb4d1e8a8f28fd4de4) Update BuildTools to prerelease-02210-03\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=577)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`44c5fd6`](https://github.com/dotnet-maestro-bot/standard/commits/44c5fd6aca184b7e37b92e456a94698b089b1231) Update BuildTools to prerelease-02210-02\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=577)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`a1e312e`](https://github.com/dotnet-maestro-bot/standard/commits/a1e312e65de72f0a31733a23198739f8b6c617eb) Update BuildTools to prerelease-02210-01\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=577)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/107/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/178/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/178/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`9cb5180`](https://github.com/dotnet-maestro-bot/standard/commits/9cb518056561ce83190331fa753d53ac97acf5d0) Update BuildTools to prerelease-02209-01\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=577)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/106/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/176/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/176/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`9796f23`](https://github.com/dotnet-maestro-bot/standard/commits/9796f23982a58234b8f86d3e86eec6082a0add2a) Update BuildTools to prerelease-02208-05\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=577)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/105/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/173/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/173/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`cda7769`](https://github.com/dotnet-maestro-bot/standard/commits/cda7769f8adcafc7c1cc63207ec909765866b283) Update BuildTools to prerelease-02208-04\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=577)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/104/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/172/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/172/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`c97ca45`](https://github.com/dotnet-maestro-bot/standard/commits/c97ca45b8eb8bfc80af7c776849208e4cfccec73) Update BuildTools to prerelease-02208-03\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=577)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/103/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/171/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/171/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`144be30`](https://github.com/dotnet-maestro-bot/standard/commits/144be301dbe3f4c8e38e4c06605124ac846c3296) Update BuildTools to prerelease-02207-02\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=577)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/102/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/170/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/170/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n * [`96b79ff`](https://github.com/dotnet-maestro-bot/standard/commits/96b79ffc66e1e45eb46c450c3a584752695b9576) Update BuildTools to prerelease-02207-01\r\n   * :heavy_check_mark: **license/cla** All CLA requirements met. [Details](https://cla.dotnetfoundation.org/dotnet/standard?pullRequest=577)\r\n   * :heavy_check_mark: **OSX10.12** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/OSX10.12_prtest/101/)\r\n   * :heavy_check_mark: **Ubuntu16.04** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Ubuntu16.04_prtest/169/)\r\n   * :heavy_check_mark: **Windows_NT** Build finished.  [Details](https://ci.dot.net/job/dotnet_standard/job/master/job/Windows_NT_prtest/169/)\r\n   * :heavy_check_mark: **WIP** ready for review [Details](https://github.com/apps/wip)\r\n\r\n</auto-pr-discard-list></details>"},{"Id":"6861035215","Type":"PullRequestEvent","CreatedAt":"2017-11-15T21:42:19","Actor":"dseefeld","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/585","RelatedDescription":"Opened pull request \"Add retry logic for setup of dotnet cli\" (#585) at dotnet/standard","RelatedBody":"Copy init-tools.sh retry logic from corefx.  Also adding display_error_message() function.\r\n\r\nFixes dotnet/core-eng#1966"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6867818147","Type":"IssuesEvent","CreatedAt":"2017-11-17T02:43:28","Actor":"scegg","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25310","RelatedDescription":"Opened issue \"Feature request: Add a method to get the core framework version.\" (#25310) at dotnet/corefx","RelatedBody":"Due to some function is brought in with newer version of core framework, I need to test the installed version of core framework on client side while my app running.\r\n\r\nIs there any way to get the framework version, e.g. \"2.0.3\" ?\r\nCurrently, Environment.Version is set to netfx version even the app is running as core app.\r\n\r\nThanks."},{"Id":"6867691462","Type":"IssuesEvent","CreatedAt":"2017-11-17T01:57:24","Actor":"qqbuby","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25269","RelatedDescription":"Reopened issue \"Unhandled Exception: System.Data.Odbc.OdbcException: ERROR [H] [unixODBC][\" (#25269) at dotnet/corefx","RelatedBody":"```sh\r\n# odbcinst -j\r\nunixODBC 2.3.4\r\nDRIVERS............: /etc/odbcinst.ini\r\nSYSTEM DATA SOURCES: /etc/odbc.ini\r\nFILE DATA SOURCES..: /etc/ODBCDataSources\r\nUSER DATA SOURCES..: /root/.odbc.ini\r\nSQLULEN Size.......: 8\r\nSQLLEN Size........: 8\r\nSQLSETPOSIROW Size.: 8\r\n```\r\n\r\n```sh\r\n# dotnet --info\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n```\r\n\r\n```sh\r\n# cat /root/.odbcinst.ini\r\n[ODBC]\r\nTraceFile=/tmp/sql.log\r\nTrace=Yes\r\n\r\n[ODBC Drivers]\r\nCloudera ODBC Driver for Impala=Installed\r\n\r\n[Cloudera ODBC Driver for Impala]\r\nDescription=Cloudera ODBC Driver for Impala\r\nDriver=/opt/cloudera/impalaodbc/lib/64/libclouderaimpalaodbc64.so\r\n```\r\n\r\n```sh\r\n# odbcinst -q -d\r\n[ODBC Drivers]\r\n[Cloudera ODBC Driver for Impala]\r\n```\r\n\r\n```sh\r\n# dpkg -l | grep cloudera\r\nii  clouderaimpalaodbc          2.5.40.1025-2                  all          Cloudera ODBC Driver for Impala\r\n```\r\n\r\n```sh\r\n# dotnet run\r\n\r\nUnhandled Exception: System.Data.Odbc.OdbcException: ERROR [H] [unixODBC][\r\n   at System.Data.Odbc.OdbcConnectionHandle..ctor(OdbcConnection connection, OdbcConnectionString constr, OdbcEnvironmentHandle environmentHandle)\r\n   at System.Data.Odbc.OdbcConnectionOpen..ctor(OdbcConnection outerConnection, OdbcConnectionString connectionOptions)\r\n   at System.Data.Odbc.OdbcConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningObject)\r\n   at System.Data.ProviderBase.DbConnectionFactory.CreateNonPooledConnection(DbConnection owningConnection, DbConnectionPoolGroup poolGroup, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)\r\n   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\r\n   at System.Data.ProviderBase.DbConnectionInternal.OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory)\r\n   at System.Data.Odbc.OdbcConnection.Open()\r\n   at dotnet_cross_odbc.Program.Main(String[] args) in /root/dotnet-cross-odbc/src/dotnet-cross-odbc/Program.cs:line 12\r\n```\r\n\r\n\r\n*P.S: the host and database has been replaced with '*.*.*.*'*\r\n\r\n```txt\r\n# cat /tmp/sql.log\r\n[ODBC][4192][1510748384.915616][__handles.c][460]\r\n                Exit:[SQL_SUCCESS]\r\n                        Environment = 0x171d2e0\r\n[ODBC][4192][1510748384.917195][SQLSetEnvAttr.c][189]\r\n                Entry:\r\n                        Environment = 0x171d2e0\r\n                        Attribute = SQL_ATTR_ODBC_VERSION\r\n                        Value = 0x3\r\n                        StrLen = -6\r\n[ODBC][4192][1510748384.917219][SQLSetEnvAttr.c][364]\r\n                Exit:[SQL_SUCCESS]\r\n[ODBC][4192][1510748384.917230][SQLSetEnvAttr.c][189]\r\n                Entry:\r\n                        Environment = 0x171d2e0\r\n                        Attribute = SQL_ATTR_CONNECTION_POOLING\r\n                        Value = 0x2\r\n                        StrLen = -6\r\n[ODBC][4192][1510748384.917237][SQLSetEnvAttr.c][364]\r\n                Exit:[SQL_SUCCESS]\r\n[ODBC][4192][1510748384.918088][SQLAllocHandle.c][375]\r\n                Entry:\r\n                        Handle Type = 2\r\n                        Input Handle = 0x171d2e0\r\n[ODBC][4192][1510748384.918112][SQLAllocHandle.c][493]\r\n                Exit:[SQL_SUCCESS]\r\n                        Output Handle = 0x171df10\r\n[ODBC][4192][1510748384.918506][SQLSetConnectAttrW.c][332]\r\n                Entry:\r\n                        Connection = 0x171df10\r\n                        Attribute = SQL_ATTR_LOGIN_TIMEOUT\r\n                        Value = 0xf\r\n                        StrLen = -5\r\n[ODBC][4192][1510748384.918646][SQLSetConnectAttrW.c][606]\r\n                Exit:[SQL_SUCCESS]\r\n[ODBC][4192][1510748384.919578][SQLDriverConnectW.c][290]\r\n                Entry:\r\n                        Connection = 0x171df10\r\n                        Window Hdl = (nil)\r\n                        Str In = [Driver=Cloudera ODBC Driver for Impala;Host=*.*.*.*;Port=21050;Database=*;][length = 82 (SQL_NTS)]\r\n                        Str Out = (nil)\r\n                        Str Out Max = 0\r\n                        Str Out Ptr = 0x7ffe4c382190\r\n                        Completion = 0\r\n                UNICODE Using encoding ASCII 'ANSI_X3.4-1968' and UNICODE 'UCS-2LE'\r\n\r\n[ODBC][4192][1510748384.928525][SQLDriverConnectW.c][699]\r\n                Exit:[SQL_ERROR]\r\n[ODBC][4192][1510748384.931695][SQLGetDiagRecW.c][514]\r\n                Entry:\r\n                        Connection = 0x171df10\r\n                        Rec Number = 1\r\n                        SQLState = 0x7ffe4c381f40\r\n                        Native = 0x7ffe4c382130\r\n                        Message Text = 0x17ba0f0\r\n                        Buffer Length = 1024\r\n                        Text Len Ptr = 0x7ffe4c382128\r\n[ODBC][4192][1510748384.931733][SQLGetDiagRecW.c][561]\r\n                Exit:[SQL_SUCCESS]\r\n                        SQLState = [H]\r\n                        Native = 0x7ffe4c382130 -> 10360\r\n                        Message Text = [[unixODBC][]\r\n[ODBC][4192][1510748384.931772][SQLGetDiagRecW.c][514]\r\n                Entry:\r\n                        Connection = 0x171df10\r\n                        Rec Number = 2\r\n                        SQLState = 0x7ffe4c381f40\r\n                        Native = 0x7ffe4c382130\r\n                        Message Text = 0x17ba0f0\r\n                        Buffer Length = 1024\r\n                        Text Len Ptr = 0x7ffe4c382128\r\n[ODBC][4192][1510748384.931783][SQLGetDiagRecW.c][561]\r\n                Exit:[SQL_NO_DATA]\r\n```\r\n\r\nSource Repo on GitHub: https://github.com/qqbuby/dotnet-cross-odbc\r\n"},{"Id":"6867683448","Type":"PullRequestEvent","CreatedAt":"2017-11-17T01:54:32","Actor":"shmao","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25309","RelatedDescription":"Opened pull request \"Capture Syndication DateTime Parsing Exceptions\" (#25309) at dotnet/corefx","RelatedBody":"The PR capture the DateTime parsing exceptions and throw them only until the property gets used. This could help those applications that encounter DateTime string error but do not actually use the value of the DateTime.\r\n\r\nFix #25156 "},{"Id":"6867672943","Type":"PullRequestEvent","CreatedAt":"2017-11-17T01:50:44","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25308","RelatedDescription":"Opened pull request \"S.L.Expressions: Remove pre-generated delegate for CallSite-only delegate.\" (#25308) at dotnet/corefx","RelatedBody":"Has no actual dynamic arguments."},{"Id":"6867607940","Type":"PullRequestEvent","CreatedAt":"2017-11-17T01:27:57","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25307","RelatedDescription":"Opened pull request \"Expose and test TryFormat methods on {S}Byte, {U}Int16/32/64, Boolean\" (#25307) at dotnet/corefx","RelatedBody":"Depends on https://github.com/dotnet/coreclr/pull/15069\r\nDepends on https://github.com/dotnet/corert/pull/4953\r\nContributes to https://github.com/dotnet/corefx/issues/22403\r\nContributes to https://github.com/dotnet/coreclr/issues/13544\r\nContributes to https://github.com/dotnet/corefx/issues/22616"},{"Id":"6867563571","Type":"IssuesEvent","CreatedAt":"2017-11-17T01:12:25","Actor":"arturl","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/25306","RelatedDescription":"Opened issue \"X509Store.Add pops up a dialog, fails on OneCore systems\" (#25306) at dotnet/corefx","RelatedBody":"Repro:\r\n\r\n```\r\nusing System;\r\nusing System.Security.Cryptography.X509Certificates;\r\n\r\nnamespace CertTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            X509Store store = new X509Store(StoreName.Root, StoreLocation.CurrentUser);\r\n            store.Open(OpenFlags.ReadWrite);\r\n            string certPath = \"c:\\\\test\\\\t.cer\";\r\n            store.Add(new X509Certificate2(X509Certificate2.CreateFromCertFile(certPath)));\r\n            Console.WriteLine(\"Added Cert: \" + certPath);\r\n            store.Close();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe code below pops up a dialog: \"You are about to install a certificate from a certification authority... \":\r\n\r\n![image](https://user-images.githubusercontent.com/1875734/32924226-6bac68ee-caf0-11e7-934e-afef4e317c16.png)\r\n\r\nwhen run on a desktop version on Windows. On a GUI-less OneCore system (such as Nano or IoT Core), it fails immediately with exception \r\n`Internal.Cryptography.CryptoThrowHelper.WindowsCryptographicException: 'The operation was canceled by the user'` making this API completely unusable.\r\n\r\nInterestingly, the API succeeds on Linux.\r\n\r\nSo either we have a security hole on Linux, or we need to fix it on Windows (at least OneCore SKUs) to avoid the dialog.\r\n\r\nThe popup can be avoided when the certificate is added to the local machine root, however that only works for an administrator and is not possible for many scenarios."},{"Id":"6867458227","Type":"PullRequestEvent","CreatedAt":"2017-11-17T00:35:46","Actor":"nategraf","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25305","RelatedDescription":"Opened pull request \"Fix issue where CI perf builds fail by invoking sudo\" (#25305) at dotnet/corefx","RelatedBody":"(This build)[https://ci2.dot.net/job/dotnet_corefx/job/perf/job/master/job/perf_ubuntu14.04_release/1373/console] failed on the new Ubuntu machine pool because of a call to sudo, and no longer running as root. Root permissions are not required to run these commands, so the sudo call should not be needed"},{"Id":"6867444918","Type":"PullRequestEvent","CreatedAt":"2017-11-17T00:31:18","Actor":"JonHanna","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25304","RelatedDescription":"Opened pull request \"Fix two issues related to high-arity lambda expressions.\" (#25304) at dotnet/corefx","RelatedBody":"* Only use two bytes for arguments of `ldarg` and relatives in S.L.Expressions.\r\n\r\nFixes #25301\r\n\r\n* Always throw InvalidProgramException compiling lambdas too many params\r\n\r\nConsistent between interpreter and compiler, and later code can depend on the count being valid.\r\n\r\nFixes #25302"},{"Id":"6867394210","Type":"PullRequestEvent","CreatedAt":"2017-11-17T00:13:52","Actor":"Drawaes","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/25286","RelatedDescription":"Closed pull request \"[WIP] Ssl stream bug hunt - trying to find the outerloop failure\" (#25286) at dotnet/corefx","RelatedBody":"I have just free'd the GCHandle rather than setting it to null."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6868180935","Type":"IssuesEvent","CreatedAt":"2017-11-17T05:19:21","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/15290","RelatedDescription":"Closed issue \"Async state machine fields should be reused where possible for user-defined locals/parameters\" (#15290) at dotnet/roslyn","RelatedBody":"Example:\r\n```C#\r\nusing System;\r\nusing System.Threading.Tasks;\r\n\r\nclass Test\r\n{\r\n    public static void Main(string[] args) => MainAsync(args).GetAwaiter().GetResult();\r\n    private static async Task MainAsync(string[] args)\r\n    {\r\n        if (args.Length > 0)\r\n        {\r\n            int a = 1;\r\n            await Task.Yield();\r\n            Console.WriteLine(a);\r\n        }\r\n        else\r\n        {\r\n            int b = 2;\r\n            await Task.Yield();\r\n            Console.WriteLine(b);\r\n        }\r\n    }\r\n}\r\n```\r\nIn a release build, this generates a state machine with these fields:\r\n```C#\r\npublic int <>1__state;\r\npublic AsyncTaskMethodBuilder <>t__builder;\r\nprivate YieldAwaitable.YieldAwaiter <>u__1;\r\nprivate int <a>5__1;\r\nprivate int <b>5__2;\r\npublic string[] args;\r\n```\r\nNote that that even though the two variables ```a``` and ```b``` are both int and have non-overlapping scopes/lifetimes, the state machine still contains a field for each rather than reusing the same field for both.\r\n\r\nRelated, consider:\r\n```C#\r\nusing System;\r\nusing System.Threading.Tasks;\r\n\r\nclass Test\r\n{\r\n    public static void Main(string[] args) => MainAsync(args).GetAwaiter().GetResult();\r\n    private static async Task MainAsync(string[] args)\r\n    {\r\n        if (args.Length > 0)\r\n        {\r\n            await Task.Yield();\r\n            Console.WriteLine(args.Length);\r\n        }\r\n        else\r\n        {\r\n            string[] data = new string[1];\r\n            await Task.Yield();\r\n            Console.WriteLine(data.Length);\r\n        }\r\n    }\r\n}\r\n```\r\nEven though ```args``` and ```data``` don't have overlapping lifetimes, the compiler still outputs in release a field for each:\r\n```C#\r\npublic int <>1__state;\r\npublic AsyncTaskMethodBuilder <>t__builder;\r\nprivate YieldAwaitable.YieldAwaiter <>u__1;\r\nprivate string[] <data>5__1;\r\npublic string[] args;\r\n```"},{"Id":"6868136652","Type":"PullRequestEvent","CreatedAt":"2017-11-17T04:58:42","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23237","RelatedDescription":"Opened pull request \"Change the 'Use auto property' code fixer to not be a 'compilation end' analyzer.\" (#23237) at dotnet/roslyn","RelatedBody":"Fixes: https://github.com/dotnet/roslyn/issues/23216\r\nFixes: https://github.com/dotnet/roslyn/issues/23215\r\n\r\nThis PR changes the 'use auto property' code fixer to work as a Semantic-Model-Analyzer, instead of a Compilation-End analyzer.  Compilation-End-Analyzers are basically an unusable part of the analyzer API for code that wants to run in VS.  They are too expensive, and users can't interact with their results in a timely manner, like they can with normal analyzers.\r\n\r\nAs part of making this happen, I had to make a small change to the functionality of the feature.  Specifically, we used to determine if it was safe to make the change by analyzing all usages of a the field-to-remove in the project the feature was analyzing.  This was very expensive, but was necessary in case some code was using the field in an unexpected manner.  Now, we limit the feature to only private fields.  This means we can do that analysis in a timely manner, as we only have to examine the type it is contained in.  \r\n\r\nThis should have very little end user impact as the majority of user fields are private (esp. the ones that are paired with a property that you'd want ot make an auto prop out of).\r\n"},{"Id":"6868082756","Type":"IssuesEvent","CreatedAt":"2017-11-17T04:33:05","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23236","RelatedDescription":"Opened issue \"It looks like VisualBasicOperationFactory.CreateBoundUserDefinedShortCircuitingOperatorOperation drops left operand conversions for success cases\" (#23236) at dotnet/roslyn","RelatedBody":""},{"Id":"6868072615","Type":"IssuesEvent","CreatedAt":"2017-11-17T04:28:19","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22505","RelatedDescription":"Closed issue \"Incorrect inference of default literal expression\" (#22505) at dotnet/roslyn","RelatedBody":"I am trying out C# 7.1 feature default literal expression.\r\n```\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var a = Expression.Constant(default(int), typeof(int));\r\n            Console.WriteLine(a.Value);\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n```\r\nGenerates output\r\n```\r\nPM> dotnet run\r\n0\r\nHello World!\r\n```\r\nBut VS shows me code fix that default expression can be simplified.\r\n![image](https://user-images.githubusercontent.com/1528107/31153072-e8ceb468-a853-11e7-9638-e8a288420a7b.png)\r\nWhen I get VS to simplify the code\r\n```\r\n        static void Main(string[] args)\r\n        {\r\n            var a = Expression.Constant(default, typeof(int));\r\n            Console.WriteLine(a.Value);\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n```\r\nThe code throws exception\r\n```\r\nPM> dotnet run\r\ndotnet : \r\nAt line:1 char:1\r\n+ dotnet run\r\n+ ~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:String) [], RemoteException\r\n    + FullyQualifiedErrorId : NativeCommandError\r\n \r\nUnhandled Exception:\r\n \r\nSystem.ArgumentException: Argument types do not match\r\n   at System.Linq.Expressions.Expression.Constant(Object value, Type type)\r\n   at DefaultLiteral.Program.Main(String[] args) in C:\\users\\smpatel\\Source\\Repos\\DefaultLiteral\\DefaultLiteral\\Program.cs:line 10\r\n```\r\n\r\n"},{"Id":"6868036586","Type":"PullRequestEvent","CreatedAt":"2017-11-17T04:11:27","Actor":"pdelvo","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23235","RelatedDescription":"Opened pull request \"Fixes that arrays of pointers cannot be used in pattern matching\" (#23235) at dotnet/roslyn","RelatedBody":"This PR fixes #23100. The compiler was not able to parse arrays of pointers in pattern places. It would wrongly assume that a pointer was not allowed in this context even though it was followed by an array creation.\r\n\r\n**Risk**\r\n\r\nThe issue suggests that the bug is a regression that causes the compiler to not compile valid code.\r\n\r\n**Performance impact**\r\n\r\nThe performance impact should be low. The reset is only executed in very few cases e.g. if there is a multiplication in a pattern or if a pointer is used in a pattern (which does not compile).\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nYes! The code compiled with the native compiler.\r\n\r\n**Root cause analysis:**\r\n\r\nIt was missed that a pointer type can follow an is/case if it is part of an array type. I added a test for that.\r\n\r\n\r\n\r\n@gafter You were assigned to this. i hope it is not a problem that I went ahead and took a shot at this.\r\n\r\nPro Tip: This diff is easier to read by adding ?w=0 to the github url. This hides changes because of indentation."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6867860959","Type":"PullRequestEvent","CreatedAt":"2017-11-17T02:59:50","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4931","RelatedDescription":"Merged pull request \"Added support for calling methods via virtual slots in WASM\" (#4931) at dotnet/corert","RelatedBody":"This fills out more of the implementation for #4515. In order to finish we still need to check for null *this* pointer and implement interface dispatch, which requires runtime support."},{"Id":"6867604363","Type":"PullRequestEvent","CreatedAt":"2017-11-17T01:26:41","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4953","RelatedDescription":"Opened pull request \"Adjust corert code for moving integer parsing/formatting to shared\" (#4953) at dotnet/corert","RelatedBody":"- Deletes code that's moved to shared.\r\n- Consolidates the rest without logic change into Number.CoreRT.cs.\r\n- Fixes up a few functions to work with the changes in the shared code.\r\n\r\nDepends on https://github.com/dotnet/coreclr/pull/15069\r\nContributes to https://github.com/dotnet/corefx/issues/22403\r\nContributes to https://github.com/dotnet/coreclr/issues/13544\r\nContributes to https://github.com/dotnet/corefx/issues/22616\r\ncc: @jkotas "},{"Id":"6867222258","Type":"IssuesEvent","CreatedAt":"2017-11-16T23:20:53","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/428","RelatedDescription":"Closed issue \"Cannot build CoreRT managed parts when targeting ARM\" (#428) at dotnet/corert","RelatedBody":"When compiling directly on ARM of via cross compilation, I'm getting the following MSBuild error:\n\n```\n~/corert/packages/Microsoft.Build.Mono.Debug.14.1.0.0-prerelease/lib/Microsoft.Common.CurrentVersion.targets(1814,5): error MSB4018: The \"ResolveAssemblyReference\" task failed unexpectedly. [~/corert/src/ILCompiler.Compiler/src/ILCompiler.Compiler.csproj]\n~/corert/packages/Microsoft.Build.Mono.Debug.14.1.0.0-prerelease/lib/Microsoft.Common.CurrentVersion.targets(1814,5): error MSB4018: This is an unhandled exception from a task -- PLEASE OPEN A BUG AGAINST THE TASK OWNER. [~/corert/src/ILCompiler.Compiler/src/ILCompiler.Compiler.csproj]\n~/corert/packages/Microsoft.Build.Mono.Debug.14.1.0.0-prerelease/lib/Microsoft.Common.CurrentVersion.targets(1814,5): error MSB4018: System.IO.FileLoadException: The assembly name is invalid. [~/corert/src/ILCompiler.Compiler/src/ILCompiler.Compiler.csproj]\n~/corert/packages/Microsoft.Build.Mono.Debug.14.1.0.0-prerelease/lib/Microsoft.Common.CurrentVersion.targets(1814,5): error MSB4018:   at System.Reflection.AssemblyName..ctor (System.String assemblyName) <0x7ff6c8da27f0 + 0x000a2> in <filename unknown>:0  [~/corert/src/ILCompiler.Compiler/src/ILCompiler.Compiler.csproj]\n~/corert/packages/Microsoft.Build.Mono.Debug.14.1.0.0-prerelease/lib/Microsoft.Common.CurrentVersion.targets(1814,5): error MSB4018:   at Microsoft.Build.Tasks.NativeMethods+AssemblyCacheEnum.AssemblyPathFromStrongName (System.String strongName) <0x41650e00 + 0x00043> in <filename unknown>:0  [~/corert/src/ILCompiler.Compiler/src/ILCompiler.Compiler.csproj]\n~/corert/packages/Microsoft.Build.Mono.Debug.14.1.0.0-prerelease/lib/Microsoft.Common.CurrentVersion.targets(1814,5): error MSB4018:   at Microsoft.Build.Tasks.GlobalAssemblyCache.RetreivePathFromFusionName (System.String strongName) <0x416509c0 + 0x001cf> in <filename unknown>:0  [~/corert/src/ILCompiler.Compiler/src/ILCompiler.Compiler.csproj]\n...\n```\n\nAm I missing obvious? For now I'll try to see if I can get the assembly that causes the issue.\n"},{"Id":"6867220592","Type":"IssuesEvent","CreatedAt":"2017-11-16T23:20:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/3895","RelatedDescription":"Closed issue \"[arm] Div/Mod helpers convention\" (#3895) at dotnet/corert","RelatedBody":"From https://github.com/dotnet/corert/pull/3893#discussion_r122217978\r\n\r\nThese helpers do not check for overflow/divide-by-zero in CoreRT, but they do check in CoreCLR - it is what RyuJIT expects. This will need more fixes, but this fix should be fine for now."},{"Id":"6866952361","Type":"PullRequestEvent","CreatedAt":"2017-11-16T22:11:31","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4950","RelatedDescription":"Merged pull request \"[ILVerify] Fix assembly friend access being sensitive to white-spaces\" (#4950) at dotnet/corert","RelatedBody":"As described in #4938, ILVerify should not be sensitive to white-spaces when validating assembly friend access.\r\n\r\nI could not find any clear definitions of allowed values for the string passed to the `InternalsVisibleToAttribute`. Are there any other rules I should consider (e.g. case insensitivity, etc.)?\r\n\r\nThis fixes #4938.\r\n\r\nTagging @jcouv @VSadov "},{"Id":"6866952357","Type":"IssuesEvent","CreatedAt":"2017-11-16T22:11:31","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4938","RelatedDescription":"Closed issue \"ILVerify is sensitive to spaces in handling InternalsVisibleTo\" (#4938) at dotnet/corert","RelatedBody":"The following Roslyn test illustrates the problem.\r\nI have verified that the compiler emits the space into metadata (see output from ildasm below). So I expect that ILVerify would tolerate such spaces, just like PEVerify does.\r\n\r\nFrom ildasm:\r\n```\r\n// Metadata version: v4.0.30319\r\n.assembly extern mscorlib\r\n{\r\n  .publickeytoken = (B7 7A 5C 56 19 34 E0 89 )                         // .z\\V.4..\r\n  .ver 4:0:0:0\r\n}\r\n.assembly test\r\n{\r\n  .custom instance void [mscorlib]System.Runtime.CompilerServices.CompilationRelaxationsAttribute::.ctor(int32) = ( 01 00 08 00 00 00 00 00 ) \r\n  .custom instance void [mscorlib]System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::.ctor() = ( 01 00 01 00 54 02 16 57 72 61 70 4E 6F 6E 45 78   // ....T..WrapNonEx\r\n                                                                                                             63 65 70 74 69 6F 6E 54 68 72 6F 77 73 01 )       // ceptionThrows.\r\n\r\n  // --- The following custom attribute is added automatically, do not uncomment -------\r\n  //  .custom instance void [mscorlib]System.Diagnostics.DebuggableAttribute::.ctor(valuetype [mscorlib]System.Diagnostics.DebuggableAttribute/DebuggingModes) = ( 01 00 07 01 00 00 00 00 ) \r\n\r\n// NOTICE SPACE AFTER X\r\n  .custom instance void [mscorlib]System.Runtime.CompilerServices.InternalsVisibleToAttribute::.ctor(string) = ( 01 00 02 58 20 00 00 )                            // ...X ..\r\n  .hash algorithm 0x00008004\r\n  .ver 0:0:0:0\r\n}\r\n.module test.dll\r\n// MVID: {C05011C9-BAA4-4396-9ACD-3F6EBF9B116B}\r\n.imagebase 0x10000000\r\n.file alignment 0x00000200\r\n.stackreserve 0x00100000\r\n.subsystem 0x0003       // WINDOWS_CUI\r\n.corflags 0x00000001    //  ILONLY\r\n// Image base: 0x02A00000\r\n```\r\n\r\nThe test:\r\n```C#\r\n        [Fact]\r\n        public void Bug1072350()\r\n        {\r\n            const string sourceA = @\"\r\n[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(\"\"X \"\")] // <----- notice space after X\r\ninternal class A\r\n{\r\n    internal static int I = 42;\r\n}\";\r\n\r\n            const string sourceB = @\"\r\nclass B\r\n{\r\n    static void Main()\r\n    {\r\n        System.Console.Write(A.I);\r\n    }\r\n}\";\r\n\r\n            var ca = CreateStandardCompilation(sourceA, options: TestOptions.ReleaseDll, assemblyName: \"ClassLibrary2\");\r\n            CompileAndVerify(ca);\r\n\r\n            var cb = CreateStandardCompilation(sourceB, options: TestOptions.ReleaseExe, assemblyName: \"X\", references: new[] { new CSharpCompilationReference(ca) });\r\n            CompileAndVerify(cb, expectedOutput: \"42\").Diagnostics.Verify();\r\n        }\r\n```\r\n\r\nThe test fails with:\r\n```\r\nIlVerify failed for assembly 'X':\r\n[IL]: Error: [X : B::Main()][offset 0x00000000] Field is not visible.\r\n```\r\nRelates to this Roslyn fix: https://github.com/dotnet/roslyn/commit/9ee9c480\r\n\r\nTagging @gafter @VSadov @ArztSamuel @jkotas "}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6867664505","Type":"PullRequestEvent","CreatedAt":"2017-11-17T01:47:51","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1756","RelatedDescription":"Opened pull request \"Update the implicit Runtime Framework version to 2.0\" (#1756) at dotnet/sdk","RelatedBody":"This one is targeting master."},{"Id":"6867650789","Type":"IssuesEvent","CreatedAt":"2017-11-17T01:43:02","Actor":"splusq","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1755","RelatedDescription":"Opened issue \".NET Standard 2.0 class library, that references a .NET Framework 4.7.1 class library with PackageReference fails\" (#1755) at dotnet/sdk","RelatedBody":"I have a .NET Standard 2.0 class library, that references a .NET Framework 4.7.1 class library (works fine)\r\n\r\nHowever, if the .NET Framework 4.7.1 adds a PackageReference (new style), I get the following error (possibly due to transitivity):\r\n\r\nError    NU1201           Project ClassLibrary2 is not compatible with netstandard2.0 (.NETStandard,Version=v2.0). Project ClassLibrary2 supports: net471 (.NETFramework,Version=v4.7.1)     \r\n\r\nThe package in question being added can be any package, packages that have support for .NET Standard or otherwise, the same error.\r\n\r\nWhat am I missing?\r\n"},{"Id":"6867499844","Type":"IssuesEvent","CreatedAt":"2017-11-17T00:50:34","Actor":"mattscheffer","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1754","RelatedDescription":"Opened issue \".NET 4.7.1 app referencing fields .NET standard 2.0 can cause missing field exception from select assemblies\" (#1754) at dotnet/sdk","RelatedBody":"Found in D15Rel 27110.0\r\n1.Create a .NET 4.7.1 C# console app and a ,NET Standard 2.0 class library.\r\n2. Inside the Class Library add the following field/constructor to the class.\r\n```\r\npublic System.Net.Http.StringContent StringContent;\r\n        public Class1()\r\n        {\r\n            StringContent = new System.Net.Http.StringContent(\"asdf\");\r\n        }\r\n```\r\n3. Add a reference from the class library to the console app. \r\n4. Add some code to reference StringContent in the Main method of the console app such as:\r\n```\r\nClass1 c= new Class1();\r\nc.StringContent.GetType();\r\n```\r\n5. Start debugging\r\n\r\nExpected:\r\nApplication builds fine and runs fine.\r\n\r\nActual:\r\nApplication breaks during execution. Following is found in the output:\r\nAn unhandled exception of type 'System.MissingFieldException' occurred in Unknown Module.\r\nField not found: 'ClassLibrary1.Class1.StringContent'.\r\n\r\nThis also occurs with System.IO.Compression.ZipArchive"},{"Id":"6867467915","Type":"PullRequestEvent","CreatedAt":"2017-11-17T00:39:12","Actor":"nugetlurker","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1753","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.5.0-rtm-4651 into sdk\" (#1753) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.5.0-rtm-4651 into sdk release/15.5 branch"},{"Id":"6867343209","Type":"PullRequestEvent","CreatedAt":"2017-11-16T23:57:12","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1747","RelatedDescription":"Closed pull request \"Updating the implicit Microsoft.NETCore.App version from 2.0 to 2.0.0 for 15.5\" (#1747) at dotnet/sdk","RelatedBody":"Updating the implicit Microsoft.NETCore.App version from 2.0 to 2.0.0. This will make sure that when evaluating RuntimeFrameworkVersion we will get a 3 digit number.\r\n\r\nTest coming.\r\n\r\nPart one of the fix to https://github.com/dotnet/cli/issues/7901. This needs to be fixed in both 2.0 and 2.1"},{"Id":"6867342584","Type":"PullRequestEvent","CreatedAt":"2017-11-16T23:57:02","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1746","RelatedDescription":"Closed pull request \"Updating the implicit Microsoft.NETCore.App version from 2.0 to 2.0.0 for 2.0.0\" (#1746) at dotnet/sdk","RelatedBody":"Updating the implicit Microsoft.NETCore.App version from 2.0 to 2.0.0. This will make sure that when evaluating RuntimeFrameworkVersion we will get a 3 digit number.\r\n\r\nPart one of the fix to https://github.com/dotnet/cli/issues/7901."},{"Id":"6867272531","Type":"IssuesEvent","CreatedAt":"2017-11-16T23:35:23","Actor":"jaredpar","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1752","RelatedDescription":"Opened issue \"Errors running build.cmd \" (#1752) at dotnet/sdk","RelatedBody":"When running build.cmd on my machine i see the following errors many times during the test phase:\r\n\r\n>C:\\Users\\jaredpar\\code\\sdk\\bin\\Debug\\Tests\\PCL_Project_reference_compat_TestID_netstandard1.0_Profile259\\Referencer\\Dependency\\Dependency.csproj(46,3): error MSB4019: The imported project \"C:\\MSBuild\\Microsoft\\Portable\\v4.5\\Microsoft.Portable.CSharp.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk. [C:\\Users\\jaredpar\\code\\sdk\\build\\build.proj]\r\n\r\nThe structure of the error indicates it's trying to resolve target files for a 4.5 portable project. Yet the fact the error quotes `c:\\MSBuild` throws me off a bit as that is not the installation location of MSBuild. \r\n\r\nIs there some pre-req I'm missing? \r\n\r\n"},{"Id":"6867228138","Type":"PullRequestEvent","CreatedAt":"2017-11-16T23:22:30","Actor":"jaredpar","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1751","RelatedDescription":"Opened pull request \"Add DisableImplicitTransitiveReferences\" (#1751) at dotnet/sdk","RelatedBody":"This implements the feature described in #1750. It provides projects with a way to\r\nexplicitly opt-out of implicit transitive refernces by setting the\r\nDisableImplicitTransitiveReferences property to `'true'`.\r\n\r\ncloses #1750"},{"Id":"6867008226","Type":"PullRequestEvent","CreatedAt":"2017-11-16T22:24:40","Actor":"tmeschter","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1749","RelatedDescription":"Merged pull request \"Make CoreGenerateSatelliteAssemblies work for VB\" (#1749) at dotnet/sdk","RelatedBody":"Fixes #1748.\r\n\r\nThe `CoreGenerateSatelliteAssemblies` task first calls the\r\n`WriteCodeFragment` task to write a bunch of attributes to a .cs file,\r\nand then calls the `Csc` task to compile it (along with the .resource\r\nfiles, of course).\r\n\r\nHowever, the call to `WriteCodeFragment` will use the project's language\r\nto generate the source file. This means that in a VB project we'll end\r\nup generating VB code into a .cs file which we then try to compile with\r\ncsc.exe. That doesn't end well.\r\n\r\nThe fix here is to always pass \"C#\" as the language to\r\n`WriteCodeFragment`."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"931255246872915968","CreatedAt":"2017-11-16T20:18:47+00:00","UserScreenname":"dotnet","Text":"Migrate your .NET apps to the cloud and benefit from easier deployments and scalability, without rearchitecting you… https://t.co/gNfBFe3Sbh","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":61,"FavoriteCount":30,"RawContent":null},{"Id":"931205222579318784","CreatedAt":"2017-11-16T17:00:00+00:00","UserScreenname":"dotnet","Text":"Having trouble moving to .NET Core because of missing Windows APIs? Introducing the Windows Compatibility Pack for… https://t.co/s3KKSJ467u","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":113,"FavoriteCount":63,"RawContent":null},{"Id":"930891655422627840","CreatedAt":"2017-11-15T20:14:00+00:00","UserScreenname":"dotnet","Text":"And .NET support for new type Tensor&lt;T&gt; for making it easy to consume ML models! https://t.co/hc2d45S8xA… https://t.co/3ozhgcMLFo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":55,"FavoriteCount":30,"RawContent":null},{"Id":"930889390716362752","CreatedAt":"2017-11-15T20:05:00+00:00","UserScreenname":"dotnet","Text":"Introducing Nullable Reference Types in C# https://t.co/JGzo1B0MX0 #MSFTConnect","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":188,"FavoriteCount":151,"RawContent":null},{"Id":"930879325703778304","CreatedAt":"2017-11-15T19:25:00+00:00","UserScreenname":"dotnet","Text":"Learn all about Span&lt;T&gt; in C# from @jaredpar https://t.co/VqyFhWyYzU #MSFTConnect https://t.co/iQXWmJUT1n","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":164,"FavoriteCount":82,"RawContent":null},{"Id":"930878066112413696","CreatedAt":"2017-11-15T19:20:00+00:00","UserScreenname":"dotnet","Text":"Watch @MadsTorgersen show us what's new with C# 7.1 &amp; 7.2 and a preview of C# 8.0 https://t.co/K3StaNc71s… https://t.co/lK52YqAXoa","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":294,"FavoriteCount":170,"RawContent":null},{"Id":"930876221054791680","CreatedAt":"2017-11-15T19:12:40+00:00","UserScreenname":"dotnet","Text":"Any .NET developers interested in moving their .NET Framework services to the cloud without code changes? This is a… https://t.co/ZZ9fJdPsT4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":33,"FavoriteCount":14,"RawContent":null}]}},"RunOn":"2017-11-17T05:30:21.6833398Z","RunDurationInMilliseconds":7798}