{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin and .NET Developer Events in August!","PublishedOn":"2018-08-01T19:46:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This year&#8217;s .NET Conf is coming to you September 12 &#8211; 14, 2018! Over the course of the three days, you have a wide selection of live sessions that feature speakers from the community and...","Href":"https://blog.xamarin.com/xamarin-dotnet-developer-events-august/","RawContent":null},{"Title":"Guest Post: Visual UI tests on iOS simulator using Xamarin and Appium","PublishedOn":"2018-07-30T19:07:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post from Sophie Tagar, a customer support engineer at Applitools. Previously, Sophie was a software developer at Matrix Israel where, among other things, she did full stack...","Href":"https://blog.xamarin.com/visual-ui-tests-ios-simulator-using-xamarin-appium/","RawContent":null},{"Title":"Announcing Xamarin.Android 9.0 (P) Preview","PublishedOn":"2018-07-27T16:11:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Android 9.0 (P) introduces many features such as Wi-Fi RTT(Round-Trip-Time), Display cutout support, Notification enhancements, Multi-camera support, and much more. We&#8217;re excited to announce...","Href":"https://blog.xamarin.com/xamarin-android-9-0-p-preview/","RawContent":null},{"Title":"Previewing Files Inside Your Xamarin.iOS App","PublishedOn":"2018-07-25T18:21:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If your app interacts with files, such as email attachments or photos, allowing users to preview those files without leaving your app is a great way to enhance the user&#8217;s experience....","Href":"https://blog.xamarin.com/previewing-files-with-xamarin-ios/","RawContent":null},{"Title":"Xamarin.Forms 3.1: Improving the Little Things","PublishedOn":"2018-07-18T19:27:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Earlier this year, we surveyed Xamarin.Forms developers about the kinds of custom controls and extra platform code being written repeatedly that should be considered for support “in the box”. From...","Href":"https://blog.xamarin.com/xamarin-forms-3-1-improvments/","RawContent":null},{"Title":"Export To Application Insights With AppCenter Continuous Export","PublishedOn":"2018-07-10T03:35:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Five-star mobile apps have one special feature: they don’t let go of their users. This can be achieved by understanding your app, the app’s users, and how these users interact with your app. The deep...","Href":"https://blog.xamarin.com/appcenter-continuous-export-application-insights/","RawContent":null},{"Title":"The Xamarin Show: Exploring Awesome Xamarin & Visual Studio Features","PublishedOn":"2018-07-05T18:50:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Each week on The Xamarin Show we explore the latest and greatest in Xamarin development by looking at new features built into Visual Studio, build native cross-platform user interfaces with...","Href":"https://blog.xamarin.com/xamarin-show-ux-xamarinforms-apis-xamarin-essentials/","RawContent":null},{"Title":"Xamarin Podcast: What’s New in Visual Studio 2017, Xamarin.Forms, and the Android designer","PublishedOn":"2018-07-02T19:36:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, Pierce Boggan and James Montemagno discuss the latest &#038; greatest in mobile .NET development, including Xamarin.Forms 3.0 and 3.1, Visual Studio 2017...","Href":"https://blog.xamarin.com/xamarin-podcast-vs2017-xamarinforms-android-designer/","RawContent":null},{"Title":"Use MSBuild to Define Advanced Android VersionCode","PublishedOn":"2018-06-28T16:20:34+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With the introduction of Xamarin.Android v7.2, two new MSBuild properties were also introduced in order to make maintaining Android VersionCode for Android apps even easier: AndroidVersionCodePattern...","Href":"https://blog.xamarin.com/advanced-android-versioncode/","RawContent":null},{"Title":"What’s New In the Xamarin Android Designer","PublishedOn":"2018-06-25T20:10:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Backed by your feedback, our team has been able to improve the Xamarin Android Designer significantly since it&#8217;s initial release a few years back. Now, we have a ton of new and exciting work...","Href":"https://blog.xamarin.com/future-xamarin-android-designer/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8058596371","Type":"IssuesEvent","CreatedAt":"2018-08-02T18:59:48","Actor":"Ranzed","Repository":"xamarin/","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2035","RelatedDescription":"Opened issue \"Android native crash on Lo\" (#2035) at xamarin/","RelatedBody":"I have complex cross-platform application. After updating to Xamarin.Android 8.0 (not target framework, just update IDE+sdk) and releasing new version of my app i got native crash\r\n```\r\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\r\npid: 0, tid: 0 >>> com.mypackage.myapp <<<\r\n\r\nbacktrace:\r\n  #00  pc 00000000002bb0ad  /system/lib64/libhoudini.so\r\n  #01  pc 00000000002d8f21  /system/lib64/libhoudini.so\r\n  #02  pc 00000000002becf4  /system/lib64/libhoudini.so\r\n  #03  pc 00000000002beda1  /system/lib64/libhoudini.so\r\n  #04  pc 00000000002f73b4  /system/lib64/libhoudini.so\r\n  #05  pc 00000000002f754b  /system/lib64/libhoudini.so\r\n  #06  pc 0000000000000e7a  <unknown>\r\n  #07  pc 00000000007fb0bf  <unknown>\r\n```\r\nIt happens only on Xiaomi MiPad 2 with Lollipop (_Build: Xiaomi/latte/latte:5.1/LMY47I_).\r\nPrevious version, build with prevoius Xamarin.Android 7.* works fine. \r\nlibhoudini is a proprietary ARM translation layer for x86-powered Android devices. But all my libs have version for all ABI's in single apk file.\r\n![lib_abi](https://user-images.githubusercontent.com/11093752/43604242-5c11b31c-96a6-11e8-8804-c415fa72b16f.png)\r\n\r\nThe only diff i found is that in assemblies there is no Mono.CSharp.dll in new version, but it was in previous version.\r\n![dll_in_zip](https://user-images.githubusercontent.com/11093752/43604270-6a32b914-96a6-11e8-8c5a-ee5056a81b19.png)\r\n\r\nApp works fine on other devices (Xiaomi phones, Lenovo tab with Intel Atom CPU and Lollipop), so i have no idea why only MiPad2 got a crash.\r\nI can't get physical acces to this device and see logcat (crash on customer's device), but have full bugreport log (tombstone in attach file)\r\nCan anyone help? \r\n[tombstone_log.txt](https://github.com/xamarin/xamarin-android/files/2254776/tombstone_log.txt)"},{"Id":"8058596371","Type":"IssuesEvent","CreatedAt":"2018-08-02T18:59:48","Actor":"Ranzed","Repository":"xamarin/","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2035","RelatedDescription":"Opened issue \"Android native crash on Lo\" (#2035) at xamarin/","RelatedBody":"I have complex cross-platform application. After updating to Xamarin.Android 8.0 (not target framework, just update IDE+sdk) and releasing new version of my app i got native crash\r\n```\r\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\r\npid: 0, tid: 0 >>> com.mypackage.myapp <<<\r\n\r\nbacktrace:\r\n  #00  pc 00000000002bb0ad  /system/lib64/libhoudini.so\r\n  #01  pc 00000000002d8f21  /system/lib64/libhoudini.so\r\n  #02  pc 00000000002becf4  /system/lib64/libhoudini.so\r\n  #03  pc 00000000002beda1  /system/lib64/libhoudini.so\r\n  #04  pc 00000000002f73b4  /system/lib64/libhoudini.so\r\n  #05  pc 00000000002f754b  /system/lib64/libhoudini.so\r\n  #06  pc 0000000000000e7a  <unknown>\r\n  #07  pc 00000000007fb0bf  <unknown>\r\n```\r\nIt happens only on Xiaomi MiPad 2 with Lollipop (_Build: Xiaomi/latte/latte:5.1/LMY47I_).\r\nPrevious version, build with prevoius Xamarin.Android 7.* works fine. \r\nlibhoudini is a proprietary ARM translation layer for x86-powered Android devices. But all my libs have version for all ABI's in single apk file.\r\n![lib_abi](https://user-images.githubusercontent.com/11093752/43604242-5c11b31c-96a6-11e8-8804-c415fa72b16f.png)\r\n\r\nThe only diff i found is that in assemblies there is no Mono.CSharp.dll in new version, but it was in previous version.\r\n![dll_in_zip](https://user-images.githubusercontent.com/11093752/43604270-6a32b914-96a6-11e8-8c5a-ee5056a81b19.png)\r\n\r\nApp works fine on other devices (Xiaomi phones, Lenovo tab with Intel Atom CPU and Lollipop), so i have no idea why only MiPad2 got a crash.\r\nI can't get physical acces to this device and see logcat (crash on customer's device), but have full bugreport log (tombstone in attach file)\r\nCan anyone help? \r\n[tombstone_log.txt](https://github.com/xamarin/xamarin-android/files/2254776/tombstone_log.txt)"},{"Id":"8058586460","Type":"PullRequestEvent","CreatedAt":"2018-08-02T18:57:50","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2031","RelatedDescription":"Merged pull request \"Bump to xamarin/Java.Interop:d15-9@b873e81b\" (#2031) at xamarin/xamarin-android","RelatedBody":"`generator` \"fixed\" output now contains all of the `class-parse` XML\r\nattributes, not a select subset.\r\n\r\nDynamic JVM loading instead of `Java.Runtime.Environment.dll.config`."},{"Id":"8057762668","Type":"PullRequestEvent","CreatedAt":"2018-08-02T16:17:14","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2033","RelatedDescription":"Merged pull request \"Bump to xamarin/xamarin-android-api-compatibility:d15-9@74bcc72b\" (#2033) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/pull/2031\r\nContext: https://jenkins.mono-project.com/job/xamarin-android-pr-builder/3700/\r\nContext: https://jenkins.mono-project.com/job/xamarin-android-pr-builder/3700/API_20Compatibility_20Checks/\r\n\r\nThis will hopefully allow the Java.Interop bump on d15-9 to pass."},{"Id":"8057238559","Type":"PullRequestEvent","CreatedAt":"2018-08-02T14:53:26","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2027","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Fix Aapt2 warnings showing as errors\" (#2027) at xamarin/xamarin-android","RelatedBody":"Fixes (again) #1770\r\n\r\nOn windows we are hitting the same issue where the warnings\r\n`aapt2` is producing are being logged as errors.\r\n\r\nThe weird part is that the \"file\" group was not being populated\r\nwith the right informaton.. This turns out to be down to how\r\n`aapt2` is reporting the warnings..\r\n\r\n\tW/ResourceType(23681): For resource 0x0101053d, entry index(1341) is beyond type entryCount(733)\r\n\tW/ResourceType( 5536): For resource 0x0101053d, entry index(1341) is beyond type entryCount(1155)\r\n\t\t       ^\r\n\t\t    Hmmmmm.\r\n\r\nThis space throws off our regex and results in the entire line\r\nending up in the `message` property.\r\nSo the fix is to update the regex to allow spaces for the `line`\r\ncapture group. We then also need to Trim that value before passing\r\nit into `int.Parse` to ensure we don't get an error."},{"Id":"8057193280","Type":"PullRequestEvent","CreatedAt":"2018-08-02T14:46:48","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1720","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Emit an Error if a custom view cannot be fixed up.\" (#1720) at xamarin/xamarin-android","RelatedBody":"Context https://github.com/xamarin/xamarin-android/issues/1711\r\n\r\nWhen using a custom view within a layout file we replace the\r\n`namespace.classname` with an `md5hash.classname`. We do this\r\nby using the `acwmap.txt` file to make known types onto the\r\n`md5` hashed ones. We do this in a case sensitive manner. We\r\nalso only support Camel case and lower case type names.\r\n\r\n\tClassLibrary1.CustomView=md5d6f7135293df7527c983d45d07471c5e.CustomTextView\r\n\tclasslibrary1.CustomView=md5d6f7135293df7527c983d45d07471c5e.CustomTextView\r\n\r\nGiven that a user is able to type these manually it is highly\r\nprobable that typo's will occur. If for example a user types\r\n\r\n\tClasslibrary1.CustomView\r\n\r\n(Note the lower case `L`) this will NOT be fixed up. Instead the user will recieve the\r\nfollowing error at runtime.\r\n\r\n\tFATAL UNHANDLED EXCEPTION: Android.Views.InflateException: Binary XML file line #1: Binary XML file line #1: Error inflating class Classlibrary1.CustomTextView ---> Android.Views.InflateException: Binary XML file line #1: Error inflating class Classlibrary1.CustomTextView ---> Java.Lang.ClassNotFoundException: Didn't find class \"Classlibrary1.CustomTextView\"\r\n\r\nif you are using the control in a number of places this runtime error\r\ndoes nothing to help track down the problem.\r\n\r\nInstead what we should be doing is detecting these issues and emitting\r\na build error. This will provide the user not only the problem but\r\nalso a link to the file causing the probem.\r\n\r\nTODO\r\n----\r\n\r\n- [x] Fix up the name so it points to the file in `Resources` not `res`\r\n- [x] Add a Unit test.\r\n- [x] Add Error code and document."},{"Id":"8057112050","Type":"IssuesEvent","CreatedAt":"2018-08-02T14:34:28","Actor":"manish","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2034","RelatedDescription":"Opened issue \"Building Android App from VSMac template fails in Release mode with \"The \"ResolveLibraryProjectImports\" task failed unexpectedly. Xamarin.Tools.Zip.ZipException: Premature end of file\"\" (#2034) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create an Android project using VS for Mac Android App template\r\n2. Build in Debug Mode\r\n3. Select Release and Build\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nThe project should build\r\n\r\n### Actual Behavior\r\n\r\nThe project fails to build in Release mode with\r\n\r\n```\r\nResolveLibraryProjectImports\" task failed unexpectedly.\r\nXamarin.Tools.Zip.ZipException: Premature end of file\r\n  at Xamarin.Tools.Zip.ZipEntry.Extract (System.String destinationDir, System.String destinationFileName, System.IO.FileMode outputFileMode) [0x000ca] in <3cfad08900bd41f59fd1a1ea4c4c6c8c>:0 \r\n  at Xamarin.Android.Tools.Files.ExtractAll (Xamarin.Tools.Zip.ZipArchive zip, System.String destination, System.Action`2[T1,T2] progressCallback, System.Func`2[T,TResult] modifyCallback, System.Func`2[T,TResult] deleteCallback, System.Boolean forceUpdate) [0x0013f] in <83926d11b31545cc8ffa045c79833692>:0 \r\n  at Xamarin.Android.Tasks.ResolveLibraryProjectImports.Extract (Java.Interop.Tools.Cecil.DirectoryAssemblyResolver res, System.Collections.Generic.ICollection`1[T] jars, System.Collections.Generic.ICollection`1[T] resolvedResourceDirectories, System.Collections.Generic.ICollection`1[T] resolvedAssetDirectories, System.Collections.Generic.ICollection`1[T] resolvedEnvironments) [0x00528] in <83926d11b31545cc8ffa045c79833692>:0 \r\n  at Xamarin.Android.Tasks.ResolveLibraryProjectImports.Execute () [0x000fc] in <83926d11b31545cc8ffa045c79833692>:0 \r\n  at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute () [0x00023] in /_/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs:631 \r\n  at Microsoft.Build.BackEnd.TaskBuilder+<ExecuteInstantiatedTask>d__26.MoveNext () [0x00212] in /_/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs:787  (MSB4018)\r\n \r\n```\r\n\r\nBuild Log: http://xqa.blob.core.windows.net/gist/log-08fb7caac53e442198b0be88ceb802fb.txt\r\n\r\n### Version Information\r\n\r\n[About VS for Mac](http://xqa.blob.core.windows.net/gist/log-a3787c35fb4e4762a7f8ba328ca97abe.txt)\r\n\r\n### Log File\r\n\r\nVS Mac Ide.log - http://xqa.blob.core.windows.net/gist/TestCreateBuildDroidApp.Ide.log.180801214745-4cfd1e62b922419b89dbc179cf8c4ad1.txt\r\n\r\nNuGet Restore Log - http://xqa.blob.core.windows.net/gist/PackageConsole-Add-All-0c963a30eeff4ef6b1eb939e10bf5b02.txt\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"8056700442","Type":"PullRequestEvent","CreatedAt":"2018-08-02T13:29:53","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1975","RelatedDescription":"Closed pull request \"[xabuild] MSBuild assemblies should not \"Copy Local\"\" (#1975) at xamarin/xamarin-android","RelatedBody":"Mono 2018-04 (or 5.14.x) has some changes to MSBuild assemblies that\r\ncause the following failure when using `xabuild.exe`:\r\n\r\n    Mono: The following assembly referenced from monodroid/external/xamarin-android/bin/Debug/bin/Microsoft.Build.Tasks.Core.dll could not be loaded:\r\n        Assembly:   System.Reflection.Metadata    (assemblyref_index=7)\r\n        Version:    1.3.0.0\r\n        Public Key: b03f5f7f11d50a3a\r\n\r\nCurrently `xabuild.exe` is referencing various MSBuild assemblies that\r\nget copied into `bin/$(Configuration)/bin` and shipped in the OSS zip.\r\n\r\nThis isn't exactly desirable, since we don't really want to ship these\r\nassemblies... These assemblies are OS-specific (as far as I can tell),\r\nI noticed that these assemblies coming from a zip built on macOS do\r\nnot work on Windows.\r\n\r\n`xabuild.exe` does not need to reference any MSBuild assemblies, and\r\nwe can use reflection + custom assembly loading to load MSBuild. This\r\nkeeps `bin/Debug/bin` free of additional assemblies, and now only\r\ncontains a few files:\r\n- xabuild\r\n- xabuild.exe\r\n- xabuild.exe.config\r\n- xabuild.pdb\r\n\r\nBy using the `AppDomain.AssemblyResolve` event, we can add some code\r\nto probe the MSBuild bin directory for assemblies. If not found, we\r\ncan return `null` and let the runtime do its default behavior."},{"Id":"8056679449","Type":"PullRequestEvent","CreatedAt":"2018-08-02T13:26:29","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2033","RelatedDescription":"Opened pull request \"Bump to xamarin/xamarin-android-api-compatibility:d15-9@74bcc72b\" (#2033) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/pull/2031\r\nContext: https://jenkins.mono-project.com/job/xamarin-android-pr-builder/3700/\r\nContext: https://jenkins.mono-project.com/job/xamarin-android-pr-builder/3700/API_20Compatibility_20Checks/\r\n\r\nThis will hopefully allow the Java.Interop bump on d15-9 to pass."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8059032784","Type":"PullRequestEvent","CreatedAt":"2018-08-02T20:29:27","Actor":"dotMorten","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3470","RelatedDescription":"Opened pull request \"Improve error message when not calling base.OnCreate\" (#3470) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nThis change detects that OnCreate was called prior to calling LoadApplication and throws a better error message to help the developer.\r\n\r\n### Issues Resolved ###\r\n\r\nNullReferenceException with no information is thrown if you don't call `base.OnCreate(bundle)` in your subclass. I found lots of forum issues with people reporting the same thing. \r\n\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\nAndroid\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"8058866761","Type":"IssuesEvent","CreatedAt":"2018-08-02T19:56:00","Actor":"DennisWelu","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3469","RelatedDescription":"Opened issue \"Android pan TotalX/TotalY bad when the gesture recognizer view is affected by layout change\" (#3469) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nOn Android, if the view that holds a pan gesture recognizer is affected by a layout change while the pan is running, then the TotalX and TotalY values are incorrect. iOS and UWP do not have this problem. The values are less than they should be, and there is \"jitter\" in the values as they step up and partially back during a linear pan operation.\r\n\r\nOthers have noticed this problem:\r\n1. https://forums.xamarin.com/discussion/118226/android-pangesturerecognizer-jumps-back-and-forth\r\n2. https://forums.xamarin.com/discussion/87287/pangesturerecognizer-behaves-not-as-expected\r\n\r\nI have attached a very simple iOS/Android/UWP project that illustrates the problem. The view with the pan gesture is in the bottom row of a grid, and the grid rows are resized as the pan occurs. See the screenshot below.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Add a PanGestureRecognizer to a control on a page\r\n2. Handle the PanUpdated event, and update the location of the control (or its container) relative to the PanUpdated TotalX/TotalY values\r\n\r\n### Expected Behavior\r\nOn iOS and UWP, the TotalX/TotalY values in the PanUpdated event args will be correct and the affected control moves as expected\r\n\r\n### Actual Behavior\r\nOn Android, the control location lags the mouse position, and the location has \"jitter\"...jumps around as it moves\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.x, 3.x\r\n- Last known good version: Unknown if any\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - Android: 8.1 (but the problem existed in previous versions as well)\r\n\r\n### Screenshots\r\n\r\nHere it is in action (the jitter is not apparent in this compressed gif format):\r\n\r\n![panresizerow](https://user-images.githubusercontent.com/2190011/43607114-ea252bb4-9662-11e8-910e-65adf8b5e11f.gif)\r\n\r\n### Reproduction Link\r\n\r\n[PanResizeRowApp.zip](https://github.com/xamarin/Xamarin.Forms/files/2254960/PanResizeRowApp.zip)\r\n\r\n"},{"Id":"8058851957","Type":"PullRequestEvent","CreatedAt":"2018-08-02T19:53:07","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3468","RelatedDescription":"Opened pull request \"[C] fix TargetNullValue Bindings\" (#3468) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nDue to a flux in the matrix, Bindings with a TargetNullValue assigned\r\nwere always returning that value. It had the advantage of being right\r\nsometimes, but the inconvenient for being wrong, most of the times.\r\n\r\nBy properly aligning the bits of the register with the sun at beer time,\r\nwe can avoid that side effect, and actually returns a value when the\r\nbinding is succesful, and the TargetNullValue whem the Binding returns\r\nnull.\r\n\r\n### Issues Resolved ###\r\n\r\n- fixes #3467\r\n\r\n### API Changes ###\r\n\r\n/\r\n\r\n### Platforms Affected ###\r\n\r\n- Core/XAML (all platforms)\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\n/\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"8057724987","Type":"IssuesEvent","CreatedAt":"2018-08-02T16:10:24","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3461","RelatedDescription":"Closed issue \"NuGet package claims it supports UAP 10.0, but it actually only supports UAP 10.0.15138\" (#3461) at xamarin/Xamarin.Forms","RelatedBody":"According to #2859, Xamarin.Forms 3.0 relies on .NET Standard 2.0 and hence is not expected to run on Windows versions below the Fall Creators Update. However, the NuGet package still claims that the `uap10.0` target framework is supported: https://www.nuget.org/packages/Xamarin.Forms. Should the package layout be changed to give `uap10.0.15138` as supported target instead of `uap10.0`?"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8059198664","Type":"IssuesEvent","CreatedAt":"2018-08-02T21:03:39","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4540","RelatedDescription":"Closed issue \"[XI]App with deployment target less than 11.0 fails to build with Invalid architecture error\" (#4540) at xamarin/xamarin-macios","RelatedBody":"\r\n### Steps to Reproduce\r\n\r\n1. Open sample app, https://www.dropbox.com/s/wv0o3k7pu8g59ru/simpleapp-with-nativereferences.zip?dl=0 in Debug|iPhone config\r\n2. Change the supported architecture to ARMv7+ARMv64\r\n3. Make sure that no devices are attached while building\r\n\r\n### Expected Behavior\r\nApp should build successfully\r\n\r\n### Actual Behavior\r\nApp fails to build. http://xqa.blob.core.windows.net/gist/report-e3d7a84a235f4b3d81d028843b3e4b3e.txt\r\n\r\nError:  MTOUCH : error MT0116: Invalid architecture: ARMv7. 32-bit architectures are not supported when deployment target is 11 or later.\r\n\r\n### Environment\r\n```\r\nhttps://gist.github.com/GouriKumari/a4291fe22b8ea5c8b6b7ea575d0f70ba\r\n```\r\n\r\n### Build Logs\r\nhttp://xqa.blob.core.windows.net/gist/report-e3d7a84a235f4b3d81d028843b3e4b3e.txt\r\n\r\n### Example Project (If Possible)\r\nhttps://www.dropbox.com/s/wv0o3k7pu8g59ru/simpleapp-with-nativereferences.zip?dl=0 \r\n\r\n### Additional Details\r\nApp builds successfully when a device is attached or supported architecture is changed only to ARM64\r\n"},{"Id":"8059048122","Type":"PullRequestEvent","CreatedAt":"2018-08-02T20:32:31","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4546","RelatedDescription":"Merged pull request \"Add missing AppKit Xcode 10 bindings\" (#4546) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8059043759","Type":"PullRequestEvent","CreatedAt":"2018-08-02T20:31:36","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4556","RelatedDescription":"Merged pull request \"[UIKit] Add support for Xcode 10 beta 5.\" (#4556) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8058960284","Type":"PullRequestEvent","CreatedAt":"2018-08-02T20:15:17","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4554","RelatedDescription":"Merged pull request \"[AVFoundation] Add support for Xcode 10 beta5.\" (#4554) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8058799873","Type":"PullRequestEvent","CreatedAt":"2018-08-02T19:42:18","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4557","RelatedDescription":"Merged pull request \"[tests] Adjust the MT5211 test according to modified ld output. Fixes maccore issue 897.\" (#4557) at xamarin/xamarin-macios","RelatedBody":"Fixes https://github.com/xamarin/maccore/issues/897."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1024752638599028736","CreatedAt":"2018-08-01T20:24:02+00:00","UserScreenname":"xamarinhq","Text":"This year’s #dotNETConf is coming 9/12-14. Live sessions w/ speakers from the community &amp; it's your chance to learn… https://t.co/Nujb04dGd4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":42,"RawContent":null},{"Id":"1024013376295452672","CreatedAt":"2018-07-30T19:26:28+00:00","UserScreenname":"xamarinhq","Text":"Here's everything you need to know to integrate automated visual UI tests into a dev toolchain that includes an… https://t.co/12Ihjj4bSN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":115,"FavoriteCount":56,"RawContent":null},{"Id":"1022882059763830784","CreatedAt":"2018-07-27T16:31:01+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/RGpgfHMoPZ -- Announcing Xamarin .Android support for Android 9.0 (P) now available for both #VS2017 &amp;… https://t.co/9clAy4LHZp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":82,"FavoriteCount":53,"RawContent":null},{"Id":"1022866229143461888","CreatedAt":"2018-07-27T15:28:07+00:00","UserScreenname":"xamarinhq","Text":"Previewing files from inside your Xamarin .iOS app is a great way to enhance user experience. ...and adding this fe… https://t.co/tF7v5at9xo","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":29,"RawContent":null},{"Id":"1019670557011243008","CreatedAt":"2018-07-18T19:49:40+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 3.1 delivers the latest in quality improvements. We're excited to introduce Xamarin.Forms 3.1, now wi… https://t.co/qW6S2P7Hi0","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":260,"FavoriteCount":163,"RawContent":null},{"Id":"1016758939877117952","CreatedAt":"2018-07-10T18:59:56+00:00","UserScreenname":"xamarinhq","Text":"Understanding your app, it's users, &amp; their interactions helps you build a 5-star app. Application Insights w/ AppC… https://t.co/Smw5tVHZ1X","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":43,"FavoriteCount":26,"RawContent":null},{"Id":"1014949294737186816","CreatedAt":"2018-07-05T19:09:03+00:00","UserScreenname":"xamarinhq","Text":"Cool intros to new goodies in &lt;10 minutes! Explore some of the “Snack Pack” episodes that @JamesMontemagno bundled… https://t.co/80gmo35fb6","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":90,"FavoriteCount":42,"RawContent":null},{"Id":"1014903254034141190","CreatedAt":"2018-07-05T16:06:06+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/3RaJk3O0xb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":34,"RawContent":null},{"Id":"1014521211970379776","CreatedAt":"2018-07-04T14:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":33,"RawContent":null},{"Id":"1014159326645313537","CreatedAt":"2018-07-03T14:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":25,"RawContent":null},{"Id":"1013873320834445313","CreatedAt":"2018-07-02T19:53:31+00:00","UserScreenname":"xamarinhq","Text":"In today's Xamarin Podcast, @PierceBoggan &amp; @JamesMontemagno talk up latest &amp; greatest in mobile #dotNET dev; Xamar… https://t.co/chy5AhHt86","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":63,"FavoriteCount":42,"RawContent":null},{"Id":"1013805063209455616","CreatedAt":"2018-07-02T15:22:17+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/kdzv9U4084","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":22,"RawContent":null},{"Id":"1013547297437835264","CreatedAt":"2018-07-01T22:18:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/JL1SW3MFro","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":27,"RawContent":null},{"Id":"1012399525338595328","CreatedAt":"2018-06-28T18:17:10+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/3QxhuBcUiC v7.2 introduces two new MSBuild properties to make maintaining Android VersionCode for Andr… https://t.co/j469e1DU24","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":84,"FavoriteCount":57,"RawContent":null},{"Id":"1011343460811583489","CreatedAt":"2018-06-25T20:20:45+00:00","UserScreenname":"xamarinhq","Text":"What’s new in the #XamarinAndroid designer: https://t.co/OOHH6tXhia https://t.co/lCAsZQzwls","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":89,"FavoriteCount":39,"RawContent":null},{"Id":"1009871245574332422","CreatedAt":"2018-06-21T18:50:42+00:00","UserScreenname":"xamarinhq","Text":"Get your #Xamarin Android apps ready for Google Play’s target API level requirements: https://t.co/2iFf5ijjj9 https://t.co/iQmylzyQ7o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":34,"RawContent":null},{"Id":"1008802730993967104","CreatedAt":"2018-06-18T20:04:48+00:00","UserScreenname":"xamarinhq","Text":"Get ready for the July 2018 deadline by ensuring your  #Xamarin apps support iOS 11 and iPhone X: https://t.co/1Wx6Bo4TSQ","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":43,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2018-08-02T21:20:57.4696135Z","RunDurationInMilliseconds":4121}