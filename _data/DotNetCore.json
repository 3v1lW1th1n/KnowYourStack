{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing ML.NET 1.2 and Model Builder updates (Machine Learning for .NET)","PublishedOn":"2019-07-17T19:25:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce ML.NET 1.2 and updates to Model Builder and the CLI. ML.NET is an open-source and cross-platform machine learning framework for .NET developers. ML.NET also includes Model...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-2-and-model-builder-updates-machine-learning-for-net/","RawContent":null},{"Title":"Write Better Code Faster with Roslyn Analyzers","PublishedOn":"2019-07-10T16:40:11+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Roslyn, the .NET compiler platform, helps you catch bugs even before you run your code. One example is Roslyn’s spellcheck analyzer that is built into Visual Studio. Let’s say you are creating a...","Href":"https://devblogs.microsoft.com/dotnet/write-better-code-faster-with-roslyn-analyzers/","RawContent":null},{"Title":".NET Core July 2019 Updates – 2.1.12 and 2.2.6","PublishedOn":"2019-07-09T17:50:51+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a...","Href":"https://devblogs.microsoft.com/dotnet/net-core-july-2019/","RawContent":null},{"Title":".NET Framework July 2019 Security and Quality Rollup","PublishedOn":"2019-07-09T17:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the July 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update for .NET Framework.\nSecurity\nCVE-2019-1006 – WCF/WIF SAML Token Authentication Bypass...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-july-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Framework June 27, 2019 Cumulative Update for Windows 10 version 1903","PublishedOn":"2019-06-27T18:01:46+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we released the June 2019 Cumulative Update for .NET Framework 3.5 and 4.8 on Windows 10 version 1903.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-27-2019-cumulative-update-for-windows-10-version-1903/","RawContent":null},{"Title":"Help us shape the future of .NET for Apache Spark","PublishedOn":"2019-06-20T17:58:41+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Apache Spark™ is a general-purpose distributed processing engine for analytics over large data set typically terabytes or petabytes of data. Apache Spark can be used for processing batches of data,...","Href":"https://devblogs.microsoft.com/dotnet/help-us-shape-the-future-of-net-for-apache-spark/","RawContent":null},{"Title":"Create interactive documentation with the new Try .NET template","PublishedOn":"2019-06-20T16:05:37+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In our previous post, we announced dotnet try a global tool which allows developers to create interactive workshops and documentation. Tutorials created with dotnet try let users start learning...","Href":"https://devblogs.microsoft.com/dotnet/create-interactive-documentation-with-the-new-try-net-template/","RawContent":null},{"Title":".NET Framework June 2019 Preview of Quality Rollup","PublishedOn":"2019-06-19T00:12:52+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the June 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nWPF1\nAddresses an issue in which...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"The Evolving Infrastructure of .NET Core","PublishedOn":"2019-06-18T18:11:59+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"With .NET Core 3.0 Preview 6 out the door, we thought it would be useful to take a brief look at the history of our infrastructure systems and the significant improvements that have been made in the...","Href":"https://devblogs.microsoft.com/dotnet/the-evolving-infrastructure-of-net-core/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 6 and Entity Framework 6.3 Preview 6","PublishedOn":"2019-06-13T20:35:52+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"New previews of the next versions of EF Core and EF 6 are now available on NuGet.Org.\nWhat is new in EF Core 3.0 Preview 6\nIn recent months, a lot of our efforts have been focused on a new LINQ...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-6-and-entity-framework-6-3-preview-6/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"9812903344","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:28:59","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Merged pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9812878014","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:23:52","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Opened pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10047192673","Type":"IssuesEvent","CreatedAt":"2019-07-19T16:54:03","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Opened issue \".NET Core master branches have switched to \"5.0\"\" (#118) at dotnet/announcements","RelatedBody":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available."},{"Id":"9971220766","Type":"IssuesEvent","CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Opened issue \"System.Text.Json usability study results\" (#117) at dotnet/announcements","RelatedBody":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304."},{"Id":"9963969636","Type":"IssuesEvent","CreatedAt":"2019-07-08T03:13:39","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Opened issue \"Updates to releases.json (.NET Core release metadata)\" (#116) at dotnet/announcements","RelatedBody":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, msbuild, nuget, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is a partial example of the new array based on the upcoming July update. \r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n  \"sdks\": [\r\n    {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": [\r\n            {\r\n            \"name\": \"\",\r\n            \"rid\": \"\",\r\n            \"url\": \"\",\r\n            \"hash\": \"\"\r\n            }\r\n        ]\r\n    }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the communitiy which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility comprimises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10063163908","Type":"PullRequestEvent","CreatedAt":"2019-07-23T04:32:02","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25799","RelatedDescription":"Merged pull request \"[3.0 port] Fix first value of counter payload being skewed\" (#25799) at dotnet/coreclr","RelatedBody":"Porting https://github.com/dotnet/coreclr/pull/25739 to 3.0 branch. This addresses #25709 "},{"Id":"10063063768","Type":"PullRequestEvent","CreatedAt":"2019-07-23T04:01:24","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25816","RelatedDescription":"Merged pull request \"corbbtprof: set byte alignment for CORBBTPROF structures\" (#25816) at dotnet/coreclr","RelatedBody":"This patch fixes SIGBUG that occurs due to unaligned read/write:\r\n```\r\n$ export COMPlus_ZapBBInstr=*\r\n$ export COMPlus_ZapBBInstrDir=/tmp\r\n$ gdb --args corerun /opt/usr/media/helloworld.dll \r\n...\r\nThread 1 \"corerun\" received signal SIGBUS, Bus error.\r\n0xf706c890 in ProfileDataAllocateScenarioInfo (pEmitter=<optimized out>, scopeName=<optimized out>, pMvid=<optimized out>) at /opt/code/src/vm/ceeload.cpp:11968\r\n11968               sRun->mvid        = *pMvid;\r\n(gdb) bt\r\n#0  0xf706c890 in ProfileDataAllocateScenarioInfo (pEmitter=<optimized out>, scopeName=<optimized out>, pMvid=<optimized out>) at /opt/code/src/vm/ceeload.cpp:11968\r\n#1  Module::WriteMethodProfileDataLogFile (this=<optimized out>, cleanup=<optimized out>) at /opt/code/src/vm/ceeload.cpp:12324\r\n#2  0xf70736f4 in Module::WriteAllModuleProfileData (cleanup=true) at /opt/code/src/vm/ceeload.cpp:12402\r\n#3  0xf6fbb542 in EEShutDownHelper (fIsDllUnloading=0) at /opt/code/src/vm/ceemain.cpp:1424\r\n#4  0xf6fbbb44 in EEShutDown (fIsDllUnloading=0) at /opt/code/src/vm/ceemain.cpp:1777\r\n#5  0xf6f2f42c in CorHost2::UnloadAppDomain2 (this=0xdb879837, dwDomainId=<optimized out>, fWaitUntilDone=<optimized out>, pLatchedExitCode=0xfffefab0) at /opt/code/src/vm/corhost.cpp:1074\r\n#6  0xf6f13e84 in coreclr_shutdown_2 (hostHandle=0x2c6e0, domainId=1, latchedExitCode=0xfffefab0) at /opt/code/src/dlls/mscoree/unixinterface.cpp:361\r\n#7  0x00011eda in ?? ()\r\n#8  0x0001134a in ?? ()\r\n#9  0xf749863c in __libc_start_main () from /lib/libc.so.6\r\n#10 0x0001108c in ?? ()\r\n```"},{"Id":"10062742835","Type":"IssuesEvent","CreatedAt":"2019-07-23T02:33:18","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25826","RelatedDescription":"Opened issue \"Assert failure: (GetComponentSize() <= 2) || IsArray()\" (#25826) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190721.1/workItem/baseservices.threading.generics/analysis/xunit/baseservices_threading._generics_WaitCallback_thread25_thread25_~2F_generics_WaitCallback_thread25_thread25_sh\r\n\r\n**Failed tests:**\r\nbaseservices_threading._generics_WaitCallback_thread25_thread25_._generics_WaitCallback_thread25_thread25_sh\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 32568 [0x00007f38], Thread: 32568 [0x7f38]): (GetComponentSize() <= 2) || IsArray()\r\n    File: /__w/5/s/src/vm/methodtable.cpp Line: 8113\r\n    Image: /home/helixbot/work/1479037d-a2c3-4a8f-9fae-a9e48a5eb9a3/Payload/corerun\r\n\r\n/home/helixbot/work/1479037d-a2c3-4a8f-9fae-a9e48a5eb9a3/Work/7e947ed3-e119-4450-ab18-e829320aab6d/Exec/baseservices/threading/generics/WaitCallback/thread25/thread25.sh: line 252: 32568 Aborted                 (core dumped) $LAUNCHER $ExePath \\\"${CLRTestExecutionArguments[@]}\\\"\r\n\r\nReturn code:      1\r\nRaw output file:      /home/helixbot/work/1479037d-a2c3-4a8f-9fae-a9e48a5eb9a3/Work/7e947ed3-e119-4450-ab18-e829320aab6d/Exec/baseservices/threading/Reports/baseservices.threading/generics/WaitCallback/thread25/thread25.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/home/helixbot/work/1479037d-a2c3-4a8f-9fae-a9e48a5eb9a3/Payload/corerun thread25.exe ''\r\nExpected: 100\r\nActual: 134\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=/home/helixbot/work/1479037d-a2c3-4a8f-9fae-a9e48a5eb9a3/Payload\r\n> /home/helixbot/work/1479037d-a2c3-4a8f-9fae-a9e48a5eb9a3/Work/7e947ed3-e119-4450-ab18-e829320aab6d/Exec/baseservices/threading/generics/WaitCallback/thread25/thread25.sh\r\nExpected: True\r\nActual:   False\r\n```"},{"Id":"10062708569","Type":"IssuesEvent","CreatedAt":"2019-07-23T02:24:10","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25825","RelatedDescription":"Opened issue \"System.IO.IOException : The process cannot access the file\" (#25825) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-corefx/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcorefx~2F/20190722.1/workItem/System.IO.FileSystem.Tests/analysis/xunit/System.IO.Tests.EncryptDecrypt~2FEncryptDecrypt_Read\r\n\r\n**Log:**\r\n```\r\nSystem.IO.IOException : The process cannot access the file 'C:\\\\Users\\\\runner\\\\AppData\\\\Local\\\\Temp\\\\tmp823A.tmp' because it is being used by another process.\r\n   at System.IO.FileSystem.ThrowExceptionEncryptDecryptFail(String fullPath) in /_/src/System.IO.FileSystem/src/System/IO/FileSystem.Win32.cs:line 60\r\n   at System.IO.FileSystem.Encrypt(String path) in /_/src/System.IO.FileSystem/src/System/IO/FileSystem.Win32.cs:line 26\r\n   at System.IO.File.Encrypt(String path) in /_/src/System.IO.FileSystem/src/System/IO/File.cs:line 651\r\n   at System.IO.Tests.EncryptDecrypt.EncryptDecrypt_Read() in /_/src/System.IO.FileSystem/tests/File/EncryptDecrypt.cs:line 45\r\n```"},{"Id":"10062697345","Type":"IssuesEvent","CreatedAt":"2019-07-23T02:21:11","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25824","RelatedDescription":"Opened issue \"[EventListener] Include thread ID\" (#25824) at dotnet/coreclr","RelatedBody":"`EventWrittenEventArgs` doesn't appear to provide information about which thread fired the event. It would be useful to have that information to be able to associate paired events such as `Start`/`Stop` that may be fired from multiple threads concurrently."},{"Id":"10062682438","Type":"IssuesEvent","CreatedAt":"2019-07-23T02:17:17","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25823","RelatedDescription":"Opened issue \"[EventListener] Reported Task and Opcode are incorrect for events\" (#25823) at dotnet/coreclr","RelatedBody":"Code:\r\n\r\n```c#\r\nstatic class Program\r\n{\r\n    private class ClrEventListener : EventListener\r\n    {\r\n        public static readonly string ClrProviderName = \"Microsoft-Windows-DotNETRuntime\";\r\n        public static readonly Guid ClrProviderGuid = new Guid(unchecked((int)0x5e5bb766), unchecked((short)0xbbfc), unchecked((short)0x5662), 0x05, 0x48, 0x1d, 0x44, 0xfa, 0xd9, 0xbb, 0x56);\r\n        private const EventKeywords CompilationKeyword = (EventKeywords)0x1000000000;\r\n\r\n        protected override void OnEventSourceCreated(EventSource eventSource)\r\n        {\r\n            if (eventSource.Name == ClrProviderName && eventSource.Guid == ClrProviderGuid)\r\n                EnableEvents(eventSource, EventLevel.Informational, CompilationKeyword);\r\n\r\n            base.OnEventSourceCreated(eventSource);\r\n        }\r\n\r\n        protected override void OnEventWritten(EventWrittenEventArgs eventData)\r\n        {\r\n            Console.WriteLine($\"{s_sw.Elapsed.TotalMilliseconds,10:0.000} - {eventData.EventName}\");\r\n            Console.WriteLine($\"  Keywords: 0x{eventData.Keywords:x}\");\r\n            Console.WriteLine($\"  ID:       {eventData.EventId}\");\r\n            Console.WriteLine($\"  Task:     {eventData.Task}\");\r\n            Console.WriteLine($\"  Opcode:   {eventData.Opcode}\");\r\n            var payloadNames = eventData.PayloadNames.ToList();\r\n            var payloads = eventData.Payload.Select(o => o.ToString()).ToList();\r\n            var payloadCount = Math.Min(payloadNames.Count, payloads.Count);\r\n            Console.WriteLine($\"  Payloads: {payloadCount}\");\r\n            for (int i = 0; i < payloadCount; ++i)\r\n                Console.WriteLine($\"    {payloadNames[i]}: {payloads[i]}\");\r\n            Console.WriteLine();\r\n\r\n            base.OnEventWritten(eventData);\r\n        }\r\n    }\r\n\r\n    private static void Main()\r\n    {\r\n        using (var el = new ClrEventListener())\r\n        {\r\n            var marker = \"######################################################\";\r\n            var nl = Environment.NewLine;\r\n\r\n            Console.WriteLine($\"{s_sw.Elapsed.TotalMilliseconds,10:0.000} - {marker} - Waiting for misc stuff{nl}\");\r\n            Thread.Sleep(2000);\r\n\r\n            Console.WriteLine($\"{s_sw.Elapsed.TotalMilliseconds,10:0.000} - {marker} - Foo() tier 0 and waiting for startup delay{nl}\");\r\n            Foo();\r\n            Thread.Sleep(1000);\r\n\r\n            Console.WriteLine($\"{s_sw.Elapsed.TotalMilliseconds,10:0.000} - {marker} - Tiering up{nl}\");\r\n            for (int i = 1; i < 100; ++i)\r\n                Foo();\r\n            Thread.Sleep(1000);\r\n\r\n            Console.WriteLine($\"{s_sw.Elapsed.TotalMilliseconds,10:0.000} - {marker} - Foo() tier 1{nl}\");\r\n            Foo();\r\n        }\r\n    }\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    private static void Foo()\r\n    {\r\n    }\r\n\r\n    private static readonly Stopwatch s_sw = Stopwatch.StartNew();\r\n}\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n...\r\n\r\n  2003.498 - ###################################################### - Foo() tier 0 and waiting for startup delay\r\n\r\n  2014.411 - TieredCompilationPause\r\n  Keywords: 0x0000F01000000000\r\n  ID:       281\r\n  Task:     65253\r\n  Opcode:   Info\r\n  Payloads: 1\r\n    ClrInstanceID: 5\r\n\r\n  2223.281 - TieredCompilationResume\r\n  Keywords: 0x0000F01000000000\r\n  ID:       282\r\n  Task:     65252\r\n  Opcode:   Info\r\n  Payloads: 2\r\n    ClrInstanceID: 5\r\n    NewMethodCount: 2\r\n\r\n  3004.193 - ###################################################### - Tiering up\r\n\r\n  3014.768 - TieredCompilationBackgroundJitStart\r\n  Keywords: 0x0000F01000000000\r\n  ID:       283\r\n  Task:     65251\r\n  Opcode:   Start\r\n  Payloads: 2\r\n    ClrInstanceID: 5\r\n    PendingMethodCount: 1\r\n\r\n  3021.809 - TieredCompilationBackgroundJitStop\r\n  Keywords: 0x0000F01000000000\r\n  ID:       284\r\n  Task:     65251\r\n  Opcode:   Stop\r\n  Payloads: 3\r\n    ClrInstanceID: 5\r\n    PendingMethodCount: 0\r\n    JittedMethodCount: 1\r\n\r\n  4005.403 - ###################################################### - Foo() tier 1\r\n```\r\n\r\n- For these events the expected `Task` is `31`\r\n- For the `Pause`/`Resume` events the expected `Opcode`s are `12` and `13` respectively\r\n- The `Opcode`s for the `Start`/`Stop` events are correct"},{"Id":"10062498999","Type":"PullRequestEvent","CreatedAt":"2019-07-23T01:26:13","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25807","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#25807) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190721.2\r\n- **Date Produced**: 7/21/2019 6:08 PM\r\n- **Commit**: 347412c9a917c71a744d8e20b090da90aa558a79\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19371.2\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19371.2\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10062498243","Type":"PullRequestEvent","CreatedAt":"2019-07-23T01:26:02","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25806","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#25806) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19369.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10062495397","Type":"IssuesEvent","CreatedAt":"2019-07-23T01:25:14","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25705","RelatedDescription":"Closed issue \"Remove !s for [DoesNotReturn{If}] and [NotNullIfNotNull]\" (#25705) at dotnet/coreclr","RelatedBody":"The compiler changes have gone in.  We just need to pull in the new compiler and remove the then defunct `!`s and `TODO-NULLABLE` comments."},{"Id":"10062493901","Type":"IssuesEvent","CreatedAt":"2019-07-23T01:24:49","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23694","RelatedDescription":"Closed issue \"Need to teach IL linker to strip `[Nullable]` attribute from implementation assemblies\" (#23694) at dotnet/coreclr","RelatedBody":"It appears the `[Nullable(…)]` attributes generated by the compiler for the nullable annotations aren't being stripped out by the linker.  Having annotated ~25% of corelib, it appears the attributes are contributing around a 2% size increase for the assembly.  We need to teach the linker to remove the attributes from the implementation assembly for shipping.\r\n\r\ncc: @jaredpar, @dotnet/nullablefc, @jkotas, @ericstj"},{"Id":"10062395735","Type":"PullRequestEvent","CreatedAt":"2019-07-23T00:57:37","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25207","RelatedDescription":"Merged pull request \"Unconditionally capture output of xUnit tests\" (#25207) at dotnet/coreclr","RelatedBody":"Also fixes #24634 "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10062055253","Type":"PullRequestEvent","CreatedAt":"2019-07-22T23:27:32","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11975","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#11975) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190722.07\r\n- **Date Produced**: 7/22/2019 11:26 PM\r\n- **Commit**: da656496d3f82d94ed963bfdbe7d1ee86de350de\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-07\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-19372-07\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-19372-07\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-19372-07\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10057857515","Type":"PullRequestEvent","CreatedAt":"2019-07-22T12:41:53","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1363","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1363) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190721.2\r\n- **Date Produced**: 7/21/2019 6:08 PM\r\n- **Commit**: 347412c9a917c71a744d8e20b090da90aa558a79\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19371.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19371.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19371.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10057786311","Type":"PullRequestEvent","CreatedAt":"2019-07-22T12:31:45","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1363","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1363) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190721.2\r\n- **Date Produced**: 7/21/2019 6:08 PM\r\n- **Commit**: 347412c9a917c71a744d8e20b090da90aa558a79\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19371.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19371.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19371.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10052961394","Type":"PullRequestEvent","CreatedAt":"2019-07-21T12:59:17","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1362","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1362) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190720.5\r\n- **Date Produced**: 7/21/2019 4:24 AM\r\n- **Commit**: 9bb93a61365db848aaf914b5dfb8d6684df3335e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19370.5\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19370.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19370.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10052942520","Type":"PullRequestEvent","CreatedAt":"2019-07-21T12:49:10","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1362","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1362) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190720.5\r\n- **Date Produced**: 7/21/2019 4:24 AM\r\n- **Commit**: 9bb93a61365db848aaf914b5dfb8d6684df3335e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19370.5\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19370.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19370.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10050620009","Type":"PullRequestEvent","CreatedAt":"2019-07-20T13:02:05","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1361","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1361) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190719.9\r\n- **Date Produced**: 7/20/2019 6:18 AM\r\n- **Commit**: 45851336efa3b754f427d00cef3d388357aed308\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19369.9\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19369.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19369.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10050601633","Type":"PullRequestEvent","CreatedAt":"2019-07-20T12:51:58","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1361","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1361) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190719.9\r\n- **Date Produced**: 7/20/2019 6:18 AM\r\n- **Commit**: 45851336efa3b754f427d00cef3d388357aed308\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19369.9\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19369.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19369.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10063324392","Type":"PullRequestEvent","CreatedAt":"2019-07-23T05:19:45","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/39688","RelatedDescription":"Opened pull request \"[release/3.0] Update dependencies from dotnet/coreclr\" (#39688) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190722.4\r\n- **Date Produced**: 7/23/2019 5:16 AM\r\n- **Commit**: c01a9a157d512343ef104bb2b1f97b356e708b11\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview8.19372.4\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview8.19372.4\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview8.19372.4\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n"},{"Id":"10062708723","Type":"PullRequestEvent","CreatedAt":"2019-07-23T02:24:13","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/39687","RelatedDescription":"Opened pull request \"Update dummy fields within the ref by auto-generating them from the source assembly.\" (#39687) at dotnet/corefx","RelatedBody":"From https://github.com/dotnet/corefx/issues/39652#issuecomment-513915482\r\n\r\nPicked out the \"dummy field\" related changes when auto-generated the reference assembly from source (from https://github.com/dotnet/corefx/commit/fa4a2d7a453f3c947e2277e1058457601452feb9 which contains a lot of other changes that we should also consider at some point, like param renames or missing/mismatching API surface).\r\n\r\nSome of them don't make sense to me.\r\n\r\ncc @stephentoub "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10063215448","Type":"IssuesEvent","CreatedAt":"2019-07-23T04:47:40","Actor":"yyjdelete","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37422","RelatedDescription":"Opened issue \"`csharp_indent_labels = flush_left` shouldn't affect indent of comment after label\" (#37422) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS2019 16.2Preview4\r\nCompiler version: '3.2.0-beta4-19359-03 (15b43b33)'. Language version: latest.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Format the below code with `csharp_indent_labels = flush_left`\r\n\r\n**Expected Behavior**:\r\nflush_left:\r\n```csharp\r\n        public void M()\r\n        {\r\n//comment1\r\nlabel:\r\n            //comment2\r\n            Console.WriteLine(\"test\");\r\n        }\r\n```\r\nIndent of the comment after label should not be affected, as it does for `csharp_indent_labels = one_less_than_current`.\r\n\r\none_less_than_current:\r\n```csharp\r\n        public void M()\r\n        {\r\n        //comment1\r\n        label:\r\n            //comment2\r\n            Console.WriteLine(\"test\");\r\n        }\r\n```\r\n\r\n**Actual Behavior**:\r\n```csharp\r\n        public void M()\r\n        {\r\n//comment1\r\nlabel:\r\n//comment2\r\n            Console.WriteLine(\"test\");\r\n        }\r\n```\r\n"},{"Id":"10063188309","Type":"IssuesEvent","CreatedAt":"2019-07-23T04:39:28","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37421","RelatedDescription":"Opened issue \"Test harness for region analysis has some strange behavior.\" (#37421) at dotnet/roslyn","RelatedBody":"From PR: https://github.com/dotnet/roslyn/pull/37395 and @gafter:\r\n\r\n> OK, I think I understand why that test behaves the way it does. Other APIs will display bad behavior too. Please file an issue for it and notate the unexpected test with that bug number. Tag me in the bug and I will fix it.\r\n\r\nThe unexpected test is LocalFuncCapture8 (which has also been updated to link to this issue)."},{"Id":"10063157026","Type":"IssuesEvent","CreatedAt":"2019-07-23T04:29:56","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37420","RelatedDescription":"Opened issue \"Can't f5 roslyn.\" (#37420) at dotnet/roslyn","RelatedBody":"Getting this error:\r\n\r\n```\r\n14>C:\\Users\\cyrus\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19369.2\\tools\\VisualStudio.VsixBuild.targets(162,5): error MSB4062: The \"Microsoft.DotNet.Build.Tasks.VisualStudio.FinalizeInsertionVsixFile\" task could not be loaded from the assembly C:\\Users\\cyrus\\.nuget\\packages\\microsoft.dotnet.build.tasks.visualstudio\\1.0.0-beta.19369.2\\tools\\net472\\Microsoft.DotNet.Build.Tasks.VisualStudio.dll. Could not load file or assembly 'file:///C:\\Users\\cyrus\\.nuget\\packages\\microsoft.dotnet.build.tasks.visualstudio\\1.0.0-beta.19369.2\\tools\\net472\\Microsoft.DotNet.Build.Tasks.VisualStudio.dll' or one of its dependencies. The system cannot find the file specified. Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n```\r\n\r\nNot sure what can be done about this..."},{"Id":"10062193903","Type":"PullRequestEvent","CreatedAt":"2019-07-23T00:02:28","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37419","RelatedDescription":"Opened pull request \"Merge master to features/ide-cleanup\" (#37419) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/ide-cleanup.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/ide-cleanup\ngit reset --hard upstream/features/ide-cleanup\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/ide-cleanup --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10061407738","Type":"IssuesEvent","CreatedAt":"2019-07-22T21:15:59","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7643","RelatedDescription":"Opened issue \"Compile static constructors for R2R\" (#7643) at dotnet/corert","RelatedBody":"CPAOT doesn't compile static constructors which has a runtime JIT cost. We should measure with them enabled (rooting them all for compilation) to assess if they give a startup benefit worth the cost of carrying them in the binary."},{"Id":"10061098781","Type":"IssuesEvent","CreatedAt":"2019-07-22T20:29:12","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7642","RelatedDescription":"Opened issue \"Access checks in JIT interface methods\" (#7642) at dotnet/corert","RelatedBody":"The final section of `CEEInfo::getCallInfo` (https://github.com/dotnet/coreclr/blob/5f93d3b1c48ba6916d5f31d79cb7c17d564eecef/src/vm/jitinterface.cpp#L5597) deals with access checks validating the declarative authority of a given caller to call the callee. This is currently missing in the CPAOT compiler. Similar checks needed in `CEEInfo::getFieldInfo`."},{"Id":"10061062403","Type":"IssuesEvent","CreatedAt":"2019-07-22T20:23:51","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7641","RelatedDescription":"Opened issue \"Type Layout Checks\" (#7641) at dotnet/corert","RelatedBody":"To protect system resiliency, Crossgen emits method pre-codes (code that is guaranteed to run once before a given method is executed for the first time) that checks various properties of dependent types outside the version bubble that affect codegen of that particular method. This functionality is currently missing and needs porting into CPAOT."},{"Id":"10060721373","Type":"IssuesEvent","CreatedAt":"2019-07-22T19:33:02","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7605","RelatedDescription":"Closed issue \"Build failing when Adding Npgsql\" (#7605) at dotnet/corert","RelatedBody":"Hello,\r\n\r\nI keep getting the same problem when running the HelloWorld Sample with Npgsql.\r\n\r\nRunning `dotnet publish -r linux-x64 -c Release -v d`\r\n\r\nI get this error during the \"Exec\" task of the publish command: \r\n`Task \"Exec\"\r\n         \"/root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27906-01/tools/ilc\" @\"obj/Release/netcoreapp2.1/linux-x64/native/DbPrototype.ilc.rsp\"\r\n         Killed\r\n   1:7>/root/.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27906-01/build/Microsoft.NETCore.Native.targets(248,5): error MSB3073: The command \"\"/root/.nuget/packages/runtime.linux-x64.microsoft.dotnet.ilcompiler/1.0.0-alpha-27906-01/tools/ilc\" @\"obj/Release/netcoreapp2.1/linux-x64/native/DbPrototype.ilc.rsp\"\" exited with code 137. [/DbPrototype/DbPrototype.fsproj]\r\n       Done executing task \"Exec\" -- FAILED.\r\n   1:7>Done building target \"IlcCompile\" in project \"DbPrototype.fsproj\" -- FAILED.\r\n   1:7>Done Building Project \"/DbPrototype/DbPrototype.fsproj\" (Publish target(s)) -- FAILED.`\r\n\r\n\r\nOS: Ubuntu 18.04 (All pre requisites installed based on [Helloworld sample](https://github.com/dotnet/corert/tree/master/samples/HelloWorld))\r\n"},{"Id":"10060439507","Type":"IssuesEvent","CreatedAt":"2019-07-22T18:49:47","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6784","RelatedDescription":"Closed issue \"using npgsql but throw Object reference not set to an instance of an object exception\" (#6784) at dotnet/corert","RelatedBody":"System.NullReferenceException: Object reference not set to an instance of an object . \r\nat Npgsql.Logging.NpgsqlLogManager.GetClassFullName() + 0x64 .    \r\nat Npgsql.NpgsqlConnection..cctor() + 0x53 . \r\n\r\nand I found the following source code:  \r\n`\r\nMethodBase method = frame.GetMethod();  \r\n                declaringType = method.DeclaringType;  \r\n                if (declaringType == null) { . \r\n                    className = method.Name;  \r\n                    break;  \r\n}\r\n`\r\nhow to handle this exception , and when the third class lib using reflection, are there any work around ways?\r\n"},{"Id":"10058750944","Type":"IssuesEvent","CreatedAt":"2019-07-22T14:31:51","Actor":"forestbat","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7631","RelatedDescription":"Closed issue \"Future of AOT\" (#7631) at dotnet/corert","RelatedBody":"#https://github.com/dotnet/coreclr/commit/0cc81b60eb184c92b8526348d4bb056ed563e9d6\r\n#https://github.com/dotnet/corefx/commit/1acaa2017cfc64ef1aabcf3b19d0e097af692616\r\nAs we all know，development for .NET5 has started and this project is like a forgotten corner，so in the next year（until November 2020）will MS invest more to this？\r\nAnd will AOT of C#（either corert or mono aot）support more processor structure such as MIPS or RISCV？\r\nHope your reply."},{"Id":"10053616883","Type":"IssuesEvent","CreatedAt":"2019-07-21T18:17:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7639","RelatedDescription":"Closed issue \"CoreRT instructions no longer work\" (#7639) at dotnet/corert","RelatedBody":"I'm not sure what has changed but it affects both of my machines:\r\n```\r\nMicrosoft.NETCore.Native.Publish.targets(78,5): error :\r\nThe PrivateSdkAssemblies ItemGroup is required for _ComputeAssembliesToCompileToNative\r\n```\r\nbut only when using the nuget package and not when using my own CoreRT build"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"470576613","IsPullRequest":true,"CreatedAt":"2019-07-23T04:32:01","Actor":"sywhang","Number":"25799","RawContent":null,"Title":"[3.0 port] Fix first value of counter payload being skewed","State":"closed","Body":"Porting https://github.com/dotnet/coreclr/pull/25739 to 3.0 branch. This addresses #25709 ","Url":"https://github.com/dotnet/coreclr/pull/25799","RelatedDescription":"Closed or merged PR \"[3.0 port] Fix first value of counter payload being skewed\" (#25799)"},{"Id":"471005626","IsPullRequest":true,"CreatedAt":"2019-07-23T04:01:23","Actor":"kbaladurin","Number":"25816","RawContent":null,"Title":"corbbtprof: set byte alignment for CORBBTPROF structures","State":"closed","Body":"This patch fixes SIGBUG that occurs due to unaligned read/write:\r\n```\r\n$ export COMPlus_ZapBBInstr=*\r\n$ export COMPlus_ZapBBInstrDir=/tmp\r\n$ gdb --args corerun /opt/usr/media/helloworld.dll \r\n...\r\nThread 1 \"corerun\" received signal SIGBUS, Bus error.\r\n0xf706c890 in ProfileDataAllocateScenarioInfo (pEmitter=<optimized out>, scopeName=<optimized out>, pMvid=<optimized out>) at /opt/code/src/vm/ceeload.cpp:11968\r\n11968               sRun->mvid        = *pMvid;\r\n(gdb) bt\r\n#0  0xf706c890 in ProfileDataAllocateScenarioInfo (pEmitter=<optimized out>, scopeName=<optimized out>, pMvid=<optimized out>) at /opt/code/src/vm/ceeload.cpp:11968\r\n#1  Module::WriteMethodProfileDataLogFile (this=<optimized out>, cleanup=<optimized out>) at /opt/code/src/vm/ceeload.cpp:12324\r\n#2  0xf70736f4 in Module::WriteAllModuleProfileData (cleanup=true) at /opt/code/src/vm/ceeload.cpp:12402\r\n#3  0xf6fbb542 in EEShutDownHelper (fIsDllUnloading=0) at /opt/code/src/vm/ceemain.cpp:1424\r\n#4  0xf6fbbb44 in EEShutDown (fIsDllUnloading=0) at /opt/code/src/vm/ceemain.cpp:1777\r\n#5  0xf6f2f42c in CorHost2::UnloadAppDomain2 (this=0xdb879837, dwDomainId=<optimized out>, fWaitUntilDone=<optimized out>, pLatchedExitCode=0xfffefab0) at /opt/code/src/vm/corhost.cpp:1074\r\n#6  0xf6f13e84 in coreclr_shutdown_2 (hostHandle=0x2c6e0, domainId=1, latchedExitCode=0xfffefab0) at /opt/code/src/dlls/mscoree/unixinterface.cpp:361\r\n#7  0x00011eda in ?? ()\r\n#8  0x0001134a in ?? ()\r\n#9  0xf749863c in __libc_start_main () from /lib/libc.so.6\r\n#10 0x0001108c in ?? ()\r\n```","Url":"https://github.com/dotnet/coreclr/pull/25816","RelatedDescription":"Closed or merged PR \"corbbtprof: set byte alignment for CORBBTPROF structures\" (#25816)"},{"Id":"471456999","IsPullRequest":false,"CreatedAt":"2019-07-23T02:33:18","Actor":"VincentBu","Number":"25826","RawContent":null,"Title":"Assert failure: (GetComponentSize() <= 2) || IsArray()","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190721.1/workItem/baseservices.threading.generics/analysis/xunit/baseservices_threading._generics_WaitCallback_thread25_thread25_~2F_generics_WaitCallback_thread25_thread25_sh\r\n\r\n**Failed tests:**\r\nbaseservices_threading._generics_WaitCallback_thread25_thread25_._generics_WaitCallback_thread25_thread25_sh\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 32568 [0x00007f38], Thread: 32568 [0x7f38]): (GetComponentSize() <= 2) || IsArray()\r\n    File: /__w/5/s/src/vm/methodtable.cpp Line: 8113\r\n    Image: /home/helixbot/work/1479037d-a2c3-4a8f-9fae-a9e48a5eb9a3/Payload/corerun\r\n\r\n/home/helixbot/work/1479037d-a2c3-4a8f-9fae-a9e48a5eb9a3/Work/7e947ed3-e119-4450-ab18-e829320aab6d/Exec/baseservices/threading/generics/WaitCallback/thread25/thread25.sh: line 252: 32568 Aborted                 (core dumped) $LAUNCHER $ExePath \\\"${CLRTestExecutionArguments[@]}\\\"\r\n\r\nReturn code:      1\r\nRaw output file:      /home/helixbot/work/1479037d-a2c3-4a8f-9fae-a9e48a5eb9a3/Work/7e947ed3-e119-4450-ab18-e829320aab6d/Exec/baseservices/threading/Reports/baseservices.threading/generics/WaitCallback/thread25/thread25.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/home/helixbot/work/1479037d-a2c3-4a8f-9fae-a9e48a5eb9a3/Payload/corerun thread25.exe ''\r\nExpected: 100\r\nActual: 134\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=/home/helixbot/work/1479037d-a2c3-4a8f-9fae-a9e48a5eb9a3/Payload\r\n> /home/helixbot/work/1479037d-a2c3-4a8f-9fae-a9e48a5eb9a3/Work/7e947ed3-e119-4450-ab18-e829320aab6d/Exec/baseservices/threading/generics/WaitCallback/thread25/thread25.sh\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25826","RelatedDescription":"Open issue \"Assert failure: (GetComponentSize() <= 2) || IsArray()\" (#25826)"},{"Id":"471455001","IsPullRequest":false,"CreatedAt":"2019-07-23T02:24:10","Actor":"VincentBu","Number":"25825","RawContent":null,"Title":"System.IO.IOException : The process cannot access the file","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-corefx/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcorefx~2F/20190722.1/workItem/System.IO.FileSystem.Tests/analysis/xunit/System.IO.Tests.EncryptDecrypt~2FEncryptDecrypt_Read\r\n\r\n**Log:**\r\n```\r\nSystem.IO.IOException : The process cannot access the file 'C:\\\\Users\\\\runner\\\\AppData\\\\Local\\\\Temp\\\\tmp823A.tmp' because it is being used by another process.\r\n   at System.IO.FileSystem.ThrowExceptionEncryptDecryptFail(String fullPath) in /_/src/System.IO.FileSystem/src/System/IO/FileSystem.Win32.cs:line 60\r\n   at System.IO.FileSystem.Encrypt(String path) in /_/src/System.IO.FileSystem/src/System/IO/FileSystem.Win32.cs:line 26\r\n   at System.IO.File.Encrypt(String path) in /_/src/System.IO.FileSystem/src/System/IO/File.cs:line 651\r\n   at System.IO.Tests.EncryptDecrypt.EncryptDecrypt_Read() in /_/src/System.IO.FileSystem/tests/File/EncryptDecrypt.cs:line 45\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25825","RelatedDescription":"Open issue \"System.IO.IOException : The process cannot access the file\" (#25825)"},{"Id":"471454329","IsPullRequest":false,"CreatedAt":"2019-07-23T02:21:11","Actor":"kouvel","Number":"25824","RawContent":null,"Title":"[EventListener] Include thread ID","State":"open","Body":"`EventWrittenEventArgs` doesn't appear to provide information about which thread fired the event. It would be useful to have that information to be able to associate paired events such as `Start`/`Stop` that may be fired from multiple threads concurrently.","Url":"https://github.com/dotnet/coreclr/issues/25824","RelatedDescription":"Open issue \"[EventListener] Include thread ID\" (#25824)"},{"Id":"471453449","IsPullRequest":false,"CreatedAt":"2019-07-23T02:17:16","Actor":"kouvel","Number":"25823","RawContent":null,"Title":"[EventListener] Reported Task and Opcode are incorrect for events","State":"open","Body":"Code:\r\n\r\n```c#\r\nstatic class Program\r\n{\r\n    private class ClrEventListener : EventListener\r\n    {\r\n        public static readonly string ClrProviderName = \"Microsoft-Windows-DotNETRuntime\";\r\n        public static readonly Guid ClrProviderGuid = new Guid(unchecked((int)0x5e5bb766), unchecked((short)0xbbfc), unchecked((short)0x5662), 0x05, 0x48, 0x1d, 0x44, 0xfa, 0xd9, 0xbb, 0x56);\r\n        private const EventKeywords CompilationKeyword = (EventKeywords)0x1000000000;\r\n\r\n        protected override void OnEventSourceCreated(EventSource eventSource)\r\n        {\r\n            if (eventSource.Name == ClrProviderName && eventSource.Guid == ClrProviderGuid)\r\n                EnableEvents(eventSource, EventLevel.Informational, CompilationKeyword);\r\n\r\n            base.OnEventSourceCreated(eventSource);\r\n        }\r\n\r\n        protected override void OnEventWritten(EventWrittenEventArgs eventData)\r\n        {\r\n            Console.WriteLine($\"{s_sw.Elapsed.TotalMilliseconds,10:0.000} - {eventData.EventName}\");\r\n            Console.WriteLine($\"  Keywords: 0x{eventData.Keywords:x}\");\r\n            Console.WriteLine($\"  ID:       {eventData.EventId}\");\r\n            Console.WriteLine($\"  Task:     {eventData.Task}\");\r\n            Console.WriteLine($\"  Opcode:   {eventData.Opcode}\");\r\n            var payloadNames = eventData.PayloadNames.ToList();\r\n            var payloads = eventData.Payload.Select(o => o.ToString()).ToList();\r\n            var payloadCount = Math.Min(payloadNames.Count, payloads.Count);\r\n            Console.WriteLine($\"  Payloads: {payloadCount}\");\r\n            for (int i = 0; i < payloadCount; ++i)\r\n                Console.WriteLine($\"    {payloadNames[i]}: {payloads[i]}\");\r\n            Console.WriteLine();\r\n\r\n            base.OnEventWritten(eventData);\r\n        }\r\n    }\r\n\r\n    private static void Main()\r\n    {\r\n        using (var el = new ClrEventListener())\r\n        {\r\n            var marker = \"######################################################\";\r\n            var nl = Environment.NewLine;\r\n\r\n            Console.WriteLine($\"{s_sw.Elapsed.TotalMilliseconds,10:0.000} - {marker} - Waiting for misc stuff{nl}\");\r\n            Thread.Sleep(2000);\r\n\r\n            Console.WriteLine($\"{s_sw.Elapsed.TotalMilliseconds,10:0.000} - {marker} - Foo() tier 0 and waiting for startup delay{nl}\");\r\n            Foo();\r\n            Thread.Sleep(1000);\r\n\r\n            Console.WriteLine($\"{s_sw.Elapsed.TotalMilliseconds,10:0.000} - {marker} - Tiering up{nl}\");\r\n            for (int i = 1; i < 100; ++i)\r\n                Foo();\r\n            Thread.Sleep(1000);\r\n\r\n            Console.WriteLine($\"{s_sw.Elapsed.TotalMilliseconds,10:0.000} - {marker} - Foo() tier 1{nl}\");\r\n            Foo();\r\n        }\r\n    }\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    private static void Foo()\r\n    {\r\n    }\r\n\r\n    private static readonly Stopwatch s_sw = Stopwatch.StartNew();\r\n}\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n...\r\n\r\n  2003.498 - ###################################################### - Foo() tier 0 and waiting for startup delay\r\n\r\n  2014.411 - TieredCompilationPause\r\n  Keywords: 0x0000F01000000000\r\n  ID:       281\r\n  Task:     65253\r\n  Opcode:   Info\r\n  Payloads: 1\r\n    ClrInstanceID: 5\r\n\r\n  2223.281 - TieredCompilationResume\r\n  Keywords: 0x0000F01000000000\r\n  ID:       282\r\n  Task:     65252\r\n  Opcode:   Info\r\n  Payloads: 2\r\n    ClrInstanceID: 5\r\n    NewMethodCount: 2\r\n\r\n  3004.193 - ###################################################### - Tiering up\r\n\r\n  3014.768 - TieredCompilationBackgroundJitStart\r\n  Keywords: 0x0000F01000000000\r\n  ID:       283\r\n  Task:     65251\r\n  Opcode:   Start\r\n  Payloads: 2\r\n    ClrInstanceID: 5\r\n    PendingMethodCount: 1\r\n\r\n  3021.809 - TieredCompilationBackgroundJitStop\r\n  Keywords: 0x0000F01000000000\r\n  ID:       284\r\n  Task:     65251\r\n  Opcode:   Stop\r\n  Payloads: 3\r\n    ClrInstanceID: 5\r\n    PendingMethodCount: 0\r\n    JittedMethodCount: 1\r\n\r\n  4005.403 - ###################################################### - Foo() tier 1\r\n```\r\n\r\n- For these events the expected `Task` is `31`\r\n- For the `Pause`/`Resume` events the expected `Opcode`s are `12` and `13` respectively\r\n- The `Opcode`s for the `Start`/`Stop` events are correct","Url":"https://github.com/dotnet/coreclr/issues/25823","RelatedDescription":"Open issue \"[EventListener] Reported Task and Opcode are incorrect for events\" (#25823)"},{"Id":"470669626","IsPullRequest":true,"CreatedAt":"2019-07-23T01:26:13","Actor":"dotnet-maestro[bot]","Number":"25807","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190721.2\r\n- **Date Produced**: 7/21/2019 6:08 PM\r\n- **Commit**: 347412c9a917c71a744d8e20b090da90aa558a79\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19371.2\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19371.2\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25807","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#25807)"},{"Id":"470669034","IsPullRequest":true,"CreatedAt":"2019-07-23T01:26:01","Actor":"dotnet-maestro[bot]","Number":"25806","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19369.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25806","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#25806)"},{"Id":"471429735","IsPullRequest":true,"CreatedAt":"2019-07-23T00:46:16","Actor":"cshung","Number":"25822","RawContent":null,"Title":"We need to reset the scope list for the USING_VARIABLE_LIVE_RANGE case","State":"open","Body":"This change addresses the major difference in the generated debug info for non-optimized code between the `USING_SCOPE_INFO` and the `USING_VARIABLE_LIVE_RANGE` case.\r\n\r\nAfter the fix, the debug info (as dumped by `r2rdump` for `crossgen` images) look significantly more similar now than before the fix.\r\n\r\nWe are still seeing differences, but it is much closer after the fix. It appears the majority of the remaining differences are immaterial re-ordering of variable lifetimes. ","Url":"https://github.com/dotnet/coreclr/pull/25822","RelatedDescription":"Open PR \"We need to reset the scope list for the USING_VARIABLE_LIVE_RANGE case\" (#25822)"},{"Id":"471388384","IsPullRequest":false,"CreatedAt":"2019-07-22T23:16:59","Actor":"Maoni0","Number":"25821","RawContent":null,"Title":"adopting cgroup2 in coreclr","State":"open","Body":"from [corefx 39673](https://github.com/dotnet/corefx/issues/39673), cgroup2 is out. @janvorli would you please take a look at cgroup2 and see if it's a simple matter of adopting it (eg, read the same values just from different places kind of thing) or does it mean we'll need to handle new scenarios enabled by cgroup2 and/or does it make us change anything we are currently doing? ","Url":"https://github.com/dotnet/coreclr/issues/25821","RelatedDescription":"Open issue \"adopting cgroup2 in coreclr\" (#25821)"},{"Id":"471365486","IsPullRequest":false,"CreatedAt":"2019-07-22T22:22:02","Actor":"EgorBo","Number":"25820","RawContent":null,"Title":"JIT: Recognize blsr in \"x & (x - 1)\"","State":"open","Body":"E.g. https://github.com/dotnet/corefx/blob/master/src/System.Private.Xml/src/System/Xml/Bits.cs#L40-L51\r\n\r\n![image](https://user-images.githubusercontent.com/523221/61669260-0eab2c80-ace8-11e9-8276-9c89b60703ef.png)\r\n\r\nI guess it can be implemented the same way it was done for `ror`","Url":"https://github.com/dotnet/coreclr/issues/25820","RelatedDescription":"Open issue \"JIT: Recognize blsr in \"x & (x - 1)\"\" (#25820)"},{"Id":"471338399","IsPullRequest":false,"CreatedAt":"2019-07-22T21:10:59","Actor":"nattress","Number":"25819","RawContent":null,"Title":"R2RDump - Fix cordistools dependency in build","State":"open","Body":"The architecture-specific cordistools.dll is not copied to the build output for R2RDump and has to be done manually to get disassembly. This should happen as part of the build - we should be publishing r2rdump, not just building it, since that deploys NuGet runtime dependencies.","Url":"https://github.com/dotnet/coreclr/issues/25819","RelatedDescription":"Open issue \"R2RDump - Fix cordistools dependency in build\" (#25819)"},{"Id":"471197222","IsPullRequest":false,"CreatedAt":"2019-07-22T17:04:58","Actor":"omajid","Number":"25818","RawContent":null,"Title":"What is the difference between src/gc/unix/cgroup.cpp and src/pal/src/misc/cgroup.cpp","State":"open","Body":"Hi! This is really just a question. I see that the two files src/gc/unix/cgroup.cpp and src/pal/src/misc/cgroup.cpp look really like the same file. Is that intentional? Any reason we can't share the code (or even generate one file from another at build time)?","Url":"https://github.com/dotnet/coreclr/issues/25818","RelatedDescription":"Open issue \"What is the difference between src/gc/unix/cgroup.cpp and src/pal/src/misc/cgroup.cpp\" (#25818)"},{"Id":"471078303","IsPullRequest":true,"CreatedAt":"2019-07-22T12:52:41","Actor":"MichalStrehovsky","Number":"25817","RawContent":null,"Title":"Allow creating typehandles to `TypedReference*`","State":"open","Body":"It's unclear why this was disallowed - we allow them in method signatures and there's a comment a couple lines below the code I'm touching saying we thought about blocking this for byref-like types, but there's no reason to do that.\r\n\r\n`TypedReference` is the original byref-like type.\r\n\r\nFixes #25697.","Url":"https://github.com/dotnet/coreclr/pull/25817","RelatedDescription":"Open PR \"Allow creating typehandles to `TypedReference*`\" (#25817)"},{"Id":"470869036","IsPullRequest":false,"CreatedAt":"2019-07-22T02:58:34","Actor":"VincentBu","Number":"25815","RawContent":null,"Title":"Test failed: tracing_eventpipe._buffersize_buffersize_buffersize_._buffersize_buffersize_buffersize_cmd","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-runincontext/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190721.1/workItem/PayloadGroup0/analysis/xunit/tracing_eventpipe._buffersize_buffersize_buffersize_~2F_buffersize_buffersize_buffersize_cmd\r\n\r\n**Failed tests:**\r\ntracing_eventpipe._buffersize_buffersize_buffersize_._buffersize_buffersize_buffersize_cmd\r\n\r\n**Log:**\r\n```\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\37aa7f0a-0c08-4d89-9a91-6919c4ded4d5\\\\Work\\\\5095a7a2-9705-4c75-8202-63eb131acfd4\\\\Exec\\\\tracing\\\\eventpipe\\\\Reports\\\\tracing.eventpipe\\\\buffersize\\\\buffersize\\\\buffersize.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\ncall C:\\\\dotnetbuild\\\\work\\\\37aa7f0a-0c08-4d89-9a91-6919c4ded4d5\\\\Payload\\\\runincontext.cmd C:\\\\dotnetbuild\\\\work\\\\37aa7f0a-0c08-4d89-9a91-6919c4ded4d5\\\\Work\\\\5095a7a2-9705-4c75-8202-63eb131acfd4\\\\Exec\\\\tracing\\\\eventpipe\\\\buffersize\\\\buffersize\\\\ buffersize.exe \r\nTEST STARTING\r\nTEST PASSED!\r\nTEST STARTING\r\nTEST PASSED!\r\nFAILURE: Unload failed\r\n\r\nRunInContext FAIL! Exiting with code 213\r\nExpected: 100\r\nActual: 213\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\37aa7f0a-0c08-4d89-9a91-6919c4ded4d5\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\37aa7f0a-0c08-4d89-9a91-6919c4ded4d5\\\\Work\\\\5095a7a2-9705-4c75-8202-63eb131acfd4\\\\Exec\\\\tracing\\\\eventpipe\\\\buffersize\\\\buffersize\\\\buffersize.cmd\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25815","RelatedDescription":"Open issue \"Test failed: tracing_eventpipe._buffersize_buffersize_buffersize_._buffersize_buffersize_buffersize_cmd\" (#25815)"},{"Id":"470865486","IsPullRequest":false,"CreatedAt":"2019-07-22T02:40:31","Actor":"VincentBu","Number":"25814","RawContent":null,"Title":"Test failed: tracing_eventcounter._eventcounter_eventcounter_._eventcounter_eventcounter_cmd","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-jitstress/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190720.1/workItem/PayloadGroup0/analysis/xunit/tracing_eventcounter._eventcounter_eventcounter_~2F_eventcounter_eventcounter_cmd\r\n\r\n**Failed tests:**\r\ntracing_eventcounter._eventcounter_eventcounter_._eventcounter_eventcounter_cmd\r\n\r\n**Log:**\r\n```\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\e6bfb5c8-0a30-4063-8edd-7ad678a07066\\\\Work\\\\d85874f4-3d1d-4d8d-86ed-dde7ec18df3c\\\\Exec\\\\tracing\\\\eventcounter\\\\Reports\\\\tracing.eventcounter\\\\eventcounter\\\\eventcounter.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\e6bfb5c8-0a30-4063-8edd-7ad678a07066\\\\Payload\\\\corerun.exe\\\" eventcounter.exe \r\nTest Failed - Incorrect mean calculation\r\nExpected: 100\r\nActual: 1\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\e6bfb5c8-0a30-4063-8edd-7ad678a07066\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\e6bfb5c8-0a30-4063-8edd-7ad678a07066\\\\Work\\\\d85874f4-3d1d-4d8d-86ed-dde7ec18df3c\\\\Exec\\\\tracing\\\\eventcounter\\\\eventcounter\\\\eventcounter.cmd\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25814","RelatedDescription":"Open issue \"Test failed: tracing_eventcounter._eventcounter_eventcounter_._eventcounter_eventcounter_cmd\" (#25814)"},{"Id":"470863321","IsPullRequest":false,"CreatedAt":"2019-07-22T02:29:18","Actor":"VincentBu","Number":"25813","RawContent":null,"Title":"Assert failure: Consistency check failed: AV in clr at this callstack","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190720.1/workItem/Loader.classloader/analysis/xunit/Loader_classloader._DefaultInterfaceMethods_constrainedcall_constrained3_constrained3_~2F_DefaultInterfaceMethods_constrainedcall_constrained3_constrained3_cmd\r\n\r\n**Failed tests:**\r\nLoader_classloader._DefaultInterfaceMethods_constrainedcall_constrained3_constrained3_._DefaultInterfaceMethods_constrainedcall_constrained3_constrained3_cmd\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 5824 [0x000016c0], Thread: 5596 [0x15dc]): Consistency check failed: AV in clr at this callstack:\r\n------\r\nCORECLR! GetCLRRuntimeHost + 0x3C641E (0x00007ffd`593b660e)\r\nCORECLR! GetCLRRuntimeHost + 0x59C1BC (0x00007ffd`5958c3ac)\r\nCORECLR! GetCLRRuntimeHost + 0x141BC1 (0x00007ffd`59131db1)\r\nCORECLR! GetCLRRuntimeHost + 0x1306BD (0x00007ffd`591208ad)\r\nNTDLL! RtlInitializeCriticalSection + 0x190 (0x00007ffd`89075e90)\r\nNTDLL! RtlImageNtHeaderEx + 0x17B (0x00007ffd`8904fa1b)\r\nNTDLL! KiUserExceptionDispatcher + 0x3A (0x00007ffd`890b96fa)\r\n<no module>! <no symbol> + 0x0 (0x00007ffc`f9e1bf13)\r\n<no module>! <no symbol> + 0x0 (0x00000000`00000022)\r\n<no module>! <no symbol> + 0x0 (0x0000005d`ba1ad980)\r\n<no module>! <no symbol> + 0x0 (0x0000005d`ba1ad540)\r\n<no module>! <no symbol> + 0x0 (0x0000005d`ba1adb90)\r\n<no module>! <no symbol> + 0x0 (0x00000000`00000004)\r\n-----\r\n.AV on tid=0x15dc (5596), cxr=0000005DBA1ABD40, exr=0000005DBA1AC230\r\nFAILED: false\r\n\r\nCORECLR! coreclr_shutdown_2 + 0xEB44 (0x00007ffd`58f8daf4)\r\nCORECLR! GetCLRRuntimeHost + 0x13053A (0x00007ffd`5912072a)\r\nCORECLR! GetCLRRuntimeHost + 0x12FF92 (0x00007ffd`59120182)\r\nCORECLR! GetCLRRuntimeHost + 0x12FF06 (0x00007ffd`591200f6)\r\nCORECLR! GetCLRRuntimeHost + 0x130793 (0x00007ffd`59120983)\r\nNTDLL! RtlInitializeCriticalSection + 0x190 (0x00007ffd`89075e90)\r\nNTDLL! RtlImageNtHeaderEx + 0x17B (0x00007ffd`8904fa1b)\r\nNTDLL! KiUserExceptionDispatcher + 0x3A (0x00007ffd`890b96fa)\r\nCORECLR! GetCLRRuntimeHost + 0x3C641E (0x00007ffd`593b660e)\r\nCORECLR! GetCLRRuntimeHost + 0x59C1BC (0x00007ffd`5958c3ac)\r\n    File: f:\\\\workspace.2\\\\_work\\\\1\\\\s\\\\src\\\\vm\\\\excep.cpp Line: 7639\r\n    Image: C:\\\\dotnetbuild\\\\work\\\\af1e289b-523a-49d9-9192-d62b9aa9e944\\\\Payload\\\\CoreRun.exe\r\n\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\af1e289b-523a-49d9-9192-d62b9aa9e944\\\\Work\\\\93633159-5b39-476b-bbe3-bbf5fcc891ca\\\\Exec\\\\Loader\\\\classloader\\\\Reports\\\\Loader.classloader\\\\DefaultInterfaceMethods\\\\constrainedcall\\\\constrained3\\\\constrained3.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\af1e289b-523a-49d9-9192-d62b9aa9e944\\\\Payload\\\\corerun.exe\\\" constrained3.exe \r\nIFrobber<T>:Frob\r\nExpected: 100\r\nActual: -1073740286\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\af1e289b-523a-49d9-9192-d62b9aa9e944\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\af1e289b-523a-49d9-9192-d62b9aa9e944\\\\Work\\\\93633159-5b39-476b-bbe3-bbf5fcc891ca\\\\Exec\\\\Loader\\\\classloader\\\\DefaultInterfaceMethods\\\\constrainedcall\\\\constrained3\\\\constrained3.cmd\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25813","RelatedDescription":"Open issue \"Assert failure: Consistency check failed: AV in clr at this callstack\" (#25813)"},{"Id":"470862331","IsPullRequest":false,"CreatedAt":"2019-07-22T02:24:42","Actor":"VincentBu","Number":"25812","RawContent":null,"Title":"Test failed: baseservices_threading._generics_Monitor_EnterExit10_EnterExit10_._generics_Monitor_EnterExit10_EnterExit10_sh","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190720.1/workItem/baseservices.threading.generics/analysis/xunit/baseservices_threading._generics_Monitor_EnterExit10_EnterExit10_~2F_generics_Monitor_EnterExit10_EnterExit10_sh\r\n\r\n**Failed tests:**\r\nbaseservices_threading._generics_Monitor_EnterExit10_EnterExit10_._generics_Monitor_EnterExit10_EnterExit10_sh\r\n\r\n**Log:**\r\n```\r\n/home/helixbot/work/f5051b0f-0f35-49db-ab81-9c010cf7bf3c/Work/0b27a4a1-f186-47ed-946d-8522e60f6107/Exec/baseservices/threading/generics/Monitor/EnterExit10/EnterExit10.sh: line 252:  5017 Segmentation fault      (core dumped) $LAUNCHER $ExePath \\\"${CLRTestExecutionArguments[@]}\\\"\r\n\r\nReturn code:      1\r\nRaw output file:      /home/helixbot/work/f5051b0f-0f35-49db-ab81-9c010cf7bf3c/Work/0b27a4a1-f186-47ed-946d-8522e60f6107/Exec/baseservices/threading/Reports/baseservices.threading/generics/Monitor/EnterExit10/EnterExit10.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/home/helixbot/work/f5051b0f-0f35-49db-ab81-9c010cf7bf3c/Payload/corerun EnterExit10.exe ''\r\nExpected: 100\r\nActual: 139\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=/home/helixbot/work/f5051b0f-0f35-49db-ab81-9c010cf7bf3c/Payload\r\n> /home/helixbot/work/f5051b0f-0f35-49db-ab81-9c010cf7bf3c/Work/0b27a4a1-f186-47ed-946d-8522e60f6107/Exec/baseservices/threading/generics/Monitor/EnterExit10/EnterExit10.sh\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25812","RelatedDescription":"Open issue \"Test failed: baseservices_threading._generics_Monitor_EnterExit10_EnterExit10_._generics_Monitor_EnterExit10_EnterExit10_sh\" (#25812)"},{"Id":"470858818","IsPullRequest":false,"CreatedAt":"2019-07-22T02:06:53","Actor":"VincentBu","Number":"25811","RawContent":null,"Title":"Test failed: System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-corefx-jitstress/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcorefx~2F/20190720.1/workItem/System.Drawing.Common.Tests/analysis/xunit/System.Drawing.Tests.FontTests~2FToLogFont_InvokeGraphics_ReturnsExpected(textRenderingHint:%20AntiAlias,%20expectedQuality:%203)\r\n\r\n**Failed tests:**\r\nSystem.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected\r\n\r\n**Log:**\r\n```\r\nAssert.Equal() Failure\r\nExpected: -13\r\nActual:   178639260\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/25811","RelatedDescription":"Open issue \"Test failed: System.Drawing.Tests.FontTests.ToLogFont_InvokeGraphics_ReturnsExpected\" (#25811)"},{"Id":"470858008","IsPullRequest":false,"CreatedAt":"2019-07-22T02:01:56","Actor":"VincentBu","Number":"25810","RawContent":null,"Title":"Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-corefx/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcorefx~2F/20190721.1/workItem/System.Runtime.Tests/analysis/xunit/System.Tests.GCTests~2FGetGCMemoryInfo\r\n\r\n**Log:**\r\n```\r\nChild exception:\r\n  Xunit.Sdk.InRangeException: Assert.InRange() Failure\r\nRange:  (1 - 9223372036854775807)\r\nActual: -1844674407689672704\r\n   at System.Tests.GCTests.<>c.<GetGCMemoryInfo>b__29_0() in /_/src/System.Runtime/tests/System/GCTests.netcoreapp.cs:line 35\r\n\r\nChild process:\r\n  System.Runtime.Tests, Version=4.2.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 System.Tests.GCTests+<>c Void <GetGCMemoryInfo>b__29_0()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25810","RelatedDescription":"Open issue \"Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\" (#25810)"},{"Id":"470630116","IsPullRequest":false,"CreatedAt":"2019-07-22T00:13:32","Actor":"forestbat","Number":"25805","RawContent":null,"Title":"A question about CLR","State":"closed","Body":"I read CLR via C# （4th version in 2014），it says that MS's purpose is decreasing GC's time to less than a normal memory page fault's time，so today do you keep the purpose or abandone it？","Url":"https://github.com/dotnet/coreclr/issues/25805","RelatedDescription":"Closed issue \"A question about CLR\" (#25805)"},{"Id":"470699058","IsPullRequest":false,"CreatedAt":"2019-07-20T17:51:02","Actor":"aggieben","Number":"25809","RawContent":null,"Title":"error MSB3721: The command \"ml64.exe ...\" exited with code 1","State":"open","Body":"I'm trying to build coreclr on Windows 10, `release/3.0` branch with VS 2019.  I've gone through the list of VS 2017 prerequisites and tried to make sure I have all those, as well as an updated version of CMake (VS2019 doesn't appear to be documented at this point).  The build fails like this (two of these in the log):\r\n\r\n![image](https://user-images.githubusercontent.com/1321/61582158-bb20bf00-aaec-11e9-839c-093f45f94c2a.png)\r\n\r\nAlso a bit further down, \r\n![image](https://user-images.githubusercontent.com/1321/61582181-edcab780-aaec-11e9-91c6-f629efd7e0dd.png)\r\n\r\nAny pointers appreciated.\r\n","Url":"https://github.com/dotnet/coreclr/issues/25809","RelatedDescription":"Open issue \"error MSB3721: The command \"ml64.exe ...\" exited with code 1\" (#25809)"},{"Id":"470592985","IsPullRequest":true,"CreatedAt":"2019-07-20T15:58:19","Actor":"BruceForstall","Number":"25801","RawContent":null,"Title":"Fix Linux compilation flags","State":"closed","Body":"`configureoptimization.cmake` was being included before `CLR_CMAKE_PLATFORM_UNIX`\r\nwas set, though it depends on that variable to set Linux optimization\r\nflags. Move the include lower, after `CLR_CMAKE_PLATFORM_UNIX` is set.\r\n\r\nThis leads to Debug builds being built with `-O0` and Checked builds built\r\nwith `-O2`, instead of the default due to no `-O` flag being passed. Release\r\nis still built `-O3`; somehow, it was being built that way already.\r\n\r\nFixes #25273 (Although Alpine will still see a stack overflow in the failing\r\ntest case with Debug builds, it won't affect Checked build CI runs, which is\r\nthe primary flavor tested in coreclr CI.)","Url":"https://github.com/dotnet/coreclr/pull/25801","RelatedDescription":"Closed or merged PR \"Fix Linux compilation flags\" (#25801)"},{"Id":"470625103","IsPullRequest":true,"CreatedAt":"2019-07-20T15:49:30","Actor":"sdmaclea","Number":"25804","RawContent":null,"Title":"Arm64 define FEATURE_DATATARGET4","State":"closed","Body":"FEATURE_DATATARGET4 enables the portable out of\r\nprocess stack unwind","Url":"https://github.com/dotnet/coreclr/pull/25804","RelatedDescription":"Closed or merged PR \"Arm64 define FEATURE_DATATARGET4\" (#25804)"},{"Id":"470670052","IsPullRequest":true,"CreatedAt":"2019-07-20T12:34:17","Actor":"dotnet-maestro[bot]","Number":"25808","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190719.08\r\n- **Date Produced**: 7/19/2019 8:26 PM\r\n- **Commit**: 7d70bbe81b4b86d491e30f957551441464c85375\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.27919.8\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25808","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#25808)"},{"Id":"470616793","IsPullRequest":true,"CreatedAt":"2019-07-20T03:16:45","Actor":"janvorli","Number":"25803","RawContent":null,"Title":"Revert \"Enable MHR support on OSX\"","State":"closed","Body":"Reverts dotnet/coreclr#25716\r\n\r\nI have found a couple of issues that I need to fix after my vacation.","Url":"https://github.com/dotnet/coreclr/pull/25803","RelatedDescription":"Closed or merged PR \"Revert \"Enable MHR support on OSX\"\" (#25803)"},{"Id":"470588590","IsPullRequest":true,"CreatedAt":"2019-07-20T02:22:54","Actor":"sdmaclea","Number":"25800","RawContent":null,"Title":"Remove dead ContextTransitionFrame","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25800","RelatedDescription":"Closed or merged PR \"Remove dead ContextTransitionFrame\" (#25800)"},{"Id":"470606799","IsPullRequest":true,"CreatedAt":"2019-07-19T23:39:09","Actor":"davmason","Number":"25802","RawContent":null,"Title":"Fix GetSequencePoints when profiler provides mapping via SetILInstrumentedCodeMap","State":"open","Body":"If a profiler modifies IL and provides a mapping via SetILInstrumentedCodeMap it currently will be ignored.","Url":"https://github.com/dotnet/coreclr/pull/25802","RelatedDescription":"Open PR \"Fix GetSequencePoints when profiler provides mapping via SetILInstrumentedCodeMap\" (#25802)"},{"Id":"470509351","IsPullRequest":true,"CreatedAt":"2019-07-19T22:23:12","Actor":"jkotas","Number":"25797","RawContent":null,"Title":"Delete old test .lst files","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25797","RelatedDescription":"Closed or merged PR \"Delete old test .lst files\" (#25797)"},{"Id":"470559455","IsPullRequest":false,"CreatedAt":"2019-07-19T21:20:44","Actor":"Inzanit","Number":"25798","RawContent":null,"Title":"Would the repository benefit from a .vsconfig file for required workloads","State":"open","Body":"As listed in the build instructions - and updated regularly according to version - several workloads are required to build CoreCLR (at least on Windows).\r\n\r\nWith the [addition of `.vsconfig`](https://devblogs.microsoft.com/setup/configure-visual-studio-across-your-organization-with-vsconfig/) and the ability to determine workloads based on this configuration, there might be value in adding this to the repo.\r\n\r\nI'd be happy to contribute if people thought this was something that would improve the developer experience. ","Url":"https://github.com/dotnet/coreclr/issues/25798","RelatedDescription":"Open issue \"Would the repository benefit from a .vsconfig file for required workloads\" (#25798)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"471393683","IsPullRequest":true,"CreatedAt":"2019-07-22T23:27:31","Actor":"dotnet-maestro[bot]","Number":"11975","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190722.13\r\n- **Date Produced**: 7/23/2019 5:07 AM\r\n- **Commit**: d8d2b9dbfbca139724ad3b076783bdef42ae5a38\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-13\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-19372-13\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-19372-13\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-19372-13\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11975","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#11975)"},{"Id":"471259852","IsPullRequest":true,"CreatedAt":"2019-07-22T23:06:44","Actor":"dotnet-maestro[bot]","Number":"11972","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190722.3\r\n- **Date Produced**: 7/22/2019 8:55 PM\r\n- **Commit**: 7ca234607a37c9e7db06013a21208769e3eeb0a2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19372.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11972","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11972)"},{"Id":"471269005","IsPullRequest":true,"CreatedAt":"2019-07-22T22:36:14","Actor":"dotnet-maestro[bot]","Number":"11973","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190722.03\r\n- **Date Produced**: 7/22/2019 7:20 PM\r\n- **Commit**: 758a89c36c33310b2573bfa11ee2cc78e020c6c8\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-19372-03\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-19372-03\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-19372-03\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-19372-03\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11973","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11973)"},{"Id":"470727673","IsPullRequest":false,"CreatedAt":"2019-07-22T20:36:56","Actor":"dtivel","Number":"11964","RawContent":null,"Title":"dotnet-install.sh:  fails on macOS","State":"closed","Body":"## Steps to reproduce\r\nOn macOS open bash shell and execute:\r\n```\r\ncurl -o ./dotnet-install.sh https://raw.githubusercontent.com/dotnet/cli/master/scripts/obtain/dotnet-install.sh\r\nchmod +x ./dotnet-install.sh\r\n./dotnet-install.sh -i ./cli -c 1.0\r\n```\r\n## Expected  behavior\r\nInstall will succeed.\r\n\r\n## Actual behavior\r\n```\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-sdk-1.1.11-osx-x64.tar.gz\r\ncurl: (22) The requested URL returned error: 404 \r\ndotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-sdk-1.1.11-osx-x64.tar.gz\r\ndotnet-install: Downloading legacy link: https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-dev-osx-x64.1.1.11.tar.gz\r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/1.1.11/dotnet-dev-osx-x64.1.1.11.tar.gz\r\ncp: illegal option -- -\r\nusage: cp [-R [-H | -L | -P]] [-fi | -n] [-apvXc] source_file target_file\r\n       cp [-R [-H | -L | -P]] [-fi | -n] [-apvXc] source_file ... target_directory\r\n```\r\n\r\nThe root problem is [this change](https://github.com/dotnet/cli/commit/7a1afb7e707e44fd3a3c6e0dd81dc92aa9b7f7d9#diff-3385102241bcd3718b9ca13a0c55b9afR615).  On macOS `cp` does not have a `--remove-destination` option.\r\n","Url":"https://github.com/dotnet/cli/issues/11964","RelatedDescription":"Closed issue \"dotnet-install.sh:  fails on macOS\" (#11964)"},{"Id":"471279755","IsPullRequest":true,"CreatedAt":"2019-07-22T20:36:45","Actor":"TravisEz13","Number":"11974","RawContent":null,"Title":"Fix break in dotnet-install.sh on macOS","State":"closed","Body":"skip ci please\r\n\r\ntried to write —remove-destination in bash because the switch doesn’t exist on macOS and is breaking PowerShell CI\r\nhttps://github.com/PowerShell/PowerShell/issues/10206\r\n","Url":"https://github.com/dotnet/cli/pull/11974","RelatedDescription":"Closed or merged PR \"Fix break in dotnet-install.sh on macOS\" (#11974)"},{"Id":"471214170","IsPullRequest":true,"CreatedAt":"2019-07-22T17:30:27","Actor":"xavierdecoster","Number":"11971","RawContent":null,"Title":"Adding support for dotnet list package --deprecated","State":"open","Body":"Adds support for `dotnet list package --deprecated` command forwarding to NuGet xplat as per [spec](https://github.com/NuGet/Home/wiki/Deprecate-packages#cli).\r\n\r\nFixes https://github.com/dotnet/cli/issues/11969\r\n","Url":"https://github.com/dotnet/cli/pull/11971","RelatedDescription":"Open PR \"Adding support for dotnet list package --deprecated\" (#11971)"},{"Id":"471182576","IsPullRequest":true,"CreatedAt":"2019-07-22T17:10:00","Actor":"dotnet-maestro[bot]","Number":"11970","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190722.1\r\n- **Date Produced**: 7/22/2019 4:39 PM\r\n- **Commit**: 330a7708c098d356b8cf59855317915c9270d997\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19372.1\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11970","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11970)"},{"Id":"471034374","IsPullRequest":false,"CreatedAt":"2019-07-22T11:10:58","Actor":"xavierdecoster","Number":"11969","RawContent":null,"Title":"dotnet list package --deprecated","State":"open","Body":"Tracking issue for adding support for `dotnet list package --deprecated` to the CLI (to be forwarded to NuGet xplat CLI commands).\r\n\r\n[NuGet CLI spec](https://github.com/NuGet/Home/wiki/Deprecate-packages#cli)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11969","RelatedDescription":"Open issue \"dotnet list package --deprecated\" (#11969)"},{"Id":"470910208","IsPullRequest":true,"CreatedAt":"2019-07-22T06:40:26","Actor":"dotnet-maestro[bot]","Number":"11968","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190721.5\r\n- **Date Produced**: 7/22/2019 6:09 AM\r\n- **Commit**: e69328b3d0bee7fd1777226d16e4d8f550acce75\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19371.5\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11968","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11968)"},{"Id":"470883030","IsPullRequest":true,"CreatedAt":"2019-07-22T04:42:38","Actor":"dotnet-maestro[bot]","Number":"11967","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190721.4\r\n- **Date Produced**: 7/22/2019 4:11 AM\r\n- **Commit**: 6a24db55433402d693d26cc764c704e0d7ac9593\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19371.4\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11967","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11967)"},{"Id":"470860613","IsPullRequest":true,"CreatedAt":"2019-07-22T02:51:57","Actor":"dotnet-maestro[bot]","Number":"11966","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190721.3\r\n- **Date Produced**: 7/22/2019 2:15 AM\r\n- **Commit**: 36a651e29aa76ed285c7beda4a029ec005af036a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19371.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11966","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11966)"},{"Id":"470774601","IsPullRequest":true,"CreatedAt":"2019-07-21T12:41:06","Actor":"dotnet-maestro[bot]","Number":"11965","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190720.1\r\n- **Date Produced**: 7/20/2019 12:49 PM\r\n- **Commit**: b103c4a9c64f62b8d940cc651b41fe774435f478\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 2.0.0-preview8.19370.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11965","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11965)"},{"Id":"470667905","IsPullRequest":true,"CreatedAt":"2019-07-21T12:35:51","Actor":"dotnet-maestro[bot]","Number":"11959","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190720.4\r\n- **Date Produced**: 7/20/2019 9:58 PM\r\n- **Commit**: ec9f5fc673f798dd6a89c7d11a4e62727837757c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19370.4\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11959","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11959)"},{"Id":"470722137","IsPullRequest":true,"CreatedAt":"2019-07-20T23:25:29","Actor":"dotnet-maestro[bot]","Number":"11963","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190720.4\r\n- **Date Produced**: 7/20/2019 10:54 PM\r\n- **Commit**: 65ca72c4206cd73a14b3c202713ce700139896d8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19370.4\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11963","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11963)"},{"Id":"470610578","IsPullRequest":false,"CreatedAt":"2019-07-20T20:53:44","Actor":"peterhuene","Number":"11956","RawContent":null,"Title":"Deps file and runtimeconfig are not regenerated upon assets cache invalidation.","State":"closed","Body":"## Steps to reproduce\r\n\r\nOn Windows with an x64 SDK installed:\r\n\r\n1. `dotnet new console`\r\n2. `dotnet build -r win-x64`\r\n3. Run `bin\\Debug\\netcoreapp3.0\\win-x64\\foo.exe` (expected: it prints \"hello world\").\r\n4. `dotnet build -r win-x86 /p:SelfContained=false --no-restore`\r\n5. Run `bin\\Debug\\netcoreapp3.0\\win-x64\\foo.exe`\r\n\r\n## Expected  behavior\r\n\r\nThe application should run as a framework-dependent application.\r\n\r\n## Actual behavior\r\n\r\nThe application fails to start because hostpolicy.dll can't be found.\r\n\r\nThis is because both the deps.json file and the runtimeconfig.json file remain unchanged from the first build, which was self-contained.  The second build incrementally cleans the self-contained dependencies, so the application attempts to activate as self-contained when it really should be framework-dependent.\r\n\r\nMaking the tasks responsible for generating these files take the assets cache file as input should cause regeneration when properties that affect the nuget cache (such as SelfContained) change.\r\n\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013052\r\n Commit:    9d282328f2\r\n```\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11956","RelatedDescription":"Closed issue \"Deps file and runtimeconfig are not regenerated upon assets cache invalidation.\" (#11956)"},{"Id":"470708983","IsPullRequest":true,"CreatedAt":"2019-07-20T20:25:42","Actor":"dotnet-maestro[bot]","Number":"11962","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190720.3\r\n- **Date Produced**: 7/20/2019 7:54 PM\r\n- **Commit**: 4ac6a4ad35801001d6b971c06254bd3da078741c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19370.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11962","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11962)"},{"Id":"470691416","IsPullRequest":false,"CreatedAt":"2019-07-20T16:26:48","Actor":"richlander","Number":"11961","RawContent":null,"Title":"Preview link points to an unhelpful page","State":"open","Body":"I see this message all the time (I only run previews) …\r\n\r\n```console\r\n You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n```\r\n\r\nI’d never actually taken the time to try out that link. It lands @ https://docs.microsoft.com/en-us/dotnet/core/tools/global-json\r\n\r\nThat’s not at all helpful. I was expecting a page dedicated to previews, and how to use previews in Visual Studio if you are using that product. Global.json is a small part of the preview experience. It’s also jarring to get dropped into a help page on a file format with no apparent connection to the CLI message.\r\n\r\nTo some degree, this is a doc issue, but since the link is part of the CLI experience, we should decide what we want.","Url":"https://github.com/dotnet/cli/issues/11961","RelatedDescription":"Open issue \"Preview link points to an unhelpful page\" (#11961)"},{"Id":"470668595","IsPullRequest":true,"CreatedAt":"2019-07-20T12:56:34","Actor":"dotnet-maestro[bot]","Number":"11960","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190719.1\r\n- **Date Produced**: 7/19/2019 12:45 PM\r\n- **Commit**: ef7e8f19860b11ccacc41145e7ec30cf222f4258\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 2.0.0-preview8.19369.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11960","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11960)"},{"Id":"470667877","IsPullRequest":true,"CreatedAt":"2019-07-20T12:37:17","Actor":"dotnet-maestro[bot]","Number":"11958","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11958","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11958)"},{"Id":"470665679","IsPullRequest":true,"CreatedAt":"2019-07-20T12:08:32","Actor":"dotnet-maestro[bot]","Number":"11957","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190720.1\r\n- **Date Produced**: 7/20/2019 11:37 AM\r\n- **Commit**: 3a590b432401473b91bb0ec05f64e6f939654b69\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19370.1\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11957","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11957)"},{"Id":"469975655","IsPullRequest":true,"CreatedAt":"2019-07-20T07:04:23","Actor":"nugetlurker","Number":"11946","RawContent":null,"Title":"Insert NuGet Build 5.3.0-preview.2.6103 into cli","State":"closed","Body":"Insert NuGet Build 5.3.0-preview.2.6103 into cli master branch","Url":"https://github.com/dotnet/cli/pull/11946","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.3.0-preview.2.6103 into cli\" (#11946)"},{"Id":"470602535","IsPullRequest":true,"CreatedAt":"2019-07-19T23:44:14","Actor":"dotnet-maestro[bot]","Number":"11954","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190719.5\r\n- **Date Produced**: 7/19/2019 11:13 PM\r\n- **Commit**: a77738e52fd078d8eca452a700403ce650876466\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19369.5\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11954","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11954)"},{"Id":"470607409","IsPullRequest":true,"CreatedAt":"2019-07-19T23:42:51","Actor":"wli3","Number":"11955","RawContent":null,"Title":"Copy PE bits to shims during install","State":"open","Body":"part of https://github.com/dotnet/cli/issues/11300\r\n\r\nUse extracted logic in NET.HostModel. Remove duplicated copy\r\nPass dll to copy from\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11955","RelatedDescription":"Open PR \"Copy PE bits to shims during install\" (#11955)"},{"Id":"470555006","IsPullRequest":true,"CreatedAt":"2019-07-19T21:43:10","Actor":"dotnet-maestro[bot]","Number":"11953","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190719.09\r\n- **Date Produced**: 7/19/2019 9:12 PM\r\n- **Commit**: 3fcf1dac5531a0a92ce53af4eae4fc42316a0ccf\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27919-09\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-27919-09\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27919-09\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27919-09\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11953","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11953)"},{"Id":"470482563","IsPullRequest":true,"CreatedAt":"2019-07-19T19:08:41","Actor":"dotnet-maestro[bot]","Number":"11951","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190719.06\r\n- **Date Produced**: 7/19/2019 6:37 PM\r\n- **Commit**: be200df0d7bb860b7e10b093f43981f8ca120340\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27919-06\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-27919-06\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27919-06\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27919-06\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11951","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11951)"},{"Id":"470487505","IsPullRequest":false,"CreatedAt":"2019-07-19T18:51:26","Actor":"wli3","Number":"11952","RawContent":null,"Title":"Enable comments for tool manifest json","State":"open","Body":"Enable read is easy. But by the current implementation, all the comments will be removed everytime the tool CRUD command is used","Url":"https://github.com/dotnet/cli/issues/11952","RelatedDescription":"Open issue \"Enable comments for tool manifest json\" (#11952)"},{"Id":"470239035","IsPullRequest":true,"CreatedAt":"2019-07-19T18:36:19","Actor":"dotnet-maestro[bot]","Number":"11949","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190719.3\r\n- **Date Produced**: 7/19/2019 6:04 PM\r\n- **Commit**: 447205ce59212b2e0d1c99ba04356ffcbac4ddfd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19369.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11949","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11949)"},{"Id":"470259381","IsPullRequest":true,"CreatedAt":"2019-07-19T11:10:09","Actor":"dotnet-maestro[bot]","Number":"11950","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190719.01\r\n- **Date Produced**: 7/19/2019 10:39 AM\r\n- **Commit**: 4b74b80d087e7143949a7eae7dc6035d9db3f6f7\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27919-01\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-27919-01\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27919-01\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27919-01\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11950","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11950)"},{"Id":"470146737","IsPullRequest":true,"CreatedAt":"2019-07-19T06:08:53","Actor":"dotnet-maestro[bot]","Number":"11948","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190718.7\r\n- **Date Produced**: 7/19/2019 5:38 AM\r\n- **Commit**: 8b3820af14f14970c443a26bb9b4f64b4d5622f7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19368.7\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11948","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11948)"},{"Id":"470120652","IsPullRequest":true,"CreatedAt":"2019-07-19T04:02:08","Actor":"dotnet-maestro[bot]","Number":"11947","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190718.6\r\n- **Date Produced**: 7/19/2019 3:31 AM\r\n- **Commit**: 22a959a503bd5e0a4506d2683449943761aa8781\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19368.6\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11947","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11947)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"471068821","IsPullRequest":true,"CreatedAt":"2019-07-22T12:41:52","Actor":"dotnet-maestro[bot]","Number":"1363","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190721.2\r\n- **Date Produced**: 7/21/2019 6:08 PM\r\n- **Commit**: 347412c9a917c71a744d8e20b090da90aa558a79\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19371.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19371.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19371.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1363","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1363)"},{"Id":"470778037","IsPullRequest":true,"CreatedAt":"2019-07-21T12:59:17","Actor":"dotnet-maestro[bot]","Number":"1362","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190720.5\r\n- **Date Produced**: 7/21/2019 4:24 AM\r\n- **Commit**: 9bb93a61365db848aaf914b5dfb8d6684df3335e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19370.5\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19370.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19370.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1362","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1362)"},{"Id":"470671520","IsPullRequest":true,"CreatedAt":"2019-07-20T13:02:05","Actor":"dotnet-maestro[bot]","Number":"1361","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190719.9\r\n- **Date Produced**: 7/20/2019 6:18 AM\r\n- **Commit**: 45851336efa3b754f427d00cef3d388357aed308\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19369.9\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19369.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19369.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1361","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1361)"},{"Id":"470667719","IsPullRequest":true,"CreatedAt":"2019-07-20T12:15:15","Actor":"dotnet-maestro[bot]","Number":"1360","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1360","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1360)"},{"Id":"470573371","IsPullRequest":true,"CreatedAt":"2019-07-19T23:02:20","Actor":"terrajobst","Number":"1359","RawContent":null,"Title":"Adds attribution for APIs previously specialcased by the compiler","State":"closed","Body":"Reviewed as #1356.","Url":"https://github.com/dotnet/standard/pull/1359","RelatedDescription":"Closed or merged PR \"Adds attribution for APIs previously specialcased by the compiler\" (#1359)"},{"Id":"470089821","IsPullRequest":true,"CreatedAt":"2019-07-19T21:44:01","Actor":"terrajobst","Number":"1356","RawContent":null,"Title":"Adds attribution for APIs previously special-cased by the compiler","State":"closed","Body":"This applies some of the nullable attributes for APIs that were previously special-cased by the compiler. The attribution is very basic only includes cases where we'e a 100% certain that these are never going to change.\r\n\r\nI've arrived here by diffing CoreFX and .NET Standard using the following approach:\r\n\r\n**Included**\r\n\r\n* `DoesNotReturn`\r\n* `DoesNotReturnIf`\r\n\r\n**Considered**\r\n\r\n* `NotNullWhen`\r\n\r\n**Excluded**\r\n\r\n* `MaybeNullWhenAttribute`\r\n* `MaybeNullAttribute`\r\n* `AllowNullAttribute`\r\n* `DisallowNullAttribute`\r\n* `NotNullAttribute`\r\n* `NotNullIfNotNullAttribute`\r\n\r\n@stephentoub @jcouv @dotnet/nullablefc: Please double check my work here.","Url":"https://github.com/dotnet/standard/pull/1356","RelatedDescription":"Closed or merged PR \"Adds attribution for APIs previously special-cased by the compiler\" (#1356)"},{"Id":"470307252","IsPullRequest":true,"CreatedAt":"2019-07-19T12:58:18","Actor":"dotnet-maestro[bot]","Number":"1358","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190718.5\r\n- **Date Produced**: 7/19/2019 2:12 AM\r\n- **Commit**: 182bed51dec709b3b1b56a4f435e0727e5dea110\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19368.5\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19368.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19368.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1358","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1358)"},{"Id":"470290592","IsPullRequest":true,"CreatedAt":"2019-07-19T12:14:40","Actor":"dotnet-maestro[bot]","Number":"1357","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190718.7\r\n- **Date Produced**: 7/18/2019 11:09 PM\r\n- **Commit**: eecde8a8751dbe7fdb17ba4dfbd032e26f4cae7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19368.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1357","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1357)"},{"Id":"469972263","IsPullRequest":true,"CreatedAt":"2019-07-18T21:52:21","Actor":"terrajobst","Number":"1355","RawContent":null,"Title":"Add attributes for expressing nullability","State":"closed","Body":"Discussed in #1349.\r\n\r\n@danmosemsft, any objections taking this? \r\n\r\n/cc @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1355","RelatedDescription":"Closed or merged PR \"Add attributes for expressing nullability\" (#1355)"},{"Id":"469751295","IsPullRequest":true,"CreatedAt":"2019-07-18T20:38:18","Actor":"dotnet-maestro[bot]","Number":"1354","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190717.11\r\n- **Date Produced**: 7/18/2019 5:04 AM\r\n- **Commit**: ba2d62a24ea8574f40c43cd27cc384f079958a0c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19367.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19367.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19367.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1354","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1354)"},{"Id":"468943337","IsPullRequest":true,"CreatedAt":"2019-07-18T20:15:44","Actor":"terrajobst","Number":"1349","RawContent":null,"Title":"Add attributes for expressing nullability","State":"closed","Body":"This issue was brought up as part of a conversation with @divega from the EF team. While .NET Standard 2.1 itself won't have nullable annotations (see #1118), the idea is that code building for .NET Standard 2.1 should be able to express its own nullable state. This PR adds the attribute that are needed by library authors to tweak how their APIs are treated by C#'s flow analysis.\r\n\r\nThese APIs were reviewed in https://github.com/dotnet/corefx/issues/37826.","Url":"https://github.com/dotnet/standard/pull/1349","RelatedDescription":"Closed or merged PR \"Add attributes for expressing nullability\" (#1349)"},{"Id":"469365862","IsPullRequest":false,"CreatedAt":"2019-07-18T18:12:45","Actor":"codernator","Number":"1352","RawContent":null,"Title":"Interesting BadImageFormatException involving generics, deferred functions, and closures.","State":"closed","Body":"I stumbled over an edge case in which it is possible to write code that compiles but generates a BadImageFormatException with HResult: 0x8007000B during runtime. I originally found it in a C# 7.3 dotnet core 2.2 API application, but have reproduced it with a simple example in LINQPad 5, which uses C#7 and I believe dotnet standard 2.  The below contains both the exception generating code as well as similar counter-examples.\r\n\r\n\t/// <summary>\r\n\t/// Demonstrate how a generic function passing a closure to of a deferred function\r\n\t/// can create a BadImageFormatException. This includes an example of the exception,\r\n\t/// and similar examples that do not create the exception.\r\n\t/// </summary>\r\n\tstatic void Main()\r\n\t{\r\n\t\t// The data type and value is not important to this example.\r\n\t\t// Only the context in which this variable is used is important.\r\n\t\tvar myClosure = 0;\r\n\t\t\r\n\t\tHereComesTheException(new object[0]);\r\n\t\t//NonGenericNoException(new object[0]);\r\n\t\t//GenericWorkAroundA(new object[0]);\r\n\t\t//GenericWorkAroundB(new object[0]);\r\n\t\r\n\t\t// This fucntion creates a BadImageFormatException. Note the\r\n\t\t// use of myClosure within a deferred function that is\r\n\t\t// inline to a foreach. As far as I could read the IL, there is no\r\n\t\t// reference to myClosure in the scope of this function.\r\n\t\tvoid HereComesTheException<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tforeach (var thing in things.Where(tt => myClosure == 0)) {}\r\n\t\t}\r\n\t\r\n\t\t// This function doesn't create a BadImageFormatException...\r\n\t\t// The only difference from HereComesTheException is that\r\n\t\t// this function is not generic.\r\n\t\tvoid NonGenericNoException(IEnumerable<object> things)\r\n\t\t{\r\n\t\t\tforeach (var thing in things.Where(tt => myClosure == 0)) {}\r\n\t\t}\r\n\t\r\n\t\t// This function doesn't create a BadImageFormatException because the\r\n\t\t// outer closure is stored in a local variable that is clearly in scope \r\n\t\t// when the deferred function is executed.\r\n\t\tvoid GenericWorkAroundA<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tvar inner = myClosure;\r\n\t\t\tforeach (var thing in things.Where(tt => inner == 0)) {}\r\n\t\t}\r\n\t\t\r\n\t\t// This function doesn't create a BadImageFormatException... \r\n\t\t// Is this because declaring the Enumerator as a local variable forces\r\n\t\t// local context to be given to myClosure?\r\n\t\tvoid GenericWorkAroundB<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tvar filtered = things.Where(tt => myClosure == 0);\r\n\t\t\tforeach (var thing in filtered) {}\r\n\t\t}\r\n\t}","Url":"https://github.com/dotnet/standard/issues/1352","RelatedDescription":"Closed issue \"Interesting BadImageFormatException involving generics, deferred functions, and closures.\" (#1352)"},{"Id":"469731560","IsPullRequest":true,"CreatedAt":"2019-07-18T17:36:33","Actor":"dotnet-maestro[bot]","Number":"1353","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190717.8\r\n- **Date Produced**: 7/17/2019 10:06 PM\r\n- **Commit**: 2359dc4184133defa27c8f3072622270b71b4ecf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19367.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1353","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1353)"},{"Id":"469174631","IsPullRequest":true,"CreatedAt":"2019-07-17T13:00:53","Actor":"dotnet-maestro[bot]","Number":"1351","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190716.11\r\n- **Date Produced**: 7/17/2019 5:26 AM\r\n- **Commit**: da3d086edde315db03ff9b04c2926ab22940d50c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19366.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19366.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19366.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1351","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1351)"},{"Id":"469154006","IsPullRequest":true,"CreatedAt":"2019-07-17T12:15:21","Actor":"dotnet-maestro[bot]","Number":"1350","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190716.4\r\n- **Date Produced**: 7/16/2019 7:16 PM\r\n- **Commit**: 0dd5e2025f0049c133a8706f40e4463b193e5d17\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19366.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1350","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1350)"},{"Id":"468893474","IsPullRequest":true,"CreatedAt":"2019-07-17T01:56:05","Actor":"dotnet-maestro-bot","Number":"1348","RawContent":null,"Title":"[automated] Merge branch 'master' => 'release/3.0'","State":"closed","Body":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @42748379+dotnet-maestro[bot]\n* @wtgodbe\n* @terrajobst\n* @akoeplinger\n* @ericstj\n* @208120+akeeton\n* @roji\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/standard/pull/1348","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'master' => 'release/3.0'\" (#1348)"},{"Id":"468352094","IsPullRequest":true,"CreatedAt":"2019-07-16T22:48:08","Actor":"wtgodbe","Number":"1344","RawContent":null,"Title":"Update branding to 2.2","State":"closed","Body":"Update File/Product versions to 5.0, and package versions to 2.2. Please don't merge before noon on 7/16\r\n\r\nCC @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1344","RelatedDescription":"Closed or merged PR \"Update branding to 2.2\" (#1344)"},{"Id":"468383500","IsPullRequest":true,"CreatedAt":"2019-07-16T17:19:36","Actor":"dotnet-maestro[bot]","Number":"1346","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190715.4\r\n- **Date Produced**: 7/15/2019 7:17 PM\r\n- **Commit**: fb27fd4d8a2b67d4333e33d4b898c65171c9f3c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19365.4\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1346","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1346)"},{"Id":"468629163","IsPullRequest":true,"CreatedAt":"2019-07-16T12:46:38","Actor":"dotnet-maestro[bot]","Number":"1347","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190715.14\r\n- **Date Produced**: 7/16/2019 8:58 AM\r\n- **Commit**: 4b348cc28f0ec996322d4d1a62cfae300f77604e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19365.14\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19365.14\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19365.14\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1347","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1347)"},{"Id":"468375012","IsPullRequest":true,"CreatedAt":"2019-07-15T23:25:46","Actor":"dotnet-maestro[bot]","Number":"1345","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190715.4\r\n- **Date Produced**: 7/15/2019 7:17 PM\r\n- **Commit**: fb27fd4d8a2b67d4333e33d4b898c65171c9f3c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19365.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1345","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1345)"},{"Id":"468110792","IsPullRequest":true,"CreatedAt":"2019-07-15T16:09:13","Actor":"dotnet-maestro[bot]","Number":"1343","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190714.1\r\n- **Date Produced**: 7/14/2019 3:24 PM\r\n- **Commit**: c14b80faff694bae4e085bad221e2e83410e5f33\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19364.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19364.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19364.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1343","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1343)"},{"Id":"468089492","IsPullRequest":true,"CreatedAt":"2019-07-15T12:15:20","Actor":"dotnet-maestro[bot]","Number":"1342","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190714.1\r\n- **Date Produced**: 7/14/2019 1:05 PM\r\n- **Commit**: 0c81c2bbdc49749e9940bc8858ebd16026d51277\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19364.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1342","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1342)"},{"Id":"467832518","IsPullRequest":true,"CreatedAt":"2019-07-14T12:59:01","Actor":"dotnet-maestro[bot]","Number":"1341","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190713.4\r\n- **Date Produced**: 7/14/2019 1:05 AM\r\n- **Commit**: 750e954f0c82accded6ca7ac5a3b0c053de647a5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19363.4\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19363.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19363.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1341","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1341)"},{"Id":"467828224","IsPullRequest":true,"CreatedAt":"2019-07-14T12:14:03","Actor":"dotnet-maestro[bot]","Number":"1340","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190713.1\r\n- **Date Produced**: 7/13/2019 12:59 PM\r\n- **Commit**: 8c94bc75d29cd84e3592e4044100d45a341653f7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19363.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1340","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1340)"},{"Id":"467716205","IsPullRequest":true,"CreatedAt":"2019-07-13T12:54:47","Actor":"dotnet-maestro[bot]","Number":"1339","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190712.11\r\n- **Date Produced**: 7/13/2019 6:12 AM\r\n- **Commit**: 1841042b99062de13dc80098cede9413be569238\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19362.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19362.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19362.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1339","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1339)"},{"Id":"467712007","IsPullRequest":true,"CreatedAt":"2019-07-13T12:14:07","Actor":"dotnet-maestro[bot]","Number":"1338","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190712.5\r\n- **Date Produced**: 7/12/2019 10:49 PM\r\n- **Commit**: 15f50ca6a9d0b441c9927421657fb9dc91206cc9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19362.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1338","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1338)"},{"Id":"467460987","IsPullRequest":false,"CreatedAt":"2019-07-12T20:31:42","Actor":"jons-aura","Number":"1337","RawContent":null,"Title":"netcoreapp2.2 referencing netstandard2.0 dependency conflict","State":"closed","Body":"I have a netcoreapp2.2 project that references a netstandard2.0 project. When I try to build the solution I get the warning below in the log and the build fails completely in Azure Devops.\r\n\r\nAll NuGet packages are up to date.\r\n\r\nI did some searching to find existing issues but they all seem to reference .Net 4.6 or .Net 4.7 and .Net Standard rather than .Net Core\r\n\r\n```\r\n2>    Dependency \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n2>        Could not resolve this reference. Could not locate the assembly \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors.\r\n2>        Required by \"System.Reflection.Metadata\".\r\n2>    There was a conflict between \"System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" and \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n2>        \"System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was chosen because it was primary and \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was not.\r\n2>        References which depend on \"System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\System.Runtime.dll].\r\n2>            C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\System.Runtime.dll\r\n2>              Project file item includes which caused reference \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\System.Runtime.dll\".\r\n2>                C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\System.Runtime.dll\r\n2>        References which depend on \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [].\r\n2>            C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\r\n2>              Project file item includes which caused reference \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\".\r\n2>                System.Reflection.Metadata\r\n2>    C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(2106,5): warning MSB3277: Found conflicts between different versions of \"System.Runtime\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\n2>  Done executing task \"ResolveAssemblyReference\".\r\n```","Url":"https://github.com/dotnet/standard/issues/1337","RelatedDescription":"Closed issue \"netcoreapp2.2 referencing netstandard2.0 dependency conflict\" (#1337)"},{"Id":"467395066","IsPullRequest":true,"CreatedAt":"2019-07-12T12:55:56","Actor":"dotnet-maestro[bot]","Number":"1336","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190711.13\r\n- **Date Produced**: 7/12/2019 8:11 AM\r\n- **Commit**: e519628accc31bd3d5f0a3bc5f937a2ec1dd55d1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19361.13\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19361.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19361.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1336","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1336)"},{"Id":"467378098","IsPullRequest":true,"CreatedAt":"2019-07-12T12:14:08","Actor":"dotnet-maestro[bot]","Number":"1335","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190711.7\r\n- **Date Produced**: 7/12/2019 2:02 AM\r\n- **Commit**: f1b09644408f45f43f5835786b3e4bdfd2e78141\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19361.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1335","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1335)"},{"Id":"466956795","IsPullRequest":false,"CreatedAt":"2019-07-11T15:18:07","Actor":"sabmah","Number":"1334","RawContent":null,"Title":"MSBuild can't package .net 4.6.1 project w/ net core refrences. missing netstandard dll ","State":"open","Body":"I have a .net 4.6.1 class library that references these packages:\r\n\r\n- Microsoft.AspNetCore.Http.Abstractions\r\n- Microsoft.AspNetCore.Http.Features\r\n- Microsoft.AspNetCore.Mvc.Abstractions\r\n- Microsoft.AspNetCore.Routing.Abstractions\r\n\r\nI also added `<Reference Include=\"netstandard\" />` in class library .csproj file because it was complaining w/ error below. \r\n`\r\n The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n`\r\n\r\nThat class library is then referenced in another asp.net 4.6.1 web project. I'm able to build this project on TeamCity CI server and includes netstandard.dll in bin folder.\r\n\r\nBut when I package the web project using `msbuild /t:package /p:configuration=Test`, it doesn't include netstandard.dll in bin folder which causes app to not work in IIS after deployment. I get this error message.\r\n\r\n`\r\nException message: Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\n`\r\n\r\nIs there any reason that why /t:package is not including the netstandard.dll?","Url":"https://github.com/dotnet/standard/issues/1334","RelatedDescription":"Open issue \"MSBuild can't package .net 4.6.1 project w/ net core refrences. missing netstandard dll \" (#1334)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"471491635","IsPullRequest":true,"CreatedAt":"2019-07-23T05:19:44","Actor":"dotnet-maestro[bot]","Number":"39688","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190722.4\r\n- **Date Produced**: 7/23/2019 5:16 AM\r\n- **Commit**: c01a9a157d512343ef104bb2b1f97b356e708b11\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview8.19372.4\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview8.19372.4\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview8.19372.4\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39688","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#39688)"},{"Id":"471455004","IsPullRequest":true,"CreatedAt":"2019-07-23T02:24:12","Actor":"ahsonkhan","Number":"39687","RawContent":null,"Title":"Update dummy fields within the ref by auto-generating them from the source assembly.","State":"open","Body":"From https://github.com/dotnet/corefx/issues/39652#issuecomment-513915482\r\n\r\nPicked out the \"dummy field\" related changes when auto-generated the reference assembly from source (from https://github.com/dotnet/corefx/commit/fa4a2d7a453f3c947e2277e1058457601452feb9 which contains a lot of other changes that we should also consider at some point, like param renames or missing/mismatching API surface).\r\n\r\nSome of them don't make sense to me.\r\n\r\ncc @stephentoub ","Url":"https://github.com/dotnet/corefx/pull/39687","RelatedDescription":"Open PR \"Update dummy fields within the ref by auto-generating them from the source assembly.\" (#39687)"},{"Id":"471424167","IsPullRequest":true,"CreatedAt":"2019-07-23T02:03:56","Actor":"dotnet-maestro[bot]","Number":"39682","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190722.2\r\n- **Date Produced**: 7/23/2019 12:29 AM\r\n- **Commit**: 7e8941976e98230ccaf890c8966a5b506fb280bd\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview8.19372.2\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview8.19372.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview8.19372.2\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39682","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#39682)"},{"Id":"471449304","IsPullRequest":true,"CreatedAt":"2019-07-23T01:57:55","Actor":"omajid","Number":"39686","RawContent":null,"Title":"Add cgroup v2 support to Interop.cgroups","State":"open","Body":"Fix up code to adjust cgroup v1 assumptions and check cgroup v2 paths, locations and values.\r\n\r\nContinue using the older cgroup v1 terminology for APIs.\r\n","Url":"https://github.com/dotnet/corefx/pull/39686","RelatedDescription":"Open PR \"Add cgroup v2 support to Interop.cgroups\" (#39686)"},{"Id":"471446779","IsPullRequest":true,"CreatedAt":"2019-07-23T01:45:28","Actor":"stephentoub","Number":"39685","RawContent":null,"Title":"Re-enable xunit warning 1006","State":"open","Body":"Regex search and replace for [InlineData()] with [Theory].\r\ncc: @ViktorHofer ","Url":"https://github.com/dotnet/corefx/pull/39685","RelatedDescription":"Open PR \"Re-enable xunit warning 1006\" (#39685)"},{"Id":"471445169","IsPullRequest":true,"CreatedAt":"2019-07-23T01:37:08","Actor":"Therzok","Number":"39684","RawContent":null,"Title":"Optimize by avoiding allocation when concatenating IEnumerables","State":"open","Body":"This avoids allocating an iterator object when using Enumerable.Concat and knowing that one of the enumerables is count is always going to be 0 (array, Enumerable.Empty)\r\n\r\n# Analysis:\r\n\r\nMandatory [benchmark results](https://github.com/Therzok/BenchPlayground/blob/master/BenchPlayground/Benchmarks/System.LINQ/FastLinqConcat.md) and [benchmark code](https://github.com/Therzok/BenchPlayground/blob/master/BenchPlayground/Benchmarks/System.LINQ/FastLinqConcat.cs). The benchmark is written such as we hit both the best case and the worst case, and to see what happens in each scenario.\r\n\r\n✅ The data shows improvements across the board on construction/consumption of fast path. \r\n✔️ The data shows some regression on construction time in the worst case scenarios, which is normal as it comes from the extra if checks.\r\n\r\n❓ Weird result on `Enumerable.Empty + new object[] { new object() }`\r\n❓ Can the performance regression be reduced more?\r\n❓ Should tests be added to validate the return type of Concat and that said optimization is applied and doesn't regress?\r\n\r\n# Notes:\r\n❕Sadly, [roslyn codegen](https://sharplab.io/#gist:7f239d2a762917db934fc6dee8b92c5f) for empty iterator code will not benefit from this, as it seems to generate a new iterator type that doesn't do anything, instead of using `Enumerable.Empty<T>`","Url":"https://github.com/dotnet/corefx/pull/39684","RelatedDescription":"Open PR \"Optimize by avoiding allocation when concatenating IEnumerables\" (#39684)"},{"Id":"471444351","IsPullRequest":false,"CreatedAt":"2019-07-23T01:32:58","Actor":"stephentoub","Number":"39683","RawContent":null,"Title":"Consider pooling Http2Stream objects","State":"open","Body":"We've previously abstained from trying to pool Http2Stream objects in SocketsHttpHandler, because of concerns around object lifetime.  With the changes in https://github.com/dotnet/corefx/pull/39638, we should be able to reason much better about exactly when all access to an Http2Stream quiesces, enabling us to pool these objects, which themselves hold on to a fair amount of heavy state.","Url":"https://github.com/dotnet/corefx/issues/39683","RelatedDescription":"Open issue \"Consider pooling Http2Stream objects\" (#39683)"},{"Id":"471421353","IsPullRequest":true,"CreatedAt":"2019-07-23T00:26:23","Actor":"ahsonkhan","Number":"39681","RawContent":null,"Title":"Auto-generate the reference assemblies to normalize them","State":"open","Body":"Auto-generated the reference assemblies using `/t:GenerateReferenceSource` on all projects that already contained a `/ref/` directory.\r\nhttps://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/updating-ref-source.md\r\n\r\n- Sorting alphabetically to be consistent, and fix formatting.\r\n- Fully qualify the types.\r\n- Enums are ordered numerically.\r\n- Follow consistent file name guidelines (fixing the `Utf8String` ref specifically).\r\n- Left `System.Runtime` as is for now other than a cosmetic change.\r\n- Removed nullability annotation from explicit interface implementations (based on discussion with @safern).\r\n\r\nPartially addresses https://github.com/dotnet/corefx/issues/29737\r\n\r\n**There is no additional/removal of APIs in this change. The diff between this PR and master is empty.**","Url":"https://github.com/dotnet/corefx/pull/39681","RelatedDescription":"Open PR \"Auto-generate the reference assemblies to normalize them\" (#39681)"},{"Id":"471414607","IsPullRequest":true,"CreatedAt":"2019-07-23T00:11:34","Actor":"rootwyrm","Number":"39680","RawContent":null,"Title":"Fix inotify support to work with FreeBSD libinotify","State":"open","Body":"FreeBSD provides a kqueue-inotify shim in the form of devel/libinotify. However, because it is not in an expected system location, it requires the full path. Otherwise it will fail as though inotify were not present. With this modification, corefx now accepts the libinotify shim, correctly identifies supported functions, and Just Works (for generous values of Works.)","Url":"https://github.com/dotnet/corefx/pull/39680","RelatedDescription":"Open PR \"Fix inotify support to work with FreeBSD libinotify\" (#39680)"},{"Id":"471215434","IsPullRequest":false,"CreatedAt":"2019-07-22T22:22:35","Actor":"Anipik","Number":"39670","RawContent":null,"Title":"Port System.Diagnostics.Eventing namespace to .Net Core","State":"closed","Body":"We ported System.Diagnostics.Eventlog(2.1) and System.Diagnostics.Eventing.Reader(3.0) but we \r\nmissed types in System.Diagnostics.Eventing\r\n\r\nThe three types are\r\n```\r\nEventDescriptor\r\nEventProvider\r\nEventProviderTraceListener\r\n```\r\n\r\nI am not sure if we missed it by chance or these were not ported on purpose.\r\nCurrently eventing apis can only be used to read the logs and not write it. You will have to use eventlog to write it.\r\nThese types\\apis provide an another way to write eventlogs.\r\n\r\n\r\nRelated Issue https://github.com/dotnet/core/issues/2933\r\n\r\ncc @ericstj @danmosemsft @maryamariyan ","Url":"https://github.com/dotnet/corefx/issues/39670","RelatedDescription":"Closed issue \"Port System.Diagnostics.Eventing namespace to .Net Core\" (#39670)"},{"Id":"471354508","IsPullRequest":false,"CreatedAt":"2019-07-22T21:47:51","Actor":"rillig","Number":"39679","RawContent":null,"Title":"RNGCryptoServiceProvider offers unappropriate API","State":"open","Body":"The RNGCryptoServiceProvider should have an API that provides all the convenience methods of the standard Random class. It looks ridiculous having an [example code snippet that is 34 lines longer than necessary](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rngcryptoserviceprovider?view=netframework-4.8#feedback).\r\n\r\nIf there were a decorator class providing the NextInt functions for rolling a dice or selecting a random element from an array or collection, many of the Stack Overflow answers could be written with a reasonable amount of code. As it is now, there is actual danger of people using the secure random number generator and then forgetting about the bias, just because they don't want to copy and paste the boilerplate code from this example.\r\n\r\nThis boilerplate code should be implemented exactly once, in the .NET standard library, and not millions of times by inexperienced programmers in a hurry of meeting a deadline.\r\n\r\nReferences:\r\n\r\n* https://stackoverflow.com/a/1344255","Url":"https://github.com/dotnet/corefx/issues/39679","RelatedDescription":"Open issue \"RNGCryptoServiceProvider offers unappropriate API\" (#39679)"},{"Id":"471350950","IsPullRequest":true,"CreatedAt":"2019-07-22T21:41:37","Actor":"EgorBo","Number":"39678","RawContent":null,"Title":"Minor performance improvement in CaseInsensitiveAscii","State":"open","Body":"Improves performance for all `CaseInsensitiveAscii` members, e.g.:\r\n```csharp\r\nprivate int FastGetHashCode(string myString)\r\n{\r\n    int myHashCode = myString.Length;\r\n    if (myHashCode != 0)\r\n    {\r\n        myHashCode ^= AsciiToLower[(byte)myString[0]] << 24 ^ \r\n          AsciiToLower[(byte)myString[myHashCode - 1]] << 16;\r\n    }\r\n    return myHashCode;\r\n}\r\n```\r\nAsm diff: https://www.diffchecker.com/lhjjaHnt\r\n","Url":"https://github.com/dotnet/corefx/pull/39678","RelatedDescription":"Open PR \"Minor performance improvement in CaseInsensitiveAscii\" (#39678)"},{"Id":"471347583","IsPullRequest":false,"CreatedAt":"2019-07-22T21:35:17","Actor":"jhudsoncedaron","Number":"39677","RawContent":null,"Title":"Reading Socket.Blocking returns a stale cache value; code and documentation don't agree","State":"open","Body":"I'm not sure if the code is wrong or the documentation is wrong.\r\n\r\nDocumentation says \"The Blocking property indicates whether a Socket is in blocking mode.\" The actual behavior on reading the property is it returns the last value the property was set to. If you make a native API call (in this case the call was WSAEventSelect) the property return is stale. I spent a long time trying to track this down before checking the source code and noticing reading `Blocking` doesn't really do anything.","Url":"https://github.com/dotnet/corefx/issues/39677","RelatedDescription":"Open issue \"Reading Socket.Blocking returns a stale cache value; code and documentation don't agree\" (#39677)"},{"Id":"471261527","IsPullRequest":true,"CreatedAt":"2019-07-22T20:56:02","Actor":"stephentoub","Number":"39674","RawContent":null,"Title":"Re-enable all DisableXUnitAnalyzer test projects","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/39233\r\ncc: @ViktorHofer ","Url":"https://github.com/dotnet/corefx/pull/39674","RelatedDescription":"Closed or merged PR \"Re-enable all DisableXUnitAnalyzer test projects\" (#39674)"},{"Id":"471232289","IsPullRequest":true,"CreatedAt":"2019-07-22T20:45:04","Actor":"stephentoub","Number":"39671","RawContent":null,"Title":"Re-enable ~20 xunit analyzers","State":"closed","Body":"All but one of these had no associated warnings firing.  I fixed one warning to be able to re-enable another analyzer.\r\n\r\ncc: @ViktorHofer ","Url":"https://github.com/dotnet/corefx/pull/39671","RelatedDescription":"Closed or merged PR \"Re-enable ~20 xunit analyzers\" (#39671)"},{"Id":"471246586","IsPullRequest":false,"CreatedAt":"2019-07-22T20:20:25","Actor":"moleszek","Number":"39672","RawContent":null,"Title":"Process.Start not working","State":"closed","Body":"Hi, I don't know if I set this issue in the correct place ;) but I have a problem with .net Core 3.0.\r\nWhen I try to `start.process` I get an error:\r\n\r\n```Log\r\nException has occurred: CLR/System.ComponentModel.Win32Exception\r\nAn unhandled type exception has occurred „System.ComponentModel.Win32Exception” w System.Diagnostics.Process.dll: 'The specified file can not be found.'\r\n   in System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)\r\n   in System.Diagnostics.Process.Start()\r\n   in System.Diagnostics.Process.Start(ProcessStartInfo startInfo)\r\n   in System.Diagnostics.Process.Start(String fileName)\r\n   in simpleApp.Form1.count_Click(Object sender, EventArgs e) in c:\\Repozytoria\\Visual Studio\\simpleApp\\Form1.cs:line 17\r\n   in System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)\r\n   in System.Windows.Forms.Control.WmMouseUp(Message& m, MouseButtons button, Int32 clicks)\r\n   in System.Windows.Forms.Control.WndProc(Message& m)\r\n   in System.Windows.Forms.ButtonBase.WndProc(Message& m)\r\n   in System.Windows.Forms.Button.WndProc(Message& m)\r\n   in System.Windows.Forms.NativeWindow.DebuggableCallback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\r\n   in System.Windows.Forms.UnsafeNativeMethods.DispatchMessageW(MSG& msg)\r\n   in System.Windows.Forms.Application.ComponentManager.System.Windows.Forms.UnsafeNativeMethods.IMsoComponentManager.FPushMessageLoop(IntPtr dwComponentID, Int32 reason, Int32 pvLoopData)\r\n   in System.Windows.Forms.Application.ThreadContext.RunMessageLoopInner(Int32 reason, ApplicationContext context)\r\n   in System.Windows.Forms.Application.ThreadContext.RunMessageLoop(Int32 reason, ApplicationContext context)\r\n   in simpleApp.Program.Main() w c:\\Repozytoria\\Visual Studio\\simpleApp\\Program.cs:line 19\r\n```\r\n\r\n**How to reproduce:**\r\nCreate those functions in .net Core 3.0 preview:\r\n```C#\r\nprivate void openWebPage()\r\n{\r\n    System.Diagnostics.Process.Start(\"http://google.com);\r\n}\r\n```\r\n\r\n**Version**\r\n3.0.100-preview6-012264\r\n\r\n**Language**\r\nC#","Url":"https://github.com/dotnet/corefx/issues/39672","RelatedDescription":"Closed issue \"Process.Start not working\" (#39672)"},{"Id":"471305425","IsPullRequest":false,"CreatedAt":"2019-07-22T20:20:24","Actor":"Duranom","Number":"39676","RawContent":null,"Title":"Task WhenAll WhenAny support for ReadOnlyMemory","State":"open","Body":"Currently `Task.WhenAll` and `Task.WhenAny` currently only accept an Array or IEnumerable of tasks to await. However with the introduction of Span, Memory it would be nice if it would be able to accept a ReadOnlyMemory. I guess ReadOnlySpan could be possible as the implemenations are not async but that would make impossible for later to be changed if needed.\r\n\r\nA sample where we currently trying to get it into is a heavy consumer class that handles a lot of tasks with Task.WhenAny on a min/max threshold basis and after every WhenAny a custom extension splits the completed and ongoing and some processing and then starts the WhenAny loops again with the new view.\r\nThe use of MemoryPool, Span and Segment helped making it less allocating heavy but the only niche weird feeling is that at the moment for Task.WhenAny and Task.WhenAll it is required to do a ToArray() because of the defensive copy that is being made inside.\r\n","Url":"https://github.com/dotnet/corefx/issues/39676","RelatedDescription":"Open issue \"Task WhenAll WhenAny support for ReadOnlyMemory\" (#39676)"},{"Id":"471278473","IsPullRequest":false,"CreatedAt":"2019-07-22T19:39:49","Actor":"DCCoder90","Number":"39675","RawContent":null,"Title":"URI type is determined differently on Linux vs Windows","State":"closed","Body":"Using the code below:\r\n\r\nHow URIs are determined to be absolute vs relative is different based on your OS.  This led to problems for us where it was working locally but not in our containers.   Thankfully we figured it out.\r\n\r\n```\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(IsAbsoluteUri(\"/test/path/\"));\r\n            Console.WriteLine(IsAbsoluteUri(\"test/path\"));\r\n            Console.WriteLine(IsAbsoluteUri(\"http://www.github.com/test\"));\r\n        }\r\n\r\n        public static bool IsAbsoluteUri(params string[] uriParams)\r\n        {\r\n            if (uriParams.Length == 1 && Uri.TryCreate(uriParams[0], UriKind.Absolute, out var result))\r\n                return true;\r\n\r\n            return false;\r\n        }\r\n    }\r\n```\r\n\r\nThe expected return is:\r\n\r\nFalse\r\nFalse\r\nTrue\r\n\r\nHowever, the results are below:\r\n\r\n**Windows**\r\n\r\nFalse\r\nFalse\r\nTrue\r\n\r\n**In a Linux docker container**\r\n\r\nTrue\r\nFalse\r\nTrue","Url":"https://github.com/dotnet/corefx/issues/39675","RelatedDescription":"Closed issue \"URI type is determined differently on Linux vs Windows\" (#39675)"},{"Id":"471180030","IsPullRequest":true,"CreatedAt":"2019-07-22T19:32:06","Actor":"stephentoub","Number":"39667","RawContent":null,"Title":"[release/3.0] Add missing fields to BrotliEncoder/Decoder ref (#39653)","State":"closed","Body":"Port https://github.com/dotnet/corefx/pull/39653 to release/3.0.\r\n\r\ncc: @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/39667","RelatedDescription":"Closed or merged PR \"[release/3.0] Add missing fields to BrotliEncoder/Decoder ref (#39653)\" (#39667)"},{"Id":"471067451","IsPullRequest":true,"CreatedAt":"2019-07-22T19:31:41","Actor":"dotnet-maestro[bot]","Number":"39661","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190721.2\r\n- **Date Produced**: 7/22/2019 12:54 AM\r\n- **Commit**: 500430f40b3420615b67998f003fbf57ad8f5234\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19371.2\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19371.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19371.2\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39661","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#39661)"},{"Id":"471177731","IsPullRequest":true,"CreatedAt":"2019-07-22T18:06:57","Actor":"stephentoub","Number":"39665","RawContent":null,"Title":"Update breaking changes doc with a few clarifications","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/37892","Url":"https://github.com/dotnet/corefx/pull/39665","RelatedDescription":"Closed or merged PR \"Update breaking changes doc with a few clarifications\" (#39665)"},{"Id":"471206453","IsPullRequest":true,"CreatedAt":"2019-07-22T17:18:52","Actor":"scalablecory","Number":"39669","RawContent":null,"Title":"HTTP2: Validate dynamic table size updates","State":"open","Body":"Fixes a bug where a misbehaving server could enable a dynamic table size larger than our configured maximum (which is currently 0).\r\n\r\nAlso sets the maximum size to the Dynamic Table, so that a server which does not respect our maximum of 0 will cause an error.\r\n\r\nResolves #39666","Url":"https://github.com/dotnet/corefx/pull/39669","RelatedDescription":"Open PR \"HTTP2: Validate dynamic table size updates\" (#39669)"},{"Id":"471181676","IsPullRequest":true,"CreatedAt":"2019-07-22T16:37:46","Actor":"buyaa-n","Number":"39668","RawContent":null,"Title":"Large json serializaiton/deserialization tests","State":"open","Body":"Tought its better to use large object close to real world example. So used BlogSpot json class from @layomia's Real world tests PR dotnet#39094.\r\nAdded 2 tests: one for large size object producing json with size from 6kB to 15MB,  another for an object with deep nested structure up to max supported depth.","Url":"https://github.com/dotnet/corefx/pull/39668","RelatedDescription":"Open PR \"Large json serializaiton/deserialization tests\" (#39668)"},{"Id":"471035362","IsPullRequest":false,"CreatedAt":"2019-07-22T16:36:43","Actor":"chenyj796","Number":"39659","RawContent":null,"Title":"Window.ShowDialog sometimes blocks several seconds when there is a task frequently update UI","State":"closed","Body":"I have a Window to display high frequency market data.\r\nI use Dispatcher.InvokeAsync(... , DispatcherPriority.Background) to update the UI. \r\nSometimes if I click some button to show a dialog window, it will block the whole application with serveral seconds.","Url":"https://github.com/dotnet/corefx/issues/39659","RelatedDescription":"Closed issue \"Window.ShowDialog sometimes blocks several seconds when there is a task frequently update UI\" (#39659)"},{"Id":"471178036","IsPullRequest":false,"CreatedAt":"2019-07-22T16:30:26","Actor":"scalablecory","Number":"39666","RawContent":null,"Title":"HTTP2: dynamic table size update is unchecked for 1-byte sizes","State":"open","Body":"In our HPACK decoder, for single-byte dynamic table size updates we are not checking against `_maxDynamicTableSize`:\r\n\r\nhttps://github.com/dotnet/corefx/blob/98db7d16ba21886901efbce6ea7b7e2b4ccec23c/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HPack/HPackDecoder.cs#L215-L219\r\n\r\nWe do check it with multi-byte sizes:\r\n\r\nhttps://github.com/dotnet/corefx/blob/98db7d16ba21886901efbce6ea7b7e2b4ccec23c/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HPack/HPackDecoder.cs#L321-L325\r\n\r\nHowever, we aren't ever setting `_maxDynamicTableSize` to anything other than the default of 4096, so right now this validation isn't working as intended:\r\n\r\nhttps://github.com/dotnet/corefx/blob/98db7d16ba21886901efbce6ea7b7e2b4ccec23c/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs#L99\r\n\r\nThis will allow for sizes larger than settings allow.","Url":"https://github.com/dotnet/corefx/issues/39666","RelatedDescription":"Open issue \"HTTP2: dynamic table size update is unchecked for 1-byte sizes\" (#39666)"},{"Id":"471156427","IsPullRequest":true,"CreatedAt":"2019-07-22T16:30:04","Actor":"stephentoub","Number":"39664","RawContent":null,"Title":"Remove unnecessary empty try { } blocks","State":"closed","Body":"Unnecessary in .NET Core code.  I didn't modify additional instances in libraries that target netstandard/netfx.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/15411\r\ncc: @danmosemsft, @bartonjs","Url":"https://github.com/dotnet/corefx/pull/39664","RelatedDescription":"Closed or merged PR \"Remove unnecessary empty try { } blocks\" (#39664)"},{"Id":"471143847","IsPullRequest":false,"CreatedAt":"2019-07-22T16:13:16","Actor":"RobertBouillon","Number":"39663","RawContent":null,"Title":"Add IEnumerable<T>.ToArray(int) overload to optimize performance","State":"closed","Body":"LINQ's default `ToArray()` is great for rapid-development, but sometimes you know the size of the desired array and you don't need `ToArray()` to spend CPU time figuring it out. By supplying the desired array size, you can bypass a lot of superfluous code in the default `ToArray()` designed to intelligently determine the size of the new array.\r\n\r\n```csharp\r\n//Current API\r\nstring[] ConvertToString(int[] foo) => foo.Select(x=>x.ToString()).ToArray();\r\n\r\n//Proposed API allows the implementer to supply the desired length.\r\nstring[] ConvertToString(int[] foo) => foo.Select(x=>x.ToString()).ToArray(foo.Length);\r\n```\r\n\r\nPrototype:\r\n```csharp\r\npublic static T[] ToArray<T>(this IEnumerable<T> source, int count)\r\n{\r\n  T[] ret = new T[count];\r\n\r\n  int index = 0;\r\n  foreach(T item in source)\r\n    ret[index++] = item;\r\n  return ret;\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/39663","RelatedDescription":"Closed issue \"Add IEnumerable<T>.ToArray(int) overload to optimize performance\" (#39663)"},{"Id":"471057100","IsPullRequest":true,"CreatedAt":"2019-07-22T13:34:46","Actor":"dotnet-maestro[bot]","Number":"39660","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19369.2\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19369.2\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19369.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39660","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#39660)"},{"Id":"471087851","IsPullRequest":true,"CreatedAt":"2019-07-22T13:13:13","Actor":"dotnet-maestro[bot]","Number":"39662","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190719.08\r\n- **Date Produced**: 7/19/2019 8:26 PM\r\n- **Commit**: 7d70bbe81b4b86d491e30f957551441464c85375\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.27919.8\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.27919.8\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.27919.8\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190721.2\r\n- **Date Produced**: 7/21/2019 6:08 PM\r\n- **Commit**: 347412c9a917c71a744d8e20b090da90aa558a79\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19371.2\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19371.2\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190720.2\r\n- **Date Produced**: 7/20/2019 1:26 PM\r\n- **Commit**: 72b16fc9b77a004c6b9ca93f4856624d8bb0c864\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19370.2\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39662","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard\" (#39662)"},{"Id":"471255379","IsPullRequest":false,"CreatedAt":"2019-07-19T21:48:40","Actor":"omajid","Number":"39673","RawContent":null,"Title":"Add cgroup v2 support to .NET Core","State":"open","Body":"The Linux kernel includes a feature called \"cgroup\" (or \"cgroups\"). This allows managing - specially limiting - resources (cpu, memory, etc) for a collection of processes. This is one of the underlying technology pieces used by projects like docker, podman, kubernetes and systemd to limit various resources for processes.\r\n\r\nThe first version of cgroup has a number of design issues and a redesign, cgroup v2, was implemented in the Linux kernel. There are a number of incompatibilities between cgroup v1 and cgroup v2.\r\n\r\nComplete documentation of cgroup v2 is available here: https://www.kernel.org/doc/Documentation/cgroup-v2.txt \r\n\r\nSome Linux distributions, such as Fedora, are starting to switch to it as the default: https://fedoraproject.org/wiki/Changes/CGroupsV2. Even where it's not the default, adding `systemd.unified-cgroup-hierarchy=1` to the kernel command can be used to enable it for testing.\r\n\r\nCurrently, .NET Core doesn't support cgroup v2. This issue is for tracking the changes/fixes required across the different .NET Components.\r\n\r\nCoreCLR:\r\n- [ ] Add cgroupv 2 support to gc/unix/cgroup.cpp\r\n- [ ] Add cgroup v2 support to PAL\r\n\r\nCoreFx:\r\n- [ ] Fix reading the memory limit in `Interop.cgroups.cs`: https://github.com/dotnet/corefx/pull/39686\r\n- [x] Fix `cgroup2fs` in the file system information in `Interop.MountPoints.FormatInfo.cs`: https://github.com/dotnet/corefx/pull/39633","Url":"https://github.com/dotnet/corefx/issues/39673","RelatedDescription":"Open issue \"Add cgroup v2 support to .NET Core\" (#39673)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"471485045","IsPullRequest":false,"CreatedAt":"2019-07-23T04:47:39","Actor":"yyjdelete","Number":"37422","RawContent":null,"Title":"`csharp_indent_labels = flush_left` shouldn't affect indent of comment after label","State":"open","Body":"**Version Used**: \r\nVS2019 16.2Preview4 or dotnet-format 3.0.4\r\nCompiler version: '3.2.0-beta4-19359-03 (15b43b33)'. Language version: latest.\r\n\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Format the below code with `csharp_indent_labels = flush_left`\r\n\r\n**Expected Behavior**:\r\nflush_left:\r\n```csharp\r\n        public void M()\r\n        {\r\n//comment1\r\nlabel:\r\n            //comment2\r\n            Console.WriteLine(\"test\");\r\n        }\r\n```\r\nIndent of the comment after label should not be affected, as it does for `csharp_indent_labels = one_less_than_current`(94c8fc41a4e5e3c7b0f1ccb4150eee004467e0fb).\r\n\r\none_less_than_current:\r\n```csharp\r\n        public void M()\r\n        {\r\n        //comment1\r\n        label:\r\n            //comment2\r\n            Console.WriteLine(\"test\");\r\n        }\r\n```\r\n\r\n**Actual Behavior**:\r\nflush_left:\r\n```csharp\r\n        public void M()\r\n        {\r\n//comment1\r\nlabel:\r\n//comment2\r\n            Console.WriteLine(\"test\");\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/37422","RelatedDescription":"Open issue \"`csharp_indent_labels = flush_left` shouldn't affect indent of comment after label\" (#37422)"},{"Id":"471483373","IsPullRequest":false,"CreatedAt":"2019-07-23T04:39:28","Actor":"CyrusNajmabadi","Number":"37421","RawContent":null,"Title":"Test harness for region analysis has some strange behavior.","State":"open","Body":"From PR: https://github.com/dotnet/roslyn/pull/37395 and @gafter:\r\n\r\n> OK, I think I understand why that test behaves the way it does. Other APIs will display bad behavior too. Please file an issue for it and notate the unexpected test with that bug number. Tag me in the bug and I will fix it.\r\n\r\nThe unexpected test is LocalFuncCapture8 (which has also been updated to link to this issue).","Url":"https://github.com/dotnet/roslyn/issues/37421","RelatedDescription":"Open issue \"Test harness for region analysis has some strange behavior.\" (#37421)"},{"Id":"471481362","IsPullRequest":false,"CreatedAt":"2019-07-23T04:29:56","Actor":"CyrusNajmabadi","Number":"37420","RawContent":null,"Title":"Can't f5 roslyn.","State":"open","Body":"Getting this error:\r\n\r\n```\r\n14>C:\\Users\\cyrus\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19369.2\\tools\\VisualStudio.VsixBuild.targets(162,5): error MSB4062: The \"Microsoft.DotNet.Build.Tasks.VisualStudio.FinalizeInsertionVsixFile\" task could not be loaded from the assembly C:\\Users\\cyrus\\.nuget\\packages\\microsoft.dotnet.build.tasks.visualstudio\\1.0.0-beta.19369.2\\tools\\net472\\Microsoft.DotNet.Build.Tasks.VisualStudio.dll. Could not load file or assembly 'file:///C:\\Users\\cyrus\\.nuget\\packages\\microsoft.dotnet.build.tasks.visualstudio\\1.0.0-beta.19369.2\\tools\\net472\\Microsoft.DotNet.Build.Tasks.VisualStudio.dll' or one of its dependencies. The system cannot find the file specified. Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n```\r\n\r\nNot sure what can be done about this...","Url":"https://github.com/dotnet/roslyn/issues/37420","RelatedDescription":"Open issue \"Can't f5 roslyn.\" (#37420)"},{"Id":"471410351","IsPullRequest":true,"CreatedAt":"2019-07-23T00:02:26","Actor":"dotnet-bot","Number":"37419","RawContent":null,"Title":"Merge master to features/ide-cleanup","State":"open","Body":"\nThis is an automatically generated pull request from master into features/ide-cleanup.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/ide-cleanup\ngit reset --hard upstream/features/ide-cleanup\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/ide-cleanup --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37419","RelatedDescription":"Open PR \"Merge master to features/ide-cleanup\" (#37419)"},{"Id":"471396924","IsPullRequest":false,"CreatedAt":"2019-07-22T23:33:57","Actor":"kiwiant","Number":"37418","RawContent":null,"Title":"CA1062: Validate arguments of public methods - when using custom extension method","State":"open","Body":"Visual Studio 2019 (16.1.6) with Microsoft.CodeAnalysis.FxCopAnalyzers 2.9.3.\r\n\r\nWe use an extension method that helps keep our methods clean and simple but this results in a \"CA1062: Validate arguments of public methods\" warning. This isn't ideal as we still want the warning if we don't call our extension method (`CheckArgumentNull`).\r\n\r\nExtension method:\r\n```\r\n        public static void CheckArgumentNull(this object value, string paramName)\r\n        {\r\n            if (value == null)\r\n                throw new ArgumentNullException(paramName);\r\n        }\r\n```\r\nAllows us to check parameters like this:\r\n          `  paramName.CheckArgumentNull(nameof(paramName));`\r\n\r\n...rather than the more wordy:\r\n```\r\n            if (paramName == null)\r\n                throw new ArgumentNullException(nameof(paramName));\r\n```\r\n\r\nSome thoughts on this:\r\n1. Perhaps the code analysis can look into extension method for a check.\r\n2. Perhaps we can decorate the extension method with something like AttributeUsage to indicate the CA1062 is handled and can be ignored.\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/37418","RelatedDescription":"Open issue \"CA1062: Validate arguments of public methods - when using custom extension method\" (#37418)"},{"Id":"471390884","IsPullRequest":false,"CreatedAt":"2019-07-22T23:21:53","Actor":"tmat","Number":"37417","RawContent":null,"Title":"Incorrect sequence point emitted for using declaration","State":"open","Body":"**Version Used**: \r\n![image](https://user-images.githubusercontent.com/41759/61671716-b2231f80-ac9d-11e9-855d-944a92a523de.png)\r\n\r\n**Steps to Reproduce**:\r\n\r\n**Test case 1**\r\n\r\n```C#\r\nusing System;\r\nusing System.IO;\r\n\r\nclass C\r\n{\r\n    static void G()\r\n    {\r\n        using var m = new MemoryStream();\r\n        Console.WriteLine(1);\r\n    }\r\n}\r\n```\r\n\r\nThe compiler currently emits the following IL and sequence points:\r\n\r\n```\r\n.method public hidebysig static \r\n        void Main2 () cil managed \r\n    {\r\n        .locals init (\r\n            [0] class C\r\n        )\r\n\r\n        IL_0000: nop\r\n        IL_0001: newobj instance void C::.ctor()\r\n        IL_0006: stloc.0\r\n        .try\r\n        {\r\n            IL_0007: ldc.i4.1\r\n            IL_0008: call void [mscorlib]System.Console::WriteLine(int32)\r\n            IL_000d: nop\r\n\r\n            // sequence point `}`   [1]\r\n            IL_000e: leave.s IL_001b\r\n        } // end .try\r\n        finally\r\n        {\r\n            // sequence point: hidden\r\n            IL_0010: ldloc.0\r\n            IL_0011: brfalse.s IL_001a\r\n\r\n            IL_0013: ldloc.0\r\n            IL_0014: callvirt instance void [mscorlib]System.IDisposable::Dispose()\r\n            IL_0019: nop\r\n\r\n            // sequence point: hidden\r\n            IL_001a: endfinally\r\n        }\r\n\r\n        // sequence point `}`     [1]\r\n        IL_001b: ret\r\n    }\r\n```\r\n\r\nNotice the duplicate sequence points on closing brace [1]. It results in the following ambiguity when someone drags IP to the closing brace:\r\n \r\n![image](https://user-images.githubusercontent.com/41759/61671476-adaa3700-ac9c-11e9-81cd-8f8202f9abea.png)\r\n\r\nWhen stepping we want the debugger to stop on `}` before `Dispose` is called.\r\nThe first sequence point on `leave.s` is therefore necessary. The second sequence point on the `ret` instruction should be changed to a hidden sequence point to avoid the ambiguity.\r\n\r\n**Test case 2**\r\n\r\nIn the following case the sequence point for closing `}` of the if statement is not emitted on the `leave` instruction, but on the `nop` instruction following the disposal.\r\nBy the time the `}` sequence point (or breakpoint) is hit the object is already disposed, which is unexpected.\r\n\r\n```C#\r\nusing System;\r\nusing System.IO;\r\nclass C\r\n{\r\n    public static bool G() => true;\r\n\r\n    static void Main()\r\n    {\r\n        if (G()) \r\n        {\r\n            using var m = new MemoryStream();\r\n            Console.WriteLine(1);\r\n        }\r\n        Console.WriteLine(2);\r\n    }\r\n}\r\n```\r\n\r\n```\r\n{\r\n  // Code size       46 (0x2e)\r\n  .maxstack  1\r\n  .locals init (bool V_0,\r\n                System.IO.MemoryStream V_1) //m\r\n  // sequence point: {\r\n  IL_0000:  nop\r\n  // sequence point: if (G())\r\n  IL_0001:  call       \"\"bool C.G()\"\"\r\n  IL_0006:  stloc.0\r\n  // sequence point: <hidden>\r\n  IL_0007:  ldloc.0\r\n  IL_0008:  brfalse.s  IL_0026\r\n  // sequence point: {\r\n  IL_000a:  nop\r\n  // sequence point: var m = new MemoryStream();\r\n  IL_000b:  newobj     \"\"System.IO.MemoryStream..ctor()\"\"\r\n  IL_0010:  stloc.1\r\n  .try\r\n  {\r\n    // sequence point: Console.WriteLine(1);\r\n    IL_0011:  ldc.i4.1\r\n    IL_0012:  call       \"\"void System.Console.WriteLine(int)\"\"\r\n    IL_0017:  nop\r\n    IL_0018:  leave.s    IL_0025\r\n  }\r\n  finally\r\n  {\r\n    // sequence point: <hidden>\r\n    IL_001a:  ldloc.1\r\n    IL_001b:  brfalse.s  IL_0024\r\n    IL_001d:  ldloc.1\r\n    IL_001e:  callvirt   \"\"void System.IDisposable.Dispose()\"\"\r\n    IL_0023:  nop\r\n    // sequence point: <hidden>\r\n    IL_0024:  endfinally\r\n  }\r\n  // sequence point: }\r\n  IL_0025:  nop\r\n  // sequence point: Console.WriteLine(2);\r\n  IL_0026:  ldc.i4.2\r\n  IL_0027:  call       \"\"void System.Console.WriteLine(int)\"\"\r\n  IL_002c:  nop\r\n  // sequence point: }\r\n  IL_002d:  ret\r\n}\r\n```\r\n\r\n**Test case 3**\r\n\r\nFinally, in the following test case\r\n\r\n```C#\r\nusing System;\r\nusing System.IO;\r\nclass C\r\n{\r\n    static int Main()\r\n    {\r\n        using MemoryStream m = new MemoryStream();\r\n        Console.WriteLine(1);\r\n        return 1;\r\n    }\r\n}\r\n```\r\n\r\nThe `leave` instruction is also missing a sequence point and the `ret` instruction has sequence point for `}`.\r\nThus by the time a break point placed on `}` is hit the object has already been disposed, but the variable is still in scope for evaluation.\r\n\r\n```\r\n{\r\n  // Code size       31 (0x1f)\r\n  .maxstack  1\r\n  .locals init (System.IO.MemoryStream V_0, //m\r\n                int V_1)\r\n  // sequence point: {\r\n  IL_0000:  nop\r\n  // sequence point: MemoryStream m = new MemoryStream();\r\n  IL_0001:  newobj     \"\"System.IO.MemoryStream..ctor()\"\"\r\n  IL_0006:  stloc.0\r\n  .try\r\n  {\r\n    // sequence point: Console.WriteLine(1);\r\n    IL_0007:  ldc.i4.1\r\n    IL_0008:  call       \"\"void System.Console.WriteLine(int)\"\"\r\n    IL_000d:  nop\r\n    // sequence point: return 1;\r\n    IL_000e:  ldc.i4.1\r\n    IL_000f:  stloc.1\r\n    IL_0010:  leave.s    IL_001d\r\n  }\r\n  finally\r\n  {\r\n    // sequence point: <hidden>\r\n    IL_0012:  ldloc.0\r\n    IL_0013:  brfalse.s  IL_001c\r\n    IL_0015:  ldloc.0\r\n    IL_0016:  callvirt   \"\"void System.IDisposable.Dispose()\"\"\r\n    IL_001b:  nop\r\n    // sequence point: <hidden>\r\n    IL_001c:  endfinally\r\n  }\r\n  // sequence point: }\r\n  IL_001d:  ldloc.1\r\n  IL_001e:  ret\r\n}\r\n```\r\n\r\nSee tests `PDBTests.UsingDeclaration_*`.","Url":"https://github.com/dotnet/roslyn/issues/37417","RelatedDescription":"Open issue \"Incorrect sequence point emitted for using declaration\" (#37417)"},{"Id":"471381533","IsPullRequest":true,"CreatedAt":"2019-07-22T23:03:20","Actor":"jnm2","Number":"37416","RawContent":null,"Title":"Sort Traits.Features members alphabetically","State":"open","Body":"I opened the file in Notepad++, selected the members inside Features, and ran Edit > 'Line operations' > 'Sort lines lexicographically ascending.'","Url":"https://github.com/dotnet/roslyn/pull/37416","RelatedDescription":"Open PR \"Sort Traits.Features members alphabetically\" (#37416)"},{"Id":"471378547","IsPullRequest":false,"CreatedAt":"2019-07-22T22:57:29","Actor":"vsfeedback","Number":"37415","RawContent":null,"Title":"Invalid Inline variable declaration code fix","State":"open","Body":"<pre>class Foo\n{\n    public Bar Bar;\n}\nclass Bar\n{\n    public int Value;\n}\n\n\npublic static int Test(out int bar) =&gt; throw new NotImplementedException();\n\n\npublic void Inline()\n{\n    int bar; // This can be inlined\n    _ = new Foo()\n    {\n        Bar =\n        {\n            Value = Test(out bar)\n        }\n    };\n}</pre><p>When using the code-fix to apply inline variable declaration on the variable `bar` in the `Inline` function, the generated code will be `Value = Test(out intbar)` instead of `Value = Test(out int bar)` (note the missing space).</p><p>This only happens when using nested initializer syntax.</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/517656/invalid-inline-variable-declaration-code-fix.html\nVSTS ticketId: 839184_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/8/2019, 00:56 AM (105 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37415","RelatedDescription":"Open issue \"Invalid Inline variable declaration code fix\" (#37415)"},{"Id":"471362487","IsPullRequest":true,"CreatedAt":"2019-07-22T22:12:29","Actor":"dotnet-bot","Number":"37414","RawContent":null,"Title":"Merge master to features/compilerNext","State":"open","Body":"\nThis is an automatically generated pull request from master into features/compilerNext.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/compilerNext\ngit reset --hard upstream/features/compilerNext\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/compilerNext --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37414","RelatedDescription":"Open PR \"Merge master to features/compilerNext\" (#37414)"},{"Id":"471362459","IsPullRequest":true,"CreatedAt":"2019-07-22T22:12:23","Actor":"dotnet-bot","Number":"37413","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37413","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#37413)"},{"Id":"471361891","IsPullRequest":true,"CreatedAt":"2019-07-22T22:10:30","Actor":"chsienki","Number":"37412","RawContent":null,"Title":"Fix Build badges:","State":"open","Body":" - Update generate script\r\n - Update readme.me with latest run of script","Url":"https://github.com/dotnet/roslyn/pull/37412","RelatedDescription":"Open PR \"Fix Build badges:\" (#37412)"},{"Id":"471227128","IsPullRequest":false,"CreatedAt":"2019-07-22T20:54:19","Actor":"jnm2","Number":"37404","RawContent":null,"Title":"'Find all references' breaks when assigning via deconstruction","State":"closed","Body":"**Version Used**: Visual Studio 16.1.6\r\n\r\nI wanted to see a list of all writes to parameter `a`, so I right-clicked the write to `a` that was in front of me:\r\n\r\n```cs\r\nclass C\r\n{\r\n    void M(int a, int b)\r\n    {\r\n        // Find all references of the parameter `a` by right-clicking the first reference to it\r\n        // in the following line (on the left-hand side of the assignment):\r\n        (a, b) = Adjust(a, b);\r\n    }\r\n\r\n    (int a, int b) Adjust(int a, int b)\r\n    {\r\n        a++;\r\n        b++;\r\n        return (a, b);\r\n    }\r\n\r\n    void AVeryUnrelatedMethod()\r\n    {\r\n        var x = (a: 3, b: 4);\r\n        Console.WriteLine(x.a);\r\n    }\r\n}\r\n```\r\n\r\nThe result should have been the same as if I had right-clicked any other reference to the parameter `a`:\r\n\r\n![image](https://user-images.githubusercontent.com/8040367/61653637-babd2b00-ac88-11e9-8515-a3be6fc32f38.png)\r\n\r\nInstead, it returned all references to `(int a, int b).a` which is not at all the same thing as the parameter `a` which is referenced in the syntax that I clicked. It even dug into other projects:\r\n\r\n![image](https://user-images.githubusercontent.com/8040367/61653541-8ea1aa00-ac88-11e9-9566-db998553ae13.png)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/37404","RelatedDescription":"Closed issue \"'Find all references' breaks when assigning via deconstruction\" (#37404)"},{"Id":"471277305","IsPullRequest":false,"CreatedAt":"2019-07-22T19:36:43","Actor":"YairHalberstadt","Number":"37411","RawContent":null,"Title":"Cannot build latest Roslyn","State":"open","Body":"**Version Used**: master as of earlier today, VS 16.20 preview 4\r\n\r\n**Steps to Reproduce**: \r\ncannot build roslyn. I've tried building in VS, as well as shutting down VS, deleting .vs folder, running Restore.cmd, running build.cmd, but it fails.\r\n\r\nThe error message is:\r\n\r\n```\r\nerror CS1617: Invalid option '8.0' for /langversion. Use '/langversion:?' to list supported values.\r\n```","Url":"https://github.com/dotnet/roslyn/issues/37411","RelatedDescription":"Open issue \"Cannot build latest Roslyn\" (#37411)"},{"Id":"471268642","IsPullRequest":false,"CreatedAt":"2019-07-22T19:20:34","Actor":"TessenR","Number":"37410","RawContent":null,"Title":"Roslyn can't decide whether variable is nullable or not in switch guard clauses","State":"open","Body":"\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n#nullable enable\r\npublic class C {\r\n    void M(object obj)\r\n    {\r\n        string? s = \"\";\r\n\r\n        switch (obj)\r\n        {\r\n            case IA _ when MA(out s):\r\n                break;\r\n\r\n            case IB _ when MB(s, out var x)\r\n                        && x.ToString() != \"\" // CS8602: Dereference of a possibly null reference.\r\n                        && (x = null) != \"\":  // CS8600: Converting null literal or possible null value to non-nullable type.\r\n            case ID _:  // <-- change this pattern to IC to get another set of warnings\r\n                x = null; // CS8600: Converting null literal or possible null value to non-nullable type.\r\n                \r\n                break;\r\n        }\r\n    }\r\n    \r\n    bool MA(out string? s) { s = \"\"; return false; }\r\n    bool MB<T>(T t, out T o) { o = t; return false; }\r\n}\r\n\r\ninterface IA { }\r\ninterface IB { }\r\ninterface IC { }\r\ninterface ID : IA { }\r\n\r\ninterface I<T> { }\r\n```\r\n\r\n**Expected Behavior**:\r\n`x` is either of type `string?` or `string` but not both.\r\n\r\n**Actual Behavior**:\r\nRoslyn behaves as if the variable is both `string?` and `string` in the guard clause disallowing both its dereferences and its assignments with nulls.\r\n\r\n**Notes**\r\nYou can also get interesting combinations of warnings with generics:\r\n```\r\n#nullable enable\r\npublic class C {\r\n    void M(object obj)\r\n    {\r\n        string? s = \"\";\r\n        switch (obj)\r\n        {\r\n            case IA _ when MA(out s):\r\n                break;\r\n\r\n            case IB _ when MB(s, out var x)\r\n                && (x = new D<string>()) != null   // CS8619: Nullability of reference types in value of type 'D<string>' doesn't match target type 'I<string?>'.\r\n                && (x = new D<string?>()) != null: // CS8619: Nullability of reference types in value of type 'D<string?>' doesn't match target type 'I<string>'.\r\n            case IC _:\r\n                x = new D<string>();\r\n                x = new D<string?>(); // CS8619: Nullability of reference types in value of type 'D<string?>' doesn't match target type 'I<string>'.\r\n                break;\r\n                \r\n        }\r\n    }\r\n    \r\n    bool MA(out string? s) { s = \"\"; return false; }\r\n    bool MB<T>(T t, out I<T> o) { o = new D<T>(); return false; }\r\n}\r\n\r\ninterface IA { }\r\ninterface IB { }\r\ninterface IC : IA { }\r\n\r\ninterface I<T> { }\r\nclass D<T> : I<T> { }\r\n```\r\n\r\nThe root cause for such behavior seems to be that these guard clauses are processed multiple times as parts of  the decision directed acyclic graphs of the switch statements and variables `s` has different states over multiple passes. According to this the analysis behavior actually makes sense since the guard clause might be visited with `s` being non-null and `x` inferred to non-nullable string in one pass and with `s` being `null` and `x` inferred to `string?` in another pass.\r\n\r\nHowever `NullableWalker` doesn't just produce warnings but also uses `NullabilityRewriter` to update types of every expression with inferred nullability.  Currently it updates usages of `x` in the guard clauses to **some** types with **some** nullability that was observed during the last pass. This behavior seems unreliable if Roslyn will ever request the types of these expressions for any purpose. Is this intended? What should be the inferred type of variables `x` in the examples above?\r\n\r\n/cc @jcouv \r\n\r\n**Version Used**: \r\n\r\n```\r\nBranch master (21 Jun 2019)\r\nLatest commit 898bed by Heejae Chang:\r\nadded NFW to get some data on incremental parsing bug where source si� (#36620)\r\n\r\n* added NFW to get some data on incremental parsing bug where source size and tree size is different\r\n\r\n* more comments\r\n```\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/37410","RelatedDescription":"Open issue \"Roslyn can't decide whether variable is nullable or not in switch guard clauses\" (#37410)"},{"Id":"471260986","IsPullRequest":false,"CreatedAt":"2019-07-22T19:01:27","Actor":"chsienki","Number":"37409","RawContent":null,"Title":"Remove derived Symbol.Equals(object)","State":"open","Body":"As part of #37247 we've added a new internal virtual method to Symbol: `Equals(Symbol, TypeCompareKind)`\r\n\r\nWe should replace all usages of `Equals(Object)` in any derived types with the new overload, and make `Equals(Object)` sealed, so that no types can implement it going forward.\r\n\r\nDerived types can then either use the comparison as needed, or discard it if it doesn't make sense in the context of the symbol.","Url":"https://github.com/dotnet/roslyn/issues/37409","RelatedDescription":"Open issue \"Remove derived Symbol.Equals(object)\" (#37409)"},{"Id":"471210963","IsPullRequest":true,"CreatedAt":"2019-07-22T18:55:30","Actor":"JoeRobich","Number":"37403","RawContent":null,"Title":"Add dotnet-format feature branch to myget publishing","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37403","RelatedDescription":"Closed or merged PR \"Add dotnet-format feature branch to myget publishing\" (#37403)"},{"Id":"471257447","IsPullRequest":false,"CreatedAt":"2019-07-22T18:54:57","Actor":"vsfeedback","Number":"37408","RawContent":null,"Title":"Statement indentation level gets broken with comment","State":"closed","Body":"\n```\nif (true)\n{\n    //some comment\n}\n```\n\nIf you hit enter twice after the comment, the caret moves to curly bracket level.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/649720/statement-indentation-level-gets-broken-with-comme.html\nVSTS ticketId: 948418_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 7/18/2019, 02:37 AM (4 days ago): <markdown><p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n</markdown>\nEnbi Zhang [MSFT] on 7/19/2019, 00:40 AM (3 days ago): <markdown><p>Thanks for your feedback.<br>\nWhich language of your project used? C#, VB or C++?<br>\nAlso did you install any extension? If yes, can you disable/uninstall them and reopen vs, see if the issue still occurs?</p>\n</markdown>\nsavascilve on 7/19/2019, 02:19 AM (3 days ago): Hi,<br><br>It's C#. I've tried disabling all extensions one by one, no luck. Also I've tried on diiferent type of projects (class library, web api, console app, winforms..) on net framework 4.6.2, 4.7, .net core 2.1, .net core 2.2. <br><br>Attached a gif.<br>\nEnbi Zhang [MSFT] on 7/21/2019, 06:42 PM (17 hours ago): <markdown><p>We have redirected your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n</markdown>\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37408","RelatedDescription":"Closed issue \"Statement indentation level gets broken with comment\" (#37408)"},{"Id":"471253972","IsPullRequest":false,"CreatedAt":"2019-07-22T18:44:50","Actor":"kendrahavens","Number":"37407","RawContent":null,"Title":"Add Delay in Real Time Compilation in Visual Studio.","State":"open","Body":"[Original developer community item](https://developercommunity.visualstudio.com/content/idea/417970/add-delay-in-real-time-compilation-in-visual-studi.html)\r\n\r\n> I am working on an Open Source Project based on C# using Visual Studio 2017. Whenever I make any changes in it, Visual Studio (in a delay of about half a second) starts checking the code for errors in it which is why sometimes it gets hanged. I want to know if there is any option to increase this delay. If the delay would have been of about 3 - 5 seconds, I could make changes without any error list generated. I don't want to disable this awesome feature, but it is irritating if you don't have a great typing speed. Any solution?\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/37407","RelatedDescription":"Open issue \"Add Delay in Real Time Compilation in Visual Studio.\" (#37407)"},{"Id":"471249882","IsPullRequest":false,"CreatedAt":"2019-07-22T18:34:47","Actor":"vsfeedback","Number":"37406","RawContent":null,"Title":"Can't view all fields in constructor","State":"open","Body":"I have a constructor that takes 50 parameters. When creating a &quot;new&quot; object in vb.net, intellisense is only showing approximately 38 parameters and once I get to the 39th or so parameter, it no longer shows a suggestion (it will still show the list, but won't show any more suggestions).\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/574987/cant-view-all-fields-in-constructor.html\r\nVSTS ticketId: 896040_\r\n_These are the original issue comments:_\r\n\r\nVisual Studio Feedback System on 5/20/2019, 08:19 PM (62 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\r\n\r\n_These are the original issue solutions:_\r\n(no solutions)\r\n\r\n![image](https://user-images.githubusercontent.com/7817401/61656268-47f68480-ac75-11e9-9bbf-5ae4b6fc1eed.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/37406","RelatedDescription":"Open issue \"Can't view all fields in constructor\" (#37406)"},{"Id":"471248095","IsPullRequest":false,"CreatedAt":"2019-07-22T18:30:37","Actor":"vsfeedback","Number":"37405","RawContent":null,"Title":"Visual Studio 2019 crashes with C# file containing a method with too many locals","State":"open","Body":"<p>This apparently happens when a C# program contains a method that initializes enough value types in the stack to cause a StackOverflowException at runtime.</p><p><strong>Repro steps</strong></p><p>1. Clone repro project from <a href=\"https://github.com/divega/Repro14702\" target=_blank>https://github.com/divega/Repro14702</a></p><p>2. Open Program.cs on the IDE </p><p>3. Start scrolling on the file until VS crashes</p><p><strong>Actual result </strong></p><p>1. After processing the file in the background and and freezing the UI for a few seconds, Visual Studio crashes </p><p>2. When Visual Studio automatically restarts, it crashes again</p><p><strong>Expected result </strong></p><p>Visual Studio 2019 is stable and handles this file gracefully, like Visual Studio 2017.</p><p><strong>Notes </strong></p><p>1. Visual Studio only crashes if Program.cs remains open in the IDE for a few seconds. </p><p>2. The repro project has some dependencies, but this seems to be just a bug in the IDE (or perhaps in some add-in). </p><p>3. After one of the crashes, I saw a message saying &quot;Developer Analytics Tools 9.0.20206.1 likely caused 8 seconds of unresponsiveness. Disabling it may improve your experience.&quot;, but I was still able to repro after disabling the add-in.</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/469046/visual-studio-2019-crashes-with-c-file-containing.html\nVSTS ticketId: 802077_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 2/25/2019, 07:30 PM (146 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\nVisual Studio Feedback System on 2/26/2019, 00:02 AM (146 days ago): <p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\nSam Harwell [MSFT] on 7/9/2019, 06:25 AM (13 days ago): <markdown><p>Thank you for providing feedback, and we’re sorry to hear it’s not behaving as you expect. Based on your description so far, it sounds like you are experiencing a problem which is historically hard to diagnose and resolve using the normal “steps to reproduce”. We created a set of instructions for providing additional information which will help us track down the true source of the problems.</p>\n<p>Based on the information provided so far, the most likely scenario to follow is for “Crashes”. Please take a look at the following document to provide the feedback most relevant for the problems you would like to see fixed: <a target='_blank' href=\"https://github.com/dotnet/roslyn/wiki/Reporting-Visual-Studio-crashes-and-performance-issues#crashes\">https://github.com/dotnet/roslyn/wiki/Reporting-Visual-Studio-crashes-and-performance-issues#crashes</a></p>\n</markdown>\nBlair Wang [MSFT] on 7/22/2019, 07:37 AM (3 hours ago): We will close this report in 7 days because we don’t have enough information to investigate further. To keep the problem open, please provide the requested details.\nDiego Vega [MSFT] on 7/22/2019, 10:30 AM (60 min ago): <strong>(private comment)</strong><p><a rel=\"user\" href=\"https://developercommunity.visualstudio.com/users/13574/dcf4b92c-eeb4-6431-9549-12ecbe90be90.html\" nodeid=\"13574\">@Sam Harwell [MSFT]</a> I can confirm that this still crashes in the last dogfooding builds (I have Microsoft Visual Studio Enterprise 2019 Int Preview\nVersion 16.3.0 Preview 1.0 [29118.114.d16.3]). It repros consistently, every time on my machine, just following the simple steps in the repro. I am happy to talk and show you the repro in Teams. </p>\n\nDiego Vega [MSFT] on 7/22/2019, 10:49 AM (40 min ago): <strong>(private comment)</strong><p>I also have a crash heap dump <a target='_blank' href=\"https://developercommunity.visualstudio.com/storage/attachments/84426-devenvexe23032.zip\">devenvexe23032.zip</a></p>\n\nDiego Vega [MSFT] on 7/22/2019, 10:59 AM (30 min ago): <p>The only difference I have observed from the original repro (possibly a behavior change in recent builds) is that when Visual Studio restarts automatically after the crash, the Program.cs file isn't open, and VS won't crash again util you open it and do some amount of scrolling.</p><p>I have attached a crash dump in a message to Microsoft.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37405","RelatedDescription":"Open issue \"Visual Studio 2019 crashes with C# file containing a method with too many locals\" (#37405)"},{"Id":"471190816","IsPullRequest":false,"CreatedAt":"2019-07-22T16:55:41","Actor":"tmat","Number":"37402","RawContent":null,"Title":"Consider adjusting breakpoint spans for await foreach and using declarations","State":"open","Body":"A breakpoint span that corresponds to an initial sequence point of an `await foreach` statement and `await using` and `using` declarations does not currently cover `await` or `using` keywords. When a breakpoint is attempted to be placed on one of these keywords in the IDE it gets placed on the following part of the foreach statement or the variable declaration. These behaviors are in sync between the compiler and the IDE, so functionally there is no issue. However, it feels odd that the breakpoint does not cover the keywords as we include the modifiers in the breakpoint span in other variable declaring constructs, like a field declaration.\r\n\r\nAsync foreach:\r\n![image](https://user-images.githubusercontent.com/41759/61648973-65bbed80-ac65-11e9-80fa-4fe2a982fe0b.png)\r\n\r\nUsing declaration:\r\n![image](https://user-images.githubusercontent.com/41759/61649116-aae01f80-ac65-11e9-9b72-09f131882f6e.png)\r\n\r\n![image](https://user-images.githubusercontent.com/41759/61649068-90a64180-ac65-11e9-9054-72728b30ddd2.png)\r\n\r\n![image](https://user-images.githubusercontent.com/41759/61649049-8ab06080-ac65-11e9-9466-d10d9af9ba1b.png)\r\n\r\nField declaration:\r\n![image](https://user-images.githubusercontent.com/41759/61649644-b849d980-ac66-11e9-9184-014cb5ffe0bc.png)\r\n\r\n![image](https://user-images.githubusercontent.com/41759/61649832-11197200-ac67-11e9-921b-bb5ee808296e.png)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/37402","RelatedDescription":"Open issue \"Consider adjusting breakpoint spans for await foreach and using declarations\" (#37402)"},{"Id":"471151293","IsPullRequest":false,"CreatedAt":"2019-07-22T15:09:47","Actor":"vsfeedback","Number":"37401","RawContent":null,"Title":"Ctrl+. -> generate field puts generated field inside #region IDisposable Support","State":"open","Body":"\nSupposecode snippet 1 below. Place cursor on the constructor's parameter, press Ctrl+. and choose any of the &quot;Create and initialize...&quot; menu options. The generated code will be placed inside the &quot;#region IDisposable support&quot;, like code snippet number two.\n\nI would expect it to be generated in front of the constructor.\n\n**Code snippet 1**\nDoes not declare or initialize afield or property to hold the constructor parameter.\n```\npublic class Disposable : IDisposable\n\t{\n\t\tpublic Disposable(string something)\n\t\t{\n\t\t}\n\n#region IDisposable Support\n\t\tprivate bool disposedValue = false; // To detect redundant calls\n\nprotected virtual void Dispose(bool disposing)\n\t\t{\n\t\t}\n\t\tpublic void Dispose()\n\t\t{\n\t\t\tDispose(true);\n\t\t}\n\t\t#endregion\n\t}\n```\n\n**Code snippet 2**\nAfter using the &quot;Create and initialize field 'something'&quot; code completion tool. Note the generated field is placed on line 9 inside the IDisposable region.\n```\npublic class Disposable : IDisposable\n\t{\n\t\tpublic Disposable(string something)\n\t\t{\n\t\t\tthis.something = something;\n\t\t}\n\n#region IDisposable Support\n\t\tprivate bool disposedValue = false; // To detect redundant calls\n\t\tprivate readonly string something;\n\nprotected virtual void Dispose(bool disposing)\n\t\t{\n\t\t}\n\t\tpublic void Dispose()\n\t\t{\n\t\t\tDispose(true);\n\t\t}\n\t\t#endregion\n\t}\n```\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/652913/ctrl-generate-field-puts-generated-field-inside-re.html\nVSTS ticketId: 949988_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 7/22/2019, 01:35 AM (6 hours ago): <markdown><p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n</markdown>\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37401","RelatedDescription":"Open issue \"Ctrl+. -> generate field puts generated field inside #region IDisposable Support\" (#37401)"},{"Id":"471148782","IsPullRequest":false,"CreatedAt":"2019-07-22T15:05:14","Actor":"vsfeedback","Number":"37400","RawContent":null,"Title":"Copying solution folder then opening sln => wrong source files opened on startup","State":"open","Body":"Every morning I copy my solution folder then rename it.  For example folder .. \\Solution_07_18_2019 gets copied to .. \\Solution_07_19_2019 (no source control, etc. - I'm the only developer).  Then I launch Visual Studio and open the new copy by browsing to Solution_07_19_2019\\...\\Solution.sln.  The project opens fine, and Visual Studio automatically reopens/loads the source files I had open when I last closed the Solution (yesterday) - but it loads them from the old location!  So I have to remember to close them all or I will be editing the old versions (the clue I forgot is when intellisense starts acting funny in the source file).  For example if I do File/Save As it shows the old location .. \\Solution_07_18_2019\\.. \\SourceFile.cs.  Simply closing all the open documents then double-clicking on them in the Solution Explorer to reopen the correct ones works fine.  I actually put a &quot;close all documents&quot; tool-bar button on my tool-bar...\n\nI would suggest not opening the &quot;last-open&quot; documents at all if the sln file is not where it was previously?  Or using relative paths?\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/653069/copying-solution-folder-then-opening-sln-wrong-sou.html\nVSTS ticketId: 950068_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 7/22/2019, 05:43 AM (2 hours ago): <markdown><p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n</markdown>\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37400","RelatedDescription":"Open issue \"Copying solution folder then opening sln => wrong source files opened on startup\" (#37400)"},{"Id":"471069887","IsPullRequest":false,"CreatedAt":"2019-07-22T12:34:10","Actor":"huoyaoyuan","Number":"37398","RawContent":null,"Title":"IDE0019 'use pattern matching' duplicates preprocessor","State":"open","Body":"**Version Used**: \r\nVisual Studio 16.1.6\r\n\r\n**Steps to Reproduce**:\r\n```csharp\r\n        public static void M(object o)\r\n        {\r\n\r\n#if DEBUG\r\n            Console.WriteLine(\"in debug\");\r\n#endif\r\n\r\n            string s = o as string;\r\n            if (s != null)\r\n            {\r\n\r\n            }\r\n        }\r\n```\r\n**Expected Behavior**:\r\nCode fix to:\r\n```csharp\r\n        public static void M(object o)\r\n        {\r\n\r\n#if DEBUG\r\n            Console.WriteLine(\"in debug\");\r\n#endif\r\n\r\n            if (o is string s)\r\n            {\r\n\r\n            }\r\n        }\r\n```\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/5644458/61632657-f4f5ef00-acbf-11e9-8d86-6ca98f91d138.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/37398","RelatedDescription":"Open issue \"IDE0019 'use pattern matching' duplicates preprocessor\" (#37398)"},{"Id":"470953582","IsPullRequest":true,"CreatedAt":"2019-07-22T08:10:20","Actor":"YairHalberstadt","Number":"37397","RawContent":null,"Title":"Convert To Interpolated Strings refactoring provider should treat cha…","State":"open","Body":"…r literals the same way it treats string literals.\r\n\r\nSee https://github.com/dotnet/roslyn/issues/37324\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/37397","RelatedDescription":"Open PR \"Convert To Interpolated Strings refactoring provider should treat cha…\" (#37397)"},{"Id":"470934317","IsPullRequest":true,"CreatedAt":"2019-07-22T07:21:53","Actor":"agocke","Number":"37396","RawContent":null,"Title":"WIP","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37396","RelatedDescription":"Open PR \"WIP\" (#37396)"},{"Id":"470722630","IsPullRequest":true,"CreatedAt":"2019-07-22T05:12:07","Actor":"dotnet-maestro[bot]","Number":"37393","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/37393","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#37393)"},{"Id":"470822167","IsPullRequest":true,"CreatedAt":"2019-07-21T20:36:41","Actor":"CyrusNajmabadi","Number":"37395","RawContent":null,"Title":"Add new feature to add assignments for unassigned 'out' parameters.","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/15430\r\n\r\nLooks like: \r\n\r\n![image](https://user-images.githubusercontent.com/4564579/61596762-72d0d200-abbc-11e9-842e-9f97bb394fcd.png)\r\n\r\nNote: this needed adding an actual new compiler API for determining definite-analysis information of variables, as per https://github.com/dotnet/roslyn/issues/15430.\r\n\r\nTODO\r\n\r\n- [ ] VB side of new API.\r\n- [ ] VB tests.\r\n- [x] Tests for IDE features.","Url":"https://github.com/dotnet/roslyn/pull/37395","RelatedDescription":"Open PR \"Add new feature to add assignments for unassigned 'out' parameters.\" (#37395)"},{"Id":"470811996","IsPullRequest":false,"CreatedAt":"2019-07-21T18:44:54","Actor":"hez2010","Number":"37394","RawContent":null,"Title":"Nullable Check didn't check for ?? false","State":"open","Body":"**Version Used**: 16.2.0-preview-19278-01+d635043bd\r\n\r\n**Steps to Reproduce**:\r\n```\r\nmkdir NullableTest && cd NullableTest\r\ndotnet new console\r\n```\r\nThen enable NullableContextOptions, and write code:\r\n```csharp\r\nusing System;\r\n\r\nnamespace NullableTest\r\n{\r\n    class InnerClass\r\n    {\r\n        public bool TestField;\r\n    }\r\n    class Test\r\n    {\r\n        public InnerClass? InnerField;\r\n    }\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n\r\n        static bool Test()\r\n        {\r\n            var x = new Test();\r\n            if (x.InnerField?.TestField ?? false) // obviously if x.InnerField is null, it won't enter the `if` statement so there's no nullable-related issues\r\n            {\r\n                return x.InnerField.TestField;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```\r\ndotnet build\r\n```\r\n\r\n**Expected Behavior**:\r\nNo warnings and no errors.\r\n\r\n**Actual Behavior**:\r\n```\r\nProgram.cs(25,24): warning CS8602: Dereference of a possibly null reference.\r\n```\r\n\r\n**Additional Information**\r\nThe if (xx?.yy ?? false) is commonly used in C#, I hope that Roslyn can support checking nullability for this syntax ","Url":"https://github.com/dotnet/roslyn/issues/37394","RelatedDescription":"Open issue \"Nullable Check didn't check for ?? false\" (#37394)"},{"Id":"470718771","IsPullRequest":false,"CreatedAt":"2019-07-20T22:05:01","Actor":"Dreamescaper","Number":"37392","RawContent":null,"Title":"DeclarationNameCompletionProvider should suggest names for nullable types","State":"open","Body":"**Version Used**: \r\n16.2 P4\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\npublic class Class1\r\n{\r\n  public void Method()\r\n  {\r\n    TestStruct? $$\r\n  }\r\n}\r\n\r\npublic struct TestStruct { }\r\n```\r\n\r\n**Expected Behavior**:\r\nFor this code variable name should be suggested, e.g. 'testStruct'.\r\n\r\n**Actual Behavior**:\r\nNo suggestions.\r\n\r\n\r\n\r\nProblem is that `TestStruct?` is considered as ConditionalExpression, not as VariableDeclaration (see [here](https://sharplab.io/#v2:C4LghgzsA0AmIGoA+ABAzAAhQJgwYQBtIIBGAWACgBvSjLTFAFgwFkBTYACwHtYAKAJS0MNCnToAVNlADKwAE4BXAMbAA/BmEBfSjoqV0GKEtUYpshSuAiMWoA==)).\r\nIt only becomes VariableDeclaration after variable name is added, which is too late for DeclarationNameCompletionProvider.\r\n\r\n\r\nAdded couple of failing tests for this issue, you can find them [here](https://github.com/Dreamescaper/roslyn/commit/248107d000477431ef5efb7a4070426e11ba8f48).\r\n(Originally planned to fix the issue myself, but I'm not familiar with parsing functionality)","Url":"https://github.com/dotnet/roslyn/issues/37392","RelatedDescription":"Open issue \"DeclarationNameCompletionProvider should suggest names for nullable types\" (#37392)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"471340295","IsPullRequest":false,"CreatedAt":"2019-07-22T21:15:59","Actor":"nattress","Number":"7643","RawContent":null,"Title":"Compile static constructors for R2R","State":"open","Body":"CPAOT doesn't compile static constructors which has a runtime JIT cost. We should measure with them enabled (rooting them all for compilation) to assess if they give a startup benefit worth the cost of carrying them in the binary.","Url":"https://github.com/dotnet/corert/issues/7643","RelatedDescription":"Open issue \"Compile static constructors for R2R\" (#7643)"},{"Id":"471311302","IsPullRequest":false,"CreatedAt":"2019-07-22T20:29:12","Actor":"nattress","Number":"7642","RawContent":null,"Title":"Access checks in JIT interface methods","State":"open","Body":"The final section of `CEEInfo::getCallInfo` (https://github.com/dotnet/coreclr/blob/5f93d3b1c48ba6916d5f31d79cb7c17d564eecef/src/vm/jitinterface.cpp#L5597) deals with access checks validating the declarative authority of a given caller to call the callee. This is currently missing in the CPAOT compiler. Similar checks needed in `CEEInfo::getFieldInfo`.","Url":"https://github.com/dotnet/corert/issues/7642","RelatedDescription":"Open issue \"Access checks in JIT interface methods\" (#7642)"},{"Id":"471307755","IsPullRequest":false,"CreatedAt":"2019-07-22T20:23:51","Actor":"nattress","Number":"7641","RawContent":null,"Title":"Type Layout Checks","State":"open","Body":"To protect system resiliency, Crossgen emits method pre-codes (code that is guaranteed to run once before a given method is executed for the first time) that checks various properties of dependent types outside the version bubble that affect codegen of that particular method. This functionality is currently missing and needs porting into CPAOT.","Url":"https://github.com/dotnet/corert/issues/7641","RelatedDescription":"Open issue \"Type Layout Checks\" (#7641)"},{"Id":"469527045","IsPullRequest":false,"CreatedAt":"2019-07-22T14:31:50","Actor":"forestbat","Number":"7631","RawContent":null,"Title":"Future of AOT","State":"closed","Body":"#https://github.com/dotnet/coreclr/commit/0cc81b60eb184c92b8526348d4bb056ed563e9d6\r\n#https://github.com/dotnet/corefx/commit/1acaa2017cfc64ef1aabcf3b19d0e097af692616\r\nAs we all know，development for .NET5 has started and this project is like a forgotten corner，so in the next year（until November 2020）will MS invest more to this？\r\nAnd will AOT of C#（either corert or mono aot）support more processor structure such as MIPS or RISCV？\r\nHope your reply.","Url":"https://github.com/dotnet/corert/issues/7631","RelatedDescription":"Closed issue \"Future of AOT\" (#7631)"},{"Id":"470729291","IsPullRequest":false,"CreatedAt":"2019-07-21T18:17:23","Actor":"Suchiman","Number":"7639","RawContent":null,"Title":"CoreRT instructions no longer work","State":"closed","Body":"I'm not sure what has changed but it affects both of my machines:\r\n```\r\nMicrosoft.NETCore.Native.Publish.targets(78,5): error :\r\nThe PrivateSdkAssemblies ItemGroup is required for _ComputeAssembliesToCompileToNative\r\n```\r\nbut only when using the nuget package and not when using my own CoreRT build","Url":"https://github.com/dotnet/corert/issues/7639","RelatedDescription":"Closed issue \"CoreRT instructions no longer work\" (#7639)"},{"Id":"470798920","IsPullRequest":false,"CreatedAt":"2019-07-21T16:21:50","Actor":"davidfowl","Number":"7640","RawContent":null,"Title":"Latest WebAPI broken","State":"open","Body":"I haven't looked into it as yet but we made some changes that seem to result in failures after compiling with the IL compiler.\r\n\r\n```\r\nUnhandled Exception: System.PlatformNotSupportedException: Operation is not supported on this platform.\r\n   at System.Reflection.Runtime.Assemblies.RuntimeAssembly.get_CodeBase() + 0x24\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.RelatedAssemblyAttribute.GetRelatedAssemblies(Assembly, Boolean, Func`2, Func`2) + 0x50\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.<GetAsemblyClosure>d__9.MoveNext() + 0x8d\r\n   at System.Linq.Enumerable.ConcatIterator`1.MoveNext() + 0x62\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateDefaultParts(String) + 0x16f\r\n   at Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.GetApplicationPartManager(IServiceCollection) + 0x81\r\n   at Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.AddMvcCore(IServiceCollection) + 0x17\r\n   at Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllersCore(IServiceCollection) + 0xa\r\n   at Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllers(IServiceCollection) + 0x11\r\n   at WebApplication2.Startup.ConfigureServices(IServiceCollection) + 0xc\r\n   at WebApplication2!<BaseAddress>+0xcd7ccd\r\n   at System.InvokeUtils.CallDynamicInvokeMethod(Object, IntPtr, Object, IntPtr, IntPtr, Object, Object[], BinderBundle, Boolean, Boolean, Boolean) + 0x218\r\n   at Internal.Reflection.Execution.MethodInvokers.InstanceMethodInvoker.Invoke(Object, Object[], BinderBundle, Boolean) + 0x7f\r\n   at Internal.Reflection.Core.Execution.MethodInvoker.Invoke(Object, Object[], Binder, BindingFlags, CultureInfo) + 0x46\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeMethodInfo.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo) + 0x58\r\n   at Microsoft.AspNetCore.Hosting.ConfigureServicesBuilder.InvokeCore(Object, IServiceCollection) + 0xf6\r\n   at Microsoft.AspNetCore.Hosting.GenericWebHostBuilder.UseStartup(Type, HostBuilderContext, IServiceCollection) + 0x198\r\n   at Microsoft.AspNetCore.Hosting.GenericWebHostBuilder.<>c__DisplayClass12_0.<UseStartup>b__0(HostBuilderContext, IServiceCollection) + 0xa1\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider() + 0x19e\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build() + 0x3a\r\n   at WebApplication2.Program.Main(String[]) + 0x1b\r\n   at WebApplication2!<BaseAddress>+0xc04c30\r\n```\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7640","RelatedDescription":"Open issue \"Latest WebAPI broken\" (#7640)"},{"Id":"470726858","IsPullRequest":false,"CreatedAt":"2019-07-21T03:46:42","Actor":"Shadow4walker","Number":"7638","RawContent":null,"Title":"System.Reflection.MissingRuntimeArtifactException","State":"closed","Body":"I'm trying to use a [NoesisGUI](https://github.com/Shadow4walker/NoesisSample) with corert\r\nalso i have tried all of rd.xml possible solutions with no luck!! idk what am i missing here! \"actually I don't know what's the correct way to use rd.xml with this\"\r\n[NoesisGUI Managed SDK](https://github.com/Noesis/Managed)\r\n\r\n here's the log after starting the sample\r\n\r\n> Unhandled Exception: EETypeRva:0x009F1C88(System.Reflection.MissingRuntimeArtifactException): MakeGenericMethod() cannot create this generic method instantiation because the instantiation was not metadata-enabled: 'Noesis.Extend.CreateGetterHelper<NoesisApp.Display,System.Int32>(System.Reflection.MethodInfo)' For more information, please visit http://go.microsoft.com/fwlink/?LinkID=616868\r\n   at Internal.Reflection.Core.Execution.ExecutionEnvironment.GetMethodInvoker(RuntimeTypeInfo, QMethodDefinition, RuntimeTypeInfo[], MemberInfo) + 0x148\r\n   at System.Reflection.Runtime.MethodInfos.NativeFormat.NativeFormatMethodCommon.GetUncachedMethodInvoker(RuntimeTypeInfo[], MemberInfo) + 0x50\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeMethodInfo.get_MethodInvoker() + 0xa8\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeNamedMethodInfo`1.MakeGenericMethod(Type[]) + 0x104\r\n   at Noesis.Extend.CreateGetter[ReturnT](Type, MethodInfo) + 0x6b\r\n   at Noesis.Extend.PropertyAccessorRO`1..ctor(PropertyInfo) + 0x3e\r\n   at Noesis.Extend.<>c__DisplayClass407_0`1.<AddPropertyAccessor>b__1() + 0x24\r\n   at Noesis.Extend.AddPropertyAccessor(Extend.NativeTypePropsInfo, PropertyInfo, Func`1, Func`1) + 0xa4\r\n   at Noesis.Extend.AddPropertyAccessor[PropertyT](Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x88\r\n   at Noesis.Extend.<>c.<AddPropertyFunctions>b__405_4(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x39\r\n   at Noesis.Extend.AddProperty(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0xae\r\n   at Noesis.Extend.CreateNativePropsData(Type, PropertyInfo[], Extend.NativeTypeInfo, Int32&) + 0x1b4\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x278\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.AddProperty(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x108\r\n   at Noesis.Extend.CreateNativePropsData(Type, PropertyInfo[], Extend.NativeTypeInfo, Int32&) + 0x1b4\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x278\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.CreateNativeTypeData(Type, IntPtr) + 0x4e\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x266\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.NewCPtr(Type, Object) + 0x21\r\n   at Noesis.Extend.GetInstanceHandle(Object) + 0x6c\r\n   at NoesisApp.Application.Start() + 0x28f\r\n   at NoesisApp.Application.Run() + 0x30\r\n   at ConsoleApp1.Program.Main(String[]) + 0x5c\r\n   at ConsoleApp1!<BaseAddress>+0x52d480<","Url":"https://github.com/dotnet/corert/issues/7638","RelatedDescription":"Closed issue \"System.Reflection.MissingRuntimeArtifactException\" (#7638)"},{"Id":"468264724","IsPullRequest":false,"CreatedAt":"2019-07-19T17:48:46","Actor":"cshung","Number":"7619","RawContent":null,"Title":"build failed on clang5.0","State":"closed","Body":"On 32 bit architectures, `size_t` is an unsigned 32 bit integer, and therefore the condition can never be true. On `clang5.0`, this becomes a warning and blocks the build.\r\n\r\n```\r\n/corert/src/Native/gc/unix/cgroup.cpp:440:31: error: comparison of constant 9223372032559808512 with expression of type 'size_t' (aka 'unsigned int') is always false [-Werror,-Wtautological-constant-out-of-range-compare]\r\n    if (physical_memory_limit > 0x7FFFFFFF00000000)\r\n        ~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~\r\n1 error generated.\r\n```\r\n\r\nHere is the associated code:\r\n```\r\n    // If there's no memory limit specified on the container this \r\n    // actually returns 0x7FFFFFFFFFFFF000 (2^63-1 rounded down to \r\n    // 4k which is a common page size). So we know we are not\r\n    // running in a memory restricted environment.\r\n    if (physical_memory_limit > 0x7FFFFFFF00000000)\r\n    {\r\n        return 0;\r\n    }\r\n```\r\nAll we have to do is to figure out what would be returned on an unrestricted 32-bit execution environment. I have tried it on a physical arm32 device, without being inside a Docker container, it returned 0 because [`FindHierarchyMount`](https://github.com/dotnet/corert/blob/98cdb7f8ccecdc886775e28448091fa59665025e/src/Native/gc/unix/cgroup.cpp#L169) finds nothing.\r\n\r\nAccording to [this thread](https://unix.stackexchange.com/questions/420906/what-is-the-value-for-the-cgroups-limit-in-bytes-if-the-memory-is-not-restricte), it appears to me that for 32-bits architectures, we should probably check against a different constant, I haven't figured that out yet.","Url":"https://github.com/dotnet/corert/issues/7619","RelatedDescription":"Closed issue \"build failed on clang5.0\" (#7619)"},{"Id":"470254205","IsPullRequest":true,"CreatedAt":"2019-07-19T16:29:37","Actor":"MichalStrehovsky","Number":"7636","RawContent":null,"Title":"Adjust getMethodSig for generic inlining","State":"closed","Body":"We were not using the `memberParent` parameter, but it's critical to use it when generic inlining happens.\r\n\r\nFixes #7625.","Url":"https://github.com/dotnet/corert/pull/7636","RelatedDescription":"Closed or merged PR \"Adjust getMethodSig for generic inlining\" (#7636)"},{"Id":"469096443","IsPullRequest":false,"CreatedAt":"2019-07-19T16:29:37","Actor":"Berrysoft","Number":"7625","RawContent":null,"Title":"CodeGenerationFailedException after July 13th","State":"closed","Body":"```\r\nILCompiler.CodeGenerationFailedException: Code generation failed ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\n  Parameter name: index\r\n     at Internal.JitInterface.CorInfoImpl.HandleToObject(IntPtr handle)\r\n     at Internal.JitInterface.CorInfoImpl.HandleToObject(CORINFO_CLASS_STRUCT_* type)\r\n     at Internal.JitInterface.CorInfoImpl.isMoreSpecificType(CORINFO_CLASS_STRUCT_* cls1, CORINFO_CLASS_STRUCT_* cls2)\r\n     at Internal.JitInterface.CorInfoImpl._isMoreSpecificType(IntPtr thisHandle, IntPtr* ppException, CORINFO_CLASS_STRUCT_* cls1, CORINFO_CLASS_STRUCT_* cls2)\r\n     --- End of inner exception stack trace ---\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.ComputeDependencyNodeDependencies(List`1 obj)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n```\r\nThe same code built successfully in July 12th, but failed after July 13th. I suspect it is because of #7612, but I don't know the reason exactly.\r\nAddition: I tried to reproduce the bug by a \"Hello world\" program, but it is built successfully, so I even don't know how to reproduce it.","Url":"https://github.com/dotnet/corert/issues/7625","RelatedDescription":"Closed issue \"CodeGenerationFailedException after July 13th\" (#7625)"},{"Id":"470345239","IsPullRequest":true,"CreatedAt":"2019-07-19T16:18:01","Actor":"jkotas","Number":"7637","RawContent":null,"Title":"Port GC change from CoreCLR","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7637","RelatedDescription":"Closed or merged PR \"Port GC change from CoreCLR\" (#7637)"},{"Id":"470057749","IsPullRequest":true,"CreatedAt":"2019-07-19T02:17:13","Actor":"cshung","Number":"7635","RawContent":null,"Title":"Fix string import for CppCodeGen","State":"closed","Body":"The capital `X` is not a standard [escape sequence](https://en.cppreference.com/w/cpp/language/escape), we should use lower case `x`.","Url":"https://github.com/dotnet/corert/pull/7635","RelatedDescription":"Closed or merged PR \"Fix string import for CppCodeGen\" (#7635)"},{"Id":"470006900","IsPullRequest":true,"CreatedAt":"2019-07-18T23:57:40","Actor":"jkotas","Number":"7632","RawContent":null,"Title":"Port GC changes from CoreCLR","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7632","RelatedDescription":"Closed or merged PR \"Port GC changes from CoreCLR\" (#7632)"},{"Id":"470014921","IsPullRequest":true,"CreatedAt":"2019-07-18T22:12:09","Actor":"trylek","Number":"7634","RawContent":null,"Title":"WIP [no-merge] IsManagedSequential CPAOT instrumentation","State":"open","Body":"This instrumentation change (I don't intend to merge in) adds logging\r\nof IsManagedSequential results. I have sent out a separate PR\r\nfor the corresponding SuperIlc change (I believe the SuperIlc change\r\nis worth merging in) and I'll send out another instrumentation change\r\nfor Crossgen.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Once I figure out how to fix the remaining inconsistencies in\r\nIsManagedSequential, I'm going to merge in a smaller change just\r\nmoving the [fixed] IsManagedSequentialMethod to the R2R field\r\nlayout algorithm source file per JanK's suggestion.","Url":"https://github.com/dotnet/corert/pull/7634","RelatedDescription":"Open PR \"WIP [no-merge] IsManagedSequential CPAOT instrumentation\" (#7634)"},{"Id":"470009694","IsPullRequest":true,"CreatedAt":"2019-07-18T21:57:05","Actor":"trylek","Number":"7633","RawContent":null,"Title":"Initial support for IsManagedSequential diffing in SuperIlc","State":"open","Body":"This change searches compiler logs for specially formatted sections\r\nproduced by my private CPAOT and Crossgen instrumentation changes\r\nand outputs their lists and diffs between CPAOT and Crossgen.\r\n\r\nI have finally reached almost 100% parity between CPAOT and Crossgen\r\nqueries for the IsManagedSequential type characteristics and I have\r\nalready identified a type with mismatching results. Based on JanK's\r\nsuggestion I assume we should run this through anything we can find\r\nto maximize our confidence in the R2R compiler.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. I'm going to send out separate not-for-checkin PR's for the\r\nappropriate CPAOT and Crossgen instrumentations. For SuperIlc,\r\nI believe there's no harm in actually merging the change in.","Url":"https://github.com/dotnet/corert/pull/7633","RelatedDescription":"Open PR \"Initial support for IsManagedSequential diffing in SuperIlc\" (#7633)"},{"Id":"468923074","IsPullRequest":true,"CreatedAt":"2019-07-18T18:19:28","Actor":"cshung","Number":"7622","RawContent":null,"Title":"[CppCodeGen] Avoid generating typedef redefinition for delegates with vtable","State":"closed","Body":"This change fixes the compilation error for issue #6415, this does not fix the issue itself yet.\r\nIn case the vtable of the delegate type is generated, [`GetCodeForVirtualMethod()`](https://github.com/dotnet/corert/blob/c3751121a3e96e750933c159d732f52a70c09857/src/ILCompiler.CppCodeGen/src/CppCodeGen/CppWriter.cs#L974) will generate a typedef for the Invoke function, and we will generate another in `GetCodeForDelegate()` as the code change shows, leading to redefinition error.\r\n\r\nThis fix detects that case and avoids generating the redefinition.","Url":"https://github.com/dotnet/corert/pull/7622","RelatedDescription":"Closed or merged PR \"[CppCodeGen] Avoid generating typedef redefinition for delegates with vtable\" (#7622)"},{"Id":"469455160","IsPullRequest":true,"CreatedAt":"2019-07-18T18:19:11","Actor":"jkotas","Number":"7630","RawContent":null,"Title":"Delete stale cache size detection code on Windows","State":"closed","Body":"Fill cache size detection on Unix with CoreCLR PAL implementation","Url":"https://github.com/dotnet/corert/pull/7630","RelatedDescription":"Closed or merged PR \"Delete stale cache size detection code on Windows\" (#7630)"},{"Id":"469435131","IsPullRequest":true,"CreatedAt":"2019-07-17T21:53:43","Actor":"Dotnet-GitSync-Bot","Number":"7629","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7629","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7629)"},{"Id":"469339836","IsPullRequest":true,"CreatedAt":"2019-07-17T19:26:18","Actor":"Dotnet-GitSync-Bot","Number":"7628","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7628","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7628)"},{"Id":"469207771","IsPullRequest":true,"CreatedAt":"2019-07-17T16:47:01","Actor":"Dotnet-GitSync-Bot","Number":"7627","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern","Url":"https://github.com/dotnet/corert/pull/7627","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7627)"},{"Id":"469035654","IsPullRequest":true,"CreatedAt":"2019-07-17T13:33:30","Actor":"MichalStrehovsky","Number":"7623","RawContent":null,"Title":"Include Natvis in the ILCompiler package","State":"closed","Body":"This makes strings and arrays for CoreRT-compiled programs look nicer in debuggers that support Natvis.","Url":"https://github.com/dotnet/corert/pull/7623","RelatedDescription":"Closed or merged PR \"Include Natvis in the ILCompiler package\" (#7623)"},{"Id":"469068373","IsPullRequest":true,"CreatedAt":"2019-07-17T13:32:09","Actor":"Dotnet-GitSync-Bot","Number":"7624","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7624","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7624)"},{"Id":"469103662","IsPullRequest":true,"CreatedAt":"2019-07-17T13:29:14","Actor":"MichalStrehovsky","Number":"7626","RawContent":null,"Title":"Capture name of failing method in CodeGenerationFailedException","State":"closed","Body":"Useful for troubleshooting.","Url":"https://github.com/dotnet/corert/pull/7626","RelatedDescription":"Closed or merged PR \"Capture name of failing method in CodeGenerationFailedException\" (#7626)"},{"Id":"468826889","IsPullRequest":true,"CreatedAt":"2019-07-17T08:49:41","Actor":"Dotnet-GitSync-Bot","Number":"7621","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7621","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7621)"},{"Id":"468740796","IsPullRequest":true,"CreatedAt":"2019-07-17T00:24:08","Actor":"cshung","Number":"7620","RawContent":null,"Title":"Make sure we use a 64 bit number to represent memory limit (even in 32 bit architectures)","State":"closed","Body":"Fixes #7619 \r\n\r\nAccording to @am11 in the referenced issue, Linux could tell us the memory limit is `0x7FFFFFFFFFFFFFFF` in a 32-bit architecture docker image, therefore we need to make sure when we read the number, we need to use a 64-bit number.","Url":"https://github.com/dotnet/corert/pull/7620","RelatedDescription":"Closed or merged PR \"Make sure we use a 64 bit number to represent memory limit (even in 32 bit architectures)\" (#7620)"},{"Id":"467902677","IsPullRequest":true,"CreatedAt":"2019-07-15T21:33:16","Actor":"cshung","Number":"7617","RawContent":null,"Title":"Changing assembler constant format","State":"closed","Body":"Fixes #7607 \r\n\r\nAccording to the [GNU assembler documentation](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.32.4503&rep=rep1&type=pdf), page 15, we are supposed to use the 0x format for hexadecimal numeric constants.\r\n\r\nWriting a numeric constant as `0FFh` was supported for the older version of `as`. It is now unsupported on the latest assembler (In this particular issue, Command Line Tools for Xcode Beta 2 on MacOS Mojave 10.14.5), so we must use the standard hexadecimal format.","Url":"https://github.com/dotnet/corert/pull/7617","RelatedDescription":"Closed or merged PR \"Changing assembler constant format\" (#7617)"},{"Id":"468113200","IsPullRequest":true,"CreatedAt":"2019-07-15T15:16:07","Actor":"MichalStrehovsky","Number":"7618","RawContent":null,"Title":"Adjust IL scanner for generic inlining","State":"closed","Body":"When we turned on generic inlining in RyuJIT, we started inlining things potentially across multiple shared method bodies. There is a pathological case when we may end up inlining a shared instance method on a type that otherwise wasn't allocated in the program - RyuJIT would end up asking questions about things we didn't scan.\r\n\r\nThis is because scanning happens on canonical method bodies, and dictionary dependencies are only investigated when a specific dictionary is added to the graph. If a type wasn't allocated, there's no generic dictionary to look at.\r\n\r\nThis is a conservative fix and comes with a small size on disk regression - about 16 kB on Hello World (0 kB for the \"minimal Hello World with reflection disabled\"), and about 80 kB for ASP.NET.\r\n\r\nI investigated preventing RyuJIT from inlining these methods, but RyuJIT is rather uncooperative when it comes to generic inlining. I think this is why UTC operates on runtime determined types directly rather than `__Canon`.","Url":"https://github.com/dotnet/corert/pull/7618","RelatedDescription":"Closed or merged PR \"Adjust IL scanner for generic inlining\" (#7618)"},{"Id":"467771900","IsPullRequest":true,"CreatedAt":"2019-07-14T03:05:49","Actor":"Dotnet-GitSync-Bot","Number":"7616","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7616","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7616)"},{"Id":"467766531","IsPullRequest":true,"CreatedAt":"2019-07-13T23:19:58","Actor":"MichalStrehovsky","Number":"7615","RawContent":null,"Title":"Normalize instantiations in reflection method body scanner","State":"closed","Body":"Noticed we were hitting asserts compiling Draw2D. We were ending up reflection enabling a hybrid `<object, __Canon>` instantiation.","Url":"https://github.com/dotnet/corert/pull/7615","RelatedDescription":"Closed or merged PR \"Normalize instantiations in reflection method body scanner\" (#7615)"},{"Id":"467507599","IsPullRequest":true,"CreatedAt":"2019-07-13T03:13:00","Actor":"jkotas","Number":"7614","RawContent":null,"Title":"Return HardLimitBytes from GCMemoryInfo.TotalAvailableMemoryBytes (#2…","State":"closed","Body":"…5437)","Url":"https://github.com/dotnet/corert/pull/7614","RelatedDescription":"Closed or merged PR \"Return HardLimitBytes from GCMemoryInfo.TotalAvailableMemoryBytes (#2…\" (#7614)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"470871619","IsPullRequest":false,"CreatedAt":"2019-07-22T03:13:10","Actor":"Thaodan","Number":"3444","RawContent":null,"Title":"[Linux] Don't use dot folder comply by XDG Base Directory Specification","State":"open","Body":"Currently SDK files get installed into _~/.dotnet_ on Linux.\r\nHowever this outdated, apps should follow the XDG Base Directory Specification.\r\nThis isn't an issue of the CLI (I think), as this about setting the defaults for Linux.","Url":"https://github.com/dotnet/sdk/issues/3444","RelatedDescription":"Open issue \"[Linux] Don't use dot folder comply by XDG Base Directory Specification\" (#3444)"},{"Id":"470619220","IsPullRequest":true,"CreatedAt":"2019-07-20T20:53:44","Actor":"peterhuene","Number":"3441","RawContent":null,"Title":"Fix regeneration of files when asset cache changes.","State":"closed","Body":"Both the deps.json and runtimeconfig.json files remain unchanged when an\r\nincremental build takes place that changes a property that would invalidate the\r\nassets cache.\r\n\r\nFor a property like `SelfContained`, this might mean the files are no longer\r\nvalid for the incremental build's output.\r\n\r\nFixes dotnet/cli#11956.","Url":"https://github.com/dotnet/sdk/pull/3441","RelatedDescription":"Closed or merged PR \"Fix regeneration of files when asset cache changes.\" (#3441)"},{"Id":"470672478","IsPullRequest":true,"CreatedAt":"2019-07-20T14:58:25","Actor":"dotnet-maestro[bot]","Number":"3443","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190719.09\r\n- **Date Produced**: 7/19/2019 9:12 PM\r\n- **Commit**: 3fcf1dac5531a0a92ce53af4eae4fc42316a0ccf\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27919-09\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3443","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3443)"},{"Id":"470667749","IsPullRequest":true,"CreatedAt":"2019-07-20T14:06:45","Actor":"dotnet-maestro[bot]","Number":"3442","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3442","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3442)"},{"Id":"469756109","IsPullRequest":true,"CreatedAt":"2019-07-20T07:06:16","Actor":"dotnet-maestro[bot]","Number":"3435","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190719.01\r\n- **Date Produced**: 7/19/2019 10:39 AM\r\n- **Commit**: 4b74b80d087e7143949a7eae7dc6035d9db3f6f7\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27919-01\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3435","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3435)"},{"Id":"468382181","IsPullRequest":true,"CreatedAt":"2019-07-19T19:29:27","Actor":"peterhuene","Number":"3427","RawContent":null,"Title":"Delete output apphost upon failure of the CreateAppHost task.","State":"closed","Body":"This commit deletes the output apphost when the `CreateAppHost` task fails from\r\nan exception.\r\n\r\nPartially fixes #2989.","Url":"https://github.com/dotnet/sdk/pull/3427","RelatedDescription":"Closed or merged PR \"Delete output apphost upon failure of the CreateAppHost task.\" (#3427)"},{"Id":"470405396","IsPullRequest":true,"CreatedAt":"2019-07-19T16:03:04","Actor":"kzu","Number":"3440","RawContent":null,"Title":"Add support for @(AssemblyMetadata) items that turn into assembly attributes","State":"open","Body":"Given that `AssemblyMetadataAttribute` is such a common assembly-level attribute, this adds support\r\nfor specifying it directly via simple items, such as:\r\n\r\n```\r\n    <AssemblyMetadata Include=\"Foo\" Value=\"Bar\" />\r\n    <AssemblyMetadata Include=\"Bar\" Value=\"Baz\" />\r\n```\r\n\r\nThis also avoids having to learn the `_Parameter1` and `_Parameter2` syntax in `AssemblyAttribute` elements, \r\nand is more similar to the way other higher-level properties like `AssemblyTitle` or `Product` are also\r\nturned into assembly attributes.\r\n\r\nPartially fixes #3166","Url":"https://github.com/dotnet/sdk/pull/3440","RelatedDescription":"Open PR \"Add support for @(AssemblyMetadata) items that turn into assembly attributes\" (#3440)"},{"Id":"470401901","IsPullRequest":true,"CreatedAt":"2019-07-19T15:57:33","Actor":"kzu","Number":"3439","RawContent":null,"Title":"Add support for @(InternalsVisibleTo) items that turn into assembly attributes","State":"open","Body":"Given that `InternalsVisibleTo` is such a common assembly-level attribute, this adds support \r\nfor specifying it directly via simple items, such as:\r\n\r\n```\r\n  <ItemGroup>\r\n    <InternalsVisibleTo Include=\"MyLibrary.Tests\" />\r\n  </ItemGroup>\r\n```\r\n\r\nThis also avoids having to learn the `_Parameter1` syntax in `AssemblyAttribute` elements, and is \r\nmore similar to the way other higher-level properties like `AssemblyTitle` or `Product` are also \r\nturned into assembly attributes.\r\n\r\nPartially fixes #3166","Url":"https://github.com/dotnet/sdk/pull/3439","RelatedDescription":"Open PR \"Add support for @(InternalsVisibleTo) items that turn into assembly attributes\" (#3439)"},{"Id":"469731724","IsPullRequest":true,"CreatedAt":"2019-07-19T14:16:13","Actor":"dotnet-maestro[bot]","Number":"3434","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190718.7\r\n- **Date Produced**: 7/18/2019 11:09 PM\r\n- **Commit**: eecde8a8751dbe7fdb17ba4dfbd032e26f4cae7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19368.7\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3434","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3434)"},{"Id":"470016049","IsPullRequest":false,"CreatedAt":"2019-07-18T22:15:57","Actor":"etbyrd","Number":"3438","RawContent":null,"Title":"Remove .NETCore <3.0 as SupportedTargetFrameworks for WinForms and WPF","State":"open","Body":"The Project System needs a way to know the correct SupportedTargetFrameworks for WinForms and WPF projects so we can display the correct TFM's in the property pages. \r\n\r\nIs it possible that this can be done on the SDK side?\r\n\r\nhttps://github.com/dotnet/project-system/issues/5010\r\n\r\ncc @nguerrera \r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3438","RelatedDescription":"Open issue \"Remove .NETCore <3.0 as SupportedTargetFrameworks for WinForms and WPF\" (#3438)"},{"Id":"470010193","IsPullRequest":false,"CreatedAt":"2019-07-18T21:58:31","Actor":"ericstj","Number":"3437","RawContent":null,"Title":"ResolveTargetingPackAssets crashes when presented a targeting pack with no matching assets","State":"open","Body":"Build a project as follows:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <RuntimeFrameworkVersion>5.0.0-alpha1.27918.1</RuntimeFrameworkVersion>\r\n  </PropertyGroup>\r\n  \r\n  <ItemGroup>\r\n    <FrameworkReference Update=\"Microsoft.NETCore.App\"\r\n                        TargetingPackVersion=\"5.0.0-alpha1.27918.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018: The \"ResolveTargetingPackAssets\" task failed unexpectedly. [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018: System.InvalidOperationException: Sequence contains no matching element [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at System.Linq.ThrowHelper.ThrowNoMatchException() [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate) [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolveTargetingPackAssets.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolveTargetingPackAssets.cs:line 96 [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 38 [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [D:\\scratch\\nca5\\nca5.csproj]\r\n```\r\n\r\nThis is happening because the refpack uses `netcoreapp5.0` instead of of `netcoreapp3.0`.  Failure is legitimate but it should be better than a stack trace.","Url":"https://github.com/dotnet/sdk/issues/3437","RelatedDescription":"Open issue \"ResolveTargetingPackAssets crashes when presented a targeting pack with no matching assets\" (#3437)"},{"Id":"469975559","IsPullRequest":true,"CreatedAt":"2019-07-18T20:31:55","Actor":"nugetlurker","Number":"3436","RawContent":null,"Title":"Insert NuGet Build 5.3.0-preview.2.6103 into sdk","State":"open","Body":"Insert NuGet Build 5.3.0-preview.2.6103 into sdk master branch","Url":"https://github.com/dotnet/sdk/pull/3436","RelatedDescription":"Open PR \"Insert NuGet Build 5.3.0-preview.2.6103 into sdk\" (#3436)"},{"Id":"469588834","IsPullRequest":false,"CreatedAt":"2019-07-18T06:18:08","Actor":"Nirmal4G","Number":"3432","RawContent":null,"Title":"Append TargetFramework to *OutputPaths only when MultiTargeting","State":"open","Body":"Rleated issues: #844 #550 #1376 (those github found out)\r\n\r\nFor single targeting projects, we don't need to appened the `*OutputPath`s properties with `TargetFramework` since, we are only targeting single framework. This is also the behavior of the old projects before sdks were introduced.\r\n\r\n1. All the large winforms and wpf projects have custom targets that rely on hard coded paths based on the defaults set by the old project files. It'll be easy to migrate those projects if those paths were the same. 😌\r\n\r\n2. It'll reduce a directory overhead in the directory tree. One less dir to navigate! 😌\r\n\r\nWe can update the targets to preserve the old behavior that only appends the `TargetFramework` property only when it's multi-targeting.\r\n\r\nI can do a PR if you guys are ok with this!","Url":"https://github.com/dotnet/sdk/issues/3432","RelatedDescription":"Open issue \"Append TargetFramework to *OutputPaths only when MultiTargeting\" (#3432)"},{"Id":"469180602","IsPullRequest":true,"CreatedAt":"2019-07-17T14:48:52","Actor":"dotnet-maestro[bot]","Number":"3431","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.01\r\n- **Date Produced**: 7/17/2019 8:46 AM\r\n- **Commit**: 7cf49f78deaae14948ce59fc6d9266365888f7b6\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27917-01\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3431","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3431)"},{"Id":"468375089","IsPullRequest":true,"CreatedAt":"2019-07-17T14:21:35","Actor":"dotnet-maestro[bot]","Number":"3424","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190716.4\r\n- **Date Produced**: 7/16/2019 7:16 PM\r\n- **Commit**: 0dd5e2025f0049c133a8706f40e4463b193e5d17\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19366.4\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3424","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3424)"},{"Id":"467616771","IsPullRequest":true,"CreatedAt":"2019-07-16T20:43:36","Actor":"nguerrera","Number":"3415","RawContent":null,"Title":"Select appropriate VB runtime by default","State":"closed","Body":"Fix #3387 \r\nFix #2793 \r\n\r\nThis comment in the code describes and documents the approach:\r\n\r\n```\r\nBy default, VBRuntime is chosen as follows:\r\n\r\n    .NET Framework:\r\n      Same as classic vbproj. $(FrameworkPathOverride) is passed  as\r\n      /sdkpath to compiler and Microsoft.VisualBasic.dll will be used\r\n      from there even if there is no explicit reference to it. This is\r\n      accomplished by leaving $(VBRuntime) unset.\r\n\r\n    .NET Core 3.0+:\r\n      Locate Microsoft.VisualBasic among references and pass it as\r\n      /vbruntime to compiler.\r\n\r\n    .NET Core < 3.0 or .NET Standard:\r\n      Use embedded VB runtime as there is no Microsoft.VisualBasic.dll\r\n      available that is complete enough to serve as /vbruntime.\r\n\r\n   These defaults can be overridden as follows:\r\n\r\n    $(UseReferencedVBRuntime) == true:\r\n      Use referenced Microsoft.VisualBasic regardless of TFM.\r\n\r\n      This is an escape hatch for a custom Microsoft.VisualBasic reference\r\n      that can work as /vbruntime on a target framework other than .NET Core 3.0+\r\n\r\n    $(VBRuntime) != '':\r\n      Pass it through to compiler unchanged.\r\n```","Url":"https://github.com/dotnet/sdk/pull/3415","RelatedDescription":"Closed or merged PR \"Select appropriate VB runtime by default\" (#3415)"},{"Id":"468791081","IsPullRequest":true,"CreatedAt":"2019-07-16T18:05:10","Actor":"sbomer","Number":"3430","RawContent":null,"Title":"Update stage0 SDK","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3430","RelatedDescription":"Open PR \"Update stage0 SDK\" (#3430)"},{"Id":"468382089","IsPullRequest":false,"CreatedAt":"2019-07-16T17:49:13","Actor":"tlmii","Number":"3426","RawContent":null,"Title":"Generate runtimeconfig.json with rollForwardOnNoCandidateFx value from csproj?","State":"closed","Body":"Is it possible to specify the value of [rollForwardOnNoCandidateFx ](https://github.com/dotnet/cli/blob/master/Documentation/specs/runtime-configuration-file.md#runtimeoptions-section-runtimeconfigjson)that will be in the output `[AppName].runtimeconfig.json` from the .csproj file (or otherwise within the source code)? Or does it have to be added after the fact?","Url":"https://github.com/dotnet/sdk/issues/3426","RelatedDescription":"Closed issue \"Generate runtimeconfig.json with rollForwardOnNoCandidateFx value from csproj?\" (#3426)"},{"Id":"468379242","IsPullRequest":true,"CreatedAt":"2019-07-16T17:20:35","Actor":"dotnet-maestro[bot]","Number":"3425","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b0dcab74-ed18-4631-280a-08d690bc5860)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190715.4\r\n- **Date Produced**: 7/15/2019 7:17 PM\r\n- **Commit**: fb27fd4d8a2b67d4333e33d4b898c65171c9f3c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19365.4\r\n\r\n[marker]: <> (End:b0dcab74-ed18-4631-280a-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3425","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#3425)"},{"Id":"468632752","IsPullRequest":true,"CreatedAt":"2019-07-16T16:36:04","Actor":"dotnet-maestro[bot]","Number":"3429","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190715.11\r\n- **Date Produced**: 7/16/2019 6:39 AM\r\n- **Commit**: ad9f7e33fb1a1be7eefb57849e7d71a4f9a488b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27915-11\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3429","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3429)"},{"Id":"468116152","IsPullRequest":true,"CreatedAt":"2019-07-16T12:44:00","Actor":"dotnet-maestro[bot]","Number":"3423","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190714.06\r\n- **Date Produced**: 7/15/2019 4:19 AM\r\n- **Commit**: 2bb2dcaeffb1dfeda077354449868ddac254bc3d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27914-06\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3423","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3423)"},{"Id":"468408569","IsPullRequest":false,"CreatedAt":"2019-07-16T01:58:08","Actor":"AlseinX","Number":"3428","RawContent":null,"Title":"Will there be a standard way to ship native libraries with packed nuget package?","State":"open","Body":"I believe it widely needed that:\r\n\r\n+ A csproj project could contain native libraries in a proper folder structure for maybe multiple native RIDs.\r\n+ On packing, all of these libraries are included to the nuget packages with a proper folder structure.\r\n+ On publishing, native libraries are copied to the output folder and would be embedded if `PublishSingleFile` is enabled.\r\n+ Managed code could P/Invoke these libraries with the common dll name for all RIDs (like \"abc\" is resolved to \"abc.dll\" on windows and \"libabc.so\" on linux). This must be available on both development and production environment, for native libraries from the project itself, from referenced projects, from nuget packages, and from system library paths. without manually handling the file locations and naming conventions.\r\n+ Hopefully it supports customizing naming conventions with versions, like the ncurses wide-char library version 6 is named \"libncursesw.so.6\" on linux and \"libncursesw6.dll\" on mingw on windows.\r\n\r\nThis could be implemented with manually adding MSBuild configuration and codes for loading. Since it is widely need by native wrapper libraries, there should be a simple standard way provided by the SDK.","Url":"https://github.com/dotnet/sdk/issues/3428","RelatedDescription":"Open issue \"Will there be a standard way to ship native libraries with packed nuget package?\" (#3428)"},{"Id":"468089655","IsPullRequest":true,"CreatedAt":"2019-07-15T13:56:25","Actor":"dotnet-maestro[bot]","Number":"3422","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190714.1\r\n- **Date Produced**: 7/14/2019 1:05 PM\r\n- **Commit**: 0c81c2bbdc49749e9940bc8858ebd16026d51277\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19364.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3422","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3422)"},{"Id":"467893273","IsPullRequest":true,"CreatedAt":"2019-07-14T22:47:40","Actor":"drewnoakes","Number":"3421","RawContent":null,"Title":"WIP Remove CheckForDuplicateItemsContinueOnError property","State":"open","Body":"Follows #3399.\r\n\r\nThe `CheckForDuplicateItemsContinueOnError` property was used by WPF projects.\r\n\r\nhttps://github.com/dotnet/wpf/pull/1235 makes WPF use `ContinueOnError` instead, so this temporary property can be removed once things propagate.\r\n\r\nMarked as WIP as merging should be [delayed a few days](https://github.com/dotnet/sdk/pull/3399#discussion_r302977781).","Url":"https://github.com/dotnet/sdk/pull/3421","RelatedDescription":"Open PR \"WIP Remove CheckForDuplicateItemsContinueOnError property\" (#3421)"},{"Id":"467833431","IsPullRequest":true,"CreatedAt":"2019-07-14T14:39:00","Actor":"dotnet-maestro[bot]","Number":"3420","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190713.09\r\n- **Date Produced**: 7/14/2019 4:25 AM\r\n- **Commit**: 36ad04d936c4613c1b1599b899071d411fe5c9b1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27913-09\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3420","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3420)"},{"Id":"467828256","IsPullRequest":true,"CreatedAt":"2019-07-14T14:20:08","Actor":"dotnet-maestro[bot]","Number":"3419","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190713.1\r\n- **Date Produced**: 7/13/2019 12:59 PM\r\n- **Commit**: 8c94bc75d29cd84e3592e4044100d45a341653f7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19363.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3419","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3419)"},{"Id":"467717297","IsPullRequest":true,"CreatedAt":"2019-07-13T14:41:50","Actor":"dotnet-maestro[bot]","Number":"3418","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190712.15\r\n- **Date Produced**: 7/13/2019 9:17 AM\r\n- **Commit**: a7d2e0d27b2a6be92b620de7c321a29fe42fca53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27912-15\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3418","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3418)"},{"Id":"467712059","IsPullRequest":true,"CreatedAt":"2019-07-13T14:00:05","Actor":"dotnet-maestro[bot]","Number":"3417","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190712.5\r\n- **Date Produced**: 7/12/2019 10:49 PM\r\n- **Commit**: 15f50ca6a9d0b441c9927421657fb9dc91206cc9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19362.5\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3417","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3417)"},{"Id":"467642227","IsPullRequest":true,"CreatedAt":"2019-07-13T00:05:14","Actor":"dotnet-bot","Number":"3416","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3416","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3416)"},{"Id":"469673628","IsPullRequest":false,"CreatedAt":"2017-03-29T16:32:40","Actor":"mavasani","Number":"3433","RawContent":null,"Title":"Breaking change due to default setting of certain properties","State":"open","Body":"PR https://github.com/dotnet/sdk/pull/511/ added default values for certain build related properties to fix https://github.com/dotnet/roslyn-project-system/issues/437 - indeterminate setting of corresponding check boxes in properties page.\r\n\r\nHowever, this causes breaking issues when moving from old project system to new project system. The C# targets do not set any default for these properties, which means that if my repo on old project system had the following conditional property after importing the common targets, then this condition will evaluate to true for old targets imports, but false for the new SDK imports:\r\n\r\n`<SignAssembly Condition=\"'$(SignAssembly)' == ''\">true</SignAssembly>`\r\n\r\nFor example see [here](https://github.com/dotnet/roslyn-analyzers/blob/master/build/Targets/Analyzers.Settings.targets#L18). This led me to spend half a day investigating IVT failures after porting the analyzers repo to new project system due to the fact that this breaking change silently turned off `/keyfile` command line argument.\r\n\r\nGiven that the above SDK change was only done to satisfy the property pages, we should find a different workaround.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3433","RelatedDescription":"Open issue \"Breaking change due to default setting of certain properties\" (#3433)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1153304666932961280","CreatedAt":"2019-07-22T14:03:54+00:00","UserScreenname":"dotnet","Text":"Interested in game development but not sure where to start? Check out our new free learning course on getting start… https://t.co/qZIuFYLIDZ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":76,"FavoriteCount":23,"RawContent":null},{"Id":"1151899037030764545","CreatedAt":"2019-07-18T16:58:26+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":14,"FavoriteCount":8,"RawContent":null},{"Id":"1151259798244974592","CreatedAt":"2019-07-16T22:38:19+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1149432245909905409","CreatedAt":"2019-07-11T21:36:17+00:00","UserScreenname":"dotnet","Text":"Discover the world of .NET\n\n#dotNETConf is coming September 23 — 25\nCome celebrate the new .NET Core 3.0 launch wit… https://t.co/gVCxErAzFJ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":181,"FavoriteCount":97,"RawContent":null}]}},"RunOn":"2019-07-23T05:30:38.1230942Z","RunDurationInMilliseconds":15398}