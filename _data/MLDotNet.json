{"Data":{"GitHub":{"Issues":[{"Id":"400067493","IsPullRequest":true,"CreatedAt":"2019-01-17T01:07:13","Actor":"najeeb-kazmi","Number":"2169","RawContent":null,"Title":"Rename types inside MLContext as Catalogs","State":"open","Body":"Fixes #1796 \r\n\r\nRenames `XyzContext` types inside `MLContext` to `XyzCatalog`.\r\n\r\nRenames `DataOperations` to `DataOperationsCatalog`.\r\n\r\nRenames `TrainContext` to `TrainCatalog`.","Url":"https://github.com/dotnet/machinelearning/pull/2169","RelatedDescription":"Open PR \"Rename types inside MLContext as Catalogs\" (#2169)"},{"Id":"400044019","IsPullRequest":true,"CreatedAt":"2019-01-16T23:27:54","Actor":"zeahmed","Number":"2168","RawContent":null,"Title":"Added a test in disabled mode to show the known issue with loading TF model multiple times.","State":"open","Body":"This PR partially fixes #2156.\r\n\r\nAdded a test to show that \"loading TensorFlow SavedModel multiple times throws exception\" is a know issue.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2168","RelatedDescription":"Open PR \"Added a test in disabled mode to show the known issue with loading TF model multiple times.\" (#2168)"},{"Id":"400033016","IsPullRequest":false,"CreatedAt":"2019-01-16T22:49:51","Actor":"rogancarr","Number":"2167","RawContent":null,"Title":"Models produced by the GAM Trainer depend on feature flocks","State":"open","Body":"In `FastTree`, `Feature Flocks` are simply helpful tools in the calculation and do not impact the final model. When `GAMs` are trained however, the final model is dependent on the `Feature Flocks`. That is, if there are 6 features, and two are flocked, then the resulting model will have 5 shape functions and one of the input features will be ignored. \r\n\r\nAs per `FastTree`, the output of `GAM` training should not depend on whether feature flocks were used in the calculation.","Url":"https://github.com/dotnet/machinelearning/issues/2167","RelatedDescription":"Open issue \"Models produced by the GAM Trainer depend on feature flocks\" (#2167)"},{"Id":"400032482","IsPullRequest":true,"CreatedAt":"2019-01-16T22:48:04","Actor":"codemzs","Number":"2166","RawContent":null,"Title":"Add code coverage build def.","State":"open","Body":"Adds a new CI leg just for code coverage. The reason for adding a new leg is not let code coverage process affect PR merge. ","Url":"https://github.com/dotnet/machinelearning/pull/2166","RelatedDescription":"Open PR \"Add code coverage build def.\" (#2166)"},{"Id":"399991608","IsPullRequest":false,"CreatedAt":"2019-01-16T20:51:32","Actor":"JakeRadMSFT","Number":"2165","RawContent":null,"Title":"Using ScoreTensorFlow model is a bit confusing","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows\r\n- **.NET Version (eg., dotnet --info)**: 0.8.0\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nSee code below. I'm loading a pre-trained TensorFlow model and I was working from the existing examples.\r\n- **What happened?**\r\nI didn't understand why the example was passing training/test data to get the prediction function (see code and comment below).\r\n\r\n- **What did you expect?**\r\nIt seems like I should just be able create a pipeline with pre-processing steps and ScoreTensorFlowModel and then just get the predict function. To test this theory I tried making MulitFileSource(null) and everything works fine. If it's not needed ... Can you recommend different code? If it is needed ... it seems kind of odd.\r\n\r\n### Source code / logs\r\n\r\n```\r\n            var loader = new TextLoader(mlContext,\r\n                new TextLoader.Arguments\r\n                {\r\n                    Column = new[] {\r\n                        new TextLoader.Column(\"ImagePath\", DataKind.Text, 0),\r\n                    }\r\n                });\r\n\r\n            // Why is this needed? It works fine with the MultiFileSource being null. There shouldn't need to be training data when loading a pre-trained model.\r\n            var data = loader.Read(new MultiFileSource(null));\r\n\r\n            var pipeline = mlContext.Transforms.LoadImages(imageFolder: imageFolderPath, columns: (\"ImagePath\", \"ImageReal\"))\r\n                            .Append(mlContext.Transforms.Resize(\"ImageReal\", \"ImageReal\", ImagePreprocessSettings.imageHeight, ImagePreprocessSettings.imageWidth))\r\n                            .Append(mlContext.Transforms.ExtractPixels(new[] { new ImagePixelExtractorTransform.ColumnInfo(\"ImageReal\", TensorFlowModelSettings.InputTensorName, interleave: ImagePreprocessSettings.channelsLast, offset: ImagePreprocessSettings.mean) }))\r\n                            .Append(mlContext.Transforms.ScoreTensorFlowModel(modelFilePath, new[] { TensorFlowModelSettings.InputTensorName }, new[] { TensorFlowModelSettings.OuputTensorName }));\r\n            \r\n            // What am I \"fitting\" and why am I passing \"data\"?\r\n            var modeld = pipeline.Fit(data);\r\n\r\n            var predictionFunction = modeld.MakePredictionFunction<TrainTestData, PredictionProbability>(mlContext);\r\n\r\n            return predictionFunction;\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2165","RelatedDescription":"Open issue \"Using ScoreTensorFlow model is a bit confusing\" (#2165)"},{"Id":"399595235","IsPullRequest":true,"CreatedAt":"2019-01-16T20:32:55","Actor":"sfilipi","Number":"2158","RawContent":null,"Title":"KMeans and Implicit weight cleanup","State":"closed","Body":"Towards #1798 \r\n\r\nRenaming Args ->Options, internalizing ctors, and fixing the issue with the weigh column being initialized as Implicit or Explicit. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/2158","RelatedDescription":"Closed or merged PR \"KMeans and Implicit weight cleanup\" (#2158)"},{"Id":"399983766","IsPullRequest":false,"CreatedAt":"2019-01-16T20:31:02","Actor":"JakeRadMSFT","Number":"2164","RawContent":null,"Title":"Loading TensorFlow Models with unsupported Node types throws confusing Exception","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows\r\n- **.NET Version (eg., dotnet --info)**: ML.Net 0.8.0\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTried to load a TensorFlow model with an input of type String.\r\n- **What happened?**\r\nException thrown saying that the node with the given input name didn't exist.\r\n- **What did you expect?**\r\nI would expect this to work but if it's unsupported ... I would expect an Exception thrown saying that the node is an unsupported type instead of saying it doesn't exist.\r\n\r\n### Source code / logs\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.TensorFlow/TensorFlow/TensorflowUtils.cs#L43\r\n\r\nThis should throw an exception or log something to inform developers that there is an unsupported  node.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2164","RelatedDescription":"Open issue \"Loading TensorFlow Models with unsupported Node types throws confusing Exception\" (#2164)"},{"Id":"399981399","IsPullRequest":true,"CreatedAt":"2019-01-16T20:24:17","Actor":"abgoswam","Number":"2163","RawContent":null,"Title":"Modify API for advanced settings (several learners)","State":"open","Body":"Towards #1798 .\r\n\r\nThis PR addresses the following algos \r\n\r\n- LogisticRegression\r\n- MulticlassLogisticRegression\r\n- PoissonRegression\r\n- AveragedPerceptronTrainer\r\n- LinearSvmTrainer\r\n- OnlineGradientDescentTrainer\r\n\r\nThe following changes have been made:\r\n\r\n1.  Two `public` extension methods, one for simple arguments and the other for advanced options\r\n2. Make constructors `internal` \r\n3. Pass Options objects as arguments instead of Action delegate\r\n4. Rename Arguments to Options\r\n5. Rename Options objects as options (instead of args or advancedSettings used so far)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2163","RelatedDescription":"Open PR \"Modify API for advanced settings (several learners)\" (#2163)"},{"Id":"399695626","IsPullRequest":true,"CreatedAt":"2019-01-16T19:24:59","Actor":"endintiers","Number":"2160","RawContent":null,"Title":"Rename FeatureContributionClaculator => FeatureContributionCalculator","State":"closed","Body":"Addresses Issue #2150 \r\n\r\nA dirty job but someone has to do it :-). As a newbie I thought this might be the best way to start...\r\n\r\nNo new tests but existing tests run OK.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2160","RelatedDescription":"Closed or merged PR \"Rename FeatureContributionClaculator => FeatureContributionCalculator\" (#2160)"},{"Id":"399958081","IsPullRequest":false,"CreatedAt":"2019-01-16T19:21:11","Actor":"zeahmed","Number":"2162","RawContent":null,"Title":"Add support for vector as input/output in ValueMappingTransformer","State":"open","Body":"Currently, ValueMappingTransformer https://github.com/dotnet/machinelearning/blob/ef638f480a2be117b181ea52a1786e391244e5d2/src/Microsoft.ML.Data/Transforms/ValueMappingTransformer.cs#L256 does not take vector as input. It works on only on scalar input.\r\n\r\nTo enable Text/NLP scenario (#747) in TensorFlowTransform where model's expected input is vector of integers (indexes into dictionary), following needs to be done. Note that this is only needed if model accepts vector of integers as input.\r\n\r\n1. Tokenize the string into words.\r\n2. Map the words to indexes into the dictionary provided with the TF model.\r\n3. If the model is Seq2Seq model, take the output from the model which is again vector of integers and convert it back to vector of text.\r\n\r\nNo. 1 can be done using ML.Net's WordTokenizer.\r\nNo. 2 and 3 can be done using ML.Net's ValueMappingTransformer. However, it does not currently supports vector as input/output. Furthermore, the Estimator https://github.com/dotnet/machinelearning/blob/ef638f480a2be117b181ea52a1786e391244e5d2/src/Microsoft.ML.Data/Transforms/ValueMappingTransformer.cs#L42 of ValueMappingTransformer also does not expose interface to load dictionary from file.","Url":"https://github.com/dotnet/machinelearning/issues/2162","RelatedDescription":"Open issue \"Add support for vector as input/output in ValueMappingTransformer\" (#2162)"},{"Id":"399945410","IsPullRequest":true,"CreatedAt":"2019-01-16T18:46:28","Actor":"shauheen","Number":"2161","RawContent":null,"Title":"Changing LicenseURL to License in Nugets","State":"open","Body":"Fixes #2095 \r\n\r\nNuget.org requires updating the metadata to use License instead. This PR changes that.","Url":"https://github.com/dotnet/machinelearning/pull/2161","RelatedDescription":"Open PR \"Changing LicenseURL to License in Nugets\" (#2161)"},{"Id":"399638165","IsPullRequest":false,"CreatedAt":"2019-01-16T04:00:27","Actor":"endintiers","Number":"2159","RawContent":null,"Title":"AggregateException/InvalidOperationException when training from IEnumerable backed by EF Core Context","State":"open","Body":"### System information\r\n- .Net Core 2.2, EF Core 2.2.1, ML.NET 0.9\r\n\r\n### Issue\r\n\r\n- Read data from SQL DB via EF Core as IEnumerable, pass to pipeline via streaming IDataView\r\n- Get InvalidOperationException from Microsoft.ML.Transforms.RowShufflingTransformer.Cursor.LoopProducerWorker()\r\n- It worked fine in ML.NET 0.8. I can work-around by forcing the trainer to be single-threaded but this makes training in 0.9 much slower than in 0.8 (on my machine).\r\n\r\nThe EF Core problem could be addressed by allowing multiple dbcontexts to be provided but this is likely to be an issue with any non thread-safe IDataView source...  \r\n\r\n### Source code / logs\r\n\r\nSource at: https://github.com/endintiers/Unearth.Demo.ML.FromDB shows this working in 0.8, failing in 0.9 and a work-around for 0.9 (single-threading the training).\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2159","RelatedDescription":"Open issue \"AggregateException/InvalidOperationException when training from IEnumerable backed by EF Core Context\" (#2159)"},{"Id":"399555462","IsPullRequest":true,"CreatedAt":"2019-01-16T01:17:50","Actor":"shauheen","Number":"2153","RawContent":null,"Title":"Adding packages to the solution","State":"closed","Body":"Does not effect users, however would be nice to have all packages in the solution. Fixes #1168 ","Url":"https://github.com/dotnet/machinelearning/pull/2153","RelatedDescription":"Closed or merged PR \"Adding packages to the solution\" (#2153)"},{"Id":"399594934","IsPullRequest":true,"CreatedAt":"2019-01-16T00:25:23","Actor":"Anipik","Number":"2157","RawContent":null,"Title":"Support running benchmarks on netfx","State":"open","Body":"Fixes https://github.com/dotnet/machinelearning/issues/1945\r\n\r\nThis PR makes changes in order to enable developers to run ML benchmarks against .NetFramework\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2157","RelatedDescription":"Open PR \"Support running benchmarks on netfx\" (#2157)"},{"Id":"399586255","IsPullRequest":false,"CreatedAt":"2019-01-15T23:48:26","Actor":"Ivanidzo4ka","Number":"2156","RawContent":null,"Title":"Loading of same model for tensorflow throw exception","State":"open","Body":"just run in two different threads:\r\n`var loadModelSchema = TensorFlowUtils.GetModelSchema(mlContext, modelLocation);`\r\nit will throw exception.","Url":"https://github.com/dotnet/machinelearning/issues/2156","RelatedDescription":"Open issue \"Loading of same model for tensorflow throw exception\" (#2156)"},{"Id":"399572511","IsPullRequest":false,"CreatedAt":"2019-01-15T22:55:49","Actor":"TomFinley","Number":"2155","RawContent":null,"Title":"C# samples should probably use C# and not Python naming conventions","State":"open","Body":"I was reading a PR when suddenly I saw something a bit odd.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/6b9f5893ea6830481a8779f81f2b723e9b5cd6cd/docs/samples/Microsoft.ML.Samples/Dynamic/KeyToValue_Term.cs#L42-L47\r\n\r\nNote the underscores in the middle of a field variable name. While in private we might elect to bend the rules a little bit, in our public API and also probably our samples, we probably ought to write them with [consideration of standard practices](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions). This does not seem to be a justifiable or explainable diversion from the recommended practice, and I'm guessing it was added by mistake.\r\n\r\nEach individual renaming is probably not huge, but might span several files, since the example listed above is just one of many examples I see in our samples project. So not a \"hard\" change, except possibly in scale?","Url":"https://github.com/dotnet/machinelearning/issues/2155","RelatedDescription":"Open issue \"C# samples should probably use C# and not Python naming conventions\" (#2155)"},{"Id":"399558585","IsPullRequest":false,"CreatedAt":"2019-01-15T22:12:30","Actor":"abgoswam","Number":"2154","RawContent":null,"Title":"Add XML summary comments to fields in Options class","State":"open","Body":"We need to add XML summary comments to fields in `Options` class.\r\n\r\nLearners where its missing:\r\n\r\n- SdcaBinaryTrainer\r\n- SdcaMultiClassTrainer\r\n- SdcaRegressionTrainer\r\n- StochasticGradientDescentClassificationTrainer","Url":"https://github.com/dotnet/machinelearning/issues/2154","RelatedDescription":"Open issue \"Add XML summary comments to fields in Options class\" (#2154)"},{"Id":"399494716","IsPullRequest":true,"CreatedAt":"2019-01-15T19:17:57","Actor":"stephentoub","Number":"2152","RawContent":null,"Title":"Reuse threads in ThreadUtils","State":"open","Body":"ThreadUtils.CreateBackgroundThread is being truthful to its name and creating a new thread for every call.  However, even for very simple ML.NET usage, such as the MulticlassClassification_Iris demo app, this method is being called ~110,000 times, resulting in ~110,000 threads getting created and destroyed.  That adds measurable overhead in normal runs, but when the debugger is attached it makes the solution effectively unusable, as every thread creation/destruction is tracked by Visual Studio, leading to significant overheads that make an F5 execution last \"forever\" (== I gave up waiting).\r\n\r\nThe right solution is for the higher-level algorithms and architecture to be better about its need for threads, creating them only when necessary and otherwise relying on the .NET ThreadPool for execution, via either ThreadPool.QueueUserWorkItem or via Task.Run or the like.\r\n\r\nHowever, as an immediate stop-gap that significantly helps the situation, this commit allows the created threads to be reused for a period of time such that not every call ends up creating a new thread.  In my runs:\r\n- The same demo that app that created ~110K threads now creates only ~32.\r\n- With ctrl-F5 (e.g. no debugger attached), it previously took ~13 seconds, and with this change now takes ~6.\r\n- With F5 (debugger attached), execution previously took \"forever\", now takes ~190 seconds (still way too high, but vastly improved).\r\n\r\nThe CreateBackgroundThread method is renamed to StartBackgroundThread, and returns a Task instead of a Thread, such that callers may synchronize with that instead with Thread.Join.  In several cases, this avoids additional threads from being consumed, where callers were blocking a thread pool thread doing a synchronous wait for all tasks, and where now that's entirely avoided via Task.WhenAll.  Eventually, more call sites can be fixed as well, as more of the code base is moved to async/await; for now this just handles the obvious ones that don't require any significant restructuring.\r\n\r\nContributes to https://github.com/dotnet/machinelearning/issues/2099","Url":"https://github.com/dotnet/machinelearning/pull/2152","RelatedDescription":"Open PR \"Reuse threads in ThreadUtils\" (#2152)"},{"Id":"399423437","IsPullRequest":false,"CreatedAt":"2019-01-15T16:21:42","Actor":"wschin","Number":"2151","RawContent":null,"Title":"TreeEnsembleFeaturizerTransform has no Transformer derivative","State":"open","Body":"As title. Please see [TreeEnsembleFeaturizerTransform](https://github.com/dotnet/machinelearning/blob/2e5612c029583185c10044fb1b665c5d308676d7/src/Microsoft.ML.FastTree/TreeEnsembleFeaturizer.cs#L540). As most transforms have become transformers, maybe this one should do as well.","Url":"https://github.com/dotnet/machinelearning/issues/2151","RelatedDescription":"Open issue \"TreeEnsembleFeaturizerTransform has no Transformer derivative\" (#2151)"},{"Id":"399097824","IsPullRequest":true,"CreatedAt":"2019-01-15T15:22:21","Actor":"wschin","Number":"2140","RawContent":null,"Title":"Remove ISchema in TextLoader.cs and TextLoaderCursor.cs","State":"closed","Body":"As title. This might be the tail of #1501.","Url":"https://github.com/dotnet/machinelearning/pull/2140","RelatedDescription":"Closed or merged PR \"Remove ISchema in TextLoader.cs and TextLoaderCursor.cs\" (#2140)"},{"Id":"399311728","IsPullRequest":false,"CreatedAt":"2019-01-15T11:54:42","Actor":"joelving","Number":"2150","RawContent":null,"Title":"FeatureContributionCalculator property is frequently misspelled","State":"open","Body":"FeatureContributionCalculator is misspelled as FeatureContributionClaculator (note the switched 'a' and 'l' in 'Calculator' => 'Claculator').\r\n\r\nThe mistake seems to have been copy-pasted around a bit: https://github.com/dotnet/machinelearning/search?q=FeatureContributionClaculator","Url":"https://github.com/dotnet/machinelearning/issues/2150","RelatedDescription":"Open issue \"FeatureContributionCalculator property is frequently misspelled\" (#2150)"},{"Id":"399229993","IsPullRequest":false,"CreatedAt":"2019-01-15T08:10:46","Actor":"shaykels","Number":"2149","RawContent":null,"Title":"OnnxTransfrom - onnxruntime.dll - ReleaseOrtAllocatorInfo- System.EntryPointNotFoundException:","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Win 10, 64-bit, 10.0.17763\r\n- **.NET Version (eg., dotnet --info)**:  4.6.2\r\n\r\n### Issue\r\n\r\nAdded OnnxTransformSample.cs + nugets to a console app, trying to run the example.\r\n\r\n1. Exception onnxruntime.dll is not found, probably similar to this https://github.com/dotnet/machinelearning/issues/2106\r\n\r\n2. Copied onnxruntime.dll from ..\\packages\\Microsoft.ML.OnnxRuntime.Gpu.0.1.5\\runtimes\\win10-x64\\native to my app directory. The example works find, but when I close the console app, there is an exception \r\n\r\nSystem.EntryPointNotFoundException: 'Unable to find an entry point named 'ReleaseOrtAllocatorInfo' in DLL 'onnxruntime.dll'.'\r\n\r\n\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2149","RelatedDescription":"Open issue \"OnnxTransfrom - onnxruntime.dll - ReleaseOrtAllocatorInfo- System.EntryPointNotFoundException:\" (#2149)"},{"Id":"399211321","IsPullRequest":false,"CreatedAt":"2019-01-15T06:56:41","Actor":"wschin","Number":"2148","RawContent":null,"Title":"TextLoader.ColInfo will be a redundant data structure","State":"open","Body":"As mentioned in #2140, TextLoader.ColInfo can potentially be removed because its function overlaps with that of the output schema of TextLoader. We should remove TextLoader.ColInfo for cleaning.","Url":"https://github.com/dotnet/machinelearning/issues/2148","RelatedDescription":"Open issue \"TextLoader.ColInfo will be a redundant data structure\" (#2148)"},{"Id":"399173592","IsPullRequest":false,"CreatedAt":"2019-01-15T03:28:46","Actor":"justinormont","Number":"2147","RawContent":null,"Title":"Check range of ScalePosWeight in LightGBM","State":"open","Body":"Our recommendation seems to be (0,Inf) for `ScalePosWeight`, but we then restrict it to (0,1].\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/a570da14a41f2870eb8f61d84496a58422398253/src/Microsoft.ML.LightGBM/LightGbmArguments.cs#L155-L158\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/a570da14a41f2870eb8f61d84496a58422398253/src/Microsoft.ML.LightGBM/LightGbmArguments.cs#L170\r\n\r\nThis likely should be:\r\n```C#\r\nContracts.CheckUserArg(Args.ScalePosWeight > 0, nameof(Args.ScalePosWeight), \"must be > 0.\");\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/2147","RelatedDescription":"Open issue \"Check range of ScalePosWeight in LightGBM\" (#2147)"},{"Id":"399172306","IsPullRequest":true,"CreatedAt":"2019-01-15T03:21:51","Actor":"artidoro","Number":"2146","RawContent":null,"Title":"KeyType Simplification","State":"open","Body":"Fixes #1540.\r\n\r\nIn this PR I remove the Min and Contiguous fields of KeyType. The reason for doing so is elaborated in the issue #1540.\r\n\r\nBefore this PR, a valid range of values for a key could be 1000 to 4000. This was represented by a key with Min 1000 and Count 4001. Having a key that starts at a value that is not 1 only very rarely happened in practice.\r\n\r\nNow by default a valid range will start at 1, up to Count, with 0 being used for missing values.\r\n\r\nAs part of this PR I also removed the Min and Contiguous field of KeyRange (KeyRange serves the purpose of representing a valid range of values for a KeyType). It is useful to note that the max of a KeyRange will be equal to Count - 1 of the associated KeyType.\r\n\r\nAlso fixed the comments and the [documentation ](https://github.com/dotnet/machinelearning/blob/master/docs/code/IDataViewTypeSystem.md#key-types) on the type system to make sure they reflect the change.","Url":"https://github.com/dotnet/machinelearning/pull/2146","RelatedDescription":"Open PR \"KeyType Simplification\" (#2146)"},{"Id":"399162632","IsPullRequest":false,"CreatedAt":"2019-01-15T02:32:33","Actor":"zeahmed","Number":"2145","RawContent":null,"Title":"Relocate Microsoft.ML.TensorFlow.TestModels nuget or grant access to dotnet-core feed.","State":"open","Body":"Currently, Microsoft.ML.TensorFlow.TestModels nuget is created from https://github.com/dotnet/machinelearning-testdata and push to dotnet-core feed. \r\n\r\nML.Net people don't have push access to dotnet-core feed. Whenever there is a change in the repo and nuget needs to be regenerated, we need to ask the relevant people (who have access) to do this. The solution is either create a new feed where ML.Net people have access to or grant push access on dotnet-core to ML.Net people (whichever is convenient).\r\n\r\nCc: @yaeldekel, @ericstj, @eerhardt.","Url":"https://github.com/dotnet/machinelearning/issues/2145","RelatedDescription":"Open issue \"Relocate Microsoft.ML.TensorFlow.TestModels nuget or grant access to dotnet-core feed.\" (#2145)"},{"Id":"399147635","IsPullRequest":false,"CreatedAt":"2019-01-15T01:16:49","Actor":"najeeb-kazmi","Number":"2144","RawContent":null,"Title":"Decide a good name for TextLoader","State":"open","Body":"In #1690 we renamed `MLContext.Data.CreateTextReader` to `MLContext.Data.CreateTextLoader` to have the method match the return type `TextLoader`.\r\n\r\nIn #581 and subsequent work, we are replacing `IDataLoader` with `IDataReader`, and so renaming the `TextLoader` to `TextReader` would make sense. However, doing so would lead to disambiguation issues between `Microsoft.ML.Data.TextReader` and `System.IO.TextReader`, which we should avoid as per .NET guidelines. So, we must come up with a new name for `TextLoader` that is descriptive but is different from `TextReader`.\r\n\r\nSome suggestions:\r\n- `DelimitedTextReader`\r\n- `DelimTextReader`\r\n- `TextDataReader`\r\n\r\ncc: @glebuk @eerhardt @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/2144","RelatedDescription":"Open issue \"Decide a good name for TextLoader\" (#2144)"},{"Id":"399134254","IsPullRequest":true,"CreatedAt":"2019-01-15T00:19:52","Actor":"eerhardt","Number":"2143","RawContent":null,"Title":"Remove ColumnType.RawKind usages Round 1.","State":"open","Body":"Remove all usages of RawKind that are outside of ML.Core and ML.Data assemblies. The next round will completely remove ColumnType.RawKind.\r\n\r\nPart of the work necessary for #1860 and contributes to #1533.","Url":"https://github.com/dotnet/machinelearning/pull/2143","RelatedDescription":"Open PR \"Remove ColumnType.RawKind usages Round 1.\" (#2143)"},{"Id":"399126527","IsPullRequest":true,"CreatedAt":"2019-01-14T23:50:51","Actor":"rogancarr","Number":"2142","RawContent":null,"Title":"Refactor GAM Predictor to be Generic","State":"open","Body":"This PR refactors the GAM trainer and predictor such that all training information remains in the trainer, and the GAM predictor is for any generic (binned) GAM.\r\n\r\nFixes #1948\r\n\r\n**Update**:  Two small bug fixes included in this PR\r\n1. Fixed a serialization error when reading in GAM models written prior to 0.6. Now we issue a warning with a workaround.\r\n2. Fixed a scoring error for sparse datasets.","Url":"https://github.com/dotnet/machinelearning/pull/2142","RelatedDescription":"Open PR \"Refactor GAM Predictor to be Generic\" (#2142)"},{"Id":"399112226","IsPullRequest":false,"CreatedAt":"2019-01-14T22:54:10","Actor":"yaeldekel","Number":"2141","RawContent":null,"Title":"Why can't SlotDroppingTransformer be applied to integer columns?","State":"open","Body":"This is the comment on the IsValidColumnType method of the transformer:\r\nhttps://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Data/Transforms/DropSlotsTransform.cs#L474\r\n\r\nBoth scalars and vectors are acceptable types, but the item type must have a default value which means it must be a string, a key, a float or a double.\r\n\r\nI think integers fit this description as well.","Url":"https://github.com/dotnet/machinelearning/issues/2141","RelatedDescription":"Open issue \"Why can't SlotDroppingTransformer be applied to integer columns?\" (#2141)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-01-17T05:30:53.1863999Z","RunDurationInMilliseconds":897}