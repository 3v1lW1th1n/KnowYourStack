{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the .NET Framework 4.7.2","PublishedOn":"2018-04-30T20:56:19+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Today, we are happy to announce the release of the .NET Framework 4.7.2. It’s included in the Windows 10 April 2018 Update. .NET Framework 4.7.2 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/","RawContent":null},{"Title":"Help us plan the future of .NET!","PublishedOn":"2018-04-20T16:55:37+00:00","CommentsCount":63,"FacebookCount":0,"Summary":"We’re currently planning our next major .NET releases and would love to hear your feedback on how you interact with .NET Framework and .NET Core today. Please fill out the survey below and help shape...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/20/help-us-plan-the-future-of-net/","RawContent":null},{"Title":"Performance Improvements in .NET Core 2.1","PublishedOn":"2018-04-18T19:29:45+00:00","CommentsCount":46,"FacebookCount":0,"Summary":"Back before .NET Core 2.0 shipped, I wrote a post highlighting various performance improvements in .NET Core 2.0 when compared with .NET Core 1.1 and the .NET Framework. As .NET Core 2.1 is in its...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/","RawContent":null},{"Title":".NET Highlights in Visual Studio 2017 version 15.7 Preview 4","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"As you know we continue to incrementally improve Visual Studio 2017 (version 15), and our 7th significant update is currently well under way with the 4th preview shipping today. As we’re winding down...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/visual-studio-2017-15-7-preview-4/","RawContent":null},{"Title":".NET Core April 2018 Update","PublishedOn":"2018-04-17T23:50:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2018 Update. This update includes .NET Core 1.0.11, 1.1.8 and 2.0.7. There are no new security fixes in this update. See April 2018 .NET Updates for other...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 2","PublishedOn":"2018-04-11T18:02:40+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today we’re releasing the second preview of EF Core 2.1, alongside .NET Core 2.1 Preview 2 and ASP.NET Core 2.1 Preview 2. Thank you so much to everyone who has tried our early builds and has helped...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-entity-framework-core-2-1-preview-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 2","PublishedOn":"2018-04-11T17:53:44+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 2. The release is now ready for broad testing, as we get closer to a final build within the next two to three months. We&#8217;d appreciate any feedback...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/","RawContent":null},{"Title":"Explore Azure Cosmos DB with .NET Core and MongoDB","PublishedOn":"2018-04-09T16:00:47+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Have you had to design general purpose &#8220;metadata&#8221; tables in your SQL database that basically store column names and values? Do you often serialize/de-serialize XML or JSON from your SQL...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/09/explore-cosmosdb-with-net-core-and-mongodb/","RawContent":null},{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":66,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7559882384","Type":"PullRequestEvent","CreatedAt":"2018-04-20T06:42:59","Actor":"Cheesebaron","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Opened pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project"},{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7619224203","Type":"IssuesEvent","CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Opened issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65) at dotnet/announcements","RelatedBody":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n"},{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7620662057","Type":"IssuesEvent","CreatedAt":"2018-05-03T04:23:49","Actor":"lemmaa","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/10848","RelatedDescription":"Closed issue \"[Question] Comparison of dynamic binding performance of CoreCLR by architecture\" (#10848) at dotnet/coreclr","RelatedBody":"I measured the performance of dynamic bindings and static bindings in C# using a console application, and it showed a lot of differences especially in the .NET Core arm32.\r\n\r\nAFAIK, CoreCLR implementation of x64 and arm32 are not much different than the JIT backend (RyuJIT vs legacyJIT). What is the reason for this difference compared to x64?\r\n\r\nIs there anyone who can explain?\r\n\r\n## Legend\r\n* Test Environment : SerializeWithDynamic / SerializeWithStaticBinding\r\n\r\n## x64\r\n\r\n### .NET Core 1.1.0 : *1.44 times* **(BEST CASE)**\r\n````\r\njs1  sjlee  ⋯/bin/Release/netcoreapp1.1  dotnet ./dynamic.dll\r\nMain Entry Start\r\nSerializeWithDynamic: 00:00:00.1273009\r\nSerializeWithStaticBinding: 00:00:00.0883037\r\n````\r\n### mono  4.8.0.520/8f6d0f6 (ubuntu16.04) : *4.39 times*\r\n````\r\njs1  sjlee  ⋯/dotnet/dynamic/mono  mono dynamic.dll\r\nMain Entry Start\r\nSerializeWithDynamic: 00:00:00.2502173\r\nSerializeWithStaticBinding: 00:00:00.0573394\r\n````\r\n## arm32\r\n### .NET Core (ubuntu14.04-armhf-RaspberryPi2) : *6.54 times* **(WORST CASE)**\r\n````\r\npi2  sjlee  ~/coreoverlay.Linux.arm.Release  ./corerun dynamic.dll\r\nMain Entry Start\r\nSerializeWithDynamic: 00:00:08.1897256\r\nSerializeWithStaticBinding: 00:00:01.2505020\r\n````\r\n### mono 4.4.2.11/f72fe45 (ubuntu14.04-armhf-RaspberryPi2) : *2.42 times*\r\n````\r\npi2  sjlee  ~/coreoverlay.Linux.arm.Release/mono  mono dynamic.dll\r\nMain Entry Start\r\nSerializeWithDynamic: 00:00:03.4695516\r\nSerializeWithStaticBinding: 00:00:01.4304823\r\n````\r\n### .NET Core (Tizen-armel-TM1) : *5.58 times*\r\n````\r\nsh-3.2# /usr/share/dotnet/corerun dynamic.dll\r\nMain Entry Start\r\nSerializeWithDynamic: 00:00:08.7600097\r\nSerializeWithStaticBinding: 00:00:01.5701904\r\n````\r\n# Test Code\r\n````c#\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Reflection;\r\n \r\npublic abstract class Product { }\r\npublic class Book : Product { }\r\npublic class Record : Product { }\r\npublic class Movie : Product { }\r\n \r\npublic class ProductSerializer\r\n{\r\n    public void Serialize(Book b) { }\r\n    public void Serialize(Record b) { }\r\n    public void Serialize(Movie b) { }\r\n \r\n    public void SerializeWithDynamic(object p)\r\n    {       \r\n        Serialize((dynamic)p);\r\n    }\r\n   \r\n    public void SerializeWithStaticBinding(Product p)\r\n    {\r\n        if (p is Book) Serialize(p as Book);\r\n        if (p is Record) Serialize(p as Record);\r\n        if (p is Movie) Serialize(p as Movie);\r\n    }\r\n}\r\n \r\nclass Program\r\n{\r\n    const int NumRepetitions = 10000000;\r\n    static TimeSpan Benchmark(Action action)\r\n    {\r\n        var stopwatch = Stopwatch.StartNew();\r\n        for (int i = 0; i < NumRepetitions; i++)\r\n            action.Invoke();\r\n        return stopwatch.Elapsed;\r\n    }\r\n \r\n    static void Main(string[] args)\r\n    {\r\n        Console.WriteLine(\"Main Entry Start\");\r\n        Product b = new Movie();\r\n        var serializer = new ProductSerializer();       \r\n        Console.WriteLine(\"SerializeWithDynamic: \" + Benchmark(() => serializer.SerializeWithDynamic(b)));\r\n        Console.WriteLine(\"SerializeWithStaticBinding: \" + Benchmark(() => serializer.SerializeWithStaticBinding(b)));\r\n    }\r\n}\r\n````"},{"Id":"7620656479","Type":"PullRequestEvent","CreatedAt":"2018-05-03T04:21:05","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17868","RelatedDescription":"Opened pull request \"Port Marshal UTF8 fixes from CoreRT\" (#17868) at dotnet/coreclr","RelatedBody":""},{"Id":"7620386149","Type":"PullRequestEvent","CreatedAt":"2018-05-03T02:23:01","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17867","RelatedDescription":"Merged pull request \"typo\" (#17867) at dotnet/coreclr","RelatedBody":"Serialable should have been Serializable\r\npublically should have been publicly"},{"Id":"7620384347","Type":"PullRequestEvent","CreatedAt":"2018-05-03T02:22:16","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17860","RelatedDescription":"Merged pull request \"Update BuildTools, PgoData to rc1-02801-02, release-20180502-0048, respectively (release/2.1)\" (#17860) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7620263843","Type":"PullRequestEvent","CreatedAt":"2018-05-03T01:32:18","Actor":"berniefitz82","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17867","RelatedDescription":"Opened pull request \"typo\" (#17867) at dotnet/coreclr","RelatedBody":"Serialable should have been Serializable\r\npublically should have been publicly"},{"Id":"7620088670","Type":"PullRequestEvent","CreatedAt":"2018-05-03T00:20:51","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17865","RelatedDescription":"Merged pull request \"Clarifying comment on overflow\" (#17865) at dotnet/coreclr","RelatedBody":"Per https://github.com/dotnet/coreclr/pull/17863/files/0ea434c74a8a98d404bce3522d4259f1379f1a39#diff-6ae774662dc637ecc68fd009d821ec8f"},{"Id":"7620023783","Type":"PullRequestEvent","CreatedAt":"2018-05-02T23:57:22","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17866","RelatedDescription":"Opened pull request \"[ARM-ARCH] Ensure that any byrefs created in genCodeForIndexAddr cannot point outside of the array\" (#17866) at dotnet/coreclr","RelatedBody":"Ensure that any byrefs created in genCodeForIndexAddr cannot point outside of the array\r\nUsed the scaled add instructions for more powers of two\r\nOnly use the safe byref sequence when generating fully interruptible code."},{"Id":"7619975913","Type":"PullRequestEvent","CreatedAt":"2018-05-02T23:40:29","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17781","RelatedDescription":null,"RelatedBody":"For ARM, doing a secure delegate call requires adding\r\na custom calling convention argument R4 as the address of the\r\nsecure delegate invoke indirection cell. This is done using the\r\nfgMorphArgs nonStandardArgs mechanism, and the argument is added\r\nat the end. For calls with 4 or more register arguments, this\r\ndidn't work: we would initially set the non-standard arg as a\r\nnon-register argument, and the nonStandardArgs check didn't\r\nconsider converting an argument from a stack argument back to\r\na register argument. The fix allows nonStandardArgs to be either\r\nstack or register arguments, no matter what their place in the\r\nargument list would imply.\r\n\r\nFix #17738"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7620552548","Type":"PullRequestEvent","CreatedAt":"2018-05-03T03:33:56","Actor":"AndyGerlicher","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/9148","RelatedDescription":"Closed pull request \"MSBuild 15.7.177 (3xx)\" (#9148) at dotnet/cli","RelatedBody":"This supersedes #9141\r\n\r\nKeeping up to date with prodcon.\r\n\r\nThis isn't critical, but after RTM we'll need to make a commit like this to prep for servicing. See Microsoft/msbuild#3228 for details."},{"Id":"7620549134","Type":"PullRequestEvent","CreatedAt":"2018-05-03T03:32:26","Actor":"AndyGerlicher","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9190","RelatedDescription":"Opened pull request \"MSBuild 15.7.178\" (#9190) at dotnet/cli","RelatedBody":"This drops our dependency on `Microsoft.NETCore.App` package. We can now be stable for RTM.\r\n\r\n@mmitche can we commit this and turn off the MSBuild portion of ProdCon?"},{"Id":"7619496340","Type":"IssuesEvent","CreatedAt":"2018-05-02T21:25:51","Actor":"dsplaisted","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/issues/8485","RelatedDescription":"Reopened issue \"Cannot install prereleased tool package from dotnet-install-tool without specifying the exact version\" (#8485) at dotnet/cli","RelatedBody":"To install a prerelease version of a CLI tool, users must know the exact version they want to install. This means they have to open a browser to nuget.org or myget.org to find the package.\r\n\r\nFor example, this is the console output for dotnet-watch\r\n```\r\n> dotnet install tool --global dotnet-watch --source https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\r\nInstall failed. Failed to download package:\r\nNuGet returned:\r\n\r\nFailed to restore package.\r\nWorkingDirectory:\r\nArguments: restore C:\\Users\\namc\\AppData\\Local\\Temp\\0rc552nv.kmy\\wjh4elju.lgh.csproj --source https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json --runtime win10-x64 /p:BaseIntermediateOutputPath=\\\"C:\\Users\\namc\\.dotnet\\tools\\dotnet-watch\\gx5ifack.dyr\\\"\r\nOutput:   Restoring packages for C:\\Users\\namc\\AppData\\Local\\Temp\\0rc552nv.kmy\\wjh4elju.lgh.csproj...\r\nC:\\Users\\namc\\AppData\\Local\\Temp\\0rc552nv.kmy\\wjh4elju.lgh.csproj : error NU1103: Unable to find a stable package dotnet-watch with version\r\n\r\nC:\\Users\\namc\\AppData\\Local\\Temp\\0rc552nv.kmy\\wjh4elju.lgh.csproj : error NU1103:   - Found 124 version(s) in https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json [ Nearest version: 2.1.0-preview1-27934 ]\r\nC:\\Users\\namc\\AppData\\Local\\Temp\\0rc552nv.kmy\\wjh4elju.lgh.csproj : error NU1103:   - Found 1 version(s) in C:\\Users\\namc\\.dotnet\\x64\\sdk\\NuGetFallbackFolder [ Nearest version: 2.1.0-preview1-28124 ]\r\n  Restore failed in 680.98 ms for C:\\Users\\namc\\AppData\\Local\\Temp\\0rc552nv.kmy\\wjh4elju.lgh.csproj.\r\n\r\nUsage: dotnet install tool [options] <PACKAGE_ID>\r\n\r\nArguments:\r\n  <PACKAGE_ID>   NuGet Package Id of the tool to install.\r\n\r\nOptions:\r\n  -g, --global        Install user wide.\r\n  --version           Version of the tool package in NuGet.\r\n  --configfile        The NuGet configuration file to use.\r\n  --source <SOURCE>   Specifies a NuGet package source to use during installation.\r\n  -f, --framework     The target framework to install the tool for.\r\n  -h, --help          Show help information.\r\n```\r\n\r\nThis is the console output when trying to specify `--version 2.1.0-*`\r\n```\r\n> dotnet install tool --global dotnet-watch --version 2.1.0-* --source https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\r\nSystem.ArgumentException: Illegal characters in path.\r\nParameter name: path\r\n   at System.IO.Path.GetFullPath(String path)\r\n   at System.IO.Directory.CreateDirectory(String path)\r\n   at Microsoft.DotNet.ToolPackage.ToolPackageObtainer.EnsureDirectoryExists(DirectoryPath path)\r\n   at Microsoft.DotNet.ToolPackage.ToolPackageObtainer.CreateIndividualToolVersionDirectory(String packageId, PackageVersion packageVersion)\r\n\r\n   at Microsoft.DotNet.ToolPackage.ToolPackageObtainer.ObtainAndReturnExecutablePath(String packageId, String packageVersion, Nullable`1 nugetconfig, String targetframework, String source)\r\n   at Microsoft.DotNet.Tools.Install.Tool.InstallToolCommand.ObtainPackage(DirectoryPath executablePackagePath, DirectoryPath offlineFeedPath)\r\n   at Microsoft.DotNet.Tools.Install.Tool.InstallToolCommand.Execute()\r\n   at Microsoft.DotNet.Cli.DotNetTopLevelCommandBase.RunCommand(String[] args)\r\n   at Microsoft.DotNet.Tools.Install.InstallCommand.Run(String[] args)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n```\r\n\r\n*Ideas*\r\n\r\n- Support wildcards `--version 2.1.0-*`\r\n- Support a `--prerelease` flag\r\n\r\ncc @KathleenDollard \r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7619511676","Type":"PullRequestEvent","CreatedAt":"2018-05-02T21:29:23","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/722","RelatedDescription":"Merged pull request \"Fix LockFileCache when SDK and trimming task are using different NuGet dlls\" (#722) at dotnet/standard","RelatedBody":"Previously I copied the SDK caching code for caching the loaded lock file across task boundaries.\r\n\r\nThis became a problem when the SDK updated their NuGet version.\r\n\r\nWe didn't agree on the type that belonged in the cache.\r\n\r\nAvoid this by using a versioned prefix for the cache key.  Of course we will no longer share the read if we happen to be on the same version, but this is safer.\r\n\r\n/cc @nguerrera @dsplaisted "},{"Id":"7619284155","Type":"PullRequestEvent","CreatedAt":"2018-05-02T20:41:05","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/722","RelatedDescription":"Opened pull request \"Fix LockFileCache when SDK and trimming task are using different NuGet dlls\" (#722) at dotnet/standard","RelatedBody":"Previously I copied the SDK caching code for caching the loaded lock file across task boundaries.\r\n\r\nThis became a problem when the SDK updated their NuGet version.\r\n\r\nWe didn't agree on the type that belonged in the cache.\r\n\r\nAvoid this by using a versioned prefix for the cache key.  Of course we will no longer share the read if we happen to be on the same version, but this is safer.\r\n\r\n/cc @nguerrera @dsplaisted "},{"Id":"7613299458","Type":"PullRequestEvent","CreatedAt":"2018-05-01T20:42:40","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/721","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02801-01 (master)\" (#721) at dotnet/standard","RelatedBody":""},{"Id":"7612161291","Type":"IssuesEvent","CreatedAt":"2018-05-01T16:31:35","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/719","RelatedDescription":"Closed issue \"Different build output for classic projects: NuGet packages vs project reference. Is this on purpose?\" (#719) at dotnet/standard","RelatedBody":"Hi there,\r\n\r\nI have a WPF app (.NET Framework 4.6.1, classic .csproj) that references a .NET Standard 1.3 project that itself references another Multi-targeted project (.NET Standard 1.3 and .NET Framework 4.6.1).\r\n\r\nI've set `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` in the csproj file of the WPF app, but seems this is only important for NuGet packages?\r\n\r\nI would expect that the WPF app gets these dlls in the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395631-e0f9a786-4ae0-11e8-91f4-ecacadee72fc.png)\r\n\r\nBut it actually copies these dlls to the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395639-ee646884-4ae0-11e8-9ecb-78f0eff1afcd.png)\r\n\r\nIf the Storage Lib is referenced as a NuGet package, it works as expected:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395643-fe20684a-4ae0-11e8-8d8a-d2015b262057.png)\r\n\r\nIs this the expected behavior? When migrating the WPF app to SDK-style project format, it works also as expected as shown in the first picture.\r\n\r\n\r\n"},{"Id":"7608452828","Type":"IssuesEvent","CreatedAt":"2018-04-30T20:01:13","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/720","RelatedDescription":"Closed issue \"PBKDF2 based on HMACSHA512 \" (#720) at dotnet/standard","RelatedBody":"Hi there,\r\nI am trying to achieve this purely in **.netstandard2.0**.\r\n```\r\nusing (SHA512 sha = SHA512.Create())\r\n{\r\n    byte[] pb = KeyDerivation.Pbkdf2(\r\n        password,\r\n        sha.ComputeHash(new MemoryStream(Encoding.UTF8.GetBytes(salt))),\r\n        KeyDerivationPrf.HMACSHA512,\r\n        IterationCount,\r\n        48);\r\n    Crypter.Key = pb.Take(32).ToArray();\r\n    Crypter.IV = pb.Skip(32).Take(16).ToArray();\r\n}\r\n```\r\n But I can't as it uses  **KeyDerivation.Pbkdf2** which is a part of _Microsoft.AspNetCore.Cryptography.KeyDerivation_  namespace in **.netcore** . I know about **Rfc2898DeriveBytes** class but it is based on **HMACSHA1**.  Am I missing something? Does an equivalent implementation for **PBKDF2** based on **HMACSHA512** exist in .**netstandard2.0**?"},{"Id":"7601558195","Type":"IssuesEvent","CreatedAt":"2018-04-28T14:44:00","Actor":"MoamenMohamed","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/720","RelatedDescription":"Opened issue \"PBKDF2 based on HMACSHA512 \" (#720) at dotnet/standard","RelatedBody":"Hi there,\r\nI am trying to achieve this purely in **.netstandard2.0**.\r\n```\r\nusing (SHA512 sha = SHA512.Create())\r\n{\r\n    byte[] pb = KeyDerivation.Pbkdf2(\r\n        password,\r\n        sha.ComputeHash(new MemoryStream(Encoding.UTF8.GetBytes(salt))),\r\n        KeyDerivationPrf.HMACSHA512,\r\n        IterationCount,\r\n        48);\r\n    Crypter.Key = pb.Take(32).ToArray();\r\n    Crypter.IV = pb.Skip(32).Take(16).ToArray();\r\n}\r\n```\r\n But I can't as it uses  **KeyDerivation.Pbkdf2** which is a part of _Microsoft.AspNetCore.Cryptography.KeyDerivation_  namespace in **.netcore** . I know about **Rfc2898DeriveBytes** class but it is based on **HMACSHA1**.  Am I missing something? Does an equivalent implementation for **PBKDF2** based on **HMACSHA512** exist in .**netstandard2.0**?"},{"Id":"7601217646","Type":"IssuesEvent","CreatedAt":"2018-04-28T11:00:57","Actor":"thomasclaudiushuber","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/719","RelatedDescription":"Opened issue \"Different build output for classic projects: NuGet packages vs project reference. Is this on purpose?\" (#719) at dotnet/standard","RelatedBody":"Hi there,\r\n\r\nI have a WPF app (.NET Framework 4.6.1, classic .csproj) that references a .NET Standard 1.3 project that itself references another Multi-targeted project (.NET Standard 1.3 and .NET Framework 4.6.1).\r\n\r\nI've set `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` in the csproj file of the WPF app, but seems this is only important for NuGet packages?\r\n\r\nI would expect that the WPF app gets these dlls in the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395631-e0f9a786-4ae0-11e8-91f4-ecacadee72fc.png)\r\n\r\nBut it is actually copies these dlls to the output directory:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395639-ee646884-4ae0-11e8-9ecb-78f0eff1afcd.png)\r\n\r\nIf the Storage Lib is referenced as a NuGet package, it works as expected:\r\n\r\n![image](https://user-images.githubusercontent.com/7116546/39395643-fe20684a-4ae0-11e8-8d8a-d2015b262057.png)\r\n\r\nIs this the expected behavior? When migrating the WPF app to SDK-style project format, it works also as expected as shown in the first picture.\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7620538953","Type":"IssuesEvent","CreatedAt":"2018-05-03T03:28:03","Actor":"VenkateshSrini","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29452","RelatedDescription":"Closed issue \"servicepointmanager is not working as expected with httpclient\" (#29452) at dotnet/corefx","RelatedBody":"Hi,\r\nI have a library in which makes a call to external web service. The SSL validation for this needs to be skipped. Since .NET core 2.0 implements ServicePointManager, we have given the code as \r\n```c#\r\nServicePointManager.ServerCertificateValidationCallBack=  (s,c,ch,ssl) => true; \r\nusing (var client = AmazonClient(...))\r\n{\r\n}\r\n```\r\nAs per this even though the SDK does not give us an explicit way of switching of the SSL validation since ServicePointManager is single ton ideally this should have worked. But this did not happen. I still get ssl related error.\r\n\r\nSo does the above code not work with HttpClient? Is it by design?\r\n\r\n[EDIT] Fix code formatting by @karelz"},{"Id":"7620466402","Type":"PullRequestEvent","CreatedAt":"2018-05-03T02:57:04","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29469","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#29469) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7620465263","Type":"PullRequestEvent","CreatedAt":"2018-05-03T02:56:33","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29441","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC to preview1-02801-01, preview1-26503-01, preview1-26503-01, preview1-26502-05, beta-26502-00, beta-26502-00, respectively (master)\" (#29441) at dotnet/corefx","RelatedBody":""},{"Id":"7620464667","Type":"PullRequestEvent","CreatedAt":"2018-05-03T02:56:18","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29468","RelatedDescription":"Merged pull request \"Improve ManualResetValueTaskSource prototype\" (#29468) at dotnet/corefx","RelatedBody":"In .NET Core 2.1 we added the public `IValueTaskSource` and `IValueTaskSource<T>` interfaces, with associated support in `ValueTask` and `ValueTask<T>`, and while we implemented the interfaces on several types internally, we didn't expose any public implementations.\r\n\r\nWe should consider exposing several in the future, including a manual-reset and an auto-reset IValueTaskSource implementation.  We already have a ManualResetValueTaskSource implementation in our tests.  This commit improves upon it in a few ways:\r\n- Separates out the logic into a separate public struct.  The ManualResetValueTaskSource class wraps the struct, giving developers a choice to either use the class directly, or to embed the struct in their own implementation.\r\n- Fixes context capture to behave more similarly to Task, handling both SynchronizationContext and TaskSchedulers\r\n- Adds a prototype implementation of an IAsyncEnumerable, demonstrating how the compiler could utilize ManualResetValueTaskSourceLogic in its implementation.\r\n\r\nThis is all still prototype, used only in tests.\r\n\r\ncc: @jcouv, @davidfowl, @kouvel, @tarekgh "},{"Id":"7620460515","Type":"PullRequestEvent","CreatedAt":"2018-05-03T02:54:30","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29471","RelatedDescription":"Opened pull request \"Fix race condition in Sockets' ExecutionContextFlowTest test\" (#29471) at dotnet/corefx","RelatedBody":"It's possible that the awaited operation continues on another thread,\r\nrestoring the ExecutionContext, at the same time that the initial thread\r\nis unwinding out of the async invocation, and thus also restoring an\r\nExecutionContext, both of which will invoke the AsyncLocal's callback,\r\nand thus we need to synchronize its work to avoid issues like multiple\r\nthreads all calling StringBuilder.AppendLine concurrently.\r\n\r\ncc: @kouvel, @BruceForstall "},{"Id":"7620408154","Type":"PullRequestEvent","CreatedAt":"2018-05-03T02:32:07","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29470","RelatedDescription":"Opened pull request \"[release/2.1] Add two missing ConfigureAwait(false) calls in SocketsHttpHandler\" (#29470) at dotnet/corefx","RelatedBody":"Port https://github.com/dotnet/corefx/pull/29465 to release/2.1 branch.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/29453\r\n\r\n(This does not include the tests, as they touched a lot of code that is different in the release/2.1 branch, making a merge more risky.)"},{"Id":"7620407871","Type":"IssuesEvent","CreatedAt":"2018-05-03T02:31:59","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29453","RelatedDescription":"Reopened issue \"Hangs with HttpClientHandler and AutomaticDecompression in 2.1 preview\" (#29453) at dotnet/corefx","RelatedBody":"We recently have run into a spate of hangs in our tests when running the full test suite.\r\nWe have been able to narrow it down to a consistent hang when an `HttpClient` is reading from a pretty big stream and Kestrel is sending a pretty big stream.\r\n\r\nThis is all on the local machine, mind. We weren't able to reproduce this on stand alone tests, but consistently when running the full suite.\r\nThese tests pass without issue when running on 2.0.\r\n\r\nEventually we narrowed it down to removing this line:\r\n\r\n```\r\n  var httpMessageHandler = new HttpClientHandler();\r\n  if (httpMessageHandler.SupportsAutomaticDecompression)\r\n  {\r\n      //httpMessageHandler.AutomaticDecompression =\r\n          //useCompression ?\r\n              //DecompressionMethods.GZip | DecompressionMethods.Deflate\r\n              //: DecompressionMethods.None;\r\n  }\r\n```\r\n\r\nOn the server side, compression is done using:\r\n\r\n```\r\n app.UseWhen(\r\n     context => true, \r\n     appBuilder => appBuilder.UseResponseCompression());\r\n\r\n```\r\n\r\nIs this a known issue? Any other details that I can provide?\r\n\r\n`2.1.300-preview2-008533`"},{"Id":"7620390893","Type":"PullRequestEvent","CreatedAt":"2018-05-03T02:24:58","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29465","RelatedDescription":"Merged pull request \"Add two missing ConfigureAwait(false) calls in SocketsHttpHandler\" (#29465) at dotnet/corefx","RelatedBody":"ChunkedTransferEncodingReadStream's ReadAsync had one await missing a ConfigureAwait(false).  If there's a synchronization context set on the calling thread, this results in a continuation being created that posts back to that context, which can cause problems (e.g. deadlocks) if that context is blocked, e.g. if the synchronous Read method is being used to block waiting for ReadAsync to complete.  The fix is simply to add `.ConfigureAwait(false)`.\r\n\r\nAs long as I was fixing that, I also reviewed all `await`s in SocketsHttpHandler and found one more that was missing `.ConfigureAwait(false)`, in HttpConnectionPool's EstablishProxyTunnel, and so fixed that, too.\r\n\r\nAnd added some tests.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/29453\r\ncc: @geoffkizer, @davidsh, @ayende, @pjanotti"},{"Id":"7620390885","Type":"IssuesEvent","CreatedAt":"2018-05-03T02:24:58","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29453","RelatedDescription":"Closed issue \"Hangs with HttpClientHandler and AutomaticDecompression in 2.1 preview\" (#29453) at dotnet/corefx","RelatedBody":"We recently have run into a spate of hangs in our tests when running the full test suite.\r\nWe have been able to narrow it down to a consistent hang when an `HttpClient` is reading from a pretty big stream and Kestrel is sending a pretty big stream.\r\n\r\nThis is all on the local machine, mind. We weren't able to reproduce this on stand alone tests, but consistently when running the full suite.\r\nThese tests pass without issue when running on 2.0.\r\n\r\nEventually we narrowed it down to removing this line:\r\n\r\n```\r\n  var httpMessageHandler = new HttpClientHandler();\r\n  if (httpMessageHandler.SupportsAutomaticDecompression)\r\n  {\r\n      //httpMessageHandler.AutomaticDecompression =\r\n          //useCompression ?\r\n              //DecompressionMethods.GZip | DecompressionMethods.Deflate\r\n              //: DecompressionMethods.None;\r\n  }\r\n```\r\n\r\nOn the server side, compression is done using:\r\n\r\n```\r\n app.UseWhen(\r\n     context => true, \r\n     appBuilder => appBuilder.UseResponseCompression());\r\n\r\n```\r\n\r\nIs this a known issue? Any other details that I can provide?\r\n\r\n`2.1.300-preview2-008533`"},{"Id":"7620386993","Type":"PullRequestEvent","CreatedAt":"2018-05-03T02:23:23","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29469","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#29469) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7620360055","Type":"PullRequestEvent","CreatedAt":"2018-05-03T02:12:46","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29468","RelatedDescription":"Opened pull request \"Improve ManualResetValueTaskSource prototype\" (#29468) at dotnet/corefx","RelatedBody":"In .NET Core 2.1 we added the public `IValueTaskSource` and `IValueTaskSource<T>` interfaces, with associated support in `ValueTask` and `ValueTask<T>`, and while we implemented the interfaces on several types internally, we didn't expose any public implementations.\r\n\r\nWe should consider exposing several in the future, including a manual-reset and an auto-reset IValueTaskSource implementation.  We already have a ManualResetValueTaskSource implementation in our tests.  This commit improves upon it in a few ways:\r\n- Separates out the logic into a separate public struct.  The ManualResetValueTaskSource class wraps the struct, giving developers a choice to either use the class directly, or to embed the struct in their own implementation.\r\n- Fixes context capture to behave more similarly to Task, handling both SynchronizationContext and TaskSchedulers\r\n- Adds a prototype implementation of an IAsyncEnumerable, demonstrating how the compiler could utilize ManualResetValueTaskSourceLogic in its implementation.\r\n\r\nThis is all still prototype, used only in tests.\r\n\r\ncc: @jcouv, @davidfowl, @kouvel, @tarekgh "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7620577553","Type":"IssuesEvent","CreatedAt":"2018-05-03T03:45:03","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26580","RelatedDescription":"Opened issue \"With a large number of files open, it takes seconds long to bring up reload dialog\" (#26580) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. `git clone https://github.com/dotnet/project-system`\r\n2. `git checkout 8319d977e92da50c3fed1460344fb3c7ef6baaa1`\r\n3. In Explorer, search for \"*.vb\"\r\n4. Drag them into Visual Studio\r\n5. Wait for \"...\" to removed from Error List\r\n6. Highlight a private symbol in one of the VB files, and press CTRL + R, CTRL + R\r\n\r\n**Expected Behavior**:\r\nFor Rename symbols to immediately appear\r\n\r\n**Actual Behavior**:\r\nIt takes 6 - 10 seconds to appear\r\n"},{"Id":"7620486544","Type":"IssuesEvent","CreatedAt":"2018-05-03T03:05:27","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26468","RelatedDescription":"Closed issue \"\"Thread was being aborted\" popups\" (#26468) at dotnet/roslyn","RelatedBody":"I'm working on branch `features/recursive-patterns` (commit f753435f10c01c1708389f6dcbc28c70c047de44) and editing/running some tests in `src\\EditorFeatures\\CSharpTest\\AutomaticCompletion\\AutomaticBraceCompletionTests.cs`.\r\n\r\nI'm getting popups with the following stack trace.\r\nI'm using `VisualStudio.15.Preview/15.7.0-pre.1.0+27512.0`.\r\n\r\nI'll try again on Monday on 15.8 preview 1.\r\n\r\n```\r\n---------------------------\r\nAssertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue\r\n---------------------------\r\nThread was being aborted.\r\n\r\n\r\n\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.ForegroundNotification.ForegroundNotificationService.<ProcessAsync>d__13.MoveNext()\r\n\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)\r\n\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()\r\n\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task& currentTask)\r\n\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n\r\n   at System.Threading.Tasks.Task.FinishStageTwo()\r\n\r\n   at System.Threading.Tasks.Task.Finish(Boolean bUserDelegateExecuted)\r\n\r\n   at System.Threading.Tasks.Task`1.TrySetException(Object exceptionObject)\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(Exception exception)\r\n\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(Exception exception)\r\n\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.ForegroundNotification.ForegroundNotificationService.<WaitForPendingWorkAsync>d__16.MoveNext()\r\n\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext(Object stateMachine)\r\n\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.MoveNextRunner.Run()\r\n\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(Action action, Boolean allowInlining, Task& currentTask)\r\n\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n\r\n   at System.Threading.Tasks.Task.FinishStageThree()\r\n\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result)\r\n\r\n   at System.Threading.Tasks.Task.DelayPromise.Complete()\r\n\r\n   at System.Threading.Tasks.Task.<>c.<Delay>b__274_1(Object state)\r\n\r\n   at System.Threading.TimerQueueTimer.CallCallbackInContext(Object state)\r\n\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.TimerQueueTimer.CallCallback()\r\n\r\n   at System.Threading.TimerQueueTimer.Fire()\r\n\r\n   at System.Threading.TimerQueue.FireNextTimers()\r\n\r\n   at System.Threading.TimerQueue.AppDomainTimerCallback()\r\n\r\n\r\n---------------------------\r\nAbort   Retry   Ignore   \r\n---------------------------\r\n```"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7620467157","Type":"PullRequestEvent","CreatedAt":"2018-05-03T02:57:25","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5771","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5771) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7620388068","Type":"PullRequestEvent","CreatedAt":"2018-05-03T02:23:49","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5771","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5771) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7620149773","Type":"PullRequestEvent","CreatedAt":"2018-05-03T00:45:13","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5770","RelatedDescription":"Opened pull request \"Add implementation of Marshal UTF8 methods\" (#5770) at dotnet/corert","RelatedBody":"Fixes #5757"},{"Id":"7620095263","Type":"PullRequestEvent","CreatedAt":"2018-05-03T00:23:27","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5769","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5769) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7620093373","Type":"PullRequestEvent","CreatedAt":"2018-05-03T00:22:42","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5769","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5769) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7619227969","Type":"PullRequestEvent","CreatedAt":"2018-05-02T20:29:39","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5765","RelatedDescription":"Merged pull request \"Add Delegate cast to Task constructors\" (#5765) at dotnet/corert","RelatedBody":"Running runtest.cmd /corefx on Windows with the `System.Threading.Tests` in the CoreFX test list hits the following assertion \r\n\r\nhttps://github.com/dotnet/corert/blob/becb08ebde12bf06c8223b9b2a6232fb8f20ee51/src/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs#L792\r\n\r\nThe assertion is caused by a Task constructors calling an overloaded constructor, both of which call PossiblyCaptureContext in their body. Is this intentional? \r\n\r\nAdding the cast resolves the constructor to this one\r\nhttps://github.com/dotnet/corert/blob/becb08ebde12bf06c8223b9b2a6232fb8f20ee51/src/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs#L500\r\n\r\nThis seems to fix the problem without glaring regressions, including allowing `System.Threading.Tests` to run under Windows."},{"Id":"7619213059","Type":"PullRequestEvent","CreatedAt":"2018-05-02T20:26:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5768","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5768) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7618684995","Type":"PullRequestEvent","CreatedAt":"2018-05-02T18:39:39","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5768","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5768) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7620204696","Type":"PullRequestEvent","CreatedAt":"2018-05-03T01:07:41","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2210","RelatedDescription":"Opened pull request \"Defend against null package resolve\" (#2210) at dotnet/sdk","RelatedBody":"Fix #2044"},{"Id":"7620056249","Type":"PullRequestEvent","CreatedAt":"2018-05-03T00:08:31","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2209","RelatedDescription":"Merged pull request \"Update tests for updated stage 0 and netcoreapp2.2\" (#2209) at dotnet/sdk","RelatedBody":"I accidentally pushed [a commit](https://github.com/dotnet/sdk/commit/33d51eab4d1e8dccf90eec946cf311ef29e0857f) to master without using a PR.  This PR fixes tests that were broken because of this:\r\n\r\n- Update latest patch versions expected in tests to correspond with updated stage 0\r\n- Update test to allow targeting netcoreapp2.2\r\n\r\n"},{"Id":"7619843631","Type":"PullRequestEvent","CreatedAt":"2018-05-02T22:56:10","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2190","RelatedDescription":"Merged pull request \"Merge release/2.1.3xx to release/2.1.4xx\" (#2190) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into release/2.1.4xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-release/2.1.4xx\ngit reset --hard upstream/release/2.1.4xx\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-release/2.1.4xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7619236456","Type":"PullRequestEvent","CreatedAt":"2018-05-02T20:31:23","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2208","RelatedDescription":"Closed pull request \"WIP Dummy PR to run tests\" (#2208) at dotnet/sdk","RelatedBody":"I accidentally pushed [a commit](https://github.com/dotnet/sdk/commit/33d51eab4d1e8dccf90eec946cf311ef29e0857f) to master without using a PR.  This PR is just to trigger a test pass on those changes."},{"Id":"7619233815","Type":"PullRequestEvent","CreatedAt":"2018-05-02T20:30:50","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2209","RelatedDescription":"Opened pull request \"Update tests for updated stage 0 and netcoreapp2.2\" (#2209) at dotnet/sdk","RelatedBody":"I accidentally pushed [a commit](https://github.com/dotnet/sdk/commit/33d51eab4d1e8dccf90eec946cf311ef29e0857f) to master without using a PR.  This PR fixes tests that were broken because of this:\r\n\r\n- Update latest patch versions expected in tests to correspond with updated stage 0\r\n- Update test to allow targeting netcoreapp2.2\r\n\r\n"},{"Id":"7619079399","Type":"PullRequestEvent","CreatedAt":"2018-05-02T20:00:01","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2208","RelatedDescription":"Opened pull request \"Dummy PR to run tests\" (#2208) at dotnet/sdk","RelatedBody":"I accidentally pushed [a commit](https://github.com/dotnet/sdk/commit/33d51eab4d1e8dccf90eec946cf311ef29e0857f) to master without using a PR.  This PR is just to trigger a test pass on those changes."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"991311154747199488","CreatedAt":"2018-05-01T13:39:31+00:00","UserScreenname":"dotnet","Text":"Do you have questions about async and await in C#?  Join @csharpfritz and @billwagner at 10a ET / 7a PT / 14:00 UTC… https://t.co/Sdn4F5XeZ2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":64,"FavoriteCount":19,"RawContent":null},{"Id":"991060228220178432","CreatedAt":"2018-04-30T21:02:26+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.2 https://t.co/Tx658XoEZG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":538,"FavoriteCount":395,"RawContent":null},{"Id":"989532387775205376","CreatedAt":"2018-04-26T15:51:20+00:00","UserScreenname":"dotnet","Text":"Get the Azure Quick Start Guide for .NET Developers https://t.co/ALECzXryjk","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":49,"FavoriteCount":22,"RawContent":null},{"Id":"987375741204508673","CreatedAt":"2018-04-20T17:01:35+00:00","UserScreenname":"dotnet","Text":"Help us plan the future of .NET! https://t.co/R0QoZVvXx4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":125,"FavoriteCount":93,"RawContent":null},{"Id":"986692696507953152","CreatedAt":"2018-04-18T19:47:25+00:00","UserScreenname":"dotnet","Text":"Performance Improvements in .NET Core 2.1 https://t.co/6YMK8P99cZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":250,"FavoriteCount":153,"RawContent":null},{"Id":"986692437211987969","CreatedAt":"2018-04-18T19:46:23+00:00","UserScreenname":"dotnet","Text":"Announcing Visual Studio 2017 15.7 Preview 4 https://t.co/XYIzXNDMhn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":62,"FavoriteCount":44,"RawContent":null},{"Id":"986400394786914304","CreatedAt":"2018-04-18T00:25:55+00:00","UserScreenname":"dotnet","Text":".NET Core April 2018 Update https://t.co/PuT2Jc7GBy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":68,"FavoriteCount":33,"RawContent":null}]}},"RunOn":"2018-05-03T05:30:22.1126822Z","RunDurationInMilliseconds":7760}