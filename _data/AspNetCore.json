{"Data":{"Blog":{"FeedItems":[{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":36,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel. Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7516679237","Type":"IssuesEvent","CreatedAt":"2018-04-11T23:13:51","Actor":"HaoK","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3048","RelatedDescription":"Opened issue \"Ensure we have the proper set of overloads for OptionsBuilder\" (#3048) at aspnet/Home","RelatedBody":"We are potentially mission some overloads on the new OptionsBuilder.\r\n\r\nParticularly the Configuration ones added by Options.Configuration are most likely to be missing.\r\n\r\nWe had ones like options.Configure(config, o => { }) that would automatically hook up change tracking for example.\r\n\r\nWe should review these and see if we missed any others.\r\n\r\n@ajcvickers is this something we should do for 2.1?  Its not the end of the world if we add more overloads in 2.2\r\n\r\nFound as part of https://github.com/aspnet/MetaPackages/pull/263\r\n\r\n"},{"Id":"7515962392","Type":"IssuesEvent","CreatedAt":"2018-04-11T20:25:38","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3047","RelatedDescription":"Opened issue \"Http response JSON gets truncated\" (#3047) at aspnet/Home","RelatedBody":"_From @ayazaliuk101 on January 25, 2018 10:55_\n\nHi we are getting a strange behavior with ASP.net core 2. We have created a simple web API that returns a large amount of JSON data (3.7MB) read from a static JSON file asynchronously. We have found that when we apply load on this application hosted in Azure web apps (> 50 requests) some of the responses contains JSON that is truncated. i.e. we get a status of 200 however the JSON is malformed and truncated. Our original hypothesis we thought was due to the size of the data and and have implemented compression to dis/prove this, however this issue still persists. We have found that this issue does not occur when the size of the Json is less than 1.5 MB and can handle requests > 250.We have also found that when the server resources are increased, i.e. we scale up or out on Azure (from basic) it reduces the frequency it occurs but does not remove it altogether.\r\n\r\nTo add to the above, we have carried out a similar exercise using ASP.net MVC and we do not get this behavior. The MVC application was also hosted on the same web app.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/core#1240_"},{"Id":"7515140135","Type":"IssuesEvent","CreatedAt":"2018-04-11T17:49:54","Actor":"blowdart","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3046","RelatedDescription":"Closed issue \"[ASPNET Core 2.0]Authorization Policy ignoring Authentication\" (#3046) at aspnet/Home","RelatedBody":"I am trying to set up authentication and authorization but I am seeing unexpected behavior.\r\nI am running an ASPNET Core 2.0 app on windows (tried this on windows 10 and in a docker container  with the following image 2.0.6-sdk-2.1.104-nanoserver-sac2016) and I have my authentication and authorization set up like this:\r\nusing Nuget package: Microsoft.AspNetCore.All 2.0.0 and also tried with 2.0.6\r\n\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddAuthorization(options =>\r\n            {\r\n                options.AddPolicy(\"Test\", policy =>\r\n                {\r\n                    policy.Requirements.Add(new TestRequirement());\r\n                });\r\n            });\r\n\r\n            services.AddSingleton<IAuthorizationHandler, TestAuthorizationHandler>();\r\n\r\n            services.AddMvc();\r\n\r\n            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\r\n                .AddJwtBearer();\r\n\r\n            services.AddSingleton<IConfigureOptions<JwtBearerOptions>>(sp =>\r\n            {\r\n                return new ConfigureNamedOptions<JwtBearerOptions>(\r\n                    JwtBearerDefaults.AuthenticationScheme,\r\n                    options =>\r\n                    {\r\n                        options.TokenValidationParameters = new TokenValidationParameters\r\n                        {\r\n                            RequireSignedTokens = true,\r\n                            ValidateIssuer = false,\r\n                            ValidateAudience = false,\r\n                            ValidateLifetime = true,\r\n                            IssuerSigningKey = rsaSecurityKey\r\n                        };\r\n                    });\r\n            });\r\n        }\r\n\r\n        public void Configure(IServiceProvider sp, IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\r\n        {\r\n            loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\r\n\r\n            app.UseAuthentication();\r\n\r\n            app.UseMvc();\r\n        }\r\n\r\nMy requirement is empty and this is my authorization handler:\r\n\r\n    public class TestAuthorizationHandler : AuthorizationHandler<TestRequirement>\r\n    {\r\n        protected override Task HandleRequirementAsync(AuthorizationHandlerContext context,\r\n                                                       TestRequirement requirement)\r\n        {\r\n            context.Succeed(requirement);\r\n            return Task.CompletedTask;\r\n        }\r\n    }\r\n\r\nMy Controller get method:\r\n\r\n        [Authorize(Policy = \"Test\")]\r\n        [HttpGet]\r\n        [Route(\"Data\")]\r\n        public async Task<string> GetDataAsync()\r\n        {\r\n            return await Task.FromResult(\"data\");\r\n        }\r\n\r\nThe unexpected behavior:\r\n\r\nAuthentication is always ignored for that controller method, my authorization handler and controller are always reached, even if I don't supply an Authentication header or supply an invalid token.\r\n\r\nExpected behavior:\r\n\r\nAuthorization should use the supplied default scheme in AddAuthentication to challenge the Authentication and not allow these calls through unless Authentication was successful.\r\n\r\nWorkaround:\r\n\r\nAdd the default scheme directly to the policy and require the user to be authenticated\r\n\r\npolicy.AuthenticationSchemes.Add(JwtBearerDefaults.AuthenticationScheme);\r\npolicy.RequireAuthenticatedUser();\r\n\r\nWhen these are added I see the behavior I expect.\r\n\r\nAm I misunderstanding the expected flow? Is this the expected behavior and RequireAuthenticatedUser is needed explicitly to block unauthenticated requests to go through authorization?\r\n\r\n\r\n\r\n\r\n"},{"Id":"7514934804","Type":"IssuesEvent","CreatedAt":"2018-04-11T17:10:26","Actor":"allevyMS","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3046","RelatedDescription":"Opened issue \"Authorization Policy ignoring Authentication\" (#3046) at aspnet/Home","RelatedBody":"I am trying to set up authentication and authorization but I am seeing unexpected behavior.\r\nI am running an ASPNET Core 2.0 app on windows and I have my authentication and authorization set up like this:\r\n\r\npublic void ConfigureServices(IServiceCollection services)\r\n        {\r\n            // Add redis cache but inject our Counter decorator around it\r\n\r\n            services.AddAuthorization(options =>\r\n            {\r\n                options.AddPolicy(\"Test\", policy =>\r\n                {\r\n                    policy.Requirements.Add(new TestRequirement());\r\n                });\r\n            });\r\n\r\n            services.AddSingleton<IAuthorizationHandler, TestAuthorizationHandler>();\r\n\r\n            services.AddMvc();\r\n\r\n            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\r\n                .AddJwtBearer();\r\n\r\n            services.AddSingleton<IConfigureOptions<JwtBearerOptions>>(sp =>\r\n            {\r\n                return new ConfigureNamedOptions<JwtBearerOptions>(\r\n                    JwtBearerDefaults.AuthenticationScheme,\r\n                    options =>\r\n                    {\r\n                        options.TokenValidationParameters = new TokenValidationParameters\r\n                        {\r\n                            RequireSignedTokens = true,\r\n                            ValidateIssuer = false,\r\n                            ValidateAudience = false,\r\n                            ValidateLifetime = true,\r\n                            IssuerSigningKey = rsaSecurityKey\r\n                        };\r\n                    });\r\n            });\r\n        }\r\n\r\n        public void Configure(IServiceProvider sp, IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\r\n        {\r\n            loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\r\n\r\n            app.UseAuthentication();\r\n\r\n            app.UseMvc();\r\n        }\r\n\r\nMy requirement is empty and this is my authorization handler:\r\n\r\n    public class TestAuthorizationHandler : AuthorizationHandler<TestRequirement>\r\n    {\r\n        protected override Task HandleRequirementAsync(AuthorizationHandlerContext context,\r\n                                                       TestRequirement requirement)\r\n        {\r\n            context.Succeed(requirement);\r\n            return Task.CompletedTask;\r\n        }\r\n    }\r\n\r\nMy Controller get method:\r\n\r\n        [Authorize(Policy = \"Test\")]\r\n        [HttpGet]\r\n        [Route(\"Data\")]\r\n        public async Task<string> GetDataAsync()\r\n        {\r\n            return await Task.FromResult(\"data\");\r\n        }\r\n\r\nThe unexpected behavior:\r\n\r\nAuthentication is always ignored for that controller method, my authorization handler and controller are always reached, even if I don't supply an Authentication header or supply an invalid token.\r\n\r\nExpected behavior:\r\n\r\nAuthorization should use the supplied default scheme in AddAuthentication to challenge the Authentication and not allow these calls through unless Authentication was successful.\r\n\r\nWorkaround:\r\n\r\nAdd the default scheme directly to the policy and require the user to be authenticated\r\n\r\npolicy.AuthenticationSchemes.Add(JwtBearerDefaults.AuthenticationScheme);\r\npolicy.RequireAuthenticatedUser();\r\n\r\nWhen these are added I see the behavior I expect.\r\n\r\nAm I misunderstanding the expected flow? Is this the expected behavior and RequireAuthenticatedUser is needed explicitly to block unauthenticated requests to go through authorization?\r\n\r\n\r\n\r\n\r\n"},{"Id":"7514244671","Type":"IssuesEvent","CreatedAt":"2018-04-11T15:12:49","Actor":"jaygriggs","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3045","RelatedDescription":"Opened issue \"Visual Studio 2017 max-width:fit-content CSS Validation\" (#3045) at aspnet/Home","RelatedBody":"While creating a asp.net web application I noticed that this css is being marked as an invalid value.\r\n .LongevityTable {\r\n        max-width: fit-content;\r\n    }\r\n\r\nIt is certainly valid css as documented here\r\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/max-width\r\n\r\nI'm using Visual Studio 2017 Community"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7517618991","Type":"PullRequestEvent","CreatedAt":"2018-04-12T04:44:52","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1971","RelatedDescription":"Opened pull request \"Fix incorrect check for long poll and socket send requests\" (#1971) at aspnet/SignalR","RelatedBody":"https://github.com/aspnet/SignalR/issues/1883"},{"Id":"7517461648","Type":"PullRequestEvent","CreatedAt":"2018-04-12T03:42:43","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1970","RelatedDescription":"Opened pull request \"fix #1951 by transpiling to ES5\" (#1970) at aspnet/SignalR","RelatedBody":"I also added a folder for \"Consumption Tests\". This is a place where we can add some automation around consuming SignalR from various places.\r\n\r\nThe `react-app` folder has a test script that just installs `@aspnet/signalr` and `@aspnet/signalr-protocol-msgpack` and then runs `npm run build` (which is what fails in #1951). Before the changes I made to the `signalr` and `signalr-protocol-msgpack` `package.json` files, this test failed, and after, it passes.\r\n\r\nThe consumption tests are wired in to the `./build` script, but not in the `npm test` in `client\\ts` (since most people won't need to run this)\r\n\r\nI'm not 100% sold on the consumption test yet. Interested in others' opinion. If we decide not to do that, I can just trim this back to the actual change, to transpile our ESM version to ES5."},{"Id":"7517424062","Type":"PullRequestEvent","CreatedAt":"2018-04-12T03:29:18","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1969","RelatedDescription":"Merged pull request \"React to Kestrel changes\" (#1969) at aspnet/SignalR","RelatedBody":"https://github.com/aspnet/KestrelHttpServer/pull/2482"},{"Id":"7517418624","Type":"PullRequestEvent","CreatedAt":"2018-04-12T03:27:21","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1969","RelatedDescription":"Opened pull request \"React to Kestrel changes\" (#1969) at aspnet/SignalR","RelatedBody":""}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7516625454","Type":"PullRequestEvent","CreatedAt":"2018-04-11T22:57:12","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7626","RelatedDescription":"Merged pull request \"Use DependencyContext.CompileLibraries to determine dependency graph\" (#7626) at aspnet/Mvc","RelatedBody":"Fixes https://github.com/aspnet/Mvc/issues/7617"},{"Id":"7516621895","Type":"IssuesEvent","CreatedAt":"2018-04-11T22:56:04","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7632","RelatedDescription":"Opened issue \"Verify the fix for MVC.Testing incompatible with conventional routing in current MVC apps using the shared runtime\" (#7632) at aspnet/Mvc","RelatedBody":"Verifying that the changes here work E2E.\r\n\r\nOriginal issue: https://github.com/aspnet/Mvc/issues/7617"},{"Id":"7516515209","Type":"PullRequestEvent","CreatedAt":"2018-04-11T22:25:33","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7627","RelatedDescription":"Merged pull request \"Remove root directory customization options for Razor Pages areas\" (#7627) at aspnet/Mvc","RelatedBody":"Fixes #7608"},{"Id":"7516285830","Type":"IssuesEvent","CreatedAt":"2018-04-11T21:31:03","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7599","RelatedDescription":"Closed issue \"Classic Area Registration\" (#7599) at aspnet/Mvc","RelatedBody":"Am I right in thinking that the only way to register an area is to use the AreaAttribute? I used to be able to inherit from a class call AreaRegistration and call RegisterAllAreas(). Can I no longer do this? Do I have to remember to put an attribute at the top of my controller classes? If so, can anyone suggest a way of implementing a class that does what AreaRegistration used to? Or is there a compelling reason not to?\r\n\r\nthanks\r\nO"},{"Id":"7516193625","Type":"IssuesEvent","CreatedAt":"2018-04-11T21:11:34","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7577","RelatedDescription":"Closed issue \"Question about feature folders and serving static files inside them\" (#7577) at aspnet/Mvc","RelatedBody":"Hi,\r\nsince i started with mvc i've alwasy organized my code in feature folders and not in the standard MVC pattern, so for example something like this : \r\n![image](https://user-images.githubusercontent.com/1522516/38134468-87242c42-3413-11e8-9ecb-b70108121cfe.png)\r\n\r\nBefore aspnet core we could easely serve static files from the project root, now that the wwwroot is used i would like to understand what's the best way to achieve this goal.\r\n\r\nI configured the StaticFileMiddleware like the documentation suggests :\r\n\r\n```c#\r\n     app.UseStaticFiles(new StaticFileOptions\r\n{\r\n                FileProvider = new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), \"MyArea\")),\r\n                RequestPath = \"/MyArea\"\r\n            });\r\n```\r\n\r\nand i can serve static asset located inside the feature folder, **but the asp-append-version='true' tag helper options is not working,** like @DamianEdwards explained here https://github.com/aspnet/Mvc/issues/7459 .\r\n\r\nI experimented a bit with that concept and i tried removing the custom StaticFile configuration and implemented a custom PhysicalFileProvider.\r\n\r\n```c#\r\n   .ConfigureServices((ctx, services) =>\r\n                  {\r\n                      var myArea = new CustomPhysicalFileProvider(Directory.GetCurrentDirectory(), \"MyArea\");\r\n                      var compositeFp = new CompositeFileProvider(ctx.HostingEnvironment.WebRootFileProvider, myArea);\r\n                      ctx.HostingEnvironment.WebRootFileProvider = compositeFp;\r\n                  })\r\n```\r\n\r\nThe problem is that the standard CompositeFileProvider/PhysicalFileProvider works by merging all the folder like they where the same one and it \"loses\" the relative path \"MyArea\" while serving, for instance :\r\n\r\nConfigure 2  PhysicalFileProvider with those roots\r\nPhysicalFileProvider => \\wwwroot\\\r\nPhysicalFileProvider => \\MyArea\\resource.js\r\nand merge them with CompositeFileProvider\r\n\r\nGiven this phisical resource \\MyArea\\resource.js i have to use the following path in the script tag to make it work\r\n\r\n`<script src=\"~/resource.js\">`\r\n\r\n\r\ninstead of \r\n\r\n`<script src=\"~/MyArea/resource.js\">`\r\n\r\nThe PhysicalFileProvider basically checks if the request contains the relative subfolder \r\n\r\n```c#\r\n        public IFileInfo GetFileInfo(string subpath)\r\n        {\r\n            if (subpath.StartsWith(_relativeFolder))\r\n            {\r\n                var relative = subpath.Substring(_relativeFolder.Length);\r\n                return _p.GetFileInfo(relative);\r\n            }\r\n            else\r\n            {\r\n                return _p.GetFileInfo(subpath);\r\n            }\r\n        }\r\n```\r\n\r\nIs there a better approach to do this ? i should i just change all my scripts to use the relative path ?\r\nThanks\r\n\r\n[WebApplication1.zip](https://github.com/aspnet/Mvc/files/1863392/WebApplication1.zip)\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7517620689","Type":"IssuesEvent","CreatedAt":"2018-04-12T04:45:32","Actor":"danroth27","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1748","RelatedDescription":"Closed issue \"Can't scaffold identity in new project.\" (#1748) at aspnet/Identity","RelatedBody":"Using 2.1 Preview 2.\r\n\r\nFollowing directions from blog post, want to scaffold identity using the command\r\ndotnet aspnet-codegenerator identity -dc WebApplication1.Data.ApplicationDbContext\r\n\r\nI receive this error:\r\ndotnet : No executable found matching command \"dotnet-aspnet-codegenerator\"\r\n\r\nWhat does my csproj file need to look like to find this command? I've tried installing all sorts of packages and adding tools but can't get it to work. What's this supposed to look like?\r\n"},{"Id":"7517299178","Type":"IssuesEvent","CreatedAt":"2018-04-12T02:46:21","Actor":"thiennn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1751","RelatedDescription":"Opened issue \"Upgrade to Bootstrap 4\" (#1751) at aspnet/Identity","RelatedBody":"Bootstrap 4 has been released for a while. It would be nice if Identity UI support it by default"},{"Id":"7516886651","Type":"IssuesEvent","CreatedAt":"2018-04-12T00:19:24","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1750","RelatedDescription":"Opened issue \"Use partial tag helper in Identity UI\" (#1750) at aspnet/Identity","RelatedBody":"Use partial tag helper instead of @Html.Partial in Identity UI razor pages. \r\n\r\nEg:\r\nhttps://github.com/aspnet/Identity/blob/dev/src/UI/Areas/Identity/Pages/Account/Manage/Disable2fa.cshtml#L8"},{"Id":"7516705986","Type":"PullRequestEvent","CreatedAt":"2018-04-11T23:21:59","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1749","RelatedDescription":null,"RelatedBody":"* Add a test to validate that the Identity endpoints are not available when the default UI is not plugged in.\r\n* Remove IUserFactory<TUser> and UserFactory<TUser>\r\n* Update the testing infrastructure to newer bits from MVC.\r\n* Parameterize the testing infrastructure to support testing different user types.\r\n* Make EmailSender internal."},{"Id":"7516701605","Type":"PullRequestEvent","CreatedAt":"2018-04-11T23:20:33","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/pull/1749","RelatedDescription":"Closed pull request \"[Fixes #1742, #1722, #1706] Fixing multiple issues\" (#1749) at aspnet/Identity","RelatedBody":"* Add a test to validate that the Identity endpoints are not available when the default UI is not plugged in.\r\n* Remove IUserFactory<TUser> and UserFactory<TUser>\r\n* Update the testing infrastructure to newer bits from MVC.\r\n* Parameterize the testing infrastructure to support testing different user types.\r\n* Make EmailSender internal."}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7517408714","Type":"PullRequestEvent","CreatedAt":"2018-04-12T03:23:49","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2482","RelatedDescription":"Merged pull request \"Moved kestrel specific features into transport abstractions\" (#2482) at aspnet/KestrelHttpServer","RelatedBody":"Move `IApplicationTransportFeature` and `ITransportSchedulerFeature` to **Kestrel.Transport.Abstractions**. I didn't move the `IMemoryPoolFeature` yet because it may be important when creating new adapted pipes"},{"Id":"7516699057","Type":"PullRequestEvent","CreatedAt":"2018-04-11T23:19:48","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2483","RelatedDescription":"Opened pull request \" Avoid nullref in KestrelEventSource\" (#2483) at aspnet/KestrelHttpServer","RelatedBody":"#2331"},{"Id":"7516623140","Type":"PullRequestEvent","CreatedAt":"2018-04-11T22:56:26","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2478","RelatedDescription":"Merged pull request \"Flow the ConnectionContext to the SNI callback\" (#2478) at aspnet/KestrelHttpServer","RelatedBody":""},{"Id":"7516621878","Type":"PullRequestEvent","CreatedAt":"2018-04-11T22:56:04","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2482","RelatedDescription":"Opened pull request \"Moved kestrel specific features into transport abstractions\" (#2482) at aspnet/KestrelHttpServer","RelatedBody":"Move `IApplicationTransportFeature` and `ITransportSchedulerFeature` to **Kestrel.Transport.Abstractions**. I didn't move the `IMemoryPoolFeature` yet because it may be important when creating new adapted pipes"},{"Id":"7516618279","Type":"PullRequestEvent","CreatedAt":"2018-04-11T22:55:01","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2481","RelatedDescription":"Opened pull request \"Https handshake read-ahead to supress errors\" (#2481) at aspnet/KestrelHttpServer","RelatedBody":" #1853\r\n\r\nToo grose?\r\n\r\nPlan B, downgrade the original error to Debug."}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7517531001","Type":"IssuesEvent","CreatedAt":"2018-04-12T04:08:58","Actor":"los93sol","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2262","RelatedDescription":"Opened issue \"Precompiled Views Not Found\" (#2262) at aspnet/Razor","RelatedBody":"I'm doing something that I know is unsupported and attempting to host an ASP.NET Core MVC site within a UWP app.  I have Kestrel working, Routing is working and requests hit my controller, but I'm stuck when it comes to Razor.  I have to use views precompiled at build time to do this and I have the *.Views.dll assembly being generated, but I'm getting the following exception when it tries to find the view...\r\n\r\nSystem.InvalidOperationException: The view 'Index' was not found. The following locations were searched:\r\n/Views/Home/Index.cshtml\r\n/Views/Shared/Index.cshtml\r\n/Pages/Shared/Index.cshtml\r\n"},{"Id":"7516375157","Type":"IssuesEvent","CreatedAt":"2018-04-11T21:50:48","Actor":"mkArtakMSFT","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2252","RelatedDescription":"Closed issue \"Translate helpers to local functions to capture locals\" (#2252) at aspnet/Razor","RelatedBody":"Currently this is not valid because `@helper` creates a method,\r\n```cs\r\n@{\r\n  var local = false;\r\n}\r\n\r\n@helper Helper() {\r\n   if (local) { // ERROR\r\n   }\r\n}\r\n```\r\nWith local functions, local `local` will be in scope in the helper body."},{"Id":"7516360032","Type":"PullRequestEvent","CreatedAt":"2018-04-11T21:47:18","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2261","RelatedDescription":"Opened pull request \"Don't publish the refs directory when the app does not have any Razor…\" (#2261) at aspnet/Razor","RelatedBody":"… files"},{"Id":"7516230540","Type":"IssuesEvent","CreatedAt":"2018-04-11T21:19:23","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2188","RelatedDescription":"Closed issue \"Validate the Razor SDK doesn't barf on fsproj/vbproj\" (#2188) at aspnet/Razor","RelatedBody":"We need to validate that the Razor SDK doesn't try to compile your Razor files during the build when included in a vbproj or fsproj.\r\n\r\nWe have no expectation that the experience is particularly nice in these scenarios, but the Razor SDK's default settings shouldn't prevent your project from building."},{"Id":"7516067583","Type":"IssuesEvent","CreatedAt":"2018-04-11T20:46:25","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2259","RelatedDescription":"Closed issue \"PreserveCompilationReferences tracking issue\" (#2259) at aspnet/Razor","RelatedBody":""},{"Id":"7516067259","Type":"PullRequestEvent","CreatedAt":"2018-04-11T20:46:21","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/pull/2260","RelatedDescription":"Closed pull request \"Add support for PreserveCompilationReferences\" (#2260) at aspnet/Razor","RelatedBody":""}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7439234583","Type":"IssuesEvent","CreatedAt":"2018-03-27T05:23:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7438189808","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:00:08","Actor":"dvdobrovolskiy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Opened issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"983838325457829890","CreatedAt":"2018-04-10T22:45:10+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":6,"RawContent":null},{"Id":"983802600398049285","CreatedAt":"2018-04-10T20:23:12+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2 https://t.co/441EI8rRQL","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":10,"RawContent":null},{"Id":"981890668095332353","CreatedAt":"2018-04-05T13:45:52+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz live stream today to learn more about getting started with #ASP.NET Core. https://t.co/mkwxUOObrd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":7,"RawContent":null},{"Id":"981214732198674433","CreatedAt":"2018-04-03T16:59:56+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\n#ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/Tukk2JSsvC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":42,"FavoriteCount":16,"RawContent":null},{"Id":"981205689891803136","CreatedAt":"2018-04-03T16:24:01+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz for some #ASP.NET Core coding today, and ask questions during his live coding stream at 12:30… https://t.co/PCKhYbjIMP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":9,"RawContent":null},{"Id":"980945681794809856","CreatedAt":"2018-04-02T23:10:50+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/lCnzHFb8x9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":99,"FavoriteCount":56,"RawContent":null},{"Id":"979863409561812993","CreatedAt":"2018-03-30T23:30:16+00:00","UserScreenname":"aspnet","Text":"We just released some minor bug fixes to jquery-ajax-unobtrusive and jquery-validation-unobtrusive:… https://t.co/9P5vskn1i8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":13,"RawContent":null},{"Id":"978766397814710272","CreatedAt":"2018-03-27T22:51:08+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":7,"RawContent":null},{"Id":"978605317293576193","CreatedAt":"2018-03-27T12:11:03+00:00","UserScreenname":"aspnet","Text":"This will be a fun show that you won't want to miss if you're starting to lean #ASP.NET Core.  Jeff and Shayne are… https://t.co/MdzhQjXGY3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":47,"FavoriteCount":12,"RawContent":null},{"Id":"978387927041323008","CreatedAt":"2018-03-26T21:47:14+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":10,"RawContent":null},{"Id":"976910278083432449","CreatedAt":"2018-03-22T19:55:35+00:00","UserScreenname":"aspnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/NLDaIe6hpY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":159,"FavoriteCount":100,"RawContent":null},{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":14,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":4,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null}]}},"RunOn":"2018-04-12T05:30:10.6823861Z","RunDurationInMilliseconds":9420}