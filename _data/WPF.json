{"Data":{"GitHub":{"Issues":[{"Id":"452124853","IsPullRequest":false,"CreatedAt":"2019-06-05T02:49:40","Actor":"grubioe","Number":"859","RawContent":null,"Title":"NET Core WPF applications are not high DPI aware by default","State":"closed","Body":"Copied from VSO ID 860905\r\n\r\nAffected Branch: rel/d16.1 \r\nAffected Build:  Version 16.1.0 Preview 3.0 [28829.227.d16.1] + .NET Core SDK 3.0.100-preview5-011568\r\nAffected Product Language: C#\r\n\r\n**Steps to reproduce:**\r\n\r\n1. Create a new .NET Core WPF project.\r\n2. Open MainWindow.xaml in the designer.\r\n3. Drag a button control onto the window.  Note that the designer appears to be high-DPI aware as the button is easily readable.\r\n4. Run the application.\r\n\r\nExpected results:\r\nThe window should match what the designer displayed, namely an easy to read button.\r\n\r\nIt should look like this:\r\n![1](https://user-images.githubusercontent.com/49078227/58901159-74e6dc00-86b5-11e9-8a7e-3ef87d0701d5.png)\r\n\r\n\r\n\r\nActual results:\r\nThe window is small and the button has text that is very difficult to read.\r\n\r\nIt looks like this:\r\n![2](https://user-images.githubusercontent.com/49078227/58901170-7a442680-86b5-11e9-907e-93659f1b625b.png)\r\n\r\n\r\n\r\n\r\nWorkaround:\r\nAdd a \"app.manifest\" file to the project with the following contents:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<assembly manifestVersion=\"1.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n  <assemblyIdentity version=\"1.0.0.0\" name=\"foo\"/>\r\n\r\n  <application xmlns=\"urn:schemas-microsoft-com:asm.v3\">\r\n    <windowsSettings>\r\n      <dpiAwareness xmlns=\"http://schemas.microsoft.com/SMI/2016/WindowsSettings\">PerMonitor</dpiAwareness>\r\n      <dpiAware xmlns=\"http://schemas.microsoft.com/SMI/2005/WindowsSettings\">true</dpiAware>\r\n    </windowsSettings>\r\n  </application>\r\n\r\n</assembly>\r\n```\r\n\r\nIn project properties, change Application -> Icon and Manifest -> Manifest to `app.manifest`.\r\n\r\nBy default, the apphost has the same manifest that a .NET Framework application executable has (the one generated by the C# compiler).  However, the .NET Framework application starts high DPI aware.\r\n\r\nAlso, it's hard to see the difference from the screenshots as they're being scaled in the issue, but there's a night and day difference with and without the manifest workaround.\r\n","Url":"https://github.com/dotnet/wpf/issues/859","RelatedDescription":"Closed issue \"NET Core WPF applications are not high DPI aware by default\" (#859)"},{"Id":"452206252","IsPullRequest":true,"CreatedAt":"2019-06-05T00:41:31","Actor":"vatsan-madhavan","Number":"868","RawContent":null,"Title":"Support `Microsoft.NetCore.App.Wpf` and `Microsoft.NetCore.App.WinForms` profiles in `Microsoft.NET.Sdk.WidnowsDesktop` ","State":"closed","Body":"Fixes #866 \r\n\r\nRelated: [WindowsDesktop reference assembly split](https://github.com/dotnet/cli/issues/10536)\r\n\r\n| UseWPF  | UseWindowsForms  | FrameworkReference |\r\n| --- | --- | --- |\r\n| False | False  | *Error* (Will be addressed in #867)  |\r\n| True  | False   | `Microsoft.WindowsDesktop.App.WPF` |\r\n| False | True   | `Microsoft.WindowsDesktop.App.WindowsForms`   |\r\n| True | True    | `Microsoft.WindowsDesktop.App` | \r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/868","RelatedDescription":"Closed or merged PR \"Support `Microsoft.NetCore.App.Wpf` and `Microsoft.NetCore.App.WinForms` profiles in `Microsoft.NET.Sdk.WidnowsDesktop` \" (#868)"},{"Id":"452196078","IsPullRequest":false,"CreatedAt":"2019-06-05T00:41:31","Actor":"vatsan-madhavan","Number":"866","RawContent":null,"Title":"Support Microsoft.NetCore.App.Wpf and Microsoft.NetCore.App.WinForms profiles in Microsoft.NET.Sdk.WidnowsDesktop","State":"closed","Body":"Support `Microsoft.NetCore.App.Wpf` and `Microsoft.NetCore.App.WinForms` profiles in `Microsoft.NET.Sdk.WidnowsDesktop` when `UseWpf` and/or `UseWindowsForms` is `true`\r\n\r\nhttps://github.com/dotnet/sdk/pull/3259","Url":"https://github.com/dotnet/wpf/issues/866","RelatedDescription":"Closed issue \"Support Microsoft.NetCore.App.Wpf and Microsoft.NetCore.App.WinForms profiles in Microsoft.NET.Sdk.WidnowsDesktop\" (#866)"},{"Id":"452227217","IsPullRequest":true,"CreatedAt":"2019-06-04T22:00:27","Actor":"ojhad","Number":"869","RawContent":null,"Title":"Hollowed out public types extending from System.Security.Permissions types","State":"open","Body":"**Currently this PR does not include Type Forwarding of these types**\r\n\r\nPart of Issue #241 \r\nHollowing out public types that should be moved out of WPF to System.Security.Permissions.dll","Url":"https://github.com/dotnet/wpf/pull/869","RelatedDescription":"Open PR \"Hollowed out public types extending from System.Security.Permissions types\" (#869)"},{"Id":"452163210","IsPullRequest":true,"CreatedAt":"2019-06-04T21:08:43","Actor":"SamBent","Number":"862","RawContent":null,"Title":"Crash in DataGridItemAutomationPeer","State":"closed","Body":"VS 2017 and 2019 crash when\r\na. Automation is enabled (e.g. Narrator or Inspect are running)\r\nb. User clicks on the Text Editor\\C#\\Code Style\\Naming page in Tools\\Options\r\n(also other similar pages)\r\n\r\nThis is a regression in 4.8.  The bad pages contain a DataGrid whose cells contain a ComboBox, and whose virtualizing mode is Recycling\r\n\r\nFixes #860 ","Url":"https://github.com/dotnet/wpf/pull/862","RelatedDescription":"Closed or merged PR \"Crash in DataGridItemAutomationPeer\" (#862)"},{"Id":"452127683","IsPullRequest":false,"CreatedAt":"2019-06-04T21:08:43","Actor":"SamBent","Number":"860","RawContent":null,"Title":"Crash in VS opening 'Naming'","State":"closed","Body":"Port from .Net 4.8 bug.","Url":"https://github.com/dotnet/wpf/issues/860","RelatedDescription":"Closed issue \"Crash in VS opening 'Naming'\" (#860)"},{"Id":"452197715","IsPullRequest":false,"CreatedAt":"2019-06-04T20:41:01","Actor":"vatsan-madhavan","Number":"867","RawContent":null,"Title":"Show error when neither UseWpf nor UseWindowsForms is set to true","State":"open","Body":"When neither `UseWpf` nor `UseWindowsForms` is set to `true`, `Microsoft.NET.Sdk.WindowsDesktop` should show a (suppressible) error","Url":"https://github.com/dotnet/wpf/issues/867","RelatedDescription":"Open issue \"Show error when neither UseWpf nor UseWindowsForms is set to true\" (#867)"},{"Id":"452192218","IsPullRequest":false,"CreatedAt":"2019-06-04T20:28:38","Actor":"chabiss","Number":"865","RawContent":null,"Title":"Need to embed wpf loose theme files into their theme assemblies","State":"open","Body":"<!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n\r\nFor the XAML tooling experience for WPF NetCore needs to be decoupled from .Net Framework.  The themes loose file will need to be embeded into their theme assemblies so that XAML Designer can extract theme when creating a copy of a template.  \r\n\r\nBelow is the table of the loose file to be included into their respective theme assemblies\r\n\r\nXAML | Assembly\r\n-- | --\r\naero.normalcolor.xaml | PresentationFramework.Aero.dll\r\naero2.normalcolor.xaml | PresentationFramework.Aero2.dll\r\naerolite.normalcolor.xaml | PresentationFramework.AeroLite.dll\r\nclassic.xaml | PresentationFramework.Classic.dll\r\nluna.homestead.xaml | PresentationFramework.Luna.dll\r\nluna.metallic.xaml\r\nluna.normalcolor.xaml\r\nroyale.normalcolor.xaml | PresentationFramework.Royale.dll\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/865","RelatedDescription":"Open issue \"Need to embed wpf loose theme files into their theme assemblies\" (#865)"},{"Id":"452184060","IsPullRequest":true,"CreatedAt":"2019-06-04T20:23:48","Actor":"dotnet-maestro[bot]","Number":"864","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190604.3\r\n- **Date Produced**: 6/4/2019 1:14 PM\r\n- **Commit**: d6b2e22e267239ebf9baed3d164e938e4eea09c3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview7.19304.3\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/864","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#864)"},{"Id":"452183995","IsPullRequest":true,"CreatedAt":"2019-06-04T20:18:35","Actor":"dotnet-maestro[bot]","Number":"863","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190604.2\r\n- **Date Produced**: 6/4/2019 4:46 PM\r\n- **Commit**: f59e9a9dde144098bb58365f210dfdf4acc9e693\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview7.19304.2\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/863","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#863)"},{"Id":"452148238","IsPullRequest":false,"CreatedAt":"2019-06-04T18:40:42","Actor":"miguep","Number":"861","RawContent":null,"Title":"HierarchicalDataTemplate not working due to missing WPF extension assemblies from Preview 6 Build","State":"open","Body":"* .NET Core Version: Preview6\r\n* Windows version: Win10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n HierarchicalDataTemplate appears to not be working correctly, using the XAML below you should see a window with a hierarchical view, but instead only a textblock with \"System.Xml.XmlElement\". This is a regression from Preview5\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n A textblock with \"System.Xml.XmlElement\"\r\n\r\n **Expected behavior:**\r\n A hierarchical view\r\n\r\n **Minimal repro:**\r\n \r\n```xaml\r\n<Window x:Class=\"TreeViewRegression.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:TreeViewRegression\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\">\r\n\r\n    <Grid Background=\"{DynamicResource {x:Static SystemColors.ControlBrushKey}}\">\r\n        <Grid.Resources>\r\n            <XmlDataProvider x:Key=\"FoodDataSource\" XPath=\"FoodGroups\">\r\n                <x:XData>\r\n                    <FoodGroups xmlns=\"\">\r\n                        <FoodItem Name=\"Food\">\r\n                            <FoodItem Name=\"Fruit\">\r\n                                <FoodItem Name=\"Apple\" />\r\n                                <FoodItem Name=\"Citrus\">\r\n                                    <FoodItem Name=\"Orange\" />\r\n                                    <FoodItem Name=\"Lemon\" />\r\n                                </FoodItem>\r\n                            </FoodItem>\r\n                            <FoodItem Name=\"Bread\">\r\n                                <FoodItem Name=\"White\" />\r\n                                <FoodItem Name=\"Wheat\" />\r\n                            </FoodItem>\r\n                            <FoodItem Name=\"Dairy\">\r\n                                <FoodItem Name=\"Cheese\" />\r\n                                <FoodItem Name=\"Milk\" />\r\n                            </FoodItem>\r\n                            <FoodItem Name=\"Vegetable\">\r\n                                <FoodItem Name=\"Broccoli\" />\r\n                                <FoodItem Name=\"Lettuce\" />\r\n                            </FoodItem>\r\n                            <FoodItem Name=\"Meat\">\r\n                                <FoodItem Name=\"Beef\" />\r\n                                <FoodItem Name=\"Chicken\" />\r\n                            </FoodItem>\r\n                        </FoodItem>\r\n                    </FoodGroups>\r\n                </x:XData>\r\n            </XmlDataProvider>\r\n\r\n            <HierarchicalDataTemplate DataType=\"FoodItem\" ItemsSource=\"{Binding XPath=FoodItem}\">\r\n                <TextBlock Text=\"{Binding XPath=@Name}\" />\r\n            </HierarchicalDataTemplate>\r\n\r\n        </Grid.Resources>\r\n\r\n\r\n        <TreeView  Name=\"HierarchicalDB\" ItemsSource=\"{Binding Source={StaticResource FoodDataSource}, XPath=FoodItem}\" Margin=\"5\" />\r\n    </Grid>\r\n\r\n</Window>\r\n\r\n}\r\n```","Url":"https://github.com/dotnet/wpf/issues/861","RelatedDescription":"Open issue \"HierarchicalDataTemplate not working due to missing WPF extension assemblies from Preview 6 Build\" (#861)"},{"Id":"452121516","IsPullRequest":false,"CreatedAt":"2019-06-04T17:36:19","Actor":"grubioe","Number":"858","RawContent":null,"Title":"[netcore3] XamlToRtfWriter.WriteShapeImage fails on unseekable streams","State":"open","Body":"In PresentationFramework (XamlToRtfWriter.cs), the 'WriteShapeImage' function fails to due change in seekability of the zip streams returned in Read mode. The function reads from the same stream twice. This becomes a problem because after the first read, the stream becomes disposed, which causes an exception to be thrown when trying to set the position of the stream back to 0 in order to read the stream again. \r\n\r\nGithub issue #585  is related to the root cause \r\n\r\n**Steps to reproduce:**\r\n\r\n1. Run DigitalDocuments/...../DrtSequence\r\n2. Observe following exception thrown when trying to update the stream position in function 'ConvertToImageHexDataString'\r\n\r\nSystem.ObjectDisposedException: 'A stream from ZipArchiveEntry has been disposed.\r\n\r\nObject name: 'System.IO.Compression.SubReadStream'.'\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/858","RelatedDescription":"Open issue \"[netcore3] XamlToRtfWriter.WriteShapeImage fails on unseekable streams\" (#858)"},{"Id":"452120194","IsPullRequest":false,"CreatedAt":"2019-06-04T17:33:10","Actor":"grubioe","Number":"857","RawContent":null,"Title":"[netcore3] PresentationBuildTasks TaskHelper.cs contains #if false conditional code required for NETFX GAC cache","State":"open","Body":"Copied from VSO ID 840043\r\n\r\n[netcore3] PresentationBuildTasks TaskHelper.cs contains #if false conditional code required for NETFX GAC cache\r\n\r\nThis code should be re-enabled, only for NETFX. ","Url":"https://github.com/dotnet/wpf/issues/857","RelatedDescription":"Open issue \"[netcore3] PresentationBuildTasks TaskHelper.cs contains #if false conditional code required for NETFX GAC cache\" (#857)"},{"Id":"452119082","IsPullRequest":false,"CreatedAt":"2019-06-04T17:30:37","Actor":"grubioe","Number":"856","RawContent":null,"Title":"[Regression] AdvXamlFeatureTests.LocalAssembly_FriendWithKey and AttachablePropertyServicesTests.SerializeWithAttachedPropertyOnInstanceOfOwner are failing with latest shared framework","State":"open","Body":"Run Xaml DRT's on any recent build of the shared framework. \r\nObserve that AdvXamlFeatureTests.LocalAssembly_FriendWithKey and AttachablePropertyServicesTests.SerializeWithAttachedPropertyOnInstanceOfOwner are failing \r\n\r\nAttachablePropertyServicesTests.SerializeWithAttachedPropertyOnInstanceOfOwner is returning extra x:Null properties that are unexpected. This is not incorrect, but likely breaks compat (or even correctness). We need to understand what is happening, and how to get this back in line with our original expectations. \r\n\r\nAdvXamlFeatureTests.LocalAssembly_FriendWithKey failure reason is unclear. We should investigate whether it has anything to do with loading Xaml types from internalsvisibleto: assemblies. If this is broken, this is a very basic scenario that should be fixed. \r\n\r\nNote: When this is fixed, these tests should be re-enabled in dnceng\\dotnet-wpf-systemxaml-proto (or dnceng\\dotnet-wpf)","Url":"https://github.com/dotnet/wpf/issues/856","RelatedDescription":"Open issue \"[Regression] AdvXamlFeatureTests.LocalAssembly_FriendWithKey and AttachablePropertyServicesTests.SerializeWithAttachedPropertyOnInstanceOfOwner are failing with latest shared framework\" (#856)"},{"Id":"452116729","IsPullRequest":false,"CreatedAt":"2019-06-04T17:29:43","Actor":"grubioe","Number":"854","RawContent":null,"Title":"[netcore3] Create an overarching sln file for wpf.","State":"closed","Body":"Copied from VSO ID 662934","Url":"https://github.com/dotnet/wpf/issues/854","RelatedDescription":"Closed issue \"[netcore3] Create an overarching sln file for wpf.\" (#854)"},{"Id":"452117514","IsPullRequest":false,"CreatedAt":"2019-06-04T17:27:00","Actor":"grubioe","Number":"855","RawContent":null,"Title":"[netcore3] Fixup \"Source compilation required\" linker issues","State":"open","Body":"Copied from VSO ID 66416\r\n\r\nVarious projects will give \"Source compilation required\" style errors when building incrementally.\r\n\r\nWe should ensure that these go away as they will slow the build and have previously caused errors.\r\n\r\nCurrent projects that seem to have this issue are:\r\n\r\n\r\n\r\nmilctrl, wpfgfx, exts, PresentationNative, and PenIMC","Url":"https://github.com/dotnet/wpf/issues/855","RelatedDescription":"Open issue \"[netcore3] Fixup \"Source compilation required\" linker issues\" (#855)"},{"Id":"452116299","IsPullRequest":false,"CreatedAt":"2019-06-04T17:23:59","Actor":"grubioe","Number":"853","RawContent":null,"Title":"[netcore3] Remove dependencies on <wingdip.h> and WPF_REMOTE_SUPPRESS_DRAWING","State":"open","Body":"Copied from VSO ID: 660416\r\n\r\nCommit 1bb28a36\r\n\r\nAffects core\\uce\\{hwndtarget.cpp, precomp.hpp}","Url":"https://github.com/dotnet/wpf/issues/853","RelatedDescription":"Open issue \"[netcore3] Remove dependencies on <wingdip.h> and WPF_REMOTE_SUPPRESS_DRAWING\" (#853)"},{"Id":"452075683","IsPullRequest":false,"CreatedAt":"2019-06-04T16:58:56","Actor":"grubioe","Number":"841","RawContent":null,"Title":"Generate resources SRID's as constant key strings instead of properties that retrieve values","State":"closed","Body":"Copied from VSO ID 689973\r\n\r\nFound when running ValueSeriealizerTests, which are part of Xaml DRT's. \r\n\r\nresources are loaded in WPF like this:\r\n\r\n   SR.Get(SRID.ResourceName). \r\n\r\nThe current SRID system in .NET Core generates SRID's like this: \r\n\r\npublic string SRID.ResourceName\r\n{\r\n  get { ResourceManager.GetResource(\"ResourceName\"); }\r\n}\r\n\r\nWhen WPF applies SR.Get over this string, it fails (because it effectively results in SR.Get(SR.Get(\"ResourceName\")). \r\n\r\nWe need to go back to producing SRIDs that look like the .NET Framework codebase, which look like this:\r\n\r\npublic const string SRID.ResourceName = \"ResourceName\". \r\n\r\nThere are about 7500 places in WPF where we have code that depends on SRID lookups. Without this fix, we will have unpredictable behavior in all of those places. \r\n","Url":"https://github.com/dotnet/wpf/issues/841","RelatedDescription":"Closed issue \"Generate resources SRID's as constant key strings instead of properties that retrieve values\" (#841)"},{"Id":"452081891","IsPullRequest":false,"CreatedAt":"2019-06-04T16:57:21","Actor":"grubioe","Number":"843","RawContent":null,"Title":"Remove vcruntime140.dll dependency from PresentationCore.dll","State":"closed","Body":"Copied from VSO ID 725939\r\n\r\n**Initial Research**\r\n\r\nFrom @rladuca \r\nAttached Loader Snaps and Stack from PCore\r\n[pcorestack.txt](https://github.com/dotnet/wpf/files/3253356/pcorestack.txt)\r\n[pcoresnap.txt](https://github.com/dotnet/wpf/files/3253357/pcoresnap.txt)\r\n\r\nFrom @ericstj \r\n took a look at this.\r\n\r\nPresentationCore itself is PInvoking into VCRuntime140.dll:\r\n<img width=\"287\" alt=\"fd0e81ef-31d1-4487-9017-cb900b1df099\" src=\"https://user-images.githubusercontent.com/49078227/58894715-5c6fc500-86a7-11e9-9d69-c4d4c92a8b80.png\">\r\n\r\n \r\n\r\nLooking through the IL of the PresentationCore.dll I see this is coming from the following 3 PInvokes:\r\n\r\n```\r\n.method assembly static pinvokeimpl(\"VCRUNTIME140.dll\" lasterr cdecl)\r\n\r\n        void* modopt([mscorlib]System.Runtime.CompilerServices.CallConvCdecl)\r\n\r\n        memmove(void* A_0,\r\n\r\n                void modopt([mscorlib]System.Runtime.CompilerServices.IsConst)* A_1,\r\n\r\n                uint64 A_2) cil managed preservesig\r\n\r\n{\r\n\r\n  .custom instance void [mscorlib]System.Security.SuppressUnmanagedCodeSecurityAttribute::.ctor() = ( 01 00 00 00 )\r\n\r\n}\r\n\r\n.method assembly static pinvokeimpl(\"VCRUNTIME140.dll\" lasterr cdecl)\r\n\r\n        int32 modopt([mscorlib]System.Runtime.CompilerServices.CallConvCdecl)\r\n\r\n        __FrameUnwindFilter(valuetype _EXCEPTION_POINTERS* A_0) cil managed preservesig\r\n\r\n{\r\n\r\n  .custom instance void [mscorlib]System.Security.SuppressUnmanagedCodeSecurityAttribute::.ctor() = ( 01 00 00 00 )\r\n\r\n}\r\n\r\n.method assembly static pinvokeimpl(\"VCRUNTIME140.dll\" lasterr cdecl)\r\n\r\n        void modopt([mscorlib]System.Runtime.CompilerServices.CallConvCdecl)\r\n\r\n        __std_type_info_destroy_list(valuetype __type_info_node* A_0) cil managed preservesig\r\n\r\n{\r\n\r\n  .custom instance void [mscorlib]System.Security.SuppressUnmanagedCodeSecurityAttribute::.ctor() = ( 01 00 00 00 )\r\n\r\n}\r\n```\r\n\r\nThese appear to be added by the C++ linker.  I found that all these exports exist on ucrtbase.dll, which is where our native code will call.  We should investigate if there is a setting / lib that will link these to ucrtbase.dll instead of VCRuntime140.dll\r\n","Url":"https://github.com/dotnet/wpf/issues/843","RelatedDescription":"Closed issue \"Remove vcruntime140.dll dependency from PresentationCore.dll\" (#843)"},{"Id":"452091040","IsPullRequest":false,"CreatedAt":"2019-06-04T16:23:23","Actor":"grubioe","Number":"852","RawContent":null,"Title":"[netcore3] Can shared\\tracing\\resources\\*.bin be removed and converted to a build time task that generates these *binary* resources dynamically?","State":"open","Body":"Copied from VSO ID 659999\r\n\r\nshared\\tracing\\resources\\*.bin are binary files\r\nDo not check in binaries\r\n\r\nThese can be generated dynamically. Do so. \r\n","Url":"https://github.com/dotnet/wpf/issues/852","RelatedDescription":"Open issue \"[netcore3] Can shared\\tracing\\resources\\*.bin be removed and converted to a build time task that generates these *binary* resources dynamically?\" (#852)"},{"Id":"452090188","IsPullRequest":false,"CreatedAt":"2019-06-04T16:21:33","Actor":"grubioe","Number":"851","RawContent":null,"Title":"[netcore3] Graphics\\shared\\debug\\DebugDll (PresentationDebug.dll) is not buildable in NetFxDev1 or in .NET Core 3.","State":"open","Body":"Copied from VSO ID: 659991\r\n\r\nPresentationDebug.dll is not buildable today. \r\n\r\n1. In NetFxDev1, the reasons are minor (I think)\r\n2. In Net Core 3, mapicode.h is missing. There are may other reasons, including #1\r\n\r\nWe should resolve both, because PresentationDebug.dll is used in tests (including, I think, in some DRT's). It may not be used actively today, but clearly, it was designed with DRTs in mind. \r\n","Url":"https://github.com/dotnet/wpf/issues/851","RelatedDescription":"Open issue \"[netcore3] Graphics\\shared\\debug\\DebugDll (PresentationDebug.dll) is not buildable in NetFxDev1 or in .NET Core 3.\" (#851)"},{"Id":"452089375","IsPullRequest":false,"CreatedAt":"2019-06-04T16:19:47","Actor":"grubioe","Number":"850","RawContent":null,"Title":"ShaderGen.exe does not compile in NetFxDev1. Fixup and then port to netcore3","State":"open","Body":"Copied from VSO ID 659878\r\n\r\nGraphics\\core\\hw\\shaders\\shadergen\\shadergen.nativeproj does not compile today. This was never fixed up after we broke our dependency from D3DX9.lib. \r\n\r\nFix this and make it build in NetFxDev1 and also in NetCore3","Url":"https://github.com/dotnet/wpf/issues/850","RelatedDescription":"Open issue \"ShaderGen.exe does not compile in NetFxDev1. Fixup and then port to netcore3\" (#850)"},{"Id":"452088744","IsPullRequest":false,"CreatedAt":"2019-06-04T16:18:14","Actor":"grubioe","Number":"849","RawContent":null,"Title":"[netcore3] Ensure theme building works properly on netcore3","State":"open","Body":"Copied from VSO ID 653435\r\n\r\nThe current theme setup in NetCore3 contains separate directories per theme \"PresentationFramework-{ThemeName}\".\r\n\r\nIn these directories under the theme directory is the generated output.  At current, this is copied from the latest output in netfxdev1 and there is no generation step.\r\n\r\nRebuild the generation step using the shared XAML files in Shared/Themes/XAML in order to ensure the themes are building properly.\r\n\r\nThis is potentially to be done via T4, but may require re-use of the old Perl scripts if T4 proves prohibitive.","Url":"https://github.com/dotnet/wpf/issues/849","RelatedDescription":"Open issue \"[netcore3] Ensure theme building works properly on netcore3\" (#849)"},{"Id":"452087355","IsPullRequest":false,"CreatedAt":"2019-06-04T16:15:05","Actor":"grubioe","Number":"848","RawContent":null,"Title":"2D test failing due to change in GetHashCode in Core 3","State":"open","Body":"Copied from VSO ID: 803447\r\n\r\nTest:\r\n\r\n```\r\nName=\"Color API Test\" Priority=\"1\" Area=\"2D\" SubArea=\"API Tests\"\r\n```\r\n\r\nFails due to a change in GetHashCode from corefx. What the test code is doing is generating 2 different colors and verifying that the resulting hash codes are not equal, the hashcode is calculated from System.Windows.Media.Color by overriding GetHashCode:\r\n\r\n        public override int GetHashCode()\r\n        {​\r\n            return this.scRgbColor.GetHashCode(); //^this.context.GetHashCode();​\r\n        }\r\n\r\nwhich essentially only returns the hashcode from its internal struct which is defined as:\r\n\r\n       private struct MILColor\r\n        {​\r\n            public byte a, r, g, b;​\r\n        }\r\n\r\nin Framework different values for a,r,g,b would result in a different HashCode in Core it seems only the first value is considered for HashCode calculation, our test has the same first value so the hash code is the same.\r\n\r\nAs per corefx recommendation we should override and implement a correct HashCode mechanism for our 4 floats in MILColor, ideally mirroring what Framework used to do","Url":"https://github.com/dotnet/wpf/issues/848","RelatedDescription":"Open issue \"2D test failing due to change in GetHashCode in Core 3\" (#848)"},{"Id":"452086540","IsPullRequest":false,"CreatedAt":"2019-06-04T16:13:16","Actor":"grubioe","Number":"847","RawContent":null,"Title":"[netcore3] Improve Package generation/nugetizing documentation/README","State":"open","Body":"Copied from VSO ID 779805","Url":"https://github.com/dotnet/wpf/issues/847","RelatedDescription":"Open issue \"[netcore3] Improve Package generation/nugetizing documentation/README\" (#847)"},{"Id":"452085246","IsPullRequest":false,"CreatedAt":"2019-06-04T16:10:30","Actor":"grubioe","Number":"846","RawContent":null,"Title":"[netcore3] Update various native DLL references/PInvokes/Build steps to use T4 templates to generate binary names","State":"open","Body":"Currently, native binaries need many changes when their names change.  This includes PInvokes, def files, SxS manifest files, and so on.\r\n\r\nAll of these should be updated so that they are automatically generated based on the current suffix and the set DLL prefix name for that DLL.  This ensures that if we change the suffix, all appropriate changes in the code base are automatic and complete.","Url":"https://github.com/dotnet/wpf/issues/846","RelatedDescription":"Open issue \"[netcore3] Update various native DLL references/PInvokes/Build steps to use T4 templates to generate binary names\" (#846)"},{"Id":"452084446","IsPullRequest":false,"CreatedAt":"2019-06-04T16:08:49","Actor":"grubioe","Number":"845","RawContent":null,"Title":"[netcore3] Ensure that def files are updated via T4 and not the  pre-processor.","State":"open","Body":"Copied from VSO ID 672799\r\n\r\nCurrently, def files are pre-processed to remove comments and also replace lib names with the correct suffixes.  Remove GenerateModuleDefinitionFile.targets and replace this with T4 templates that do the appropriate generation.","Url":"https://github.com/dotnet/wpf/issues/845","RelatedDescription":"Open issue \"[netcore3] Ensure that def files are updated via T4 and not the  pre-processor.\" (#845)"},{"Id":"452082977","IsPullRequest":false,"CreatedAt":"2019-06-04T16:05:41","Actor":"grubioe","Number":"844","RawContent":null,"Title":"[netcore3] graphics\\include - use a build task to replace perl script","State":"open","Body":"Copied from VSO ID 657639","Url":"https://github.com/dotnet/wpf/issues/844","RelatedDescription":"Open issue \"[netcore3] graphics\\include - use a build task to replace perl script\" (#844)"},{"Id":"452079078","IsPullRequest":false,"CreatedAt":"2019-06-04T15:57:47","Actor":"grubioe","Number":"842","RawContent":null,"Title":"clr20r3: CLR_EXCEPTION_80131623_PresentationFramework.dll!System.Windows.Controls.TextBoxView.GetLineIndexFromOffset","State":"open","Body":"Copied from VSO ID:  845615\r\n\r\nSource Watson\r\n\r\n**Call Stack**\r\nThe call stack provided below is only a SAMPLE. Please use the cab search link above to obtain latest cabs and call stacks.\r\n\r\n1. WindowsBase.ni!MS.Internal.Invariant.FailFast in Invariant.cs\r\n2. at PresentationFramework.ni!System.Windows.Controls.TextBoxView.GetLineIndexFromOffset in TextBoxView.cs\r\n3. at PresentationFramework.ni!System.Windows.Controls.TextBoxView.HandleTextSelectionHighlightChange in TextBoxView.cs\r\n4. at PresentationFramework.ni!System.Windows.Controls.TextBoxView.OnHighlightChanged in TextBoxView.cs\r\n5. at PresentationFramework.ni!System.Windows.Documents.Highlights.OnLayerChanged in Highlights.cs\r\n6. at PresentationFramework.ni!System.Windows.Documents.TextSelectionHighlightLayer.InternalOnSelectionChanged in TextSelectionHighlightLayer.cs\r\n7. at PresentationFramework.ni!System.Windows.Documents.TextSelectionHighlightLayer.OnSelectionChanged in TextSelectionHighlightLayer.cs\r\n8. at PresentationFramework.ni!System.Windows.Documents.TextRange.System.Windows.Documents.ITextRange.FireChanged in TextRange.cs\r\n9. at PresentationFramework.ni!System.Windows.Documents.TextSelection.System.Windows.Documents.ITextRange.NotifyChanged in TextSelection.cs\r\n10. at PresentationFramework.ni!System.Windows.Documents.TextRangeBase.EndChange in TextRangeBase.cs\r\n11. at PresentationFramework.ni!System.Windows.Documents.TextRange.System.Windows.Documents.ITextRange.EndChange in TextRange.cs\r\n12. at PresentationFramework.ni!System.Windows.Documents.TextEditor.Undo in TextEditor.cs\r\n13. at PresentationFramework.ni!System.Windows.Documents.TextEditor.OnUndo in TextEditor.cs\r\n14. at PresentationCore.ni!System.Windows.Input.CommandBinding.OnExecuted in CommandBinding.cs\r\n15. at PresentationCore.ni!System.Windows.Input.CommandManager.ExecuteCommandBinding in CommandManager.cs\r\n16. at PresentationCore.ni!System.Windows.Input.CommandManager.FindCommandBinding in CommandManager.cs\r\n17. at PresentationCore.ni!System.Windows.Input.CommandManager.OnExecuted in CommandManager.cs\r\n18. at PresentationCore.ni!System.Windows.UIElement.OnExecutedThunk in UIElement.cs\r\n19. at PresentationCore.ni!System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler in ExecutedRoutedEventArgs.cs\r\n20. at PresentationCore.ni!System.Windows.RoutedEventArgs.InvokeHandler in RoutedEventArgs.cs\r\n21. at PresentationCore.ni!System.Windows.RoutedEventHandlerInfo.InvokeHandler in RoutedEventHandlerInfo.cs\r\n22. at PresentationCore.ni!System.Windows.EventRoute.InvokeHandlersImpl in EventRoute.cs\r\n23. at PresentationCore.ni!System.Windows.UIElement.RaiseEventImpl in UIElement.cs\r\n24. at PresentationCore.ni!System.Windows.UIElement.RaiseTrustedEvent in UIElement.cs\r\n25. at PresentationCore.ni!System.Windows.UIElement.RaiseEvent in UIElement.cs\r\n26. at PresentationCore.ni!System.Windows.Input.RoutedCommand.ExecuteImpl in RoutedCommand.cs\r\n27. at PresentationCore.ni!System.Windows.Input.RoutedCommand.ExecuteCore in RoutedCommand.cs\r\n28. at PresentationCore.ni!System.Windows.Input.CommandManager.TranslateInput in CommandManager.cs\r\n29. at PresentationCore.ni!System.Windows.UIElement.OnKeyDownThunk in UIElement.cs\r\n30. at PresentationCore.ni!System.Windows.Input.KeyEventArgs.InvokeEventHandler in KeyEventArgs.cs\r\n31. at PresentationCore.ni!System.Windows.RoutedEventArgs.InvokeHandler in RoutedEventArgs.cs\r\n32. at PresentationCore.ni!System.Windows.RoutedEventHandlerInfo.InvokeHandler in RoutedEventHandlerInfo.cs\r\n33. at PresentationCore.ni!System.Windows.EventRoute.InvokeHandlersImpl in EventRoute.cs\r\n34. at PresentationCore.ni!System.Windows.UIElement.RaiseEventImpl in UIElement.cs\r\n35. at PresentationCore.ni!System.Windows.UIElement.RaiseTrustedEvent in UIElement.cs\r\n36. at PresentationCore.ni!System.Windows.UIElement.RaiseEvent in UIElement.cs\r\n37. at PresentationCore.ni!System.Windows.Input.InputManager.ProcessStagingArea in InputManager.cs\r\n38. at PresentationCore.ni!System.Windows.Input.InputManager.ProcessInput in InputManager.cs\r\n39. at PresentationCore.ni!System.Windows.Input.InputProviderSite.ReportInput in InputProviderSite.cs\r\n40. at PresentationCore.ni!System.Windows.Interop.HwndKeyboardInputProvider.ReportInput in HwndKeyboardInputProvider.cs\r\n41. at PresentationCore.ni!System.Windows.Interop.HwndKeyboardInputProvider.ProcessKeyAction in HwndKeyboardInputProvider.cs\r\n42. at PresentationCore.ni!System.Windows.Interop.HwndSource.CriticalTranslateAccelerator in HwndSource.cs\r\n43. at PresentationCore.ni!System.Windows.Interop.HwndSource.OnPreprocessMessage in HwndSource.cs\r\n44. at WindowsBase.ni!System.Windows.Threading.ExceptionWrapper.InternalRealCall in ExceptionWrapper.cs\r\n45. at WindowsBase.ni!System.Windows.Threading.ExceptionWrapper.TryCatchWhen in ExceptionWrapper.cs\r\n46. at WindowsBase.ni!System.Windows.Threading.Dispatcher.LegacyInvokeImpl in Dispatcher.cs\r\n47. at WindowsBase.ni!System.Windows.Threading.Dispatcher.Invoke in Dispatcher.cs\r\n48. at PresentationCore.ni!System.Windows.Interop.HwndSource.OnPreprocessMessageThunk in HwndSource.cs\r\n49. at PresentationCore.ni!System.Windows.Interop.HwndSource in HwndSource.cs\r\n50. at WindowsBase.ni!System.Windows.Interop.ComponentDispatcherThread.RaiseThreadMessage in ComponentDispatcherThread.cs\r\n51. at Microsoft.VisualStudio.Platform.WindowManagement.ni!Microsoft.VisualStudio.Platform.WindowManagement.WindowManagerService.PreTranslateInput in WindowManagerService.cs\r\n52. at Microsoft.VisualStudio.Platform.WindowManagement.ni!DomainNeutralILStubClass.IL_STUB_COMtoCLR\r\n\r\n**Initial research:**\r\nFrom basic code inspection it looks like WPF gets into a state where there is a highlight for text selection that specifies an offset that is outside of the line metrics.  Perhaps something is being done on an event handler that modifies the text or the text selection and that is causing the mismatch.  In any case, we can guard against this relatively simply.\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/842","RelatedDescription":"Open issue \"clr20r3: CLR_EXCEPTION_80131623_PresentationFramework.dll!System.Windows.Controls.TextBoxView.GetLineIndexFromOffset\" (#842)"},{"Id":"452074541","IsPullRequest":false,"CreatedAt":"2019-06-04T15:48:47","Actor":"grubioe","Number":"840","RawContent":null,"Title":"nlglib.cpp loads NaturalLanguage6.dll via LoadLibrary","State":"open","Body":"Copied from VSO ID: 669072\r\n\r\nnlglib.cpp is loading NaturalLanguage6 via LoadLibrary.\r\n\r\nWe should investigate if this particular LoadLibrary call is reasonable to leave in. ","Url":"https://github.com/dotnet/wpf/issues/840","RelatedDescription":"Open issue \"nlglib.cpp loads NaturalLanguage6.dll via LoadLibrary\" (#840)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-06-05T05:30:55.4714246Z","RunDurationInMilliseconds":1181}