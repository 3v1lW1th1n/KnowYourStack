{"Data":{"GitHub":{"Issues":[{"Id":"336826321","IsPullRequest":true,"CreatedAt":"2018-06-29T00:47:12","Actor":"codemzs","Number":"452","RawContent":null,"Title":"Update documentation for LightGBM and add missing binary references to console app.","State":"open","Body":"fixes #450 \r\nfixes #451 ","Url":"https://github.com/dotnet/machinelearning/pull/452","RelatedDescription":"Open PR \"Update documentation for LightGBM and add missing binary references to console app.\" (#452)"},{"Id":"336826111","IsPullRequest":false,"CreatedAt":"2018-06-29T00:45:36","Actor":"codemzs","Number":"451","RawContent":null,"Title":"Console dll is missing references to binaries of learners/transforms and native code.","State":"open","Body":"Console dll allows ML.NET pipelines to be created and executed via command line. It is currently missing references to dlls of some learners, transforms and native code. ","Url":"https://github.com/dotnet/machinelearning/issues/451","RelatedDescription":"Open issue \"Console dll is missing references to binaries of learners/transforms and native code.\" (#451)"},{"Id":"336825851","IsPullRequest":false,"CreatedAt":"2018-06-29T00:43:39","Actor":"codemzs","Number":"450","RawContent":null,"Title":"Update LightGBM API documentation.","State":"open","Body":"LightGBM APIs require Micorosoft.ML.LightGBM nuget and this information needs to include in the documentation.","Url":"https://github.com/dotnet/machinelearning/issues/450","RelatedDescription":"Open issue \"Update LightGBM API documentation.\" (#450)"},{"Id":"336825011","IsPullRequest":true,"CreatedAt":"2018-06-29T00:38:12","Actor":"Ivanidzo4ka","Number":"449","RawContent":null,"Title":"WIP humble attemtp to setup vector size for data in runtime.","State":"open","Body":"I don't have any intent of checking this in in current state.\r\nThis is prototype for #164.\r\nDoesn't contain proper xml comments/ code cleaning.\r\nMain purpose of this PR is to gain feedback regarding mechanism of specifying vector sizes for type.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/449","RelatedDescription":"Open PR \"WIP humble attemtp to setup vector size for data in runtime.\" (#449)"},{"Id":"336819879","IsPullRequest":true,"CreatedAt":"2018-06-29T00:05:37","Actor":"dan-drews","Number":"448","RawContent":null,"Title":"Add clarity to documentation on ColumnConcatenator","State":"open","Body":"Several of the [sample projects](https://github.com/dotnet/machinelearning-samples/) use more than 2 source columns in the column concatenator. In order to clarify, I updated all locations of the phrase \"Concatenates two columns of the same item type.\" to be \"Concatenates two or more columns of the same item type.\"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/448","RelatedDescription":"Open PR \"Add clarity to documentation on ColumnConcatenator\" (#448)"},{"Id":"336778768","IsPullRequest":true,"CreatedAt":"2018-06-28T21:01:45","Actor":"Ivanidzo4ka","Number":"447","RawContent":null,"Title":"Add more documentation for ova","State":"open","Body":"Provides more clear documentation for OneVersusAll learner.","Url":"https://github.com/dotnet/machinelearning/pull/447","RelatedDescription":"Open PR \"Add more documentation for ova\" (#447)"},{"Id":"336719293","IsPullRequest":true,"CreatedAt":"2018-06-28T17:52:19","Actor":"TomFinley","Number":"446","RawContent":null,"Title":"[WIP] Normalization API helpers","State":"open","Body":"In which I introduce some helpers for normalization, and generally try to clean up the code-base. Addresses #433 . Hopefully will be used in #424, though I've changed the code here to use some of it where it made sense.\r\n\r\n* The `Microsoft.ML.Data` transform had a \"hidden\" dependency on `Microsoft.ML.Transform` project via dependency injection, for its existing \"helper\" for normalization (the console-app centric version). This has been resolved and replaced with direct instantiation. It required moving the normalizer files, however.\r\n\r\n* Introduction of helpers on `NormalizeTransform` for API-centric operations. (Not necessarily useful directly for console-application/GUI usage.)\r\n\r\n* Some documentation changes on `RoleMappedSchema` and `RoleMappedData`, though more non-cosmetic changes I'd expected would come with #445 .","Url":"https://github.com/dotnet/machinelearning/pull/446","RelatedDescription":"Open PR \"[WIP] Normalization API helpers\" (#446)"},{"Id":"336715723","IsPullRequest":false,"CreatedAt":"2018-06-28T17:40:23","Actor":"TomFinley","Number":"445","RawContent":null,"Title":"Direct API: RoleMappedSchema/Data Cleanup, Improvement","State":"open","Body":"Another followup to #371, in which we discuss changes to `RoleMappedSchema` and `RoleMappedData` to make them less idiosyncratic.\r\n\r\n`RoleMappedSchema` and `RoleMappedData` are structures that solve the following problem: Once you create a pipeline, before you feed it to an `ITrainer` or similar structure, you to have some mechanism to communicate to consumers of that pipeline, what all the columns were actually for... e.g., which column(s) were feature columns, which the label, and so on. (Before this structure existed, our \"solution\" to this was that every component consumed an `IDataView` directly and had configurable options for someone to declare which was which. This is good in that each trainer had the chance to be explicit about what it wanted, but still was somewhat troublesome.)\r\n\r\nSo that is all fine, more or less. And, I'd say on the whole it is a pretty good class, insofar that it seems to have worked well for its purpose. However there are wrinkles we probably ought to clean up.\r\n\r\nNearly all architecture effort went into making it easy to consume, as opposed to being easy or sensible to create. Previously, this made sense, since it was only instantiated in a handful of places, and used in hundreds of places. With API usage, the situation is reversed: we expect everyone to create it, and there will be \"only\" hundreds of consumers.\r\n\r\n* On that subject, creation is somewhat odd: there are `Create` and `CreateOpt` methods, as opposed to how most people would imagine an object is created, through an actual constructor (maybe with a `bool opt = false` parameter.)\r\n\r\n* \"Reapplication\" of an existing role-mapping to new data is a common operation performed in the code-base, yet there is no convenience for it, and it's something we'd want people to be able to do relatively easily. (E.g., when applying caching, for example.)\r\n\r\n* The common convenience helpers for the most common cases of creating `RoleMappedData` exist (e.g., \"these are my features, these are my labels) exist in a `TrainUtils` class. This makes them impossible to discover unless you know where to look. Probably the easiest to discover place to have these conveniences would be on the classes themselves. (This would also be a start at cleaning up `TrainUtils`, which is basically a haphazard bag of vaguely useful things.)\r\n\r\n* General cleanup of the code. A relic from a bygone time, `Id`, was never removed, despite being irrelevant and never used any more. It's been years since it was replaced with ids on `IRowCursor` directly. Also a fair amount of code exists in the class to detect conditions that cannot possibly happen.","Url":"https://github.com/dotnet/machinelearning/issues/445","RelatedDescription":"Open issue \"Direct API: RoleMappedSchema/Data Cleanup, Improvement\" (#445)"},{"Id":"336335195","IsPullRequest":true,"CreatedAt":"2018-06-27T21:41:52","Actor":"yaeldekel","Number":"437","RawContent":null,"Title":"Fix bug #435.","State":"closed","Body":"When combining per-instance data views, key columns with text key values should be handled only once.\r\nFixes #435 .","Url":"https://github.com/dotnet/machinelearning/pull/437","RelatedDescription":"Closed or merged PR \"Fix bug #435.\" (#437)"},{"Id":"336334329","IsPullRequest":false,"CreatedAt":"2018-06-27T21:41:52","Actor":"yaeldekel","Number":"435","RawContent":null,"Title":"Problem with the EvaluatorUtils method that appends per-instance data views","State":"closed","Body":"When appending the per-instance data views, we create create new key columns containing the union of the key values of the keys in the individual data views. Columns of type key that have text key values get reconciled twice, resulting in wrong values in these columns:\r\n\r\nelse if (dvNumber == 0 && dv.Schema.HasKeyNames(i, type.KeyCount))\r\n          firstDvKeyWithNamesColumns.Add(name);\r\nelse if (type.KeyCount > 0 && name != labelColName)\r\n{ ...\r\n\r\nColumns that go into the first \"else-if\" should not go into the second \"else-if\" which is supposed to handle key columns without text key values.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/435","RelatedDescription":"Closed issue \"Problem with the EvaluatorUtils method that appends per-instance data views\" (#435)"},{"Id":"336386335","IsPullRequest":true,"CreatedAt":"2018-06-27T21:35:08","Actor":"shauheen","Number":"444","RawContent":null,"Title":"Remove MML.DLL from Microsoft.ML nuget. (#439)","State":"closed","Body":"cherrypick into v0.3 to fix nuget","Url":"https://github.com/dotnet/machinelearning/pull/444","RelatedDescription":"Closed or merged PR \"Remove MML.DLL from Microsoft.ML nuget. (#439)\" (#444)"},{"Id":"336378080","IsPullRequest":false,"CreatedAt":"2018-06-27T20:36:15","Actor":"Ivanidzo4ka","Number":"443","RawContent":null,"Title":"Ensembles code required small cleanup","State":"open","Body":"Some files doesn't comply with our internal code policies (i.e. no consecutive new lines).\r\nDiversity Measurement for binary and regression classification are indistinguishable.\r\nWeighted average has wrong friendly name.","Url":"https://github.com/dotnet/machinelearning/issues/443","RelatedDescription":"Open issue \"Ensembles code required small cleanup\" (#443)"},{"Id":"336364273","IsPullRequest":true,"CreatedAt":"2018-06-27T19:51:06","Actor":"Ivanidzo4ka","Number":"442","RawContent":null,"Title":"small fixes in ensembles","State":"open","Body":"small code polishing related to #443\r\nmostly pacify robotom, and breaks diversity measure into separate interfaces (otherwise regression and binary have same interface and show off in gui/ code)\r\nalso put proper friendly name for weighted average combiner\r\n","Url":"https://github.com/dotnet/machinelearning/pull/442","RelatedDescription":"Open PR \"small fixes in ensembles\" (#442)"},{"Id":"336358607","IsPullRequest":true,"CreatedAt":"2018-06-27T19:31:22","Actor":"codemzs","Number":"441","RawContent":null,"Title":"Reverse integrate commit  fb8cf0b from master","State":"closed","Body":"Remove MML.DLL from Microsoft.ML nuget. (#439)","Url":"https://github.com/dotnet/machinelearning/pull/441","RelatedDescription":"Closed or merged PR \"Reverse integrate commit  fb8cf0b from master\" (#441)"},{"Id":"336348295","IsPullRequest":true,"CreatedAt":"2018-06-27T19:17:40","Actor":"codemzs","Number":"439","RawContent":null,"Title":"Remove MML.DLL from Microsoft.ML nuget.","State":"closed","Body":"fixes #438 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/439","RelatedDescription":"Closed or merged PR \"Remove MML.DLL from Microsoft.ML nuget.\" (#439)"},{"Id":"336348153","IsPullRequest":false,"CreatedAt":"2018-06-27T19:17:40","Actor":"codemzs","Number":"438","RawContent":null,"Title":"Remove MML.dll from Microsoft.ML nuget","State":"closed","Body":"We shouldn't have been adding an assembly to the Microsoft.ML package with netcoreapp2.0 TFM.  Doing this causes the project system to only reference the assemblies from`netcoreapp2.0` and not from netstandard2.0.","Url":"https://github.com/dotnet/machinelearning/issues/438","RelatedDescription":"Closed issue \"Remove MML.dll from Microsoft.ML nuget\" (#438)"},{"Id":"336349907","IsPullRequest":false,"CreatedAt":"2018-06-27T19:01:31","Actor":"hrkrx","Number":"440","RawContent":null,"Title":"Wrong Culture when passing arguments to LightGBM","State":"open","Body":"### System information\r\n\r\n- Win 10\r\n- dotnet core\r\n\r\n### Issue\r\n\r\nWhen calling the Train Method the arguments are parsed with the local culture instead of en or us, which leads to an Error:\r\n\r\n![41993623-57553e14-7a4c-11e8-9d75-12d423f54f8e](https://user-images.githubusercontent.com/5176531/41993935-1bdfc5ec-7a4d-11e8-899c-7d4f62cc85f1.png)","Url":"https://github.com/dotnet/machinelearning/issues/440","RelatedDescription":"Open issue \"Wrong Culture when passing arguments to LightGBM\" (#440)"},{"Id":"336335185","IsPullRequest":false,"CreatedAt":"2018-06-27T18:14:03","Actor":"markusweimer","Number":"436","RawContent":null,"Title":"Folder and file names don't match Namespaces and Type names","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 v1803\r\n- **.NET Version (eg., dotnet --info)**: 2.1.201 \r\n\r\n### Issue\r\n\r\n- **What did you do?** Open the solution in Jetbrains Rider\r\n- **What happened?** Rider pointed out many cases where type and file names differed, as well as cases where name spaces and folder names weren't in sync.","Url":"https://github.com/dotnet/machinelearning/issues/436","RelatedDescription":"Open issue \"Folder and file names don't match Namespaces and Type names\" (#436)"},{"Id":"336333719","IsPullRequest":false,"CreatedAt":"2018-06-27T18:08:54","Actor":"markusweimer","Number":"434","RawContent":null,"Title":"Documentation `cref`s point to nonexisting classes","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 v1803\r\n- **.NET Version (eg., dotnet --info)**: 2.1.201\r\n\r\n### Issue\r\n\r\n- **What did you do?** I opened the solution in Jetbrains Rider.\r\n- **What happened?** Rider pointed out a great many mistakes in the `cref` elements of XMLDocs\r\n- **What did you expect?** Perfect documentation, of course :-)","Url":"https://github.com/dotnet/machinelearning/issues/434","RelatedDescription":"Open issue \"Documentation `cref`s point to nonexisting classes\" (#434)"},{"Id":"336327242","IsPullRequest":false,"CreatedAt":"2018-06-27T17:47:56","Actor":"TomFinley","Number":"433","RawContent":null,"Title":"Direct API: Auto-normalization","State":"open","Body":"One of the details of training that happen after a loader/transform pipeline is created, but before the cache. We've typically automatically done this for users. While usage in the API is very distinct in that people tend to like implicit behavior in tools but dislike implicit behavior in APIs, at least offering a convenience for normalization is appropriate.\r\n\r\n## Existing Method\r\n\r\nSome familiar with this codebase are aware of this existing method, in the `TrainUtils` utility class, that serves a similar function.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/2501049f5cb60ed2c9ec191d2937cab7b59824da/src/Microsoft.ML.Data/Commands/TrainCommand.cs#L492\r\n\r\nThe goal of *that* method is not to provide a convenient API, so much as to factor out code common to the various commands that train models (e.g., train, traintest, cross-validation, some transforms like train-and-score). The same is true of many methods in that `TrainUtils` class. This as we see in the first few lines:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/2501049f5cb60ed2c9ec191d2937cab7b59824da/src/Microsoft.ML.Data/Commands/TrainCommand.cs#L499-L506\r\n\r\nWhile beneficial in providing consistent behavior across all of these things from a command-line perspective, the condition where it just exits would be inappropriate to have in an ML.NET API -- you might imagine someone designing a method with a parameter `bool doNothing` where the first thing is, if it's true, the method returns without doing anything. Again, appropriate from the point of view of factoring out common code, but not appropriate for an API. Also the method of communicating important information to the user is via the console, which again is not the most helpful option for an API.\r\n\r\n## Proposed API Helpers\r\n\r\nNonetheless, this function has several things that are helpful to do: it detects if a trainer wants normalization, if data is normalized, and if appropriate and necessary applies normalization.\r\n\r\nThis would probably take the form of a static method on the `NormalizerTransform` class, perhaps following this signature:\r\n\r\n```csharp\r\npublic static bool CreateIfNeeded(IHostEnvironment env, ref RoleMappedData data, ITrainer trainer)\r\n```\r\n\r\nWe could also have two additional methods to provide key information.\r\n\r\n```csharp\r\npublic static bool FeatureVectorIsNormalized(RoleMappedData data)\r\npublic static bool NeedsNormalization(this ITrainer trainer)\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/433","RelatedDescription":"Open issue \"Direct API: Auto-normalization\" (#433)"},{"Id":"336290066","IsPullRequest":true,"CreatedAt":"2018-06-27T16:15:28","Actor":"shauheen","Number":"431","RawContent":null,"Title":"Build fix - removing the BOM from the CMakeLists.txt file (#430)","State":"closed","Body":"Cherrypick internal build fix into release\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/431","RelatedDescription":"Closed or merged PR \"Build fix - removing the BOM from the CMakeLists.txt file (#430)\" (#431)"},{"Id":"336290301","IsPullRequest":false,"CreatedAt":"2018-06-27T15:57:00","Actor":"sfilipi","Number":"432","RawContent":null,"Title":"Add documentation and examples for Factorization Machines","State":"open","Body":"The Factorization Machine trainer/predictor got added to ML.NET, but we need to complement with documentation, and examples on how to use it. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/432","RelatedDescription":"Open issue \"Add documentation and examples for Factorization Machines\" (#432)"},{"Id":"336269704","IsPullRequest":true,"CreatedAt":"2018-06-27T15:49:16","Actor":"sfilipi","Number":"430","RawContent":null,"Title":"Build fix - removing the BOM from the CMakeLists.txt file","State":"closed","Body":"Remove the BOM from the CMakeLists.txt file, since it is breaking the build in vsts. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/430","RelatedDescription":"Closed or merged PR \"Build fix - removing the BOM from the CMakeLists.txt file\" (#430)"},{"Id":"336260665","IsPullRequest":false,"CreatedAt":"2018-06-27T14:43:00","Actor":"vivekpradhan","Number":"429","RawContent":null,"Title":"How do I use the newly added LightGBM classifier?","State":"open","Body":"### System information\r\n\r\n.NET Core SDK:\r\nVersion: 2.1.301\r\nCommit: 59524873d6\r\n\r\nRuntime Environment:\r\nOS Name: ubuntu\r\nOS Version: 16.04\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nCloned the master. \r\nRan ./build.sh\r\n\r\n- **What happened?**\r\nThe build was successful.\r\n\r\n-**My Code**\r\n```\r\n<PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n  <TreatWarningsAsErrors>false</TreatWarningsAsErrors>\r\n  <NoWarn>CS0649;CS0168;CS0219</NoWarn>\r\n  <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n  </PropertyGroup>\r\n  \r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.ML\" Version=\"0.2.0\" />\r\n  </ItemGroup>\r\n...\r\n```\r\nI'm using the example on iris with my dataset. My code works with `FastTreeBinaryClassifier`, how do I replace this and use `LightGbmBinaryClassifier`, from the code that I just built.\r\n```\r\n            string dataPath = \"../../../data/train.csv\";\r\n            string testPath = \"../../../data/test.csv\";\r\n            pipeline.Add(new TextLoader(dataPath).CreateFrom<IrisData>(separator: ','));\r\n            pipeline.Add(new ColumnConcatenator(\"Features\", \"NumericFeatures\"));\r\n            pipeline.Add(new FastTreeBinaryClassifier() { NumLeaves = 15, NumTrees = 10, MinDocumentsInLeafs = 100 });\r\n\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/429","RelatedDescription":"Open issue \"How do I use the newly added LightGBM classifier?\" (#429)"},{"Id":"336075646","IsPullRequest":true,"CreatedAt":"2018-06-27T11:56:43","Actor":"shauheen","Number":"426","RawContent":null,"Title":"Merge master into release/preview branch for v0.3","State":"closed","Body":"This PR is cumulatively merging master into release branch in preparation for v0.3 release.","Url":"https://github.com/dotnet/machinelearning/pull/426","RelatedDescription":"Closed or merged PR \"Merge master into release/preview branch for v0.3\" (#426)"},{"Id":"336081120","IsPullRequest":true,"CreatedAt":"2018-06-27T11:56:08","Actor":"shauheen","Number":"427","RawContent":null,"Title":"Bump master to v0.4","State":"closed","Body":"With release/preview branch updated for v0.3, bump the master branch to start building v0.4 assets.","Url":"https://github.com/dotnet/machinelearning/pull/427","RelatedDescription":"Closed or merged PR \"Bump master to v0.4\" (#427)"},{"Id":"336153611","IsPullRequest":true,"CreatedAt":"2018-06-27T09:42:41","Actor":"bojanmisic","Number":"428","RawContent":null,"Title":"Fix iris.txt dataset and modify Iris Classification tests accordingly","State":"open","Body":"Related to issue #400.\r\n\r\n1) Reordered column values in `iris.txt` (headers stay the same), so the previously `Petal width` values are actually `Sepal length` values; other columns shifted to the right.\r\n\r\n2) Tests `TrainAndPredictIrisModelTest` and `TrainAndPredictIrisModelWithStringLabelTest` are modified accordingly so that the values that test the prediction are also reordered to be more realistic (same way the dataset is modified).\r\n\r\n3)  Model class `IrisDataWithStringLabel` fields reordered to match `iris.data` dataset.\r\n\r\nThe fix for the samples repo that uses the same dataset will follow.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/428","RelatedDescription":"Open PR \"Fix iris.txt dataset and modify Iris Classification tests accordingly\" (#428)"},{"Id":"336054598","IsPullRequest":true,"CreatedAt":"2018-06-27T02:57:37","Actor":"sfilipi","Number":"425","RawContent":null,"Title":"removing extraneous character that broke the linux build, and with it the unnecessary cmake version requirement","State":"closed","Body":"The cmake file for the FactorizationMachineNative folder contained a character in the first line, that was causing the build to fail. \r\n\r\nDeleting that, and deleting the first line, which was requiring a version of cmake higher than 3.2. \r\n\r\nThere are no issues with this PR, as this is to fix the Linux build. \r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/425","RelatedDescription":"Closed or merged PR \"removing extraneous character that broke the linux build, and with it the unnecessary cmake version requirement\" (#425)"},{"Id":"336034114","IsPullRequest":false,"CreatedAt":"2018-06-27T00:13:21","Actor":"zeahmed","Number":"424","RawContent":null,"Title":"Write a test case for New API","State":"open","Body":"The work on new API (#371) has been started #380.\r\n\r\nIt would be nice to convert one of the already available test case into new API format. \r\n\r\nInitially, it won't be possible to implement it elegantly using new API. However, the objective in future will be to improve the end-user experience using this test case.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/424","RelatedDescription":"Open issue \"Write a test case for New API\" (#424)"},{"Id":"336027644","IsPullRequest":false,"CreatedAt":"2018-06-26T23:36:07","Actor":"zeahmed","Number":"423","RawContent":null,"Title":"Make Onnx path parameter mandatory in OnnxConverter","State":"open","Body":"\r\nAccording to the documentation, both `Onnx` and `Json` paths are optional. Make at least `Onnx` path mandatory for conversion.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML/Models/OnnxConverter.cs\r\n\r\n``` C#\r\nOnnxConverter converter = new OnnxConverter()\r\n{\r\n    InputsToDrop = new[] { \"Label\" },\r\n    OutputsToDrop = new[] { \"Label\", \"Features\" },\r\n    Onnx = onnxPath,\r\n    Json = onnxAsJsonPath,\r\n    Domain = \"Onnx\"\r\n};\r\n\r\nconverter.Convert(model);\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/423","RelatedDescription":"Open issue \"Make Onnx path parameter mandatory in OnnxConverter\" (#423)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-06-29T05:30:36.0536075Z","RunDurationInMilliseconds":1134}