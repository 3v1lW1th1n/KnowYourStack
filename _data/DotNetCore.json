{"Data":{"Blog":{"FeedItems":[{"Title":"How the .NET Team uses Azure Pipelines to produce Docker Images","PublishedOn":"2019-08-28T16:30:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Producing Docker images for .NET might not seem like that big of a deal.  Once you’ve got a Dockerfile defined, just run &#8220;docker build&#8220; and &#8220;docker push&#8220; and you’re done,...","Href":"https://devblogs.microsoft.com/dotnet/how-the-net-team-uses-azure-pipelines-to-produce-docker-images/","RawContent":null},{"Title":"Visual Studio Tips and Tricks: Increasing your Productivity for .NET","PublishedOn":"2019-08-22T17:20:27+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"The .NET team is constantly thinking of new ways to make developers more productive. We&#8217;ve been working hard over the past year to take the feedback you&#8217;ve sent us and turn it into tools...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-tips-and-tricks-increasing-your-productivity-for-net/","RawContent":null},{"Title":"Messaging Practices","PublishedOn":"2019-08-22T16:00:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post is a collection of content from David Boike from the Particular.net blog calling out some common problems and solutions for building message based distributed systems. They are relevant to...","Href":"https://devblogs.microsoft.com/dotnet/messaging-practices/","RawContent":null},{"Title":"Hey .NET! Have you tried ML.NET?","PublishedOn":"2019-08-21T15:00:51+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"ML.NET is an open source and cross-platform machine learning framework made for .NET developers.\nUsing ML.NET you can easily build custom machine learning models for scenarios like sentiment analysis,...","Href":"https://devblogs.microsoft.com/dotnet/hey-net-have-you-tried-ml-net/","RawContent":null},{"Title":".NET Framework August 2019 Preview of Quality Rollup","PublishedOn":"2019-08-20T17:42:59+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the August 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nBCL1\nAddresses a crash that occurs...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-august-2019-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core and systemd","PublishedOn":"2019-08-19T16:01:04+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"In preview7 a new package was added to the Microsoft.Extensions set of packages that enables integration with systemd. For the Windows focused, systemd allows similar functionality to Windows...","Href":"https://devblogs.microsoft.com/dotnet/net-core-and-systemd/","RawContent":null},{"Title":".NET Framework 4.8 is available on Windows Update, WSUS and MU Catalog","PublishedOn":"2019-08-13T19:47:54+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"We are happy to announce that Microsoft .NET Framework 4.8 is now available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This release includes quality...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-4-8-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 8","PublishedOn":"2019-08-13T18:31:00+00:00","CommentsCount":20,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 8. Just like with Preview 7, we&#8217;ve focused on polishing .NET Core 3.0 for a final release and are not adding new features. If these final previews...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-8/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 8 and Entity Framework 6.3 Preview 8","PublishedOn":"2019-08-13T18:29:25+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"The Preview 8 versions of the EF Core 3.0 package and the EF 6.3 package are now available for download from nuget.org.\nNew previews of .NET Core 3.0 and ASP.NET Core 3.0 are also available...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-8-and-entity-framework-6-3-preview-8/","RawContent":null},{"Title":"Update on .NET Standard adoption","PublishedOn":"2019-08-07T18:01:39+00:00","CommentsCount":27,"FacebookCount":0,"Summary":"It&#8217;s about two years ago that I announced .NET Standard 2.0. Since then we&#8217;ve been working hard to increase the set of .NET Standard-based libraries for .NET. This includes many of the BCL...","Href":"https://devblogs.microsoft.com/dotnet/update-on-net-standard-adoption/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10212614045","Type":"IssuesEvent","CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Opened issue \"Consolidating .NET GitHub repos\" (#119) at dotnet/announcements","RelatedBody":"Over the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n## To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10333081895","Type":"IssuesEvent","CreatedAt":"2019-09-03T03:33:35","Actor":"SilentCC","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26483","RelatedDescription":"Opened issue \"ThreadsPool doesn't have enough theads to handle High concurrency scene\" (#26483) at dotnet/coreclr","RelatedBody":"My application is based on aps.net core preview 8. \r\n\r\nWhen it starts up,I get a lot of exceptions like these:\r\n```\r\n2019-09-02 21:56:20.483 [Error] Request Execution Time: 6932 SLP-IP: 42.121.252.58\r\nThreadPool.ThreadCount: 6, Available work threads: 32761, Available completion Port threads: 1000\r\n/web520/p/6474754.html\r\nBlogServer.Web.Middleware.RequestTimingMiddleware\r\n\r\n2019-09-02 21:56:21.000 [Error] Request Execution Time: 6113 SLP-IP: 42.121.252.58\r\nThreadPool.ThreadCount: 4, Available work threads: 32763, Available completion Port threads: 1000\r\n/hangblog/p/10754342.html\r\nBlogServer.Web.Middleware.RequestTimingMiddleware\r\n\r\n```\r\n\r\n```\r\n2019-09-02 22:49:18.953 [Error] Request Execution Time: 6313 SLP-IP: 42.121.252.58\r\nThreadPool.ThreadCount: 5, Pending work item count: 851, Completed work item count: 6886\r\n/momozjm/ajax/GetViewCount.aspx\r\nBlogServer.Web.Middleware.RequestTimingMiddleware\r\n2019-09-02 22:49:18.994 [Error] Request Execution Time: 6399 SLP-IP: 42.121.252.58\r\nThreadPool.ThreadCount: 5, Pending work item count: 848, Completed work item count: 6922\r\n/zhujiabin/ajax/sidecolumn.aspx\r\nBlogServer.Web.Middleware.RequestTimingMiddleware\r\n2019-09-02 22:49:19.000 [Error] Request Execution Time: 6385 SLP-IP: 42.121.252.58\r\nThreadPool.ThreadCount: 5, Pending work item count: 676, Completed work item count: 7134\r\n/cate/2/200\r\n```\r\nThe qps is more than one thousand.\r\n\r\nSo many request were delayed when application started up.But this situation only happened at the beginning.\r\n\r\nWhen it became normal and worked fine later, I printed the threads info :\r\n\r\n```\r\n`ThreadPool.ThreadCount: 19, Pending work item count: 0, Completed work item count: 35022782`\r\n``` \r\n\r\nIt seems that threadPool can‘t create more threads immediately.It needs more time to spin up threads.\r\n\r\n\r\n\r\n\r\n"},{"Id":"10333006973","Type":"IssuesEvent","CreatedAt":"2019-09-03T03:11:43","Actor":"SilentCC","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25767","RelatedDescription":"Closed issue \"Out Of Memory Exception in .NET Core 3.0 preview 5\" (#25767) at dotnet/coreclr","RelatedBody":"Since I update my application to .NET Core 3.0 preview 5 in container scenario, the OutOfMemory exceptions come out sometimes.\r\n\r\nProduction Environments:\r\n\r\n*   **production cluster**:  docker swarm\r\n*   **docker container cpu limit** :1.5\r\n*   **docker container memory limit**: 2G\r\n*   **docker container duplicates** : 2\r\n*   **PV** : about  60000 per day\r\n*   **Application** : .NET Core MVC Web\r\n*   **GC type** : Server GC\r\n*   **.Net version** : .NET Core 3.0 preview 5\r\n\r\nPrevious version is .NET Core 2.2 , and it worked fine all the time until it was updated to .NET Core 3.0 a few days ago.\r\n\r\nLast night, It threw lots of OutOfMemory exceptions and restarted by docker finally.I think its memory exceeded docker memory limit. \r\n\r\nHere is error logs, note that OutOfMemory exception may occurs on many different places .\r\n\r\n```\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.Data.SqlClient.SqlCommand.<>c.<ExecuteDbDataReaderAsync>b__126_0(Task`1 result)\r\n   at System.Threading.Tasks.ContinuationResultTaskFromResultTask`2.InnerInvoke()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\n```\r\n \"Message\": \"Exception of type 'System.OutOfMemoryException' was thrown.\",\r\n  \"Source\": \"System.Private.CoreLib\",\r\n  \"StackTraceString\": \"   \r\n     at System.Collections.Generic.Dictionary`2.Initialize(Int32 capacity)\\n   at System.Collections.Generic.Dictionary`2..ctor(Int32 capacity, IEqualityComparer`1 comparer)\\n \r\n     at System.Linq.Expressions.Compiler.CompilerScope..ctor(Object node, Boolean isMethod)\\n   at System.Linq.Expressions.Compiler.VariableBinder.VisitLambda[T](Expression`1 node)\\n   \r\n     at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\\n   at System.Linq.Expressions.Expression`1.Compile(Boolean preferInterpretation)\\n  \r\n```\r\n\r\n```\r\n \"Message\": \"Exception of type 'System.OutOfMemoryException' was thrown.\",\r\n  \"Source\": \"System.Private.CoreLib\",\r\n  \"StackTraceString\": \"   \r\n       at System.GC.AllocateNewArray(IntPtr typeHandle, Int32 length, Boolean zeroingOptional)\\n   at System.GC.AllocateUninitializedArray[T](Int32 length)\\n   \r\n       at System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1.Rent(Int3  2 minimumLength)\\n  \r\n       at Microsoft.AspNetCore.Http.Extensions.StreamCopyOperation.CopyToAsync(Stream source, Stream destination, Nullable`1 count, Int32 bufferSize, CancellationToken cancel)\\n   at Microsoft.AspNetCore.StaticFiles.StaticFileContext.SendAsync()\\n   \r\n       at Microsoft.AspNetCore.StaticFiles.StaticFileContext.ServeStaticFile(HttpContext context, RequestDelegate next)\\n   \r\n       at Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.Invoke(HttpContext context)\\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.<Invoke>g__Awaited|6_0(ExceptionHandlerMiddleware middleware, HttpContext context, Task task)\",\r\n```\r\n\r\n```\r\nMicrosoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.Linq.Expressions.Compiler.CompilerScope.SetParent(LambdaCompiler lc, CompilerScope parent)\r\n   at System.Linq.Expressions.Compiler.CompilerScope.Enter(LambdaCompiler lc, CompilerScope parent)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitLambdaBody(CompilerScope parent, Boolean inlined, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\r\n   at System.Linq.Expressions.Expression`1.Compile(Boolean preferInterpretation)\r\n   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateFactory(Type instanceType, Type[] argumentTypes)\r\n   at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Boolean& initialized, Object& syncLock, Func`1 valueFactory)\r\n   at Microsoft.Extensions.Http.DefaultTypedHttpClientFactory`1.CreateClient(HttpClient httpClient)\r\n   at Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.<>c__DisplayClass10_0`2.<AddTypedClient>b__0(IServiceProvider s)\r\n   at ResolveService(ILEmitResolverBuilderRuntimeContext , ServiceProviderEngineScope )\r\n   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetService(IServiceProvider sp, Type type, Type requiredBy, Boolean isDefaultParameterRequired)\r\n   at lambda_method(Closure , IServiceProvider , Object[] )\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFactoryProvider.<>c__DisplayClass5_0.<CreateControllerFactory>g__CreateController|0(ControllerContext controllerContext)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResourceFilter>g__Awaited|24_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.<Invoke>g__Awaited|6_0(ExceptionHandlerMiddleware \r\n```\r\n\r\nI suppose that  GC may be affected by GCHeapHardLimit in .NET Core 3.0.\r\nAny one can help me? Thank you very much!\r\n"},{"Id":"10332626311","Type":"IssuesEvent","CreatedAt":"2019-09-03T01:17:51","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26482","RelatedDescription":"Opened issue \"Assert failure: (FARPROC) (TADDR)m_pvHJRetAddr != NULL\" (#26482) at dotnet/coreclr","RelatedBody":"**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/22ba8412-2536-436f-b0ab-bedc557e25b9/workitems/Microsoft.VisualBasic.Core.Tests/console\r\n\r\n**Mode:**\r\nCOMPlus_TieredCompilation=0\r\nCOMPlus_JitStressRegs=2\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 13483 [0x000034ab], Thread: 13483 [0x34ab]): (FARPROC) (TADDR)m_pvHJRetAddr != NULL\r\n    File: /__w/1/s/src/vm/threadsuspend.cpp Line: 5431\r\n    Image: /home/helixbot/work/22ba8412-2536-436f-b0ab-bedc557e25b9/Payload/dotnet\r\n\r\n./RunTests.sh: line 161: 13483 Aborted                 (core dumped) \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig Microsoft.VisualBasic.Core.Tests.runtimeconfig.json xunit.console.dll Microsoft.VisualBasic.Core.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n~/work/22ba8412-2536-436f-b0ab-bedc557e25b9/Work/bc5544cd-1c1b-4b6b-a073-cf7e7f55dc0d/Exec\r\nexit code 134\r\n```"},{"Id":"10331997552","Type":"PullRequestEvent","CreatedAt":"2019-09-02T20:56:30","Actor":"adamsitnik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26481","RelatedDescription":"Opened pull request \"implement StartsWith and EndsWith as calls to CompareString for sliced string\" (#26481) at dotnet/coreclr","RelatedBody":""},{"Id":"10331983790","Type":"PullRequestEvent","CreatedAt":"2019-09-02T20:52:00","Actor":"trylek","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26480","RelatedDescription":"Opened pull request \"WIP: only check out the GIT repo once and reuse for the entire pipeline\" (#26480) at dotnet/coreclr","RelatedBody":""},{"Id":"10331932068","Type":"PullRequestEvent","CreatedAt":"2019-09-02T20:35:33","Actor":"trylek","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26453","RelatedDescription":"Merged pull request \"Keep tokenScope consistent during devirtualization\" (#26453) at dotnet/coreclr","RelatedBody":"Previously, when we were constructing the CORINFO_RESOLVED_TOKEN\r\nto represent a devirtualized method, we reused the previous\r\ntokenScope so that the tokenScope effectively went out of sync\r\nwith the token value.\r\n\r\nBased on Andy's advice I have changed this logic to update the\r\ntokenScope by calling the JIT interface method getMethodModule\r\nfor the resolved virtual method. I have verified locally that\r\n(with a bit of counterpart CPAOT changes) this logic fixes the\r\nbug I was previously hitting due to this inconsistency.\r\n\r\nThis is the first time I'm trying to make a change in JIT (albeit\r\nsmall) so I'll be grateful for any advice as to how to make sure\r\nI don't break the world, so to say. I'm also unsure about some\r\nof the related logistics:\r\n\r\n1) The change requires a counterpart CoreRT change (CPAOT / RyuJIT)\r\nI have just sent out for PR. Once that I [hopefully] manage to\r\nmerge both changes in, I'm not sure about the subsequent logistics\r\nto update the JIT drop in CoreRT.\r\n\r\n2) Does this change merit bumping up the JITEEVersionIdentifier?\r\nI mean, it technically doesn't introduce a change in the JIT\r\ninterface but it brings in slightly modified semantics in the sense\r\nthat the getMethodModule method is now actually getting called\r\n(I haven't found any pre-existing JIT code calling the method\r\nand it was throwing a NotImplementedException in CoreRT).\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. You can find the counterpart CoreRT change at\r\n\r\nhttps://github.com/dotnet/corert/pull/7755\r\n"},{"Id":"10331790317","Type":"IssuesEvent","CreatedAt":"2019-09-02T19:51:52","Actor":"MichalStrehovsky","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26474","RelatedDescription":"Closed issue \"[UWP] Error ILT0005, App.UWP.rsp\"' returned exit code 1\" (#26474) at dotnet/coreclr","RelatedBody":"While Building Store App x86 I am getting below error.\r\n\r\nILT0005: 'C:\\Users\\XUser\\.nuget\\packages\\runtime.win10-x86.microsoft.net.native.compiler\\2.2.3\\tools\\x86\\ilc\\Tools\\nutc_driver.exe @\"C:\\XGit\\MyAppV2\\MyApp\\MyApp.UWP\\obj\\x86\\Release\\ilc\\intermediate\\MDIL\\MyApp.UWP.rsp\"' returned exit code 1\r\n\r\nI have tried Debug **without** .net Native tool chain (Working)\r\nI have tried Debug **With** .net Native tool chain (Working)\r\n**I have tried Release With .net Native tool chain (Is Not Wokring)**\r\n\r\nI have tried deleting all the local nuget cache\r\nI have tried deleting Bin and Obj folder.\r\n\r\nVisual Studio 16.2.3\r\nWindows 10 1903\r\nUWP Project TargetPlatformVersion 10.0.18362.0\r\nUWP Project TargetPlatformMinVersion 10.0.16299.0\r\nMicrosoft.NETCore.UniversalWindowsPlatfor 6.2.8 Tired (6.2.9) as well\r\n\r\nPreviously everything was working fine.\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10333417323","Type":"PullRequestEvent","CreatedAt":"2019-09-03T05:15:22","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12473","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#12473) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190902.8\r\n- **Date Produced**: 9/3/2019 4:10 AM\r\n- **Commit**: 9e9aaf47b6684ef37bd1a35d088aeed275c8dfc3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19452.8\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19452.8\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19452.8\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19452.8\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19452.8\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10332933598","Type":"PullRequestEvent","CreatedAt":"2019-09-03T02:50:39","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12472","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#12472) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190902.7\r\n- **Date Produced**: 9/3/2019 1:14 AM\r\n- **Commit**: 9e9aaf47b6684ef37bd1a35d088aeed275c8dfc3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19452.7\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19452.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19452.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19452.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19452.7\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10332827409","Type":"PullRequestEvent","CreatedAt":"2019-09-03T02:20:22","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12472","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#12472) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190902.7\r\n- **Date Produced**: 9/3/2019 1:14 AM\r\n- **Commit**: 9e9aaf47b6684ef37bd1a35d088aeed275c8dfc3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19452.7\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19452.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19452.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19452.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19452.7\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10332374963","Type":"PullRequestEvent","CreatedAt":"2019-09-02T23:30:42","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12471","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#12471) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190902.6\r\n- **Date Produced**: 9/2/2019 9:54 PM\r\n- **Commit**: 4b175eb55dafc7aef1f978c2398bdd20c9e33ae6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19452.6\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19452.6\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19452.6\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19452.6\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19452.6\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10329537716","Type":"PullRequestEvent","CreatedAt":"2019-09-02T12:28:27","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1495","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1495) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190901.2\r\n- **Date Produced**: 9/1/2019 5:40 PM\r\n- **Commit**: 130d8582e4973bbdb55ae737b942d214ad3c6570\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19451.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19451.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19451.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10329472720","Type":"PullRequestEvent","CreatedAt":"2019-09-02T12:18:20","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1495","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1495) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190901.2\r\n- **Date Produced**: 9/1/2019 5:40 PM\r\n- **Commit**: 130d8582e4973bbdb55ae737b942d214ad3c6570\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19451.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19451.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19451.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10324804788","Type":"PullRequestEvent","CreatedAt":"2019-09-01T12:27:14","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1494","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1494) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190831.3\r\n- **Date Produced**: 8/31/2019 5:22 PM\r\n- **Commit**: c4b450ba5d9898be09fe589ba2583772c70a4712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19431.3\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19431.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19431.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10324784799","Type":"PullRequestEvent","CreatedAt":"2019-09-01T12:17:08","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1494","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1494) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190831.3\r\n- **Date Produced**: 8/31/2019 5:22 PM\r\n- **Commit**: c4b450ba5d9898be09fe589ba2583772c70a4712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19431.3\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19431.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19431.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10322524845","Type":"IssuesEvent","CreatedAt":"2019-08-31T13:10:35","Actor":"chris579","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1493","RelatedDescription":"Opened issue \"Make SequenceReader available\" (#1493) at dotnet/standard","RelatedBody":"Reading from a `ReadOnlySequence<T>` requires to keep track of position and consumed data. In core you can use the type [SequenceReader](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.sequencereader-1?view=netcore-3.0) that does that for you. In standard you don't have it which leads to three possibilities:\r\n- Write your own implementation which does similar things like `SequenceReader`\r\n- Copy the implementation of `SequenceReader`\r\n- Converting the `ReadOnlySequence<t>` to `T[]` which defeats the purpose\r\n\r\nAll options are not convenient. Making `SequenceReader` available in standard would allow libraries to use the performance benefits of `SequenceReader` without the need to rely on third party implementations or crushing performance because of allocations."},{"Id":"10322469417","Type":"PullRequestEvent","CreatedAt":"2019-08-31T12:39:19","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1492","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1492) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190831.1\r\n- **Date Produced**: 8/31/2019 8:30 AM\r\n- **Commit**: 2c974d484209ab46815ec9abd35936ca66f2444e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19431.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19431.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19431.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10322452008","Type":"PullRequestEvent","CreatedAt":"2019-08-31T12:29:14","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1492","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1492) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190831.1\r\n- **Date Produced**: 8/31/2019 8:30 AM\r\n- **Commit**: 2c974d484209ab46815ec9abd35936ca66f2444e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19431.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19431.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19431.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10332769790","Type":"PullRequestEvent","CreatedAt":"2019-09-03T02:03:10","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/40760","RelatedDescription":"Opened pull request \"Disable RsaDecryptPkcs1LeadingZero test failing on some Windows\" (#40760) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/issues/40434\r\ncc: @bartonjs, @ViktorHofer "},{"Id":"10332755920","Type":"PullRequestEvent","CreatedAt":"2019-09-03T01:59:06","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40757","RelatedDescription":"Merged pull request \"Consolidate / cleanup disposal checks in System.Net.Sockets\" (#40757) at dotnet/corefx","RelatedBody":""},{"Id":"10332754131","Type":"IssuesEvent","CreatedAt":"2019-09-03T01:58:34","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40759","RelatedDescription":"Opened issue \"AsymmetricEncryptionRoundtrip(useOAEP: False) test failed\" (#40759) at dotnet/corefx","RelatedBody":"uap-Windows_NT-Debug-x64-Windows.10.Amd64.ClientRS5.Open\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=334933&view=ms.vss-test-web.build-test-results-tab&runId=9864152&resultId=100224&paneView=attachments\r\n```    System.Security.Cryptography.Xml.Tests.EncryptingAndDecryptingAsymmetric.AsymmetricEncryptionRoundtrip(useOAEP: False) [FAIL]\r\n      System.Security.Cryptography.CryptographicException : Padding is invalid and cannot be removed.\r\n      Stack Trace:\r\n        /_/src/Common/src/Internal/Cryptography/UniversalCryptoDecryptor.cs(211,0): at Internal.Cryptography.UniversalCryptoDecryptor.DepadBlock(Byte[] block, Int32 offset, Int32 count)\r\n        /_/src/Common/src/Internal/Cryptography/UniversalCryptoDecryptor.cs(104,0): at Internal.Cryptography.UniversalCryptoDecryptor.UncheckedTransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount)\r\n        /_/src/Common/src/Internal/Cryptography/UniversalCryptoTransform.cs(100,0): at Internal.Cryptography.UniversalCryptoTransform.TransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount)\r\n        /_/src/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/EncryptedXml.cs(751,0): at System.Security.Cryptography.Xml.EncryptedXml.DecryptData(EncryptedData encryptedData, SymmetricAlgorithm symmetricAlgorithm)\r\n        /_/src/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/EncryptedXml.cs(656,0): at System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument()\r\n        /_/src/System.Security.Cryptography.Xml/tests/Samples/EncryptingDecryptingAsymmetric.cs(78,0): at System.Security.Cryptography.Xml.Tests.EncryptingAndDecryptingAsymmetric.Decrypt(XmlDocument doc, RSA rsaKey, String keyName)\r\n        /_/src/System.Security.Cryptography.Xml/tests/Samples/EncryptingDecryptingAsymmetric.cs(101,0): at System.Security.Cryptography.Xml.Tests.EncryptingAndDecryptingAsymmetric.AsymmetricEncryptionRoundtrip(Boolean useOAEP)\r\n```"},{"Id":"10332747652","Type":"PullRequestEvent","CreatedAt":"2019-09-03T01:56:32","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40754","RelatedDescription":"Merged pull request \"Disable one flaky PrintPage test\" (#40754) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/issues/30223"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10332452686","Type":"PullRequestEvent","CreatedAt":"2019-09-03T00:07:22","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7764","RelatedDescription":"Opened pull request \"Sbyteextend\" (#7764) at dotnet/corert","RelatedBody":""},{"Id":"10331885177","Type":"PullRequestEvent","CreatedAt":"2019-09-02T20:20:50","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7755","RelatedDescription":"Merged pull request \"Preparatory change to fix JIT tokenScope during devirtualization\" (#7755) at dotnet/corert","RelatedBody":"Based on Andy's advice I investigated fixing tokenScope in JIT\r\nto work correctly even in the presence of devirtualization by\r\nbasically calling getMethodModule for the resolved virtual method\r\nto update the token scope. To make that work end to end, I had\r\nto actually implement the [previously unused] helper in CoreRT.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Based on Michal's offline advice I have locally verified that\r\nthe Generics CoreRT test works in release mode with the updated\r\nJIT.\r\n"},{"Id":"10330639925","Type":"IssuesEvent","CreatedAt":"2019-09-02T15:10:29","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7756","RelatedDescription":"Closed issue \"System.ArgumentNullException while running basic Suave web server\" (#7756) at dotnet/corert","RelatedBody":"Hi guys,\r\n\r\nI've been trying to come up with a basic web server using Suave + CoreRT. Check this [repo](https://github.com/OshoNot/suave-corert) for source code and error analysis. When I start the generated executable, it yields the following exception:\r\n\r\n```bash\r\nUnhandled Exception: System.ArgumentNullException: Value cannot be null. Parameter name: path1\r\n   at System.IO.Path.Combine(String, String) + 0x53\r\n   at Suave.Web.startWebServerAsync(SuaveConfig, FSharpFunc\\`2) + 0x46\r\n   at Suave.Web.startWebServer(SuaveConfig, FSharpFunc\\`2) + 0x17\r\n   at Program.main(String[]) + 0x28\r\n   at Simple-Web!<BaseAddress>+0x7d639d\r\nAborted\r\n```"},{"Id":"10330617605","Type":"PullRequestEvent","CreatedAt":"2019-09-02T15:07:10","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7763","RelatedDescription":"Merged pull request \"Wasm: fixes loading int16 and SBytes from the stack where they were previously not sign extended\" (#7763) at dotnet/corert","RelatedBody":"Previously loading SBytes from the stack did not sign extend causing problems in the NativeFormatReader.  This adds a test and fixes that scenario."},{"Id":"10330270179","Type":"PullRequestEvent","CreatedAt":"2019-09-02T14:16:26","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7763","RelatedDescription":"Opened pull request \"Wasm: fixes loading int16 and SBytes from the stack where they were previously not sign extended\" (#7763) at dotnet/corert","RelatedBody":"Previously loading SBytes from the stack did not sign extend causing problems in the NativeFormatReader.  This adds a test and fixes that scenario."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"488375645","IsPullRequest":false,"CreatedAt":"2019-09-03T03:33:34","Actor":"SilentCC","Number":"26483","RawContent":null,"Title":"ThreadsPool doesn't have enough theads to handle High concurrency scene","State":"open","Body":"My application is based on aps.net core preview 8. \r\n\r\nWhen it starts up,I get a lot of exceptions like these:\r\n```\r\n2019-09-02 21:56:20.483 [Error] Request Execution Time: 6932 SLP-IP: 42.121.252.58\r\nThreadPool.ThreadCount: 6, Available work threads: 32761, Available completion Port threads: 1000\r\n/web520/p/6474754.html\r\nBlogServer.Web.Middleware.RequestTimingMiddleware\r\n\r\n2019-09-02 21:56:21.000 [Error] Request Execution Time: 6113 SLP-IP: 42.121.252.58\r\nThreadPool.ThreadCount: 4, Available work threads: 32763, Available completion Port threads: 1000\r\n/hangblog/p/10754342.html\r\nBlogServer.Web.Middleware.RequestTimingMiddleware\r\n\r\n```\r\n\r\n```\r\n2019-09-02 22:49:18.953 [Error] Request Execution Time: 6313 SLP-IP: 42.121.252.58\r\nThreadPool.ThreadCount: 5, Pending work item count: 851, Completed work item count: 6886\r\n/momozjm/ajax/GetViewCount.aspx\r\nBlogServer.Web.Middleware.RequestTimingMiddleware\r\n2019-09-02 22:49:18.994 [Error] Request Execution Time: 6399 SLP-IP: 42.121.252.58\r\nThreadPool.ThreadCount: 5, Pending work item count: 848, Completed work item count: 6922\r\n/zhujiabin/ajax/sidecolumn.aspx\r\nBlogServer.Web.Middleware.RequestTimingMiddleware\r\n2019-09-02 22:49:19.000 [Error] Request Execution Time: 6385 SLP-IP: 42.121.252.58\r\nThreadPool.ThreadCount: 5, Pending work item count: 676, Completed work item count: 7134\r\n/cate/2/200\r\n```\r\nThe qps is more than one thousand.\r\n\r\nSo many request were delayed when application started up.But this situation only happened at the beginning.\r\n\r\nWhen it became normal and worked fine later, I printed the threads info :\r\n\r\n```\r\n`ThreadPool.ThreadCount: 19, Pending work item count: 0, Completed work item count: 35022782`\r\n``` \r\n\r\n19 threads can satisfy my demand.But how can I make threadPool have 19 threads at initialization time.\r\n\r\nIt seems that threadPool can‘t create more threads immediately.It needs more time to spin up threads.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/26483","RelatedDescription":"Open issue \"ThreadsPool doesn't have enough theads to handle High concurrency scene\" (#26483)"},{"Id":"488350521","IsPullRequest":false,"CreatedAt":"2019-09-03T01:17:51","Actor":"VincentBu","Number":"26482","RawContent":null,"Title":"Assert failure: (FARPROC) (TADDR)m_pvHJRetAddr != NULL","State":"open","Body":"**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/22ba8412-2536-436f-b0ab-bedc557e25b9/workitems/Microsoft.VisualBasic.Core.Tests/console\r\n\r\n**Mode:**\r\nCOMPlus_TieredCompilation=0\r\nCOMPlus_JitStressRegs=2\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 13483 [0x000034ab], Thread: 13483 [0x34ab]): (FARPROC) (TADDR)m_pvHJRetAddr != NULL\r\n    File: /__w/1/s/src/vm/threadsuspend.cpp Line: 5431\r\n    Image: /home/helixbot/work/22ba8412-2536-436f-b0ab-bedc557e25b9/Payload/dotnet\r\n\r\n./RunTests.sh: line 161: 13483 Aborted                 (core dumped) \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig Microsoft.VisualBasic.Core.Tests.runtimeconfig.json xunit.console.dll Microsoft.VisualBasic.Core.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n~/work/22ba8412-2536-436f-b0ab-bedc557e25b9/Work/bc5544cd-1c1b-4b6b-a073-cf7e7f55dc0d/Exec\r\nexit code 134\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26482","RelatedDescription":"Open issue \"Assert failure: (FARPROC) (TADDR)m_pvHJRetAddr != NULL\" (#26482)"},{"Id":"488315968","IsPullRequest":true,"CreatedAt":"2019-09-02T20:56:30","Actor":"adamsitnik","Number":"26481","RawContent":null,"Title":"implement StartsWith and EndsWith as calls to CompareString for sliced string","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26481","RelatedDescription":"Open PR \"implement StartsWith and EndsWith as calls to CompareString for sliced string\" (#26481)"},{"Id":"488315124","IsPullRequest":true,"CreatedAt":"2019-09-02T20:52:00","Actor":"trylek","Number":"26480","RawContent":null,"Title":"WIP: only check out the GIT repo once and reuse for the entire pipeline","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26480","RelatedDescription":"Open PR \"WIP: only check out the GIT repo once and reuse for the entire pipeline\" (#26480)"},{"Id":"487919976","IsPullRequest":false,"CreatedAt":"2019-09-02T19:51:52","Actor":"AwsomeCode","Number":"26474","RawContent":null,"Title":"[UWP] Error ILT0005, App.UWP.rsp\"' returned exit code 1","State":"closed","Body":"While Building Store App x86 I am getting below error.\r\n\r\nILT0005: 'C:\\Users\\XUser\\.nuget\\packages\\runtime.win10-x86.microsoft.net.native.compiler\\2.2.3\\tools\\x86\\ilc\\Tools\\nutc_driver.exe @\"C:\\XGit\\MyAppV2\\MyApp\\MyApp.UWP\\obj\\x86\\Release\\ilc\\intermediate\\MDIL\\MyApp.UWP.rsp\"' returned exit code 1\r\n\r\nI have tried Debug **without** .net Native tool chain (Working)\r\nI have tried Debug **With** .net Native tool chain (Working)\r\n**I have tried Release With .net Native tool chain (Is Not Wokring)**\r\n\r\nI have tried deleting all the local nuget cache\r\nI have tried deleting Bin and Obj folder.\r\n\r\nVisual Studio 16.2.3\r\nWindows 10 1903\r\nUWP Project TargetPlatformVersion 10.0.18362.0\r\nUWP Project TargetPlatformMinVersion 10.0.16299.0\r\nMicrosoft.NETCore.UniversalWindowsPlatfor 6.2.8 Tired (6.2.9) as well\r\n\r\nPreviously everything was working fine.\r\n","Url":"https://github.com/dotnet/coreclr/issues/26474","RelatedDescription":"Closed issue \"[UWP] Error ILT0005, App.UWP.rsp\"' returned exit code 1\" (#26474)"},{"Id":"488157916","IsPullRequest":true,"CreatedAt":"2019-09-02T19:06:44","Actor":"dotnet-maestro[bot]","Number":"26477","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190901.2\r\n- **Date Produced**: 9/1/2019 5:40 PM\r\n- **Commit**: 130d8582e4973bbdb55ae737b942d214ad3c6570\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19451.2\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19451.2\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26477","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#26477)"},{"Id":"488158099","IsPullRequest":true,"CreatedAt":"2019-09-02T19:06:35","Actor":"dotnet-maestro[bot]","Number":"26478","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190902.1\r\n- **Date Produced**: 9/2/2019 8:56 AM\r\n- **Commit**: fb49d11c77525a6af8e5bc7067a17d9eee6948dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19452.1\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26478","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#26478)"},{"Id":"488242501","IsPullRequest":false,"CreatedAt":"2019-09-02T15:30:32","Actor":"vitek-karas","Number":"26479","RawContent":null,"Title":"StringComparer.InvariantCulture.GetHashCode throws in Windows 7 compat mode","State":"open","Body":"#### Repro\r\n`dotnet new console`\r\nUse this code in `Main`\r\n```C#\r\n            string value = @\"Some\";\r\n            IEqualityComparer<string> comparer = StringComparer.InvariantCulture;\r\n            Console.WriteLine($\"{comparer.GetHashCode(value)}\");\r\n```\r\nBuild with .NET Core 3.0.\r\nGo to the output folder and set compatibility mode for the `.exe` to `Windows 7`.\r\nRun the exe.\r\n\r\n#### Output\r\n```\r\nUnhandled exception. System.ArgumentException: External component has thrown an exception.\r\n   at System.Globalization.CompareInfo.GetHashCodeOfStringCore(ReadOnlySpan`1 source, CompareOptions options)\r\n   at System.Globalization.CompareInfo.GetHashCodeOfString(String source, CompareOptions options)\r\n   at System.CultureAwareComparer.GetHashCode(String obj)\r\n   at ConsoleApp3.Program.Main(String[] args)\r\n```\r\n\r\nThis seems to happen for any string other than empty string. The program works fine when executed without the compatibility mode set.\r\n\r\nI haven't tried to run this on actual Windows 7 machine.","Url":"https://github.com/dotnet/coreclr/issues/26479","RelatedDescription":"Open issue \"StringComparer.InvariantCulture.GetHashCode throws in Windows 7 compat mode\" (#26479)"},{"Id":"487764986","IsPullRequest":true,"CreatedAt":"2019-09-02T13:32:36","Actor":"dotnet-maestro[bot]","Number":"26463","RawContent":null,"Title":"[release/3.0] Update dependencies from dnceng/internal/dotnet-optimization","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2b95475b-d147-4b39-6306-08d6bc51899c)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190902.1\r\n- **Date Produced**: 9/2/2019 11:01 AM\r\n- **Commit**: 48fd58c24cddbc6c0b0de1c00204aae1170f4864\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190902.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190902.1\r\n\r\n[marker]: <> (End:2b95475b-d147-4b39-6306-08d6bc51899c)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26463","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dnceng/internal/dotnet-optimization\" (#26463)"},{"Id":"487970927","IsPullRequest":false,"CreatedAt":"2019-09-02T02:56:52","Actor":"VincentBu","Number":"26476","RawContent":null,"Title":"Assert failure: !CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")","State":"open","Body":"**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/3bd056f0-43d1-4be1-8104-48ca2252faea/workitems/System.Collections.Immutable.Tests/console\r\n\r\n**Failed tests:**\r\nSystem.Collections.Immutable.Tests\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 5824 [0x000016c0], Thread: 4660 [0x1234]): !CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")\r\n\r\nCORECLR! GetCLRRuntimeHost + 0xA4186D (0x00007fff`b773173d)\r\nCORECLR! GetCLRRuntimeHost + 0x8D8A70 (0x00007fff`b75c8940)\r\nCORECLR! GetCLRRuntimeHost + 0x8D721A (0x00007fff`b75c70ea)\r\nNTDLL! RtlCaptureContext + 0x3C3 (0x00007fff`e6289bd3)\r\nCORECLR! GetCLRRuntimeHost + 0x3340EE (0x00007fff`b7023fbe)\r\nCORECLR! GetCLRRuntimeHost + 0x333E9A (0x00007fff`b7023d6a)\r\nCORECLR! GetCLRRuntimeHost + 0x75D71F (0x00007fff`b744d5ef)\r\nCORECLR! GetCLRRuntimeHost + 0x75D95D (0x00007fff`b744d82d)\r\nCORECLR! GetCLRRuntimeHost + 0x75CB72 (0x00007fff`b744ca42)\r\nCORECLR! GetCLRRuntimeHost + 0x3A9523 (0x00007fff`b70993f3)\r\n    File: f:\\workspace\\_work\\1\\s\\src\\vm\\object.cpp Line: 674\r\n    Image: C:\\dotnetbuild\\work\\3bd056f0-43d1-4be1-8104-48ca2252faea\\Payload\\dotnet.exe\r\n\r\nexit code -1073740286\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26476","RelatedDescription":"Open issue \"Assert failure: !CREATE_CHECK_STRING(!\"Detected use of a corrupted OBJECTREF. Possible GC hole.\")\" (#26476)"},{"Id":"487921301","IsPullRequest":true,"CreatedAt":"2019-09-01T19:16:50","Actor":"trylek","Number":"26475","RawContent":null,"Title":"WIP: build managed artifacts for all *nix tests on one platform","State":"open","Body":"As my previous attempt at this PR shows CI errors I have a hard\r\ntime to troubleshoot, I'm reconstructing the PR incrementally\r\nin a new branch and using CI validation to identify the bug.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/coreclr/pull/26475","RelatedDescription":"Open PR \"WIP: build managed artifacts for all *nix tests on one platform\" (#26475)"},{"Id":"487918243","IsPullRequest":true,"CreatedAt":"2019-09-01T18:43:09","Actor":"AustinWise","Number":"26473","RawContent":null,"Title":"Fix printf when failing to load coredistools.","State":"open","Body":"In #26235 a call to `LogError` (a `printf`-like macro) was changed so that the arguments no longer match the format specifiers. This adds back a parameter.","Url":"https://github.com/dotnet/coreclr/pull/26473","RelatedDescription":"Open PR \"Fix printf when failing to load coredistools.\" (#26473)"},{"Id":"487764097","IsPullRequest":true,"CreatedAt":"2019-09-01T18:06:56","Actor":"dotnet-maestro[bot]","Number":"26462","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190831.9\r\n- **Date Produced**: 9/1/2019 5:56 AM\r\n- **Commit**: cabc10d2675e4b61f349b7b7887f549ad15bd060\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19431.9\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26462","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#26462)"},{"Id":"487878101","IsPullRequest":true,"CreatedAt":"2019-09-01T18:06:44","Actor":"dotnet-maestro[bot]","Number":"26470","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190831.3\r\n- **Date Produced**: 8/31/2019 5:22 PM\r\n- **Commit**: c4b450ba5d9898be09fe589ba2583772c70a4712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19431.3\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19431.3\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26470","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#26470)"},{"Id":"487893804","IsPullRequest":false,"CreatedAt":"2019-09-01T14:41:06","Actor":"koszeggy","Number":"26472","RawContent":null,"Title":"MemoryStream should be serializable in .NET Core 3","State":"open","Body":"**Releated Issue:** [This one](https://github.com/dotnet/coreclr/issues/17460) complains about broken WCF services but was closed as will not be fixed.\r\n\r\nNow here is another issue if `MemoryStream` is not serializable: The .NET Framework serializes `MemoryStream` instances for embedded binary resources. Now the unit tests of my custom [ResXResourceReader](http://docs.kgysoft.net/corelibraries/?topic=html/T_KGySoft_Resources_ResXResourceReader.htm) class are failing in .NET Core because the binary resources cannot be deserialized from .resx files anymore.\r\n\r\n> Note: Only the embedded resources are affected, the file references are returned as a `MemoryStream` without any issue.\r\n\r\n_This could be relevant for .NET Core 3 where the WinForms version of `ResXResourceReader` will be available again._\r\n\r\nInstead of arguing that serializing a `byte[]` is more reasonable (which I basically agree with) wouldn't it just possible to reintroduce the `[Serializable]` attribute for `MemoryStream`? It is essentially a `byte[]` along with a few integers so nothing as dangerous as a delegate or something.\r\n\r\n> Note 2: `ResourceManager` is able to deserialize the affected resource from compiled resources as an `UnmanagedMemoryStreamWrapper`. ~Only the direct .resx processing fails~\r\n**Edit:** For embedded resources also the `ResourceManager` fails in .NET Core saying _\"Cannot read resources that depend on serialization.\"_. Only the file references are returned as `UnmanagedMemoryStreamWrapper` (a generic binary file is usually added as `byte[]` while sound resources are added as `MemoryStream`).\r\n\r\nOf course, I could use a prepared `ISurrogateSelector` in my [deserializer](https://github.com/koszeggy/KGySoft.CoreLibraries/blob/f9429d7022849ad0cbfca04466dcbebdf952a154/KGySoft.CoreLibraries/Resources/ResXDataNode.cs#L1411) but that would not cure the same issue in the system version. But I prefer compatibility over nasty hacks. Especially when the fix is that simple.","Url":"https://github.com/dotnet/coreclr/issues/26472","RelatedDescription":"Open issue \"MemoryStream should be serializable in .NET Core 3\" (#26472)"},{"Id":"487892293","IsPullRequest":false,"CreatedAt":"2019-09-01T14:26:21","Actor":"fbrosseau","Number":"26471","RawContent":null,"Title":"Raw array data does not count as collectible AssemblyLoadContext root?","State":"open","Body":"Bonjour\r\n\r\n(Version: 3.0.0-preview8-28405-07)\r\n\r\nWith the new compiler optimization letting user code get access to the raw compile-time array data when wrapped in a ReadOnlySpan, it is possible to crash the runtime by having the source module unload. My understanding is that this repro is 100% safe code.\r\n\r\nAssembly 1:\r\n```\r\nusing System;\r\n\r\npublic class SpanAccessor : IReturnSpan\r\n{\r\n    public static ReadOnlySpan<byte> RawData => new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\r\n    public ReadOnlySpan<byte> GetSpan()\r\n    {\r\n        return RawData;\r\n    }\r\n}\r\n```\r\n\r\nAssembly 2:\r\n```\r\nusing System;\r\nusing System.IO;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Runtime.Loader;\r\n\r\npublic interface IReturnSpan\r\n{\r\n    ReadOnlySpan<byte> GetSpan();\r\n}\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var span = LoadAssembly();\r\n        while (true)\r\n        {\r\n            GC.Collect();\r\n            Console.WriteLine(span[0]);\r\n        }\r\n    }\r\n\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    private static ReadOnlySpan<byte> LoadAssembly()\r\n    {\r\n        var alc = new AssemblyLoadContext(\"test\", isCollectible: true);\r\n        var a = alc.LoadFromAssemblyPath(Path.GetFullPath(\"Unloaded.dll\"));\r\n\r\n        var spanAccessor = (IReturnSpan)Activator.CreateInstance(a.GetType(\"SpanAccessor\"));\r\n\r\n        alc.Unload();\r\n\r\n        return spanAccessor.GetSpan();\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/26471","RelatedDescription":"Open issue \"Raw array data does not count as collectible AssemblyLoadContext root?\" (#26471)"},{"Id":"487787618","IsPullRequest":true,"CreatedAt":"2019-09-01T02:34:07","Actor":"BruceForstall","Number":"26466","RawContent":null,"Title":"Save corefx test build artifacts to unique folder","State":"closed","Body":"It would be better to also include the `r2r` and `corefx` tags\r\nin the archive filename, for clarity, but that is a bigger change\r\nand not necessary to fix the current failing jobs due to the\r\nexisting name conflict.\r\n\r\nFixes a problem identified in https://github.com/dotnet/coreclr/pull/26392","Url":"https://github.com/dotnet/coreclr/pull/26466","RelatedDescription":"Closed or merged PR \"Save corefx test build artifacts to unique folder\" (#26466)"},{"Id":"487813586","IsPullRequest":false,"CreatedAt":"2019-08-31T21:34:51","Actor":"hans-olav","Number":"26468","RawContent":null,"Title":"Could not load file or assembly ... The object already exists. (0x80071392)","State":"open","Body":"We're running .NET Core 3.0.0-preview7-27912-14 in SQL Server test infra and we're seeing a puzzling assembly load error. I've never seen this before and neither has the internet it looks like from some quick searches.\r\n\r\nIt appears to be some sort of race in the assembly loader. We've had 92 hits over the past 20 days. In the same period we ran this command ~3 million times, so a hit rate of 0.003 %.\r\n\r\nThis is the error:\r\n\r\n```\r\nUnhandled exception. System.IO.FileLoadException: Could not load file or assembly 'System.Threading.Tasks, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The object already exists. (0x80071392)\r\nFile name: 'System.Threading.Tasks, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\nat Vfs.Common.CommandLine.CommandParser.ExecuteAndHandle(String programName, String[] args, ICommand[] commands)\r\nat Vfs.Driver.Program.Main(String[] args)\r\n```\r\n\r\nWe're going to try updating to preview8 to see if that solves it and report back, but wanted to get this logged since I didn't see a fixed bug relating to this.\r\n\r\nGiven the low occurrence rate I don't think we can expect a repro, but if there are logging/tracing we can turn on to collect info, we can do so.","Url":"https://github.com/dotnet/coreclr/issues/26468","RelatedDescription":"Open issue \"Could not load file or assembly ... The object already exists. (0x80071392)\" (#26468)"},{"Id":"487789616","IsPullRequest":true,"CreatedAt":"2019-08-31T16:56:21","Actor":"jashook","Number":"26467","RawContent":null,"Title":"Disambiguate corefx test artifacts","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26467","RelatedDescription":"Closed or merged PR \"Disambiguate corefx test artifacts\" (#26467)"},{"Id":"487772090","IsPullRequest":false,"CreatedAt":"2019-08-31T13:49:06","Actor":"verelpode","Number":"26465","RawContent":null,"Title":"Idea:  Extension/derivation of sealed classes","State":"open","Body":"I believe this ~~proposal~~ idea -- if implemented -- would require changes in both CoreCLR and the C# compiler, thus I'm posting it in this repo.\r\n\r\nVarious usage cases exist where it is desirable to extend sealed classes.  This is already partially supported by the preexisting \"extension methods\" feature in C#, but it is rather limited.  ~~I propose to further reduce these limits as follows.~~  These limits could be further reduced.  I would like to share the following idea with the community, for discussion purposes.  \r\n\r\nAllow a class/type to derived from a sealed class/type, but with the following limitations and abilities:\r\n* The subclass cannot override any `virtual` methods in the sealed base class.\r\n* The subclass cannot re-implement any interface that is already implemented in the sealed base class.\r\n* The subclass can implement any new interfaces that are NOT implemented in the sealed base class.\r\n* Any new interfaces implemented by the subclass are only available/visible via the subclass (see following example).\r\n* The subclass can define new members (fields, properties, events, methods, constructors).\r\n* The subclass can access `protected` members in the sealed base class.  Alternatively, if this causes a problem for some reason, it would also be acceptable to deny access to `protected` members.\r\n\r\nThe following limitation is likely necessary and is acceptable:\r\nAny new interface implemented by the subclass is only available/visible via the subclass, or if the object/instance is specifically typecasted to that interface.  For example:\r\n\r\n```\r\nsealed class MyBaseClass\r\n{\r\n}\r\n\r\nclass MySubClass : MyBaseClass, ITest1\r\n{\r\n}\r\n\r\ninterface ITest1\r\n{\r\n}\r\n\r\nMySubClass instance = new MySubClass();\r\nITest1 testInterface = instance;  // OK, as normal.\r\nMyBaseClass baseInstance = instance;\r\ntestInterface = baseInstance as ITest1; // may produce NULL.\r\n```\r\n\r\n#### EDIT:\r\nTo clarify, this message is intended to be only an idea for discussion purposes, not a feature request nor demand.  It's not even a suggestion anymore.  Apparently I made a mistake when I named this issue with \"Proposal:\", thus I've now renamed it to \"Idea:\" in order to be friendlier.  To my surprise, I didn't know that non-staff participants of .NET Foundation repos interpret \"Proposal:\" negatively, approximately as if it means \"Feature demand:\".  It was not my intention to represent this issue or previous issues as feature requests or demands.  I hope that the intent is now clear:  Only an idea for discussion purposes.\r\n","Url":"https://github.com/dotnet/coreclr/issues/26465","RelatedDescription":"Open issue \"Idea:  Extension/derivation of sealed classes\" (#26465)"},{"Id":"487765350","IsPullRequest":true,"CreatedAt":"2019-08-31T12:28:14","Actor":"dotnet-maestro[bot]","Number":"26464","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9a4bff4b-85c2-4174-9247-08d6c732a216)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190830.09\r\n- **Date Produced**: 8/30/2019 11:34 PM\r\n- **Commit**: 44e933b12f176895fae723d1f03c8424070880fc\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19430-09\r\n\r\n[marker]: <> (End:9a4bff4b-85c2-4174-9247-08d6c732a216)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26464","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/core-setup\" (#26464)"},{"Id":"487709897","IsPullRequest":false,"CreatedAt":"2019-08-31T00:50:02","Actor":"TahirAhmadov","Number":"26459","RawContent":null,"Title":"Proposal: Modify Object class, remove ToString, static and instance Equals, and GetHashCode methods; and the == operator","State":"closed","Body":"These methods should never have been members of the Object class.\r\n- ToString only makes sense for a tiny subset of types which have a string representation: primitives, enums, and few other \"value types\" such as DateTime. These can implement IFormattable (which they already do anyway). Absolutely no need to have it for all types. Removing it would force everybody to start using the appropriate attribute for debugger string representation.\r\n- Equals only makes sense for comparable types, which include all of the types mentioned above, plus a couple of other categories, for example, application entity classes. Again, we already have IEquatable and IEqualityComparer - implement these if you need. Dictionary<,> starts requiring that TKey implements IEquatable, and maybe another type CustomDictionary<,> needs a IEqualityComparer<TKey>. \r\n- All of the above applies to GetHashCode, too. I would only add that I would split it away from Equals, in some rare cases Equals is needed but GetHashCode is not. For example, HashSet<> and Dictionary<,> need both, whereas the == operator only needs Equals. (See below) Basically, we'll have IEquatable, IHashable, and IEquatableHashable (useful for Dictionary<,> and HashSet<>).\r\n- The == operator causes great confusion in C#. (I know this is CLR repo but bear with me for a second.) Reference equality is one the least used features ever; it also causes problems with boxed types, etc. \"Content\" equality (using Equals) only makes sense for those types that implement IEquatable. I think out of the box the == operator should be defined only for those types which implement IEquatable. I'm not sure though if compiler should auto-define == operator for types if IEquatable is implemented; maybe it should be defined manually, in addition to Equals.","Url":"https://github.com/dotnet/coreclr/issues/26459","RelatedDescription":"Closed issue \"Proposal: Modify Object class, remove ToString, static and instance Equals, and GetHashCode methods; and the == operator\" (#26459)"},{"Id":"487712148","IsPullRequest":true,"CreatedAt":"2019-08-31T00:44:53","Actor":"echesakovMSFT","Number":"26460","RawContent":null,"Title":"Implement genProfilingEnterCallback genProfilingLeaveCallback on Arm64","State":"open","Body":"Work towards https://github.com/dotnet/coreclr/issues/19368","Url":"https://github.com/dotnet/coreclr/pull/26460","RelatedDescription":"Open PR \"Implement genProfilingEnterCallback genProfilingLeaveCallback on Arm64\" (#26460)"},{"Id":"487708540","IsPullRequest":true,"CreatedAt":"2019-08-31T00:12:06","Actor":"AaronRobinsonMSFT","Number":"26458","RawContent":null,"Title":"Conditionally remove the GC transition from a P/Invoke","State":"open","Body":"This has been tested with a simple native function `BOOL NextUInt(DWORD *t)` and works in all scenarios:\r\n\r\n```csharp\r\npublic static class NativeLibrary\r\n{\r\n    [DllImport(nameof(NativeLibrary), EntryPoint = \"NextUInt\")]\r\n    [SuppressGCTransition]\r\n    public static extern unsafe int NextUInt_Fast(int* n);\r\n\r\n    [DllImport(nameof(NativeLibrary), EntryPoint = \"NextUInt\")]\r\n    public static extern unsafe int NextUInt_Slow(int* n);\r\n\r\n    [DllImport(nameof(NativeLibrary), EntryPoint = \"NextUInt\")]\r\n    [SuppressGCTransition]\r\n    public static extern unsafe bool NextUInt_VerySlow(int* n);\r\n\r\n    [DllImport(nameof(NativeLibrary), EntryPoint = \"NextUInt\")]\r\n    public static extern unsafe bool NextUInt_Slowest(int* n);\r\n}\r\n```\r\n\r\n**TODO:**\r\n\r\n- [x] Investigate if GC Polling should occur post unmanaged call.\r\n**NOTES** This has been considered and at present it appears to take back some of the reason for this API - removal of overhead. The suggestion for a Roslyn analyzer is intended to provide user guidance. \r\n\r\n- [x] Update additional locations where `info.compCallUnmanaged` is used as a check for a P/Invoke frame.\r\n\r\n- [x] Collect performance data.\r\n**NOTES** See https://github.com/dotnet/coreclr/pull/26458#issuecomment-526855723.\r\n\r\n- [x] Write sniff test for consumption.\r\n\r\n- [x] Validate cases where a reverse P/Invoke is attempted is properly handled by the runtime.\r\n**NOTES** The Runtime attempts to validate the thread is switching from Preemptive to Cooperative mode. In this case that is not happening and [`COR_E_EXECUTIONENGINE` is thrown](https://github.com/dotnet/coreclr/blob/5d16005b984b9b27ce59245bca87aa225b2ca0b7/src/vm/dllimportcallback.cpp#L838-L847).\r\n\r\n- [ ] `System.Runtime.InteropServices.SuppressGCTransitionAttribute` class must pass API review (https://github.com/dotnet/corefx/issues/40740).\r\n\r\n**Future issues to file:**\r\n\r\n- Apply `SuppressGCTransition` to appropriate P/Invoke calls in `System.Private.CoreLib`.\r\n\r\n- Apply `SuppressGCTransition` to appropriate P/Invoke calls during WPF and ASP.Net Core start-up.\r\n\r\n- Creation of Roslyn analyzer support to detect potential misuse - see https://github.com/dotnet/coreclr/pull/26458#discussion_r319770298.\r\n\r\n- Ensure work for [function pointers](https://github.com/dotnet/csharplang/blob/master/proposals/function-pointers.md) can benefit from this work - see https://github.com/dotnet/coreclr/pull/26458#issuecomment-526910943.\r\n\r\n/cc @jkotas @davidwrighton @jkoritzinsky @dotnet/jit-contrib @jeffschwMSFT ","Url":"https://github.com/dotnet/coreclr/pull/26458","RelatedDescription":"Open PR \"Conditionally remove the GC transition from a P/Invoke\" (#26458)"},{"Id":"487712452","IsPullRequest":false,"CreatedAt":"2019-08-31T00:10:03","Actor":"VSadov","Number":"26461","RawContent":null,"Title":"Consider weakly caching large arrays in the ArrayPool","State":"open","Body":"Currently there is a limit on arrays that ArrayPool can retain. The reason for that is to control over how much memory can be retained by the pool. That makes sense.\r\n\r\nHowever, when user does Rent for an array larger than the limit, ArrayPool just delegates to `AllocateUninitializedArray` and when the array is returned, it is simply dropped. \r\n\r\nThere is no problem with correctness here since the memory of the array will be eventually reclaimed by GC and then used again. However, since large arrays do not benefit from generational heuristics of the GC and there could be a substantial delay between the array becoming unreachable and being collected/swept. \r\nAs a result, a rapid rent/return cycle of large arrays could have impact on the heap size due to \"floating garbage\".\r\n\r\nThis scenario can be mitigated by caching large arrays in the pool while referring to them weakly: \r\n-\tLogically extend the buckets to the larger than the current limit size, but refer to the \"large\" arrays via weak references.\r\n-\tDo not count these towards the trim threshold since thy are not retained by the pool.\r\n-\tDo not trim them either since that would have no effect.\r\n\r\nSince arrays need to be allocated anyways, this will not directly contribute to the heap size. However such arrays would be able to recycle without going through GC, when GC is not fast enough, thus masking GC latency.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/26461","RelatedDescription":"Open issue \"Consider weakly caching large arrays in the ArrayPool\" (#26461)"},{"Id":"487702838","IsPullRequest":true,"CreatedAt":"2019-08-30T23:30:40","Actor":"Maoni0","Number":"26457","RawContent":null,"Title":"WIP oom","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26457","RelatedDescription":"Open PR \"WIP oom\" (#26457)"},{"Id":"487700222","IsPullRequest":true,"CreatedAt":"2019-08-30T23:14:40","Actor":"briansull","Number":"26456","RawContent":null,"Title":"[WIP] Implement PerfScore","State":"open","Body":" - PerfScore represents an estimate of the dynamic execution cost for the method\r\n    emitter::insExecutionCharacteristics emitter::getInsExecutionCharacteristics(instrDesc* id)\r\n - We track the BasicBlock weight for each instruction group\r\n - PerfScore also uses the codesize as a minor factor, both the hot code size and the cold code size\r\n - Provides an x64 implementation of getInsExecutionCharacteristics.","Url":"https://github.com/dotnet/coreclr/pull/26456","RelatedDescription":"Open PR \"[WIP] Implement PerfScore\" (#26456)"},{"Id":"487686693","IsPullRequest":true,"CreatedAt":"2019-08-30T22:05:31","Actor":"jkoritzinsky","Number":"26455","RawContent":null,"Title":"WIP: Enable minidumps on all helix runs.","State":"open","Body":"Set COMPlus_DbgEnableMiniDump on all helix test runs.\r\n\r\ncc: @dotnet/coreclr-infra \r\n","Url":"https://github.com/dotnet/coreclr/pull/26455","RelatedDescription":"Open PR \"WIP: Enable minidumps on all helix runs.\" (#26455)"},{"Id":"487653497","IsPullRequest":true,"CreatedAt":"2019-08-30T20:13:23","Actor":"jkoritzinsky","Number":"26454","RawContent":null,"Title":"Remove unused CMake command to build native test assets as part of product test build.","State":"open","Body":"We never want to build the native test assets when building our product build. We build them separately.\r\n\r\nWe also don't currently ever pass in `CLR_CMAKE_BUILD_TESTS` into the build script (#26176 removed the only place it was passed in).","Url":"https://github.com/dotnet/coreclr/pull/26454","RelatedDescription":"Open PR \"Remove unused CMake command to build native test assets as part of product test build.\" (#26454)"},{"Id":"487818635","IsPullRequest":false,"CreatedAt":"2017-06-21T20:47:45","Actor":"VSadov","Number":"26469","RawContent":null,"Title":"Consider detecting and optimizing common range check patterns","State":"open","Body":"It is very common to see code such as:\r\n`(num >= '0' && num <= '9')`\r\n\r\nThe efficient way to emit such checks is: \r\n`(uint)(num - '0') <= ('9' '- '0')`\r\n\r\nThat often comes up in code reviews (see:https://github.com/dotnet/corefxlab/pull/1616 )\r\n\r\nIt should not be too hard to handle this kind of strength reduction in th ecompiler.","Url":"https://github.com/dotnet/coreclr/issues/26469","RelatedDescription":"Open issue \"Consider detecting and optimizing common range check patterns\" (#26469)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"488395681","IsPullRequest":true,"CreatedAt":"2019-09-03T05:15:21","Actor":"dotnet-maestro[bot]","Number":"12473","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190902.8\r\n- **Date Produced**: 9/3/2019 4:10 AM\r\n- **Commit**: 9e9aaf47b6684ef37bd1a35d088aeed275c8dfc3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19452.8\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19452.8\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19452.8\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19452.8\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19452.8\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12473","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#12473)"},{"Id":"488361437","IsPullRequest":true,"CreatedAt":"2019-09-03T02:50:39","Actor":"dotnet-maestro[bot]","Number":"12472","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190902.7\r\n- **Date Produced**: 9/3/2019 1:14 AM\r\n- **Commit**: 9e9aaf47b6684ef37bd1a35d088aeed275c8dfc3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19452.7\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19452.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19452.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19452.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19452.7\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12472","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12472)"},{"Id":"488332929","IsPullRequest":true,"CreatedAt":"2019-09-02T23:30:41","Actor":"dotnet-maestro[bot]","Number":"12471","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190902.6\r\n- **Date Produced**: 9/2/2019 9:54 PM\r\n- **Commit**: 4b175eb55dafc7aef1f978c2398bdd20c9e33ae6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19452.6\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19452.6\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19452.6\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19452.6\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19452.6\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12471","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12471)"},{"Id":"488107519","IsPullRequest":true,"CreatedAt":"2019-09-02T20:41:40","Actor":"dotnet-maestro[bot]","Number":"12469","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190902.5\r\n- **Date Produced**: 9/2/2019 7:12 PM\r\n- **Commit**: 26dcd7e6def527c1ba1479fcb46918ab6725371b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19452.5\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19452.5\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19452.5\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19452.5\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19452.5\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12469","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12469)"},{"Id":"488261834","IsPullRequest":false,"CreatedAt":"2019-09-02T16:28:37","Actor":"dasMulli","Number":"12470","RawContent":null,"Title":"CLI experience for managing framework references","State":"open","Body":"Similar to managing references to NuGet packages and other projects (P2P references), the CLI should provide a mechanism to manage reference to frameworks.\r\n\r\nLooking at a few 3.0 apps being built, I have seen horrible workarounds to make library projects trying to make use of types in the ASP.NET Core shared frameworks for creating separate projects for things like controllers for certain APIs, reusable middleware, action filters and so on. One involves creating a web app with an empty Main function..\r\n\r\nWhile users will need to learn about referencing frameworks using `FrameworkReference`, I think a CLI command should also be an option to manage these references because.\r\n\r\nA bonus is that the CLI can know which frameworks are available for which TFM.\r\n\r\nThis may also apply to libraries using types of WinForms or WPF (even though XAML might not work, one may want to use the framework reference to write useful shareable types), but at least there are project templates for wpflib, winformslib.\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12470","RelatedDescription":"Open issue \"CLI experience for managing framework references\" (#12470)"},{"Id":"488104692","IsPullRequest":false,"CreatedAt":"2019-09-02T09:54:04","Actor":"tmds","Number":"12468","RawContent":null,"Title":"dotnet new is slow with 3.0 sdk","State":"open","Body":"`dotnet new` takes much longer with 3.0 sdk. From less than half a second with 2.2, to more than 3 seconds with 3.0:\r\n\r\n```\r\n$ dotnet --version\r\n2.2.108\r\n$ time dotnet new console --no-restore\r\nThe template \"Console Application\" was created successfully.\r\n\r\nreal\t0m0.416s\r\nuser\t0m0.395s\r\nsys\t0m0.039s\r\n```\r\n\r\n```\r\n$ dotnet --version\r\n3.0.100-preview8-013656\r\n$ time dotnet new console --no-restore\r\nThe template \"Console Application\" was created successfully.\r\n\r\nreal\t0m3.369s\r\nuser\t0m0.847s\r\nsys\t0m0.070s\r\n```\r\n\r\nThe message `The template \"Console Application\" was created successfully.` appears as fast, but then the program still idle for some time.","Url":"https://github.com/dotnet/cli/issues/12468","RelatedDescription":"Open issue \"dotnet new is slow with 3.0 sdk\" (#12468)"},{"Id":"488058265","IsPullRequest":false,"CreatedAt":"2019-09-02T08:12:11","Actor":"robertmclaws","Number":"12467","RawContent":null,"Title":"dotnet pack wildcard exclusions","State":"open","Body":"When I call `dotnet pack`, I can have wildcard exclusions for the path. For example:\r\n`**/*.csproj;!**/MyFramework.Templates.*.csproj;**/MyFramework.Templates.Package.csproj;`\r\n\r\nThe same is not true when I call `dotnet restore`. If I want projects with a certain set of criteria to be left out, I have to manually specify each project. That can get kinda bonkers on large projects.\r\n\r\nIf you folks could please rectify the situation, that would be great. Thanks!","Url":"https://github.com/dotnet/cli/issues/12467","RelatedDescription":"Open issue \"dotnet pack wildcard exclusions\" (#12467)"},{"Id":"488036048","IsPullRequest":true,"CreatedAt":"2019-09-02T07:50:42","Actor":"dotnet-maestro[bot]","Number":"12466","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190901.7\r\n- **Date Produced**: 9/2/2019 6:12 AM\r\n- **Commit**: 1b429e8f37ec1314165331481079af9632981c0c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19451.7\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19451.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19451.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19451.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19451.7\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12466","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12466)"},{"Id":"487999500","IsPullRequest":true,"CreatedAt":"2019-09-02T05:50:41","Actor":"dotnet-maestro[bot]","Number":"12465","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190901.6\r\n- **Date Produced**: 9/2/2019 4:13 AM\r\n- **Commit**: ae1362ff29650bc471e65a38330e79bcb0c67416\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19451.6\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19451.6\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19451.6\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19451.6\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19451.6\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12465","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12465)"},{"Id":"487941166","IsPullRequest":true,"CreatedAt":"2019-09-01T23:45:47","Actor":"dotnet-maestro[bot]","Number":"12464","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190901.5\r\n- **Date Produced**: 9/1/2019 10:08 PM\r\n- **Commit**: ae1362ff29650bc471e65a38330e79bcb0c67416\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19451.5\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19451.5\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19451.5\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19451.5\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19451.5\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12464","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12464)"},{"Id":"487929647","IsPullRequest":true,"CreatedAt":"2019-09-01T21:25:40","Actor":"dotnet-maestro[bot]","Number":"12463","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190901.4\r\n- **Date Produced**: 9/1/2019 7:57 PM\r\n- **Commit**: dd6b0fefee06929fd7e643c68502d39cda449151\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19451.4\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19451.4\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19451.4\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19451.4\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19451.4\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12463","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12463)"},{"Id":"487920124","IsPullRequest":true,"CreatedAt":"2019-09-01T19:40:41","Actor":"dotnet-maestro[bot]","Number":"12462","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190901.3\r\n- **Date Produced**: 9/1/2019 6:11 PM\r\n- **Commit**: 935899164fe464349001a9a67ad0175aa2bf780a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19451.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19451.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19451.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19451.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19451.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12462","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12462)"},{"Id":"487909499","IsPullRequest":true,"CreatedAt":"2019-09-01T17:45:42","Actor":"dotnet-maestro[bot]","Number":"12461","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190901.2\r\n- **Date Produced**: 9/1/2019 4:19 PM\r\n- **Commit**: 7f46800bde35842a5e1d945857c14a172bd78122\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19451.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19451.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19451.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19451.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19451.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12461","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12461)"},{"Id":"487904871","IsPullRequest":true,"CreatedAt":"2019-09-01T16:54:53","Actor":"dotnet-maestro[bot]","Number":"12460","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190901.1\r\n- **Date Produced**: 9/1/2019 4:24 PM\r\n- **Commit**: fe1c4c6fc43807e30351c6a3a2e2cea9bafc2f43\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc1.19451.1\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12460","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12460)"},{"Id":"487901366","IsPullRequest":true,"CreatedAt":"2019-09-01T16:30:43","Actor":"dotnet-maestro[bot]","Number":"12458","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190901.1\r\n- **Date Produced**: 9/1/2019 3:00 PM\r\n- **Commit**: 7f46800bde35842a5e1d945857c14a172bd78122\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19451.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19451.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19451.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19451.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19451.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12458","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12458)"},{"Id":"487894208","IsPullRequest":false,"CreatedAt":"2019-09-01T14:59:52","Actor":"svick","Number":"12457","RawContent":null,"Title":"Tab completion for \"dotnet new\"","State":"closed","Body":"## Steps to reproduce\r\n\r\n1. Enable tab completion for `dotnet` in PowerShell.\r\n2. Type e.g. `dotnet new cl<Tab><Tab>`.\r\n\r\n## Expected  behavior\r\n\r\nTab completion works for `dotnet new` templates.\r\n\r\n## Actual behavior\r\n\r\nTab completion doesn't work. This can also be seen using `dotnet complete`:\r\n\r\n```powershell\r\n> dotnet complete \"dotnet new c\"\r\n--force\r\n--nuget-source\r\n--update-check\r\n> dotnet complete \"dotnet new cl\"\r\n>\r\n```\r\n\r\nNotice that options to `dotnet new` are listed, but template names are not.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   5.0.100-alpha1-013867\r\n Commit:    c74c7ef65e\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-alpha1-013867\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0-alpha1.19425.8\r\n  Commit:  70a3592bd4\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12457","RelatedDescription":"Closed issue \"Tab completion for \"dotnet new\"\" (#12457)"},{"Id":"487849288","IsPullRequest":true,"CreatedAt":"2019-09-01T07:20:39","Actor":"dotnet-maestro[bot]","Number":"12456","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190831.9\r\n- **Date Produced**: 9/1/2019 5:56 AM\r\n- **Commit**: cabc10d2675e4b61f349b7b7887f549ad15bd060\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19431.9\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19431.9\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19431.9\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19431.9\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19431.9\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12456","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12456)"},{"Id":"487841929","IsPullRequest":true,"CreatedAt":"2019-09-01T05:50:43","Actor":"dotnet-maestro[bot]","Number":"12455","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190831.8\r\n- **Date Produced**: 9/1/2019 4:09 AM\r\n- **Commit**: f737f2532a8e123dac4100a048d039488d416497\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19431.8\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19431.8\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19431.8\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19431.8\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19431.8\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12455","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12455)"},{"Id":"487791931","IsPullRequest":true,"CreatedAt":"2019-08-31T20:42:14","Actor":"dotnet-maestro[bot]","Number":"12453","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190831.6\r\n- **Date Produced**: 8/31/2019 7:17 PM\r\n- **Commit**: 69dde4d4c7f962cc1f52499fc1bae38e342472ce\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19431.6\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19431.6\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19431.6\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19431.6\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19431.6\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12453","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12453)"},{"Id":"487808049","IsPullRequest":false,"CreatedAt":"2019-08-31T20:19:41","Actor":"arcooke","Number":"12454","RawContent":null,"Title":"dotnet run fails silently on linux","State":"open","Body":"_I'm running an unsupported distro_ (Solus) using dotnet and vs code snaps, so there is no expectation of official support.  However, I don't think `dotnet run` should be failing silently under any circumstance, supported or not.  I am happy to to try to resolve my own issue, but I'm not getting any output from dotnet that I can use to debug.  `--verbosity` option makes no difference\r\n\r\nI could use a hand here.  Screen recording:\r\n\r\n![dotnet](https://user-images.githubusercontent.com/6278400/64068754-27b9ce00-cc02-11e9-8127-8ed3cdc401b0.gif)\r\n\r\n\r\n## Steps to reproduce\r\n`dotnet run` with any options and any verbosity level\r\n\r\n## Expected  behavior\r\nProject runs, or outputs error information\r\n\r\n## Actual behavior\r\n`dotnet run` fails silently\r\n\r\n## Environment data\r\n`.bashrc`\r\n\r\n```\r\nexport MSBuildSDKsPath=/snap/dotnet-sdk/current/sdk/$(/snap/dotnet-sdk/current/dotnet --version)/Sdks\r\nexport DOTNET_ROOT=$(dirname $(realpath $(which dotnet)))\r\nexport PATH=\"$PATH:/home/adam/.dotnet/tools\"\r\n```\r\n\r\n```\r\n$ snap list\r\nName        Version                  Rev   Tracking  Publisher    Notes\r\ncode        f06011ac                 13    stable    vscode✓      classic\r\ncore        16-2.40                  7396  stable    canonical✓   core\r\ncore18      20190723                 1074  stable    canonical✓   base\r\ndotnet-sdk  3.0.100-preview8-013656  45    beta      dotnetcore✓  classic\r\n```\r\n\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013656\r\n Commit:    8bf06ffc8d\r\n\r\nRuntime Environment:\r\n OS Name:     solus\r\n OS Version:  4.0\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /snap/dotnet-sdk/45/sdk/3.0.100-preview8-013656/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28405-07\r\n  Commit:  d01b2fb7bc\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview8-013656 [/snap/dotnet-sdk/45/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19405.7 [/snap/dotnet-sdk/45/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28405-07 [/snap/dotnet-sdk/45/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12454","RelatedDescription":"Open issue \"dotnet run fails silently on linux\" (#12454)"},{"Id":"487759578","IsPullRequest":true,"CreatedAt":"2019-08-31T16:23:11","Actor":"dotnet-maestro[bot]","Number":"12450","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190831.3\r\n- **Date Produced**: 8/31/2019 2:50 PM\r\n- **Commit**: ed0af91340a962833bb0ce9888c56b542215c432\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19431.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19431.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19431.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19431.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19431.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12450","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12450)"},{"Id":"487763637","IsPullRequest":true,"CreatedAt":"2019-08-31T12:09:06","Actor":"dotnet-maestro[bot]","Number":"12452","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190830.1\r\n- **Date Produced**: 8/30/2019 12:37 PM\r\n- **Commit**: ee08152479419650891699679f4c9bf6a61d9fba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19430.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12452","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/templating\" (#12452)"},{"Id":"487763155","IsPullRequest":true,"CreatedAt":"2019-08-31T12:02:57","Actor":"dotnet-maestro[bot]","Number":"12451","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190830.3\r\n- **Date Produced**: 8/30/2019 6:51 PM\r\n- **Commit**: 316c80d0c373be63f991cc4d586db85273c1c553\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19430.3\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12451","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#12451)"},{"Id":"487747504","IsPullRequest":true,"CreatedAt":"2019-08-31T09:20:44","Actor":"dotnet-maestro[bot]","Number":"12449","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190830.14\r\n- **Date Produced**: 8/31/2019 7:44 AM\r\n- **Commit**: 8d9cefa3759f03d84e2e00ffa918b24ac1d387f8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19430.14\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19430.14\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19430.14\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19430.14\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19430.14\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12449","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12449)"},{"Id":"487901946","IsPullRequest":false,"CreatedAt":"2019-08-31T08:15:09","Actor":"hez2010","Number":"12459","RawContent":null,"Title":"Resx files weren't compiled with Release configuration","State":"open","Body":"**Version Used**: .NET Core 3.0 preview 8\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. dotnet new console\r\n2. add a resx file Resource1.resx using Visual Studio\r\n3. add some strings, files or whatever you like in the resx file\r\n4. use the resource you added in code\r\n\r\n**Expected Behavior**:\r\nProgram will run as expected\r\n\r\n**Actual Behavior**:\r\nProgram will run as expected with Debug configuration `dotnet run`, but not with Release configuration `dotnet run -c Release`, all resources becomes null.\r\n\r\nAlso, the first time running `dotnet build -c Release` will throw:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\Microsoft.Common.CurrentVersion.targets(3056,5): error : MSB3822: Non-string resources require the System.Resources.Extensions assembly at runtime, but it was not found in this project's references. [......\\ResourceFiles\\ResourceFiles.csproj]\r\n```\r\nso you need to build twice.\r\n\r\n**Repro**:\r\n[ResourceFiles.zip](https://github.com/dotnet/roslyn/files/3562194/ResourceFiles.zip)\r\n","Url":"https://github.com/dotnet/cli/issues/12459","RelatedDescription":"Open issue \"Resx files weren't compiled with Release configuration\" (#12459)"},{"Id":"487733825","IsPullRequest":true,"CreatedAt":"2019-08-31T06:51:08","Actor":"dotnet-maestro[bot]","Number":"12448","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190830.13\r\n- **Date Produced**: 8/31/2019 5:19 AM\r\n- **Commit**: 06399d63c856e8bfaff32c3b04d9fb14a44f6744\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19430.13\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19430.13\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19430.13\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19430.13\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19430.13\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12448","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12448)"},{"Id":"487725250","IsPullRequest":true,"CreatedAt":"2019-08-31T04:10:42","Actor":"dotnet-maestro[bot]","Number":"12447","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190830.11\r\n- **Date Produced**: 8/31/2019 2:39 AM\r\n- **Commit**: 67f96ca519825f9d209c5b0176b5dcef3fcbcfde\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19430.11\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19430.11\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19430.11\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19430.11\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19430.11\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12447","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12447)"},{"Id":"487715899","IsPullRequest":true,"CreatedAt":"2019-08-31T02:00:41","Actor":"dotnet-maestro[bot]","Number":"12446","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190830.10\r\n- **Date Produced**: 8/31/2019 12:21 AM\r\n- **Commit**: 040fffc8465f1933b0a46b2e734c10407fa3d88f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19430.10\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19430.10\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19430.10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19430.10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19430.10\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12446","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12446)"},{"Id":"487710722","IsPullRequest":true,"CreatedAt":"2019-08-31T01:05:42","Actor":"dotnet-maestro[bot]","Number":"12445","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190830.09\r\n- **Date Produced**: 8/30/2019 11:34 PM\r\n- **Commit**: 44e933b12f176895fae723d1f03c8424070880fc\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19430-09\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19430-09\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19430-09\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19430-09\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19430-09\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12445","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12445)"},{"Id":"487709402","IsPullRequest":false,"CreatedAt":"2019-08-31T00:18:41","Actor":"mairaw","Number":"12444","RawContent":null,"Title":"--depsfile and --runtimeconfig runtime options missing from dotnet --help","State":"open","Body":"## Steps to reproduce\r\ndotnet --help\r\n\r\n## Expected  behavior\r\nIt would list those two options (`--depsfile` and `--runtimeconfig`) under runtime-options.\r\n\r\n## Actual behavior\r\nThose options are not listed.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview9-014004\r\n Commit:    8e7ef240a5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview9-19423-09\r\n  Commit:  2be172345a\r\n\r\n.NET Core SDKs installed:\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview5-011568 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview9-014004 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview9.19424.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12444","RelatedDescription":"Open issue \"--depsfile and --runtimeconfig runtime options missing from dotnet --help\" (#12444)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"488161716","IsPullRequest":true,"CreatedAt":"2019-09-02T12:28:26","Actor":"dotnet-maestro[bot]","Number":"1495","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190901.2\r\n- **Date Produced**: 9/1/2019 5:40 PM\r\n- **Commit**: 130d8582e4973bbdb55ae737b942d214ad3c6570\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19451.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19451.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19451.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1495","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1495)"},{"Id":"487879063","IsPullRequest":true,"CreatedAt":"2019-09-01T12:27:14","Actor":"dotnet-maestro[bot]","Number":"1494","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190831.3\r\n- **Date Produced**: 8/31/2019 5:22 PM\r\n- **Commit**: c4b450ba5d9898be09fe589ba2583772c70a4712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19431.3\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19431.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19431.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1494","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1494)"},{"Id":"487768943","IsPullRequest":false,"CreatedAt":"2019-08-31T13:10:35","Actor":"chris579","Number":"1493","RawContent":null,"Title":"Make SequenceReader available","State":"open","Body":"Reading from a `ReadOnlySequence<T>` requires to keep track of position and consumed data. In core you can use the type [SequenceReader](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.sequencereader-1?view=netcore-3.0) that does that for you. In standard you don't have it which leads to three possibilities:\r\n- Write your own implementation which does similar things like `SequenceReader`\r\n- Copy the implementation of `SequenceReader`\r\n- Converting the `ReadOnlySequence<t>` to `T[]` which defeats the purpose\r\n\r\nAll options are not convenient. Making `SequenceReader` available in standard would allow libraries to use the performance benefits of `SequenceReader` without the need to rely on third party implementations or crushing performance because of allocations.","Url":"https://github.com/dotnet/standard/issues/1493","RelatedDescription":"Open issue \"Make SequenceReader available\" (#1493)"},{"Id":"487765426","IsPullRequest":true,"CreatedAt":"2019-08-31T12:39:19","Actor":"dotnet-maestro[bot]","Number":"1492","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190831.1\r\n- **Date Produced**: 8/31/2019 8:30 AM\r\n- **Commit**: 2c974d484209ab46815ec9abd35936ca66f2444e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19431.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19431.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19431.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1492","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1492)"},{"Id":"487763042","IsPullRequest":true,"CreatedAt":"2019-08-31T12:11:55","Actor":"dotnet-maestro[bot]","Number":"1491","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190830.3\r\n- **Date Produced**: 8/30/2019 6:51 PM\r\n- **Commit**: 316c80d0c373be63f991cc4d586db85273c1c553\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19430.3\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1491","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1491)"},{"Id":"487637930","IsPullRequest":true,"CreatedAt":"2019-08-30T23:35:03","Actor":"jonpryor","Number":"1490","RawContent":null,"Title":".NET Standard 2.1 needs Xamarin.Android 10.0","State":"closed","Body":"Xamarin.Android 9.5.0 was a preview release for Visual Studio 16.3\r\nPreview 1.  It has since become Xamarin.Android 10.0.0, as of\r\nVisual Studio 16.3 Preview 2.","Url":"https://github.com/dotnet/standard/pull/1490","RelatedDescription":"Closed or merged PR \".NET Standard 2.1 needs Xamarin.Android 10.0\" (#1490)"},{"Id":"487534078","IsPullRequest":false,"CreatedAt":"2019-08-30T15:44:35","Actor":"masterwok","Number":"1489","RawContent":null,"Title":"Make BigInteger Big Endian friendly like CoreFX ","State":"closed","Body":"It would be nice to expose the same big endian friendly interface for BigInteger that CoreFX does as outlined in this issue: https://github.com/dotnet/corefx/issues/24575\r\n\r\nIs this a possibility? Thank you.","Url":"https://github.com/dotnet/standard/issues/1489","RelatedDescription":"Closed issue \"Make BigInteger Big Endian friendly like CoreFX \" (#1489)"},{"Id":"487458245","IsPullRequest":true,"CreatedAt":"2019-08-30T12:40:45","Actor":"dotnet-maestro[bot]","Number":"1488","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190829.10\r\n- **Date Produced**: 8/30/2019 3:58 AM\r\n- **Commit**: ae0d0cb852a6186ca5ef8130b0bf862314485017\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19429.10\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19429.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19429.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1488","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1488)"},{"Id":"487457614","IsPullRequest":true,"CreatedAt":"2019-08-30T12:29:14","Actor":"dotnet-maestro[bot]","Number":"1487","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190830.3\r\n- **Date Produced**: 8/30/2019 6:51 PM\r\n- **Commit**: 316c80d0c373be63f991cc4d586db85273c1c553\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19430.3\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1487","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1487)"},{"Id":"487446462","IsPullRequest":true,"CreatedAt":"2019-08-30T12:11:56","Actor":"dotnet-maestro[bot]","Number":"1486","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190829.16\r\n- **Date Produced**: 8/30/2019 1:19 AM\r\n- **Commit**: e5aaea7fcfc46449b035d5b220032bfb933e98a4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19429.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1486","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1486)"},{"Id":"486948512","IsPullRequest":true,"CreatedAt":"2019-08-29T20:54:50","Actor":"ViktorHofer","Number":"1485","RawContent":null,"Title":"[release/3.0] fix syntax for the publishUsingPipelines variable","State":"closed","Body":"Same fix as in https://github.com/dotnet/corefx/commit/a596356bcd8c1a66f9401b28d7f00837a99ca788\r\n\r\ncc @Anipik ","Url":"https://github.com/dotnet/standard/pull/1485","RelatedDescription":"Closed or merged PR \"[release/3.0] fix syntax for the publishUsingPipelines variable\" (#1485)"},{"Id":"486946828","IsPullRequest":true,"CreatedAt":"2019-08-29T20:54:40","Actor":"ViktorHofer","Number":"1484","RawContent":null,"Title":"fix syntax for the publishUsingPipelines variable","State":"closed","Body":"Same fix as in https://github.com/dotnet/corefx/commit/a596356bcd8c1a66f9401b28d7f00837a99ca788\r\n\r\ncc @Anipik ","Url":"https://github.com/dotnet/standard/pull/1484","RelatedDescription":"Closed or merged PR \"fix syntax for the publishUsingPipelines variable\" (#1484)"},{"Id":"486928653","IsPullRequest":true,"CreatedAt":"2019-08-29T17:38:22","Actor":"dotnet-maestro[bot]","Number":"1482","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190828.9\r\n- **Date Produced**: 8/28/2019 11:24 PM\r\n- **Commit**: dc55bd4b7353be8e36b2f71b9557e84f743dd6f6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19428.9\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1482","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1482)"},{"Id":"486929373","IsPullRequest":true,"CreatedAt":"2019-08-29T12:41:39","Actor":"dotnet-maestro[bot]","Number":"1483","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190828.9\r\n- **Date Produced**: 8/29/2019 12:53 AM\r\n- **Commit**: 546fdc4198bdfd89504c8895c1bd608b4e92d80d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19428.9\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19428.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19428.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1483","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1483)"},{"Id":"486915660","IsPullRequest":true,"CreatedAt":"2019-08-29T12:11:56","Actor":"dotnet-maestro[bot]","Number":"1481","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190828.9\r\n- **Date Produced**: 8/28/2019 11:24 PM\r\n- **Commit**: dc55bd4b7353be8e36b2f71b9557e84f743dd6f6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19428.9\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1481","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1481)"},{"Id":"485567962","IsPullRequest":false,"CreatedAt":"2019-08-28T22:47:20","Actor":"zhouguoqing","Number":"1475","RawContent":null,"Title":".Net framework 4.6.1 Bug feedback","State":"closed","Body":"Recently, Our winform process crashed some times.\r\nWe used .Net framework 4.5.1 , runtime CLR info:\r\n0:068> lmvm clr\r\nstart             end                 module name\r\n00007fff`c0b90000 00007fff`c1576000   clr        (private pdb symbols)  c:\\temp\\mylocalsymbols\\clr.pdb\\E18D6461EB4F49A6B418E9AF91007A212\\clr.pdb\r\n    Loaded symbol image file: clr.dll\r\n    Image path: C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\clr.dll\r\n    Image name: clr.dll\r\n    Timestamp:        Fri Jun 10 09:16:55 2016 (575A1507)\r\n    CheckSum:         009E00C2\r\n    ImageSize:        009E6000\r\n    File version:     4.6.1586.0\r\n    Product version:  4.0.30319.0\r\n    File flags:       8 (Mask 3F) Private\r\n    File OS:          4 Unknown Win32\r\n    File type:        2.0 Dll\r\n    File date:        00000000.00000000\r\n    Translations:     0409.04b0\r\n    CompanyName:      Microsoft Corporation\r\n    ProductName:      Microsoft® .NET Framework\r\n    InternalName:     clr.dll\r\n    OriginalFilename: clr.dll\r\n    ProductVersion:   4.6.1586.0\r\n    FileVersion:      4.6.1586.0 built by: NETFXREL2\r\n    PrivateBuild:     DDBLD201B\r\n    FileDescription:  Microsoft .NET Runtime Common Language Runtime - WorkStation\r\n    LegalCopyright:   © Microsoft Corporation.  All rights reserved.\r\n    Comments:         Flavor=Retail\r\n\r\n We used windbg anaylze crash dump file:\r\nFAULTING_IP: \r\nclr!SVR::gc_heap::background_mark_simple1+871\r\n00007fff`c0c717d4 41f70200000080  test    dword ptr [r10],80000000h\r\n\r\nEXCEPTION_RECORD:  ffffffffffffffff -- (.exr 0xffffffffffffffff)\r\nExceptionAddress: 00007fffc0c717d4 (clr!SVR::gc_heap::background_mark_simple1+0x0000000000000871)\r\n   ExceptionCode: c0000005 (Access violation)\r\n  ExceptionFlags: 00000001\r\nNumberParameters: 2\r\n   Parameter[0]: 0000000000000000\r\n   Parameter[1]: 0000000000000000\r\nAttempt to read from address 0000000000000000\r\n\r\nDEFAULT_BUCKET_ID:  NULL_POINTER_READ\r\n\r\nPROCESS_NAME:  TeldHost.exe\r\n\r\nERROR_CODE: (NTSTATUS) 0xc0000005 - 0x%p\r\n\r\nEXCEPTION_CODE: (NTSTATUS) 0xc0000005 - 0x%p\r\n\r\nEXCEPTION_PARAMETER1:  0000000000000000\r\n\r\nEXCEPTION_PARAMETER2:  0000000000000000\r\n\r\nREAD_ADDRESS:  0000000000000000 \r\n\r\nFOLLOWUP_IP: \r\nclr!SVR::gc_heap::background_mark_simple1+871\r\n00007fff`c0c717d4 41f70200000080  test    dword ptr [r10],80000000h\r\n\r\nNTGLOBALFLAG:  0\r\n\r\nAPPLICATION_VERIFIER_FLAGS:  0\r\n\r\nFAULTING_THREAD:  0000000000002730\r\n\r\nPRIMARY_PROBLEM_CLASS:  NULL_POINTER_READ\r\n\r\nBUGCHECK_STR:  APPLICATION_FAULT_NULL_POINTER_READ\r\n\r\nLAST_CONTROL_TRANSFER:  from 00007fffc0c709da to 00007fffc0c717d4\r\n\r\nSTACK_TEXT:  \r\n000000e9`7527f3f0 00007fff`c0c709da : 00000000`00000040 000002e5`19ab92d0 00000000`00000002 000002e8`1ec8fea8 : clr!SVR::gc_heap::background_mark_simple1+0x871\r\n000000e9`7527f460 00007fff`c0c713fb : 000002e9`1b511960 00000000`00000000 00000000`00000000 00007fff`c0c713fb : clr!SVR::gc_heap::background_mark_simple+0x91\r\n000000e9`7527f490 00007fff`c0d1b058 : 000002e5`19b019f8 000000e9`7527fa40 00007fff`c0d1b020 00007fff`c0c71310 : clr!SVR::gc_heap::background_promote+0x102\r\n000000e9`7527f4e0 00007fff`c0d1afa7 : 000000e9`7527fa40 000002e5`19b019f8 000000e9`7527fa40 00007fff`c0d1b020 : clr!PinObject+0x38\r\n000000e9`7527f520 00007fff`c0d29584 : 000000e9`7527f908 000002e5`19b00000 00000000`00000004 00000000`00000001 : clr!ScanConsecutiveHandlesWithoutUserData+0x6b\r\n000000e9`7527f550 00007fff`c0d2997c : 000000e9`7527f78c 00007fff`c0d29540 000000e9`7527f7d4 000000e9`7527f948 : clr!BlockScanBlocksWithoutUserData+0x44\r\n000000e9`7527f580 00007fff`c0d29bbd : 00000000`00000000 00007fff`c0d29930 000000e9`7527f750 000000e9`7527f780 : clr!ProcessScanQNode+0x46\r\n000000e9`7527f5b0 00007fff`c0d29b2d : 000000e9`7527f8f8 000002e5`19b00000 000000e9`7527f908 000000e9`7527f750 : clr!ProcessScanQueue+0x4e\r\n000000e9`7527f5e0 00007fff`c0d29abe : 000000e9`7527f750 000000e9`7527f8f8 00000000`00000026 00000000`00000028 : clr!xxxTableScanQueuedBlocksAsync+0x5d\r\n000000e9`7527f610 00007fff`c0d167e7 : 00007fff`c0d29a60 00000000`00000002 000002e5`19b00000 000000e9`7527f938 : clr!xxxAsyncSegmentIterator+0x2d\r\n000000e9`7527f640 00007fff`c0d29a36 : 000002e5`19a149d0 00007fff`c0d299a0 000002e5`19a149d0 00000000`00000006 : clr!TableScanHandles+0x97\r\n000000e9`7527f710 00007fff`c0d1699c : 00007fff`00000000 00007fff`c0b95073 000002e9`69d12d60 00007fff`c0d29540 : clr!xxxTableScanHandlesAsync+0x9b\r\n000000e9`7527f8b0 00007fff`c0d19136 : 00007fff`c14d0d30 00000000`00000000 00000000`0000000a 00007fff`c0c71310 : clr!HndScanHandlesForGC+0x118\r\n000000e9`7527f950 00007fff`c0d16d05 : 000000e9`7527fa40 000000e9`7527fa70 00000007`00000003 000002e9`69d12d60 : clr!Ref_TracePinningRoots+0xfe\r\n000000e9`7527f9d0 00007fff`c0c7120e : 00000000`00000000 00007fff`c14db270 00007fff`c14db270 00000000`00000001 : clr!GCScan::GcScanHandles+0x45\r\n000000e9`7527fa10 00007fff`c0c70511 : 00000000`00000002 00000000`00000002 000002e5`19a8bcb0 00007fff`c0d157e1 : clr!SVR::gc_heap::background_mark_phase+0x3aa\r\n000000e9`7527faa0 00007fff`c0c70384 : 000002e9`69d12d60 000002e9`69d12d60 00000000`00000000 00000000`00000004 : clr!SVR::gc_heap::gc1+0xffffffff`fff381e1\r\n000000e9`7527faf0 00007fff`c0ba02cf : 000002e9`69d12d60 000002e5`19a8bcb0 000000e9`7527fee0 00000000`00000000 : clr!SVR::gc_heap::bgc_thread_function+0x132\r\n000000e9`7527fb40 00007fff`ce088364 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : clr!Thread::intermediateThreadProc+0x86\r\n000000e9`7527ff00 00007fff`cff770d1 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : kernel32!BaseThreadInitThunk+0x14\r\n000000e9`7527ff30 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : ntdll!RtlUserThreadStart+0x21\r\n\r\n\r\nSYMBOL_STACK_INDEX:  0\r\n\r\nSYMBOL_NAME:  clr!SVR::gc_heap::background_mark_simple1+871\r\n\r\nFOLLOWUP_NAME:  MachineOwner\r\n\r\nMODULE_NAME: clr\r\n\r\nIMAGE_NAME:  clr.dll\r\n\r\nDEBUG_FLR_IMAGE_TIMESTAMP:  575a1507\r\n\r\nSTACK_COMMAND:  ~68s; .ecxr ; kb\r\n\r\nFAILURE_BUCKET_ID:  NULL_POINTER_READ_c0000005_clr.dll!SVR::gc_heap::background_mark_simple1\r\n\r\nBUCKET_ID:  X64_APPLICATION_FAULT_NULL_POINTER_READ_clr!SVR::gc_heap::background_mark_simple1+871\r\n\r\nWATSON_STAGEONE_URL:  http://watson.microsoft.com/StageOne/TeldHost_exe/1_0_0_0/5ccea4e6/clr_dll/4_6_1586_0/575a1507/c0000005/000e17d4.htm?Retriage=1\r\n\r\nFollowup: MachineOwner\r\n---------\r\n \r\nPlease help.\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1475","RelatedDescription":"Closed issue \".Net framework 4.6.1 Bug feedback\" (#1475)"},{"Id":"486351442","IsPullRequest":true,"CreatedAt":"2019-08-28T16:04:44","Actor":"dotnet-maestro[bot]","Number":"1479","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190827.8\r\n- **Date Produced**: 8/27/2019 7:27 PM\r\n- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19427.8\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1479","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1479)"},{"Id":"486352176","IsPullRequest":true,"CreatedAt":"2019-08-28T12:40:05","Actor":"dotnet-maestro[bot]","Number":"1480","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190827.13\r\n- **Date Produced**: 8/28/2019 5:24 AM\r\n- **Commit**: 5d1a8a834df0a7b48a24f27e1ce49c4ad763f648\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19427.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19427.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19427.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1480","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1480)"},{"Id":"486337976","IsPullRequest":true,"CreatedAt":"2019-08-28T12:11:51","Actor":"dotnet-maestro[bot]","Number":"1478","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190827.8\r\n- **Date Produced**: 8/27/2019 7:27 PM\r\n- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19427.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1478","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1478)"},{"Id":"485209871","IsPullRequest":true,"CreatedAt":"2019-08-27T17:30:06","Actor":"dotnet-maestro[bot]","Number":"1472","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190826.12\r\n- **Date Produced**: 8/26/2019 10:46 PM\r\n- **Commit**: 36ce21e795e2e90081300f4cb645dfd8cf6eb2b3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19426.12\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1472","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1472)"},{"Id":"485780512","IsPullRequest":true,"CreatedAt":"2019-08-27T12:40:28","Actor":"dotnet-maestro[bot]","Number":"1477","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190826.13\r\n- **Date Produced**: 8/27/2019 7:30 AM\r\n- **Commit**: 7055b496a30dfe0f66a2f555cad31502473d144b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19426.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19426.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19426.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1477","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1477)"},{"Id":"485766905","IsPullRequest":true,"CreatedAt":"2019-08-27T12:12:03","Actor":"dotnet-maestro[bot]","Number":"1476","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190826.12\r\n- **Date Produced**: 8/26/2019 10:46 PM\r\n- **Commit**: 36ce21e795e2e90081300f4cb645dfd8cf6eb2b3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19426.12\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19426.12\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1476","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1476)"},{"Id":"485338895","IsPullRequest":false,"CreatedAt":"2019-08-26T17:04:14","Actor":"roji","Number":"1474","RawContent":null,"Title":"Add new socket TCP keepalive options","State":"open","Body":"https://github.com/dotnet/corefx/issues/25040 added the three portable TCP keepalive options to .NET Core 3.0, but they are missing from .NET Standard.","Url":"https://github.com/dotnet/standard/issues/1474","RelatedDescription":"Open issue \"Add new socket TCP keepalive options\" (#1474)"},{"Id":"485210438","IsPullRequest":true,"CreatedAt":"2019-08-26T12:37:57","Actor":"dotnet-maestro[bot]","Number":"1473","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190825.4\r\n- **Date Produced**: 8/26/2019 4:41 AM\r\n- **Commit**: ba50ba15d0747d5be1e8bd38ea03a5ba892314bd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19425.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19425.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19425.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1473","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1473)"},{"Id":"485199879","IsPullRequest":true,"CreatedAt":"2019-08-26T12:11:53","Actor":"dotnet-maestro[bot]","Number":"1471","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190825.1\r\n- **Date Produced**: 8/25/2019 12:48 PM\r\n- **Commit**: 2de3acc671fc624191672a45564f9ef130af5cd4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19425.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19425.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19425.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19425.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19425.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19425.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1471","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1471)"},{"Id":"484812113","IsPullRequest":true,"CreatedAt":"2019-08-25T14:28:38","Actor":"dotnet-maestro[bot]","Number":"1467","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190824.1\r\n- **Date Produced**: 8/24/2019 12:51 PM\r\n- **Commit**: a7b5eb8de300b6a30bd797c4ecc8769f7028aeec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19424.1\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1467","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1467)"},{"Id":"484925474","IsPullRequest":true,"CreatedAt":"2019-08-25T12:37:53","Actor":"dotnet-maestro[bot]","Number":"1470","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190824.4\r\n- **Date Produced**: 8/24/2019 5:51 PM\r\n- **Commit**: e92b6d57af9b7299f2a6fca2a599f09dce4f672a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19424.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19424.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19424.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1470","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1470)"},{"Id":"484923190","IsPullRequest":true,"CreatedAt":"2019-08-25T12:11:47","Actor":"dotnet-maestro[bot]","Number":"1469","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190824.1\r\n- **Date Produced**: 8/24/2019 12:51 PM\r\n- **Commit**: a7b5eb8de300b6a30bd797c4ecc8769f7028aeec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19424.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1469","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1469)"},{"Id":"484812226","IsPullRequest":true,"CreatedAt":"2019-08-24T12:37:35","Actor":"dotnet-maestro[bot]","Number":"1468","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190823.8\r\n- **Date Produced**: 8/24/2019 1:53 AM\r\n- **Commit**: 9f3111e1e2292b45dfd6fd28891f7ba031c3f6ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19423.8\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19423.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19423.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1468","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1468)"},{"Id":"484810097","IsPullRequest":true,"CreatedAt":"2019-08-24T12:11:49","Actor":"dotnet-maestro[bot]","Number":"1466","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190823.6\r\n- **Date Produced**: 8/23/2019 5:47 PM\r\n- **Commit**: c48732c894e73e4b1f491929392a465182eb7ba6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19423.6\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19423.6\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1466","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1466)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"488358235","IsPullRequest":true,"CreatedAt":"2019-09-03T02:03:10","Actor":"stephentoub","Number":"40760","RawContent":null,"Title":"Disable RsaDecryptPkcs1LeadingZero test failing on some Windows","State":"open","Body":"https://github.com/dotnet/corefx/issues/40434\r\ncc: @bartonjs, @ViktorHofer ","Url":"https://github.com/dotnet/corefx/pull/40760","RelatedDescription":"Open PR \"Disable RsaDecryptPkcs1LeadingZero test failing on some Windows\" (#40760)"},{"Id":"488322220","IsPullRequest":true,"CreatedAt":"2019-09-03T01:59:05","Actor":"stephentoub","Number":"40757","RawContent":null,"Title":"Consolidate / cleanup disposal checks in System.Net.Sockets","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/40757","RelatedDescription":"Closed or merged PR \"Consolidate / cleanup disposal checks in System.Net.Sockets\" (#40757)"},{"Id":"488357417","IsPullRequest":false,"CreatedAt":"2019-09-03T01:58:33","Actor":"stephentoub","Number":"40759","RawContent":null,"Title":"AsymmetricEncryptionRoundtrip(useOAEP: False) test failed","State":"open","Body":"uap-Windows_NT-Debug-x64-Windows.10.Amd64.ClientRS5.Open\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=334933&view=ms.vss-test-web.build-test-results-tab&runId=9864152&resultId=100224&paneView=attachments\r\n```    System.Security.Cryptography.Xml.Tests.EncryptingAndDecryptingAsymmetric.AsymmetricEncryptionRoundtrip(useOAEP: False) [FAIL]\r\n      System.Security.Cryptography.CryptographicException : Padding is invalid and cannot be removed.\r\n      Stack Trace:\r\n        /_/src/Common/src/Internal/Cryptography/UniversalCryptoDecryptor.cs(211,0): at Internal.Cryptography.UniversalCryptoDecryptor.DepadBlock(Byte[] block, Int32 offset, Int32 count)\r\n        /_/src/Common/src/Internal/Cryptography/UniversalCryptoDecryptor.cs(104,0): at Internal.Cryptography.UniversalCryptoDecryptor.UncheckedTransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount)\r\n        /_/src/Common/src/Internal/Cryptography/UniversalCryptoTransform.cs(100,0): at Internal.Cryptography.UniversalCryptoTransform.TransformFinalBlock(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount)\r\n        /_/src/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/EncryptedXml.cs(751,0): at System.Security.Cryptography.Xml.EncryptedXml.DecryptData(EncryptedData encryptedData, SymmetricAlgorithm symmetricAlgorithm)\r\n        /_/src/System.Security.Cryptography.Xml/src/System/Security/Cryptography/Xml/EncryptedXml.cs(656,0): at System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument()\r\n        /_/src/System.Security.Cryptography.Xml/tests/Samples/EncryptingDecryptingAsymmetric.cs(78,0): at System.Security.Cryptography.Xml.Tests.EncryptingAndDecryptingAsymmetric.Decrypt(XmlDocument doc, RSA rsaKey, String keyName)\r\n        /_/src/System.Security.Cryptography.Xml/tests/Samples/EncryptingDecryptingAsymmetric.cs(101,0): at System.Security.Cryptography.Xml.Tests.EncryptingAndDecryptingAsymmetric.AsymmetricEncryptionRoundtrip(Boolean useOAEP)\r\n```","Url":"https://github.com/dotnet/corefx/issues/40759","RelatedDescription":"Open issue \"AsymmetricEncryptionRoundtrip(useOAEP: False) test failed\" (#40759)"},{"Id":"488210934","IsPullRequest":true,"CreatedAt":"2019-09-03T01:56:31","Actor":"ViktorHofer","Number":"40754","RawContent":null,"Title":"Disable one flaky PrintPage test","State":"closed","Body":"https://github.com/dotnet/corefx/issues/30223","Url":"https://github.com/dotnet/corefx/pull/40754","RelatedDescription":"Closed or merged PR \"Disable one flaky PrintPage test\" (#40754)"},{"Id":"488324424","IsPullRequest":false,"CreatedAt":"2019-09-02T21:46:57","Actor":"danielValdezR","Number":"40758","RawContent":null,"Title":"Getting NULL when using ResourceManager.GetString() with strings using placeholders","State":"open","Body":"I have a embedded Resource.resx file and a Resource.Designer.cs autogenerated containing many string resources, some of them have placeholders (i.e. \"Hello, '{0}'\") and these are the ones that are returning **null** when calling from code, i.e. Resource.KeyName. This Resource.resx file exist in a library project with TargetFrameworks net452, netstandard2.0 and netstandard2.1. I'm dealing with this issue when I run my Test Project (net452, netcoreapp3.0, netcoreapp2.2) and make use of that Resource.\r\n\r\nThis issue is only happening when the tests are ran using **net452** (I have tried with net472 also and behaves the same) with resources containing placeholders and compiling/running tests from **CLI** (dotnet test), when using VS it's working fine. I had to add the following to my .csproj of the library because it was failing at compiling: \r\n\r\n`<GenerateResourceUsePreserializedResources>**true**</GenerateResourceUsePreserializedResources>`\r\n\r\n```\r\n<PackageReference Include=\"System.Resources.Extensions\">\r\n      <Version>4.6.0-preview8.19405.3</Version>\r\n</PackageReference>\r\n```\r\n\r\n**SDK used: 3.0.100-preview8-013656**\r\n","Url":"https://github.com/dotnet/corefx/issues/40758","RelatedDescription":"Open issue \"Getting NULL when using ResourceManager.GetString() with strings using placeholders\" (#40758)"},{"Id":"488315898","IsPullRequest":false,"CreatedAt":"2019-09-02T21:02:57","Actor":"suedama1756","Number":"40756","RawContent":null,"Title":"HandleNull in JsonSerializer Throws before invoking custom JsonConverter","State":"closed","Body":"Dotnet Core: 3.0.100-preview7-012821\r\n\r\nI have a custom Option<T> struct type similar to the Option monad type supported in other languages such as scala. I have written a simple OptionJsonConvertFactory which is generally working as expected, however, the HandleNull routing in JsonSerializer appears to be using reflection on the type to verify whether the target type supports nulls and throws when deserializing \"null\" before ever calling my converter.\r\n\r\nLooking through the source I can see CustomConverterTests.ValueTypeConverterForNullWithArray tests that seem to indicate this functionality should be supported, however, these tests fail if I copy and run them.\r\n\r\nHas this already been fixed? \r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/40756","RelatedDescription":"Closed issue \"HandleNull in JsonSerializer Throws before invoking custom JsonConverter\" (#40756)"},{"Id":"488071134","IsPullRequest":true,"CreatedAt":"2019-09-02T20:48:07","Actor":"ViktorHofer","Number":"40743","RawContent":null,"Title":"Retry eventlog deletion in tests on all platforms","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/40224\r\nFixes https://github.com/dotnet/corefx/issues/38803\r\n\r\n\"A device attached to the system is not functioning.\" errors are causing failures on Windows 10 - 19H1 when trying to delete an EventLog. I'm changing the retry logic from Windows 7 to all platforms and re-enable two tests that shouldn't fail anymore with the retry.","Url":"https://github.com/dotnet/corefx/pull/40743","RelatedDescription":"Closed or merged PR \"Retry eventlog deletion in tests on all platforms\" (#40743)"},{"Id":"488240006","IsPullRequest":false,"CreatedAt":"2019-09-02T15:23:31","Actor":"lauxjpn","Number":"40755","RawContent":null,"Title":"The JSON value of length n is too large and not supported.","State":"open","Body":"When returning a single JSON string of about 3,5 MB from a controller's action (return type `byte[]`), the mentioned `System.ArgumentException` exception is thrown in my asp.net Core 3.0 (Preview 8) Api project.\r\nLooking through the docs, there seems to be no option to adjust any limit regarding this issue.\r\n```c#\r\n[HttpPost]\r\npublic async Task<ActionResult<byte[]>> GetFile()\r\n{\r\n    var largeArray = new byte[3.5 * 1024 * 1024];\r\n    return largeArray;\r\n}\r\n```\r\nException:\r\n```\r\nSystem.ArgumentException\r\n  HResult=0x80070057\r\n  Message=The JSON value of length 3770846 is too large and not supported.\r\n  Source=System.Text.Json\r\n  StackTrace:\r\n   at System.Text.Json.ThrowHelper.ThrowArgumentException_ValueTooLarge(Int32 tokenLength)\r\n```\r\nCall stack:\r\n```\r\nSystem.Text.Json.dll!System.Text.Json.ThrowHelper.ThrowArgumentException_ValueTooLarge(int tokenLength)\r\nSystem.Text.Json.dll!System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan<byte> bytes)\r\nSystem.Text.Json.dll!System.Text.Json.Serialization.Converters.JsonConverterByteArray.Write(System.Text.Json.Utf8JsonWriter writer, byte[] value, System.Text.Json.JsonSerializerOptions options)\r\nSystem.Text.Json.dll!System.Text.Json.JsonPropertyInfoNotNullable<object, byte[], byte[], byte[]>.OnWrite(ref System.Text.Json.WriteStackFrame current, System.Text.Json.Utf8JsonWriter writer)\r\nSystem.Text.Json.dll!System.Text.Json.JsonPropertyInfo.Write(ref System.Text.Json.WriteStack state, System.Text.Json.Utf8JsonWriter writer)\r\nSystem.Text.Json.dll!System.Text.Json.JsonSerializer.Write(System.Text.Json.Utf8JsonWriter writer, int originalWriterDepth, int flushThreshold, System.Text.Json.JsonSerializerOptions options, ref System.Text.Json.WriteStack state)\r\nSystem.Text.Json.dll!System.Text.Json.JsonSerializer.WriteAsyncCore(System.IO.Stream utf8Json, object value, System.Type type, System.Text.Json.JsonSerializerOptions options, System.Threading.CancellationToken cancellationToken)\r\nSystem.Text.Json.dll!System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream utf8Json, object value, System.Type type, System.Text.Json.JsonSerializerOptions options, System.Threading.CancellationToken cancellationToken)\r\nMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext context, System.Text.Encoding selectedEncoding)\r\nMicrosoft.AspNetCore.Mvc.Core.dll!Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext context)\r\n```\r\nThere seems to be a fixed max length constant `JsonConstants.MaxBase46ValueTokenSize` (btw, typo in the constant's name) set to 125 KB, that `JsonWriterHelper.ValidateBytes()` checks against.\r\n\r\nOf course I can change the response type to `plain\\text` and return it as such. Is that the intention of the hard coded 125 KB limit, or what's the reason for that?","Url":"https://github.com/dotnet/corefx/issues/40755","RelatedDescription":"Open issue \"The JSON value of length n is too large and not supported.\" (#40755)"},{"Id":"488195996","IsPullRequest":true,"CreatedAt":"2019-09-02T15:06:00","Actor":"dotnet-maestro[bot]","Number":"40752","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190901.2\r\n- **Date Produced**: 9/1/2019 5:40 PM\r\n- **Commit**: 130d8582e4973bbdb55ae737b942d214ad3c6570\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19451.2\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19451.2\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190901.1\r\n- **Date Produced**: 9/1/2019 12:39 PM\r\n- **Commit**: 26d0971f4eeaf221b6ad8a113160e02fa64670dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19451.1\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40752","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx dotnet/standard\" (#40752)"},{"Id":"488152921","IsPullRequest":true,"CreatedAt":"2019-09-02T14:22:59","Actor":"stephentoub","Number":"40746","RawContent":null,"Title":"Delete duplicate line after LINQ nullable changes","State":"closed","Body":"This line was moved into the ctor. Should have been deleted from here. Addresses post-merge PR feedback.","Url":"https://github.com/dotnet/corefx/pull/40746","RelatedDescription":"Closed or merged PR \"Delete duplicate line after LINQ nullable changes\" (#40746)"},{"Id":"488160191","IsPullRequest":true,"CreatedAt":"2019-09-02T13:45:26","Actor":"dotnet-maestro[bot]","Number":"40748","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190901.2\r\n- **Date Produced**: 9/2/2019 12:34 AM\r\n- **Commit**: e3ff5770757ee1696b18c927d5fea1b44d003459\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19451.2\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19451.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19451.2\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40748","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#40748)"},{"Id":"488157554","IsPullRequest":true,"CreatedAt":"2019-09-02T13:39:17","Actor":"dotnet-maestro[bot]","Number":"40747","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190902.1\r\n- **Date Produced**: 9/2/2019 8:56 AM\r\n- **Commit**: fb49d11c77525a6af8e5bc7067a17d9eee6948dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19452.1\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19452.1\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19452.1\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40747","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#40747)"},{"Id":"488173548","IsPullRequest":false,"CreatedAt":"2019-09-02T13:03:56","Actor":"E1adi","Number":"40750","RawContent":null,"Title":"The installation path for x64 SDK installations: \"\" cannot be the same as for x86 SDK installations: \"\"","State":"closed","Body":"Hey guys,\r\n\r\nI can't install nor uninstall .NET Core SDK v3.0 prev 8.\r\nThe Error I get is as the title:\r\nThe installation path for x64 SDK installations: \"\" cannot be the same as for x86 SDK installations: \"\"\r\n\r\nI used Revo uninstaller to delete it once and can't install it since than.\r\n\r\nAttached the log file of the installer.\r\n\r\nP.S. I can't find .Net Core SDK v3.0 prev8 on the installed programs on the machine.\r\n\r\n[Microsoft_.NET_Core_SDK_3.0.100_-_preview8_(x64)_20190901145432.log](https://github.com/dotnet/corefx/files/3566082/Microsoft_.NET_Core_SDK_3.0.100_-_preview8_.x64._20190901145432.log)\r\n","Url":"https://github.com/dotnet/corefx/issues/40750","RelatedDescription":"Closed issue \"The installation path for x64 SDK installations: \"\" cannot be the same as for x86 SDK installations: \"\"\" (#40750)"},{"Id":"488174353","IsPullRequest":false,"CreatedAt":"2019-09-02T12:49:14","Actor":"Therzok","Number":"40751","RawContent":null,"Title":"[API] FileSystemEventArgs extended with NotifyFilters information","State":"open","Body":"Currently, the FileSystemWatcher interface does not allow us to check what kind of notification filter triggered the event.\r\n\r\n# Current status\r\n\r\n```csharp\r\nvar watcher = new FileSystemWatcher(path)\r\n{\r\n    NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName,\r\n}\r\nwatcher.Created += (o, args) => Console.WriteLine(args.FullPath); // Is this a directory or a file?\r\n```\r\n\r\nThus, we're left with two options on processing the events:\r\n1. Register a separate FileSystemWatcher for each known matrix of change types. In this scenario, we would have to create one watcher for filenames, one watcher for directory names.\r\n\r\n```csharp\r\nvar fileWatcher = new FileSystemWatcher(path)\r\n{\r\n    NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName,\r\n}\r\nfileWatcher.Created += (o, args) => Console.WriteLine(\"File created: \" + args.FullPath);\r\n\r\nvar directoryWatcher = new FileSystemWatcher(path)\r\n{\r\n    NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.DirectoryName,\r\n}\r\ndirectoryWatcher.Created += (o, args) => Console.WriteLine(\"Dir created: \" + args.FullPath);\r\n```\r\n\r\n❗️ This can lead to problems with processing the data. For macOS, we'd have events processed serially, so no problem. But for Linux, we could have events processed out of order, due to each FileSystemWatcher running on its own Task.\r\n\r\n2. Do an IO probe right after.\r\n```csharp\r\nvar watcher = new FileSystemWatcher(path)\r\n{\r\n    NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName,\r\n}\r\nwatcher.Created += (o, args) =>\r\n{\r\n    var prefix = Directory.Exists(args.FullPath) ? \"Dir created: \" : \"File created: \";\r\n    Console.WriteLine(prefix + args.FullPath);\r\n}\r\n```\r\n\r\n# Rationale and Usage\r\n\r\nGiven the constraints above could hit performance for various reasons, I would like to suggest introducing a NotifyFilter field on the `FileSystemEventArgs` class.\r\n\r\n```csharp\r\nnamespace System.IO\r\n{\r\n    class FileSystemEventArgs\r\n    {\r\n        /// <summary>\r\n        /// Contains the notification filter values that triggered this event.\r\n        /// </summary>\r\n        public NotifyFilters NotifyFilter { get; }\r\n    } \r\n}\r\n```\r\n\r\nThis would allow us to avoid doing extra work at implementation levels, knowing that an event is associated with a directory via `DirectoryName` filter or just being able to check which kind of notification an event is for finer grained control without having to create multiple watchers.","Url":"https://github.com/dotnet/corefx/issues/40751","RelatedDescription":"Open issue \"[API] FileSystemEventArgs extended with NotifyFilters information\" (#40751)"},{"Id":"488160821","IsPullRequest":true,"CreatedAt":"2019-09-02T12:16:05","Actor":"dotnet-maestro[bot]","Number":"40749","RawContent":null,"Title":"[release/3.0] Update dependencies from dnceng/internal/dotnet-optimization","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fc000152-53a0-4a98-0b3e-08d6bc6f2d11)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190902.1\r\n- **Date Produced**: 9/2/2019 11:01 AM\r\n- **Commit**: 48fd58c24cddbc6c0b0de1c00204aae1170f4864\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190902.1\r\n\r\n[marker]: <> (End:fc000152-53a0-4a98-0b3e-08d6bc6f2d11)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40749","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dnceng/internal/dotnet-optimization\" (#40749)"},{"Id":"488063242","IsPullRequest":true,"CreatedAt":"2019-09-02T11:58:38","Actor":"ViktorHofer","Number":"40742","RawContent":null,"Title":"Disable TimerElapsedSignaled test","State":"closed","Body":"https://github.com/dotnet/corefx/issues/29166","Url":"https://github.com/dotnet/corefx/pull/40742","RelatedDescription":"Closed or merged PR \"Disable TimerElapsedSignaled test\" (#40742)"},{"Id":"488104769","IsPullRequest":false,"CreatedAt":"2019-09-02T09:54:13","Actor":"JulienM28","Number":"40745","RawContent":null,"Title":"System.Text.json issue with comments","State":"open","Body":".Net core 3 preview8\r\n\r\nIt's impossible to add \r\n// Comments in json files \r\n\r\nDeserialization throw an exception\r\n\r\nNewtonsoft Json worked perfectly in ths case.\r\n","Url":"https://github.com/dotnet/corefx/issues/40745","RelatedDescription":"Open issue \"System.Text.json issue with comments\" (#40745)"},{"Id":"488073394","IsPullRequest":false,"CreatedAt":"2019-09-02T08:46:51","Actor":"ViktorHofer","Number":"40744","RawContent":null,"Title":"34 System.Net.Http.Functional tests are timing out on arm64","State":"open","Body":"https://dnceng.visualstudio.com/public/_build/results?buildId=334282&view=ms.vss-test-web.build-test-results-tab&runId=9828780&resultId=100000&paneView=attachments\r\n\r\nConfiguration: `netcoreapp-Windows_NT-Release-arm64-Windows.10.Arm64.Open`\r\n\r\n**Should we increase the timeout on arm64?**\r\n\r\n```\r\nDiscovering: System.Net.Http.Functional.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Net.Http.Functional.Tests (found 785 of 1134 test cases)\r\n  Starting:    System.Net.Http.Functional.Tests (parallel test collections = on, max threads = 8)\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientEKUTest.HttpClient_ClientEKUServerAuth_Fails [SKIP]\r\n      Condition(s) not met: \"CanTestCertificates\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientEKUTest.HttpClient_NoEKUServerAuth_Ok [SKIP]\r\n      Condition(s) not met: \"CanTestCertificates\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientEKUTest.HttpClient_NoEKUClientAuth_Ok [SKIP]\r\n      Condition(s) not met: \"CanTestClientCertificates\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientEKUTest.HttpClient_ServerEKUClientAuth_Fails [SKIP]\r\n      Condition(s) not met: \"CanTestClientCertificates\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClient_SelectedSites_Test.RetrieveSite_Succeeds [SKIP]\r\n      Condition(s) not met: \"IsSelectedSitesTestEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClient_SelectedSites_Test.RetrieveSite_Debug_Helper [SKIP]\r\n      Condition(s) not met: \"IsSelectedSitesTestEnabled\"\r\n    System.Net.Http.Functional.Tests.PlatformHandler_HttpClient_SelectedSites_Test.RetrieveSite_Succeeds [SKIP]\r\n      Condition(s) not met: \"IsSelectedSitesTestEnabled\"\r\n    System.Net.Http.Functional.Tests.PlatformHandler_HttpClient_SelectedSites_Test.RetrieveSite_Debug_Helper [SKIP]\r\n      Condition(s) not met: \"IsSelectedSitesTestEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_Http2.UnreadResponseMessage_Collectible [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_Http2.ManyClients_ManyGets [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_Http2.SingleClient_ManyGets_Async [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_Http2.MakeAndFaultManyRequests [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_Http2.SingleClient_ManyGets_Sync [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_NoVersion.MakeAndFaultManyRequests [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_NoVersion.CreateAndDestroyManyClients [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_NoVersion.ManyClients_ManyGets [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_NoVersion.SingleClient_ManyGets_Sync [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_NoVersion.UnreadResponseMessage_Collectible [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_NoVersion.SingleClient_ManyGets_Async [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientEKUTest.HttpClient_ServerEKUClientAuth_Fails [SKIP]\r\n      Condition(s) not met: \"CanTestClientCertificates\"\r\n    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientEKUTest.HttpClient_NoEKUClientAuth_Ok [SKIP]\r\n      Condition(s) not met: \"CanTestClientCertificates\"\r\n    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientEKUTest.HttpClient_NoEKUServerAuth_Ok [SKIP]\r\n      Condition(s) not met: \"CanTestCertificates\"\r\n    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientEKUTest.HttpClient_ClientEKUServerAuth_Fails [SKIP]\r\n      Condition(s) not met: \"CanTestCertificates\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_Http11.UnreadResponseMessage_Collectible [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_Http11.MakeAndFaultManyRequests [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_Http11.ManyClients_ManyPosts_Async [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_Http11.SingleClient_ManyGets_Async [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_Http11.SingleClient_ManyGets_Sync [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientMiniStress_Http11.ManyClients_ManyGets [SKIP]\r\n      Condition(s) not met: \"IsStressModeEnabled\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.Credentials_DomainJoinedServerUsesKerberos_UseIpAddressAndHostHeader_Success [SKIP]\r\n      Condition(s) not met: \"IsDomainJoinedServerAvailable\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.Proxy_DomainJoinedProxyServerUsesKerberos_Success [SKIP]\r\n      Condition(s) not met: \"IsDomainJoinedServerAvailable\"\r\n    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_Authentication_Test.Credentials_ServerUsesWindowsAuthentication_Success [SKIP]\r\n      Condition(s) not met: \"IsWindowsServerAvailable\"\r\n    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_Authentication_Test.Credentials_DomainJoinedServerUsesKerberos_Success [SKIP]\r\n      Condition(s) not met: \"IsDomainJoinedServerAvailable\"\r\n    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_Authentication_Test.Credentials_DomainJoinedServerUsesKerberos_UseIpAddressAndHostHeader_Success [SKIP]\r\n      Condition(s) not met: \"IsDomainJoinedServerAvailable\"\r\n    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_Authentication_Test.Proxy_DomainJoinedProxyServerUsesKerberos_Success [SKIP]\r\n      Condition(s) not met: \"IsDomainJoinedServerAvailable\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.Credentials_ServerUsesWindowsAuthentication_Success [SKIP]\r\n      Condition(s) not met: \"IsWindowsServerAvailable\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.Credentials_DomainJoinedServerUsesKerberos_Success [SKIP]\r\n      Condition(s) not met: \"IsDomainJoinedServerAvailable\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Finalization_Http2_Test.IncompleteResponseStream_ResponseDropped_CancelsRequestToServer [FAIL]\r\n      System.TimeoutException : Task timed out after 00:01:00\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(42,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, TimeSpan timeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Finalization.cs(34,0): at System.Net.Http.Functional.Tests.HttpClientHandler_Finalization_Test.IncompleteResponseStream_ResponseDropped_CancelsRequestToServer()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Cookies_Http2.GetAsync_AddMultipleCookieHeaders_CookiesSent [FAIL]\r\n      System.TimeoutException : Task timed out after 00:01:00\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(42,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, TimeSpan timeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Cookies.cs(150,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Cookies.GetAsync_AddMultipleCookieHeaders_CookiesSent()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.HPackTest.HPack_HeaderEncoding(headerName: \":method\", expectedValue: \"POST\", expectedEncoding: [131]) [FAIL]\r\n      System.TimeoutException : WhenAllOrAnyFailed timed out after 60000ms\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(75,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(186,0): at System.Net.Test.Common.Http2LoopbackServer.CreateClientAndServerAsync(Func`2 clientFunc, Func`2 serverFunc, Int32 timeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HPackTest.cs(38,0): at System.Net.Http.Functional.Tests.HPackTest.HPack_HeaderEncoding(String headerName, String expectedValue, Byte[] expectedEncoding)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ConnectionPooling_Test.Http2_SmallConnectionTimeout_SubsequentRequestUsesDifferentConnection(timeoutPropertyName: \"PooledConnectionLifetime\") [FAIL]\r\n      System.TimeoutException : Task timed out after 00:01:00\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(42,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, TimeSpan timeout)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(207,0): at System.Net.Test.Common.Http2LoopbackServerFactory.CreateServerAsync(Func`3 funcAsync, Int32 millisecondsTimeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs(1606,0): at System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ConnectionPooling_Test.Http2_SmallConnectionTimeout_SubsequentRequestUsesDifferentConnection(String timeoutPropertyName)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test_Http2.PostAsync_CancelDuringRequestContentSend_TaskCanceledQuickly(chunkedTransfer: False, mode: Token) [FAIL]\r\n      System.TimeoutException : Task timed out after 00:01:00\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(42,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, TimeSpan timeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Cancellation.cs(45,0): at System.Net.Http.Functional.Tests.HttpClientHandler_Cancellation_Test.PostAsync_CancelDuringRequestContentSend_TaskCanceledQuickly(Boolean chunkedTransfer, CancellationMode mode)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Headers_Http2.SendAsync_WithZeroLengthHeaderName_Throws [FAIL]\r\n      System.TimeoutException : Task timed out after 00:01:00\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(42,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, TimeSpan timeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Headers.cs(272,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Headers.SendAsync_WithZeroLengthHeaderName_Throws()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Http2.PostAsync_ManyDifferentRequestHeaders_SentCorrectly [FAIL]\r\n      System.TimeoutException : Task timed out after 00:01:00\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(42,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, TimeSpan timeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs(789,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest.PostAsync_ManyDifferentRequestHeaders_SentCorrectly()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.SetDelegate_ConnectionSucceeds(acceptedProtocol: Tls, requestOnlyThisProtocol: False) [FAIL]\r\n      System.Threading.Tasks.TaskCanceledException : A task was canceled.\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(83,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(111,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(71,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.AcceptAllCerts.cs(77,0): at System.Net.Http.Functional.Tests.HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.<>c__DisplayClass4_0.<<SetDelegate_ConnectionSucceeds>b__0>d.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(69,0): at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.AcceptAllCerts.cs(75,0): at System.Net.Http.Functional.Tests.HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.SetDelegate_ConnectionSucceeds(SslProtocols acceptedProtocol, Boolean requestOnlyThisProtocol)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_SslProtocols_Test.GetAsync_NoSpecifiedProtocol_DefaultsToTls12 [FAIL]\r\n      System.Threading.Tasks.TaskCanceledException : A task was canceled.\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(83,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(111,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(71,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.SslProtocols.cs(250,0): at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<>c__DisplayClass11_0.<<GetAsync_NoSpecifiedProtocol_DefaultsToTls12>b__0>d.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(69,0): at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.SslProtocols.cs(248,0): at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.GetAsync_NoSpecifiedProtocol_DefaultsToTls12()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandler_SslProtocols_Test.GetAsync_NoSpecifiedProtocol_DefaultsToTls12 [FAIL]\r\n      System.Threading.Tasks.TaskCanceledException : A task was canceled.\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(83,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(111,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(71,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.SslProtocols.cs(250,0): at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.<>c__DisplayClass11_0.<<GetAsync_NoSpecifiedProtocol_DefaultsToTls12>b__0>d.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(69,0): at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.SslProtocols.cs(248,0): at System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test.GetAsync_NoSpecifiedProtocol_DefaultsToTls12()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Cookies_Http2.GetAsync_DefaultCoookieContainer_NoCookieSent [FAIL]\r\n      System.TimeoutException : Task timed out after 00:01:00\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(42,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, TimeSpan timeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Cookies.cs(46,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Cookies.GetAsync_DefaultCoookieContainer_NoCookieSent()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.HPackTest.HPack_HeaderEncoding(headerName: \":path\", expectedValue: \"/\", expectedEncoding: [132]) [FAIL]\r\n      System.TimeoutException : WhenAllOrAnyFailed timed out after 60000ms\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(75,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(186,0): at System.Net.Test.Common.Http2LoopbackServer.CreateClientAndServerAsync(Func`2 clientFunc, Func`2 serverFunc, Int32 timeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HPackTest.cs(38,0): at System.Net.Http.Functional.Tests.HPackTest.HPack_HeaderEncoding(String headerName, String expectedValue, Byte[] expectedEncoding)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ConnectionPooling_Test.Http2_SmallConnectionTimeout_SubsequentRequestUsesDifferentConnection(timeoutPropertyName: \"PooledConnectionIdleTimeout\") [FAIL]\r\n      System.TimeoutException : Task timed out after 00:01:00\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(42,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, TimeSpan timeout)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(207,0): at System.Net.Test.Common.Http2LoopbackServerFactory.CreateServerAsync(Func`3 funcAsync, Int32 millisecondsTimeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs(1606,0): at System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_ConnectionPooling_Test.Http2_SmallConnectionTimeout_SubsequentRequestUsesDifferentConnection(String timeoutPropertyName)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.Http2_ServerSendsValidSettingsValues_Success [FAIL]\r\n      Cannot acquire the global certificate mutex.\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Net/Configuration.Certificates.cs(70,0): at System.Net.Test.Common.Configuration.Certificates.GetCertificate(String certificateFileName)\r\n        /_/src/Common/tests/System/Net/Configuration.Certificates.cs(38,0): at System.Net.Test.Common.Configuration.Certificates.GetServerCertificate()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackConnection.cs(41,0): at System.Net.Test.Common.Http2LoopbackConnection..ctor(Socket socket, Http2Options httpOptions)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(89,0): at System.Net.Test.Common.Http2LoopbackServer.AcceptConnectionAsync()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(103,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionGetSettingsAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(97,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Http2.cs(192,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Http2.Http2_ServerSendsValidSettingsValues_Success()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_Http2_TrailingHeaders_Test.Http2GetAsync_TrailerHeaders_TrailingHeaderNoBody [FAIL]\r\n      Cannot acquire the global certificate mutex.\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Net/Configuration.Certificates.cs(70,0): at System.Net.Test.Common.Configuration.Certificates.GetCertificate(String certificateFileName)\r\n        /_/src/Common/tests/System/Net/Configuration.Certificates.cs(38,0): at System.Net.Test.Common.Configuration.Certificates.GetServerCertificate()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackConnection.cs(41,0): at System.Net.Test.Common.Http2LoopbackConnection..ctor(Socket socket, Http2Options httpOptions)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(89,0): at System.Net.Test.Common.Http2LoopbackServer.AcceptConnectionAsync()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(103,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionGetSettingsAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(97,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs(906,0): at System.Net.Http.Functional.Tests.SocketsHttpHandler_Http2_TrailingHeaders_Test.Http2GetAsync_TrailerHeaders_TrailingHeaderNoBody()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Headers_Http2.GetAsync_MissingExpires_ReturnNull [FAIL]\r\n      System.TimeoutException : Task timed out after 00:01:00\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(42,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, TimeSpan timeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Headers.cs(151,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Headers.GetAsync_MissingExpires_ReturnNull()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest.GetAsync_SecureAndNonSecureIPBasedUri_CorrectlyFormatted(address: 127.0.0.1, useSsl: True) [FAIL]\r\n      Cannot acquire the global certificate mutex.\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Net/Configuration.Certificates.cs(70,0): at System.Net.Test.Common.Configuration.Certificates.GetCertificate(String certificateFileName)\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(154,0): at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 funcAsync)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(83,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(111,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(84,0): at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(69,0): at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs(506,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest.GetAsync_SecureAndNonSecureIPBasedUri_CorrectlyFormatted(IPAddress address, Boolean useSsl)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandlerTest.GetAsync_SecureAndNonSecureIPBasedUri_CorrectlyFormatted(address: 127.0.0.1, useSsl: True) [FAIL]\r\n      Cannot acquire the global certificate mutex.\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Net/Configuration.Certificates.cs(70,0): at System.Net.Test.Common.Configuration.Certificates.GetCertificate(String certificateFileName)\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(154,0): at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 funcAsync)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(83,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(111,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(84,0): at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(69,0): at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs(506,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest.GetAsync_SecureAndNonSecureIPBasedUri_CorrectlyFormatted(IPAddress address, Boolean useSsl)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Http2.Dispose_DisposingHandlerCancelsActiveOperationsWithoutResponses [FAIL]\r\n      System.TimeoutException : Task timed out after 00:01:00\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(44,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, TimeSpan timeout)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(215,0): at System.Net.Test.Common.Http2LoopbackServerFactory.CreateServerAsync(Func`3 funcAsync, Int32 millisecondsTimeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs(1550,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest.Dispose_DisposingHandlerCancelsActiveOperationsWithoutResponses()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.SetDelegate_ConnectionSucceeds(acceptedProtocol: Tls, requestOnlyThisProtocol: True) [FAIL]\r\n      System.Threading.Tasks.TaskCanceledException : A task was canceled.\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(83,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(111,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(71,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.AcceptAllCerts.cs(77,0): at System.Net.Http.Functional.Tests.HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.<>c__DisplayClass4_0.<<SetDelegate_ConnectionSucceeds>b__0>d.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(69,0): at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.AcceptAllCerts.cs(75,0): at System.Net.Http.Functional.Tests.HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.SetDelegate_ConnectionSucceeds(SslProtocols acceptedProtocol, Boolean requestOnlyThisProtocol)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.HPackTest.HPack_HeaderEncoding(headerName: \"content-type\", expectedValue: \"text/plain; charset=utf-8\", expectedEncoding: [15, 16, 25, 116, 101, ...]) [FAIL]\r\n      System.AggregateException : One or more errors occurred. (A task was canceled.) (One or more errors occurred. (One or more errors occurred. (Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..)))\r\n      ---- System.Threading.Tasks.TaskCanceledException : A task was canceled.\r\n      ---- System.AggregateException : One or more errors occurred. (One or more errors occurred. (Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..))\r\n      -------- System.AggregateException : One or more errors occurred. (Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..)\r\n      ------------ System.IO.IOException : Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..\r\n      ---------------- System.Net.Sockets.SocketException : An established connection was aborted by the software in your host machine.\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(109,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(71,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(186,0): at System.Net.Test.Common.Http2LoopbackServer.CreateClientAndServerAsync(Func`2 clientFunc, Func`2 serverFunc, Int32 timeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HPackTest.cs(38,0): at System.Net.Http.Functional.Tests.HPackTest.HPack_HeaderEncoding(String headerName, String expectedValue, Byte[] expectedEncoding)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        ----- Inner Stack Trace #1 (System.Threading.Tasks.TaskCanceledException) -----\r\n        \r\n        ----- Inner Stack Trace #2 (System.AggregateException) -----\r\n        \r\n        ----- Inner Stack Trace -----\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs(2733,0): at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs(2599,0): at System.Threading.Tasks.Task.Wait()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackConnection.cs(56,0): at System.Net.Test.Common.Http2LoopbackConnection..ctor(Socket socket, Http2Options httpOptions)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(89,0): at System.Net.Test.Common.Http2LoopbackServer.AcceptConnectionAsync()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(103,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionGetSettingsAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(97,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HPackTest.cs(54,0): at System.Net.Http.Functional.Tests.HPackTest.<>c__DisplayClass7_0.<<HPack_HeaderEncoding>b__1>d.MoveNext()\r\n        ----- Inner Stack Trace -----\r\n        /_/src/System.Net.Security/src/System/Net/FixedSizeReader.cs(57,0): at System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(843,0): at System.Net.Security.SslStream.<ThrowIfExceptional>g__ThrowExceptional|141_0(ExceptionDispatchInfo e)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs(437,0): at System.Net.Security.SslStream.InternalEndProcessAuthentication(LazyAsyncResult lazyResult)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs(407,0): at System.Net.Security.SslStream.EndProcessAuthentication(IAsyncResult result)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(288,0): at System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult asyncResult)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(443,0): at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__70_1(IAsyncResult iar)\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/FutureFactory.cs(513,0): at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n        ----- Inner Stack Trace -----\r\n        \r\n    System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Cookies_Http2.GetAsync_ReceiveInvalidSetCookieHeader_ValidCookiesAdded [FAIL]\r\n      System.AggregateException : One or more errors occurred. (A task was canceled.) (One or more errors occurred. (One or more errors occurred. (Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..)))\r\n      ---- System.Threading.Tasks.TaskCanceledException : A task was canceled.\r\n      ---- System.AggregateException : One or more errors occurred. (One or more errors occurred. (Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..))\r\n      -------- System.AggregateException : One or more errors occurred. (Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..)\r\n      ------------ System.IO.IOException : Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..\r\n      ---------------- System.Net.Sockets.SocketException : An established connection was aborted by the software in your host machine.\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(109,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(77,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Cookies.cs(482,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Cookies.<GetAsync_ReceiveInvalidSetCookieHeader_ValidCookiesAdded>b__22_0(GenericLoopbackServer server, Uri url)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(44,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, TimeSpan timeout)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(215,0): at System.Net.Test.Common.Http2LoopbackServerFactory.CreateServerAsync(Func`3 funcAsync, Int32 millisecondsTimeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Cookies.cs(466,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Cookies.GetAsync_ReceiveInvalidSetCookieHeader_ValidCookiesAdded()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        ----- Inner Stack Trace #1 (System.Threading.Tasks.TaskCanceledException) -----\r\n        \r\n        ----- Inner Stack Trace #2 (System.AggregateException) -----\r\n        \r\n        ----- Inner Stack Trace -----\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs(2733,0): at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs(2599,0): at System.Threading.Tasks.Task.Wait()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackConnection.cs(56,0): at System.Net.Test.Common.Http2LoopbackConnection..ctor(Socket socket, Http2Options httpOptions)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(89,0): at System.Net.Test.Common.Http2LoopbackServer.AcceptConnectionAsync()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(103,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionGetSettingsAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(97,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(148,0): at System.Net.Test.Common.Http2LoopbackServer.HandleRequestAsync(HttpStatusCode statusCode, IList`1 headers, String content)\r\n        ----- Inner Stack Trace -----\r\n        /_/src/System.Net.Security/src/System/Net/FixedSizeReader.cs(57,0): at System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(843,0): at System.Net.Security.SslStream.<ThrowIfExceptional>g__ThrowExceptional|141_0(ExceptionDispatchInfo e)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs(404,0): at System.Net.Security.SslStream.EndProcessAuthentication(IAsyncResult result)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(288,0): at System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult asyncResult)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(443,0): at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__70_1(IAsyncResult iar)\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/FutureFactory.cs(546,0): at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n        ----- Inner Stack Trace -----\r\n        \r\n    System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.PostAsyncDuplex_RequestContentExceptionAfterResponseEndReceivedButBeforeConsumed_ResetsStreamAndThrowsOnResponseStreamRead [FAIL]\r\n      System.AggregateException : One or more errors occurred. (Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..)\r\n      ---- System.IO.IOException : Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..\r\n      -------- System.Net.Sockets.SocketException : An established connection was aborted by the software in your host machine.\r\n      Stack Trace:\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs(2733,0): at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs(2599,0): at System.Threading.Tasks.Task.Wait()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackConnection.cs(56,0): at System.Net.Test.Common.Http2LoopbackConnection..ctor(Socket socket, Http2Options httpOptions)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(89,0): at System.Net.Test.Common.Http2LoopbackServer.AcceptConnectionAsync()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(103,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionGetSettingsAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(97,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Http2.cs(2219,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Http2.PostAsyncDuplex_RequestContentExceptionAfterResponseEndReceivedButBeforeConsumed_ResetsStreamAndThrowsOnResponseStreamRead()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        ----- Inner Stack Trace -----\r\n        /_/src/System.Net.Security/src/System/Net/FixedSizeReader.cs(57,0): at System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(843,0): at System.Net.Security.SslStream.<ThrowIfExceptional>g__ThrowExceptional|141_0(ExceptionDispatchInfo e)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs(404,0): at System.Net.Security.SslStream.EndProcessAuthentication(IAsyncResult result)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(288,0): at System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult asyncResult)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(443,0): at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__70_1(IAsyncResult iar)\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/FutureFactory.cs(546,0): at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n        ----- Inner Stack Trace -----\r\n        \r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_Http2_TrailingHeaders_Test.Http2GetAsyncResponseHeadersReadOption_TrailingHeaders_Available [FAIL]\r\n      System.AggregateException : One or more errors occurred. (Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..)\r\n      ---- System.IO.IOException : Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..\r\n      -------- System.Net.Sockets.SocketException : An established connection was aborted by the software in your host machine.\r\n      Stack Trace:\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs(2733,0): at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs(2599,0): at System.Threading.Tasks.Task.Wait()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackConnection.cs(56,0): at System.Net.Test.Common.Http2LoopbackConnection..ctor(Socket socket, Http2Options httpOptions)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(89,0): at System.Net.Test.Common.Http2LoopbackServer.AcceptConnectionAsync()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(103,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionGetSettingsAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(97,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs(862,0): at System.Net.Http.Functional.Tests.SocketsHttpHandler_Http2_TrailingHeaders_Test.Http2GetAsyncResponseHeadersReadOption_TrailingHeaders_Available()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        ----- Inner Stack Trace -----\r\n        /_/src/System.Net.Security/src/System/Net/FixedSizeReader.cs(57,0): at System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(843,0): at System.Net.Security.SslStream.<ThrowIfExceptional>g__ThrowExceptional|141_0(ExceptionDispatchInfo e)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs(404,0): at System.Net.Security.SslStream.EndProcessAuthentication(IAsyncResult result)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(288,0): at System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult asyncResult)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(443,0): at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__70_1(IAsyncResult iar)\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/FutureFactory.cs(546,0): at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n        ----- Inner Stack Trace -----\r\n        \r\n    System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Headers_Http2.SendAsync_Expires_Success(value: \"Thu, 01 Dec 1994 16:00:00 GMT\", isValid: True) [FAIL]\r\n      System.AggregateException : One or more errors occurred. (A task was canceled.) (One or more errors occurred. (One or more errors occurred. (Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..)))\r\n      ---- System.Threading.Tasks.TaskCanceledException : A task was canceled.\r\n      ---- System.AggregateException : One or more errors occurred. (One or more errors occurred. (Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..))\r\n      -------- System.AggregateException : One or more errors occurred. (Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..)\r\n      ------------ System.IO.IOException : Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..\r\n      ---------------- System.Net.Sockets.SocketException : An established connection was aborted by the software in your host machine.\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(109,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Net/Http/GenericLoopbackServer.cs(31,0): at System.Net.Test.Common.LoopbackServerFactory.<>c__DisplayClass5_0.<<CreateClientAndServerAsync>b__0>d.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(44,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, TimeSpan timeout)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(215,0): at System.Net.Test.Common.Http2LoopbackServerFactory.CreateServerAsync(Func`3 funcAsync, Int32 millisecondsTimeout)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(44,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, TimeSpan timeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Headers.cs(171,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Headers.SendAsync_Expires_Success(String value, Boolean isValid)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        ----- Inner Stack Trace #1 (System.Threading.Tasks.TaskCanceledException) -----\r\n        \r\n        ----- Inner Stack Trace #2 (System.AggregateException) -----\r\n        \r\n        ----- Inner Stack Trace -----\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs(2733,0): at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs(2599,0): at System.Threading.Tasks.Task.Wait()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackConnection.cs(56,0): at System.Net.Test.Common.Http2LoopbackConnection..ctor(Socket socket, Http2Options httpOptions)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(89,0): at System.Net.Test.Common.Http2LoopbackServer.AcceptConnectionAsync()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(103,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionGetSettingsAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(97,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(148,0): at System.Net.Test.Common.Http2LoopbackServer.HandleRequestAsync(HttpStatusCode statusCode, IList`1 headers, String content)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Headers.cs(186,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Headers.<>c__DisplayClass8_0.<<SendAsync_Expires_Success>b__1>d.MoveNext()\r\n        ----- Inner Stack Trace -----\r\n        /_/src/System.Net.Security/src/System/Net/FixedSizeReader.cs(57,0): at System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs(404,0): at System.Net.Security.SslStream.EndProcessAuthentication(IAsyncResult result)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(288,0): at System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult asyncResult)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(443,0): at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__70_1(IAsyncResult iar)\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/FutureFactory.cs(546,0): at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n        ----- Inner Stack Trace -----\r\n        \r\n    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandlerTest.GetAsync_SecureAndNonSecureIPBasedUri_CorrectlyFormatted(address: ::1, useSsl: True) [FAIL]\r\n      Cannot acquire the global certificate mutex.\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Net/Configuration.Certificates.cs(70,0): at System.Net.Test.Common.Configuration.Certificates.GetCertificate(String certificateFileName)\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(154,0): at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 funcAsync)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(83,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(111,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(84,0): at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(69,0): at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs(506,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest.GetAsync_SecureAndNonSecureIPBasedUri_CorrectlyFormatted(IPAddress address, Boolean useSsl)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Http2.GetAsync_SecureAndNonSecureIPBasedUri_CorrectlyFormatted(address: 127.0.0.1, useSsl: True) [FAIL]\r\n      Cannot acquire the global certificate mutex.\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Net/Configuration.Certificates.cs(70,0): at System.Net.Test.Common.Configuration.Certificates.GetCertificate(String certificateFileName)\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(154,0): at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 funcAsync)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(83,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(111,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(84,0): at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(69,0): at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs(506,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest.GetAsync_SecureAndNonSecureIPBasedUri_CorrectlyFormatted(IPAddress address, Boolean useSsl)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandlerTest.Ctor_ExpectedDefaultPropertyValues_UapPlatform [SKIP]\r\n      Condition(s) not met: \"IsUap\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.SetDelegate_ConnectionSucceeds(acceptedProtocol: Tls | Tls11 | Tls12, requestOnlyThisProtocol: False) [FAIL]\r\n      System.Threading.Tasks.TaskCanceledException : A task was canceled.\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(83,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(111,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(77,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.AcceptAllCerts.cs(77,0): at System.Net.Http.Functional.Tests.HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.<>c__DisplayClass4_0.<<SetDelegate_ConnectionSucceeds>b__0>d.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(69,0): at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.AcceptAllCerts.cs(75,0): at System.Net.Http.Functional.Tests.HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.SetDelegate_ConnectionSucceeds(SslProtocols acceptedProtocol, Boolean requestOnlyThisProtocol)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest.GetAsync_SecureAndNonSecureIPBasedUri_CorrectlyFormatted(address: ::1, useSsl: True) [FAIL]\r\n      System.IO.IOException : Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..\r\n      ---- System.Net.Sockets.SocketException : An established connection was aborted by the software in your host machine.\r\n      Stack Trace:\r\n        /_/src/System.Net.Security/src/System/Net/FixedSizeReader.cs(57,0): at System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs(404,0): at System.Net.Security.SslStream.EndProcessAuthentication(IAsyncResult result)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(288,0): at System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult asyncResult)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(434,0): at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__69_2(IAsyncResult iar)\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/FutureFactory.cs(546,0): at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(154,0): at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 funcAsync)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(83,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(111,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(84,0): at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(69,0): at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs(506,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest.GetAsync_SecureAndNonSecureIPBasedUri_CorrectlyFormatted(IPAddress address, Boolean useSsl)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        ----- Inner Stack Trace -----\r\n        \r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandlerTest.Ctor_ExpectedDefaultPropertyValues_UapPlatform [SKIP]\r\n      Condition(s) not met: \"IsUap\"\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Cookies_Http2.GetAsyncWithRedirect_SetCookieContainer_CorrectCookiesSent [FAIL]\r\n      System.TimeoutException : Task timed out after 00:01:00\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(44,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, TimeSpan timeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Cookies.cs(306,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Cookies.GetAsyncWithRedirect_SetCookieContainer_CorrectCookiesSent()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.DynamicTableSizeUpdate_Exceeds_Settings_Throws [FAIL]\r\n      System.TimeoutException : WhenAllOrAnyFailed timed out after 60000ms\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(77,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(186,0): at System.Net.Test.Common.Http2LoopbackServer.CreateClientAndServerAsync(Func`2 clientFunc, Func`2 serverFunc, Int32 timeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Http2.cs(3134,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Http2.DynamicTableSizeUpdate_Exceeds_Settings_Throws()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandler_Http2_TrailingHeaders_Test.Http2GetAsync_TrailerHeaders_TrailingPseudoHeadersThrow [FAIL]\r\n      Cannot acquire the global certificate mutex.\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Net/Configuration.Certificates.cs(70,0): at System.Net.Test.Common.Configuration.Certificates.GetCertificate(String certificateFileName)\r\n        /_/src/Common/tests/System/Net/Configuration.Certificates.cs(38,0): at System.Net.Test.Common.Configuration.Certificates.GetServerCertificate()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackConnection.cs(41,0): at System.Net.Test.Common.Http2LoopbackConnection..ctor(Socket socket, Http2Options httpOptions)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(89,0): at System.Net.Test.Common.Http2LoopbackServer.AcceptConnectionAsync()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(131,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionGetSettingsAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(99,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/SocketsHttpHandlerTest.cs(840,0): at System.Net.Http.Functional.Tests.SocketsHttpHandler_Http2_TrailingHeaders_Test.Http2GetAsync_TrailerHeaders_TrailingPseudoHeadersThrow()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n    System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Headers_Http2.SendAsync_Expires_Success(value: \"-1\", isValid: False) [FAIL]\r\n      System.AggregateException : One or more errors occurred. (A task was canceled.) (One or more errors occurred. (One or more errors occurred. (Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..)))\r\n      ---- System.Threading.Tasks.TaskCanceledException : A task was canceled.\r\n      ---- System.AggregateException : One or more errors occurred. (One or more errors occurred. (Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..))\r\n      -------- System.AggregateException : One or more errors occurred. (Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..)\r\n      ------------ System.IO.IOException : Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..\r\n      ---------------- System.Net.Sockets.SocketException : An established connection was aborted by the software in your host machine.\r\n      Stack Trace:\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(109,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Net/Http/GenericLoopbackServer.cs(31,0): at System.Net.Test.Common.LoopbackServerFactory.<>c__DisplayClass5_0.<<CreateClientAndServerAsync>b__0>d.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(44,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, TimeSpan timeout)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(215,0): at System.Net.Test.Common.Http2LoopbackServerFactory.CreateServerAsync(Func`3 funcAsync, Int32 millisecondsTimeout)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(44,0): at System.Threading.Tasks.TaskTimeoutExtensions.TimeoutAfter(Task task, TimeSpan timeout)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Headers.cs(171,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Headers.SendAsync_Expires_Success(String value, Boolean isValid)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        ----- Inner Stack Trace #1 (System.Threading.Tasks.TaskCanceledException) -----\r\n        \r\n        ----- Inner Stack Trace #2 (System.AggregateException) -----\r\n        \r\n        ----- Inner Stack Trace -----\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs(2733,0): at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs(2599,0): at System.Threading.Tasks.Task.Wait()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackConnection.cs(56,0): at System.Net.Test.Common.Http2LoopbackConnection..ctor(Socket socket, Http2Options httpOptions)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(89,0): at System.Net.Test.Common.Http2LoopbackServer.AcceptConnectionAsync()\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(131,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionGetSettingsAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(97,0): at System.Net.Test.Common.Http2LoopbackServer.EstablishConnectionAsync(SettingsEntry[] settingsEntries)\r\n        /_/src/Common/tests/System/Net/Http/Http2LoopbackServer.cs(148,0): at System.Net.Test.Common.Http2LoopbackServer.HandleRequestAsync(HttpStatusCode statusCode, IList`1 headers, String content)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Headers.cs(186,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Headers.<>c__DisplayClass8_0.<<SendAsync_Expires_Success>b__1>d.MoveNext()\r\n        ----- Inner Stack Trace -----\r\n        /_/src/System.Net.Security/src/System/Net/FixedSizeReader.cs(57,0): at System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs(404,0): at System.Net.Security.SslStream.EndProcessAuthentication(IAsyncResult result)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(288,0): at System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult asyncResult)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(443,0): at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__70_1(IAsyncResult iar)\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/FutureFactory.cs(546,0): at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n        ----- Inner Stack Trace -----\r\n        \r\n    System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Http2.GetAsync_SecureAndNonSecureIPBasedUri_CorrectlyFormatted(address: ::1, useSsl: True) [FAIL]\r\n      System.IO.IOException : Unable to read data from the transport connection: An established connection was aborted by the software in your host machine..\r\n      ---- System.Net.Sockets.SocketException : An established connection was aborted by the software in your host machine.\r\n      Stack Trace:\r\n        /_/src/System.Net.Security/src/System/Net/FixedSizeReader.cs(57,0): at System.Net.FixedSizeReader.ReadPacketAsync(Stream transport, AsyncProtocolRequest request)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs(404,0): at System.Net.Security.SslStream.EndProcessAuthentication(IAsyncResult result)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(288,0): at System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult asyncResult)\r\n        /_/src/System.Net.Security/src/System/Net/Security/SslStream.cs(434,0): at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__69_2(IAsyncResult iar)\r\n        /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/FutureFactory.cs(546,0): at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(154,0): at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 funcAsync)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(83,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(111,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(84,0): at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext()\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        /_/src/Common/tests/System/Net/Http/LoopbackServer.cs(69,0): at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options)\r\n        /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs(506,0): at System.Net.Http.Functional.Tests.HttpClientHandlerTest.GetAsync_SecureAndNonSecureIPBasedUri_CorrectlyFormatted(IPAddress address, Boolean useSsl)\r\n        --- End of stack trace from previous location where exception was thrown ---\r\n        ----- Inner Stack Trace -----\r\n        \r\n    System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_HttpClientHandlerTest_Http2.Ctor_ExpectedDefaultPropertyValues_UapPlatform [SKIP]\r\n      Condition(s) not met: \"IsUap\"\r\n  Finished:    System.Net.Http.Functional.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Net.Http.Functional.Tests  Total: 2029, Errors: 0, Failed: 34, Skipped: 40, Time: 533.224s\r\n----- end Sun 09/01/2019  9:34:23.80 ----- exit code 1 ----------------------------------------------------------\r\n```\r\n\r\n@davidsh, @wfurt, @scalablecory, @eiriktsarpalis, @karelz","Url":"https://github.com/dotnet/corefx/issues/40744","RelatedDescription":"Open issue \"34 System.Net.Http.Functional tests are timing out on arm64\" (#40744)"},{"Id":"488044729","IsPullRequest":true,"CreatedAt":"2019-09-02T07:37:54","Actor":"ViktorHofer","Number":"40741","RawContent":null,"Title":"Port test and infra fixes from master to release/3.0","State":"open","Body":"### Description\r\nPorting test fixes made, after we branched off to release/3.0. Fixes failing release/3.0 builds.\r\n\r\n### Customer Impact:\r\nLess failing builds which contributes to the CI council's effort. No direct customer impact.\r\n\r\n### Regression? \r\nNone besides CI flakiness.\r\n\r\n### Risk\r\nNone. The code only touches test related files.\r\n\r\n### Tests run / added\r\nTests either disabled or changed.\r\n\r\n@stephentoub @karinazhou @cston @danmosemsft @wfurt @krwq @buyaa-n @tmds ","Url":"https://github.com/dotnet/corefx/pull/40741","RelatedDescription":"Open PR \"Port test and infra fixes from master to release/3.0\" (#40741)"},{"Id":"487937692","IsPullRequest":false,"CreatedAt":"2019-09-01T22:26:44","Actor":"AaronRobinsonMSFT","Number":"40740","RawContent":null,"Title":"Attribute for minimal runtime impact during an unmanaged call","State":"open","Body":"The work in https://github.com/dotnet/coreclr/pull/26458 is about exposing a way for users to indicate to the runtime that the P/Invoke (unmanaged call) is well-behaved (see API below) enough that the runtime doesn't need to erect a GC transition frame.\r\n\r\n# Rationale and Usage\r\n\r\nThere is non-trivial overhead when making a P/Invoke call in the runtime. If the target function is fast enough this overhead can dominate the call rather than the contents of the function. For example, the Win32 function [`GetTickCount()`](https://docs.microsoft.com/windows/win32/api/sysinfoapi/nf-sysinfoapi-gettickcount) is typically less than 50 instructions however the transition to execute that function is over 60 instructions. This means that setting up to call the function is more expensive than actually running the function itself.\r\n\r\nThere are limits to the benefit here since this does allow the user to create a bad situation where GC starvation, data corruption, or immediate runtime termination can occur. The traditional P/Invoke method via [`DllImportAttribute`](https://docs.microsoft.com/dotnet/api/system.runtime.interopservices.dllimportattribute) is designed to ensure all calls are safe with respect to the runtime memory model. This attribute would provide a way to circumvent those guarantees. See the below proposed API for additional details.\r\n\r\nCommunity context:\r\n- https://github.com/dotnet/coreclr/issues/22320\r\n- https://github.com/dotnet/coreclr/pull/22383#issuecomment-461429171\r\n\r\nUsage example:\r\n\r\n``` csharp\r\n[DllImport(\"Kernel32\", EntryPoint = \"GetTickCount\")]\r\n[SuppressGCTransition]\r\npublic static extern int GetTickCount_NoOverhead();\r\n\r\n[DllImport(\"Kernel32\", EntryPoint = \"GetTickCount\")]\r\npublic static extern int GetTickCount_Overhead();\r\n```\r\n\r\n# Proposed API\r\n\r\nSee related [PR](https://github.com/dotnet/coreclr/pull/26458) for complete context. An alternate name proposal focuses on intent rather than implementation detail - `TrivialUnmanagedMethodAttribute`. The benefit of focusing on intent is additional optimizations can be enabled with this attribute as they are discovered. The prototype in the aforementioned PR uses the below proposed API.\r\n\r\n``` csharp\r\nnamespace System.Runtime.InteropServices\r\n{\r\n    /// <summary>\r\n    /// An attribute used to indicate a GC transition should be skipped when making an unmanaged function call.\r\n    /// </summary>\r\n    /// <example>\r\n    /// Example of a valid use case. The Win32 `GetTickCount()` function is a small performance related function\r\n    /// that reads some global memory and returns the value. In this case, the GC transition overhead is significantly\r\n    /// more than the memory read.\r\n    /// <code>\r\n    /// using System;\r\n    /// using System.Runtime.InteropServices;\r\n    /// class Program\r\n    /// {\r\n    ///     [DllImport(\"Kernel32\")]\r\n    ///     [SuppressGCTransition]\r\n    ///     static extern int GetTickCount();\r\n    ///     static void Main()\r\n    ///     {\r\n    ///         Console.WriteLine($\"{GetTickCount()}\");\r\n    ///     }\r\n    /// }\r\n    /// </code>\r\n    /// </example>\r\n    /// <remarks>\r\n    /// This attribute is ignored if applied to a method without the <see cref=\"System.Runtime.InteropServices.DllImportAttribute\"/>.\r\n    ///\r\n    /// Forgoing this transition can yield benefits when the cost of the transition is more than the execution time\r\n    /// of the unmanaged function. However, avoiding this transition removes some of the guarantees the runtime\r\n    /// provides through a normal P/Invoke. When exiting the managed runtime to enter an unmanaged function the\r\n    /// GC must transition from Cooperative mode into Preemptive mode. Fully details on these modes can be found at\r\n    /// https://github.com/dotnet/coreclr/blob/master/Documentation/coding-guidelines/clr-code-guide.md#2.1.8.\r\n    /// Suppressing the GC transition is an advanced scenario and should not be done without fully understanding\r\n    /// potential consequences. Examples of cases where this attribute is not appropriate:\r\n    ///   * Native function calls back into the runtime (e.g. Reverse P/Invoke).\r\n    ///   * Native function performs syscall (e.g. Any type of I/O).\r\n    ///   * Native function may execute for a non-trivial amount of time (more than 1 microsecond).\r\n    ///   * Native function requires object manipulation that could cause memory allocation during marshalling.\r\n    ///\r\n    ///  Cases where the attribute can be considered:\r\n    ///   * Native function consists of a trivial number of instructions.\r\n    ///   * Native function performs a task that takes less time to execute than a GC transition.\r\n    ///\r\n    /// Consequences of invalid uses of this attribute:\r\n    ///   * GC starvation.\r\n    ///   * Immediate runtime termination.\r\n    ///   * Data corruption.\r\n    /// </remarks>\r\n    [AttributeUsage(AttributeTargets.Method, Inherited = false)]\r\n    public sealed class SuppressGCTransitionAttribute : Attribute\r\n    {\r\n        public SuppressGCTransitionAttribute()\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n/cc @jkotas @stephentoub @jeffschwMSFT @jkoritzinsky ","Url":"https://github.com/dotnet/corefx/issues/40740","RelatedDescription":"Open issue \"Attribute for minimal runtime impact during an unmanaged call\" (#40740)"},{"Id":"487928729","IsPullRequest":false,"CreatedAt":"2019-09-01T20:39:12","Actor":"stephentoub","Number":"40739","RawContent":null,"Title":"Static analysis for .NET 5","State":"open","Body":"In FxCop's hey day, many rules were written to help validate the correctness and performance of .NET code.  .NET has evolved significantly since then, however, and the creation of new rules has not kept up with the times; we've added very few new analyzers to help validate the correctness and performance of code using the wealth of new types, methods, and patterns that have made their way into .NET in the interim.\r\n\r\n**For .NET 5, we should augment https://github.com/dotnet/roslyn-analyzers/tree/master/src/Microsoft.NetCore.Analyzers with new analyzers to help further validate the correctness and improve the performance of code written for .NET.**\r\n\r\nGuidelines:\r\n- Every rule we add should be applicable to many libraries targeting netcoreapp and/or netstandard, including but not limited to those that compose .NET Core itself.\r\n- Every rule we add should be done so with the goal of enabling it in all of the libraries that compose .NET Core itself.\r\n- Any rule we add must have a _very_ low false positive rate.  We should be able to enable the rule in all of the libraries that compose .NET Core with few-to-no suppressions.\r\n- Auto-fixes should be included whenever possible.  However, they should only trigger for cases of extremely high confidence that the revised code is as good or better than the original.\r\n- When in doubt, heuristics should err on the side of not warning, i.e. we prefer false negatives over false positives.  If a \"confidence\" level system is ever added to analyzers, this can be revisited.\r\n\r\nThis issue exists to collect and catalog ideas for such rules to be implemented in the .NET 5 timeframe.\r\n\r\nNote that the notes below are just starting ideas... cases called out may not be the right ones to check, may be missing additional cases of importance, etc.  When we decide to tackle one of these, part of the work item (which should be split off into a separate issue) will be determining the right heuristics to employ (and potentially even deciding that the false positive rate will be too high to include such a rule at all).\r\n\r\n### Correctness\r\n\r\n#### System\r\n\r\n- [ ] **HashCode usage**.  Find GetHashCode implementations doing manual hashcode combination and switch to HashCode.Combine.\r\n\r\n- [ ] **ArgumentException arguments**.  Find places where `nameof(…)` is passed as the first (rather than second) argument to `ArgumentException`.\r\n\r\n- [ ] **Local DateTime math**.  Find places where DateTimes known to be in local time (e.g. resulting from DateTime.Now) are used in math.\r\n\r\n#### System.Buffers\r\n\r\n- [ ] **ArrayPool misuse**.  The rule should flag cases where a buffer is potentially being returned to the shared pool multiple times, e.g. where a buffer is returned and then still used after the Return; where a method taking an array by ref Returns the array but doesn't null out the ref; where there's a Return call in a try block, where that same instance is also returned in a catch block, and where something after the Return call in the try block could cause an exception that would trigger the same instance to be returned again in the catch; etc.\r\n\r\n- [ ] **MemoryManager finalizers**.  Adding a finalizer to a `MemoryManager<T>`-derived type is likely an indication of a bug, as it suggests a native resource that could have been handed out in a `Span<T>` is getting cleaned up and potentially while it’s still in use by the `Span<T>`.\r\n\r\n#### System.Linq\r\n\r\n- [ ] **PLINQ nops**.  Using .AsParallel() at the end of a LINQ query, e.g. `foreach (var item in src.Select(…).Where(…).AsParallel(…))`, is a nop and should either be removed or the AsParallel moved earlier in the query.  I’ve even seen developers write `foreach (var item in src.AsParallel())` thinking it parallelizes the `foreach` loop, which it doesn’t… it’d be good to warn about such misuse.\r\n\r\n#### System.Runtime.InteropServices\r\n\r\n- [ ] **P/Invoke errors**.  If https://github.com/dotnet/corefx/issues/40740 goes ahead, we should flag cases where we can detect very likely misuse.\r\n\r\n#### System.Text.Json\r\n\r\n- [ ] **Utf8JsonReader misuse**.  The rule should flag cases where a reader is passed around by value.\r\n\r\n#### System.Threading\r\n\r\n- [ ] **readonly SpinLock fields**.  `SpinLock` is a mutable struct, meant only for advanced scenarios.  Accidentally making a `SpinLock` field `readonly` can result in silent but significant problems,  as any mutations to the instance (e.g. Enter, Exit) will be done on a compiler-generated copy and thus be ignored, making the lock an expensive nop.\r\n- [ ] **CancellationToken flowing**.  The rule should try to identify places where a `CancellationToken` should have been passed but wasn’t, e.g. in an async method that takes a `CancellationToken`, a method is called that has an overload that takes a `CancellationToken` but a shorter overload that doesn’t take a `CancellationToken` was used instead. cc: @marklio \r\n\r\n#### System.Threading.Tasks\r\n\r\n- [ ] **Passing TaskContinuationOptions to `new TaskCompletionSource<T>(object state)`**.  TCS has a ctor that takes a `TaskCreationOptions options` and another ctor that takes an `object state`.  There’s a similar enum to `TaskCreationOptions` that’s only meant to be used with `ContinueWith`: `TaskContinuationsOptions`.  It’s easy to accidentally pass a `TaskContinuationOptions` to the TCS ctor, in which case it binds to the overload accepting an `object` and isn’t treating as options at all (and, adding insult to “your options aren’t respected” injury, it also boxes).\r\n- [ ] **`ValueTask`/`ValueTask<T>` correctness.** The rule should detect cases where there's a strong liklihood a `ValueTask{<T>}` is being used incorrectly, e.g. where a single instance may be awaited multiple times, where an instance may be awaited and then also returned out of a method, where an instance may have `.GetAwaiter().GetResult()` called on it when it's not obviously already completed, when one is stored into a static field or a dictionary or some other publishing mechanism, etc.\r\n\r\n### Performance\r\n\r\n#### System\r\n\r\n- [ ] **string.Concat with substrings**.  The rule should flag instances of a pattern like `str1 + str2.Substring(…) + str3` or `string.Concat(str1, str2.Substring(…), str3)` and instead switch to using the span-based `string.Concat(str1, str2.AsSpan(…), str3)`.\r\n\r\n- [ ] **AsSpan instead of Substring**.  Somewhat more generally, any time `string.Substring` is used as an argument to something where there's an equivalent overload that takes a `ReadOnlySpan<char>` (e.g. `StringBuilder.Append(string)` vs `StringBuilder.Append(ReadOnlySpan<char>)`), the case can be flagged to be changed to use `AsSpan` instead.\r\n\r\n- [ ] **string.Concat consolidation**. Various patterns of string concatenation generate unnecessary intermediate strings, e.g. `string result = s1 + s2; return result + s3;` will create an unnecessary string allocation, as will `string result = s1 + s2; if (condition) result+= s3; return result;` which could be rewritten as `string result = condition ? s1 + s2 + s3 : s1 + s2;`.  The rule would find and offer fixes for such patterns.\r\n\r\n- [ ] **Primitive substring parsing**.  The rule should flag instances of a pattern like `int.Parse(str.Substring(…))` and instead switch to using the span-based `int.Parse(str.AsSpan(…))`.  This would apply to all of the primitive types, and more generally potentially anything that has an overload taking a `ReadOnlySpan<char>` instead of a `string`.\r\n\r\n- [ ] **String.IndexOf(...) == 0**.  Calls to `String.IndexOf(...)` where the result is then just compared to 0 can instead be replaced by calls to `String.Contains(...)`.\r\n\r\n- [ ] **Stream.ReadByte/WriteByte missing overrides**.  The rule should flag custom Stream-derived types that don’t override `ReadByte` or `WriteByte`.\r\n\r\n- [ ] **Stream.ReadAsync/WriteAsync missing overrides**.  The rule should flag custom Stream-derived types that override `BeginRead/EndRead` or `BeginWrite/EndWrite` but that don’t override `ReadAsync` or `WriteAsync`.  And it should flag custom Stream-derived types that override the array-based `ReadAsync` or `WriteAsync` but that don’t override the `Memory`-based overloads of the same name. (Potentially the same should be done for the `Span`-based overloads, but as the array-based `Read` and `Write` methods are abstract and thus must be overridden, it’s harder to say whether those should be or not.)\r\n\r\n- [ ] **Stream.Read/WriteAsync overload usage**.  Find places where `await stream.Read/WriteAsync(array, offset, length, …)` are used and recommend they be replaced by calls to the overloads that take `{ReadOnly}Memory<byte>`, to benefit from the return type being `ValueTask<int>`.\r\n\r\n- [ ] **Tuple instead of ValueTuple**. The rule should find and flag cases where a `Tuple<…>` is being used but where a `ValueTuple<…>` would suffice, ideally with the C# language syntax employed.  There are some cases where a `Tuple<…>` is beneficial, however, so the patterns identified here would be constrained.\r\n\r\n- [ ] **params array allocation in loops**.  Find calls to System.* methods inside loops, where those methods take params arrays and those params arrays are being allocated, and hoist the allocation to before the loop if possible.\r\n\r\n- [ ] **Replace local allocations with span stackallocs.**.  Flag places where known small temporary arrays of primitives (e.g. with a small constant length / where the total size of sizeof(T)*length can be determined to be < some threshold) not inside any loop and not passed around could be replaced by span stackallocs.\r\n\r\n- [ ] **StringBuilder.Append(char vs string)**. It's common to see calls to `StringBuilder.Append(string)` with a const `string` containing a single character, e.g. `\",\"`.  These would be slightly cheaper as calls using a const `char` instead.\r\n\r\n- [ ] **StringBuilder.Append(primitive.ToString())**.  The primitive should be passed directly instead.\r\n\r\n- [ ] **Nullable.GetValueOrDefault**. After checking a `Nullable<T>.HasValue`, it's common to see calls to `Nullable<T>.Value`; instead of calling `Value`, it's less work to call `GetValueOrDefault()`, as `Value` repeats the `HasValue` check.  It's possible a future JIT could optimize away the duplicate check, but if nothing else using `GetValueOrDefault()` makes the job of the JIT easier.\r\n\r\n- [ ] **Lifting arrays of consts to statics**.  Arrays of consts passed to known methods on types like System.String (e.g. `string.IndexOfAny(new[] { ',', '.' })`) can be lifted out to static readonly fields.\r\n\r\n- [ ] **static `ReadOnlySpan<byte>` properties**.  A pattern like `static readonly byte[] s_array = new byte[] { ... }` where all consumers of s_array could instead operate on a span can be changed instead to `static ReadOnlySpan<byte> Data => new byte[] { ... }`, and the C# compiler will optimize the implementation.\r\n\r\n#### System.Collections\r\n\r\n- [ ] **Dictionary.ContainsKey(key) followed by Dictionary.Remove(key)**.  The pair can be combined into just the `Remove` call.\r\n\r\n- [ ] **Dictionary.ContainsKey(key) followed by Dictionary.this[key]**.  The pair can be combined into just a `TryGetValue` call.\r\n\r\n- [ ] **!Dictionary.ContainsKey(key) followed by Dictionary.Add**.  The pair can be combined into just a `TryAdd` call.\r\n\r\n- [ ] **Dictionary.ContainsKey(key), followed by Dictionary.this[key], followed by Dictionary.Remove(key)**.  The trio can be combined into just the `Remove` call, using the overload accepting `out TValue value`.\r\n\r\n#### System.Collections.Concurrent\r\n\r\n- [ ] **Count instead of IsEmpty**.  Find places where a concurrent collection’s Count is accessed and compared to 0, then replace with IsEmpty.\r\n\r\n#### System.Threading\r\n\r\n- [ ] **Replace “old” synchronization primitives with newer ones.** e.g. find places where a ManualResetEvent is created without a name, where its never passed to WaitHandle.WaitAll/Any, etc., and replace usage with ManualResetEventSlim.\r\n\r\n#### System.Threading.Tasks\r\n\r\n- [ ] **Using `ValueTask<T>` instead of `Task<T>`**.  Flagging internal/private methods that returns `T`s that won’t be entirely cached (e.g. bool) and where every caller of the method only ever awaits its result directly.\r\n\r\n- [ ] **Task.Delay in Task.WhenAny**.  Flag places where a Task.Delay is used as an argument to WhenAny and where that Task.Delay doesn’t take a cancellation token, in which case the Task.Delay is likely leaving a timer running for longer than is necessary.\r\n\r\n- [ ] **Task.WhenAll with one argument**.  There’s no reason to call WhenAll with a single `Task`; just use the `Task`.\r\n\r\n- [ ] **Task.WaitAll with one argument**.  `Task.Wait` can be used instead.\r\n\r\n### Style\r\n\r\n#### System.Runtime.InteropServices\r\n\r\n- [ ] **DllImport defaults**.  Flag places where an attribute is set on a DllImport that’s already the default value.\r\n\r\n#### System.Threading\r\n\r\n- [ ] **CancellationToken.ThrowIfCancellationRequested**.  Flag code that does `if (token.IsCancellationRequested) throw new OperationCanceledException();` or `if (token.IsCancellationRequested) throw new OperationCanceledException(token);` and replace with `token.ThrowIfCancellationRequested();`.\r\n\r\ncc: @jaredpar, @mavasani, @danmosemsft","Url":"https://github.com/dotnet/corefx/issues/40739","RelatedDescription":"Open issue \"Static analysis for .NET 5\" (#40739)"},{"Id":"487802922","IsPullRequest":true,"CreatedAt":"2019-09-01T18:36:06","Actor":"aaronfranke","Number":"40733","RawContent":null,"Title":"[WIP] Add System.Numerics.Colors","State":"closed","Body":"This pull request adds two primitive Color types to .NET Core, closes #2315\r\n\r\nThe two types are `Color`, which uses four single-precision floats for the RGBA components, and `Color8`, which uses four bytes for the RGBA components. Personally I would be fine with only having a type that uses floats, but a type that uses `byte` was a very strongly requested feature in #2315, so I think it's worth including. Each of these types can be converted to each other, constructed with each other, and have properties `R8`/`Rf`/etc to allow storing as one type and easily using the other in code.\r\n\r\nAnother commonly requested feature was a Color type that uses HSV. Against @Joe4evr's advice, I don't think this is worth adding as its own type, but `Color` and `Color8` also have `H`/`S`/`V` properties for working with hue, saturation, and value, and there are `ToHsv` and `FromHsv` methods.\r\n\r\nTo make this, I used and/or referenced several existing Color types:\r\n\r\n* Of course, [`System.Drawing.Color`](https://github.com/dotnet/corefx/blob/master/src/System.Drawing.Primitives/src/System/Drawing/Color.cs) (see [docs](https://docs.microsoft.com/en-us/dotnet/api/system.drawing.color)). Many things from `System.Drawing.Color` were not included or implemented differently because they did not seem relevant for a generic built-in Color type. For example, instead of `GetHue` etc methods, `H` etc properties were used.\r\n\r\n* [Godot's `Color` type](https://github.com/godotengine/godot/blob/master/modules/mono/glue/Managed/Files/Color.cs) (see [non-C# docs](https://docs.godotengine.org/en/latest/classes/class_color.html)), which uses 32-bit float RGBA, MIT license. Godot's strategy is to have one universal Color type that's used everywhere.\r\n\r\n* [Xenko's color types](https://github.com/xenko3d/xenko/tree/master/sources/core/Xenko.Core.Mathematics), MIT license. Xenko's strategy is to have tons of types and write tons of code for every use case, and there's a point of bloat and diminishing returns here. Xenko has `Color` as using four `byte` values and `Color4` as using four `float` values, among several other types, but this isn't ideal and they have expressed that [they're open to changing this](https://github.com/xenko3d/xenko/issues/259#issuecomment-482049951).\r\n\r\nA few important notes:\r\n\r\n* All preset Color structs are in a separate `static class Colors`. This makes code vastly more readable because it separates preset colors from actual `Color` members, and I think it's a great improvement compared to `System.Drawing.Color`. All preset colors from `System.Drawing.Color` are included, as well as all preset colors from Godot (\"MaroonX11\" is Godot's \"Maroon\").\r\n\r\n* Currently HSV in `Color8` are `float` properties. It does make sense to have saturation and value as `byte`, but hue is usually expressed in terms of degrees, and I've never seen APIs that express it as a `byte`. I decided to use `float` everywhere for HSV for S/V consistency with hue, but we could still change these to `byte`.\r\n\r\n* Traditionally, Microsoft APIs such as DirectX and `System.Drawing` use ARGB, but the rest of the world uses RGBA. These types use RGBA order everywhere, which also helps fit with the goal if [\"Semantic parity with CSS\"](https://github.com/dotnet/corefx/issues/2315#issue-94412061).\r\n\r\nWhat needs to be done next, and what I need the .NET team to help with:\r\n\r\n- [ ] The API of the structs needs to be reviewed and approved.\r\n\r\n- [ ] The rest of the files need to be reviewed, such as the `sln`, `csproj`, and `props` files. I mostly created these by copying `System.Numerics.Vectors` and changing things, so some of the code is likely to be wrong.\r\n\r\n- [ ] Test cases need to be written. Currently there is an empty file. I am not sure what should be tested, and how much of the test code from `System.Drawing.Color` can/should be re-used.\r\n\r\n- [ ] [Documentation](https://docs.microsoft.com/en-us/dotnet/api/system.numerics?view=netcore-3.0) needs to be written. The structs already have inline XML documentation.\r\n\r\n- [ ] Investigate implementing `FromName`. I originally had a `Dictionary<string, Color>` in `Colors.cs` but I got errors when trying to include `Dictionary` inside of `System.Numerics.Colors`.\r\n\r\n- [ ] Investigate if, and to what extent, intrinsic optimizations can be used.\r\n\r\n- [ ] I don't know if any of @tannergooding's suggestions can or should be implemented. In any case he seems to know a lot about color types so I'd love his feedback and he's welcome to pitch in and/or take over, building on my work.\r\n\r\nNot all of these things necessarily need to be solved before this PR is merged, but everything should at least be addressed with a plan forward.\r\n\r\nI did verify that CoreFx build successfully on my system (Linux) but I have not ran a project on that build of CoreFx.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40733","RelatedDescription":"Closed or merged PR \"[WIP] Add System.Numerics.Colors\" (#40733)"},{"Id":"487857982","IsPullRequest":true,"CreatedAt":"2019-09-01T14:59:18","Actor":"NextTurn","Number":"40735","RawContent":null,"Title":"Simplify BitArray enumerator","State":"closed","Body":"|  Method |     Mean |    Error |   StdDev |\r\n|-------- |---------:|---------:|---------:|\r\n|  Before | 310.5 ns | 2.009 ns | 1.781 ns |\r\n|   After | 265.6 ns | 2.436 ns | 2.279 ns |","Url":"https://github.com/dotnet/corefx/pull/40735","RelatedDescription":"Closed or merged PR \"Simplify BitArray enumerator\" (#40735)"},{"Id":"487832894","IsPullRequest":false,"CreatedAt":"2019-09-01T13:42:25","Actor":"SirJosh3917","Number":"40734","RawContent":null,"Title":"[Question] Newest APIs related to asycnhronous queues?","State":"closed","Body":"Recently, I've wanted to implement a simple enqueue/dequeue extremely similar to `ConcurrentQueue<T>`, but with a truly asynchronous `Dequeue` method. My current result, is this <https://paste.mod.gg/agovewixaj.cpp>\r\n\r\nHowever, the primary problem is that the `CancellationToken` passed to `Dequeue` will never actually do anything, since `ThreadPool.RegisterWaitForSingleObject` doesn't accept a `CancellationToken`, so my other route is to look for ManualResetEvent(Slim) alternatives.\r\n\r\nI noticed @stephentoub had a blog post from 2012 with an asynchronous manual reset event, and I'm curious if it's still relevant? It doesn't accept a `CancellationToken` for WaitAsync though, which is what troubles me about it.\r\n\r\nI'm currently at a roadblock for where to go since I'm not very knowledgeable in async. The current implementation that I have can hit up to 6 million messages per second (int) with one thread enqueueing and another task dequeueing, and in a perfect world I wouldn't want to sacrifice any performance (but I'd be prepared to take a mild hit).","Url":"https://github.com/dotnet/corefx/issues/40734","RelatedDescription":"Closed issue \"[Question] Newest APIs related to asycnhronous queues?\" (#40734)"},{"Id":"487878028","IsPullRequest":true,"CreatedAt":"2019-09-01T13:38:12","Actor":"dotnet-maestro[bot]","Number":"40738","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190831.9\r\n- **Date Produced**: 9/1/2019 5:56 AM\r\n- **Commit**: cabc10d2675e4b61f349b7b7887f549ad15bd060\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19431.9\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19431.9\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19431.9\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190831.3\r\n- **Date Produced**: 8/31/2019 5:22 PM\r\n- **Commit**: c4b450ba5d9898be09fe589ba2583772c70a4712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19431.3\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19431.3\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190831.2\r\n- **Date Produced**: 8/31/2019 1:06 PM\r\n- **Commit**: 1f8db42d345e9d289283236fa01952407ee5f040\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19431.2\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40738","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard\" (#40738)"},{"Id":"487866396","IsPullRequest":false,"CreatedAt":"2019-09-01T10:10:32","Actor":"odhanson","Number":"40737","RawContent":null,"Title":"Socket.ConnectAsync on MacOS with sandbox enabled, requires server entitlements","State":"open","Body":"When calling System.Net.HttpWebRequest.GetResponse/SendRequest a socket connection is made from the client machine to the HTTP server. In MacOS, if the app is running from within a sandbox, it is understandable that com.apple.security.network.client should be added to the list of entitlements so the app will have permissions to make network connections. \r\nIt turns out, however, that Socket.ConnectAsync will bind the socket to IPAddress.Any. in MacOS, binding the socket requires com.apple.security.network.server permissions which is used when we want to allow incoming connections to our app. \r\nRequiring com.apple.security.network.server is unreasonable IMO and I wonder why do we need to Bind a client socket connection to an IPAddress ?","Url":"https://github.com/dotnet/corefx/issues/40737","RelatedDescription":"Open issue \"Socket.ConnectAsync on MacOS with sandbox enabled, requires server entitlements\" (#40737)"},{"Id":"487863043","IsPullRequest":false,"CreatedAt":"2019-09-01T09:31:03","Actor":"Happypig375","Number":"40736","RawContent":null,"Title":"Read from location on console","State":"open","Body":"So that `SetCursorPosition` + `ReadLine` can be called without the input overwriting the console. Currently on Windows, this requires P/Invoke: https://stackoverflow.com/questions/12355378/read-from-location-on-console-c-sharp","Url":"https://github.com/dotnet/corefx/issues/40736","RelatedDescription":"Open issue \"Read from location on console\" (#40736)"},{"Id":"487800306","IsPullRequest":true,"CreatedAt":"2019-08-31T18:48:38","Actor":"Wraith2","Number":"40732","RawContent":null,"Title":"SqlClient fix managed encryption connection failure","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/40476\r\n\r\nFixes a bug in encapsulation of ssl over tds when connecting to SqlServer using the managed implementation (non-windows and uap). This is a slight rework of the original code (not the buggy replacement). \r\n\r\nIt has been run through the manual tests with and without entyption enabled in the connection string and fails in no places that the unix manual tests do not already fail. When tested manually under a debugger to ensure it works it correctly allows connection and read of an entire table using the managed interface, this means that switch from encapsulation to streamed encryption works correctly.\r\n\r\n/cc @wfurt @stephentoub @bartonjs @rmja \r\n\r\nthis will need porting to M.D.SqlClient when the PR that introduces the issue is ported @cheenamalhotra @david-engel","Url":"https://github.com/dotnet/corefx/pull/40732","RelatedDescription":"Open PR \"SqlClient fix managed encryption connection failure\" (#40732)"},{"Id":"487782761","IsPullRequest":false,"CreatedAt":"2019-08-31T15:45:45","Actor":"GSPP","Number":"40731","RawContent":null,"Title":"ReadOnlySequence.Slice InvalidCastException","State":"open","Body":"    readOnlySequence.Slice(new SequencePosition(\"x\", 1))\r\n\r\nThrows an InvalidCastException. This should validate the type and throw a usage error instead.\r\n\r\nSequencePosition can store any type of object. Reading the code for SequencePosition I got the impression that the code was not written with that realization. So maybe there are more places where it is possible to pass in a value of unexpected type.\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/40731","RelatedDescription":"Open issue \"ReadOnlySequence.Slice InvalidCastException\" (#40731)"},{"Id":"487773160","IsPullRequest":false,"CreatedAt":"2019-08-31T14:01:57","Actor":"EddieDemon","Number":"40730","RawContent":null,"Title":"Microsoft.XmlSerializer.Generator 2.0.0 - Could not load System.Runtime 4.2.1.0","State":"open","Body":"Hi there!\r\n\r\nI'm trying to generate an xml serialization assembly but I keep on stranding with the following:\r\n\r\n> SGEN : warning SGEN1: Could not load file or assembly 'System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL'.\r\n\r\nI've seen several posts pointing to edit the configuration file of Visual Studio but that was no solution in my case.\r\n\r\nI tried both version 1.0.0 and 2.0.0, neither of them work, however version 1.0.0 doesn't generate any specific log output. Both versions end their logging with similar lines;\r\n\r\n> Assembly '[path to project]\\obj\\Debug\\netcoreapp2.2\\library.dll' does not contain any types that can be serialized using XmlSerializer.\r\n1>%USERPROFILE%\\.nuget\\packages\\microsoft.xmlserializer.generator\\2.0.0\\build\\Microsoft.XmlSerializer.Generator.targets(16,5): warning : SGEN: Fail to generate the serializer for library.dll. Please follow the instructions at https://go.microsoft.com/fwlink/?linkid=858594 and try again.\r\n\r\nInterestingly enough, though, is that I got no issue on another device. This proofs that it is a local issue. I'd still like to be able to use the generator on my main device, what am I missing that this does not work?\r\n","Url":"https://github.com/dotnet/corefx/issues/40730","RelatedDescription":"Open issue \"Microsoft.XmlSerializer.Generator 2.0.0 - Could not load System.Runtime 4.2.1.0\" (#40730)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"488185911","IsPullRequest":false,"CreatedAt":"2019-09-02T21:14:50","Actor":"TessenR","Number":"38445","RawContent":null,"Title":"Roslyn incorrectly allows assignments of `default` literal to unconstrained generics which might bt substituted with non-nullable reference types","State":"closed","Body":"**Version Used**: \r\n\r\n```\r\nBranch master (1 Sep 2019)\r\nLatest commit b4cad27 by Neal Gafter:\r\nBind some syntax nodes even in error recovery scenarios. (#38348)\r\n\r\nFixes #27060\r\n```\r\n\r\n```\r\ncommit baa0dcc0f3d023c37c069c4feb36986e979036cd\r\nMerge: 548db2b498 f889038688\r\nAuthor: dotnet-automerge-bot <38986832+dotnet-automerge-bot@users.noreply.github.com>\r\nDate:   Mon Aug 5 16:00:23 2019 -0700\r\n\r\n    Merge pull request #37730 from dotnet/merges/release/dev16.3-preview2-to-master\r\n\r\n    Merge release/dev16.3-preview2 to master\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile and run the following code:\r\n```cs\r\n#nullable enable\r\nclass C\r\n{\r\n  static void M<T>(T[] arr)\r\n  {\r\n      var t = \"\".Length > 0 ? arr[0] : default;\r\n      arr[0] = t;\r\n  }\r\n    \r\n  static void Main()\r\n  {\r\n      string[] arr = new[] { \"\" };\r\n      M(arr);\r\n      arr[0].ToString();\r\n  }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nWarning `warning CS8653: A default expression introduces a null value when 'T' is a non-nullable reference type.` for `t = \"\".Length > 0 ? arr[0] : default`.\r\n\r\n**Actual Behavior**:\r\nNo warnings are reported for the program above. The program crashes at runtime with a `NullReferenceException`\r\n\r\n**Notes**\r\nThe following also works:\r\n```\r\nT M1<T>() where T: new() => \"\".Length > 0 ? new T() : default;\r\nT M2<T>(T t) => t ?? default;\r\n```\r\nIt seems like any indirect usage of `default` literals misses the warning.","Url":"https://github.com/dotnet/roslyn/issues/38445","RelatedDescription":"Closed issue \"Roslyn incorrectly allows assignments of `default` literal to unconstrained generics which might bt substituted with non-nullable reference types\" (#38445)"},{"Id":"488279397","IsPullRequest":false,"CreatedAt":"2019-09-02T17:43:29","Actor":"TheUnlocked","Number":"38446","RawContent":null,"Title":"Provide special error message and/or code fix for when a variable is referenced on the same line that it's initialized.","State":"open","Body":"This is a proposal stemming from https://github.com/dotnet/csharplang/issues/2744, for if you want to see some additional discussion of it.\r\n\r\nIf you write the line\r\n```csharp\r\nFunc<int, int> factorial = n => n <= 1 ? 1 : n * factorial(n-1);\r\n```\r\nthen you get the error `CS0165 Use of unassigned local variable 'factorial'`. The solution to this seems unclear at first, but a lightbulb with a \"Use local function\" code fix pops up, and that will of course resolve the issue.\r\n\r\nHowever, there are other situations where you won't be so lucky:\r\n```csharp\r\nclass Foo : IFoo {\r\n    public Func<IFoo> fooAction;\r\n    public string fooString;\r\n    public Foo (Func<IFoo> fooAction, string fooString) {\r\n        this.fooAction = fooAction;\r\n        this.fooString = fooString;\r\n    }\r\n}\r\n\r\nFoo obj = new Foo(() => obj, \"Hello, World!\");\r\n```\r\nHere the same error appears, but no IDE assistance is provided to fix it, leaving a programmer wondering how they can solve the issue. Of course, simply initializing `obj` to another value (like `null`) before assigning it would work, but the programmer wouldn't necessarily know that. I propose adding a special error message in this case, for example `Use of unassigned local variable 'obj'. 'obj' must be initialized before it can be assigned in terms of itself.` or something like that (I'm not the greatest at writing good errors). Additionally, I propose a code fix in this situation (possibly _only_ for when the variable is used in a lambda expression) to convert\r\n```csharp\r\nFoo obj = new Foo(() => obj, \"Hello, World!\");\r\n```\r\nto\r\n```csharp\r\nFoo obj = null; // or default\r\nobj = new Foo(() => obj, \"Hello, World!\");\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38446","RelatedDescription":"Open issue \"Provide special error message and/or code fix for when a variable is referenced on the same line that it's initialized.\" (#38446)"},{"Id":"488147602","IsPullRequest":false,"CreatedAt":"2019-09-02T11:42:29","Actor":"lukaszunity","Number":"38444","RawContent":null,"Title":"Using /refout causes \"FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException\"","State":"open","Body":"**Version Used**: \r\n\r\nReproduces in the following versions:\r\n\r\n2.10\r\n3.1.1\r\n3.2.1\r\n3.3.0-beta2-final\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Download: [RefoutBug.zip](https://github.com/dotnet/roslyn/files/3565863/RefoutBug.zip)\r\n2. Compile the assembly using `csc.exe @RefoutBug.rsp /noconfig`\r\n3. Unhandled Exception error is emitting. See full exception stack trace in [UnhandledException.txt](https://github.com/dotnet/roslyn/files/3565867/UnhandledException.txt)\r\n\r\nThe unhandled exception is not thrown when removing `/refout:\"ref-Unity.Postprocessing.Runtime.dll\"` from `RefoutBug.rsp`\r\n\r\n**Expected Behavior**:\r\nNo exception is thrown and the reference assembly is created.\r\n\r\n**Actual Behavior**:\r\nException is thrown and the reference assembly is not created.","Url":"https://github.com/dotnet/roslyn/issues/38444","RelatedDescription":"Open issue \"Using /refout causes \"FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException\"\" (#38444)"},{"Id":"488005921","IsPullRequest":false,"CreatedAt":"2019-09-02T05:39:20","Actor":"davkean","Number":"38443","RawContent":null,"Title":"Checking \"Enable nullable references analysis IDE features\" option crashes VS","State":"open","Body":"**Version Used**: \r\nVersion 16.3.0 Preview 3.0 [29230.54.d16.3]\r\n\r\n**Steps to Reproduce**:\r\n1. `git clone http://github.com/dotnet/project-system`\r\n2. `cd project-system`\r\n3. `git checkout 344a305681c5dc630f82f86880bc0a2e527fad1f`\r\n4. `ProjectSystem.sln`\r\n5. Tools -> Options -> Text Editor -> C# -> Advanced -> Enable nullable references analysis IDE features\r\n\r\n\r\n```\r\nApplication: devenv.exe\r\nFramework Version: v4.0.30319\r\nDescription: The application requested process termination through System.Environment.FailFast(string message).\r\nMessage: System.ArgumentException: '<Project852a3940-e0cd-4e7d-99e5-691190c256d9>' is not part of the workspace.\r\n   at Microsoft.CodeAnalysis.Workspace.CheckProjectIsInCurrentSolution(ProjectId projectId)\r\n   at Microsoft.CodeAnalysis.Workspace.HandleProjectChange(ProjectId projectId, Func`2 getSolutionWithChangedProject)\r\n   at Microsoft.CodeAnalysis.Workspace.OnParseOptionsChanged(ProjectId projectId, ParseOptions options)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.<>c__DisplayClass49_0.<set_ParseOptions>b__1(Workspace w)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyChangeToWorkspace(Action`1 action)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.ChangeProjectProperty[T](T& field, T newValue, Func`2 withNewValue, Action`1 changeValue)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.set_ParseOptions(ParseOptions value)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectOptionsProcessor.UpdateProjectOptions_NoLock()\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectOptionsProcessor.UpdateProjectForNewHostValues()\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectOptionsProcessor.OptionService_OptionChanged(Object sender, OptionChangedEventArgs e)\r\n   at Microsoft.CodeAnalysis.Options.OptionServiceFactory.OptionService.<>c__DisplayClass7_0.<OnGlobalOptionServiceOptionChanged>b__0()\r\n   at Roslyn.Utilities.TaskExtensions.<>c__DisplayClass14_0.<ContinueWithAfterDelay>b__1(Task _)\r\n   at Roslyn.Utilities.TaskExtensions.<>c__DisplayClass2_0.<SafeContinueWith>g__continuationFunction|0(Task antecedent)\r\n   at Roslyn.Utilities.TaskExtensions.<>c__DisplayClass6_0`1.<SafeContinueWith>g__outerFunction|0(Task t)\r\nStack:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.CodeAnalysis.FailFast.OnFatalException(System.Exception)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.Report(System.Exception, System.Action`1<System.Exception>)\r\n   at Microsoft.CodeAnalysis.ErrorReporting.FatalError.ReportUnlessCanceled(System.Exception)\r\n   at Roslyn.Utilities.TaskExtensions+<>c__DisplayClass6_0`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].<SafeContinueWith>g__outerFunction|0(System.Threading.Tasks.Task)\r\n   at Microsoft.CodeAnalysis.Workspace.CheckProjectIsInCurrentSolution(Microsoft.CodeAnalysis.ProjectId)\r\n   at Microsoft.CodeAnalysis.Workspace.HandleProjectChange(Microsoft.CodeAnalysis.ProjectId, System.Func`2<Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Solution>)\r\n   at Microsoft.CodeAnalysis.Workspace.OnParseOptionsChanged(Microsoft.CodeAnalysis.ProjectId, Microsoft.CodeAnalysis.ParseOptions)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject+<>c__DisplayClass49_0.<set_ParseOptions>b__1(Microsoft.CodeAnalysis.Workspace)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyChangeToWorkspace(System.Action`1<Microsoft.CodeAnalysis.Workspace>)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.ChangeProjectProperty[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.__Canon ByRef, System.__Canon, System.Func`2<Microsoft.CodeAnalysis.Solution,Microsoft.CodeAnalysis.Solution>, System.Action`1<Microsoft.CodeAnalysis.Workspace>)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.set_ParseOptions(Microsoft.CodeAnalysis.ParseOptions)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectOptionsProcessor.UpdateProjectOptions_NoLock()\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectOptionsProcessor.UpdateProjectForNewHostValues()\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectOptionsProcessor.OptionService_OptionChanged(System.Object, Microsoft.CodeAnalysis.Options.OptionChangedEventArgs)\r\n   at Microsoft.CodeAnalysis.Options.OptionServiceFactory+OptionService+<>c__DisplayClass7_0.<OnGlobalOptionServiceOptionChanged>b__0()\r\n   at Roslyn.Utilities.TaskExtensions+<>c__DisplayClass14_0.<ContinueWithAfterDelay>b__1(System.Threading.Tasks.Task)\r\n   at Roslyn.Utilities.TaskExtensions+<>c__DisplayClass2_0.<SafeContinueWith>g__continuationFunction|0(System.Threading.Tasks.Task)\r\n   at Roslyn.Utilities.TaskExtensions+<>c__DisplayClass6_0`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].<SafeContinueWith>g__outerFunction|0(System.Threading.Tasks.Task)\r\n   at System.Threading.Tasks.ContinuationResultTaskFromTask`1[[System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]].InnerInvoke()\r\n   at System.Threading.Tasks.Task.Execute()\r\n   at System.Threading.Tasks.Task.ExecutionContextCallback(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)\r\n   at System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.VisualStudioTaskSchedulerFactory+JoinableTaskFactoryTaskScheduler+<>c__DisplayClass5_0+<<QueueTask>b__0>d.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.InvokeMoveNext(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore+MoveNextRunner.Run()\r\n   at Microsoft.VisualStudio.Threading.JoinableTaskFactory+SingleExecuteProtector.TryExecute()\r\n   at Microsoft.VisualStudio.Threading.JoinableTaskFactory+SingleExecuteProtector+<>c.<.cctor>b__20_0(System.Object)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(System.Object)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr, Int32, IntPtr, IntPtr, Boolean ByRef)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(System.Object)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(System.Delegate, System.Object, Int32)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(System.Object, System.Delegate, System.Object, Int32, System.Delegate)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(System.Windows.Threading.DispatcherPriority, System.TimeSpan, System.Delegate, System.Object, Int32)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr, Int32, IntPtr, IntPtr)\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38443","RelatedDescription":"Open issue \"Checking \"Enable nullable references analysis IDE features\" option crashes VS\" (#38443)"},{"Id":"487943122","IsPullRequest":false,"CreatedAt":"2019-09-01T23:30:24","Actor":"KirillOsenkov","Number":"38442","RawContent":null,"Title":"DisposeObjectsBeforeLosingScopeDiagnosticAnalyzer: ArgumentOutOfRange in GetAnonymousFunctionControlFlowGraph","State":"open","Body":"**Version Used**: \r\nRoslyn 3.3\r\n\r\nSeeing a first-chance ArgumentOutOfRangeException in DisposeObjectsBeforeLosingScopeDiagnosticAnalyzer on a pretty complicated type. I was unable to isolate a short repro. Long repro available upon request.\r\n\r\nThis could be a dupe of https://github.com/dotnet/roslyn/issues/29836 but I'm filing just in case.\r\nThe ArgumentOutOfRange is caught here:\r\nhttps://github.com/dotnet/roslyn-analyzers/blob/3f44df7de96267a2b0bf7a4ba6a0086fc560fc18/src/Utilities/FlowAnalysis/FlowAnalysis/Framework/DataFlow/AbstractDataFlowAnalysisContext.cs#L134-L140\r\n\r\nSee also: https://github.com/dotnet/roslyn-analyzers/issues/1812\r\n\r\n```\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.FlowAnalysis.ControlFlowGraph.GetAnonymousFunctionControlFlowGraph\r\n-- | -- | --\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext`4.GetAnonymousFunctionControlFlowGraph\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4+<>c__DisplayClass216_0.<VisitInvocation_Lambda>g__getCfg\\|0\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.PerformInterproceduralAnalysis\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_Lambda\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitInvocation_Lambda\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4+<>c__DisplayClass211_3.<VisitInvocation_LambdaOrDelegateOrLocalFunction>b__7\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4+<>c__DisplayClass211_0.<VisitInvocation_LambdaOrDelegateOrLocalFunction>g__AnalyzePossibleTargetInvocation\\|5\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4+<>c__DisplayClass211_0.<VisitInvocation_LambdaOrDelegateOrLocalFunction>g__AnalyzePossibleTargetInvocations\\|4\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_LambdaOrDelegateOrLocalFunction\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseInvocationOperation.Accept\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.FlowBranch\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.FlowBranch\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.RunCore\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.Run\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5+<>c__DisplayClass8_0.<TryGetOrComputeResultCore>b__0\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Analyzer.Utilities.SingleThreadedConcurrentDictionary`2.GetOrAdd\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.TryGetOrComputeResultCore\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResultForAnalysisContext\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.PerformInterproceduralAnalysis\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_NonLambdaOrDelegateOrLocalFunction\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitInvocation_NonLambdaOrDelegateOrLocalFunction\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_NonLambdaOrDelegateOrLocalFunction\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseInvocationOperation.Accept\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitAssignmentOperation\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitAssignmentOperation\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitSimpleAssignment\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseSimpleAssignmentOperation.Accept\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Flow\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.Flow\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.Flow\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.RunCore\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.Run\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5+<>c__DisplayClass8_0.<TryGetOrComputeResultCore>b__0\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Analyzer.Utilities.SingleThreadedConcurrentDictionary`2.GetOrAdd\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.TryGetOrComputeResultCore\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResultForAnalysisContext\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.PerformInterproceduralAnalysis\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_NonLambdaOrDelegateOrLocalFunction\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitInvocation_NonLambdaOrDelegateOrLocalFunction\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation_NonLambdaOrDelegateOrLocalFunction\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitInvocation\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseInvocationOperation.Accept\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitConversion\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitConversion\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseConversionOperation.Accept\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitAssignmentOperation\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.VisitAssignmentOperation\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitSimpleAssignment\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseSimpleAssignmentOperation.Accept\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitArray\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.DefaultVisit\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.DefaultVisit\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.OperationVisitor`2.VisitExpressionStatement\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Operations.BaseExpressionStatementOperation.Accept\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.VisitCore\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Visit\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowOperationVisitor`4.Flow\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis+PointsToDataFlowOperationVisitor.Flow\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.Flow\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.RunCore\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.Run\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5+<>c__DisplayClass8_0.<TryGetOrComputeResultCore>b__0\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Analyzer.Utilities.SingleThreadedConcurrentDictionary`2.GetOrAdd\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.TryGetOrComputeResultCore\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResultForAnalysisContext\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResult\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResult\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAnalysis.TryGetOrComputeResult\r\n  | Microsoft.CodeAnalysis.FlowAnalysis.Utilities | Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DisposeAnalysis.DisposeAnalysis.TryGetOrComputeResult\r\n  | Microsoft.CodeAnalysis.Features | Microsoft.CodeAnalysis.DisposeAnalysis.DisposeAnalysisHelper.TryGetOrComputeResult\r\n  | Microsoft.CodeAnalysis.Features | Microsoft.CodeAnalysis.DisposeAnalysis.DisposeObjectsBeforeLosingScopeDiagnosticAnalyzer.PerformFlowAnalysisOnOperationBlock\r\n  | Microsoft.CodeAnalysis.Features | Microsoft.CodeAnalysis.DisposeAnalysis.DisposeObjectsBeforeLosingScopeDiagnosticAnalyzer.AnalyzeOperationBlock\r\n  | Microsoft.CodeAnalysis.Features | Microsoft.CodeAnalysis.DisposeAnalysis.DisposeObjectsBeforeLosingScopeDiagnosticAnalyzer+<>c__DisplayClass4_0.<InitializeWorker>b__1\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor+<>c__58`2.<ExecuteBlockActions>b__58_1\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteBlockActions\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteBlockActionsCore\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.TryExecuteOperationBlockActions\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1+<>c__DisplayClass14_0.<TryExecuteDeclaringReferenceActions>g__executeOperationsBlockActions\\|7\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1+<>c__DisplayClass14_0.<TryExecuteDeclaringReferenceActions>g__executeExecutableCodeActions\\|3\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.TryExecuteDeclaringReferenceActions\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.TryExecuteDeclaringReferenceActions\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+<TryProcessSymbolDeclaredAsync>d__96.MoveNext\r\n  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclaredAsync\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+<TryProcessEventCoreAsync>d__95.MoveNext\r\n  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCoreAsync\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+<ProcessEventAsync>d__93.MoveNext\r\n  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEventAsync\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+<ProcessCompilationEventsCoreAsync>d__92.MoveNext\r\n  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsCoreAsync\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+<ProcessCompilationEventsAsync>d__91.MoveNext\r\n  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsAsync\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+<ExecutePrimaryAnalysisTaskAsync>d__64.MoveNext\r\n  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ExecutePrimaryAnalysisTaskAsync\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver+<AttachQueueAndProcessAllEventsAsync>d__62.MoveNext\r\n  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.AttachQueueAndProcessAllEventsAsync\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+<ComputeAnalyzerDiagnosticsCoreAsync>d__64.MoveNext\r\n  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.ComputeAnalyzerDiagnosticsCoreAsync\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+<>c__DisplayClass57_1+<<ComputeAnalyzerDiagnosticsAsync>b__1>d.MoveNext\r\n  | mscorlib | System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start\r\n  | Microsoft.CodeAnalysis | Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers+<>c__DisplayClass57_1.<ComputeAnalyzerDiagnosticsAsync>b__1\r\n  | mscorlib | System.Threading.Tasks.Task`1.InnerInvoke\r\n  | mscorlib | System.Threading.Tasks.Task.Execute\r\n  | mscorlib | System.Threading.Tasks.Task.ExecutionContextCallback\r\n  | mscorlib | System.Threading.ExecutionContext.RunInternal\r\n  | mscorlib | System.Threading.ExecutionContext.Run\r\n  | mscorlib | System.Threading.Tasks.Task.ExecuteWithThreadLocal\r\n  | mscorlib | System.Threading.Tasks.Task.ExecuteEntry\r\n  | mscorlib | System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem\r\n  | mscorlib | System.Threading.ThreadPoolWorkQueue.Dispatch\r\n  | mscorlib | System.Threading._ThreadPoolWaitCallback.PerformWaitCallback\r\n\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38442","RelatedDescription":"Open issue \"DisposeObjectsBeforeLosingScopeDiagnosticAnalyzer: ArgumentOutOfRange in GetAnonymousFunctionControlFlowGraph\" (#38442)"},{"Id":"487899915","IsPullRequest":true,"CreatedAt":"2019-09-01T15:40:07","Actor":"mavasani","Number":"38441","RawContent":null,"Title":"Move to a newer FlowAnalysis utilities package","State":"open","Body":"This addresses the memory leak in #38330. The underlying memory leak was fixed in the FlowAnalysis utilities assembly with https://github.com/dotnet/roslyn-analyzers/pull/2795. This PR just moves Roslyn to newer Flow analysis utilities package reference with the fix.\r\n\r\nFixes #38330","Url":"https://github.com/dotnet/roslyn/pull/38441","RelatedDescription":"Open PR \"Move to a newer FlowAnalysis utilities package\" (#38441)"},{"Id":"487789197","IsPullRequest":true,"CreatedAt":"2019-08-31T16:51:44","Actor":"svick","Number":"38440","RawContent":null,"Title":"Preserve \"unsafe\" when refactoring between properties and methods","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/38379.\r\n\r\nThe problem is that `ISymbol` does not expose the `unsafe` modifier, which is why `DeclarationModifiers.From(ISymbol)` did not preserve it.\r\n\r\nThis PR changes `DeclarationModifiers.From(ISymbol)` so that it adds `unsafe` when it's clear from the `ISymbol` that it's necessary and also adds code to the refactoring to make sure `unsafe` is preserved even in cases where it's not clear from the `ISymbol`.\r\n\r\nA similar change is also made to the reverse refactoring.","Url":"https://github.com/dotnet/roslyn/pull/38440","RelatedDescription":"Open PR \"Preserve \"unsafe\" when refactoring between properties and methods\" (#38440)"},{"Id":"487787982","IsPullRequest":false,"CreatedAt":"2019-08-31T16:39:54","Actor":"GrahamTheCoder","Number":"38439","RawContent":null,"Title":"Expose DataFlowAnalysis.UnassignedVariables through public API","State":"open","Body":"This is a feature request to expose some form of this property through a public API:\r\nhttps://github.com/dotnet/roslyn/blob/007022c37c6d21ee100728954bd75113e0dfe4bd/src/Compilers/VisualBasic/Portable/Analysis/FlowAnalysis/VisualBasicDataFlowAnalysis.vb#L56\r\n\r\n### Implementation straw man suggestion\r\n\r\nPerhaps add this to `DataFlowAnalysis`:\r\n```csharp\r\n    /// <summary>\r\n    /// The set of local variables for which a value is always assigned inside\r\n    /// a region before being read\r\n    /// </summary>\r\n    public abstract ImmutableArray<ISymbol> DefinitelyAssignedBeforeRead { get; }\r\n```\r\nThe VisualBasicDataFlowAnalysis and CSharpDataFlowAnalysis both already have a private property which is a `HashSet<Symbol> UnassignedVariables`\r\n\r\nPerformance aside, DefinitelyAssignedBeforeRead would be implemented as something like:\r\n```csharp\r\nDeclaredVariables.Where(v => !UnassignedVariables.Contains(v))\r\n```\r\nObviously the way I've named it, arguably you might also want to filter out variables that are never read - naming is tricky. You could instead expose it with the name `NotDefinitelyAssigned` but I don't like having negatives in names much.\r\n\r\n### Why it's useful (for me)\r\nI maintain a [VB <-> C# code converter](https://github.com/icsharpcode/CodeConverter). When converting VB -> C#, I'd like to initialize only the locals in C# that need to be initialized. The solutions that come to mind are:\r\n* Make use of existing DataFlowAnalysis options\r\n  * Can't find a way to make it work: In particular I'd hoped that `DataFlowsIn` would be false when the variable was uninitialized. This was not the case when tested for integers, therefore from a given usage I can't figure out whether it's the first read or not.\r\n* Use the VB diagnostics to detect the warnings for unassigned variables\r\n  * Doesn't work: VB doesn't warn about value types that aren't initialized, but C# does care\r\n* Never write out an initializer, then detect diagnostic issues in a post-pass of the C# and add them in.\r\n * Could be made to work, but expensive and messy: An extra pass on an intentionally broken compilation is reasonably expensive performance-wise, and some of the useful type information will have been lost unless carefully stashed away.\r\n* Using reflection to get the internal property\r\n * Works, but perilous: I'm using this at the moment, but obviously any future release could change or totally remove this property.\r\n\r\n### Other possible solutions\r\nIn my case there's a property right there doing what I need, so it's tempting to just ask for it. However the underlying information seems interesting and valuable, and I wonder if it's worth exposing some of it.\r\n\r\n* Exposing the information on an `IOperation` - providing a method call to get which variables it reads and writes. \r\n* Adding more information to the `SymbolFinder.FindReferencesAsync` result about whether the reference is a read/write\r\n* Documenting more of the subtle cases on the existing properties if you know they can give me what I need\r\n* Closing this issue because it seems like a rare use case\r\n---\r\nThanks for all your continuing fantastic work on Roslyn.","Url":"https://github.com/dotnet/roslyn/issues/38439","RelatedDescription":"Open issue \"Expose DataFlowAnalysis.UnassignedVariables through public API\" (#38439)"},{"Id":"487763702","IsPullRequest":true,"CreatedAt":"2019-08-31T12:09:55","Actor":"dotnet-maestro[bot]","Number":"38438","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190830.3\r\n- **Date Produced**: 8/30/2019 6:51 PM\r\n- **Commit**: 316c80d0c373be63f991cc4d586db85273c1c553\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19430.3\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/38438","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#38438)"},{"Id":"487580729","IsPullRequest":true,"CreatedAt":"2019-08-31T05:03:12","Actor":"cston","Number":"38421","RawContent":null,"Title":"Handle invalid local function parameter with default value in GetDeclaredSymbol","State":"closed","Body":"Avoids `ArgumentOutOfRangeException` in `CheckAndAdjustPosition`.","Url":"https://github.com/dotnet/roslyn/pull/38421","RelatedDescription":"Closed or merged PR \"Handle invalid local function parameter with default value in GetDeclaredSymbol\" (#38421)"},{"Id":"487707091","IsPullRequest":true,"CreatedAt":"2019-08-31T00:01:53","Actor":"dotnet-bot","Number":"38436","RawContent":null,"Title":"Merge release/dev16.3 to release/dev16.3-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.3 into release/dev16.3-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-to-release/dev16.3-vs-deps\ngit reset --hard upstream/release/dev16.3-vs-deps\ngit merge upstream/release/dev16.3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-to-release/dev16.3-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38436","RelatedDescription":"Open PR \"Merge release/dev16.3 to release/dev16.3-vs-deps\" (#38436)"},{"Id":"487707031","IsPullRequest":true,"CreatedAt":"2019-08-31T00:01:30","Actor":"gafter","Number":"38435","RawContent":null,"Title":"Remove incorrect assertion","State":"open","Body":"Fixes #37783","Url":"https://github.com/dotnet/roslyn/pull/38435","RelatedDescription":"Open PR \"Remove incorrect assertion\" (#38435)"},{"Id":"487706897","IsPullRequest":true,"CreatedAt":"2019-08-31T00:00:38","Actor":"dotnet-bot","Number":"38434","RawContent":null,"Title":"Merge release/dev16.3 to master","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.3 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/dev16.3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38434","RelatedDescription":"Open PR \"Merge release/dev16.3 to master\" (#38434)"},{"Id":"487704969","IsPullRequest":false,"CreatedAt":"2019-08-30T23:46:04","Actor":"333fred","Number":"38433","RawContent":null,"Title":"Vbc Doesn't like DefineConstants with trailing or leading semicolons","State":"open","Body":"Add this to the bottom of Settings.props:\r\n\r\n```xml\r\n  <PropertyGroup Condition=\"'$(DotNetBuildFromSource)' == 'true'\">\r\n    <DefineConstants>DOTNET_BUILD_FROM_SOURCE;$(DefineConstants)</DefineConstants>\r\n  </PropertyGroup>\r\n```\r\n\r\nVbc fails to compile with:\r\n```\r\nvbc : error BC31030: Conditional compilation constant 'DOTNET_BUILD_FROM_SOURCE ^^ ^^ ' is not valid: Character is not  valid. [C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\VisualBasic\\Portable\\Microsoft.CodeAnalysis.VisualBasic.vbpr oj] \r\n```","Url":"https://github.com/dotnet/roslyn/issues/38433","RelatedDescription":"Open issue \"Vbc Doesn't like DefineConstants with trailing or leading semicolons\" (#38433)"},{"Id":"487699389","IsPullRequest":false,"CreatedAt":"2019-08-30T23:09:54","Actor":"heejaechang","Number":"38432","RawContent":null,"Title":"provide an option to log what IDE is doing somewher","State":"open","Body":"some long-running features provide a way to log its activity in some places such as output window or binlog and etc.\r\n\r\nfor example, liveshare or live unit test or source-based discovery provides an option in the options page to log every activity it does in the output window.\r\n\r\nproject system provides MSBuild binlog to save all design-time build activity in bin log.\r\n\r\nwe should provide one for our BG workloads such as workspace events, solution crawler events, diagnostic events and etc.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38432","RelatedDescription":"Open issue \"provide an option to log what IDE is doing somewher\" (#38432)"},{"Id":"487698629","IsPullRequest":false,"CreatedAt":"2019-08-30T23:05:33","Actor":"petrroll","Number":"38431","RawContent":null,"Title":"CodeActions light-bulb isn't stable","State":"open","Body":"**Version Used**: \r\nCurrent Int Preview\r\n\r\n**Steps to Reproduce**:\r\n```csharp\r\n\r\nusing System;\r\n\r\nnamespace ReordTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var result = method($$arg);\r\n        }\r\n    }\r\n}\r\n```\r\n1.  Hammer `Ctr`+`.` and `esc` at specified location\r\n2.  Sometimes move caret elsewhere\r\n\r\n> Note: Tried to find a reliable repro, can't.\r\n\r\n**Expected Behavior**:\r\nThe same lightbulb actions always show up.\r\n\r\n**Actual Behavior**:\r\nSometimes one CodeActions is missing\r\n![image](https://user-images.githubusercontent.com/1764721/64055194-d8ab6480-cb3f-11e9-91d6-248e92d1f6e5.png)\r\n![image](https://user-images.githubusercontent.com/1764721/64055199-dba65500-cb3f-11e9-8e24-485b26d88821.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/38431","RelatedDescription":"Open issue \"CodeActions light-bulb isn't stable\" (#38431)"},{"Id":"487618945","IsPullRequest":false,"CreatedAt":"2019-08-30T22:52:51","Actor":"TahirAhmadov","Number":"38423","RawContent":null,"Title":"Include parameters', this class' fields' and local variables' values on stack trace","State":"closed","Body":"I've seen this when executing Python in some environments: when an error (exception) is raised, all pertinent values up and down the stack are captured. This greatly improves debugging, in many cases allowing a bug to be fixed without having to reproduce the entire scenario by stepping through code, etc.\r\n\r\n**Version Used**: Both .NET Framework and Core\r\n\r\n**Steps to Reproduce**:\r\n\r\nThrow an exception, or use \"new StackTrace()\"\r\n\r\n**Expected Behavior**: Values are captured and shown in the stack trace\r\n\r\n**Actual Behavior**: Values are not captured\r\n","Url":"https://github.com/dotnet/roslyn/issues/38423","RelatedDescription":"Closed issue \"Include parameters', this class' fields' and local variables' values on stack trace\" (#38423)"},{"Id":"487692220","IsPullRequest":true,"CreatedAt":"2019-08-30T22:30:14","Actor":"ivanbasov","Number":"38430","RawContent":null,"Title":"Formatter throws a exception where HostObjectValue is null","State":"open","Body":"Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/971364\r\n\r\nAlways check if HostObjectValue is null, since any of these types might actually be a synthetic value as well.","Url":"https://github.com/dotnet/roslyn/pull/38430","RelatedDescription":"Open PR \"Formatter throws a exception where HostObjectValue is null\" (#38430)"},{"Id":"487688096","IsPullRequest":false,"CreatedAt":"2019-08-30T22:11:07","Actor":"heejaechang","Number":"38429","RawContent":null,"Title":"provide a power save mode","State":"open","Body":"we have been adding more and more features to IDE. it is long-tail features so it always helps some portion of our users. but there is also another portion of users who don't care that features or want to reduce noise or reduce system resource consumed from those features that they don't use much.\r\n\r\nthese people have been asking a way to disable those features altogether. and let those features only run when it is explicitly asked.\r\n\r\nbasically no solution crawler running, no background compilation running and etc. \r\n\r\nit requires design meeting, but similar to power save mode other IDE team provides for exactly same reason.","Url":"https://github.com/dotnet/roslyn/issues/38429","RelatedDescription":"Open issue \"provide a power save mode\" (#38429)"},{"Id":"487684224","IsPullRequest":false,"CreatedAt":"2019-08-30T21:55:58","Actor":"heejaechang","Number":"38428","RawContent":null,"Title":"update build error more frequently when build + intellisense error filter is selected like when \"Build only\" is selected","State":"open","Body":"right now, when \"Build Only\" is selected in error list, we update build errors as they come in.\r\n\r\n![image](https://user-images.githubusercontent.com/1333179/64053135-ff649d80-cb35-11e9-8757-4d3b998491f8.png)\r\n\r\nbut when \"Build + intellisense\" is selected in error list, we don't update build errors until whole build is done and relies on live errors (intellisense errors) during that time. and we do de-duplication when build is done with all errors build has reported again live errors.\r\n\r\n![image](https://user-images.githubusercontent.com/1333179/64053151-0d1a2300-cb36-11e9-9313-bd446b5d915b.png)\r\n\r\nwe should try to improve \"build + intellisense\" case so that user can see build error update sooner like \"build only\" case.\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38428","RelatedDescription":"Open issue \"update build error more frequently when build + intellisense error filter is selected like when \"Build only\" is selected\" (#38428)"},{"Id":"487683581","IsPullRequest":false,"CreatedAt":"2019-08-30T21:53:09","Actor":"jcouv","Number":"38427","RawContent":null,"Title":"Check for matching tuple names missing in type constraints","State":"open","Body":"`where T : I<(int a, int b)>, I<(int c, int d)>` should produce an error just like `class C : I<(int a, int b)>, I<(int c, int d)>` does.\r\n\r\nI think this should also apply to indirect constraints, such as `where T : I<(int a, int b)>, I2` with `interface I2 : I<(int c, int d)>` out of consistency with implementation scenario (`class C : I<(int a, int b)>, I2 { }` produces an error).\r\n\r\nNote: this would be a breaking change.","Url":"https://github.com/dotnet/roslyn/issues/38427","RelatedDescription":"Open issue \"Check for matching tuple names missing in type constraints\" (#38427)"},{"Id":"487682952","IsPullRequest":false,"CreatedAt":"2019-08-30T21:50:25","Actor":"panopticoncentral","Number":"38426","RawContent":null,"Title":".editorconfig is causing memory explosion in syntax trees","State":"open","Body":"(FYI: This may be one of the root causes of #38330 reported by @davkean.)\r\n\r\nI have a solution which is made up of multiple copies of the project-system repo (~400 projects in total). Looking a dump of the managed heap, nearly 10% of the managed heap (243mb of 2.3Gb) is consumed by duplicated strings held by `CSharpSyntaxTree.ParsedSyntaxTree`. The issue is that the project-system repo has an .editorconfig that turns diagnostics on/off and `Microsoft.CodeAnalysis.AnalyzerConfigSet.GetOptionsForSourcePath' does substring parsing of rules of the form \"dotnet_diagnostic.<diagnostic>.severity\". Since it does this _for each syntax tree in the solution_ (~6 million of them in this case), each substring parse is duplicated over and over and over again. It looks like if `AnalyzerConfig.Section` just did this substring parsing once and passed back the same string for everyone, this would eliminate the duplication.","Url":"https://github.com/dotnet/roslyn/issues/38426","RelatedDescription":"Open issue \".editorconfig is causing memory explosion in syntax trees\" (#38426)"},{"Id":"487668610","IsPullRequest":true,"CreatedAt":"2019-08-30T20:58:51","Actor":"333fred","Number":"38425","RawContent":null,"Title":"Support building the workspaces layer in source-build","State":"open","Body":"This requires conditionally excluding the SQLitePCLRawbundle_green dependency and conditionally excluding the code that depended on it. This code path was only used on Windows, so we shouldn't be breaking any functionality source-build was depending on. To verify that we don't accidentally break source-build, I've added a CI step that will run on linux and set the `DotNetBuildFromSource` flag.","Url":"https://github.com/dotnet/roslyn/pull/38425","RelatedDescription":"Open PR \"Support building the workspaces layer in source-build\" (#38425)"},{"Id":"487667840","IsPullRequest":false,"CreatedAt":"2019-08-30T20:56:28","Actor":"heejaechang","Number":"38424","RawContent":null,"Title":"we should provide analyzer performance insight to users so that user can decide which analyzers they want to disable for a certain solution","State":"open","Body":"analyzers perf is very sensitive to how code is written. some analyzer runs cheap on a file, but very expansive on other code. so just enabling all analyzers by default sometimes cause a problem for users.\r\n\r\ninternally, we run this monitor to track bad analyzers (http://source.roslyn.io/#Microsoft.CodeAnalysis.Remote.Workspaces/Diagnostics/PerformanceTrackerService.cs,19) and we have been running it for a while.\r\n\r\nwe should provide this information to users and let users to disable those reported bad analyzers for thier solution easily through UI.\r\n\r\nwith editorconfig work we did, and work to change analyzer severity through LB, I think now we have all the pieces to create analyzer blame UI and let users to control what analyzers run on what solution/project.","Url":"https://github.com/dotnet/roslyn/issues/38424","RelatedDescription":"Open issue \"we should provide analyzer performance insight to users so that user can decide which analyzers they want to disable for a certain solution\" (#38424)"},{"Id":"487449958","IsPullRequest":true,"CreatedAt":"2019-08-30T20:50:44","Actor":"dotnet-maestro[bot]","Number":"38419","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190829.16\r\n- **Date Produced**: 8/30/2019 1:19 AM\r\n- **Commit**: e5aaea7fcfc46449b035d5b220032bfb933e98a4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19429.16\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/38419","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#38419)"},{"Id":"487601207","IsPullRequest":false,"CreatedAt":"2019-08-30T17:48:27","Actor":"vsfeedback","Number":"38422","RawContent":null,"Title":"\"Option Explicit On\" does not report an error when there is an undeclared variable","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/681740/option-explicit-on-does-not-report-an-error-when-t.html)._\n\n---\nI always use &quot;Option Explicit On&quot;, it always works very reliably!\n\nBut today, in this case I do not see an error with the command &quot;For i = f.Count - 1 To 0 Step -1&quot; when the counter i has not been declared in one of my functions.\n\nThis is the first time I encountered this strange phenomenon. Please review and correct. Thank you very much!\n\nSource code:\n\nPrivate Function FMsys_to_List() As List(Of String)\n        Dim f As List(Of String)\n        f = New List(Of String)(File.ReadAllLines(FM_Sys, encoding:=Encoding.Unicode))\n        For i = f.Count - 1 To 0 Step -1\n            f(i) = f(i). Trim\n            ' Bo comment va dong trong\n            ' Phai dung (Left,1) ko duoc dung Chars(0) vi s.Chars(0) bao loi khi s=&quot;&quot;\n            If f(i). Length = 0 Or Left(f(i), 1) = &quot;'&quot; Then f.RemoveAt(i)\n        Next\n        f.TrimExcess()\n        Return f\n    End Function ' FMsys_to_List\n\n* Of course I have the &quot;Option Explicit On&quot; declaration at the top, outside the Module\n* The price that the Sub / Function name automatically notes right after End Sub / Function is too good. Extensive for everything else. Thanks!\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 8/8/2019, 03:17 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/38422","RelatedDescription":"Open issue \"\"Option Explicit On\" does not report an error when there is an undeclared variable\" (#38422)"},{"Id":"487480908","IsPullRequest":false,"CreatedAt":"2019-08-30T15:31:14","Actor":"Caskia","Number":"38420","RawContent":null,"Title":"Object synchronization method was called from an unsynchronized block of code","State":"closed","Body":"**Version Used**: \r\nnet core sdk version: 3.0.100-preview8-013656\r\nos version: ubuntu 16.04.4 LTS x64\r\n\r\n**Steps to Reproduce**:\r\nclone this [project](https://github.com/Caskia/ENode-Infrastructure.git) \r\ncheckout: ```git checkout netcoreapp3.0```\r\ngo to folder: test/ENode.Kafka.Tests\r\nrun ```dotnet build \"ENode.Kafka.Tests.csproj\" -c Release -o /app/build```\r\n\r\n**Exception**\r\n```\r\n You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error MSB3883: Unexpected exception:  [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]\r\n/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : System.AggregateException: One or more errors occurred. (Object synchronization method was called from an unsynchronized block of code.) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]\r\n/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : ---> System.ApplicationException: Object synchronization method was called from an unsynchronized block of code. [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]\r\n/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Mutex.ReleaseMutex() [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]\r\n/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.ServerNamedMutex.Dispose() [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]\r\n/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.CommandLine.BuildServerConnection.RunServerCompilationCore(RequestLanguage language, List`1 arguments, BuildPathsAlt buildPaths, String pipeName, String keepAlive, String libEnvVariable, Nullable`1 timeoutOverride, Func`3 tryCreateServerFunc, CancellationToken cancellationToken) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]\r\n/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : --- End of inner exception stack trace --- [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]\r\n/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]\r\n/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at System.Threading.Tasks.Task.Wait(CancellationToken cancellationToken) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]\r\n/usr/share/dotnet/sdk/3.0.100-preview8-013656/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands) [/src/enode/src/ENode.Kafka/ENode.Kafka.csproj]\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/38420","RelatedDescription":"Closed issue \"Object synchronization method was called from an unsynchronized block of code\" (#38420)"},{"Id":"487446536","IsPullRequest":true,"CreatedAt":"2019-08-30T12:02:01","Actor":"dotnet-bot","Number":"38418","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38418","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#38418)"},{"Id":"487398423","IsPullRequest":true,"CreatedAt":"2019-08-30T09:58:58","Actor":"v-zbsail","Number":"38417","RawContent":null,"Title":"LOC CHECKIN | dotnet/roslyn release/dev16.3-vs-deps | 20190830","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38417","RelatedDescription":"Open PR \"LOC CHECKIN | dotnet/roslyn release/dev16.3-vs-deps | 20190830\" (#38417)"},{"Id":"487389453","IsPullRequest":true,"CreatedAt":"2019-08-30T09:39:56","Actor":"svick","Number":"38416","RawContent":null,"Title":"Formatting removes newline before semicolon","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/38066.\r\n\r\nThis PR assumes that having a statement-ending semicolon at the start of a line is not a reasonable formatting, so it's okay to reformat it.","Url":"https://github.com/dotnet/roslyn/pull/38416","RelatedDescription":"Open PR \"Formatting removes newline before semicolon\" (#38416)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"488341349","IsPullRequest":true,"CreatedAt":"2019-09-03T00:07:22","Actor":"yowl","Number":"7764","RawContent":null,"Title":"Wasm: fix more occurrences of loading Sbytes into int32 without sign extending.","State":"open","Body":"While #7763 was fine as far as it went, it didn't actually catch all problems with loading sbyte on to the stack, namely binary operations, shifting and branching.   This add a few more tests for those and fixes the sign extending","Url":"https://github.com/dotnet/corert/pull/7764","RelatedDescription":"Open PR \"Wasm: fix more occurrences of loading Sbytes into int32 without sign extending.\" (#7764)"},{"Id":"487641478","IsPullRequest":true,"CreatedAt":"2019-09-02T20:20:50","Actor":"trylek","Number":"7755","RawContent":null,"Title":"Preparatory change to fix JIT tokenScope during devirtualization","State":"closed","Body":"Based on Andy's advice I investigated fixing tokenScope in JIT\r\nto work correctly even in the presence of devirtualization by\r\nbasically calling getMethodModule for the resolved virtual method\r\nto update the token scope. To make that work end to end, I had\r\nto actually implement the [previously unused] helper in CoreRT.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Based on Michal's offline advice I have locally verified that\r\nthe Generics CoreRT test works in release mode with the updated\r\nJIT.\r\n","Url":"https://github.com/dotnet/corert/pull/7755","RelatedDescription":"Closed or merged PR \"Preparatory change to fix JIT tokenScope during devirtualization\" (#7755)"},{"Id":"487654553","IsPullRequest":false,"CreatedAt":"2019-09-02T15:10:29","Actor":"OshoNot","Number":"7756","RawContent":null,"Title":"System.ArgumentNullException while running basic Suave web server","State":"closed","Body":"Hi guys,\r\n\r\nI've been trying to come up with a basic web server using Suave + CoreRT. Check this [repo](https://github.com/OshoNot/suave-corert) for source code and error analysis. When I start the generated executable, it yields the following exception:\r\n\r\n```bash\r\nUnhandled Exception: System.ArgumentNullException: Value cannot be null. Parameter name: path1\r\n   at System.IO.Path.Combine(String, String) + 0x53\r\n   at Suave.Web.startWebServerAsync(SuaveConfig, FSharpFunc\\`2) + 0x46\r\n   at Suave.Web.startWebServer(SuaveConfig, FSharpFunc\\`2) + 0x17\r\n   at Program.main(String[]) + 0x28\r\n   at Simple-Web!<BaseAddress>+0x7d639d\r\nAborted\r\n```","Url":"https://github.com/dotnet/corert/issues/7756","RelatedDescription":"Closed issue \"System.ArgumentNullException while running basic Suave web server\" (#7756)"},{"Id":"488211989","IsPullRequest":true,"CreatedAt":"2019-09-02T15:07:10","Actor":"yowl","Number":"7763","RawContent":null,"Title":"Wasm: fixes loading int16 and SBytes from the stack where they were previously not sign extended","State":"closed","Body":"Previously loading SBytes from the stack did not sign extend causing problems in the NativeFormatReader.  This adds a test and fixes that scenario.","Url":"https://github.com/dotnet/corert/pull/7763","RelatedDescription":"Closed or merged PR \"Wasm: fixes loading int16 and SBytes from the stack where they were previously not sign extended\" (#7763)"},{"Id":"487908157","IsPullRequest":true,"CreatedAt":"2019-09-02T07:56:48","Actor":"MichalStrehovsky","Number":"7762","RawContent":null,"Title":"Remove MetadataManager.SupportsReflection","State":"closed","Body":"The property was added when we started compiling ProjectN mrt100_app.dll. It was problematic because it didn't actually mean reflection - it meant \"is this something non-essential that we can skip\". We actually need what it was doing at a finer graunlarity. This commit starts with that.\r\n\r\nWith this, generic virtual methods work in the reflection disabled mode.\r\n\r\nA couple notes:\r\n* Some of the SupportsReflection calls were redundant (they were in a code path that is already related to reflection). Those disappeared without replacement.\r\n* CodeBaseDependencyAlgorithm references moved to the metadata manager. Hopefully we can get better control of generated templates in the future. (Not all types/generic methods need templates.)\r\n* DictionaryLayoutNode references were redundant with the references from code/EETypes. Removed without replacement.\r\n* Method template table emission needs to check whether the template was marked. This mirrors what we do for type templates. Eventually, we should make this for loop to go over all generated method templates instead of all methods (just keep track of the templates themselves).\r\n* GVMs were implicitly relying on getting templates because we make templates for everything. Added explicit template generation.","Url":"https://github.com/dotnet/corert/pull/7762","RelatedDescription":"Closed or merged PR \"Remove MetadataManager.SupportsReflection\" (#7762)"},{"Id":"487859012","IsPullRequest":false,"CreatedAt":"2019-09-01T09:35:37","Actor":"xoofx","Number":"7761","RawContent":null,"Title":"The type or namespace name 'System' could not be found","State":"closed","Body":"Hey,\r\n\r\nI'm trying to open `ILCompiler.sln` but I'm unable to compile any projects there, I tried both with Visual Studio 2017 and 2019\r\n\r\n![image](https://user-images.githubusercontent.com/715038/64073842-c9ddc280-cca3-11e9-807a-e74edbc1b17b.png)\r\n\r\nI tried to reclone entirely corert, `init-tools.cmd` but it still doesn't work.\r\n\r\nFrom the screenshot above I tried to compile repro.csproj and the command line from msbuild is like this:\r\n\r\n```\r\nC:\\code\\dotnet\\corert\\packages\\microsoft.net.compilers.toolset\\3.3.0-beta2-19367-02\\tasks\\net472\\csc.exe /noconfig /unsafe+ /nowarn:169,414,1701,1702,2008 /nostdlib+ /warn:4 /define:X86;BIT32;PLATFORM_WINDOWS;CORERT;DEBUG;TRACE;DEBUGRESOURCES /errorendlocation /preferreduilang:en-US /debug+ /debug:portable /optimize- /out:C:\\code\\dotnet\\corert\\bin/obj/Windows_NT.x86.Debug/repro\\repro.exe /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:exe /warnaserror+ /utf8output /checksumalgorithm:SHA256 /langversion:preview /analyzerconfig:C:\\code\\dotnet\\corert\\.editorconfig Program.cs\r\n```\r\n\r\nSo it is passing `/nostdlib+` but I don't see any netstandard library passed to it for example, so not sure how this can work.\r\n\r\nAny clues?\r\n","Url":"https://github.com/dotnet/corert/issues/7761","RelatedDescription":"Closed issue \"The type or namespace name 'System' could not be found\" (#7761)"},{"Id":"487763609","IsPullRequest":true,"CreatedAt":"2019-08-31T18:14:47","Actor":"MichalStrehovsky","Number":"7759","RawContent":null,"Title":"Consider method referenced with LDTOKEN called","State":"closed","Body":"When usage based metadata manager is enabled, we'll consider methods referenced with LDTOKEN as called. They pretty much have to be to make LINQ expressions work.","Url":"https://github.com/dotnet/corert/pull/7759","RelatedDescription":"Closed or merged PR \"Consider method referenced with LDTOKEN called\" (#7759)"},{"Id":"487765387","IsPullRequest":true,"CreatedAt":"2019-08-31T18:13:54","Actor":"MichalStrehovsky","Number":"7760","RawContent":null,"Title":"Do not root module metadata for modules not generating metadata","State":"closed","Body":"Fixes the multimodule compiler crash in DynamicGenerics.","Url":"https://github.com/dotnet/corert/pull/7760","RelatedDescription":"Closed or merged PR \"Do not root module metadata for modules not generating metadata\" (#7760)"},{"Id":"487718255","IsPullRequest":true,"CreatedAt":"2019-08-31T01:54:52","Actor":"davidwrighton","Number":"7758","RawContent":null,"Title":"[WIP] Ibc work","State":"open","Body":"Implement IBC tuning compilation and parsing\r\nStill tbd\r\n- method block count utilization\r\n- generics testing\r\n\r\n(Also my most recent changes introduced some sort of subtle bug, but I wanted to get this out for initial code review from the folks in Europe.)","Url":"https://github.com/dotnet/corert/pull/7758","RelatedDescription":"Open PR \"[WIP] Ibc work\" (#7758)"},{"Id":"487702491","IsPullRequest":true,"CreatedAt":"2019-08-31T00:52:18","Actor":"Dotnet-GitSync-Bot","Number":"7757","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @NextTurn","Url":"https://github.com/dotnet/corert/pull/7757","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7757)"},{"Id":"487178311","IsPullRequest":true,"CreatedAt":"2019-08-30T20:03:57","Actor":"trylek","Number":"7752","RawContent":null,"Title":"Fix subtle bug in token context module resolution","State":"closed","Body":"I found out that my recent relaxation of DevirtualizationManager\r\nto allow devirtualization across modules within the large version\r\nbubble uncovered a pre-existing bug in token module context\r\nresolution causing about 10% execution failure rate in Pri#1 tests\r\nin release large-bubble mode.\r\n\r\nMy original implementation (that Michal later expanded to also\r\ncover generated IL thunks) used \"pResolvedToken.tokenScope\" to\r\ndetermine the token context. This is however incorrect in the\r\npresence of devirtualization - in such case, JIT only updates\r\nthe tokenContext in pResolvedToken to refer to the devirtualized\r\nmethod, not tokenScope (which continues pointing at the original\r\nmethod in which we devirtualized a method call). Due to this the\r\nreference module and token value went out of sync, causing a\r\nwrong function to be called.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7752","RelatedDescription":"Closed or merged PR \"Fix subtle bug in token context module resolution\" (#7752)"},{"Id":"487608901","IsPullRequest":true,"CreatedAt":"2019-08-30T19:41:35","Actor":"davidwrighton","Number":"7754","RawContent":null,"Title":"Fix calls to non-virtual Object methods on generic type parameters","State":"closed","Body":"- Calls to non-virtual Object methods are translated by the jit into\r\ndirect calls that should not be resolved via a constrained resolver\r\n- Add testcase covering behavior","Url":"https://github.com/dotnet/corert/pull/7754","RelatedDescription":"Closed or merged PR \"Fix calls to non-virtual Object methods on generic type parameters\" (#7754)"},{"Id":"487533247","IsPullRequest":true,"CreatedAt":"2019-08-30T18:56:00","Actor":"MichalStrehovsky","Number":"7753","RawContent":null,"Title":"Separate out ReadyToRun specific type system","State":"closed","Body":"This was pretty clean thanks to the existing dot-file structure.","Url":"https://github.com/dotnet/corert/pull/7753","RelatedDescription":"Closed or merged PR \"Separate out ReadyToRun specific type system\" (#7753)"},{"Id":"487108586","IsPullRequest":true,"CreatedAt":"2019-08-29T21:48:18","Actor":"trylek","Number":"7751","RawContent":null,"Title":"Fix path separator on Linux","State":"closed","Body":"As Jan Vorlicek found out in his local testing, SuperIlc always\r\nused semicolon as path separator when emitting the list of reference\r\npaths for Crossgen. This is incorrect on Linux - colon should be\r\nuse as the path separator instead.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7751","RelatedDescription":"Closed or merged PR \"Fix path separator on Linux\" (#7751)"},{"Id":"486646291","IsPullRequest":true,"CreatedAt":"2019-08-29T20:56:35","Actor":"nattress","Number":"7750","RawContent":null,"Title":"Remove SectionStartNode mechanism","State":"closed","Body":"Symbols for the beginning of each PE section were added as part of https://github.com/dotnet/corert/commit/b34583dc66abb2a74e0d6dd4ec937294cadc0e76#diff-2559cd80eabcbd275c059bd09c5cc961. This is no longer needed as RVA field references now just use standard relocations to `CopiedFieldRvaNode` objects and don't need any special case logic.","Url":"https://github.com/dotnet/corert/pull/7750","RelatedDescription":"Closed or merged PR \"Remove SectionStartNode mechanism\" (#7750)"},{"Id":"486553038","IsPullRequest":true,"CreatedAt":"2019-08-29T00:24:49","Actor":"Dotnet-GitSync-Bot","Number":"7746","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corert/pull/7746","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7746)"},{"Id":"486639383","IsPullRequest":false,"CreatedAt":"2019-08-28T22:28:17","Actor":"cshung","Number":"7749","RawContent":null,"Title":"[CPAOT] Make sure any methods marked as MethodImpl.AggressiveOptimization is not compiled even if it is a dependency of some other methods.","State":"open","Body":"@trylek pointed out offline that #7748 might be incomplete. In particular, a method marked as MethodImpl.AggressiveInlining might not initially be rooted, but it could be added to the graph as the dependency of another method (e.g. it is being called), so we still end up compiling them.","Url":"https://github.com/dotnet/corert/issues/7749","RelatedDescription":"Open issue \"[CPAOT] Make sure any methods marked as MethodImpl.AggressiveOptimization is not compiled even if it is a dependency of some other methods.\" (#7749)"},{"Id":"486589868","IsPullRequest":true,"CreatedAt":"2019-08-28T21:46:24","Actor":"cshung","Number":"7748","RawContent":null,"Title":"[CPAOT] SkipAggressiveMethod - Avoid compiling code marked with MethodImplOptions.AggressiveOptimization","State":"closed","Body":"Crossgen is currently skipping these methods [here](https://github.com/dotnet/coreclr/blob/f07c13cadc378649f10d024bb8a40a3878fa661f/src/zap/zapinfo.cpp#L448), perhaps we should do the same.\r\n","Url":"https://github.com/dotnet/corert/pull/7748","RelatedDescription":"Closed or merged PR \"[CPAOT] SkipAggressiveMethod - Avoid compiling code marked with MethodImplOptions.AggressiveOptimization\" (#7748)"},{"Id":"486564549","IsPullRequest":true,"CreatedAt":"2019-08-28T20:56:23","Actor":"MichalStrehovsky","Number":"7747","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"We'll have to take another update once dotnet/coreclr#26395 merges, but I suspect some more people are going to hit this JitInterface change.","Url":"https://github.com/dotnet/corert/pull/7747","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#7747)"},{"Id":"486532435","IsPullRequest":true,"CreatedAt":"2019-08-28T19:41:56","Actor":"trylek","Number":"7745","RawContent":null,"Title":"Minor reliability improvements in SuperILC","State":"closed","Body":"In the Pri1 test file, some of the hung tests ignore KillProcess.\r\nSome time ago I proposed leveraging Mark Russinovich's pskill tool\r\nwhich is known to have better success rate in killing weirdly hung\r\nprocesses thanks to leveraging intimage kernel knowledge by\r\nexplicitly closing various handles and such; Michal and JanK were\r\nhowever not too enthusiastic about making test build depend on\r\nsuch a technically 'external' tool. For now I have at least hotfixed\r\nthe code to drop the Process in question and move on.\r\n\r\nOn top of that, it turns out that my implementation of process\r\nexit signaling using an AutoResetEvent was subject to a race\r\ncondition - as the MSDN page for AutoResetEvent explicitly states,\r\nwhen two threads set such an event close to each other, the master\r\nthread only gets signaled once. I fixed this by calling WaitOne\r\nwith an explicit timeout so that we don't hang the parallel runner\r\nloop due to a lost signal.\r\n\r\nI have also improved ParallelRunner to show the number of failures\r\nas part of the progress message during each build step. The aim is\r\nto improve turnaround when running large test suites - one of\r\nSuperIlc downsides is that the various analytic and statistic\r\nsummaries only get produced at the very end of its execution. The\r\nnumber of failures in the progress message can be used for early\r\nmonitoring as to whether everything proceeds as expected and we're\r\nnot wasting two hours waiting on a completely broken test run.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7745","RelatedDescription":"Closed or merged PR \"Minor reliability improvements in SuperILC\" (#7745)"},{"Id":"485926047","IsPullRequest":true,"CreatedAt":"2019-08-28T19:00:08","Actor":"MichalStrehovsky","Number":"7739","RawContent":null,"Title":"Separate ReadyToRun targeting compiler","State":"closed","Body":"Creates `crossgen2` that has the ready to run specific bits.\r\n\r\nSending it out to get some eyes on this.\r\n\r\nCI will not work because we need to redirect the ready to run legs to crossgen2. Hence the WIP tag.\r\n\r\nThe TODO-REFACTOR comments are for a subsequent pull request because they would touch a bunch of other places and I don't enjoy resolving merge conflicts in big commits.","Url":"https://github.com/dotnet/corert/pull/7739","RelatedDescription":"Closed or merged PR \"Separate ReadyToRun targeting compiler\" (#7739)"},{"Id":"486066464","IsPullRequest":true,"CreatedAt":"2019-08-28T14:18:10","Actor":"trylek","Number":"7742","RawContent":null,"Title":"Fix method token resolution for unboxing thunks","State":"closed","Body":"This change fixes the largest compilation failure bucket caused by\r\nJIT passing 0 as the \"pResolvedToken.token\" to the JIT interface.\r\nThe problem was caused by the fact that, when in release mode we\r\ndevirtualized a method on a value type, we emitted an unboxing thunk\r\nas part of the process. When JIT later called\r\ngetMethodDefFromMethod to get the token for the method, we returned\r\n0 because the method was not properly handling unboxing thunks.\r\n\r\nWhile I was there, I also fixed an imprecision in\r\nDevirtualizationManager I noticed while reviewing Michal's\r\npreparatory change for porting CPAOT code to the CoreCLR repo: in\r\nlarge version bubble mode, we should generally query \"VersionsWith\"\r\nrather than \"Contains\", otherwise we lose perf benefits of\r\ncross-module devirtualization within the large version bubble.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7742","RelatedDescription":"Closed or merged PR \"Fix method token resolution for unboxing thunks\" (#7742)"},{"Id":"486141459","IsPullRequest":true,"CreatedAt":"2019-08-28T12:22:34","Actor":"Dotnet-GitSync-Bot","Number":"7743","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @eerhardt","Url":"https://github.com/dotnet/corert/pull/7743","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7743)"},{"Id":"486317542","IsPullRequest":true,"CreatedAt":"2019-08-28T12:21:42","Actor":"janvorli","Number":"7744","RawContent":null,"Title":"Fix RhpCallFilterFunclet stack alignment on ARM","State":"closed","Body":"The number of registers pushed to the stack in the RhpCallFilterFunclet prolog on ARM made the stack misaligned (it needs to be aligned on 8 bytes), so the filter funclet and its transitive callees all had misaligned stack. While in many cases this doesn't cause issues, there are cases where it can cause runtime failures or crashes. For example, when the exception filter call chain invokes a varargs function with certain combination of parameter sizes when some of the arguments are supposed to be 8 byte aligned.\r\n\r\nThis change fixes the problem by pushing one more register as a padding in the RhpCallFilterFunclet (and popping it in the epilog).","Url":"https://github.com/dotnet/corert/pull/7744","RelatedDescription":"Closed or merged PR \"Fix RhpCallFilterFunclet stack alignment on ARM\" (#7744)"},{"Id":"486040729","IsPullRequest":true,"CreatedAt":"2019-08-27T21:29:07","Actor":"Dotnet-GitSync-Bot","Number":"7741","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7741","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7741)"},{"Id":"486027692","IsPullRequest":false,"CreatedAt":"2019-08-27T20:50:59","Actor":"cshung","Number":"7740","RawContent":null,"Title":"[CPAOT] Make sure constructing a delegate from a function pointer to an external method works.","State":"open","Body":"In #7724, I have made a change to ensure we have a `PrecodeMethodImport` for local methods, we should probably do the same for external methods to make sure the same scenario works there.","Url":"https://github.com/dotnet/corert/issues/7740","RelatedDescription":"Open issue \"[CPAOT] Make sure constructing a delegate from a function pointer to an external method works.\" (#7740)"},{"Id":"485528440","IsPullRequest":true,"CreatedAt":"2019-08-27T05:31:50","Actor":"Dotnet-GitSync-Bot","Number":"7738","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh","Url":"https://github.com/dotnet/corert/pull/7738","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7738)"},{"Id":"485400634","IsPullRequest":true,"CreatedAt":"2019-08-26T20:36:35","Actor":"nattress","Number":"7737","RawContent":null,"Title":"Fix R2R test issues file to work on Unix","State":"closed","Body":"The CI was silently not running CoreCLR tests in R2R mode due to all tests getting filtered out.\r\n\r\n* Use .* instead of .cmd so test .sh files will be discovered on Unix\r\n* Fix messed up casing in R2R test filter file","Url":"https://github.com/dotnet/corert/pull/7737","RelatedDescription":"Closed or merged PR \"Fix R2R test issues file to work on Unix\" (#7737)"},{"Id":"485370126","IsPullRequest":true,"CreatedAt":"2019-08-26T19:29:13","Actor":"Dotnet-GitSync-Bot","Number":"7736","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corert/pull/7736","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7736)"},{"Id":"485327257","IsPullRequest":true,"CreatedAt":"2019-08-26T18:03:38","Actor":"Dotnet-GitSync-Bot","Number":"7735","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @VSadov","Url":"https://github.com/dotnet/corert/pull/7735","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7735)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"487548540","IsPullRequest":true,"CreatedAt":"2019-09-01T17:55:41","Actor":"johnbeisner","Number":"3589","RawContent":null,"Title":"Remove duplicate FolderPublish capability for SDK projects","State":"closed","Body":"Addresses: https://github.com/dotnet/sdk/issues/2769\r\n\r\nThe 'FolderPublish' capability is now being delivered to Visual Studio via. 'Microsoft.Managed.DesignTime.targets' [ https://github.com/dotnet/project-system/pull/4400 ] and is not required on the SDK command-line; removing 'FolderPublish' from 'Microsoft.NET.Sdk.targets'\r\n\r\nManually tested with Visual Studio 16.3 Preview 2","Url":"https://github.com/dotnet/sdk/pull/3589","RelatedDescription":"Closed or merged PR \"Remove duplicate FolderPublish capability for SDK projects\" (#3589)"},{"Id":"487516926","IsPullRequest":false,"CreatedAt":"2019-08-30T17:22:23","Actor":"Const-me","Number":"3588","RawContent":null,"Title":"MSBuild doesn’t define variables for .NET core?","State":"closed","Body":"Using VS2017 15.9.5, building a class library for .NET core 2.2. Here’s the relevant XML from my .csproj file:\r\n\r\n\t<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\t\t<PropertyGroup>\r\n\t\t\t<TargetFramework>netcoreapp2.2</TargetFramework>\r\n\t\t\t<!-- Skipped -->\r\n\t\t</PropertyGroup>\r\n\t\t<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n\t\t\t<DocumentationFile>$(OutputPath)doc.xml</DocumentationFile>\r\n\t\t</PropertyGroup>\r\n\t\t<ItemGroup>\r\n\t\t\t<Reference Include=\"System\">\r\n\t\t\t\t<HintPath>System</HintPath>\r\n\t\t\t</Reference>\r\n\t\t</ItemGroup>\r\n\t</Project>\r\n\r\nThe setting is used, but the doc.xml is produced in the root of the project instead of $(OutputPath).\r\n\r\nSame XML expression for `<DocumentationFile>` works OK for desktop .NET, i.e. the problem is specific to .NET Core projects.\r\n\r\nTried `$(OutDir)` and `$(qwer123)` got same result. Why $(OutputPath) is not defined? Maybe it has different name?","Url":"https://github.com/dotnet/sdk/issues/3588","RelatedDescription":"Closed issue \"MSBuild doesn’t define variables for .NET core?\" (#3588)"},{"Id":"484269561","IsPullRequest":true,"CreatedAt":"2019-08-29T22:31:21","Actor":"dotnet-bot","Number":"3565","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3565","RelatedDescription":"Closed or merged PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#3565)"},{"Id":"486766608","IsPullRequest":false,"CreatedAt":"2019-08-29T17:05:04","Actor":"AkosLukacs","Number":"3586","RawContent":null,"Title":"FSharp - Compiler crashes if an anonymous record passed as obj argument","State":"closed","Body":"The FSharp compiler's issue was reported FSharp repo: https://github.com/dotnet/fsharp/issues/6434, and is fixed, and does work with 3.0.100-preview8-013656.\r\nBut doesn't work with SDK 2.2.401, I guess the compiler fix isn't in 2.2.401. Do you plan on releasing new version for 2.2?\r\n\r\nRepro: \r\n> dotnet new console -lang F#\r\n\r\n```fsharp\r\n// Program.fs, stolen from Vasily\r\nlet foo (_: obj) = ()\r\n\r\nlet bar() = foo {| F = 1 |}\r\n\r\n[<EntryPoint>]\r\nlet main argv =\r\n    bar()\r\n    0\r\n```\r\n\r\n> dotnet run\r\n\r\n# 2.2.401\r\nFails `error FS0192 : internal error : the anonymous record <>f__AnonymousType951611317`1' has not been generated in the pre-phase of generating this module`\r\n - Failed before I installed v3 preview\r\n - Did work after installing v3 preview\r\n - Failed to compile again after creating global.json and setting sdk version to 2.2.401\r\n\r\n# 3.0.100-preview8-013656\r\nWorks as expected\r\n","Url":"https://github.com/dotnet/sdk/issues/3586","RelatedDescription":"Closed issue \"FSharp - Compiler crashes if an anonymous record passed as obj argument\" (#3586)"},{"Id":"486811709","IsPullRequest":false,"CreatedAt":"2019-08-29T08:24:33","Actor":"PDostalek","Number":"3587","RawContent":null,"Title":"[loc][Query][sdk] Localizability of \"0; \"FailedToDeleteApphost\"","State":"open","Body":"Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nNETSDK1111: Failed to delete output apphost: {0}\r\n\r\nFile Name:\r\nTasks\\Common\\Resources\\xlf\\Strings.xlf\r\n\r\n==========================================\r\nQuery:\r\nWould you please confirm if \"apphost\" can be translated? \r\nWhat does the placeholder {0} in this string imply?","Url":"https://github.com/dotnet/sdk/issues/3587","RelatedDescription":"Open issue \"[loc][Query][sdk] Localizability of \"0; \"FailedToDeleteApphost\"\" (#3587)"},{"Id":"486639844","IsPullRequest":false,"CreatedAt":"2019-08-28T22:29:49","Actor":"olgaark","Number":"3585","RawContent":null,"Title":"Microsoft.NET.Build.Extensions.Tasks.dll\tshould not be loaded in devenv projecc during reference resolution for native vc projects","State":"open","Body":"The problem is found while investigating \r\nVS Bug 973252: Perf: CPlusPlus_DDRIT.0900.Close Solution regressed VM_AdjustedImagesInMemory_Total_devenv by 2.000 Count (0.5%). Baseline 29226.70\r\n\r\nMicrosoft.NET.Build.Extensions.Tasks.dll is loaded by _HandlePackageFileConflicts target during\r\n\r\nTarget Name=ResolveAssemblyReferences Project=ConsoleApplication1.vcxproj  note that there is no assembly references in the native vc project\r\n            …\r\n            Target Name=_HandlePackageFileConflicts Project=ConsoleApplication1.vcxproj\r\n\r\nThe target is implemented here:\r\n\r\nf:\\Visual Studio 16 Master\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.ConflictResolution.targets\r\n============================================================================================================================================\r\n-->\r\n  <UsingTask TaskName=\"ResolvePackageFileConflicts\" AssemblyFile=\"$(MicrosoftNETBuildExtensionsTasksAssembly)\" />\r\n  <Target Name=\"_HandlePackageFileConflicts\" BeforeTargets=\"$(_HandlePackageFileConflictsBefore)\" AfterTargets=\"$(_HandlePackageFileConflictsAfter)\"  \r\nDependsOnTargets=\"GetReferenceAssemblyPaths\">\r\n    <ResolvePackageFileConflicts References=\"@(Reference)\" ReferenceCopyLocalPaths=\"@(ReferenceCopyLocalPaths)\" PlatformManifests=\"@(PackageConflictPlatformManifests)\" TargetFrameworkDirectories=\"$(TargetFrameworkDirectory)\" PackageOverrides=\"@(PackageConflictOverrides)\" PreferredPackages=\"$(PackageConflictPreferredPackages)\">\r\n      <Output TaskParameter=\"ReferencesWithoutConflicts\" ItemName=\"_ReferencesWithoutConflicts\" />\r\n      <Output TaskParameter=\"ReferenceCopyLocalPathsWithoutConflicts\" ItemName=\"_ReferenceCopyLocalPathsWithoutConflicts\" />\r\n      <Output TaskParameter=\"Conflicts\" ItemName=\"_ConflictPackageFiles\" />\r\n    </ResolvePackageFileConflicts>\r\n\r\nIs this target doing something applicable to vc projects? If not, please either disable it for vcxproj or add a condition so cpp targets can disable it.\r\nAt least, please add a condition there for empty @(Reference) so the task dll is not loaded in this case.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3585","RelatedDescription":"Open issue \"Microsoft.NET.Build.Extensions.Tasks.dll\tshould not be loaded in devenv projecc during reference resolution for native vc projects\" (#3585)"},{"Id":"486583658","IsPullRequest":true,"CreatedAt":"2019-08-28T20:07:53","Actor":"dsplaisted","Number":"3584","RawContent":null,"Title":"Fix symbols for tasks","State":"open","Body":"Create PDBs for tasks and put them in the directory where Arcade will upload them\r\n\r\nFixes #3581","Url":"https://github.com/dotnet/sdk/pull/3584","RelatedDescription":"Open PR \"Fix symbols for tasks\" (#3584)"},{"Id":"486353347","IsPullRequest":true,"CreatedAt":"2019-08-28T12:32:29","Actor":"v-zbsail","Number":"3583","RawContent":null,"Title":"LOC CHECKIN | dotnet/sdk release/3.0.1xx | 20190828","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3583","RelatedDescription":"Open PR \"LOC CHECKIN | dotnet/sdk release/3.0.1xx | 20190828\" (#3583)"},{"Id":"486095529","IsPullRequest":false,"CreatedAt":"2019-08-28T00:12:21","Actor":"dsplaisted","Number":"3582","RawContent":null,"Title":"RID-specific self-contained .NET Core 3 app with dependency on Microsoft.NETCore.App 2.0.0 fails to run","State":"open","Body":"# Repro\r\n\r\nBuild and run the following project:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>\r\n    <SelfContained>false</SelfContained>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NETCore.App\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n# Expected\r\n\r\nProject runs successfully\r\n\r\n# Actual\r\n\r\nProject fails to run with error messages such as the following:\r\n\r\n- > A fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\3.0.0-preview9.19416.11'.\r\n- > The specified framework 'Microsoft.NETCore.App', version '3.0.0-preview9-19409-16' was not found.\r\n\r\nThe output folder also includes the following files, which come from the Microsoft.NETCore.App 2.0.0 package closure:\r\n\r\n- apphost.exe\r\n- hostfxr.dll\r\n- hostpolicy.dll\r\n- System.Private.CoreLib.dll\r\n\r\n# Details\r\n\r\nNuGet/Home#7344 would fix this.  Alternatively, we could try to use conflict resolution to exclude these extra assets.  That would probably require updating the platform manifest in the targeting pack.","Url":"https://github.com/dotnet/sdk/issues/3582","RelatedDescription":"Open issue \"RID-specific self-contained .NET Core 3 app with dependency on Microsoft.NETCore.App 2.0.0 fails to run\" (#3582)"},{"Id":"485985392","IsPullRequest":false,"CreatedAt":"2019-08-27T19:14:13","Actor":"livarcocc","Number":"3581","RawContent":null,"Title":"symbols packages being generated empty","State":"open","Body":"We have turned off symbols package generation for now on this repo.\r\n\r\nThey were generating empty nupkgs and conflicting with the actual nupkgs when the sign tool was repackaging signing assemblies.\r\n\r\nThe fact that symbols are empty here are causing symbol checks to fail on VS insertions.","Url":"https://github.com/dotnet/sdk/issues/3581","RelatedDescription":"Open issue \"symbols packages being generated empty\" (#3581)"},{"Id":"485513070","IsPullRequest":true,"CreatedAt":"2019-08-27T00:17:39","Actor":"JohnTortugo","Number":"3580","RawContent":null,"Title":"Disable symbol creation for now","State":"closed","Body":"The symbol packages getting created were causing conflicts in SignToolTask. Disabling the symbol creation until the proper adjustments are made to prevent inadvertently signing symbol packages.\r\n\r\n/cc @riarenas ","Url":"https://github.com/dotnet/sdk/pull/3580","RelatedDescription":"Closed or merged PR \"Disable symbol creation for now\" (#3580)"},{"Id":"485478158","IsPullRequest":true,"CreatedAt":"2019-08-26T23:35:07","Actor":"JohnTortugo","Number":"3579","RawContent":null,"Title":"Use SignTool with more logging","State":"closed","Body":"This new SignTool will show more information about what's repacking\r\n\r\nRelates to: https://github.com/dotnet/core-eng/issues/7569","Url":"https://github.com/dotnet/sdk/pull/3579","RelatedDescription":"Closed or merged PR \"Use SignTool with more logging\" (#3579)"},{"Id":"485304558","IsPullRequest":true,"CreatedAt":"2019-08-26T15:47:11","Actor":"mmitche","Number":"3578","RawContent":null,"Title":"[release/3.0.100-preview9] add PublishUsingPipelines parameter to publish-build-assets template …","State":"closed","Body":"…(#3569)","Url":"https://github.com/dotnet/sdk/pull/3578","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] add PublishUsingPipelines parameter to publish-build-assets template …\" (#3578)"},{"Id":"484653224","IsPullRequest":true,"CreatedAt":"2019-08-26T15:42:10","Actor":"riarenas","Number":"3569","RawContent":null,"Title":"Pass PublishUsingPipelines parameter to publish-build-assets template","State":"closed","Body":"**Description**\r\n\r\nhttps://github.com/dotnet/core-eng/issues/7561\r\nWithout the property, the build gets its channel assigned as soon as it publishes to BAR, and may trigger dependency updates before the packages are available in the feeds.\r\n\r\nInternal test build of the change: https://dev.azure.com/dnceng/internal/_build/results?buildId=322295&view=results\r\n\r\n\r\n**Customer Impact**\r\nInfra-structure change.\r\n\r\n**Regression?**\r\nNo.\r\n\r\n**Risk**\r\nLow","Url":"https://github.com/dotnet/sdk/pull/3569","RelatedDescription":"Closed or merged PR \"Pass PublishUsingPipelines parameter to publish-build-assets template\" (#3569)"},{"Id":"485211681","IsPullRequest":true,"CreatedAt":"2019-08-26T12:30:48","Actor":"dotnet-maestro[bot]","Number":"3577","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190830.09\r\n- **Date Produced**: 8/30/2019 11:34 PM\r\n- **Commit**: 44e933b12f176895fae723d1f03c8424070880fc\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19430-09\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3577","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3577)"},{"Id":"484749883","IsPullRequest":true,"CreatedAt":"2019-08-24T01:01:14","Actor":"dotnet-maestro[bot]","Number":"3576","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:99181a82-e62d-4080-a0f9-08d721cca946)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.09\r\n- **Date Produced**: 8/23/2019 8:02 PM\r\n- **Commit**: 2be172345a420387413bab7ce9053a52624c4461\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19423-09\r\n\r\n[marker]: <> (End:99181a82-e62d-4080-a0f9-08d721cca946)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3576","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#3576)"},{"Id":"484701489","IsPullRequest":true,"CreatedAt":"2019-08-23T23:20:56","Actor":"wli3","Number":"3572","RawContent":null,"Title":"Correct branding","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3572","RelatedDescription":"Closed or merged PR \"Correct branding\" (#3572)"},{"Id":"484742881","IsPullRequest":true,"CreatedAt":"2019-08-23T23:03:41","Actor":"livarcocc","Number":"3575","RawContent":null,"Title":"Skip tests in official builds. We have no reason to run them again si…","State":"open","Body":"…nce they already ran on CI. This should speed up builds out of the sdk repo.","Url":"https://github.com/dotnet/sdk/pull/3575","RelatedDescription":"Open PR \"Skip tests in official builds. We have no reason to run them again si…\" (#3575)"},{"Id":"484739215","IsPullRequest":true,"CreatedAt":"2019-08-23T22:45:47","Actor":"dsplaisted","Number":"3574","RawContent":null,"Title":"Update a test to skip running for target frameworks not supported by current OS","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3574","RelatedDescription":"Open PR \"Update a test to skip running for target frameworks not supported by current OS\" (#3574)"},{"Id":"484673467","IsPullRequest":true,"CreatedAt":"2019-08-23T22:14:39","Actor":"JohnTortugo","Number":"3570","RawContent":null,"Title":"Don't validate signature for resources files","State":"closed","Body":"Relates to: https://github.com/dotnet/core-eng/issues/7569\r\n\r\nIndependent of the outcome of the current signing issues I believe these files aren't required to be signed.\r\n\r\n/cc @riarenas ","Url":"https://github.com/dotnet/sdk/pull/3570","RelatedDescription":"Closed or merged PR \"Don't validate signature for resources files\" (#3570)"},{"Id":"484721294","IsPullRequest":true,"CreatedAt":"2019-08-23T22:01:01","Actor":"dsplaisted","Number":"3573","RawContent":null,"Title":"Always gather logs","State":"closed","Body":"Even if build succeeded, so we can debug things like signing failures.","Url":"https://github.com/dotnet/sdk/pull/3573","RelatedDescription":"Closed or merged PR \"Always gather logs\" (#3573)"},{"Id":"484693602","IsPullRequest":true,"CreatedAt":"2019-08-23T21:54:37","Actor":"dotnet-maestro[bot]","Number":"3571","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from nuget/nuget.client","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:67c23412-2e21-4d69-a886-08d7219800a1)\r\n## From https://github.com/NuGet/NuGet.Client\r\n- **Build**: 5.3.0.6192\r\n- **Date Produced**: 8/23/2019 7:15 PM\r\n- **Commit**: bb60d6720d24890b8f3e071e70d27ea0f2bef57e\r\n- **Branch**: refs/heads/dev\r\n- **Updates**:\r\n  - **NuGet.Build.Tasks** -> 5.3.0-rtm.6192\r\n\r\n[marker]: <> (End:67c23412-2e21-4d69-a886-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3571","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from nuget/nuget.client\" (#3571)"},{"Id":"484345588","IsPullRequest":false,"CreatedAt":"2019-08-23T17:03:32","Actor":"Sodoshi","Number":"3568","RawContent":null,"Title":"Using aspnetcore3.0 in WindowsDesktop SDK","State":"closed","Body":"Because of the changes to the HostBuilder in aspnetcore3 I want to update my embedded Kestrel, but if I switch to the WindowsDesktop SDK its not available, only aspnetcore 2.2. Is there any way to reference aspnetcore 3? (I'm using Kestrel as a TCP server in my Windows forms app)","Url":"https://github.com/dotnet/sdk/issues/3568","RelatedDescription":"Closed issue \"Using aspnetcore3.0 in WindowsDesktop SDK\" (#3568)"},{"Id":"484269593","IsPullRequest":true,"CreatedAt":"2019-08-23T00:06:18","Actor":"dotnet-bot","Number":"3567","RawContent":null,"Title":"Merge release/3.1.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3567","RelatedDescription":"Open PR \"Merge release/3.1.1xx to master\" (#3567)"},{"Id":"484269575","IsPullRequest":true,"CreatedAt":"2019-08-23T00:06:11","Actor":"dotnet-bot","Number":"3566","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3566","RelatedDescription":"Open PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#3566)"},{"Id":"484269532","IsPullRequest":true,"CreatedAt":"2019-08-23T00:05:56","Actor":"dotnet-bot","Number":"3564","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.100-preview9","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.100-preview9.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.100-preview9\ngit reset --hard upstream/release/3.0.100-preview9\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.100-preview9 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3564","RelatedDescription":"Open PR \"Merge release/2.2.2xx to release/3.0.100-preview9\" (#3564)"},{"Id":"484159126","IsPullRequest":false,"CreatedAt":"2019-08-22T19:00:07","Actor":"kapilepatel","Number":"3563","RawContent":null,"Title":".NET Core SDK 2.2.108 does not work with Visual Studio 2017 version 15.9.13","State":"open","Body":".NET Core SDK 2.2.108 does not work with Visual Studio 2017 version 15.9.13\r\n\r\nSolved the issue by uninstalling all .NET Core versions and fresh install of .NET Core SDK Version 2.2.107\r\nFind all versions here\r\nhttps://dotnet.microsoft.com/download/dotnet-core/2.2","Url":"https://github.com/dotnet/sdk/issues/3563","RelatedDescription":"Open issue \".NET Core SDK 2.2.108 does not work with Visual Studio 2017 version 15.9.13\" (#3563)"},{"Id":"483996121","IsPullRequest":true,"CreatedAt":"2019-08-22T13:32:39","Actor":"mmitche","Number":"3562","RawContent":null,"Title":"[release/3.0] Rebrand to rc1","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3562","RelatedDescription":"Closed or merged PR \"[release/3.0] Rebrand to rc1\" (#3562)"},{"Id":"483952292","IsPullRequest":true,"CreatedAt":"2019-08-22T12:02:24","Actor":"dotnet-maestro[bot]","Number":"3561","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190824.1\r\n- **Date Produced**: 8/24/2019 12:51 PM\r\n- **Commit**: a7b5eb8de300b6a30bd797c4ecc8769f7028aeec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19424.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19424.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3561","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3561)"},{"Id":"483687538","IsPullRequest":true,"CreatedAt":"2019-08-22T02:02:13","Actor":"dsplaisted","Number":"3560","RawContent":null,"Title":"Support more test config options","State":"closed","Body":"#### Description\r\nAdd more support for specifying tests to run via test config file\r\n\r\n#### Customer Impact\r\nNo direct customer impact, this is a test infrastructure change\r\n\r\n#### Regression?\r\nNo\r\n\r\n#### Risk\r\nLow\r\n\r\nAdds more options for controlling which tests are run.\r\n\r\n- Multiple test config files can be specified (via `-testConfig` or `-testConfigFile`)\r\n- Test config files can have named test lists\r\n- One or more test lists to run can be specified via `-testList` on the command line\r\n- Tests can be specified in test config by method, class, or namespace\r\n- Tests to skip can be put in a `SkippedTests` element in the test config file\r\n\r\nThis should help apply the SDK test assets to other repos, as it will be easier to start by specifying a small set of tests to run instead of trying to skip or fix all the failing tests.  It also may help if we want to have inner / outer loop tests.\r\n\r\nA sample test config file showing the different options:\r\n\r\n```xml\r\n<Tests>\r\n\r\n  <TestList Name=\"BasicBuildTests\">\r\n    <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetCoreApp.It_runs_the_app_from_the_output_folder\" />\r\n    <Class Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library\" />\r\n  </TestList>\r\n\r\n  <TestList Name=\"MoreBuildTests\">\r\n    <Class Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToSetPropertiesInDirectoryBuildProps\" />\r\n  </TestList>\r\n  \r\n  <SkippedTests>\r\n    <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library.It_resolves_assembly_conflicts\"\r\n            Issue=\"none\"\r\n            Reason=\"Testing\"/>\r\n  </SkippedTests>\r\n\r\n  <TestList Name=\"TestList1\">\r\n    <Method Name=\"MyNamespace.MyClass.MyTestName\" />\r\n    <Class Name=\"MyNamespace.MyClass\" />\r\n  </TestList>\r\n\r\n  <Method Name=\"Microsoft.NET.Build.Tests.GivenThatWeWantToBuildANetStandard2Library.It_builds_a_netstandard2_library_successfully\"\r\n            Skip=\"true\"\r\n            Issue=\"none\"\r\n            Reason=\"Testing\"/>\r\n\r\n</Tests>\r\n```","Url":"https://github.com/dotnet/sdk/pull/3560","RelatedDescription":"Closed or merged PR \"Support more test config options\" (#3560)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1167169777414168576","CreatedAt":"2019-08-29T20:18:54+00:00","UserScreenname":"dotnet","Text":".NET Conference 2019\nDiscover The World Of .NET\nSeptember 23-25\nhttps://t.co/FkW2WpZcMn https://t.co/6bQPcWJFdj","Source":"<a href=\"https://ads-api.twitter.com\" rel=\"nofollow\">Twitter Ads Composer</a>","RetweetCount":173,"FavoriteCount":86,"RawContent":null},{"Id":"1166751382612787201","CreatedAt":"2019-08-28T16:36:21+00:00","UserScreenname":"dotnet","Text":"How the .NET Team uses @AzureDevOps Pipelines to produce @docker Images https://t.co/SXvj2qewdE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":126,"FavoriteCount":58,"RawContent":null},{"Id":"1166709015444959233","CreatedAt":"2019-08-28T13:48:00+00:00","UserScreenname":"dotnet","Text":"With the release of .NET Core 3 on the way, we've been putting together tons of great content to get you ready.\n\nCh… https://t.co/SkVCaSDA1b","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":323,"FavoriteCount":146,"RawContent":null},{"Id":"1166481079546478592","CreatedAt":"2019-08-27T22:42:16+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":16,"FavoriteCount":0,"RawContent":null},{"Id":"1164890935089668099","CreatedAt":"2019-08-23T13:23:36+00:00","UserScreenname":"dotnet","Text":"#OnDotnet @briacht joins @runfaster2000 to talk about training models with ML .NET, AutoML, the ML .NET CLI, and mo… https://t.co/DMmb5OFxUx","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":53,"FavoriteCount":24,"RawContent":null},{"Id":"1164583310900658176","CreatedAt":"2019-08-22T17:01:12+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":10,"FavoriteCount":5,"RawContent":null},{"Id":"1164249816983068673","CreatedAt":"2019-08-21T18:56:01+00:00","UserScreenname":"dotnet","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft wil… https://t.co/sf9vOIaakw","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":367,"FavoriteCount":138,"RawContent":null}]}},"RunOn":"2019-09-03T05:30:36.7443447Z","RunDurationInMilliseconds":15184}