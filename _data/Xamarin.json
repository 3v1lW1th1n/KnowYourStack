{"Data":{"Blog":{"FeedItems":[{"Title":"More Cross-Platform APIs with Xamarin.Essentials Latest Preview","PublishedOn":"2018-06-14T19:11:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced Xamarin.Essentials, a core set of cross-platform APIs to help developers build native apps, at Microsoft Build 2018. Xamarin.Essentials gives developers access to over thirty...","Href":"https://blog.xamarin.com/cross-platform-apis-xamarin-essentials-latest-preview/","RawContent":null},{"Title":"Use MongoDB With Your Xamarin Apps","PublishedOn":"2018-06-12T20:01:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the most important decisions that you&#8217;ll make when designing an app is what type of database to use. Not too long ago, the choice was limited to relational databases like SQL server....","Href":"https://blog.xamarin.com/write-apps-using-mongodb-xamarin/","RawContent":null},{"Title":"Build 2018: Conference Vision Demo App","PublishedOn":"2018-06-07T20:43:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Build 2018 we shipped Xamarin.Forms 3.0. Did you miss the announcement? No worries, you can watch it here to catch up on many of the great new things that will help make you more productive...","Href":"https://blog.xamarin.com/build-2018-conference-vision-demo-app/","RawContent":null},{"Title":"Xamarin.Android Firebase Job Dispatcher: Background Scheduling for all Android Devices","PublishedOn":"2018-06-04T16:00:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Running tasks in the background is important for Android apps. It&#8217;s what helps keep an app responsive to the user and allows work to get done even when the user isn’t actively engaged with the...","Href":"https://blog.xamarin.com/xamarin-android-firebase-job-dispatcher-background-scheduling-android-devices/","RawContent":null},{"Title":"Xamarin and .NET Developer Events this June","PublishedOn":"2018-06-01T18:13:14+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Since the recent Microsoft Build conference, Xamarin and .NET recap events have been springing up all over the globe! Find an event near you this month to get the latest news on the exciting releases,...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-this-june/","RawContent":null},{"Title":"Xamarin University Presents: Guest Lectures from Industry Luminaries!","PublishedOn":"2018-05-30T18:46:26+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Technology moves quickly; new software, platforms, and frameworks are constantly being developed, improved, and released. Exploring the landscape of developer tools and libraries that we can consume...","Href":"https://blog.xamarin.com/xamarin-university-presents-guest-lectures/","RawContent":null},{"Title":"Contributing to Xamarin.Android","PublishedOn":"2018-05-25T18:15:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin has been open source for over two years now, starting the day we made the exciting announcement about the future of Xamarin. Since then, we&#8217;ve moved the majority of our work out in the...","Href":"https://blog.xamarin.com/contributing-xamarin-android/","RawContent":null},{"Title":"Guest Post: Securing and Versioning Xamarin Apps with Mobile.BuildTools","PublishedOn":"2018-05-23T19:11:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Dan Siegel is a Microsoft MVP, maintainer of the Prism Library, author of numerous dev tools and OSS libraries, leader of the San Diego Xamarin Dev’s Meetup, and a Xamarin blogger. Dan works as a...","Href":"https://blog.xamarin.com/securing-versioning-xamarin-apps-with-mobilebuildtools/","RawContent":null},{"Title":"Xamarin.Essentials: Cross-Platform APIs for Mobile Apps","PublishedOn":"2018-05-16T18:36:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing iOS and Android apps with Xamarin, developers can access every native platform API using C#. These bindings not only expose the platform APIs in C#, but add powerful C# features, such...","Href":"https://blog.xamarin.com/xamarin-essentials-cross-platform-apis-mobile-apps/","RawContent":null},{"Title":"Integrating Xamarin.com into Microsoft Sites","PublishedOn":"2018-05-15T22:49:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Over the past year we&#8217;ve started to make it even easier to find Xamarin information on Microsoft sites, and going forward you will start seeing changes to xamarin.com as we continue to migrate...","Href":"https://blog.xamarin.com/integrating-xamarin-com-microsoft-sites/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7827434681","Type":"PullRequestEvent","CreatedAt":"2018-06-14T20:27:13","Actor":"xamarin-release-manager","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1825","RelatedDescription":"Opened pull request \"Updated reference to mono/mono@f353dc4\" (#1825) at xamarin/xamarin-android","RelatedBody":"Updated reference to mono/mono@f353dc4"},{"Id":"7827155959","Type":"IssuesEvent","CreatedAt":"2018-06-14T19:29:53","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1792","RelatedDescription":"Reopened issue \"Huge build logs make contributions impossible\" (#1792) at xamarin/xamarin-android","RelatedBody":"\r\n- Open a Jenkins build result page e.g. https://jenkins.mono-project.com/job/xamarin-anroid-linux-pr-builder/2993/\r\n- Click \"Indication 1\"\r\n\r\nHere are what happens:\r\n\r\n- On Firefox, since the log page is too long, it cannot complete loading, gives up in the middle:\r\n\r\n![screenshot from 2018-06-08 05-56-32](https://user-images.githubusercontent.com/53929/41159632-04d80104-6ae2-11e8-9d39-486dc613ba06.png)\r\n\r\n- On Chrome, it seems to load the complete log, but gives up rendering in the middle:\r\n\r\n![screenshot from 2018-06-08 06-04-40](https://user-images.githubusercontent.com/53929/41159637-0abe4dc6-6ae2-11e8-98b7-a0e630bac306.png)\r\n\r\n![screenshot from 2018-06-08 06-06-28](https://user-images.githubusercontent.com/53929/41159652-19ed1e6c-6ae2-11e8-9fc3-3732aa9611d4.png)\r\n\r\nWhether it is a Chrome issue or not does not matter. What is important here is that Xamarin does not give sane way to diagnose any blocking problem for contributors (and of course our own) pull requests.\r\n\r\nWe have to fix this either 1) by reducing insane amount of build logs, or 2) provide any way to diagnose logs.\r\n\r\nActually 2) is not really a viable solution. Xamarin cannot ask contributors to read hundreds of megabytes of single build logs to investigate.\r\n\r\nWhen we were using old CI server (wrench) it had never occurred because each build steps were split and we had to read only relevant log parts."},{"Id":"7827153620","Type":"PullRequestEvent","CreatedAt":"2018-06-14T19:29:24","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1808","RelatedDescription":"Merged pull request \"[build] Normal & Diagnostic Log Verbosity, at once!\" (#1808) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/1792\r\n\r\nWe have a bit of a conundrum: when things break, the diagnostic build\r\nlogs are *essential* to tracking down *why* something broke.\r\n\r\nHowever, the sheer *verbosity* of those diagnostic logs makes it\r\ndifficult to determine *what* broke; it's very easy to get lost.\r\nAdditionally, the gigantic log files make the **Console Output**\r\nJenkins link nearly useless, as most web browsers will cease up when\r\nattempting to download ~1GB log files.\r\n\r\nSplit the difference: introduce a new `$(call MSBUILD_BINLOG)` syntax\r\nwhich creates an [MSBuild binary log][0] file, which is like\r\ndiagnostic output *but even moreso*, while *also* overriding the\r\nconsole logging to `/v:normal`.\r\n\r\n[0]: https://github.com/Microsoft/msbuild/wiki/Binary-Log\r\n\r\nThis should allow the **Console Output** link to be a bit more\r\nreasoanble, and if something goes wrong we can download the separate\r\n`*.binlog` files for further analysis.\r\n\r\nMSBuild binary log files can be read with MSBuild itself:\r\n\r\n\tmsbuild /v:diag bin/BuildDebug/msbuild-*.binlog\r\n\r\nNote: above command will actually fail; you can only print one log\r\nfile at a time with that syntax.\r\n\r\nThe created log files follow the pattern `msbuild-EPOCH-NAME`, where\r\nEPOCH is the `time_t`/Unix epoch value *at the time the command was\r\nexecuted*.  This should allow filenames to be non-colliding, and allow\r\nplausibly sane sorting behavior.  (Maybe.)"},{"Id":"7827153613","Type":"IssuesEvent","CreatedAt":"2018-06-14T19:29:24","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1792","RelatedDescription":"Closed issue \"Huge build logs make contributions impossible\" (#1792) at xamarin/xamarin-android","RelatedBody":"\r\n- Open a Jenkins build result page e.g. https://jenkins.mono-project.com/job/xamarin-anroid-linux-pr-builder/2993/\r\n- Click \"Indication 1\"\r\n\r\nHere are what happens:\r\n\r\n- On Firefox, since the log page is too long, it cannot complete loading, gives up in the middle:\r\n\r\n![screenshot from 2018-06-08 05-56-32](https://user-images.githubusercontent.com/53929/41159632-04d80104-6ae2-11e8-9d39-486dc613ba06.png)\r\n\r\n- On Chrome, it seems to load the complete log, but gives up rendering in the middle:\r\n\r\n![screenshot from 2018-06-08 06-04-40](https://user-images.githubusercontent.com/53929/41159637-0abe4dc6-6ae2-11e8-98b7-a0e630bac306.png)\r\n\r\n![screenshot from 2018-06-08 06-06-28](https://user-images.githubusercontent.com/53929/41159652-19ed1e6c-6ae2-11e8-9fc3-3732aa9611d4.png)\r\n\r\nWhether it is a Chrome issue or not does not matter. What is important here is that Xamarin does not give sane way to diagnose any blocking problem for contributors (and of course our own) pull requests.\r\n\r\nWe have to fix this either 1) by reducing insane amount of build logs, or 2) provide any way to diagnose logs.\r\n\r\nActually 2) is not really a viable solution. Xamarin cannot ask contributors to read hundreds of megabytes of single build logs to investigate.\r\n\r\nWhen we were using old CI server (wrench) it had never occurred because each build steps were split and we had to read only relevant log parts."},{"Id":"7827017963","Type":"IssuesEvent","CreatedAt":"2018-06-14T19:00:57","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1824","RelatedDescription":"Opened issue \"Cleaning no longer removes app project assembly and pdb files from IntermediateOutputPath on macOS\" (#1824) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\nhttps://github.com/xamarin/xamarin-forms-samples/tree/master/WorkingWithStyles/Android\r\n\r\n1. Clone or download the sample above.\r\n2. `nuget restore xamarin-forms-samples/WorkingWithStyles/WorkingWithStyles.sln`\r\n3. `msbuild /t:SignAndroidPackage xamarin-forms-samples/WorkingWithStyles/Android/WorkingWithStyles.Android.csproj`\r\n4.  `msbuild /t:Clean xamarin-forms-samples/WorkingWithStyles/Android/WorkingWithStyles.Android.csproj`\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nCleaning a project should empty the IntermediateOutputPath.\r\n\r\n### Actual Behavior\r\nThe following .dll and .pdb files are left behind after cleaning. This behavior is a regression in recent d15-8 builds.\r\n* xamarin-forms-samples/WorkingWithStyles/Android/obj/Debug/WorkingWithStyles.Android.dll\r\n* xamarin-forms-samples/WorkingWithStyles/Android/obj/Debug/WorkingWithStyles.Android.pdb\r\n\r\n### Version Information\r\nXA 15.8 (8.4.0.1)\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\nClean output:\r\nhttps://gist.github.com/pjcollins/2965f5132354f9ce24a5aabe443d5cb9\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"7826859630","Type":"IssuesEvent","CreatedAt":"2018-06-14T18:29:51","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1823","RelatedDescription":"Opened issue \"Binding projects run the ExportJarToXml target too often\" (#1823) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nThis will probably happen from any Java Binding project.\r\n\r\n1. Clone https://github.com/jonathanpeppers/glidex\r\n1. Build the binding project: https://github.com/jonathanpeppers/glidex/blob/master/glidex/glidex.csproj\r\n1. Modify `Metadata.xml`, just add a whitespace change\r\n1. Build the project again\r\n\r\nI expect that the `GenerateBindings` target should run here, since we modified XML.\r\n\r\nBut you can see the `ExportJarToXml` target is not skipped:\r\n```\r\n Building target \"ExportJarToXml\" completely.\r\n Input file \"C:\\Users\\myuser\\Desktop\\Git\\glidex\\glidex\\obj\\glidex.csproj.nuget.g.props\" is newer than output file \"obj\\Debug\\api.xml\".\r\n```\r\n\r\n`ExportJarToXml` takes between 1 and 2 seconds on my machine. I suspect large Java libraries could be much slower.\r\n\r\nThis example has `class-parse` enabled, it is worth investigating if `jar2xml` has the same behavior.\r\n\r\n### Expected Behavior\r\n\r\n`ExportJarToXml` only runs if input files change, such as:\r\n- JAR files\r\n- AAR files\r\n- The project file\r\n\r\n### Actual Behavior\r\n\r\n`ExportJarToXml` runs even if only XML changes.\r\n\r\n### Version Information\r\n\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.7.3\r\nVisualStudio.15.Release/15.7.3+27703.2026\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Enterprise\r\n\r\nVisual C++ 2017   00369-60000-00001-AA883\r\nMicrosoft Visual C++ 2017\r\n\r\nASP.NET and Web Tools 2017   15.0.40522.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.7.31476\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.60419.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.40424.0\r\nAzure App Service Tools v3.0.0\r\n\r\nC# Tools   2.8.3-beta6-62923-07. Commit Hash: 7aafab561e449da50712e16c9e81742b8e7a2969\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nGitHub.VisualStudio   2.5.2.2566\r\nA Visual Studio Extension that brings the GitHub Flow into Visual Studio.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nMerq   1.1.19-rc (a4ffc1b)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.10.5-pre (ab58725)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProject File Tools   1.0.1\r\nProvides Intellisense and other tooling for XML based project files such as .csproj and .vbproj files.\r\n\r\nProject System Tools   1.0\r\nTools for working with C#, VisualBasic, and F# projects.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   15.1.61804.210\r\nMicrosoft SQL Server Data Tools\r\n\r\nTest Adapter for Boost.Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Boost.Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nTest Adapter for Google Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Google Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nTypeScript Tools   15.7.20419.2003\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.8.3-beta6-62923-07. Commit Hash: 7aafab561e449da50712e16c9e81742b8e7a2969\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.1 for F# 4.1   15.7.0.0.  Commit Hash: 2527e6829ecdc8281ee60d83be8cfd0fa720a648.\r\nMicrosoft Visual F# Tools 10.1 for F# 4.1\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27703.2026\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nWindows Machine Learning Generator Extension   1.0\r\nWindows Machine Learning Visual Studio Extension Detailed Info\r\n\r\nXamarin   4.10.10.1 (f1760154c)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.12.1 (f3257e429)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.3.3.2 (HEAD/dffc59120)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.12.0.4 (64fece5)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n### Log File\r\n\r\nHere is a zip file containing 3 binary logs: [glidex.zip](https://github.com/xamarin/xamarin-android/files/2103560/glidex.zip)"},{"Id":"7826727929","Type":"PullRequestEvent","CreatedAt":"2018-06-14T18:04:21","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1820","RelatedDescription":"Merged pull request \"[build] Fix the list of ILRepack assemblies.\" (#1820) at xamarin/xamarin-android","RelatedBody":"We had a duplicate Nuget.Common when we need a\r\nNuget.Protocol."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7828297129","Type":"PullRequestEvent","CreatedAt":"2018-06-15T00:26:44","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3046","RelatedDescription":"Opened pull request \"Avoid infinite loop when removing refresh indicator on iOS\" (#3046) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nRemoving the refresh indicator when IsPullToRefreshEnabled is set to false and the ListView has no data on iOS causes the list to move enough to trigger an infinite loop in the Scrolled override. This change averts the loop.\r\n\r\n### Issues Resolved ###\r\n\r\n- #1799\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- iOS\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"7827679365","Type":"PullRequestEvent","CreatedAt":"2018-06-14T21:18:36","Actor":"jonathanpeppers","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3045","RelatedDescription":"Opened pull request \"[android] new IImageViewHandler API\" (#3045) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nContext:\r\nhttps://github.com/bumptech/glide\r\nhttps://github.com/jonathanpeppers/glidex\r\n\r\nCurrently the way my \"proof-of-concept\" GlideX library works by\r\ncompletely bypassing `IImageSourceHandler`. GlideX provides its own\r\ncustom `ImageRenderer` and `ImageCellRenderer`. This was required due\r\nto how *opinionated* the Glide library is. Glide's approach is to\r\nnever allow a developer access to a `Android.Graphics.Bitmap` or\r\n`Android.Graphics.Drawable` because we would likely do it wrong... and\r\ndevelopers do all the time!\r\n\r\nTo evolve Xamarin.Forms to where images could be better handled down\r\nthe road, I've introduced a new interface:\r\n\r\n    public interface IImageViewHandler : IRegisterable\r\n    {\r\n        Task LoadImageAsync(ImageSource imageSource, ImageView imageView, CancellationToken cancellationToken = default(CancellationToken));\r\n    }\r\n\r\nThe idea is that we can query for `IImageViewHandler` and fall back to\r\n`IImageSourceHandler`. This would allow GlideX to just be an\r\n`IImageViewHandler` and not mess with creating custom renderers.\r\n\r\nWe can also implement `IImageViewHandler` for `FileImageSource`, to\r\nget some general performance improvements around loading files from\r\ndisk:\r\n\r\n    string file = ((FileImageSource)imagesource).File;\r\n    if (File.Exists(file))\r\n    {\r\n        //Load with imageView.SetImageURI(Android.Net.Uri)\r\n    }\r\n    else\r\n    {\r\n        //Load with imageView.SetImageResource(int)\r\n    }\r\n\r\nI tested this change with new performance tests in `ImageScenarios`:\r\n- Load 100 images using `AndroidResource`\r\n- Load 100 images from disk\r\n- I conveniently prefixed these with `.`, so they appeared first in\r\n  the scenario list\r\n\r\nHere are the results from three runs, using `IImageSourceHandler`\r\nversus `IImageViewHandler`, in a HAXM emulator:\r\n\r\n`IImageSourceHandler` - 100x `AndroidResource`\r\n- 6059.899\r\n- 3297.885\r\n- 3015.179\r\n\r\n`IImageSourceHandler` - 100x from disk\r\n- 12398.71\r\n- 14146.41\r\n- 16060.88\r\n\r\n`IImageViewHandler` - 100x `AndroidResource`\r\n- 6748.766\r\n- 2817.975\r\n- 2456.197\r\n\r\n`IImageViewHandler` - 100x from disk\r\n- 7326.745\r\n- 4799.001\r\n- 5411.515\r\n\r\nThere is not going to be as much as an improvement for\r\n`AndroidResource` (maybe not any), since Xamarin.Forms looks for\r\n`Drawable` since: https://github.com/xamarin/Xamarin.Forms/pull/1973\r\n\r\n_NOTE: that these scenarios are probably too slow to keep, as it seems\r\nthese performance tests are geared to fail if they take longer than\r\n250ms. I can remove these before we merge this PR._\r\n\r\nOther changes to make this happen:\r\n- `Registrar` was failing with `InvalidCastException` instead of\r\n  returning `null` when querying for `IImageViewHandler`. I switched\r\n  to using `as` instead of a hard cast. I am not sure why it was not\r\n  already setup this way, since\r\n  `Registrar.Registered.GetHandlerForObject<T>` appears to be called\r\n  and checked for `null` everywhere.\r\n\r\n### Issues Slightly Improved ###\r\n\r\nImage performance on Android\r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n - Xamarin.Forms.Platform.Android.IImageViewHandler\r\n\r\n### Platforms Affected ###\r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nIf an `IImageViewHandler` is found for a type of `ImageSource` it is used before falling back to a `IImageSourceHandler`.\r\n\r\n`Registrar.GetHandler` now returns `null` instead of throwing `InvalidCastException`.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests (NOTE I expect the new scenarios to fail, they are slow)\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7828976581","Type":"PullRequestEvent","CreatedAt":"2018-06-15T05:22:52","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4263","RelatedDescription":"Merged pull request \"[SpriteKit] Update bindings to Xcode 10 Beta 1\" (#4263) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"7828689104","Type":"PullRequestEvent","CreatedAt":"2018-06-15T03:09:03","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4261","RelatedDescription":"Merged pull request \"[tests] Fix introspection failures when running on macOS 10.14\" (#4261) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"7828395900","Type":"IssuesEvent","CreatedAt":"2018-06-15T01:08:20","Actor":"SpiegelSoft","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4265","RelatedDescription":"Opened issue \"F# iOS project: MTOUCH : error MT2002: Failed to resolve \"Microsoft.FSharp.Control.AsyncActivation`1\" reference from \"FSharp.Core, Version=4.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"\" (#4265) at xamarin/xamarin-macios","RelatedBody":"<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\n### Steps to Reproduce\r\n\r\n1. Create a Xamarin iOS project using F#, with the latest NuGet packages\r\n2. Build it \r\n3. The error in the title is generated.\r\n\r\n### Expected Behavior\r\n\r\n### Actual Behavior\r\n\r\n### Environment\r\nMicrosoft Visual Studio Professional 2017  (2)\r\nVersion 15.7.3\r\nVisualStudio.15.Release/15.7.3+27703.2026\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nInstalled Version: Professional\r\n\r\nApplication Insights Tools for Visual Studio Package   8.12.10405.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.40522.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.7.31476\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.60419.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.0.40424.0\r\nAzure App Service Tools v3.0.0\r\n\r\nAzure Data Lake Node   1.0\r\nThis package contains the Data Lake integration nodes for Server Explorer.\r\n\r\nAzure Data Lake Tools for Visual Studio   2.3.3000.2\r\nMicrosoft Azure Data Lake Tools for Visual Studio\r\n\r\nAzure Functions and Web Jobs Tools   15.0.40424.0\r\nAzure Functions and Web Jobs Tools\r\n\r\nAzure Stream Analytics Tools for Visual Studio   2.3.3000.2\r\nMicrosoft Azure Stream Analytics Tools for Visual Studio\r\n\r\nC# Tools   2.8.3-beta6-62923-07. Commit Hash: 7aafab561e449da50712e16c9e81742b8e7a2969\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nCookiecutter   15.7.18131.1\r\nProvides tools for finding, instantiating and customizing templates in cookiecutter format.\r\n\r\nDotfuscator Community Edition   5.34.0.6830-9173b9a63\r\nPreEmptive Protection - Dotfuscator CE\r\n\r\nFabric.ApplicationInsights   1.0\r\nAllows user to instrument their Service Fabric projects for Application Insights.\r\n\r\nFabric.DiagnosticEvents   1.0\r\nFabric Diagnostic Events\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJavaScript Project System   2.0\r\nJavaScript Project System\r\n\r\nJavaScript UWP Project System   2.0\r\nJavaScript UWP Project System\r\n\r\nMerq   1.1.19-rc (a4ffc1b)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Azure HDInsight Azure Node   2.3.3000.2\r\nHDInsight Node under Azure Node\r\n\r\nMicrosoft Azure Hive Query Language Service   2.3.3000.2\r\nLanguage service for Hive query\r\n\r\nMicrosoft Azure Service Fabric Tools for Visual Studio   2.1\r\nMicrosoft Azure Service Fabric Tools for Visual Studio\r\n\r\nMicrosoft Azure Stream Analytics Language Service   2.3.3000.2\r\nLanguage service for Azure Stream Analytics\r\n\r\nMicrosoft Azure Stream Analytics Node   1.0\r\nAzure Stream Analytics Node under Azure Node\r\n\r\nMicrosoft Azure Tools   2.9\r\nMicrosoft Azure Tools for Microsoft Visual Studio 2017 - v2.9.10420.2\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.10.5-pre (ab58725)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNode.js Tools   1.4.11027.3\r\nAdds support for developing and debugging Node.js apps in Visual Studio\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nPython   15.7.18131.1\r\nProvides IntelliSense, projects, templates, debugging, interactive windows, and other support for Python developers.\r\n\r\nPython - Django support   15.7.18131.1\r\nProvides templates and integration for the Django web framework.\r\n\r\nPython - IronPython support   15.7.18131.1\r\nProvides templates and integration for IronPython-based projects.\r\n\r\nPython - Profiling support   15.7.18131.1\r\nProfiling support for Python projects.\r\n\r\nR Tools for Visual Studio   1.3.40517.1016\r\nProvides project system, R Interactive window, plotting, and more for the R programming language.\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   15.1.61804.210\r\nMicrosoft SQL Server Data Tools\r\n\r\nToolWindowHostedEditor   1.0\r\nHosting json editor into a tool window\r\n\r\nTypeScript Tools   15.7.20419.2003\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.8.3-beta6-62923-07. Commit Hash: 7aafab561e449da50712e16c9e81742b8e7a2969\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.1 for F# 4.1   15.7.0.0.  Commit Hash: 2527e6829ecdc8281ee60d83be8cfd0fa720a648.\r\nMicrosoft Visual F# Tools 10.1 for F# 4.1\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for Universal Windows Apps   15.0.27703.2026\r\nThe Visual Studio Tools for Universal Windows apps allow you to build a single universal app experience that can reach every device running Windows 10: phone, tablet, PC, and more. It includes the Microsoft Windows 10 Software Development Kit.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nWindows Machine Learning Generator Extension   1.0\r\nWindows Machine Learning Visual Studio Extension Detailed Info\r\n\r\nXamarin   4.10.10.1 (f1760154c)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.12.1 (f3257e429)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.3.3.2 (HEAD/dffc59120)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.12.0.4 (64fece5)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"},{"Id":"7828386999","Type":"PullRequestEvent","CreatedAt":"2018-06-15T01:04:29","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4259","RelatedDescription":"Merged pull request \"Updated reference to mono/mono@f353dc4\" (#4259) at xamarin/xamarin-macios","RelatedBody":"Commit list for mono/mono:\r\n    \r\n* mono/mono@f353dc4db0a Bump msbuild to track mono-2018-02 (#9129)\r\n* mono/mono@f59eac4c0f1 [profiler] Don't raise events until the profiler transitions to the ready state. Fixes #8866.\r\n* mono/mono@a37e6e5739c Bump corefx to fix System.Data windows build\r\n* mono/mono@6f9bef3bdb8 update to Android P final API. (#9078)\r\n    \r\nDiff: https://github.com/mono/mono/compare/1c24c158b0cc0647adf216fd2244a094ce437611...f353dc4db0a104620536a80a1633246e4bfbbf2a\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1007343670775963649","CreatedAt":"2018-06-14T19:27:01+00:00","UserScreenname":"xamarinhq","Text":"Get access to more cross-platform APIs with the latest Xamarin.Essentials Preview: https://t.co/WqtCV8OneC https://t.co/FgdScqkpPt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":60,"FavoriteCount":29,"RawContent":null},{"Id":"1007280505820254209","CreatedAt":"2018-06-14T15:16:01+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/zLa3RTUgaL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":33,"FavoriteCount":10,"RawContent":null},{"Id":"1006915501405167616","CreatedAt":"2018-06-13T15:05:37+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/U9huu5DdJW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":22,"RawContent":null},{"Id":"1006682387743461376","CreatedAt":"2018-06-12T23:39:19+00:00","UserScreenname":"xamarinhq","Text":"Create your first #Xamarin app using #MongoDB: https://t.co/Nu6lZzYwYX","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":60,"FavoriteCount":27,"RawContent":null},{"Id":"1006563778471788544","CreatedAt":"2018-06-12T15:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":20,"RawContent":null},{"Id":"1006201893369106433","CreatedAt":"2018-06-11T15:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":23,"RawContent":null},{"Id":"1005923084023582721","CreatedAt":"2018-06-10T21:22:07+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/OPYTFzsQk4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":67,"FavoriteCount":28,"RawContent":null},{"Id":"1005574764382117888","CreatedAt":"2018-06-09T22:18:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/kaQCoeUycf","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":22,"RawContent":null},{"Id":"1005116748180402176","CreatedAt":"2018-06-08T15:58:01+00:00","UserScreenname":"xamarinhq","Text":"Get started debugging Mono from the source code in the third part of our #Xamarin Open Source Frameworks series:… https://t.co/vjjKyuTsDH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":31,"FavoriteCount":10,"RawContent":null},{"Id":"1004839391477592064","CreatedAt":"2018-06-07T21:35:54+00:00","UserScreenname":"xamarinhq","Text":"Check out the code for the #MSBuild 2018 Conference Vision demo app: https://t.co/tpcBITRsnu https://t.co/kVwUJR5NoL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":157,"FavoriteCount":84,"RawContent":null},{"Id":"1004743034813276160","CreatedAt":"2018-06-07T15:13:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build #XamariniOS from the source code in the second part of our four-part series on debugging… https://t.co/88r7PENPNw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":29,"FavoriteCount":20,"RawContent":null},{"Id":"1004393225787002881","CreatedAt":"2018-06-06T16:03:00+00:00","UserScreenname":"xamarinhq","Text":"We’ve updated the #XamarinForms project templates in #VS2017 to include #dotNET Standard support and customization… https://t.co/6IkmiiY1Jp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":81,"FavoriteCount":32,"RawContent":null},{"Id":"1004381931470049282","CreatedAt":"2018-06-06T15:18:07+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/6jygocRw2d","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":36,"FavoriteCount":24,"RawContent":null},{"Id":"1004017778859347975","CreatedAt":"2018-06-05T15:11:06+00:00","UserScreenname":"xamarinhq","Text":"Adding geospatial calculations to your #Xamarin apps with #Azure #CosmosDB: https://t.co/acrN8gdJdS https://t.co/rS6ZWBVQDw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":46,"FavoriteCount":20,"RawContent":null},{"Id":"1003716129758629888","CreatedAt":"2018-06-04T19:12:28+00:00","UserScreenname":"xamarinhq","Text":"Introducing the https://t.co/3QxhuBuvHc Firebase Job Dispatcher—background scheduling for all Android devices: https://t.co/vZlLAkI925","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":36,"FavoriteCount":16,"RawContent":null},{"Id":"1003656628120498176","CreatedAt":"2018-06-04T15:16:01+00:00","UserScreenname":"xamarinhq","Text":"In the first of our four-part series on debugging #Xamarin open source frameworks, learn how to build #XamarinForms… https://t.co/emYMS1KIra","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":24,"RawContent":null}]}},"RunOn":"2018-06-15T05:30:55.5893362Z","RunDurationInMilliseconds":4194}