{"Data":{"Blog":{"FeedItems":[{"Title":"Help us plan the future of .NET!","PublishedOn":"2018-04-20T16:55:37+00:00","CommentsCount":53,"FacebookCount":0,"Summary":"We’re currently planning our next major .NET releases and would love to hear your feedback on how you interact with .NET Framework and .NET Core today. Please fill out the survey below and help shape...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/20/help-us-plan-the-future-of-net/","RawContent":null},{"Title":"Performance Improvements in .NET Core 2.1","PublishedOn":"2018-04-18T19:29:45+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"Back before .NET Core 2.0 shipped, I wrote a post highlighting various performance improvements in .NET Core 2.0 when compared with .NET Core 1.1 and the .NET Framework. As .NET Core 2.1 is in its...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/","RawContent":null},{"Title":".NET Highlights in Visual Studio 2017 version 15.7 Preview 4","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"As you know we continue to incrementally improve Visual Studio 2017 (version 15), and our 7th significant update is currently well under way with the 4th preview shipping today. As we’re winding down...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/visual-studio-2017-15-7-preview-4/","RawContent":null},{"Title":".NET Core April 2018 Update","PublishedOn":"2018-04-17T23:50:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2018 Update. This update includes .NET Core 1.0.11, 1.1.8 and 2.0.7. There are no new security fixes in this update. See April 2018 .NET Updates for other...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 2","PublishedOn":"2018-04-11T18:02:40+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today we’re releasing the second preview of EF Core 2.1, alongside .NET Core 2.1 Preview 2 and ASP.NET Core 2.1 Preview 2. Thank you so much to everyone who has tried our early builds and has helped...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-entity-framework-core-2-1-preview-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 2","PublishedOn":"2018-04-11T17:53:44+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 2. The release is now ready for broad testing, as we get closer to a final build within the next two to three months. We&#8217;d appreciate any feedback...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/","RawContent":null},{"Title":"Explore Azure Cosmos DB with .NET Core and MongoDB","PublishedOn":"2018-04-09T16:00:47+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Have you had to design general purpose &#8220;metadata&#8221; tables in your SQL database that basically store column names and values? Do you often serialize/de-serialize XML or JSON from your SQL...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/09/explore-cosmosdb-with-net-core-and-mongodb/","RawContent":null},{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":66,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7559882384","Type":"PullRequestEvent","CreatedAt":"2018-04-20T06:42:59","Actor":"Cheesebaron","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Opened pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project"},{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7595348603","Type":"PullRequestEvent","CreatedAt":"2018-04-27T04:51:57","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17791","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to preview1-26427-01, preview3-26427-01, respectively (master)\" (#17791) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7595313709","Type":"PullRequestEvent","CreatedAt":"2018-04-27T04:36:24","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17807","RelatedDescription":"Opened pull request \"Add runtimeconfig.json support for tiered compilation\" (#17807) at dotnet/coreclr","RelatedBody":"Previously this feature could only be enabled via COMPLUS_TieredCompilation variable. Now it can also be enabled from configProperties in the runtimeconfig.json."},{"Id":"7594919996","Type":"PullRequestEvent","CreatedAt":"2018-04-27T02:02:41","Actor":"adityamandaleeka","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17806","RelatedDescription":"Opened pull request \"Fix register being shifted in PInvoke stub\" (#17806) at dotnet/coreclr","RelatedBody":"Found a little mistake in https://github.com/dotnet/coreclr/pull/17734: it intended to shift/OR the register containing the unmanaged target, but instead on ARM64 it shifts the address of the stub that it jumps to.\r\n\r\n@sdmaclea @jkotas "},{"Id":"7594914774","Type":"PullRequestEvent","CreatedAt":"2018-04-27T02:00:47","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17788","RelatedDescription":"Merged pull request \"Remove some fgMorphArgs dead code\" (#17788) at dotnet/coreclr","RelatedBody":"For the arm64 case of a special return buffer argument (always x8),\r\nwe don't need the code to check for it, because a few lines above all\r\nnon-standard args cause us to \"continue\", and skip the code.\r\n\r\nAlso, remove a duplicative #ifdef."},{"Id":"7594866661","Type":"IssuesEvent","CreatedAt":"2018-04-27T01:42:51","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17805","RelatedDescription":"Opened issue \"Floating point formatting changed 2.0 -> 2.1\" (#17805) at dotnet/coreclr","RelatedBody":"Repro:\r\n\r\n```csharp\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        float value;\r\n        float.TryParse(\"-122.1944580078135\", out value);\r\n        Console.WriteLine(\"Float test gives {0}\", (double)value);\r\n    }\r\n}\r\n```\r\n\r\n.NET Core 2.0: -122.194458007813\r\n.NET Core 2.1: -122.194458007812\r\n\r\nReported by @mjsabby @ Bing"},{"Id":"7594653789","Type":"PullRequestEvent","CreatedAt":"2018-04-27T00:21:30","Actor":"mikem8361","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17804","RelatedDescription":"Opened pull request \"Add better portable PDB caching to System.Diagnostics.StackTrace.\" (#17804) at dotnet/coreclr","RelatedBody":"This is the mscorlib/System.Private.CoreLib side of the change."},{"Id":"7594650863","Type":"IssuesEvent","CreatedAt":"2018-04-27T00:20:22","Actor":"fo40225","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/2594","RelatedDescription":"Closed issue \"Use base index scale to access address in unsafe\" (#2594) at dotnet/coreclr","RelatedBody":"Consider those code\n\n```\nint[] a = { 1, 2 };\nint temp;\nfixed (int* ptrA = a)\n{\n    for (int i = 0; i < a.Length; i++)\n    {\n        temp = ptrA[i];\n        temp = temp + i;\n        Console.WriteLine(temp.ToString());\n    }\n\n    int* tempPtrA = ptrA;\n    for (int i = 0; i < a.Length; i++, tempPtrA++)\n    {\n        temp = *tempPtrA;\n        temp = temp + i;\n        Console.WriteLine(temp.ToString());\n    }\n}\n```\n\nIn C/C++, first loop will faster than second one because first loop will use\n\n```\nmov         eax,dword ptr a[esi*4]\n```\n\nuse only one instruction and get value. and second loop will use extra two instructions to increase pointer\n\n```\nmov         eax,dword ptr [edi]\ninc         esi \nlea         edi,[edi+4]\n```\n\nBut in C# unsafe code, first loop will use\n\n```\nmov         rcx,qword ptr [rbp-20h]\nmov         qword ptr [rbp-38h],rcx\nmov         rcx,qword ptr [rbp-38h]\nmov         eax,dword ptr [rbp-2Ch]\nmovsxd      rax,eax  \nmov         edx,4  \nmovsxd      rdx,edx  \nimul        rax,rdx  \nmov         ecx,dword ptr [rcx+rax]\n```\n\nand cause first one slow than second one. The `imul` slow down the performance.\n\nIf there is no performance penalty for using a scaling factor, why don't just use that instead of imul.\n\nor there have some reason so can't use it?\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7595343143","Type":"PullRequestEvent","CreatedAt":"2018-04-27T04:49:38","Actor":"nugetlurker","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9159","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.8.0-preview1.5158 into cli\" (#9159) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.8.0-preview1.5158 into cli release/2.1.3xx branch"},{"Id":"7594620669","Type":"IssuesEvent","CreatedAt":"2018-04-27T00:08:48","Actor":"mattscheffer","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9158","RelatedDescription":"Opened issue \"Build-server shutdown doesn't get credentials to delete Razor PID file\" (#9158) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nInstall latest RC CLI build\r\nIn powershell or cmd prompt, run the following:\r\ndotnet new razor\r\ndotnet build\r\ndotnet build-server shutdown\r\n\r\n## Expected  behavior\r\nThe Razor build server is shutdown and the PID file is deleted\r\n\r\n## Actual behavior\r\nException is thrown:\r\n\r\nPS C:\\Users\\v-masche\\servertests\\test3> dotnet build-server shutdown\r\nShutting down MSBuild server...\r\nShutting down VB/C# compiler server...\r\nSystem.IO.IOException: The process cannot access the file 'C:\\Users\\v-masche\\.dotnet\\pids\\build\\rzc-8784' because it is being used by another process.\r\n   at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle)\r\n   at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n   at System.IO.File.OpenRead(String path)\r\n   at Microsoft.Extensions.EnvironmentAbstractions.FileWrapper.OpenRead(String path)\r\n   at Microsoft.DotNet.BuildServer.RazorPidFile.Read(FilePath path, IFileSystem fileSystem)\r\n   at Microsoft.DotNet.BuildServer.BuildServerProvider.EnumerateBuildServers(ServerEnumerationFlags flags)+MoveNext()\r\n   at Microsoft.DotNet.Tools.BuildServer.Shutdown.BuildServerShutdownCommand.StartShutdown()\r\n   at Microsoft.DotNet.Tools.BuildServer.Shutdown.BuildServerShutdownCommand.Execute()\r\n   at Microsoft.DotNet.Cli.DotNetTopLevelCommandBase.RunCommand(String[] args)\r\n   at Microsoft.DotNet.Tools.BuildServer.BuildServerCommand.Run(String[] args)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nPS C:\\Users\\v-masche> dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-rc1-008669\r\n Commit:    4db4d9b568\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-rc1-008669\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1-26425-06\r\n  Commit:  b50a96ee38\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-rc1-008669 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-30676 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-30676 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1-26425-06 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7594534906","Type":"IssuesEvent","CreatedAt":"2018-04-26T23:37:48","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9129","RelatedDescription":"Closed issue \"Publishing ASP.NET Core webapplication from VS to Azure fails when the web app references a class library\" (#9129) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n- Create a Razor Pages or MVC web application in Visual Studio\r\n- Create a regular netstandard2.0 Class Library project\r\n- Reference the Class Library project from the web application\r\n- Publish the web application to Azure from VS\r\n- Configure the deployment mode as Self-Contained Target Runtime win-x64; File Publish Options-> Check the Remove additional files at destination box\r\n\r\n\r\n## Expected  behavior\r\nPublish to Azure succeeds\r\n\r\n## Actual behavior\r\nWeb Publish Activity:\r\n```\r\nRestoring packages for C:\\Users\\jabagga\\source\\repos\\RazorPagesAppTest\\RazorClassLibrary\\RazorClassLibrary.csproj...\r\nGenerating MSBuild file C:\\Users\\jabagga\\source\\repos\\RazorPagesAppTest\\RazorPagesAppTest\\obj\\publish\\RazorClassLibrary.csproj.nuget.g.props.\r\nGenerating MSBuild file C:\\Users\\jabagga\\source\\repos\\RazorPagesAppTest\\RazorPagesAppTest\\obj\\publish\\RazorClassLibrary.csproj.nuget.g.targets.\r\nRestore completed in 892.4 ms for C:\\Users\\jabagga\\source\\repos\\RazorPagesAppTest\\RazorClassLibrary\\RazorClassLibrary.csproj.\r\nYou are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452\r\nC:\\Program Files\\dotnet\\sdk\\2.1.300-rc1-008662\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(194,5): Error : The path to the project assets file was not set. Run a NuGet package restore to generate this file.\r\n```\r\nError List:\r\n```\r\nError\t\tThe path to the project assets file was not set. Run a NuGet package restore to generate this file.\r\n```\r\n\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\nPM> dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-rc1-008662\r\n Commit:    6ae1926fb0\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-rc1-008662\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1-26423-06\r\n  Commit:  b50a96ee38\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-rc1-008662 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-30661 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-30661 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1-26423-06 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\ncc @kichalla @pranavkm \r\n\r\n"},{"Id":"7594533610","Type":"IssuesEvent","CreatedAt":"2018-04-26T23:37:19","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9120","RelatedDescription":"Closed issue \"Need better warning/error message when ASP.NET Core 1.1 project is opened using CLI for .NET Core 2.1\" (#9120) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nWith VS 15.7 + CLI for .NET Core 2.1 (CLI 2.1.300 or higher) installed,\r\n\r\n1. Open ASP.NET Core 1.1 project that was created using a previous version of the CLI\r\n2. View Error list \r\n\r\n## Actual behavior\r\nYou see the warnings below\r\n![image](https://user-images.githubusercontent.com/8246794/39138907-a150cbaa-46d5-11e8-8300-340e4835f48b.png)\r\n\r\nFor the ASP.NET Core 1.1 / 1.0 cases, the warning shows the incorrect message. Removing the tool from csproj as suggested by the message will not put you in a working state. \r\n\r\n## Expected  behavior\r\n- Warning/Error should not say that the tools \"can be removed from this project\"\r\n- It should point to an fwlink where we explicitly ask the user to drop a global.json and pin their CLI version, assuming other places such as the build server will also have that pinned version of the CLI installed\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7594415386","Type":"IssuesEvent","CreatedAt":"2018-04-26T22:58:18","Actor":"richaverma1","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9157","RelatedDescription":"Opened issue \"Executables compiled with x86 cannot be run because CLI and VS default to x64 version of the SDK\" (#9157) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nInstall both x86  and x64 version of the SDK.\r\nThrough VS -\r\n1. Create a .Net Core console app. it will target netcoreapp2.0 by default\r\n2. Change platform to x86 and build. \r\n3. Run the app from VS\r\n\r\n## Expected  behavior\r\nApp should run.\r\n\r\n## Actual behavior\r\n'.Net Core Host has stopped working' error message\r\n\r\n4. Run from command line, result -\r\nUnhandled Exception: System.BadImageFormatException: Could not load file or assembly 'C:\\Users\\riverm\\source\\repos\\ConsoleApp39\\ConsoleApp39\\bin\\x86\\Debug\\netcoreapp2.0\\ConsoleApp39.dll'. An attempt was made to load a program with an incorrect format.\r\n\r\n5. Run the app from the command line using the x86 location -  C:\\Program Files (x86)\\dotnet\\dotnet.exe\r\nResult - the app runs fine\r\n\r\nThe reason for this being the order of x64 and x86 SDK locations in PATH. VS picks the CLI which is ahead and in the above described scenario x64 took precedence.\r\n\r\nWorkaround - is to change this order in PATH so that VS picks the one you want and this becomes very cumbersome if you work on multiple solutions targeting different platforms\r\n \r\nFurther on, the problem is also for cases where VS needs to pick up both x86 and x64, examples\r\n1.  mixed platform projects in a solution\r\n2.  mixed platform unit tests in unit test projects\r\n3.  Live unit testing against mixed platform unit tests.\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n![dotnetinfo](https://user-images.githubusercontent.com/19596695/39334373-3c7123a2-4963-11e8-9566-c9bea9fa6c4d.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7582285345","Type":"IssuesEvent","CreatedAt":"2018-04-25T03:12:55","Actor":"dotMorten","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/718","RelatedDescription":"Opened issue \"Add IItemProperties, IItemProperties, IEditableCollectionView and associated interfaces to standard\" (#718) at dotnet/standard","RelatedBody":"The `IItemProperties` and `IEditableCollectionView` in System.ComponentModel namespace are really great for describing data on ICollectionViewSource to handle dynamic datasources, where you don't have a pre-defined class to encapsulate a datamodel. For instance when dealing with generic data from any database table. It also avoid the need for reflection, as the IItemProperties provides the PropertyInfo you otherwise would retrieve through reflection.\r\n\r\nThese interfaces are useful for generating UI dynamically based on dynamic data models, for use with for instance DataGrids, form entries etc. By having your data collections implement these interfaces, specific platforms can use these interfaces to generate a UI for the data.\r\n\r\n\r\nDoc references:\r\n- [IItemProperties](https://docs.microsoft.com/dotnet/api/system.componentmodel.iitemproperties?view=netframework-4.7.1)\r\n- [IEditableCollectionView](https://docs.microsoft.com/dotnet/api/system.componentmodel.ieditablecollectionview?view=netframework-4.7.1)\r\n- [ItemPropertyInfo](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.itempropertyinfo?view=netframework-4.7.1)"},{"Id":"7579149418","Type":"IssuesEvent","CreatedAt":"2018-04-24T15:09:44","Actor":"uazo","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/717","RelatedDescription":"Opened issue \"PR: Re-add support for TypeDescriptor in System.ComponentModel.DataAnnotations for .NET standard 2.0\" (#717) at dotnet/standard","RelatedBody":"System.ComponentModel.DataAnnotations.GetPropertyValues should use TypeDescriptor in .net stardard 2.0\r\n\r\n(ref https://github.com/Microsoft/referencesource/blob/master/System.ComponentModel.DataAnnotations/DataAnnotations/Validator.cs#L443)"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7595423864","Type":"IssuesEvent","CreatedAt":"2018-04-27T05:23:10","Actor":"BruceForstall","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/28856","RelatedDescription":"Closed issue \"[arm32] corefx Microsoft.Win32.Registry.Tests failure in CI\" (#28856) at dotnet/corefx","RelatedBody":"@BruceForstall commented on [Wed Apr 04 2018](https://github.com/dotnet/coreclr/issues/17423)\n\nAll arm32 corefx test jobs are failing Microsoft.Win32.Registry.Tests with:\r\n```\r\nC:\\Users\\robox\\j\\workspace\\arm_cross_che---eb7b805d\\_\\fx\\bin\\tests\\Microsoft.Win32.Registry.Tests\\netcoreapp-Windows_NT-Release-arm>call C:\\Users\\robox\\j\\workspace\\arm_cross_che---eb7b805d\\_\\fx\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm\\dotnet.exe xunit.console.netcore.exe Microsoft.Win32.Registry.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonwindowstests  -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing \r\nxUnit.net console test runner (32-bit .NET Core)\r\nCopyright (C) 2014 Outercurve Foundation.\r\n\r\nDiscovering: Microsoft.Win32.Registry.Tests\r\nDiscovered:  Microsoft.Win32.Registry.Tests\r\nStarting:    Microsoft.Win32.Registry.Tests\r\n   Microsoft.Win32.RegistryTests.Registry_SetValue_str_str_obj.SetValueWithEnvironmentVariable(valueName: \\\"ExpandedTest_45\\\", envVariableName: \\\"ProgramFiles\\\", expectedVariableValue: \\\"C:\\\\\\\\Program Files (Arm)\\\") [FAIL]\r\n      Assert.Equal() Failure\r\n                                  \u0019 (pos 18)\r\n      Expected: C:\\Program Files (Arm)\r\n      Actual:   C:\\Program Files (x86)\r\n                                  \u0018 (pos 18)\r\n      Stack Trace:\r\n         D:\\j\\workspace\\arm_cross_che---99792267\\_\\fx\\src\\Microsoft.Win32.Registry\\tests\\Registry\\Registry_SetValue_str_str_obj.cs(119,0): at Microsoft.Win32.RegistryTests.Registry_SetValue_str_str_obj.SetValueWithEnvironmentVariable(String valueName, String envVariableName, String expectedVariableValue)\r\n   Microsoft.Win32.RegistryTests.RegistryKey_SetValue_str_obj.SetValueWithEnvironmentVariable(valueName: \\\"ExpandedTest_45\\\", envVariableName: \\\"ProgramFiles\\\", expectedVariableValue: \\\"C:\\\\\\\\Program Files (Arm)\\\") [FAIL]\r\n      Assert.Equal() Failure\r\n                                  \u0019 (pos 18)\r\n      Expected: C:\\Program Files (Arm)\r\n      Actual:   C:\\Program Files (x86)\r\n                                  \u0018 (pos 18)\r\n      Stack Trace:\r\n         D:\\j\\workspace\\arm_cross_che---99792267\\_\\fx\\src\\Microsoft.Win32.Registry\\tests\\RegistryKey\\RegistryKey_SetValue_str_obj.cs(117,0): at Microsoft.Win32.RegistryTests.RegistryKey_SetValue_str_obj.SetValueWithEnvironmentVariable(String valueName, String envVariableName, String expectedVariableValue)\r\nFinished:    Microsoft.Win32.Registry.Tests\r\n\r\n=== TEST EXECUTION SUMMARY ===\r\n   Microsoft.Win32.Registry.Tests  Total: 4925, Errors: 0, Failed: 2, Skipped: 0, Time: 18.351s\r\n----- end 22:27:42.93 ----- exit code 1 ----------------------------------------------------------\r\nCOREFX TEST FAILED\r\n```\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_corefx_baseline_tst/8/consoleText\r\n\n\n---\n\n@RussKeldorph commented on [Thu Apr 05 2018](https://github.com/dotnet/coreclr/issues/17423#issuecomment-379004058)\n\n@danmosemsft Wanna take this to corefx?  It looks like a test issue.\n\n"},{"Id":"7595222891","Type":"PullRequestEvent","CreatedAt":"2018-04-27T03:57:19","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29358","RelatedDescription":"Merged pull request \"Remove dead file\" (#29358) at dotnet/corefx","RelatedBody":""},{"Id":"7595211509","Type":"PullRequestEvent","CreatedAt":"2018-04-27T03:52:44","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29352","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC to preview1-26427-01, preview3-26427-01, preview1-26426-05, beta-26426-00, beta-26426-00, respectively (master)\" (#29352) at dotnet/corefx","RelatedBody":""},{"Id":"7595210560","Type":"PullRequestEvent","CreatedAt":"2018-04-27T03:52:21","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29339","RelatedDescription":"Merged pull request \"Fix regression in SslStream eof handling\" (#29339) at dotnet/corefx","RelatedBody":"If SslStream reads 0 bytes from the underlying stream while reading the frame header and payload, it should throw an IOException for EOF, but on Windows it's passing empty data off to the native decryption routine and on Unix it's hanging in an infinite loop.  This is a regression from 2.0 due to refactorings done in 2.1.\r\n\r\ncc: @geoffkizer, @davidsh, @halter73, @Drawaes, @karelz "},{"Id":"7594840055","Type":"IssuesEvent","CreatedAt":"2018-04-27T01:33:08","Actor":"Priya91","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29362","RelatedDescription":"Opened issue \"Assembly informational attributes not applied for .net core app\" (#29362) at dotnet/corefx","RelatedBody":"**Repro:**\r\n\r\n1. Create a .net core app\r\n2. Set the following properties in the csproj\r\n\r\n```xml\r\n<PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <RuntimeIdentifier>win7-x86</RuntimeIdentifier>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <AssemblyTitle>Assembly Information Repro</AssemblyTitle>\r\n    <AssemblyProduct>Assembly Information Repro</AssemblyProduct>\r\n    <AssemblyDescription>Assembly Information Repro</AssemblyDescription>\r\n    <ProductName>Assembly Information Repro</ProductName>\r\n    <PublisherName>tester</Publishername>\r\n</PropertyGroup>\r\n```\r\n3. Publish the app.\r\n\r\n**Expected:**\r\nThe properties on ```<assemblyname>.exe``` are set as per the info provided in the csproj.\r\n\r\n**Actual:**\r\nThe properties are set only for ```<assemblyname>.dll```, not on the ```<assemblyname>.exe```. Note, the .exe is the one that runs, and is shown in task manager, firewall prompts, etc. So without the process information, on task manager, it doesn't have a description, and on firewall prompts, it shows the publisher as unknown.\r\n\r\nAnother issue: Setting the ```ProductName``` attribute or the ```AssemblyProduct``` property, doesn't set the Product Name information even for ```<assemblyname>.dll```.\r\n\r\n**AssemblyMetadata.dll**\r\n\r\n**Note:** Product Name is not what was specified in the project property.\r\n\r\n![image](https://user-images.githubusercontent.com/7853870/39339896-e260be6e-497f-11e8-867b-fb470122a334.png)\r\n\r\n**AssemblyMetadata.exe**\r\n\r\n![image](https://user-images.githubusercontent.com/7853870/39339877-c3c9349a-497f-11e8-85ad-64ae3f6461e0.png)\r\n"},{"Id":"7594817265","Type":"PullRequestEvent","CreatedAt":"2018-04-27T01:25:16","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29361","RelatedDescription":"Opened pull request \"Avoid stackalloc in Uri.ParseSchemeCheckImplicitFile\" (#29361) at dotnet/corefx","RelatedBody":"@rmkerr, this avoids the `stackalloc` that's causing you headaches in https://github.com/dotnet/corefx/pull/29334.\r\n\r\nI didn't measure any significant throughput difference between the current version and this, though it does avoid a string allocation in one path (I'm not sure how that path is triggered), and it removes some unsafe code as another benefit."},{"Id":"7594754021","Type":"IssuesEvent","CreatedAt":"2018-04-27T01:00:48","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29360","RelatedDescription":"Opened issue \"Uri.FindOrFetchAsUnknownV1Syntax is breaking thread-safety\" (#29360) at dotnet/corefx","RelatedBody":"When Uri's CheckSchemeSyntax encounters an unknown scheme, it uses FindOrFetchAsUnknownV1Syntax to look up the scheme in a cache, implemented with a dictionary.  This cache is static and thus shared across all threads, and FindOrFetchAsUnknownV1Syntax is attempting to be thread-safe, by using a lock to protect writes to the dictionary.  But it's not using a lock to protect the reads in this function and elsewhere, and unlike Hashtable, Dictionary (and in this case LowLevelDictionary) are not safe for concurrent reading and writing."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7595316582","Type":"PullRequestEvent","CreatedAt":"2018-04-27T04:37:42","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26446","RelatedDescription":"Merged pull request \"Disable unit test: CommandLineRunnerTests.ReferenceSearchPaths1\" (#26446) at dotnet/roslyn","RelatedBody":""},{"Id":"7595315802","Type":"PullRequestEvent","CreatedAt":"2018-04-27T04:37:21","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26446","RelatedDescription":"Opened pull request \"Disable unit test: CommandLineRunnerTests.ReferenceSearchPaths1\" (#26446) at dotnet/roslyn","RelatedBody":""},{"Id":"7595210715","Type":"PullRequestEvent","CreatedAt":"2018-04-27T03:52:24","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26431","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#26431) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7595210006","Type":"IssuesEvent","CreatedAt":"2018-04-27T03:52:09","Actor":"gundermanc","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26445","RelatedDescription":"Opened issue \"Migrate indent guides from IBlockTag to IStructureTag\" (#26445) at dotnet/roslyn","RelatedBody":"Roslyn is currently using IBlockTag's, which were introduced in 15.0, but quickly realized to be inadequate for braced languages, and supplanted by StructureTags.\r\n\r\nRoslyn's usage of the API also does not follow the API contract, requiring a [Roslyn special case in the editor code](https://devdiv.visualstudio.com/DevDiv/_git/VS-Platform?path=%2Fsrc%2FEditor%2FText%2FImpl%2FStructure%2FLegacy%2FLazyTranslatedStructureTag.cs&version=GBmaster&_a=contents&line=51&lineStyle=plain&lineEnd=55&lineStartColumn=1&lineEndColumn=143). This incorrect usage is the root cause behind #24067.\r\n\r\nStructureTag is more or less a superset of IBlockTag that allows the implementer to continue using the same heuristics to position the indent guides or explicitly specify the X position and Y extent relative to characters in the buffer. Using this API, you should be able to address \r\n\r\n[StructureTag is now roughly documented](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.text.tagging.structuretag?view=visualstudiosdk-2017) on MSFT docs.\r\n\r\n#16395 can be fixed by correctly fulfilling the API contract or by specifying the absolute position of the guide rather than using the heuristics.\r\n\r\nRoslyn is the last holdout on IBlockTags, so migrating off it would allow it to be removed."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7588797670","Type":"PullRequestEvent","CreatedAt":"2018-04-26T03:45:27","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5749","RelatedDescription":"Merged pull request \"Devirtualize delegate creation to sealed virtuals\" (#5749) at dotnet/corert","RelatedBody":"These could be in sealed vtable slots."},{"Id":"7588505753","Type":"PullRequestEvent","CreatedAt":"2018-04-26T02:02:06","Actor":"sergiy-k","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5750","RelatedDescription":"Merged pull request \"Fix Exceptions in OSX\" (#5750) at dotnet/corert","RelatedBody":"After the XCode update on April 12, exceptions in CoreRT on OSX stopped working. \r\n\r\nStack unwinding through any one of the specially defined unmanaged runtime methods (in this case `RhpThrowEx`) would cause an access violation. Diagnosing this further the  `EXPORT_POINTER_TO_ADDRESS` did not correctly export a pointer, but instead just a literal value of `1`. The underlying issue was that the value `1b` in the macro was interpreted as the binary digit `1` instead of correctly identified as the label. \r\n\r\nOur CI machines don't seem to have gotten the update yet - on an updated machine, the Exceptions test fails. \r\n\r\n@janvorli @sergiy-k "},{"Id":"7588334432","Type":"PullRequestEvent","CreatedAt":"2018-04-26T00:59:32","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5750","RelatedDescription":"Opened pull request \"Fix Exceptions in OSX\" (#5750) at dotnet/corert","RelatedBody":"After the XCode update on April 12, exceptions in CoreRT on OSX stopped working. \r\n\r\nStack unwinding through any one of the specially defined unmanaged runtime methods (in this case `RhpThrowEx`) would cause an access violation. Diagnosing this further the  `EXPORT_POINTER_TO_ADDRESS` did not correctly export a pointer, but instead just a literal value of `1`. The underlying issue was that the value `1b` in the macro was interpreted as the binary digit `1` instead of correctly identified as the label. \r\n\r\nOur CI machines don't seem to have gotten the update yet - on an updated machine, the Exceptions test fails. \r\n\r\n@janvorli @sergiy-k "},{"Id":"7588317147","Type":"IssuesEvent","CreatedAt":"2018-04-26T00:52:57","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5410","RelatedDescription":"Closed issue \"Investigate moving non-GC spills to allocas\" (#5410) at dotnet/corert","RelatedBody":"Now that returns are spills, we're generating a lot of them (and we'll generate more as part of a bug fix). We should investigate whether it would work to move non-GC types in spills to allocas instead of the shadow stack as that should generate smaller code by just using WASM locals. We still need the GC types so that we can report them to the GC from the shadow stack."},{"Id":"7588301552","Type":"PullRequestEvent","CreatedAt":"2018-04-26T00:46:51","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5748","RelatedDescription":"Merged pull request \"Enable Interface dispatch for WASM\" (#5748) at dotnet/corert","RelatedBody":"@morganbr thanks for solving the conv, vtable base and init problems. Here's my changes for interface dispatch. I think it still needs null checks before callvirt is really done. It might be a good idea to make some kind of LLVM infrastructure for injecting simple exception throwing checks inline. This would also apply nicely to the IndexOutOfRangeException that needs to be thrown in the array access code."},{"Id":"7588270686","Type":"PullRequestEvent","CreatedAt":"2018-04-26T00:35:19","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5749","RelatedDescription":"Opened pull request \"Devirtualize delegate creation to sealed virtuals\" (#5749) at dotnet/corert","RelatedBody":"These could be in sealed vtable slots."},{"Id":"7588058092","Type":"PullRequestEvent","CreatedAt":"2018-04-25T23:20:35","Actor":"kouvel","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5747","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5747) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7587937611","Type":"PullRequestEvent","CreatedAt":"2018-04-25T22:43:16","Actor":"hippiehunter","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5748","RelatedDescription":"Opened pull request \"Enable Interface dispatch for WASM\" (#5748) at dotnet/corert","RelatedBody":"@morganbr thanks for solving the conv, vtable base and init problems. Here's my changes for interface dispatch. I think it still needs null checks before callvirt is really done. It might be a good idea to make some kind of LLVM infrastructure for injecting simple exception throwing checks inline. This would also apply nicely to the IndexOutOfRangeException that needs to be thrown in the array access code."},{"Id":"7587868429","Type":"PullRequestEvent","CreatedAt":"2018-04-25T22:24:02","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5747","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5747) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7586644144","Type":"PullRequestEvent","CreatedAt":"2018-04-25T18:13:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5692","RelatedDescription":"Merged pull request \"[X86/ARM] Cross compiling docs update\" (#5692) at dotnet/corert","RelatedBody":"@dotnet/arm32-corert-contrib please review"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7595342711","Type":"PullRequestEvent","CreatedAt":"2018-04-27T04:49:28","Actor":"nugetlurker","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2191","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.8.0-preview1.5158 into sdk\" (#2191) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.8.0-preview1.5158 into sdk release/2.1.3xx branch"},{"Id":"7593999952","Type":"PullRequestEvent","CreatedAt":"2018-04-26T21:12:28","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2189","RelatedDescription":"Opened pull request \"Merge release/2.1.2xx to release/2.1.3xx\" (#2189) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.2xx into release/2.1.3xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.2xx-to-release/2.1.3xx\ngit reset --hard upstream/release/2.1.3xx\ngit merge upstream/release/2.1.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.2xx-to-release/2.1.3xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7593907916","Type":"PullRequestEvent","CreatedAt":"2018-04-26T20:53:24","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2184","RelatedDescription":"Closed pull request \"Merge release/2.1.3xx to release/2.1.4xx\" (#2184) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into release/2.1.4xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-release/2.1.4xx\ngit reset --hard upstream/release/2.1.4xx\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-release/2.1.4xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7593901633","Type":"PullRequestEvent","CreatedAt":"2018-04-26T20:52:09","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2177","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-rtm.5148 into sdk\" (#2177) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-rtm.5148 into sdk release/2.1.2xx branch"},{"Id":"7593306888","Type":"PullRequestEvent","CreatedAt":"2018-04-26T18:51:57","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2168","RelatedDescription":"Merged pull request \"Merge release/2.1.4xx to master\" (#2168) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7592659022","Type":"PullRequestEvent","CreatedAt":"2018-04-26T16:49:07","Actor":"tmat","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2178","RelatedDescription":"Merged pull request \"Update RepoToolset to 1.0.0-beta2-62804-01\" (#2178) at dotnet/sdk","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"989532387775205376","CreatedAt":"2018-04-26T15:51:20+00:00","UserScreenname":"dotnet","Text":"Get the Azure Quick Start Guide for .NET Developers https://t.co/ALECzXryjk","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":40,"FavoriteCount":17,"RawContent":null},{"Id":"987375741204508673","CreatedAt":"2018-04-20T17:01:35+00:00","UserScreenname":"dotnet","Text":"Help us plan the future of .NET! https://t.co/R0QoZVvXx4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":126,"FavoriteCount":93,"RawContent":null},{"Id":"986692696507953152","CreatedAt":"2018-04-18T19:47:25+00:00","UserScreenname":"dotnet","Text":"Performance Improvements in .NET Core 2.1 https://t.co/6YMK8P99cZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":251,"FavoriteCount":152,"RawContent":null},{"Id":"986692437211987969","CreatedAt":"2018-04-18T19:46:23+00:00","UserScreenname":"dotnet","Text":"Announcing Visual Studio 2017 15.7 Preview 4 https://t.co/XYIzXNDMhn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":63,"FavoriteCount":44,"RawContent":null},{"Id":"986400394786914304","CreatedAt":"2018-04-18T00:25:55+00:00","UserScreenname":"dotnet","Text":".NET Core April 2018 Update https://t.co/PuT2Jc7GBy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":71,"FavoriteCount":33,"RawContent":null},{"Id":"985915431499259904","CreatedAt":"2018-04-16T16:18:50+00:00","UserScreenname":"dotnet","Text":"Join our @csharpfritz and his pair-programming guest @fiercekittenz tomorrow for some LIVE CODING and discussion ab… https://t.co/Vll8gfdlKQ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2018-04-27T05:30:23.5506178Z","RunDurationInMilliseconds":7921}