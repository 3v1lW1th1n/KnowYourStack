{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6992060135","Type":"IssuesEvent","CreatedAt":"2017-12-15T04:00:56","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15537","RelatedDescription":"Opened issue \"Assert failure: Thread::IsObjRefValid(&objref) testing checked against corefx\" (#15537) at dotnet/coreclr","RelatedBody":"See https://github.com/dotnet/coreclr/pull/15533#issuecomment-351907201"},{"Id":"6991960242","Type":"PullRequestEvent","CreatedAt":"2017-12-15T03:18:01","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15536","RelatedDescription":null,"RelatedBody":""},{"Id":"6991960148","Type":"PullRequestEvent","CreatedAt":"2017-12-15T03:18:00","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15536","RelatedDescription":"Closed pull request \"Test PR Do not merge\" (#15536) at dotnet/coreclr","RelatedBody":""},{"Id":"6991887799","Type":"PullRequestEvent","CreatedAt":"2017-12-15T02:48:53","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15535","RelatedDescription":"Opened pull request \"Update CoreFx to preview1-26015-02 (master)\" (#15535) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6991845945","Type":"PullRequestEvent","CreatedAt":"2017-12-15T02:32:13","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15534","RelatedDescription":"Opened pull request \"Enable ReadyToRun testing for arm/armlb/arm64\" (#15534) at dotnet/coreclr","RelatedBody":"Sets RunCrossGen variable, which is used by generated wrappers\r\nto crossgen tests before running them.\r\n\r\nStill to-do: crossgen framework assemblies before running tests."},{"Id":"6991825799","Type":"PullRequestEvent","CreatedAt":"2017-12-15T02:24:06","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14727","RelatedDescription":"Merged pull request \"Change ReadOnlySpan indexer to return ref readonly\" (#14727) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/24105\r\n\r\nRelated PR: https://github.com/dotnet/corefx/pull/24929\r\n\r\ncc @ektrah, @VSadov, @jkotas, @KrzysztofCwalina "},{"Id":"6991810638","Type":"PullRequestEvent","CreatedAt":"2017-12-15T02:17:55","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15449","RelatedDescription":"Merged pull request \"[RyuJit][Armel] Do not lose type information\" (#15449) at dotnet/coreclr","RelatedBody":"fgMorphMultiregStructArg could lose type information when replaced smth like this:\r\n GT_OBJ - TYP_STRUCT     <== arg\r\n +GT_ADDR - TYP_I_IMPL\r\n ++GT_LCL_VAR - TYP_BLK  <== argValue\r\n\r\nFix #14955.\r\n\r\nSo after the change we do not replace argValue with anything that has different type.\r\n"},{"Id":"6991810632","Type":"IssuesEvent","CreatedAt":"2017-12-15T02:17:55","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14955","RelatedDescription":"Closed issue \"[RyuJIT/armel] Assertion failed 'argValue->TypeGet() == TYP_STRUCT'\" (#14955) at dotnet/coreclr","RelatedBody":"`JIT/Methodical/tailcall/_il_dbgtest_3b/` fails in `armel` with RyuJIT.\r\n\r\nIn Checked, following tests failed with an assertion as follows.\r\n```\r\nFAILED   - [   0s]JIT/Methodical/tailcall/_il_dbgtest_3b/_il_dbgtest_3b.sh\r\n               BEGIN EXECUTION\r\n               /opt/usr/coreclr-tc/Windows_NT.x86.Release/Tests/coreoverlay/corerun _il_dbgtest_3b.exe\r\n               \r\n               Assert failure(PID 26011 [0x0000659b], Thread: 26011 [0x659b]): Assertion failed 'argValue->TypeGet() == TYP_STRUCT' in 'JitTest.TestClass:TestFunc1():int' (IL size 28)\r\n               \r\n                   File: /var/jenkins/workspace/netcore/github_master/cross_checked/build/build_coreclr_checked/repo/code/src/jit/morph.cpp Line: 4993\r\n                   Image: /opt/usr/coreclr-tc/Windows_NT.x86.Release/Tests/coreoverlay/corerun\r\n               \r\n               ./_il_dbgtest_3b.sh: line 243: 26011 Aborted                 $_DebuggerFullPath \"$CORE_ROOT/corerun\" $ExePath $CLRTestExecutionArguments\r\n               Expected: 100\r\n               Actual: 134\r\n               END EXECUTION - FAILED\r\n```\r\n\r\n\r\nIn Release, the test fails with segmentation fault as follows.\r\n```\r\nFAILED   - [   1s]JIT/Methodical/tailcall/_il_dbgtest_3b/_il_dbgtest_3b.sh\r\n               BEGIN EXECUTION\r\n               /opt/usr/coreclr-tc/Windows_NT.x86.Release/Tests/coreoverlay/corerun _il_dbgtest_3b.exe\r\n               ./_il_dbgtest_3b.sh: line 243:  6557 Segmentation fault      $_DebuggerFullPath \"$CORE_ROOT/corerun\" $ExePath $CLRTestExecutionArguments\r\n               Expected: 100\r\n               Actual: 139\r\n               END EXECUTION - FAILED\r\n```"},{"Id":"6991795168","Type":"PullRequestEvent","CreatedAt":"2017-12-15T02:11:41","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15531","RelatedDescription":"Merged pull request \"Update CoreClr to preview1-26014-09 (master)\" (#15531) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"6991789451","Type":"PullRequestEvent","CreatedAt":"2017-12-15T02:09:24","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15533","RelatedDescription":"Opened pull request \"[WIP]Testing corefx build\" (#15533) at dotnet/coreclr","RelatedBody":""},{"Id":"6991726075","Type":"PullRequestEvent","CreatedAt":"2017-12-15T01:44:20","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15532","RelatedDescription":"Opened pull request \"Convert uses of the Dangerous APIs to use MemoryMarshal.GetReference\" (#15532) at dotnet/coreclr","RelatedBody":"Part of:\r\nhttps://github.com/dotnet/corefx/issues/25412\r\nhttps://github.com/dotnet/corefx/issues/25615\r\n\r\nRelated to: https://github.com/dotnet/coreclr/pull/15417\r\n\r\nFollowing the staging plan from here: https://github.com/dotnet/corefx/issues/23881#issuecomment-343767740\r\n\r\n- [ ] Add MemoryExtensions.GetReference/TryGetArray\r\n- [ ] Convert all uses of DangerousGetPinnableReference/DangerousTryGetArray in coreclr, corefx, corert, corefxlab, aspnet, ... to MemoryExtensions.GetReference\r\n- [ ] Change DangerousGetPinnableReference to whatever we like to make it fit the pinning pattern and remove DangerousTryGetArray.\r\n\r\nDoing it this way will avoid the need for complex staging or things being on the floor for extensive periods of time.\r\n\r\ncc @jkotas, @stephentoub, @KrzysztofCwalina \r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6991681917","Type":"IssuesEvent","CreatedAt":"2017-12-15T01:27:14","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8252","RelatedDescription":"Opened issue \"Update dotnet-install to support installing aspnetcore\" (#8252) at dotnet/cli","RelatedBody":"We should update dotnet-install.ps1/sh to support installing the Microsoft.AspNetCore.All shared runtime. \r\n\r\nPossible usage syntax:\r\n\r\n**Option 1** \r\nOption with value: `-Runtime <name>`\r\n```\r\ndotnet-install.ps1 -Runtime dotnet\r\ndotnet-install.ps1 -Runtime aspnetcore\r\n\r\ndotnet-install.sh --runtime dotnet\r\ndotnet-install.sh --runtime aspnetcore\r\n```\r\nFor compatibility, `--shared-runtime` could just become sugar for `--runtime dotnet`\r\n\r\n**Option 2** \r\nNew switch: `-AspNetCoreRuntime`\r\n```\r\ndotnet-install.ps1 -AspNetCoreRuntime\r\ndotnet-install.sh --aspnetcore-runtime\r\n```\r\n\r\nInvalid usage: mixing -SharedRuntime and -AspNetCoreRuntime. This would be an error.\r\n\r\n@johnbeisner @livarcocc - what would be your usage preference? Is there another syntax that might be better?\r\n\r\ncc @JunTaoLuo "},{"Id":"6991579725","Type":"IssuesEvent","CreatedAt":"2017-12-15T00:48:26","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8250","RelatedDescription":"Closed issue \"Run build.sh on branch `v2.1.3` doesn't work on Linux\" (#8250) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n```\r\ndocker run  -it microsoft/dotnet bash\r\n\r\ngit clone https://github.com/dotnet/cli\r\ncd cli/\r\ngit checkout v2.1.3\r\nexport DropSuffix=true\r\n./build.sh /t:Compile\r\n```\r\n\r\n## Expected  behavior\r\nA built binary\r\n\r\n## Actual behavior\r\nReceives a 404 while downloading dotnet sdk, and does not recover. (Does not fallback to a new url)\r\n\r\n```\r\n\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/1.0.0-preview2-1-003177/dotnet-sdk-1.0.0-preview2-1-003177-linux-x64.tar.gz\r\ncurl: (22) The requested URL returned error: 404 \r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/1.0.0-preview2-1-003177/dotnet-sdk-1.0.0-preview2-1-003177-linux-x64.tar.gz\r\n\r\ngzip: stdin: unexpected end of file\r\ntar: Child returned status 1\r\ntar: Error is not recoverable: exiting now\r\nroot@71cb5e91573c:/cli# \r\n```\r\n\r\n## Environment data\r\nVersion of docker image: aeb50eb9b533\r\n\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.3)\r\n\r\nProduct Information:\r\n Version:            2.1.3\r\n Commit SHA-1 hash:  a0ca411ca5\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.3/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6991559978","Type":"PullRequestEvent","CreatedAt":"2017-12-15T00:40:47","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8251","RelatedDescription":"Opened pull request \"Localization for tools work so far\" (#8251) at dotnet/cli","RelatedBody":"https://github.com/dotnet/cli/commit/584d3f05021af25c737136275fc1c77429b12db7 \r\nhttps://github.com/dotnet/cli/commit/cc80ed43e04f0b3300f83afa0bcf8b73c6a7cbc9\r\nhttps://github.com/dotnet/cli/commit/55f62d9d646b558d53c56e226a9ddc3dc003a23b  \r\n\r\nhttps://github.com/dotnet/cli/issues/8078"},{"Id":"6991458017","Type":"PullRequestEvent","CreatedAt":"2017-12-15T00:02:30","Actor":"emgarten","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8200","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.6.0-preview2-4706 into cli\" (#8200) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4706 into cli master branch"},{"Id":"6991143412","Type":"IssuesEvent","CreatedAt":"2017-12-14T22:27:01","Actor":"dgodd","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8250","RelatedDescription":"Opened issue \"Run build.sh on branch `v2.1.3` doesn't work on Linux\" (#8250) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n```\r\ndocker run  -it microsoft/dotnet bash\r\n\r\ngit clone https://github.com/dotnet/cli\r\ncd cli/\r\ngit checkout v2.1.3\r\nexport DropSuffix=true\r\n./build.sh /t:Compile\r\n```\r\n\r\n## Expected  behavior\r\nA built binary\r\n\r\n## Actual behavior\r\nReceives a 404 while downloading dotnet sdk, and does not recover. (Does not fallback to a new url)\r\n\r\n```\r\n\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/1.0.0-preview2-1-003177/dotnet-sdk-1.0.0-preview2-1-003177-linux-x64.tar.gz\r\ncurl: (22) The requested URL returned error: 404 \r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/1.0.0-preview2-1-003177/dotnet-sdk-1.0.0-preview2-1-003177-linux-x64.tar.gz\r\n\r\ngzip: stdin: unexpected end of file\r\ntar: Child returned status 1\r\ntar: Error is not recoverable: exiting now\r\nroot@71cb5e91573c:/cli# \r\n```\r\n\r\n## Environment data\r\nVersion of docker image: aeb50eb9b533\r\n\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.3)\r\n\r\nProduct Information:\r\n Version:            2.1.3\r\n Commit SHA-1 hash:  a0ca411ca5\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.3/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6991064797","Type":"PullRequestEvent","CreatedAt":"2017-12-14T22:07:01","Actor":"joperezr","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8249","RelatedDescription":"Opened pull request \"Update the support package on the CLI to fix binding redirects on 4.7.1\" (#8249) at dotnet/cli","RelatedBody":"cc: @livarcocc @AlexGhiondea @weshaggard \r\n\r\nDoing the insertion of the support package into the CLI so that we fix the binding redirects for 4.7.1\r\n"},{"Id":"6991016579","Type":"PullRequestEvent","CreatedAt":"2017-12-14T21:55:25","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8248","RelatedDescription":"Opened pull request \"Fix windows keep adding tools path to env:PATH\" (#8248) at dotnet/cli","RelatedBody":"Environment.GetEnvironmentVariable(PathName) means\r\n\r\nEnvironment.GetEnvironmentVariable(PathName,\r\nEnvironmentVariableTarget.Process)\r\n\r\nHowever, I have added to .User. So the detection of path existence\r\nfailed. And it ends up adding the path again and again\r\n\r\nFix https://github.com/dotnet/cli/issues/8247\r\n\r\nwhy no tests: this is a place hard to test, since it depends on a Windows API. To test it, I would need to play around CI's env:PATH, which is the problem in the beginning. \r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6992027615","Type":"IssuesEvent","CreatedAt":"2017-12-15T03:46:39","Actor":"TylerBrinkley","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/606","RelatedDescription":"Closed issue \"NetStandard.Library Multi-Targeting Question\" (#606) at dotnet/standard","RelatedBody":"What is the recommended guidance for the NETStandard.Library version to target for libraries that multi-target .NET Standard 1.x and 2.x?\r\n\r\nIn my Enums.NET library I've set the implicit package version to 2.0.0 using `<NetStandardImplicitPackageVersion>2.0.0</NetStandardImplicitPackageVersion>` but now users are receiving package downgrade errors when targeting 1.x and pulling in Enums.NET. See [here](https://github.com/TylerBrinkley/Enums.NET/issues/18).\r\n\r\nThis problem is not unique to my library either as Json.NET also has this issue mentioned [here](https://github.com/JamesNK/Newtonsoft.Json/issues/1526)."},{"Id":"6990031860","Type":"IssuesEvent","CreatedAt":"2017-12-14T18:08:04","Actor":"BjarkeMeier","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/602","RelatedDescription":"Closed issue \"Azure Web app: Could not load file or assembly 'netstandard, Version=2.0.0.0\" (#602) at dotnet/standard","RelatedBody":"I'm running an Azure web app. After referencing a .NET Standard 2 class library the app no longer can start. Azure web app restart reports no problems but a manual start in Azure console gives the following output:\r\n\r\n```\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\n   at Foo.Program.Main(String[] args)\r\n```\r\n\r\nThe class library has references to NuGet packages like Microsoft.AspNetCore.Http.Abstractions version 2.0.1 and thus cannot be downgraded to a previous .NET Standard. I've tried to add the package NETStandard.Library and I've tried to add a VSTS \".NET Core Tool Installer\" task to install dotnet 2 SDK in the build. All projects except for the .NET Standard 2 class library targets .NET Framework 4.7.1.\r\n\r\nHow do I solve the problem?"},{"Id":"6988819297","Type":"IssuesEvent","CreatedAt":"2017-12-14T14:18:35","Actor":"TylerBrinkley","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/606","RelatedDescription":"Opened issue \"NetStandard.Library Multi-Targeting Question\" (#606) at dotnet/standard","RelatedBody":"What is the recommended guidance for the NETStandard.Library version to target for libraries that multi-target .NET Standard 1.x and 2.x?\r\n\r\nIn my Enums.NET library I've set the implicit package version to 2.0.0 using `<NetStandardImplicitPackageVersion>2.0.0</NetStandardImplicitPackageVersion>` but now users are receiving package downgrade warnings when targeting 1.x and pulling in Enums.NET. See [here](https://github.com/TylerBrinkley/Enums.NET/issues/18).\r\n\r\nThis problem is not unique to my library either as Json.NET also has this issue mentioned [here](https://github.com/JamesNK/Newtonsoft.Json/issues/1526)."},{"Id":"6987898892","Type":"IssuesEvent","CreatedAt":"2017-12-14T10:50:41","Actor":"unamed000","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/605","RelatedDescription":"Opened issue \"NETStandard 2.0 Project Template not working properly.\" (#605) at dotnet/standard","RelatedBody":"I've an issue when creating project template in VS 2017 15.5.1 version.\r\n\r\nWhen i create a project template and use it to create a project. There is no file existed in there regarding my project templates have many files.\r\n\r\nSteps to re-produce the bug:\r\n- Create a NETStandard2 class library in VS 2017.\r\n- Create multiple files in there.\r\n- Export Template for that projects.\r\n- Copy that template into: C:\\Users\\{Username}\\Documents\\Visual Studio 2017\\Templates\\ProjectTemplates \r\n- Create a project base on that template.\r\n\r\nAnyone have any idea for this one?"},{"Id":"6985407162","Type":"IssuesEvent","CreatedAt":"2017-12-13T21:57:36","Actor":"desmondgc","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/604","RelatedDescription":"Opened issue \"How to avoid incompatibilities between .NET Standard 2.0 and .NET Framework 4.6.1\" (#604) at dotnet/standard","RelatedBody":"I have a .NET Standard 2.0 class library that uses System.Net.Http.HttpClientHandler. The class library is referenced in multiple projects, including a WPF application targeting .NET Framework 4.6.1. I am trying to set the HttpClientHandler.MaxConnectionsPerServer property which causes a MissingMethodException on systems without .NET Framework 4.7.1 installed.\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n    MaxConnectionsPerServer = 32\r\n};\r\n```\r\n\r\n```\r\nSystem.MissingMethodException: Method not found: 'Void System.Net.Http.HttpClientHandler.set_MaxConnectionsPerServer(Int32)'.\r\n```\r\n\r\nThis is expected - MaxConnectionsPerServer is one of the [APIs with known compatibility issues](https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt).\r\n\r\nFirst workaround attempt - catch MissingMethodException:\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n};\r\n\r\ntry\r\n{\r\n    baseHandler.MaxConnectionsPerServer = 32;\r\n}\r\ncatch (MissingMethodException)\r\n{\r\n    // Available since .NET Framework 4.7.1\r\n}\r\n```\r\n\r\nDoesn't work - the exception is still raised. Some SO posts suggest that it's generally not possible to catch MissingMethodException.\r\n\r\nSecond workaround attempt - reflection:\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n};\r\n\r\nif (typeof(HttpClientHandler).GetProperty(\"MaxConnectionsPerServer\") != null)\r\n{\r\n    // Available since .NET Framework 4.7.1\r\n    baseHandler.MaxConnectionsPerServer = 32;\r\n}\r\n```\r\n\r\nDoesn't work - GetProperty doesn't return null.\r\n\r\nHow am I expected to avoid this scenario?"},{"Id":"6984278457","Type":"PullRequestEvent","CreatedAt":"2017-12-13T17:48:29","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/603","RelatedDescription":"Merged pull request \"Remove obsolete attribute from XslTransform\" (#603) at dotnet/standard","RelatedBody":"This is part of https://github.com/dotnet/corefx/issues/25874. \r\n\r\nAfter the updated standard reaches CoreFX we can remove the attribute there too.\r\n\r\nThe same attribute is present in various platforms, should I remove it there too?\r\n```\r\nplatforms\\net461\\System.Xml.cs\r\nplatforms\\xamarin.android\\System.Xml.cs\r\nplatforms\\xamarin.ios\\System.Xml.cs\r\nplatforms\\xamarin.mac\\System.Xml.cs\r\nplatforms\\xamarin.tvos\\System.Xml.cs\r\nplatforms\\xamarin.watchos\\System.Xml.cs\r\n```"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6992187032","Type":"PullRequestEvent","CreatedAt":"2017-12-15T05:01:09","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25936","RelatedDescription":"Opened pull request \"Convert uses of the Dangerous APIs to use MemoryMarshal.GetReference\" (#25936) at dotnet/corefx","RelatedBody":"Part of:\r\nhttps://github.com/dotnet/corefx/issues/25412\r\nhttps://github.com/dotnet/corefx/issues/25615\r\n\r\nRelated to (and depends on): https://github.com/dotnet/coreclr/pull/15532\r\n\r\n**Note:** Expecting this failure for now until we have resolved whether we should add Unsafe.Add<T>(in T) or not.\r\n```text\r\nCannot use method 'MemoryMarshal.GetReference<char>(ReadOnlySpan<char>)' as a ref or out value because it is a readonly variable\r\n```\r\n\r\nFollowing the staging plan from here: https://github.com/dotnet/corefx/issues/23881#issuecomment-343767740\r\n\r\n- [x] Add MemoryExtensions.GetReference/TryGetArray\r\n- [ ] Convert all uses of DangerousGetPinnableReference/DangerousTryGetArray in coreclr, corefx, corert, corefxlab, aspnet, ... to MemoryExtensions.GetReference\r\n- [ ] Change DangerousGetPinnableReference to whatever we like to make it fit the pinning pattern and remove DangerousTryGetArray.\r\n\r\nDoing it this way will avoid the need for complex staging or things being on the floor for extensive periods of time.\r\n\r\ncc @jkotas, @stephentoub, @KrzysztofCwalina, @davidfowl, @pakrym \r\n"},{"Id":"6991854094","Type":"PullRequestEvent","CreatedAt":"2017-12-15T02:35:21","Actor":"peterhpchen","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/25935","RelatedDescription":"Opened pull request \"replace grabled character with white space\" (#25935) at dotnet/corefx","RelatedBody":"This is resolve issue #25917 "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6992246726","Type":"IssuesEvent","CreatedAt":"2017-12-15T05:29:50","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/21353","RelatedDescription":"Closed issue \"Shipped/unshipped tracking didn't catch default value change\" (#21353) at dotnet/roslyn","RelatedBody":"See this change: https://github.com/dotnet/roslyn/commit/8e6cfc0fbe71934a4e9a626ba88880bc93085bdc#diff-1bce888eb29ee49820578536c7d426e1R83\r\n\r\nRelates to these issues: https://github.com/dotnet/roslyn/issues/20873 https://github.com/dotnet/orleans/issues/3233\r\n\r\n@jasonmalinowski I'll stop by to discuss.\r\nFYI @jaredpar "},{"Id":"6992228043","Type":"IssuesEvent","CreatedAt":"2017-12-15T05:20:57","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/9345","RelatedDescription":"Closed issue \"Unify our CI builds between open and closed\" (#9345) at dotnet/roslyn","RelatedBody":"Open and closed have different entry points for build, which leads to changes occuring on one side, but not the other. \n\nOpen has CIBuild.cmd.\nClosed has BuildAndTest.cmd.\n\nWe should unify the entry points and builds, so when we are doing the same thing (such as building, it's exactly the same on both sides).\n"},{"Id":"6992219313","Type":"IssuesEvent","CreatedAt":"2017-12-15T05:16:42","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/19492","RelatedDescription":"Closed issue \"How is this built on Linux?\" (#19492) at dotnet/roslyn","RelatedBody":"The document for cross platform compilation mentions prebuilt tools, but doesn't give a link to them. So, how do I build this on Linux?"},{"Id":"6992192333","Type":"IssuesEvent","CreatedAt":"2017-12-15T05:03:44","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/10931","RelatedDescription":"Closed issue \"Add comment in dynamic analysis tests to improve clarity \" (#10931) at dotnet/roslyn","RelatedBody":"Currently the test output from dynamic analysis tests are something like this:\n\n```\n1\nTrue\n4\nTrue\nFalse\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n```\n\n@jcouv has suggested adding comments in the test input source to help a reader correlate the test input and output. (Simply commenting each executable line with the corresponding number in the output would help a lot.) \n"},{"Id":"6992156553","Type":"IssuesEvent","CreatedAt":"2017-12-15T04:46:23","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/20136","RelatedDescription":"Closed issue \"Feature request: allow anonymous types to be used as return types and generic arguments\" (#20136) at dotnet/roslyn","RelatedBody":"With C# 7, we can now use named tuples as method return types and generic arguments, which is great. However, these limitations are still imposed for anonymous types. \r\n\r\nI propose that we should allow for \"naming\" anonymous types in these contexts. For example:\r\n\r\n```\r\n// anonymous types are still internal; so they wouldn't\r\n// be able to appear in public signatures of public classes\r\ninternal { int A, string B } Foo()\r\n{\r\n    var list = new List<{ int A, string B }>();\r\n     // do stuff\r\n    return list.First();\r\n}\r\n```\r\n\r\nWhy should this be added when we can already do this via tuples? I see two main reasons:\r\n\r\n* Reflection-based APIs: because tuple property names aren't accessible via reflection, we can't do:\r\n```\r\nJsonConvert.DeserializeObject<(int A, string B)>(\"{ A: 2, B: 'a' }\");\r\n```\r\nThis is frustrating because this kind of syntax would be ideal for many cases (deserialization, mapping SQL queries back to ad-hoc objects). We have a workaround today of using type inference:\r\n```\r\nJsonConvert.DeserializeAnonymousType(\"{A: 2, B: 'a' }\", new { A = default(int), B = default(string) })\r\n```\r\nMy experience, however, has been that many developers find this confusing.\r\n\r\n* Consistency: anonymous types are very similar to tuples: being able to use them in similar ways seems like it rounds out a jagged edge in the language rather than bloating it with yet another thing to learn."},{"Id":"6992153840","Type":"IssuesEvent","CreatedAt":"2017-12-15T04:45:02","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22249","RelatedDescription":"Closed issue \"Instance/static method compile error\" (#22249) at dotnet/roslyn","RelatedBody":"**Steps to Reproduce**:\r\n\r\n```\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var instance = new Test();\r\n            string input = \"abc\";\r\n            instance.IsValid(input); // <- HERE\r\n        }\r\n    }\r\n\r\n    class Test\r\n    {\r\n        public static bool IsValid(string value)\r\n        {\r\n            return true;\r\n        }\r\n\r\n        public bool IsValid(object value)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n```\r\n\r\n**Expected Behavior**:\r\nShould compile, there is only one instance method and string is an object.\r\n\r\n**Actual Behavior**:\r\nDoes not compile: \r\n\r\n> Member 'ConsoleApplication.Test.IsValid(string)' cannot be accessed with an instance reference; qualify it with a type name instead\r\n"},{"Id":"6992135068","Type":"IssuesEvent","CreatedAt":"2017-12-15T04:35:50","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/18002","RelatedDescription":"Closed issue \"[Meta Discussion] Moving Language Design issues out of this repo\" (#18002) at dotnet/roslyn","RelatedBody":"We are now taking language feature discussion in other repositories:\r\n- https://github.com/dotnet/csharplang for C# specific issues\r\n- https://github.com/dotnet/vblang for VB-specific features\r\n- https://github.com/dotnet/csharplang for features that affect both languages\r\n\r\nFeatures that are under active design or development, or which are \"championed\" by someone on the language design team, have already been moved either as issues or as checked-in design documents. For example, the proposal in this repo [\"Proposal: Partial interface implementation a.k.a. Traits\"](https://github.com/dotnet/roslyn/issues/16139) (and a few other issues that request the same thing) are now tracked by the language team at https://github.com/dotnet/csharplang/issues/52, and there is a draft spec at https://github.com/dotnet/csharplang/blob/master/proposals/default-interface-methods.md and further discussion at https://github.com/dotnet/csharplang/issues/288 . Prototyping of the compiler portion of language features is still tracked here; see, for example, https://github.com/dotnet/roslyn/tree/features/DefaultInterfaceImplementation and https://github.com/dotnet/roslyn/issues/17952 .\r\n\r\nIn order to facilitate that transition, we have started closing the least recently active language design discussions from [the roslyn repo](https://github.com/dotnet/roslyn) with a note briefly explaining why. When we are aware of an existing discussion for the feature already in the new repo, we are adding a link to that. But we're not adding new issues to the new repos for existing discussions in this repo that the language design team does not currently envision taking on. Our intent is to eventually close the language design issues in the Roslyn repo and encourage discussion in one of the new repos instead.\r\n\r\nOur intent is not to shut down discussion on language design - you can still continue discussion on the closed issues if you want - but rather we would like to encourage people to move discussion to where we are more likely to be paying attention (the new repo), or to abandon discussions that are no longer of interest to you.\r\n\r\nIf you happen to notice that one of the closed issues has a relevant issue in the new repo, and we have not added a link to the new issue, we would appreciate you providing a link from the old to the new discussion. That way people who are still interested in the discussion can start paying attention to the new issue.\r\n\r\nAlso, we'd welcome any ideas you might have on how we could better manage the transition.\r\n"},{"Id":"6991840156","Type":"IssuesEvent","CreatedAt":"2017-12-15T02:29:59","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23798","RelatedDescription":"Opened issue \"Get no completion for property members if they appear before an await statement\" (#23798) at dotnet/roslyn","RelatedBody":"``` C#\r\nusing System;\r\nusing System.IO;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    private Stream _stream;\r\n\r\n    private async Task Method()\r\n    {\r\n        _stream.CanTimeout.$\r\n\r\n        await _stream.WriteAsync(null, 10, 10);\r\n\r\n    }\r\n}\r\n\r\n```\r\n\r\n1. CTRL+Space at $\r\n\r\nExpected: Completion window\r\nActual: Nothing\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6991907868","Type":"PullRequestEvent","CreatedAt":"2017-12-15T02:57:05","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5117","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5117) at dotnet/corert","RelatedBody":""},{"Id":"6991898418","Type":"PullRequestEvent","CreatedAt":"2017-12-15T02:53:20","Actor":"ahsonkhan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5118","RelatedDescription":"Opened pull request \" Convert uses of the Dangerous APIs to use MemoryMarshal.GetReference\" (#5118) at dotnet/corert","RelatedBody":"Part of:\r\nhttps://github.com/dotnet/corefx/issues/25412\r\nhttps://github.com/dotnet/corefx/issues/25615\r\n\r\nRelated to: https://github.com/dotnet/coreclr/pull/15532\r\n\r\nI am not making the changes to the shared section since they will get mirrored from the PR above.\r\n\r\nFollowing the staging plan from here: https://github.com/dotnet/corefx/issues/23881#issuecomment-343767740\r\n\r\n- [x] Add MemoryExtensions.GetReference/TryGetArray\r\n- [ ] Convert all uses of DangerousGetPinnableReference/DangerousTryGetArray in coreclr, corefx, corert, corefxlab, aspnet, ... to MemoryExtensions.GetReference\r\n- [ ] Change DangerousGetPinnableReference to whatever we like to make it fit the pinning pattern and remove DangerousTryGetArray.\r\n\r\nDoing it this way will avoid the need for complex staging or things being on the floor for extensive periods of time.\r\n\r\ncc @jkotas, @KrzysztofCwalina, @stephentoub \r\n"},{"Id":"6991624293","Type":"PullRequestEvent","CreatedAt":"2017-12-15T01:05:17","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5117","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5117) at dotnet/corert","RelatedBody":""},{"Id":"6991586410","Type":"PullRequestEvent","CreatedAt":"2017-12-15T00:51:09","Actor":"ahsonkhan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5116","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5116) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6991522086","Type":"PullRequestEvent","CreatedAt":"2017-12-15T00:26:16","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5116","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5116) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6991424236","Type":"PullRequestEvent","CreatedAt":"2017-12-14T23:51:01","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5115","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5115) at dotnet/corert","RelatedBody":""},{"Id":"6991423947","Type":"PullRequestEvent","CreatedAt":"2017-12-14T23:50:56","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5115","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5115) at dotnet/corert","RelatedBody":""},{"Id":"6991422469","Type":"PullRequestEvent","CreatedAt":"2017-12-14T23:50:28","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5114","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5114) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6991176011","Type":"PullRequestEvent","CreatedAt":"2017-12-14T22:35:56","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5114","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5114) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6990464348","Type":"PullRequestEvent","CreatedAt":"2017-12-14T19:45:38","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5106","RelatedDescription":"Closed pull request \"[WIP] ILCompiler Package Multi-Runtime Package Support\" (#5106) at dotnet/corert","RelatedBody":"As it stands we only produce a Windows ILCompiler package. This work implements building and publishing of OS-specific runtime packages and spins off ILCompiler as a meta-package, which can be referenced when adding to a project.\r\n\r\nWorking on this, a quirk in MSBuild behavior under .NET Core popped up - build artifacts (i.e. .targets and .props files) are imported for direct project package references, but not for runtime-specific packages, defined as dependencies in the meta-package. This doesn't seem to be the case in vanilla MSBuild.\r\n\r\nThe below is a serious hack to work around this - during runtime, we find the resolved runtime package reference and define the path to it on disk, from which all OS-specific components are loaded and run. The motivation behind the workaround was to keep the package as small as possible, particularly because of the large intersection of components between OS implementations. \r\n\r\nI don't think this is a particularly viable long-term solution, so feedback is welcomed.\r\n\r\n@jkotas @MichalStrehovsky @nattress "},{"Id":"6989953367","Type":"PullRequestEvent","CreatedAt":"2017-12-14T17:50:21","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5113","RelatedDescription":"Merged pull request \"[ILVerify] Implement backward branch verification\" (#5113) at dotnet/corert","RelatedBody":"This implements the verification of backward branches. According to ECMA backward branches require their target blocks to have an empty entry stack or a predecessor block with a lower IL-offset.\r\n\r\nIn the course of implementing this verification I also implemented the checks for CatchByRef and correct entry stack depth of exception regions.\r\n\r\nI also noticed the PEVerify implementation of `THIS_UNINIT_EXCEP`, but do not fully understand it:\r\nA comment above the relevant code says `// cannot enter a try with an uninitialized 'this'`, however the code then actually only performs a check for an initialized 'this' if the region is _not_ of type `RGN_TRY` or `RGN_FAULT`. I also couldn't find the definition of this rule in ECMA.\r\n(see: https://github.com/lewischeng-ms/sscli/blob/master/clr/src/jit64/newverify.cpp#L1580)"},{"Id":"6988948388","Type":"PullRequestEvent","CreatedAt":"2017-12-14T14:43:35","Actor":"ArztSamuel","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5113","RelatedDescription":"Opened pull request \"[ILVerify] Implement backward branch verification\" (#5113) at dotnet/corert","RelatedBody":"This implements the verification of backward branches. According to ECMA backward branches require their target blocks to have an empty entry stack or a predecessor block with a lower IL-offset.\r\n\r\nIn the course of implementing this verification I also implemented the checks for CatchByRef and correct entry stack depth of exception regions.\r\n\r\nI also noticed the PEVerify implementation of `THIS_UNINIT_EXCEP`, but do not fully understand it:\r\nA comment above the relevant code says `// cannot enter a try with an uninitialized 'this'`, however the code then actually only performs a check for an initialized 'this' if the region is _not_ of type `RGN_TRY` or `RGN_FAULT`. I also couldn't find the definition of this rule in ECMA.\r\n(see: https://github.com/lewischeng-ms/sscli/blob/master/clr/src/jit64/newverify.cpp#L1580)"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"6992199981","Type":"PullRequestEvent","CreatedAt":"2017-12-15T05:07:19","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1821","RelatedDescription":"Opened pull request \" Suppress assets messages for Clean target.\" (#1821) at dotnet/sdk","RelatedBody":"Suppress assets messages for Clean target.\r\n\r\nThis commit ensures that messages from `project.assets.json` aren't logged for\r\nthe `Clean` target.  If a project is cleaned that has diagnostic messages\r\nstored from a previous restore operation, the Clean target would previously\r\nlog the messages via the `ReportAssetsLogMessages` target.\r\n\r\nSince a clean operation does not perform a restore, this is confusing to users.\r\nThe fix is to set the `EmitAssetsLogMessages` property to `false` for the\r\n`Clean` target.\r\n\r\nFixes dotnet/cli#8027."},{"Id":"6991568421","Type":"PullRequestEvent","CreatedAt":"2017-12-15T00:44:06","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1807","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.6.0-preview2-4706 into sdk\" (#1807) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4706 into sdk master branch"},{"Id":"6991014302","Type":"PullRequestEvent","CreatedAt":"2017-12-14T21:54:54","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1820","RelatedDescription":"Opened pull request \"Fix dogfood script\" (#1820) at dotnet/sdk","RelatedBody":"There were two issues: \r\n\r\n1. The CustomAfterMicrosoftCommonTargets is no longer needed and causes duplicate import warning/errors.\r\n2. MicrosoftNETBuildExtensionsTargets was not being set to the correct file (it should not be the variant with -ver)."},{"Id":"6990915566","Type":"PullRequestEvent","CreatedAt":"2017-12-14T21:31:36","Actor":"joperezr","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1819","RelatedDescription":"Opened pull request \"Fixing the generation of binding redirects when targeting 4.7.1\" (#1819) at dotnet/sdk","RelatedBody":"cc: @livarcocc @weshaggard @AlexGhiondea\r\n\r\nInserting the new support package to the SDK that will fix the binding redirects for 4.7.1."},{"Id":"6990328796","Type":"PullRequestEvent","CreatedAt":"2017-12-14T19:15:46","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1818","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to release/2.1\" (#1818) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20171214-080045\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20171214-080045 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6988437962","Type":"IssuesEvent","CreatedAt":"2017-12-14T12:57:37","Actor":"luigiberrettini","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1555","RelatedDescription":"Closed issue \"AssemblyInfo generation results in less NuGet package info\" (#1555) at dotnet/sdk","RelatedBody":"With the help of [GenerateAssemblyInfo](https://github.com/dotnet/sdk/blob/979eed136b786b6e2d77f567eb5a368952982740/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.GenerateAssemblyInfo.targets) assembly information is generated starting from tags in the project file.\r\n\r\nUnfortunately, when using the `MsBuild pack` target, the generated NuGet package contains less information  with respect to the one created using `NuGet pack` and a `.nuspec` file:\r\n1. in the **Package metadata** section, `Summary` is not supported by the project file and missing\r\n2. in the **Package metadata** section, `Owners` is not supported by the project file and is set to the value of `Authors`\r\n3. in the **Package contents\\assembly information** section, only `Full Name` and `Strong Name` are present, whereas all `Assembly*` attributes are missing\r\n\r\nIt would be great if you could clarify if when creating NuGet packages with VS 2017+ and .NET core 2+:\r\n - `.nuspec` files are not to be used because they are going to be the deprecated way\r\n - `dotnet pack` or `msbuild /t:pack` should be used and the above (missing) information will be restored in future versions or will never be supported\r\n\r\nThanks!"},{"Id":"6987150708","Type":"PullRequestEvent","CreatedAt":"2017-12-14T08:00:46","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1818","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#1818) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20171214-080045\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20171214-080045 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6985966222","Type":"PullRequestEvent","CreatedAt":"2017-12-14T00:32:43","Actor":"eerhardt","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1805","RelatedDescription":"Merged pull request \"ResolvePackageFileConflicts performance enhancements\" (#1805) at dotnet/sdk","RelatedBody":"Speed up ResolvePackageFileConflicts by avoiding reading files for their AssemblyVersion.\r\nAllow for packages to override other packages by default.\r\n\r\nHere are my timings before and after my changes on my win-x64 machine. Each scenario was fully built, and then a single \"warm up\" command, followed by 3 captured executions of \r\n```\r\nC:\\temp\\dotnet\\dotnet\\dotnet.exe C:\\temp\\dotnet\\dotnet\\sdk\\2.2.0-preview1-007739\\MSBuild.dll /v:m /m /clp:PerformanceSummary\r\n```\r\n\r\n### Scenario 1 https://github.com/OrchardCMS/OrchardCore\r\n\r\n| Without changes | With changes |\r\n|--------------------|--------------------|\r\n| 2667 ms  ResolvePackageFileConflicts 129 calls | 609 ms  ResolvePackageFileConflicts 129 calls |\r\n| 2630 ms  ResolvePackageFileConflicts 129 calls | 585 ms  ResolvePackageFileConflicts 129 calls |\r\n| 2418 ms  ResolvePackageFileConflicts 129 calls | 598 ms  ResolvePackageFileConflicts 129 calls |\r\n\r\n### Scenario 2 https://github.com/mikeharder/dotnet-cli-perf/tree/8d7493b26fd3a1b3d1ba3fb85fc7e60b0c19618e/scenarios/classlib/core\r\n\r\n| Without changes | With changes |\r\n|--------------------|--------------------|\r\n| 45 ms  ResolvePackageFileConflicts 2 calls | 29 ms  ResolvePackageFileConflicts 2 calls |\r\n| 46 ms  ResolvePackageFileConflicts 2 calls | 29 ms  ResolvePackageFileConflicts 2 calls |\r\n| 45 ms  ResolvePackageFileConflicts 2 calls | 31 ms  ResolvePackageFileConflicts 2 calls |\r\n\r\n### Scenario 3 https://github.com/mikeharder/dotnet-cli-perf/tree/8d7493b26fd3a1b3d1ba3fb85fc7e60b0c19618e/scenarios/web/core\r\n\r\n| Without changes | With changes |\r\n|--------------------|--------------------|\r\n| 78 ms  ResolvePackageFileConflicts 1 calls | 21 ms  ResolvePackageFileConflicts 1 calls |\r\n| 74 ms  ResolvePackageFileConflicts 1 calls | 21 ms  ResolvePackageFileConflicts 1 calls |\r\n| 56 ms  ResolvePackageFileConflicts 1 calls | 21 ms  ResolvePackageFileConflicts 1 calls |"},{"Id":"6985945997","Type":"PullRequestEvent","CreatedAt":"2017-12-14T00:26:01","Actor":"tannergooding","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1817","RelatedDescription":"Merged pull request \"Update RepoToolset to 1.0.0-beta-2413-01\" (#1817) at dotnet/sdk","RelatedBody":"FYI. @tmat, @livarcocc \r\n\r\nThis fixes an issue with symbol publishing."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"941295101212549121","CreatedAt":"2017-12-14T13:13:35+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz at 10am ET for a LIVE CODING session.  He'll answer your questions about .NET, Visual Studio, a… https://t.co/qJHWFDaUGf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":13,"RawContent":null},{"Id":"935927507911524352","CreatedAt":"2017-11-29T17:44:41+00:00","UserScreenname":"dotnet","Text":"Who doesn’t? Purple. All. The. Things. https://t.co/65KzPWuvbK","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":30,"FavoriteCount":4,"RawContent":null},{"Id":"933058673206730752","CreatedAt":"2017-11-21T19:44:57+00:00","UserScreenname":"dotnet","Text":".NET Core Alpine Image Ready for Testing https://t.co/SsQtOGuAFD","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":213,"FavoriteCount":155,"RawContent":null}]}},"RunOn":"2017-12-15T05:30:25.1654336Z","RunDurationInMilliseconds":8194}