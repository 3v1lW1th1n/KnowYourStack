{"Data":{"GitHub":{"Issues":[{"Id":"519420715","IsPullRequest":true,"CreatedAt":"2019-11-14T05:24:15","Actor":"harishsk","Number":"4454","RawContent":null,"Title":"Added onnx export support for OptionalColumnTransform ","State":"closed","Body":"Optional columns in ML.NET are supported through initializers in Onnx runtime, support for which was added in the v1 release of ORT. This PR adds support for integrating initializers in ML.NET and adding the corresponding OptionalColumnTransform support in ML.NET.","Url":"https://github.com/dotnet/machinelearning/pull/4454","RelatedDescription":"Closed or merged PR \"Added onnx export support for OptionalColumnTransform \" (#4454)"},{"Id":"521828372","IsPullRequest":true,"CreatedAt":"2019-11-14T03:17:14","Actor":"harishsk","Number":"4472","RawContent":null,"Title":"Fixed model saving and loading of OneVersusAllTrainer to include SoftMax","State":"closed","Body":"When the model parameters from OnVersusAllTrainer are persisted, it currently writes a single bool byte to indicate what type of output formula to use during prediction. If that byte is false, it outputs raw values else it outputs probability values normalized to one. \r\nThe sample code in this bug uses AutoML to request a softmax output. The code currently only checks whether the output type is ImplDist which excludes softmax output.\r\n\r\nThis PR changes the saved model format in a backward compatible way by continuing to write a single byte for output type and continues to use 0 for raw output, 1 for probability normalization but also adds 2 to indicate SoftMax. These values are already in alignment with the OutputFormula enum.\r\n\r\nFixes #4450 \r\nFixes #3647\r\nFixes #4051 ","Url":"https://github.com/dotnet/machinelearning/pull/4472","RelatedDescription":"Closed or merged PR \"Fixed model saving and loading of OneVersusAllTrainer to include SoftMax\" (#4472)"},{"Id":"518978102","IsPullRequest":false,"CreatedAt":"2019-11-14T03:17:13","Actor":"LittleLittleCloud","Number":"4450","RawContent":null,"Title":"LightGBMMulticlass doesn't normalize its Score column","State":"closed","Body":"when I try AutoML v0.16.0 multi-classification, sometimes I get prediction score <0, and the summation of all scores doesn't equal to 1. which is unexpected. Maybe some trainer's output doesn't normalize.\r\n\r\n![image](https://user-images.githubusercontent.com/16876986/68351051-2a7be800-00b7-11ea-97fc-2622dcc659e3.png)\r\n\r\nI publish a mini-reproducible project in this [repo](https://github.com/LittleLittleCloud/AutoMLMultiClassificationBug) for facilitating debug.","Url":"https://github.com/dotnet/machinelearning/issues/4450","RelatedDescription":"Closed issue \"LightGBMMulticlass doesn't normalize its Score column\" (#4450)"},{"Id":"522576606","IsPullRequest":true,"CreatedAt":"2019-11-14T01:59:14","Actor":"frank-dong-ms","Number":"4477","RawContent":null,"Title":"Only for test: open system diagnotise log","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4477","RelatedDescription":"Open PR \"Only for test: open system diagnotise log\" (#4477)"},{"Id":"522239295","IsPullRequest":true,"CreatedAt":"2019-11-14T01:26:49","Actor":"JakeRadMSFT","Number":"4474","RawContent":null,"Title":"Add Model Builder's GPU version of the AutoMLService to the InternalsVisibleTo.","State":"closed","Body":"Add Model Builder's GPU version of the AutoMLService to the InternalsVisibleTo. This allows Model Builder to run AutoML and call into CodeGen.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4474","RelatedDescription":"Closed or merged PR \"Add Model Builder's GPU version of the AutoMLService to the InternalsVisibleTo.\" (#4474)"},{"Id":"521036891","IsPullRequest":true,"CreatedAt":"2019-11-13T22:09:06","Actor":"eerhardt","Number":"4465","RawContent":null,"Title":"CpuMathNative assembly is not getting copied when using packages.config.","State":"closed","Body":"When we refactored CpuMath to support netcoreapp3.0, we broke the packages.config support to copy the native assembly. This fixes it again by copying the file from the correct location.\r\n\r\nFix #93\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4465","RelatedDescription":"Closed or merged PR \"CpuMathNative assembly is not getting copied when using packages.config.\" (#4465)"},{"Id":"518988708","IsPullRequest":true,"CreatedAt":"2019-11-13T21:58:08","Actor":"harishsk","Number":"4451","RawContent":null,"Title":"Added onnx export support for WordTokenizingTransformer and NgramExtractingTransformer","State":"closed","Body":"PR contents:\r\n* Onnx export support for for WordTokenizingTransformer and NgramExtractingTransformer\r\n* Related bug fixes in ValueToKeyMappingTransformer\r\n* Bug fixes for string handling in OnnxUtils.cs\r\n* Related unit tests\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4451","RelatedDescription":"Closed or merged PR \"Added onnx export support for WordTokenizingTransformer and NgramExtractingTransformer\" (#4451)"},{"Id":"522492190","IsPullRequest":true,"CreatedAt":"2019-11-13T21:48:32","Actor":"ashbhandare","Number":"4476","RawContent":null,"Title":"Add Entrypoint for ImageClassification Trainer.","State":"open","Body":"This change adds a NimbusML entrypoint to the ImageClassification Trainer. It modifies the ImageLoader transform to add an option to load in-memory images. This change also adds a unit test to test the entrypoint.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4476","RelatedDescription":"Open PR \"Add Entrypoint for ImageClassification Trainer.\" (#4476)"},{"Id":"521055619","IsPullRequest":false,"CreatedAt":"2019-11-13T20:29:42","Actor":"bhrnjica","Number":"4466","RawContent":null,"Title":"Unhandled Exception Value cannot be null. (Parameter 'libraryPath')","State":"closed","Body":"### System information\r\n\r\n\r\n- **OS version/distro**:Windows 10\r\n- **.NET Version (eg., dotnet --info)**: 3.0.1 and 2.1.8 \r\n- **.NET Try Version**: Tool 'dotnet-try' (version '1.0.19553.4') and (version '1.0.19558.9')\r\n### Issue\r\nWhen I run training with LightGBM within Visual Studio evrything is ok. \r\nHowever, if I run the same code in .NET Juypter Notebook with version (`(version '1.0.19553.4')` or `(version '1.0.19558.9')`) got the following exception: \r\n```\r\nUnhandled Exception Value cannot be null. (Parameter 'libraryPath')\r\n```\r\n\r\n- **What did you do?** \r\nTried to execute the following code:\r\n```csharp\r\n// Define LightGbm algorithm estimator\r\nIEstimator<ITransformer> lightGbm = mlContext.MulticlassClassification.Trainers.LightGbm();\r\n//train the ML model\r\nTransformerChain<ITransformer> model = dataPipeline.Append(lightGbm).Fit(trainData);\r\n```\r\n\r\n- **What happened?**\r\nThe exception is thrown.\r\n- **What did you expect?**\r\nNormal execution without Exception.\r\n### Source code / logs\r\n```Unhandled Exception\r\nValue cannot be null. (Parameter 'libraryPath')\r\n   at System.Runtime.InteropServices.NativeLibrary.Load(String libraryPath)\r\n   at MLS.Agent.NativeAssemblyLoadHelper.Resolve(String libraryName, Assembly assembly, Nullable`1 searchPath) in F:\\workspace\\_work\\1\\s\\MLS.Agent\\NativeAssemblyLoadHelper.cs:line 47\r\n   at System.Runtime.InteropServices.NativeLibrary.LoadLibraryCallbackStub(String libraryName, Assembly assembly, Boolean hasDllImportSearchPathFlags, UInt32 dllImportSearchPathFlags)\r\n   at Microsoft.ML.Trainers.LightGbm.WrappedLightGbmInterface.DatasetCreateFromSampledColumn(IntPtr sampleValuePerColumn, IntPtr sampleIndicesPerColumn, Int32 numCol, Int32[] sampleNonZeroCntPerColumn, Int32 numSampleRow, Int32 numTotalRow, String parameters, IntPtr& ret)\r\n   at Microsoft.ML.Trainers.LightGbm.Dataset..ctor(Double[][] sampleValuePerColumn, Int32[][] sampleIndicesPerColumn, Int32 numCol, Int32[] sampleNonZeroCntPerColumn, Int32 numSampleRow, Int32 numTotalRow, String param, Single[] labels, Single[] weights, Int32[] groups)\r\n   at Microsoft.ML.Trainers.LightGbm.LightGbmTrainerBase`4.CreateDatasetFromSamplingData(IChannel ch, Factory factory, Int32 numRow, String param, Single[] labels, Single[] weights, Int32[] groups, CategoricalMetaData catMetaData, Dataset& dataset)\r\n   at Microsoft.ML.Trainers.LightGbm.LightGbmTrainerBase`4.LoadTrainingData(IChannel ch, RoleMappedData trainData, CategoricalMetaData& catMetaData)\r\n   at Microsoft.ML.Trainers.LightGbm.LightGbmTrainerBase`4.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.Fit(IDataView input)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at Submission#17.<<Initialize>>d__0.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.CodeAnalysis.Scripting.ScriptExecutionState.RunSubmissionsAsync[TResult](ImmutableArray`1 precedingExecutors, Func`2 currentExecutor, StrongBox`1 exceptionHolderOpt, Func`2 catchExceptionOpt, CancellationToken cancellationToken)\r\n\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4466","RelatedDescription":"Closed issue \"Unhandled Exception Value cannot be null. (Parameter 'libraryPath')\" (#4466)"},{"Id":"522426246","IsPullRequest":true,"CreatedAt":"2019-11-13T19:32:24","Actor":"bpstark","Number":"4475","RawContent":null,"Title":"Change the dataset used for unit test to fix issue on Linux","State":"open","Body":"There is an issue with how some of the images were saved in the dataset\r\nsuch that they were not being read properly on linux. As such accuracy\r\nwas dramatically reduced given the small size of the dataset to begin\r\nwith. Have corrected the images and made a new dataset such that this\r\nissue should now be resolved.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4475","RelatedDescription":"Open PR \"Change the dataset used for unit test to fix issue on Linux\" (#4475)"},{"Id":"520180711","IsPullRequest":false,"CreatedAt":"2019-11-13T17:24:21","Actor":"LittleLittleCloud","Number":"4460","RawContent":null,"Title":"[AutoML v0.16.0] InferColumn doesn't work on tricky csv file","State":"closed","Body":"For some csv file that contains double quotes in it's field, the `inferColumn` API can't work properly. It's probably because when guessing delimiter, AutoML takes the candidates inside double quote into consideration, which should be neglect. (Or when splitting lines, it uses \\n inside double quote)\r\n\r\nsteps to reproduce:\r\ndownload this [dataset](http://data.insideairbnb.com/the-netherlands/north-holland/amsterdam/2019-09-14/visualisations/listings.csv)\r\n\r\n```\r\nMLContext mlContext = new MLContext();\r\nvar inputColumnInformation = new ColumnInformation();\r\ninputColumnInformation.LabelColumnName = @\"review_scores_rating\";\r\nvar train = mlContext.Auto().InferColumns(TrainDataPath, inputColumnInformation);\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4460","RelatedDescription":"Closed issue \"[AutoML v0.16.0] InferColumn doesn't work on tricky csv file\" (#4460)"},{"Id":"521768164","IsPullRequest":false,"CreatedAt":"2019-11-13T17:18:03","Actor":"leidadpig","Number":"4471","RawContent":null,"Title":"Is the TPE algo available in ML.NET?","State":"closed","Body":"Is the TPE algo available in ML.NET? Or is there any library available which implement TPE algo in C# to tune hyper params? Thanks!","Url":"https://github.com/dotnet/machinelearning/issues/4471","RelatedDescription":"Closed issue \"Is the TPE algo available in ML.NET?\" (#4471)"},{"Id":"522029773","IsPullRequest":false,"CreatedAt":"2019-11-13T08:12:32","Actor":"hahsm","Number":"4473","RawContent":null,"Title":"Issue with Label Column (Prediction Label)  - ML 1.4","State":"open","Body":"Hi. When I try to train a dataset that consists a unique sequential number column as the Label (Predicted Label) column, the train model fails. But when I change the Label Column to non-unique column, the model train succeeds. Why is this happening. I am using AutoML feature of ML.Net to train the Model.\r\n\r\nThank you","Url":"https://github.com/dotnet/machinelearning/issues/4473","RelatedDescription":"Open issue \"Issue with Label Column (Prediction Label)  - ML 1.4\" (#4473)"},{"Id":"521684409","IsPullRequest":false,"CreatedAt":"2019-11-12T17:16:49","Actor":"T3rr0rByte13","Number":"4470","RawContent":null,"Title":"ML.Net Type Load Exception","State":"closed","Body":"### System information\r\n-Windows 10 1903\r\n-.Net Framework 4.7.x\r\n-Microsoft.ML v1.4.0\r\n-Microsoft.ML.DNN v0.16.0 - preview 2\r\n\r\n### Issue\r\nI was using the code found in this video: https://www.youtube.com/watch?v=bXTN-rnwDso to get a test project up and running and ran into this error:\r\n\r\nSystem.TypeLoadException: 'Method 'MakeRowMapper' on type 'Microsoft.ML.Transforms.ImageClassificationTransformer' from assembly 'Microsoft.ML.DNN, version 1.0.0.0, culture=neutral, Public Key Token=cc7b13ffcd2ddd51' is overriding a method that is not visible from that assembly.\r\n\r\nThis occurs when using either a forms application or a console application, I have tried removing and re-adding the various NuGet packages and different verisons to try and get around this issue. It occurs on startup of the application.\r\n\r\n### Source code / logs\r\n\r\nclass Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var imagesFolder = Path.Combine(Environment.CurrentDirectory, \"..\", \"..\", \"..\", \"..\", \"images\");\r\n            var file = Directory.GetFiles(imagesFolder, \"*\", SearchOption.AllDirectories);\r\n            var images = file.Select(f => new ImageData\r\n            {\r\n                ImagePath = f,\r\n                Label = Directory.GetParent(f).Name\r\n            });\r\n\r\n            var context = new MLContext();\r\n\r\n            var imageData = context.Data.LoadFromEnumerable(images);\r\n            var imageDataShuffle = context.Data.ShuffleRows(imageData);\r\n            var testTrainData = context.Data.TrainTestSplit(imageDataShuffle, testFraction: 0.2);\r\n            var validateData = context.Transforms.Conversion.MapValueToKey(\"LabelKey\", \"Label\", keyOrdinality: Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByValue).Fit(testTrainData.TestSet).Transform(testTrainData.TestSet);\r\n            var pipeline = context.Transforms.Conversion.MapValueToKey(\"LabelKey\", \"Label\", keyOrdinality: Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByValue).Append(context.Model.ImageClassification(\"ImagePath\", \"LabelKey\", arch: Microsoft.ML.Transforms.ImageClassificationEstimator.Architecture.ResnetV2101, epoch: 100, metricsCallback: Console.WriteLine, batchSize: 10, validationSet: validateData));\r\n            var model = pipeline.Fit(testTrainData.TestSet);\r\n            var predictions = model.Transform(testTrainData.TestSet);\r\n            var metrics = context.MulticlassClassification.Evaluate(predictions, labelColumnName: \"LabelKey\", predictedLabelColumnName: \"PredictedLabel\");\r\n\r\n            Console.WriteLine($\"Log Loss - {metrics.LogLoss}\");\r\n\r\n            var predictionEngine = context.Model.CreatePredictionEngine<ImageData, Image_Prediction>(model);\r\n            var testImagesFolder = Path.Combine(Environment.CurrentDirectory, \"..\", \"..\", \"..\", \"test\");\r\n            var testFiles = Directory.GetFiles(testImagesFolder, \"*\", SearchOption.AllDirectories);\r\n            var testImages = testFiles.Select(f => new ImageData\r\n            {\r\n                ImagePath = f\r\n            });\r\n            VBuffer<ReadOnlyMemory<char>> keys = default;\r\n            predictionEngine.OutputSchema[\"LabelKey\"].GetKeyValues(ref keys);\r\n            var originalLabels = keys.DenseValues().ToArray();\r\n            foreach (var image in testImages)\r\n            {\r\n                var prediction = predictionEngine.Predict(image);\r\n                var labelIndex = prediction.PredictedLabel;\r\n                Console.WriteLine($\"Image: {Path.GetFileName(image.ImagePath)}, Score: {prediction.score.Max()}\" + $\"$Predicted Label: {originalLabels[labelIndex]}\");\r\n                Console.ReadLine();\r\n            }\r\n        }\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4470","RelatedDescription":"Closed issue \"ML.Net Type Load Exception\" (#4470)"},{"Id":"521641647","IsPullRequest":false,"CreatedAt":"2019-11-12T16:01:50","Actor":"apilatau","Number":"4469","RawContent":null,"Title":"problems with retraining model","State":"open","Body":"### System information\r\n\r\n- **Windows10**:\r\n- **Microsoft.NetCore.App(2.1.0)/Microsoft.ML(1.4.0)**: \r\n\r\n### Issue \r\nit is observed\r\n**System.ArgumentOutOfRangeException:** '_Features column 'Feature' not found by_  <mlContext.Model.CreatePredictionEngine> _call after retraining the model_\r\n \r\n- **What did you do?**\r\nWe need to retrain a model with small increment of data in comparison with previously retrained dataset based on the example project **TaxiFarePrediction** https://github.com/dotnet/machinelearning-samples based on the steps, described in on the page https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/retrain-model-ml-net\r\nWe have undertaken the following steps to retrain the model with small increment (10 rows addition, as example) of data:\r\n1) rewrite the function `BuildTrainEvaluateAndSaveModel` in order to save datapreparation pipeline and trained model\r\n` var dataPrepTransformer = trainingPipeline.Fit(trainingDataView);\r\nIDataView predictions = dataPrepTransformer.Transform(testDataView);\r\nvar sdcaEstimator = mlContext.Regression.Trainers.Sdca();\r\nRegressionPredictionTransformer<LinearRegressionModelParameters> trainedModel = sdcaEstimator.Fit(predictions);\r\nmlContext.Model.Save(dataPrepTransformer, trainingDataView.Schema, Data_PreparationModelPath);\r\n mlContext.Model.Save(trainedModel, predictions.Schema, ModelPath);\r\n`\r\n2) load pretrained model \r\n`var dataPrevPipeline = mlContext.Model.Load(Data_PreparationModelPath, out var dataPrepPipelineSchema);\r\nITransformer trainedModel = mlContext.Model.Load(ModelPath, out modelSchema);`\r\n\r\n3) Extract pretrained model parameters\r\n` LinearRegressionModelParameters originalModelParameters =\r\n                ((ISingleFeaturePredictionTransformer<object>)trainedModel).Model as LinearRegressionModelParameters;`\r\n4) and finally, retrain model just only with small obfuscated data. It doesn't matter what, but it matter the amount in comparison with the whole previous dataset \r\n```\r\nTaxiTrip[] newTaxiTripsData = new TaxiTrip[10];\r\n for (var i = 0; i < 10; i++)\r\n {\r\n      newTaxiTripsData[i] = new TaxiTrip()\r\n      {\r\n                    VendorId = \"VTS\",\r\n                    RateCode = \"1\",\r\n                    PassengerCount = 1,\r\n                    TripTime = 1140,\r\n                    TripDistance = 3.75f,\r\n                    PaymentType = \"CRD\",\r\n                    FareAmount = 0 // To predict. Actual/Observed = 15.5\r\n                };\r\n        }\r\n\r\nIDataView newData = mlContext.Data.LoadFromEnumerable<TaxiTrip>(newTaxiTripsData);            \r\n // Preprocess Data\r\n IDataView transformedNewData = dataPrevPipeline.Transform(newData);\r\n // Retrain model\r\n RegressionPredictionTransformer<LinearRegressionModelParameters> retrainedModel =\r\n mlContext.Regression.Trainers.OnlineGradientDescent(\"Label\", featureColumnName: \"Features\")\r\n                .Fit(transformedNewData, originalModelParameters);\r\nmlContext.Model.Save(retrainedModel, modelSchema, ModelPathAfterRetrain);\r\n```\r\n\r\n- **What happened?**\r\nWhen we had a go at testing a single prediction, the call of creating prediction engine \r\n\r\n```\r\nITransformer trainedModel = mlContext.Model.Load(ModelPathAfterRetrain, out modelSchema);\r\n\r\nvar predEngine = mlContext.Model.CreatePredictionEngine<TaxiTrip, TaxiTripFarePrediction>(trainedModel); \r\n```\r\n<---_this call_\r\n\r\nthrows a _System.ArgumentOutOfRangeException_ - Features column 'Feature' not found by_  <mlContext.Model.CreatePredictionEngine>\r\n\r\nCould you ask what wrong I did with the retraining?\r\nThankful in advance,\r\nAlex\r\n\r\n- **guessworks**\r\n1) I have a feeling that something wrong with my trained model files  `model_after_retrain.zip` and the same `model.zip` which was saved after datapreparation pipeline and has significant smaller size `data_preparation_pipeline.zip`\r\nhttps://github.com/apilatau/retraining-example/tree/master/TaxiFarePrediction/MLModels\r\n2) Maybe, increment / ingection of small amount of data in previously trained  model is impossible at all and we have to retain the model every time from scratch with sufficient data set ( I have investigated the count is about thousands rows, but not 10 \r\n\r\n### Source code / logs\r\nhttps://github.com/apilatau/retraining-example/blob/master/TaxiFarePrediction/TaxiFarePredictionConsoleApp/Program.cs\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4469","RelatedDescription":"Open issue \"problems with retraining model\" (#4469)"},{"Id":"519536274","IsPullRequest":true,"CreatedAt":"2019-11-11T21:25:07","Actor":"ashbhandare","Number":"4456","RawContent":null,"Title":"Reduce time taken for first prediction, Fixes #4428","State":"closed","Body":"Fixes #4428 \r\nAs reported in the issue, the first prediction takes a lot longer than the subsequent predictions.\r\nThis is due to the tensorflow initialization/graph optimizations happenning on at the time of the first prediction. \r\nIn order to mask the time within the PredictionEngine creation, this change runs the prediction \r\n on the tensorflow graph with a dummy tensor of the same size as an Imagenet image, of zeros. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/4456","RelatedDescription":"Closed or merged PR \"Reduce time taken for first prediction, Fixes #4428\" (#4456)"},{"Id":"521132417","IsPullRequest":false,"CreatedAt":"2019-11-11T19:04:08","Actor":"vnarula","Number":"4468","RawContent":null,"Title":"FeatureContribution transformation currently returns vector of all feature and their contribution while calling PredictionEngine.Predict method ","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nFeatureContribution transformation currently returns vector of all feature and their contribution while calling PredictionEngine.Predict method\r\n\r\n- **What happened?**\r\nReturned vector of 8 million feature which degraded the overall service of prediction service\r\n- **What did you expect?**\r\nit should only return the feature contribution of feature top x or bottom y which were requested instead of returning contribution of all features.\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4468","RelatedDescription":"Open issue \"FeatureContribution transformation currently returns vector of all feature and their contribution while calling PredictionEngine.Predict method \" (#4468)"},{"Id":"521105913","IsPullRequest":false,"CreatedAt":"2019-11-11T18:02:28","Actor":"natke","Number":"4467","RawContent":null,"Title":"Resolve warnings in API docs generation","State":"open","Body":"Warnings listed here: https://opbuildstorageprod.blob.core.windows.net/report/2019%5C11%5C7%5C1a61acc2-fbc9-ceaf-75d3-cfca51e72d2c%5CCommit%5C201911071723275565-live%5Cworkflow_report.html?sv=2016-05-31&sr=b&sig=yltSQyLDqTJjXnrIiDqcLmJiQHS0zWN6WOn4PhKff%2FA%3D&st=2019-11-11T17%3A56%3A55Z&se=2019-12-12T18%3A01%3A55Z&sp=r","Url":"https://github.com/dotnet/machinelearning/issues/4467","RelatedDescription":"Open issue \"Resolve warnings in API docs generation\" (#4467)"},{"Id":"520331757","IsPullRequest":false,"CreatedAt":"2019-11-09T04:32:42","Actor":"dmoise2","Number":"4464","RawContent":null,"Title":"Error in ML.net training","State":"open","Body":"### System information\r\n- **Windows 10 Home**:\r\n- **.NET Core 2.1.802**: \r\n### Issue\r\n- **First time running ML.NET. Set the Database & started Training.\r\n- **What happened? – training stopped “Failed – See more in Output Pane.”\r\n- **What did you expect? – Training to Complete\r\n\r\n### Source code / logs\r\n|     Trainer                              MicroAccuracy  MacroAccuracy  Duration #Iteration                     |\r\nSchema mismatch for score column 'Score': expected vector of two or more items of type Single, got Vector<Single, 1>\r\nParameter name: schema\r\nMust be at least 2.\r\nParameter name: numClasses\r\nSchema mismatch for score column 'Score': expected vector of two or more items of type Single, got Vector<Single, 1>\r\nParameter name: schema\r\nTraining failed with the exception: System.ArgumentOutOfRangeException: Schema mismatch for score column 'Score': expected vector of two or more items of type Single, got Vector<Single, 1>\r\nParameter name: schema\r\n   at Microsoft.ML.Data.MulticlassClassificationEvaluator.CheckScoreAndLabelTypes(RoleMappedSchema schema)\r\n   at Microsoft.ML.Data.EvaluatorBase`1.CheckColumnTypes(RoleMappedSchema schema)\r\n   at Microsoft.ML.Data.EvaluatorBase`1.Microsoft.ML.Data.IEvaluator.Evaluate(RoleMappedData data)\r\n   at Microsoft.ML.Data.MulticlassClassificationEvaluator.Evaluate(IDataView data, String label, String score, String predictedLabel)\r\n   at Microsoft.ML.AutoML.MultiMetricsAgent.EvaluateMetrics(IDataView data, String labelColumn)\r\n   at Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, AutoMLLogger logger)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4464","RelatedDescription":"Open issue \"Error in ML.net training\" (#4464)"},{"Id":"520290269","IsPullRequest":true,"CreatedAt":"2019-11-09T00:02:38","Actor":"Lynx1820","Number":"4463","RawContent":null,"Title":"Fixes onnx exports for binary classification trainers","State":"open","Body":"This PR fixes the issues with exporting the following binary classification trainers to onnx:\r\n\r\n- SymbolicSgdLogisticRegression(),\r\n- SgdCalibrated(),\r\n- AveragedPerceptron(),\r\n- FastForest(),\r\n- LinearSvm(),\r\n- SdcaNonCalibrated(),\r\n- SgdNonCalibrated(),\r\n- FastTree(),\r\n- LbfgsLogisticRegression(),\r\n- Trainers.LightGbm(),\r\n- SdcaLogisticRegression(),\r\n- SgdCalibrated(),\r\n- SymbolicSgdLogisticRegression()\r\n\r\nNote: I couldn't create consistent regression models, even when seeding, so I didn't include baseline comparison on these tests. \r\n\r\nUpdate: Baseline files have changed. Waiting for @harishsk's PRs to go through before submitting my changes. ","Url":"https://github.com/dotnet/machinelearning/pull/4463","RelatedDescription":"Open PR \"Fixes onnx exports for binary classification trainers\" (#4463)"},{"Id":"520284210","IsPullRequest":true,"CreatedAt":"2019-11-08T23:35:54","Actor":"harishsk","Number":"4462","RawContent":null,"Title":"Added onnx export support for several multiclass classifiers","State":"open","Body":"This PR adds Onnx export support + tests for the following multiclass classifiers:\r\n* LbfgsMaximumEntropyMulticlassTrainer\r\n* LightGbmMulticlassTrainer\r\n* LightGbmMulticlassTrainer with SoftMax\r\n* OneVersusAllTrainer\r\n* SdcaMaximumEntropyMulticlassTrainer\r\n* SdcaNonCalibratedMulticlassTrainer\r\n\r\nThere is a question marked with a REVIEW comment in the PR below. Please comment if you know of a better way to do what is done there. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4462","RelatedDescription":"Open PR \"Added onnx export support for several multiclass classifiers\" (#4462)"},{"Id":"520252317","IsPullRequest":false,"CreatedAt":"2019-11-08T22:32:15","Actor":"edirgarcia","Number":"4461","RawContent":null,"Title":"ApplyOnnxModel Transform does not find method after upgrading to ONNXRuntime 1.0.0","State":"closed","Body":"System information:\r\n- .NET Version\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100\\\r\n\r\nIssue:\r\nApplyOnnxModel Transform in 1.4.0 does not find a method after updating OnnxRuntime to 1.0.0\r\n\r\nIt throws:\r\nMethod not found: 'Microsoft.ML.OnnxRuntime.SessionOptions Microsoft.ML.OnnxRuntime.SessionOptions.MakeSessionOptionWithCudaProvider(Int32)'.\r\n\r\nLooking at the library on iLSpy it seems that method is actually gone, but ML.NET still asumes is there. It does work when using OnnxRuntime 0.5.1\r\n\r\nStack Trace:\r\n   at Microsoft.ML.Transforms.Onnx.OnnxModel..ctor(String modelFile, Nullable`1 gpuDeviceId, Boolean fallbackToCpu, Boolean ownModelFile, IDictionary`2 shapeDictionary)\r\n   at Microsoft.ML.Transforms.Onnx.OnnxTransformer..ctor(IHostEnvironment env, Options options, Byte[] modelBytes) 220\r\n   at Microsoft.ML.Transforms.Onnx.OnnxTransformer..ctor(IHostEnvironment env, String[] outputColumnNames, String[] inputColumnNames, String modelFile, Nullable`1 gpuDeviceId, Boolean fallbackToCpu, IDictionary`2 shapeDictionary)\r\n   at Microsoft.ML.OnnxCatalog.ApplyOnnxModel(TransformsCatalog catalog, String outputColumnName, String inputColumnName, String modelFile, Nullable`1 gpuDeviceId, Boolean fallbackToCpu)\r\n   at ***.***.***.TestModelTrainer.Load_Keras_Onnx_Mnist(String modelPath) in D:\\Source\\***\\MyProjectPath\\***\\TestModelTrainer.cs:line 756\r\n   at Microsoft.PS.Prediction.UnitTests.ML.NET.Tests.MLNetTests.Load_Test_Keras_Onnx_Mnist() in D:\\Source\\***\\MyProjectPath\\***\\ML.NET.Tests.cs:line 165\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4461","RelatedDescription":"Closed issue \"ApplyOnnxModel Transform does not find method after upgrading to ONNXRuntime 1.0.0\" (#4461)"},{"Id":"519594624","IsPullRequest":false,"CreatedAt":"2019-11-08T21:51:18","Actor":"benquan","Number":"4459","RawContent":null,"Title":"pipeline fails to load when I convert my project to a class","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nWIN10\r\n\r\n- **.NET Version (eg., dotnet --info)**: \r\nML.NET 1.4.0\r\nFramework 4.7.2\r\n\r\n### Issue\r\nI have a full working console application using the framework. All access to ML.NET is in a separate class and I simply call on it. When I try to convert the project to a class DLL it starts showing: \"System.IO.FileNotFoundException: Could not load file or assembly 'System.Drawing.Common\".\r\n\r\n- **What did you do?**\r\nTry to convert to class DLL\r\n\r\n\r\n- **What happened?**\r\n\"System.IO.FileNotFoundException: Could not load file or assembly 'System.Drawing.Common\". Error\r\n\r\n- **What did you expect?**\r\nshould work as the normal program.\r\n\r\n\r\n### Source code / logs\r\n\r\n`\r\nSystem.IO.FileNotFoundException: Could not load file or assembly 'System.Drawing.Common, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\nFile name: 'System.Drawing.Common, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n   at Microsoft.ML.Transforms.Image.ImageDataViewType..ctor(Int32 height, Int32 width)\r\n   at Microsoft.ML.Transforms.Image.ImageResizingEstimator.ColumnOptions..ctor(String name, Int32 imageWidth, Int32 imageHeight, String inputColumnName, ResizingKind resizing, Anchor anchor)\r\n   at Microsoft.ML.ImageEstimatorsCatalog.ResizeImages(TransformsCatalog catalog, String outputColumnName, Int32 imageWidth, Int32 imageHeight, String inputColumnName, ResizingKind resizing, Anchor cropAnchor)\r\n   at MLQuickID.TFModelScorer.LoadModel(String tsvFile, String inceptionPb) in \\\\Mac\\Home\\Downloads\\QuickID-winforms-test4\\QuickID-winforms-test2\\TFModelScorer.cs:line 67\r\n\r\n=== Pre-bind state information ===\r\nLOG: DisplayName = System.Drawing.Common, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n (Fully-specified)\r\nLOG: Appbase = file://Mac/Home/Downloads/QuickID-winforms-test4/client/bin/x64/Debug/\r\nLOG: Initial PrivatePath = NULL\r\nCalling assembly : Microsoft.ML.ImageAnalytics, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51.\r\n\r\nLOG: This bind starts in default load context.\r\nLOG: Using application configuration file: \\\\Mac\\Home\\Downloads\\QuickID-winforms-test4\\client\\bin\\x64\\Debug\\client.exe.Config\r\nLOG: Using host configuration file: \r\nLOG: Using machine configuration file from C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\config\\machine.config.\r\nLOG: Post-policy reference: System.Drawing.Common, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\nLOG: Attempting download of new URL file://Mac/Home/Downloads/QuickID-winforms-test4/client/bin/x64/Debug/System.Drawing.Common.DLL.\r\nLOG: Attempting download of new URL file://Mac/Home/Downloads/QuickID-winforms-test4/client/bin/x64/Debug/System.Drawing.Common/System.Drawing.Common.DLL.\r\nLOG: Attempting download of new URL file://Mac/Home/Downloads/QuickID-winforms-test4/client/bin/x64/Debug/System.Drawing.Common.EXE.\r\nLOG: Attempting download of new URL file://Mac/Home/Downloads/QuickID-winforms-test4/client/bin/x64/Debug/System.Drawing.Common/System.Drawing.Common.EXE.\r\n`\r\n\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4459","RelatedDescription":"Closed issue \"pipeline fails to load when I convert my project to a class\" (#4459)"},{"Id":"519537667","IsPullRequest":true,"CreatedAt":"2019-11-08T21:09:03","Actor":"harshithapv","Number":"4457","RawContent":null,"Title":"Retro-fitted changes made to the ML docs repo into ML.NET","State":"closed","Body":"Retro-fitted changes made to the ML docs repository into ML.NET.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4457","RelatedDescription":"Closed or merged PR \"Retro-fitted changes made to the ML docs repo into ML.NET\" (#4457)"},{"Id":"519580553","IsPullRequest":true,"CreatedAt":"2019-11-07T23:57:30","Actor":"eerhardt","Number":"4458","RawContent":null,"Title":"Fix a flaky Extensions.ML test.","State":"open","Body":"Make the reload model tests more resistant to timing changes.","Url":"https://github.com/dotnet/machinelearning/pull/4458","RelatedDescription":"Open PR \"Fix a flaky Extensions.ML test.\" (#4458)"},{"Id":"519399770","IsPullRequest":true,"CreatedAt":"2019-11-07T19:34:29","Actor":"codemzs","Number":"4453","RawContent":null,"Title":"Increment stable API version and add new stable packages to the list.","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4453","RelatedDescription":"Closed or merged PR \"Increment stable API version and add new stable packages to the list.\" (#4453)"},{"Id":"519424587","IsPullRequest":true,"CreatedAt":"2019-11-07T18:00:36","Actor":"harishsk","Number":"4455","RawContent":null,"Title":"Added onnx export support for KeyToValueMappingTransformer","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4455","RelatedDescription":"Open PR \"Added onnx export support for KeyToValueMappingTransformer\" (#4455)"},{"Id":"519021863","IsPullRequest":false,"CreatedAt":"2019-11-07T03:57:22","Actor":"luisquintanilla","Number":"4452","RawContent":null,"Title":"[Image Classification API] Bottleneck phase values always computed","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: 2.1\r\n- **ML.NET Version (eg., dotnet --info)**: 1.4.0\r\n\r\n### Issue\r\n\r\nSetting `ReuseTrainSetBottleneckCachedValues` and `ReuseValidationSetBottleneckCachedValues` parameters in `ImageClassificationTrainer.Options` to `true`, does the bottleneck computation on subsequent runs. I believe once the bottleneck values are computed on the first run, by setting both of those parameters to `true`, bottleneck computation should be skipped and the model should go directly into the training phase.  Is this no longer the case?\r\n\r\n### Source code / logs\r\n\r\nSee sample source code at this link: https://github.com/luisquintanilla/machinelearning-samples/blob/33f87d226f350fb36552dd8b1cee6a7c3f12da89/samples/csharp/getting-started/DeepLearning_ImageClassification_Binary/DeepLearning_ImageClassification_Binary/Program.cs#L53","Url":"https://github.com/dotnet/machinelearning/issues/4452","RelatedDescription":"Closed issue \"[Image Classification API] Bottleneck phase values always computed\" (#4452)"},{"Id":"518968133","IsPullRequest":false,"CreatedAt":"2019-11-07T00:27:57","Actor":"benquan","Number":"4449","RawContent":null,"Title":"System.FormatException: Tensorflow exception triggered while loading model.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nWin10\r\n- **.NET Version (eg., dotnet --info)**: \r\n.net core\r\n\r\n### Issue\r\nI upgraded from ML.NET 1.3.1 to 1.4.0. Everything worked fine in 1.3.1 but after upgrading I get the following error:\r\n\r\n```\r\nSystem.FormatException: Tensorflow exception triggered while loading model. ---> System.DllNotFoundException: Unable to load DLL 'tensorflow' or one of its dependencies: The specified module could not be found. (Exception from HRESULT: 0x8007007E)\r\n   at Tensorflow.c_api.TF_NewGraph()\r\n   at Tensorflow.Graph..ctor()\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.ML.TensorFlow.TensorFlowUtils.LoadTFSessionByModelFilePath(IExceptionContext ectx, String modelFile, Boolean metaGraph)\r\n   at Microsoft.ML.TensorflowCatalog.LoadTensorFlowModel(ModelOperationsCatalog catalog, String modelLocation)\r\n   at ImageClassification.ModelScorer.TFModelScorer.LoadModel(String dataLocation, String imagesFolder, String modelLocation) in \\\\Mac\\Home\\Downloads\\QuickID-netcore-sample\\ImageClassification\\ModelScorer\\TFModelScorer.cs:line 94\r\n   at ImageClassification.ModelScorer.TFModelScorer.Score() in \\\\Mac\\Home\\Downloads\\QuickID-netcore-sample\\ImageClassification\\ModelScorer\\TFModelScorer.cs:line 80\r\n   at ImageClassification.Program.Main(String[] args) in \\\\Mac\\Home\\Downloads\\QuickID-netcore-sample\\ImageClassification\\Program.cs:line 22\r\n```\r\n\r\n\r\n\r\n- **What did you do?**\r\nupgraded from ML.NET 1.3.1 to 1.4.0\r\n- **What happened?**\r\nError\r\n- **What did you expect?**\r\nThe program ran just fine before\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4449","RelatedDescription":"Open issue \"System.FormatException: Tensorflow exception triggered while loading model.\" (#4449)"},{"Id":"518887333","IsPullRequest":true,"CreatedAt":"2019-11-06T22:32:41","Actor":"Lynx1820","Number":"4448","RawContent":null,"Title":"Fixes onnx exports for regression trainers","State":"open","Body":"\r\nThis PR fixes the issues with exporting the following regression trainers to onnx:\r\n- LbfgsPoissonRegression\r\n- FastTreeTweedie\r\n- FastForest\r\n\r\nAnd adds onnx conversion tests for the following regression trainers: \r\n- FastTree\r\n- OnlineGradientDescent\r\n- Ols\r\n- LightGbm\r\n- Sdca","Url":"https://github.com/dotnet/machinelearning/pull/4448","RelatedDescription":"Open PR \"Fixes onnx exports for regression trainers\" (#4448)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-11-14T05:30:42.6095614Z","RunDurationInMilliseconds":713}