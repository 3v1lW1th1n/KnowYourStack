{"Data":{"Vue-Issues":{"Issues":[{"Id":"324763302","IsPullRequest":false,"CreatedAt":"2018-05-21T01:44:12","Actor":"axy541877028","Number":"8209","RawContent":null,"Title":"tabs keep-alive memory leaks","State":"open","Body":"### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[http://panjiachen.github.io/vue-element-admin/#/example/table/dynamic-table](http://panjiachen.github.io/vue-element-admin/#/example/table/dynamic-table)\r\n\r\n### Steps to reproduce\r\nhttp://img.cdn.test.jookee.com/1526866395000Video_2018-05-21_092951.wmv    \r\nIf the link step is repeated 2-3 times or more, memory is checked for memory leaks\r\n\r\n### What is expected?\r\nWith different levels of routing jump I will clear the value inside the include, the same level will not, in order to achieve cache local function\r\n\r\n### What is actually happening?\r\nRepeatedly, memory usage continues to increase, feeling that the memory of the vue instance or the cleared component is not cleared. Click several times is very easy to memory leak, I used this method in the project, the effect is greater Click twice to use memory 100M\r\n\r\n---\r\nTabs Keep-alive how to free cached memory\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8209","RelatedDescription":"Open issue \"tabs keep-alive memory leaks\" (#8209)"},{"Id":"324716364","IsPullRequest":false,"CreatedAt":"2018-05-20T15:11:09","Actor":"aebrs","Number":"8208","RawContent":null,"Title":"index.vue template with unpredictable HTML elements","State":"closed","Body":"### What problem does this feature solve?\r\nHi,\r\nUsing vue.js I need to create an index.vue page for product and people, where number of text box and drop down list are not fixed, I mean some product has 5 props other may have 10.\r\nI tried to add all html element using v-html, but it seems not a wise way.\r\nSome offered to use components, it sounds little complicated or confusing.\r\nI am looking for a sample or good example.\r\nThanks in advance.\r\n\r\n### What does the proposed API look like?\r\nI tried to add all html element using v-html, but it seems not a wise way.\r\nSome offered to use components, it sounds little complicated or confusing.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8208","RelatedDescription":"Closed issue \"index.vue template with unpredictable HTML elements\" (#8208)"},{"Id":"324715812","IsPullRequest":false,"CreatedAt":"2018-05-20T15:01:16","Actor":"aebrs","Number":"8207","RawContent":null,"Title":"index.vue with undefined elements","State":"closed","Body":"Hi, \r\nUsing vue.js I need to create an index.vue page for product and people, where number of text box and drop down list are not fixed, I mean some product has 5 props other may have 10.\r\nI tried to add all html element using v-html, but it seems not a wise way.\r\nSome offered to use components, it sounds little complicated or confusing.\r\nI am looking for a sample or good example.\r\nThanks in advance.","Url":"https://github.com/vuejs/vue/issues/8207","RelatedDescription":"Closed issue \"index.vue with undefined elements\" (#8207)"},{"Id":"324702346","IsPullRequest":false,"CreatedAt":"2018-05-20T12:41:55","Actor":"hmexx","Number":"8205","RawContent":null,"Title":"Allow <template> block splitting in single-file-components, for organisational/readability purposes. (<template-block> ?)","State":"closed","Body":"### What problem does this feature solve?\r\nI love Vuejs, and .vue SFCs. But occasionally I end up with an HTML template that's extremely large and hard to read. **I'm talking about components where all the sub-parts are tightly coupled and breaking them down into sub-components is not an obvious win**.\r\n\r\nI could break them down anyway, but that's considerable amount of work considering the tight coupling. I'll either send a LOT of state down using props, or i'll have to move the state to Vuex, even though I'd prefer to keep that state local to that parent SFC.\r\n\r\nA nice solution, would be to just allow something akin to template macros/splitting within Vue. See below for a random syntax example.\r\n\r\n### What does the proposed API look like?\r\n```javascript\r\n<template>\r\n    ... 5 lines of html ...\r\n   <step1/>\r\n   <step2/>\r\n</template>\r\n\r\n<step1> \r\n... 30 lines of html ...\r\n</step1>\r\n\r\n<step2>\r\n... 40 lines of html...\r\n</step2>\r\n\r\n<script></script>\r\n<style></style>\r\n```\r\n\r\nBecause it's all in one file, and all the templates use the same script and style scope, you can just copy/paste things around, and organise. No props, no imports. It's basically just like macros. If I could have the IDE or an extension do this I wouldn't need for vue to do it.  Code folding has never really worked well for me.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8205","RelatedDescription":"Closed issue \"Allow <template> block splitting in single-file-components, for organisational/readability purposes. (<template-block> ?)\" (#8205)"},{"Id":"324705413","IsPullRequest":false,"CreatedAt":"2018-05-20T12:24:44","Actor":"liyang0513","Number":"8206","RawContent":null,"Title":"resolveAsset is not a function","State":"closed","Body":"\r\n![Uploading QQ截图20180520202422.jpg…]()\r\n","Url":"https://github.com/vuejs/vue/issues/8206","RelatedDescription":"Closed issue \"resolveAsset is not a function\" (#8206)"},{"Id":"324702186","IsPullRequest":false,"CreatedAt":"2018-05-20T11:28:45","Actor":"hmexx","Number":"8204","RawContent":null,"Title":"Feature request: Allow  <template> block splitting in single-file-components, for organisational/readability purposes. (<template-block> ?) ","State":"closed","Body":"I love Vuejs, and .vue SFCs. But occasionally I end up with an HTML template that's extremely large and hard to read. **I'm talking about components where all the sub-parts are tightly coupled and breaking them down into sub-components is not an obvious win**.\r\n\r\nI could break them down anyway, but that's considerable amount of work considering the tight coupling. I'll either send a LOT of state down using props, or i'll have to move the state to Vuex, even though I'd prefer to keep that state local to that parent SFC.\r\n\r\nA nice solution, would be to just allow something akin to template macros/splitting within Vue. Here's a random syntax example.\r\n```javascript\r\n<template>\r\n    ... 5 lines of html ...\r\n   <step1/>\r\n   <step2/>\r\n</template>\r\n\r\n<step1> \r\n... 30 lines of html ...\r\n</step1>\r\n\r\n<step2>\r\n... 40 lines of html...\r\n</step2>\r\n\r\n<script></script>\r\n<style></style>\r\n```\r\n\r\nBecause it's all in one file, and all the templates use the same script and style scope, you can just copy/paste things around, and organise. No props, no imports. It's basically just like macros. If I could have the IDE or an extension do this I wouldn't need for vue to do it.  Code folding has never really worked well for me.\r\n\r\nThoughts appreciated, and keep up the amazing work!","Url":"https://github.com/vuejs/vue/issues/8204","RelatedDescription":"Closed issue \"Feature request: Allow  <template> block splitting in single-file-components, for organisational/readability purposes. (<template-block> ?) \" (#8204)"},{"Id":"324601616","IsPullRequest":false,"CreatedAt":"2018-05-19T10:04:36","Actor":"Flcwl","Number":"8202","RawContent":null,"Title":"it lead the data can't be rendered in real time while v-for in items is a empty array","State":"closed","Body":"### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://www.what.mean?](https://www.what.mean? I don't have it)\r\n\r\n### Steps to reproduce\r\n\r\n` <span v-for=\"(item, index) in dots\" :key=\"item.id\" :class=\"['dot', {active: currentIndex === index}]\">\r\n      </span>\r\n{{currentIndex}}    <!-- no change but console can -->\r\n`\r\n\r\nit lead the data(currentIndex...) can't be rendered in real time while items is a empty array. maybe the :key=\"item.id\" make error.\r\nremove the `:key=\"item.id\" ` is OK.\r\nhow I can solve it?\r\n\r\n`  data() {\r\n    return {\r\n      dots: [],\r\n      currentIndex: 0\r\n    }\r\n  }, \r\n  mounted() {\r\n    setTimeout(() => {\r\n      this._initDots();  // length = 5\r\n    }, 20);\r\n  },\r\n  methods: {\r\n    _initDots(){\r\n      this.dots = Array(this.children.length);\r\n      // console.log(this.dots);\r\n    },\r\n}`\r\n\r\n### What is expected?\r\n{{currentIndex}} can change in real time\r\nand for can iterate in right way\r\n\r\n### What is actually happening?\r\n\r\n` <span v-for=\"(item, index) in dots\" :key=\"item.id\" :class=\"['dot', {active: currentIndex === index}]\">\r\n      </span>\r\n{{currentIndex}}    <!-- no change -->\r\n`\r\n\r\nit lead the data(currentIndex...) can't be rendered in real time while items is a empty array. maybe the :key=\"item.id\" make error.\r\nremove the `:key=\"item.id\" ` is OK.\r\nhow I can solve it?\r\n\r\n`  data() {\r\n    return {\r\n      dots: [],\r\n      currentIndex: 0\r\n    }\r\n  }, \r\n  mounted() {\r\n    setTimeout(() => {\r\n      this._initDots();  // length = 5\r\n    }, 20);\r\n  },\r\n  methods: {\r\n    _initDots(){\r\n      this.dots = Array(this.children.length);\r\n      // console.log(this.dots);\r\n    },\r\n}`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8202","RelatedDescription":"Closed issue \"it lead the data can't be rendered in real time while v-for in items is a empty array\" (#8202)"},{"Id":"324617052","IsPullRequest":false,"CreatedAt":"2018-05-19T09:44:52","Actor":"fengxuemiao","Number":"8203","RawContent":null,"Title":"在ie>9时候， 在table中使用templete 失效，怎么解决","State":"closed","Body":"        <tbody>\r\n            <template v-for=\"item in arrList \">\r\n                <tr v-for=\"(res,index) in item.list\" >\r\n                    <td :rowspan=\"item.list.length\" v-if=\"index==0\">{{item.created_name}}</td>\r\n                    <td>{{res.no}}</td>\r\n                    <td>{{res.cpname}}</td>\r\n                    <td>{{res.time_name}}</td>\r\n                    <td>{{res.type}}</td>\r\n                    <td>{{res.speed}}</td>                           \r\n                </tr>\r\n            </template>\r\n        </tbody>","Url":"https://github.com/vuejs/vue/issues/8203","RelatedDescription":"Closed issue \"在ie>9时候， 在table中使用templete 失效，怎么解决\" (#8203)"},{"Id":"324600852","IsPullRequest":false,"CreatedAt":"2018-05-19T04:46:49","Actor":"Flcwl","Number":"8201","RawContent":null,"Title":"it lead the data can't be rendered in real time while v-for in items is a empty array","State":"closed","Body":"` <span v-for=\"(item, index) in dots\" :key=\"item.id\" :class=\"['dot', {active: currentIndex === index}]\">\r\n      </span>\r\n{{currentIndex}}    <!-- no change -->\r\n`\r\n\r\nit lead the data(currentIndex...) can't be rendered in real time while items is a empty array. maybe the :key=\"item.id\" make error.\r\nremove the `:key=\"item.id\" ` is running OK.\r\nhow I can solve it?\r\n\r\n`  data() {\r\n    return {\r\n      dots: [],\r\n      currentIndex: 0\r\n    }\r\n  }, \r\n  mounted() {\r\n    setTimeout(() => {\r\n      this._initDots();  // length = 5\r\n    }, 20);\r\n  },\r\n  methods: {\r\n    _initDots(){\r\n      this.dots = Array(this.children.length);\r\n      // console.log(this.dots);\r\n    },\r\n}`\r\n\r\n","Url":"https://github.com/vuejs/vue/issues/8201","RelatedDescription":"Closed issue \"it lead the data can't be rendered in real time while v-for in items is a empty array\" (#8201)"},{"Id":"324520891","IsPullRequest":false,"CreatedAt":"2018-05-18T19:08:44","Actor":"eddyerburgh","Number":"8200","RawContent":null,"Title":"Re-implement async config option","State":"open","Body":"### What problem does this feature solve?\r\nVue Test Utils has a synchronous API by walking all watchers and setting them to `sync`, but this implementation is buggy.\r\n\r\nReimplementing an async private config option would solve this problem for Vue Test Utils.\r\n\r\n### What does the proposed API look like?\r\nAdd an `async` config option that would be used when watchers are created.\r\n\r\nThe same option that was removed in [this commit](https://github.com/vuejs/vue/commit/ad11aa122cd09a4510fd9d8829e25f4a90b178c2#diff-4d10b522e21ed424211799a4e11c6103L191).\r\n\r\nI'm happy to make a PR to add this.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8200","RelatedDescription":"Open issue \"Re-implement async config option\" (#8200)"},{"Id":"324423775","IsPullRequest":false,"CreatedAt":"2018-05-18T14:02:51","Actor":"mcmillenb","Number":"8199","RawContent":null,"Title":"\"Cannot read property '_pending' of null\" when using transition component.","State":"open","Body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/6sny3yq9/](https://jsfiddle.net/6sny3yq9/)\r\n\r\n### Steps to reproduce\r\n1. Open fiddle and type anything into the first field marked \"broken\". \r\n2. See in the console the error message \"Error in nextTick: \"TypeError: Cannot read property '_pending' of null\"\r\n3. Notice that Vue has stopped working\r\n4. Refresh the fiddle and type anything into the second field marked \"working\"\r\n5. Notice that everything works as expected\r\n\r\n### What is expected?\r\nWhen the value of the input field is \"foo\" the computed property `bar` will evaluate to true and the \"a\" span will display. \r\n\r\nWhen the user changes the value in the input field from \"foo\" to anything else, the computed property `bar` will evaluate to false and the \"b\" span (rendered using v-html) will display.\r\n\r\n### What is actually happening?\r\nInitially, the value of the input field is \"foo\" and the computed property `bar` is evaluated to true, so the \"a\" span is displaying. \r\n\r\nBut, when the user changes the value in the input field from \"foo\" to anything else, Vue crashes and this error message is displayed: Error in nextTick: \"TypeError: Cannot read property '_pending' of null\"\r\n\r\n---\r\nIt takes this very specific scenario for the error to appear. In the fiddle, I've shown that by removing the `@click=\"show = !show\"` event listener, Vue works as expected with no errors.\r\n\r\nHere are three other changes that, when made individually, result in Vue working as expected:\r\n  - removing the `<transition>` component surrounding the \"a\" span\r\n  - using `<span v-else>{{ b }}</span>` instead of `<span v-else v-html=\"b\"></span>`\r\n  - using `v-show=\"bar\"` and `v-show=\"!bar\"` instead of the `v-if=\"bar\"` and `v-else` directives\r\n\r\nFound via this question on Stack Overflow:\r\nhttps://stackoverflow.com/questions/50400131/cannot-read-property-pending-of-null-when-using-v-html-and-transition#\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8199","RelatedDescription":"Open issue \"\"Cannot read property '_pending' of null\" when using transition component.\" (#8199)"},{"Id":"324313770","IsPullRequest":true,"CreatedAt":"2018-05-18T08:19:55","Actor":"TUARAN","Number":"8198","RawContent":null,"Title":"my first to vue","State":"closed","Body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [x] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [ ] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [ ] All tests are passing: https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#development-setup\r\n- [ ] New/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","Url":"https://github.com/vuejs/vue/pull/8198","RelatedDescription":"Closed or merged PR \"my first to vue\" (#8198)"},{"Id":"324276064","IsPullRequest":false,"CreatedAt":"2018-05-18T05:35:07","Actor":"fz-marchen","Number":"8197","RawContent":null,"Title":"vue中开发环境和生产环境的css前缀问题","State":"closed","Body":"`\r\n在APP.vue添加\r\n<style>\r\n#app {\r\n  display: flex;\r\n}\r\n</style>\r\n使用npm run dev 命令后可以在浏览器查看到\r\n<style>\r\n#app {\r\n   display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n}\r\n</style>\r\n使用npm run build后,输出如下\r\n<style>\r\n#app {\r\n  display: -ms-flexbox;\r\n  display: flex\r\n}\r\n</style>\r\n在build后会display: -webkit-box;这个前缀没有添加，我尝试过在package.json和.postcssrc.js文件里，使用更早的版本，但是打包出来后这个前缀还是没有添加。\r\n谢谢\r\n`\r\n\r\n\r\n\r\n","Url":"https://github.com/vuejs/vue/issues/8197","RelatedDescription":"Closed issue \"vue中开发环境和生产环境的css前缀问题\" (#8197)"},{"Id":"324104480","IsPullRequest":false,"CreatedAt":"2018-05-17T23:39:22","Actor":"arpowers","Number":"8196","RawContent":null,"Title":"Additional lifecycle options for watchers (helps with SSR)","State":"closed","Body":"### What problem does this feature solve?\r\nLess code, less bugs, improving a commonly faced issue\r\n\r\n### What does the proposed API look like?\r\nBackground: \r\nI'm using SSR and frequently use watchers for loading in data in components. However, most of the components don't need to be rendered server-side (as debugging is harder this way and source becomes cluttered for SEO). \r\n\r\nThis means we can't use the standard 'immediate: true' option that is already implemented with watchers, as that would initialize things on the server (like the \"created\" lifecycle hook)\r\n\r\nProposal: \r\nTo solve this problem, I propose an additional 'initialize' option for the watcher API. This would work like the immediate hook, but would allow us to specify the point in the lifecycle when the \"immediate\" behavior should take place. \r\n\r\n```javascript\r\nwatch: {\r\n  value: {\r\n    handler: \"setValue\", \r\n    initialize: \"mounted\"\r\n  }\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8196","RelatedDescription":"Closed issue \"Additional lifecycle options for watchers (helps with SSR)\" (#8196)"},{"Id":"323870087","IsPullRequest":false,"CreatedAt":"2018-05-17T23:37:14","Actor":"patilpriyash","Number":"8194","RawContent":null,"Title":"Jumping cursor issue with Content-Editable two way data binding using Array of Objects","State":"closed","Body":"### Version\r\n2.5.17-beta.0\r\n\r\n### Reproduction link\r\n[https://codepen.io/priyashpatil/pen/PeyydQ](https://codepen.io/priyashpatil/pen/PeyydQ)\r\n\r\n### Steps to reproduce\r\nCard Panel List is editable so try to typing to change content in \"Using Objects\" Panel.\r\n\r\n### What is expected?\r\nCursor should not jump to start position of content editable element having two way data binding.\r\n\r\n### What is actually happening?\r\nCursor jump to start position of element due to re rending of element.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8194","RelatedDescription":"Closed issue \"Jumping cursor issue with Content-Editable two way data binding using Array of Objects\" (#8194)"},{"Id":"323886094","IsPullRequest":false,"CreatedAt":"2018-05-17T23:25:20","Actor":"kosmos","Number":"8195","RawContent":null,"Title":"Nodes and Listeners don't remove when destroy Vue components by v-if","State":"closed","Body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/vjkosmos/hbbb28ky/](https://jsfiddle.net/vjkosmos/hbbb28ky/)\r\n\r\n### Steps to reproduce\r\n1. Create project by vue cli\r\n2. Change HelloWorld.vue to:\r\n```\r\n<template>\r\n  <div class=\"hello\">\r\n    <button @click=\"show = !show\">Show</button>\r\n    <div v-if=\"show\">\r\n      <h2>{{msg}}</h2>\r\n      <h2>{{msg}}</h2>\r\n      <h2>{{msg}}</h2>\r\n      <h2>{{msg}}</h2>\r\n      <h2>{{msg}}</h2>\r\n      <h2>{{msg}}</h2>\r\n      <h2>{{msg}}</h2>\r\n      <h2>{{msg}}</h2>\r\n      <h2>{{msg}}</h2>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'HelloWorld',\r\n\r\n  data () {\r\n    return {\r\n      show: false,\r\n      msg: 'test',\r\n    }\r\n  },\r\n}\r\n</script>\r\n```\r\n3. Open Chrome Dev Tools > Performance monitor\r\n4. Make fast clicks on button to show\\destroy h2-s\r\n\r\n### What is expected?\r\nVue should remove dom nodes\r\n\r\n### What is actually happening?\r\nThe number of dom nodes increases and vue does not remove them.\r\n\r\n---\r\nOn real projects it is a big problem. Within seconds you can get tens of thousands of \"dom-zombies\".\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8195","RelatedDescription":"Closed issue \"Nodes and Listeners don't remove when destroy Vue components by v-if\" (#8195)"},{"Id":"323724947","IsPullRequest":false,"CreatedAt":"2018-05-16T17:56:01","Actor":"OlzhasAlexandrov","Number":"8193","RawContent":null,"Title":"Webassembly integration. Split the core into two parts.","State":"open","Body":"\r\n\r\n### What problem does this feature solve?\r\nPerformance improvements.\r\n\r\n### What does the proposed API look like?\r\nSplit the core into two parts:\r\n- JS. Keep doing what you are already doing with the framework.\r\n- Webassembly. Experiment with the **syntax sugar [walt](https://github.com/ballercat/walt)** to have compiled JS core in `.wasm`\r\n  - I read other closed [issues on this topic](https://github.com/vuejs/vue/issues/7768) and saw:\r\n    > This is like building a completely new framework (with similar syntax) - definitely not something the core team is interested in / have bandwidth for, but I wouldn't discourage anyone interested to try.\r\n  - **The syntax sugar, walt, potentially can make the split much-much easier, since it is still JS**.\r\n\r\nThings to consider:\r\n- Both JS and Webassembly can be called from each other, so it is time to start mixing parts.\r\n- Server-side rendering. This is the worst aspect in Vue.js. `JSON` client-side and server-side bundles is a ridiculous architecture to be honest.\r\n  - If used with `serverless-webpack` to make a lambda function, **there is no optimization possible on the dependencies, such as tree shaking** as you are creating `.json` bundles that are then imported for the render function and webpack is unable to trace what parts of dependencies aren't needed. Therefore, SSR development stage is unfortunately in a very poor condition.\r\n- SSR is happening on the server-side. Node.js 8  can run `.wasm`, so that **it could have been totally compiled**.\r\n\r\nPersonally, we would start making progress in it ourselves, but there is no incentive for us to start working on it at the moment.\r\nTherefore, it would be great, if there are interested parties in performance improvements in the community, who can dedicate time to it.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8193","RelatedDescription":"Open issue \"Webassembly integration. Split the core into two parts.\" (#8193)"},{"Id":"323421732","IsPullRequest":true,"CreatedAt":"2018-05-15T23:46:12","Actor":"zevdg","Number":"8192","RawContent":null,"Title":"allow functional components to return multiple VNodes (fix #8191)","State":"open","Body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [x] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#development-setup\r\n- [x] New/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","Url":"https://github.com/vuejs/vue/pull/8192","RelatedDescription":"Open PR \"allow functional components to return multiple VNodes (fix #8191)\" (#8192)"},{"Id":"323419717","IsPullRequest":false,"CreatedAt":"2018-05-15T23:34:48","Actor":"zevdg","Number":"8191","RawContent":null,"Title":"typescript types don't allow multi-root functional components","State":"open","Body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://github.com/zevdg/vue-typescript-multi-root-component](https://github.com/zevdg/vue-typescript-multi-root-component)\r\n\r\n### Steps to reproduce\r\nnpm run serve\r\n\r\n### What is expected?\r\nthere shouldn't be errors\r\n\r\n### What is actually happening?\r\nThe page runs and works as expected, but the build shows type errors because the type definitions specify that a single VNode is always returned from functional componnts' render functions.\r\n\r\n---\r\nThe fix for this is trivial.  I've already fixed it locally, and I'll make a pull request.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8191","RelatedDescription":"Open issue \"typescript types don't allow multi-root functional components\" (#8191)"},{"Id":"323360247","IsPullRequest":false,"CreatedAt":"2018-05-15T19:57:02","Actor":"diego-lipinski-de-castro","Number":"8190","RawContent":null,"Title":"one way data flow problem?","State":"closed","Body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://codepen.io/maxorhd/pen/ZoMvaj?editors=1111](https://codepen.io/maxorhd/pen/ZoMvaj?editors=1111)\r\n\r\n### Steps to reproduce\r\npass props to a component and try to recover it as follows\r\n\r\n```javascript\r\nprops: ['testProps'],\r\ndata:  () => ({\r\n    test: this.testProps //test is undefined but testProps is not undefined\r\n})\r\n```\r\n\r\n### What is expected?\r\nvariable to not be undefined\r\n\r\n### What is actually happening?\r\nvariable is undefined\r\n\r\n---\r\nthis works\r\n\r\n```javascript\r\nprops: ['testProps'],\r\ndata: function () {\r\n  return {\r\n    test: this.testProps //test is = this.testProps\r\n  }\r\n}\r\n```\r\n\r\nalso works\r\n```javascript\r\nprops: ['testProps'],\r\ndata() {\r\n  return {\r\n    test: this.testProps //test is = this.testProps\r\n  }\r\n}\r\n```\r\n\r\nthis does not work\r\n\r\n```javascript\r\nprops: ['testProps'],\r\ndata:  () => ({\r\n    props: this.testProps //props is undefined but this.testProps is not undefined\r\n})\r\n```\r\n\r\nis this expected? I'm not sure about this\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8190","RelatedDescription":"Closed issue \"one way data flow problem?\" (#8190)"},{"Id":"323355160","IsPullRequest":false,"CreatedAt":"2018-05-15T19:39:12","Actor":"diego-lipinski-de-castro","Number":"8189","RawContent":null,"Title":"one way data flow problem?","State":"closed","Body":"this works\r\n```javascript\r\nprops: ['initialCounter'],\r\ndata: function () {\r\n  return {\r\n    counter: this.initialCounter\r\n  }\r\n}\r\n```\r\n\r\nthis does not work\r\n```javascript\r\nprops: ['initialCounter'],\r\ndata:  () => ({\r\n    counter: this.initialCounter //this.initialCounter is undefined\r\n})\r\n```\r\n\r\nis this expected? I'm not sure about this","Url":"https://github.com/vuejs/vue/issues/8189","RelatedDescription":"Closed issue \"one way data flow problem?\" (#8189)"},{"Id":"323072344","IsPullRequest":false,"CreatedAt":"2018-05-15T17:23:12","Actor":"rodrigopedra","Number":"8187","RawContent":null,"Title":"Merged class attributes are not preserved when a component is created from a render function and the root node has a class binding","State":"closed","Body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/jmabj70u/](https://jsfiddle.net/jmabj70u/)\r\n\r\n*updated*: added `child-compoent` directly to compare expected vs actual results\r\n\r\n[https://jsfiddle.net/jmabj70u/1/](https://jsfiddle.net/jmabj70u/1/)\r\n\r\n### Steps to reproduce\r\n1. Create a component that render its content through a render function and render a child component with a static class attribute\r\n2. In the child component, add a class binding to the root element \r\n3. When the class binding is applied (for example, when a condition becomes true) the static classes passed from the parent component render function is lost\r\n\r\n### What is expected?\r\nThat the child component keeps both the static and dynamic classes\r\n\r\n### What is actually happening?\r\nOnly the dynamic classes added through the v-bind:class are kept in the root element\r\n\r\n---\r\nI looked through other issues reporting similar behaviors, the one more likely to be related is issue #1014 , but this one differs from that case since any of the components here are functional components.\r\n\r\n*updated*: actual issue is https://github.com/vuejs/vue-loader/issues/1014#issuecomment-338281037 see comment below\r\n\r\nThe example in the fiddle is a simplified version to showcase the problem. In my use-case, the parent component can render a different child component depending on a prop or state, the parent acts as a \"proxy\" or \"polymorphic\" component for several different children.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8187","RelatedDescription":"Closed issue \"Merged class attributes are not preserved when a component is created from a render function and the root node has a class binding\" (#8187)"},{"Id":"323245156","IsPullRequest":false,"CreatedAt":"2018-05-15T14:32:37","Actor":"RoamIn","Number":"8188","RawContent":null,"Title":"Why need if/else","State":"closed","Body":"","Url":"https://github.com/vuejs/vue/issues/8188","RelatedDescription":"Closed issue \"Why need if/else\" (#8188)"},{"Id":"322835620","IsPullRequest":false,"CreatedAt":"2018-05-14T14:30:53","Actor":"IamManchanda","Number":"8186","RawContent":null,"Title":"[DOCS] Vue CLI for TypeScript already there","State":"closed","Body":"### Version\r\n2.5.0\r\n\r\n### Reproduction link\r\n[https://vuejs.org/v2/guide/typescript.html](https://vuejs.org/v2/guide/typescript.html)\r\n\r\n### Steps to reproduce\r\n`vue create sample` => manually => Check the TypeScript option\r\n\r\n### What is expected?\r\nThis shouldn't be in docs... Am I missing something?\r\n\r\n### What is actually happening?\r\nThis is in docs... Actually instead of this below content there should be an how to guide on how to use Vue CLI with TypeScript?\r\n\r\n<img width=\"869\" alt=\"screen shot 2018-05-14 at 7 39 18 pm\" src=\"https://user-images.githubusercontent.com/4970624/40002720-24127982-57af-11e8-996e-a2840cf1a73d.png\">\r\n\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8186","RelatedDescription":"Closed issue \"[DOCS] Vue CLI for TypeScript already there\" (#8186)"},{"Id":"322622821","IsPullRequest":false,"CreatedAt":"2018-05-14T13:36:25","Actor":"slimee","Number":"8183","RawContent":null,"Title":"Deep object returned by computed is not reactive?","State":"closed","Body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://github.com/BlueForestTrees/trees/blob/dev/web/src/main/vue/layout/Compare.vue](https://github.com/BlueForestTrees/trees/blob/dev/web/src/main/vue/layout/Compare.vue)\r\n\r\n### Steps to reproduce\r\nCreate a component with props and a computed property.\r\nCreate a deep object from props values inside the computed property.\r\nUse this object in the template.\r\n\r\n### What is expected?\r\nAny changes in the object should be reflected in the template.\r\n\r\n### What is actually happening?\r\nNo changes\r\n\r\n---\r\nDoes a computed property is allways fully reactive?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8183","RelatedDescription":"Closed issue \"Deep object returned by computed is not reactive?\" (#8183)"},{"Id":"322691742","IsPullRequest":false,"CreatedAt":"2018-05-14T06:50:14","Actor":"a77321a","Number":"8185","RawContent":null,"Title":"icon css relative path error","State":"closed","Body":"the path is error , It's no use using alias","Url":"https://github.com/vuejs/vue/issues/8185","RelatedDescription":"Closed issue \"icon css relative path error\" (#8185)"},{"Id":"322641602","IsPullRequest":true,"CreatedAt":"2018-05-14T00:43:03","Actor":"Raikozyz","Number":"8184","RawContent":null,"Title":"Merge pull request #2 from vuejs/dev","State":"closed","Body":"update\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [ ] Other, please describe:\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [ ] No\r\n\r\nIf yes, please describe the impact and migration path for existing applications:\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [ ] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [ ] All tests are passing: https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#development-setup\r\n- [ ] New/updated tests are included\r\n\r\nIf adding a **new feature**, the PR's description includes:\r\n- [ ] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)\r\n\r\n**Other information:**\r\n","Url":"https://github.com/vuejs/vue/pull/8184","RelatedDescription":"Closed or merged PR \"Merge pull request #2 from vuejs/dev\" (#8184)"},{"Id":"322560189","IsPullRequest":false,"CreatedAt":"2018-05-13T03:45:20","Actor":"benmccallum","Number":"8182","RawContent":null,"Title":"v-model to a nested getter/setter computed property backed by vuex doesn't behave as expected","State":"closed","Body":"### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://codepen.io/benmccallum/pen/NMzrMj](https://codepen.io/benmccallum/pen/NMzrMj)\r\n\r\n### Steps to reproduce\r\n* Type something into \"firstName\" field and see the value is output immediately to the right. This is as expected. (Uses suggested pattern for Vuex with v-model at https://vuex.vuejs.org/en/forms.html)\r\n\r\n* See \"lastName\" field has an initial value of \"[object Object]\". This isn't expected.\r\n* Type something into \"lastName\" field and see the value is NOT immediately output to the right. This isn't expected. \r\n* Tab out of the \"lastName\" field and notice now it will output to the right.\r\n\r\n\r\n\r\n### What is expected?\r\n1. On load, both inputs should be empty.\r\n2. Typing into lastName should behave the same way as firstName (immediate output to side on 'input' event, not just focus out)\r\n\r\n### What is actually happening?\r\n1. lastName input has \"[object Object]\"\r\n2. Typing into lastName does nothing to our output until you \"focus out\"\r\n\r\n---\r\nI'm basically wanting to nest custom getter/setter properties under a top-level computed property. I'm doing this because I'd like to nest all my forms fields under a computed property called \"form\" that returns an object where each property is itself an object defining the getter/setter to the Vuex store. \r\n\r\nI can potentially flatten these all with a map method that creates a computed property (getter/setter) for each field like `fieldName   \"Field\"` but the reason I'm trying to do this is to normalize a Vue plugin's usage across component state vs vuex state. \r\n\r\nAlso, if this nesting means that the \"form\" property with nestings is recalculated every time a field changes, let me know as obviously that'd be a performance consideration that may drive me to the flat style and force me to figure out how I document the plugin's usage.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8182","RelatedDescription":"Closed issue \"v-model to a nested getter/setter computed property backed by vuex doesn't behave as expected\" (#8182)"},{"Id":"322547677","IsPullRequest":false,"CreatedAt":"2018-05-12T22:40:07","Actor":"wim-put","Number":"8181","RawContent":null,"Title":"export order bug","State":"closed","Body":"### Version\r\n2.5.16\r\n\r\n### Reproduction link\r\n[https://github.com/wim-put/minimal-reproduction-vue-export-order-bug](https://github.com/wim-put/minimal-reproduction-vue-export-order-bug)\r\n\r\n### Steps to reproduce\r\nclone the project and, 'npm install' and 'npm run serve'\r\n\r\n### What is expected?\r\nto render App.vue's template when browsing to the localhost\r\n\r\n### What is actually happening?\r\na warning is thrown, [Vue warn]: Unknown custom element\r\n\r\n---\r\nThe problem does not occur when you change the order of the 2 exports in '/src/components/index.js', then the page is rendered as expected. I have the feeling there is a loose comparison going on in the background.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8181","RelatedDescription":"Closed issue \"export order bug\" (#8181)"},{"Id":"322510103","IsPullRequest":false,"CreatedAt":"2018-05-12T13:25:14","Actor":"luo772435545","Number":"8180","RawContent":null,"Title":"动态组件生成的js引入路径有问题","State":"closed","Body":"### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://www.baidu.com](https://www.baidu.com)\r\n\r\n### Steps to reproduce\r\nvue在webpack生成多页面\r\n比如index.html  login.html   products/productDetail.html\r\n在productDetail.html  会存在 动态产生的js路径问题\r\n\r\n### What is expected?\r\n在productDetail.html  js路径引入正确\r\n\r\n### What is actually happening?\r\nvue在webpack生成多页面\r\n比如index.html  login.html   products/productDetail.html\r\n在productDetail.html  会存在 动态产生的js路径问题\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue/issues/8180","RelatedDescription":"Closed issue \"动态组件生成的js引入路径有问题\" (#8180)"}],"ResultType":"GitHubIssue"},"Router-Issues":{"Issues":[{"Id":"324745355","IsPullRequest":true,"CreatedAt":"2018-05-20T21:46:06","Actor":"petkunandrew","Number":"2204","RawContent":null,"Title":"fix grammar getting-started.md (ru)","State":"open","Body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n","Url":"https://github.com/vuejs/vue-router/pull/2204","RelatedDescription":"Open PR \"fix grammar getting-started.md (ru)\" (#2204)"},{"Id":"324600172","IsPullRequest":true,"CreatedAt":"2018-05-19T04:31:56","Actor":"emanuelmutschlechner","Number":"2203","RawContent":null,"Title":"Add feature external routes","State":"open","Body":"This commit adds support for external routes in `routes` of the router.\r\n\r\nFeature request:\r\n#1280\r\n\r\nLive demo:\r\nhttps://7496x53w10.codesandbox.io/\r\n\r\nInteractive example:\r\nhttps://codesandbox.io/s/7496x53w10","Url":"https://github.com/vuejs/vue-router/pull/2203","RelatedDescription":"Open PR \"Add feature external routes\" (#2203)"},{"Id":"324352138","IsPullRequest":false,"CreatedAt":"2018-05-18T12:01:49","Actor":"korewayume","Number":"2202","RawContent":null,"Title":"Sometimes the feat `Lazy Loading Routes`  has odd build problem.","State":"closed","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://github.com/korewayume/abc](https://github.com/korewayume/abc)\r\n\r\n### Steps to reproduce\r\n\r\nrun command : `npm run serve`\r\n\r\ncommit init is generate by @vue/cli 3.0.0-beta.10\r\n\r\ncommit success write two `.vue` files:  `src/views/a/index.vue` and `src/views/b/index.vue`, they only have one line different. And `src/views/a/index.vue` is not referenced by `vue-router`.\r\n\r\ncommit error toggle the line `import router from '@/router';` comment status, and now they are same.\r\n\r\nThe later commit show some odd behavior about `Lazy Loading Routes`,  even throught the `asComponent` func never used.\r\n\r\n### What is expected?\r\n`Lazy Loading Routes`  work well\r\n\r\n### What is actually happening?\r\n`Lazy Loading Routes` makes odd\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue-router/issues/2202","RelatedDescription":"Closed issue \"Sometimes the feat `Lazy Loading Routes`  has odd build problem.\" (#2202)"},{"Id":"323740543","IsPullRequest":false,"CreatedAt":"2018-05-16T19:04:34","Actor":"aligajani","Number":"2201","RawContent":null,"Title":"How to make sure visiting login route while being authenticated doesn't result in 404 but rather redirect to home?","State":"closed","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/chrisvfritz/50wL7mdz/](https://jsfiddle.net/chrisvfritz/50wL7mdz/)\r\n\r\n### Steps to reproduce\r\n**Login Route**\r\n\r\n```\r\n {\r\n        path: '/login',\r\n        name: 'login',\r\n        component: Login,\r\n        meta: { auth: false }\r\n    },\r\n```\r\n\r\n\r\n**404**\r\n\r\n```\r\n{\r\n        path: '/404',\r\n        name: 'error-404',\r\n        component: Error404\r\n    },\r\n```\r\n\r\n**Home**\r\n\r\n```\r\n{\r\n        path: '/',\r\n        name: 'default',\r\n        component: Home,\r\n        meta: { auth: true }\r\n    }\r\n```\r\n\r\n### What is expected?\r\nVisiting login route while authenticated should redirect to home\r\n\r\n### What is actually happening?\r\nVisiting login router while authenticated redirects to 404 route\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue-router/issues/2201","RelatedDescription":"Closed issue \"How to make sure visiting login route while being authenticated doesn't result in 404 but rather redirect to home?\" (#2201)"},{"Id":"323733732","IsPullRequest":false,"CreatedAt":"2018-05-16T18:22:30","Actor":"aligajani","Number":"2200","RawContent":null,"Title":"How to make sure visiting login route while being authenticated doesn't result in 404 but rather redirect to home?","State":"closed","Body":"**Login Route**\r\n\r\n```\r\n {\r\n        path: '/login',\r\n        name: 'login',\r\n        component: Login,\r\n        meta: { auth: false }\r\n    },\r\n```\r\n\r\n\r\n**404**\r\n\r\n```\r\n{\r\n        path: '/404',\r\n        name: 'error-404',\r\n        component: Error404\r\n    },\r\n```\r\n\r\n**Home**\r\n\r\n```\r\n{\r\n        path: '/',\r\n        name: 'default',\r\n        component: Home,\r\n        meta: { auth: true }\r\n    }\r\n```","Url":"https://github.com/vuejs/vue-router/issues/2200","RelatedDescription":"Closed issue \"How to make sure visiting login route while being authenticated doesn't result in 404 but rather redirect to home?\" (#2200)"},{"Id":"323050961","IsPullRequest":false,"CreatedAt":"2018-05-15T17:18:32","Actor":"eunjae-lee","Number":"2199","RawContent":null,"Title":"A link to named router is not working with root path of nested routes.","State":"closed","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/63b7utzm/19/](https://jsfiddle.net/63b7utzm/19/)\r\n\r\n### Steps to reproduce\r\nFrom the link above, click `/user`.\r\n\r\n### What is expected?\r\nIt's supposed to render `UserHome` component.\r\n\r\n### What is actually happening?\r\nbut it's just rendering `User` component.\r\n\r\n---\r\nIf you try with https://jsfiddle.net/kx7spvh3/1/ , it will work fine.\r\nThe only difference is, this one has links with actual path instead of route names.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue-router/issues/2199","RelatedDescription":"Closed issue \"A link to named router is not working with root path of nested routes.\" (#2199)"},{"Id":"323041543","IsPullRequest":false,"CreatedAt":"2018-05-15T02:09:01","Actor":"tanzhiyu","Number":"2198","RawContent":null,"Title":"vue-router滚动行为还支持吗","State":"closed","Body":"<!--\r\nIMPORTANT: Please use the following link to create a new issue:\r\n\r\n  https://new-issue.vuejs.org/?repo=vuejs/vue-router\r\n\r\nIf your issue was not created using the app above, it will be closed immediately.\r\n-->\r\n","Url":"https://github.com/vuejs/vue-router/issues/2198","RelatedDescription":"Closed issue \"vue-router滚动行为还支持吗\" (#2198)"},{"Id":"323034619","IsPullRequest":false,"CreatedAt":"2018-05-15T01:25:22","Actor":"f2009","Number":"2197","RawContent":null,"Title":"Android8.0版本路由问题","State":"closed","Body":"点击路由跳转链接的时候，第一次点击无反应需要再点一次。之前判断是组件加载慢，但长时间组件都加载不出来就不太合理了。尝试再点一次立刻就加载出来了。或者我连点2次也能很快加载出来。\r\n经测试该现象也只有在Android8.0手机会重现。","Url":"https://github.com/vuejs/vue-router/issues/2197","RelatedDescription":"Closed issue \"Android8.0版本路由问题\" (#2197)"},{"Id":"322599149","IsPullRequest":false,"CreatedAt":"2018-05-14T15:10:38","Actor":"djvonavi","Number":"2194","RawContent":null,"Title":"wrong work history push state","State":"closed","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[http://95.213.163.110:3001/user/578f9322f833fde7b4f479f8](http://95.213.163.110:3001/user/578f9322f833fde7b4f479f8)\r\n\r\n### Steps to reproduce\r\nclick to  Объявления and see browser adreess\r\n\r\n### What is expected?\r\nlink change to http://95.213.163.110:3001/user/578f9322f833fde7b4f479f8//ads\r\n\r\n### What is actually happening?\r\nlink change to http://95.213.163.110:3001/user/578f9322f833fde7b4f479f8/ads\r\n\r\n---\r\nI'm using a vue-router, and history is fashion. I have references such as `/user/578f9322f833fde7b4f479f8//ads, the link itself is spelled correctly, and the request to the server goes along the correct path, but in the address bar the link changes to /user/578f9322f833fde7b4f479f8/ads, that is, without 1 slash, and naturally the page refreshes an incident.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue-router/issues/2194","RelatedDescription":"Closed issue \"wrong work history push state\" (#2194)"},{"Id":"322768061","IsPullRequest":false,"CreatedAt":"2018-05-14T10:59:52","Actor":"machao1990","Number":"2196","RawContent":null,"Title":"there are some problems with vue-router in a iframe in ie10","State":"open","Body":"### Version\r\n2.8.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/mage1990/pcoucsx6/2/](https://jsfiddle.net/mage1990/pcoucsx6/2/)\r\n\r\n### Steps to reproduce\r\nopen the link above in ie10,not the ie10 in ie11's or edge's  f12\r\nclick the detail button in the list component\r\nclick the back button in the detail component\r\nclick the detail button again button again\r\nThe page turns white\r\n\r\n### What is expected?\r\nThe page can be displayed normally.\r\n\r\n### What is actually happening?\r\nThe page turns white\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue-router/issues/2196","RelatedDescription":"Open issue \"there are some problems with vue-router in a iframe in ie10\" (#2196)"},{"Id":"322731684","IsPullRequest":false,"CreatedAt":"2018-05-14T09:10:46","Actor":"raxxarr","Number":"2195","RawContent":null,"Title":"replaceState needs third argument","State":"open","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://github.com/raxxarr/router-demo.git](https://github.com/raxxarr/router-demo.git)\r\n\r\n### Steps to reproduce\r\n- in latest Safari(OS X or iOS)\r\n- add base element: `<base href=\"/app/\">`\r\n- set router mode: history\r\n1. open page 1 via url: localhost:8080/app/p1\r\n2. navigate to /app/p2 by clicking button\r\n3. click history back button on browser\r\n\r\n\r\n### What is expected?\r\njump back to /app/p1\r\n\r\n### What is actually happening?\r\njump to /app/\r\n\r\n---\r\nThis issue is caused by using replaceState without giving a third argument when trying to fix a Firefox scroll issue (https://github.com/vuejs/vue-router/blob/dev/src/util/scroll.js#L9)； This works fine on most browsers except for Safari.\r\nAccording to whatwg spec，if the 3rd argument is not given，browser should set current url into history，but Safari set the base url.\r\nHere is Webkit source code: https://trac.webkit.org/browser/webkit/branches/safari-605.2.8.1-branch/Source/WebCore/page/History.cpp#L157\r\nHere is Blink source code: https://chromium.googlesource.com/chromium/blink/ /master/Source/core/frame/History.cpp#153\r\nAs is seen, what Safari do is not what we expect when we omit the 3rd argument.\r\n\r\nAlthough this is not really a vue-router bug, we can add a third argument(current path) to avoid something weird happen.\r\n\r\nps: this bug is confirmed by Webkit https://bugs.webkit.org/show_bug.cgi?id=182678\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue-router/issues/2195","RelatedDescription":"Open issue \"replaceState needs third argument\" (#2195)"},{"Id":"322493811","IsPullRequest":true,"CreatedAt":"2018-05-12T08:30:04","Actor":"emanuelmutschlechner","Number":"2193","RawContent":null,"Title":"feat(link): add 'exact-path' matching option","State":"open","Body":"Improves unfinished pull request #2070 and closes issue #2040","Url":"https://github.com/vuejs/vue-router/pull/2193","RelatedDescription":"Open PR \"feat(link): add 'exact-path' matching option\" (#2193)"},{"Id":"322042296","IsPullRequest":true,"CreatedAt":"2018-05-10T19:51:03","Actor":"Ziming98","Number":"2192","RawContent":null,"Title":"Update data-fetching.md","State":"closed","Body":"我做过实验,在HTML5 History 模式下watch才会监听并且有效执行\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n","Url":"https://github.com/vuejs/vue-router/pull/2192","RelatedDescription":"Closed or merged PR \"Update data-fetching.md\" (#2192)"},{"Id":"322033328","IsPullRequest":false,"CreatedAt":"2018-05-10T18:48:12","Actor":"armandomendivil","Number":"2191","RawContent":null,"Title":"Reload page when router-link is clicked in the same route","State":"closed","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[http://jsfiddle.net/aevdnmzw/](http://jsfiddle.net/aevdnmzw/)\r\n\r\n### Steps to reproduce\r\nclick home link multiple times and look like it is just created just once\r\n\r\n### What is expected?\r\nI wanna reload the same page clicking  router-link\r\n\r\n### What is actually happening?\r\nIt is just created once\r\n\r\n---\r\nI'm using element-ui but I'm lookin' that is a behavior for vue-router, I know is not a bug but I want to know how can I do to get my expected behavior, Cheers!\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue-router/issues/2191","RelatedDescription":"Closed issue \"Reload page when router-link is clicked in the same route\" (#2191)"},{"Id":"321681347","IsPullRequest":true,"CreatedAt":"2018-05-09T18:40:42","Actor":"trainiac","Number":"2190","RawContent":null,"Title":"Update navigation-guards.md","State":"open","Body":"Be consistent with referring to guard function names.\r\n\r\n<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n","Url":"https://github.com/vuejs/vue-router/pull/2190","RelatedDescription":"Open PR \"Update navigation-guards.md\" (#2190)"},{"Id":"321511805","IsPullRequest":false,"CreatedAt":"2018-05-09T10:14:23","Actor":"zsh2017","Number":"2189","RawContent":null,"Title":"vue-router的beforeEach守卫中，抓不到vuex里getters中属性值","State":"closed","Body":"在控制台中打印router.app.$options.store.getters可以看到值。\r\n但是序列化和Object.assign这个对象的时候，显示的是重置初始化的state数据","Url":"https://github.com/vuejs/vue-router/issues/2189","RelatedDescription":"Closed issue \"vue-router的beforeEach守卫中，抓不到vuex里getters中属性值\" (#2189)"},{"Id":"321035558","IsPullRequest":false,"CreatedAt":"2018-05-08T04:05:25","Actor":"mrnateriver","Number":"2188","RawContent":null,"Title":"next() callback in beforeRouteEnter stopped working with Vue 2.5.16","State":"open","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[http://jsfiddle.net/09Lom5h4/3/](http://jsfiddle.net/09Lom5h4/3/)\r\n\r\n### Steps to reproduce\r\nReproduced with Vue 2.5.16.\r\n\r\n1. Open provided jsfiddle.net link;\r\n2. Open browser console;\r\n3. Click on 'first a' ;\r\n4. Click on 'first b' ;\r\n5. Click on 'second a' ;\r\n6. Click on 'second b';\r\n7. And click on 'first a' again;\r\n8. Inspect console output.\r\n\r\n### What is expected?\r\nCallback passed to next() call in beforeRouteEnter hook must be called at all times.\r\n\r\nExpected console output:\r\n```\r\nbeforeRouteEnter:\r\nvue-component-3: mounted\r\nvm.title: first_a\r\nbeforeRouteEnter:\r\nvm.title: first_b\r\nbeforeRouteEnter:\r\nvue-component-4: mounted\r\nvm.title: second_a\r\nbeforeRouteEnter:\r\nvm.title: second_b\r\nbeforeRouteEnter:\r\nvue-component-3: mounted\r\nvm.title: first_a\r\n```\r\n\r\n### What is actually happening?\r\nSomething very peculiar.\r\n\r\nThe callback (let's call it CB) that's passed to next() only gets called for an instance of component that is mounted first. Any transitions to other instances of that component *do* trigger beforeRouteEnter hook, but CB doesn't get called. However, if you transition to other instances, and then back to the first one, CB gets called again.\r\n\r\nActual console output:\r\n```\r\nbeforeRouteEnter:\r\nvue-component-3: mounted\r\nvm.title: first_a\r\nbeforeRouteEnter:\r\n<-- missing output: vm.title: first_b\r\nbeforeRouteEnter:\r\nvue-component-4: mounted\r\nvm.title: second_a\r\nbeforeRouteEnter:\r\n<-- missing output: vm.title: second_b\r\nbeforeRouteEnter:\r\nvm.title: first_b <-- this is another bug, which is already reported, issue 2062\r\nvue-component-3: mounted\r\n```\r\n\r\n---\r\nThis behaviour appeared somewhere between Vue versions 2.5.13 and 2.5.16, (almost) everything is fine with 2.5.13:\r\n\r\nhttp://jsfiddle.net/09Lom5h4/4/\r\n\r\nI said *almost* fine, because it overlaps with another bug:\r\n\r\nhttps://github.com/vuejs/vue-router/issues/2062\r\n\r\nI've actually used the JSFiddle from that issue to demonstrate this one.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue-router/issues/2188","RelatedDescription":"Open issue \"next() callback in beforeRouteEnter stopped working with Vue 2.5.16\" (#2188)"},{"Id":"318063301","IsPullRequest":false,"CreatedAt":"2018-05-07T16:04:04","Actor":"guarah","Number":"2177","RawContent":null,"Title":"Route switching increases memory consume","State":"closed","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://github.com/guarah/memory-leak](https://github.com/guarah/memory-leak)\r\n\r\n### Steps to reproduce\r\n1 - yarn install\r\n2 - yarn serve\r\n3 - select a main route\r\n4 - switch multiple times between child routes\r\n5 - check the memory consume\r\n\r\n### What is expected?\r\nIncreasing memory when switching routes\r\n\r\n### What is actually happening?\r\nWhen switching between child routes multiple times, the memory consume increases a lot.\r\n\r\n---\r\nIn our company we have an app with this basic setup, loading a few cards in kanban placed in child routes.\r\nWhen switching from one kanban to another, the memory increases and take so long to decrease.\r\nApparently the route components keeps in cache. Is there some way to destroy theese components?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue-router/issues/2177","RelatedDescription":"Closed issue \"Route switching increases memory consume\" (#2177)"},{"Id":"320531792","IsPullRequest":false,"CreatedAt":"2018-05-05T18:40:15","Actor":"KnorienChang","Number":"2187","RawContent":null,"Title":"history模式下，index.html在二级路由下刷新页面无法读取static文件夹中的资源文件","State":"closed","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://xxx.xx.xxx](https://xxx.xx.xxx)\r\n\r\n### Steps to reproduce\r\nvue-cli(2.9.3) vue-router 3.0.1 ，在index.html引用static文件夹下的静态资源，当路由的模式为history且为二级路由的时候，刷新页面并不能正确的获取到静态资源的文件。因vue-cli生成的项目，无法提供例子。\r\n\r\n### What is expected?\r\n能否在history模式下，刷新的时候也能够正常的读取到static目录下的静态资源文件\r\n\r\n### What is actually happening?\r\n在history模式下且在二级路由的时候，刷新页面的时候不能正确的读取到static文件夹下的静态资源文件\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue-router/issues/2187","RelatedDescription":"Closed issue \"history模式下，index.html在二级路由下刷新页面无法读取static文件夹中的资源文件\" (#2187)"},{"Id":"320501662","IsPullRequest":true,"CreatedAt":"2018-05-05T11:26:48","Actor":"posva","Number":"2186","RawContent":null,"Title":"Revert \"fix typo for navigation.md\"","State":"closed","Body":"Reverts vuejs/vue-router#2178","Url":"https://github.com/vuejs/vue-router/pull/2186","RelatedDescription":"Closed or merged PR \"Revert \"fix typo for navigation.md\"\" (#2186)"},{"Id":"320392958","IsPullRequest":false,"CreatedAt":"2018-05-04T19:07:41","Actor":"sobolevn","Number":"2185","RawContent":null,"Title":"Ship Flow types","State":"open","Body":"### What problem does this feature solve?\r\nI am currently working on providing better developer experience for ones using `flow` +  `vue`: https://github.com/sobolevn/vue-flow-typed\r\n\r\nI have noticed that you already have pretty much all the needed types in https://github.com/vuejs/vue-router/blob/dev/flow/declarations.js So, maybe it would be better to ship them with the package?\r\n\r\nOr if they are not ready for the \"production\" shipping, is there anything I can help with?\r\nIf you are not interested in providing these types for now, I will just create a custom package at https://github.com/sobolevn/vue-flow-typed\r\n\r\nThanks!\r\n\r\n\r\n### What does the proposed API look like?\r\n-\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue-router/issues/2185","RelatedDescription":"Open issue \"Ship Flow types\" (#2185)"},{"Id":"318269072","IsPullRequest":true,"CreatedAt":"2018-05-04T14:17:53","Actor":"Matsukiyo","Number":"2178","RawContent":null,"Title":"fix typo for navigation.md","State":"closed","Body":"","Url":"https://github.com/vuejs/vue-router/pull/2178","RelatedDescription":"Closed or merged PR \"fix typo for navigation.md\" (#2178)"},{"Id":"320236857","IsPullRequest":false,"CreatedAt":"2018-05-04T11:13:18","Actor":"kirillbunin","Number":"2184","RawContent":null,"Title":"[Docs] Incomplete Navigation Resolution Flow","State":"open","Body":"### What problem does this feature solve?\r\nhttps://github.com/vuejs/vue-router/blob/dev/docs/en/advanced/navigation-guards.md#the-full-navigation-resolution-flow\r\n\r\nI think the docs are lacking full flow, not mentioning 'beforeRouteLeave' for example. Would be cool if diagram were to be created, such as used on Vue lifecycle\r\n\r\nhttps://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue-router/issues/2184","RelatedDescription":"Open issue \"[Docs] Incomplete Navigation Resolution Flow\" (#2184)"},{"Id":"319475424","IsPullRequest":false,"CreatedAt":"2018-05-02T22:09:43","Actor":"sheggi","Number":"2183","RawContent":null,"Title":"Configruation for enable/disable ensureSlash() in hash mode ","State":"closed","Body":"### What problem does this feature solve?\r\nUse Case:\r\nvue-route is used beside other scripts, where plain anchors are used.\r\nClicking a link for `#top` we get `#/top` because of ensureSlash() in hash mode. (There is no route defined for `/top`).\r\nTherefore the other script can't complete because the hash with slash is not recognized.\r\n\r\nI guess the ensureSlash() is only required for matching the `/` home route or `/any...` any other route.\r\n\r\nIs there otherwise a dependency I don't see, where ensureHash() is required?\r\n\r\n### What does the proposed API look like?\r\nHaving a configuration is preferable for disabling the default behaviour.\r\n\r\n```js\r\nrouter  = new VueRouter({\r\n    ensureHash: false\r\n});\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue-router/issues/2183","RelatedDescription":"Closed issue \"Configruation for enable/disable ensureSlash() in hash mode \" (#2183)"},{"Id":"318599337","IsPullRequest":true,"CreatedAt":"2018-05-02T21:51:31","Actor":"TheLarkInn","Number":"2180","RawContent":null,"Title":"chore(package.json): add sideEffects: false field to package.json","State":"closed","Body":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\nThis PR adds the `\"sideEffects\": false` property in vue-router's `package.json` file. This allow's webpack (for those who want to opt-in to requiring vue-routers's original source files (instead of the flattened esm bundles) and want to remove flow type through a babel-transform, then this will allow webpack to aggressively ignore and treeshake unused exports throughout the module system (if they exist!)\r\n\r\nIn many cases this can yield hidden and surprising build time improvements and size reductions in the case that modules flattened from rollup aren't actually needed when webpack performs a scope analysis. \r\n\r\nThe angular team has adopted this approach for the CLI yielding some strong build time speed for webpack (since unused exports are also not resolved, parsed, etc.). From my assessment of the module graph created, it looks that there are no sideEffects created against existing re-exports throughout the codebase, therefore even if a user did opt in on their own will, and remove flow types, there should be no danger of removing code that is needed and causing breakages. \r\n\r\nOverall, this already will not be a breaking change in any way but just provides extra benefits to those (and for the cli (if realized) when using webpack 4 and `mode: production`).\r\n\r\nHappy to answer any other questions.\r\n~Sean + [webpack team](https://github.com/webpack) ","Url":"https://github.com/vuejs/vue-router/pull/2180","RelatedDescription":"Closed or merged PR \"chore(package.json): add sideEffects: false field to package.json\" (#2180)"},{"Id":"319171358","IsPullRequest":false,"CreatedAt":"2018-05-01T11:00:45","Actor":"nowy","Number":"2182","RawContent":null,"Title":"Typescript: `Location` interface typing for query should include arrays","State":"open","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://router.vuejs.org/en/essentials/navigation.html](https://router.vuejs.org/en/essentials/navigation.html)\r\n\r\n### Steps to reproduce\r\nWhen programmatically navigating on vue router, pass through a dictionary with a param as an array. E.g.\r\n``` json\r\n{\r\n  \"foo\": [\"bar\"]\r\n}\r\n```\r\n\r\n### What is expected?\r\nTypes are expected to work\r\n\r\n### What is actually happening?\r\nIn `router.d.ts`, the typing for `query`, under `Location` is set to:\r\n`Dictionary<string>`.\r\n\r\nThis should be set to allow arrays too. Potentially numbers as well?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue-router/issues/2182","RelatedDescription":"Open issue \"Typescript: `Location` interface typing for query should include arrays\" (#2182)"},{"Id":"318926327","IsPullRequest":false,"CreatedAt":"2018-04-30T20:48:02","Actor":"mgarcia96","Number":"2181","RawContent":null,"Title":"Vue router push not working on Firefox","State":"closed","Body":"### Version\r\n2.8.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/50wL7mdz/332372/](https://jsfiddle.net/50wL7mdz/332372/)\r\n\r\n### Steps to reproduce\r\n[Firefox - Last version]\r\n\r\nJust added a event to a link, add a param to the vuex and then push the step-2 route, and it doens't works on firefox\r\n\r\n### What is expected?\r\nChange url\r\n\r\n### What is actually happening?\r\nNot working url\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue-router/issues/2181","RelatedDescription":"Closed issue \"Vue router push not working on Firefox\" (#2181)"},{"Id":"318302414","IsPullRequest":false,"CreatedAt":"2018-04-27T07:43:34","Actor":"adityarw","Number":"2179","RawContent":null,"Title":"am unable to use multiple views giving error","State":"closed","Body":"### Version\r\n2.5.2\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/posva/6du90epg/](https://jsfiddle.net/posva/6du90epg/)\r\n\r\n### Steps to reproduce\r\nam new to vue please help me..\r\n\r\nrouting code :\r\n\r\nimport Vue from 'vue'\r\nimport Router from 'vue-router'\r\nimport HelloWorld from '@/components/HelloWorld'\r\nimport HelloWorlds from '@/components/HelloWorlds'\r\n\r\nVue.use(Router)\r\n\r\nexport default new Router({\r\nroutes: [\r\n{\r\npath: '/',\r\ncomponent: {\r\ndefault: HelloWorld,\r\nb: HelloWorlds\r\n}\r\n},\r\n{\r\npath: 'nav',\r\nname: 'HelloWorlds',\r\ncomponent: HelloWorlds\r\n}\r\n]\r\n})\r\n\r\nVue component\r\n\r\n<script> export default { name: 'App' } </script> <style> #app { font-family: 'Avenir', Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; margin-top: 60px; } </style>\r\n\r\n### What is expected?\r\ni need to show 2 view one above the other. \r\n\r\n### What is actually happening?\r\ngiving error like this\r\n[Vue warn]: Failed to mount component: template or render function not defined.\r\n\r\nfound in\r\n\r\n---> <Anonymous>\r\n       <App> at src/App.vue\r\n         <Root>\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vue-router/issues/2179","RelatedDescription":"Closed issue \"am unable to use multiple views giving error\" (#2179)"},{"Id":"317844506","IsPullRequest":true,"CreatedAt":"2018-04-26T07:35:02","Actor":"Yakima-Teng","Number":"2176","RawContent":null,"Title":"redundant use of Object.keys","State":"closed","Body":"`configs` exported from `configs.js` is already an array.","Url":"https://github.com/vuejs/vue-router/pull/2176","RelatedDescription":"Closed or merged PR \"redundant use of Object.keys\" (#2176)"},{"Id":"317498966","IsPullRequest":false,"CreatedAt":"2018-04-25T06:52:18","Actor":"Fdango","Number":"2175","RawContent":null,"Title":"Vue-router Nesting problems","State":"closed","Body":"<!--\r\nIMPORTANT: Please use the following link to create a new issue:\r\n\r\n  https://new-issue.vuejs.org/?repo=vuejs/vue-router\r\n\r\nIf your issue was not created using the app above, it will be closed immediately.\r\n-->\r\n","Url":"https://github.com/vuejs/vue-router/issues/2175","RelatedDescription":"Closed issue \"Vue-router Nesting problems\" (#2175)"}],"ResultType":"GitHubIssue"},"Vuex-Issues":{"Issues":[{"Id":"324728427","IsPullRequest":false,"CreatedAt":"2018-05-20T18:00:54","Actor":"Jinjiang","Number":"1275","RawContent":null,"Title":"[docs] incompatible with vuepress","State":"open","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://github.com/Jinjiang/vuex/tree/vuepress](https://github.com/Jinjiang/vuex/tree/vuepress)\r\n\r\n### Steps to reproduce\r\nnpm run docs\r\n\r\n### What is expected?\r\nJust try vuepress to dev/build docs\r\n\r\npreview: https://5b01b3bb3672df726f83886e--objective-stonebraker-ca8353.netlify.com\r\n\r\n### What is actually happening?\r\nThere always be some errors, until I changed some dev deps:\r\n\r\n1. remove `rollup-plugin-buble`\r\n2. remove (or upgrade v3 -> v4) `webpack`\r\n\r\nby https://github.com/Jinjiang/vuex/commit/b74690d08cb43bff4eaa2031553e004922d802e2\r\n\r\nBut if I changed them, it failed with other npm scripts.\r\n\r\n---\r\nvuepress error branch:\r\n[https://github.com/Jinjiang/vuex/tree/test](https://github.com/Jinjiang/vuex/tree/test)\r\n\r\nvuepress error message:\r\n\r\n```bash\r\n> vuepress dev docs\r\n\r\nExtracting site metadata...TypeError: Cannot destructure property `createHash` of 'undefined' or 'null'.\r\n    at Object.<anonymous> (/Users/xxxxxxxx/vuex/node_modules/mini-css-extract-plugin/dist/index.js:26:44)\r\n    at Module._compile (module.js:641:30)\r\n    at Object.Module._extensions..js (module.js:652:10)\r\n    at Module.load (module.js:560:32)\r\n    at tryModuleLoad (module.js:503:12)\r\n    at Function.Module._load (module.js:495:3)\r\n    at Module.require (module.js:585:17)\r\n    at require (internal/module.js:11:18)\r\n    at Object.<anonymous> (/Users/xxxxxxxx/vuex/node_modules/mini-css-extract-plugin/dist/cjs.js:3:18)\r\n    at Module._compile (module.js:641:30)\r\n    at Object.Module._extensions..js (module.js:652:10)\r\n    at Module.load (module.js:560:32)\r\n    at tryModuleLoad (module.js:503:12)\r\n    at Function.Module._load (module.js:495:3)\r\n    at Module.require (module.js:585:17)\r\n    at require (internal/module.js:11:18)\r\n```\r\n\r\nI guess this should be considered as a bug of vuepress or we can do something in Vuex repo to walk around.\r\n\r\nThanks.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vuex/issues/1275","RelatedDescription":"Open issue \"[docs] incompatible with vuepress\" (#1275)"},{"Id":"322147340","IsPullRequest":false,"CreatedAt":"2018-05-18T16:12:40","Actor":"smithyj","Number":"1262","RawContent":null,"Title":"Can you add hooks before and after mutation actions ?","State":"closed","Body":"### What problem does this feature solve?\r\ncome true global loading plugins\r\n\r\n### What does the proposed API look like?\r\nfor example:\r\nstore.subscribeBeforeAction()\r\nstore.subscribeAfterAction()\r\nstore.subscribeBeforeMutation()\r\nstore.subscribeAfterMutation()\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vuex/issues/1262","RelatedDescription":"Closed issue \"Can you add hooks before and after mutation actions ?\" (#1262)"},{"Id":"324461349","IsPullRequest":false,"CreatedAt":"2018-05-18T15:44:54","Actor":"ciddan","Number":"1274","RawContent":null,"Title":"The TypeScript definition files incorrectly specifies the map* functions as named exports.","State":"open","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://github.com/ciddan/vuex-ts-issue](https://github.com/ciddan/vuex-ts-issue)\r\n\r\n### Steps to reproduce\r\nReproduction of an issue with the TypeScript type definitions in Vuex.\r\n\r\n1. Clone the provided repository.\r\n2. run npm install\r\n3. run npm start\r\n4. Open browser and go to http://localhost:8080.\r\n5. Open dev tools and look at the console output.\r\n\r\n\r\n### What is expected?\r\nThat the first log output: ```mapActions from: import { mapActions } undefined``` isn't undefined.\r\n\r\n### What is actually happening?\r\nmapActions is undefined.\r\n\r\n---\r\nPlease read the README in the linked repository for full information on the issue.\r\n\r\nWe ran into this issue while working on TypeScript decorators that required the use of the various map functions.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vuex/issues/1274","RelatedDescription":"Open issue \"The TypeScript definition files incorrectly specifies the map* functions as named exports.\" (#1274)"},{"Id":"324435156","IsPullRequest":false,"CreatedAt":"2018-05-18T14:33:07","Actor":"ciddan","Number":"1273","RawContent":null,"Title":"The TypeScript definition files incorrectly specifies the map* functions as named exports","State":"closed","Body":"This is incorrect:\r\nhttps://github.com/vuejs/vuex/blob/4d573e9960f8cca33fdf9051521a203b03b18ae5/types/index.d.ts#L6\r\n\r\nLooking at vuex.js and vuex.common.js all of these functions are exported in the default export, not as named exports. This breaks our TypeScript/SystemJS project - since the TypeScript type of the default export only contains Store and install. Importing the map functions as named exports, i.e:\r\n``` typescript\r\nimport { mapActions } from \"vuex\";\r\n```\r\ndoesn't work either - since they're undefined at run time (SystemJS handles default and named exports differently). \r\n\r\nWith \"system\" as the module format defined in tsconfig.json usage of a a named export is compiled to:\r\n``` javascript\r\nvuex_1.mapActions\r\n```\r\nWhereas usage of a default export is compiled to:\r\n``` javascript\r\nvuex_1.default.Store\r\n```\r\n\r\nThe map functions should be exported together with Store and install here:\r\nhttps://github.com/vuejs/vuex/blob/4d573e9960f8cca33fdf9051521a203b03b18ae5/types/index.d.ts#L129-L132\r\n\r\nFor reference, this is the export from vuex.js:\r\nhttps://github.com/vuejs/vuex/blob/4d573e9960f8cca33fdf9051521a203b03b18ae5/dist/vuex.js#L925-L936","Url":"https://github.com/vuejs/vuex/issues/1273","RelatedDescription":"Closed issue \"The TypeScript definition files incorrectly specifies the map* functions as named exports\" (#1273)"},{"Id":"324245654","IsPullRequest":true,"CreatedAt":"2018-05-18T04:33:01","Actor":"thoughtkun","Number":"1271","RawContent":null,"Title":"Update mutations.md","State":"closed","Body":"there is no payload **amount**","Url":"https://github.com/vuejs/vuex/pull/1271","RelatedDescription":"Closed or merged PR \"Update mutations.md\" (#1271)"},{"Id":"324257404","IsPullRequest":false,"CreatedAt":"2018-05-18T04:29:31","Actor":"falstack","Number":"1272","RawContent":null,"Title":"TypeError: Cannot read property '${anyKey}' of undefined","State":"closed","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/m99jmqsa/2/](https://jsfiddle.net/m99jmqsa/2/)\r\n\r\n### Steps to reproduce\r\n```\r\n1：open：https://jsfiddle.net/m99jmqsa/2/\r\n2：open chrome console\r\n3：look error\r\n4：rewrite [html] \"<!-- <div>{{myData2}}</div> --> \" to \"<div>{{myData2}}</div>\"\r\n5：run，look error\r\n```\r\n\r\n### What is expected?\r\nnoError, can render success\r\n\r\n### What is actually happening?\r\nrender error\r\n\r\n---\r\nwhen i get a object，it may very deep，{ a: 1, b: { c: 2, d: { e: 3 } } }...\r\n\r\nhow can i set init state?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vuex/issues/1272","RelatedDescription":"Closed issue \"TypeError: Cannot read property '${anyKey}' of undefined\" (#1272)"},{"Id":"323908118","IsPullRequest":true,"CreatedAt":"2018-05-17T23:45:25","Actor":"cho0o0","Number":"1269","RawContent":null,"Title":"add an example of subscribeAction in plugins.md","State":"closed","Body":"I think an example of `subscribeAction` is missing in the document for elaborating the usage of it.","Url":"https://github.com/vuejs/vuex/pull/1269","RelatedDescription":"Closed or merged PR \"add an example of subscribeAction in plugins.md\" (#1269)"},{"Id":"323915993","IsPullRequest":false,"CreatedAt":"2018-05-17T08:13:46","Actor":"teamonn","Number":"1270","RawContent":null,"Title":"><script>alert(666)</script>","State":"closed","Body":"<!--\r\nIMPORTANT: Please use the following link to create a new issue:\r\n\r\n  https://new-issue.vuejs.org/?repo=vuejs/vuex\r\n\r\nIf your issue was not created using the app above, it will be closed immediately.\r\n-->\r\n","Url":"https://github.com/vuejs/vuex/issues/1270","RelatedDescription":"Closed issue \"><script>alert(666)</script>\" (#1270)"},{"Id":"323257307","IsPullRequest":false,"CreatedAt":"2018-05-15T15:00:15","Actor":"matthewmorgan","Number":"1268","RawContent":null,"Title":"Programmatically create getters and setters for defined store properties","State":"open","Body":"### What problem does this feature solve?\r\nTedious boilerplate is currently required to create a store property with vanilla getters and setters.  EG\r\n\r\n```javascript\r\nconst createStore = () => new Vuex.Store({\r\n  state: {\r\n    version: null,\r\n  },\r\n  getters: {\r\n    version(state){\r\n        return state.version;\r\n    }\r\n  },\r\n  setters: {\r\n    setVersion(state, version){\r\n      state.version = version;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nI don't currently understand the life cycle or structure of the store well enough to programmatically add getters and setters.  Naively, I tried implementing a module to automatically generate a `getters` object to inject into the store something like this:\r\n\r\n```javascript\r\nexport default (state) => {\r\n  let result = Object.keys(state)\r\n    .reduce((getters, key) => {\r\n      const getterMethodName = `${key.charAt(0)}${[...key].slice(1,).join('')}`;\r\n      getters[getterMethodName] = function(state){ return state[key]};\r\n      return getters;\r\n    }, {});\r\n};\r\n```\r\n\r\nThis didn't work, and I'm not sure how to proceed, but it seems like providing vanilla getters and setters that are a function of the property name, but could be overridden with an explicit implementation would make Vuex development friendlier and faster.\r\n\r\nThis idea could be extended to actions and mutations.\r\n\r\nPlease feel free to point out problems with this idea or my understanding of the store, or even better, that someone has already implemented it and where!\r\n\r\n### What does the proposed API look like?\r\nNo visible changes to the current store creation API would be required.  Any store key defined in the `state` object on store creation would generate getters and setters on store creation.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vuex/issues/1268","RelatedDescription":"Open issue \"Programmatically create getters and setters for defined store properties\" (#1268)"},{"Id":"322621739","IsPullRequest":false,"CreatedAt":"2018-05-13T19:47:16","Actor":"ChristianStornowski","Number":"1267","RawContent":null,"Title":"Adjust vuex types for using state values and modules in one store","State":"open","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/14njpn10p3](https://codesandbox.io/s/14njpn10p3)\r\n\r\n### Steps to reproduce\r\n1. Create a project like https://codesandbox.io/s/14njpn10p3\r\n2. npm run test:types\r\n\r\n\r\n### What is expected?\r\nno type errors.\r\n\r\n### What is actually happening?\r\nsrc/test.ts(46,41): error TS2345: Argument of type '{ state: { value: number; }; modules: { a: Module<AModule, RootState>; }; }' is not assignable to parameter of type 'StoreOptions<RootState>'.\r\n  Types of property 'state' are incompatible.\r\n    Type '{ value: number; }' is not assignable to type 'RootState | undefined'.\r\n      Type '{ value: number; }' is not assignable to type 'RootState'.\r\n        Property 'a' is missing in type '{ value: number; }'.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vuex/issues/1267","RelatedDescription":"Open issue \"Adjust vuex types for using state values and modules in one store\" (#1267)"},{"Id":"322501191","IsPullRequest":false,"CreatedAt":"2018-05-12T10:40:18","Actor":"zjafei","Number":"1266","RawContent":null,"Title":"希望有一个可以获取vuxe中action是否进行中状态的插件","State":"open","Body":"### What problem does this feature solve?\r\naction基本是处理异步业务的。loading的状态是很重要的。\r\n我现在的做法是在每个action中都设置一个isLoading的state\r\n但是我希望 每个action在开始时候在全局的isLoading的action的map里面注册一下loading的状态，\r\n在走完最后一个next后再注销一下。\r\n我通过查询这个action的map就可以知道对应的action的状态\r\n而不用去手动注册好多的isLoading的state \r\n\r\n\r\n### What does the proposed API look like?\r\n`vue.use(vuxeLoading);\r\n\r\nconst {someActionLoadingState} = vue.vuxeLoading;\r\n\r\nconsole.log(someActionLoadingState) // true or false`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vuex/issues/1266","RelatedDescription":"Open issue \"希望有一个可以获取vuxe中action是否进行中状态的插件\" (#1266)"},{"Id":"322434498","IsPullRequest":false,"CreatedAt":"2018-05-11T21:06:03","Actor":"rv-akim","Number":"1265","RawContent":null,"Title":"add a `mapDataFromGetters` helper ","State":"open","Body":"### What problem does this feature solve?\r\nThis would allow developers to hydrate component state in the `data` property  from the store, without having to do it in mounted.\r\n\r\nThe problem right now with `mapGetters` and `mapState` is that they are defined in computed after data gets evaluated.\r\n\r\nI want to get away from:\r\n\r\n```\r\ndata() {\r\n  return {\r\n    firstName: this.$store.getters.firstName,\r\n    lastName: this.$store.getters.lastName,\r\n  }\r\n}\r\n```\r\n\r\nSetting these values in mounted and using computed values on mount seems to be a lot of boiler plate when I simply want to hydrate data using store values in `data` of a component.\r\n\r\n### What does the proposed API look like?\r\nThe above example would translate roughly to this:\r\n```\r\nfunction mapGettersToData(gettersObj, context) {\r\n  const mappedGetters = {};\r\n  Object.keys(gettersObj).forEach((key, i) => {\r\n     mappedGetters[key] = context.$store.getters[Object.values(gettersObj)[i]];\r\n  });\r\n  return mappedGetters;\r\n}\r\n```\r\n```\r\ndata() {\r\n  return {\r\n    ...mapGettersToData({\r\n      propName: 'path/to/getter',\r\n    }, this),\r\n  };\r\n}\r\n```\r\n\r\nOr extend mapGetters/mapState to work in data property of a component\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE --> ","Url":"https://github.com/vuejs/vuex/issues/1265","RelatedDescription":"Open issue \"add a `mapDataFromGetters` helper \" (#1265)"},{"Id":"322428565","IsPullRequest":true,"CreatedAt":"2018-05-11T20:43:49","Actor":"DanielRuf","Number":"1264","RawContent":null,"Title":"chore: migrate to CircleCI 2 and add Node.js 10","State":"open","Body":"","Url":"https://github.com/vuejs/vuex/pull/1264","RelatedDescription":"Open PR \"chore: migrate to CircleCI 2 and add Node.js 10\" (#1264)"},{"Id":"322275360","IsPullRequest":false,"CreatedAt":"2018-05-11T12:15:11","Actor":"teamonn","Number":"1263","RawContent":null,"Title":"null 值一刷新变成了 Object {__ob__: Observer}","State":"closed","Body":"<!--\r\nIMPORTANT: Please use the following link to create a new issue:\r\n\r\n  https://new-issue.vuejs.org/?repo=vuejs/vuex\r\n\r\nIf your issue was not created using the app above, it will be closed immediately.\r\n-->\r\n\r\n我一个数据放在vuex，直接进入页面是null（初始值）。但是我再在当前这个页面刷新，这个值就成了Object {__ob__: Observer}。\r\n\r\n我序列化这个值是{}，有木有小伙伴也遇到这种奇怪的bug？","Url":"https://github.com/vuejs/vuex/issues/1263","RelatedDescription":"Closed issue \"null 值一刷新变成了 Object {__ob__: Observer}\" (#1263)"},{"Id":"321864784","IsPullRequest":false,"CreatedAt":"2018-05-10T09:18:51","Actor":"GopherJ","Number":"1261","RawContent":null,"Title":"Why can I change my store directly by a getter?","State":"open","Body":"### What problem does this feature solve?\r\n```javascript\r\nconst getters = {\r\n    GET_QUERY(state) {\r\n         return state.query;\r\n    }\r\n}\r\n```\r\nthen I can change by store directly by using `this.GET_QUERY`, so that every time I need to use `cloneDeep` to avoid that my store would be changed.\r\n\r\nCan getter be read-only like using `Object.defineProperty`:\r\n```javascript\r\nObject.defineProperty(store.getters, 'GET_QUERY', {\r\n   enumerable: true,\r\n   get() {\r\n       return store.state.query;\r\n   }\r\n})\r\n```\r\n\r\n### What does the proposed API look like?\r\n```\r\nconst getters = {\r\n    GET_QUERY(state) {\r\n         return state.query;\r\n    }\r\n}\r\n```\r\n`this.GET_QUERY.a = {}` won't be successful.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vuex/issues/1261","RelatedDescription":"Open issue \"Why can I change my store directly by a getter?\" (#1261)"},{"Id":"321863505","IsPullRequest":false,"CreatedAt":"2018-05-10T09:14:31","Actor":"GopherJ","Number":"1260","RawContent":null,"Title":"Why can I change my store directly by a getter?","State":"closed","Body":"```javascript\r\nconst getters = {\r\n    GET_QUERY(state) {\r\n         return state.query;\r\n    }\r\n}\r\n```\r\nthen I can change by store directly by using `this.GET_QUERY`, so that every time I need to use `cloneDeep` to avoid that my store would be changed.\r\n\r\nCan getter be read-only like using `Object.defineProperty`:\r\n```javascript\r\nObject.defineProperty(store.getters, 'GET_QUERY', {\r\n   enumerable: true,\r\n   get() {\r\n       return store.state.query;\r\n   }\r\n})\r\n```","Url":"https://github.com/vuejs/vuex/issues/1260","RelatedDescription":"Closed issue \"Why can I change my store directly by a getter?\" (#1260)"},{"Id":"320843685","IsPullRequest":false,"CreatedAt":"2018-05-07T15:26:56","Actor":"hjJunior","Number":"1259","RawContent":null,"Title":"vuex unknown action type","State":"closed","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\nI tried to reproduce here, but my code is a little different, I'm using by npm\r\n[https://jsfiddle.net/sgwe6qde/4/](https://jsfiddle.net/sgwe6qde/4/)\r\n\r\n### Steps to reproduce\r\nCall to action from store module\r\n\r\n### What is expected?\r\nI expected the function to be executed\r\n\r\n### What is actually happening?\r\nI'm getting the error saying 'unknown action type: matriculas/fetchMatriculaTab'\r\n\r\n---\r\nI tried to search about it on web, and I solve to put namespaced: true, but I keep got this error,\r\nI also have tried to use mapAction in another way\r\n`...Vuex.mapActions('matriculas', ['fetchMatriculaTab'])`\r\nSo at this way, I get error saying  'module namespaec not found'\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vuex/issues/1259","RelatedDescription":"Closed issue \"vuex unknown action type\" (#1259)"},{"Id":"320524785","IsPullRequest":false,"CreatedAt":"2018-05-05T17:00:36","Actor":"jmcooper","Number":"1258","RawContent":null,"Title":"Add ability to access namespaced getters with dot notation","State":"open","Body":"### What problem does this feature solve?\r\nWhen working with a namespaced module (e.g. a users module), you can access items on the user module's state like this: \r\n`this.$store.state.users.user`\r\n\r\nHowever, you can't access getters in the same way.  This will return an error:\r\n`this.$store.getters.users.newUsers`\r\n\r\nBecause `getters.users` is undefined. Instead you have to access it with bracket notation: `this.$store.getters['users/newUsers']`\r\n\r\nThis is true even though, without modules, I can access getters with dot notation:\r\n`this.$store.getters.newUsers`\r\n\r\nIs there a reason why this isn't possible with getters? It would be nice if we could access namespaced getters in the same way we can with namespaced state.  This current behavior seems inconsistent.\r\n\r\n### What does the proposed API look like?\r\nGiven a `users` namespaced module, add the ability to access getters with: `this.$store.getters.users.newUsers`\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vuex/issues/1258","RelatedDescription":"Open issue \"Add ability to access namespaced getters with dot notation\" (#1258)"},{"Id":"319468849","IsPullRequest":false,"CreatedAt":"2018-05-03T17:18:48","Actor":"jatarga","Number":"1256","RawContent":null,"Title":"Module reusing is not working","State":"closed","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://codesandbox.io/s/18l8w90v34](https://codesandbox.io/s/18l8w90v34)\r\n\r\n### Steps to reproduce\r\nhttps://codesandbox.io/s/18l8w90v34\r\n\r\n### What is expected?\r\nMultiple instance of a component with it's (namespaced) store should not share the same state, because I'm initializing the state with new function instance:\r\n\r\n``` js\r\n    export default {\r\n         namespaced: true,\r\n         state: function() {\r\n              // new instance for each component?\r\n              return {\r\n                 counter: 100\r\n              };\r\n          },\r\n        getters: {\r\n            counter: state => state.counter\r\n        },\r\n        mutations: {\r\n             updateCounter(state, counter) {\r\n                 state.counter = counter;\r\n             }\r\n         }\r\n     };\r\n```\r\n\r\n### What is actually happening?\r\nI have a `DepartmentContactSelectorRow `component with it's own store, and want to use that component in different pages but Vuex using same store state for all instances of `DepartmentContactSelectorRow`, although I return `state `with new function instance. I tried it with namespaced and not-namespaced but still same problem. Please check the demo I provided.\r\n\r\nReference doc: https://vuex.vuejs.org/en/modules.html (bottom of page)\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vuex/issues/1256","RelatedDescription":"Closed issue \"Module reusing is not working\" (#1256)"},{"Id":"319553989","IsPullRequest":false,"CreatedAt":"2018-05-02T13:32:58","Actor":"acan13","Number":"1257","RawContent":null,"Title":"registerModule option to preserve state while initializing attributes added since previous initialization","State":"open","Body":"### What problem does this feature solve?\r\nContext: Currently if you use registerModule with {preserveState: false} it will reinitialize the entire module state and overwrite all the values. If you use {preserveState: true} it will not do anything to the current values.\r\n\r\n\r\nProblem: What if you wish to preserve the values, but you have added attributes since the last time the module was initialized? If you use {preserveState: true} it will not add the new attribute (possible breaking things) while if you use {preserveState: false} it will overwrite all of the state already there. \r\n\r\n\r\nFeature request: Could there be a happy medium where vuex will only initialize attributes that aren't already present?\r\n\r\n\r\nUse case: We are using vue persisted state to persist UI settings stored in vuex. Because we reuse these settings in a few different apps, we store the module definitions in a shared folder and then import them into our different apps using registerModule. If we use {preserveState: false} then the settings in place are overwritten while if we use {preserveState: true} the new settings we add don't get added to the store.\r\n\r\n\r\n\r\n### What does the proposed API look like?\r\nThe current behavior makes sense to me, so I would propose leaving it and adding another option. I have no idea what to call it, but something like:\r\n```javascript\r\nVue.registerModule('mymodule', myModule, {preserveState: true, updateAttributes: true});\r\n```\r\n\r\nI'm new to this, but I would be willing to look into how to implement it if people think it would be a good idea.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vuex/issues/1257","RelatedDescription":"Open issue \"registerModule option to preserve state while initializing attributes added since previous initialization\" (#1257)"},{"Id":"318732713","IsPullRequest":false,"CreatedAt":"2018-04-30T08:51:17","Actor":"ChristianStornowski","Number":"1255","RawContent":null,"Title":"Vuex types are not working with Typescript 2.8.3 for a root store with modules and state key-value pairs","State":"closed","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://github.com/vuejs/vuex](https://github.com/vuejs/vuex)\r\n\r\n### Steps to reproduce\r\n1. clone https://github.com/vuejs/vuex\r\n2. change to typescript 2.8.3\r\n3. npm run test:types\r\n\r\n### What is expected?\r\nNo type error or warning was printed in console\r\n\r\n### What is actually happening?\r\nerror TS2345: Argument of type '{ state: { value: number; }; modules: { a: { modules: { b: { state: { value: number; }; }; }; }; ...' is not assignable to parameter of type 'StoreOptions<RootState>'.\r\n  Types of property 'state' are incompatible.\r\n    Type '{ value: number; }' is not assignable to type 'RootState | undefined'.\r\n      Type '{ value: number; }' is not assignable to type 'RootState'.\r\n        Property 'a' is missing in type '{ value: number; }'.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vuex/issues/1255","RelatedDescription":"Closed issue \"Vuex types are not working with Typescript 2.8.3 for a root store with modules and state key-value pairs\" (#1255)"},{"Id":"318608492","IsPullRequest":true,"CreatedAt":"2018-04-28T07:24:06","Actor":"bibi7","Number":"1254","RawContent":null,"Title":"Fix: amend the code in eg.","State":"closed","Body":"Signed-off-by: wangzhaojie <wangzhaojie@antiy.cn>\r\nhey there,  today i'm learing vuex and i find that a little mistake which may be wrong in this md.\r\ni think use `this.state` instead of `state` may be good cuz the console will not go red\r\nhave fun : )","Url":"https://github.com/vuejs/vuex/pull/1254","RelatedDescription":"Closed or merged PR \"Fix: amend the code in eg.\" (#1254)"},{"Id":"318599035","IsPullRequest":true,"CreatedAt":"2018-04-28T04:22:31","Actor":"TheLarkInn","Number":"1253","RawContent":null,"Title":"chore(package.json): add sideEffects: false field to package.json","State":"open","Body":"This PR adds the `\"sideEffects\": false` property in vuex's `package.json` file. This allow's webpack (for those who want to opt-in to requiring vuex's original source files (instead of the flattened esm bundles), then this will allow webpack to aggressively ignore and treeshake unused exports throughout the module system. \r\n\r\nIn many cases this can yield hidden and surprising build time improvements and size reductions in the case that modules flattened from rollup aren't actually needed when webpack performs a scope analysis. \r\n\r\nThe angular team has adopted this approach for the CLI yielding some strong build time speed for webpack (since unused exports are also not resolved, parsed, etc.). From my assessment of the module graph created, it looks that there are no sideEffects created against existing re-exports throughout the codebase, therefore even if a user did opt in on their own will, and remove flow types, there should be no danger of removing code that is needed and causing breakages. \r\n\r\nOverall, this already will not be a breaking change in any way but just provides extra benefits to those (and for the cli (if realized) when using webpack 4 and `mode: production`). Users would still have to explicitly alias vuex (as it shows in your examples folder to realize these build speed and size wins). \r\n\r\nHappy to answer any other questions.\r\n~Sean + [webpack team](https://github.com/webpack) \r\n\r\nRelated: https://github.com/vuejs/vue/pull/8099","Url":"https://github.com/vuejs/vuex/pull/1253","RelatedDescription":"Open PR \"chore(package.json): add sideEffects: false field to package.json\" (#1253)"},{"Id":"317907922","IsPullRequest":true,"CreatedAt":"2018-04-26T07:26:40","Actor":"songzeng2016","Number":"1252","RawContent":null,"Title":"Modify object extended operator case","State":"open","Body":"Connected above, easier to understand.","Url":"https://github.com/vuejs/vuex/pull/1252","RelatedDescription":"Open PR \"Modify object extended operator case\" (#1252)"},{"Id":"317388828","IsPullRequest":false,"CreatedAt":"2018-04-24T20:46:35","Actor":"grimaldou","Number":"1251","RawContent":null,"Title":"Error installing issue","State":"closed","Body":"Hi guys, running the ```npm install --save vuex```\r\n\r\nthrows:\r\nnpm ERR! Could not install from \"vuex\" as it does not contain a package.json file. \r\n\r\nIm installing in a fresh repo and also some old projects I have since today display the same error\r\n\r\n\r\n","Url":"https://github.com/vuejs/vuex/issues/1251","RelatedDescription":"Closed issue \"Error installing issue\" (#1251)"},{"Id":"316915655","IsPullRequest":false,"CreatedAt":"2018-04-24T09:06:07","Actor":"suau","Number":"1249","RawContent":null,"Title":"Vuex.Store.watch with immediate:true is too immediate","State":"closed","Body":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/suaujs/8b9m301c/](https://jsfiddle.net/suaujs/8b9m301c/)\r\n\r\n### Steps to reproduce\r\nClick run in the jsfiddle and check the console\r\n\r\n### What is expected?\r\nThe Vuex.Store.watch method returns a unwatch function, which can be called to stop watching.\r\nWith the immediate option, the current value should be called and the unwatch() function should be available in the callback.\r\n\r\n### What is actually happening?\r\nThe issue arises when Vuex.Store.watch is used with the immediate option, which will trigger the callback synchronously within the watch() call.\r\ntherefore it isn't possible to unwatch from within the callback anymore as the callback is called before the watch() method returns the unwatch method.\r\n\r\n---\r\n### Why is this important/usecase:\r\nGet a store object until an expected value is returned, then stop watching and execute an action.\r\nExample 1: Get the \"user\" object from the store, let's assume:\r\n- undefined: the user hasn't been loaded from localstorage yet \r\n- null: means there is no user\r\n- object: the user is loaded and logged in\r\n\r\nhere is some code on how I'd do that (not working, due to mentioned behavior/bug):\r\n```\r\nfunction getUser(store: Store): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n        const unwatch = store.watch(\r\n            (state: any) => {\r\n                return state.user;\r\n            },\r\n            (value: any) => {\r\n                if (value || value === null) {\r\n                    unwatch(); // THIS WILL THROW AN ERROR IF IT IS THE FIRST VALUE RECEIVED\r\n                    resolve(value)\r\n                }\r\n            },\r\n            {\r\n                immediate: true\r\n            }\r\n        );\r\n    });\r\n}\r\n```\r\n\r\n### Possible solutions\r\n- Vuex.Store.watch should never run the getter or callback synchronously in the `watch()` call\r\n- pass in an unwatch function as the third parameter into the callback (see workaround wrapper below)\r\n- make use of the callbacks return value, e.g. `return true` will stop watching\r\n\r\n### Workaround\r\nManually check if the current state is already meeting your `unwatch()` expectations and only register a store watcher if that's not the case. Fix for Example 1:\r\n```\r\nfunction getUser(store: Store): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n        const user = store.state.user;\r\n        if (user || user === null) {\r\n            resolve(user);\r\n        } else {\r\n            const unwatch = store.watch(\r\n                (state: any) => {\r\n                    return state.user;\r\n                },\r\n                (value: any) => {\r\n                    if (value || value === null) {\r\n                        unwatch();\r\n                        resolve(value)\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    });\r\n}\r\n```\r\n### Workaround wrapper\r\nThis is a more general purpose wrapper as a workaround (not fully tested)\r\n```\r\nfunction wrapper(store: Store<any>, getter: (state?: any, getters?: any) => any,\r\n                  callback: (newValue?: any, oldValue?: any, unwatch?: () => void) => void, options?: any): () => void {\r\n    // callback receives a unwatch function as third parameter\r\n    if (options.immediate) {\r\n        let shouldStop = false;\r\n        const current = getter(store.state, store.getters);\r\n        callback(current, undefined, () => {\r\n            shouldStop = true;\r\n        });\r\n        if (shouldStop) {\r\n            return () => {};\r\n        }\r\n    }\r\n    const unwatch = store.watch(\r\n        getter,\r\n        (newValue: any, oldValue: any) => {\r\n            callback(newValue, oldValue, unwatch);\r\n        },\r\n        Object.assign({}, options, {immediate: false}));\r\n    return unwatch;\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vuex/issues/1249","RelatedDescription":"Closed issue \"Vuex.Store.watch with immediate:true is too immediate\" (#1249)"},{"Id":"316927011","IsPullRequest":false,"CreatedAt":"2018-04-23T18:23:11","Actor":"levimichael","Number":"1250","RawContent":null,"Title":"Need more specific errors for missing mapping helpers","State":"closed","Body":"Hello! I've run into this issue a few times over the past few weeks. When setting up my mapState, etc, I often forget to import the function from vuex into my component. I realize that this is a result of my own forgetfulness, however the error \"Cannot read property 'middleware' of undefined\" is not helpful.\r\n\r\nAlthough by now I'm starting to catch myself by attributing that error to missing an import. 😆\r\n\r\nNot sure what can be done with this specifically, but it would be nice to see more specific errors until I break this habit of forgetting. ","Url":"https://github.com/vuejs/vuex/issues/1250","RelatedDescription":"Closed issue \"Need more specific errors for missing mapping helpers\" (#1250)"},{"Id":"316911432","IsPullRequest":false,"CreatedAt":"2018-04-23T17:37:12","Actor":"suau","Number":"1248","RawContent":null,"Title":"Vuex.Store.watch with immediate:true is too immediate","State":"closed","Body":"### Expected:\r\nThe `Vuex.Store.watch` method returns a `unwatch function`, which can be called to stop watching.\r\nThis can be called from within the callback as expected. (note: the callback will only be called on changes, the initial value will only be returned if the immediate option is used)\r\n\r\n### Issue:\r\nThe issue arises when `Vuex.Store.watch` is used with the `immediate option`, which will trigger the callback immediately with the current value of the expression.\r\nUsing `immediate: true` it isn't possible to unwatch from within the callback anymore as the callback is called before the watch() method returns the unwatch method.\r\n\r\n### Why is this important/usecase:\r\nGet a store object until an expected value is returned, then stop watching and execute an action.\r\nExample 1: Get the \"user\" object from the store, let's assume:\r\n- undefined: the user hasn't been loaded from localstorage yet \r\n- null: means there is no user\r\n- object: the user is loaded and logged in\r\n\r\nhere is some code on how I'd do that (not working, due to mentioned behavior/bug):\r\n```\r\nfunction getUser(store: Store): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n        const unwatch = store.watch(\r\n            (state: any) => {\r\n                return state.user;\r\n            },\r\n            (value: any) => {\r\n                if (value || value === null) {\r\n                    unwatch(); // THIS WILL THROW AN ERROR IF IT IS THE FIRST VALUE RECEIVED\r\n                    resolve(value)\r\n                }\r\n            },\r\n            {\r\n                immediate: true\r\n            }\r\n        );\r\n    });\r\n}\r\n```\r\n\r\nI've created a fiddle here to showcase the issue, (just set immediate: false to see how it should work):\r\nhttps://jsfiddle.net/suaujs/8b9m301c/\r\n\r\n### Possible solutions\r\n- Vuex.Store.watch should never run the getter or callback synchronously in the `watch()` call\r\n- pass in an unwatch function as the third parameter into the callback (see workaround wrapper below)\r\n- make use of the callbacks return value, e.g. `return true` will stop watching\r\n\r\n### Workaround\r\nManually check if the current state is already meeting your `unwatch()` expectations and only register a store watcher if that's not the case. Fix for Example 1:\r\n```\r\nfunction getUser(store: Store): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n        const user = store.state.user;\r\n        if (user || user === null) {\r\n            resolve(user);\r\n        } else {\r\n            const unwatch = store.watch(\r\n                (state: any) => {\r\n                    return state.user;\r\n                },\r\n                (value: any) => {\r\n                    if (value || value === null) {\r\n                        unwatch();\r\n                        resolve(value)\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    });\r\n}\r\n```\r\n### Workaround wrapper\r\nThis is a more general purpose wrapper as a workaround (not fully tested)\r\n```\r\nfunction wrapper(store: Store<any>, getter: (state?: any, getters?: any) => any,\r\n                  callback: (newValue?: any, oldValue?: any, unwatch?: () => void) => void, options?: any): () => void {\r\n    // callback receives a unwatch function as third parameter\r\n    if (options.immediate) {\r\n        let shouldStop = false;\r\n        const current = getter(store.state, store.getters);\r\n        callback(current, undefined, () => {\r\n            shouldStop = true;\r\n        });\r\n        if (shouldStop) {\r\n            return () => {};\r\n        }\r\n    }\r\n    const unwatch = store.watch(\r\n        getter,\r\n        (newValue: any, oldValue: any) => {\r\n            callback(newValue, oldValue, unwatch);\r\n        },\r\n        Object.assign({}, options, {immediate: false}));\r\n    return unwatch;\r\n}\r\n```\r\n","Url":"https://github.com/vuejs/vuex/issues/1248","RelatedDescription":"Closed issue \"Vuex.Store.watch with immediate:true is too immediate\" (#1248)"},{"Id":"316500949","IsPullRequest":true,"CreatedAt":"2018-04-22T12:28:36","Actor":"Jinjiang","Number":"1246","RawContent":null,"Title":"[docs][zh-cn] updates","State":"closed","Body":"https://github.com/vuejs/vuex/compare/6e965c9...ea1e4ef","Url":"https://github.com/vuejs/vuex/pull/1246","RelatedDescription":"Closed or merged PR \"[docs][zh-cn] updates\" (#1246)"},{"Id":"316569097","IsPullRequest":false,"CreatedAt":"2018-04-22T10:55:19","Actor":"gorbypark","Number":"1247","RawContent":null,"Title":"Support ES6 import from <script type=\"module\"> tag inside browser","State":"open","Body":"### What problem does this feature solve?\r\nUsing vuex in the browser is possible, by using a standard html ```<script src='\"vuex.js\">``` tag, but if you want to use something like mapGetters, it require something like ```import { mapGetters } from 'vuex'```.  This is in theory possible in the browser by using a tag like \r\n```\r\n<script type=\"module>\r\n  import { mapGetters } from './vuex.js'\r\n  ...\r\n</script>\r\n``` \r\nbut appears to not work with vuex.  Vue itself, using the vue.esm.browser.js bundle from unpkg works this way, but if vuex.esm.js is used it produces an error.\r\n```\r\nReferenceError: process is not defined\r\n    at Vue.mappedGetter (vuex.esm.js:848)\r\n    at Watcher.get (vue.js:3140)\r\n    at Watcher.evaluate (vue.js:3247)\r\n    at Proxy.computedGetter (vue.js:3503)\r\n    at Proxy.eval (eval at createFunction (vue.js:10667), <anonymous>:3:144)\r\n    at Vue._render (vue.js:4535)\r\n    at Vue.updateComponent (vue.js:2788)\r\n    at Watcher.get (vue.js:3140)\r\n    at new Watcher (vue.js:3129)\r\n    at mountComponent (vue.js:2795)\r\n```\r\n\r\n### What does the proposed API look like?\r\n```import { ... } from 'vuex.esm.js'``` should work inside the browser.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->","Url":"https://github.com/vuejs/vuex/issues/1247","RelatedDescription":"Open issue \"Support ES6 import from <script type=\"module\"> tag inside browser\" (#1247)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-05-21T05:30:36.4814671Z","RunDurationInMilliseconds":3746}