{"Data":{"Blog":{"FeedItems":[{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel.Â Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing compatibility version in MVC","PublishedOn":"2018-02-27T22:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Ryan Nowak In 2.1 we&#8217;re adding a feature to address a long-standing problem for maintaining MVC &#8211; how do we make improvements to framework code without making it...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/introducing-compatibility-version-in-mvc/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Getting started with SignalR","PublishedOn":"2018-02-27T21:57:11+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Since 2013, ASP.NET developers have been using SignalR to build real-time web applications. Now, with ASP.NET Core 2.1 Preview 1, we&#8217;re bringing SignalR over to ASP.NET Core so you can build...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-getting-started-with-signalr/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Using ASP.NET Core Previews on Azure App Service","PublishedOn":"2018-02-27T19:18:20+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are 3 options to get ASP.NET Core 2.1 Preview applications running on Azure App Service: Installing the Preview1 site extension Deploying your app self-contained Using Web Apps for Containers...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-using-asp-net-core-previews-on-azure-app-service/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7367875631","Type":"IssuesEvent","CreatedAt":"2018-03-12T19:42:31","Actor":"gitfortee","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2950","RelatedDescription":"Opened issue \"dotnet core web api exception handling - unhandled exceptions\" (#2950) at aspnet/Home","RelatedBody":"The Main method in Program.cs in my dotnet core web api project has the following code.\r\n\r\n```\r\npublic static void Main(string[] args)\r\n{\r\n    var logger = LogManager.LoadConfiguration(\"nlog.config\").GetCurrentClassLogger();\r\n    try\r\n    {\r\n        BuildWebHost(args).Run();\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        //NLog: catch setup errors\r\n        logger.Error(ex, \"An exception occurred during application start.\");\r\n        throw;\r\n    }\r\n}  \r\n```  \r\nI also setup an exception handling middleware like this:\r\n\r\n```\r\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n{\r\n    app.UseResponseCompression();\r\n    app.UseMiddleware(typeof(HandleExceptionMiddleware));\r\n    app.UseMvc();\r\n}\r\n```\r\nShould i also add a `AppDomain.CurrentDomain.UnhandledException` ? to the` Main` method - since dotnet core web api is a console application?. Do I loose/gain any chances of trapping exceptions without this?"},{"Id":"7367563978","Type":"IssuesEvent","CreatedAt":"2018-03-12T18:41:09","Actor":"pakrym","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2923","RelatedDescription":"Closed issue \"React to MemoryPool<T> changes\" (#2923) at aspnet/Home","RelatedBody":"When we pull in a new CoreFX (https://github.com/dotnet/corefx/pull/27615), we need to update the SlabMemoryPool react to the following changes and fix the following bugs:\r\n\r\n- The default reference count needs to be set to 1 when referencing counting\r\n- We need to change our very simple Interlocked.Increment/Decrement to a loop https://github.com/dotnet/corefx/pull/27615#discussion_r171680369\r\n\r\n/cc @pakrym "},{"Id":"7367493683","Type":"IssuesEvent","CreatedAt":"2018-03-12T18:27:59","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2852","RelatedDescription":"Closed issue \"dotnet SomeAssembly.dll not loading appsettings.json\" (#2852) at aspnet/Home","RelatedBody":"_From @giridharprakash on February 2, 2018 4:46_\n\n## Steps to reproduce\r\ncreate new dotnet core web api project\r\nGet some configuration from appsettings.json in Startup.cs like eg connection string\r\ndotnet publish -c Release\r\nNow go to publish directory and run dotnet Assembly.dll\r\n\r\n## Expected  behavior\r\nWhile debugging in visual studio everything working fine\r\nbut when i run from command line then it's not loading appsettings.json\r\n\r\n## Actual behavior\r\nIn startup.cs connection string is coming as null\r\nvar connectionString = Configuration[\"AppSettings:ConnectionString\"];\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n dotnet --info\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#8523_"},{"Id":"7365092720","Type":"IssuesEvent","CreatedAt":"2018-03-12T11:35:58","Actor":"shaulbehr","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2947","RelatedDescription":"Closed issue \"Can you create authorization policies without using magic strings?\" (#2947) at aspnet/Home","RelatedBody":"In [this article](https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies) I see that you declare your authorization policy using a magic string:\r\n```\r\noptions.AddPolicy(\"AtLeast21\", policy =>\r\n    policy.Requirements.Add(new MinimumAgeRequirement(21)));\r\n```\r\nAnd then you tag your controller/endpoint with:\r\n```\r\n[Authorize(Policy = \"AtLeast21\")]\r\n```\r\nSo, let's say I have multiple endpoints, with different age requirements for each. Do I then need to declare a separate policy for each age cutoff?\r\n```\r\n...\r\noptions.AddPolicy(\"AtLeast18\", policy =>\r\n    policy.Requirements.Add(new MinimumAgeRequirement(18)));\r\noptions.AddPolicy(\"AtLeast19\", policy =>\r\n    policy.Requirements.Add(new MinimumAgeRequirement(19)));\r\noptions.AddPolicy(\"AtLeast20\", policy =>\r\n    policy.Requirements.Add(new MinimumAgeRequirement(20)));\r\noptions.AddPolicy(\"AtLeast21\", policy =>\r\n    policy.Requirements.Add(new MinimumAgeRequirement(21)));\r\n...\r\n```\r\nThat's really not going to be the answer, is it...? I mean, I could obviously write a loop to add policies for every age between 1 and 120, but what happens if my AuthenticationRequirement has more than one variable? Are we going to write a quadruple-nested loop for my requirement that has four variables, so I can declare distinct policies for each one? And what if my policy takes a `double` as a parameter?\r\n\r\nPlease, tell me I've misunderstood how this works."}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7369845659","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:24:41","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1582","RelatedDescription":"Opened issue \"Reduce memory usage of idle websockets with bufferless reads\" (#1582) at aspnet/SignalR","RelatedBody":"A common technique used to reduce memory usage of idle websockets is to issue a read with 0 bytes then issue the actual read with a buffer when data is ready. We should do this and measure the memory and throughput differences.\r\n\r\nWe may also need to make adjustments to the websocket middleware so that we can accept the websocket and configure the minimum buffer size (internally buffered by the websocket)."},{"Id":"7369722284","Type":"PullRequestEvent","CreatedAt":"2018-03-13T04:33:47","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1581","RelatedDescription":"Opened pull request \"Fix #1580 by correcting README sample\" (#1581) at aspnet/SignalR","RelatedBody":"Corrects the README sample in @aspnet/signalr-protocol-msgpack. The package is **intentionally** named `-protocol-` and the UMD module is also **intentionally** `.protocols.` (with an `s`). We may want to review that as it could be a source of confusion, but it has some prior art in NodeJS extensibility (specifically Babel uses some similar patterns: https://www.npmjs.com/package/babel-preset-env). We don't do the thing Babel does (yet) where we auto-`require` plugins though so it may not be necessary.\r\n\r\nRegardless of that decision, the README should... y'know... have accurate instructions :)\r\n\r\nFixes #1580 "},{"Id":"7369280317","Type":"IssuesEvent","CreatedAt":"2018-03-13T01:48:50","Actor":"ccic","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1580","RelatedDescription":"Opened issue \"The README of how to use signalr-protocol-msgpack has a bug\" (#1580) at aspnet/SignalR","RelatedBody":"@aspnet/dist/browser/signalr-protocol-msgpack.js defines \"signalR.protocol**s**.msgpack\", but the README asks developers to reference \"signalR.protocol.msgpack\", which caused error: msgpack is undefined.\r\n\r\nlet connection = new signalR.HubConnection('/chat', {\r\n    protocol: new signalR.protocol.msgpack.MessagePackHubProtocol()\r\n});"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7368970402","Type":"PullRequestEvent","CreatedAt":"2018-03-12T23:56:13","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7441","RelatedDescription":"Merged pull request \"Added JQueryQueryStringValueProvider\" (#7441) at aspnet/Mvc","RelatedBody":"[Fixes #6372] jQuery ajax request with complex data does not work with .net core 1.1 model bindings"},{"Id":"7368970398","Type":"IssuesEvent","CreatedAt":"2018-03-12T23:56:13","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/6372","RelatedDescription":"Closed issue \"jQuery ajax request with complex data does not work with .net core 1.1 model bindings\" (#6372) at aspnet/Mvc","RelatedBody":"I had posted a question here: https://stackoverflow.com/questions/44388722/net-core-model-binding-standard-different-from-net-4-6.\r\n\r\nFor example, I used this code to query data from server (.net 4.6) using jQuery (with success):\r\n```\r\nthis.xhr = $.ajax({\r\n    type: method,\r\n    url: uri,\r\n    headers: headers,\r\n    contentType: 'json',\r\n    data: this.data\r\n}).done((json) => {\r\n    resolve(json);\r\n}).fail((e) => {});\r\n```\r\n\r\nHere is the request payload:\r\n![image](https://user-images.githubusercontent.com/7732856/26870068-eb5ee0b2-4b98-11e7-9801-c9d9561282af.png)\r\n\r\nHowever, after upgrade the framework to .net core 1.1, the model binding always gives me empty model with every null properties. After searching around, I figured out that, instead of using \"Boundary[TopLeft][Lat]:11.140155424464904\", it must be \"Boundary.TopLeft.Lat.:11.140155424464904\". But I don't know how to do that using jQuery because it seems like jQuery always parse data into some kind of \"field[childField][2levelChildField]]\" but not \"field.childField.2levelChildField\"\r\n\r\nHere is the .net core action:\r\n![image](https://user-images.githubusercontent.com/7732856/26870246-93bd601c-4b99-11e7-8ab6-eb8ba603729f.png)\r\n\r\n\r\nIs there anyway to make .net core adapt to that?"},{"Id":"7368905627","Type":"IssuesEvent","CreatedAt":"2018-03-12T23:34:51","Actor":"JakenVeina","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7468","RelatedDescription":"Closed issue \"Consuming the ApplicationModel?\" (#7468) at aspnet/Mvc","RelatedBody":"Within ASP.NET Core...\r\n\r\nIs it possible for me to consume the current `ApplicationModel`, rather than just inject conventions into it? I.E. can I get an instance of it outside of an MVC class, and use it to configure other parts of my application?\r\n\r\nI'm trying to setup a joint WebApi/SignalR app, where all the main API methods are provided by MVC controllers, and SignalR simply provides a mechanism for clients to subscribe to events that MVC controllers fire off for certain data changes. I want to have clients be able to subscribe to only the events they need, through SignalR, which means I need some way for the events service to maintain a list of valid events. I'd like to have each controller define the events it can generate, rather than having events defined both in the controller code and in the SignalR code. My thought for doing this was...\r\n\r\n```csharp\r\n[Route(\"api/[controller]\")]\r\n[ApiEvent(\"created\")]\r\n[ApiEvent(\"modified\")]\r\n[ApiEvent(\"deleted\")]\r\npublic class NewsPostsController : ControllerBase { }\r\n```\r\n\r\nThis would define events with the names \"api/newsposts/created\", \"api/newsposts/modified\", and \"api/newsposts/deleted\" that are registered on the ControllerModel itself. I've actually got this part working properly, but I can't seem to find any mechanism to have my `ApiEventsService` get an instance of the `ApplicationModel`, so it can lookup whether a given event name is valid, or assemble a master list on startup of all the valid events."},{"Id":"7368116338","Type":"PullRequestEvent","CreatedAt":"2018-03-12T20:29:50","Actor":"ajaybhargavb","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7472","RelatedDescription":"Merged pull request \"Temporary workaround issue with Sdk mismatch\" (#7472) at aspnet/Mvc","RelatedBody":"This was causing an ArgNull exception because this code needs a newer version of RazorSdk but its build isn't available yet. We can remove this once we have a build.\r\n\r\ncc @pranavkm @ryanbrandenburg "},{"Id":"7367732642","Type":"PullRequestEvent","CreatedAt":"2018-03-12T19:13:36","Actor":"ajaybhargavb","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7472","RelatedDescription":"Opened pull request \"Temporary workaround issue with Sdk mismatch\" (#7472) at aspnet/Mvc","RelatedBody":"This was causing an ArgNull exception because this code needs a newer version of RazorSdk but its build isn't available yet. We can remove this once we have a build.\r\n\r\ncc @pranavkm @ryanbrandenburg "},{"Id":"7367153026","Type":"IssuesEvent","CreatedAt":"2018-03-12T17:27:00","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7443","RelatedDescription":"Closed issue \"Complex types implementing IValidatableObject is not being validated correctly\" (#7443) at aspnet/Mvc","RelatedBody":"I have following models and action in my test application based on 2.1.0-preview-final1.\r\n\r\n`SuppressModelStateInvalidFilter` is `true`\r\n\r\n``` C#\r\npublic class Parent : IValidatableObject\r\n{\r\n    public string ParentName { get; set; }\r\n\r\n    public Child Child { get; set; }\r\n\r\n    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)\r\n    {\r\n        if (ParentName == null)\r\n        {\r\n            yield return new ValidationResult(\"ParentName is null\");\r\n        }\r\n    }\r\n}\r\n\r\npublic class Child : IValidatableObject\r\n{\r\n    public string ChildName { get; set; }\r\n\r\n    public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)\r\n    {\r\n        if (ChildName == null)\r\n        {\r\n            yield return new ValidationResult(\"ChildName is null\");\r\n        }\r\n    }\r\n}\r\n\r\n[HttpPost(\"~/validate\")]\r\npublic ActionResult Index([FromBody]Parent parent)\r\n{\r\n    return Json(new\r\n    {\r\n        IsValid = ModelState.IsValid,\r\n        Errors = ModelState.Select(s => s.Value)\r\n    });\r\n}\r\n```\r\nIf I post following JSON payload:\r\n```\r\n{\r\n\t\"ParentName1\": \"parent\",\r\n\t\"Child\": {\r\n\t\t\"ChildName1\": \"child\",\r\n\t}\r\n}\r\n```\r\nresult is \r\n```\r\n{\r\n    \"isValid\": false,\r\n    \"errors\": [\r\n        {\r\n            \"childNodes\": null,\r\n            \"children\": null,\r\n            \"key\": \"Child\",\r\n            \"subKey\": {\r\n                \"buffer\": \"Child\",\r\n                \"offset\": 0,\r\n                \"length\": 5,\r\n                \"value\": \"Child\",\r\n                \"hasValue\": true\r\n            },\r\n            \"isContainerNode\": false,\r\n            \"rawValue\": null,\r\n            \"attemptedValue\": null,\r\n            \"errors\": [\r\n                {\r\n                    \"exception\": null,\r\n                    \"errorMessage\": \"ChildName is null\"\r\n                }\r\n            ],\r\n            \"validationState\": 1\r\n        }\r\n    ]\r\n}\r\n```\r\nBut if I remove `IValidatableObject` and add `[Required]` attributes to string properties then I'm getting following repsonse on same JSON payload:\r\n```\r\n{\r\n    \"isValid\": false,\r\n    \"errors\": [\r\n        {\r\n            \"childNodes\": null,\r\n            \"children\": null,\r\n            \"key\": \"ParentName\",\r\n            \"subKey\": {\r\n                \"buffer\": \"ParentName\",\r\n                \"offset\": 0,\r\n                \"length\": 10,\r\n                \"value\": \"ParentName\",\r\n                \"hasValue\": true\r\n            },\r\n            \"isContainerNode\": false,\r\n            \"rawValue\": null,\r\n            \"attemptedValue\": null,\r\n            \"errors\": [\r\n                {\r\n                    \"exception\": null,\r\n                    \"errorMessage\": \"The ParentName field is required.\"\r\n                }\r\n            ],\r\n            \"validationState\": 1\r\n        },\r\n        {\r\n            \"childNodes\": null,\r\n            \"children\": null,\r\n            \"key\": \"Child.ChildName\",\r\n            \"subKey\": {\r\n                \"buffer\": \"Child.ChildName\",\r\n                \"offset\": 6,\r\n                \"length\": 9,\r\n                \"value\": \"ChildName\",\r\n                \"hasValue\": true\r\n            },\r\n            \"isContainerNode\": false,\r\n            \"rawValue\": null,\r\n            \"attemptedValue\": null,\r\n            \"errors\": [\r\n                {\r\n                    \"exception\": null,\r\n                    \"errorMessage\": \"The ChildName field is required.\"\r\n                }\r\n            ],\r\n            \"validationState\": 1\r\n        }\r\n    ]\r\n}\r\n```\r\n## My little investigation\r\n\r\nIssue #7014 was fixed by #7075 PR which added new [`ValidateComplexTypesIfChildValidationFails`](https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Validation/ValidationVisitor.cs#L76) property to `ValidationVisitor` class to allow [validate parent](https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/Validation/ValidationVisitor.cs#L243-L244) even if one of children has failed. \r\nCode in PR was designed to solve issue by allowing to create custom class implementing `IObjectModelValidator` and by setting this new property to true. But `ParameterBinder` class which was using `IObjectModelValidator` to validate model has marked `IObjectModelValidator` as [obsolete](https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/ParameterBinder.cs#L82-L84) and now directly [uses](https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Core/ModelBinding/ParameterBinder.cs#L324) `ValidationVisitor`. This [code](https://github.com/aspnet/Mvc/blob/dev/src/Microsoft.AspNetCore.Mvc.Core/DependencyInjection/MvcCoreServiceCollectionExtensions.cs#L245) shows that framework stopped using obsolete constructors to create `ParameterBinder`.\r\n"},{"Id":"7367103818","Type":"IssuesEvent","CreatedAt":"2018-03-12T17:18:35","Actor":"ryanbrandenburg","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7437","RelatedDescription":"Closed issue \"DataAnnotationLocalizerProvider documentation wrong/incomplete\" (#7437) at aspnet/Mvc","RelatedBody":"Hi,\r\n\r\nI'm trying to localize DataAnnotations like \"[Require]\".\r\nI followed: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/localization#using-one-resource-string-for-multiple-classes\r\n\r\nI created a Resource called \"DataAnnotationsResource.resx\" in the \"Resources\" folder and added the following to my Startup.cs:\r\n\r\n```cs\r\n            services.AddLocalization(options => options.ResourcesPath = \"Resources\");\r\n\r\n            services.AddMvc()\r\n                .AddViewLocalization(LanguageViewLocationExpanderFormat.Suffix)\r\n                .AddDataAnnotationsLocalization(options =>\r\n                {\r\n                    options.DataAnnotationLocalizerProvider = (type, factory) =>\r\n                       factory.Create(typeof(DataAnnotationResource));\r\n                });\r\n```\r\n\r\nThe Localization of the whole page works however DataAnnotations are not translated. If I remove DataAnnotationLocalizerProvider and specify the translation inside the model.resx it works.\r\n\r\nThen I tested a bit and created a Controller which injects IStringLocalizerFactory and I tried to do the same as the function above:\r\n```cs\r\n            var createdlocalizer = factory.Create(typeof(DataAnnotationResource));\r\n            return Ok(createdlocalizer[\"Confirm password\"]);\r\n```\r\n\r\nAnd that results in:\r\n```json\r\n{\"name\":\"Confirm password\",\r\n\"value\":\"Confirm password\",\r\n\"resourceNotFound\":true,\r\n\"searchedLocation\":\"MyWebApp.Resources.Resources.DataAnnotationResource\"}\r\n```\r\n\r\nSo it adds \"Resources.\" to the 'Path'.\r\nI think that is a correct behaviour for Controller and View Localization where the Factory gets called with the Type of the Controller and gets the corresponding Resource from the Resource folder but in the case that is explained by the Docs it breaks Localization for DA as you can not Create an Instance of IStringLocalizer directly from the Resource Class.\r\n\r\nA workaround would be to create a dummy \"DataAnnotationResource\" class outside of the Resource folder which seems a bit ugly.\r\n\r\nIs there any better way to do that?"},{"Id":"7367094582","Type":"IssuesEvent","CreatedAt":"2018-03-12T17:16:59","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7442","RelatedDescription":"Closed issue \"Should Value helpers use EditFormatString?\" (#7442) at aspnet/Mvc","RelatedBody":"If both input and editor helpers use EditFormatString, shouldn't the Value[For[Model]] helpers do the same?"},{"Id":"7367009624","Type":"IssuesEvent","CreatedAt":"2018-03-12T17:02:43","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7364","RelatedDescription":"Closed issue \"Antiforgery Token could not be decrypted\" (#7364) at aspnet/Mvc","RelatedBody":"This seems related to this issue: https://github.com/aspnet/DataProtection/issues/233\r\n\r\nOn my production server, even under small load, I am getting decryption errors in the log:\r\nMicrosoft.AspNetCore.Antiforgery.Internal.DefaultAntiforgery: An exception was thrown while deserializing the token. The antiforgery token could not be decrypted.\r\n\r\nI am using Microsoft.AspNetCore.All 2.0.5\r\n\r\nWith the workaround described in the mentioned issue, the problem goes away\r\n"},{"Id":"7366988011","Type":"IssuesEvent","CreatedAt":"2018-03-12T16:59:15","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7342","RelatedDescription":"Closed issue \"No Page Named \"Foo\" when Custom Page Route is Added And Optional Parameter Removed From RouteData\" (#7342) at aspnet/Mvc","RelatedBody":"So I'm working with a Razor Page where the Page \"/Index\" has an optional parameter {Project?}. When the optional parameter is an invalid value, I want to redirect users back to Index with the optional parameter clear. To do this, I'm doing the following: \r\n\r\n```\r\n                RouteData.Values.Remove(\"TeamProject\");\r\n                return RedirectToPage(RouteData.Values);\r\n```\r\n\r\nWhen I include a custom Route like so:\r\n`options.Conventions.AddPageRoute(\"/Index\",\"{TeamProject}/home\");`\r\nThis always produces an error titled like so: \r\nInvalidOperationException: No page named '' matches the supplied values.\r\n\r\nIf I remove the AddPageroute call, the error disappears and the RedirectToPage executes fine. \r\nThe same thing occurs if instead I do:\r\n```\r\nRouteData.Values.Remove(\"TeamProject\");\r\nreturn RedirectToPage(\"/Index\")\r\n```\r\n\r\nPer #6957 I've tried adding in `options.Conventions.AddPageRoute(\"/Index\",\"\")` and still get the same error. \r\nBrowsing works fine in the browser, and in other places I've used ```RedirectToPage(\"/Index\")``` without clearing the TeamProject from the RouteData and it works fine. \r\n\r\nI'm sure the upcoming update will probably fix this, but I'm more curious what I'm doing wrong than anything. \r\n"},{"Id":"7366954361","Type":"IssuesEvent","CreatedAt":"2018-03-12T16:53:48","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7438","RelatedDescription":"Closed issue \"Razor Pages responding to all HTTP verbs\" (#7438) at aspnet/Mvc","RelatedBody":"I've been noticing some exceptions being logged on a Razor Pages application. The exceptions looked to be random, and were logged on pages that are incredibly simple and always worked perfectly when tested in a browser.\r\n\r\nEventually I tracked the errors down to when pages are requested with `HEAD` or `OPTIONS` HTTP verbs. The exceptions are thrown as the view is executed, because the page's `OnGet()` has not prepared the view model and it is in an uninitialised state.\r\n\r\nSome quick testing on an MVC project shows that things just seem to work as expected out of the box. If the action is decorated with any standard HTTP verbs (`[HttpGet]`, `[HttpPost]`) then a `HEAD` or `OPTIONS` request returns a 404 status response, which makes good sense. If there are no HTTP verb attributes present then a `HEAD` or `OPTIONS` request returns an empty 200 status response, which again seems fine.\r\n\r\nIs there a suggested best practice for dealing with the above with Razor Pages?"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7369582630","Type":"IssuesEvent","CreatedAt":"2018-03-13T03:38:01","Actor":"slaneyrw","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1677","RelatedDescription":"Opened issue \"Support Async password hashers\" (#1677) at aspnet/Identity","RelatedBody":"The latest set of hashing algorithms ( like Argon2 ) feature work, memory and parallelism hardness.  \r\n\r\nThe C# / .NET Core implementation of Argon2 hashing is Task based, but the IPasswordHasher interface isn't.\r\n\r\nAny plans on making the IPasswordHasher async ?  I know this would be a breaking change"},{"Id":"7368697819","Type":"PullRequestEvent","CreatedAt":"2018-03-12T22:34:40","Actor":"alexandre-spieser","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1676","RelatedDescription":"Opened pull request \"Added my ASP.NET Identity MongoDB Provider\" (#1676) at aspnet/Identity","RelatedBody":"Hi, \r\n\r\nI have implemented an ASP.NET Identity MongoDB Provider and would like to add it to the readme file.\r\n\r\nIt's covered by more than 800 integration tests and unit tests from the modified Microsoft.AspNetCore.Identity.EntityFrameworkCore.Test test suite."},{"Id":"7361863349","Type":"IssuesEvent","CreatedAt":"2018-03-11T12:51:03","Actor":"Tamaletjie","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1675","RelatedDescription":"Opened issue \"Lockout doesn't work if email address is invalid.\" (#1675) at aspnet/Identity","RelatedBody":"I'm developing an ASP.NET MVC app using ASP.Net Identity 2.2.1 in Visual Studio 2017. The app is for internal use only, does not use 2FA or password recovery and will have accounts managed by the user's manager. \r\n\r\nIn light of this I changed the login page to use the UserName field instead of the Email address field to identify the user. When I create users in dbo.AspNetUsers I populated the Email field with the same value as the UserName field e.g. JoeB. Doing so does not affect the login process but when it comes to triggering Automatic Lockouts for failed login attempts, this feature fails to trigger.\r\n\r\nThe following email addresses won't trigger a Lockout:\r\n\r\n**NULL\r\nJoeB\r\nJoeB@**\r\n\r\nAnything of the form _alphanumberic@alphanumberic_ seems to be OK (e.g. _JoeB@example_).\r\n\r\nTaking a look at the ASP.Net identity source code I think this bug is related to the last method in this call chain:\r\n\r\n-     SignInManager.CheckPasswordSignInAsync()\r\n-       UserManager.AccessFailedAsync(user)\r\n-         UserManager.UpdateUserAsync()\r\n-           UserManager.UpdateNormalizedEmailAsync(user)\r\n\r\nSince the email address doesn't exist or is invalid (according to some internal check?), the UpdateNormalizedEmailAsync(user) fails in some way causing the following record store.IncrementAccessFailedCountAsync(user, CancellationToken) to not be committed to the database.\r\n\r\nRunning SQL Profiler confirms that the SQL to update dbo.AspNetUsers.AccessFailedCount is never sent to the database if the email address is invalid.\r\n\r\nThis behavior may be by design (for reasons not obvious to me) but I've wasted many hours wrestling with this issue so I though I would log it here in case anyone else gets tripped up by it.\r\n\r\nP.S. The ApplicationManager.SupportsUserEmail is read-only so I can't use this to signal that Email address is not relevant."},{"Id":"7361636132","Type":"IssuesEvent","CreatedAt":"2018-03-11T10:11:41","Actor":"MonaLarsen","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1674","RelatedDescription":"Opened issue \"AggregateException occurs after converting User Id to int in ApplicationUser/ApplicationRole\" (#1674) at aspnet/Identity","RelatedBody":"By following this tutorial [Here](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-primary-key-configuration?tabs=aspnetcore2x) I got to succesfully convert the User Id to int so i can use Linq with operations done on users in my application.\r\n\r\nEverything worked fine here, but after creating default users in startup.cs like this:\r\n\r\n`    public async Task CreateUsersAndRoles(IServiceScope serviceScope)\r\n        {\r\n            var userManager = serviceScope.ServiceProvider.GetService<UserManager<ApplicationUser>>();\r\n            var roleManager = serviceScope.ServiceProvider.GetService<RoleManager<IdentityRole>>();\r\n\r\n            //Creating Admin role\r\n            await roleManager.CreateAsync(new IdentityRole(\"TopUser\"));\r\n            var TopUsers = new ApplicationUser { UserName = \"xxxxx@xx.com\", \r\n                                                  Email = \"xxx@xxxx.com\",  \r\n                                                  };\r\n\r\n\r\n            await userManager.CreateAsync(adminUser, \"xxxxxx\");\r\n            await userManager.AddToRoleAsync(TopUsers, \"TopUser\");\r\n\r\n}`\r\n\r\ni am getting an error in ` CreateUsersAndRoles(serviceScope).Wait();` that is not clear and i don't know why the compiling is failing as eveything seems to be logically working.\r\n\r\nHere is the error: `An exception of type 'System.AggregateException' occurred in System.Private.CoreLib.dll but was not handled in user code: 'One or more errors occurred.' Inner exceptions found, see $exception in variables window for more details. Innermost exception System.NullReferenceException : Object reference not set to an instance of an object.`\r\n\r\nWhat am i doing wrong? And how do i find the error that is causing the code to fail?"},{"Id":"7361489918","Type":"IssuesEvent","CreatedAt":"2018-03-11T08:18:39","Actor":"jenyayel","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1673","RelatedDescription":"Opened issue \"Compiled Razor views won't override default UI\" (#1673) at aspnet/Identity","RelatedBody":"I wonder if it is by design. \r\n\r\nIf I override, for instance, by adding a new file in my app `Areas/Identity/Pages/Account/Register.cshtml`, it will work fine when running/debugging locally. \r\n\r\nI noticed that when the app published, the override won't work. I made sure that the `<Something>.PrecompiledViews.dll` is generated and contains those views that I added to override. When I added `<MvcRazorCompileOnPublish>false</MvcRazorCompileOnPublish>` to csproj the overrides work again."},{"Id":"7358666452","Type":"PullRequestEvent","CreatedAt":"2018-03-09T22:58:38","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1672","RelatedDescription":"Merged pull request \"Remove unused used that fail to compile\" (#1672) at aspnet/Identity","RelatedBody":""},{"Id":"7358651923","Type":"PullRequestEvent","CreatedAt":"2018-03-09T22:54:05","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1672","RelatedDescription":"Opened pull request \"Remove unused used that fail to compile\" (#1672) at aspnet/Identity","RelatedBody":""},{"Id":"7357210123","Type":"PullRequestEvent","CreatedAt":"2018-03-09T17:17:37","Actor":"aguacongas","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1671","RelatedDescription":"Opened pull request \"Update README.md\" (#1671) at aspnet/Identity","RelatedBody":"Hi guys,\r\nToday I propose you Aguacongas.Identy.Redis, my implemention of APS.NET Identity Redis Provider"},{"Id":"7354196950","Type":"IssuesEvent","CreatedAt":"2018-03-09T05:22:21","Actor":"slaneyrw","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1670","RelatedDescription":"Opened issue \"Support password migration\" (#1670) at aspnet/Identity","RelatedBody":"I'm investigating a solution to migrating legacy passwords ( SHA256 cyptro provider, not Dbkdf2), MS ID v2, and MS ID v3 passwords to a new algorithm ( specifically Argon2 ) with the requirement to not store the old hash details post migration.\r\n\r\nMy thoughts are that during migration we...\r\n\r\n1. Take existing hash from the old algorithm and rehash the hash using the new algorithm\r\n2. Store the new passwordHash ( with it's metadata ) and the old algorithm's metadata\r\n\r\nDuring password verification we recursively run through the algorithms, taking the hashed output as the input into the next in the chain.  If the password matches then we rehash the password provided using the newest algorithm, akin to increasing the iterations in the MS ID password hasher.\r\n\r\nMy problem is that I cannot get the resultant hash from the IPasswordHasher instance evaluated during VerifyHashedPassword for use into the next algorithm into the chain, and if I call HashPassword it will give me a different hash for the same password because of the random 16 bytes into Pbkdf2.\r\n\r\nI already have a coordinator IPasswordHasher instance that inspects the algorithm byte and forwards the call to the relevant hasher.  It was my intent to have this coordinator loop/recurse through the chain.\r\n\r\nShort of completely rebuilding all the Password hashers ( including ASP.NET Identity ) to separate recalculating and compare functions the existing hashers, can you think of another way I could do this?\r\n"},{"Id":"7352340113","Type":"IssuesEvent","CreatedAt":"2018-03-08T20:14:56","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1341","RelatedDescription":"Closed issue \"GDPR Support\" (#1341) at aspnet/Identity","RelatedBody":"- [x] Extension points to enable encryption of user data\r\n- [x] Extension point to enable downloading of user data\r\n- [x] Extension point to enable deletion of user data"},{"Id":"7352336125","Type":"IssuesEvent","CreatedAt":"2018-03-08T20:14:05","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1621","RelatedDescription":"Closed issue \"Add an optional [PersonalData] attribute for use in the User type.\" (#1621) at aspnet/Identity","RelatedBody":"As part of the extensbility work, we should add some mechanism to easily attribute data which is considered personal data.  \r\n\r\nBy default we would use this for the default pocos, so the default UI can include these for personal download, and also wire them up automatically in the upcoming personal data encryption hooks.\r\n\r\n"},{"Id":"7352333896","Type":"PullRequestEvent","CreatedAt":"2018-03-08T20:13:35","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1562","RelatedDescription":"Merged pull request \"Initial EncryptPersonalData support\" (#1562) at aspnet/Identity","RelatedBody":"- new StoreOptions.EncryptPersonalData setting\r\n- new IPersonalDataEncryptor and IEncryptedUserStore interfaces that live in core\r\n- new `AddPersonalDataEncryptor<MyEncryptor>()` helper method on IdentityBuilder\r\n- The two concrete user stores in EF now implement IEncryptedUserStore\r\n- UserManager ctor throws if EncryptPersonalData is true if store is not IEncryptedUserStore, or if IPersonalDataEncryptor service not found\r\n- base IdentityUserContext hooks up ValueConverter using IPersonalDataEncryptor on UserName, NormalizedUserName, Email, NormalizedEmail, PhoneNumber columns when EncryptPersonalData is true.\r\n\r\nSo all of the normal store tests except one pass when turning this on with a dummy reverse encryptor. \r\n There's a test that that directly uses the DbSet as an IQueryable to look for users like so: `UserManager.Users.Count(u => u.UserName.StartsWith(\"CanFindUsersViaUserQuerable\"))` which fails because this probably bypasses the converters... @ajcvickers ?\r\n\r\ncc @blowdart @javiercn "}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7368702443","Type":"IssuesEvent","CreatedAt":"2018-03-12T22:35:44","Actor":"ryanbrandenburg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2377","RelatedDescription":"Opened issue \"Flaky test: BadHttpRequestTests.TestInvalidRequestLines\" (#2377) at aspnet/KestrelHttpServer","RelatedBody":"I saw [this](http://aspnetci/viewLog.html?buildId=419222&buildTypeId=XPlat_Linux_UbuntuUniverseCoreCLR) test fail with this error today:\r\n```\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvException : Error -111 ECONNREFUSED connection refused\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.LibuvTransport.<BindAsync>d__20.MoveNext() in /_/src/Kestrel.Transport.Libuv/LibuvTransport.cs:line 103\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.LibuvTransport.<BindAsync>d__20.MoveNext() in /_/src/Kestrel.Transport.Libuv/LibuvTransport.cs:line 113\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.<>c__DisplayClass22_0`1.<<StartAsync>g__OnBind|0>d.MoveNext() in /_/src/Kestrel.Core/KestrelServer.cs:line 154\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.<BindEndpointAsync>d__3.MoveNext() in /_/src/Kestrel.Core/Internal/AddressBinder.cs:line 104\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions.<BindAsync>d__45.MoveNext() in /_/src/Kestrel.Core/ListenOptions.cs:line 207\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.EndpointsStrategy.<BindAsync>d__2.MoveNext() in /_/src/Kestrel.Core/Internal/AddressBinder.cs:line 234\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.<BindAsync>d__0.MoveNext() in /_/src/Kestrel.Core/Internal/AddressBinder.cs:line 46\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer.<StartAsync>d__22`1.MoveNext() in /_/src/Kestrel.Core/KestrelServer.cs:line 163\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.<StartAsync>d__26.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.Start()\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.BadHttpRequestTests.<TestBadRequest>d__13.MoveNext() in /_/test/Kestrel.FunctionalTests/BadHttpRequestTests.cs:line 187\r\n```\r\n\r\nI've only seen it once so far but if I see it in the future it will show up under [this list](http://aspnetci/httpAuth/app/rest/builds?locator=tag:ConnRefused,sinceDate:201710010T000000-0001&fields=build(startDate,buildTypeId,status,branchName,webUrl,tags))."},{"Id":"7368509866","Type":"PullRequestEvent","CreatedAt":"2018-03-12T21:49:20","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2371","RelatedDescription":"Merged pull request \"Remove KestrelThreadPool abstraction and replaced it with PipeScheduler\" (#2371) at aspnet/KestrelHttpServer","RelatedBody":"- This should avoid allocations per call to Schedule on .NET Core 2.1 as well."},{"Id":"7367203825","Type":"IssuesEvent","CreatedAt":"2018-03-12T17:35:42","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2373","RelatedDescription":"Closed issue \"Broken tests:  ResponseFormats_Kestrel_ContentLength etc\" (#2373) at aspnet/KestrelHttpServer","RelatedBody":"A bunch of these tests were broken by the new runtime [on High Sierra](http://aspnetci/viewLog.html?buildId=418684&tab=buildResultsDiv&buildTypeId=XPlat_HighSierraOsxUniverse#testNameId-1295381151259444512).\r\n\r\n```\r\nAssert.Null() Failure\r\nExpected: (null)\r\nActual:   True\r\n   at ServerComparison.FunctionalTests.ResponseTests.CheckContentLengthAsync(HttpClient client, ILogger logger)\r\n   at ServerComparison.FunctionalTests.ResponseTests.ResponseFormats(ServerType serverType, RuntimeFlavor runtimeFlavor, RuntimeArchitecture architecture, Func`3 scenario, ApplicationType applicationType, String testName) in /_/test/ServerComparison.FunctionalTests/ResponseTests.cs:line 196\r\n--- End of stack trace from previous location where exception was thrown ---\r\n------- Stdout: -------\r\n| TestLifetime Information: Starting test ResponseFormats_Kestrel_ContentLength_Kestrel_CoreClr_x64_Portable\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Deploying [Variation] :: ServerType=Kestrel, Runtime=CoreClr, Arch=x64, BaseUrlHint=, Publish=False\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Executing dotnet run --no-restore --framework netcoreapp2.1 -- --server.urls http://localhost:56915/  --server Microsoft.AspNetCore.Server.Kestrel\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: SET ASPNETCORE_ENVIRONMENT=Responses\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: SET ASPNETCORE_DETAILEDERRORS=true\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Started dotnet. Process Id : 82402\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Using launch settings from /Users/aspnetci/Documents/buildAgent/work/33bdfc1cae7b2a38/modules/ServerTests/test/ServerComparison.TestSites/Properties/launchSettings.json...\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Warning: dotnet stderr: The launch profile \"(Default)\" could not be applied.\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Warning: dotnet stderr: A usable launch profile could not be located.\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Hosting environment: Responses\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Content root path: /Users/aspnetci/Documents/buildAgent/work/33bdfc1cae7b2a38/modules/ServerTests/test/ServerComparison.TestSites/bin/Release/netcoreapp2.1/\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Now listening on: http://localhost:56915\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Application started. Press Ctrl+C to shut down.\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Application ready at URL: http://localhost:56915/\r\n| ResponseFormats Warning: Retry count 1..\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: \\x1b[40m\\x1b[32minfo\\x1b[39m\\x1b[22m\\x1b[49m: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout:       Request starting HTTP/1.1 GET http://localhost:56915/  \r\n| ResponseFormats Information: Testing ContentLength\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: \\x1b[40m\\x1b[32minfo\\x1b[39m\\x1b[22m\\x1b[49m: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout:       Request finished in 114.76ms 200 \r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: \\x1b[40m\\x1b[32minfo\\x1b[39m\\x1b[22m\\x1b[49m: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout:       Request starting HTTP/1.1 GET http://localhost:56915/contentlength  \r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: \\x1b[40m\\x1b[32minfo\\x1b[39m\\x1b[22m\\x1b[49m: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout:       Request finished in 5.546ms 200 \r\n| ResponseFormats Warning: StatusCode: 200, ReasonPhrase: 'OK', Version: 1.1, Content: System.Net.Http.NoWriteNoSeekStreamContent, Headers:\r\n|                          {\r\n|                            Connection: close\r\n|                            Date: Sat, 10 Mar 2018 00:53:40 GMT\r\n|                            Server: Kestrel\r\n|                            Content-Length: 14\r\n|                          }\r\n| ResponseFormats Warning: Content Length\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: Attempting to cancel process 82402\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: dotnet stdout: Application is shutting down...\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Warning: Unable to terminate the host process with process Id '82402\r\n| Microsoft.AspNetCore.Server.IntegrationTesting.SelfHostDeployer Information: [Time]: Total time taken for this test variation '5.350861' seconds\r\n| TestLifetime Information: Finished test ResponseFormats_Kestrel_ContentLength_Kestrel_CoreClr_x64_Portable in 5.351803s\r\n```"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7368949118","Type":"PullRequestEvent","CreatedAt":"2018-03-12T23:48:54","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2152","RelatedDescription":"Opened pull request \"Added parameter validation for RazorTagHelper and RazorGenerate tasks\" (#2152) at aspnet/Razor","RelatedBody":"#2079 \r\n\r\n- Added validation for `ProjectRoot` in RazorGenerate\r\n- Added validation for RazorTagHelper (Mostly copy-paste from RazorGenerate)\r\n- We never had any unit tests for the tasks but the integration tests should cover this."},{"Id":"7368810391","Type":"IssuesEvent","CreatedAt":"2018-03-12T23:05:55","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2139","RelatedDescription":"Closed issue \"TagHelperDescriptor serializer doesn't roundtrip 'Kind'\" (#2139) at aspnet/Razor","RelatedBody":"The 'Kind' property doesn't get roundtripped. Which means that view component tag helpers and blazor components might not work when using the CLI toolset.\r\n\r\nI think the problem is here: https://github.com/aspnet/Razor/blob/dev/src/Microsoft.VisualStudio.LanguageServices.Razor/TagHelperDescriptorJsonConverter.cs#L86 - since Kind is read  only I don't think it is serialized by the default serializer."},{"Id":"7368713508","Type":"PullRequestEvent","CreatedAt":"2018-03-12T22:38:47","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2151","RelatedDescription":"Opened pull request \"Fix TagHelperDescriptor.Kind serialization\" (#2151) at aspnet/Razor","RelatedBody":"#2139 \r\n\r\n- We were never passing in the `TagHelperDescriptorKind` to the builder when we reconstruct the descriptor.\r\n- Added a test."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7364725434","Type":"IssuesEvent","CreatedAt":"2018-03-12T10:19:58","Actor":"RehanSaeed","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Opened issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7307968614","Type":"IssuesEvent","CreatedAt":"2018-02-28T06:01:18","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file."},{"Id":"7307353364","Type":"IssuesEvent","CreatedAt":"2018-02-28T02:19:15","Actor":"rjamesnw","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Opened issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7352155171","Type":"IssuesEvent","CreatedAt":"2018-03-08T19:37:26","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/199","RelatedDescription":"Closed issue \"ASP.NET/EF Core feeds renamed and moved to dotnet.myget.org\" (#199) at aspnet/Announcements","RelatedBody":"The ASP.NET and EF Core MyGet feeds have moved from www.myget.org to dotnet.myget.org. There are automatic redirects from the old feeds to the new feeds so no _immediate_ change is needed. If you use the nightly feeds for packages, please move to the new feeds ASAP. The redirects will be available for at least a few weeks.\n\n| https://www.myget.org/f/ (Before) | https://dotnet.myget.org/f/ (After) |\n| --- | --- |\n| aspnetvnext | aspnetcore-dev |\n| aspnetrelease | aspnetcore-release |\n| aspnetmaster | aspnetcore-master |\n| aspnetcidev | aspnetcore-ci-dev |\n| aspnetcirelease | aspnetcore-ci-release |\n\nPlease use https://github.com/aspnet/Home/issues/1708 for further discussion.\n"},{"Id":"7340008772","Type":"IssuesEvent","CreatedAt":"2018-03-06T20:07:16","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/292","RelatedDescription":"Opened issue \"Deprecating the `microsoft/aspnetcore-build:1.0-2.0` Docker image\" (#292) at aspnet/Announcements","RelatedBody":"We will be deprecating the following Docker images\r\n \r\n- microsoft/aspnetcore-build:1.0-1.1\r\n- microsoft/aspnetcore-build:1.0-2.0\r\n\r\nWe will not delete these images. These images will continue to receive patch update whenever a 1.0.x, 1.1.x, or 2.0.x update ships, however, we will not produce a new version which contains the 2.1 runtime.\r\n\r\n### Why?\r\n \r\nThese images existed to support CI/CD pipelines that run apps on multiple versions for .NET Core in the same container. With each release, these images have grown in size. The 1.0-2.0 image is already about 1GB, and would continue to grow with runtime updates. \r\n \r\nFortunately, recent improvements to .NET Core (such as minor version roll-forward) and Docker (multi-stage builds) have reduced the need to use an image with multiple versions of .NET Core. We have seen usage of these multi-version images declining over time, and today, they are a small percentage of our Docker image usage.\r\n\r\nRather than maintaining a single, large image with all possible .NET Core runtimes, we encourage users to use multi-stage builds. Docker's multi-stage feature allows you to compose a single Dockerfile, but still use multiple .NET Core runtimes. Also, starting in 2.1, .NET Core supports rolling forward the runtime version within the major version, which will further reduce the need to have multiple 2.x runtimes side-by-side.\r\n \r\nFor discussion, use https://github.com/aspnet/aspnet-docker/issues/349"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":25,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":4,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 fâ¦ https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesdâ¦ https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":35,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":6,"RawContent":null},{"Id":"968561906003791872","CreatedAt":"2018-02-27T19:02:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":6,"RawContent":null},{"Id":"968550190889267201","CreatedAt":"2018-02-27T18:15:34+00:00","UserScreenname":"aspnet","Text":"#ASPNET Core 2.1.0-preview1 now available https://t.co/loVh03KKfz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":71,"FavoriteCount":54,"RawContent":null},{"Id":"966009382377897985","CreatedAt":"2018-02-20T17:59:19+00:00","UserScreenname":"aspnet","Text":"Starting now! \n\nJoin the #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"965988674474188800","CreatedAt":"2018-02-20T16:37:01+00:00","UserScreenname":"aspnet","Text":"Catch the #ASPNET Community Standup today at 10 AM Pacific / 18:00 GMT with Javier C Nelson showing a preview of Raâ¦ https://t.co/Fg8NoQJtJp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":4,"RawContent":null},{"Id":"965964952442933249","CreatedAt":"2018-02-20T15:02:46+00:00","UserScreenname":"aspnet","Text":"Jeff is working with cognitive services and Bots today on stream... check it out! https://t.co/HVyIw0Wcgd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":9,"RawContent":null},{"Id":"963791622822612994","CreatedAt":"2018-02-14T15:06:43+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz this FRIDAY at 10am / 15:00 UTC for a free online workshop to get started with ASPNet Core.â¦ https://t.co/qtufFsbfmc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":16,"RawContent":null},{"Id":"963559608869568512","CreatedAt":"2018-02-13T23:44:47+00:00","UserScreenname":"aspnet","Text":"The #ASPNET Community Standup is starting now! Join us!\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":2,"RawContent":null},{"Id":"963556129748918272","CreatedAt":"2018-02-13T23:30:57+00:00","UserScreenname":"aspnet","Text":"Starting in 15 minutes... join us!\n\nhttps://t.co/4Ioo9jNSN2 https://t.co/C7LilH9606","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":8,"RawContent":null},{"Id":"963413986912997376","CreatedAt":"2018-02-13T14:06:08+00:00","UserScreenname":"aspnet","Text":"Join @csharpfritz at 10am ET / 15:00 UTC to learn more about @AspNet Core and get your .NET related questions answeâ¦ https://t.co/ORAYG28QGW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"963180036571332609","CreatedAt":"2018-02-12T22:36:30+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2018-03-13T05:30:10.3840911Z","RunDurationInMilliseconds":9114}