{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10636501158","Type":"IssuesEvent","CreatedAt":"2019-10-15T18:32:29","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7628","RelatedDescription":"Opened issue \"[Azure Search] Investigate traffic to legacy search\" (#7628) at NuGet/NuGetGallery","RelatedBody":"There is still large amounts of traffic going to legacy search ([App Insights query](https://ms.portal.azure.com#@33e01921-4d64-4f8c-a055-5bdaffd5e33d/blade/Microsoft_Azure_Monitoring_Logs/LogsBlade/resourceId/%2Fsubscriptions%2F685c4662-53d8-40f9-ac51-926097ede041%2FresourceGroups%2Fnuget-prod-0-v2v3search%2Fproviders%2Fmicrosoft.insights%2Fcomponents%2Fnuget-prod-v2v3search/source/LogsBlade.AnalyticsShareLinkToQuery/q/H4sIAAAAAAAAA22TwW7bMAxA7wX6D5xPCZA2liVb0oBsKNZg6KWHdjsPlESlRmo5tRV0Hfbxk5KmnbGdLJHme6JMD%252FS0pzGO52e%252F4fmBBoLYdimA3Q4%252BAW76GXPz92TAjqANMCu%252Brr%252FBciQc7MPStbgpFjCJJezw8hac7nAfe9t3u0eKVCT6cnni74dH%252BGD7ELENIxQT2Oen1Q7tFjfUuo%252Fran1ZwHIJ6%252BAuYn9BwUE8NUI%252FY967GwcriP0YhzZsZnY%252Fxr67Tu2Fse3DeHlNu8f%252BJW3jzbHH17o72qQ8rM7PAFrvZwfOCgqUdV1roYRgjWikRmaxaoQWjVfMM1VAP8Dp5YpzpxpF5KUR0jm0xjKukAmJdWl5vozv97dfikXWwNSkGlM54SVL9UIrrZtKMzRaYKk8GT8xWUGqQc0FRyGMNElRa46yKqlOSns03b%252Bbpi5Pwvm64VIaErxGLcmRkyJ1W2mvp125SnNvVNnwCgWzxnhb85o0OjK1rQ6u9dVfpqmL1SKdzBOXzAtOWutKSM604krJRk1dxL2ubL6uhosKS%252BN441NMMlmWTInsus%252By1F7Yhv455Fl6tZ5Wh%252Be%252FH%252FcquLvj5N%252FmiV5BmhGLcXbMJiIkbB72OeTacd91OLS%252FCGy%252FD3E2B%252FMCpg2zt59lAbzs5ov%252F4k%252FRIzHz%252BsHRkBkH3A9wNNocH9IJcyIPPQ4Rtm1wq8S3W3LwBx%252Br866rAwAA)):\r\n\r\n```\r\nrequests\r\n| where timestamp > ago(1d)\r\n| where name in (\"GET /search/diag\", \"GET /search/query\", \"GET /query\", \"GET /autocomplete\")\r\n//| where url !contains \"/search/query?q=packageid:E2E.\" // End-to-end tests\r\n| extend dId = tostring(customDimensions.DeploymentId)\r\n| extend Region =\r\n  iff(dId == \"a755594844164679a1ca264946f81f18\" or dId == \"233d868eef7b47ddacbc138a147a50c3\", \"USNC\",\r\n     iff(dId == \"86b2d4f718ee498996291ab94a08febf\" or dId == \"c4e86a9343a44b7ba14593a720e5c13c\", \"USSC\",\r\n       iff(dId == \"fe4df56377be435a97eded74a7529f98\" or dId == \"d293fb80632a41cbbfc535e9adeb5c2c\", \"EA\",\r\n         iff(dId == \"15493afe371f43e99924731983887688\" or dId == \"e3f92c47a56342a0bd36f3f971700184\", \"SEA\", \"Unknown\")\r\n       )\r\n     )\r\n  )\r\n| extend RegionAndRequestName = strcat(Region, \" \", name) \r\n| summarize count() by bin(timestamp, 30m), RegionAndRequestName, Region, name\r\n| order by count_ desc\r\n| render barchart kind=stacked \r\n```"},{"Id":"10635199957","Type":"PullRequestEvent","CreatedAt":"2019-10-15T15:42:07","Actor":"xavierdecoster","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7622","RelatedDescription":"Merged pull request \"Add configuration support for heartbeat interval to NuGetGallery\" (#7622) at NuGet/NuGetGallery","RelatedBody":"NuGetGallery AI heartbeats currently emit every 15 minutes (default since AI upgrade to v2.10). This PR makes the interval configurable."},{"Id":"10628901032","Type":"PullRequestEvent","CreatedAt":"2019-10-14T23:15:58","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7627","RelatedDescription":"Merged pull request \"Merge branch 'dev' into master\" (#7627) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10628713950","Type":"PullRequestEvent","CreatedAt":"2019-10-14T22:32:50","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7626","RelatedDescription":"Merged pull request \"Merge branch 'master' into dev\" (#7626) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10626819738","Type":"IssuesEvent","CreatedAt":"2019-10-14T17:25:12","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7065","RelatedDescription":"Closed issue \"[Icons] Add a flag to Gallery to completely ignore IconUrl\" (#7065) at NuGet/NuGetGallery","RelatedBody":"Eventually we'll completely drop support for icon URLs, need a flag to represent that."},{"Id":"10626646065","Type":"PullRequestEvent","CreatedAt":"2019-10-14T16:58:56","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7627","RelatedDescription":"Opened pull request \"Merge branch 'dev' into master\" (#7627) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10626609917","Type":"IssuesEvent","CreatedAt":"2019-10-14T16:53:34","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7190","RelatedDescription":"Closed issue \"[Azure Search] Analyze autocomplete data to validate current design\" (#7190) at NuGet/NuGetGallery","RelatedBody":"Look at data for what customers are searching for in autocomplete. Look at length of autocomplete queries (as current implementation has issues with long queries), and compare old vs new results under that threshold.\r\n\r\nFigure out all the scenarios around autocomplete. Ensure these scenarios are met with the new autocomplete implementation (consider UX studies?)\r\n\r\nInteresting scenario: autocomplete for \"AspnetCore\". May work well on old impl but not on new one.\r\n\r\nOn service index, consider deploying autocomplete resource after the search resource."},{"Id":"10626603950","Type":"IssuesEvent","CreatedAt":"2019-10-14T16:52:41","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7610","RelatedDescription":"Closed issue \"Auxiliary2AzureSearch is stuck in PROD\" (#7610) at NuGet/NuGetGallery","RelatedBody":"This is because there are too many download count decreases by its own definition. The max it allows is 5,000. There are 10,603."},{"Id":"10626552521","Type":"PullRequestEvent","CreatedAt":"2019-10-14T16:45:18","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7626","RelatedDescription":"Opened pull request \"Merge branch 'dev' to master\" (#7626) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10639805738","Type":"IssuesEvent","CreatedAt":"2019-10-16T05:16:45","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8688","RelatedDescription":"Closed issue \"Credential providers cause MSBuild crash on second run of RestoreTask\" (#8688) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nThis is the root cause of microsoft/msbuild#4792 and the related .NET Core servicing build failures.\r\n\r\nNuGet product used: .NET Core SDK 3.0.100-preview6 in Arcade\r\n\r\nNuGet version: 5.2.0.6020\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows\r\n\r\nWorked before? If so, with which NuGet version: no\r\n\r\n## Detailed repro steps so we can see the same problem\r\nI experienced this on a repro machine provided by @nkolev92. I don't have a minimized repro but I believe it looks something like this:\r\n\r\n1. Call `RestoreTask` in one project.\r\n2. In the same MSBuild build session, call `RestoreTask` in another project.\r\n3. Experience MSBuild crash `MSB0001: Internal MSBuild Error: ContextID 10 should have been in the ID-to-project file mapping but wasn't!`\r\n\r\n----\r\n\r\nWhat's happening here is this:\r\n\r\n1. The first call to `RestoreTask` creates a new NuGet `ILogger` wrapping a `Microsoft.Build.Utilities.TaskLoggingHelper` associated with that task invocation -- call this logger `$1`.\r\nhttps://github.com/NuGet/NuGet.Client/blob/840b09a4cecda6ae8fd1c07967874fe8061ece63/src/NuGet.Core/NuGet.Build.Tasks/RestoreTask.cs#L103\r\n1. `RestoreTask.ExecuteAsync()` calls [`DefaultCredentialServiceUtility.SetupDefaultCredentialService`](https://github.com/NuGet/NuGet.Client/blob/840b09a4cecda6ae8fd1c07967874fe8061ece63/src/NuGet.Core/NuGet.Credentials/DefaultCredentialServiceUtility.cs#L17-L28), passing that logger.\r\n1. That populates the **static** field [`HttpHandlerResourceV3.CredentialService`](https://github.com/NuGet/NuGet.Client/blob/840b09a4cecda6ae8fd1c07967874fe8061ece63/src/NuGet.Core/NuGet.Protocol/HttpSource/HttpHandlerResourceV3.cs#L40), preserving a link to the `TaskLoggingHelper` in an object with a longer lifetime than the task.\r\n1. The first `RestoreTask` completes.\r\n1. MSBuild tears down logging infrastructure required to log messages from the context of the first `RestoreTask`. Normally this would make `$1` eligible for GC, but it's now referenced from a static.\r\n1. The second `RestoreTask` is called.\r\n1. On this pass through, `HttpHandlerResourceV3.CredentialService` is non-null and not reset to the current `TaskLoggingHelper`.\r\n1. The credential provider is invoked and attempts to log (using `$1`).\r\n1. MSBuild crashes because of the logging infrastructure teardown from step 5."},{"Id":"10639378782","Type":"IssuesEvent","CreatedAt":"2019-10-16T03:27:47","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8679","RelatedDescription":"Closed issue \"Showing message like \" Blocked by package.config\"\" (#8679) at NuGet/Home","RelatedBody":"In VS Manage Nuget Packages window, When choose nuget from browse and see the listed versions, the message showing like   **Blocked by package.config** after under this message all the version again listed. This is for all packages in nuget.org.\r\n\r\nCan anyone tell me the reason why shown that message like that?\r\n![image](https://user-images.githubusercontent.com/56252418/66559927-e8bd5780-eb73-11e9-8bd6-932dd3dc7ef9.png)\r\n"},{"Id":"10638641601","Type":"IssuesEvent","CreatedAt":"2019-10-16T00:24:01","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7467","RelatedDescription":"Closed issue \"licenses UI experience\" (#7467) at NuGet/Home","RelatedBody":"- [x] seems like too much whitespace in the expression\r\n![image](https://user-images.githubusercontent.com/16904420/47932278-75549580-de8e-11e8-8ebc-ca0261bd5588.png)\r\n\r\n- [x] it is better for the license acceptance window. There seems to be one extra space between MIT and OR\r\n![image](https://user-images.githubusercontent.com/16904420/47932372-b056c900-de8e-11e8-9dde-f55f66873a53.png)\r\n\r\n- [x] make the weight of the package id on the right same as that of the text on the left to which it is alligned to\r\n\r\n![image](https://user-images.githubusercontent.com/16904420/47933866-f6159080-de92-11e8-9378-2bc20100b649.png)\r\n\r\n\r\n- [ ] need a close button at the bottom center when you view license from package details. \r\n\r\n![image](https://user-images.githubusercontent.com/16904420/47932823-f3656c00-de8f-11e8-8770-b93558dafcb4.png)\r\n\r\n- [x] Also can we make the above window apprear in the center of the screen\r\n\r\n- [x] show the URL on hover for \"view license\" and license expressions \r\n\r\ncc: @nkolev92 "},{"Id":"10638160442","Type":"IssuesEvent","CreatedAt":"2019-10-15T22:34:17","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8702","RelatedDescription":"Opened issue \"InternalsVisibleTo declaration inconsistency\" (#8702) at NuGet/Home","RelatedBody":"See https://github.com/NuGet/NuGet.Client/pull/3082#discussion_r335145959. \r\n\r\nIn some projects we define them in the csproj, in others we define them in the assembly info.  "},{"Id":"10637753140","Type":"IssuesEvent","CreatedAt":"2019-10-15T21:24:29","Actor":"karann-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8701","RelatedDescription":"Opened issue \"Equivalent of Nuget install -Prerelease\" (#8701) at NuGet/Home","RelatedBody":"@jawn commented on [Thu Oct 03 2019](https://github.com/NuGet/docs.microsoft.com-nuget/issues/1721)\n\nIs there a way to install the latest prerelease version of a package, without using the explicit version number?\n\n---\n#### Document Details\n\nâš  *Do not edit this section. It is required for docs.microsoft.com âžŸ GitHub issue linking.*\n\n* ID: 6d00296b-ac62-3d6c-beea-b2042b63dc5b\n* Version Independent ID: 587da972-dfde-88bc-9dc0-7c32dae3454b\n* Content: [NuGet Command-Line Interface (CLI) Reference](https://docs.microsoft.com/en-us/nuget/reference/nuget-exe-cli-reference)\n* Content Source: [docs/reference/nuget-exe-CLI-Reference.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/master/docs/reference/nuget-exe-CLI-Reference.md)\n* Product: **nuget**\n* GitHub Login: @karann-msft\n* Microsoft Alias: **karann**\n\n"},{"Id":"10637691855","Type":"IssuesEvent","CreatedAt":"2019-10-15T21:15:05","Actor":"karann-msft","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8700","RelatedDescription":"Opened issue \"Restore not pulling from source declared in global NuGet.config when the same exists in solution-based nuget.config\" (#8700) at NuGet/Home","RelatedBody":"@mdzeko commented on [Thu Oct 10 2019](https://github.com/NuGet/docs.microsoft.com-nuget/issues/1731)\n\nI have the same package source (URL) defined in both global `%%apdata%%\\NuGet\\NuGet.config`, and in local solution-based `nuget.config`. Sources are listed under different names. \r\n\r\nThis is neccessary because the source requires authentication, so for our build server to be able to do restore, it needs local nuget.config source without credentials which are then injected in the build pipeline.\r\nDevelopers, howerever, cannot use this local source and need to set their own global source with their auth credentials in order to restore. At least in theory. But this doesn't work. Packages restore results with \"**NU1100** - **Unable to resolve...**\".\r\n\r\nNote: all sources (global and local) are listed in VisualStudio under \"package source:\" and browsing works as expected using authenticated source name.\r\n\r\n### Steps to reproduce\r\n\r\n1. Add package source to solution based nuget.config that requires authentication, but without auth parameters.\r\n2. Add the same package source in global `%%apdata%%\\NuGet\\NuGet.config` with correct auth parameters (under different name)\r\n3. Do a \"Clear All NuGet Cache(s)\" in NPM settings\r\n4. Run \"Restore NuGet packages\" on the solution\r\n\r\n### Expected beahvior\r\nNPM is able to restore packages using globally defined source with correct auth\r\n\r\n### Actual behavior\r\nNPM is not able to restore packages and ends up with \"NU1100 - Unable to resolve...\"\n\n"},{"Id":"10636871708","Type":"IssuesEvent","CreatedAt":"2019-10-15T19:22:31","Actor":"AmadeusW","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8699","RelatedDescription":"Opened issue \"Microsoft.NuGet.targets error: Microsoft.VisualStudio.ComponentModelHost 15.8.525 could not be found\" (#8699) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used VS UI\r\n\r\nNuGet version (x.x.x.xxx): 5.3.0\r\n\r\nVS version (if appropriate): 16.3.3\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): \r\n\r\nWorked before? If so, with which NuGet version: previous VS version\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Clear the nuget cache\r\n2. Attempt to restore packages for solution\r\n3. See problem\r\n```\r\n3>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Verification\\MSBuild\\Microsoft\\NuGet\\16.0\\Microsoft.NuGet.targets(186,5): error : The package Microsoft.VisualStudio.ComponentModelHost with version 15.8.525 could not be found in C:\\Users\\amwieczo\\.nuget\\packages\\. Run a NuGet package restore to download the package.\r\n```\r\nThe project I'm working on does not depend on ComponentModelHost 15.8.525\r\nRestoring does nothing\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nNuGet itself works fine. It's the NuGet+MSBuild bundle in VS that does not work.\r\nHere's working NuGet CLI.\r\nNuGet Version: 4.3.0.4406\r\n\r\n\r\nD:\\tools\\nuget restore RemoteLanguage.sln\r\nMSBuild auto-detection: using msbuild version '16.4.0.50203' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\bin'.\r\nAll packages listed in packages.config are already installed.\r\nRestoring packages for D:\\src\\VSLanguageServerClient\\src\\product\\RemoteLanguage.Protocol\\LanguageServer.Protocol.csproj...\r\nCommitting restore...\r\nGenerating MSBuild file D:\\src\\VSLanguageServerClient\\\\obj\\LanguageServer.Protocol\\LanguageServer.Protocol.csproj.nuget.g.props.\r\nGenerating MSBuild file D:\\src\\VSLanguageServerClient\\\\obj\\LanguageServer.Protocol\\LanguageServer.Protocol.csproj.nuget.g.targets.\r\nWriting lock file to disk. Path: D:\\src\\VSLanguageServerClient\\obj\\LanguageServer.Protocol\\project.assets.json\r\nRestore completed in 699.24 ms for D:\\src\\VSLanguageServerClient\\src\\product\\RemoteLanguage.Protocol\\LanguageServer.Protocol.csproj.\r\n\r\nNuGet Config files used:\r\n    D:\\src\\VSLanguageServerClient\\NuGet.Config\r\n    C:\\Users\\amwieczo\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n    C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n\r\nFeeds used:\r\n    https://api.nuget.org/v3/index.json\r\n    https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/VS/nuget/v3/index.json\r\n    https://devdiv.pkgs.visualstudio.com/_packaging/Setup/nuget/v3/index.json\r\n    https://devdiv.pkgs.visualstudio.com/_packaging/VSExtensibility/nuget/v3/index.json\r\n    https://devdiv.pkgs.visualstudio.com/_packaging/VSIDE-RealSigned-Release/nuget/v3/index.json\r\n    https://devdiv.pkgs.visualstudio.com/_packaging/vs-impl/nuget/v3/index.json\r\n    https://devdiv.pkgs.visualstudio.com/_packaging/vssdk/nuget/v3/index.json\r\n\r\n### Sample Project\r\n\r\nInternal project. Reach out to me for details\r\n\r\n"},{"Id":"10635075028","Type":"IssuesEvent","CreatedAt":"2019-10-15T15:28:37","Actor":"SamMackrill","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8698","RelatedDescription":"Opened issue \"NUGET_PLUGIN_PATHS local path to nuget.exe location does not work\" (#8698) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): NuGet.exe\r\n\r\nNuGet version (x.x.x.xxx): 5.2.0.6090\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate): N/A\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10\r\n\r\nWorked before? If so, with which NuGet version: Unknown\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nUsing NUGET_PLUGIN_PATHS with CredentialProvider.Microsoft.exe (ADO) it seem to only work with an absolute path\r\n\r\n1. cd c:\\nuget\r\n2. SET NUGET_PLUGIN_PATHS=c:\\nuget\\plugins\\CredentialProvider.Microsoft.exe\r\n3. .\\nuget.exe install mypackage\r\n4. Works\r\n5. SET NUGET_PLUGIN_PATHS=.\\plugins\\CredentialProvider.Microsoft.exe\r\n6. .\\nuget.exe install mypackage\r\n7. Fails with plugin not found\r\n\r\n\r\n"},{"Id":"10634573917","Type":"IssuesEvent","CreatedAt":"2019-10-15T14:38:02","Actor":"blackchoey","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8697","RelatedDescription":"Opened issue \"Access to dgspec.json is denied when building docker image\" (#8697) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\nOn Azure Pipelines hosted windows-2019 agent, building a newly created solution in docker will result in `Access to the path 'C:\\app\\obj\\testmodule.csproj.nuget.dgspec.json' is denied.` error. This may be a regression of issue https://github.com/NuGet/Home/issues/7836\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): dotnet.exe\r\n\r\nNuGet version (x.x.x.xxx): 5.3.0.4\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100 (on build agent). The docker image uses image `microsoft/dotnet:2.1-sdk` to build solution.\r\n\r\nVS version (if appropriate): Not using VS.\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): windows 1809\r\n\r\nWorked before? If so, with which NuGet version: Worked before, but I couldn't get previous runtime information.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a new build definition in Azure Pipelines. Select hosted agent `windows-2019` to run the build.\r\n\r\n2. Add following powershell task\r\n```\r\nsteps:\r\n- powershell: |\r\n   dotnet new -i Microsoft.Azure.IoT.Edge.Module\r\n   \r\n   dotnet new aziotedgemodule -n testmodule -r localhost:5000/testmodule\r\n   \r\n   cd testmodule\r\n   \r\n   docker build --rm -f \"./Dockerfile.windows-amd64\" -t localhost:5000/testmodule:0.0.1-windows-amd64 .\r\n  displayName: 'PowerShell Script'\r\n```\r\n3. Queue a new build\r\n\r\nActual behavior:\r\nThe docker build command failed with error `Access to the path 'C:\\app\\obj\\testmodule.csproj.nuget.dgspec.json' is denied.`\r\n\r\nExpected behavior:\r\nThe build finished successfully\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Sample Project\r\n\r\nRun the dotnet new commands in repro steps and you can get the sample solution.\r\n\r\n"},{"Id":"10634103287","Type":"IssuesEvent","CreatedAt":"2019-10-15T13:50:54","Actor":"ChristopherTheunissen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8696","RelatedDescription":"Opened issue \"nuget.exe spec Generates a copyright Tag with Hard-Coded Text of CopyRight yyyy Instead of $copyright$\" (#8696) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): NuGet.exe\r\n\r\nNuGet version (x.x.x.xxx): 5.3.0.6260\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate): \r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Version\t10.0.17134 Build 17134\r\nWorked before? If so, with\r\n which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n1. Create any C# project such as an MSTest project that uses .NET Framework 4.7.2\r\n2. Open the folder in a command prompt.\r\n3. Execute **nuget spec**\r\n4. Notice the generated .nuspec (in attached ZIP and copied below) contains a hard-coded Copyright 2019 inside the copyright tag:\r\n&lt;?xml&nbsp;version=\"1.0\"?&gt;\r\n&lt;package&nbsp;&gt;\r\n&nbsp;&nbsp;&lt;metadata&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;id&gt;$id$&lt;/id&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;$version$&lt;/version&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;$title$&lt;/title&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;authors&gt;$author$&lt;/authors&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;owners&gt;$author$&lt;/owners&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;licenseUrl&gt;http://LICENSE_URL_HERE_OR_DELETE_THIS_LINE&lt;/licenseUrl&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;projectUrl&gt;http://PROJECT_URL_HERE_OR_DELETE_THIS_LINE&lt;/projectUrl&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;iconUrl&gt;http://ICON_URL_HERE_OR_DELETE_THIS_LINE&lt;/iconUrl&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;requireLicenseAcceptance&gt;false&lt;/requireLicenseAcceptance&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;description&gt;$description$&lt;/description&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;releaseNotes&gt;Summary&nbsp;of&nbsp;changes&nbsp;made&nbsp;in&nbsp;this&nbsp;release&nbsp;of&nbsp;the&nbsp;package.&lt;/releaseNotes&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;copyright&gt;**Copyright&nbsp;2019**&lt;/copyright&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;tags&gt;Tag1&nbsp;Tag2&lt;/tags&gt;\r\n&nbsp;&nbsp;&lt;/metadata&gt;\r\n&lt;/package&gt;\r\n\r\nIf Copyright 2019 is replaced with $copyright$, it correctly picks it up at pack time, so nuget.exe should generate this tag with the $copyright$ token.\r\n\r\n[SomeProject.zip](https://github.com/NuGet/Home/files/3729529/SomeProject.zip)"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"âš  Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Folloâ€¦ https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?â€¦ https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-10-16T05:30:43.9489429Z","RunDurationInMilliseconds":2394}