{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core January 2019 Updates – 2.1.7 and 2.2.1","PublishedOn":"2019-01-09T02:07:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2019 Update. These updates contain security and reliability fixes. .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( Download &#124; Release Notes ) .NET Core...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-core-january-2019-update/","RawContent":null},{"Title":".NET Framework January 2019 Security and Quality Rollup","PublishedOn":"2019-01-08T18:59:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the January 2019 Security and Quality Rollup. Security CVE-2019-0545 – Windows Security Feature Bypass Vulnerability This security update resolves a vulnerability in Microsoft...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access Build 3707","PublishedOn":"2018-12-15T02:11:55+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We have another early access build to share today! This release includes several accessibility, performance, reliability and stability fixes across the major framework libraries. We will continue to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/14/announcing-net-framework-4-8-early-access-build-3707/","RawContent":null},{"Title":"Visual Studio 2019 Preview .NET Productivity","PublishedOn":"2018-12-14T00:13:41+00:00","CommentsCount":18,"FacebookCount":0,"Summary":"As you hopefully heard, the first preview of Visual Studio 2019 is now available. In this post I’ll cover some of the productivity improvements for .NET developers we’re most excited about. For a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/13/visual-studio-2019-net-productivity/","RawContent":null},{"Title":".NET Framework December 2018 Security and Quality Rollup","PublishedOn":"2018-12-11T18:23:48+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the December 2018 Security and Quality Rollup. Security CVE-2018-8540 – Windows Remote Code Execution Vulnerability This security update resolves a vulnerability in Microsoft...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/11/net-framework-december-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Open Sourcing XAML Behaviors for WPF","PublishedOn":"2018-12-10T19:27:32+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are excited to announce that we are open sourcing XAML Behaviors for WPF. In the past, we open sourced XAML Behaviors for UWP which has been a great success and the Behaviors NuGet package...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/10/open-sourcing-xaml-behaviors-for-wpf/","RawContent":null},{"Title":"Take C# 8.0 for a spin","PublishedOn":"2018-12-05T23:51:33+00:00","CommentsCount":99,"FacebookCount":0,"Summary":"Take C# 8.0 for a spin Yesterday we announced the first preview of both Visual Studio 2019 (Making every developer more productive with Visual Studio 2019) and .NET Core 3.0 (Announcing .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/take-c-8-0-for-a-spin/","RawContent":null},{"Title":".NET Framework December 5, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2018-12-05T22:00:42+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we are releasing the December 5, 2018 Preview of .NET Framework Cumulative Update for Windows 10 version 1809 and Windows Server 2019. For more information about the new Cumulative Updates for...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/05/net-framework-december-4-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 1 and Open Sourcing Windows Desktop Frameworks","PublishedOn":"2018-12-04T16:41:34+00:00","CommentsCount":82,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3 Preview 1. It is the first public release of .NET Core 3. We have some exciting new features to share and would love your feedback. You can develop .NET Core 3...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-3-preview-1-and-open-sourcing-windows-desktop-frameworks/","RawContent":null},{"Title":"Announcing .NET Core 2.2","PublishedOn":"2018-12-04T16:36:50+00:00","CommentsCount":30,"FacebookCount":0,"Summary":"We’re excited to announce the release of .NET Core 2.2. It includes diagnostic improvements to the runtime, support for ARM32 for Windows and Azure Active Directory for SQL Client. The biggest...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/12/04/announcing-net-core-2-2/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8837337598","Type":"PullRequestEvent","CreatedAt":"2019-01-05T03:23:40","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Merged pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"},{"Id":"8833785661","Type":"PullRequestEvent","CreatedAt":"2019-01-04T11:57:11","Actor":"MarcBruins","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Opened pull request \"Update to absolute path\" (#129) at dotnet/foundation","RelatedBody":"Update to absolute path so that when this list is copied the link will actually work"},{"Id":"8833210040","Type":"PullRequestEvent","CreatedAt":"2019-01-04T09:40:51","Actor":"ErikEJ","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Opened pull request \"Update of EF description\" (#128) at dotnet/foundation","RelatedBody":"@divega !"},{"Id":"8831721539","Type":"PullRequestEvent","CreatedAt":"2019-01-04T00:22:43","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Merged pull request \"Update documentation information\" (#127) at dotnet/foundation","RelatedBody":""},{"Id":"8830688181","Type":"PullRequestEvent","CreatedAt":"2019-01-03T20:00:04","Actor":"carloscds","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Opened pull request \"Update documentation information\" (#127) at dotnet/foundation","RelatedBody":""},{"Id":"8826767123","Type":"PullRequestEvent","CreatedAt":"2019-01-03T04:47:09","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Merged pull request \"targets the existing document\" (#122) at dotnet/foundation","RelatedBody":""},{"Id":"8826765854","Type":"PullRequestEvent","CreatedAt":"2019-01-03T04:46:31","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Merged pull request \"Add Newtonsoft.Json\" (#121) at dotnet/foundation","RelatedBody":"// @jongalloway "},{"Id":"8760892630","Type":"IssuesEvent","CreatedAt":"2018-12-16T11:57:54","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Opened issue \"No logo provided for Prism\" (#126) at dotnet/foundation","RelatedBody":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157"},{"Id":"8760886115","Type":"IssuesEvent","CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Opened issue \"Missing logo for MVVM Light Toolkit\" (#125) at dotnet/foundation","RelatedBody":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139"},{"Id":"8760884091","Type":"IssuesEvent","CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Opened issue \"Missing logo for Umbraco\" (#124) at dotnet/foundation","RelatedBody":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151"},{"Id":"8760881728","Type":"IssuesEvent","CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Opened issue \"Missing logo for Steeltoe\" (#123) at dotnet/foundation","RelatedBody":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8852414845","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:17:46","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Opened issue \"January 2019 .NET Updates\" (#96) at dotnet/announcements","RelatedBody":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"8852318390","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:28","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Opened issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Compression.ZipFile | 4.0.0, 4.0.1, 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n\r\n"},{"Id":"8852317992","Type":"IssuesEvent","CreatedAt":"2019-01-08T18:00:24","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Net.Http | 4.3.0, 4.3.1, 4.3.2, 4.3.3, 4.3.4 | 4.3.5\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n"},{"Id":"8752496804","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:22:59","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8752467326","Type":"IssuesEvent","CreatedAt":"2018-12-14T03:12:36","Actor":"1015450578","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Opened issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93) at dotnet/announcements","RelatedBody":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]"},{"Id":"8741036679","Type":"IssuesEvent","CreatedAt":"2018-12-12T12:56:54","Actor":"bilalMlaik","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment"},{"Id":"8740711774","Type":"IssuesEvent","CreatedAt":"2018-12-12T11:57:02","Actor":"bilalMlaik","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Opened issue \".net core Console\" (#92) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\nI am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.iothub.simulator:\r\n    image: ${DOCKER_REGISTRY-}ttcoreiothubsimulator\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.IotHub.Simulator/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.labourtelemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcorelabourtelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.LabourTelemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.telemetry.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoretelemetrywebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Telemetry.WebJob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n     - mqtt\r\n     - redis\r\n    networks:\r\n     - app-network\r\n\r\n  redis:\r\n    image: redis\r\n    command: redis-server --appendonly yes\r\n    ports:\r\n      - '6379:6379'\r\n    volumes:\r\n      - ${APPDATA}/redis:/bitnami/redis/data\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.16\r\n\r\n  mqtt:\r\n    image: eclipse-mosquitto\r\n    hostname: mqtt\r\n    container_name: mqtt\r\n    expose:\r\n      - \"1883\"\r\n      - \"9001\"\r\n    ports:\r\n      - \"1883:1883\"\r\n      - \"9001:9001\"\r\n    volumes:\r\n      - ${APPDATA}/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.8\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8854930808","Type":"PullRequestEvent","CreatedAt":"2019-01-09T03:43:19","Actor":"adityamandaleeka","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21867","RelatedDescription":"Merged pull request \"Fix write barrier bounds checks for ARM64 Unix\" (#21867) at dotnet/coreclr","RelatedBody":"A while back, the separate low and high checks (and branches) in JIT_WriteBarrier against the ephemeral heap bounds were replaced by a cmp/ccmp pair with a single branch after the conditional compare.\r\n\r\nIf the first comparison fails because the reference is below the lower bound, we want to exit after the ccmp, but the branch to exit is a `bhi` (predicated on C and !Z) so wouldn’t be taken. Thus, we'd end up going through write barrier code we shouldn't when the object reference is below the lower bound of the ephemeral heap.\r\n\r\nThis fixes that issue and also changes the comparisons in the checked write barrier to match (they were previously using signed comparisons).\r\n"},{"Id":"8854722643","Type":"PullRequestEvent","CreatedAt":"2019-01-09T02:43:01","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21857","RelatedDescription":"Merged pull request \"JIT: infer ranges from small int type operations\" (#21857) at dotnet/coreclr","RelatedBody":"Have range check use the ranges for small int types if it has no better\r\ninformation.\r\n\r\nFixes #21841"},{"Id":"8854722632","Type":"IssuesEvent","CreatedAt":"2019-01-09T02:43:01","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21841","RelatedDescription":"Closed issue \"The JIT should elide bounds checks when indexing into a byte array with length = byte.MaxValue.\" (#21841) at dotnet/coreclr","RelatedBody":"I am seeing an extra bounds check (see full disassembly below) which is forcing me to use unsafe code:\r\n```text\r\n00007ffc`f32c0669 4181f800010000  cmp     r8d,100h\r\n00007ffc`f32c0670 7324            jae     00007ffc`f32c0696\r\n```\r\n\r\nA `byte` cannot be >= 256 and hence the check is unnecessary.\r\n\r\n**Benchmark:**\r\n```C#\r\n\r\nprivate class ConfigWithCustomEnvVars : ManualConfig\r\n{\r\n    private const string JitNoInline = \"COMPlus_TieredCompilation\";\r\n\r\n    public ConfigWithCustomEnvVars()\r\n    {\r\n        Add(Job.Core\r\n            .With(new[] { new EnvironmentVariable(JitNoInline, \"0\") })\r\n            .WithWarmupCount(3)\r\n            .WithTargetCount(5)\r\n            .With(CsProjCoreToolchain.From(NetCoreAppSettings.NetCoreApp30)));\r\n    }\r\n}\r\n\r\nprivate byte[] _tempArray;\r\n\r\n[GlobalSetup]\r\npublic void Setup()\r\n{\r\n    _tempArray = new byte[100];\r\n    for (int i = 0; i < 100; i++)\r\n        _tempArray[i] = (byte)'a';\r\n}\r\n\r\nprivate static ReadOnlySpan<byte> AllowList => new byte[256] {\r\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n    1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1,\r\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\r\n    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\r\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\r\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n};\r\n\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\nprivate static bool NeedsEscaping_new(byte value)\r\n    => Unsafe.Add(ref MemoryMarshal.GetReference(AllowList), value) == 0;\r\n\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\nprivate static bool NeedsEscaping(byte value) => AllowList[value] == 0;\r\n\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\npublic static int NeedsEscaping(ReadOnlySpan<byte> value)\r\n{\r\n    int idx;\r\n    for (idx = 0; idx < value.Length; idx++)\r\n    {\r\n        if (NeedsEscaping(value[idx]))\r\n        {\r\n            goto Return;\r\n        }\r\n    }\r\n\r\n    idx = -1; // all characters allowed\r\n\r\nReturn:\r\n    return idx;\r\n}\r\n\r\n[MethodImpl(MethodImplOptions.AggressiveInlining)]\r\npublic static int NeedsEscaping_new(ReadOnlySpan<byte> value)\r\n{\r\n    int idx;\r\n    for (idx = 0; idx < value.Length; idx++)\r\n    {\r\n        if (NeedsEscaping_new(value[idx]))\r\n        {\r\n            goto Return;\r\n        }\r\n    }\r\n\r\n    idx = -1; // all characters allowed\r\n\r\nReturn:\r\n    return idx;\r\n}\r\n\r\n\r\n[Benchmark(Baseline = true)]\r\npublic int TestingBoundsCheck()\r\n{\r\n    return NeedsEscaping(_tempArray);\r\n}\r\n\r\n[Benchmark]\r\npublic int TestingBoundsCheck_new()\r\n{\r\n    return NeedsEscaping_new(_tempArray);\r\n}\r\n```\r\n\r\n``` ini\r\n\r\nBenchmarkDotNet=v0.11.3, OS=Windows 10.0.17763.195 (1809/October2018Update/Redstone5)\r\nIntel Core i7-6700 CPU 3.40GHz (Skylake), 1 CPU, 8 logical and 4 physical cores\r\n.NET Core SDK=3.0.100-preview-010006\r\n  [Host] : .NET Core 3.0.0-preview-27218-01 (CoreCLR 4.6.27217.02, CoreFX 4.7.18.61304), 64bit RyuJIT\r\n  Core   : .NET Core 3.0.0-preview-27218-01 (CoreCLR 4.6.27217.02, CoreFX 4.7.18.61304), 64bit RyuJIT\r\n\r\nJob=Core  EnvironmentVariables=COMPlus_TieredCompilation=0  Runtime=Core  \r\nToolchain=.NET Core 3.0  IterationCount=5  WarmupCount=3  \r\n\r\n```\r\n|                 Method | Formatted | SkipValidation |     Mean |    Error |    StdDev | Ratio |\r\n|----------------------- |---------- |--------------- |---------:|---------:|----------:|------:|\r\n|     TestingBoundsCheck |     False |           True | 81.91 ns | 1.515 ns | 0.3935 ns |  1.00 |\r\n| TestingBoundsCheck_new |     False |           True | 74.59 ns | 2.463 ns | 0.6397 ns |  0.91 |\r\n\r\n\r\n```text\r\n\r\nSystem.Text.JsonLab.Benchmarks.JsonWriterPerf\r\nTestingBoundsCheck .NET Core 3.0.0-preview-27218-01 (CoreCLR 4.6.27217.02, CoreFX 4.7.18.61304), 64bit RyuJIT\tTestingBoundsCheck_new .NET Core 3.0.0-preview-27218-01 (CoreCLR 4.6.27217.02, CoreFX 4.7.18.61304), 64bit RyuJIT\r\n\r\n00007ffc`f32c0640 System.Text.JsonLab.Benchmarks.JsonWriterPerf.TestingBoundsCheck()\r\n00007ffc`f32c0640 4883ec28        sub     rsp,28h\r\n00007ffc`f32c0644 90              nop\r\n00007ffc`f32c0645 488b4140        mov     rax,qword ptr [rcx+40h]\r\n00007ffc`f32c0649 4885c0          test    rax,rax\r\n00007ffc`f32c064c 7506            jne     00007ffc`f32c0654\r\n00007ffc`f32c064e 33d2            xor     edx,edx\r\n00007ffc`f32c0650 33c9            xor     ecx,ecx\r\n00007ffc`f32c0652 eb07            jmp     00007ffc`f32c065b\r\n00007ffc`f32c0654 488d5010        lea     rdx,[rax+10h]\r\n00007ffc`f32c0658 8b4808          mov     ecx,dword ptr [rax+8]\r\n00007ffc`f32c065b 33c0            xor     eax,eax\r\n00007ffc`f32c065d 85c9            test    ecx,ecx\r\n00007ffc`f32c065f 7e2b            jle     00007ffc`f32c068c\r\n00007ffc`f32c0661 4c63c0          movsxd  r8,eax\r\n00007ffc`f32c0664 460fb60402      movzx   r8d,byte ptr [rdx+r8]\r\n00007ffc`f32c0669 4181f800010000  cmp     r8d,100h\r\n00007ffc`f32c0670 7324            jae     00007ffc`f32c0696\r\n00007ffc`f32c0672 4d63c0          movsxd  r8,r8d\r\n00007ffc`f32c0675 49b9d4e3012d7c010000 mov r9,offset Benchmarks!COM+_Entry_Point  (Benchmarks+0x1ce3d4) (0000017c`2d01e3d4)\r\n00007ffc`f32c067f 43803c0800      cmp     byte ptr [r8+r9],0\r\n00007ffc`f32c0684 740b            je      00007ffc`f32c0691\r\n00007ffc`f32c0686 ffc0            inc     eax\r\n00007ffc`f32c0688 3bc1            cmp     eax,ecx\r\n00007ffc`f32c068a 7cd5            jl      00007ffc`f32c0661\r\n00007ffc`f32c068c b8ffffffff      mov     eax,0FFFFFFFFh\r\n00007ffc`f32c0691 4883c428        add     rsp,28h\r\n00007ffc`f32c0695 c3              ret\r\n00007ffc`f32c0696 e895dac85f      call    coreclr!GetCLRRuntimeHost+0x881a0 (00007ffd`52f4e130)\r\n00007ffc`f32c069b cc              int     3\r\n00007ffc`f32c069c 190401          sbb     dword ptr [rcx+rax],eax\r\n00007ffc`f32c069f 000442          add     byte ptr [rdx+rax*2],al\r\n00007ffc`f32c06a2 0000            add     byte ptr [rax],al\r\n00007ffc`f32c06a4 400000          add     byte ptr [rax],al\r\n00007ffc`f32c06a7 00d8            add     al,bl\r\n00007ffc`f32c06a9 ac              lods    byte ptr [rsi]\r\n00007ffc`f32c06aa 40              ???\r\n00007ffc`f32c06ab f3fc            rep cld\r\n00007ffc`f32c06ad 7f00            jg      00007ffc`f32c06af\r\n00007ffc`f32c06af 000f            add     byte ptr [rdi],cl\r\n00007ffc`f32c06b1 1f              ???\r\n00007ffc`f32c06b2 440000          add     byte ptr [rax],r8b\r\n00007ffc`f32c06b5 c3              ret\r\n\r\nNo ILOffsetMap found\r\nSystem.Text.JsonLab.Benchmarks.JsonWriterPerf.NeedsEscaping(System.ReadOnlySpan`1)\r\nSystem.Text.JsonLab.Benchmarks.JsonWriterPerf.NeedsEscaping(Byte)\r\nSystem.Text.JsonLab.Benchmarks.JsonWriterPerf.get_AllowList()\r\n\r\n\r\n00007ffc`f32d0640 System.Text.JsonLab.Benchmarks.JsonWriterPerf.TestingBoundsCheck_new()\r\n00007ffc`f32d0640 0f1f440000      nop     dword ptr [rax+rax]\r\n00007ffc`f32d0645 488b4140        mov     rax,qword ptr [rcx+40h]\r\n00007ffc`f32d0649 4885c0          test    rax,rax\r\n00007ffc`f32d064c 7506            jne     00007ffc`f32d0654\r\n00007ffc`f32d064e 33d2            xor     edx,edx\r\n00007ffc`f32d0650 33c9            xor     ecx,ecx\r\n00007ffc`f32d0652 eb07            jmp     00007ffc`f32d065b\r\n00007ffc`f32d0654 488d5010        lea     rdx,[rax+10h]\r\n00007ffc`f32d0658 8b4808          mov     ecx,dword ptr [rax+8]\r\n00007ffc`f32d065b 33c0            xor     eax,eax\r\n00007ffc`f32d065d 85c9            test    ecx,ecx\r\n00007ffc`f32d065f 7e22            jle     00007ffc`f32d0683\r\n00007ffc`f32d0661 4c63c0          movsxd  r8,eax\r\n00007ffc`f32d0664 460fb60402      movzx   r8d,byte ptr [rdx+r8]\r\n00007ffc`f32d0669 4d63c0          movsxd  r8,r8d\r\n00007ffc`f32d066c 49b9d4e380fa5c010000 mov r9,offset Benchmarks!COM+_Entry_Point  (Benchmarks+0x1ce3d4) (0000015c`fa80e3d4)\r\n00007ffc`f32d0676 43803c0800      cmp     byte ptr [r8+r9],0\r\n00007ffc`f32d067b 740b            je      00007ffc`f32d0688\r\n00007ffc`f32d067d ffc0            inc     eax\r\n00007ffc`f32d067f 3bc1            cmp     eax,ecx\r\n00007ffc`f32d0681 7cde            jl      00007ffc`f32d0661\r\n00007ffc`f32d0683 b8ffffffff      mov     eax,0FFFFFFFFh\r\n00007ffc`f32d0688 c3              ret\r\n00007ffc`f32d0689 0000            add     byte ptr [rax],al\r\n00007ffc`f32d068b 0019            add     byte ptr [rcx],bl\r\n00007ffc`f32d068d 0000            add     byte ptr [rax],al\r\n00007ffc`f32d068f 004000          add     byte ptr [rax],al\r\n00007ffc`f32d0692 0000            add     byte ptr [rax],al\r\n00007ffc`f32d0694 0000            add     byte ptr [rax],al\r\n00007ffc`f32d0696 0000            add     byte ptr [rax],al\r\n00007ffc`f32d0698 80da41          sbb     dl,41h\r\n00007ffc`f32d069b f3fc            rep cld\r\n00007ffc`f32d069d 7f00            jg      00007ffc`f32d069f\r\n00007ffc`f32d069f 000f            add     byte ptr [rdi],cl\r\n00007ffc`f32d06a1 1f              ???\r\n00007ffc`f32d06a2 440000          add     byte ptr [rax],r8b\r\n00007ffc`f32d06a5 c3              ret\r\n00007ffc`f32d06a6 0000            add     byte ptr [rax],al\r\n\r\nNo ILOffsetMap found\r\nSystem.Text.JsonLab.Benchmarks.JsonWriterPerf.NeedsEscaping_new(System.ReadOnlySpan`1)\r\nSystem.Text.JsonLab.Benchmarks.JsonWriterPerf.NeedsEscaping_new(Byte)\r\nSystem.Text.JsonLab.Benchmarks.JsonWriterPerf.get_AllowList()\r\nSystem.Runtime.CompilerServices.Unsafe.Add(!!0 ByRef, Int32)\r\n\r\n```\r\n\r\ncc @AndyAyersMS, @GrabYourPitchforks, @dotnet/jit-contrib "},{"Id":"8854673870","Type":"IssuesEvent","CreatedAt":"2019-01-09T02:29:14","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21904","RelatedDescription":"Opened issue \"[x64] Test failed: System.Diagnostics.Tests.EventLogRecordTests.FormatDescription\" (#21904) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_corefx_jitstressregs0x10/751/\r\n\r\n**Failed test:**\r\nSystem.Diagnostics.Tests.EventLogRecordTests.FormatDescription\r\n\r\n**Log:**\r\n```\r\nSystem.Diagnostics.Tests.EventLogRecordTests.FormatDescription [FAIL]\r\n        Assert.Throws() Failure\r\n        Expected: typeof(System.Diagnostics.Eventing.Reader.EventLogNotFoundException)\r\n        Actual:   (No exception was thrown)\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x64_checked_w---1d068d3b\\_\\fx\\src\\System.Diagnostics.EventLog\\tests\\System\\Diagnostics\\Reader\\EventLogRecordTests.cs(44,0): at System.Diagnostics.Tests.EventLogRecordTests.FormatDescription()\r\n```"},{"Id":"8854636410","Type":"IssuesEvent","CreatedAt":"2019-01-09T02:18:16","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/21903","RelatedDescription":"Opened issue \"[x64] Test failed: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.SocketsHttpHandler_Authentication_Succeeds \" (#21903) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_ubuntu_corefx_jitstressregs0x80/820/\r\n\r\n**Failed test:**\r\nSystem.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.SocketsHttpHandler_Authentication_Succeeds\r\n\r\n**Log:**\r\n```\r\nSystem.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.SocketsHttpHandler_Authentication_Succeeds(authenticateHeader: \"Digest realm=\\\"testrealm\\\", algorithm=md5-Sess, no\"..., result: True) [FAIL]\r\n  [m[31;1m[m[37m      Assert.Equal() Failure\r\n  [m[37m      Expected: OK\r\n  [m[37m      Actual:   Unauthorized\r\n  [m[30;1m      Stack Trace:\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x80/_/fx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs(31,0): at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.<>c.<<-cctor>b__19_0>d.MoveNext()\r\n  [m[37m        --- End of stack trace from previous location where exception was thrown ---\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x80/_/fx/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(77,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x80/_/fx/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(105,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x80/_/fx/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(65,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout)\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x80/_/fx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs(59,0): at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.<>c__DisplayClass6_0.<<HttpClientHandler_Authentication_Succeeds>b__0>d.MoveNext()\r\n  [m[37m        --- End of stack trace from previous location where exception was thrown ---\r\n```"},{"Id":"8854584644","Type":"IssuesEvent","CreatedAt":"2019-01-09T02:03:00","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/20540","RelatedDescription":"Closed issue \"build error MSB3073 in CI job arm64_cross_checked_windows_nt_corefx_jitstress1_flow\" (#20540) at dotnet/coreclr","RelatedBody":"the failing jobs:\r\n\r\n- https://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstress1_bld/14/\r\n- https://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstress2_bld/13/\r\n- https://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstressregs0x1000_bld/13/\r\n- https://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_jitstressregs0x10_bld/13/\r\n\r\n\r\nthe failed log:\r\n```\r\n**CMake is a pre-requisite to build this repository but it was not found on the path**. Please install CMake from http://www.cmake.org/download/ and ensure it is on your path.\r\n  Failed to generate native component build project!\r\nD:\\j\\workspace\\arm64_cross_c---16b68231\\_\\fx\\src\\Native\\build-native.proj(50,5): error MSB3073: The command \"\"D:\\j\\workspace\\arm64_cross_c---16b68231\\_\\fx\\src\\Native\\build-native.cmd\" arm64 Release Windows_NT\" exited with code 1.\r\n\r\nBuild FAILED.\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8855033211","Type":"PullRequestEvent","CreatedAt":"2019-01-09T04:17:13","Actor":"JadynWong","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10573","RelatedDescription":"Opened pull request \"Change the wrong word LocalizableStrings.zh-Hans.xlf\" (#10573) at dotnet/cli","RelatedBody":"Change the wrong word\r\n`推出遥测` => '退出遥测'"},{"Id":"8854936925","Type":"PullRequestEvent","CreatedAt":"2019-01-09T03:45:15","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10572","RelatedDescription":"Opened pull request \"Updating branding to 2.2.103\" (#10572) at dotnet/cli","RelatedBody":""},{"Id":"8854933286","Type":"PullRequestEvent","CreatedAt":"2019-01-09T03:44:04","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10571","RelatedDescription":"Opened pull request \"Updating branding to 2.1.504\" (#10571) at dotnet/cli","RelatedBody":""},{"Id":"8854928377","Type":"PullRequestEvent","CreatedAt":"2019-01-09T03:42:32","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10570","RelatedDescription":"Opened pull request \"Merge release/2.2.1xx to release/2.2.2xx\" (#10570) at dotnet/cli","RelatedBody":""},{"Id":"8854909773","Type":"PullRequestEvent","CreatedAt":"2019-01-09T03:36:42","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10569","RelatedDescription":"Merged pull request \"Merge release/2.1.5xx to release/2.2.1xx\" (#10569) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8854908834","Type":"PullRequestEvent","CreatedAt":"2019-01-09T03:36:24","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10561","RelatedDescription":"Merged pull request \"Merge release/2.2.1xx-msrc into release/2.2.1xx\" (#10561) at dotnet/cli","RelatedBody":""},{"Id":"8854677558","Type":"PullRequestEvent","CreatedAt":"2019-01-09T02:30:16","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10567","RelatedDescription":"Merged pull request \"Merge release/2.1.5xx into release/2.1.6xx\" (#10567) at dotnet/cli","RelatedBody":""},{"Id":"8854675071","Type":"PullRequestEvent","CreatedAt":"2019-01-09T02:29:35","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10562","RelatedDescription":"Merged pull request \"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.1xx)\" (#10562) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"8854497028","Type":"PullRequestEvent","CreatedAt":"2019-01-09T01:37:41","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10569","RelatedDescription":"Opened pull request \"Merge release/2.1.5xx to release/2.2.1xx\" (#10569) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8854143660","Type":"IssuesEvent","CreatedAt":"2019-01-08T23:57:44","Actor":"dsplaisted","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1051","RelatedDescription":"Opened issue \"Create targeting pack for .NET Standard\" (#1051) at dotnet/standard","RelatedBody":"For .NET Core 3.0, we expect to separate targeting packs, which contain the assets needed at build time when targeting .NET Core 3.0 (for example, reference assemblies and intellisense documentation) from \"runtime packs\", which will include the platform-specific runtime components for .NET Core 3.  See dotnet/cli#10006, and [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e)\r\n\r\nWe will have targeting pack for each shared framework (.NET Core, ASP.NET Core, and WindowsDesktop), as well as for .NET Standard.  This issue tracks the work required a .NET Standard targeting pack.  Ideally, we should create targeting packs for both .NET Standard 2.1 and 2.0.\r\n\r\nThe work required includes:\r\n\r\n- A new NuGet package including the targeting pack assets.  This should include the reference assemblies, intellisense documentation, and platform manifest file.  The current straw man proposal for the package ID is `Microsoft.NETCore.App.Ref`\r\n- Installers for each supported installer format (msi, deb, pkg, and rpm), which lay out the targeting pack files under `<DOTNET_ROOT>/packs/<PackageId>/version`.  These installers will be bundled or depended on by the corresponding .NET Core SDK installers.\r\n\r\nSome of the details (such as package layout, names, etc) are still [under design](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) and may change slightly."},{"Id":"8848838829","Type":"IssuesEvent","CreatedAt":"2019-01-08T08:34:45","Actor":"duncand","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1050","RelatedDescription":"Opened issue \"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset\" (#1050) at dotnet/standard","RelatedBody":"I'm looking to provide input on .NET Standard and this appears to be the best place.\r\n\r\nSee https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/ for reference.\r\n\r\nI propose that what is currently planned for .NET Standard 2.1 be pushed back to .NET Standard 2.2, and that .NET Standard 2.1 instead just have the subset of those changes that are implementable on .NET Framework.\r\n\r\nWhile going forward, .NET Standard after 2.0 is mainly adding new features that are not practical to implement in .NET Framework, some of the proposals for 2.1 contained bringing out some things that already existed but missed the 2.0 window.\r\n\r\nIf we do what I propose, then we have a last chance to increase the API surface that can run everywhere, before it is permanently shut out due to releasing a .NET Standard version that Framework can't run, given that each increasing Standard version is a superset of what came before."},{"Id":"8846734371","Type":"IssuesEvent","CreatedAt":"2019-01-07T22:27:48","Actor":"Entomy","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1049","RelatedDescription":"Opened issue \"String Enhancements\" (#1049) at dotnet/standard","RelatedBody":"In .NET Core >=2.1 there exists a `.Join()` method that takes strings and chars, and a `.Split()` method that takes strings and chars. However in .NET Standard, `.Join()` only accepts strings, and `.Split()` only accepts chars. This is an odd seeming, and inconvenient, limitation. Can this be added to a future version?"},{"Id":"8846611360","Type":"PullRequestEvent","CreatedAt":"2019-01-07T22:02:02","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1048","RelatedDescription":"Merged pull request \" Move source items into src folder\" (#1048) at dotnet/standard","RelatedBody":"With this, we group all source items into an `src` folder to match the convention of other repos. I've done a diff of the `artifacts` dir before & after this change to confirm that everything still looks like the same. @ViktorHofer @danmosemsft @terrajobst PTAL\r\n\r\nFixes https://github.com/dotnet/standard/issues/1037"},{"Id":"8846611350","Type":"IssuesEvent","CreatedAt":"2019-01-07T22:02:02","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1037","RelatedDescription":"Closed issue \"Group source items in a src folder\" (#1037) at dotnet/standard","RelatedBody":"We should move\r\n- netstandard\r\n- platforms\r\n- apicompat\r\n- dir.traversal.targets\r\n- package.builds\r\n- src.builds\r\n\r\ninto a `src` folder to align with other dotnet repos.\r\n\r\ncc @wtgodbe @danmosemsft @terrajobst"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8855014525","Type":"PullRequestEvent","CreatedAt":"2019-01-09T04:10:37","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/34453","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corert\" (#34453) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8854885287","Type":"PullRequestEvent","CreatedAt":"2019-01-09T03:30:07","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32272","RelatedDescription":"Merged pull request \"Merge master-vs-deps to dev16.1-preview1-vs-deps\" (#32272) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8854799246","Type":"PullRequestEvent","CreatedAt":"2019-01-09T03:05:09","Actor":"zarenner","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32280","RelatedDescription":"Opened pull request \"Update GetTypeByMetadataName docs for case when type is ambiguous\" (#32280) at dotnet/roslyn","RelatedBody":"See #3864"},{"Id":"8854677659","Type":"PullRequestEvent","CreatedAt":"2019-01-09T02:30:18","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32270","RelatedDescription":"Merged pull request \"Merge master to dev16.1-preview1\" (#32270) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8854677345","Type":"PullRequestEvent","CreatedAt":"2019-01-09T02:30:13","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32273","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#32273) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8854676874","Type":"PullRequestEvent","CreatedAt":"2019-01-09T02:30:05","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32275","RelatedDescription":"Merged pull request \"Merge master to features/editorconfig-in-compiler\" (#32275) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8854633390","Type":"PullRequestEvent","CreatedAt":"2019-01-09T02:17:28","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32279","RelatedDescription":"Opened pull request \"Async-streams: Add sequence point after resume label for yield\" (#32279) at dotnet/roslyn","RelatedBody":"This should fix one of the issues in https://github.com/dotnet/roslyn/issues/32246\r\nSpecifically, when you reach a `yield return`, the next step correctly goes to the caller, but the next time you step into the async-iterator method, the same `yield return` is highlighted again instead of the statement after it.\r\n\r\nI'm still exploring out to validate this in VS (I expect the technique used in https://github.com/dotnet/roslyn/pull/31679 should work)."},{"Id":"8854541448","Type":"PullRequestEvent","CreatedAt":"2019-01-09T01:50:20","Actor":"ryzngard","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32278","RelatedDescription":"Opened pull request \"Fix accessibility issues for extract interface dialog\" (#32278) at dotnet/roslyn","RelatedBody":"AutomationDelegatingListView did not have the correct AutomationControlType. Refer to [https://review.docs.microsoft.com/en-us/accessibility-tools-docs/items/wpf/customcontrol_localizedcontroltype?branch=master](https://review.docs.microsoft.com/en-us/accessibility-tools-docs/items/wpf/customcontrol_localizedcontroltype?branch=master )\r\n\r\nMemberSelectionList uses `x:Name`, which is correct but does not fulfill automation needs. Add `AutomationProperties.Name` directly to be the same name. See [https://review.docs.microsoft.com/en-us/accessibility-tools-docs/items/wpf/customcontrol_name?branch=master](https://review.docs.microsoft.com/en-us/accessibility-tools-docs/items/wpf/customcontrol_name?branch=master)"},{"Id":"8854524182","Type":"PullRequestEvent","CreatedAt":"2019-01-09T01:45:20","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/32277","RelatedDescription":"Opened pull request \"Add ITypeSymbol.IsUnmanagedType and ITypeSymbol.IsRefLikeType\" (#32277) at dotnet/roslyn","RelatedBody":"Fixes #30427 and #30426"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8854577711","Type":"PullRequestEvent","CreatedAt":"2019-01-09T02:00:57","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6792","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6792) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"8854463152","Type":"PullRequestEvent","CreatedAt":"2019-01-09T01:28:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6790","RelatedDescription":"Merged pull request \"Fix getFuntionEntryPoint and canTailCall according to Crossgen\" (#6790) at dotnet/corert","RelatedBody":"This change fixes the two JIT interface methods according to their\r\nCrossgen implementation.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8854460961","Type":"PullRequestEvent","CreatedAt":"2019-01-09T01:27:27","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6782","RelatedDescription":"Merged pull request \"Moves common COM type to shared corelib partition\" (#6782) at dotnet/corert","RelatedBody":""},{"Id":"8854373630","Type":"PullRequestEvent","CreatedAt":"2019-01-09T01:03:29","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6792","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6792) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"8854296692","Type":"PullRequestEvent","CreatedAt":"2019-01-09T00:41:32","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6789","RelatedDescription":"Merged pull request \"Mark monitor helpers as requiring runtime JIT\" (#6789) at dotnet/corert","RelatedBody":"In accordance with Crossgen behavior I am blocking out the\r\nMonitor-related R2R helpers as requiring runtime JIT.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8854249551","Type":"PullRequestEvent","CreatedAt":"2019-01-09T00:27:31","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6791","RelatedDescription":"Opened pull request \"Fix generic lookup cells to be per method context\" (#6791) at dotnet/corert","RelatedBody":"1) Clean up generic lookup tests so that the TH->RTTH helper is\r\nonly called from a single method (GetTypeName). This is no longer\r\nstrictly necessary as Crossgen started to support the helper\r\nbut I believe it to be good for general hygiene.\r\n\r\n2) Minor improvements in the R2R test harness to display ordered\r\nsets of whitelisted vs. non-whitelisted jitted methods.\r\n\r\n3) It seems to me that GenericLookupSignature should always pass\r\naround the instantiating stub flag as the exact purpose of the\r\nsignature is to cater for shared methods with the extra\r\ninstantiation argument.\r\n\r\n4) Based on JanK's clarification I have fixed the CPAOT compiler\r\nto emit separate generic lookup cells for each context method.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8854124365","Type":"PullRequestEvent","CreatedAt":"2019-01-08T23:52:25","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6790","RelatedDescription":"Opened pull request \"Fix getFuntionEntryPoint and canTailCall according to Crossgen\" (#6790) at dotnet/corert","RelatedBody":"This change fixes the two JIT interface methods according to their\r\nCrossgen implementation.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8854090533","Type":"PullRequestEvent","CreatedAt":"2019-01-08T23:43:09","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6742","RelatedDescription":"Closed pull request \"Skip methods calling Type.GetTypeFromHandle + R2R infra improvements\" (#6742) at dotnet/corert","RelatedBody":"Don't compile methods calling into Type.GetTypeFromHandle as they\r\nrequire runtime JIT according to Crossgen. With this change, quite\r\na few ReadyToRunUnit test methods stop CPAOT-compiling so I had\r\nto add them to the whitelist.\r\n\r\nWhile doing this, I made a few improvements to the test harness:\r\nI have removed the unused flag \"readyToRunRejected\" and I changed\r\nthe list of jitted methods to be a dictionary indexed by method names.\r\nI have also modified the jitted method lists to be displayed in\r\nalphabetical order.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. This change fixes 2 Top200 tests and about 100 Pri#0 tests."},{"Id":"8854061952","Type":"PullRequestEvent","CreatedAt":"2019-01-08T23:35:19","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6789","RelatedDescription":"Opened pull request \"Mark monitor helpers as requiring runtime JIT\" (#6789) at dotnet/corert","RelatedBody":"In accordance with Crossgen behavior I am blocking out the\r\nMonitor-related R2R helpers as requiring runtime JIT.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8853757670","Type":"PullRequestEvent","CreatedAt":"2019-01-08T22:23:34","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6788","RelatedDescription":"Opened pull request \"CPAOT support for RVA-backed static fields\" (#6788) at dotnet/corert","RelatedBody":"This change adds support for the helper\r\nCORINFO_HELP_TYPEHANDLE_TO_RUNTIMETYPEHANDLE and fixes RVA field\r\nmanagement. In contrast to Crossgen which selectively copies over\r\nparts of the MSIL file (including the RVA field data), we simply\r\npoint the RVA field address to the pre-existing data block in the\r\nMSIL file embedded in the R2R image.\r\n\r\nTo achieve this goal I had to slightly generalize the section\r\nbuilder by adding new support for \"section start nodes\" - symbol\r\nnodes representing the beginning of each PE section. In case of\r\nsections copied from the original MSIL executable, the section\r\nstart nodes point at the \"original\" MSIL section content.\r\n\r\nUsing this construct I was able to introduce a new node RVAFieldNode\r\nwhich represents a given RVA field as an offset relative to one\r\nof the section start symbols. Upon codegen, the RVAFieldNode\r\nemits a relocatable pointer-sized record in the R/W data section\r\nwhich points at the beginning of the RVA field data in the MSIL.\r\n\r\nI have also ported JanK's RVA unit test to our base CPAOT test suite.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8851801747","Type":"PullRequestEvent","CreatedAt":"2019-01-08T16:36:50","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6786","RelatedDescription":"Merged pull request \"Fix data blob offset for dynamic statics\" (#6786) at dotnet/corert","RelatedBody":"In my initial implementation of dynamic statics, I misread the code\r\nin DomainLocalModule::NormalDynamicEntry as I incorrectly thought\r\nthat FEATURE_64BIT_ALIGNMENT would be set for AMD64. This is wrong,\r\nthe flag is only used on ARM32 where it makes sure that the data\r\nblob starts at an 8-byte boundary. This also implies that the constants\r\nmust be per architecture, not per pointer size. This change seems to be\r\nfixing almost a hundred CoreCLR Pri#0 test failures.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8850484908","Type":"IssuesEvent","CreatedAt":"2019-01-08T13:24:43","Actor":"RustyCZ","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6787","RelatedDescription":"Opened issue \"Access violation in GC thread\" (#6787) at dotnet/corert","RelatedBody":"I have tried Microsoft.DotNet.ILCompiler in version 1.0.0-alpha-27221-02 and I have encountered an error Access violation reading location 0x0000000000000000 in garbage collector thread. I am using Span of structures which have explicit layout and size if it may be of any help. It was compiled for win-x64 netcoreapp2.1.\r\n\r\nException thrown at 0x00007FF7325F5870 in Test.exe: 0xC0000005: Access violation reading location 0x0000000000000000.\r\n\r\n[Inline Frame] Test.exe!WKS::my_get_size\r\n[Inline Frame] Test.exe!WKS::my_get_size(Object *) Line 8905\r\nTest.exe!WKS::gc_heap::mark_object_simple1(unsigned char * oo, unsigned char * start) Line 17649\r\nTest.exe!WKS::gc_heap::mark_object_simple(unsigned char * * po) Line 18182\r\nTest.exe!WKS::GCHeap::Promote(Object * * ppObject, ScanContext * sc, unsigned int flags) Line 33839\r\nTest.exe!ScanConsecutiveHandlesWithoutUserData(Object * * pValue, Object * * pLast, ScanCallbackInfo * pInfo, unsigned __int64 * __formal) Line 452\r\n[Inline Frame] Test.exe!BlockScanBlocksEphemeralWorker(unsigned int * dwClumpMask, unsigned int) Line 685\r\nTest.exe!BlockScanBlocksEphemeral(TableSegment * pSegment, unsigned int uBlock, unsigned int uCount, ScanCallbackInfo * pInfo) Line 742\r\n[Inline Frame] Test.exe!SegmentScanByTypeMap(TableSegment *) Line 1698\r\nTest.exe!TableScanHandles(HandleTable * pTable, const unsigned int * puType, unsigned int uTypeCount, TableSegment *(*)(HandleTable *, TableSegment *, CrstHolderWithState *) pfnSegmentIterator, void(*)(TableSegment *, unsigned int, unsigned int, ScanCallbackInfo *) pfnBlockHandler, ScanCallbackInfo * pInfo, CrstHolderWithState * pCrstHolder) Line 1756\r\nTest.exe!HndScanHandlesForGC(HandleTable * hTable, void(*)(Object * *, unsigned __int64 *, unsigned __int64, unsigned __int64) scanProc, unsigned __int64 param1, unsigned __int64 param2, const unsigned int * types, unsigned int typeCount, unsigned int condemned, unsigned int maxgen, unsigned int flags) Line 1044\r\nTest.exe!Ref_TraceNormalRoots(unsigned int condemned, unsigned int maxgen, ScanContext * sc, void(*)(Object * *, ScanContext *, unsigned int) fn) Line 1144\r\nTest.exe!GCScan::GcScanHandles(void(*)(Object * *, ScanContext *, unsigned int) fn, int condemned, int max_gen, ScanContext * sc) Line 187\r\nTest.exe!WKS::gc_heap::mark_phase(int condemned_gen_number, unsigned int mark_only_p) Line 19638\r\nTest.exe!WKS::gc_heap::gc1() Line 15272\r\nTest.exe!WKS::gc_heap::garbage_collect(int n) Line 16864\r\nTest.exe!WKS::GCHeap::GarbageCollectGeneration(unsigned int gen, gc_reason reason) Line 35231\r\nTest.exe!WKS::gc_heap::try_allocate_more_space(alloc_context * acontext, unsigned __int64 size, int gen_number) Line 13083\r\n[Inline Frame] Test.exe!WKS::gc_heap::allocate_more_space(alloc_context *) Line 13370\r\n[Inline Frame] Test.exe!WKS::gc_heap::allocate(unsigned __int64) Line 13401\r\nTest.exe!WKS::GCHeap::Alloc(gc_alloc_context * context, unsigned __int64 size, unsigned int flags) Line 34542\r\nTest.exe!RhpNewObject() Line 76\r\n[External Code]\r\n"},{"Id":"8850406406","Type":"PullRequestEvent","CreatedAt":"2019-01-08T13:11:15","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6786","RelatedDescription":"Opened pull request \"Fix data blob offset for dynamic statics\" (#6786) at dotnet/corert","RelatedBody":"In my initial implementation of dynamic statics, I misread the code\r\nin DomainLocalModule::NormalDynamicEntry as I incorrectly thought\r\nthat FEATURE_64BIT_ALIGNMENT would be set for AMD64. This is wrong,\r\nthe flag is only used on ARM32 where it makes sure that the data\r\nblob starts at an 8-byte boundary. This also implies that the constants\r\nmust be per architecture, not per pointer size. This change seems to be\r\nfixing almost a hundred CoreCLR Pri#0 test failures.\r\n\r\nThanks\r\n\r\nTomas"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8855231334","Type":"IssuesEvent","CreatedAt":"2019-01-09T05:26:51","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2802","RelatedDescription":"Opened issue \"Set metadata on references coming from shared framework targeting pack to show them in solution explorer tree view\" (#2802) at dotnet/sdk","RelatedBody":"See https://github.com/dotnet/project-system/issues/4444"},{"Id":"8855049228","Type":"PullRequestEvent","CreatedAt":"2019-01-09T04:22:42","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2801","RelatedDescription":"Merged pull request \"Fix dogfood.sh\" (#2801) at dotnet/sdk","RelatedBody":"Various infrastructure changes or changes only to dogfood.ps1 have left `source eng\\dogfood.sh` broken..."},{"Id":"8854987020","Type":"PullRequestEvent","CreatedAt":"2019-01-09T04:01:06","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2800","RelatedDescription":"Merged pull request \"Separate copying of refs from preservation of compilation info\" (#2800) at dotnet/sdk","RelatedBody":"PreserveCompilationContext does two things today:\r\n\r\n1. Write compilation info to .deps\r\n2. Copy reference-only assemblies to build/publish refs/ folder\r\n\r\nAdd PreserveCompilationReferences to control (2) independently and default it to PreserveCompilationContext for backwards compatibility.\r\n\r\nFix #2122 \r\n\r\ncc @pranavkm @rynowak @eerhardt "},{"Id":"8854987018","Type":"IssuesEvent","CreatedAt":"2019-01-09T04:01:06","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2122","RelatedDescription":"Closed issue \"Add a switch to control publishing files to the refs directory - PreserveCompilationReferences\" (#2122) at dotnet/sdk","RelatedBody":"Related issues - https://github.com/dotnet/sdk/issues/2092, https://github.com/dotnet/sdk/issues/2121\r\n\r\n`PreserveCompilationContext` is used in two places today \r\n\r\n1. To determine if compilation content goes in the deps file \r\n2. If reference assemblies need to be copied to the `bin\\refs` and `publish\\refs` directories.\r\n\r\nPrior to 2.1.0, the Web Sdk always set `PreserveCompilationContext=true`. This resulted in increased deployment sizes even when the app did not require these files due to design time compilation of views. In 2.1.0-preview2, we tried conditionally setting this value in the WebSdk based on the presence of Razor files. This broke Mvc's runtime capabilities which relies on being able to inspect the deps file to query dependencies. There's more information about it here - https://github.com/dotnet/sdk/issues/2092#issue-309192033.\r\n\r\nWhat we care about, is the ability to suppress publishing the refs directory for most applications. In lieu of solving https://github.com/dotnet/sdk/issues/2092, which seems like a much more involved issue, it would be easier if we could have a different switch (suggestion `PreserveCompilationReferences`) that is used to determine if the refs directory gets emitted. Here are the two places we'd use this switch in lieu of  `PreserveCompilationContext`:\r\n\r\n* https://github.com/dotnet/sdk/blob/6945e3694c918eea4c8c4fb6217e1485b179994b/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.PreserveCompilationContext.targets#L45-L46\r\n* https://github.com/dotnet/sdk/blob/6945e3694c918eea4c8c4fb6217e1485b179994b/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.PreserveCompilationContext.targets#L84-L85\r\n\r\nThe Web.Sdk \\ Razor.Sdk would be responsible for setting the default value of this property as also initializing it if the user explicitly specified `PreserveCompilationContext` in their project files.\r\n"},{"Id":"8854396088","Type":"PullRequestEvent","CreatedAt":"2019-01-09T01:08:59","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2801","RelatedDescription":"Opened pull request \"Fix dogfood.sh\" (#2801) at dotnet/sdk","RelatedBody":"Various infrastructure changes or changes only to dogfood.ps1 have left `source eng\\dogfood.sh` broken..."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-04T09:40:50","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"open","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Open PR \"Update of EF description\" (#128)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2018-12-16T11:53:31","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"open","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Open issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"},{"Id":"316146229","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:34","Actor":"Cheesebaron","Number":"100","RawContent":null,"Title":"Create mvvmcross.md","State":"closed","Body":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415","Url":"https://github.com/dotnet/foundation/pull/100","RelatedDescription":"Closed or merged PR \"Create mvvmcross.md\" (#100)"},{"Id":"321003666","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:07","Actor":"shauheen","Number":"102","RawContent":null,"Title":"Update projects.json adding MLNET","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/102","RelatedDescription":"Closed or merged PR \"Update projects.json adding MLNET\" (#102)"},{"Id":"321003407","IsPullRequest":true,"CreatedAt":"2018-05-18T19:04:23","Actor":"shauheen","Number":"101","RawContent":null,"Title":"Create mlnet.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/101","RelatedDescription":"Closed or merged PR \"Create mlnet.md\" (#101)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"397184916","IsPullRequest":false,"CreatedAt":"2019-01-09T02:29:13","Actor":"VincentBu","Number":"21904","RawContent":null,"Title":"[x64] Test failed: System.Diagnostics.Tests.EventLogRecordTests.FormatDescription","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_corefx_jitstressregs0x10/751/\r\n\r\n**Failed test:**\r\nSystem.Diagnostics.Tests.EventLogRecordTests.FormatDescription\r\n\r\n**Log:**\r\n```\r\nSystem.Diagnostics.Tests.EventLogRecordTests.FormatDescription [FAIL]\r\n        Assert.Throws() Failure\r\n        Expected: typeof(System.Diagnostics.Eventing.Reader.EventLogNotFoundException)\r\n        Actual:   (No exception was thrown)\r\n        Stack Trace:\r\n          D:\\j\\workspace\\x64_checked_w---1d068d3b\\_\\fx\\src\\System.Diagnostics.EventLog\\tests\\System\\Diagnostics\\Reader\\EventLogRecordTests.cs(44,0): at System.Diagnostics.Tests.EventLogRecordTests.FormatDescription()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21904","RelatedDescription":"Open issue \"[x64] Test failed: System.Diagnostics.Tests.EventLogRecordTests.FormatDescription\" (#21904)"},{"Id":"397182520","IsPullRequest":false,"CreatedAt":"2019-01-09T02:18:16","Actor":"VincentBu","Number":"21903","RawContent":null,"Title":"[x64] Test failed: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.SocketsHttpHandler_Authentication_Succeeds ","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_ubuntu_corefx_jitstressregs0x80/820/\r\n\r\n**Failed test:**\r\nSystem.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.SocketsHttpHandler_Authentication_Succeeds\r\n\r\n**Log:**\r\n```\r\nSystem.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.SocketsHttpHandler_Authentication_Succeeds(authenticateHeader: \"Digest realm=\\\"testrealm\\\", algorithm=md5-Sess, no\"..., result: True) [FAIL]\r\n  [m[31;1m[m[37m      Assert.Equal() Failure\r\n  [m[37m      Expected: OK\r\n  [m[37m      Actual:   Unauthorized\r\n  [m[30;1m      Stack Trace:\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x80/_/fx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs(31,0): at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.<>c.<<-cctor>b__19_0>d.MoveNext()\r\n  [m[37m        --- End of stack trace from previous location where exception was thrown ---\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x80/_/fx/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(77,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x80/_/fx/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(105,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks)\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x80/_/fx/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs(65,0): at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout)\r\n  [m[37m        /mnt/j/workspace/dotnet_coreclr/master/jitstress/x64_checked_ubuntu_corefx_jitstressregs0x80/_/fx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs(59,0): at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.<>c__DisplayClass6_0.<<HttpClientHandler_Authentication_Succeeds>b__0>d.MoveNext()\r\n  [m[37m        --- End of stack trace from previous location where exception was thrown ---\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21903","RelatedDescription":"Open issue \"[x64] Test failed: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.SocketsHttpHandler_Authentication_Succeeds \" (#21903)"},{"Id":"396891175","IsPullRequest":true,"CreatedAt":"2019-01-09T02:00:36","Actor":"janvorli","Number":"21876","RawContent":null,"Title":"Enable FinalizeQueue SOS command for Unix","State":"closed","Body":"The command is very useful and there seems to be no reason for it to not to be enabled on Unix.\r\nCloses #21862","Url":"https://github.com/dotnet/coreclr/pull/21876","RelatedDescription":"Closed or merged PR \"Enable FinalizeQueue SOS command for Unix\" (#21876)"},{"Id":"397057069","IsPullRequest":true,"CreatedAt":"2019-01-09T01:46:18","Actor":"CarolEidt","Number":"21884","RawContent":null,"Title":"Copy address-taken SIMD intrinsic","State":"closed","Body":"This occurs, for example, when boxing the result of a SIMD intrinsic. This was being handled for the HW intrinsic case, but not the SIMD Vector intrinsics. Also, eliminate `OperIsSimdHWIntrisic` since it redundantly checks for the case of a SIMD result, even though it was always called in a context where the result is known to be a struct type.\r\n\r\nFix #21854","Url":"https://github.com/dotnet/coreclr/pull/21884","RelatedDescription":"Closed or merged PR \"Copy address-taken SIMD intrinsic\" (#21884)"},{"Id":"397175402","IsPullRequest":true,"CreatedAt":"2019-01-09T01:42:51","Actor":"wfurt","Number":"21902","RawContent":null,"Title":"fix DateTime overflow on ARM32","State":"open","Body":"fixes https://github.com/dotnet/corefx/issues/33965\r\n\r\nWith this fix all the runtime tests pass:\r\n```\r\n   Finished:    System.Runtime.Tests\r\n  === TEST EXECUTION SUMMARY ===\r\n     System.Runtime.Tests  Total: 31300, Errors: 0, Failed: 0, Skipped: 16, Time: 121.682s\r\n  /ssd/toweinfu/wfurt-corefx-arm/src/System.Runtime/tests\r\n```","Url":"https://github.com/dotnet/coreclr/pull/21902","RelatedDescription":"Open PR \"fix DateTime overflow on ARM32\" (#21902)"},{"Id":"397172862","IsPullRequest":true,"CreatedAt":"2019-01-09T01:29:58","Actor":"Dotnet-GitSync-Bot","Number":"21901","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"open","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/coreclr/pull/21901","RelatedDescription":"Open PR \"Mirror changes from dotnet/corert\" (#21901)"},{"Id":"397048404","IsPullRequest":true,"CreatedAt":"2019-01-09T01:01:37","Actor":"stephentoub","Number":"21882","RawContent":null,"Title":"Expose string.Concat(ReadOnlySpan, ...)","State":"closed","Body":"Contributes to https://github.com/dotnet/corefx/issues/34330","Url":"https://github.com/dotnet/coreclr/pull/21882","RelatedDescription":"Closed or merged PR \"Expose string.Concat(ReadOnlySpan, ...)\" (#21882)"},{"Id":"397129045","IsPullRequest":true,"CreatedAt":"2019-01-09T00:26:42","Actor":"dotnet-maestro-bot","Number":"21900","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\n* @adiaaida\n* @DrewScoggins\n* @danmosemsft\r\n\r\n## Instructions for merging\r\n\r\nThis repo does not appear to allow merge commits from the GitHub UI, so you will need to update this PR with a merge commit before closing this PR.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/21900","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#21900)"},{"Id":"397075661","IsPullRequest":true,"CreatedAt":"2019-01-08T22:46:36","Actor":"wtgodbe","Number":"21887","RawContent":null,"Title":"Update branding for 2.1.8","State":"closed","Body":"CC @safern @joperezr @mmitche @danmosemsft ","Url":"https://github.com/dotnet/coreclr/pull/21887","RelatedDescription":"Closed or merged PR \"Update branding for 2.1.8\" (#21887)"},{"Id":"397075571","IsPullRequest":true,"CreatedAt":"2019-01-08T22:46:24","Actor":"wtgodbe","Number":"21886","RawContent":null,"Title":"Update branding for 2.2.2","State":"closed","Body":"CC @safern @joperezr @mmitche @danmosemsft ","Url":"https://github.com/dotnet/coreclr/pull/21886","RelatedDescription":"Closed or merged PR \"Update branding for 2.2.2\" (#21886)"},{"Id":"397125492","IsPullRequest":false,"CreatedAt":"2019-01-08T22:36:49","Actor":"pentp","Number":"21899","RawContent":null,"Title":"Bmi2.MultiplyNoFlags issues","State":"open","Body":"I have a working version of `decimal.DecCalc` which uses `MultiplyNoFlags` from #21480 in a [branch](https://github.com/pentp/coreclr/tree/decimal-mulx), but I discovered two issues.\r\n\r\nIf `MultiplyNoFlags` is called without having its result used, then it's assumed to be a no-op, even if the `low` part is used. While such use would be sub-optimal, it should still be valid.\r\n``` C#\r\nstatic unsafe ulong mulxbug(ulong a, ulong b)\r\n{\r\n\tulong r;\r\n\tX86.Bmi2.X64.MultiplyNoFlags(a, b, &r);\r\n\treturn r;\r\n}\r\n```\r\n``` asm\r\n       nop\r\n       xor      rax, rax\r\n       ret\r\n```\r\n\r\nThe second problem is that performance is increased only up to 3% for some methods, while others suffer a performance penalty up to 20%! This is primarily caused by forcing the low result to be written to memory and excessive temporary register use, compounded by forced zero-init of the locals (even with no `.locals init`) which affects all code paths of the function.\r\n``` C#\r\nstatic unsafe ulong mulx(ulong a, ulong b)\r\n{\r\n\tulong r;\r\n\treturn X86.Bmi2.X64.MultiplyNoFlags(a, b, &r) + r;\r\n}\r\n```\r\n``` asm\r\n; Assembly listing for method DecCalc:mulx(long,long):long\r\n; Emitting BLENDED_CODE for X64 CPU with AVX - Windows\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00,T00] (  3,  3   )    long  ->  rcx        \r\n;  V01 arg1         [V01,T01] (  3,  3   )    long  ->  [rsp+0x18]  \r\n;  V02 loc0         [V02    ] (  2,  2   )    long  ->  [rsp+0x00]   do-not-enreg[X] must-init addr-exposed ld-addr-op\r\n;# V03 OutArgs      [V03    ] (  1,  1   )  lclBlk ( 0) [rsp+0x00]   \"OutgoingArgSpace\"\r\n;\r\n; Lcl frame size = 8\r\n\r\nG_M42317_IG01:\r\n       push     rax\r\n       xor      rax, rax\r\n       mov      qword ptr [rsp], rax\r\n       mov      qword ptr [rsp+18H], rdx\r\n\r\nG_M42317_IG02:\r\n       lea      rax, bword ptr [rsp]\r\n       mov      rdx, rcx\r\n       mulx     rdx, r8, qword ptr [rsp+18H]\r\n       mov      qword ptr [rax], r8\r\n       mov      rax, rdx\r\n       add      rax, qword ptr [rsp]\r\n\r\nG_M42317_IG03:\r\n       add      rsp, 8\r\n       ret      \r\n\r\n; Total bytes of code 41, prolog size 7 for method DecCalc:mulx(long,long):long\r\n```\r\nWhile ideally this should be just:\r\n``` asm\r\n       mulx     rax, rcx, rcx\r\n       add      rax, rcx\r\n       ret      \r\n```","Url":"https://github.com/dotnet/coreclr/issues/21899","RelatedDescription":"Open issue \"Bmi2.MultiplyNoFlags issues\" (#21899)"},{"Id":"397123969","IsPullRequest":false,"CreatedAt":"2019-01-08T22:31:20","Actor":"sbomer","Number":"21898","RawContent":null,"Title":"Symbol publishing issues in coreclr official build","State":"open","Body":"corefx consumption of new coreclr official builds currently fails with issues related to missing symbol packages: https://github.com/dotnet/corefx/pull/34169.\r\nSome of the official builds seem not to be building symbol packages at all despite it working locally. We need to ensure that symbol packages are being correctly pushed to blob feeds and included in the BAR update so that downstream repos can consume them.","Url":"https://github.com/dotnet/coreclr/issues/21898","RelatedDescription":"Open issue \"Symbol publishing issues in coreclr official build\" (#21898)"},{"Id":"397122984","IsPullRequest":false,"CreatedAt":"2019-01-08T22:28:06","Actor":"sbomer","Number":"21897","RawContent":null,"Title":"Enable transport packages for core-setup","State":"open","Body":"With our new official builds, I turned off transport packages because it seems we should only publish these assets once and ask core-setup to consume them from the official packages we publish anyway. However, transport packages need to be turned on for the moment to unblock core-setup builds.","Url":"https://github.com/dotnet/coreclr/issues/21897","RelatedDescription":"Open issue \"Enable transport packages for core-setup\" (#21897)"},{"Id":"397122897","IsPullRequest":true,"CreatedAt":"2019-01-08T22:27:50","Actor":"jkoritzinsky","Number":"21896","RawContent":null,"Title":"Implement AssemblyDependencyResolver","State":"open","Body":"Implement the `System.Runtime.Loader.AssemblyDependencyResolver` type as per dotnet/corefx#33165.\r\n\r\nImplements dotnet/corefx#33165\r\nSupercedes vitek-karas#8.\r\n\r\ncc: @eerhardt @ericstj @vitek-karas \r\n\r\nFrom vitek-karas#8:\r\n\r\n> PInvokes into hostpolicy.dll (which should live next to the runtime and thus always be reachable).\r\n> If the PInvoke fails (missing hostpolicy.dll) we will fail for now.\r\n> \r\n> Adds tests for the API into CoreCLR repo. The main reason is that with corerun\r\n> we can easily mock the hostpolicy.dll since there's none to start with.\r\n> Writing the same tests in CoreFX or any other place which starts the runtime through\r\n> hostpolicy would require test-only functionality to exist in either the class itself\r\n> or in the hostpolicy.\r\n","Url":"https://github.com/dotnet/coreclr/pull/21896","RelatedDescription":"Open PR \"Implement AssemblyDependencyResolver\" (#21896)"},{"Id":"397121312","IsPullRequest":true,"CreatedAt":"2019-01-08T22:22:35","Actor":"dotnet-maestro-bot","Number":"21895","RawContent":null,"Title":"Update CoreClr, CoreFx to servicing-27129-04, servicing-27129-04, respectively (release/2.1)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/21895","RelatedDescription":"Open PR \"Update CoreClr, CoreFx to servicing-27129-04, servicing-27129-04, respectively (release/2.1)\" (#21895)"},{"Id":"397119998","IsPullRequest":true,"CreatedAt":"2019-01-08T22:20:56","Actor":"dotnet-maestro-bot","Number":"21894","RawContent":null,"Title":"Update CoreFx to servicing-27129-04 (release/uwp6.2)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/21894","RelatedDescription":"Open PR \"Update CoreFx to servicing-27129-04 (release/uwp6.2)\" (#21894)"},{"Id":"397117211","IsPullRequest":true,"CreatedAt":"2019-01-08T22:18:10","Actor":"AndyAyersMS","Number":"21893","RawContent":null,"Title":"JIT: modify inline budget update to use estimated imported IL size","State":"open","Body":"The inliner keeps a time budget to try and avoid pathological runaway inline\r\nbehavior (see #4375). The jit estimates the time impact of an inline using a\r\nsimple projection based on IL size. If an prospective inline would put the jit\r\nover the time budget, the inline is blocked -- and note even aggressive inlines\r\ncan be blocked this way.\r\n\r\nWe now have a fair number of aggressive inline methods like\r\n`Vector256<T>.IsSupported` where the IL is optimized early on by the jit and the\r\nactual impact on the calling method is much less than the initial IL size would\r\nsuggest. For instance `IsSupported` is 286 bytes of IL, but the net contribution\r\nof this method at jit time is either a constant 0 or 1, and so the effective size\r\nis more like 2 bytes of IL.\r\n\r\nThis set of changes updates the jit to estimate the imported IL size of a method\r\nwhen updating the budget.\r\n\r\nCloses #21794.","Url":"https://github.com/dotnet/coreclr/pull/21893","RelatedDescription":"Open PR \"JIT: modify inline budget update to use estimated imported IL size\" (#21893)"},{"Id":"397098166","IsPullRequest":false,"CreatedAt":"2019-01-08T21:41:45","Actor":"mikem8361","Number":"21892","RawContent":null,"Title":"Add createdump test coverage of web apps.","State":"open","Body":"We need to test createdump against a webapp in either the dotnet-diagnostictests repo/tests or as part of the SOS tests in the diagnostics repo.","Url":"https://github.com/dotnet/coreclr/issues/21892","RelatedDescription":"Open issue \"Add createdump test coverage of web apps.\" (#21892)"},{"Id":"397012191","IsPullRequest":true,"CreatedAt":"2019-01-08T21:41:35","Actor":"tommcdon","Number":"21878","RawContent":null,"Title":"Dev/tommcdon/port arm stepping fixes","State":"closed","Body":"Porting the following PR #19652","Url":"https://github.com/dotnet/coreclr/pull/21878","RelatedDescription":"Closed or merged PR \"Dev/tommcdon/port arm stepping fixes\" (#21878)"},{"Id":"397096783","IsPullRequest":true,"CreatedAt":"2019-01-08T21:37:47","Actor":"janvorli","Number":"21891","RawContent":null,"Title":"Fix DynamicMethodDesc memory leak","State":"open","Body":"The DynamicMethodTable::AddMethodsToList was incorrectly allocating the\r\nMethodDescChunk from the domain's LoaderAllocator instead of the context\r\nspecific one. Thus the allocated memory was leaking after a collectible\r\nAssemblyLoadContext was collected.\r\n\r\nThere was also a problem with the DynamicMethodDesc::Destroy being\r\ncalled twice for collectible classes - once by\r\nRuntimeMethodHandle::Destroy() and once when the DomainFile destructor\r\nwas called. Due to the primary issue, this problem was not visible,\r\nsince the domain's LoaderAllocator is never unmapped. But it started to\r\ncause AV after the primary issue was fixed.","Url":"https://github.com/dotnet/coreclr/pull/21891","RelatedDescription":"Open PR \"Fix DynamicMethodDesc memory leak\" (#21891)"},{"Id":"397087250","IsPullRequest":false,"CreatedAt":"2019-01-08T21:11:36","Actor":"Tomius","Number":"21890","RawContent":null,"Title":"JIT bug in tail calls involving boxed structs since .NET Core 2.1.0 ","State":"open","Body":"I belive there was a JIT bug introduced to tail calls involving boxed structs in .NET Core 2.1.0.\r\n\r\n# Bug description\r\n\r\n## F# repro 1)\r\n``` F#\r\nopen System\r\n\r\n[<Struct>]\r\ntype A (value : int) =\r\n    override this.ToString() = value.ToString()\r\n\r\ntype B (a : A) =\r\n    override this.ToString() = (a :> Object).ToString()\r\n\r\n[<EntryPoint>]\r\nlet main args =\r\n    for i in 1 .. 5 do\r\n        Console.WriteLine(B(A(42)))\r\n    0\r\n```\r\n\r\n## Output:\r\n```\r\n> dotnet run -c Release\r\n1\r\n1\r\n42\r\n42\r\n42\r\n```\r\nThe first two outputs are incorrect, but it keeps printing the correct value from the 3rd call.\r\n\r\n## F# repro 2)\r\nThis version can cause the program to read from random memory locations\r\n``` F#\r\nopen System\r\n\r\n[<Struct>]\r\ntype A = { Value : int }\r\n\r\ntype B (a : A) =\r\n    override this.ToString() = (a :> Object).ToString()\r\n\r\n[<EntryPoint>]\r\nlet main args =\r\n    for i in 1 .. 5 do\r\n        Console.WriteLine(B {Value = 42})\r\n    0\r\n```\r\n\r\nPossible output:\r\n```\r\n> dotnet run -c Release\r\n{Value = -1580448536;}\r\n{Value = -1580392360;}\r\n{Value = -1580378896;}\r\n{Value = -1580365432;}\r\n{Value = -1580351968;}\r\n```\r\n\r\n# Notes\r\n* The bug doesn't happen without optimization (JIT) enabled\r\n* The bug doesn't happen without tail calls enabled\r\n  * In the examples, B.toString() has a ```tail.``` IL instruction when the bug happens\r\n* .NET Core runtime 2.1.0 or above. Applications targeting netcore2.0 still have this bug if run with a 2.1  or newer runtime, but are bug-free when run with a previous runtime.\r\n  * The versions I've tried:\r\n\r\n| net461 | 2.0.0 | 2.0.5 | 2.0.7 | 2.1.0 | 2.1.3 | 2.1.5 | 2.1.6 | 2.2.0 |\r\n|--------|-------|-------|-------|-------|-------|-------|-------|-------|\r\n|   -    |   -   |   -   |   -   |  bug  |  bug  |  bug  |  bug  |  bug  |\r\n\r\n* The tail call function must have a struct on its stack to reproduce this bug\r\n   * The bug seems to persist for all struct sizes, but the size may determine the pattern that appears in the misbehaviour.\r\n* Tested on Win10 x64 \r\n","Url":"https://github.com/dotnet/coreclr/issues/21890","RelatedDescription":"Open issue \"JIT bug in tail calls involving boxed structs since .NET Core 2.1.0 \" (#21890)"},{"Id":"396925638","IsPullRequest":true,"CreatedAt":"2019-01-08T21:00:28","Actor":"dotnet-maestro-bot","Number":"21877","RawContent":null,"Title":"Update CoreClr, CoreFx to preview-27308-03, preview.19058.1, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/21877","RelatedDescription":"Closed or merged PR \"Update CoreClr, CoreFx to preview-27308-03, preview.19058.1, respectively (master)\" (#21877)"},{"Id":"397083531","IsPullRequest":true,"CreatedAt":"2019-01-08T21:00:12","Actor":"dotnet-maestro-bot","Number":"21889","RawContent":null,"Title":"Update CoreClr, CoreFx to servicing-27207-03, servicing-27207-03, respectively (release/2.2)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/21889","RelatedDescription":"Open PR \"Update CoreClr, CoreFx to servicing-27207-03, servicing-27207-03, respectively (release/2.2)\" (#21889)"},{"Id":"397080116","IsPullRequest":true,"CreatedAt":"2019-01-08T20:49:49","Actor":"fiigii","Number":"21888","RawContent":null,"Title":"Fix VZEROUPPER for HW intrinsic","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/21790\r\n\r\n@CarolEidt @tannergooding ","Url":"https://github.com/dotnet/coreclr/pull/21888","RelatedDescription":"Open PR \"Fix VZEROUPPER for HW intrinsic\" (#21888)"},{"Id":"397060555","IsPullRequest":false,"CreatedAt":"2019-01-08T19:52:30","Actor":"MattGal","Number":"21885","RawContent":null,"Title":"Set EnableTelemetry=true for CoreCLR dnceng official builds","State":"open","Body":"Whenever kicking off an official build, if you set this property to be true we'll enable automated build failure analysis and logging to the Helix database, and track infrastructure-related problems.\r\n\r\n(@robertborr FYI too)","Url":"https://github.com/dotnet/coreclr/issues/21885","RelatedDescription":"Open issue \"Set EnableTelemetry=true for CoreCLR dnceng official builds\" (#21885)"},{"Id":"397043552","IsPullRequest":true,"CreatedAt":"2019-01-08T19:36:44","Actor":"BruceForstall","Number":"21880","RawContent":null,"Title":"Update test reports archiving","State":"closed","Body":"Two things:\r\n1. Turn \"echo\" back on after runtests.cmd, so we see in the log file\r\nthe testReports.zip compression.\r\n2. Change the archiving of testReports.zip to not occur even if the\r\ntest run fails (this is actually the most interesting case), and don't\r\nfail if there is nothing to archive.","Url":"https://github.com/dotnet/coreclr/pull/21880","RelatedDescription":"Closed or merged PR \"Update test reports archiving\" (#21880)"},{"Id":"397048738","IsPullRequest":false,"CreatedAt":"2019-01-08T19:19:29","Actor":"AndyAyersMS","Number":"21883","RawContent":null,"Title":"Small bit of unreachable IL in CLRtoWinRT stub","State":"open","Body":"Not sure if it matters all that much, but `IL_STUB_CLRtoWinRT` contains a small bit of unreachable IL. Noticed this while modifying the jit to track which methods are only partially imported.\r\n```\r\nIL_0022  25                dup         \r\nIL_0023  16                ldc.i4.0    \r\nIL_0024  3c 0d 00 00 00    bge          13 (IL_0036)\r\nIL_0029  28 03 00 00 06    call         0x6000003\r\nIL_002e  02                ldarg.0     \r\nIL_002f  28 04 00 00 06    call         0x6000004\r\nIL_0034  7a                throw       \r\nIL_0035  16                ldc.i4.0       // unreachable\r\nIL_0036  26                pop         \r\n```\r\nperhaps the emitted IL used to be different?\r\n\r\nhttps://github.com/dotnet/coreclr/blob/bd5ea1c46ca21631194610f88f2ba420e8982d5b/src/vm/dllimport.cpp#L989-L992","Url":"https://github.com/dotnet/coreclr/issues/21883","RelatedDescription":"Open issue \"Small bit of unreachable IL in CLRtoWinRT stub\" (#21883)"},{"Id":"397045907","IsPullRequest":false,"CreatedAt":"2019-01-08T19:11:24","Actor":"mjsabby","Number":"21881","RawContent":null,"Title":"New GCLowVolume keyword for ETW/EventPipe events when verbose events are enabled for other keywords","State":"open","Body":"To do continuous monitoring of an application where you would like MethodLoad events for jitted code to support symbolic lookup, and would also like GC events you end up getting AllocationTicks as well because the GC Keyword's verbosity level 5 gives you that data.\r\n\r\nI'm proposing we add a new GCLowVolume keyword so that we can get verbose data for MethodLoads and continue to have GC monitoring that does not impact performance (due to the high event volume).","Url":"https://github.com/dotnet/coreclr/issues/21881","RelatedDescription":"Open issue \"New GCLowVolume keyword for ETW/EventPipe events when verbose events are enabled for other keywords\" (#21881)"},{"Id":"397021115","IsPullRequest":false,"CreatedAt":"2019-01-08T18:03:04","Actor":"joudot","Number":"21879","RawContent":null,"Title":"COMPlus_ThreadPool_ForceMinWorkerThreads vs ThreadPool.GetMinThreads value","State":"open","Body":"I am setting COMPlus_ThreadPool_ForceMinWorkerThreads before I run a .NET Core console app.\r\n\r\nFrom this console app I call `ThreadPool.GetMinThreads(out int workerThreads, out int ioThreads);`\r\n\r\nHowever I noticed that the **workerThreads** value is different from the **COMPlus_ThreadPool_ForceMinWorkerThreads** value. \r\n\r\nI am sure there is a logic explanation since **workerThreads** is consistent depending on  **COMPlus_ThreadPool_ForceMinWorkerThreads**:\r\n- **workerThreads** = **COMPlus_ThreadPool_ForceMinWorkerThreads** when 0< **COMPlus_ThreadPool_ForceMinWorkerThreads** <10\r\n- **workerThreads** = **COMPlus_ThreadPool_ForceMinWorkerThreads** + 6 when 9< **COMPlus_ThreadPool_ForceMinWorkerThreads** <20\r\n- **workerThreads** = **COMPlus_ThreadPool_ForceMinWorkerThreads** + 12 when 19< **COMPlus_ThreadPool_ForceMinWorkerThreads** <30\r\n- **workerThreads** = **COMPlus_ThreadPool_ForceMinWorkerThreads** + 18 when 29< **COMPlus_ThreadPool_ForceMinWorkerThreads** <40\r\n- ...\r\n\r\nWhat is the explanation for this difference?","Url":"https://github.com/dotnet/coreclr/issues/21879","RelatedDescription":"Open issue \"COMPlus_ThreadPool_ForceMinWorkerThreads vs ThreadPool.GetMinThreads value\" (#21879)"},{"Id":"396867946","IsPullRequest":true,"CreatedAt":"2019-01-08T11:37:00","Actor":"benaadams","Number":"21875","RawContent":null,"Title":"Fast-path GetStateMachineBox","State":"open","Body":"Split `CreateStateMachineBox` out from `GetStateMachineBox` for a fast-path in common scenario.\r\n\r\nAt Jit time `GetStateMachineBox` for a pre-\"boxed\" statemachine is generally considered a profitable inline (without forcing with AggressiveInlining), adding only 79 bytes of asm to XxOnCompleted; whereas with the creation in it is not (417 bytes of asm). \r\n\r\nAt crossgen it it blocked due to `[FAILED: runtime dictionary lookup]` but that should be cleaned up by Tier1 Jit.\r\n\r\nThe `GetStateMachineBox` portion is the always called section for `AwaitUnsafeOnCompleted`\r\n\r\nAs per the comments the Get not Create path is the more common one (here's with Get inlined):\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/50831168-f2463480-1341-11e9-87ab-97a7d5b8c61f.png)\r\n\r\n\r\n/cc @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/21875","RelatedDescription":"Open PR \"Fast-path GetStateMachineBox\" (#21875)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"397205481","IsPullRequest":true,"CreatedAt":"2019-01-09T04:17:12","Actor":"JadynWong","Number":"10573","RawContent":null,"Title":"Change the wrong word LocalizableStrings.zh-Hans.xlf","State":"open","Body":"Change the wrong word\r\n`推出遥测` => '退出遥测'","Url":"https://github.com/dotnet/cli/pull/10573","RelatedDescription":"Open PR \"Change the wrong word LocalizableStrings.zh-Hans.xlf\" (#10573)"},{"Id":"397200126","IsPullRequest":true,"CreatedAt":"2019-01-09T03:45:15","Actor":"livarcocc","Number":"10572","RawContent":null,"Title":"Updating branding to 2.2.103","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/10572","RelatedDescription":"Open PR \"Updating branding to 2.2.103\" (#10572)"},{"Id":"397199931","IsPullRequest":true,"CreatedAt":"2019-01-09T03:44:04","Actor":"livarcocc","Number":"10571","RawContent":null,"Title":"Updating branding to 2.1.504","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/10571","RelatedDescription":"Open PR \"Updating branding to 2.1.504\" (#10571)"},{"Id":"397199669","IsPullRequest":true,"CreatedAt":"2019-01-09T03:42:31","Actor":"livarcocc","Number":"10570","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/10570","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10570)"},{"Id":"397174423","IsPullRequest":true,"CreatedAt":"2019-01-09T03:36:42","Actor":"dotnet-bot","Number":"10569","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10569","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#10569)"},{"Id":"397039931","IsPullRequest":true,"CreatedAt":"2019-01-09T03:36:24","Actor":"livarcocc","Number":"10561","RawContent":null,"Title":"Merge release/2.2.1xx-msrc into release/2.2.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10561","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx-msrc into release/2.2.1xx\" (#10561)"},{"Id":"397153661","IsPullRequest":true,"CreatedAt":"2019-01-09T02:30:16","Actor":"livarcocc","Number":"10567","RawContent":null,"Title":"Merge release/2.1.5xx into release/2.1.6xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10567","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx into release/2.1.6xx\" (#10567)"},{"Id":"397080921","IsPullRequest":true,"CreatedAt":"2019-01-09T02:29:35","Actor":"dotnet-maestro-bot","Number":"10562","RawContent":null,"Title":"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.1xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/10562","RelatedDescription":"Closed or merged PR \"Update aspnet, aspnet, coresetup to rtm-35537, rtm-35537, 2.1.0, respectively (release/2.2.1xx)\" (#10562)"},{"Id":"397158501","IsPullRequest":false,"CreatedAt":"2019-01-09T01:13:54","Actor":"ArgoZhang","Number":"10568","RawContent":null,"Title":"duplicate  targetframework attribute in multiple target enabled live unit testing","State":"closed","Body":"## Steps to reproduce\r\n1. create new project modify proj file\r\n    <TargetFrameworks>netstandard2.0;net40</TargetFrameworks>\r\ncoding some class ......\r\n \r\n2. create UnitTestProject use xunit\r\ncoding some test method ......\r\n\r\n3. Configure live unit test option\r\nTools -> Options... Choose Live Unit Testing item -> General\r\nset logging level -> Verbose\r\n\r\n4. Start live unit testing\r\n Test-> Live Unit Testing -> Start\r\n\r\n## Expected  behavior\r\nlive unit testing running successfully.\r\n\r\n## Actual behavior\r\nlive unit testing build fail.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n[08:52:17.377 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\Longbow.Security.Cryptography\\Longbow.Security.Cryptography.csproj(0,0): error MSB4057: The target \"GetTargetPath\" does not exist in the project.\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(14,12): error CS0579: Duplicate 'System.Reflection.AssemblyCompanyAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(15,12): error CS0579: Duplicate 'System.Reflection.AssemblyConfigurationAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(16,12): error CS0579: Duplicate 'System.Reflection.AssemblyDescriptionAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(17,12): error CS0579: Duplicate 'System.Reflection.AssemblyFileVersionAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(18,12): error CS0579: Duplicate 'System.Reflection.AssemblyInformationalVersionAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(19,12): error CS0579: Duplicate 'System.Reflection.AssemblyProductAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(20,12): error CS0579: Duplicate 'System.Reflection.AssemblyTitleAttribute' attribute\r\n[08:52:19.963 Verbose] - BuildManager - obj\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(21,12): error CS0579: Duplicate 'System.Reflection.AssemblyVersionAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(14,12): error CS0579: Duplicate 'System.Reflection.AssemblyCompanyAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(15,12): error CS0579: Duplicate 'System.Reflection.AssemblyConfigurationAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(16,12): error CS0579: Duplicate 'System.Reflection.AssemblyDescriptionAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(17,12): error CS0579: Duplicate 'System.Reflection.AssemblyFileVersionAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(18,12): error CS0579: Duplicate 'System.Reflection.AssemblyInformationalVersionAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(19,12): error CS0579: Duplicate 'System.Reflection.AssemblyProductAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(20,12): error CS0579: Duplicate 'System.Reflection.AssemblyTitleAttribute' attribute\r\n[08:52:19.964 Verbose] - BuildManager - D:\\src\\Longbow\\Longbow.Utility2010\\.vs\\Longbow.Utility2010\\lut\\0\\i\\Longbow.Security.Cryptography\\Debug\\netstandard2.0\\Longbow.Security.Cryptography.AssemblyInfo.cs(21,12): error CS0579: Duplicate 'System.Reflection.AssemblyVersionAttribute' attribute\r\n[08:52:21.641 Info] - BuildManager - Build completed (failed).\r\n\r\nBTW:\r\nif set  <TargetFrameworks>netstandard2.0;net40</TargetFrameworks> as  <TargetFramework>netstandard2.0</TargetFramework> everythings will be ok.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10568","RelatedDescription":"Closed issue \"duplicate  targetframework attribute in multiple target enabled live unit testing\" (#10568)"},{"Id":"397128331","IsPullRequest":true,"CreatedAt":"2019-01-09T00:32:47","Actor":"livarcocc","Number":"10565","RawContent":null,"Title":"Updating Rolsyn to 3.0.0-beta2-19055-10","State":"closed","Body":"This matches the version inserted into VS.\r\n","Url":"https://github.com/dotnet/cli/pull/10565","RelatedDescription":"Closed or merged PR \"Updating Rolsyn to 3.0.0-beta2-19055-10\" (#10565)"},{"Id":"397112317","IsPullRequest":true,"CreatedAt":"2019-01-09T00:02:45","Actor":"dotnet-maestro-bot","Number":"10564","RawContent":null,"Title":"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.5xx)","State":"closed","Body":"/cc @dotnet/dotnet-cli","Url":"https://github.com/dotnet/cli/pull/10564","RelatedDescription":"Closed or merged PR \"Update aspnet, coresetup to servicing-31150, preview1-26216-03, respectively (release/2.1.5xx)\" (#10564)"},{"Id":"397132842","IsPullRequest":false,"CreatedAt":"2019-01-08T23:03:46","Actor":"peterhuene","Number":"10566","RawContent":null,"Title":"Limit default apphost feature to netcoreapp3.0","State":"open","Body":"## Steps to reproduce\r\n\r\nUsing a 3.0 SDK:\r\n\r\n1. `dotnet new console`.\r\n2. Change the `TargetFramework` property to `netcoreapp2.1`.\r\n3. Build.\r\n\r\n## Expected  behavior\r\n\r\nThere should be no default apphost present.\r\n\r\n## Actual behavior\r\n\r\nA default apphost (.exe) is created.\r\n\r\nThere are two reasons why this is undesirable:\r\n\r\n1. The default apphost feature was implemented in such a way that impacts restore; namely that a restore for the current SDK's platform occurs so the apphost package appears in the assets graph.  This has a performance impact on dotnet commands that do a restore and unnecessarily pollutes the assets graph.  The hope was that we would support \"download only\" packages that don't affect the restore operation and assets graph.  This feature is coming online to support framework and targeting packs, but is limited to `netcoreapp3.0+`.\r\n\r\n2. Users that upgrade their SDK, even for major SDK releases, should reasonably expect no new build outputs when their target framework has not changed.  This is the reason we limit the \"copy local dependencies on build\" feature to `netcoreapp3.0+`.\r\n\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009793 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18577-0031 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27122-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10566","RelatedDescription":"Open issue \"Limit default apphost feature to netcoreapp3.0\" (#10566)"},{"Id":"397099180","IsPullRequest":false,"CreatedAt":"2019-01-08T21:44:48","Actor":"tremblaysimon","Number":"10563","RawContent":null,"Title":"dotnet pack doesn't care of VersionPrefix and VersionSuffix properties with version 2.1.502","State":"open","Body":"## Steps to reproduce\r\n\r\n1. Get dotnet CLI version 2.1.502\r\n\r\n2. Create a new project PROJECT_NAME and add in csproj VersionPrefix and/or VersionSuffix properties.\r\n\r\nExample:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <VersionPrefix>1.2.3</VersionPrefix>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n3. Run dotnet pack PROJECT_NAME\r\n\r\n\r\n## Expected  behavior\r\n\r\nCreate a new nuget package PROJECT_NAME.**1.2.3**.nupkg\r\n\r\n## Actual behavior\r\n\r\nIt creates a new nuget package PROJECT_NAME.**1.0.0**.nupkg\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.502\r\n Commit:    c74ce8f29f\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.502/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.502 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n```\r\n\r\nI try to get the official documentation about these properties (VersionPrefix, VersionSuffix, Version, PackageVersion) but I didn't find anything except that unofficial link to understand how dotnet pack is working with these properties: https://andrewlock.net/version-vs-versionsuffix-vs-packageversion-what-do-they-all-mean/#version \r\n\r\nIt works with version 2.1.402 or version 2.1.403.\r\n\r\nI don't have nuget CLI installed on my desktop.\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10563","RelatedDescription":"Open issue \"dotnet pack doesn't care of VersionPrefix and VersionSuffix properties with version 2.1.502\" (#10563)"},{"Id":"397029870","IsPullRequest":true,"CreatedAt":"2019-01-08T18:27:58","Actor":"nugetlurker","Number":"10560","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5754 into cli","State":"open","Body":"Insert NuGet Build 5.0.0-preview1.5754 into cli release/2.1.6xx branch","Url":"https://github.com/dotnet/cli/pull/10560","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview1.5754 into cli\" (#10560)"},{"Id":"397029847","IsPullRequest":true,"CreatedAt":"2019-01-08T18:27:55","Actor":"nugetlurker","Number":"10559","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5754 into cli","State":"open","Body":"Insert NuGet Build 5.0.0-preview1.5754 into cli release/2.2.2xx branch","Url":"https://github.com/dotnet/cli/pull/10559","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview1.5754 into cli\" (#10559)"},{"Id":"396897348","IsPullRequest":true,"CreatedAt":"2019-01-08T18:10:16","Actor":"dotnet-maestro[bot]","Number":"10558","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19057.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10558","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10558)"},{"Id":"396890783","IsPullRequest":false,"CreatedAt":"2019-01-08T17:46:30","Actor":"fromorbonia","Number":"10556","RawContent":null,"Title":"Different build behaviour for .net core web apps between local VS IDE and msbuild","State":"closed","Body":"## Steps to reproduce\r\nPublishing a .NET Core web application with a FileSystem profile under VS2017 IDE creates a diretory with an EXE (e.g. MyProject.exe)\r\nThere is a Jenkins build server running msbuild, which correctly picks up the publish profile that was used and configured locally.\r\n\r\n## Expected  behavior\r\nI would expect the build server to also create exactly the same set of files (specifically in this case it should include MyProject.exe).\r\n\r\n## Actual behavior\r\nThe publish folder contains an apphost.exe and MyProject.dll, but no EXE. \r\nThe web.config file created actually references MyProject.exe (in processPath), and of course the web site doesn't not run on IIS.\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nFor the local VS2017 IDE this is:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.401\r\n Commit:    91b1c13032\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.1.7601\r\n OS Platform: Windows\r\n RID:         win7-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.3\r\n  Commit:  124038c13e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nFor the Jenkins build server:\r\n12:53:26 .NET Core SDK (reflecting any global.json):\r\n12:53:26  Version:   2.1.502\r\n12:53:26  Commit:    c74ce8f29f\r\n12:53:26 \r\n12:53:26 Runtime Environment:\r\n12:53:26  OS Name:     Windows\r\n12:53:26  OS Version:  10.0.14393\r\n12:53:26  OS Platform: Windows\r\n12:53:26  RID:         win10-x64\r\n12:53:26  Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.502\\\r\n12:53:26 \r\n12:53:26 Host (useful for support):\r\n12:53:26   Version: 2.1.6\r\n12:53:26   Commit:  3f4f8eebd8\r\n12:53:26 \r\n12:53:26 .NET Core SDKs installed:\r\n12:53:26   2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n12:53:26   2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n12:53:26   2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n12:53:26 \r\n12:53:26 .NET Core runtimes installed:\r\n12:53:26   Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n12:53:26   Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n12:53:26   Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n12:53:26   Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n12:53:26   Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n12:53:26   Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10556","RelatedDescription":"Closed issue \"Different build behaviour for .net core web apps between local VS IDE and msbuild\" (#10556)"},{"Id":"396862570","IsPullRequest":false,"CreatedAt":"2019-01-08T17:44:07","Actor":"DGuidi","Number":"10555","RawContent":null,"Title":"dotnet build don't perform \"restore\" anymore","State":"closed","Body":"## Steps to reproduce\r\n\r\n1. Using Visual Studio 2017, clear nuget cache\r\n![screenshot_44](https://user-images.githubusercontent.com/216627/50827257-48b17400-133e-11e9-9117-81d35a1ae7fa.png) or delete manually `X:\\Users\\me\\.nuget` folder\r\n1. execute `dotnet build MySolution.sln` from a command line\r\n\r\n## Expected  behavior\r\nnuget cache restored correctly - see [docs](https://docs.microsoft.com/it-it/dotnet/core/tools/dotnet-build?tabs=netcore2x) - and build successfully completed\r\n\r\n## Actual behavior\r\nnuget cache not restored correctly and build errors. \r\n\r\n## Additional info\r\nVisual Studio 2017 build works correctly, and after vs build all subsequent command line builds works as expected.  \r\nI've verified this issue also with a colleague of mine, and I'm pretty sure that sdk 2.1 worked.\r\n\r\n\r\n## Workaround\r\nusing `dotnet build --force` instead of regular `dotnet build` fixed problem\r\n\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10555","RelatedDescription":"Closed issue \"dotnet build don't perform \"restore\" anymore\" (#10555)"},{"Id":"396897300","IsPullRequest":true,"CreatedAt":"2019-01-08T17:41:17","Actor":"dotnet-maestro[bot]","Number":"10557","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19057.6\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10557","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10557)"},{"Id":"396323779","IsPullRequest":false,"CreatedAt":"2019-01-08T17:40:08","Actor":"YunWeiaa","Number":"10549","RawContent":null,"Title":"For .Net Core 3.0, the templates for mstest and Xunit still targeting 2.2 rather than 3.0 by default.","State":"closed","Body":"## Steps to reproduce\r\nUsing CLI : Create a .net core mstest/xunit project\r\n\r\n## Expected  behavior\r\nThe templates should target 3.0 by default.\r\n\r\n## Actual behavior\r\nThe templates for mstest and Xunit still targeting 2.2 rather than 3.0 by default.\r\n![xunit](https://user-images.githubusercontent.com/33921754/50745221-f3a12f80-1263-11e9-9a92-83cd547c881d.PNG)\r\n**Note**: Create a new .net core mstest/xunit project via VS and open property pages, the default TFM is also \".NET Core 2.2\", not \".NET Core 3.0\".\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010000\r\n Commit:    e46d7b966e\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010000\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009648 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010000 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27220-11 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10549","RelatedDescription":"Closed issue \"For .Net Core 3.0, the templates for mstest and Xunit still targeting 2.2 rather than 3.0 by default.\" (#10549)"},{"Id":"396423791","IsPullRequest":false,"CreatedAt":"2019-01-08T02:24:13","Actor":"YunWeiaa","Number":"10553","RawContent":null,"Title":"For .NET Core 3.0, create a .net core ASP.NET Core web/webapi/mvc project via CLI, dotnet run failed with error: The specified framework 'Microsoft.NETCore.App', version '3.0.0-preview-27219-3' was not found...","State":"closed","Body":"## Steps to reproduce\r\nUsing CLI : Create a .net core ASP.NET Core web/Web API/Web App (Model-View-Controller) project\r\n\r\n## Expected  behavior\r\nDotnet restore and build and run succeed without errors or warnings.\r\n\r\n## Actual behavior\r\ndotnet new web/webapi/mvc --> succeed\r\ndotnet restore/build -->succeed\r\ndotnet run -->failed with error: The specified framework 'Microsoft.NETCore.App', version '3.0.0-preview-27219-3' was not found...\r\n\r\n![3](https://user-images.githubusercontent.com/33921754/50762120-1143b880-12a7-11e9-9bae-ac3e7d9e2041.PNG)\r\n**Note**: Add localfeed package source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json or https://dotnetfeed.blob.core.windows.net/3-0/20181121-01/index.json doesn’t work.\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010006\r\n Commit:    166534d9bf\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010006\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009648 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010000 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010006 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18630-0234 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27220-11 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10553","RelatedDescription":"Closed issue \"For .NET Core 3.0, create a .net core ASP.NET Core web/webapi/mvc project via CLI, dotnet run failed with error: The specified framework 'Microsoft.NETCore.App', version '3.0.0-preview-27219-3' was not found...\" (#10553)"},{"Id":"396136696","IsPullRequest":true,"CreatedAt":"2019-01-07T22:55:36","Actor":"vijayrkn","Number":"10545","RawContent":null,"Title":"Updating the template package versions","State":"closed","Body":"/cc @seancpeters \r\n","Url":"https://github.com/dotnet/cli/pull/10545","RelatedDescription":"Closed or merged PR \"Updating the template package versions\" (#10545)"},{"Id":"396113298","IsPullRequest":true,"CreatedAt":"2019-01-07T20:45:54","Actor":"peterhuene","Number":"10544","RawContent":null,"Title":"Improve Ctrl-C experience for `dotnet run`.","State":"closed","Body":"This commit improves the handling of the SIGINT signal from `dotnet run`.\r\n\r\nThe current behavior of `dotnet run` is to use the default handler for the\r\nSIGINT signal.  This results in the termination of the `dotnet run` process\r\nwith an exit status of 130 on POSIX systems and 0xC000013A on Windows.  This\r\nprevents a child process to gracefully handle SIGINT by returning a zero exit\r\ncode or from ignoring the signal entirely and letting the process appear to\r\ncontinue to run.\r\n\r\nAdditionally, the child process of `dotnet run` may still be writing to stdout\r\nduring the handling of SIGINT.  Because `dotnet run` may terminate before the\r\nchild process does, a waiting parent of `dotnet run`, such as a shell, may\r\nproceed to print out a new prompt to the user while the child continues to\r\nwrite to stdout.  This results in inconsistent and interleaved output in a\r\nterminal and can be a source of confusion to users.\r\n\r\nThis commit changes `dotnet` to always ignore SIGINT when spawning a child\r\nprocess.  This allows the child process to handle the signal and decide what to\r\ndo with it.  As a result, the UX from when the user program is run directly or\r\nvia `dotnet run` is the same regarding SIGINT.\r\n\r\nFixes #812.","Url":"https://github.com/dotnet/cli/pull/10544","RelatedDescription":"Closed or merged PR \"Improve Ctrl-C experience for `dotnet run`.\" (#10544)"},{"Id":"396374907","IsPullRequest":false,"CreatedAt":"2019-01-07T20:38:20","Actor":"yuki233","Number":"10551","RawContent":null,"Title":"SDK 3.0.100-preview-010006 should merge runtime 3.0.0-preview-27219-3 rather than 3.0.0-preview-27218-01","State":"closed","Body":"## Steps to reproduce\r\n1. Install SDK 3.0.100-preview-010006 with .tar.gz installer and .deb/.rpm installer\r\n\r\n## Expected  behavior\r\n1. SDK installer works fine and CLI(dotnet new/restore/run) work fine too.\r\n\r\n## Actual behavior\r\n1. For .tar.gz installer, after decompressed, it shows that runtime **3.0.0-preview-27218-01** installed. But dotnet run for web app failed as runtime **3.0.0-preview-27219-3** was not found.\r\n![image](https://user-images.githubusercontent.com/1578239/50754106-74295580-128f-11e9-812f-8374379ba5fc.png)\r\n\r\n2. For .deb/.rpm installer, when try to install sdk, it prompt runtime **3.0.0-preview-27218-01** is needed\r\n  ![image](https://user-images.githubusercontent.com/1578239/50753841-53accb80-128e-11e9-8c43-92bc9f44f52c.png)\r\nBut, after installed runtime **3.0.0-preview-27218-01** , it prompt runtime **3.0.0-preview-27219-3** is needed.\r\n  ![image](https://user-images.githubusercontent.com/1578239/50753884-8a82e180-128e-11e9-9321-09170ebfa7d3.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n1) Donet --info on CentOS75 with .tar.gz installer\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010006\r\n Commit:    166534d9bf\r\n\r\nRuntime Environment:\r\n OS Name:     centos\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         centos.7-x64\r\n Base Path:   /home/nicole/mytest/sdk/3.0.100-preview-010006/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-010006 [/home/nicole/mytest/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18630-0234 [/home/nicole/mytest/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [/home/nicole/mytest/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n2) dotnet --info on Ubuntu16.04 with .deb installer\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010006\r\n Commit:    166534d9bf\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.0.100-preview-010006/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27219-3\r\n  Commit:  6cd1c28ae3\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-010006 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18630-0234 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27219-3 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10551","RelatedDescription":"Closed issue \"SDK 3.0.100-preview-010006 should merge runtime 3.0.0-preview-27219-3 rather than 3.0.0-preview-27218-01\" (#10551)"},{"Id":"396389137","IsPullRequest":false,"CreatedAt":"2019-01-07T18:24:17","Actor":"JiahongJin1","Number":"10552","RawContent":null,"Title":"Can publish a framework-dependent application with application host but without RID","State":"closed","Body":"## Steps to reproduce\r\n1.\tRun `dotnet new console`.\r\n2.\tRun `dotnet publish -p:UseAppHost=true`.\r\n\r\n## Expected  behavior\r\nAn error should be printed from the SDK informing you that a `RuntimeIdentifier` must be specified.\r\n\r\n## Actual behavior\r\nIt runs successfully.\r\n\r\n![cli](https://user-images.githubusercontent.com/46206739/50755362-bbb1e080-1293-11e9-8975-1f5bc2605c86.PNG)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010006\r\n Commit:    166534d9bf\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-010006\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009648 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010006 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18630-0234 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27220-11 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10552","RelatedDescription":"Closed issue \"Can publish a framework-dependent application with application host but without RID\" (#10552)"},{"Id":"396163624","IsPullRequest":true,"CreatedAt":"2019-01-07T18:12:13","Actor":"dotnet-maestro[bot]","Number":"10546","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19054.13\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19055.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19055.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10546","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10546)"},{"Id":"396430219","IsPullRequest":false,"CreatedAt":"2019-01-07T18:06:45","Actor":"tmds","Number":"10554","RawContent":null,"Title":"latest 3.0 sdk has issue resolving project argument","State":"closed","Body":"## Steps to reproduce\r\n\r\n```\r\ncd /tmp\r\nmkdir lib\r\ncd lib\r\ndotnet new classlib\r\ncd ..\r\ndotnet build lib\r\n```\r\n\r\n## Expected  behavior\r\n\r\nlib project should build\r\n\r\n## Actual behavior\r\n\r\nproject isn't properly resolved, note: `lib/lib/lib.csproj`\r\n```\r\n/tmp/lib/lib/lib.csproj : error MSB4025: The project file could not be loaded. Could not find a part of the path '/tmp/lib/lib/lib.csproj'.\r\n```\r\n## Additional info\r\n\r\nThis regression occurs on 3.0 daily since 5 Dec.","Url":"https://github.com/dotnet/cli/issues/10554","RelatedDescription":"Closed issue \"latest 3.0 sdk has issue resolving project argument\" (#10554)"},{"Id":"396163635","IsPullRequest":true,"CreatedAt":"2019-01-07T17:49:40","Actor":"dotnet-maestro[bot]","Number":"10547","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19054.2\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19054.2\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.19054.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10547","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10547)"},{"Id":"396343959","IsPullRequest":false,"CreatedAt":"2019-01-07T04:28:54","Actor":"jeffman","Number":"10550","RawContent":null,"Title":"dotnet build output directory is different on Linux","State":"open","Body":"When I run `dotnet build some-project -o some-folder`, I get different behaviour on Linux compared to Windows. On Windows the output goes to `./some-folder`, but on Linux the output goes to `./some-project/some-folder`. I would expect it to behave the same as on Windows.\r\n\r\nI can get around the issue by using full paths, however this adds a lot of clutter to my build scripts.\r\n\r\n## Steps to reproduce\r\n```\r\ndotnet new console -o project-folder\r\ndotnet build project-folder -o other-folder\r\n```\r\n\r\n## Expected  behavior\r\nBuild output is copied to `./other-folder`\r\n\r\n## Actual behavior\r\nOn Windows, build output is copied to `./other-folder`\r\nOn Linux, build output is copied to `./project-folder/other-folder`\r\n\r\n## Environment data\r\n`dotnet --info` output on Windows:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009812 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27128-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\n`dotnet --info` output on Linux:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.10\r\n OS Platform: Linux\r\n RID:         ubuntu.18.10-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.101/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.2.101 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10550","RelatedDescription":"Open issue \"dotnet build output directory is different on Linux\" (#10550)"},{"Id":"396269938","IsPullRequest":false,"CreatedAt":"2019-01-06T15:55:27","Actor":"MarkKharitonov","Number":"10548","RawContent":null,"Title":"dotnet build /v:q is not as quiet as msbuild /v:q","State":"open","Body":"## Steps to reproduce\r\ndotnet build /v:q\r\n\r\n## Expected  behavior\r\nOnly the msbuild logo is displayed\r\n\r\n## Actual behavior\r\nAdditional lines are displayed:\r\n```\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.15\r\n```\r\n## Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.502\r\n Commit:    c74ce8f29f\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.502\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/10548","RelatedDescription":"Open issue \"dotnet build /v:q is not as quiet as msbuild /v:q\" (#10548)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"397146216","IsPullRequest":false,"CreatedAt":"2019-01-08T23:57:44","Actor":"dsplaisted","Number":"1051","RawContent":null,"Title":"Create targeting pack for .NET Standard","State":"open","Body":"For .NET Core 3.0, we expect to separate targeting packs, which contain the assets needed at build time when targeting .NET Core 3.0 (for example, reference assemblies and intellisense documentation) from \"runtime packs\", which will include the platform-specific runtime components for .NET Core 3.  See dotnet/cli#10006, and [dotnet/designs#50](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e)\r\n\r\nWe will have targeting pack for each shared framework (.NET Core, ASP.NET Core, and WindowsDesktop), as well as for .NET Standard.  This issue tracks the work required a .NET Standard targeting pack.  Ideally, we should create targeting packs for both .NET Standard 2.1 and 2.0.\r\n\r\nThe work required includes:\r\n\r\n- A new NuGet package including the targeting pack assets.  This should include the reference assemblies, intellisense documentation, and platform manifest file.  The current straw man proposal for the package ID is `Microsoft.NETCore.App.Ref`\r\n- Installers for each supported installer format (msi, deb, pkg, and rpm), which lay out the targeting pack files under `<DOTNET_ROOT>/packs/<PackageId>/version`.  These installers will be bundled or depended on by the corresponding .NET Core SDK installers.\r\n\r\nSome of the details (such as package layout, names, etc) are still [under design](https://github.com/dotnet/designs/pull/50/files?short_path=ebf265d#diff-ebf265d0476041dd8cab82fa24ab5b0e) and may change slightly.","Url":"https://github.com/dotnet/standard/issues/1051","RelatedDescription":"Open issue \"Create targeting pack for .NET Standard\" (#1051)"},{"Id":"396798571","IsPullRequest":false,"CreatedAt":"2019-01-08T08:34:45","Actor":"duncand","Number":"1050","RawContent":null,"Title":"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset","State":"open","Body":"I'm looking to provide input on .NET Standard and this appears to be the best place.\r\n\r\nSee https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/ for reference.\r\n\r\nI propose that what is currently planned for .NET Standard 2.1 be pushed back to .NET Standard 2.2, and that .NET Standard 2.1 instead just have the subset of those changes that are implementable on .NET Framework.\r\n\r\nWhile going forward, .NET Standard after 2.0 is mainly adding new features that are not practical to implement in .NET Framework, some of the proposals for 2.1 contained bringing out some things that already existed but missed the 2.0 window.\r\n\r\nIf we do what I propose, then we have a last chance to increase the API surface that can run everywhere, before it is permanently shut out due to releasing a .NET Standard version that Framework can't run, given that each increasing Standard version is a superset of what came before.","Url":"https://github.com/dotnet/standard/issues/1050","RelatedDescription":"Open issue \"Proposal to rename Standard 2.1 to 2.2, make 2.1 a Framework compatible subset\" (#1050)"},{"Id":"396675175","IsPullRequest":false,"CreatedAt":"2019-01-07T22:27:48","Actor":"Entomy","Number":"1049","RawContent":null,"Title":"String Enhancements","State":"open","Body":"In .NET Core >=2.1 there exists a `.Join()` method that takes strings and chars, and a `.Split()` method that takes strings and chars. However in .NET Standard, `.Join()` only accepts strings, and `.Split()` only accepts chars. This is an odd seeming, and inconvenient, limitation. Can this be added to a future version?","Url":"https://github.com/dotnet/standard/issues/1049","RelatedDescription":"Open issue \"String Enhancements\" (#1049)"},{"Id":"396646204","IsPullRequest":true,"CreatedAt":"2019-01-07T22:02:02","Actor":"wtgodbe","Number":"1048","RawContent":null,"Title":" Move source items into src folder","State":"closed","Body":"With this, we group all source items into an `src` folder to match the convention of other repos. I've done a diff of the `artifacts` dir before & after this change to confirm that everything still looks like the same. @ViktorHofer @danmosemsft @terrajobst PTAL\r\n\r\nFixes https://github.com/dotnet/standard/issues/1037","Url":"https://github.com/dotnet/standard/pull/1048","RelatedDescription":"Closed or merged PR \" Move source items into src folder\" (#1048)"},{"Id":"393015237","IsPullRequest":false,"CreatedAt":"2019-01-07T22:02:02","Actor":"ViktorHofer","Number":"1037","RawContent":null,"Title":"Group source items in a src folder","State":"closed","Body":"We should move\r\n- netstandard\r\n- platforms\r\n- apicompat\r\n- dir.traversal.targets\r\n- package.builds\r\n- src.builds\r\n\r\ninto a `src` folder to align with other dotnet repos.\r\n\r\ncc @wtgodbe @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/issues/1037","RelatedDescription":"Closed issue \"Group source items in a src folder\" (#1037)"},{"Id":"396610837","IsPullRequest":true,"CreatedAt":"2019-01-07T19:06:28","Actor":"wtgodbe","Number":"1047","RawContent":null,"Title":"Bump AssemblyVersion for nestandard.dll to 2.1.0.0","State":"open","Body":"Fixes https://github.com/dotnet/standard/issues/929\r\n\r\nCC @ericstj @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1047","RelatedDescription":"Open PR \"Bump AssemblyVersion for nestandard.dll to 2.1.0.0\" (#1047)"},{"Id":"396598897","IsPullRequest":true,"CreatedAt":"2019-01-07T18:47:02","Actor":"wtgodbe","Number":"1046","RawContent":null,"Title":"Update APICompat baseline","State":"closed","Body":"I see these updates to the APICompat baselines after building from clean - I've confirmed that they weren't present before https://github.com/dotnet/standard/commit/dbb3e847a6dd09a8c9ec0206463ed1b848a5c90b. I figured I'd open a PR to use first as an easy way to view the diff & discuss, then to take into master if we decide it's the right thing. @ViktorHofer did you notice these locally when fixing up APICompat/GenAPI?","Url":"https://github.com/dotnet/standard/pull/1046","RelatedDescription":"Closed or merged PR \"Update APICompat baseline\" (#1046)"},{"Id":"396591596","IsPullRequest":false,"CreatedAt":"2019-01-07T18:06:51","Actor":"wtgodbe","Number":"1045","RawContent":null,"Title":"Convert seed.sh/.cmd files to proj files & update GenAPI invocations","State":"open","Body":"We should convert files like https://github.com/dotnet/standard/blob/8ca3d4c0c9599186d50196781484312176a9b2ad/platforms/xamarin.android/seed.sh to `.proj` files that can be built on-demand (either by direct invocation of `dotnet msbuild`, or a wrapper .ps1/.sh script that builds the project). This way we'll have access to the up-to-date version of `GenAPI`. We should also update the invocation of GenAPI to match the new standard introduced by https://github.com/dotnet/arcade/pull/1676\r\n\r\nCC @ViktorHofer ","Url":"https://github.com/dotnet/standard/issues/1045","RelatedDescription":"Open issue \"Convert seed.sh/.cmd files to proj files & update GenAPI invocations\" (#1045)"},{"Id":"396287501","IsPullRequest":false,"CreatedAt":"2019-01-06T19:38:08","Actor":"gpcaretti","Number":"1044","RawContent":null,"Title":"FAQ: how to understand a package is compatible with NETStandard","State":"open","Body":"I am developing a library bases on .NETstandard 2.0.\r\n\r\nMy question is: if in my library I need to refer a class defined outside the .NETstandard library (e.g. the `System.ComponentModel.DataAnnotations.DataTypeAttribute` class), how do I understand if I do not break the multiplatfom compatibility of my library by referring the external library `System.ComponentModel.DataAnnotations`?","Url":"https://github.com/dotnet/standard/issues/1044","RelatedDescription":"Open issue \"FAQ: how to understand a package is compatible with NETStandard\" (#1044)"},{"Id":"396025237","IsPullRequest":true,"CreatedAt":"2019-01-04T19:25:54","Actor":"ViktorHofer","Number":"1043","RawContent":null,"Title":"Fix GenAPI invocation with new args","State":"closed","Body":"Also need to use DARC to get a GenApi fix in.","Url":"https://github.com/dotnet/standard/pull/1043","RelatedDescription":"Closed or merged PR \"Fix GenAPI invocation with new args\" (#1043)"},{"Id":"395644781","IsPullRequest":true,"CreatedAt":"2019-01-04T16:29:48","Actor":"ViktorHofer","Number":"1042","RawContent":null,"Title":"Respect ApiCompat cmd changes","State":"closed","Body":"Depends on https://github.com/dotnet/arcade/pull/1676","Url":"https://github.com/dotnet/standard/pull/1042","RelatedDescription":"Closed or merged PR \"Respect ApiCompat cmd changes\" (#1042)"},{"Id":"394796330","IsPullRequest":false,"CreatedAt":"2018-12-29T13:33:18","Actor":"MV10","Number":"1041","RawContent":null,"Title":"System.MathF missing in .NET Standard 2.1 README","State":"open","Body":"Minor, but `System.MathF` is missing from the [README](https://github.com/dotnet/standard/blob/master/docs/planning/netstandard-2.1/README.md). I figured it would be in the Miscellaneous list at a minimum. (As I understand it, this is still on schedule for .NET Standard 2.1 per  https://github.com/dotnet/corefx/issues/15830, correct?)\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1041","RelatedDescription":"Open issue \"System.MathF missing in .NET Standard 2.1 README\" (#1041)"},{"Id":"393264404","IsPullRequest":true,"CreatedAt":"2018-12-26T21:14:18","Actor":"terrajobst","Number":"1039","RawContent":null,"Title":"Fix representation of enum values","State":"closed","Body":"We finally fixed the missing feature in our source emitter so that it now includes a human readable bitmask rather than the underlying value.\r\n\r\n***This doesn't change any API surface but makes diffs more human readable.***","Url":"https://github.com/dotnet/standard/pull/1039","RelatedDescription":"Closed or merged PR \"Fix representation of enum values\" (#1039)"},{"Id":"393009607","IsPullRequest":false,"CreatedAt":"2018-12-21T01:08:29","Actor":"ViktorHofer","Number":"1036","RawContent":null,"Title":"Disable Jenkins","State":"closed","Body":"We need to disable Jenkins so I doesn't get queued in a PR anymore and if not already done point mc.dot.net to the new Azure DevOps run. I also noticed that the last official build happened 12/3, maybe the cron job is not configured right?","Url":"https://github.com/dotnet/standard/issues/1036","RelatedDescription":"Closed issue \"Disable Jenkins\" (#1036)"},{"Id":"393267915","IsPullRequest":true,"CreatedAt":"2018-12-21T00:51:26","Actor":"ViktorHofer","Number":"1040","RawContent":null,"Title":"Remove the manual config system","State":"open","Body":"Fixes https://github.com/dotnet/standard/issues/1032","Url":"https://github.com/dotnet/standard/pull/1040","RelatedDescription":"Open PR \"Remove the manual config system\" (#1040)"},{"Id":"393171059","IsPullRequest":true,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1038","RawContent":null,"Title":"Add APICompat run for NetStandard2.0","State":"closed","Body":"Adds ApiCompat coverage for .netstandard2.0\r\n\r\n@ViktorHofer @terrajobst PTAL\r\n\r\nresolves https://github.com/dotnet/standard/issues/1029","Url":"https://github.com/dotnet/standard/pull/1038","RelatedDescription":"Closed or merged PR \"Add APICompat run for NetStandard2.0\" (#1038)"},{"Id":"392786865","IsPullRequest":false,"CreatedAt":"2018-12-20T19:19:30","Actor":"wtgodbe","Number":"1029","RawContent":null,"Title":"Add ApiCompat run for netstandard2.0","State":"closed","Body":"We should add an APICompat run that checks against 2.0, similar the ones we already have for 1.0-1.6: https://github.com/dotnet/standard/blob/master/apicompat/baselines/ApiCompatBaseline.netstandard1.6.txt","Url":"https://github.com/dotnet/standard/issues/1029","RelatedDescription":"Closed issue \"Add ApiCompat run for netstandard2.0\" (#1029)"},{"Id":"393005614","IsPullRequest":true,"CreatedAt":"2018-12-20T18:07:43","Actor":"ViktorHofer","Number":"1035","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\nFailing CI jobs are leftovers: https://github.com/dotnet/standard/issues/1036\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1035","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1035)"},{"Id":"393001679","IsPullRequest":true,"CreatedAt":"2018-12-20T11:31:22","Actor":"ViktorHofer","Number":"1034","RawContent":null,"Title":"Cleanup files after arcade switch & update baseline","State":"closed","Body":"Cleaning up some leftovers and running the build once to regenerate the baseline files.\r\n\r\nOpened https://github.com/dotnet/standard/issues/1031 and https://github.com/dotnet/standard/issues/1032 which should also be done.\r\n\r\ncc @danmosemsft ","Url":"https://github.com/dotnet/standard/pull/1034","RelatedDescription":"Closed or merged PR \"Cleanup files after arcade switch & update baseline\" (#1034)"},{"Id":"392986163","IsPullRequest":false,"CreatedAt":"2018-12-20T10:40:01","Actor":"ViktorHofer","Number":"1032","RawContent":null,"Title":"Remove slim configuration system and stop overloading Configuration","State":"open","Body":"We should stop overloading the `Configuration` property in favor of the right msbuild properties and remove the `ConfigurationGroup` property to enable native VS support and remove a lot of obsolete stuff.\r\n\r\n```\r\n  <PropertyGroup Condition=\"'$(Configuration)'==''\">\r\n    <ConfigurationGroup Condition=\"'$(ConfigurationGroup)'==''\">Debug</ConfigurationGroup>\r\n    <Configuration>$(ConfigurationGroup)</Configuration>\r\n    <Configuration Condition=\"'$(TargetGroup)'!=''\">$(TargetGroup)_$(Configuration)</Configuration>\r\n    <Configuration Condition=\"'$(OSGroup)'!='' and '$(OSGroup)'!='AnyOS'\">$(OSGroup)_$(Configuration)</Configuration>\r\n  </PropertyGroup>\r\n```\r\n\r\ncc @ericstj @wtgodbe ","Url":"https://github.com/dotnet/standard/issues/1032","RelatedDescription":"Open issue \"Remove slim configuration system and stop overloading Configuration\" (#1032)"},{"Id":"392982975","IsPullRequest":false,"CreatedAt":"2018-12-20T10:31:53","Actor":"ViktorHofer","Number":"1031","RawContent":null,"Title":"Remove depproj approach and enable project restore","State":"open","Body":"As discussed in another PR I think it makes sense to remove the depproj approach here in the standard repo and follow the usual way of referencing packages directly in the respective project, in this case netstandard.csproj. Also the netstandard.builds file which restores for different frameworks can be incorporated in the csproj by adding a `TargetFrameworks` property and right PackageReference conditions. \r\n\r\ncc @wtgodbe @ericstj ","Url":"https://github.com/dotnet/standard/issues/1031","RelatedDescription":"Open issue \"Remove depproj approach and enable project restore\" (#1031)"},{"Id":"392822069","IsPullRequest":true,"CreatedAt":"2018-12-20T10:07:40","Actor":"wtgodbe","Number":"1030","RawContent":null,"Title":"Delete CI & redundant publish file","State":"closed","Body":"This deletes the old `netci.groovy` file, since we're using Azure DevOps for CI now. It also deletes `publish.msbuild`, which isn't used anywhere.\r\n\r\n@ViktorHofer PTAL","Url":"https://github.com/dotnet/standard/pull/1030","RelatedDescription":"Closed or merged PR \"Delete CI & redundant publish file\" (#1030)"},{"Id":"391885087","IsPullRequest":true,"CreatedAt":"2018-12-19T23:33:25","Actor":"wtgodbe","Number":"1027","RawContent":null,"Title":"Build Standard entirely against Arcade, without Buildtools","State":"closed","Body":"This cuts out buildtools entirely from the Standard repo, so that we fully rely on the Arcade SDK to build against instead. It replaces the functionality for code analyzers, `ValidateApiCompatForSrc`, and the build tasks.\r\n\r\n@ericstj @safern @danmosemsft @ViktorHofer @chcosta PTAL\r\n\r\nCC @karelz ","Url":"https://github.com/dotnet/standard/pull/1027","RelatedDescription":"Closed or merged PR \"Build Standard entirely against Arcade, without Buildtools\" (#1027)"},{"Id":"390839367","IsPullRequest":true,"CreatedAt":"2018-12-19T01:29:43","Actor":"terrajobst","Number":"1020","RawContent":null,"Title":"Reduce noise in reference assemblies","State":"closed","Body":"This doesn't change any APIs. It's just reducing noise from in the textual diff of the reference assemblies.\r\n\r\n* Fix trailing whitespace (69cb85e)\r\n* Mark types as partial (c9725f7)\r\n* Replace handwritten base calls with generated ones (78649f6)\r\n","Url":"https://github.com/dotnet/standard/pull/1020","RelatedDescription":"Closed or merged PR \"Reduce noise in reference assemblies\" (#1020)"},{"Id":"392146465","IsPullRequest":true,"CreatedAt":"2018-12-18T13:01:40","Actor":"dotnet-maestro[bot]","Number":"1028","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18617.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18617.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18618.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18618.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1028","RelatedDescription":"Open PR \"Update dependency files\" (#1028)"},{"Id":"391702003","IsPullRequest":true,"CreatedAt":"2018-12-17T15:07:31","Actor":"dotnet-maestro[bot]","Number":"1026","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18616.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18616.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1026","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1026)"},{"Id":"391465145","IsPullRequest":true,"CreatedAt":"2018-12-16T19:53:13","Actor":"dotnet-maestro[bot]","Number":"1025","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18615.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18615.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1025","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1025)"},{"Id":"391463924","IsPullRequest":false,"CreatedAt":"2018-12-16T12:45:44","Actor":"dmitriyse","Number":"1024","RawContent":null,"Title":"[Proposal] .Net Standard 3.0.0 with breaking changes, semantic versioning and migration toolset","State":"open","Body":"Please open new .NetStandard branch with deep refresh of .Net API surface.\r\nCurrently .NetStandard 2.0 and it's successor .NetStandard 2.1 contains everything that were added in .net since version 1.0. Some API is already outdated and another will become outdated soon.\r\n\r\n.Net Standard 2.1 have some positive movements. It's drops some components to out of standard into additional components.\r\n\r\nBut it's not enough. It's time to stay in .Net Standard only good and modern parts.\r\nFor example:\r\n```CSharp\r\npublic class List<T>\r\n{\r\n     // ...\r\n     void CopyTo(T[] array);\r\n     // ...\r\n}\r\n```\r\ncan be replaced with:\r\n\r\n```CSharp\r\npublic class List<T>\r\n{\r\n     // ...\r\n     void CopyTo(Span<T> output);\r\n     // ...\r\n}\r\n```\r\nAssemblies targeting .NetStandard 2.0, .NetStandard 2.1 and proposed .NetStandard 3.0.0 should be capable to work side-by-side inside the same AppDomain.\r\n\r\nTODO: Add diagram.\r\n","Url":"https://github.com/dotnet/standard/issues/1024","RelatedDescription":"Open issue \"[Proposal] .Net Standard 3.0.0 with breaking changes, semantic versioning and migration toolset\" (#1024)"},{"Id":"391376312","IsPullRequest":true,"CreatedAt":"2018-12-15T13:41:30","Actor":"dotnet-maestro[bot]","Number":"1023","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18614.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18614.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1023","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1023)"},{"Id":"391102384","IsPullRequest":true,"CreatedAt":"2018-12-14T13:21:43","Actor":"dotnet-maestro[bot]","Number":"1021","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18613.20\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18613.20\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1021","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#1021)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"397186727","IsPullRequest":true,"CreatedAt":"2019-01-09T04:10:36","Actor":"Dotnet-GitSync-Bot","Number":"34453","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corefx/pull/34453","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#34453)"},{"Id":"397198139","IsPullRequest":false,"CreatedAt":"2019-01-09T03:34:59","Actor":"stephentoub","Number":"34455","RawContent":null,"Title":"Frequently hit app manifest error while trying to run tests","State":"open","Body":"Repro:\r\n```\r\ngit clean -xdf\r\nbuild.cmd\r\ncd src\\System.Collections\\src\r\n.. // edit any .cs file, just adding a space or something to make it dirty\r\ndotnet msbuild\r\ncd ..\\tests\r\ndotnet msbuild /t:rebuildandtest\r\n```\r\nproduces:\r\n```\r\n  Error:\r\n    An assembly specified in the application dependencies manifest (Microsoft.NETCore.App.deps.json) was not found:\r\n      package: 'runtime.win-x64.Microsoft.NETCore.App', version: '2.1.3'\r\n      path: 'runtimes/win-x64/native/apphost.exe'\r\n```\r\nand crashes.\r\n\r\ncc: @ViktorHofer ","Url":"https://github.com/dotnet/corefx/issues/34455","RelatedDescription":"Open issue \"Frequently hit app manifest error while trying to run tests\" (#34455)"},{"Id":"397188907","IsPullRequest":false,"CreatedAt":"2019-01-09T02:48:35","Actor":"AriNuer","Number":"34454","RawContent":null,"Title":"TimerFiringTests Failed in netcoreapp-Windows_NT-Release-x86-Windows.7.Amd64","State":"open","Body":"**Job name:**\r\nnetcoreapp-Windows_NT-Release-x86-Windows.7.Amd64\r\n**Failed tests:**\r\nTimerFiringTests.Timer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(dueTimes: [200, 300, 400])\r\nTimerFiringTests.Timer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(dueTimes: [332, 333, 334])\r\nTimerFiringTests.Timer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(dueTimes: [333])\r\nTimerFiringTests.Timer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(dueTimes: [1000])\r\n\r\n**Failed log:**\r\nTimerFiringTests.Timer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(dueTimes: [200, 300, 400])\r\n```\r\nError message:\r\n40% out of 200 timer firings were off by more than 100ms\\r\\nExpected: 200, Actuals: 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367, 367\\r\\nExpected: 300, Actuals: 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438, 438\\r\\nExpected: 400, Actuals: 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664, 664\\r\\nExpected: True\\r\\nActual: False\r\nStack trace:\r\n   at TimerFiringTests.Timer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(Int32[] dueTimes) in F:\\vsagent\\-containerSas\\25\\s\\src\\System.Threading.Timer\\tests\\TimerFiringTests.cs:line 301\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\nTimerFiringTests.Timer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(dueTimes: [332, 333, 334])\r\n```\r\nError message:\r\n37.5% out of 160 timer firings were off by more than 100ms\\r\\nExpected: 332, Actuals: 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597\\r\\nExpected: 333, Actuals: 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597\\r\\nExpected: 334, Actuals: 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597, 597\\r\\nExpected: True\\r\\nActual: False\r\nStack trace:\r\n   at TimerFiringTests.Timer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(Int32[] dueTimes) in F:\\vsagent\\-containerSas\\25\\s\\src\\System.Threading.Timer\\tests\\TimerFiringTests.cs:line 301\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\nTimerFiringTests.Timer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(dueTimes: [333])\r\n```\r\nError message:\r\n33.3333333333333% out of 60 timer firings were off by more than 100ms\\r\\nExpected: 333, Actuals: 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478\\r\\nExpected: True\\r\\nActual: False\r\nStack trace:\r\n   at TimerFiringTests.Timer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(Int32[] dueTimes) in F:\\vsagent\\-containerSas\\25\\s\\src\\System.Threading.Timer\\tests\\TimerFiringTests.cs:line 301\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\nTimerFiringTests.Timer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(dueTimes: [1000])\r\n```\r\nError message:\r\n100% out of 20 timer firings were off by more than 100ms\\r\\nExpected: 1000, Actuals: 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103\\r\\nExpected: True\\r\\nActual: False\r\nStack trace:\r\n   at TimerFiringTests.Timer_ManyDifferentSerialSingleDueTimes_AllFireWithinAllowedRange(Int32[] dueTimes) in F:\\vsagent\\-containerSas\\25\\s\\src\\System.Threading.Timer\\tests\\TimerFiringTests.cs:line 301\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\nDetails:\r\nhttps://dnceng.visualstudio.com/internal/_build/results?buildId=68168&view=ms.vss-test-web.test-result-details","Url":"https://github.com/dotnet/corefx/issues/34454","RelatedDescription":"Open issue \"TimerFiringTests Failed in netcoreapp-Windows_NT-Release-x86-Windows.7.Amd64\" (#34454)"},{"Id":"397151660","IsPullRequest":true,"CreatedAt":"2019-01-09T02:38:27","Actor":"tannergooding","Number":"34449","RawContent":null,"Title":"Fixing up the S.R.Intrinsics ref assembly","State":"closed","Body":"This resolves https://github.com/dotnet/corefx/issues/34444","Url":"https://github.com/dotnet/corefx/pull/34449","RelatedDescription":"Closed or merged PR \"Fixing up the S.R.Intrinsics ref assembly\" (#34449)"},{"Id":"397138095","IsPullRequest":false,"CreatedAt":"2019-01-09T02:38:27","Actor":"Anipik","Number":"34444","RawContent":null,"Title":"SetAllZeroVector256, SerAllVector256 Moved to Vector256 from Avx","State":"closed","Body":"There is inconsistency between the coreclr and corefx. we moved some of the functions like \r\n\r\nSetAllZeroVector256\r\nSetAllVector256\r\n\r\nto vector 256 class from Avx but they are still present in the ref assembly\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Runtime.Intrinsics/ref/System.Runtime.Intrinsics.cs#L626\r\n\r\nDue to this when we try to use any of these method we get\r\n```\r\nSystem.MissingMethodException: 'Method not found: 'System.Runtime.Intrinsics.Vector256`1<!!0> System.Runtime.Intrinsics.X86.Avx.SetAllVector256(!!0)'.'\r\n```\r\nRepro Program \r\n``` C#\r\nusing System;\r\nusing System.Runtime.Intrinsics;\r\nusing System.Runtime.Intrinsics.X86;\r\n\r\n\r\nnamespace ConsoleApp14\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Vector256<int> scaleVector256 = Avx.SetAllVector256(1);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis bug is present in .netcore preview 1 also. I am not sure why it was not caught by ApiCompat as there is no suppression for this function\r\n\r\ncc @danmosemsft @eerhardt @tannergooding ","Url":"https://github.com/dotnet/corefx/issues/34444","RelatedDescription":"Closed issue \"SetAllZeroVector256, SerAllVector256 Moved to Vector256 from Avx\" (#34444)"},{"Id":"397106969","IsPullRequest":true,"CreatedAt":"2019-01-09T02:34:15","Actor":"benaadams","Number":"34438","RawContent":null,"Title":"Handle flowsuppressed context in FileSystemWatcher on OSX","State":"closed","Body":"Ignore whitespace diff is easier to see changes https://github.com/dotnet/corefx/pull/34438/files?w=1\r\n\r\nFixes https://github.com/dotnet/corefx/issues/34434\r\n\r\n/cc @MaximLipnin @stephentoub @JeremyKuhne","Url":"https://github.com/dotnet/corefx/pull/34438","RelatedDescription":"Closed or merged PR \"Handle flowsuppressed context in FileSystemWatcher on OSX\" (#34438)"},{"Id":"397080738","IsPullRequest":false,"CreatedAt":"2019-01-09T02:34:15","Actor":"natemcmaster","Number":"34434","RawContent":null,"Title":" System.Threading.ExecutionContext throws InvalidOperationException in 3.0 on macOS. \"Cannot call Set on a null context\"","State":"closed","Body":"Attempting to update https://github.com/aspnet/Extensions to the latest 3.0 builds is causing our macOS tests to fail.\r\n\r\nSee https://github.com/aspnet/Extensions/pull/914\r\n\r\n```\r\n2019-01-08T20:43:04.1382380Z   The active test run was aborted. Reason: Unhandled Exception: System.InvalidOperationException: Cannot call Set on a null context\r\n2019-01-08T20:43:04.1383340Z      at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n2019-01-08T20:43:04.1384070Z      at System.IO.FileSystemWatcher.RunningInstance.FileSystemEventCallback(IntPtr streamRef, IntPtr clientCallBackInfo, IntPtr numEvents, Byte** eventPaths, FSEventStreamEventFlags[] eventFlags, UInt64[] eventIds)\r\n2019-01-08T20:43:04.1384700Z      at Interop.RunLoop.CFRunLoopRun()\r\n2019-01-08T20:43:04.1385230Z      at System.IO.FileSystemWatcher.RunningInstance.StaticWatcherRunLoopManager.WatchForFileSystemEventsThreadStart(Object args)\r\n2019-01-08T20:43:04.1385780Z      at System.Threading.Thread.ThreadMain_ParameterizedThreadStart(Object parameter)\r\n```\r\n\r\n#### To reproduce\r\n\r\n1. Clone https://github.com/aspnet/Extensions/tree/249bb27800d02610d787b8a01b233fca67aa4b99and\r\n2. Run `build.sh` on macOS.\r\n\r\n#### Details\r\n\r\nUsing corefx 3780052026bd1fe2e18469b216f20786b4ca20aa and https://github.com/dotnet/core-setup/tree/6daedc97324341d8d0e41602694fe6347a5b000e","Url":"https://github.com/dotnet/corefx/issues/34434","RelatedDescription":"Closed issue \" System.Threading.ExecutionContext throws InvalidOperationException in 3.0 on macOS. \"Cannot call Set on a null context\"\" (#34434)"},{"Id":"397161928","IsPullRequest":true,"CreatedAt":"2019-01-09T02:33:45","Actor":"Dotnet-GitSync-Bot","Number":"34450","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/34450","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#34450)"},{"Id":"397184897","IsPullRequest":false,"CreatedAt":"2019-01-09T02:29:08","Actor":"AriNuer","Number":"34452","RawContent":null,"Title":"Test \"System.Diagnostics.Tests.EventLogRecordTests.FormatDescription\" failed in netcoreapp-Windows_NT-Release-x64-Windows.10.Amd64.Core","State":"open","Body":"**Job name:**\r\nnetcoreapp-Windows_NT-Release-x64-Windows.10.Amd64.Core\r\n**Failed test:**\r\nSystem.Diagnostics.Tests.EventLogRecordTests.FormatDescription\r\n\r\nError message:\r\n```\r\nAssert.Throws() Failure\\r\\nExpected: typeof(System.Diagnostics.Eventing.Reader.EventLogNotFoundException)\\r\\nActual: (No exception was thrown)\r\n```\r\nStack trace:\r\n```\r\nat System.Diagnostics.Tests.EventLogRecordTests.FormatDescription() in F:\\vsagent\\-containerSas\\32\\s\\src\\System.Diagnostics.EventLog\\tests\\System\\Diagnostics\\Reader\\EventLogRecordTests.cs:line 44\r\n```\r\n\r\nDetails:\r\nhttps://dnceng.visualstudio.com/internal/_build/results?buildId=68168&view=ms.vss-test-web.test-result-details","Url":"https://github.com/dotnet/corefx/issues/34452","RelatedDescription":"Open issue \"Test \"System.Diagnostics.Tests.EventLogRecordTests.FormatDescription\" failed in netcoreapp-Windows_NT-Release-x64-Windows.10.Amd64.Core\" (#34452)"},{"Id":"397179111","IsPullRequest":true,"CreatedAt":"2019-01-09T02:01:22","Actor":"stephentoub","Number":"34451","RawContent":null,"Title":"Expose/test/use string.Concat(ReadOnlySpan, ...)","State":"open","Body":"- Exposes string.Concat(ReadOnlySpan, …) overloads in ref\r\n- Tests the overloads\r\n- Adds use of the overloads in a handful of places across corefx (there are still likely more, this is just the result of a cursory search across a few projects)\r\n\r\nFixes https://github.com/dotnet/corefx/issues/34330\r\nDepends on https://github.com/dotnet/coreclr/pull/21882","Url":"https://github.com/dotnet/corefx/pull/34451","RelatedDescription":"Open PR \"Expose/test/use string.Concat(ReadOnlySpan, ...)\" (#34451)"},{"Id":"397128904","IsPullRequest":true,"CreatedAt":"2019-01-09T00:27:15","Actor":"dotnet-maestro-bot","Number":"34442","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\r\n\r\n## Instructions for merging\r\n\r\nThis repo does not appear to allow merge commits from the GitHub UI, so you will need to update this PR with a merge commit before closing this PR.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/34442","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#34442)"},{"Id":"397119715","IsPullRequest":true,"CreatedAt":"2019-01-09T00:18:08","Actor":"maryamariyan","Number":"34440","RawContent":null,"Title":"Modify FormatDescription test","State":"closed","Body":"Fixing test failure: https://github.com/dotnet/corefx/pull/33662#issuecomment-452371494\r\n\r\nI had the wrong assumption on `FormatDescription`:\r\n- `record.FormatDescription()` doesn't always return null\r\n- `record.FormatDescription(new[] {\"dummy\"})` doesn't always throw exception\r\n\r\nInstead I just assert input of null, empty enumerable and also passing no args to FormatDescription returns the same description string in all three cases.\r\n\r\nRelated to: https://github.com/dotnet/corefx/issues/34136\r\nI made the fix explained in comment: https://github.com/dotnet/corefx/issues/34136#issuecomment-448055535\r\nThis addresses part of the issue explained in https://github.com/dotnet/corefx/issues/34136 but doesn't address the whole bug.\r\n\r\ncc: @danmosemsft @Anipik ","Url":"https://github.com/dotnet/corefx/pull/34440","RelatedDescription":"Closed or merged PR \"Modify FormatDescription test\" (#34440)"},{"Id":"397145861","IsPullRequest":true,"CreatedAt":"2019-01-08T23:59:07","Actor":"safern","Number":"34448","RawContent":null,"Title":"Fix Helix Repo Name to be dotnet/corefx in telemetry","State":"closed","Body":"Missed to escape it with dotnet/ in previous PR.","Url":"https://github.com/dotnet/corefx/pull/34448","RelatedDescription":"Closed or merged PR \"Fix Helix Repo Name to be dotnet/corefx in telemetry\" (#34448)"},{"Id":"397144351","IsPullRequest":false,"CreatedAt":"2019-01-08T23:49:44","Actor":"danzil","Number":"34447","RawContent":null,"Title":"The type 'PermissionSet' exists in both 'System.Runtime.Extensions' and 'System.Security.Permissions'","State":"open","Body":"This is a recent regressions. \r\n\r\nI just updated my local WPF repo to use ‘SDK 3.0.100-preview-010024’ and that breaks System.Xaml compilation. The SDK I had previously (3.0.100-preview-009764) works just file.\r\n\r\nSystem\\Xaml\\Runtime\\DynamicMethodRuntime.cs(43,16): error CS0433: The type 'PermissionSet' exists in both 'System.Runtime.Extensions, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' and 'System.Security.Permissions, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' [Y:\\dotnet-wpf-prototype\\src\\Microsoft.DotNet.Wpf\\src\\System.Xaml\\System.Xaml.csproj]\r\n\r\nSystem\\Xaml\\Permissions\\XamlLoadPermission.cs(20,35): error CS0433: The type 'PermissionState' exists in both 'System.Runtime.Extensions, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' and 'System.Security.Permissions, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' [Y:\\dotnet-wpf-prototype\\src\\Microsoft.DotNet.Wpf\\src\\System.Xaml\\System.Xaml.csproj]\r\n","Url":"https://github.com/dotnet/corefx/issues/34447","RelatedDescription":"Open issue \"The type 'PermissionSet' exists in both 'System.Runtime.Extensions' and 'System.Security.Permissions'\" (#34447)"},{"Id":"397127837","IsPullRequest":true,"CreatedAt":"2019-01-08T23:42:10","Actor":"safern","Number":"34441","RawContent":null,"Title":"Enable helix telemetry for official builds and PRs","State":"closed","Body":"The _configuration to _BuildConfig change is because the arcade template that sends the telemetry uses _BuildConfig to retrieve the configuration. \r\n\r\nFixes: https://github.com/dotnet/corefx/issues/34430\r\n\r\n@MattGal do we care about this only on official builds?\r\n\r\ncc: @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/34441","RelatedDescription":"Closed or merged PR \"Enable helix telemetry for official builds and PRs\" (#34441)"},{"Id":"397058950","IsPullRequest":false,"CreatedAt":"2019-01-08T23:42:10","Actor":"MattGal","Number":"34430","RawContent":null,"Title":"Official CoreFX builds need to set enableTelemetry=true","State":"closed","Body":"@safern FYI.  Whenever kicking off an official build, if you set this property to be true we'll enable automated build failure analysis and logging to the Helix database, and track infrastructure-related problems. \r\n\r\n(@robertborr FYI too)","Url":"https://github.com/dotnet/corefx/issues/34430","RelatedDescription":"Closed issue \"Official CoreFX builds need to set enableTelemetry=true\" (#34430)"},{"Id":"397140424","IsPullRequest":true,"CreatedAt":"2019-01-08T23:36:07","Actor":"danmosemsft","Number":"34446","RawContent":null,"Title":"Fix sorted list syncroot test","State":"closed","Body":"Broken by https://github.com/dotnet/corefx/pull/34339 CI was green as it's an outer loop test.","Url":"https://github.com/dotnet/corefx/pull/34446","RelatedDescription":"Closed or merged PR \"Fix sorted list syncroot test\" (#34446)"},{"Id":"397140272","IsPullRequest":true,"CreatedAt":"2019-01-08T23:32:18","Actor":"AaronRobinsonMSFT","Number":"34445","RawContent":null,"Title":"Mitigate potential case where allocated marshal data is aligned to th…","State":"open","Body":"…e primitive being read.\r\n\r\n - Int16 and Int8.\r\n","Url":"https://github.com/dotnet/corefx/pull/34445","RelatedDescription":"Open PR \"Mitigate potential case where allocated marshal data is aligned to th…\" (#34445)"},{"Id":"397131794","IsPullRequest":true,"CreatedAt":"2019-01-08T23:00:00","Actor":"omajid","Number":"34443","RawContent":null,"Title":"[WIP] [release/2.2] Add hybrid support for OpenSSL 1.0 and 1.1 ","State":"open","Body":"See https://github.com/dotnet/corefx/issues/33870 for the background.","Url":"https://github.com/dotnet/corefx/pull/34443","RelatedDescription":"Open PR \"[WIP] [release/2.2] Add hybrid support for OpenSSL 1.0 and 1.1 \" (#34443)"},{"Id":"397074793","IsPullRequest":true,"CreatedAt":"2019-01-08T22:46:46","Actor":"wtgodbe","Number":"34433","RawContent":null,"Title":"Update branding & reset package list for 2.1.8","State":"closed","Body":"@safern @joperezr @mmitche PTAL\r\n\r\nCC @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/34433","RelatedDescription":"Closed or merged PR \"Update branding & reset package list for 2.1.8\" (#34433)"},{"Id":"397036092","IsPullRequest":true,"CreatedAt":"2019-01-08T22:46:09","Actor":"dotnet-maestro-bot","Number":"34429","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @wtgodbe\n* @dotnet-bot\n* @stephentoub\n* @tarekgh\n* @danmosemsft\n* @dotnet-maestro-bot\n* @bartonjs\n* @mmitche\n* @joperezr\n* @rmkerr\r\n\r\n## Instructions for merging\r\n\r\nThis repo does not appear to allow merge commits from the GitHub UI, so you will need to update this PR with a merge commit before closing this PR.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\nPlease contact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/34429","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#34429)"},{"Id":"397119471","IsPullRequest":true,"CreatedAt":"2019-01-08T22:20:24","Actor":"dotnet-maestro-bot","Number":"34439","RawContent":null,"Title":"Update CoreClr, CoreFx, CoreSetup to servicing-27129-04, servicing-27129-04, stable, respectively (release/2.1)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34439","RelatedDescription":"Open PR \"Update CoreClr, CoreFx, CoreSetup to servicing-27129-04, servicing-27129-04, stable, respectively (release/2.1)\" (#34439)"},{"Id":"397095306","IsPullRequest":false,"CreatedAt":"2019-01-08T21:33:54","Actor":"2E0PGS","Number":"34437","RawContent":null,"Title":"Process.GetProcesses returns truncated 15 char string on Linux","State":"open","Body":"When using `Process.GetProcesses()` in dotnet core it returns the `Process.ProcessName` property fine under Windows as expected. \r\n\r\nHowever when ran under Linux (Tested on Ubuntu 17.04) it seems to return process names as 15 char long strings. It truncates the process names to all be 15 char long strings.\r\n\r\nMy applogies if there is an issue for this somewhere under another repo. I found there was such an issue with the mono framework when doing research prior to submitting this issue: https://bugzilla.xamarin.com/show_bug.cgi?id=32539","Url":"https://github.com/dotnet/corefx/issues/34437","RelatedDescription":"Open issue \"Process.GetProcesses returns truncated 15 char string on Linux\" (#34437)"},{"Id":"397083171","IsPullRequest":true,"CreatedAt":"2019-01-08T20:59:05","Actor":"dotnet-maestro-bot","Number":"34436","RawContent":null,"Title":"Update CoreClr, CoreFx, CoreSetup to servicing-27207-03, servicing-27207-03, stable, respectively (release/2.2)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/34436","RelatedDescription":"Open PR \"Update CoreClr, CoreFx, CoreSetup to servicing-27207-03, servicing-27207-03, stable, respectively (release/2.2)\" (#34436)"},{"Id":"397081127","IsPullRequest":true,"CreatedAt":"2019-01-08T20:53:01","Actor":"wfurt","Number":"34435","RawContent":null,"Title":"support for fragmentation Ping option on Unix","State":"open","Body":"fixes #9350 [Ping] Unix - System.Net.Ping ignores PingOptions\r\n\r\nThis is  similar to #30324 with caveat that Busybox ping used on Alpine by default does not support options for fragmentation. When such condition is detected, option will be silently ignored as it is right now. One option on Alpine is to install \"normal\" ping via package manager. It should always work when using RAW socket implementation.\r\n\r\nThis change also adds new tests to verify integration on Unix. If we pass option ping implementation does not like (like I found with Busybox) this show blow up.\r\n\r\nI also added on test to external server to actually test Ttl processing. I found one case where virtualization sets TTL back to 64 when NATing outbound packets and test fails. We can disable that test if this become problematic in future. It works fine in Azure and on my physical machines.   \r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/34435","RelatedDescription":"Open PR \"support for fragmentation Ping option on Unix\" (#34435)"},{"Id":"397072845","IsPullRequest":true,"CreatedAt":"2019-01-08T20:27:42","Actor":"ViktorHofer","Number":"34432","RawContent":null,"Title":"Fix DirectoryToBuild errors w trailing backslash","State":"open","Body":"When using the root build script to build a particular project,\r\nthe command fails if the supplied project path has a trailiing\r\nbackslash and is not the last command.\r\nI.e. `build src\\System.Runtime\\ /p:CoreCLROverridePath=...`\r\n\r\ncc @safern","Url":"https://github.com/dotnet/corefx/pull/34432","RelatedDescription":"Open PR \"Fix DirectoryToBuild errors w trailing backslash\" (#34432)"},{"Id":"397059435","IsPullRequest":true,"CreatedAt":"2019-01-08T19:49:17","Actor":"dotnet-maestro[bot]","Number":"34431","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19058.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19058.1\r\n- Microsoft.DotNet.Build.Tasks.Configuration - 1.0.0-beta.19058.1\r\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.19058.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19058.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19058.1\r\n- Microsoft.DotNet.CoreFxTesting - 1.0.0-beta.19058.1\r\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.19058.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19058.1\r\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.19058.1\r\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.19058.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/34431","RelatedDescription":"Open PR \"Update dependencies from dotnet/arcade\" (#34431)"},{"Id":"397021018","IsPullRequest":false,"CreatedAt":"2019-01-08T18:02:44","Actor":"blowdart","Number":"34428","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/94\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Net.Http | 4.3.0, 4.3.1, 4.3.2, 4.3.3, 4.3.4 | 4.3.5\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n","Url":"https://github.com/dotnet/corefx/issues/34428","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#34428)"},{"Id":"397020571","IsPullRequest":false,"CreatedAt":"2019-01-08T18:01:33","Actor":"blowdart","Number":"34427","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/95\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Compression.ZipFile | 4.0.0, 4.0.1, 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/34427","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#34427)"},{"Id":"396940795","IsPullRequest":false,"CreatedAt":"2019-01-08T14:52:01","Actor":"stephentoub","Number":"34426","RawContent":null,"Title":"Potential mismatch in X509Certificates marshaling around X509_KEY_USAGE","State":"open","Body":"See discussion at https://github.com/dotnet/corefx/pull/34406#discussion_r245744936.\r\n\r\nIdeally we can remove the `new Span<byte>(decoded, cb).Clear();` calls adding to workaround this as part of whatever fix is employed.\r\n\r\ncc: @bartonjs","Url":"https://github.com/dotnet/corefx/issues/34426","RelatedDescription":"Open issue \"Potential mismatch in X509Certificates marshaling around X509_KEY_USAGE\" (#34426)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"397174263","IsPullRequest":true,"CreatedAt":"2019-01-09T03:30:06","Actor":"dotnet-bot","Number":"32272","RawContent":null,"Title":"Merge master-vs-deps to dev16.1-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32272","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to dev16.1-preview1-vs-deps\" (#32272)"},{"Id":"397192033","IsPullRequest":true,"CreatedAt":"2019-01-09T03:05:08","Actor":"zarenner","Number":"32280","RawContent":null,"Title":"Update GetTypeByMetadataName docs for case when type is ambiguous","State":"open","Body":"See #3864","Url":"https://github.com/dotnet/roslyn/pull/32280","RelatedDescription":"Open PR \"Update GetTypeByMetadataName docs for case when type is ambiguous\" (#32280)"},{"Id":"397174234","IsPullRequest":true,"CreatedAt":"2019-01-09T02:30:17","Actor":"dotnet-bot","Number":"32270","RawContent":null,"Title":"Merge master to dev16.1-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32270","RelatedDescription":"Closed or merged PR \"Merge master to dev16.1-preview1\" (#32270)"},{"Id":"397174290","IsPullRequest":true,"CreatedAt":"2019-01-09T02:30:13","Actor":"dotnet-bot","Number":"32273","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32273","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#32273)"},{"Id":"397174318","IsPullRequest":true,"CreatedAt":"2019-01-09T02:30:05","Actor":"dotnet-bot","Number":"32275","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32275","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#32275)"},{"Id":"397182309","IsPullRequest":true,"CreatedAt":"2019-01-09T02:17:27","Actor":"jcouv","Number":"32279","RawContent":null,"Title":"Async-streams: Add sequence point after resume label for yield","State":"open","Body":"This should fix one of the issues in https://github.com/dotnet/roslyn/issues/32246\r\nSpecifically, when you reach a `yield return`, the next step correctly goes to the caller, but the next time you step into the async-iterator method, the same `yield return` is highlighted again instead of the statement after it.\r\n\r\nI'm still exploring out to validate this in VS (I expect the technique used in https://github.com/dotnet/roslyn/pull/31679 should work).","Url":"https://github.com/dotnet/roslyn/pull/32279","RelatedDescription":"Open PR \"Async-streams: Add sequence point after resume label for yield\" (#32279)"},{"Id":"397176897","IsPullRequest":true,"CreatedAt":"2019-01-09T01:50:19","Actor":"ryzngard","Number":"32278","RawContent":null,"Title":"Fix accessibility issues for extract interface dialog","State":"open","Body":"AutomationDelegatingListView did not have the correct AutomationControlType. Refer to [https://review.docs.microsoft.com/en-us/accessibility-tools-docs/items/wpf/customcontrol_localizedcontroltype?branch=master](https://review.docs.microsoft.com/en-us/accessibility-tools-docs/items/wpf/customcontrol_localizedcontroltype?branch=master )\r\n\r\nMemberSelectionList uses `x:Name`, which is correct but does not fulfill automation needs. Add `AutomationProperties.Name` directly to be the same name. See [https://review.docs.microsoft.com/en-us/accessibility-tools-docs/items/wpf/customcontrol_name?branch=master](https://review.docs.microsoft.com/en-us/accessibility-tools-docs/items/wpf/customcontrol_name?branch=master)","Url":"https://github.com/dotnet/roslyn/pull/32278","RelatedDescription":"Open PR \"Fix accessibility issues for extract interface dialog\" (#32278)"},{"Id":"397175875","IsPullRequest":true,"CreatedAt":"2019-01-09T01:45:20","Actor":"agocke","Number":"32277","RawContent":null,"Title":"Add ITypeSymbol.IsUnmanagedType and ITypeSymbol.IsRefLikeType","State":"open","Body":"Fixes #30427 and #30426","Url":"https://github.com/dotnet/roslyn/pull/32277","RelatedDescription":"Open PR \"Add ITypeSymbol.IsUnmanagedType and ITypeSymbol.IsRefLikeType\" (#32277)"},{"Id":"397174364","IsPullRequest":false,"CreatedAt":"2019-01-09T01:37:23","Actor":"vsfeedback","Number":"32276","RawContent":null,"Title":"Strange behaviour in async method","State":"open","Body":"I have a solution targeting NetCoreApp2.0.\n\nLately I've seen that when running an async method, the debugger shows me variables that are non allocated (out of scope).\n\nIf this variable is an IQueryable&lt;string&gt; it will show show up in the 'Locals window' as NullReferenceException.\n\nIf I manually set the 'next statement' to first statement in the block containing this IQueryable&lt;string&gt;, a NullReferenceException will be thrown when accessing the variable.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/238451/strange-behaviour-in-async-method.html\nVSTS ticketId: 604787_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/32276","RelatedDescription":"Open issue \"Strange behaviour in async method\" (#32276)"},{"Id":"397174298","IsPullRequest":true,"CreatedAt":"2019-01-09T01:36:59","Actor":"dotnet-bot","Number":"32274","RawContent":null,"Title":"Merge dev16.1-preview1 to dev16.1-preview1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.1-preview1 into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/dev16.1-preview1\n# Fix merge conflicts\ngit commit\ngit push merges/dev16.1-preview1-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32274","RelatedDescription":"Open PR \"Merge dev16.1-preview1 to dev16.1-preview1-vs-deps\" (#32274)"},{"Id":"397174247","IsPullRequest":false,"CreatedAt":"2019-01-09T01:36:43","Actor":"ryzngard","Number":"32271","RawContent":null,"Title":"\"Unhandled declaration pattern context\" when using switch expressions ","State":"open","Body":"Affected Branch: master\r\nAffected Build:  16.0.0 Preview 1.1+ \r\nAffected Product Language: C#  \r\nSolution: \\\\\\\\mlangfs1\\public\\andrha\\ConsoleApp1.zip \r\nDump: \\\\\\\\mlangfs1\\public\\andrha\\unhandled_decl_dump.dmp\r\n\r\nSteps to reproduce:\r\n\r\n1. Open zipped solution, specifically Program.cs. \r\n2. Run VS under debugger with debug Roslyn (I used f5 from Roslyn repo) \r\n","Url":"https://github.com/dotnet/roslyn/issues/32271","RelatedDescription":"Open issue \"\"Unhandled declaration pattern context\" when using switch expressions \" (#32271)"},{"Id":"397174004","IsPullRequest":false,"CreatedAt":"2019-01-09T01:35:33","Actor":"vsfeedback","Number":"32269","RawContent":null,"Title":"DebuggerDisplay fails to correctly format string if property is a ref return","State":"open","Body":"With C# 7.0, a function/property can return a reference to a field. If this is used from within a DebuggerDisplay, it just outputs the name of the type, rather than the string of that variable.\n\nExample:\n\n```csharp\nusing System;\nusing System.Diagnostics;\n\nnamespace DebuggerView\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var s = new[] { &quot;Hello&quot; };\n            var test = new Test(s);\n        }\n    }\n\n    //[DebuggerDisplay(&quot;{DebuggerString}&quot;)] // Displays 'Hello'\n    [DebuggerDisplay(&quot;{Name}&quot;)] // Displays 'string'\n    readonly struct Test\n    {\n        private readonly string[] _s;\n\n        public Test(string[] s)\n        {\n            _s = s;\n        }\n\n        private string DebuggerString =&gt; Name;\n\n        public ref string Name =&gt; ref _s[0];\n    }\n}\n```\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/252771/debuggerdisplay-fails-to-correctly-format-string-i.html\nVSTS ticketId: 615995_\n_These are the original issue comments:_\n\nTaylor Southwick [MSFT] on 5/14/2018, 00:42 PM (239 days ago): <p>The wider issue seems to be that the debugger does not support ref returns. Properties that are ref returns cannot be viewed in the debugger (ie there is no arrow to expand to see the members on it)</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/32269","RelatedDescription":"Open issue \"DebuggerDisplay fails to correctly format string if property is a ref return\" (#32269)"},{"Id":"397146822","IsPullRequest":true,"CreatedAt":"2019-01-09T01:30:04","Actor":"dotnet-bot","Number":"32262","RawContent":null,"Title":"Merge master-vs-deps to dev16.1-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into dev16.1-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-dev16.1-preview1-vs-deps\ngit reset --hard upstream/dev16.1-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push merges/master-vs-deps-to-dev16.1-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32262","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to dev16.1-preview1-vs-deps\" (#32262)"},{"Id":"397161917","IsPullRequest":true,"CreatedAt":"2019-01-09T01:03:15","Actor":"genlu","Number":"32268","RawContent":null,"Title":"fix rename crash when an invalid for-loop control variable exist in VB syntax tree","State":"open","Body":"fix #32086 \r\n\r\n@dotnet/roslyn-ide @CyrusNajmabadi ","Url":"https://github.com/dotnet/roslyn/pull/32268","RelatedDescription":"Open PR \"fix rename crash when an invalid for-loop control variable exist in VB syntax tree\" (#32268)"},{"Id":"397146787","IsPullRequest":true,"CreatedAt":"2019-01-09T01:00:23","Actor":"dotnet-bot","Number":"32261","RawContent":null,"Title":"Merge master to dev16.1-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into dev16.1-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-dev16.1-preview1\ngit reset --hard upstream/dev16.1-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-dev16.1-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32261","RelatedDescription":"Closed or merged PR \"Merge master to dev16.1-preview1\" (#32261)"},{"Id":"397146862","IsPullRequest":true,"CreatedAt":"2019-01-09T01:00:14","Actor":"dotnet-bot","Number":"32263","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32263","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#32263)"},{"Id":"397146917","IsPullRequest":true,"CreatedAt":"2019-01-09T01:00:08","Actor":"dotnet-bot","Number":"32264","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/32264","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#32264)"},{"Id":"397088046","IsPullRequest":false,"CreatedAt":"2019-01-09T00:56:29","Actor":"Thraka","Number":"32251","RawContent":null,"Title":"[c# 7.3] cannot pass this with in? Seems like you should","State":"closed","Body":"**Version Used**: 7.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Use the code below\r\n\r\n```csharp\r\nclass A\r\n{\r\n    public string Name;\r\n    public void MapObjectB(in B obj) { }\r\n}\r\n\r\nclass B\r\n{\r\n    public string Name;\r\n    public void DoWorkWithA(A obj) => obj.MapObjectB(in this);\r\n}\r\n\r\nclass Program\r\n{\r\n    void Main()\r\n    {\r\n        var a = new A();\r\n        var b = new B();\r\n        a.Name = \"Bob\";\r\n        b.DoWorkWithA(a);\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nI could use `in this` as `this` is passed with `in`, it is read-only and not assignable.\r\n\r\n**Actual Behavior**:\r\n\r\nError that you cannot pass `this` by `ref`","Url":"https://github.com/dotnet/roslyn/issues/32251","RelatedDescription":"Closed issue \"[c# 7.3] cannot pass this with in? Seems like you should\" (#32251)"},{"Id":"397152297","IsPullRequest":true,"CreatedAt":"2019-01-09T00:25:36","Actor":"ivanbasov","Number":"32267","RawContent":null,"Title":"AsyncCompletion in Debugger: potential commit chars is empty","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/31922\r\n\r\n**Scenario**\r\n1. A completion (new completion implementation) happens in a multi-buffer scenario such as Razor, Debugger or TypeScript+C#.\r\n2. Roslyn provides calculates _potential commit characters_ for a content type (using completion service) and put into a subject buffer.\r\n3. Editor does not pass a surface buffer to the Commit Manager. The surface buffer differs from the subject buffer and it does not contains the _potential commit characters_.\r\n4. Later one user presses a commit character.\r\n\r\n**Expected**\r\nEditor verifies that a commit character has been pressed and asks Roslyn to TryCommit.\r\n\r\n**Actual**\r\nEditor could not find any commit character and does not make any completion commits. ","Url":"https://github.com/dotnet/roslyn/pull/32267","RelatedDescription":"Open PR \"AsyncCompletion in Debugger: potential commit chars is empty\" (#32267)"},{"Id":"397149752","IsPullRequest":false,"CreatedAt":"2019-01-09T00:13:18","Actor":"jcouv","Number":"32266","RawContent":null,"Title":"EnC: support async-iterator methods","State":"open","Body":"I noticed that there is some EnC for handling iterator and async methods, so there will likely be some handling for async-iterator methods too.\r\n\r\nFYI @tmat @ivanbasov @jinujoseph \r\nLet me know what you think in terms of scheduling. If this could be looked at in preview3, then I don't need to block this scenario.\r\nThanks\r\n\r\nAsync-streams umbrella: https://github.com/dotnet/roslyn/issues/24037","Url":"https://github.com/dotnet/roslyn/issues/32266","RelatedDescription":"Open issue \"EnC: support async-iterator methods\" (#32266)"},{"Id":"397147224","IsPullRequest":true,"CreatedAt":"2019-01-09T00:01:38","Actor":"genlu","Number":"32265","RawContent":null,"Title":"Add support for expanding of alias of value tuple types","State":"open","Body":"Fix #30903 \r\n\r\n@jcouv @dotnet/roslyn-ide @CyrusNajmabadi ","Url":"https://github.com/dotnet/roslyn/pull/32265","RelatedDescription":"Open PR \"Add support for expanding of alias of value tuple types\" (#32265)"},{"Id":"397146673","IsPullRequest":false,"CreatedAt":"2019-01-08T23:59:44","Actor":"chborl","Number":"32260","RawContent":null,"Title":"Refactor LooksLikeNodeInArgumentList method of Complete Statement","State":"open","Body":"Per comment posted by @CyrusNajmabadi in https://github.com/dotnet/roslyn/pull/30743/files#r245081027\r\n\r\nLook into breaking main loop of method into two.","Url":"https://github.com/dotnet/roslyn/issues/32260","RelatedDescription":"Open issue \"Refactor LooksLikeNodeInArgumentList method of Complete Statement\" (#32260)"},{"Id":"397142002","IsPullRequest":false,"CreatedAt":"2019-01-08T23:39:30","Actor":"gafter","Number":"32259","RawContent":null,"Title":"`TypeSymbolWithAnnotations.ToDisplayString` misplaces `?` on multidimensional arrays","State":"open","Body":"The implementation of `TypeSymbolWithAnnotations.ToDisplayString` places the `?` after a type. That placement is incorrect for multidimensional arrays, in which it should be placed after the first pair of brackets.\r\n\r\nWe probably need to handle arrays specially, as we do in `SymbolDisplayVisitor.VisitTypeSymbolWithAnnotations`.\r\n\r\nFor the moment I'm working around this by avoiding `TypeSymbolWithAnnotations` in diagnostics.","Url":"https://github.com/dotnet/roslyn/issues/32259","RelatedDescription":"Open issue \"`TypeSymbolWithAnnotations.ToDisplayString` misplaces `?` on multidimensional arrays\" (#32259)"},{"Id":"397139139","IsPullRequest":false,"CreatedAt":"2019-01-08T23:27:41","Actor":"gafter","Number":"32258","RawContent":null,"Title":"Nullable array type improperly accepted in array creation","State":"open","Body":"As pointed out in https://github.com/dotnet/roslyn/issues/31991#issuecomment-451384616:\r\n\r\n> Another case where this is incorrectly accepted:\r\n> ```cs\r\n> #nullable enable\r\n> public class C {\r\n>     public void M() {\r\n>     \t_ = new C?(); // error \r\n>         _ = new string[50]?; // no error (incorrect)\r\n>         _ = new string[50]?[,]; // no error (incorrect)\r\n>     }\r\n> }\r\n> ```\r\n> Looks like the same issue.\r\n\r\nSee also https://github.com/dotnet/roslyn/issues/32243 which shows that this is a breaking change.\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/32258","RelatedDescription":"Open issue \"Nullable array type improperly accepted in array creation\" (#32258)"},{"Id":"397138371","IsPullRequest":true,"CreatedAt":"2019-01-08T23:24:39","Actor":"jaredpar","Number":"32257","RawContent":null,"Title":"Remove more private reflection from compiler","State":"open","Body":"This change continues the removal of private reflection code from the compiler code base and instead relying on mulit-targeting to have detect the runtime. This also necessarily cleans up a number of our `#if` checks in the code base. \r\n\r\nFollow up to #31763","Url":"https://github.com/dotnet/roslyn/pull/32257","RelatedDescription":"Open PR \"Remove more private reflection from compiler\" (#32257)"},{"Id":"397137775","IsPullRequest":true,"CreatedAt":"2019-01-08T23:22:18","Actor":"tmeschter","Number":"32256","RawContent":null,"Title":"Discover .editorconfig files during evaluation","State":"open","Body":"Currently we discover .editorconfig files using a target and task that run before `CoreCompile`. On the plus side, this is relatively straightforward and yields (almost) exactly the right set of .editorconfig files that could be used by the compiler--e.g., it will find .editorconfig files that are next to .cs/.vb files produced/found by other targets (so long as they run earlier) and will _not_ pass along any .editorconfig files that are excluded due to `root=true`. It can also pass along to the project systems the (almost) exact set of places where .editorconfig files don't exist but would be interesting if they did. This allows the project systems to place file watchers on those locations and rerun the design-time build if they appear.\r\n\r\nThe big downside is that this doesn't play well with the caches that we use to limit the number of design-time builds. These generally expect \"interesting\" project changes to alter something in MSBuild's evaluated model of the project--adding a property modifies a project file or one of its imports; adding or removing a code file modifies the project file or causes a glob to evaluate to a different set of items, etc. But as .editorconfig files don't show up in the evaluated model at all our caches don't notice when one is added or removed.\r\n\r\nThis leads to weird problems. If you add a .editorconfig before opening a solution the proejct system won't see it at all--it will have been passed cached data. And if you add one _after_ opening the solution, the project system (if it has set up file watchers) may see it and request a new design-time build--but that build will just return cached data that doesn't include the file. Similar problems occur with deleting files.\r\n\r\nTo better support this scenario, [Microsoft/msbuild #4050](https://github.com/Microsoft/msbuild/pull/4050) adds a new intrinsic item function, `GetPathsOfAllFilesAbove`, that maps from a set of items to all the files of a given name that are found next to those items or above them in the directory tree. This commit uses the new functionalty to map from all `<Compile>` items to the applicable .editorconfig files and add them to the evaluated model.\r\n\r\nOn the plus side this will help us avoid the caching problem and eliminates a set of MSBuild tasks and targets.\r\n\r\nOn the negative side, we will no longer be able to find .editorconfig files related to `<Compile>` items produced by tasks/targets. This is a minor consideration as we couldn't guarantee our task would \"see\" these items, anyway, as it would depend on the relative ordering of the targets during a build.\r\n\r\nAlso, we no longer get the set of \"potential\" .editorconfig files to pass to the project system. This isn't great, but the project systems can figure out these locations on their own without too much work.","Url":"https://github.com/dotnet/roslyn/pull/32256","RelatedDescription":"Open PR \"Discover .editorconfig files during evaluation\" (#32256)"},{"Id":"397137667","IsPullRequest":true,"CreatedAt":"2019-01-08T23:21:52","Actor":"heejaechang","Number":"32255","RawContent":null,"Title":"[WIP] updating OptimizationData to 3.0.0-beta2-19053-01","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/32255","RelatedDescription":"Open PR \"[WIP] updating OptimizationData to 3.0.0-beta2-19053-01\" (#32255)"},{"Id":"397128565","IsPullRequest":false,"CreatedAt":"2019-01-08T22:48:17","Actor":"InRedikaWB","Number":"32254","RawContent":null,"Title":"[Wiki] Mistake in markdown file ","State":"open","Body":"On page https://github.com/dotnet/roslyn/wiki/Labels-used-for-issues#general mistake in markdown. \r\n\r\nAbove the \"General\" header:\r\n- **Expected**: `## Areas`\r\n- **Actual**: `##Areas`\r\n\r\n![image](https://user-images.githubusercontent.com/22368203/50863702-9a92e200-13b0-11e9-8e4d-caa39dfdeebd.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/32254","RelatedDescription":"Open issue \"[Wiki] Mistake in markdown file \" (#32254)"},{"Id":"397125734","IsPullRequest":false,"CreatedAt":"2019-01-08T22:37:43","Actor":"heejaechang","Number":"32253","RawContent":null,"Title":"use NoProjection option once it becomes public API","State":"open","Body":"related to this PR\r\nhttps://github.com/dotnet/roslyn/pull/32248\r\n\r\nwe should use\r\nhttp://index/?query=NoProjection&rightProject=Microsoft.VisualStudio.Text.Internal&file=TextLogic%5CTagAggregatorOptions2.cs&line=59\r\n\r\nin here\r\nhttp://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Implementation/Venus/ContainedLanguage.cs,149\r\n\r\nto make sure we don't create tagger not directly related to our buffer.\r\n\r\nwe expect the option to be public in preview 3. so we should consume the option once it becomes public.","Url":"https://github.com/dotnet/roslyn/issues/32253","RelatedDescription":"Open issue \"use NoProjection option once it becomes public API\" (#32253)"},{"Id":"397090259","IsPullRequest":false,"CreatedAt":"2019-01-08T21:19:46","Actor":"333fred","Number":"32252","RawContent":null,"Title":"Nullable ignoring explicit null checks when variable is considered nullable.","State":"open","Body":"```C#\r\n#nullable enable\r\npublic class C\r\n{\r\n\tvoid M(object o)\r\n\t{\r\n\t\tif (o == null) o.ToString();\r\n\t}\r\n}\r\n```\r\n\r\nCurrently, no warning is reported for this code. This is especially bad for code with W warnings turned off, such that variable declarations not having annotations is considered normal.\r\n\r\n/cc @MadsTorgersen, do you agree that we should have a safety warning here? This is related to the reachability topic I added to the agenda.","Url":"https://github.com/dotnet/roslyn/issues/32252","RelatedDescription":"Open issue \"Nullable ignoring explicit null checks when variable is considered nullable.\" (#32252)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"397162184","IsPullRequest":true,"CreatedAt":"2019-01-09T02:00:56","Actor":"Dotnet-GitSync-Bot","Number":"6792","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6792","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6792)"},{"Id":"397144944","IsPullRequest":true,"CreatedAt":"2019-01-09T01:28:07","Actor":"trylek","Number":"6790","RawContent":null,"Title":"Fix getFuntionEntryPoint and canTailCall according to Crossgen","State":"closed","Body":"This change fixes the two JIT interface methods according to their\r\nCrossgen implementation.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6790","RelatedDescription":"Closed or merged PR \"Fix getFuntionEntryPoint and canTailCall according to Crossgen\" (#6790)"},{"Id":"396689793","IsPullRequest":true,"CreatedAt":"2019-01-09T01:27:27","Actor":"marek-safar","Number":"6782","RawContent":null,"Title":"Moves common COM type to shared corelib partition","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6782","RelatedDescription":"Closed or merged PR \"Moves common COM type to shared corelib partition\" (#6782)"},{"Id":"397140992","IsPullRequest":true,"CreatedAt":"2019-01-09T00:41:31","Actor":"trylek","Number":"6789","RawContent":null,"Title":"Mark monitor helpers as requiring runtime JIT","State":"closed","Body":"In accordance with Crossgen behavior I am blocking out the\r\nMonitor-related R2R helpers as requiring runtime JIT.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6789","RelatedDescription":"Closed or merged PR \"Mark monitor helpers as requiring runtime JIT\" (#6789)"},{"Id":"397152681","IsPullRequest":true,"CreatedAt":"2019-01-09T00:27:31","Actor":"trylek","Number":"6791","RawContent":null,"Title":"Fix generic lookup cells to be per method context","State":"open","Body":"1) Clean up generic lookup tests so that the TH->RTTH helper is\r\nonly called from a single method (GetTypeName). This is no longer\r\nstrictly necessary as Crossgen started to support the helper\r\nbut I believe it to be good for general hygiene.\r\n\r\n2) Minor improvements in the R2R test harness to display ordered\r\nsets of whitelisted vs. non-whitelisted jitted methods.\r\n\r\n3) It seems to me that GenericLookupSignature should always pass\r\naround the instantiating stub flag as the exact purpose of the\r\nsignature is to cater for shared methods with the extra\r\ninstantiation argument.\r\n\r\n4) Based on JanK's clarification I have fixed the CPAOT compiler\r\nto emit separate generic lookup cells for each context method.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6791","RelatedDescription":"Open PR \"Fix generic lookup cells to be per method context\" (#6791)"},{"Id":"397121586","IsPullRequest":true,"CreatedAt":"2019-01-08T22:23:33","Actor":"trylek","Number":"6788","RawContent":null,"Title":"CPAOT support for RVA-backed static fields","State":"open","Body":"This change adds support for the helper\r\nCORINFO_HELP_TYPEHANDLE_TO_RUNTIMETYPEHANDLE and fixes RVA field\r\nmanagement. In contrast to Crossgen which selectively copies over\r\nparts of the MSIL file (including the RVA field data), we simply\r\npoint the RVA field address to the pre-existing data block in the\r\nMSIL file embedded in the R2R image.\r\n\r\nTo achieve this goal I had to slightly generalize the section\r\nbuilder by adding new support for \"section start nodes\" - symbol\r\nnodes representing the beginning of each PE section. In case of\r\nsections copied from the original MSIL executable, the section\r\nstart nodes point at the \"original\" MSIL section content.\r\n\r\nUsing this construct I was able to introduce a new node RVAFieldNode\r\nwhich represents a given RVA field as an offset relative to one\r\nof the section start symbols. Upon codegen, the RVAFieldNode\r\nemits a relocatable pointer-sized record in the R/W data section\r\nwhich points at the beginning of the RVA field data in the MSIL.\r\n\r\nI have also ported JanK's RVA unit test to our base CPAOT test suite.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6788","RelatedDescription":"Open PR \"CPAOT support for RVA-backed static fields\" (#6788)"},{"Id":"396900376","IsPullRequest":true,"CreatedAt":"2019-01-08T16:36:49","Actor":"trylek","Number":"6786","RawContent":null,"Title":"Fix data blob offset for dynamic statics","State":"closed","Body":"In my initial implementation of dynamic statics, I misread the code\r\nin DomainLocalModule::NormalDynamicEntry as I incorrectly thought\r\nthat FEATURE_64BIT_ALIGNMENT would be set for AMD64. This is wrong,\r\nthe flag is only used on ARM32 where it makes sure that the data\r\nblob starts at an 8-byte boundary. This also implies that the constants\r\nmust be per architecture, not per pointer size. This change seems to be\r\nfixing almost a hundred CoreCLR Pri#0 test failures.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6786","RelatedDescription":"Closed or merged PR \"Fix data blob offset for dynamic statics\" (#6786)"},{"Id":"396905432","IsPullRequest":false,"CreatedAt":"2019-01-08T13:24:43","Actor":"RustyCZ","Number":"6787","RawContent":null,"Title":"Access violation in GC thread","State":"open","Body":"I have tried Microsoft.DotNet.ILCompiler in version 1.0.0-alpha-27221-02 and I have encountered an error Access violation reading location 0x0000000000000000 in garbage collector thread. I am using Span of structures which have explicit layout and size if it may be of any help. It was compiled for win-x64 netcoreapp2.1.\r\n\r\nException thrown at 0x00007FF7325F5870 in Test.exe: 0xC0000005: Access violation reading location 0x0000000000000000.\r\n\r\n[Inline Frame] Test.exe!WKS::my_get_size\r\n[Inline Frame] Test.exe!WKS::my_get_size(Object *) Line 8905\r\nTest.exe!WKS::gc_heap::mark_object_simple1(unsigned char * oo, unsigned char * start) Line 17649\r\nTest.exe!WKS::gc_heap::mark_object_simple(unsigned char * * po) Line 18182\r\nTest.exe!WKS::GCHeap::Promote(Object * * ppObject, ScanContext * sc, unsigned int flags) Line 33839\r\nTest.exe!ScanConsecutiveHandlesWithoutUserData(Object * * pValue, Object * * pLast, ScanCallbackInfo * pInfo, unsigned __int64 * __formal) Line 452\r\n[Inline Frame] Test.exe!BlockScanBlocksEphemeralWorker(unsigned int * dwClumpMask, unsigned int) Line 685\r\nTest.exe!BlockScanBlocksEphemeral(TableSegment * pSegment, unsigned int uBlock, unsigned int uCount, ScanCallbackInfo * pInfo) Line 742\r\n[Inline Frame] Test.exe!SegmentScanByTypeMap(TableSegment *) Line 1698\r\nTest.exe!TableScanHandles(HandleTable * pTable, const unsigned int * puType, unsigned int uTypeCount, TableSegment *(*)(HandleTable *, TableSegment *, CrstHolderWithState *) pfnSegmentIterator, void(*)(TableSegment *, unsigned int, unsigned int, ScanCallbackInfo *) pfnBlockHandler, ScanCallbackInfo * pInfo, CrstHolderWithState * pCrstHolder) Line 1756\r\nTest.exe!HndScanHandlesForGC(HandleTable * hTable, void(*)(Object * *, unsigned __int64 *, unsigned __int64, unsigned __int64) scanProc, unsigned __int64 param1, unsigned __int64 param2, const unsigned int * types, unsigned int typeCount, unsigned int condemned, unsigned int maxgen, unsigned int flags) Line 1044\r\nTest.exe!Ref_TraceNormalRoots(unsigned int condemned, unsigned int maxgen, ScanContext * sc, void(*)(Object * *, ScanContext *, unsigned int) fn) Line 1144\r\nTest.exe!GCScan::GcScanHandles(void(*)(Object * *, ScanContext *, unsigned int) fn, int condemned, int max_gen, ScanContext * sc) Line 187\r\nTest.exe!WKS::gc_heap::mark_phase(int condemned_gen_number, unsigned int mark_only_p) Line 19638\r\nTest.exe!WKS::gc_heap::gc1() Line 15272\r\nTest.exe!WKS::gc_heap::garbage_collect(int n) Line 16864\r\nTest.exe!WKS::GCHeap::GarbageCollectGeneration(unsigned int gen, gc_reason reason) Line 35231\r\nTest.exe!WKS::gc_heap::try_allocate_more_space(alloc_context * acontext, unsigned __int64 size, int gen_number) Line 13083\r\n[Inline Frame] Test.exe!WKS::gc_heap::allocate_more_space(alloc_context *) Line 13370\r\n[Inline Frame] Test.exe!WKS::gc_heap::allocate(unsigned __int64) Line 13401\r\nTest.exe!WKS::GCHeap::Alloc(gc_alloc_context * context, unsigned __int64 size, unsigned int flags) Line 34542\r\nTest.exe!RhpNewObject() Line 76\r\n[External Code]\r\n","Url":"https://github.com/dotnet/corert/issues/6787","RelatedDescription":"Open issue \"Access violation in GC thread\" (#6787)"},{"Id":"396767508","IsPullRequest":true,"CreatedAt":"2019-01-08T12:30:49","Actor":"Dotnet-GitSync-Bot","Number":"6785","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @danmosemsft","Url":"https://github.com/dotnet/corert/pull/6785","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6785)"},{"Id":"396739613","IsPullRequest":false,"CreatedAt":"2019-01-08T03:46:39","Actor":"frankzye","Number":"6784","RawContent":null,"Title":"using npgsql but throw Object reference not set to an instance of an object exception","State":"open","Body":"System.NullReferenceException: Object reference not set to an instance of an object . \r\nat Npgsql.Logging.NpgsqlLogManager.GetClassFullName() + 0x64 .    \r\nat Npgsql.NpgsqlConnection..cctor() + 0x53 . \r\n\r\nand I found the following source code:  \r\n`\r\nMethodBase method = frame.GetMethod();  \r\n                declaringType = method.DeclaringType;  \r\n                if (declaringType == null) { . \r\n                    className = method.Name;  \r\n                    break;  \r\n}\r\n`\r\nhow to handle this exception , and when the third class lib using reflection, are there any work around ways?\r\n","Url":"https://github.com/dotnet/corert/issues/6784","RelatedDescription":"Open issue \"using npgsql but throw Object reference not set to an instance of an object exception\" (#6784)"},{"Id":"396710200","IsPullRequest":true,"CreatedAt":"2019-01-08T03:10:45","Actor":"Dotnet-GitSync-Bot","Number":"6783","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6783","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6783)"},{"Id":"396548672","IsPullRequest":true,"CreatedAt":"2019-01-07T20:09:27","Actor":"Dotnet-GitSync-Bot","Number":"6781","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/6781","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6781)"},{"Id":"396456488","IsPullRequest":false,"CreatedAt":"2019-01-07T11:47:26","Actor":"adamsitnik","Number":"6780","RawContent":null,"Title":"Potential deadlock?","State":"open","Body":"@jkotas I tried to run all the benchmarks from `dotnet/performance` repository for CoreRT (https://github.com/dotnet/performance/pull/218)\r\n\r\nI started all the benchmarks before going to sleep and expected that in the morning I am going to have all the results ready waiting for me. However, the run got deadlocked after 1h and I don't have full results yet.\r\n\r\nBenchmark which got deadlocked comes from [CoreFX](https://github.com/dotnet/corefx/blob/4378851bc5fd0e3c5043a6d0a3ac835e838fcf7d/src/System.Collections.Concurrent/tests/Performance/Perf.ConcurrentStack.cs#L146) and I ported in the following [way](https://github.com/dotnet/performance/blob/3941f11e000edd7a404599fc2e401129c25bc4ad/src/benchmarks/micro/corefx/System.Collections/Concurrent/AddRemoveFromDifferentThreads.cs#L71-L107) to the performance repo.\r\n\r\n@stephentoub could you please take a look at my port? I double checked it and it looks good to me.\r\n\r\nI was able to create a small repro without BenchmarkDotNet dependency and reproduce the deadlock on my Ubuntu machine:\r\n\r\n```cs\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Collections.Concurrent;\r\n\r\nnamespace BenchmarkDotNet.Autogenerated\r\n{\r\n    public class UniqueProgramName\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            var sut = new AddRemoveFromDifferentThreads<int>();\r\n\r\n            for(int i = 0; i < 100; i++)\r\n            {\r\n                Console.WriteLine($\"ConcurrentStack {i}\");\r\n\r\n                sut.SetupConcurrentStackIteration();\r\n                sut.ConcurrentStack();\r\n                sut.IterationCleanup();\r\n            }\r\n\r\n            Console.WriteLine(\"OK\");\r\n        }\r\n    }\r\n\r\n    public class AddRemoveFromDifferentThreads<T>\r\n    {\r\n        const int NumThreads = 2;\r\n\r\n        public int Size = 2_000_000;\r\n\r\n        private Barrier _barrier;\r\n        private Task _producer, _consumer;\r\n\r\n        public void SetupConcurrentStackIteration()\r\n        {\r\n            var stack = new ConcurrentStack<T>();\r\n\r\n            _barrier = new Barrier(NumThreads + 1);\r\n            \r\n            _producer = Task.Factory.StartNew(() =>\r\n            {\r\n                _barrier.SignalAndWait();\r\n                _barrier.SignalAndWait();\r\n\r\n                for (int i = 0; i < Size; i++)\r\n                {\r\n                    stack.Push(default);\r\n                }\r\n            }, CancellationToken.None, TaskCreationOptions.LongRunning, TaskScheduler.Default);\r\n\r\n            _consumer = Task.Factory.StartNew(() =>\r\n            {\r\n                _barrier.SignalAndWait();\r\n                _barrier.SignalAndWait();\r\n\r\n                int count = 0;\r\n                while (count < Size)\r\n                {\r\n                    if (stack.TryPop(out T _))\r\n                    {\r\n                        count++;\r\n                    }\r\n                }\r\n            }, CancellationToken.None, TaskCreationOptions.LongRunning, TaskScheduler.Default);\r\n            \r\n            _barrier.SignalAndWait();\r\n        }\r\n\r\n        public void ConcurrentStack() => SignalAndWaitForAllTasks();\r\n\r\n        private void SignalAndWaitForAllTasks()\r\n        {\r\n            _barrier.SignalAndWait();\r\n\r\n            Task.WaitAll(_producer, _consumer);\r\n        }\r\n\r\n\tpublic void IterationCleanup() => _barrier.Dispose();\r\n    }\r\n}\r\n```\r\n\r\nThe code does not always get deadlocked, sometimes I need to re-run the app 3 times.\r\n\r\nProject file:\r\n\r\n```xml\r\n<Project ToolsVersion=\"15.0\">\r\n  <PropertyGroup>\r\n    <ImportDirectoryBuildProps>false</ImportDirectoryBuildProps>\r\n    <ImportDirectoryBuildTargets>false</ImportDirectoryBuildTargets>\r\n  </PropertyGroup>\r\n\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <LangVersion>7.2</LangVersion>\r\n    <RuntimeIdentifier>linux-x64</RuntimeIdentifier>\r\n    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n    <TreatWarningsAsErrors>False</TreatWarningsAsErrors>\r\n    <DebugType>pdbonly</DebugType>\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <UseSharedCompilation>false</UseSharedCompilation>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-*\" />\r\n  </ItemGroup>\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n</Project>\r\n```\r\nNuGet.config\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    \r\n    <add key=\"coreRtNuGetFeed\" value=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\r\n  </packageSources>\r\n</configuration>\r\n```\r\n\r\nbuild.sh\r\n\r\n```sh\r\n/home/adam/projects/performace_corert/tools/dotnet/x64/dotnet restore --packages \"/home/adam/projects/performace_corert/artifacts/packages\"  /p:UseSharedCompilation=false -r linux-x64\r\n/home/adam/projects/performace_corert/tools/dotnet/x64/dotnet build -c Release  /p:UseSharedCompilation=false -r linux-x64\r\n/home/adam/projects/performace_corert/tools/dotnet/x64/dotnet publish -c Release  /p:UseSharedCompilation=false -r linux-x64\r\n```\r\n\r\nI can't reproduce it for .NET Core 3.0 or any previous .NET Core.\r\n\r\n```log\r\nadam@adsitnik-ubuntu:~/projects/performace_corert$ hostnamectl\r\n   Static hostname: adsitnik-ubuntu\r\n         Icon name: computer-desktop\r\n           Chassis: desktop\r\n        Machine ID: 21e2aa4fa8ba420ca524966404ceec9d\r\n           Boot ID: 518e9cf7cbe34d948a2f9710b1d0f1b9\r\n  Operating System: Ubuntu 18.04.1 LTS\r\n            Kernel: Linux 4.15.0-42-generic\r\n      Architecture: x86-64\r\nadam@adsitnik-ubuntu:~/projects/performace_corert$ /home/adam/projects/performace_corert/tools/dotnet/x64/dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-010006\r\n Commit:    166534d9bf\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /home/adam/projects/performace_corert/tools/dotnet/x64/sdk/3.0.100-preview-010006/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27218-01\r\n  Commit:  d40b87f29d\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-010006 [/home/adam/projects/performace_corert/tools/dotnet/x64/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18630-0234 [/home/adam/projects/performace_corert/tools/dotnet/x64/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [/home/adam/projects/performace_corert/tools/dotnet/x64/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nmicrosoft.dotnet.ilcompiler got resolved to 1.0.0-alpha-27305-01\r\n\r\n@jkotas should I disable this benchmark and try to get the results for other benchmarks?","Url":"https://github.com/dotnet/corert/issues/6780","RelatedDescription":"Open issue \"Potential deadlock?\" (#6780)"},{"Id":"396274433","IsPullRequest":true,"CreatedAt":"2019-01-07T03:16:09","Actor":"Dotnet-GitSync-Bot","Number":"6778","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/6778","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6778)"},{"Id":"396301624","IsPullRequest":true,"CreatedAt":"2019-01-07T03:14:43","Actor":"trylek","Number":"6779","RawContent":null,"Title":"Fix enumeration value of R2R helpers [Dbl|Flt][Rem|Round]","State":"closed","Body":"In accordance with my CoreCLR change \r\n\r\nhttps://github.com/dotnet/coreclr/pull/21836\r\n\r\nI'm fixing the incorrect enumeration values we inherited\r\nfrom an old typo in CoreCLR. This change seems to fix\r\nabout a dozen CoreCLR Pri#0 tests.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6779","RelatedDescription":"Closed or merged PR \"Fix enumeration value of R2R helpers [Dbl|Flt][Rem|Round]\" (#6779)"},{"Id":"396148907","IsPullRequest":true,"CreatedAt":"2019-01-06T12:37:14","Actor":"xoofx","Number":"6772","RawContent":null,"Title":"Add cross-targeting support to ObjectWriter","State":"closed","Body":"This PR is for the following item from issue #2606 \r\n\r\n> - [ ]  Add cross-targeting support to ObjectWriter https://github.com/dotnet/llilc/tree/master/lib/ObjWriter (add a new argument to Initialize method to specify target platform)\r\n\r\nIt allows typically to generate ELF output from Windows directly\r\n\r\nThere is a TODO in this PR related to the ARM/ARM64 platforms/abi. It would require for example to add Tizen as a platform to be able to specify properly the `gnueabi`\r\n\r\ncc: @jkotas  @alpencolt","Url":"https://github.com/dotnet/corert/pull/6772","RelatedDescription":"Closed or merged PR \"Add cross-targeting support to ObjectWriter\" (#6772)"},{"Id":"396230243","IsPullRequest":true,"CreatedAt":"2019-01-06T06:38:14","Actor":"Dotnet-GitSync-Bot","Number":"6777","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6777","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#6777)"},{"Id":"396220226","IsPullRequest":true,"CreatedAt":"2019-01-06T05:36:25","Actor":"Dotnet-GitSync-Bot","Number":"6776","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6776","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6776)"},{"Id":"396215268","IsPullRequest":true,"CreatedAt":"2019-01-06T02:01:47","Actor":"Dotnet-GitSync-Bot","Number":"6775","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6775","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6775)"},{"Id":"396189065","IsPullRequest":true,"CreatedAt":"2019-01-06T00:42:58","Actor":"jkotas","Number":"6774","RawContent":null,"Title":"Disable strongname signing for ILCompiler.Build.Tasks","State":"closed","Body":"Workaround for https://github.com/dotnet/corert/issues/6306","Url":"https://github.com/dotnet/corert/pull/6774","RelatedDescription":"Closed or merged PR \"Disable strongname signing for ILCompiler.Build.Tasks\" (#6774)"},{"Id":"396176750","IsPullRequest":false,"CreatedAt":"2019-01-05T16:01:17","Actor":"TFTomSun","Number":"6773","RawContent":null,"Title":"Simple Console App fails to build","State":"open","Body":"Hi I tried to publish an empty console application.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-*\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIt fails with the message:\r\nThe \"ComputeManagedAssemblies\" task could not be loaded from the assembly C:\\Users\\tftom\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27305-01\\build\\..\\tools\\ILCompiler.Build.Tasks.dll. Could not load file or assembly 'ILCompiler.Build.Tasks, Version=999.999.999.999, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. Strong name validation failed. (Exception from HRESULT: 0x8013141A) Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n\r\nI used the following publish config:\r\n![image](https://user-images.githubusercontent.com/5387192/50726330-0143a180-110c-11e9-8dd7-eed67ce9ee01.png)\r\n\r\nI have installed the latest .net core 2.2 sdk","Url":"https://github.com/dotnet/corert/issues/6773","RelatedDescription":"Open issue \"Simple Console App fails to build\" (#6773)"},{"Id":"396043651","IsPullRequest":true,"CreatedAt":"2019-01-05T01:33:59","Actor":"Dotnet-GitSync-Bot","Number":"6771","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/6771","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6771)"},{"Id":"396037113","IsPullRequest":false,"CreatedAt":"2019-01-04T19:18:31","Actor":"hzexe","Number":"6770","RawContent":null,"Title":"Compiling source to native code failed on Windows 7 Chinese version","State":"open","Body":"I have followed https://github.com/dotnet/corert/blob/master/Documentation/how-to-build-and-run-ilcompiler-in-console-shell-prompt.md\r\nWhen execute\r\n```bash\r\ndotnet publish /p:NativeCodeGen=cpp -r win-x64\r\n```\r\ngot the following output, it seems a problem with file encoding:\r\n\r\n用于 .NET Core 的 Microsoft (R) 生成引擎版本 16.0.225-preview+g5ebeba52a1\r\n版权所有(C) Microsoft Corporation。保留所有权利。\r\n\r\nG:\\test\\pp.csproj(2,1): warning MSB4011: 无法再次导入“C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.props”。可能已在“G:\\test\\pp.csproj”处导入过它。这很可能是生成创作错误。将忽略此后续导入。\r\nG:\\test\\pp.csproj : warning MSB4011: 无法再次导入“C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.targets”。可能已在“G:\\test\\pp.csproj (7,3)”处导入过它。这很可能是生成创作错误。将忽略此后续导入。\r\nG:\\test\\pp.csproj(2,1): warning MSB4011: 无法再次导入“C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.props”。可能已在“G:\\test\\pp.csproj”处导入过它。这很可能是生成创作错误。将忽略此后续导入。\r\nG:\\test\\pp.csproj : warning MSB4011: 无法再次导入“C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.targets”。可能已在“G:\\test\\pp.csproj (7,3)”处导入过它。这很可能是生成创作错误。将忽略此后续导入。\r\n  正在还原 G:\\test\\pp.csproj 的包...\r\n  正在生成 MSBuild 文件 G:\\test\\obj\\pp.csproj.nuget.g.props。\r\n  正在生成 MSBuild 文件 G:\\test\\obj\\pp.csproj.nuget.g.targets。\r\n  G:\\test\\pp.csproj 的还原在 196.83 ms 内完成。\r\nG:\\test\\pp.csproj(2,1): warning MSB4011: 无法再次导入“C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.props”。可能已在“G:\\test\\pp.csproj”处导入过它。这很可能是生成创作错误。将忽略此后续导入。\r\nG:\\test\\pp.csproj : warning MSB4011: 无法再次导入“C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.targets”。可能已在“G:\\test\\pp.csproj (7,3)”处导入过它。这很可能是生成创作错误。将忽略此后续导入。\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(142,5): message NETSDK1057: 你正在使用 .NET Core SDK 的预览版。可通过当前项目中的 global.json 文件来定义 SDK 版本。详细信息请访问 https://go.microsoft.com/fwlink/?linkid=869452 [G:\\test\\pp.csproj]\r\n  pp -> G:\\test\\bin\\Debug\\netcoreapp3.0\\win-x64\\pp.dll\r\n  Generating native code\r\n  The method or operation is not implemented. ([S.P.CompilerGenerated]Internal.CompilerGenerated.<Module>.InvokeRetO<Nullable`1<int32>>(object,native int,ArgSetupState&,bool))\r\n  pp.cpp\r\nG:\\test\\Program.cs(7189): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失 [G:\\test\\pp.csproj]\r\nG:\\test\\Program.cs(7692): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nG:\\test\\Program.cs(7693): error C2064: 项不会计算为接受 1 个参数的函数 [G:\\test\\pp.csproj]\r\nG:\\test\\Program.cs(7693): error C2143: 语法错误: 缺少“)”(在“;”的前面) [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\Console.cs(3395): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\Console.cs(3643): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\Console.cs(3644): error C2064: 项不会计算为接受 1 个参数的函数 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\Console.cs(3644): error C2143: 语法错误: 缺少“)”(在“;”的前面) [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\Console.cs(3885): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\Console.cs(3886): error C2144: 语法错误:“void”的前面应有“)” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\Console.cs(3886): error C2144: 语法错误:“void”的前面应有“;” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\Console.cs(3965): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\Console.cs(4113): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\Console.cs(4114): error C2144: 语法错误:“void”的前面应有“)” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\Console.cs(4114): error C2144: 语法错误:“void”的前面应有“;” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\Console.cs(15512): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\Console.cs(15979): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\Console.cs(15980): error C2064: 项不会计算为接受 1 个参数的函数 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\Console.cs(15980): error C2143: 语法错误: 缺少“)”(在“;”的前面) [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\ConsolePal.Windows.cs(4094): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\ConsolePal.Windows.cs(4856): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\ConsolePal.Windows.cs(4857): error C2146: 语法错误: 缺少“)”(在标识符“int32_t”的前面) [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\ConsolePal.Windows.cs(4857): error C2146: 语法错误: 缺少“;”(在标识符“int32_t”的前面) [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\ConsolePal.Windows.cs(4898): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\ConsolePal.Windows.cs(4899): error C2146: 语法错误: 缺少“)”(在标识符“int32_t”的前面) [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\ConsolePal.Windows.cs(4899): error C2146: 语法错误: 缺少“;”(在标识符“int32_t”的前面) [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\ConsolePal.Windows.cs(4908): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\ConsolePal.Windows.cs(4909): error C2146: 语法错误: 缺少“)”(在标识符“int32_t”的前面) [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Console\\src\\System\\ConsolePal.Windows.cs(4909): error C2146: 语法错误: 缺少“;”(在标识符“int32_t”的前面) [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\OperatingSystem.cs(5238): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\OperatingSystem.cs(5315): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\OperatingSystem.cs(5316): error C2064: 项不会计算为接受 1 个参数的函数 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\OperatingSystem.cs(5316): error C2143: 语法错误: 缺少“)”(在“;”的前面) [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\OperatingSystem.cs(5522): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\OperatingSystem.cs(5523): error C2144: 语法错误:“void”的前面应有“)” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\OperatingSystem.cs(5523): error C2144: 语法错误:“void”的前面应有“;” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\OperatingSystem.cs(5530): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\OperatingSystem.cs(5531): error C2144: 语法错误:“void”的前面应有“)” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\OperatingSystem.cs(5531): error C2144: 语法错误:“void”的前面应有“;” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\OperatingSystem.cs(5538): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\OperatingSystem.cs(5539): error C2144: 语法错误:“void”的前面应有“)” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\OperatingSystem.cs(5539): error C2144: 语法错误:“void”的前面应有“;” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\OperatingSystem.cs(5546): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\OperatingSystem.cs(5547): error C2144: 语法错误:“void”的前面应有“)” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\System.Runtime.Extensions\\src\\System\\OperatingSystem.cs(5547): error C2144: 语法错误:“void”的前面应有“;” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\Common\\src\\System\\Text\\ConsoleEncoding.cs(12875): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\artifacts\\obj\\System.Console\\netcoreapp-Windows_NT-Release\\System.SR.cs(7988): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\artifacts\\obj\\System.Console\\netcoreapp-Windows_NT-Release\\System.SR.cs(8409): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\artifacts\\obj\\System.Console\\netcoreapp-Windows_NT-Release\\System.SR.cs(8410): error C2144: 语法错误:“void”的前面应有“)” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\artifacts\\obj\\System.Console\\netcoreapp-Windows_NT-Release\\System.SR.cs(8410): error C2144: 语法错误:“void”的前面应有“;” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\artifacts\\obj\\System.Console\\netcoreapp-Windows_NT-Release\\System.SR.cs(8414): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\artifacts\\obj\\System.Console\\netcoreapp-Windows_NT-Release\\System.SR.cs(8415): error C2144: 语法错误:“void”的前面应有“)” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\artifacts\\obj\\System.Console\\netcoreapp-Windows_NT-Release\\System.SR.cs(8415): error C2144: 语法错误:“void”的前面应有“;” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\artifacts\\obj\\System.Console\\netcoreapp-Windows_NT-Release\\System.SR.cs(9496): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\Common\\src\\System\\Text\\ConsoleEncoding.cs(456): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\Common\\src\\System\\Text\\ConsoleEncoding.cs(457): error C2144: 语法错误:“void”的前面应有“)” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\Common\\src\\System\\Text\\ConsoleEncoding.cs(457): error C2144: 语法错误:“void”的前面应有“;” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\Common\\src\\System\\Text\\ConsoleEncoding.cs(461): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\Common\\src\\System\\Text\\ConsoleEncoding.cs(462): error C2144: 语法错误:“void”的前面应有“)” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\Common\\src\\System\\Text\\ConsoleEncoding.cs(462): error C2144: 语法错误:“void”的前面应有“;” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\Common\\src\\System\\Text\\OSEncoder.cs(822): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\Common\\src\\System\\Text\\OSEncoder.cs(1762): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\Common\\src\\System\\Text\\OSEncoder.cs(1763): error C2144: 语法错误:“void”的前面应有“)” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\Common\\src\\System\\Text\\OSEncoder.cs(1763): error C2144: 语法错误:“void”的前面应有“;” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\Common\\src\\System\\Text\\OSEncoder.cs(1767): error C2001: 常量中有换行符 [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\Common\\src\\System\\Text\\OSEncoder.cs(1768): error C2144: 语法错误:“void”的前面应有“)” [G:\\test\\pp.csproj]\r\nE:\\A\\_work\\7\\s\\corefx\\src\\Common\\src\\System\\Text\\OSEncoder.cs(1768): error C2144: 语法错误:“void”的前面应有“;” [G:\\test\\pp.csproj]\r\nC:\\Users\\hzexe\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-27228-02\\targets\\Microsoft.NETCore.Native.targets(249,5): error MSB3073: 命令“cl @\"obj\\Debug\\netcoreapp3.0\\win-x64\\native\\cl.rsp\"”已退出，代码为 2。 [G:\\test\\pp.csproj]\r\n","Url":"https://github.com/dotnet/corert/issues/6770","RelatedDescription":"Open issue \"Compiling source to native code failed on Windows 7 Chinese version\" (#6770)"},{"Id":"396017894","IsPullRequest":true,"CreatedAt":"2019-01-04T18:11:38","Actor":"yowl","Number":"6769","RawContent":null,"Title":"WIP: wasm: create threadstatics using GetThreadStaticBaseForType","State":"open","Body":"Previously the support for `[ThreadStatic]` was incomplete.  This change adds some more tests (the last 3 of which fail prior to these changes).  Have left it WIP as you'll notice that I've had to expose `TypeManagerIndirectionNode ` in `NodeFactory` which I suspect is not correct?  Fixes #6733 - I've included a call to `Thread.Sleep` to test that the assert is no longer hit.  The sleep time is short so as not to affect the CI, but if its changed to something noticeable, like 10s, it can be seen to take effect.  \r\n\r\n@morganbr 's alignment changes are listed below in the commits, but they are not actually included.\r\n\r\nAlso included is a small comment typo.","Url":"https://github.com/dotnet/corert/pull/6769","RelatedDescription":"Open PR \"WIP: wasm: create threadstatics using GetThreadStaticBaseForType\" (#6769)"},{"Id":"395958717","IsPullRequest":true,"CreatedAt":"2019-01-04T16:51:29","Actor":"Dotnet-GitSync-Bot","Number":"6768","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6768","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#6768)"},{"Id":"395842894","IsPullRequest":true,"CreatedAt":"2019-01-04T15:06:59","Actor":"Dotnet-GitSync-Bot","Number":"6767","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar @EgorBo","Url":"https://github.com/dotnet/corert/pull/6767","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6767)"},{"Id":"395754306","IsPullRequest":true,"CreatedAt":"2019-01-04T08:13:40","Actor":"Dotnet-GitSync-Bot","Number":"6766","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/6766","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#6766)"},{"Id":"395733441","IsPullRequest":true,"CreatedAt":"2019-01-03T22:52:12","Actor":"Dotnet-GitSync-Bot","Number":"6765","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @stephentoub","Url":"https://github.com/dotnet/corert/pull/6765","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6765)"},{"Id":"395580496","IsPullRequest":true,"CreatedAt":"2019-01-03T21:35:20","Actor":"Dotnet-GitSync-Bot","Number":"6763","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/6763","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#6763)"},{"Id":"395705196","IsPullRequest":false,"CreatedAt":"2019-01-03T19:58:48","Actor":"yowl","Number":"6764","RawContent":null,"Title":"wasm: question about NodeFactory and TypeNonGCStaticsSymbol","State":"open","Body":"In the code here:\r\nhttps://github.com/dotnet/corert/blob/8df6c4084c6cb357a9cfe281f91f612ddfdb1f24/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L2947-L2955\r\nIt is doing some pointer arithmetic on the `TypeNonGCStaticsSymbol` and moving back 2 indices to find the `StaticClassConstructionContext`.  Where does this `-2` come from and what happens when the type has no non GC statics, but does have thread statics: how do you get to `StaticClassConstructionContext`?\r\n\r\nThis is in reference to trying to fix #6733 \r\n\r\nThanks.","Url":"https://github.com/dotnet/corert/issues/6764","RelatedDescription":"Open issue \"wasm: question about NodeFactory and TypeNonGCStaticsSymbol\" (#6764)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"397217147","IsPullRequest":false,"CreatedAt":"2019-01-09T05:26:51","Actor":"dsplaisted","Number":"2802","RawContent":null,"Title":"Set metadata on references coming from shared framework targeting pack to show them in solution explorer tree view","State":"open","Body":"See https://github.com/dotnet/project-system/issues/4444","Url":"https://github.com/dotnet/sdk/issues/2802","RelatedDescription":"Open issue \"Set metadata on references coming from shared framework targeting pack to show them in solution explorer tree view\" (#2802)"},{"Id":"397167762","IsPullRequest":true,"CreatedAt":"2019-01-09T04:22:42","Actor":"nguerrera","Number":"2801","RawContent":null,"Title":"Fix dogfood.sh","State":"closed","Body":"Various infrastructure changes or changes only to dogfood.ps1 have left `source eng\\dogfood.sh` broken...","Url":"https://github.com/dotnet/sdk/pull/2801","RelatedDescription":"Closed or merged PR \"Fix dogfood.sh\" (#2801)"},{"Id":"397081406","IsPullRequest":true,"CreatedAt":"2019-01-09T04:01:06","Actor":"nguerrera","Number":"2800","RawContent":null,"Title":"Separate copying of refs from preservation of compilation info","State":"closed","Body":"PreserveCompilationContext does two things today:\r\n\r\n1. Write compilation info to .deps\r\n2. Copy reference-only assemblies to build/publish refs/ folder\r\n\r\nAdd PreserveCompilationReferences to control (2) independently and default it to PreserveCompilationContext for backwards compatibility.\r\n\r\nFix #2122 \r\n\r\ncc @pranavkm @rynowak @eerhardt ","Url":"https://github.com/dotnet/sdk/pull/2800","RelatedDescription":"Closed or merged PR \"Separate copying of refs from preservation of compilation info\" (#2800)"},{"Id":"397029578","IsPullRequest":true,"CreatedAt":"2019-01-08T18:27:11","Actor":"nugetlurker","Number":"2799","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5754 into sdk","State":"open","Body":"Insert NuGet Build 5.0.0-preview1.5754 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/2799","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview1.5754 into sdk\" (#2799)"},{"Id":"397029560","IsPullRequest":true,"CreatedAt":"2019-01-08T18:27:08","Actor":"nugetlurker","Number":"2798","RawContent":null,"Title":"Insert NuGet Build 5.0.0-preview1.5754 into sdk","State":"open","Body":"Insert NuGet Build 5.0.0-preview1.5754 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/2798","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.0-preview1.5754 into sdk\" (#2798)"},{"Id":"396896917","IsPullRequest":true,"CreatedAt":"2019-01-08T17:39:14","Actor":"dotnet-maestro[bot]","Number":"2797","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19057.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19057.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2797","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2797)"},{"Id":"396751430","IsPullRequest":true,"CreatedAt":"2019-01-08T05:01:05","Actor":"livarcocc","Number":"2796","RawContent":null,"Title":"Add netstandard2.1 to the list of supported target frameworks.","State":"open","Body":"Fixes internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/761489","Url":"https://github.com/dotnet/sdk/pull/2796","RelatedDescription":"Open PR \"Add netstandard2.1 to the list of supported target frameworks.\" (#2796)"},{"Id":"396741517","IsPullRequest":false,"CreatedAt":"2019-01-08T03:57:42","Actor":"yaakov-h","Number":"2795","RawContent":null,"Title":"Incorrect assembly binding redirects generated in 3.0 preview","State":"open","Body":"See: https://github.com/KirillOsenkov/SourceBrowser/issues/108\r\n\r\nWhen building SourceBrowser with SDK v2.1.502, binding redirects for `Newtonsoft.Json` and `System.Collections.Immutable` are generated for versions `11.0.0.0` and `1.2.3.0` respectively.\r\n\r\nWhen building SourceBrowser with SDK v3.0.100-preview-009812 (as shipped with VS2019 Preview 1), binding redirects for `Newtonsoft.Json` and `System.Collections.Immutable` are generated for versions `9.0.0.0` and `1.2.1.0` respectively.\r\n\r\nThis appears to be a regression in the SDK.","Url":"https://github.com/dotnet/sdk/issues/2795","RelatedDescription":"Open issue \"Incorrect assembly binding redirects generated in 3.0 preview\" (#2795)"},{"Id":"396709121","IsPullRequest":false,"CreatedAt":"2019-01-08T00:57:39","Actor":"xen2","Number":"2794","RawContent":null,"Title":"runtime.json only works if PackageReference is directly referenced by project","State":"open","Body":"I have a a `netcoreapp2.1` app with a `PackageReference` (let's call it MyPackageA) that contains a `runtime.json`.\r\n\r\nIt seems that if I don't include this MyPackageA `PackageReference` explicitly in the final executable project, its `runtime.json` is not properly used to compute the deps.json file (and it can't find/load some of the .dll).\r\n\r\nWhat works:\r\n- Main executable project: `PackageReference` to MyPackageA in main executable project\r\n\r\nWhat doesn't work:\r\n- Main executable project: `PackageReference` that references MyPackageA transitively\r\n- Library1: `PackageReference` to MyPackageA + Main executable: ProjectReference to Library1\r\n\r\nThis problem doesn't happen with net461 (libraries are properly copied by Visual Studio in all situations).","Url":"https://github.com/dotnet/sdk/issues/2794","RelatedDescription":"Open issue \"runtime.json only works if PackageReference is directly referenced by project\" (#2794)"},{"Id":"396634759","IsPullRequest":false,"CreatedAt":"2019-01-07T20:19:51","Actor":"natemcmaster","Number":"2792","RawContent":null,"Title":"RuntimeFrameworkVersion for 3.0 apps","State":"open","Body":"Filing on behalf of @DamianEdwards @davidfowl \r\n\r\nIt appears the RuntimeFrameworkVersion property is no longer honored in netcoreapp3.0 projects. If our recollection is correct, the plan was to use this property so customers could define the versions used by FrameworkReference. \r\n\r\nOpen question: how to handle the difference between shared framework versions. After RTM, we should (in theory) always patch all in-box shared frameworks. But during per-release, however, these versions will rarely align. \r\n","Url":"https://github.com/dotnet/sdk/issues/2792","RelatedDescription":"Open issue \"RuntimeFrameworkVersion for 3.0 apps\" (#2792)"},{"Id":"396163554","IsPullRequest":true,"CreatedAt":"2019-01-07T18:08:25","Actor":"dotnet-maestro[bot]","Number":"2791","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19054.13\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19054.13\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19055.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19055.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19055.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19055.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2791","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2791)"},{"Id":"395802481","IsPullRequest":true,"CreatedAt":"2019-01-04T23:37:56","Actor":"johnbeisner","Number":"2788","RawContent":null,"Title":"Adding a performance test: Build Web Large 3.0","State":"closed","Body":"Adding a performance test: \"Build Web Large 3.0\" that targets netcoreapp3.0","Url":"https://github.com/dotnet/sdk/pull/2788","RelatedDescription":"Closed or merged PR \"Adding a performance test: Build Web Large 3.0\" (#2788)"},{"Id":"396675588","IsPullRequest":false,"CreatedAt":"2019-01-04T21:36:37","Actor":"Lohnegrim","Number":"2793","RawContent":null,"Title":"Result of chr() cannot be used as initial value of a Const in .Net Core 3 Preview 1","State":"open","Body":"Version: 3.0.100-preview-009812\r\nCommit: e3abf6e935\r\n\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 10.0.17763\r\nOS Platform: Windows\r\nRID: win10-x64\r\nBase Path: C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009812\\\r\n\r\nHost (useful for support):\r\nVersion: 3.0.0-preview-27122-01\r\nCommit: 00c5c8bc40\r\n\r\nHave you experienced this same bug with .NET Framework?: No\r\n\r\nIn the .Net Framework using VB.Net you can compile this Line:\r\n\r\n``` vb\r\nPrivate Const TabChar As Char = Chr(9)\r\n``` \r\n\r\nIn .Net Core 3 Preview 1 it failes with:\r\nerror BC30059: Constant expression is required.","Url":"https://github.com/dotnet/sdk/issues/2793","RelatedDescription":"Open issue \"Result of chr() cannot be used as initial value of a Const in .Net Core 3 Preview 1\" (#2793)"},{"Id":"396017030","IsPullRequest":false,"CreatedAt":"2019-01-04T18:08:35","Actor":"ryantrem","Number":"2790","RawContent":null,"Title":"Generalize multi-pass build support","State":"open","Body":"There are already several standard build \"dimensions,\" including Configuration, Platform, and TargetFramework. These dimensions and their potential values create a matrix of overall build configurations. I can specify which element of the matrix to use to configure the build by specifying values for each dimension (e.g. Debug|x86|net46). If I want to perform multiple build passes (multiple elements of the matrix), then I have a few options depending on the dimension(s) I want vary.\r\n\r\nFor TargetFramework, I can specify a set of TargetFramework**s** and the dotnet sdk targets will perform multiple build passes, one for each TargetFramework specified.\r\n\r\nFor Configuration and Platform, I can use Visual Studio's Batch Build feature to select multiple Configurations and/or Platforms.\r\n\r\nFor my own custom \"dimension,\" my only real option is multiple MSBuild invocations from the command line, passing in values for my properties (and this might be a lot of invocations depending on the number of dimensions and number of potential values per dimension).\r\n\r\nIt would be great if the multi-pass build support for TargetFrameworks was generalized into a mechanism that supported multi-pass builds across arbitrary build dimensions. I could imagine this perhaps being expressed as follows:\r\n\r\n```xml\r\n<!-- Define each build dimension. -->\r\n<ItemGroup>\r\n  <BuildDimension Condition=\"'$(Configuration)' == ''\" Include=\"Configuration\">\r\n    <Values>Debug;Release</Values>\r\n  </BuildDimension>\r\n  <BuildDimension Condition=\"'$(Platform)' == ''\" Include=\"Platform\">\r\n    <Values>x86;x64;arm;AnyCPU</Values>\r\n  </BuildDimension>\r\n  <BuildDimension Condition=\"'$(TargetFramework)' == ''\" Include=\"TargetFramework\">\r\n    <Values>net46;netstandard2.0;uap10.0.14393</Values>\r\n  </BuildDefinition>\r\n</ItemGroup>\r\n```\r\n\r\nThe idea would be that a specific value for a build dimension (e.g. Configuration=Debug) could be specified, otherwise multiple passes would be performed for that dimension. I could imagine this showing up in Visual Studio as dropdowns for each build dimension, similar to what we have today for Configuration and Platform. I would also imagine the default output path would be generated by simply combining the values of each dimension (e.g. Debug\\x86\\net46).\r\n\r\nUsually, a build configuration matrix is sparse, so I'd also want to be able to ignore certain elements of the matrix (don't build them). I could imagine this perhaps being expressed as follows:\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <!-- Allow an early out of the inner build loop, which is effectively allowing for a sparse build dimension matrix. -->\r\n  <BuildPassEnabled Condition=\"'$(Platform)' == 'arm' AND '$(TargetFramework)' != 'uap10.0.14393'\">false</BuildPassEnabled>\r\n</PropertyGroup>\r\n```\r\n\r\nGeneralized build dimensions and multi-pass builds are particularly useful when you need to define your own custom build dimensions. For example, when writing code to be consumed by Unity 3D, I have the concept of Unity Players (runtimes) (e.g. Windows Store, Android, iOS, etc.). Depending on the target Player, I might want to include different source files, define different conditional compilation symbols, etc. Further, I might want to define a \"compatibility graph\" in the same way TargetFramework does (e.g. netstandard2.0 is \"compatible with\" net471, so a net471 project can consume a netstandard2.0 project). Taking my Unity 3D example further, different Unity Players support different .NET runtimes. For example, iOS and Android are based on .NET Framework, while Windows Store is based on UWP .NET Core). So ideally I'd want to be able to have UnityIOS and UnityAndroid be \"compatible with\" UnityNetFramework (for example). I could imagine this perhaps being expressed as follows:\r\n\r\n### My common props that *define* the build dimension\r\n\r\n```xml\r\n<ItemGroup>\r\n  <BuildDimensionCompatibility Include=\"UnityEditor;UnityIOS;UnityAndroid\">\r\n    <CompatibleWith>UnityNetFramework</CompatibleWith>\r\n  </BuildDimensionCompatibility>\r\n</ItemGroup>\r\n```\r\n\r\n### Project 1\r\n\r\n```xml\r\n<ItemGroup>\r\n  <BuildDimension Condition=\"'$(UnityPlayer)' == ''\" Include=\"UnityPlayer\">\r\n    <Values>UnityUAP;UnityNetFramework</Values>\r\n  </BuildDimension>\r\n</ItemGroup>\r\n```\r\n\r\n### Project 2\r\n\r\n```xml\r\n<ItemGroup>\r\n  <BuildDimension Condition=\"'$(UnityPlayer)' == ''\" Include=\"UnityPlayer\">\r\n    <Values>UnityUAP;UnityEditor;UnityIOS;UnityAndroid</Values>\r\n  </BuildDimension>\r\n  <!-- This ProjectReference works because UnityEditor/UnityIOS/UnityAndroid are compatible with UnityNetFramework in the same way that net471 and netcore5 are compatible with netstandard2.0 -->\r\n  <ProjectReference Include=\"Project1.csproj\" />\r\n</ItemGroup>\r\n```\r\n\r\nFinally, for all this to be effective, I'd want the same custom build dimension support and compatibility graph support to be part of NuGet (in terms of having build results from multiple build passes in the package and having the right assemblies/content being consumed by the consuming project).\r\n\r\nI feel like a solution like this would drastically simplify scenarios where custom \"build dimensions\" are needed, which in my experience is fairly common, and almost always results in some hacky solution that only one or two people on the team understand.","Url":"https://github.com/dotnet/sdk/issues/2790","RelatedDescription":"Open issue \"Generalize multi-pass build support\" (#2790)"},{"Id":"395918022","IsPullRequest":true,"CreatedAt":"2019-01-04T16:40:57","Actor":"dotnet-maestro[bot]","Number":"2789","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19053.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19053.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2789","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2789)"},{"Id":"395727980","IsPullRequest":false,"CreatedAt":"2019-01-03T21:19:05","Actor":"kouvel","Number":"2787","RawContent":null,"Title":"Changes to runtime config options in .csproj are not reflected in .runtimeconfig.json on partial build","State":"open","Body":"Repro:\r\n\r\n```\r\ndotnet new console\r\ndotnet build -c Release\r\n```\r\n\r\nThe `.runtimeconfig.json` file in `bin` has the following contents:\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.NETCore.App\",\r\n      \"version\": \"3.0.0-preview-27218-01\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nEdit the `.csproj` file and add the following into the `PropertyGroup` element:\r\n```xml\r\n<TieredCompilation>false</TieredCompilation>\r\n```\r\n\r\n```\r\ndotnet build -c Release\r\n```\r\n\r\nThe `.runtimeconfig.json` file in `bin` has the same contents as above.\r\n\r\nExpected contents:\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"tfm\": \"netcoreapp3.0\",\r\n    \"framework\": {\r\n      \"name\": \"Microsoft.NETCore.App\",\r\n      \"version\": \"3.0.0-preview-27218-01\"\r\n    },\r\n    \"configProperties\": {\r\n      \"System.Runtime.TieredCompilation\": false\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWorkaround is to delete `bin` and `obj` folders after updating the `.csproj` and before building. The same issue exists the other way around, if the runtime config option is removed from the `.csproj`, the `.runtimeconfig.json` is not updated until a clean build.\r\n\r\nMy versions:\r\n```\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-009825\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.NETCore.App 3.0.0-preview-27206-02\r\n```","Url":"https://github.com/dotnet/sdk/issues/2787","RelatedDescription":"Open issue \"Changes to runtime config options in .csproj are not reflected in .runtimeconfig.json on partial build\" (#2787)"},{"Id":"395660681","IsPullRequest":true,"CreatedAt":"2019-01-03T18:35:31","Actor":"nguerrera","Number":"2786","RawContent":null,"Title":"Use correct property name for additional test runner arguments","State":"closed","Body":"React to https://github.com/dotnet/arcade/pull/1438\r\n\r\nFix #2712 \r\n\r\nWe were running with too many levels of paralellism, spawning too many processes, and slowing down test runs while wasting resources.","Url":"https://github.com/dotnet/sdk/pull/2786","RelatedDescription":"Closed or merged PR \"Use correct property name for additional test runner arguments\" (#2786)"},{"Id":"395658198","IsPullRequest":true,"CreatedAt":"2019-01-03T18:27:59","Actor":"nguerrera","Number":"2785","RawContent":null,"Title":"Remove NETStandard.Library version override","State":"closed","Body":"This caused downgrade errors while trying to manually build projects in the .perftestsource repo.\r\n\r\nWe should make sure to prevent the perf test projects from picking up the outer repository customization, and I believe @johnbeisner is looking at that.\r\n\r\nNevertheless, I see no reason for this override remaining, so taking the opportunity to clean it up. We don't even have any non-test assets in this repo targeting netstandard.","Url":"https://github.com/dotnet/sdk/pull/2785","RelatedDescription":"Closed or merged PR \"Remove NETStandard.Library version override\" (#2785)"},{"Id":"395652187","IsPullRequest":false,"CreatedAt":"2019-01-03T17:15:24","Actor":"DouglasDRF","Number":"2784","RawContent":null,"Title":"Why IList does not have the method signature RemoveAll?","State":"closed","Body":"```\r\npublic class List : ICollection, IEnumerable, IEnumerable, IList, IReadOnlyCollection, IReadOnlyList, ICollection, IList\r\n\r\npublic interface IList : ICollection, IEnumerable, IEnumerable\r\n```\r\n\r\nIList only have Remove() and RemoveAt()... Wouldn't be more interesting put the RemoveAll() method signature in IList for access it?? Neither ICollection or IEnumerable has these methods signatures. Because if I want to remove all items under a specific condition through IList interface I have to transform to a List first\r\n\r\n```\r\n// Enderecos is IList type\r\n       var listEnderecos = clienteModel.Enderecos.ToList();\r\n            listEnderecos.RemoveAll(p => p == null);\r\n            clienteModel.Enderecos = listEnderecos;\r\n```\r\n\r\nWith RemoveAll() method in IList\r\n\r\n```\r\n// Enderecos is IList type\r\n       clienteModel.Enderecos.RemoveAll(p => p == null);\r\n```","Url":"https://github.com/dotnet/sdk/issues/2784","RelatedDescription":"Closed issue \"Why IList does not have the method signature RemoveAll?\" (#2784)"},{"Id":"395565090","IsPullRequest":true,"CreatedAt":"2019-01-03T16:25:31","Actor":"dotnet-maestro[bot]","Number":"2783","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19052.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19052.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2783","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2783)"},{"Id":"395081205","IsPullRequest":true,"CreatedAt":"2019-01-02T15:59:00","Actor":"dotnet-maestro[bot]","Number":"2782","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18631.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18631.2\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19051.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19051.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2782","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2782)"},{"Id":"394828587","IsPullRequest":true,"CreatedAt":"2018-12-31T18:32:45","Actor":"jp2masa","Number":"2778","RawContent":null,"Title":"Added back the PublishDepsFilePath property","State":"closed","Body":"Fixes #2777\r\n\r\n## Changes\r\n- Added back the PublishDepsFilePath property.","Url":"https://github.com/dotnet/sdk/pull/2778","RelatedDescription":"Closed or merged PR \"Added back the PublishDepsFilePath property\" (#2778)"},{"Id":"394828220","IsPullRequest":false,"CreatedAt":"2018-12-31T18:32:45","Actor":"jp2masa","Number":"2777","RawContent":null,"Title":".NET Global Tools publish broken","State":"closed","Body":".NET Global Tools publish uses the `PublishDepsFilePath` property to include the deps file, but it no longer exists (.NET Core 3.0 Preview 1).\r\n\r\nThis bug was introduced here: https://github.com/dotnet/sdk/commit/1936ebd7307cebd6c5d1d8d699b9844f73b8fb2c#diff-7dc833d02f198e5a9f0ab88e229db18aL520.\r\n\r\nI believe that the property shouldn't have been removed.","Url":"https://github.com/dotnet/sdk/issues/2777","RelatedDescription":"Closed issue \".NET Global Tools publish broken\" (#2777)"},{"Id":"394977369","IsPullRequest":true,"CreatedAt":"2018-12-31T18:30:23","Actor":"dotnet-maestro[bot]","Number":"2781","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18630.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18630.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2781","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2781)"},{"Id":"394928884","IsPullRequest":false,"CreatedAt":"2018-12-31T04:50:13","Actor":"MattLavalleeMA","Number":"2780","RawContent":null,"Title":"NuGetFallbackFolder resolving File Version conflicts for same Package Versions","State":"open","Body":"I have a .NET Core 2.2 solution (migrated from 2.1) with eight projects: two AspNetCore projects, five class libraries, and a unit test project.  Recently, I started receiving version resolution \"messages\" for _HandlePackageFileConflicts like this:\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\2.2.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ConflictResolution.targets(41,5): message NETSDK1041: Encountered conflict between 'Platform:System.Security.Principal.Windows.dll' and 'Runtime:C:\\Users\\mlavallee\\.nuget\\packages\\system.security.principal.windows\\4.5.1\\lib\\netstandard2.0\\System.Security.Principal.Windows.dll'.  NETSDK1034: Choosing 'Platform:System.Security.Principal.Windows.dll' because file version '4.6.27110.4' is greater than '4.6.26919.2'.\r\n\r\nand\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\2.2.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ConflictResolution.targets(41,5): message NETSDK1041: Encountered conflict between 'Platform:System.Security.AccessControl.dll' and 'Runtime:C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.accesscontrol\\4.5.0\\lib\\netstandard2.0\\System.Security.AccessControl.dll'.  NETSDK1034: Choosing 'Platform:System.Security.AccessControl.dll' because file version '4.6.27110.4' is greater than '4.6.26515.6'.\r\n\r\nWe've all had to deal with binding _package version_ conflicts before, but in this case it seems to be at the _file version_ level, and with references that are included/embedded in the .NET Core 2.2 SDK itself.  Looking at the manifest file:\r\n`C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.2.0\\build\\netcoreapp2.2\\Microsoft.NETCore.App.PlatformManifest.txt`\r\n>System.Security.Principal.Windows.dll|Microsoft.NETCore.App|4.1.1.1|4.6.27110.4\r\n>System.Security.AccessControl.dll|Microsoft.NETCore.App|4.1.1.0|4.6.27110.4\r\n\r\nHowever, the newest packages on NuGet have the file versions noted in the conflicts above and are from much older build sources (9/18/2018 vs. 12/6/2018).  So, a few questions from this:\r\n\r\n1. Why is the SDK embedded reference file newer than what's available on NuGet?\r\n2. Why does the NuGetFallbackFolder have earlier versions than the SDK?\r\n3. Why are the file versions for the same package versions different?\r\n4. What's the purpose of the NuGetFallbackFolder if I also have a package cache? (This seems like pure bloat)\r\n\r\nAlthough these aren't raised as build warnings, just _messages_, it seems like I can't have confidence in the reference code being consistent between builds, so either they should be warnings or there should be a way of resolving them.\r\n\r\nThanks,\r\nMatt","Url":"https://github.com/dotnet/sdk/issues/2780","RelatedDescription":"Open issue \"NuGetFallbackFolder resolving File Version conflicts for same Package Versions\" (#2780)"},{"Id":"394887253","IsPullRequest":false,"CreatedAt":"2018-12-30T17:13:08","Actor":"livarcocc","Number":"2779","RawContent":null,"Title":"\"error NETSDK1007: Cannot find project info\" when a csproj with a certain name depends on another in the same directory.","State":"open","Body":"_From @davedissian on December 29, 2018 14:42_\n\nIf I have two csproj's within the same directory, where csproj (1) depends on csproj (2), I get a NETSDK1007 error if the dependency (2) has a name which is lexicographically greater than the root project (1). For example, if I have `Worker.csproj` which depends on `Library.csproj`, it compiles fine. However, If I have `AWorker.csproj` which depends on `Library.csproj`, I get an `NETSDK1007` error.\r\n\r\nI guess the cause might have something to do with dependency resolution only being a single pass process (rather than being a two pass process that stores projects in a lookup table before resolving them).\r\n\r\n### Steps to reproduce\r\n\r\nI have attached a zip file with 3 solutions: [NETSDK1007-issue.zip](https://github.com/Microsoft/msbuild/files/2716463/NETSDK1007-issue.zip)\r\n\r\n* Broken - A solution containing projects `AWorker.csproj` and `Library.csproj`\r\n* Working - A solution containing projects `Worker.csproj` and `Library.csproj`\r\n* WorkingSeparateDir - A solution containing projects `AWorker.csproj` and `Library\\Library.csproj`\r\n\r\nIf I try and run `dotnet build Worker.sln` inside `Broken`, I get the following output:\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for /Users/david/Projects/DotnetCsharpBug/Broken/AWorker.csproj...\r\n  Generating MSBuild file /Users/david/Projects/DotnetCsharpBug/Broken/obj/AWorker.csproj.nuget.g.props.\r\n  Generating MSBuild file /Users/david/Projects/DotnetCsharpBug/Broken/obj/AWorker.csproj.nuget.g.targets.\r\n  Restore completed in 244.37 ms for /Users/david/Projects/DotnetCsharpBug/Broken/AWorker.csproj.\r\n/usr/local/share/dotnet/sdk/2.2.100/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error NETSDK1007: Cannot find project info for '/Users/david/Projects/DotnetCsharpBug/Broken/Library.csproj'. This can indicate a missing project reference. [/Users/david/Projects/DotnetCsharpBug/Broken/Library.csproj]\r\n\r\nBuild FAILED.\r\n\r\n/usr/local/share/dotnet/sdk/2.2.100/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(129,5): error NETSDK1007: Cannot find project info for '/Users/david/Projects/DotnetCsharpBug/Broken/Library.csproj'. This can indicate a missing project reference. [/Users/david/Projects/DotnetCsharpBug/Broken/Library.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:01.23\r\n```\r\n\r\nThe project files look like this:\r\n\r\n`AWorker.csproj`:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"Library.csproj\" />\r\n    <Compile Include=\"Class1.cs\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n`Library.csproj`:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Include=\"Library\\Class1.cs\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nIt compiles successfully.\r\n\r\n### Environment data\r\n```\r\n$ dotnet msbuild -version\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.9.20.62856\r\n```\r\n\r\nOS info:\r\nmacOS Mojave 10.14.2\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc): \r\n```\r\n$ dotnet --version\r\n2.2.100\r\n```\r\n\n\n_Copied from original issue: Microsoft/msbuild#4035_","Url":"https://github.com/dotnet/sdk/issues/2779","RelatedDescription":"Open issue \"\"error NETSDK1007: Cannot find project info\" when a csproj with a certain name depends on another in the same directory.\" (#2779)"},{"Id":"394794079","IsPullRequest":true,"CreatedAt":"2018-12-30T17:01:06","Actor":"dotnet-maestro[bot]","Number":"2776","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18627.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18627.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18629.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18629.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2776","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2776)"},{"Id":"394389141","IsPullRequest":true,"CreatedAt":"2018-12-27T18:13:10","Actor":"dotnet-maestro[bot]","Number":"2775","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18621.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18621.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2775","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2775)"},{"Id":"394245543","IsPullRequest":true,"CreatedAt":"2018-12-26T21:37:44","Actor":"dsplaisted","Number":"2774","RawContent":null,"Title":"Resolve assets from targeting pack","State":"open","Body":"First steps for dotnet/cli#10085\r\n\r\n- References \"Targeting Packs\" with ExcludeAssets=\"all\", and resolves assets from the targeting packs directly (instead of going through the assets file)\r\n- References \"Runtime Packs\" if necessary to support self-contained publish (these still go through the assets file for now)\r\n- For now, hard-codes a `KnownFrameworkReference` to Microsoft.NETCore.App, and includes the RID graph directly.  These will need to be added to core-sdk\r\n- The list of runtime packs for each `KnownFrameworkReference`, and the RIDs available, will also need to be supplied by core-sdk","Url":"https://github.com/dotnet/sdk/pull/2774","RelatedDescription":"Open PR \"Resolve assets from targeting pack\" (#2774)"},{"Id":"394162568","IsPullRequest":false,"CreatedAt":"2018-12-26T18:15:36","Actor":"1scrooge","Number":"2773","RawContent":null,"Title":"dotnet`s error with credentials for nuget feed","State":"closed","Body":"After updated dotnet up to 2.1.502 and uper I have an error with credentials for nuget feed when I using apikey\r\n```\r\n/usr/share/dotnet/sdk/2.1.502/NuGet.targets(499,5): error : Unable to parse config file because: Credentials item must have username and password. Path: '/home/user/.nuget/NuGet/NuGet.Config'\r\n```\r\nmy NuGet.Config:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n   <packageSources>\r\n        <add key=\"name_feed\" value=\"http://url_feed/nuget\" />\r\n    </packageSources>\r\n    <packageSourceCredentials>\r\n        <name_feed>\r\n           <apikeys>\r\n             <add key=\"http://url_feed/nuget\" value=\"qwd32dqwd231vdas13\" />\r\n           </apikeys>\r\n        </name_feed>\r\n    </packageSourceCredentials>\r\n</configuration>\r\n```\r\non 2.1.403 version works fine\r\nCould you fix it?","Url":"https://github.com/dotnet/sdk/issues/2773","RelatedDescription":"Closed issue \"dotnet`s error with credentials for nuget feed\" (#2773)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Compression.ZipFile | 4.0.0, 4.0.1, 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Net.Http | 4.3.0, 4.3.1, 4.3.2, 4.3.3, 4.3.4 | 4.3.5\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-01-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalMlaik","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1082818321353912320","CreatedAt":"2019-01-09T01:56:20+00:00","UserScreenname":"dotnet","Text":"Oopsie. Looks like @WhildyBeast executed\n\n$ dotnet clean https://t.co/gCte14spFY","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":16,"FavoriteCount":4,"RawContent":null},{"Id":"1082768839874535424","CreatedAt":"2019-01-08T22:39:42+00:00","UserScreenname":"dotnet","Text":"We just blogged about the .NET Framework January 2019 Security and Quality Rollup. https://t.co/XW8wiS0AIV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":25,"FavoriteCount":13,"RawContent":null},{"Id":"1082649436851982337","CreatedAt":"2019-01-08T14:45:15+00:00","UserScreenname":"dotnet","Text":"In 15 minutes, join our @csharpfritz as he explores the @elgatogaming StreamDeck's new SDK and how to interact with… https://t.co/H2oVdzFOgr","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":39,"FavoriteCount":8,"RawContent":null},{"Id":"1081303837263069184","CreatedAt":"2019-01-04T21:38:19+00:00","UserScreenname":"dotnet","Text":"“Code is, in our not-so-humble opinion, the most inexhaustible source of magic.” https://t.co/HtYQeRiB8t","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":142,"FavoriteCount":30,"RawContent":null},{"Id":"1081214419672096768","CreatedAt":"2019-01-04T15:43:00+00:00","UserScreenname":"dotnet","Text":"In this On .NET episode we learn about XAML Islands and how to integrate UI components from the Universal Windows P… https://t.co/JMXJ3aoBsM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2019-01-09T05:30:48.6138568Z","RunDurationInMilliseconds":23119}