{"Data":{"GitHub":{"Issues":[{"Id":"391525280","IsPullRequest":true,"CreatedAt":"2018-12-17T01:03:30","Actor":"Ivanidzo4ka","Number":"1889","RawContent":null,"Title":"Bruteforce implementation for KNN.","State":"open","Body":"All API plumbing for KNN and their dumb implementation.\r\n\r\n- [ ] Add K-D trees.\r\n\r\n- [ ] Add Ball trees.\r\n\r\n- [ ] Figure out what to do during scoring if nothing in radius. (for radius search instead of K neighbors search)","Url":"https://github.com/dotnet/machinelearning/pull/1889","RelatedDescription":"Open PR \"Bruteforce implementation for KNN.\" (#1889)"},{"Id":"391519677","IsPullRequest":true,"CreatedAt":"2018-12-17T00:04:22","Actor":"dhilmathy","Number":"1888","RawContent":null,"Title":"Updated with correct tags for image reference","State":"open","Body":"Updated with correct tags for image. `<a>` to `<image>`\r\n\r\nFixes #1783\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1888","RelatedDescription":"Open PR \"Updated with correct tags for image reference\" (#1888)"},{"Id":"391516099","IsPullRequest":true,"CreatedAt":"2018-12-16T23:18:10","Actor":"wschin","Number":"1887","RawContent":null,"Title":"Remove ISchema in FeatureContributionCalculationTransform","State":"open","Body":"As title. It's a part of #1501. This change is not difficult because the output schema only contains one column, which is per feature contribution.","Url":"https://github.com/dotnet/machinelearning/pull/1887","RelatedDescription":"Open PR \"Remove ISchema in FeatureContributionCalculationTransform\" (#1887)"},{"Id":"391422629","IsPullRequest":false,"CreatedAt":"2018-12-16T00:09:13","Actor":"mihaar","Number":"1886","RawContent":null,"Title":"ML.NET and Unity","State":"open","Body":"### System information\r\n\r\n- **win 10**:\r\n- **.NET Version (  .NET Global Assembly Cache Utility. Version 4.0.30319.0)**: \r\n\r\n### Issue\r\nUnity editor reports two errors:\r\n1.Assembly 'Library/ScriptAssemblies/Assembly-CSharp.dll' will not be loaded due to errors:\r\nReference has errors 'MLAICore'.\r\n2.Assembly 'Assets/Plugins/MLAICore.dll' will not be loaded due to errors:\r\nUnable to resolve reference 'Microsoft.ML.Data'. Is the assembly missing or incompatible with the current platform?\r\n\r\n- **What did you do?**\r\nI have made an API that loads model.zip file and predicts a nr given some input values(It is almost exactly as your taxi fare example). Through commenting out lines and rebuilding my api I deduced that  if I put this code: MLContext ml = new MLContext(seed: 0); into any of my api methods I get this error when importing the api into unity.\r\n- **What happened?**\r\n It all works great but when I import this api into Unity, the unity editor returns an error.\r\n- **What did you expect?**\r\nSince unity has now support for .net 2.0 apis and frameworks 4+ I was hoping ML.Net would work in that environment. Any sugestions would be most welcom.\r\n[sampleUnityProject.zip](https://github.com/dotnet/machinelearning/files/2683139/sampleUnityProject.zip)\r\n[exampleDotnetApiProject.zip](https://github.com/dotnet/machinelearning/files/2683142/exampleDotnetApiProject.zip)\r\n[https://stackoverflow.com/questions/53781312/ml-net-in-unity/53781387#comment94434358_53781312](url)\r\n\r\n\r\n### Source code / logs\r\n`using System;\r\nusing Microsoft.ML;\r\nnamespace MLAICore\r\n{\r\n    public class Class1\r\n    {\r\n        public static string SayHello()\r\n        {\r\n            MLContext ml = new MLContext(seed: 0);//if I comment out this line code compiles in unity\r\n            return \"hello from core ML\";                    //and i get this response, if I live it as is =>err\r\n        }\r\n    }\r\n}`\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1886","RelatedDescription":"Open issue \"ML.NET and Unity\" (#1886)"},{"Id":"391296306","IsPullRequest":true,"CreatedAt":"2018-12-14T22:10:08","Actor":"Ivanidzo4ka","Number":"1885","RawContent":null,"Title":"Provide seed parameter for TrainTest routine","State":"open","Body":"Fixes https://github.com/dotnet/machinelearning/issues/1635","Url":"https://github.com/dotnet/machinelearning/pull/1885","RelatedDescription":"Open PR \"Provide seed parameter for TrainTest routine\" (#1885)"},{"Id":"391284742","IsPullRequest":true,"CreatedAt":"2018-12-14T21:25:18","Actor":"sfilipi","Number":"1884","RawContent":null,"Title":"[WIP PR won't merge] RE-creating the entry point test in the new API format, because it is…","State":"open","Body":"This PR has is being used to investigate the failure of the test described in: #1726\r\n\r\nI will not merge it to master, unless i convert this to fixing the issue encountered.","Url":"https://github.com/dotnet/machinelearning/pull/1884","RelatedDescription":"Open PR \"[WIP PR won't merge] RE-creating the entry point test in the new API format, because it is…\" (#1884)"},{"Id":"390500063","IsPullRequest":true,"CreatedAt":"2018-12-14T19:27:37","Actor":"jignparm","Number":"1869","RawContent":null,"Title":"Updated fix for models with negative dimensions","State":"closed","Body":"Updated the onnxtransform to handle negative dimensions correctly.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1869","RelatedDescription":"Closed or merged PR \"Updated fix for models with negative dimensions\" (#1869)"},{"Id":"391216800","IsPullRequest":true,"CreatedAt":"2018-12-14T19:10:36","Actor":"Anipik","Number":"1883","RawContent":null,"Title":"Loading the label for binary classfication as BL instead of R4","State":"closed","Body":"Kmeans Benchmark was broken because Binary classfiers expected the label column to be binary but we were loading it as R4\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1883","RelatedDescription":"Closed or merged PR \"Loading the label for binary classfication as BL instead of R4\" (#1883)"},{"Id":"391215774","IsPullRequest":false,"CreatedAt":"2018-12-14T18:19:49","Actor":"Anipik","Number":"1882","RawContent":null,"Title":"Regression due to removal of autoCache","State":"open","Body":"The Auto-cache was removed in https://github.com/dotnet/machinelearning/commit/435a63b9db7464ec0400eb4be8ecc362f0d33dcc\r\n\r\nI added new benchmark https://github.com/dotnet/machinelearning/pull/1855\r\nBefore the change the time taken by this benchmark was 2.8sec (after converting to api version and making label as key instead of R4)\r\n\r\nAfter the removal of the cache The time went upto 10s. But after the adding the cache check point me and @wschin was able to reduce it to 3.8s which is still regressed from 2.8s.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1882","RelatedDescription":"Open issue \"Regression due to removal of autoCache\" (#1882)"},{"Id":"390905670","IsPullRequest":true,"CreatedAt":"2018-12-14T18:18:00","Actor":"Ivanidzo4ka","Number":"1875","RawContent":null,"Title":"Support R4 label for binary trainers","State":"closed","Body":"fix #1874 ","Url":"https://github.com/dotnet/machinelearning/pull/1875","RelatedDescription":"Closed or merged PR \"Support R4 label for binary trainers\" (#1875)"},{"Id":"390904625","IsPullRequest":false,"CreatedAt":"2018-12-14T18:17:40","Actor":"Ivanidzo4ka","Number":"1874","RawContent":null,"Title":"Our binary learners estimators work only on top of boolean label","State":"closed","Body":"https://github.com/dotnet/machinelearning/blob/dfe9f3ad36cf382516276ad902a5f89a5f21c7e7/test/Microsoft.ML.Benchmarks/KMeansAndLogisticRegressionBench.cs\r\nFail currently because R4 is not supported.","Url":"https://github.com/dotnet/machinelearning/issues/1874","RelatedDescription":"Closed issue \"Our binary learners estimators work only on top of boolean label\" (#1874)"},{"Id":"391186727","IsPullRequest":false,"CreatedAt":"2018-12-14T16:48:43","Actor":"mgolois","Number":"1881","RawContent":null,"Title":"Multi classification - Probability","State":"open","Body":"Hello,\r\nI have an application that use using ml.net multiclassification trainer to predict a category. However, it seems as though we remove the TryGetScoreLabelNames() method from the library. Basically, the application would like to output as well how confident (in percentage) is the predicted label. How can I achieve that in ML.NET 0.8?","Url":"https://github.com/dotnet/machinelearning/issues/1881","RelatedDescription":"Open issue \"Multi classification - Probability\" (#1881)"},{"Id":"391124866","IsPullRequest":false,"CreatedAt":"2018-12-14T14:07:14","Actor":"turowicz","Number":"1880","RawContent":null,"Title":"GPU-powered KNN","State":"open","Body":"I'm aware that there is an issue already #1712, I'm just looking for guidance. I've migrated the dlib based face recognition to a c# project using DlibDotNet project. The final missing piece is a fast way of processing 1000s of candidates for a closest match.\r\n\r\nCan anyone point me in the right direction?","Url":"https://github.com/dotnet/machinelearning/issues/1880","RelatedDescription":"Open issue \"GPU-powered KNN\" (#1880)"},{"Id":"391010826","IsPullRequest":true,"CreatedAt":"2018-12-14T08:23:45","Actor":"wschin","Number":"1879","RawContent":null,"Title":"Bindings in ChooseColumnsByIndexTransform not ISchema","State":"open","Body":"This PR is a part of #1501. We refactorize the `Binding` in `ChooseColumnsByIndexTransform` by making it not an `ISchema` but still maintaining necessary functionalities for connecting input and output. For the functionalities remained, please see the non-private member functions of `Bindings`. Some comments are added for a better readability.","Url":"https://github.com/dotnet/machinelearning/pull/1879","RelatedDescription":"Open PR \"Bindings in ChooseColumnsByIndexTransform not ISchema\" (#1879)"},{"Id":"390916542","IsPullRequest":true,"CreatedAt":"2018-12-14T00:23:35","Actor":"sfilipi","Number":"1878","RawContent":null,"Title":"[WIP] Schema based text loader","State":"open","Body":"Initial work to address #561. \r\n\r\nIt moves the current reflection-based logic outside of the legacy project, into the TextLoader catalog, creating an API for it. \r\nDecouples the LoadColumn and Column attributes.\r\n\r\nReading the description of both #561 and #1515, i prototyped around having more attribute parameters for the LoadColumn attribute, to get closed to the TextLoader.Range. \r\nIn the process, discovered that the members for the Attribute derived class cannot be of the more advanced types: like classes, nullable primitives (ints), tuples. \r\n\r\nI tried to eliminate the need for the existing Ordinal string by adding a` start/end string` (can't do int? ), `int[] columns` and `int[]inverseColumns` thinking they would suffice to more strongly type and support most of the  scenarios. And with them we can do the \r\n1-*  - auto end\r\n1-4 - defined ranges \r\n1, 2, 3 - defined columns, or inverse columns\r\n\r\nbut the scenario that we can't do is multiple ranges. i.e. 1-4, 5-6\r\n\r\nOne idea on how to convert that would be to provide an array where the users  would specify the indexes with the convention that they should be treated in groups; example: new [] { 1, 3, 5, 7} would translate to 1-3, 5-7 but that seems UGLY. \r\n\r\nAnother idea is to let the user specify multiple attributes for the range, and have the column name specified separately. Example:\r\n\r\n```\r\n [LoadColumn(start:\"0\", end: \"8\")]\r\n [LoadColumn(start:\"10\", end: \"18\")]\r\n [ColumnName( \"Features\")]\r\n public float SepalLength;\r\n```\r\n\r\nBut, IMHO, the range regex beats this too from the prospective of simplicity and ease of use. \r\n\r\n**So to summarize, i propose**:\r\n1-  We keep the old ordinal, as string, rename to range\r\n2-  We add a boolean `LoadInverseRange` to determine whether we add the columns defined in range or they should be the one not loaded (AllOther in TextLoader.Range)  \r\n\r\nThe construction of the TextLoader columns from the attributes is not final. I will complete after getting a final word here. \r\n\r\n@eerhardt, @TomFinley, @Zruty0, @CESARDELATORRE \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1878","RelatedDescription":"Open PR \"[WIP] Schema based text loader\" (#1878)"},{"Id":"390911635","IsPullRequest":true,"CreatedAt":"2018-12-14T00:00:20","Actor":"montebhoover","Number":"1877","RawContent":null,"Title":"Update instructions for adding to the EntryPoint catalog.","State":"open","Body":"Update instructions for adding to the EntryPoint catalog.","Url":"https://github.com/dotnet/machinelearning/pull/1877","RelatedDescription":"Open PR \"Update instructions for adding to the EntryPoint catalog.\" (#1877)"},{"Id":"390907360","IsPullRequest":true,"CreatedAt":"2018-12-13T23:41:30","Actor":"abgoswam","Number":"1876","RawContent":null,"Title":"Supervised Bin Normalizer","State":"open","Body":"Towards #819 \r\n\r\n- enabled  `NormalizerMode.SupervisedBinning` \r\n- added tests","Url":"https://github.com/dotnet/machinelearning/pull/1876","RelatedDescription":"Open PR \"Supervised Bin Normalizer\" (#1876)"},{"Id":"390896380","IsPullRequest":true,"CreatedAt":"2018-12-13T22:56:19","Actor":"wschin","Number":"1873","RawContent":null,"Title":"[WIP] Fix LightGBM and add test","State":"open","Body":"Fixes #1424. The first commit only creates some doc strings created when I felt very struggling when trying to reuse LightGBM facilities in ML.NET.","Url":"https://github.com/dotnet/machinelearning/pull/1873","RelatedDescription":"Open PR \"[WIP] Fix LightGBM and add test\" (#1873)"},{"Id":"390778296","IsPullRequest":true,"CreatedAt":"2018-12-13T21:45:11","Actor":"wschin","Number":"1872","RawContent":null,"Title":"Remove ISchema in FakeSchema","State":"closed","Body":"`FakeSchema` is not longer an `ISchema` and renamed to `FakeSchemaFactory`. It's a part of #1501.","Url":"https://github.com/dotnet/machinelearning/pull/1872","RelatedDescription":"Closed or merged PR \"Remove ISchema in FakeSchema\" (#1872)"},{"Id":"390543168","IsPullRequest":false,"CreatedAt":"2018-12-13T06:58:44","Actor":"sfilipi","Number":"1871","RawContent":null,"Title":"Follow up on Calibrator estimators","State":"open","Body":"There are a few follow ups to the work to create calibrator estimators:\r\n\r\n1- The public classes in Microsoft.ML.Core/Prediction/Calibrator.cs need to have descriptive XML documentation. \r\n2- The Calibrators need to be added as property to the BinaryClassificationContext\r\n3- Some of the Calibrators have a public constructor, that allows initializing the parameters. Does  it make sense to expose and  wire those parameters to the CalibratorEstimators, and set them from there? \r\nSo they will all look like [FixedPalttCalibratorEstimator](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Data/Prediction/CalibratorCatalog.cs#L319)\r\n\r\ncc @Zruty0 ","Url":"https://github.com/dotnet/machinelearning/issues/1871","RelatedDescription":"Open issue \"Follow up on Calibrator estimators\" (#1871)"},{"Id":"390514849","IsPullRequest":true,"CreatedAt":"2018-12-13T06:14:15","Actor":"TomFinley","Number":"1870","RawContent":null,"Title":"Much more core internalization (Phase 3)","State":"closed","Body":"Continuuation of #1626 , which as usual continues #1519.\r\n\r\nMost of `Core`, but not all, is now internalized. Most significant remainders include `RoleMappedSchema` and `MetadataUtils`. Some of these had fairly long reaching side effects (most notably, the internalization of `RoleMappedData`).","Url":"https://github.com/dotnet/machinelearning/pull/1870","RelatedDescription":"Closed or merged PR \"Much more core internalization (Phase 3)\" (#1870)"},{"Id":"389971813","IsPullRequest":true,"CreatedAt":"2018-12-12T20:42:12","Actor":"wschin","Number":"1863","RawContent":null,"Title":"Remove ISchema in MultiClassClassifierScorer.cs","State":"closed","Body":"This PR completely remove `ISchema` and its implementation used in `MultiClassClassifierScore`. It's a part of #1501.","Url":"https://github.com/dotnet/machinelearning/pull/1863","RelatedDescription":"Closed or merged PR \"Remove ISchema in MultiClassClassifierScorer.cs\" (#1863)"},{"Id":"390014437","IsPullRequest":true,"CreatedAt":"2018-12-12T20:07:28","Actor":"najeeb-kazmi","Number":"1865","RawContent":null,"Title":"Public API for Linear Predictors","State":"closed","Body":"Fixes #1702 \r\n\r\nRename linear predictors to `XyzModelParameters`, reduce public surface, add a sample, internalize and explicitly implement the following interfaces:\r\n- `IParameterMixer`\r\n- `IParameterMixer<TOutput>`\r\n- `IDistribution<out TResult>`\r\n- `IQuantileDistribution<TResult>`\r\n- `ISampleableDistribution<TResult>`\r\n\r\nI have not renamed the namespaces, after discussion with @TomFinley during the course of fixing #1699. We will revisit namespace rename at a later time.","Url":"https://github.com/dotnet/machinelearning/pull/1865","RelatedDescription":"Closed or merged PR \"Public API for Linear Predictors\" (#1865)"},{"Id":"390108775","IsPullRequest":true,"CreatedAt":"2018-12-12T08:09:22","Actor":"wschin","Number":"1868","RawContent":null,"Title":"Remove ISchema in ColumnBindingsBase","State":"open","Body":"This PR propose a naive way for removing `ISchema` in `ColumnBindingsBase`. It duplicates two utilities functions in the existing `ISchema`.\r\n\r\nDuplicated functions:\r\n```chsarp\r\n        private Delegate GetMetadataGetterDelegate<TValue>(int col, string kind, Delegate del)\r\n        {\r\n            // REVIEW: We are facing a choice here: cache 'value' and get rid of 'schema' reference altogether,\r\n            // or retain the reference but be more memory efficient. This code should not stick around for too long\r\n            // anyway, so let's not sweat too much, and opt for the latter.\r\n            ValueGetter<TValue> getter = (ref TValue value) => ((MetadataGetterDel<TValue>)del)(kind, col, ref value);\r\n            return getter;\r\n        }\r\n```\r\n```csharp\r\n        private Schema MakeOutputSchema()\r\n        {\r\n            var builder = new SchemaBuilder();\r\n            for (int i = 0; i < ColumnCount; ++i)\r\n            {\r\n                var meta = new MetadataBuilder();\r\n                foreach (var kvp in GetMetadataTypes(i))\r\n                {\r\n                    var getter = Utils.MarshalInvoke(GetMetadataGetterDelegate<int>, kvp.Value.RawType, i, kvp.Key);\r\n                    meta.Add(kvp.Key, kvp.Value, getter);\r\n                }\r\n                builder.AddColumn(GetColumnName(i), GetColumnType(i), meta.GetMetadata());\r\n            }\r\n            return builder.GetSchema();\r\n       }\r\n```","Url":"https://github.com/dotnet/machinelearning/pull/1868","RelatedDescription":"Open PR \"Remove ISchema in ColumnBindingsBase\" (#1868)"},{"Id":"390038519","IsPullRequest":false,"CreatedAt":"2018-12-12T02:29:13","Actor":"TomFinley","Number":"1867","RawContent":null,"Title":"Remove IRowCursorConsolidator, replace with utility method somewhere","State":"open","Body":"Consider this method:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/9067a1be58434999e37db7504d6b4e06eca8bbf4/src/Microsoft.ML.Core/Data/IDataView.cs#L114-L115\r\n\r\nThis returns an instance of the mysterious `IRowCursorConsolidator` interface. Why an interface? In retrospect I'm not quite sure.\r\n\r\nHaving an interface allows for different implementations, but we've never actually really exploited that capability. Nor, even if we were of such a mind to do so, would it be clear how we could. What would they even do differently? The semantics around `Batch` and whatnot are sufficiently clear and simple as to make only one implementation obvious, and even if we did have different implementations since the resulting cursors result most often from transformers (that is, components downstream from the set creation), they couldn't really do anything radically different anyway, since to do anything implementation specific on any cursor would be to break the composability at the core of what makes `IDataView` work at all.\r\n\r\nSo: get rid of this interface, and replace all usage of it with a simple utility method *somewhere* that can be called to do the reconciliation. It needn't even be a public utility method, but there may be reasons to do so.","Url":"https://github.com/dotnet/machinelearning/issues/1867","RelatedDescription":"Open issue \"Remove IRowCursorConsolidator, replace with utility method somewhere\" (#1867)"},{"Id":"389964474","IsPullRequest":true,"CreatedAt":"2018-12-12T01:07:50","Actor":"wschin","Number":"1862","RawContent":null,"Title":"Warn when a graph contains a null output","State":"closed","Body":"Fixes #315.","Url":"https://github.com/dotnet/machinelearning/pull/1862","RelatedDescription":"Closed or merged PR \"Warn when a graph contains a null output\" (#1862)"},{"Id":"390016903","IsPullRequest":false,"CreatedAt":"2018-12-12T00:44:01","Actor":"najeeb-kazmi","Number":"1866","RawContent":null,"Title":"Public Constructors for ModelParameters","State":"open","Body":"During the course of fixing #1698 and deriving work items (e.g. #1699, #1701, #1702), we created public constructors for the various `ModelParameter` objects (formerly `Predictor` objects).\r\n\r\n@sfilipi raised the question whether these should be public or be made internal as the only thing that can create `ModelParameters` (`Predictors`) is training a model. What use case are we supporting with this? When might a user want to create say a `LinearRegressionModelParameters` object with bias and weights instead of training a linear regression model?","Url":"https://github.com/dotnet/machinelearning/issues/1866","RelatedDescription":"Open issue \"Public Constructors for ModelParameters\" (#1866)"},{"Id":"389996200","IsPullRequest":true,"CreatedAt":"2018-12-12T00:06:16","Actor":"eerhardt","Number":"1864","RawContent":null,"Title":"Remove `As` methods on ColumnType.","State":"closed","Body":"Remove the following methods from ColumnType:\r\n\r\n- AsVector\r\n- AsKey\r\n- AsPrimitive\r\n\r\nMore PRs will be coming in this form. But this seemed like the lowest hanging fruit to start making incremental progress here.\r\n\r\nPart of the work necessary for #1860 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1864","RelatedDescription":"Closed or merged PR \"Remove `As` methods on ColumnType.\" (#1864)"},{"Id":"389942259","IsPullRequest":true,"CreatedAt":"2018-12-11T21:26:31","Actor":"wschin","Number":"1861","RawContent":null,"Title":"Remove some ISchema","State":"closed","Body":"This PR is one of the tasks required in #1501. Only simple type-renaming is conducted in this PR.","Url":"https://github.com/dotnet/machinelearning/pull/1861","RelatedDescription":"Closed or merged PR \"Remove some ISchema\" (#1861)"},{"Id":"389936673","IsPullRequest":false,"CreatedAt":"2018-12-11T20:19:22","Actor":"eerhardt","Number":"1860","RawContent":null,"Title":"Extract IDataView into its own assembly and NuGet package","State":"open","Body":"IDataView is a very flexible, efficient way of describing tabular data (columns and rows) in a read-only manner.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/master/docs/code/IDataViewDesignPrinciples.md\r\n\r\nAt its heart are 2 key concepts:\r\n- Schema (describing the columns)\r\n- Cursoring (how to read the rows of data)\r\n\r\nIt has other capabilities that I won’t enumerate here, the above link describes them in more detail.\r\n\r\nIDataView is very useful as an abstraction for tabular data that will allow users to pass data between two independent libraries.\r\n\r\nFor example, ML.NET is able to both consume and produce IDataView instances. Say there was a .NET library for Apache Arrow. If the Arrow .NET data type implements IDataView, the Apache Arrow data can be passed directly into ML.NET without having to copy it into a format that ML.NET consumes.\r\n\r\nAnother example is: say we had a visualization/graphing/plotting library in .NET that could consume data using IDataView. Then we could take data that was produced by ML.NET, or Apache Arrow, and feed it directly into the graphing library. There would be no need to copy, or change the shape of the data at all. And there is no need for this graphing library to know anything about ML.NET or Apache Arrow.\r\n\r\nIn my mind, we can use IDataView in a similar manner to what [OData](https://www.odata.org/) was promised to be: An exchange format which allows producers and consumers of data to communicate in a standardized way. (Although, OData has more capabilities such as filtering, sorting, updating data, etc which I am not proposing we add to IDataView. I was just using it as an analogy.)\r\n\r\n/cc @TomFinley @Zruty0 @markusweimer @danmosemsft @stephentoub ","Url":"https://github.com/dotnet/machinelearning/issues/1860","RelatedDescription":"Open issue \"Extract IDataView into its own assembly and NuGet package\" (#1860)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-17T05:31:07.4933727Z","RunDurationInMilliseconds":1415}