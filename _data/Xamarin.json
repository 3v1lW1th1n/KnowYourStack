{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin and .NET Developer Events in April","PublishedOn":"2019-04-01T19:05:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"User groups are getting together to learn about new, exciting releases and tooling to help jumpstart their next mobile development project. Network with your local community and you too could get all...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-april/","RawContent":null},{"Title":"GlideX For Fast Images on Android","PublishedOn":"2019-03-28T16:01:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Getting good image performance on Android has traditionally been a difficult task. Google has some documentation on the subject, which unfortunately mentions some complex topics: Cache and recycle...","Href":"https://blog.xamarin.com/glidex-fast-images-android/","RawContent":null},{"Title":"Introducing the Xamarin.iOS Interpreter","PublishedOn":"2019-03-26T16:41:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Historically iOS applications have had a number of limitations when running on a device, as Apple disallows the execution of dynamically generated code. Applications are compiled “Ahead of Time” (AOT)...","Href":"https://blog.xamarin.com/introducing-xamarin-ios-interpreter/","RawContent":null},{"Title":"Join the Xamarin Visual Challenge","PublishedOn":"2019-03-22T16:00:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past month, we have been running a low-key challenge to flex the new Xamarin.Forms 3.6 feature, Visual with Material Design. For more information about what Visual is and what you can do with...","Href":"https://blog.xamarin.com/join-the-xamarin-visual-challenge/","RawContent":null},{"Title":"Get Your Apps Ready for Apple’s New Watch Processor Architecture","PublishedOn":"2019-03-20T15:59:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last fall, Apple announced that new applications and updates would need to support the Apple Watch Series 4. &#8220;Starting March 2019, all new apps and app updates for iPhone, including universal...","Href":"https://blog.xamarin.com/apple-new-processor-architecture/","RawContent":null},{"Title":"Xamarin.Essentials Adds Detect Shake, Browser Customization, Color Helpers, and More!","PublishedOn":"2019-03-18T18:54:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Essentials are your ultimate open source library to access native features from a single cross-platform API. Since the first release, we have received awesome feedback on GitHub from...","Href":"https://blog.xamarin.com/xamarin-essentials-detect-shake-browser-customization/","RawContent":null},{"Title":"Introducing the New Xamarin Customer Showcase","PublishedOn":"2019-03-15T16:53:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Developers around the world use Xamarin every day to build beautiful native mobile apps with .NET. What better way to highlight the amazing work that these developers are doing than with a customer...","Href":"https://blog.xamarin.com/new-xamarin-customer-showcase/","RawContent":null},{"Title":"A Quick Update on Google Components for iOS and Android","PublishedOn":"2019-03-13T19:12:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the best parts about using Xamarin for mobile development is access to all of the platform APIs from C# bindings. Additionally, any native iOS or Android library can be consumed by a Xamarin...","Href":"https://blog.xamarin.com/update-google-components-ios-android/","RawContent":null},{"Title":"Enhanced Xamarin Development With MFractor","PublishedOn":"2019-03-12T15:58:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Matthew Robbins. Matthew is a Microsoft MVP and the founder of MFractor, incredible Xamarin tools for Visual Studio Mac. MFractor MFractor is a powerful...","Href":"https://blog.xamarin.com/enhanced-xamarin-development-with-mfractor/","RawContent":null},{"Title":"Podcast: POP! New docs, blogs, customer showcases, and Twitch streams!","PublishedOn":"2019-03-08T17:03:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. Podcast Highlights This month&#8217;s Visual...","Href":"https://blog.xamarin.com/podcast-pop-docs-blogs-showcases-twitch/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9357554439","Type":"PullRequestEvent","CreatedAt":"2019-04-01T22:29:18","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2914","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] random error in <Aapt2Link/>\" (#2914) at xamarin/xamarin-android","RelatedBody":"Context: http://build.devdiv.io/2547670\r\nContext: https://github.com/xamarin/xamarin-android/pull/2911#issuecomment-478739173\r\n\r\nWe have been occasionally hitting this on CI:\r\n\r\n    Xamarin.Android.Aapt2.targets(146,3): Value cannot be null.\r\n    Parameter name: path\r\n        at System.IO.File.Delete(String path)\r\n        at Xamarin.Android.Tasks.Aapt2Link.DoExecute()\r\n        at System.Threading.Tasks.Task.InnerInvoke()\r\n        at System.Threading.Tasks.Task.Execute() [E:\\A\\_work\\1214\\s\\bin\\TestRelease\\temp\\CompileBeforeUpgradingNuGet\\UnnamedProject.csproj]\r\n\r\nWhat I think is happening:\r\n\r\n* We call `tempFiles.Add()` during a `Parallel.ForEach`. Bad...\r\n* Instead of an exception happening during `Add()`, a `null` is\r\n  somehow added to the underlying array--which is corrupted.\r\n\r\nInstead I think we should add locking around all usage of this\r\n`tempFiles` member variable. I looked at `ConcurrentBag<T>`, but it\r\nseemed more appropriate to use a lock because of the `foreach` +\r\n`Clear()` calls."},{"Id":"9357385980","Type":"PullRequestEvent","CreatedAt":"2019-04-01T21:54:53","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2913","RelatedDescription":"Opened pull request \"[docs] MSBuild best-practices for in-memory caching\" (#2913) at xamarin/xamarin-android","RelatedBody":"I wanted to document how to use `RegisterTaskObject`, since it has\r\nbeen quite helpful for us to improve incremental build performance.\r\n\r\nI also recently figured out the undocumented `%MSBUILDNOINPROCNODE%`,\r\nwhich I thought would be helpful for my future self to refer back to."},{"Id":"9357063394","Type":"PullRequestEvent","CreatedAt":"2019-04-01T20:58:38","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2912","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] generate R.java like Android Studio\" (#2912) at xamarin/xamarin-android","RelatedBody":"Context: https://android.googlesource.com/platform/tools/base/+/refs/heads/master/build-system/builder/\r\nFixes: https://github.com/xamarin/xamarin-android/issues/2680\r\nFixes: https://github.com/xamarin/xamarin-android/issues/2836\r\n\r\nThe current behavior in the `_GenerateJavaDesignerForComponent`\r\nMSBuild target does the following:\r\n\r\n  * For each library that has Android resources... (in parallel)\r\n  * Run an instance of `aapt`/`aapt2` to generate the `R.java` file\r\n    for each library.\r\n  * This actually creates an `R.java` file that contains *every*\r\n    resource id for *every* library.  These libraries are not using\r\n    most of these ids.\r\n\r\nThis has a few problems:\r\n\r\n  * Issue #2680 notes a problem where a file is locked on Windows\r\n    during `_GenerateJavaDesignerForComponent`:\r\n\r\n        Xamarin.Android.Common.targets(1541,2): The process cannot access the file 'C:\\repos\\msalnet\\tests\\devapps\\XForms\\XForms.Android\\obj\\Debug\\90\\lp\\26\\jl\\manifest\\AndroidManifest.xml' because it is being used by another process.\r\n            at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n            at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n            at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n            at System.IO.StreamWriter.CreateFile(String path, Boolean append, Boolean checkHost)\r\n            at System.IO.StreamWriter..ctor(String path, Boolean append, Encoding encoding, Int32 bufferSize, Boolean checkHost)\r\n            at System.IO.StreamWriter..ctor(String path, Boolean append, Encoding encoding)\r\n            at Xamarin.Android.Tasks.ManifestDocument.Save(String filename)\r\n            at Xamarin.Android.Tasks.Aapt.GenerateCommandLineCommands(String ManifestFile, String currentAbi, String currentResourceOutputFile)\r\n            at Xamarin.Android.Tasks.Aapt.ProcessManifest(ITaskItem manifestFile)\r\n            at System.Threading.Tasks.Parallel.<>c__DisplayClass30_0`2.<ForEachWorker>b__0(Int32 i)\r\n            at System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1()\r\n            at System.Threading.Tasks.Task.InnerInvoke()\r\n            at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask)\r\n            at System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) [C:\\repos\\msalnet\\tests\\devapps\\XForms\\XForms.Android\\XForms.Android.csproj]\r\n\r\n  * We are hugely contributing to the dex limit for fields.  Apps\r\n    contain exponentially more fields for each library with resources.\r\n\r\n    An example from @PureWeen:\r\n\r\n        1>  trouble writing output: Too many field references to fit in one dex file: 70468; max is 65536.\r\n\r\n  * Quite a few instances of `aapt`/`aapt2` startup on developer's\r\n    machines: this pegs the CPU.  We have had a few general\r\n    complaints about it.\r\n\r\nReviewing the source code for the Android gradle plugin, here is what\r\nthey do:\r\n\r\n 1. Build the main app's \"full\" `R.txt` file.\r\n 2. For each library, load its `R.txt` file.\r\n 3. Map each resource in the library's `R.txt` back to the main app\r\n 4. Write a small `R.java` file for each library containing *only*\r\n    the lines from the `R.txt` and updated integer values from the\r\n    main app `R.txt` file.\r\n\r\nLooking into this, can we do the exact same thing?  We have the\r\n`R.txt` file one directory above where we extract resources for each\r\nlibrary.  We already had code parsing `R.txt` files we could\r\nrepurpose.  The only thing *new* is a `R.java` writer: a pretty\r\nsimple port from java.\r\n\r\nThe results are great!\r\n\r\n\tBefore:\r\n\t3173 ms  _GenerateJavaDesignerForComponentAapt2     1 calls\r\n\tAfter:\r\n\t  20 ms  GenerateLibraryResources                   1 calls\r\n\r\n`_GenerateJavaDesignerForComponent` is now completely gone.  This is\r\na total savings of ~3 seconds on first build and incremental builds\r\nwith library changes.\r\n\r\nTo compare APKs, I used:\r\n\r\n\t$ ~/android-toolchain/sdk/tools/bin/apkanalyzer dex packages Xamarin.Forms_Performance_Integration-Before.apk | grep ^F\r\n\r\nWhich omits a line for each field such as:\r\n\r\n\tF d 0\t0\t16\txamarin.forms_performance_integration.R$color int abc_background_cache_hint_selector_material_dark\r\n\r\nSo then, before these changes there were ~30000 fields:\r\n\r\n\t$ ~/android-toolchain/sdk/tools/bin/apkanalyzer dex packages Xamarin.Forms_Performance_Integration-Before.apk | grep ^F | wc -l\r\n\t29681\r\n\r\nAfter, there are less than 18000 (58%!):\r\n\r\n\t$ ~/android-toolchain/sdk/tools/bin/apkanalyzer dex packages Xamarin.Forms_Performance_Integration-After.apk | grep ^F | wc -l\r\n\t17210\r\n\r\n12K less fields in a \"Hello World\" Xamarin.Forms app!\r\n\r\nComparing file sizes seems good, too:\r\n\r\n\t$ zipinfo Xamarin.Forms_Performance_Integration-Before.apk | grep classes.dex\r\n\t-rw-rw-r--  6.3 unx  3657872 b- defX 19-Mar-28 16:37 classes.dex\r\n\t$ zipinfo Xamarin.Forms_Performance_Integration-After.apk | grep classes.dex\r\n\t-rw-rw-r--  6.3 unx  3533120 b- defX 19-Mar-28 16:20 classes.dex\r\n\r\nThe `.dex` file in the `.apk` is ~120KB smaller.\r\n\r\n## What if R.txt is missing? ##\r\n\r\nI found this was the case when the\r\n`<GetAdditionalResourcesFromAssemblies/>` MSBuild task runs.  This is\r\nan old codepath that allowed old support libraries to work.\r\n\r\nIn this case, a directory is created such as:\r\n\r\n  * `obj\\Debug\\resourcecache\\CF390EBB0064FDA00BB090E733D37E89`\r\n      * `aidl`\r\n      * `AndroidManifest.xml`\r\n      * `assets`\r\n      * `classes.jar`\r\n      * `libs`\r\n      * `res`\r\n\r\nNo `R.txt` file?\r\n\r\nChecking the zip files we download:\r\n\r\n\t$ for z in ~/.local/share/Xamarin/zips/*.zip; do zipinfo $z; done | grep R.txt\r\n\t# no results\r\n\r\nThis actually makes sense, since the zip file contains the\r\n*actual resources*.\r\n\r\nTo make this case work properly, we should just process the main\r\napp's `R.txt` file when no library `R.txt` file is found.  This will\r\nstill be faster than invoking `aapt`, even though we have more\r\nfields than needed.\r\n\r\n## Tests ##\r\n\r\nI added a set of unit tests for the `<GenerateLibraryResources/>`\r\nMSBuild task.  I also had to remove a few assertions that looked for\r\nthe `_GenerateJavaDesignerForComponent` MSBuild target.\r\n\r\nLastly, I added some assertions to a test that uses an old support\r\nlibrary to verify it's main `R.java` reasonably matches the library\r\n`R.java` we generate."},{"Id":"9356803776","Type":"PullRequestEvent","CreatedAt":"2019-04-01T20:18:38","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2896","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] generate R.java like Android Studio\" (#2896) at xamarin/xamarin-android","RelatedBody":"Context: https://android.googlesource.com/platform/tools/base/+/refs/heads/master/build-system/builder/\r\nFixes: https://github.com/xamarin/xamarin-android/issues/2680\r\nFixes: https://github.com/xamarin/xamarin-android/issues/2836\r\n\r\nThe current behavior in the `_GenerateJavaDesignerForComponent`\r\nMSBuild target does the following:\r\n\r\n* For each library that has Android resources... (in parallel)\r\n* Run an instance of aapt/aapt2 to generate the `R.java` file for each\r\n  library.\r\n* This actually creates an `R.java` file that contains *every*\r\n  resource id for *every* library. These libraries are not using most\r\n  of these ids.\r\n\r\nThis has a few problems:\r\n\r\n* #2680 notes a problem where a file is locked on Windows during\r\n  `_GenerateJavaDesignerForComponent`.\r\n```\r\n    Xamarin.Android.Common.targets(1541,2): The process cannot access the file 'C:\\repos\\msalnet\\tests\\devapps\\XForms\\XForms.Android\\obj\\Debug\\90\\lp\\26\\jl\\manifest\\AndroidManifest.xml' because it is being used by another process.\r\n        at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n        at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n        at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n        at System.IO.StreamWriter.CreateFile(String path, Boolean append, Boolean checkHost)\r\n        at System.IO.StreamWriter..ctor(String path, Boolean append, Encoding encoding, Int32 bufferSize, Boolean checkHost)\r\n        at System.IO.StreamWriter..ctor(String path, Boolean append, Encoding encoding)\r\n        at Xamarin.Android.Tasks.ManifestDocument.Save(String filename)\r\n        at Xamarin.Android.Tasks.Aapt.GenerateCommandLineCommands(String ManifestFile, String currentAbi, String currentResourceOutputFile)\r\n        at Xamarin.Android.Tasks.Aapt.ProcessManifest(ITaskItem manifestFile)\r\n        at System.Threading.Tasks.Parallel.<>c__DisplayClass30_0`2.<ForEachWorker>b__0(Int32 i)\r\n        at System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1()\r\n        at System.Threading.Tasks.Task.InnerInvoke()\r\n        at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask)\r\n        at System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) [C:\\repos\\msalnet\\tests\\devapps\\XForms\\XForms.Android\\XForms.Android.csproj]\r\n```\r\n* We are hugely contributing to the dex limit for fields. Apps contain\r\n  exponentially more fields for each library with resources.\r\n\r\nAn example from @PureWeen:\r\n\r\n    1>  trouble writing output: Too many field references to fit in one dex file: 70468; max is 65536.\r\n\r\n* Quite a few instances of aapt/aapt2 startup on developer's machines:\r\n  this pegs the CPU. We have had a few general complaints about it.\r\n\r\nReviewing the source code for the Android gradle plugin, here is what\r\nthey do:\r\n\r\n* Build the main app's \"full\" `R.txt` file.\r\n* For each library, load its `R.txt` file.\r\n* Map each resource in the library's `R.txt` back to the main app\r\n* Write a small `R.java` file for each library: containing *only* the\r\n  lines from the `R.txt` and updated integer values from the main app\r\n  `R.txt` file.\r\n\r\nLooking into this, we can do the exact same thing? We have the `R.txt`\r\nfile one directory above where we extract resources for each library.\r\nWe already had code parsing `R.txt` files I could repurpose, the only\r\nthing *new* is a `R.java` writer: a pretty simple port from java.\r\n\r\nThe results are great!\r\n\r\n    Before:\r\n    3173 ms  _GenerateJavaDesignerForComponentAapt2     1 calls\r\n    After:\r\n      20 ms  GenerateLibraryResources                   1 calls\r\n\r\n`_GenerateJavaDesignerForComponent` is now completely gone. This is a\r\ntotal savings of ~3 seconds on first build and incremental builds\r\nwith library changes.\r\n\r\nTo compare APKs, I used:\r\n\r\n    $ ~/android-toolchain/sdk/tools/bin/apkanalyzer dex packages Xamarin.Forms_Performance_Integration-Before.apk | grep ^F\r\n\r\nWhich omits a line for each field such as:\r\n\r\n    F d 0\t0\t16\txamarin.forms_performance_integration.R$color int abc_background_cache_hint_selector_material_dark\r\n\r\nSo then, before these changes:\r\n\r\n    $ ~/android-toolchain/sdk/tools/bin/apkanalyzer dex packages Xamarin.Forms_Performance_Integration-Before.apk | grep ^F | wc -l\r\n    29681\r\n\r\nAfter:\r\n\r\n    $ ~/android-toolchain/sdk/tools/bin/apkanalyzer dex packages Xamarin.Forms_Performance_Integration-After.apk | grep ^F | wc -l\r\n    17210\r\n\r\n12K less fields in a \"Hello World\" Xamarin.Forms app!\r\n\r\nComparing file sizes seems good, too:\r\n\r\n    $ zipinfo Xamarin.Forms_Performance_Integration-Before.apk | grep classes.dex\r\n    -rw-rw-r--  6.3 unx  3657872 b- defX 19-Mar-28 16:37 classes.dex\r\n    $ zipinfo Xamarin.Forms_Performance_Integration-After.apk | grep classes.dex\r\n    -rw-rw-r--  6.3 unx  3533120 b- defX 19-Mar-28 16:20 classes.dex\r\n\r\nDex file in the APK is ~120KB smaller.\r\n\r\n## What if R.txt is missing? ##\r\n\r\nI found this was the case when the\r\n`<GetAdditionalResourcesFromAssemblies/>` MSBuild task runs. This is\r\nan old codepath that allowed old support libraries to work.\r\n\r\nIn this case, a directory is created such as:\r\n\r\n* `obj\\Debug\\resourcecache\\CF390EBB0064FDA00BB090E733D37E89`\r\n  * `adil`\r\n  * `assets`\r\n  * `libs`\r\n  * `res`\r\n  * `AndroidManifest.xml`\r\n  * `classes.jar`\r\n\r\nNo `R.txt` file?\r\n\r\nChecking the zip files we download:\r\n\r\n    $ for z in ~/.local/share/Xamarin/zips/*.zip; do zipinfo $z; done | grep R.txt\r\n    # no results\r\n\r\nThis actually makes sense, since the zip file contains the *actual\r\nresources*.\r\n\r\nTo make this case work properly, we should just process the main app's\r\n`R.txt` file when no library `R.txt` file is found. This will still be\r\nfaster than invoking `aapt`, even though we have more fields than\r\nneeded.\r\n\r\n## Tests ##\r\n\r\nI added a set of unit tests for the `<GenerateLibraryResources/>`\r\nMSBuild task. I also had to remove a few assertions that looked for\r\nthe `_GenerateJavaDesignerForComponent` MSBuild target.\r\n\r\nLastly, I added some assertions to a test that uses an old support\r\nlibrary to verify it's main `R.java` reasonably matches the library\r\n`R.java` we generate."},{"Id":"9356731413","Type":"PullRequestEvent","CreatedAt":"2019-04-01T20:07:23","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2903","RelatedDescription":"Merged pull request \"[build] use a repository-wide NuGet.config\" (#2903) at xamarin/xamarin-android","RelatedBody":"Context: https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior\r\nContext: http://build.devdiv.io/2500191\r\nContext: https://github.com/xamarin/xamarin-android/pull/2859#issuecomment-476691256\r\n\r\nWe are randomly getting failures during Windows builds such as:\r\n\r\n    NuGet.targets(114,5): Unable to load the service index for source https://someurl.visualstudio.com/_packaging/Dev/nuget/v3/index.json.\r\n        Response status code does not indicate success: 401 (Unauthorized).\r\n\r\nIt appears that some of our build machines on Azure DevOps have a\r\nglobal (or user-level) `NuGet.Config` file that points to a NuGet feed\r\nwe don't have access to.\r\n\r\nThe way we can workaround this, is to provide our own `NuGet.config`\r\nfile that *only* uses the official nuget.org feed.\r\n\r\n* We can put a top-level `NuGet.config` next to our SLN files.\r\n* We also need to use this file during MSBuild tests.\r\n\r\nI also made sure any calls to `nuget restore` are giving us the\r\nhighest log information via `-Verbosity Detailed`. This will tell us\r\nwhat `NuGet.config` files and feeds are used.\r\n\r\nAlso in `PrepareWindows.targets`, any `<Exec/>` calls that run\r\n`NuGet.exe` need `IgnoreStandardErrorWarningFormat` set. Otherwise\r\nMSBuild treats certain output as errors."},{"Id":"9356454288","Type":"PullRequestEvent","CreatedAt":"2019-04-01T19:24:39","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2911","RelatedDescription":"Opened pull request \"[vswhere] set WorkingDirectory\" (#2911) at xamarin/xamarin-android","RelatedBody":"Context: http://build.devdiv.io/2547192\r\nContext: https://stackoverflow.com/questions/990562/win32exception-the-directory-name-is-invalid\r\n\r\nWe seem to have hit an odd failure during the MSBuild tests:\r\n\r\n    Unhandled Exception: System.ComponentModel.Win32Exception: The directory name is invalid\r\n        at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)\r\n        at System.Diagnostics.Process.Start()\r\n        at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)\r\n        at Xamarin.Android.Tools.VSWhere.MSBuildLocator.Exec(String fileName, String args) in E:\\A\\_work\\1404\\s\\tools\\vswhere\\MSBuildLocator.cs:line 55\r\n        at Xamarin.Android.Tools.VSWhere.MSBuildLocator.QueryLatest() in E:\\A\\_work\\1404\\s\\tools\\vswhere\\MSBuildLocator.cs:line 28\r\n        at Xamarin.Android.Build.XABuildPaths..ctor() in E:\\A\\_work\\1404\\s\\tools\\xabuild\\XABuildPaths.cs:line 124\r\n        at Xamarin.Android.Build.XABuild.Main() in E:\\A\\_work\\1404\\s\\tools\\xabuild\\XABuild.cs:line 17\r\n\r\nFrom looking up other examples of this error on the web, it seems that\r\na weird `WorkingDirectory` from the build environment would cause\r\nthis? `WorkingDirectory` was not set at all, so we would pickup\r\nwhatever the default is.\r\n\r\nLet's just set `ProcessStartInfo.WorkingDirectory` to avoid a\r\npotential problem here."},{"Id":"9356274764","Type":"PullRequestEvent","CreatedAt":"2019-04-01T18:56:50","Actor":"directhex","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2910","RelatedDescription":"Opened pull request \"Bump to mono:2019-04\" (#2910) at xamarin/xamarin-android","RelatedBody":""},{"Id":"9355078849","Type":"PullRequestEvent","CreatedAt":"2019-04-01T15:59:01","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2900","RelatedDescription":"Merged pull request \"Use correct `strip` path when building with mono archives\" (#2900) at xamarin/xamarin-android","RelatedBody":"Mono Android build still creates a standalone NDK toolchain as part of its\r\nprovisioning step and places it in `~/android-toolchain/toolchains` and its\r\nsubdirectories. Xamarin.Android then uses this location to find the `strip`\r\nutility which we call after the build is done. However, when Mono archives are\r\nused and the Mono build does *not* take place, the standalone toolchain is never\r\ncreated (as Xamarin.Android itself doesn't use it) and thus we fail to find the\r\nrequired `strip` binaries and the build fails\r\n\r\nThis commit fixes the problem by always using strip from the prebuilt toolchains\r\nas shipped with the NDK."},{"Id":"9354619080","Type":"PullRequestEvent","CreatedAt":"2019-04-01T15:04:18","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2838","RelatedDescription":"Merged pull request \"[build, linux] Xamarin Android Linux pipeline builds\" (#2838) at xamarin/xamarin-android","RelatedBody":"Groovy script enabling pipeline builds to replace the following Linux freestyle workflows:\r\nhttps://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-linux/\r\nhttps://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-linux-release/\r\nhttps://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-anroid-linux-pr-builder/\r\n\r\nThe pipeline script supports separate `debug` and `release` builds effectively cutting build time in half\r\n\r\nIntroduce new utils.groovy file providing shared functionality between build.groovy and build.linux.groovy\r\n\r\n**Deployment plan**\r\n  * Disable build triggers for the freestyle Linux build\r\n  * Replace xamarin-android-linux freestyle build with pipeline version\r\n    * Rename xamarin-android-linux to xamarin-android-linux-freestyle\r\n    * Rename xamarin-android-linux-pipeline to xamarin-android-linux\r\n    **Note:** Reusing the xamarin-android-linux name for pipeline builds allows the README reference to the Linux build to remain unchanged\r\n  * Rename xamarin-android-linux-pipeline-debug to xamarin-android-linux-debug\r\n  * Update publish location to use same publish location as Mac builds\r\n    * ContainerName: mono-jenkins\r\n    * StorageVirtualPath: xamarin-android (release), xamarin-android-debug (debug)\r\n  **Note:** The above changes will fix a problem where the Linux bundle currently can't be found as the freestyle build currently publishes to a location where download-bundle can't find it\r\n * Enable build triggers for new pipeline Linux builds\r\n * Replace stable build workflow `xamarin-android-linux-release` with pipeline versions `xamarin-android-linux-stable-pipeline` and `xamarin-android-stable-pipeline-debug`\r\n   **Note:** The stable pipeline builds will be responsible for package publishing \r\n * Enable Linux PR pipeline builds after this PR is completed and build.linux.groovy reaches master"},{"Id":"9354599605","Type":"PullRequestEvent","CreatedAt":"2019-04-01T15:02:05","Actor":"kzu","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2909","RelatedDescription":"Closed pull request \"When $(AndroidResgenFile) is empty, set AndroidUseIntermediateDesignerFile=true\" (#2909) at xamarin/xamarin-android","RelatedBody":"If someone had a previously unfolded template (or currently, since we still add the Resource.designer.cs file under Resources, but likely to change), in order to upgrade to the intermediate codegen, they have to both delete the existing file, remove the AndroidResgenFile property (since it's meaningless now, but removing it isn't required) and add AndroidUseIntermediateDesignerFile=true. \r\n\r\nThis makes it so that just removing the `AndroidResgenFile` property is interpreted as \"use the new thing\" implicitly, so we have a cleaner .csproj in the end, which has the right behavior OOB.\r\n\r\nFixes #2908 "}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9358516817","Type":"PullRequestEvent","CreatedAt":"2019-04-02T02:45:42","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5402","RelatedDescription":"Merged pull request \"Added dynamic view gallery\" (#5402) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nFor convenient visual testing of all public properties of visual elements, it is not always convenient to create a new gallery. This gallery automatically adds universal pikers for manual testing of basic controls.\r\n\r\n###  Screenshots ### \r\n\r\n![image](https://user-images.githubusercontent.com/27482193/53497995-7a30fb00-3ab6-11e9-8f0d-ef89126e8f72.png)\r\n![image](https://user-images.githubusercontent.com/27482193/53498077-a51b4f00-3ab6-11e9-9ce0-c70fadf889be.png)\r\n![image](https://user-images.githubusercontent.com/27482193/53498124-bebc9680-3ab6-11e9-874e-c2bfdef7f61b.png)\r\n![image](https://user-images.githubusercontent.com/27482193/53498695-dea08a00-3ab7-11e9-8728-a4f6743ddf89.png)\r\n\r\n### Testing Procedure ###\r\n\r\n- run Dynamic ViewGallery\r\n- select any control\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"9358474174","Type":"PullRequestEvent","CreatedAt":"2019-04-02T02:34:37","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5726","RelatedDescription":"Merged pull request \"Make UI test 4600 run on Android/iOS\" (#5726) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nRemove `Ignore` attribute, fix broken test input, and add flag to allow test to run.\r\n\r\nTest will _not_ run on UWP, as the underlying CollectionView features have not yet been implemented.\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #4943\r\n\r\n### API Changes ###\r\n\r\n None\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"9358072617","Type":"IssuesEvent","CreatedAt":"2019-04-02T00:42:23","Actor":"drewgillies","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5752","RelatedDescription":"Closed issue \"Previewer is using dark theme\" (#5752) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nSame issue that was covered in the forums here:\r\nhttps://forums.xamarin.com/discussion/126436/previewer-background-colour-or-style-setting\r\n\r\n> Hi, when I use the Xamarin Forms Previewer in Visual Studio 2017 (15.6.7) my app is shown in 'dark' mode or style i.e. has a black background, text is white (or light gray) yet when I run the app on my phone again using VS the background is white, text dark.\r\n>\r\n> Is there some setting I need to change to make the previewer the same as my phone?\r\n>\r\n> Note this is the Android preview.\r\n\r\nSays it was fixed in 15.8. The problem remains in 15.9.10.\r\n\r\n### Steps to Reproduce\r\n\r\n1. View page in forms previewer\r\n\r\n### Expected Behavior\r\n\r\nUse a light colored theme like when deloying the app to an actual device.\r\n\r\n### Actual Behavior\r\n\r\nObserve dark background, white text, etc\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.6.0.264807\r\n- Last known good version: unknown\r\n- IDE: VS 2017 15.9.10\r\n- Platform Target Frameworks:\r\n  - Android: 9\r\n- Android Support Library Version: 28\r\n- Nuget Packages: Forms 3.6.0.264807\r\n- Affected Devices: Android\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n![image](https://user-images.githubusercontent.com/1190944/55238077-fe87b280-5209-11e9-834f-7751e303b495.png)\r\n\r\n> VS bug [#832395](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/832395)"},{"Id":"9358070004","Type":"IssuesEvent","CreatedAt":"2019-04-02T00:41:41","Actor":"xamarin-release-manager","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5573","RelatedDescription":"Closed issue \"Previewer doesn't show embedded images\" (#5573) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\n### Steps to Reproduce\r\n\r\n1. I have a xamarin form app, and in the  xaml layout file,which embedd a  image, but  the previewer often do not display the image effect. \r\n\r\n### Expected Behavior\r\n\r\n### Actual Behavior\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version:\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  <!-- The version of the iOS SDK you are compiling against, e.g. 11.1 -->\r\n  - Android: <!-- The version of the Android SDK you are compiling against, e.g. 7.1 --> \r\n  - UWP:  <!-- The version of the UWP SDK you are compiling against, e.g. 16299 --> \r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\n\n> VS bug [#823584](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/823584)"},{"Id":"9357080503","Type":"IssuesEvent","CreatedAt":"2019-04-01T21:01:14","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4603","RelatedDescription":"Reopened issue \"[Shell] Shell push/pop Navigation broken\" (#4603) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nIt looks like the Navigational Proxy tree isn't being constructed correctly. From Shell when you try to do Page.Navigation.Push it's supposed to trickle up to the ShellSection and the ShellSection will handle the navigation but it appears the ShellSection Proxy isn't making it onto the Proxy hierarchy tree so the call eventually just reaches the exception \r\n\r\n```\r\nSystem.InvalidOperationException: PushAsync is not supported globally on iOS, please use a NavigationPage.\r\n  at Xamarin.Forms.Platform.iOS.Platform.Xamarin.Forms.INavigation.PushAsync (Xamarin.Forms.Page root, System.Boolean animated) [0x00000] in <6bd0fb13d90840a685ae60ec5bc317ae>:0\r\n  at Xamarin.Forms.Internals.NavigationProxy.OnPushAsync (Xamarin.Forms.Page page, System.Boolean animated) [0x00022] in D:\\a\\1\\s\\Xamarin.Forms.Core\\NavigationProxy.cs:198\r\n  at Xamarin.Forms.Internals.NavigationProxy.PushAsync (Xamarin.Forms.Page root, System.Boolean animated) [0x00013] in D:\\a\\1\\s\\Xamarin.Forms.Core\\NavigationProxy.cs:117\r\n  at Xamarin.Forms.Internals.NavigationProxy.OnPushAsync (Xamarin.Forms.Page page, System.Boolean animated) [0x00022] in D:\\a\\1\\s\\Xamarin.Forms.Core\\NavigationProxy.cs:198\r\n  at Xamarin.Forms.Internals.NavigationProxy.PushAsync (Xamarin.Forms.Page root, System.Boolean animated) [0x00013] in D:\\a\\1\\s\\Xamarin.Forms.Core\\NavigationProxy.cs:117\r\n  at Xamarin.Forms.Internals.NavigationProxy.OnPushAsync (Xamarin.Forms.Page page, System.Boolean animated) [0x00022] in D:\\a\\1\\s\\Xamarin.Forms.Core\\NavigationProxy.cs:198\r\n  at Xamarin.Forms.Internals.NavigationProxy.PushAsync (Xamarin.Forms.Page root, System.Boolean animated) [0x00013] in D:\\a\\1\\s\\Xamarin.Forms.Core\\NavigationProxy.cs:117\r\n  at Xamarin.Forms.Internals.NavigationProxy.PushAsync (Xamarin.Forms.Page root) [0x00000] in\r\n```\r\n\r\n### Steps to Reproduce\r\nRun store gallery\r\nclick Push Page\r\n\r\n### Expected Behavior\r\nA page is pushed\r\n\r\n### Actual Behavior\r\nApp crashes\r\n\r\n"},{"Id":"9356735263","Type":"PullRequestEvent","CreatedAt":"2019-04-01T20:08:00","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5771","RelatedDescription":"Merged pull request \"Add covariance back to IElementConfiguration\" (#5771) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nFast Renderer UI tests broke because IElementConfiguration<T> can no longer be covariantly cast which makes us realize that removing the out parameter will be too breaking. It'll also be breaking in such a way that's not obvious. \r\n\r\nReverts #5449\r\n\r\n### Platforms Affected ### \r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n- UWP\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"9356378621","Type":"IssuesEvent","CreatedAt":"2019-04-01T19:12:32","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4678","RelatedDescription":"Reopened issue \"[Feedback] Xamarin Forms: \"Value cannot be null. Parameter name: method\"\" (#4678) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\n\n<p>Occasionally Visual Studio just gives up on building the solution. Running a Xamarin Forms solution sometimes throws a compile error with the message: \n\nValue cannot be null. \nParameter name: method\n\npertaining to my .XAML files, Line 1.\n\nThe issue happens even when:\n1) the solution was building and running fine on the previous run. I change something in the code, re-run it and the errors shows up\n2) Undoing that change and retrying the build\n3) the solution was Cleaned and Rebuilt\n4) either building an Android or iOS Xamarin Forms project\n\nThe issue resolves itself when I restart all instances of Visual Studio. The error seems to happen on some (but not all) Xaml files in my Xamarin Forms .NET Standard project.\n\n\nOutput:\n\n1&gt;App.xaml : error : Value cannot be null.\n1&gt;App.xaml : error : Parameter name: method\n1&gt;Screens\\About.xaml : error : Value cannot be null.\n1&gt;Screens\\About.xaml : error : Parameter name: method\n1&gt;Screens\\Landing.xaml : error : Value cannot be null.\n1&gt;Screens\\Landing.xaml : error : Parameter name: method\n1&gt;Screens\\MasterPage.xaml : error : Value cannot be null.\n1&gt;Screens\\MasterPage.xaml : error : Parameter name: method\n1&gt;Screens\\Onboarding.xaml : error : Value cannot be null.\n1&gt;Screens\\Onboarding.xaml : error : Parameter name: method\n1&gt;Screens\\RequiredAction.xaml : error : Value cannot be null.\n1&gt;Screens\\RequiredAction.xaml : error : Parameter name: method\n1&gt;Screens\\Settings.xaml : error : Value cannot be null.\n1&gt;Screens\\Settings.xaml : error : Parameter name: method\n1&gt;Screens\\Splash.xaml : error : Value cannot be null.\n1&gt;Screens\\Splash.xaml : error : Parameter name: method\n1&gt;Screens\\UpgradeRequired.xaml : error : Value cannot be null.\n1&gt;Screens\\UpgradeRequired.xaml : error : Parameter name: method</p>\n<a href=\"https://developercommunity.visualstudio.com/content/problem/398181/xamarin-forms-value-cannot-be-null-parameter-name.html\">View on Developer Community</a>\n<br>To find diagnostic information, see the <a href=\"https://devdiv.visualstudio.com/DevDiv/_workitems/edit/739625\">original linked feedback ticket</a>.\r\n\r\n### Source\r\n\r\n[743837](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/743837)"},{"Id":"9356165547","Type":"IssuesEvent","CreatedAt":"2019-04-01T18:40:36","Actor":"charlesroddie","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5779","RelatedDescription":"Opened issue \"Scrollviews sometimes scroll to fixed point when clicked\" (#5779) at xamarin/Xamarin.Forms","RelatedBody":"We find that scrollviews somtimes scroll to a fixed position when clicked/touched.\r\n\r\n3.6.0.135200-pre1 and later are affected. 3.5.0.274416 are not.\r\n\r\nThis happens on UWP and iOS. Android untested.\r\n\r\nUnfortunately we are unable to provide a repro as this only happens under certain conditions in a complex app.\r\n\r\nCould anyone advise on what commits are in 3.6.0.135200-pre1 and not in 3.5.0.274416 so we can investigate?"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9358423979","Type":"PullRequestEvent","CreatedAt":"2019-04-02T02:21:58","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5820","RelatedDescription":"Merged pull request \"[mtouch] Add control over the the linker new `BeforeFieldInit` optimization\" (#5820) at xamarin/xamarin-macios","RelatedBody":"Add an `mtouch` optimization flag to control this new optimization since\n3rd party code (in particular binaries) might depend on this side effect."},{"Id":"9357435110","Type":"PullRequestEvent","CreatedAt":"2019-04-01T22:03:56","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5828","RelatedDescription":"Opened pull request \"Merge xcode10.2 into d16-1\" (#5828) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9356171442","Type":"PullRequestEvent","CreatedAt":"2019-04-01T18:41:27","Actor":"directhex","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5827","RelatedDescription":"Opened pull request \"Bump to mono:2019-04\" (#5827) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9355603375","Type":"IssuesEvent","CreatedAt":"2019-04-01T17:14:49","Actor":"yaliashkevich","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5826","RelatedDescription":"Opened issue \"NSUrlSessionHandler: NSErrorException.Error property is disposed?\" (#5826) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\n\r\nAfter switching from modernhttpclient to built-in NSUrlSessionHandler I'm not able to log \"unobserved\" web exceptions using appcenter sdk.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run attached sample project\r\n2. Wait \r\n3. Observe \"Wrapped peer NSError object is already disposed here?\"  crash\r\n\r\n\r\n### Actual Behavior\r\n\r\nUnderlying NSError object of NSErrorException.Error property is already disposed if being observed in TaskScheduler.UnobservedTaskException handler. That causes following issue https://github.com/Microsoft/AppCenter-SDK-DotNet/issues/857 (NSErrorException.Message is null).\r\n\r\n### Environment\r\n\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.9.10\r\nVisualStudio.15.Release/15.9.10+28307.557\r\nMicrosoft .NET Framework\r\nVersion 4.7.02556\r\n\r\nInstalled Version: Professional\r\n\r\nAnkhSVN - Subversion Support for Visual Studio   2.7.12815.35086\r\nAnkhSVN - Subversion Support for Visual Studio 2.7.12815.35086 \r\n * Ankh.Package 2.7.12815.35086\r\n * Subversion 1.9.5 via SharpSvn 1.9005.3940.224\r\n * Git/LibGit2 0.24.0 via SharpGit 0.2401.1116.230\r\n\r\nSharpSvn is linked to: Apr 1.5.2, Apr-util 1.5.4, Cyrus Sasl 2.1.26, eXpat 2.2.0, LibSSH2 1.8.0, OpenSSL 1.0.2k  26 Jan 2017, Serf 1.3.9, SQLite 3.17.0, Subversion 1.9.5-SharpSvn, Utf8proc 1.1.5, ZLib 1.2.8\r\nSharpSvn is optionally linked to: Berkeley DB 4.4.20, SharpPlink 0.67.0(SharpSvn)\r\n\r\nSharpGit is linked to: Apr 1.5.1, Apr-Util 1.5.4, eXpat 2.1.0, Libgit2 0.24.0, LibSSH2 1.7.0, OpenSSL 1.0.2h  3 May 2016, Subversion 1.9.3, Utf8proc 1.1.5, ZLib 1.2.8\r\n\r\nApplication Insights Tools for Visual Studio Package   8.14.20131.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.9.04012.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   15.8.31590\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nASP.NET Web Frameworks and Tools 2017   5.2.60913.0\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   15.9.03024.0\r\nAzure App Service Tools v3.0.0\r\n\r\nC# Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nExtensibility Message Bus   1.1.49 (remotes/origin/d15-8@ee674f3)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJetBrains ReSharper Ultimate 2018.2.3   Build 182.0.20180912.70621\r\nJetBrains ReSharper Ultimate package for Microsoft Visual Studio. For more information about ReSharper Ultimate, visit http://www.jetbrains.com/resharper. Copyright © 2019 JetBrains, Inc.\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Library Manager   1.0\r\nInstall client-side libraries easily to any web project\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMono Debugging for Visual Studio   4.13.12-pre (9bc9548)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.6.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   15.1.61903.01040\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.9.20918.2001\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   2.10.0-beta2-63501-03+b9fb1610c87cccc8ceb74a770dba261a58e39c4a\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.2 for F# 4.5   15.8.0.0.  Commit Hash: 6e26c5bacc8c4201e962f5bdde0a177f82f88691.\r\nMicrosoft Visual F# Tools 10.2 for F# 4.5\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for Containers   1.0\r\nVisual Studio Tools for Containers\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.12.3.81 (d15-9@780082716)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.16.13 (45a16efd4)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   1.1.128 (6f5ebb2)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.1.7.0 (HEAD/ba9da7a76)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   12.2.1.16 (2dc06c7)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\nN/A\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n[NSErrorSample.zip](https://github.com/xamarin/xamarin-macios/files/3030568/NSErrorSample.zip)\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1112804184166944768","CreatedAt":"2019-04-01T19:49:27+00:00","UserScreenname":"xamarinhq","Text":"Learn about the new, exciting releases and tooling to help jumpstart your next mobile development project.\n\nJoin us… https://t.co/4AhXCdCrB0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":18,"FavoriteCount":10,"RawContent":null},{"Id":"1111358962681765893","CreatedAt":"2019-03-28T20:06:39+00:00","UserScreenname":"xamarinhq","Text":"Unlock the power of Glide with “GlideX”: a simple library to swap-in Glide’s image loading implementation in-place… https://t.co/bAk49l9er6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":46,"FavoriteCount":25,"RawContent":null},{"Id":"1111318034789158912","CreatedAt":"2019-03-28T17:24:01+00:00","UserScreenname":"xamarinhq","Text":"How are we doing? The #Xamarin March survey is now ready for your feedback: https://t.co/yfktVy49Pl \nIt's only avai… https://t.co/gX2uC9QShF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":54,"FavoriteCount":37,"RawContent":null},{"Id":"1110599405390962693","CreatedAt":"2019-03-26T17:48:26+00:00","UserScreenname":"xamarinhq","Text":"Interpret some of the #CSharp in your application while compiling the rest ahead of time as usual.\n\nCool.... Introd… https://t.co/vkhDptAeTr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":43,"RawContent":null},{"Id":"1109140611515498502","CreatedAt":"2019-03-22T17:11:43+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/GFuU36E9x5 - Let's walk through a basic building block of #Xamarin.Forms. In the latest episode of Xam… https://t.co/qczJXvqcNK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":67,"FavoriteCount":29,"RawContent":null},{"Id":"1108410911151345664","CreatedAt":"2019-03-20T16:52:09+00:00","UserScreenname":"xamarinhq","Text":"We're ready for testing &amp; app submission. The latest #Xamarin .iOS SDKs shipping with #VS2019 and #VS4Mac 8.0, are… https://t.co/KC1Gih3MFF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":57,"FavoriteCount":25,"RawContent":null},{"Id":"1107723971531862017","CreatedAt":"2019-03-18T19:22:29+00:00","UserScreenname":"xamarinhq","Text":"We have received some great pull requests to add some new features and that have gone into the newest release. Now… https://t.co/EqNQUDloOm","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":118,"FavoriteCount":47,"RawContent":null},{"Id":"1106650380182659080","CreatedAt":"2019-03-15T20:16:25+00:00","UserScreenname":"xamarinhq","Text":"Introducing the New Xamarin Customer Showcase\n\nHighlighting the amazing work developers are doing for all sorts of… https://t.co/yQbcA4cYc6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":96,"FavoriteCount":42,"RawContent":null},{"Id":"1106576630884065280","CreatedAt":"2019-03-15T15:23:22+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @JamesMontemagno &amp; @JonathanPeppers show us how to optimize image loading for Androi… https://t.co/FkiznwhBep","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":73,"FavoriteCount":17,"RawContent":null},{"Id":"1105942645308678144","CreatedAt":"2019-03-13T21:24:08+00:00","UserScreenname":"xamarinhq","Text":"There have been some drastic changes across key libraries for Google Play Services &amp; Android Support. Let's get a q… https://t.co/heywxPz0Qs","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":40,"FavoriteCount":25,"RawContent":null},{"Id":"1105573743986917377","CreatedAt":"2019-03-12T20:58:15+00:00","UserScreenname":"xamarinhq","Text":"#MFractor is a powerful #VS4Mac extension to streamline Xamarin app dev so you can save significant time &amp; effort o… https://t.co/pEwcgwzd3t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":22,"RawContent":null},{"Id":"1105491570583851008","CreatedAt":"2019-03-12T15:31:44+00:00","UserScreenname":"xamarinhq","Text":".@codemillmatt &amp; @JamesMontemagno talk about a ton of newness out there for all mobile devs including a hot new… https://t.co/05m3VTmUBe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":24,"RawContent":null},{"Id":"1103762250509283332","CreatedAt":"2019-03-07T21:00:02+00:00","UserScreenname":"xamarinhq","Text":"Introducing Material Design; a suite of cross-platform components in the #Xamarin.Forms 3.6 Visual feature that boo… https://t.co/gin9lpb0eQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":151,"FavoriteCount":70,"RawContent":null},{"Id":"1103750171215699968","CreatedAt":"2019-03-07T20:12:02+00:00","UserScreenname":"xamarinhq","Text":"Level up your mobile development skills at #MSBuild, May 6-8, 2019 in Seattle. Registration is now open!… https://t.co/EZNWhIn3p6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":40,"FavoriteCount":9,"RawContent":null},{"Id":"1103709031066189825","CreatedAt":"2019-03-07T17:28:33+00:00","UserScreenname":"xamarinhq","Text":"Happening right now! Join the Mobile #dotNET Teams for our community stand-up covering great community contribution… https://t.co/9HUp86ZqBU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":30,"FavoriteCount":16,"RawContent":null},{"Id":"1103701857682231296","CreatedAt":"2019-03-07T17:00:03+00:00","UserScreenname":"xamarinhq","Text":"On this week's Essential API of the week we take a look at Accelerometer, which enables you monitor the device's ac… https://t.co/UxhHHar5zN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":56,"FavoriteCount":18,"RawContent":null},{"Id":"1103399934966067200","CreatedAt":"2019-03-06T21:00:19+00:00","UserScreenname":"xamarinhq","Text":"Announcing Xamarin.Forms 3.6:\n- we've made enhancements, cleaned up some bugs, AND, we've moved our Visual feature… https://t.co/fG4RqX25PH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":262,"FavoriteCount":130,"RawContent":null},{"Id":"1102666586194931713","CreatedAt":"2019-03-04T20:26:15+00:00","UserScreenname":"xamarinhq","Text":"Sweeky Satpathy (from the Mobile Customer Advisory Team) shares some best practices &amp; tips/tricks the team uses to… https://t.co/GSrw6zLTHZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":58,"FavoriteCount":19,"RawContent":null},{"Id":"1101572485114462220","CreatedAt":"2019-03-01T19:58:41+00:00","UserScreenname":"xamarinhq","Text":"Developer Community User Groups are gathering to learn about new, exciting releases and tooling to help jumpstart t… https://t.co/GgCWj5LttS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":49,"FavoriteCount":23,"RawContent":null}]}},"RunOn":"2019-04-02T05:30:53.4331321Z","RunDurationInMilliseconds":2536}