{"Data":{"GitHub":{"Issues":[{"Id":"424467598","IsPullRequest":true,"CreatedAt":"2019-03-23T06:00:42","Actor":"artidoro","Number":"3074","RawContent":null,"Title":"ITrivialEstimator (Approach 1)","State":"closed","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3074","RelatedDescription":"Closed or merged PR \"ITrivialEstimator (Approach 1)\" (#3074)"},{"Id":"423973690","IsPullRequest":true,"CreatedAt":"2019-03-23T00:17:24","Actor":"Ivanidzo4ka","Number":"3058","RawContent":null,"Title":"CrossValidationSplit in mlContext.Data","State":"closed","Body":"Just a QoL change.\r\nfixes https://github.com/dotnet/machinelearning/issues/3049\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3058","RelatedDescription":"Closed or merged PR \"CrossValidationSplit in mlContext.Data\" (#3058)"},{"Id":"423870703","IsPullRequest":false,"CreatedAt":"2019-03-23T00:17:24","Actor":"daholste","Number":"3049","RawContent":null,"Title":"Get cross val data splits","State":"closed","Body":"Today, the very useful TrainTestSplit API hangs off MLContext. (This, of course, divides an input dataset into train and test portions.)\r\n\r\nIt would also be quite useful if you could expose a similar method -- CrossValSplit, which would split the data into cross val folds.\r\n\r\nUsing the same train/test splits across many training iterations would allow caching / re-use of various parts of the training pipeline across multiple iterations","Url":"https://github.com/dotnet/machinelearning/issues/3049","RelatedDescription":"Closed issue \"Get cross val data splits\" (#3049)"},{"Id":"424388059","IsPullRequest":true,"CreatedAt":"2019-03-22T23:48:33","Actor":"shmoradims","Number":"3067","RawContent":null,"Title":" Added samples for Poisson and OGD regression","State":"closed","Body":"Related to #2522 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3067","RelatedDescription":"Closed or merged PR \" Added samples for Poisson and OGD regression\" (#3067)"},{"Id":"424429246","IsPullRequest":true,"CreatedAt":"2019-03-22T23:03:28","Actor":"eerhardt","Number":"3073","RawContent":null,"Title":"Add ML.DataView to the stable projects.","State":"open","Body":"We missed ML.DataView in the stable projects list.\r\n\r\nI also grouped the stable projects in logical groups, and fixed a few minor clean ups as I was in here.","Url":"https://github.com/dotnet/machinelearning/pull/3073","RelatedDescription":"Open PR \"Add ML.DataView to the stable projects.\" (#3073)"},{"Id":"424421592","IsPullRequest":false,"CreatedAt":"2019-03-22T22:25:51","Actor":"sfilipi","Number":"3072","RawContent":null,"Title":"The hashed values stored in the annotations indices are skewed by -1","State":"open","Body":"Look at the [hash extension sample](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/Hash.cs#L58) and compare the hashed values with the values stored in the annotations of the \"CategoryHashed\" column. \r\n\r\nNotice how the indices in the annotations are skewed by -1 from the values in the dataview. \r\n\r\n// Category  CategoryHashed   Age     AgeHashed\r\n// MLB        36206            18      127\r\n// NFL        19015            14      62\r\n// NFL        **_19015_**            15      43\r\n// MLB        36206            18      127\r\n// MLS        **6013**             14      62\r\n\r\nversus [the annotations values:](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/Hash.cs#L75)\r\n\r\n\r\n// Output Data\r\n// \r\n// The original value of the **6012** category is MLS\r\n// The original value of the **_19014_** category is NFL\r\n// The original value of the 36205 category is MLB\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3072","RelatedDescription":"Open issue \"The hashed values stored in the annotations indices are skewed by -1\" (#3072)"},{"Id":"424412275","IsPullRequest":true,"CreatedAt":"2019-03-22T21:48:36","Actor":"yaeldekel","Number":"3071","RawContent":null,"Title":"TextLoader throws when type is missing LoadColumnAttribute","State":"open","Body":"Fixes #3051.\r\n\r\nEdit: This also fixes #2037.","Url":"https://github.com/dotnet/machinelearning/pull/3071","RelatedDescription":"Open PR \"TextLoader throws when type is missing LoadColumnAttribute\" (#3071)"},{"Id":"424401373","IsPullRequest":false,"CreatedAt":"2019-03-22T21:25:11","Actor":"codemzs","Number":"3069","RawContent":null,"Title":"Add cancellation checkpoint in ValueToKeyMappingTransfomer","State":"closed","Body":"This transform iterates over a dataset to construct key to value mapping. These mappings are used by other transformers like OneHotVectorizer, etc. This is a trainable transform and it should have a checkpoint to see if the user has triggered cancellation.","Url":"https://github.com/dotnet/machinelearning/issues/3069","RelatedDescription":"Closed issue \"Add cancellation checkpoint in ValueToKeyMappingTransfomer\" (#3069)"},{"Id":"423999176","IsPullRequest":true,"CreatedAt":"2019-03-22T21:25:11","Actor":"codemzs","Number":"3064","RawContent":null,"Title":"Add cancellation checkpoint in ValueToKeyMappingTransfomer.","State":"closed","Body":"fixes #3069\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3064","RelatedDescription":"Closed or merged PR \"Add cancellation checkpoint in ValueToKeyMappingTransfomer.\" (#3064)"},{"Id":"424402420","IsPullRequest":false,"CreatedAt":"2019-03-22T21:23:16","Actor":"codemzs","Number":"3070","RawContent":null,"Title":"Add Cancellation checkpoint in Normalizer transfomer","State":"closed","Body":"This transform iterates over a dataset to calculate metrics such as mean, average, min, max etc. These values are used to normalize the values in a column. This is a trainable transform and it should have a checkpoint to see if the user has triggered cancellation.","Url":"https://github.com/dotnet/machinelearning/issues/3070","RelatedDescription":"Closed issue \"Add Cancellation checkpoint in Normalizer transfomer\" (#3070)"},{"Id":"423996084","IsPullRequest":true,"CreatedAt":"2019-03-22T21:23:16","Actor":"codemzs","Number":"3062","RawContent":null,"Title":"Add Cancellation checkpoint in Normalizer transfomer.","State":"closed","Body":"fixes #3070","Url":"https://github.com/dotnet/machinelearning/pull/3062","RelatedDescription":"Closed or merged PR \"Add Cancellation checkpoint in Normalizer transfomer.\" (#3062)"},{"Id":"424395958","IsPullRequest":false,"CreatedAt":"2019-03-22T20:54:35","Actor":"artidoro","Number":"3068","RawContent":null,"Title":"Add multicolumn mapping for the estimators that need it the most","State":"open","Body":"This is not a Project 13 issue any longer, as it does not require any breaking API change.\r\n\r\nWe should enable multi-column mapping for all the estimators that support it. Since we don't have time to work on a general solution, we will go for option 1 presented in https://github.com/dotnet/machinelearning/issues/2884#issuecomment-475389060.\r\n\r\nThis will only be done for the estimators indicated in the list in the issue #2884. Going forward we should do it for all others.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3068","RelatedDescription":"Open issue \"Add multicolumn mapping for the estimators that need it the most\" (#3068)"},{"Id":"424386533","IsPullRequest":true,"CreatedAt":"2019-03-22T20:26:28","Actor":"artidoro","Number":"3066","RawContent":null,"Title":"Multicolumn mapping for some estimators","State":"open","Body":"Adding multicolumn mapping for some estimators (as per list by @TomFinley and @glebuk):\r\n\r\n- OneHotEncodingEstimator\r\n- TypeConvertingEstimator\r\n- KeyToVectorMappingEstimator\r\n- ValueToKeyMappingEstimator\r\n- OneHotHashEncodingEstimator\r\n- MissingValueEstimator\r\n- FeatureSelectionCatalog.*\r\n- KeyToValueMappingEstiamtor\r\n\r\nLeaving out:\r\n- TextFeaturizingEstimator (probably requires column specific settings most of the time)\r\n- NoramlizingEstiamtor (in experimental nuget)\r\n\r\n\r\nLet me know if I should add more estimators.\r\n\r\nFixes #3068\r\nRelated to #2884 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3066","RelatedDescription":"Open PR \"Multicolumn mapping for some estimators\" (#3066)"},{"Id":"423956830","IsPullRequest":false,"CreatedAt":"2019-03-22T19:09:59","Actor":"eerhardt","Number":"3057","RawContent":null,"Title":"Add code analyzer support for IDataView Preview method","State":"closed","Body":"We should write a code analyzer that checks to see if people are calling the `IDataView.Preview()` extension method, and if so it gives them an error/warning to not do that. It is only for debugging purposes.\r\n\r\n@TomFinley @shauheen ","Url":"https://github.com/dotnet/machinelearning/issues/3057","RelatedDescription":"Closed issue \"Add code analyzer support for IDataView Preview method\" (#3057)"},{"Id":"423988794","IsPullRequest":true,"CreatedAt":"2019-03-22T18:59:33","Actor":"shmoradims","Number":"3059","RawContent":null,"Title":"Updated xml docs for Poisson, OLS, and OGD regression trainers.","State":"closed","Body":"Related to #2522 ","Url":"https://github.com/dotnet/machinelearning/pull/3059","RelatedDescription":"Closed or merged PR \"Updated xml docs for Poisson, OLS, and OGD regression trainers.\" (#3059)"},{"Id":"423924370","IsPullRequest":true,"CreatedAt":"2019-03-22T17:38:28","Actor":"abgoswam","Number":"3052","RawContent":null,"Title":"Expose advanced options for the NormalizingEstimator ","State":"closed","Body":"Fixes  #3047 \r\n\r\n- Introduces 5 APIs required to expose advanced options for each of the normalizing estimators in ML.NET {MinMax, MeanVariance, LogMeanVariance, Binning, SupervisedBinning}\r\n- The APIs are added into the Experimental nuget, till  we finalize a  proper design for #2884 \r\n- Added tests","Url":"https://github.com/dotnet/machinelearning/pull/3052","RelatedDescription":"Closed or merged PR \"Expose advanced options for the NormalizingEstimator \" (#3052)"},{"Id":"423857474","IsPullRequest":false,"CreatedAt":"2019-03-22T17:38:28","Actor":"artidoro","Number":"3047","RawContent":null,"Title":"Enable setting NormalizingEstimator options","State":"closed","Body":"In PR #2959 we hid the NormalizingEstimator `ColumnOptions`. Currently users cannot set advanced parameters for the estimator.\r\n\r\nThe reason for not doing that was that `NormalizingEstimator` has 5 `ColumnOptions` classes and would have required at least that many overloads. So we opted for **waiting for the full `Options`** object to be made accessible and make sure that **no breaking API change** was going to be required. \r\n\r\nHowever, as per further discussion in #2884 and offline we decided that we would not make `Options` available before v1. We therefore need another solution.\r\n\r\nOne possible approach would be to add five new extensions to MLContext each presenting all the settings in one of the NormalizingEstiamtor `ColumnOptions`. The extensions could indicate in their name the type of normalization to perform.\r\n\r\nNote that this is not a breaking API change.","Url":"https://github.com/dotnet/machinelearning/issues/3047","RelatedDescription":"Closed issue \"Enable setting NormalizingEstimator options\" (#3047)"},{"Id":"423953186","IsPullRequest":true,"CreatedAt":"2019-03-22T15:37:15","Actor":"abgoswam","Number":"3055","RawContent":null,"Title":"Rename ImageType to ImageDataViewType","State":"closed","Body":"Fixes #3050 \r\n\r\n- Renamed ImageType to ImageDataViewType\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3055","RelatedDescription":"Closed or merged PR \"Rename ImageType to ImageDataViewType\" (#3055)"},{"Id":"423880131","IsPullRequest":false,"CreatedAt":"2019-03-22T15:37:15","Actor":"eerhardt","Number":"3050","RawContent":null,"Title":"Rename ImageType to ImageDataViewType","State":"closed","Body":"With #2297 we decided to suffix all the IDataView type classes with `DataViewType` instead of just `Type`. However, we missed `ImageType`:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/70ef7ecd43b031b481a4047ea361da5e2f360336/src/Microsoft.ML.ImageAnalytics/ImageType.cs#L12\r\n\r\nWe should rename this class as well to match the rest in the hierarchy. This will need to be done before v1.0 since it would be a breaking change to rename it later.","Url":"https://github.com/dotnet/machinelearning/issues/3050","RelatedDescription":"Closed issue \"Rename ImageType to ImageDataViewType\" (#3050)"},{"Id":"424249440","IsPullRequest":false,"CreatedAt":"2019-03-22T14:53:51","Actor":"PeterPann23","Number":"3065","RawContent":null,"Title":"Simple model error, conflicting annotations should cause an error or work","State":"open","Body":"### System information\r\n\r\n- **Windows 10 64 bit**:\r\n- **.NET 3.0. ML.Net 0.11**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nLoaded Textfile with label and array of float values\r\n\r\n```\r\nvar dataView = mlContext.Data.LoadFromTextFile<DataBase>(trainingFile.FullName, separatorChar: '|', hasHeader: false);\r\nvar dataset = mlContext.MulticlassClassification.TrainTestSplit(dataView, testFraction: 0.1);\r\n\r\nvar pipeline = mlContext.Transforms.Conversion.MapValueToKey(nameof(DataBase.Label),sort:ValueToKeyMappingEstimator.SortOrder.Value)\r\n                    .Append(mlContext.Transforms.Normalize(new NormalizingEstimator.SupervisedBinningColumOptions(inputColumnName: nameof(DataBase.Features), outputColumnName: DefaultColumnNames.Features)))\r\n                    .Append(mlContext.MulticlassClassification.Trainers.StochasticDualCoordinateAscent(labelColumnName: DefaultColumnNames.Label, featureColumnName: DefaultColumnNames.Features))\r\n                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\r\n\r\n\r\n\r\n//crashes here\r\nvar model = pipeline.Fit(dataset.TrainSet);\r\nvar predictions = model.Transform(dataset.TestSet);\r\nmetrics = mlContext.MulticlassClassification.Evaluate(predictions,DefaultColumnNames.Label,DefaultColumnNames.Score);\r\n[Sample.zip](https://github.com/dotnet/machinelearning/files/2997016/Sample.zip)\r\n\r\n```\r\n\r\n\r\n\r\n\r\n- **What happened?**\r\nGot error: Schema mismatch for feature column 'Features': expected Vector<R4>, got R4\r\nParameter name: inputSchema\r\n- **What did you expect?**\r\nNo error as my class is a vector of float  \r\n\r\n### Source code / logs\r\n```\r\n    public class DataBase\r\n    {\r\n        [LoadColumn(0)]     \r\n        public string Label { get; set; }\r\n\r\n         //error in column definition\r\n        [LoadColumn(1),VectorType(220)]  \r\n        public float[] Features { get; set; }\r\n\r\n        public DataBase()\r\n        {\r\n            Features = new float[220];\r\n        }\r\n    }\r\n```\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3065","RelatedDescription":"Open issue \"Simple model error, conflicting annotations should cause an error or work\" (#3065)"},{"Id":"423955410","IsPullRequest":true,"CreatedAt":"2019-03-22T14:33:19","Actor":"yaeldekel","Number":"3056","RawContent":null,"Title":"Fix bug in TextLoader","State":"closed","Body":"Fixes #2996. (This PR replaces #3011).","Url":"https://github.com/dotnet/machinelearning/pull/3056","RelatedDescription":"Closed or merged PR \"Fix bug in TextLoader\" (#3056)"},{"Id":"423996817","IsPullRequest":false,"CreatedAt":"2019-03-22T00:23:59","Actor":"singlis","Number":"3063","RawContent":null,"Title":"Predict expects the Label as input","State":"open","Body":"## Issue\r\nWhen calling Predict, our Predict method will take in the same input as what is used for the training pipeline. This is a bit \"odd\" as we force the user to define a \"Label\" variable that does nothing nor is it needed for the output.\r\n\r\nUsing the example from #3037, we have something like this:\r\n```\r\n    let predictor = mlContext.Model.CreatePredictionEngine(transformer)\r\n    let prediction:Prediction = predictor.Predict({Area=0; Price = 209000})\r\n```\r\n\r\nWhere Area is our \"Label\", because this is required by the pipeline, we have to add this in as part of the input. \r\n\r\nCould our pipeline change to only consume the data that is needed to do the prediction? And ideally have something like this:\r\n```\r\nlet prediction:Prediction = predictor.Predict(209000)\r\n```\r\ncc @glebuk  for any additional comments.","Url":"https://github.com/dotnet/machinelearning/issues/3063","RelatedDescription":"Open issue \"Predict expects the Label as input\" (#3063)"},{"Id":"423993829","IsPullRequest":false,"CreatedAt":"2019-03-22T00:09:55","Actor":"singlis","Number":"3061","RawContent":null,"Title":"Null Reference Exception when Concatenating with a single value","State":"open","Body":"### Issue\r\nDiscovered from #3037, a user can call `Concatenate `and specify a single string. When this happens, a NullReference exception is thrown. Here is the code sample:\r\n```\r\n        EstimatorChain()\r\n            .Append(mlContext.Transforms.Conversion.ConvertType(\"Features\", \"Price\", DataKind.Double))\r\n            .Append(mlContext.Transforms.Conversion.ConvertType(\"Label\", \"Area\", DataKind.Double))\r\n            .Append(mlContext.Transforms.Concatenate(\"Features\"))  // This causes the error, should be (\"Features\", \"Features\")\r\n            .AppendCacheCheckpoint(mlContext)\r\n            .Append(mlContext.Regression.Trainers.Sdca(\"Label\", \"Features\"))\r\n            , mlContext\r\n\r\n```\r\n\r\nHere is the callstack:\r\n\r\n```\r\n>\tMicrosoft.ML.Core.dll!Microsoft.ML.SchemaShape.Column.GetTypeString() Line 111\tC#\r\n \tMicrosoft.ML.Data.dll!Microsoft.ML.Trainers.TrainerEstimatorBase<Microsoft.ML.Data.RegressionPredictionTransformer<Microsoft.ML.Trainers.LinearRegressionModelParameters>, Microsoft.ML.Trainers.LinearRegressionModelParameters>.CheckInputSchema(Microsoft.ML.SchemaShape inputSchema) Line 111\tC#\r\n \tMicrosoft.ML.Data.dll!Microsoft.ML.Trainers.TrainerEstimatorBase<Microsoft.ML.Data.RegressionPredictionTransformer<Microsoft.ML.Trainers.LinearRegressionModelParameters>, Microsoft.ML.Trainers.LinearRegressionModelParameters>.GetOutputSchema(Microsoft.ML.SchemaShape inputSchema) Line 83\tC#\r\n \tMicrosoft.ML.Data.dll!Microsoft.ML.Data.EstimatorChain<Microsoft.ML.Data.RegressionPredictionTransformer<Microsoft.ML.Trainers.LinearRegressionModelParameters>>.GetOutputSchema(Microsoft.ML.SchemaShape inputSchema) Line 83\tC#\r\n \tMicrosoft.ML.Data.dll!Microsoft.ML.Data.EstimatorChain<Microsoft.ML.Data.RegressionPredictionTransformer<Microsoft.ML.Trainers.LinearRegressionModelParameters>>.Fit(Microsoft.ML.IDataView input) Line 60\tC#\r\n \tConsoleApp32.dll!Program.main(string[] argv) Line 33\tF#\r\n```\r\nThe problem is that a NullReference exception looks like a bug and its not obvious to the user on what is the cause of the problem.\r\n\r\n## Expected\r\nWe should instead notify the user that: \r\n1) A bad argument was passed in\r\n2) That its the Concatenate transform that has the bad argument\r\n\r\n### Solution A\r\nWe simply check the length of the name array that is passed to Concatenate and throw the correct exception.\r\n\r\n### Solution B\r\nAnother possible solution is to change the behavior so that when one column is specified for `Concatenate`, the name is treated as the source and destination -- so this:\r\n```\r\n            .Append(mlContext.Transforms.Concatenate(\"Features\"))\r\n```\r\nwould be the same as this:\r\n```\r\n            .Append(mlContext.Transforms.Concatenate(\"Features\", \"Features\"))\r\n```\r\n\r\ncc @glebuk for additional feedback","Url":"https://github.com/dotnet/machinelearning/issues/3061","RelatedDescription":"Open issue \"Null Reference Exception when Concatenating with a single value\" (#3061)"},{"Id":"423990970","IsPullRequest":false,"CreatedAt":"2019-03-21T23:56:42","Actor":"singlis","Number":"3060","RawContent":null,"Title":"Automatic conversion of data in the pipeline","State":"open","Body":"## Issue\r\nWhen providing data to a pipeline there is an expectation that we put on the user to know the data type the trainer is expecting. This is a painful experience for end-users as it requires them to not only know what data types they need to convert to, but also results in them having to add more steps to their pipeline to accommodate.\r\n\r\nThe example from #3037 demonstrates this issue as this pipeline is taking in integer values for the Label and Features and passing this into the SDCA trainer. Because the data is integer based, the pipeline uses `ConvertType ` to convert from int to float, followed by a `Concatenate` to generate a vector type (note this is in F# but still applies to C#)\r\n```\r\n        let mlContext = MLContext()\r\n        EstimatorChain()\r\n           .Append(mlContext.Transforms.Conversion.ConvertType(\"Features\", \"Price\", DataKind.Single))\r\n           .Append(mlContext.Transforms.Conversion.ConvertType(\"Label\", \"Area\", DataKind.Single))\r\n           .Append(mlContext.Transforms.Concatenate(\"Features\", \"Features\"))\r\n           .AppendCacheCheckpoint(mlContext)\r\n           .Append(mlContext.Regression.Trainers.StochasticDualCoordinateAscent(\"Label\", \"Features\"))\r\n           , mlContext\r\n```\r\nWithout conversions, the user will hit an exception saying that the expected type for a Label is of type float followed by the expected type for Features should be a vector of floats. \r\n\r\n## Suggestion\r\nWe should hide these details from the user as this would make the pipeline easier to load and simplify a user's pipeline. Taking the example above, if you were to remove the conversion steps, it would look something like this:\r\n```\r\n   let trainer = mlContext.Regression.Trainers.StochasticDualCoordinateAscent(\"Area\", \"Price\")\r\n```\r\n\r\ncc @glebuk for any additional input","Url":"https://github.com/dotnet/machinelearning/issues/3060","RelatedDescription":"Open issue \"Automatic conversion of data in the pipeline\" (#3060)"},{"Id":"423949354","IsPullRequest":false,"CreatedAt":"2019-03-21T21:26:18","Actor":"Ivanidzo4ka","Number":"3054","RawContent":null,"Title":"Textloader behavior for non present columns","State":"open","Body":"```\r\nMLContext mlContext = new MLContext();\r\nmlContext.Log += MlContext_Log;\r\nvar loader = mlContext.Data.CreateTextLoader(new Data.TextLoader.Options()\r\n{\r\n    Columns = new[] { new Data.TextLoader.Column(\"A\", Data.DataKind.Int32, 0),\r\n                      new Data.TextLoader.Column(\"B\", Data.DataKind.Single, 1),\r\n                      new Data.TextLoader.Column(\"C\", Data.DataKind.Single, 2),\r\n                      new Data.TextLoader.Column(\"D\", Data.DataKind.Single, 3),\r\n                      new Data.TextLoader.Column(\"E\", Data.DataKind.Single, 4),\r\n                      new Data.TextLoader.Column(\"F\", Data.DataKind.Single, 5),\r\n                      new Data.TextLoader.Column(\"G\", Data.DataKind.Single, 6),}\r\n                      });\r\nvar data =loader.Load(\"sample.txt\");\r\nvar pr = data.Preview();\r\n}\r\n\r\nprivate static void MlContext_Log(object sender, LoggingEventArgs e)\r\n{\r\n    Console.WriteLine(e.Message);\r\n}\r\n```\r\n[sample.txt](https://github.com/dotnet/machinelearning/files/2994016/sample.txt)\r\n\r\nRight now if I inspect any column other than \"A\" I would see array of zeros.\r\nI see no messages in log regarding: column with index 1 not found.\r\nI'm not sure why it's zeros and not NaN (so we can treat them as missing values).\r\nI don't know what behavior should TextLoader have, either fail or send warning messages, but I found it strange what we don't do anything right now.","Url":"https://github.com/dotnet/machinelearning/issues/3054","RelatedDescription":"Open issue \"Textloader behavior for non present columns\" (#3054)"},{"Id":"423927392","IsPullRequest":false,"CreatedAt":"2019-03-21T20:29:28","Actor":"yaeldekel","Number":"3053","RawContent":null,"Title":"Defining a TextLoader with `hasHeader=true` and no data sample results in no slot names","State":"open","Body":"Related to issue #2663. We need to document the fact that if we create a `TextLoader` specifying `hasHeader=true` but without a data sample, then we are actually just letting the loader know that it needs to skip the first line when it eventually loads from a text file. The output schema of that `TextLoader` will not contain slot names, since the schema is created when the loader is created, and not when `Load` is called.","Url":"https://github.com/dotnet/machinelearning/issues/3053","RelatedDescription":"Open issue \"Defining a TextLoader with `hasHeader=true` and no data sample results in no slot names\" (#3053)"},{"Id":"423917863","IsPullRequest":false,"CreatedAt":"2019-03-21T20:05:18","Actor":"MaximRouiller","Number":"3051","RawContent":null,"Title":"LoadFromTextFile invalid model throw NullReferenceException","State":"open","Body":"### System information\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTried to load a model from [this Kaggle](https://www.kaggle.com/harlfoxem/housesalesprediction/kernels). My model definition skipped a column index.\r\n\r\n- **What happened?**\r\n\r\nNullReferenceException\r\n\r\n- **What did you expect?**\r\n\r\nA user-friendly error message. \r\n\r\n### Source code / logs\r\n\r\n```\r\npublic class KingCountyHouseData\r\n{\r\n        [LoadColumn(0)]\r\n        public string Id { get; set; }\r\n\r\n        [LoadColumn(1)]\r\n        public string SaleDate { get; set; }\r\n        public float Price { get; set; } // <== this was missed\r\n\r\n        [LoadColumn(2)]  // <=== this should be +1\r\n        public float Bedrooms { get; set; }\r\n\r\n        [LoadColumn(3)]  // <=== this should be +1\r\n        public float Bathrooms { get; set; }\r\n\r\n        [LoadColumn(4)]  // <=== this should be +1\r\n        public float LivingAreaSquareFoot { get; set; }\r\n\r\n        [LoadColumn(5)]  // <=== this should be +1\r\n        public float Floors { get; set; }\r\n\r\n        [LoadColumn(6)]  // <=== this should be +1\r\n        public bool Waterfront { get; set; }\r\n\r\n        //.... more fields below.\r\n}\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/3051","RelatedDescription":"Open issue \"LoadFromTextFile invalid model throw NullReferenceException\" (#3051)"},{"Id":"423868546","IsPullRequest":false,"CreatedAt":"2019-03-21T18:01:48","Actor":"CESARDELATORRE","Number":"3048","RawContent":null,"Title":"MLContext class reference-doc should explain the seed parameter better and further introduction about the catalogs, etc.","State":"open","Body":"This is the reference doc for MLContext constructor:\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.mlcontext.-ctor?view=ml-dotnet#Microsoft_ML_MLContext__ctor_System_Nullable_System_Int32__System_Int32_ \r\n\r\nCurrently, it just says the following about the 'seed' parameter:\r\n\r\n_\"Random seed. Set to null for a non-deterministic environment.\"_\r\n\r\nThe info provided here is too simple. This should be the place to explain in further details what the MLContext class is for.\r\n\r\nEspecially, the `seed `parameter should be properly explained here. Why do we have such a parameter in the constructor and when to use it (deterministic results, etc.) with further explanations and example cases.\r\n\r\nAlso, explain if the `seed ` parameter is applicable or impacts only when using MLContext for training (creating a model) or if `seed `parameter matters or not if you are just loading a model from a .ZIP file and scoring with it etc.\r\n\r\nFinally, if it is recommended in most cases to have a seed, why don't we put any value as a by default value for the `seed ` parameter? For getting started users, the seed parameter feels really strange..\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3048","RelatedDescription":"Open issue \"MLContext class reference-doc should explain the seed parameter better and further introduction about the catalogs, etc.\" (#3048)"},{"Id":"423856597","IsPullRequest":true,"CreatedAt":"2019-03-21T17:35:01","Actor":"Ivanidzo4ka","Number":"3046","RawContent":null,"Title":"Attempt to fix error messages types","State":"open","Body":"fixes https://github.com/dotnet/machinelearning/issues/3045\r\n\r\nhttps://github.com/dotnet/machinelearning/issues/3037\r\n>Error messages are painful - I4, R4 etc. etc. - most people will not know what these are.\r\n\r\nLet's see is it so easy as I think, or I need to change all baseline","Url":"https://github.com/dotnet/machinelearning/pull/3046","RelatedDescription":"Open PR \"Attempt to fix error messages types\" (#3046)"},{"Id":"423844703","IsPullRequest":false,"CreatedAt":"2019-03-21T17:09:24","Actor":"eerhardt","Number":"3045","RawContent":null,"Title":"DataViewType ToString should not use old DataKind names","State":"open","Body":"All the DataViewType ToString methods are returning DataKind names instead of \"normal .NET\" type names.\r\n\r\n```\r\nI4\r\nU8\r\nR4\r\netc.\r\n```\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/5b22420d28c0cacc9b265d043555b6d11a017b91/src/Microsoft.ML.DataView/DataViewType.cs#L203-L222\r\n\r\nWe should change these to use typical .NET type names, like we have in the public API.\r\n\r\nNote: there are a bunch of tests that will need to be fixed with this since it baselines these names in baseline files.","Url":"https://github.com/dotnet/machinelearning/issues/3045","RelatedDescription":"Open issue \"DataViewType ToString should not use old DataKind names\" (#3045)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-03-24T05:30:30.5699937Z","RunDurationInMilliseconds":541}