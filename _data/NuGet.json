{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11150326794","Type":"PullRequestEvent","CreatedAt":"2019-12-23T22:07:57","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7789","RelatedDescription":"Opened pull request \"[Gravatar Proxy] Add missing unit test\" (#7789) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"11149352408","Type":"IssuesEvent","CreatedAt":"2019-12-23T18:23:27","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/6426","RelatedDescription":"Reopened issue \"504 Gateway error\" (#6426) at NuGet/NuGetGallery","RelatedBody":"On a `dotnet restore` I get a message that the nuget index cannot be reached:\r\n\r\n```\r\n/usr/local/share/dotnet/sdk/2.1.302/NuGet.targets(114,5): error : Unable to load the service index for source https://api.nuget.org/v3/index.json.\r\n```\r\n\r\nWhen trying to GET the file through curl, an error is returned:\r\n\r\n```\r\n$ date && curl -i -XGET  https://api.nuget.org/v3/index.json\r\nzo 16 sep 2018 13:12:05 CEST\r\nHTTP/2 504 \r\ncontent-type: text/html\r\ndate: Sun, 16 Sep 2018 11:12:05 GMT\r\netag: 0x8D57D5593FD2F39\r\nserver: ECAcc (ama/8ACA)\r\nstrict-transport-security: max-age=31536000\r\nx-cdn-rewrite: Root path in dist\r\nx-content-type-options: nosniff\r\ncontent-length: 357\r\n\r\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\r\n         \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\r\n\t<head>\r\n\t\t<title>504 - Gateway Timeout</title>\r\n\t</head>\r\n\t<body>\r\n\t\t<h1>504 - Gateway Timeout</h1>\r\n\t</body>\r\n</html>\r\n```"},{"Id":"11147992022","Type":"PullRequestEvent","CreatedAt":"2019-12-23T14:17:28","Actor":"xavierdecoster","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7788","RelatedDescription":"Opened pull request \"Dev telemetry\" (#7788) at NuGet/NuGetGallery","RelatedBody":"Consume NuGet.Jobs and ServerCommon updates for telemetry and heartbeats."},{"Id":"11141129998","Type":"IssuesEvent","CreatedAt":"2019-12-21T19:57:54","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7787","RelatedDescription":"Opened issue \"Add catalog tail resource\" (#7787) at NuGet/NuGetGallery","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\nApplications that follow catalog are most of the time interested in catalog tail - last few pages to process the changes since the last attempt. To figure out what are the last pages, however, app needs to download the [catalog index](https://api.nuget.org/v3/catalog0/index.json) every time. Currently, this file is 1.7 MB in size (and it only grows), changes almost all the time, and is not compressed. So, if app needs to process changes once a minute it has to download it once a minute, generating 100 MB of network traffic per hour while it only needs the last few records from it. This is especially bad if one wants to poll catalog from a web page: it will hog user's network traffic and if there are 100 users, it will be 100 times as bad for the server hosting the blob.\r\n\r\n### Existing workarounds\r\n* Since page numbering in nuget.org is pretty straightforward, instead of checking the catalog index for new pages, the job can probe for the next page by itself. This is really implementation specific and can be easily be broken;\r\n* Range requests on the catalog index. Relies on the service hosting it to support them, on the catalog index to be append only and never change in the middle, which is not really true: ![image](https://user-images.githubusercontent.com/102933/71312909-f13cd480-23e5-11ea-9448-77e3abb910ac.png) It got better recently, but still, it's not documented that there is any order to the catalog index items, also implementation would require to be able to parse partial JSON.\r\n\r\n### Describe the solution you'd like\r\n\r\n#### Catalog tail resource\r\nSounds like the simplest thing to do: introduce a new resource that will contain last few entries (last 10, last week, does not matter much) from the catalog index. This will provide the required information for the jobs in most cases using the fraction of network bandwidth compared.\r\n\r\nA db2catalog modification would be needed to drop a blob with the last few entries of the catalog index whenever it gets updated provided at best effort: db2catalog will write the catalog index first, if that succeeds, will write the tail, if that fails it will not retry (assuming the blob itself was not corrupted during the attempt, it will be brought up-to-date state at next catalog update); if catalog index update fails, no tail write attempt is going to be made.\r\n\r\nProposed shape:\r\n```JSON\r\n{\r\n  \"commitId\": \"da5e4a25-eb45-4fc1-9522-e5363940db83\",\r\n  \"commitTimeStamp\": \"2019-12-21T19:31:28.1771475Z\",\r\n  \"count\": 9380,\r\n  \"nuget:lastCreated\": \"2019-12-21T19:31:26.053Z\",\r\n  \"nuget:lastDeleted\": \"2019-12-20T15:40:41.667804Z\",\r\n  \"nuget:lastEdited\": \"2019-12-21T19:31:26.053Z\",\r\n  \"latestItems\": [\r\n    {\r\n      \"@id\": \"https://api.nuget.org/v3/catalog0/page9377.json\",\r\n      \"@type\": \"CatalogPage\",\r\n      \"commitId\": \"9e348716-dbba-4322-bcfa-2c8a59102687\",\r\n      \"commitTimeStamp\": \"2019-12-21T07:19:46.8969541Z\",\r\n      \"count\": 549\r\n    },\r\n    {\r\n      \"@id\": \"https://api.nuget.org/v3/catalog0/page9378.json\",\r\n      \"@type\": \"CatalogPage\",\r\n      \"commitId\": \"02fa4280-e93d-4cd7-baba-a82f3ae8b92c\",\r\n      \"commitTimeStamp\": \"2019-12-21T17:03:22.1844852Z\",\r\n      \"count\": 550\r\n    },\r\n    {\r\n      \"@id\": \"https://api.nuget.org/v3/catalog0/page9379.json\",\r\n      \"@type\": \"CatalogPage\",\r\n      \"commitId\": \"da5e4a25-eb45-4fc1-9522-e5363940db83\",\r\n      \"commitTimeStamp\": \"2019-12-21T19:31:28.1771475Z\",\r\n      \"count\": 65\r\n    }  \r\n  ]\r\n}\r\n```\r\nI.e. it will have the same shape as the catalog index (I don't have an opinion on `@id`, `@type` and `@context` properties, can keep them for consistency) with the exception of the `items` property replaced with the `latestItems`. I am a bit unsure about the property rename, though: if the name is kept the same, apps would be able to effortlessly fall back to the catalog index if there are issues with the. \r\n\r\nThe `commitId`, `commitTimeStamp` and others are nice to have and provide a way to validate that tail is not lagging behind the main index too much.\r\n\r\n#### Organize the catalog pages into a linked list\r\n\r\nChange the protocol to make page blobs to include the link to the next page if there is one.\r\n\r\nProposed shape:\r\n\r\n```JSON\r\n{\r\n  \"@id\": \"https://api.nuget.org/v3/catalog0/page3615.json\",\r\n  \"@type\": \"CatalogPage\",\r\n  \"commitId\": \"76181692-ddf1-4d03-b6b9-0cc1046b30e7\",\r\n  \"commitTimeStamp\": \"2018-03-30T12:45:42.3023362Z\",\r\n  \"count\": 550,\r\n  \"parent\": \"https://api.nuget.org/v3/catalog0/index.json\",\r\n  \"nextSibling\": \"https://api.nuget.org/v3/catalog0/page3616.json\", // this\r\n  \"items\": [ ... ]\r\n}\r\n```\r\n\r\nI.e. `nextSibling` (mostly to align with [DOM API](https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling), alternatively can be `nextPage`, `nextChild` or whatever else) property is added to a page and updated any time a page after the current is added.\r\n\r\n### Additional context\r\nThis all hinges on the assumption that there is an interest for processing the catalog by third parties. If there is little demand, probably not worth implementing."},{"Id":"11131183347","Type":"IssuesEvent","CreatedAt":"2019-12-20T01:44:36","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7786","RelatedDescription":"Opened issue \"[Azure Search] Azure Search Service does not reload query keys\" (#7786) at NuGet/NuGetGallery","RelatedBody":"1. Query (read-only) key was rotated at T-48H\r\n1. Old query key was invalided at T-0H\r\n1. Service started failing all requests.\r\n\r\nThe sad part is monitoring was saying that secrets were being reloaded. This indicates a bug in secret reloading for the Azure Search client. Maybe it's a singleton when it should really be reloaded periodically?\r\n\r\n![image](https://user-images.githubusercontent.com/94054/71222960-37c7ed00-2287-11ea-9784-f43d687ac5ef.png)\r\n"},{"Id":"11130841848","Type":"IssuesEvent","CreatedAt":"2019-12-20T00:25:56","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7785","RelatedDescription":"Opened issue \"[C2R] Implement Entity Builder: populate registration entities from catalog\" (#7785) at NuGet/NuGetGallery","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11152848518","Type":"IssuesEvent","CreatedAt":"2019-12-24T10:00:14","Actor":"v-nancyj","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8973","RelatedDescription":"Opened issue \" [Test Failure] Expected error NU1004 disappear when building solution after enabling “RestoreLockedMode”\" (#8973) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet Version: Dev\\5.5.0.6330\r\nVS Version: Master\\29623.15\r\nOS Version: Windows-10-Enterprise-RS5\r\n\r\n## Installation steps: \r\n[https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3341765&view=results](url)\r\n\r\n## Repro steps: \r\n1. Create above corresponding projects via VS. \r\n2. Install a few ‘PackageReference’ packages into the projects.\r\n3. Set MSBuild property “RestorePackagesWithLockFile” to true in csproj file.\r\n  `<RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>`\r\n4. Do a restore.\r\n5. Check it should have generated ‘packages.lock.json’ file alongside *.csproj file.\r\n6. Set msbuild property “RestoreLockedMode” to “true”.\r\n    `<RestoreLockedMode>true</RestoreLockedMode>`\r\n7. Install another package.\r\n8. It should still work fine and update ‘packages.lock.json’ file.\r\n9. Manually add a new PackageReference item into csproj file.\r\n```\r\n<PackageReference Include=\"NUnit\">\r\n   <Version>3.12.0</Version>\r\n </PackageReference>\r\n```\r\n10. Perform restore.\r\n11. Restore should fail with error “NU1004”\r\n12. Build the solution\r\n\r\n## Expected:\r\nThe error was still showed on error list.\r\n\r\n## Actual:\r\nThe error disappear on error list.\r\n\r\n## Here is the record video for the repro steps:\r\n![restore](https://user-images.githubusercontent.com/20632775/71407713-ccab5b80-2676-11ea-9195-da8a996d5488.gif)\r\n\r\n## Notes: \r\n1. The issue repro on .NET Core project.\r\n2. The issue repro on Master\\29623.15 + NuGet Client Dev\\5.5.0.6355.\r\n3. The issue is not stable, the repro rate is almost 95% for us.\r\n\r\n\r\n"},{"Id":"11151420215","Type":"IssuesEvent","CreatedAt":"2019-12-24T04:07:16","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8967","RelatedDescription":"Closed issue \"Update the NuGet VS depedencies to the recent 16.4 ones so we can use the Service Broker APIs.\" (#8967) at NuGet/Home","RelatedBody":"Prereq to https://github.com/NuGet/Home/issues/8896."},{"Id":"11151166143","Type":"IssuesEvent","CreatedAt":"2019-12-24T02:45:09","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8832","RelatedDescription":"Closed issue \"[Test Failure]Confusing warning and error occur when building the UWP project after installing the package “Blend.Interactivity.Wpf”\" (#8832) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Release-5.4.x\\5.4.0.6314\r\nVS Version: D16.4\\29516.08\r\nOS: Windows-10-Enterprise-19H1-04-05-2019 ENU\r\n## Detailed repro steps \r\n1. Create a C# Blank App (Universal Windows) template via VS.\r\n2. Open PM UI of the project by right-clicking the project->Manage NuGet Packages… in Solution Explorer.\r\n3. Search the package “Blend.Interactivity.Wpf” in Browse tab and install it.\r\n4. Warning NU1701 show in the Error List dialog and build the solution.\r\n## Expected\r\nWarning NU1701 will still show in the Error List dialog when building/rebuilding the solution. (Same with the result of installing the same package into C# .Net Core Console App as below screenshot)\r\n![CorrectWarning](https://user-images.githubusercontent.com/20632625/69046216-6c038000-0a33-11ea-9e86-f167a938d1c1.png)\r\n\r\n## Actual\r\nConfusing warning PRI257 and file not found error show in the Error List dialog when building/rebuilding the solution as below screenshot.\r\n![ConfusingWarning](https://user-images.githubusercontent.com/20632625/69046223-6efe7080-0a33-11ea-884c-829d0f2aab34.png)\r\n\r\n## Note\r\n1.It  repro on the C# UWP template in Blend for VS and not repro on .NET Core templates.\r\n2.It is not a regression bug since it repro on 16.1 GA (D16.1\\28916.193) with implicit NuGet 5.1.0.6013."},{"Id":"11150693798","Type":"IssuesEvent","CreatedAt":"2019-12-24T00:05:28","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8972","RelatedDescription":"Opened issue \"nuget 4 restore errors\" (#8972) at NuGet/Home","RelatedBody":"Investigate what's going on here."},{"Id":"11150690040","Type":"IssuesEvent","CreatedAt":"2019-12-24T00:04:10","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8971","RelatedDescription":"Opened issue \"Insertion tracking\" (#8971) at NuGet/Home","RelatedBody":"VS\n* [ ] TODO\n\n.NET Core 5.0\n* [ ] TODO"},{"Id":"11150687109","Type":"IssuesEvent","CreatedAt":"2019-12-24T00:03:08","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8970","RelatedDescription":"Opened issue \"RPS runs failing consistently\" (#8970) at NuGet/Home","RelatedBody":"It looks like our RPS runs are either not running, or just plain failing:\n\n![Annotation 2019-12-23 160153.png](https://images.zenhubusercontent.com/5d4c83663a9f586514e9bc72/23638d15-8f85-436f-b233-4be55330d488)"},{"Id":"11150631650","Type":"IssuesEvent","CreatedAt":"2019-12-23T23:42:26","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8969","RelatedDescription":"Opened issue \"Investigate E2E machine failures\" (#8969) at NuGet/Home","RelatedBody":"An example: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=3342180\r\n\r\n02 and 03 are failing. \r\n\r\n@donnie-msft has already disabled couple of other machines.\r\n\r\n01,04,06 have been disabled throughout people on the team.\r\n\r\nWe should keep this task open until we diagnose the issues that are happening with our scripts. "},{"Id":"11150618610","Type":"IssuesEvent","CreatedAt":"2019-12-23T23:37:54","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8968","RelatedDescription":"Opened issue \"Address VS threading warnings\" (#8968) at NuGet/Home","RelatedBody":"\r\n- [ ] VSTHRD003\r\n- [ ] VSTHRD010\r\n- [ ] VSTHRD100\r\n- [ ] VSTHRD109\r\n- [ ] VSSDK004\r\n- [ ] VSSDK005\r\n- [ ] VSSDK006"},{"Id":"11150223102","Type":"IssuesEvent","CreatedAt":"2019-12-23T21:40:29","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8888","RelatedDescription":"Closed issue \"Insertion of NuGet 5.5.0-preview.2.6330\" (#8888) at NuGet/Home","RelatedBody":"VS:\n- [x] Insertion PR: [217574](https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/217574)\n\n.NET Core 3.1.2xx\n- [ ] SDK \n- [x] CLI \n- [x] Toolset \n\n.NET 5\n- [ ] SDK \n- [ ] CLI \n- [x] Toolset "},{"Id":"11149463179","Type":"IssuesEvent","CreatedAt":"2019-12-23T18:48:17","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8967","RelatedDescription":"Opened issue \"Update the NuGet VS depedencies to the recent 16.4 ones so we can use the Service Broker APIs.\" (#8967) at NuGet/Home","RelatedBody":"Prereq to https://github.com/NuGet/Home/issues/8896."},{"Id":"11149248142","Type":"IssuesEvent","CreatedAt":"2019-12-23T18:01:37","Actor":"MarkPflug","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8966","RelatedDescription":"Opened issue \"Don't default package description to \"Package Description\".\" (#8966) at NuGet/Home","RelatedBody":"If I create a new class library project (sdk-style) and \"pack\" it, it produces a package with a description of \"Package Description\". I can override this by providing a `<Description>` property in my csproj (such an override cannot be empty). If it is a required field in the package, make it a build error (with an explanation of how to define it) if it isn't defined rather than defaulting it to a useless value.\r\n\r\nIf you don't think this is a problem, then I would counter with:\r\nhttps://www.nuget.org/packages?q=%22Package+Description%22\r\n21,031 results\r\n\r\nEven a lot of Microsoft's own packages have this default description. Honestly, it's a bit embarrassing."},{"Id":"11144473514","Type":"IssuesEvent","CreatedAt":"2019-12-23T01:44:48","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8948","RelatedDescription":"Closed issue \"Github as a PSRepository?\" (#8948) at NuGet/Home","RelatedBody":"We have a local Enterprise GitHub instance. We would like to make use of standard installation tools for both PowerShell and Python code. We want to install only what is needed and not replicate the entire project repository onto every machine that will run the code.\r\n\r\nIt appears that we could create a local Enterprise NuGet server. Is that needed?\r\n\r\nWhere can I find information on publishing a GitHub project to NuGet?\r\n\r\nCan GitHub act as a PSRepository which would make PowerShellGet commands see it as a PSRepository?\r\n\r\nWe need to do the same thing for Python applications and modules? Can a NuGet server act as a repository for Python installations? Or, is there a way to publish a GitHub project to PyPI?"},{"Id":"11139030535","Type":"IssuesEvent","CreatedAt":"2019-12-21T01:21:25","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8951","RelatedDescription":"Closed issue \"CSProj doesn't find central version from Directory.Packages.props\" (#8951) at NuGet/Home","RelatedBody":"I created Directory.Packages.props file at solution level, but project doesn't refer Directory.Packages.props for version. Followed steps from https://github.com/NuGet/Home/wiki/Centrally-managing-NuGet-package-versions. \r\n\r\n[central-level-pkg.zip](https://github.com/NuGet/Home/files/3971647/central-level-pkg.zip)\r\n@lovakumar\r\n\r\nPlease suggest if I am missing something. \r\n\r\n"},{"Id":"11137431725","Type":"IssuesEvent","CreatedAt":"2019-12-20T19:19:51","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8965","RelatedDescription":"Closed issue \"[Test Failure]Confusing supported .NET Framework version v0.0 show in the error NU1202 message when installing a package into a project with incompatible framework\" (#8965) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.5.0.6353\r\nVS Version: Master\\29619.96\r\nOS: Windows-10-Enterprise-RS5\r\n## Detailed repro steps \r\n1. Create a C# Blank App (Universal Windows) template via VS.\r\n2. Open PM UI of the project by right-clicking the project->Manage NuGet Packages… in Solution Explorer.\r\n3. Search the package “Blend.Interactivity.Wpf” in Browse tab and install it.\r\n4. Look at the error message in Error List window.\r\n## Expected\r\nPackage supported .NET Framework version v0.0 will not show in the error NU1202 message.\r\n## Actual\r\nConfusing supported .NET Framework version v0.0 show in the error NU1202 message as below screenshot. NuGet should prevent user to input wrong .NET Framework version if that is coming from user.\r\n![NU1202ErrorMessage](https://user-images.githubusercontent.com/20632625/71240297-b8e4ba00-2343-11ea-9a63-6d55dff07711.png)\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are… https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-12-25T05:30:44.7522169Z","RunDurationInMilliseconds":1763}