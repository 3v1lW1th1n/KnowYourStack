{"Data":{"Blog":{"FeedItems":[{"Title":"ActivityTask: A Helper for Async/Await on Android","PublishedOn":"2017-09-25T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Google I/O, several members of the Xamarin team attended the Architecture Component talk on Android lifecycle (which I recommend you watch). While the solutions presented there are interesting and, in some cases, map to patterns we already have in .NET, it resonated with those of us present because of how those Android lifecycle details [&#8230;]","Href":"https://blog.xamarin.com/activitytask-helper-asyncawait-android/","RawContent":null},{"Title":"Podcast: Android Oreo, iOS 11, and Xamarin.Forms Tips & Tricks","PublishedOn":"2017-09-22T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I cover Xamarin support for Android Oreo and iOS 11, share tips for beating the learning curve with Xamarin.Forms, talk upcoming releases in the pipeline, and more! Be sure to download today&#8217;s episode from your favorite podcasting app. Subscribe or Download Today Keeping up with [&#8230;]","Href":"https://blog.xamarin.com/podcast-android-oreo-ios-11-xamarin-forms-tips-tricks/","RawContent":null},{"Title":"Protecting Your Xamarin Apps with Dotfuscator","PublishedOn":"2017-09-20T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a special guest post from Joe Sewell, a developer on the Dotfuscator team at PreEmptive Solutions. Let&#8217;s be honest, releasing a library, desktop app, or mobile app can be a bit scary. Once your software is freely available to the world, you lose a certain degree of control over how it will be [&#8230;]","Href":"https://blog.xamarin.com/protecting-xamarin-apps-dotfuscator/","RawContent":null},{"Title":"Augment Reality with Xamarin and iOS 11","PublishedOn":"2017-09-19T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the showcase features of iOS 11 is ARKit, an augmented-reality mode available on devices powered by A9 and newer chips (basically, 6S and better iPhones, 2017 iPads, and iPad Pros). With ARKit, users hold up the device and view a composite of the video feed and computer-generated imagery (either 2D SpriteKit or 3D [&#8230;]","Href":"https://blog.xamarin.com/augment-reality-xamarin-ios-11/","RawContent":null},{"Title":"Learn How The Lean Cook Uses Mobile to Drive Revenue and Promote Healthy Living","PublishedOn":"2017-09-18T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Lean Cook, a popular UK diet and fitness blog started as a hobby by a husband and wife team, is a prime example of how to design apps for the user. Instead of simply replicating web content on a smaller screen, the team crafted an interactive shopping and cooking experience. They’ve grown a loyal following, and their latest project (available [&#8230;]","Href":"https://blog.xamarin.com/learn-lean-cook-uses-mobile-drive-revenue-promote-healthy-living/","RawContent":null},{"Title":"Xamarin.Forms: Tips for Beating the Learning Curve","PublishedOn":"2017-09-15T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As a first time user learning any new technology or pattern, there’s always a curve, and over the years I&#8217;ve stood at the threshold of a product and gazed up that curve to determine how painfully steep it appeared and how long it would take until I was productive. Now, as the Program Manager for Xamarin.Forms, [&#8230;]","Href":"https://blog.xamarin.com/xamarin-forms-tips-beating-learning-curve/","RawContent":null},{"Title":"Xamarin All-Stars at .NET Conf 2017!","PublishedOn":"2017-09-14T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Join Xamarin Product Managers and Engineers at .NET Conf 2017, a free virtual event for any developer. This year&#8217;s speaker line-up consists of all-star Xamarin speakers, including Miguel de Icaza, James Montemagno, and Mikayla Hutchinson, who will present on Xamarin tooling and the latest on what’s happening with Xamarin and related technologies. What&#8217;s .NET Conf? [&#8230;]","Href":"https://blog.xamarin.com/xamarin-stars-net-conf-2017/","RawContent":null},{"Title":"Get Your Apps Ready for iOS 11!","PublishedOn":"2017-09-13T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We’ve just updated our iOS 11 support to go along with the Xcode 9 GM Seed release. You can use this build along with the Xcode 9 GM to submit applications that take advantage of the new features in iOS 11, tvOS 11 and watchOS 4 to the Apple AppStore. We also have awesome new sample [&#8230;]","Href":"https://blog.xamarin.com/get-apps-ready-ios-11/","RawContent":null},{"Title":"Xamarin.Android 8.0 Gets Even Sweeter with Oreo","PublishedOn":"2017-09-11T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Android 8.0 Oreo is by far the sweetest version of Android to date, with great new features including notification channels, notification badges, custom fonts in XML, downloadable fonts, instant apps, background limits, autofill, and picture-in-picture (PIP). We&#8217;re excited to announce Xamarin.Android support for Android Oreo in our latest release of Xamarin.Android for both Visual Studio [&#8230;]","Href":"https://blog.xamarin.com/xamarin-android-8-0-gets-even-sweeter-with-oreo/","RawContent":null},{"Title":"Podcast: Android Oreo Support, Xamarin Live Player Preview 2, New iOS 11 Previews, and more!","PublishedOn":"2017-09-11T00:00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I discuss all of the amazing new previews available to Xamarin developers, including Android Oreo, iOS 11, Xamarin Live Player, Xamarin.Forms, and more! We also discuss some exciting news with the Xamarin MVP Program and a new certification level for Xamarin developers. Be sure to [&#8230;]","Href":"https://blog.xamarin.com/podcast-android-oreo-support-xamarin-live-player-preview-2-new-ios-11-previews/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"6633905132","Type":"PullRequestEvent","CreatedAt":"2017-09-25T16:30:54","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/897","RelatedDescription":"Opened pull request \"[tests] `JarContentBuilder` should locate java\" (#897) at xamarin/xamarin-android","RelatedBody":"- `JavacFullPath` was  hardcoded to `javac`\r\n- `JarFullPath` was harcoded to `jar`\r\n- Now uses `AndroidSdkInfo` to locate java\r\n- Tests using this should now pass on Windows"},{"Id":"6633870008","Type":"PullRequestEvent","CreatedAt":"2017-09-25T16:23:23","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/888","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] dx.jar command line too long.\" (#888) at xamarin/xamarin-android","RelatedBody":"Fixes https://bugzilla.xamarin.com/show_bug.cgi?id=59651\r\n\r\nWe were passing ALL the .class files in as parameters to the\r\ndx.jar invocation. Turns out we can just pass the top level\r\ndirectory. In this case `$(IntermediateOutputPath)android\\bin\\classes`\r\nwill do fine. Because its a directory dx will pick up any\r\n.class file it finds in any subdirectory.\r\n\r\nI did try this with the .jar files as well, but because allot\r\nof the libraries have a `lib` folder which contain a internal .jar\r\nfile it causes problems. This is because it produces dupicate types.\r\nSo rather than specificly ignore the lib folder (which migth change)\r\nwe will just stick to the current system."},{"Id":"6633714439","Type":"PullRequestEvent","CreatedAt":"2017-09-25T15:52:24","Actor":"cobey","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/896","RelatedDescription":"Merged pull request \"[Mono.Android] Regenerated api-26.xml.in update metadata (#893)\" (#896) at xamarin/xamarin-android","RelatedBody":"Somehow the latest class-parse gives more parameter names on api-26\r\n(we have no idea what caused that). That somehow resulted in some\r\nevent generation related breakage, which is also fixed in this change."},{"Id":"6633686364","Type":"PullRequestEvent","CreatedAt":"2017-09-25T15:47:07","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/896","RelatedDescription":"Opened pull request \"[Mono.Android] Regenerated api-26.xml.in update metadata (#893)\" (#896) at xamarin/xamarin-android","RelatedBody":"Somehow the latest class-parse gives more parameter names on api-26\r\n(we have no idea what caused that). That somehow resulted in some\r\nevent generation related breakage, which is also fixed in this change."},{"Id":"6633672354","Type":"PullRequestEvent","CreatedAt":"2017-09-25T15:44:43","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/893","RelatedDescription":"Closed pull request \"[src/Mono.Android] regenerated api-26.xml.in and fixed build on metadata.\" (#893) at xamarin/xamarin-android","RelatedBody":"Somehow the latest class-parse gives more parameter names on api-26\r\n(we have no idea what caused that). That somehow resulted in some\r\nevent generation related breakage, which is also fixed in this change."},{"Id":"6630373442","Type":"PullRequestEvent","CreatedAt":"2017-09-24T21:40:10","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/873","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] PackageReference and AndroidUseLatestPlatformSdk do not work together\" (#873) at xamarin/xamarin-android","RelatedBody":"Fixes https://bugzilla.xamarin.com/show_bug.cgi?id=59534\r\n\r\nWhen using `PackageReference` with our system it run before\r\n`_SetLatestTargetFrameworkVersion`. As a result it always\r\nuses a `$(TargetFrameworkVersion)` of v2.3 or what ever the\r\nuser defined in the project manually.\r\n\r\nSo we need to make sure that `_SetLatestTargetFrameworkVersion`\r\nruns as part of the `PackageReference` target chain. Fortunately\r\nthat chain is run as part of `ResolveNuGetPackageAssetsDependsOn`.\r\nAs well as `_GetRestoreTargetFrameworksOutput`.\r\nSo we just need to make sure that our target in run as part of\r\nthat target chain in order to fix this issue.\r\n\r\nWe also need to update a few NuGet specific properties to ensure\r\nthat it uses the correct `TargetPlatformMoniker`. This is done \r\nvia the `NuGetTargetMoniker`."},{"Id":"6627499041","Type":"PullRequestEvent","CreatedAt":"2017-09-23T03:42:26","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/895","RelatedDescription":"Merged pull request \"Bump to Java.Interop/d15-5/bf15aab1\" (#895) at xamarin/xamarin-android","RelatedBody":"Bumps to cecil/mono-2017-06/c0eb983d.\r\n\r\nUpdates to use the same Cecil branch+commit as mono/2017-06: the\r\ncecil/mono-2017-06 branch."},{"Id":"6626664180","Type":"PullRequestEvent","CreatedAt":"2017-09-22T20:34:23","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/895","RelatedDescription":"Opened pull request \"Bump to Java.Interop/d15-5/bf15aab1\" (#895) at xamarin/xamarin-android","RelatedBody":"Bumps to cecil/mono-2017-06/c0eb983d.\r\n\r\nUpdates to use the same Cecil branch+commit as mono/2017-06: the\r\ncecil/mono-2017-06 branch."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"6635574162","Type":"PullRequestEvent","CreatedAt":"2017-09-25T23:19:24","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1158","RelatedDescription":"Opened pull request \"[Android] Add platform specific for Elevation\" (#1158) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAdds a platform specific value of `Elevation` (a `float?`) to `VisualElement` on Android. This allows the end user to control the immediate value of [Elevation](https://developer.android.com/reference/android/view/View.html#attr_android:elevation) on Android where necessary. \r\n\r\nThis value has no effect on pre-Lollipop Android. \r\n\r\n### Bugs Fixed ###\r\n\r\n- Allows users to fix Fast button renderer popping up 'above' elements which should be higher in the z-order (e.g., see tests for Bugzilla39331 and Bugzilla40173)\r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n- `public static float? GetElevation(VisualElement element)`\r\n- `public static void SetElevation(VisualElement element, float? value)`\r\n- `public static float? GetElevation(this IPlatformElementConfiguration<Android, VisualElement> config)`\r\n- `public static IPlatformElementConfiguration<Android, VisualElement> SetElevation(this IPlatformElementConfiguration<Android, VisualElement> config, float? value)` \r\n\r\n### Behavioral Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6635417802","Type":"PullRequestEvent","CreatedAt":"2017-09-25T22:25:37","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1157","RelatedDescription":"Opened pull request \"[UWP] Fix ListView selection issues **Behavior change**\" (#1157) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n#1133 switched UWP `ListViews` to use `ItemClick` instead of `Tapped` to enable the keyboard Enter key as a selector. However, this renders any `TapGestures` inside the `ListView` inoperable, since those events are not routed through a `Click`. This change will preserve the changes made in #1133 as default but allow the users to switch back to the legacy mode via a platform specific.\r\n\r\n```\r\nusing Xamarin.Forms.PlatformConfiguration;\r\nusing Xamarin.Forms.PlatformConfiguration.WindowsSpecific;\r\n\r\n_list.On<Windows>().SelectionMode(ListViewSelectionMode.Inaccessible);\r\n```\r\n\r\n#1005 was a partial fix for the `ItemSelected` event firing twice, but the test case was incomplete, so we did not resolve the entire issue. This should be fully resolved now.\r\n\r\n### Bugs Fixed ###\r\n\r\n- [Bug 59718 - Multiple issues with listview and navigation in UWP](https://bugzilla.xamarin.com/show_bug.cgi?id=59718)\r\n- [Bug 44886 - UWP Listview ItemSelected event triggered twice for each selection](https://bugzilla.xamarin.com/show_bug.cgi?id=44886)\r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n - `enum ListViewSelectionMode`\r\n- `Xamarin.Forms.PlatformConfiguration.WindowsSpecific.ListView.SelectionMode`\r\n\r\n### Behavioral Changes ###\r\n\r\n`ListView`s on UWP will default to `Accessible` selection mode. This means that the Narrator and keyboard can interact with `ListView`s with expected results. However, this means that any `Element` within a ListView item with a `TapGesture` will no longer function as expected. At this time, these modes are mutually exclusive, and users will need to choose between an accessible `ListView` or functioning `TapGesture`s.\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6634361844","Type":"PullRequestEvent","CreatedAt":"2017-09-25T18:13:23","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1085","RelatedDescription":"Closed pull request \"[Core] Add ListViewCachingStrategy.RecycleElementAndDataTemplate\" (#1085) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nReduce ListView DataTemplate dynamism to enable caching DataTemplate by the type of the item in the ItemsSource. This in turn allows caching prototypical cells by the item type which are used under the hood to pre-compute height of a cell before scrolling on screen. \r\n\r\nOne thing to keep in mind about iOS when doing a code reivew: When iOS returns a cell via `DequeueReusableCell` it will only reclaim the cell after it appears and disappears. So just getting a cell to measure but never attaching/rendering it _will leak the cell_. So if we're gonna create a cell just for measuring then we only want to create it once _per type_ instead of once _per index_ (although even once per index is better than what we do now which is create a new cell every time an index appears). \r\n\r\nTesting yet to do:\r\n- [x] Improve existing strategy. \r\n- [x] Remove index -> type cache and instead re-ask for item each time and use it's type to hit type -> proto cell cache. \r\n- [x] Test multiple data templates.\r\n- [ ] Test with image? \r\n- [ ] Test changing DataTemplateSelector invalidates cache of item types to prototypical cells.\r\n- [x] Test grouping.\r\n- [x] Re-test bug fixed by async height estimation to see if this fixes that bug so code added for that fix can be removed. See: https://github.com/xamarin/Xamarin.Forms/pull/994\r\n- [x] Automate into a UITest\r\n- [ ] _TBD_ \"Flinging\" a list view causes a ton of cells to be created and not reclaimed. Understanding why that happens may be a task for another day. \r\n\r\n### Bugs Fixed ###\r\n\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=52487\r\n\r\n### API Changes ###\r\n\r\nAdded ListViewCachingStrategy.RecycleElementAndDataTemplate. When set OnSelectTemplate will be called once per item _type_ instead of once per _instance_. Consequently, a DataTemplate should be selected solely based on an items type and not any of it's data. Furthermore, the DataTemplate must be activated using the ctor that takes a Type.\r\n\r\nOne thing to note about iOS that drove the cache design: When iOS returns a\r\n\r\n### Behavioral Changes ###\r\n\r\nListView activates only as many cells as are visible on screen. Finally. \r\n\r\n### PR Checklist ###\r\n\r\nTODO: Commented out some code to fix other issues which may need to be added back if they're not fixed by this PR. \r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"},{"Id":"6631339399","Type":"PullRequestEvent","CreatedAt":"2017-09-25T06:52:05","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1148","RelatedDescription":"Merged pull request \"[Xaml/XamlC] better RD inflation\" (#1148) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nFixes some possible bugs introduced by the hack in #1138. Refactors the RD visitors to reuse the logic in other visitors.\r\n\r\nThis is based on #1138, and need to be rebased when the other PR is merged.\r\n\r\n### Bugs Fixed ###\r\n\r\n/\r\n\r\n### API Changes ###\r\n\r\n/\r\n\r\n### Behavioral Changes ###\r\n\r\n/\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"6636291381","Type":"PullRequestEvent","CreatedAt":"2017-09-26T04:18:49","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2775","RelatedDescription":"Opened pull request \"[AVFoundation] Adds missing Xcode9 API.\" (#2775) at xamarin/xamarin-macios","RelatedBody":"AVCapturePhotoOutput:\r\n\r\n* Adds missing members `DepthDataDeliverySupported` and `DepthDataDeliveryEnabled`\r\n  from `AVCapturePhotoOutputDepthDataDeliverySupport` category.\r\n\r\nAVCaptureDevice:\r\n\r\n* Adds missing members `ActiveDepthDataFormat`, `MinAvailableVideoZoomFactor` and\r\n  `MaxAvailableVideoZoomFactor` from `AVCaptureDeviceDepthSupport` category."},{"Id":"6636267815","Type":"PullRequestEvent","CreatedAt":"2017-09-26T04:07:31","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2774","RelatedDescription":"Opened pull request \"[AVFoundation] AVFoundation API Enhancements\" (#2774) at xamarin/xamarin-macios","RelatedBody":"Changes in AVFoundation\r\n===================\r\n\r\nAVCaptureSynchronizedDataCollection:\r\n\r\n* Obsoletes `From` method because the name does not makes sense in the current context.\r\n* Obsoletes `ObjectForKeyedSubscript` in favor of a C# indexer.\r\n* Adds `GetSynchronizedData` to replace obsoleted `From` method`.\r\n\r\nAVCaptureSynchronizedData:\r\n\r\n* Adds `[Abstract]` in XAMCORE_4_0 because it is an abstract superclass.\r\n\r\nAVCaptureDevice:\r\n\r\n* Adds strong typed API to `GetAuthorizationStatus` and `RequestAccessForMediaType`\r\n  using `AVAuthorizationMediaType` enum holding the only possible values.\r\n\r\nAVCaptureDepthDataOutput:\r\n\r\n* AVCaptureDepthDataOutput needs its default .ctor, there is no other way\r\n  to instantiate this class.\r\n\r\nTest\r\n====\r\n\r\nA test exercising the new API lives here:\r\n\r\nhttps://github.com/dalexsoto/XamarinTests/blob/4715069b2bd777009c94c32fd9eed56b81103264/AVCaptureDataOutputSynchronizerTest/AVCaptureDataOutputSynchronizerTest/ViewController.cs\r\n\r\nThe API needs an iPhone 7+, 8+ or X in order to run."},{"Id":"6635177359","Type":"PullRequestEvent","CreatedAt":"2017-09-25T21:20:01","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2766","RelatedDescription":"Closed pull request \"[AVFoundation] Adds missing Xcode9 API, fixes AVCaptureSynchronizedDataCollection, improves existing API, and fixes bug 59571\" (#2766) at xamarin/xamarin-macios","RelatedBody":"https://bugzilla.xamarin.com/show_bug.cgi?id=59571\r\n\r\nChanges in AVFoundation\r\n=======================\r\n\r\nAVCaptureSynchronizedDataCollection:\r\n\r\n* Adds `NSFastEnumerator` and `IEnumerable<AVCaptureOutput>` support.\r\n* Obsoletes `From` method because the name does not makes sense in the current context.\r\n* Obsoletes `ObjectForKeyedSubscript` in favor of a C# indexer.\r\n* Adds `GetSynchronizedData` to replace obsoleted `From` method`.\r\n\r\nAVCaptureSynchronizedData:\r\n\r\n* Adds `[Abstract]` in XAMCORE_4_0 because it is an abstract superclass.\r\n\r\nAVCapturePhotoOutput:\r\n\r\n* Adds missing members `DepthDataDeliverySupported` and `DepthDataDeliveryEnabled`\r\n  from `AVCapturePhotoOutputDepthDataDeliverySupport` category.\r\n\r\nAVCaptureDevice:\r\n\r\n* Adds strong typed API to `GetAuthorizationStatus` and `RequestAccessForMediaType`\r\n  using `AVAuthorizationMediaType` enum holding the only possible values.\r\n* Adds missing members `ActiveDepthDataFormat`, `MinAvailableVideoZoomFactor` and\r\n  `MaxAvailableVideoZoomFactor` from `AVCaptureDeviceDepthSupport` category.\r\n\r\nChanges in Foundation\r\n=====================\r\n\r\nNSFastEnumerator:\r\n\r\nWhen implementing `NSFastEnumerator` suppor in `AVCaptureSynchronizedDataCollection`\r\nI ran into a NRE whenever we tried to set the `mutationValue` from the returned state\r\nstruct, this is because `Marshal.ReadIntPtr` failed to read `state.mutationsPtr` due to\r\nhow `AVCaptureSynchronizedDataCollection` implements `NSFastEnumerator` protocol.\r\n\r\nThe `AVCaptureSynchronizedDataCollection` implementation stores the value of the number\r\nof items it is holding instead of a pointer to it, this was the reason why `ReadIntPtr` throws.\r\n\r\nNow, whenever `Marshal.ReadIntPtr` throws we directly use the value of `state.mutationsPtr` as a fallback.\r\n\r\nTest\r\n====\r\n\r\nA test exercising the new API lives here:\r\n\r\nhttps://github.com/dalexsoto/XamarinTests/blob/4715069b2bd777009c94c32fd9eed56b81103264/AVCaptureDataOutputSynchronizerTest/AVCaptureDataOutputSynchronizerTest/ViewController.cs#L174-L189\r\n\r\nUnfortunately, the API needs an iPhone 7+, 8+ or X in order to run."},{"Id":"6635130917","Type":"PullRequestEvent","CreatedAt":"2017-09-25T21:09:04","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2773","RelatedDescription":"Merged pull request \"Fix bug 58243 new PR\" (#2773) at xamarin/xamarin-macios","RelatedBody":"NSApplicationLaunchUserNotificationKey is missing\r\n\r\nThis replaces PR #2765"},{"Id":"6635125238","Type":"PullRequestEvent","CreatedAt":"2017-09-25T21:07:42","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2772","RelatedDescription":"Merged pull request \"[macOS] Fix new xtro failures introduced by the xcode9 branch (#2741)\" (#2772) at xamarin/xamarin-macios","RelatedBody":"Cherry-pick from master"},{"Id":"6634750046","Type":"PullRequestEvent","CreatedAt":"2017-09-25T19:41:40","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2771","RelatedDescription":"Merged pull request \"Bump maccore to get fix for #59667. (#2770)\" (#2771) at xamarin/xamarin-macios","RelatedBody":"https://bugzilla.xamarin.com/show_bug.cgi?id=59667"},{"Id":"6634726534","Type":"PullRequestEvent","CreatedAt":"2017-09-25T19:36:09","Actor":"jgold6","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2773","RelatedDescription":"Opened pull request \"Fix bug 58243 new PR\" (#2773) at xamarin/xamarin-macios","RelatedBody":"NSApplicationLaunchUserNotificationKey is missing\r\n\r\nThis replaces PR #2765"},{"Id":"6634481116","Type":"PullRequestEvent","CreatedAt":"2017-09-25T18:39:56","Actor":"jgold6","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/2765","RelatedDescription":"Closed pull request \"Fix bug 58243\" (#2765) at xamarin/xamarin-macios","RelatedBody":"NSApplicationLaunchUserNotificationKey is missing"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"912414874571038732","CreatedAt":"2017-09-25T20:33:52+00:00","UserScreenname":"xamarinhq","Text":"Learn how ActivityTask makes async/await easier to use in your #Xamarin Android mobile apps: https://t.co/drhcfIy4ht","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":38,"FavoriteCount":17,"RawContent":null},{"Id":"912343187083100165","CreatedAt":"2017-09-25T15:49:00+00:00","UserScreenname":"xamarinhq","Text":"Make your #XamarinForms apps accessible with Xamarin.Forms 2.3.4 + an example from the #XamarinEvolve 2016 app: https://t.co/auqnwBvyE2","Source":"<a href=\"http://sproutsocial.com\" rel=\"nofollow\">Sprout Social</a>","RetweetCount":33,"FavoriteCount":14,"RawContent":null},{"Id":"912103614059094017","CreatedAt":"2017-09-24T23:57:02+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the #Xamarin.Firebase.Messaging package to add FCM-based push notification features in your app:… https://t.co/IlUWyDYRGV","Source":"<a href=\"http://sproutsocial.com\" rel=\"nofollow\">Sprout Social</a>","RetweetCount":93,"FavoriteCount":38,"RawContent":null},{"Id":"911804140266778625","CreatedAt":"2017-09-24T04:07:02+00:00","UserScreenname":"xamarinhq","Text":"Deep Dive into #SkiaSharp for #XamarinForms with #Xamarin's Charles Petzold: https://t.co/mlySNkqQ63 https://t.co/WNuYhD19n9","Source":"<a href=\"http://sproutsocial.com\" rel=\"nofollow\">Sprout Social</a>","RetweetCount":69,"FavoriteCount":34,"RawContent":null},{"Id":"911313517848006657","CreatedAt":"2017-09-22T19:37:28+00:00","UserScreenname":"xamarinhq","Text":"This week on the @XamarinPodcast learn about #Xamarin support for #AndroidOreo and #iOS11, #XamarinForms, plus more: https://t.co/CDAYHoRh5t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":25,"FavoriteCount":22,"RawContent":null},{"Id":"910894395024699392","CreatedAt":"2017-09-21T15:52:02+00:00","UserScreenname":"xamarinhq","Text":"Our @XamarinU webinar with Charles Petzold on UrhoSharp 3D with #Xamarin Workbooks is about to start—join us:… https://t.co/CjCM7pVcd3","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":16,"FavoriteCount":8,"RawContent":null},{"Id":"910587508056051713","CreatedAt":"2017-09-20T19:32:34+00:00","UserScreenname":"xamarinhq","Text":"See how the #Dotfuscator from @PreEmptive can protect your #Xamarin apps and libraries from reverse engineering: https://t.co/hyhUzG4o9r","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":82,"FavoriteCount":27,"RawContent":null},{"Id":"910536790372683777","CreatedAt":"2017-09-20T16:11:02+00:00","UserScreenname":"xamarinhq","Text":"Last chance—don't forget to sign up for Charles Petzold's webinar tomorrow on UrhoSharp 3D with Xamarin Workbooks:… https://t.co/KilnMMfPtU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":10,"FavoriteCount":9,"RawContent":null},{"Id":"910535530965737486","CreatedAt":"2017-09-20T16:06:02+00:00","UserScreenname":"xamarinhq","Text":"Our friends at #VSMobileCenter have made it even easier to add mobile DevOps to your development process with great… https://t.co/YalQb8Jt8k","Source":"<a href=\"http://sproutsocial.com\" rel=\"nofollow\">Sprout Social</a>","RetweetCount":27,"FavoriteCount":16,"RawContent":null},{"Id":"910216295668383747","CreatedAt":"2017-09-19T18:57:30+00:00","UserScreenname":"xamarinhq","Text":"Xamarin's @lobrien  shows you how to  add augmented reality to your #Xamarin apps with #ARKit in #iOS11: https://t.co/FPBpyiRPEK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":81,"FavoriteCount":44,"RawContent":null},{"Id":"910192040188751872","CreatedAt":"2017-09-19T17:21:07+00:00","UserScreenname":"xamarinhq","Text":"Get your #Xamarin apps ready for #iOS11, #tvOS11, and #watchOS4 with updated #VisualStudio tools, docs, and samples: https://t.co/7eYTFe0O73","Source":"<a href=\"http://sproutsocial.com\" rel=\"nofollow\">Sprout Social</a>","RetweetCount":40,"FavoriteCount":26,"RawContent":null},{"Id":"910173151891468295","CreatedAt":"2017-09-19T16:06:04+00:00","UserScreenname":"xamarinhq","Text":"#Xamarin Partners are helping companies accelerate their mobile projects every day. Find a #XamarinPartner near you… https://t.co/IfYCiVzmVz","Source":"<a href=\"http://sproutsocial.com\" rel=\"nofollow\">Sprout Social</a>","RetweetCount":14,"FavoriteCount":10,"RawContent":null},{"Id":"909881970783551489","CreatedAt":"2017-09-18T20:49:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how The Lean Cook is using mobile to promote healthy living AND drive revenue in a crowded market:… https://t.co/UF1i6PVrtR","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":15,"FavoriteCount":3,"RawContent":null},{"Id":"909810012469514243","CreatedAt":"2017-09-18T16:03:05+00:00","UserScreenname":"xamarinhq","Text":"Request App Store ratings and reviews from your users with an in-app dialog using the SKStoreReviewController:… https://t.co/bSbfehKqcq","Source":"<a href=\"http://sproutsocial.com\" rel=\"nofollow\">Sprout Social</a>","RetweetCount":41,"FavoriteCount":18,"RawContent":null},{"Id":"908780317200179200","CreatedAt":"2017-09-15T19:51:26+00:00","UserScreenname":"xamarinhq","Text":"#XamarinForms Program Manager @davidortinau shares his tips for beating the learning curve: https://t.co/amiCZmJtYS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":38,"RawContent":null},{"Id":"908722845253083136","CreatedAt":"2017-09-15T16:03:04+00:00","UserScreenname":"xamarinhq","Text":"Ready to go mobile? @XamarinU offers 30-day free trials! Learn more: https://t.co/bVpjALvmoy https://t.co/4d4kRrEKka","Source":"<a href=\"http://sproutsocial.com\" rel=\"nofollow\">Sprout Social</a>","RetweetCount":30,"FavoriteCount":12,"RawContent":null},{"Id":"908428865781067776","CreatedAt":"2017-09-14T20:34:54+00:00","UserScreenname":"xamarinhq","Text":"Save the date for #dotNETconf, a FREE virtual event w/ talks from @JamesMontemagno, @migueldeicaza, &amp; @mjhutchinson: https://t.co/iTsu7CpsRx","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":83,"FavoriteCount":49,"RawContent":null},{"Id":"908360444636786694","CreatedAt":"2017-09-14T16:03:01+00:00","UserScreenname":"xamarinhq","Text":"Don't miss out! Sign up now for Charles Petzold's 9/21 @XamarinU webinar on UrhoSharp 3D with Xamarin Workbooks:… https://t.co/xNJ8ThNJr9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":10,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2017-09-26T05:30:35.7688683Z","RunDurationInMilliseconds":3419}