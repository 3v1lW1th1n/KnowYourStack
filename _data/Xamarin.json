{"Data":{"Blog":{"FeedItems":[{"Title":"Protect your Xamarin.Android Apps at Runtime with Dotfuscator","PublishedOn":"2018-10-12T18:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest blog by Bill Leach. Bill is CTO and co-founder of PreEmptive Solutions, makers of Dotfuscator and DashO application protection tools. Protecting Your Xamarin.Android Apps In a previous...","Href":"https://blog.xamarin.com/protect-xamarin-android-apps-dotfuscator/","RawContent":null},{"Title":"Upgrade Your App with Sentiment Analysis","PublishedOn":"2018-10-04T05:00:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Understanding the sentiment of an email or text message can be difficult. Someone may send a message, intending for it to be encouraging, but it may be accidentally interpreted as mean or...","Href":"https://blog.xamarin.com/upgrade-your-app-with-sentiment-analysis/","RawContent":null},{"Title":"Mobile Developer Events in October","PublishedOn":"2018-10-01T19:00:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":".NET Conf Local Events Watch all the live sessions from .NET Conf right on Channel 9! With a wide selection of content by feature speakers from the community and .NET product teams, take this...","Href":"https://blog.xamarin.com/mobile-developer-events-in-october/","RawContent":null},{"Title":"Using the Android Designer Split View","PublishedOn":"2018-09-24T05:01:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The ability to see the design view and layout XML at the same time, side by side, was one of our most requested features for the Android Designer. With Split View, new in the Visual Studio 2017...","Href":"https://blog.xamarin.com/split-view-android-designer/","RawContent":null},{"Title":"Get Ready for iOS 12 and Xcode 10","PublishedOn":"2018-09-19T19:49:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Support for iOS 12 and Xcode 10 to accompany Apple’s Xcode Gold Master (GM) release has just been announced! We have also published updated documentation and samples to help you quickly get started...","Href":"https://blog.xamarin.com/ios-12-and-xcode-10/","RawContent":null},{"Title":"Handling input from Apple Pencil","PublishedOn":"2018-09-19T17:52:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"After months of contemplation before finally buying an Apple Pencil to go along with the iPad Pro, it turns out it is as magical as they say! This blog post describes how to use Xamarin.iOS and Visual...","Href":"https://blog.xamarin.com/apple-pencil-handling-input/","RawContent":null},{"Title":"Xamarin.Forms 3.2.0 Released: Going Big with Little Things","PublishedOn":"2018-09-17T18:50:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms 3.2.0 continues the theme of previous releases to give you big wins by making little things much easier to do. The entire version 3 series has been about reducing the friction of doing...","Href":"https://blog.xamarin.com/xamarin-forms-3-2-0-released-going-big-with-little-things/","RawContent":null},{"Title":"Watch the .NET Conf Live!","PublishedOn":"2018-09-10T19:35:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The 3-day virtual developer conference co-organized by the .NET community and Microsoft is finally here! Now the question is how and where to watch the .NET Conf which will be completely...","Href":"https://blog.xamarin.com/watch-the-net-conf-live/","RawContent":null},{"Title":"Using Object Detection from inside your Xamarin app","PublishedOn":"2018-09-06T18:24:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Microsoft Cognitive Services provide a great way to get started with AI without being a machine learning or data science expert. A common favorite of cognitive services is the Custom Vision Service....","Href":"https://blog.xamarin.com/using-object-detection-from-inside-your-xamarin-app/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in September","PublishedOn":"2018-08-31T16:42:53+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin and .NET developer events this September: September 10: Los Angeles, CA. USA &#124; Los Angeles .NET Developers Group: LADOTNET &#8211; The Architectural Mindset by Jeremy Cameron September...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-september/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8425208651","Type":"PullRequestEvent","CreatedAt":"2018-10-16T01:16:13","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2299","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] fix DTBs for binding projects with aar files\" (#2299) at xamarin/xamarin-android","RelatedBody":"Fixes: http://feedback.devdiv.io/335298\r\nContext: https://github.com/xamarin/XamarinComponents/tree/master/Android/ARCore/samples\r\n\r\nThe linked example was failing a design-time build with:\r\n\r\n    \"XamarinComponents\\Android\\ARCore\\source\\Google.ARCore.csproj\" ->\r\n        (CoreCompile target) ->\r\n        Additions\\Additions.cs(63,101,63,107): error CS0234: The type or namespace name 'Anchor' does not exist in the namespace 'Google.AR.Core' (are you missing an assembly reference?)\r\n\r\nUsage of the `Anchor` type had sqiggly Intellisense errors in Visual\r\nStudio. Building the project was successful, however.\r\n\r\nLooking further, the contents of `obj\\Debug\\api.xml` seemed _wrong_\r\nafter a design-time build:\r\n\r\n    <api></api>\r\n\r\nReviewing the log, the `<ClassParse />` MSBuild task had no inputs:\r\n\r\n    ClassParse\r\n        ClassParse Task\r\n        OutputFile: obj\\Debug\\api.xml.class-parse\r\n        SourceJars:\r\n        DocumentationPaths:\r\n\r\nSo it looks, like using `LibraryProjectZip` build items need\r\nadditional MSBuild targets to run in order to work properly.\r\n\r\nI could get things working with the following workaround in the\r\nproject file:\r\n\r\n    <Import Project=\"$(MSBuildExtensionsPath)\\Xamarin\\Android\\Xamarin.Android.Bindings.targets\" />\r\n    <!-- Workaround -->\r\n    <PropertyGroup>\r\n        <CompileDependsOn>\r\n            AddLibraryJarsToBind;\r\n            $(CompileDependsOn);\r\n        </CompileDependsOn>\r\n    </PropertyGroup>\r\n\r\nI added the equivalent fix in `Xamarin.Android.Bindings.targets` as\r\nwell as a test for this scenario.\r\n\r\nFuture changes:\r\n- Design-time builds for binding projects are quite slow. In the\r\n  example above, it was taking around 16 seconds on my machine. This\r\n  will very likely count as a UI hang in Visual Studio.\r\n- I will file an issue for this, as I don't know how important it is\r\n  to improve, and how many developers are using binding projects."},{"Id":"8425192604","Type":"PullRequestEvent","CreatedAt":"2018-10-16T01:10:26","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2303","RelatedDescription":"Merged pull request \"[monodroid] Provide proper in-module address on Windows\" (#2303) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/2300\r\n\r\nCommit e99b02b7 [broke the Android Designer][0]:\r\n\r\n\t[monodroid] Cannot find 'libmonosgen-2.0.dll'. Looked in the following locations:\r\n\t[monodroid]   C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\tmpC7EC.tmp\\.__override__\r\n\t[monodroid]   C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\tmpC7EC.tmp\r\n\t[monodroid]   C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\tmpC7EC.tmp\r\n\t[monodroid]   C:\\Users\\VSSADM~1\\AppData\\Local\\Temp\\data\r\n\t[monodroid] Do you have a shared runtime build of your app with AndroidManifest.xml android:minSdkVersion < 10 while running on a 64-bit Android 5.0 target? This combination is not supported.\r\n\t[monodroid] Please either set android:minSdkVersion >= 10 or use a build without the shared runtime (like default Release configuration).\r\n\r\nThe *cause* of the issue is that commit e99b02b7 broke this seemingly\r\ninsane-looking code, in which an *address* to a static variable --\r\nresulting in a `char**` -- is cast (by the compiler) to a `wchar_t*`:\r\n\r\n\tGetModuleHandleExW (flags, (void*)&libmonoandroid_directory_path, &module)\r\n\r\nThe replacement *looks* saner:\r\n\r\n\twchar_t *dir_path = utils.utf8_to_utf16 (libmonoandroid_directory_path)\r\n\tBOOL retval = GetModuleHandleExW (flags, dir_path, &module);\r\n\r\nHowever, this \"sane-looking\" change is in fact wrong: due to the joys\r\nof [`GetModuleHandleExW()`][1], the `lpModuleName` parameter\r\n*need not be* an actual filesystem path.  If `dwFlags` contains\r\n`GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS` -- which it does --  then:\r\n\r\n> The *lpModuleName* parameter is an address in the module.\r\n\r\nAs it happens™, `&libmonoandroid_directory_path` is \"an address in the\r\nmodule\", which is why this used to work.  After the change,\r\n`dir_path` is either NULL or a heap-allocated value, *neither* of\r\nwhich is \"an address in the module.\"  Consequently, the e99b02b7\r\nchange meant that `GetModuleHandleExW()` always failed, and\r\n`AndroidSystem::get_libmonoandroid_directory_path()` always returned\r\nNULL on Windows.\r\n\r\nThe fix is to restore the pre-e99b02b7 behavior, passing \"an address\r\nin the module\" as the `dir_path` parameter to `GetModuleHandleExW()`.\r\n\r\n[0]: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2114540&view=logs\r\n[1]: https://docs.microsoft.com/en-us/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandleexw"},{"Id":"8425192584","Type":"IssuesEvent","CreatedAt":"2018-10-16T01:10:26","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2300","RelatedDescription":"Closed issue \"Android Designer integration broken on Windows due to C++ migration\" (#2300) at xamarin/xamarin-android","RelatedBody":"See test failures reported by integration tests in https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2114540&view=logs\r\n\r\nDue to the C++ migration, the following previous code:\r\n\r\nhttps://github.com/xamarin/xamarin-android/blob/5807e4e894b52056d632c023c1e304b09cbe0acf/src/monodroid/jni/monodroid-glue.c#L542\r\n\r\nwas changed to:\r\n\r\nhttps://github.com/xamarin/xamarin-android/blob/91a39725b1932b87103d2fed6228083e08a216b4/src/monodroid/jni/android-system.cc#L857-L858\r\n\r\nThe way `GetModuleHandleExW` works in our case relies on passing the second argument as a valid address contained inside the `libmono-android.dll` module (which is not coherent with its type signature). The change introduced in the new version means an invalid value is passed to the function where previously the address of the static variable `libmonoandroid_directory_path` was used for this purpose. This results in garbage being returned and the designer being unable to load `libmonosgen`\r\n\r\nAdditionally, the `wchar_t *dir_path = utils.utf8_to_utf16 (libmonoandroid_directory_path);` line in the new code looks like a no-op that's not needed."},{"Id":"8424734823","Type":"PullRequestEvent","CreatedAt":"2018-10-15T22:43:52","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2304","RelatedDescription":"Opened pull request \"[tests] use a \"real\" Xamarin.Forms app\" (#2304) at xamarin/xamarin-android","RelatedBody":"In the past `XamarinFormsAndroidApplicationProject` was incomplete:\r\n1. It was not a \"real app\", but the resemblance of one that merely\r\n   _compiled_.\r\n2. It did not have XAML or import/run Xamarin.Forms MSBuild tasks.\r\n3. It was not an app that could startup, and render Xamarin.Forms\r\n   content.\r\n\r\nSo I took the simplest Xamarin.Forms template from Visual Studio 2017\r\n15.8.7, a `Blank App`:\r\n- Added various new files as `EmbeddedResource` in\r\n  `Xamarin.ProjectTools`.\r\n- Used most files as-is, adding `${ROOT_NAMESPACE}` where appropriate.\r\n- Included `Tabbar.axml`, which has a \"custom view\".\r\n- Included proper XAML files.\r\n- Imported `Xamarin.Forms.targets`, and verified that `XamlG` and\r\n  `XamlC` are now both running.\r\n- Added `Xamarin.Android.Support.Vector.Drawable`, which avoids a\r\n  crash at runtime.\r\n- Updated to Xamarin.Forms 3.1.0.\r\n\r\nOverall, this should make any of our test cases using\r\n`XamarinFormsAndroidApplicationProject` much closer to reality."},{"Id":"8423936670","Type":"PullRequestEvent","CreatedAt":"2018-10-15T19:58:38","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2303","RelatedDescription":"Opened pull request \"[monodroid] Provide proper in-module address on Windows\" (#2303) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/2300\r\n\r\nCommit e99b02b7 [broke the Android Designer][0]:\r\n\r\n\t[monodroid] Cannot find 'libmonosgen-2.0.dll'. Looked in the following locations:\r\n\t[monodroid]   C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\tmpC7EC.tmp\\.__override__\r\n\t[monodroid]   C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\tmpC7EC.tmp\r\n\t[monodroid]   C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\tmpC7EC.tmp\r\n\t[monodroid]   C:\\Users\\VSSADM~1\\AppData\\Local\\Temp\\data\r\n\t[monodroid] Do you have a shared runtime build of your app with AndroidManifest.xml android:minSdkVersion < 10 while running on a 64-bit Android 5.0 target? This combination is not supported.\r\n\t[monodroid] Please either set android:minSdkVersion >= 10 or use a build without the shared runtime (like default Release configuration).\r\n\r\nThe *cause* of the issue is that commit e99b02b7 broke this seemingly\r\ninsane-looking code, in which an *address* to a static variable --\r\nresulting in a `char**` -- is cast (by the compiler) to a `wchar_t*`:\r\n\r\n\tGetModuleHandleExW (flags, (void*)&libmonoandroid_directory_path, &module)\r\n\r\nThe replacement *looks* saner:\r\n\r\n\twchar_t *dir_path = utils.utf8_to_utf16 (libmonoandroid_directory_path)\r\n\tBOOL retval = GetModuleHandleExW (flags, dir_path, &module);\r\n\r\nHowever, this \"sane-looking\" change is in fact wrong: due to the joys\r\nof [`GetModuleHandleExW()`][1], the `lpModuleName` parameter\r\n*need not be* an actual filesystem path.  If `dwFlags` contains\r\n`GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS` -- which it does --  then:\r\n\r\n> The *lpModuleName* parameter is an address in the module.\r\n\r\nAs it happens™, `&libmonoandroid_directory_path` is \"an address in the\r\nmodule\", which is why this used to work.  After the change,\r\n`dir_path` is either NULL or a heap-allocated value, *neither* of\r\nwhich is \"an address in the module.\"  Consequently, the e99b02b7\r\nchange meant that `GetModuleHandleExW()` always failed, and\r\n`AndroidSystem::get_libmonoandroid_directory_path()` always returned\r\nNULL on Windows.\r\n\r\nThe fix is to restore the pre-e99b02b7 behavior, passing \"an address\r\nin the module\" as the `dir_path` parameter to `GetModuleHandleExW()`.\r\n\r\n[0]: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2114540&view=logs\r\n[1]: https://docs.microsoft.com/en-us/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandleexw"},{"Id":"8423833698","Type":"IssuesEvent","CreatedAt":"2018-10-15T19:39:01","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2302","RelatedDescription":"Opened issue \"Improve Design-Time Builds for Binding Projects\" (#2302) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Clone this sample: https://github.com/xamarin/XamarinComponents/tree/master/Android/ARCore/samples\r\n2. Perform a design-time build (command line would be something like `msbuild /t:Compile /p:BuildingInsideVisualStudio=True /p:DesignTimeBuild=True`)\r\n3. Look how slow it is...\r\n\r\nOn my machine, the DTB was taking over 16 seconds! Needless to say, we could improve this.\r\n\r\n### Expected Behavior\r\n\r\nI think DTBs within Visual Studio are supposed to be under 500ms? maybe it was 250ms? Anyhow, *way* less than 16s!\r\n\r\n### Actual Behavior\r\n\r\nDTBs take quite some time.\r\n\r\n### Version Information\r\n\r\nI was using VS 2017 15.8.7 when I saw this.\r\n\r\n### Log File\r\n\r\nHere is an example binlog: \r\n[msbuild.zip](https://github.com/xamarin/xamarin-android/files/2480270/msbuild.zip)\r\n"},{"Id":"8423790155","Type":"PullRequestEvent","CreatedAt":"2018-10-15T19:30:25","Actor":"luhenry","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2301","RelatedDescription":"Opened pull request \"Fix llvm on macOS 10.13+\" (#2301) at xamarin/xamarin-android","RelatedBody":""},{"Id":"8423769980","Type":"IssuesEvent","CreatedAt":"2018-10-15T19:26:32","Actor":"garuma","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2300","RelatedDescription":"Opened issue \"Android Designer integration broken on Windows due to C++ migration\" (#2300) at xamarin/xamarin-android","RelatedBody":"See test failures reported by integration tests in https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2114540&view=logs\r\n\r\nDue to the C++ migration, the following previous code:\r\n\r\nhttps://github.com/xamarin/xamarin-android/blob/5807e4e894b52056d632c023c1e304b09cbe0acf/src/monodroid/jni/monodroid-glue.c#L542\r\n\r\nwas changed to:\r\n\r\nhttps://github.com/xamarin/xamarin-android/blob/91a39725b1932b87103d2fed6228083e08a216b4/src/monodroid/jni/android-system.cc#L857-L858\r\n\r\nThe way `GetModuleHandleExW` works in our case relies on passing the second argument as a valid address contained inside the `libmono-android.dll` module (which is not coherent with its type signature). The change introduced in the new version means an invalid value is passed to the function where previously the address of the static variable `libmonoandroid_directory_path` was used for this purpose. This results in garbage being returned and the designer being unable to load `libmonosgen`\r\n\r\nAdditionally, the `wchar_t *dir_path = utils.utf8_to_utf16 (libmonoandroid_directory_path);` line in the new code looks like a no-op that's not needed."},{"Id":"8423754750","Type":"PullRequestEvent","CreatedAt":"2018-10-15T19:23:32","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2299","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] fix DTBs for binding projects with aar files\" (#2299) at xamarin/xamarin-android","RelatedBody":"Fixes: http://feedback.devdiv.io/335298\r\nContext: https://github.com/xamarin/XamarinComponents/tree/master/Android/ARCore/samples\r\n\r\nThe linked example was failing a design-time build with:\r\n\r\n    \"XamarinComponents\\Android\\ARCore\\source\\Google.ARCore.csproj\" ->\r\n        (CoreCompile target) ->\r\n        Additions\\Additions.cs(63,101,63,107): error CS0234: The type or namespace name 'Anchor' does not exist in the namespace 'Google.AR.Core' (are you missing an assembly reference?)\r\n\r\nUsage of the `Anchor` type had sqiggly Intellisense errors in Visual\r\nStudio. Building the project was successful, however.\r\n\r\nLooking further, the contents of `obj\\Debug\\api.xml` seemed _wrong_\r\nafter a design-time build:\r\n\r\n    <api></api>\r\n\r\nReviewing the log, the `<ClassParse />` MSBuild task had no inputs:\r\n\r\n    ClassParse\r\n        ClassParse Task\r\n        OutputFile: obj\\Debug\\api.xml.class-parse\r\n        SourceJars:\r\n        DocumentationPaths:\r\n\r\nSo it looks, like using `LibraryProjectZip` build items need\r\nadditional MSBuild targets to run in order to work properly.\r\n\r\nI could get things working with the following workaround in the\r\nproject file:\r\n\r\n    <Import Project=\"$(MSBuildExtensionsPath)\\Xamarin\\Android\\Xamarin.Android.Bindings.targets\" />\r\n    <!-- Workaround -->\r\n    <PropertyGroup>\r\n        <CompileDependsOn>\r\n            AddLibraryJarsToBind;\r\n            $(CompileDependsOn);\r\n        </CompileDependsOn>\r\n    </PropertyGroup>\r\n\r\nI added the equivalent fix in `Xamarin.Android.Bindings.targets` as\r\nwell as a test for this scenario.\r\n\r\nFuture changes:\r\n- Design-time builds for binding projects are quite slow. In the\r\n  example above, it was taking around 16 seconds on my machine. This\r\n  will very likely count as a UI hang in Visual Studio.\r\n- I will file an issue for this, as I don't know how important it is\r\n  to improve, and how many developers are using binding projects."},{"Id":"8423531693","Type":"IssuesEvent","CreatedAt":"2018-10-15T18:42:14","Actor":"hardeep-fm","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2297","RelatedDescription":"Opened issue \"HttpWebRequest BeginGetResponse timeout if main thread is blocked\" (#2297) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\nUsing HttpWebRequest BeginGetResponse always results in a timeout if we block the main thread waiting for a response.  This behaviour only recently started happening -- it was working fine on older versions of Xamarin Android.\r\n\r\nThe demo app below is written using the example documentation from the Microsoft site (https://docs.microsoft.com/en-us/dotnet/api/system.net.httpwebrequest.begingetresponse?view=netframework-4.7.2) which implies that blocking the main thread should be okay.  This problem also doesn't happen when running on a Mac using Mono.\r\n\r\n[NetworkTest.zip](https://github.com/xamarin/xamarin-android/files/2480009/NetworkTest.zip)\r\n\r\n```\r\nHttpWebRequest request = (HttpWebRequest)WebRequest.Create(\"http://www.contoso.com\");\r\nrequest.ContentType = \"text/html\";\r\nrequest.Method = \"GET\";\r\n\r\nManualResetEvent allDone = new ManualResetEvent(false);\r\nint DefaultTimeout = 15 * 1000;\r\n\r\nIAsyncResult result = (IAsyncResult)request.BeginGetResponse(new AsyncCallback(RespCallback), allDone);\r\nThreadPool.RegisterWaitForSingleObject(result.AsyncWaitHandle, new WaitOrTimerCallback(TimeoutCallback), request, DefaultTimeout, true);\r\nallDone.WaitOne();\r\n```\r\n### Expected Behavior\r\nNetwork request should be called asynchronously in a background thread and response callback should be called from that or another non-main thread.\r\n\r\n### Actual Behavior\r\nTimerCallback is triggered with \"timeout=true\" and request is aborted.  I should mention that a network trace confirms that the http request is actually being made and returning successfully so it's only the response callback that doesn't get called as expected.\r\n\r\n### Version Information\r\n=== Visual Studio Professional 2017 for Mac ===\r\n\r\nVersion 7.6.9 (build 22)\r\nInstallation UUID: 2b082c66-cf75-41c5-af8d-cbe2346a53a9\r\nRuntime:\r\n\tMono 5.12.0.309 (2018-02/39d89a335c8) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 512000309\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Version: 2.1.2\r\nSDK: /usr/local/share/dotnet/sdk/2.1.302/Sdks\r\nSDK Version: 2.1.302\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.12.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.3\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.0 (14320.25)\r\nBuild 10A255\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.0.0.20 (Visual Studio Professional)\r\nAndroid SDK: /Users/hardeep.sidhu/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t5.0 (API level 21)\r\n\t\t6.0 (API level 23)\r\n\t\t7.1 (API level 25)\r\n\t\t8.0 (API level 26)\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 28.0.0\r\nSDK Build Tools Version: 27.0.3\r\n\r\nJava SDK: /usr\r\njava version \"1.8.0_131\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 5.0.0.0 (Visual Studio Professional)\r\nHash: b40230c0\r\nBranch: \r\nBuild date: 2018-09-27 11:41:37-0400\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 12.0.0.15 (Visual Studio Professional)\r\nHash: 84552a46\r\nBranch: xcode10\r\nBuild date: 2018-09-17 21:54:33-0400\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 706090022\r\nGit revision: 0a0ba3c4593e9adb1c6ff6324e641036146af376\r\nBuild date: 2018-10-05 16:38:51+00\r\nBuild branch: release-7.6\r\nXamarin extensions: f7856b13f2c03a58e08381d3a5970bba18f5c7d7\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.6\r\nDarwin 17.7.0 Darwin Kernel Version 17.7.0\r\n    Thu Jun 21 22:53:14 PDT 2018\r\n    root:xnu-4570.71.2~1/RELEASE_X86_64 x86_64\r\n"},{"Id":"8421920912","Type":"IssuesEvent","CreatedAt":"2018-10-15T14:21:32","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2284","RelatedDescription":"Closed issue \"Xamarin Android CookieManager ignores cookies with samesite value set\" (#2284) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create a new Xamarin Forms/Android Project.\r\n2. In the MainActivity OnCreate, create a cookie by setting the value for samesite as \"samesite=lax\".\r\n3. Add the cookie to the CookieManager:\r\n```\r\nvar cookie = new Cookie\r\n            {\r\n                Name = \".WithSameSite.Cookies\",\r\n                Value = \"13456789jhsvfshvdfjksDg48484751458sfgdfgdfg\",\r\n                Domain = \".example.com\",\r\n                Path = \"/\",\r\n                HttpOnly = true,\r\n                Secure = true,\r\n                Expires = DateTime.UtcNow.AddHours(1)\r\n            };\r\nvar cookieValue = $\"{cookie.Name}={cookie.Value};domain={cookie.Domain};path={cookie.Path};secure;httponly;samesite=lax;\";\r\n            CookieManager.Instance.SetCookie(\"https://www.example.com/\", cookieValue);\r\n```\r\n4) Try to fetch the cookie :\r\n```\r\n//fetch cookies with same site\r\n            var fetchCookie = CookieManager.Instance.GetCookie(\"https://www.example.com/\");\r\n            Console.WriteLine($\"Cookie fetched:{fetchCookie \r\n\r\n}\");\r\n```\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n[AndroidCookieIssue.zip](https://github.com/xamarin/xamarin-android/files/2465906/AndroidCookieIssue.zip)\r\n\r\n-->\r\n\r\n### Expected Behavior\r\nThe cookie should be fetched\r\n### Actual Behavior\r\nThe cookie is not getting fetched \r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n![image](https://user-images.githubusercontent.com/25201743/46750174-08a60b00-ccd5-11e8-980c-ec6bb5189305.png)\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8425874292","Type":"IssuesEvent","CreatedAt":"2018-10-16T05:06:49","Actor":"albilaga","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4091","RelatedDescription":"Opened issue \"Parsing OnPlatform<T> value (from Application Resources)\" (#4091) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nParsing OnPlatform value from Application Resources make little bit complicated\r\n### Steps to Reproduce\r\n\r\nCreate Custom control which have property object. In my case I create custom control with name FontSize. Because FontSize can be string and also double I create it in object like this\r\n  ```\r\npublic object FontSize\r\n        {\r\n            get { return (string)base.GetValue(FontSizeProperty); }\r\n            set { base.SetValue(FontSizeProperty, value); }\r\n        }\r\n\r\n        public static BindableProperty FontSizeProperty = BindableProperty.Create(\r\n            propertyName: nameof(FontSize),\r\n            returnType: typeof(object),\r\n                                                         declaringType: typeof(ExtErrorEntry),\r\n            defaultValue: Xamarin.Forms.Entry.FontSizeProperty.DefaultValue.ToString(),\r\n            defaultBindingMode: BindingMode.OneWay);\r\n```\r\n\r\n### Expected Behavior\r\nWhen parsing value from string it is easier because Xamarin.Forms have FontSizeConverter. The problem is when using On Platform. It is should be easier to parsing On Platform like maybe `OnPlatform[Device.RuntimePlatform].Value` \r\n### Actual Behavior\r\nTo parsing value from OnPlatform I need to iterate OnPlatform.Platforms then in Platforms.Platform but the value is OnPlatform.Platforms. The code sample is like this\r\n```\r\nif (newValue is Xamarin.Forms.OnPlatform<double> onplatforms)\r\n                {\r\n                    bool isFound = false;\r\n                    foreach (var onplatform in onplatforms.Platforms)\r\n                    {\r\n                        foreach (var platform in onplatform.Platform)\r\n                        {\r\n                            if (platform.Equals(Device.RuntimePlatform))\r\n                            {\r\n                                isFound = true;\r\n                                control.Entry.FontSize = Convert.ToDouble(onplatform.Value);\r\n                                break;\r\n                            }\r\n\r\n                        }\r\n                        if (isFound)\r\n                        {\r\n                            break;\r\n                        }\r\n                    }\r\n                }```\r\n\r\n"},{"Id":"8425702245","Type":"PullRequestEvent","CreatedAt":"2018-10-16T04:02:49","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3999","RelatedDescription":"Closed pull request \"[Sample] [Android] Fixed PagesGallery.Droid build\" (#3999) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nHi, I noticed an issue with PagesGallery.Droid\r\nI couldn't build it on my Mac\r\n\r\nReally, I don't know, whether there is such problem on Windows, but it occurs on VS for mac\r\nAfter these changes I'm able to build PagesGallery.Droid again\r\n\r\n### API Changes ###\r\n\r\nChanged:\r\n - object ListView.SelectedItem => One of ref. in PagesGallery.Droid.csproj\r\n\r\n### Platforms Affected ### \r\nOnly sample project, Android\r\n\r\n### Before/After Screenshots ### \r\n[BEFORE]\r\n<img width=\"739\" alt=\"1\" src=\"https://user-images.githubusercontent.com/10124814/46503761-816c1980-c834-11e8-9e8b-8645878a47d8.png\">\r\n\r\n[AFTER]\r\n![image](https://user-images.githubusercontent.com/10124814/46509969-ae2d2a80-c84e-11e8-995f-1a27c5e4c051.png)\r\n\r\n\r\n### Testing Procedure ###\r\nTry to build PagesGallery.Droid project on Mac"},{"Id":"8425161134","Type":"IssuesEvent","CreatedAt":"2018-10-16T00:59:01","Actor":"conceptdev","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2640","RelatedDescription":"Closed issue \"Basic examples for usage with PowerShell Core\" (#2640) at xamarin/Xamarin.Forms","RelatedBody":"Hi there,\r\n\r\ncould you provide a few simple examples that show how to use it with PowerShell Core?\r\nThat would open also cross platform GUIs for sysadmins like me :bowing_man: \r\n\r\nThanks in advance\r\n\r\nRuben\r\n\r\nPS: An example traditional [windows.forms](https://docs.microsoft.com/en-us/powershell/scripting/getting-started/cookbooks/creating-a-custom-input-box?view=powershell-6) with PowerShell."},{"Id":"8425028024","Type":"IssuesEvent","CreatedAt":"2018-10-16T00:12:31","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3316","RelatedDescription":"Closed issue \"Trouble building Forms Project with Xamarin.Mac - Microsoft.NuGet.targets error\" (#3316) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nOriginally reported via twitter: https://twitter.com/MRumpler/status/1018857084346097664\r\n\r\nMicrosoft.NuGet.targets appears to be failing to handle Xamarin.Mac Modern correctly, which appears to be getting pulled in via Forms.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Open attached project\r\n2. Build\r\n\r\n### Expected Behavior\r\n\r\nSuccessful build or better error.\r\n\r\n### Actual Behavior\r\n\r\n```/Library/Frameworks/Mono.framework/Versions/5.10.1/lib/mono/xbuild/Microsoft/NuGet/Microsoft.NuGet.targets(184,5): error : Your project is not referencing the \"Xamarin.Mac,Version=v2.0\" framework. Add a reference to \"Xamarin.Mac,Version=v2.0\" in the \"frameworks\" section of your project.json, and then re-run NuGet restore.```\r\n\r\n### Basic Information\r\n\r\n- Version with issue: https://gist.github.com/chamons/78af2a796375b7fb7bfdb77ca1fe26d8\r\n\r\n### Reproduction Link\r\n\r\n[MR.Gestures.zip](https://github.com/xamarin/Xamarin.Forms/files/2199073/MR.Gestures.zip)\r\n"},{"Id":"8425018305","Type":"IssuesEvent","CreatedAt":"2018-10-16T00:09:09","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2892","RelatedDescription":"Closed issue \"[Android, UWP] Span Gesture Recognizer issues with two adjacent spans\" (#2892) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nWhen adding TapGestureRecognizer (and probably other Recognizers) to two adjacent spans the Tap behavior isn't consistent across platforms\r\n\r\n### Steps to Reproduce\r\n\r\nRun the sample and try to click on each span\r\n\r\n```C#\r\nvar label = new Label();\r\n\r\n\t\t\tvar s = new FormattedString();\r\n\t\t\tvar span = new Span { Text = \"I will fire when clicked\", FontAttributes = FontAttributes.Bold };\r\n\t\t\tvar span2 = new Span { Text = \"I will not fire when clicked\", FontAttributes = FontAttributes.Bold };\r\n\t\t\tspan.GestureRecognizers.Add(new TapGestureRecognizer()\r\n\t\t\t{\r\n\t\t\t\tCommand = new Command(async () =>\r\n\t\t\t   {\r\n\t\t\t\t   await MainPage.DisplayAlert(\"Yay clicked\", \"yay clicked\", \"yay clicked\");\r\n\t\t\t   })\r\n\t\t\t});\r\n\r\n\t\t\ts.Spans.Add(span);\r\n\t\t\ts.Spans.Add(span2);\r\n\r\n\t\t\tspan2.GestureRecognizers.Add(new TapGestureRecognizer()\r\n\t\t\t{\r\n\t\t\t\tCommand = new Command(async () =>\r\n\t\t\t   {\r\n\t\t\t\t\tawait MainPage.DisplayAlert(\"not working\", \"not working\", \"not working\");\r\n\t\t\t   })\r\n\t\t\t});\r\n\r\n\t\t\tlabel.FormattedText = s;\r\n\r\n\t\t\treturn new ContentPage()\r\n\t\t\t{\r\n\t\t\t\tContent = new StackLayout()\r\n\t\t\t\t{\r\n\t\t\t\t\tChildren = { label },\r\n\t\t\t\t\tPadding = 40\r\n\t\t\t\t}\r\n\t\t\t};\r\n```\r\n\r\n### Expected Behavior\r\nBoth spans should be clickable and remain clickable\r\n\r\n### Actual Behavior\r\nAndroid - can click once but no more\r\nUWP - can't click at all\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.1 nightly\r\n- Last known good version:\r\n- IDE:\r\n- Platform Target Frameworks:\r\n  - Android: api 19\r\n  - UWP:  16299\r\n \r\n### Reproduction Link\r\n\r\nCode in description\r\n"},{"Id":"8424993086","Type":"IssuesEvent","CreatedAt":"2018-10-16T00:00:49","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2511","RelatedDescription":"Closed issue \"Unable to build Xamarin.Forms project if directory contains '#' character.\" (#2511) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nBuild fails if part of the path containing the Xamarin.Forms project contains a # character.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Open Visual Studio for Mac 7.4 to create a Xamarin.Forms class library (New Project dialog - Multiplatform - Library - Xamarin.Forms - Class Library)\r\n2. Create the new solution so that it will be created in a directory where one part of its path contains a # character (.e.g. ~/Projects/Tests/c#/MySolution/MyProject)\r\n3. Build the project using Visual Studio for Mac or using msbuild from the command line.\r\n\r\n### Expected Behavior\r\n\r\nProject builds without error.\r\n\r\n### Actual Behavior\r\n\r\nBuild fails with error about being unable to load the XamCTask. If the # character is removed from the directory then the build succeeds.\r\n```\r\n  ~/Projects/Tests/we#gwaeg23wge/packages/Xamarin.Forms.2.5.0.121934/build/portable-win+net45+wp80+win81+wpa81/Xamarin.Forms.targets(103,3): error MSB4061: The \"XamlCTask\" task could not be instantiated from \"~/Projects/Tests/we#gwaeg23wge/packages/Xamarin.Forms.2.5.0.121934/build/portable-win+net45+wp80+win81+wpa81/Xamarin.Forms.Build.Tasks.dll\". Could not load file or assembly 'Xamarin.Forms.Build.Tasks' or one of its dependencies [~/Projects/Tests/we#gwaeg23wge/wegwaeg23wge/wegwaeg23wge.csproj]\r\n  ~/Projects/Tests/we#gwaeg23wge/packages/Xamarin.Forms.2.5.0.121934/build/portable-win+net45+wp80+win81+wpa81/Xamarin.Forms.targets(103,3): error MSB4060: The \"XamlCTask\" task has been declared or used incorrectly, or failed during construction. Check the spelling of the task name and the assembly name. [~/Projects/Tests/we#gwaeg23wge/wegwaeg23wge/wegwaeg23wge.csproj]\r\n```\r\nTried a few different versions of Xamarin.Forms:\r\n\r\n - 2.5.0.121934\r\n - 2.5.1.444934\r\n - 3.0.0.354232-pre3\r\n\r\nAlso tried Microsoft.Bcl.Build, which has its own task dll that gets loaded, and that seems to work when the directory contains a # character.\r\n"},{"Id":"8424804208","Type":"IssuesEvent","CreatedAt":"2018-10-15T23:03:02","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2291","RelatedDescription":"Closed issue \"UI test 36955 InvalidCastException\" (#2291) at xamarin/Xamarin.Forms","RelatedBody":"This test is trying to bind the VisualElement.IsEnabledProperty on a ViewCell, which is not a VisualElement, so it immediately crashes. It just needs to use the Cell.IsEnabledProperty instead."},{"Id":"8424804228","Type":"PullRequestEvent","CreatedAt":"2018-10-15T23:02:38","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/4072","RelatedDescription":"Merged pull request \"Prevented crash in Bugzilla36955 UITest\" (#4072) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nFixed UI test for working properly, without crashes.\r\nMade changes regarding to @hartez comment\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #2291\r\n\r\n### API Changes ###\r\n None\r\n\r\n### Platforms Affected ### \r\n- iOS (UITEST)\r\n\r\n### Behavioral/Visual Changes ###\r\nNo crashing\r\n\r\n### Before/After Screenshots ### \r\nNot applicable\r\n\r\n### Testing Procedure ###\r\nOpen Bugzilla36955 test. See that there is no crash\r\n"},{"Id":"8424692712","Type":"IssuesEvent","CreatedAt":"2018-10-15T22:32:13","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4070","RelatedDescription":"Closed issue \"View doesn't measure the exact size when used ControlTemplate\" (#4070) at xamarin/Xamarin.Forms","RelatedBody":"Hi Team,\r\n\r\n### Description\r\nWe have noticed that when used ControlTemplate for a View, the exact View size measured from the renderer is not obtained correctly based on its contents. We have attached the sample which replicates the issue for your reference. You can check the behavior in our sample by commenting the method which initializes the ControlTemplate and verify the size obtained. This issue is seen in all the platforms. Can you please look into it and provide suitable solution for this issue?\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run the attached sample.\r\n2. Click the 'Add children' button.\r\n\r\n### Expected Behavior\r\nThe size of the item should be obtained properly when used ControlTemplate.\r\n\r\n### Actual Behavior\r\nThe size is obtained as '8' which is irrelevant to the element contents.\r\n\r\n### Reproduction Link\r\n[CustomView.zip](https://github.com/xamarin/Xamarin.Forms/files/2472887/CustomView.zip)\r\n"},{"Id":"8424539236","Type":"IssuesEvent","CreatedAt":"2018-10-15T21:54:56","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4090","RelatedDescription":"Opened issue \"[Android] Talkback reports incorrect number of list items\" (#4090) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nWhen tapping an item in a list for the first time, Talkback reports the number of items in the list. The number reported is consistently 2 greater than the correct number.\r\n\r\nMy best guess is that we have some phantom items in the list, possibly an invisible header and footer item.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Enable Talkback \r\n2. Open the repro project from #4085 \r\n3. Open the Detail page and tap \"Browse\" or \"About\"\r\n\r\n### Expected Behavior\r\n\r\nTalkback will report that the tapped item is in a list of 2 items. \r\n\r\n### Actual Behavior\r\n\r\nTalkback will report that the tapped item is in a list of 4 items.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.1.0.697729 - 3.3.0.893527-pre3\r\n- Last known good version: ???\r\n\r\n### Reproduction Link\r\n\r\nSee #4085\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8425739010","Type":"IssuesEvent","CreatedAt":"2018-10-16T04:16:39","Actor":"john-manktelow","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4988","RelatedDescription":"Opened issue \"MPNowPlayingInfoCenter.DefaultCenter.NowPlaying cannot be read once written to (exception in get{})\" (#4988) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\nAfter setting a subset of properties on MPNowPlayingInfoCenter.DefaultCenter.NowPlaying, it can no longer be retrieved without a NullReferenceException thrown from the getter for NowPlaying.\r\n\r\nOccurs on both Mac (10.13 and 10.14) and iOS (12.0 device and simulator).\r\n\r\n### Steps to Reproduce\r\n\r\n1. Set a value on the MPNowPlayingInfoCenter, for example,\r\n ```\r\nMPNowPlayingInfoCenter.DefaultCenter.NowPlaying.Title = \"Title\";\r\n```\r\n2. Retrieve the now playing info, for example: \r\n```\r\nvar npInfo = MPNowPlayingInfoCenter.DefaultCenter.NowPlaying\r\n```\r\n3. Get a NullReferenceException in MPNowPlayingInfoCenter.cs\r\n\r\n### Expected Behavior\r\nWe should be able to retrieve the NowPlayingInfo from MPNowPlayingInfoCenter.DefaultCenter when some but not all of its properties are non-null.\r\n\r\n### Actual Behavior\r\n\r\nAfter setting a subset of properties, this exception is thrown (iOS in this case):\r\n\r\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object\r\n  at MediaPlayer.MPNowPlayingInfo..ctor (Foundation.NSDictionary source) [0x000f8] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.2.0.26/src/Xamarin.iOS/MediaPlayer/MPNowPlayingInfoCenter.cs:161\r\n  at MediaPlayer.MPNowPlayingInfoCenter.get_NowPlaying () [0x00000] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.2.0.26/src/Xamarin.iOS/MediaPlayer/MPNowPlayingInfoCenter.cs:227\r\n  at appfiddle.ViewController.ViewDidLoad () [0x00067] in /Users/johnm/Dropbox/Projects/fiddle/appfiddle/appfiddle/ViewController.cs:34\r\n  at at (wrapper managed-to-native) UIKit.UIApplication.UIApplicationMain(int,string[],intptr,intptr)\r\n  at UIKit.UIApplication.Main (System.String[] args, System.IntPtr principal, System.IntPtr delegate) [0x00005] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.2.0.26/src/Xamarin.iOS/UIKit/UIApplication.cs:79\r\n  at UIKit.UIApplication.Main (System.String[] args, System.String principalClassName, System.String delegateClassName) [0x0002c] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.2.0.26/src/Xamarin.iOS/UIKit/UIApplication.cs:63\r\n  at appfiddle.Application.Main (System.String[] args) [0x00001] in /Users/johnm/Dropbox/Projects/fiddle/appfiddle/appfiddle/Main.cs:12\r\n```\r\n\r\nThe exact line number varies depending on how many properties are set.\r\n\r\nIn MPNowPlayingInfoCenter.cs, TryGetValue() is returning true, but the result out param is null.\r\n\r\n### Environment\r\n\r\nBelow is the current beta, but this also happens with the latest from the stable channel.\r\n\r\n```\r\n=== Visual Studio Professional 2017 for Mac (Preview) ===\r\n\r\nVersion 7.7 Preview (7.7 build 1470)\r\nInstallation UUID: 72ef31f8-1db6-474f-b1a1-36ea425445d5\r\nRuntime:\r\n\tMono 5.16.0.173 (2018-06/910395a05f6) (64-bit)\r\n\tGTK+ 2.24.23 (Raleigh theme)\r\n\tXamarin.Mac 4.4.1.178 (master / eeaeb7e6)\r\n\r\n\tPackage version: 516000173\r\n\r\n=== NuGet ===\r\n\r\nVersion: 4.3.1.4445\r\n\r\n=== .NET Core ===\r\n\r\nRuntime: /usr/local/share/dotnet/dotnet\r\nRuntime Versions:\r\n\t2.1.4\r\n\t2.1.3\r\n\t2.1.1\r\nSDK: /usr/local/share/dotnet/sdk/2.1.402/Sdks\r\nSDK Versions:\r\n\t2.1.402\r\n\t2.1.401\r\n\t2.1.301\r\nMSBuild SDKs: /Library/Frameworks/Mono.framework/Versions/5.16.0/lib/mono/msbuild/15.0/bin/Sdks\r\n\r\n=== Xamarin.Profiler ===\r\n\r\nVersion: 1.6.4\r\nLocation: /Applications/Xamarin Profiler.app/Contents/MacOS/Xamarin Profiler\r\n\r\n=== Xamarin.Android ===\r\n\r\nVersion: 9.1.0.29 (Visual Studio Professional)\r\nAndroid SDK: /Users/johnm/Library/Developer/Xamarin/android-sdk-macosx\r\n\tSupported Android versions:\r\n\t\t8.1 (API level 27)\r\n\r\nSDK Tools Version: 26.1.1\r\nSDK Platform Tools Version: 27.0.1\r\nSDK Build Tools Version: 27.0.3\r\n\r\nJava SDK: /Users/johnm/Library/Developer/Xamarin/jdk/microsoft_dist_openjdk_1.8.0.9\r\nopenjdk version \"1.8.0-9\"\r\nOpenJDK Runtime Environment (build 1.8.0-9-microsoft-b00)\r\nOpenJDK 64-Bit Server VM (build 25.71-b00, mixed mode)\r\n\r\nAndroid Designer EPL code available here:\r\nhttps://github.com/xamarin/AndroidDesigner.EPL\r\n\r\n=== Android Device Manager ===\r\n\r\nVersion: 7.7.1.0\r\nHash: a173bd27\r\n\r\n=== Xamarin Inspector ===\r\n\r\nVersion: 1.4.3\r\nHash: db27525\r\nBranch: 1.4-release\r\nBuild date: Mon, 09 Jul 2018 21:20:18 GMT\r\nClient compatibility: 1\r\n\r\n=== Apple Developer Tools ===\r\n\r\nXcode 10.0 (14320.24)\r\nBuild 10A254a\r\n\r\n=== Xamarin.Mac ===\r\n\r\nVersion: 5.2.0.0 (Visual Studio Professional)\r\nHash: 930b5168\r\nBranch: \r\nBuild date: 2018-09-27 17:09:32-0400\r\n\r\n=== Xamarin.iOS ===\r\n\r\nVersion: 12.2.0.26 (Visual Studio Professional)\r\nHash: 204c23333\r\nBranch: d15-9\r\nBuild date: 2018-09-20 10:54:35-0400\r\n\r\n=== Build Information ===\r\n\r\nRelease ID: 707001470\r\nGit revision: 7aff2dc1f28d711d11d63d79b2a4c49cda217189\r\nBuild date: 2018-09-28 17:39:40+00\r\nBuild branch: release-7.7-preview3\r\nXamarin extensions: ab5106e52c8cb870de8b90dfc0f298e00a37051d\r\n\r\n=== Operating System ===\r\n\r\nMac OS X 10.13.6\r\nDarwin 17.7.0 Darwin Kernel Version 17.7.0\r\n    Thu Jun 21 22:53:14 PDT 2018\r\n    root:xnu-4570.71.2~1/RELEASE_X86_64 x86_64\r\n\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\n\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n[appfiddle.zip](https://github.com/xamarin/xamarin-macios/files/2481373/appfiddle.zip)\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"},{"Id":"8424990346","Type":"PullRequestEvent","CreatedAt":"2018-10-16T00:00:05","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4986","RelatedDescription":"Merged pull request \"Apply XM audit fixes from `xcode10`\" (#4986) at xamarin/xamarin-macios","RelatedBody":"Backport of\nhttps://github.com/xamarin/xamarin-macios/commit/b40230c09d557991b776de918b047442cd41533f"},{"Id":"8424983770","Type":"PullRequestEvent","CreatedAt":"2018-10-15T23:57:55","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4987","RelatedDescription":"Merged pull request \"Bump for Xcode 10 beta 3\" (#4987) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8424457655","Type":"PullRequestEvent","CreatedAt":"2018-10-15T21:37:13","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4987","RelatedDescription":"Opened pull request \"Bump for Xcode 10 beta 3\" (#4987) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1050824055014744064","CreatedAt":"2018-10-12T19:02:32+00:00","UserScreenname":"xamarinhq","Text":"Now, in #VisualStudio 15.8, Dotfuscator Community can help protect your https://t.co/FGIvdxOrYa Apps at Runtime by… https://t.co/iPm1GjIrpS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":48,"FavoriteCount":23,"RawContent":null},{"Id":"1050447051228631040","CreatedAt":"2018-10-11T18:04:28+00:00","UserScreenname":"xamarinhq","Text":"With Xamarin.Forms, the UI and app logic for your app resides in a single codebase and you get to use a single IDE… https://t.co/SMq0XwjtKL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":57,"FavoriteCount":32,"RawContent":null},{"Id":"1047580523881799680","CreatedAt":"2018-10-03T20:13:54+00:00","UserScreenname":"xamarinhq","Text":"Do both types of testing with your Visual Studio App Center CI/CD pipeline - cover the Data Access Layer with unit… https://t.co/6y14u8p3lQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":32,"RawContent":null},{"Id":"1046875654631886850","CreatedAt":"2018-10-01T21:33:00+00:00","UserScreenname":"xamarinhq","Text":"Microsoft named a leader in 2018 analyst reports on mobile app development. Get complimentary access to reports fro… https://t.co/EWg450kHpI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":69,"FavoriteCount":30,"RawContent":null},{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":202,"FavoriteCount":109,"RawContent":null},{"Id":"1039264258511527936","CreatedAt":"2018-09-10T21:28:02+00:00","UserScreenname":"xamarinhq","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft is… https://t.co/bM5JCj7M0h","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":54,"RawContent":null},{"Id":"1037778121582419970","CreatedAt":"2018-09-06T19:02:39+00:00","UserScreenname":"xamarinhq","Text":"Get started with AI without being a machine learning or data science expert... New on the Xamarin Blog: Using Objec… https://t.co/uwpu4pUWFj","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":92,"FavoriteCount":45,"RawContent":null},{"Id":"1035572899996987397","CreatedAt":"2018-08-31T16:59:54+00:00","UserScreenname":"xamarinhq","Text":"Xamarin and .NET Developer Events in September\nHere are all the links you'll need to get involved.… https://t.co/YJAa83E61y","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":36,"RawContent":null},{"Id":"1032375788375498753","CreatedAt":"2018-08-22T21:15:43+00:00","UserScreenname":"xamarinhq","Text":"Getting Started with Android Pie. Now you can download the support for #AndroidPie inside https://t.co/7TMjXUsU4u 9… https://t.co/sNrOIuI741","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":54,"FavoriteCount":42,"RawContent":null},{"Id":"1031653104394096640","CreatedAt":"2018-08-20T21:24:01+00:00","UserScreenname":"xamarinhq","Text":"Hey, Xamarin developers. It's time to explore and learn about the latest and greatest iOS 12 ARKit Capabilities w/… https://t.co/6x3vq5IuEb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":123,"FavoriteCount":80,"RawContent":null},{"Id":"1029840138099220487","CreatedAt":"2018-08-15T21:19:57+00:00","UserScreenname":"xamarinhq","Text":"Attend A #dotNETConf Event Near You - https://t.co/VrHYwnCS69\n\nIt's a FREE, 3-day virtual dev event co-organized by… https://t.co/tqMWcB8mJz","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":35,"RawContent":null},{"Id":"1026898128509825024","CreatedAt":"2018-08-07T18:29:27+00:00","UserScreenname":"xamarinhq","Text":"- Authentication   - Encryption   - Integrity\n3 important requirements to securing network communications &amp; absolut… https://t.co/hDPkHLZsLA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":50,"RawContent":null}]}},"RunOn":"2018-10-16T05:30:53.7425988Z","RunDurationInMilliseconds":3751}