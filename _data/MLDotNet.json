{"Data":{"GitHub":{"Issues":[{"Id":"425143498","IsPullRequest":true,"CreatedAt":"2019-03-26T03:50:52","Actor":"rogancarr","Number":"3086","RawContent":null,"Title":"Updating the ApplyOnnxModel transform to meet the API parameter ordering standards","State":"closed","Body":"This PR updates the `ApplyOnnxModel` transform to meet the API standards: Moving to `outputColumnName`, `inputColumnName`, `modelFile`.\r\n\r\nFixes #3082 ","Url":"https://github.com/dotnet/machinelearning/pull/3086","RelatedDescription":"Closed or merged PR \"Updating the ApplyOnnxModel transform to meet the API parameter ordering standards\" (#3086)"},{"Id":"425130591","IsPullRequest":false,"CreatedAt":"2019-03-26T03:50:52","Actor":"rogancarr","Number":"3082","RawContent":null,"Title":"ApplyOnnxModel API parameters are in the wrong order","State":"closed","Body":"The `ApplyOnnxModel` `Transformer` has a parameter order based on the `ONNX` model (see below) but as a `Transformer`, it should have parameters ordered to reflect the modification of the input `IDataView`.\r\n\r\nHere is the current API:\r\n```cs\r\npublic static OnnxScoringEstimator ApplyOnnxModel(this TransformsCatalog catalog,\r\n            string modelFile,\r\n            string outputColumnName,\r\n            string inputColumnName,\r\n            int? gpuDeviceId = null,\r\n            bool fallbackToCpu = false);\r\n```\r\n\r\nThis should be re-ordered to be:\r\n\r\n```cs\r\npublic static OnnxScoringEstimator ApplyOnnxModel(this TransformsCatalog catalog,\r\n            string outputColumnName,\r\n            string inputColumnName,\r\n            string modelFile,\r\n            int? gpuDeviceId = null,\r\n            bool fallbackToCpu = false);\r\n```\r\n\r\nRelated to #3079 ","Url":"https://github.com/dotnet/machinelearning/issues/3082","RelatedDescription":"Closed issue \"ApplyOnnxModel API parameters are in the wrong order\" (#3082)"},{"Id":"425158710","IsPullRequest":true,"CreatedAt":"2019-03-26T01:03:44","Actor":"codemzs","Number":"3088","RawContent":null,"Title":"API to return ColumnPairs for a OneToOneTransformer.","State":"closed","Body":"fixes #3087","Url":"https://github.com/dotnet/machinelearning/pull/3088","RelatedDescription":"Closed or merged PR \"API to return ColumnPairs for a OneToOneTransformer.\" (#3088)"},{"Id":"425158582","IsPullRequest":false,"CreatedAt":"2019-03-26T01:03:44","Actor":"codemzs","Number":"3087","RawContent":null,"Title":"API to return ColumnPairs for a transformer.","State":"closed","Body":"We need an API to return ColumnPairs for transformers descending from OneToOneTransformerBase. Create such an API in the experimental nuget.","Url":"https://github.com/dotnet/machinelearning/issues/3087","RelatedDescription":"Closed issue \"API to return ColumnPairs for a transformer.\" (#3087)"},{"Id":"425166679","IsPullRequest":false,"CreatedAt":"2019-03-25T23:58:26","Actor":"glebuk","Number":"3089","RawContent":null,"Title":"Model.ConvertToOnnx() fails for Classification pipelines if non-default Features column name is used","State":"open","Body":"The following code fails to convert to ONNX model:\r\n```csharp\r\n            var mlContext = new MLContext();\r\n            var data = mlContext.Data.LoadFromEnumerable<Observation>(Data);\r\n            var chain = mlContext.Transforms.Concatenate(\"FeatureVector\", \"Price\")\r\n                .Append(mlContext.BinaryClassification.Trainers.LogisticRegression(\r\n                    \"Label\", \"FeatureVector\"));\r\n\r\n            var transformer = chain.Fit(data);\r\n            using (var stream = File.Create(\"foo.onnx\"))\r\n                mlContext.Model.ConvertToOnnx(transformer, data, stream);\r\n```\r\n\r\nOn the other hand, if you rename \"FeatureVector\" to \"Features\" it works. \r\nThis happens for various learners and both binary and multiclass. for both calibrated and non-calibrated. This does NOT happen on regression","Url":"https://github.com/dotnet/machinelearning/issues/3089","RelatedDescription":"Open issue \"Model.ConvertToOnnx() fails for Classification pipelines if non-default Features column name is used\" (#3089)"},{"Id":"425139874","IsPullRequest":true,"CreatedAt":"2019-03-25T23:29:09","Actor":"rogancarr","Number":"3084","RawContent":null,"Title":"Fixing API call in LoadImages sample","State":"closed","Body":"The `LoadImages` sample had the wrong API call. This PR fixes it so that the sample runs correctly.\r\n\r\nFixes #3079 ","Url":"https://github.com/dotnet/machinelearning/pull/3084","RelatedDescription":"Closed or merged PR \"Fixing API call in LoadImages sample\" (#3084)"},{"Id":"425086785","IsPullRequest":false,"CreatedAt":"2019-03-25T23:29:09","Actor":"yaeldekel","Number":"3079","RawContent":null,"Title":"DnnFeaturizeImage sample doesn't match the signature in the current API","State":"closed","Body":"The API for `LoadImage` is\r\n\r\n```\r\nLoadImages(string outputColumnName, string imageFolder, string inputColumnName = null)\r\n```\r\n\r\nbut in the sample it is used like this:\r\n\r\n```\r\nmlContext.Transforms.LoadImages(imagesFolder, \"ImageObject\", \"ImagePath\")\r\n```\r\n\r\nOne of them should be fixed, not sure which one? @TomFinley , @artidoro , @wschin \r\nI kind of like the second option (the folder first, output and input column names together).\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3079","RelatedDescription":"Closed issue \"DnnFeaturizeImage sample doesn't match the signature in the current API\" (#3079)"},{"Id":"425140985","IsPullRequest":true,"CreatedAt":"2019-03-25T23:10:01","Actor":"sfilipi","Number":"3085","RawContent":null,"Title":"fixing build warnings.","State":"closed","Body":"The use of the fields in the Hash sample introduced build warnings. \r\nChanging to properties to avoid warnings. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3085","RelatedDescription":"Closed or merged PR \"fixing build warnings.\" (#3085)"},{"Id":"424395958","IsPullRequest":false,"CreatedAt":"2019-03-25T22:41:09","Actor":"artidoro","Number":"3068","RawContent":null,"Title":"Add multicolumn mapping for the estimators that need it the most","State":"closed","Body":"This is not a Project 13 issue any longer, as it does not require any breaking API change.\r\n\r\nWe should enable multi-column mapping for all the estimators that support it. Since we don't have time to work on a general solution, we will go for option 1 presented in https://github.com/dotnet/machinelearning/issues/2884#issuecomment-475389060.\r\n\r\nThis will only be done for the estimators indicated in the list in the issue #2884. Going forward we should do it for all others.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3068","RelatedDescription":"Closed issue \"Add multicolumn mapping for the estimators that need it the most\" (#3068)"},{"Id":"424386533","IsPullRequest":true,"CreatedAt":"2019-03-25T22:41:09","Actor":"artidoro","Number":"3066","RawContent":null,"Title":"Multicolumn mapping for some estimators","State":"closed","Body":"Adding multicolumn mapping for some estimators (as per list by @TomFinley and @glebuk):\r\n\r\n- OneHotEncodingEstimator\r\n- TypeConvertingEstimator\r\n- KeyToVectorMappingEstimator\r\n- ValueToKeyMappingEstimator\r\n- OneHotHashEncodingEstimator\r\n- MissingValueEstimator\r\n- FeatureSelectionCatalog.*\r\n- KeyToValueMappingEstiamtor\r\n\r\nLeaving out:\r\n- TextFeaturizingEstimator (probably requires column specific settings most of the time)\r\n- NoramlizingEstiamtor (in experimental nuget)\r\n\r\n\r\nLet me know if I should add more estimators.\r\n\r\nFixes #3068\r\nRelated to #2884 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3066","RelatedDescription":"Closed or merged PR \"Multicolumn mapping for some estimators\" (#3066)"},{"Id":"425125712","IsPullRequest":false,"CreatedAt":"2019-03-25T22:22:24","Actor":"codemzs","Number":"3081","RawContent":null,"Title":"Move transform catalog extensions into its own class in experimental nuget.","State":"closed","Body":"Move transform catalog extensions into its own class in experimental nuget.","Url":"https://github.com/dotnet/machinelearning/issues/3081","RelatedDescription":"Closed issue \"Move transform catalog extensions into its own class in experimental nuget.\" (#3081)"},{"Id":"425125129","IsPullRequest":true,"CreatedAt":"2019-03-25T22:22:24","Actor":"codemzs","Number":"3080","RawContent":null,"Title":"Move transform catalog extensions into its own file and class in experimental nuget.","State":"closed","Body":"Transform catalog extension methods are misplaced in MlContextExtensions.cs file. They need to go in a file of its own.\r\n\r\nfixes #3081","Url":"https://github.com/dotnet/machinelearning/pull/3080","RelatedDescription":"Closed or merged PR \"Move transform catalog extensions into its own file and class in experimental nuget.\" (#3080)"},{"Id":"425135348","IsPullRequest":false,"CreatedAt":"2019-03-25T22:01:32","Actor":"daholste","Number":"3083","RawContent":null,"Title":"Cannot access leaf nodes of trained trees","State":"open","Body":"In this review https://github.com/dotnet/machinelearning/pull/2753, I notice the methods to traverse thru trained tree ensembles have been removed from the public API\r\n\r\n@wschin @TomFinley \r\n\r\nI understand the logic for removing.\r\n\r\nHowever, in our forked copy of SMAC, we require / have been using this functionality. Any advice on how to proceed?","Url":"https://github.com/dotnet/machinelearning/issues/3083","RelatedDescription":"Open issue \"Cannot access leaf nodes of trained trees\" (#3083)"},{"Id":"425075954","IsPullRequest":true,"CreatedAt":"2019-03-25T20:31:23","Actor":"TomFinley","Number":"3078","RawContent":null,"Title":"Internalize LpNorm column options.","State":"closed","Body":"Small refinement of the PR #2959. I noticed that a few of the `ColumnOptions` classes, including a base class, were still appearing in the public API. Also hide the `IReadOnlyList<...>` to access it through the columns as we do not want to do that per @Ivanidzo4ka.","Url":"https://github.com/dotnet/machinelearning/pull/3078","RelatedDescription":"Closed or merged PR \"Internalize LpNorm column options.\" (#3078)"},{"Id":"425024171","IsPullRequest":false,"CreatedAt":"2019-03-25T20:11:48","Actor":"jappenzeller","Number":"3077","RawContent":null,"Title":".NET Core OneHotEncoding Error","State":"closed","Body":"### System information\r\n.Net Core 2.1\r\nMicrosoft.ML v0.11.0\r\n\r\n### Issue\r\n\r\nOneHotEncoding that works in the non core version was fine.  Now I get a type error.\r\nPreview of the data seems correct.\r\n\r\n### Source code / logs\r\nRelevant code snippets and error message.\r\n\r\nLoader\r\nnew TextLoader.Column(\"RECORDTYPEID\",DataKind.String,3),\r\n\r\nPipeline\r\n.Append(mlContext.Transforms.Categorical.OneHotEncoding(\"RECORDTYPEID\"))\r\n\r\n.Append(mlContext.Transforms.Concatenate(\"Features\",\r\n...\r\n\"RECORDTYPEID\",\r\n\r\nError Message on this line of code,\r\nvar model = pipeline.Fit(trainingDataView);\r\n\r\nSystem.InvalidOperationException: 'Column 'RECORDTYPEID' has values of R4which is not the same as earlier observed type of R8.'\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3077","RelatedDescription":"Closed issue \".NET Core OneHotEncoding Error\" (#3077)"},{"Id":"424809804","IsPullRequest":false,"CreatedAt":"2019-03-25T09:52:58","Actor":"matnatx","Number":"3076","RawContent":null,"Title":"Setting Epoch & Batch Size Hyper Parameters","State":"open","Body":"Hi,\r\n\r\nIs there a way to set Hyper Parameters such as EPOCH numbers and Batch Size for the LogisticRegression Trainer? What is the default if these aren't set?\r\n\r\nThanks!\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3076","RelatedDescription":"Open issue \"Setting Epoch & Batch Size Hyper Parameters\" (#3076)"},{"Id":"424770910","IsPullRequest":false,"CreatedAt":"2019-03-25T08:09:27","Actor":"1amirjalai","Number":"3075","RawContent":null,"Title":"Schema comprehension in ML.NET needs more detailed document","State":"open","Body":"Areas that need to be covered in schema comprehension in ML.NET\r\n\r\n\r\n1. LoadFromEnumerable is not covered very well. for example how should huge amount of data be read from elasticsearh or sql ? \r\n\r\n- should that huge amount be converted to csv and then read it from csv using textloader?\r\n- should all of that data be presented in the memory? for example write a code like this:\r\n```\r\n  var dataAsList = GetAllDataFromSQLAndPutItIntoAList();\r\n\r\n  var trainingDataView= mlContext.Data.LoadFromEnumerable<dataType>(dataAsList);\r\n\r\n  trainingDataView = mlContext.Data.Cache(trainingDataView);\r\n\r\n  var pipeline = mlContext.Transforms.CreatePipeLine();\r\n\r\n  ITransformer model = pipeline.Fit(trainingDataView);\r\n```\r\n[Microsoft doc](GetChurnInfo) has an sql example. should all the data be loaded into a list at GetChurnInfo()?\r\n\r\n```\r\n// Create a new context for ML.NET operations. It can be used for exception tracking and logging,\r\n// as a catalog of available operations and as the source of randomness.\r\nvar mlContext = new MLContext();\r\n\r\n// Step one: read the data as an IDataView.\r\n// Let's assume that 'GetChurnData()' fetches and returns the training data from somewhere.\r\nIEnumerable<CustomerChurnInfo> churnData = GetChurnInfo();\r\n\r\n// Turn the data into the ML.NET data view.\r\n// We can use CreateDataView or CreateStreamingDataView, depending on whether 'churnData' is an IList,\r\n// or merely an IEnumerable.\r\nvar trainData = mlContext.Data.LoadFromEnumerable(churnData);\r\n```\r\n\r\n- is there any solution for large amounts of data that are not in text file format?\r\n\r\n2. streaming data. as \r\n\r\n> CreateStreamingDataView \r\n\r\nis out dated so it should be replaced with new detail [here](https://github.com/dotnet/machinelearning/blob/master/docs/code/SchemaComprehension.md)","Url":"https://github.com/dotnet/machinelearning/issues/3075","RelatedDescription":"Open issue \"Schema comprehension in ML.NET needs more detailed document\" (#3075)"},{"Id":"424412275","IsPullRequest":true,"CreatedAt":"2019-03-24T23:38:00","Actor":"yaeldekel","Number":"3071","RawContent":null,"Title":"TextLoader throws when type is missing LoadColumnAttribute","State":"closed","Body":"Fixes #3051.\r\n\r\nEdit: This also fixes #2037.","Url":"https://github.com/dotnet/machinelearning/pull/3071","RelatedDescription":"Closed or merged PR \"TextLoader throws when type is missing LoadColumnAttribute\" (#3071)"},{"Id":"424429246","IsPullRequest":true,"CreatedAt":"2019-03-24T22:56:42","Actor":"eerhardt","Number":"3073","RawContent":null,"Title":"Add ML.DataView to the stable projects.","State":"closed","Body":"We missed ML.DataView in the stable projects list.\r\n\r\nI also grouped the stable projects in logical groups, and fixed a few minor clean ups as I was in here.","Url":"https://github.com/dotnet/machinelearning/pull/3073","RelatedDescription":"Closed or merged PR \"Add ML.DataView to the stable projects.\" (#3073)"},{"Id":"424467598","IsPullRequest":true,"CreatedAt":"2019-03-23T06:00:42","Actor":"artidoro","Number":"3074","RawContent":null,"Title":"ITrivialEstimator (Approach 1)","State":"closed","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3074","RelatedDescription":"Closed or merged PR \"ITrivialEstimator (Approach 1)\" (#3074)"},{"Id":"424388059","IsPullRequest":true,"CreatedAt":"2019-03-22T23:48:33","Actor":"shmoradims","Number":"3067","RawContent":null,"Title":" Added samples for Poisson and OGD regression","State":"closed","Body":"Related to #2522 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3067","RelatedDescription":"Closed or merged PR \" Added samples for Poisson and OGD regression\" (#3067)"},{"Id":"424421592","IsPullRequest":false,"CreatedAt":"2019-03-22T22:25:51","Actor":"sfilipi","Number":"3072","RawContent":null,"Title":"The hashed values stored in the annotations indices are skewed by -1","State":"open","Body":"Look at the [hash extension sample](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/Hash.cs#L58) and compare the hashed values with the values stored in the annotations of the \"CategoryHashed\" column. \r\n\r\nNotice how the indices in the annotations are skewed by -1 from the values in the dataview. \r\n\r\n// Category  CategoryHashed   Age     AgeHashed\r\n// MLB        36206            18      127\r\n// NFL        19015            14      62\r\n// NFL        **_19015_**            15      43\r\n// MLB        36206            18      127\r\n// MLS        **6013**             14      62\r\n\r\nversus [the annotations values:](https://github.com/dotnet/machinelearning/blob/master/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/Hash.cs#L75)\r\n\r\n\r\n// Output Data\r\n// \r\n// The original value of the **6012** category is MLS\r\n// The original value of the **_19014_** category is NFL\r\n// The original value of the 36205 category is MLB\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3072","RelatedDescription":"Open issue \"The hashed values stored in the annotations indices are skewed by -1\" (#3072)"},{"Id":"424401373","IsPullRequest":false,"CreatedAt":"2019-03-22T21:25:11","Actor":"codemzs","Number":"3069","RawContent":null,"Title":"Add cancellation checkpoint in ValueToKeyMappingTransfomer","State":"closed","Body":"This transform iterates over a dataset to construct key to value mapping. These mappings are used by other transformers like OneHotVectorizer, etc. This is a trainable transform and it should have a checkpoint to see if the user has triggered cancellation.","Url":"https://github.com/dotnet/machinelearning/issues/3069","RelatedDescription":"Closed issue \"Add cancellation checkpoint in ValueToKeyMappingTransfomer\" (#3069)"},{"Id":"423999176","IsPullRequest":true,"CreatedAt":"2019-03-22T21:25:11","Actor":"codemzs","Number":"3064","RawContent":null,"Title":"Add cancellation checkpoint in ValueToKeyMappingTransfomer.","State":"closed","Body":"fixes #3069\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3064","RelatedDescription":"Closed or merged PR \"Add cancellation checkpoint in ValueToKeyMappingTransfomer.\" (#3064)"},{"Id":"424402420","IsPullRequest":false,"CreatedAt":"2019-03-22T21:23:16","Actor":"codemzs","Number":"3070","RawContent":null,"Title":"Add Cancellation checkpoint in Normalizer transfomer","State":"closed","Body":"This transform iterates over a dataset to calculate metrics such as mean, average, min, max etc. These values are used to normalize the values in a column. This is a trainable transform and it should have a checkpoint to see if the user has triggered cancellation.","Url":"https://github.com/dotnet/machinelearning/issues/3070","RelatedDescription":"Closed issue \"Add Cancellation checkpoint in Normalizer transfomer\" (#3070)"},{"Id":"423996084","IsPullRequest":true,"CreatedAt":"2019-03-22T21:23:16","Actor":"codemzs","Number":"3062","RawContent":null,"Title":"Add Cancellation checkpoint in Normalizer transfomer.","State":"closed","Body":"fixes #3070","Url":"https://github.com/dotnet/machinelearning/pull/3062","RelatedDescription":"Closed or merged PR \"Add Cancellation checkpoint in Normalizer transfomer.\" (#3062)"},{"Id":"424249440","IsPullRequest":false,"CreatedAt":"2019-03-22T14:53:51","Actor":"PeterPann23","Number":"3065","RawContent":null,"Title":"Simple model error, conflicting annotations should cause an error or work","State":"open","Body":"### System information\r\n\r\n- **Windows 10 64 bit**:\r\n- **.NET 3.0. ML.Net 0.11**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nLoaded Textfile with label and array of float values\r\n\r\n```\r\nvar dataView = mlContext.Data.LoadFromTextFile<DataBase>(trainingFile.FullName, separatorChar: '|', hasHeader: false);\r\nvar dataset = mlContext.MulticlassClassification.TrainTestSplit(dataView, testFraction: 0.1);\r\n\r\nvar pipeline = mlContext.Transforms.Conversion.MapValueToKey(nameof(DataBase.Label),sort:ValueToKeyMappingEstimator.SortOrder.Value)\r\n                    .Append(mlContext.Transforms.Normalize(new NormalizingEstimator.SupervisedBinningColumOptions(inputColumnName: nameof(DataBase.Features), outputColumnName: DefaultColumnNames.Features)))\r\n                    .Append(mlContext.MulticlassClassification.Trainers.StochasticDualCoordinateAscent(labelColumnName: DefaultColumnNames.Label, featureColumnName: DefaultColumnNames.Features))\r\n                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\r\n\r\n\r\n\r\n//crashes here\r\nvar model = pipeline.Fit(dataset.TrainSet);\r\nvar predictions = model.Transform(dataset.TestSet);\r\nmetrics = mlContext.MulticlassClassification.Evaluate(predictions,DefaultColumnNames.Label,DefaultColumnNames.Score);\r\n[Sample.zip](https://github.com/dotnet/machinelearning/files/2997016/Sample.zip)\r\n\r\n```\r\n\r\n\r\n\r\n\r\n- **What happened?**\r\nGot error: Schema mismatch for feature column 'Features': expected Vector<R4>, got R4\r\nParameter name: inputSchema\r\n- **What did you expect?**\r\nNo error as my class is a vector of float  \r\n\r\n### Source code / logs\r\n```\r\n    public class DataBase\r\n    {\r\n        [LoadColumn(0)]     \r\n        public string Label { get; set; }\r\n\r\n         //error in column definition\r\n        [LoadColumn(1),VectorType(220)]  \r\n        public float[] Features { get; set; }\r\n\r\n        public DataBase()\r\n        {\r\n            Features = new float[220];\r\n        }\r\n    }\r\n```\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3065","RelatedDescription":"Open issue \"Simple model error, conflicting annotations should cause an error or work\" (#3065)"},{"Id":"423996817","IsPullRequest":false,"CreatedAt":"2019-03-22T00:23:59","Actor":"singlis","Number":"3063","RawContent":null,"Title":"Predict expects the Label as input","State":"open","Body":"## Issue\r\nWhen calling Predict, our Predict method will take in the same input as what is used for the training pipeline. This is a bit \"odd\" as we force the user to define a \"Label\" variable that does nothing nor is it needed for the output.\r\n\r\nUsing the example from #3037, we have something like this:\r\n```\r\n    let predictor = mlContext.Model.CreatePredictionEngine(transformer)\r\n    let prediction:Prediction = predictor.Predict({Area=0; Price = 209000})\r\n```\r\n\r\nWhere Area is our \"Label\", because this is required by the pipeline, we have to add this in as part of the input. \r\n\r\nCould our pipeline change to only consume the data that is needed to do the prediction? And ideally have something like this:\r\n```\r\nlet prediction:Prediction = predictor.Predict(209000)\r\n```\r\ncc @glebuk  for any additional comments.","Url":"https://github.com/dotnet/machinelearning/issues/3063","RelatedDescription":"Open issue \"Predict expects the Label as input\" (#3063)"},{"Id":"423993829","IsPullRequest":false,"CreatedAt":"2019-03-22T00:09:55","Actor":"singlis","Number":"3061","RawContent":null,"Title":"Null Reference Exception when Concatenating with a single value","State":"open","Body":"### Issue\r\nDiscovered from #3037, a user can call `Concatenate `and specify a single string. When this happens, a NullReference exception is thrown. Here is the code sample:\r\n```\r\n        EstimatorChain()\r\n            .Append(mlContext.Transforms.Conversion.ConvertType(\"Features\", \"Price\", DataKind.Double))\r\n            .Append(mlContext.Transforms.Conversion.ConvertType(\"Label\", \"Area\", DataKind.Double))\r\n            .Append(mlContext.Transforms.Concatenate(\"Features\"))  // This causes the error, should be (\"Features\", \"Features\")\r\n            .AppendCacheCheckpoint(mlContext)\r\n            .Append(mlContext.Regression.Trainers.Sdca(\"Label\", \"Features\"))\r\n            , mlContext\r\n\r\n```\r\n\r\nHere is the callstack:\r\n\r\n```\r\n>\tMicrosoft.ML.Core.dll!Microsoft.ML.SchemaShape.Column.GetTypeString() Line 111\tC#\r\n \tMicrosoft.ML.Data.dll!Microsoft.ML.Trainers.TrainerEstimatorBase<Microsoft.ML.Data.RegressionPredictionTransformer<Microsoft.ML.Trainers.LinearRegressionModelParameters>, Microsoft.ML.Trainers.LinearRegressionModelParameters>.CheckInputSchema(Microsoft.ML.SchemaShape inputSchema) Line 111\tC#\r\n \tMicrosoft.ML.Data.dll!Microsoft.ML.Trainers.TrainerEstimatorBase<Microsoft.ML.Data.RegressionPredictionTransformer<Microsoft.ML.Trainers.LinearRegressionModelParameters>, Microsoft.ML.Trainers.LinearRegressionModelParameters>.GetOutputSchema(Microsoft.ML.SchemaShape inputSchema) Line 83\tC#\r\n \tMicrosoft.ML.Data.dll!Microsoft.ML.Data.EstimatorChain<Microsoft.ML.Data.RegressionPredictionTransformer<Microsoft.ML.Trainers.LinearRegressionModelParameters>>.GetOutputSchema(Microsoft.ML.SchemaShape inputSchema) Line 83\tC#\r\n \tMicrosoft.ML.Data.dll!Microsoft.ML.Data.EstimatorChain<Microsoft.ML.Data.RegressionPredictionTransformer<Microsoft.ML.Trainers.LinearRegressionModelParameters>>.Fit(Microsoft.ML.IDataView input) Line 60\tC#\r\n \tConsoleApp32.dll!Program.main(string[] argv) Line 33\tF#\r\n```\r\nThe problem is that a NullReference exception looks like a bug and its not obvious to the user on what is the cause of the problem.\r\n\r\n## Expected\r\nWe should instead notify the user that: \r\n1) A bad argument was passed in\r\n2) That its the Concatenate transform that has the bad argument\r\n\r\n### Solution A\r\nWe simply check the length of the name array that is passed to Concatenate and throw the correct exception.\r\n\r\n### Solution B\r\nAnother possible solution is to change the behavior so that when one column is specified for `Concatenate`, the name is treated as the source and destination -- so this:\r\n```\r\n            .Append(mlContext.Transforms.Concatenate(\"Features\"))\r\n```\r\nwould be the same as this:\r\n```\r\n            .Append(mlContext.Transforms.Concatenate(\"Features\", \"Features\"))\r\n```\r\n\r\ncc @glebuk for additional feedback","Url":"https://github.com/dotnet/machinelearning/issues/3061","RelatedDescription":"Open issue \"Null Reference Exception when Concatenating with a single value\" (#3061)"},{"Id":"423990970","IsPullRequest":false,"CreatedAt":"2019-03-21T23:56:42","Actor":"singlis","Number":"3060","RawContent":null,"Title":"Automatic conversion of data in the pipeline","State":"open","Body":"## Issue\r\nWhen providing data to a pipeline there is an expectation that we put on the user to know the data type the trainer is expecting. This is a painful experience for end-users as it requires them to not only know what data types they need to convert to, but also results in them having to add more steps to their pipeline to accommodate.\r\n\r\nThe example from #3037 demonstrates this issue as this pipeline is taking in integer values for the Label and Features and passing this into the SDCA trainer. Because the data is integer based, the pipeline uses `ConvertType ` to convert from int to float, followed by a `Concatenate` to generate a vector type (note this is in F# but still applies to C#)\r\n```\r\n        let mlContext = MLContext()\r\n        EstimatorChain()\r\n           .Append(mlContext.Transforms.Conversion.ConvertType(\"Features\", \"Price\", DataKind.Single))\r\n           .Append(mlContext.Transforms.Conversion.ConvertType(\"Label\", \"Area\", DataKind.Single))\r\n           .Append(mlContext.Transforms.Concatenate(\"Features\", \"Features\"))\r\n           .AppendCacheCheckpoint(mlContext)\r\n           .Append(mlContext.Regression.Trainers.StochasticDualCoordinateAscent(\"Label\", \"Features\"))\r\n           , mlContext\r\n```\r\nWithout conversions, the user will hit an exception saying that the expected type for a Label is of type float followed by the expected type for Features should be a vector of floats. \r\n\r\n## Suggestion\r\nWe should hide these details from the user as this would make the pipeline easier to load and simplify a user's pipeline. Taking the example above, if you were to remove the conversion steps, it would look something like this:\r\n```\r\n   let trainer = mlContext.Regression.Trainers.StochasticDualCoordinateAscent(\"Area\", \"Price\")\r\n```\r\n\r\ncc @glebuk for any additional input","Url":"https://github.com/dotnet/machinelearning/issues/3060","RelatedDescription":"Open issue \"Automatic conversion of data in the pipeline\" (#3060)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-03-26T05:30:32.3913612Z","RunDurationInMilliseconds":567}