{"Data":{"GitHub":{"Issues":[{"Id":"463481729","IsPullRequest":false,"CreatedAt":"2019-07-03T22:25:19","Actor":"SamBent","Number":"1148","RawContent":null,"Title":"Fix DrtNavigationEvents","State":"closed","Body":"DrtNavigationEvents is failing because of #1147.  It is getting more NavigationProgress events than it expects.","Url":"https://github.com/dotnet/wpf/issues/1148","RelatedDescription":"Closed issue \"Fix DrtNavigationEvents\" (#1148)"},{"Id":"463498871","IsPullRequest":false,"CreatedAt":"2019-07-03T22:24:10","Actor":"SamBent","Number":"1150","RawContent":null,"Title":"Fix DrtFlowLayout","State":"closed","Body":"DrtFlowLayout is failing because of a behavior change (bug fix) between .NETFx and .NETCore.  When double d is between -0.001 and 0, d.ToString(\"F\", Invariant) returns \"0.00\" in .NETFx, but \"-0.00\" in .NETCore.\r\n","Url":"https://github.com/dotnet/wpf/issues/1150","RelatedDescription":"Closed issue \"Fix DrtFlowLayout\" (#1150)"},{"Id":"463947362","IsPullRequest":false,"CreatedAt":"2019-07-03T20:51:05","Actor":"vatsan-madhavan","Number":"1172","RawContent":null,"Title":"Document new API's","State":"open","Body":"In .NET Core 2.0, new API's any that are currently missing documentation would need to be documented. \r\n\r\nWe will rely on the docs team (/cc @mairaw) to identify the gaps - this is not intended as a task to fill every possible documentation gap. \r\n\r\nSo far, these are the outstanding API's WPF needs to document: \r\n\r\n|    Namespace                         |    Class                                |    Name                                            |\r\n|--------------------------------------|-----------------------------------------|----------------------------------------------------|\r\n|    System.Printing                   |    PrintJobInfoCollection               |    System.Collections.IEnumerable.GetEnumerator    |\r\n|    System.Printing                   |    PrintQueueCollection                 |    System.Collections.IEnumerable.GetEnumerator    |\r\n|    System.Windows                    |    FrameworkTemplate                    |    System.Windows.ISealable.CanSeal                |\r\n|    System.Windows                    |    FrameworkTemplate                    |    System.Windows.ISealable.IsSealed               |\r\n|    System.Windows                    |    FrameworkTemplate                    |    System.Windows.ISealable.Seal                   |\r\n|    System.Windows                    |    FreezableCollection<T>.Enumerator    |    FreezableCollection<T>.Enumerator               |\r\n|    System.Windows                    |    Style                                |    System.Windows.ISealable.CanSeal                |\r\n|    System.Windows                    |    Style                                |    System.Windows.ISealable.IsSealed               |\r\n|    System.Windows                    |    Style                                |    System.Windows.ISealable.Seal                   |\r\n|    System.Windows.Automation         |    AndCondition                         |    GetConditions                                   |\r\n|    System.Windows.Automation         |    AutomationProperty                   |    LookupById                                      |\r\n|    System.Windows.Automation         |    AutomationTextAttribute              |    LookupById                                      |\r\n|    System.Windows.Automation         |    ClientSideProviderFactoryCallback    |    ClientSideProviderFactoryCallback               |\r\n|    System.Windows.Automation         |    ControlType                          |    LookupById                                      |\r\n|    System.Windows.Controls           |    InkCanvas                            |    OnCreateAutomationPeer                          |\r\n|    System.Windows.Controls           |    InkPresenter                         |    OnCreateAutomationPeer                          |\r\n|    System.Windows.Controls           |    ScrollViewer                         |    ArrangeOverride                                 |\r\n|    System.Windows.Documents          |    PresentationUIStyleResources         |    PresentationUIStyleResources                    |\r\n|    System.Windows.Input              |    StylusButton                         |    ToString                                        |\r\n|    System.Windows.Input              |    StylusPointCollection                |    ToHiMetricArray                                 |\r\n|    System.Windows.Input              |    TabletDeviceCollection               |    System.Collections.IEnumerable.GetEnumerator    |\r\n|    System.Windows.Media              |    PenDashCap                           |    Flat                                            |\r\n|    System.Windows.Media              |    PenDashCap                           |    PenDashCap                                      |\r\n|    System.Windows.Media              |    PenDashCap                           |    Round                                           |\r\n|    System.Windows.Media              |    PenDashCap                           |    Triangle                                        |\r\n|    System.Windows.Media.Animation    |    IAnimation                           |    GetCurrentValue                                 |\r\n|    System.Windows.Media.Animation    |    IAnimation                           |    IAnimation                                      |\r\n|    System.Windows.Xps                |    XpsDocumentWriter                    |    raise_WritingCancelled                          |\r\n|    System.Windows.Xps                |    XpsDocumentWriter                    |    raise_WritingCompleted                          |\r\n|    System.Windows.Xps                |    XpsDocumentWriter                    |    raise_WritingPrintTicketRequired                |\r\n|    System.Windows.Xps                |    XpsDocumentWriter                    |    raise_WritingProgressChanged                    |\r\n|    System.Windows.Xps.Packaging      |    IXpsFixedDocumentSequenceReader      |    GetFixedDocument                                |\r\n|    System.Xaml.Permissions           |    XamlLoadPermission                   |    Equals                                          |\r\n|    System.Xaml.Permissions           |    XamlLoadPermission                   |    GetHashCode                                     |\r\n\r\n\r\n@ryalanms & @fabiant3, assigning to you since you are already working with the docs team.\r\n/cc @vivmishra ","Url":"https://github.com/dotnet/wpf/issues/1172","RelatedDescription":"Open issue \"Document new API's\" (#1172)"},{"Id":"463931305","IsPullRequest":true,"CreatedAt":"2019-07-03T20:07:08","Actor":"batzen","Number":"1171","RawContent":null,"Title":"Using a stopwatch and timespan instead of DateTime and uint","State":"open","Body":"This fixes #1170","Url":"https://github.com/dotnet/wpf/pull/1171","RelatedDescription":"Open PR \"Using a stopwatch and timespan instead of DateTime and uint\" (#1171)"},{"Id":"463931153","IsPullRequest":false,"CreatedAt":"2019-07-03T20:06:42","Actor":"batzen","Number":"1170","RawContent":null,"Title":"TextBoxView uses DateTime.Now for time measurements","State":"open","Body":"* .NET Core Version: All\r\n* Windows version: 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\n` TextBoxView` uses `DateTime.Now` inside `FullMeasureTick` to measure a maximum time frame of 200 milliseconds for line measurements.\r\nAs `DateTime.Now` is \"slow\" and inaccurate a `Stopwatch` should be used and the time frame should be expressed as a `TimeSpan` instead of int or uint.\r\nThe same `TimeSpan` change should apply to the `_throttleBackgroundTimer`.\r\n","Url":"https://github.com/dotnet/wpf/issues/1170","RelatedDescription":"Open issue \"TextBoxView uses DateTime.Now for time measurements\" (#1170)"},{"Id":"463929570","IsPullRequest":true,"CreatedAt":"2019-07-03T20:02:12","Actor":"batzen","Number":"1169","RawContent":null,"Title":"Preventing focus steal if parent window/application is not active","State":"open","Body":"This fixes #1168","Url":"https://github.com/dotnet/wpf/pull/1169","RelatedDescription":"Open PR \"Preventing focus steal if parent window/application is not active\" (#1169)"},{"Id":"463929454","IsPullRequest":false,"CreatedAt":"2019-07-03T20:01:53","Actor":"batzen","Number":"1168","RawContent":null,"Title":"Hovering over MenuItem causes the window to get activated","State":"open","Body":"* .NET Core Version: All\r\n* Windows version: 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\n \r\n **Actual behavior:**\r\nHovering over a `MenuItem` causes the window to get activated.\r\n \r\n **Expected behavior:**\r\nHovering over a `MenuItem` does not activate the window.\r\n \r\n **Minimal repro:**\r\n- Create a new window containing a `MenuItem`\r\n- Focus a different window\r\n- Hover over the `MenuItem`\r\n- Window gets activated\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/1168","RelatedDescription":"Open issue \"Hovering over MenuItem causes the window to get activated\" (#1168)"},{"Id":"463928062","IsPullRequest":true,"CreatedAt":"2019-07-03T19:57:56","Actor":"batzen","Number":"1167","RawContent":null,"Title":"Fixing validation adorner for not yet visible controls","State":"open","Body":"This is a fix for #1166","Url":"https://github.com/dotnet/wpf/pull/1167","RelatedDescription":"Open PR \"Fixing validation adorner for not yet visible controls\" (#1167)"},{"Id":"463927915","IsPullRequest":false,"CreatedAt":"2019-07-03T19:57:34","Actor":"batzen","Number":"1166","RawContent":null,"Title":"Validation adorner does show up for controls with initial errors inside an Expander","State":"open","Body":"* .NET Core Version: All\r\n* Windows version: 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\nThis issue occurs on controls that \"hide\" their child controls. These controls are, for example, `Expander` and `TabControl`.\r\n\r\n **Actual behavior:**\r\nValidation adorner does not show up for not yet visible controls with validation errors.\r\n \r\n **Expected behavior:**\r\nValidation adorner should show up as soon as controls get visible if they were not visible before but have validation errors.\r\n \r\n **Minimal repro:**\r\n- Create an object that implements `INotifyDataErrorInfo`\r\n- Always return `true` in `HasErrors`\r\n- Always return some text in `GetErrors`\r\n- Create a property on that object\r\n- Create a `TextBox` and bind to the property on the object\r\n- Place the `TextBox` inside a collapsed (`IsExpanded=False`) `Expander`\r\n- Expand the `Expander`, no validation adorner is shown\r\n","Url":"https://github.com/dotnet/wpf/issues/1166","RelatedDescription":"Open issue \"Validation adorner does show up for controls with initial errors inside an Expander\" (#1166)"},{"Id":"463925877","IsPullRequest":true,"CreatedAt":"2019-07-03T19:52:06","Actor":"batzen","Number":"1165","RawContent":null,"Title":"Use regular resource lookup for FocusVisualStyle","State":"open","Body":"This fixes #1164","Url":"https://github.com/dotnet/wpf/pull/1165","RelatedDescription":"Open PR \"Use regular resource lookup for FocusVisualStyle\" (#1165)"},{"Id":"463925716","IsPullRequest":false,"CreatedAt":"2019-07-03T19:51:43","Actor":"batzen","Number":"1164","RawContent":null,"Title":"FocusVisualStyle can't be overwritten globally","State":"open","Body":"* .NET Core Version: All\r\n* Windows version: 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\nBecause `KeyboardNavigation` uses `SystemResources.FindResourceInternal` instead of `FrameworkElement.FindResourceInternal` the default `FocusVisualStyle` can't be overwritten globally.\r\n\r\n **Actual behavior:**\r\n Overwriting `{x:Static SystemParameters.FocusVisualStyleKey}` does not overwrite the default `FocusVisualStyle`.\r\n \r\n **Expected behavior:**\r\n Overwriting `{x:Static SystemParameters.FocusVisualStyleKey}` should overwrite the default `FocusVisualStyle`.\r\n\r\n **Minimal repro:**\r\n- Create a style with the key `{x:Static SystemParameters.FocusVisualStyleKey}`\r\n- Create a window with a `Button`\r\n- Set focus on the `Button`\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/1164","RelatedDescription":"Open issue \"FocusVisualStyle can't be overwritten globally\" (#1164)"},{"Id":"463923634","IsPullRequest":true,"CreatedAt":"2019-07-03T19:45:51","Actor":"batzen","Number":"1163","RawContent":null,"Title":"Select all text on triple click when no rich content","State":"open","Body":"This is a fix for #1162","Url":"https://github.com/dotnet/wpf/pull/1163","RelatedDescription":"Open PR \"Select all text on triple click when no rich content\" (#1163)"},{"Id":"463923383","IsPullRequest":false,"CreatedAt":"2019-07-03T19:45:11","Actor":"batzen","Number":"1162","RawContent":null,"Title":"Triple click in TextBox does not select all text","State":"open","Body":"* .NET Core Version: All\r\n* Windows version: 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\nTriple clicking in a `TextBox` does not select all text in the `TextBox`.\r\n \r\n **Actual behavior:**\r\nTriple clicking in a `TextBox` does not select all text in the `TextBox`.\r\n \r\n **Expected behavior:**\r\nTriple clicking in a `TextBox` should select all text.\r\n \r\n **Minimal repro:**\r\n- Create a window containing a `TextBox`\r\n- Write some text into the `TextBox`\r\n- Triple click with the mouse\r\n","Url":"https://github.com/dotnet/wpf/issues/1162","RelatedDescription":"Open issue \"Triple click in TextBox does not select all text\" (#1162)"},{"Id":"463921499","IsPullRequest":true,"CreatedAt":"2019-07-03T19:39:37","Actor":"batzen","Number":"1161","RawContent":null,"Title":"Fixing TextBoxView memory leak for 2 seconds after unloading host control","State":"open","Body":"This is a fix for #1160","Url":"https://github.com/dotnet/wpf/pull/1161","RelatedDescription":"Open PR \"Fixing TextBoxView memory leak for 2 seconds after unloading host control\" (#1161)"},{"Id":"463920017","IsPullRequest":false,"CreatedAt":"2019-07-03T19:35:13","Actor":"batzen","Number":"1160","RawContent":null,"Title":"TextBoxView causes memory leak for 2 seconds after unloading host control","State":"open","Body":"* .NET Core Version: All versions\r\n* Windows version: 1909\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\nTextBoxView causes memory leak for 2 seconds after unloading host control.\r\nThat's caused by the `DispatcherTimer` `_throttleBackgroundTimer`.\r\nThis might not be a problem during usage by a human user, but when i use my custom UI test framework this is a real problem.\r\n\r\n **Actual behavior:**\r\nTextBoxView causes memory leak for 2 seconds after unloading host control.\r\n \r\n **Expected behavior:**\r\nTextBoxView does not leak memory after unloading host control\r\n \r\n **Minimal repro:**\r\n- Create a window containing a `TextBox`\r\n- Create a new instance of the window open/show the window, focus the `TextBox` and close that window multiple times during a 2 second timespan in a loop\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/1160","RelatedDescription":"Open issue \"TextBoxView causes memory leak for 2 seconds after unloading host control\" (#1160)"},{"Id":"463844657","IsPullRequest":true,"CreatedAt":"2019-07-03T16:26:40","Actor":"wtgodbe","Number":"1159","RawContent":null,"Title":"Manual DARC update from Winforms","State":"closed","Body":"Some DARC updates aren't firing right now (https://github.com/dotnet/core-eng/issues/6868). Doing this one manually in service of getting a `preview8` Winforms package into core-sdk: https://github.com/dotnet/core-sdk/blob/cf47047c577f48ce357b0a37e325f68c33395b74/eng/Version.Details.xml#L58\r\n\r\nCC @vatsan-madhavan ","Url":"https://github.com/dotnet/wpf/pull/1159","RelatedDescription":"Closed or merged PR \"Manual DARC update from Winforms\" (#1159)"},{"Id":"463821082","IsPullRequest":false,"CreatedAt":"2019-07-03T15:33:46","Actor":"robertborr","Number":"1158","RawContent":null,"Title":"no dependencies nor content Network build failures in 'official/dnceng/dotnet-wpf-test/refs/heads/master' - '20190702.4'","State":"open","Body":"@dotnet-mc-bot commented on [Tue Jul 02 2019](https://github.com/dotnet/core-eng/issues/6860)\n\nThere were a set of failures during this build. Here is a summary of these:\r\n* https://dnceng.visualstudio.com/internal/_build/results?buildId=248739\r\n  - **Agent:** DDVSOWINAGE316\r\n  - **Error log:** E:\\A\\_work\\0\\s\\.dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(0,0): error NU5017: Cannot create a package that has no dependencies nor content. [E:\\A\\_work\\0\\s\\packaging\\Micros...\r\n\r\n@robertborr\r\n\n\n---\n\n@miguep commented on [Tue Jul 02 2019](https://github.com/dotnet/core-eng/issues/6860#issuecomment-507899553)\n\nI apologize about the noise, this is clearly something wrong with our repo, we are investigating\n\n---\n\n@robertborr commented on [Wed Jul 03 2019](https://github.com/dotnet/core-eng/issues/6860#issuecomment-508144388)\n\ndup #6837  reclass sourcecode and moving to wpf\n\n","Url":"https://github.com/dotnet/wpf/issues/1158","RelatedDescription":"Open issue \"no dependencies nor content Network build failures in 'official/dnceng/dotnet-wpf-test/refs/heads/master' - '20190702.4'\" (#1158)"},{"Id":"463758629","IsPullRequest":true,"CreatedAt":"2019-07-03T15:23:20","Actor":"Youssef1313","Number":"1156","RawContent":null,"Title":"Use nameof instead of magic string","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/1156","RelatedDescription":"Closed or merged PR \"Use nameof instead of magic string\" (#1156)"},{"Id":"463756078","IsPullRequest":true,"CreatedAt":"2019-07-03T15:21:55","Actor":"Youssef1313","Number":"1155","RawContent":null,"Title":"Use nameof instead of magic string","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/1155","RelatedDescription":"Closed or merged PR \"Use nameof instead of magic string\" (#1155)"},{"Id":"463754148","IsPullRequest":true,"CreatedAt":"2019-07-03T15:16:11","Actor":"Youssef1313","Number":"1154","RawContent":null,"Title":"Use nameof instead of magic string","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/pull/1154","RelatedDescription":"Closed or merged PR \"Use nameof instead of magic string\" (#1154)"},{"Id":"463764637","IsPullRequest":true,"CreatedAt":"2019-07-03T13:49:41","Actor":"Youssef1313","Number":"1157","RawContent":null,"Title":"Use nameof instead of magic string","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/pull/1157","RelatedDescription":"Open PR \"Use nameof instead of magic string\" (#1157)"},{"Id":"463741925","IsPullRequest":true,"CreatedAt":"2019-07-03T13:20:24","Actor":"dotnet-maestro[bot]","Number":"1153","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:5a60b451-e3fe-4910-c0e5-08d6df169eee)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190702.5\r\n- **Date Produced**: 7/2/2019 1:39 PM\r\n- **Commit**: 30e31f6027fd361c4def538334380fc2df6f5361\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview8.19352.5\r\n\r\n[marker]: <> (End:5a60b451-e3fe-4910-c0e5-08d6df169eee)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1153","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1153)"},{"Id":"463731366","IsPullRequest":true,"CreatedAt":"2019-07-03T12:53:57","Actor":"dotnet-maestro[bot]","Number":"1152","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190702.6\r\n- **Date Produced**: 7/3/2019 2:57 AM\r\n- **Commit**: 3b4f01820b1c677b3e8c73a4e869dda07795f3c9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview8.19352.6\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1152","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1152)"},{"Id":"463714046","IsPullRequest":true,"CreatedAt":"2019-07-03T12:21:03","Actor":"dotnet-maestro[bot]","Number":"1151","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190702.7\r\n- **Date Produced**: 7/2/2019 6:25 PM\r\n- **Commit**: b8c190d95371e658d95a5731f4778bd3da2fa42d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19352.7\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19352.7\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1151","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1151)"},{"Id":"463490327","IsPullRequest":false,"CreatedAt":"2019-07-03T00:28:40","Actor":"stevenbrix","Number":"1149","RawContent":null,"Title":"remove test infrastructure dependency on running as admin","State":"open","Body":"This stemmed from #816, but we determined the task to remove the dependency on running as admin will take too much time, so it's getting a dedicated task. \r\n\r\nMost of the functionality that requires running as admin can probably just be removed, such as JIT debugger registration. I personally don't see much value in that functionality, i can use gflags to do that if i want.  There is a lot of ETW logging as well, and we'll need to handle that gracefully so that we can maintain this, although I doubt anyone will use it.","Url":"https://github.com/dotnet/wpf/issues/1149","RelatedDescription":"Open issue \"remove test infrastructure dependency on running as admin\" (#1149)"},{"Id":"463470281","IsPullRequest":false,"CreatedAt":"2019-07-02T22:56:02","Actor":"SamBent","Number":"1147","RawContent":null,"Title":"BAML streams can be longer than in .NET 4.8.  This can cause more NavigationProgress events.","State":"open","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`) 3.0 Preview8\r\n* Windows version: (`winver`) any\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nCompiling most XAML files in .NET Core produces a longer BAML stream than in .NET Framework.  This is because Core's \"SDK builds\" add implicit references to assemblies that contribute to the default namespace, which then appear as AssemblyInfo records in the BAML stream;  these records don't appear in Framework unless the assemblies were explicitly referenced.   For example, a typical simple app's Core BAML includes records for \"System.Windows.Controls.Ribbon\" and \"WindowsFormsIntegration\" that don't appear in the corresponding Framework BAML.  The extra records, plus references to them from elsewhere in the BAML, increases the length of the BAML stream by about 200 bytes.\r\n\r\nThis obviously results in larger file sizes and a perf impact (for reading the extra bytes), but that is admittedly small.  It doesn't cause an assembly-load impact at runtime;  the extra assemblies are not loaded if they're never used.  One less obvious impact is that loading the BAML can result in raising more [NavigationProgress](https://docs.microsoft.com/en-us/dotnet/api/system.windows.navigation.navigationservice.navigationprogress?view=netframework-4.8) events, as these are purely a function of the length of the BAML stream.\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/1147","RelatedDescription":"Open issue \"BAML streams can be longer than in .NET 4.8.  This can cause more NavigationProgress events.\" (#1147)"},{"Id":"463437106","IsPullRequest":false,"CreatedAt":"2019-07-02T21:09:44","Actor":"weltkante","Number":"1146","RawContent":null,"Title":"How to resolve resource keys from embedded xaml files?","State":"open","Body":"In #865 the xaml theme files were embedded into their theme assemblies to allow tools like VS/Blend to copy them for editing the templates.\r\n\r\nI wanted to take a look and compared the current nightly build against the xaml files delivered with VS and noticed that the embedded resources did not provide named keys, for example\r\n\r\n*Reference xaml installed with Visual Studio:*\r\n```xaml\r\n<SolidColorBrush x:Key=\"Button.Pressed.Border\" Color=\"#FF2C628B\" />\r\n```\r\n*Embedded resource xaml:*\r\n```xaml\r\n<SolidColorBrush x:Key=\"&#214;\" Color=\"#FF2C628B\" />\r\n```\r\n\r\nHow are Visual Studio / Blend resolving these IDs to resource keys when copying a template (I'd like to provide similar logic in my own msbuild-based tooling), or is this a bug and the wrong xaml files got embedded?","Url":"https://github.com/dotnet/wpf/issues/1146","RelatedDescription":"Open issue \"How to resolve resource keys from embedded xaml files?\" (#1146)"},{"Id":"463410409","IsPullRequest":true,"CreatedAt":"2019-07-02T20:30:17","Actor":"dotnet-maestro[bot]","Number":"1145","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190702.2\r\n- **Date Produced**: 7/2/2019 7:45 PM\r\n- **Commit**: 52be7e5282560d26926a288d75a8489cd856ec4a\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview7.19352.2\r\n\r\n[marker]: <> (End:07c1f64b-2232-48be-3da4-08d6ba11e0be)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1145","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/winforms\" (#1145)"},{"Id":"463217391","IsPullRequest":true,"CreatedAt":"2019-07-02T13:23:49","Actor":"dotnet-maestro[bot]","Number":"1144","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:5a60b451-e3fe-4910-c0e5-08d6df169eee)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190701.3\r\n- **Date Produced**: 7/1/2019 1:11 PM\r\n- **Commit**: 1de95ad8207ffeeed5fb1d0889207b6fdc365afa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview8.19351.3\r\n\r\n[marker]: <> (End:5a60b451-e3fe-4910-c0e5-08d6df169eee)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1144","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1144)"},{"Id":"463206750","IsPullRequest":true,"CreatedAt":"2019-07-02T12:51:44","Actor":"dotnet-maestro[bot]","Number":"1143","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190701.8\r\n- **Date Produced**: 7/2/2019 2:08 AM\r\n- **Commit**: c87f30f7e895f08a78efc349437d187f60fd1d58\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview8.19351.8\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1143","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1143)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-07-04T05:30:58.8083345Z","RunDurationInMilliseconds":804}