{"Data":{"Blog":{"FeedItems":[{"Title":"Introducing the SmartHotel360 Reference Mobile Apps","PublishedOn":"2017-12-14T20:52:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you managed to catch any of Microsoft Connect(); 2017, you probably saw a beautiful suite of apps for a fictitious smart hospitality company called SmartHotel360 that showcases the future of...","Href":"https://blog.xamarin.com/introducing-smarthotel360-reference-mobile-apps/","RawContent":null},{"Title":"Iterate Faster with the Xamarin Live Player and iOS Coded User Interface","PublishedOn":"2017-12-13T17:25:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin Live Player is a fantastic tool to rapidly iterate and develop Xamarin applications without ever having to compile. One can easily update an application&#8217;s user interface and business...","Href":"https://blog.xamarin.com/iterate-faster-xamarin-live-player-ios-coded-user-interface/","RawContent":null},{"Title":"Updates to the Xamarin iOS Designer","PublishedOn":"2017-12-12T18:00:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Xamarin Designer for iOS is a visual designer that allows you to edit Storyboard and Xib files directly in Visual Studio and Visual Studio for Mac. Crafting your UI with a designer instead of...","Href":"https://blog.xamarin.com/updates-xamarin-ios-designer/","RawContent":null},{"Title":"Introduction to tvOS","PublishedOn":"2017-12-11T20:03:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Recently, Apple announced the AppleTV 4K, an improved version of the AppleTV launched in 2015, which brought us a new platform to develop for in tvOS. With the touch-enabled Siri remote, we have a new...","Href":"https://blog.xamarin.com/introduction-to-tvos/","RawContent":null},{"Title":"Native Forms is Polished and Shiny in Xamarin.Forms 2.5.0","PublishedOn":"2017-12-08T20:37:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Since we previewed Native Forms in June, we’ve been working to smooth the rough edges and polish it up for Xamarin.Forms 2.5.0 by fixing bugs and integrating the excellent feedback from the community....","Href":"https://blog.xamarin.com/native-forms-polished-shiny-xamarin-forms-2-5-0/","RawContent":null},{"Title":"Even Easier iOS App Provisioning in Visual Studio for Mac ","PublishedOn":"2017-12-07T19:10:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"iOS provisioning is a notoriously hard concept to grasp; even the best developers can be stumped by a signing identity. As a content developer at Xamarin, I’ve created thorough documentation on the...","Href":"https://blog.xamarin.com/even-easier-ios-app-provisioning-visual-studio-mac/","RawContent":null},{"Title":"Get Your Azure Mobile Badge from Xamarin University!","PublishedOn":"2017-12-06T18:38:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We’re excited to introduce the Azure Mobile badge, our first non-certification badge, offered exclusively through Xamarin University! Unlock this badge by completing the Xamarin University Azure...","Href":"https://blog.xamarin.com/get-azure-mobile-badge-xamarin-university/","RawContent":null},{"Title":"￼Fidelity Mobile Unites Brazilian Citizens and Elected Officials with Real-Time Chat Apps","PublishedOn":"2017-12-05T20:11:34+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Real-time messaging apps are becoming commonplace, allowing us to communicate immediately or asynchronously with individuals and groups. Inspired by chat apps’ success with consumer businesses,...","Href":"https://blog.xamarin.com/%ef%bf%bcfidelity-mobile-unites-brazilian-citizens-elected-officials-real-time-chat-apps/","RawContent":null},{"Title":"See What’s New in Visual Studio 2017 Version 15.5","PublishedOn":"2017-12-04T19:54:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we&#8217;re releasing Visual Studio 2017 version 15.5 into stable. This release includes many improvements for mobile developers, including enhancements to XAML editing, the Xamarin Live...","Href":"https://blog.xamarin.com/whats-new-visual-studio-2017-version-15-5/","RawContent":null},{"Title":"Podcast: Xamarin.Forms 2.5.0, Live Player, and What’s New in Visual Studio for Mac","PublishedOn":"2017-12-01T21:48:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I cover the latest news for mobile developers from Microsoft Connect(); 2017, including Xamarin.Forms 2.5.0 and awesome updates to the Live...","Href":"https://blog.xamarin.com/podcast-xamarin-forms-2-5-0-live-player-whats-new-visual-studio-mac/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"6991961890","Type":"PullRequestEvent","CreatedAt":"2017-12-15T03:18:38","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1115","RelatedDescription":"Opened pull request \"[create-vsix, build] Don't package API-10 assemblies\" (#1115) at xamarin/xamarin-android","RelatedBody":"Context: https://developer.xamarin.com/releases/android/xamarin.android_7/xamarin.android_7.4/#API-10_is_Obsolete\r\nContext: https://github.com/xamarin/xamarin-android/pull/1105\r\nContext: https://github.com/xamarin/xamarin-android/pull/1032\r\n\r\nIn Xamarin.Android 7.4, we announced that API-10 was obsolete and\r\nwould be removed in a future release.\r\n\r\nPR #1032 attempted to do so, but does not yet work, so until now we\r\nhave continued shipping API-10 assemblies, even though\r\nXamarin.Android 7.4 hit stable on 2017-Aug-11.\r\n\r\nMeanwhile, PR #1105 includes an NDK bump, which in turn means that the\r\nlowest API level we can compile for will be *API-14*.\r\n\r\nAttempt to split the difference, assuming PR #1105 lands before\r\nPR #1032: Keep the supporting files for API-10, but don't build them,\r\nand explicitly remove `v2.3` from the `.vsix` file."},{"Id":"6991947437","Type":"IssuesEvent","CreatedAt":"2017-12-15T03:12:47","Actor":"JamesNK","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1114","RelatedDescription":"Opened issue \"Cannot serialize abstract class on Android\" (#1114) at xamarin/xamarin-android","RelatedBody":"Copied from https://github.com/JamesNK/Newtonsoft.Json/issues/1514 @skarllot\r\n\r\n---\r\n\r\nI getting in trouble to serialize abstract class that implements binary serialization on Android (NETStandard 1.3), but on desktop works as expected.\r\n\r\nA minimum test project was created at: https://github.com/skarllot/JsonNetAbstractClass\r\n\r\n### Source/destination types\r\n\r\n```csharp\r\n    [Serializable]\r\n    public abstract class BaseClass : ISerializable\r\n    {\r\n        protected BaseClass()\r\n        {\r\n        }\r\n        \r\n        protected BaseClass(SerializationInfo info, StreamingContext context)\r\n        {\r\n        }\r\n        \r\n        void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)\r\n        {\r\n            if (info == null)\r\n                throw new ArgumentNullException(nameof(info));\r\n\r\n            InternalGetObjectData(info, context);\r\n        }\r\n        \r\n        protected abstract void InternalGetObjectData(SerializationInfo info, StreamingContext context);\r\n    }\r\n\r\n    [Serializable]\r\n    public sealed class Collection : BaseClass\r\n    {\r\n        private readonly List<BaseClass> children;\r\n\r\n        public Collection()\r\n        {\r\n            children = new List<BaseClass>();\r\n        }\r\n\r\n        private Collection(SerializationInfo info, StreamingContext context)\r\n            : base(info, context)\r\n        {\r\n            // omitted\r\n        }\r\n\r\n        public IEnumerable<BaseClass> Children => children;\r\n\r\n        public int Count => children.Count;\r\n\r\n        // omitted\r\n    }\r\n\r\n    [Serializable]\r\n    public class Termination : BaseClass\r\n    {\r\n        public int Value { get; set; }\r\n        // omitted\r\n    }\r\n```\r\n\r\n### Source/destination JSON\r\n\r\nOn desktop gets:\r\n```javascript\r\n{\r\n   \"Children\":{\r\n      \"$type\":\"JsonNetAbstractClass.BaseClass[], DesktopJsonNetAbstractClass\",\r\n      \"$values\":[\r\n         {\r\n            \"$type\":\"JsonNetAbstractClass.Termination, DesktopJsonNetAbstractClass\",\r\n            \"Value\":10\r\n         },\r\n         {\r\n            \"$type\":\"JsonNetAbstractClass.Termination, DesktopJsonNetAbstractClass\",\r\n            \"Value\":20\r\n         }\r\n      ]\r\n   }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nSerialize same type on both platforms.\r\n\r\n### Actual behavior\r\n\r\nThrows InvalidOperationException: Can't compile a NewExpression with a constructor declared on an abstract class.\r\n\r\nTrace writer output:\r\n```\r\n2017-11-21T21:33:50.088 Info Started serializing JsonNetAbstractClass.Collection. Path ''.\r\n2017-11-21T21:33:50.128 Info Started serializing JsonNetAbstractClass.BaseClass[]. Path 'Children'.\r\n2017-11-21T21:33:50.133 Verbose Writing type name 'JsonNetAbstractClass.BaseClass[], PortableJsonNetAbstractClass' for JsonNetAbstractClass.BaseClass[]. Path 'Children'.\r\n2017-11-21T21:33:50.136 Error Error serializing JsonNetAbstractClass.Collection. Can't compile a NewExpression with a constructor declared on an abstract class. Path 'Children.$values'.\r\n2017-11-21T21:35:33.760 Error Error trying to serialize object\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n```csharp\r\nvar stringWriter = new StringWriter();\r\nvar collection = new Collection();\r\ncollection.Add(new Termination(10));\r\ncollection.Add(new Termination(20));\r\n\r\nvar traceWriter = new MemoryTraceWriter();\r\nvar serializer = JsonSerializer.CreateDefault();\r\nserializer.TypeNameHandling = TypeNameHandling.Auto;\r\nserializer.TraceWriter = traceWriter;\r\nserializer.Serialize(stringWriter, collection);\r\n```\r\n"},{"Id":"6991906383","Type":"IssuesEvent","CreatedAt":"2017-12-15T02:56:31","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1106","RelatedDescription":"Closed issue \"Support building with JDK 9.0.1\" (#1106) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Install JDK 9.0.1.\r\n1. Build `xamarin-android`.\r\n\r\n### Expected Behavior\r\n\r\nIt builds!\r\n\r\n### Actual Behavior\r\n\r\n[It doesn't](https://devdiv.visualstudio.com/DevDiv/_build/index?buildId=1224076); it fails when building `tests/CodeGen-Binding/Xamarin.Android.LibraryProjectZip-LibBinding`:\r\n\r\n```\r\nTask \"Exec\"\r\n        Using task Exec from Microsoft.Build.Tasks.Exec, Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\n        Executing: ./gradlew assembleDebug --stacktrace\r\n        Environment variables being passed to the tool:\r\n                ANDROID_HOME=/Users/vsts/android-toolchain/sdk\r\n                JAVA_HOME=/usr\r\n        Unable to find a $JAVA_HOME at \"/usr\", continuing with system-provided Java...\r\n        FAILURE: Build failed with an exception.\r\n        * What went wrong:\r\n        Could not determine java version from '9.0.1'.\r\n        * Try:\r\n        Run with --info or --debug option to get more log output.\r\n        * Exception is:\r\n        java.lang.IllegalArgumentException: Could not determine java version from '9.0.1'.\r\n                at org.gradle.api.JavaVersion.toVersion(JavaVersion.java:70)\r\n                at org.gradle.api.JavaVersion.current(JavaVersion.java:80)\r\n                at org.gradle.internal.jvm.UnsupportedJavaRuntimeException.assertUsingVersion(UnsupportedJavaRuntimeException.java:29)\r\n                at org.gradle.launcher.cli.JavaRuntimeValidationAction.execute(JavaRuntimeValidationAction.java:32)\r\n                at org.gradle.launcher.cli.JavaRuntimeValidationAction.execute(JavaRuntimeValidationAction.java:24)\r\n                at org.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:33)\r\n                at org.gradle.launcher.cli.ExceptionReportingAction.execute(ExceptionReportingAction.java:22)\r\n                at org.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:210)\r\n                at org.gradle.launcher.cli.CommandLineActionFactory$WithLogging.execute(CommandLineActionFactory.java:174)\r\n                at org.gradle.launcher.Main.doAction(Main.java:33)\r\n                at org.gradle.launcher.bootstrap.EntryPoint.run(EntryPoint.java:45)\r\n                at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n                at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n                at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n                at java.base/java.lang.reflect.Method.invoke(Method.java:564)\r\n                at org.gradle.launcher.bootstrap.ProcessBootstrap.runNoExit(ProcessBootstrap.java:60)\r\n                at org.gradle.launcher.bootstrap.ProcessBootstrap.run(ProcessBootstrap.java:37)\r\n                at org.gradle.launcher.GradleMain.main(GradleMain.java:23)\r\n                at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n                at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n                at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n                at java.base/java.lang.reflect.Method.invoke(Method.java:564)\r\n                at org.gradle.wrapper.BootstrapMainStarter.start(BootstrapMainStarter.java:30)\r\n                at org.gradle.wrapper.WrapperExecutor.execute(WrapperExecutor.java:129)\r\n                at org.gradle.wrapper.GradleWrapperMain.main(GradleWrapperMain.java:61)\r\n```\r\n"},{"Id":"6991847344","Type":"IssuesEvent","CreatedAt":"2017-12-15T02:32:49","Actor":"JamesNK","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1113","RelatedDescription":"Opened issue \"Xamarin Android - JsonSerializationException: Error getting value from '[FIELD]' on '[METHOD]'\" (#1113) at xamarin/xamarin-android","RelatedBody":"Copied from https://github.com/JamesNK/Newtonsoft.Json/issues/1537 @lorisgiglio\r\n\r\n---\r\n\r\n### Environment\r\n\r\nVisual Studio 2015\r\nXamarin 4.8.0.754\r\nXamarin Android 8.1.0.13\r\nXamarin Android SDK 8.1.1.1\r\nNewtonsoft.Json 10.0.3\r\n\r\n### Source/destination types\r\n\r\n        public class c1\r\n        {\r\n            public string field1 { get; set; }\r\n        }\r\n\r\n### Expected behavior\r\n\r\nIt has to serialize the simple object\r\n\r\n### Actual behavior\r\n\r\n12-13 10:49:28.412  9122  9122 I MonoDroid: UNHANDLED EXCEPTION:\r\n12-13 10:49:28.419  9122  9122 I MonoDroid: Newtonsoft.Json.JsonSerializationException: Error getting value from 'field1' on 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'. ---> System.MissingMethodException: **Method 'System.Reflection.Emit.DynamicMethod.set_ProfileAPICheck' not found.**\r\n12-13 10:49:28.419  9122  9122 I MonoDroid:   at System.Linq.Expressions.Compiler.LambdaCompiler.Compile (System.Linq.Expressions.LambdaExpression lambda, System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator) [0x0000f] in <bfedf5c3cdd04d14a8bd94e62f153ad8>:0\r\n12-13 10:49:28.419  9122  9122 I MonoDroid:   at System.Linq.Expressions.LambdaExpression.Compile () [0x00000] in <bfedf5c3cdd04d14a8bd94e62f153ad8>:0\r\n12-13 10:49:28.419  9122  9122 I MonoDroid:   at Newtonsoft.Json.Utilities.ExpressionReflectionDelegateFactory.CreateGet[T] (System.Reflection.PropertyInfo propertyInfo) [0x0007c] in <c19705166c7c4a608e182e859c4de6d2>:0\r\n12-13 10:49:28.419  9122  9122 I MonoDroid:   at Newtonsoft.Json.Utilities.ReflectionDelegateFactory.CreateGet[T] (System.Reflection.MemberInfo memberInfo) [0x0000a] in <c19705166c7c4a608e182e859c4de6d2>:0\r\n12-13 10:49:28.419  9122  9122 I MonoDroid:   at Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue (System.Object target) [0x0000e] in <c19705166c7c4a608e182e859c4de6d2>:0\r\n12-13 10:49:28.419  9122  9122 I MonoDroid:    --- End of inner exception stack trace ---\r\n12-13 10:49:28.419  9122  9122 I MonoDroid:   at Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue (System.Object target) [0x00054] in <c19705166c7c4a608e182e859c4de6d2>:0\r\n12-13 10:49:28.419  9122  9122 I MonoDroid:   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.CalculatePropertyValues (Newtonsoft.Json.JsonWriter writer, System.Object value, Newtonsoft.Json.Serialization.JsonContainerContract contract, Newtonsoft.Json.Serialization.JsonProperty member, Newtonsoft.Json.Serialization.JsonProperty property, Newtonsoft.Json.Serialization.JsonContract& memberContract, System.Object& memberValue) [0x00066] in <c19705166c7c4a608e182e859c4de6d2>:0\r\n12-13 10:49:28.419  9122  9122 I MonoDroid:   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeObject (Newtonsoft.Json.JsonWriter writer, System.Object value, Newtonsoft.Json.Serialization.JsonObjectContract contract, Newtonsoft.Json.Serialization.JsonProperty member, Newtonsoft.Json.Serialization.JsonContainerContract collectionContract, Newtonsoft.Json.Serialization.JsonProperty containerProperty) [0x0008d] in <c19705166c7c4a608e182e859c4de6d2>:0\r\n12-13 10:49:28.419  9122  9122 I MonoDroid:   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeValue (Newtonsoft.Json.JsonWriter writer, System.Object value, Newtonsoft.Json.Serialization.JsonContract valueContract, Newtonsoft.Json.Serialization.JsonProperty member, Newtonsoft.Json.Serialization.JsonContainerContract containerContract, Newtonsoft.Json.Serialization.JsonProperty containerProperty) [0x000b0] in <c19705166c7c4a608e182e859c4de6d2>:0\r\n12-13 10:49:28.419  9122  9122 I MonoDroid:   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize (Newtonsoft.Json.JsonWriter jsonWriter, System.Object value, System.Type objectType) [0x00079] in <c19705166c7c4a608e182e859c4de6d2>:0\r\n12-13 10:49:28.419  9122  9122 I MonoDroid:   at Newtonsoft.Json.JsonSerializer.SerializeInternal (Newtonsoft.Json.JsonWriter jsonWriter, System.Object value, System.Type objectType) [0x00253] in <c19705166c7c4a608e182e859c4de6d2>:0\r\n12-13 10:49:28.419  9122  9122 I MonoDroid:   at Newtonsoft.Json.JsonSerializer.Serialize (Newtonsoft.Json.JsonWriter jsonWriter, System.Object value, System.Type objectType) [0x00000] in <c19705166c7c4a608e182e859c4de6d2>:0\r\n12-13 10:49:28.419  9122  9122 I MonoDroid:   at Newtonsoft.Json.JsonConvert.SerializeObjectInternal (System.Object value, System.Type type, Newtonsoft.Json.JsonSerializer jsonSerializer) [0x00028] in <c19705166c7c4a608e182e859c4de6d2>:0\r\n12-13 10:49:28.419  9122  9122 I MonoDroid:   at Newtonsoft.Json.JsonConvert.SerializeObject (System.Object value, System.Type type, Newtonsoft.Json.JsonSerializerSettings settings) [0x00007] in <c19705166c7c4a608e182e859c4de6d2>:0\r\n12-13 10:49:28.419  9122  9122 I MonoDroid:   at Newtonsoft.Json.JsonConvert.SerializeObject (System.Object value, Newtonsoft.Json.JsonSerializerSettings settings) [0x00000] in <c19705166c7c4a608e182e859c4de6d2>:0\r\n\r\n### Steps to reproduce\r\n\r\n        public static string GetData(string s1)\r\n        {\r\n           if (string.IsNullOrWhiteSpace(s1)) return null;\r\n\r\n            c1 c = new c1();\r\n\r\n            c1.field1 = s1;\r\n\r\n            string res = JsonConvert.SerializeObject(c1);\r\n            \r\n            return res;\r\n       }"},{"Id":"6991671308","Type":"PullRequestEvent","CreatedAt":"2017-12-15T01:23:14","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1101","RelatedDescription":"Closed pull request \"Bump to mono/2017-10/e65bf00e\" (#1101) at xamarin/xamarin-android","RelatedBody":"Context: https://bugzilla.xamarin.com/show_bug.cgi?id=56727\r\nContext: https://bugzilla.xamarin.com/show_bug.cgi?id=60545\r\nContext: https://bugzilla.xamarin.com/show_bug.cgi?id=60545\r\nContext: https://bugzilla.xamarin.com/show_bug.cgi?id=60771"},{"Id":"6991669037","Type":"PullRequestEvent","CreatedAt":"2017-12-15T01:22:22","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1112","RelatedDescription":"Opened pull request \"Bump to mono/2017-10/63e8dc6e\" (#1112) at xamarin/xamarin-android","RelatedBody":"Bumps to cecil/mono-2017-10/76ffcdab.\r\nThis is consistent with cba77e9d, which *hopefully* means we won't get\r\nthe unit test failures seen in PR #1101."},{"Id":"6991647828","Type":"PullRequestEvent","CreatedAt":"2017-12-15T01:14:22","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1110","RelatedDescription":"Merged pull request \"[tests] Measure Xamarin.Forms test apk sizes as well\" (#1110) at xamarin/xamarin-android","RelatedBody":""},{"Id":"6991445195","Type":"PullRequestEvent","CreatedAt":"2017-12-14T23:58:11","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1109","RelatedDescription":"Merged pull request \"Bump to Java.Interop/master/57d5d514\" (#1109) at xamarin/xamarin-android","RelatedBody":"Reverts a `generator` change which introduced the `new` keyword on\r\n`class_ref` declarations, as it appeared to cause more harm than good.\r\n\r\nBumps to cecil/mono-2017-10/76ffcdab."},{"Id":"6991284341","Type":"PullRequestEvent","CreatedAt":"2017-12-14T23:05:58","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1107","RelatedDescription":"Merged pull request \"[CodeGen-Binding] Use Gradle 4.4\" (#1107) at xamarin/xamarin-android","RelatedBody":"The VSTS build environment was updated to install Java 9.0.1.\r\n[This promptly broke everything][vsts-build] when building\r\n`tests/CodeGen-Binding/Xamarin.Android.LibraryProjectZip-LibBinding`:\r\n\r\n[vsts-build]: https://devdiv.visualstudio.com/DevDiv/_build/index?buildId=1224076\r\n\r\n\tExecuting: ./gradlew assembleDebug --stacktrace\r\n\t...\r\n\t* What went wrong:\r\n\tCould not determine java version from '9.0.1'.\r\n\t* Try:\r\n\tRun with --info or --debug option to get more log output.\r\n\t* Exception is:\r\n\tjava.lang.IllegalArgumentException: Could not determine java version from '9.0.1'.\r\n\t        at org.gradle.api.JavaVersion.toVersion(JavaVersion.java:70)\r\n\t        at org.gradle.api.JavaVersion.current(JavaVersion.java:80)\r\n\r\nThe fix is to upgrade to Gradle 4.3 or later, which supports Java 9.\r\n\r\nTo upgrade the Gradle used, run:\r\n\r\n\t./gradlew wrapper --gradle-version=4.4 --distribution-type=bin --stacktrace"},{"Id":"6991265422","Type":"PullRequestEvent","CreatedAt":"2017-12-14T23:00:38","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1108","RelatedDescription":"Merged pull request \"[tests] StartAndroidEmulator should check stdout for \"ERROR:\"\" (#1108) at xamarin/xamarin-android","RelatedBody":"Context: https://devdiv.visualstudio.com/DevDiv/_build/index?definitionId=8113\r\n\r\nIn cases where HAXM is installed/not working, an `ERROR:` message can be\r\ndisplayed via stdout. We should check both stdout and stderr for\r\n`ERROR:` messages.\r\n\r\nThis caused builds to hang on VSTS, since the VMs on VSTS do not\r\ncurrently support HAXM."},{"Id":"6991001834","Type":"PullRequestEvent","CreatedAt":"2017-12-14T21:52:02","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1111","RelatedDescription":"Opened pull request \"[Mono.Android] Don't dispose of event handler implementors\" (#1111) at xamarin/xamarin-android","RelatedBody":"Fixes: https://bugzilla.xamarin.com/show_bug.cgi?id=59804\r\nContext: https://gist.github.com/jonpryor/d0e7bda3107913d0ab8ad46e8ae26419\r\nContext: http://download.oracle.com/otndocs/jcp/7224-javabeans-1.01-fr-spec-oth-JSpec/\r\n\r\n(Would you believe a 5.5+ year old bug? Of course you would!)\r\n\r\nAssume a *multithreaded* event registration and dispatch Java app,\r\nsuch as that in the JavaBeans 1.0.1 spec §6.5.1, in which one thread\r\n(un-)subscribes to events via `Model.addModelChangedListener()` and\r\n`Model.removeModelChangedListener()`, while *another thread* is\r\nresponsible for calling `Model.notifyModelChanged()`.\r\n\r\nThis is fine, *so long as* a Listener doesn't \"invalidate\" itself\r\nwhile still accessible from `Model.listeners`:\r\n\r\n\t// This is fine and normal\r\n\tMyModelChangedListener l = new MyModelChangedListener();\r\n\tmodel.addModelChangedListener(l);\r\n\t// ...\r\n\tmodel.removeModelChangedListener(l);\r\n\r\n\t// Doing this *immediately* after removeModelChangedListener() is BAD\r\n\tl.dispose();\r\n\r\nTo see *why* `l.dispose()` is bad -- assuming `dispose()` semantics in\r\nwhich `l.modelChanged()` starts throwing an exception after\r\n`l.dispose()` is invoked -- one must better understand the\r\nmultithreaded nature of the app: the \"notification thread\" *cannot*\r\nknow that the instance is disposed. Consider this serialized execution:\r\n\r\n\t// Thread 1:\r\n\tmodel.addModelChangedListener(l);\r\n\r\n\t// Thread 2:\r\n\tVector listeners;\r\n\tsynchronized (this) {listeners = (Vector) this.listeners.clone();}\r\n\r\n\t// Thread 1:\r\n\tmodel.removeModelChangedListener(l);\r\n\tl.dispose();                  // Here, `l` is still in Thread 2's `listeners`, but is invalid!\r\n\r\n\t// Thread 2:\r\n\tfor (ModelChangedListener l : listeners) {\r\n\t  l.modelChanged();           // will fail\r\n\t}\r\n\r\nThe Xamarin.Android event implementation would *cause* the same\r\nscenario:\r\n\r\n\tpartial class /* Android.App. */ Dialog {\r\n\t  public event EventHandler CancelEvent {\r\n\t    add {\r\n\t      global::Java.Interop.EventHelper.AddEventHandler<Android.Content.IDialogInterfaceOnCancelListener, Android.Content.IDialogInterfaceOnCancelListenerImplementor>(\r\n\t          ref weak_implementor_SetOnCancelListener,\r\n\t          __CreateIDialogInterfaceOnCancelListenerImplementor,\r\n\t          SetOnCancelListener,\r\n\t          __h => __h.Handler += value);\r\n\t    }\r\n\t    remove {\r\n\t      global::Java.Interop.EventHelper.RemoveEventHandler<Android.Content.IDialogInterfaceOnCancelListener, Android.Content.IDialogInterfaceOnCancelListenerImplementor>(\r\n\t          ref weak_implementor_SetOnCancelListener,\r\n\t          Android.Content.IDialogInterfaceOnCancelListenerImplementor.__IsEmpty,\r\n\t          __v => SetOnCancelListener (null),\r\n\t          __h => __h.Handler -= value);\r\n\t    }\r\n\t  }\r\n\t}\r\n\r\nThe key problem was within `EventHelper.RemoveEventHandler()`, where\r\nit would *dispose of the listener* after unregistering it:\r\n\r\n\t// Within EventHelper.RemoveEventHandler():\r\n\tif (empty (impl)) {\r\n\t  unsetListener (impl);\r\n\t  impl.Dispose ();\r\n\t  // ...\r\n\t}\r\n\r\nThe `unsetListener()` invocation is analogous to\r\n`model.removeModelChangedListener()`, causing the `impl` instance to\r\nbe removed from the Java event. The `impl.Dispose()` is the problem,\r\nas if `impl` is later used from another thread, things will fail:\r\n\r\n\tSystem.NotSupportedException: Unable to activate instance of type IWhateverListenerImplementor from native handle 0x1d200001 (key_handle 0x41b92598). --->\r\n\tSystem.MissingMethodException: No constructor found for IWhateverListenerImplementor::.ctor(System.IntPtr, Android.Runtime.JniHandleOwnership) --->\r\n\t...\r\n\r\nUpdate `AndroidEventHelper.RemoveEventHandler()` and\r\n`EventHelper.RemoveEventHandler()` so that they no longer `Dispose()`\r\nof the `TImplementor` instance. This will prevent the\r\n`NotSupportedException` from being raised.# Please enter the commit message for your changes. Lines starting"},{"Id":"6990982501","Type":"PullRequestEvent","CreatedAt":"2017-12-14T21:47:35","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1110","RelatedDescription":"Opened pull request \"[tests] Measure Xamarin.Forms test apk sizes as well\" (#1110) at xamarin/xamarin-android","RelatedBody":""},{"Id":"6990729353","Type":"PullRequestEvent","CreatedAt":"2017-12-14T20:48:33","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1109","RelatedDescription":"Opened pull request \"Bump to Java.Interop/master/57d5d514\" (#1109) at xamarin/xamarin-android","RelatedBody":"Reverts a `generator` change which introduced the `new` keyword on\r\n`class_ref` declarations, as it appeared to cause more harm than good.\r\n\r\nBumps to cecil/mono-2017-10/76ffcdab."},{"Id":"6990700995","Type":"PullRequestEvent","CreatedAt":"2017-12-14T20:41:34","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1108","RelatedDescription":"Opened pull request \"[tests] StartAndroidEmulator should check stdout for \"ERROR:\"\" (#1108) at xamarin/xamarin-android","RelatedBody":"Context: https://devdiv.visualstudio.com/DevDiv/_build/index?definitionId=8113\r\n\r\nIn cases where HAXM is installed/not working, an `ERROR:` message can be\r\ndisplayed via stdout. We should check both stdout and stderr for\r\n`ERROR:` messages.\r\n\r\nThis caused builds to hang on VSTS, since the VMs on VSTS do not\r\ncurrently support HAXM."},{"Id":"6990684180","Type":"PullRequestEvent","CreatedAt":"2017-12-14T20:37:28","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1107","RelatedDescription":"Opened pull request \"[CodeGen-Binding] Use Gradle 4.4\" (#1107) at xamarin/xamarin-android","RelatedBody":"The VSTS build environment was updated to install Java 9.0.1.\r\n[This promptly broke everything][vsts-build] when building\r\n`tests/CodeGen-Binding/Xamarin.Android.LibraryProjectZip-LibBinding`:\r\n\r\n[vsts-build]: https://devdiv.visualstudio.com/DevDiv/_build/index?buildId=1224076\r\n\r\n\tExecuting: ./gradlew assembleDebug --stacktrace\r\n\t...\r\n\t* What went wrong:\r\n\tCould not determine java version from '9.0.1'.\r\n\t* Try:\r\n\tRun with --info or --debug option to get more log output.\r\n\t* Exception is:\r\n\tjava.lang.IllegalArgumentException: Could not determine java version from '9.0.1'.\r\n\t        at org.gradle.api.JavaVersion.toVersion(JavaVersion.java:70)\r\n\t        at org.gradle.api.JavaVersion.current(JavaVersion.java:80)\r\n\r\nThe fix is to upgrade to Gradle 4.3 or later, which supports Java 9.\r\n\r\nTo upgrade the Gradle used, run:\r\n\r\n\t./gradlew wrapper --gradle-version=4.4 --distribution-type=bin --stacktrace"},{"Id":"6990109416","Type":"PullRequestEvent","CreatedAt":"2017-12-14T18:25:28","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1105","RelatedDescription":"Opened pull request \"Fix bundling of assemblies in NDK with unified headers\" (#1105) at xamarin/xamarin-android","RelatedBody":"Context: https://developercommunity.visualstudio.com/content/problem/166029/building-xamarinandroid-application-with-bundleass.html\r\n\r\nNDK 14r introduced experimental support for so-called \"unified headers\" which\r\nreplace the per-platform C header files, NDK 15 deprecated the old headers and\r\nNDK 16 removed them completely. Xamarin.Android has been building itself with\r\nNDK configured to use unified headers for a while now, but we missed one piece\r\nof code which is affected by the change - mkbundle.\r\n\r\nThis commit adds code to MakeBundleNativeCodeExternal task to make it possible\r\nto build code generated by mkbundle on systems with NDK that lacks the\r\nper-platform header files. This is done in a backward-compatible way but if your\r\nNDK has both the old and the new headers, the latter will be used."},{"Id":"6989987526","Type":"PullRequestEvent","CreatedAt":"2017-12-14T17:58:09","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1059","RelatedDescription":"Merged pull request \"[java.interop] improve JavaCast() for interfaces\" (#1059) at xamarin/xamarin-android","RelatedBody":"Currently, interfaces generate `Invoker` classes such as:\r\n```\r\n// src/Mono.Android/obj/Debug/android-26/mcw/Java.Lang.IAppendable.cs\r\npartial class IAppendableInvoker {\r\n        public static IAppendable GetObject (IntPtr handle, JniHandleOwnership transfer)\r\n        {\r\n            return global::Java.Lang.Object.GetObject<IAppendable>(handle, transfer);\r\n        }\r\n}\r\n```\r\n\r\n`JavaCast` was previously looking up these `Invoker` types and calling\r\nthe `GetObject` method via reflection. We can simplify this by just calling\r\n`Java.Lang.Object.GetObject()` directly—bypassing all the reflection.\r\n\r\nOne day we might be able to drop the generated `Invoker` method from\r\ngenerator, but compiled bindings would break on older versions of\r\nXamarin.Android. It might be *instead* worthwhile look into allowing\r\nthe linker to strip the `*Invoker.GetObject()` methods that are now\r\nnot used anymore."},{"Id":"6989802597","Type":"PullRequestEvent","CreatedAt":"2017-12-14T17:17:36","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1104","RelatedDescription":"Merged pull request \"[tests] BuildAMassiveApp needs JavaMaximumHeapSize\" (#1104) at xamarin/xamarin-android","RelatedBody":"Context: https://devdiv.visualstudio.com/DevDiv/_build/index?buildId=1223975\r\n\r\nA recent Windows test run failed with:\r\n```\r\nE:\\A\\_work\\1\\s\\bin\\Debug\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(2191,3):\r\nerror XA5213:\r\n\tjava.lang.OutOfMemoryError. Consider increasing the value of $(JavaMaximumHeapSize).\r\n\t\tJava ran out of memory while executing 'java.exe -jar\r\n\t\tC:\\Users\\dlab\\android-toolchain\\sdk\\build-tools\\26.0.1\\\\lib\\dx.jar\r\n\t\t--dex --no-strict --output obj\\Release\\android\\bin\r\n\t\tE:\\A\\_work\\1\\s\\bin\\TestDebug\\temp\\BuildAMassiveApp\\App1\\obj\\Release\\android\\bin\\classes\\classes.zip\r\n\t\tE:\\A\\_work\\1\\s\\bin\\Debug\\lib\\xamarin.android\\xbuild-frameworks\\MonoAndroid\\v8.1\\mono.android.jar\r\n\t\tC:\\Users\\dlab\\AppData\\Local\\Xamarin\\GooglePlayServicesLib\\22.0.0\\embedded\\classes.jar\r\n\t\tC:\\Users\\dlab\\AppData\\Local\\Xamarin\\Xamarin.Android.Support.v4\\21.0.3\\embedded\\classes.jar\r\n\t\tC:\\Users\\dlab\\AppData\\Local\\Xamarin\\Xamarin.Android.Support.v4\\21.0.3\\embedded\\libs\\internal_impl-21.0.3.jar'\r\n\t\t[E:\\A\\_work\\1\\s\\bin\\TestDebug\\temp\\BuildAMassiveApp\\App1\\App1.csproj]\r\n```\r\n\r\nSince this is quite a large app, I believe we need to set\r\n`$(JavaMaximumHeapSize)` to `1G` for this test. I am not sure why it is\r\nworking for me locally, however."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"6991460476","Type":"IssuesEvent","CreatedAt":"2017-12-15T00:03:20","Actor":"garuma","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1407","RelatedDescription":"Opened issue \"[Previewer] `SetDefaultActionBarTitleTextColor` prevents the Android previewer from working\" (#1407) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nThe `SetDefaultActionBarTitleTextColor` method (or any method for that matter) should not make assumption about a context being an `Activity` (that is never do `((Activity)_context)`).\r\n\r\nIt should use the as operator and null-check the result instead (or `?.` operator).\r\n\r\n### Steps to Reproduce\r\n\r\n1. Open a ContentPage xaml file with master Forms Previewer.\r\n2. Exception happens.\r\n\r\n### Expected Behavior\r\n\r\nWorks\r\n\r\n### Actual Behavior\r\n\r\nException:\r\n\r\n```\r\nERROR: : AndroidXamlRenderer had a rendering error: System.InvalidCastException: Specified cast is not valid.\r\nat Xamarin.Forms.Platform.Android.Platform.SetDefaultActionBarTitleTextColor () in D:\\agent\\_work\\1\\s\\Xamarin.Forms.Platform.Android\\Platform.cs:924\r\nat Xamarin.Forms.Platform.Android.Platform..ctor (Android.Content.Context context, System.Boolean embedded) in D:\\agent\\_work\\1\\s\\Xamarin.Forms.Platform.Android\\Platform.cs:64\r\nat Xamarin.Forms.Platform.Android.Platform..ctor (Android.Content.Context context) in D:\\agent\\_work\\1\\s\\Xamarin.Forms.Platform.Android\\Platform.cs:1087\r\n```\r\n\r\n### Basic Information\r\n\r\n### Screenshots\r\n\r\nN/A\r\n\r\n### Reproduction Link\r\n\r\nN/A\r\n"},{"Id":"6991286031","Type":"IssuesEvent","CreatedAt":"2017-12-14T23:06:27","Actor":"MattRames","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1406","RelatedDescription":"Opened issue \"[UWP] TapGestureRecognizer No Longer Blocks List View Item Tapped Event\" (#1406) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nTapGestureRecognizers inside the view cell of a list view no longer block the item tapped/item selected event of a list view.\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Create a list view with item tapped and or item selected events.\r\n2.  Have a control with a tap gesture recognizer inside the view cell.\r\n3.  Tap gesture recognizer doesn't block item tapped / item selected events.\r\n\r\n### Expected Behavior\r\n\r\nThe TapGestureRecognizer should block the item tapped / item selected event from firing. This use to be the behavior.\r\n\r\n### Actual Behavior\r\n\r\nBoth the TapGestureRecognizer and the item tapped / item selected events fire. \r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.121934\r\n- Last known good version: 2.3.4.270\r\n- IDE: VS 2017 15.5.1\r\n- Platform Target Frameworks:\r\n  - UWP:  15063\r\n- Nuget Packages: Xamarin Forms\r\n- Affected Devices: UWP\r\n\r\n### Reproduction Link\r\n\r\nHere is a reproduction solution\r\nhttps://drive.google.com/file/d/1iud-OgALmeTw1Jf1q6xKMGG00v2xsNhF/view?usp=sharing\r\n"},{"Id":"6991096688","Type":"PullRequestEvent","CreatedAt":"2017-12-14T22:15:06","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1405","RelatedDescription":"Opened pull request \"VisualStateManager phase 1\" (#1405) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAdds the capability to manage properties on Forms VisualElements via declarative states. States can be declared in code or in XAML. \r\n\r\nThe `Xamarin.Forms.Controls\\GalleryPages\\VisualStateManagerGalleries` folder contains example code for using this feature. \r\n\r\n### Bugs Fixed ###\r\n\r\n-  Incidentally fixes [37621 – SearchBar BackgroundColor behavior inconsistent on Windows platforms](https://bugzilla.xamarin.com/show_bug.cgi?id=37621)\r\n\r\n### API Changes ###\r\n\r\n**Added:**\r\n\r\nVisualStateManager:\r\n\r\n`public static Collection<VisualStateGroup> GetVisualStateGroups(VisualElement visualElement)`\r\n`public static void SetVisualStateGroups(VisualElement visualElement, Collection<VisualStateGroup> value)`\r\n`public static bool GoToState(VisualElement visualElement, string name)`\r\n\r\nAndroidSpecific, iOSSpecific, WindowsSpecific:\r\n\r\n`public static bool GetIsLegacyColorModeEnabled(BindableObject element)`\r\n`public static void SetIsLegacyColorModeEnabled(BindableObject element, bool value)`\r\n`public static bool GetIsLegacyColorModeEnabled(this IPlatformElementConfiguration<Android, VisualElement> config)`\r\n`public static IPlatformElementConfiguration<Android, VisualElement> SetIsLegacyColorModeEnabled(\r\n\t\t    this IPlatformElementConfiguration<Android, VisualElement> config, bool value)`\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has tests (if omitted, state reason in description)\r\n- [x] Rebased on top of master at time of PR\r\n- [x] Changes adhere to coding standard\r\n- [x] Consolidate commits as makes sense\r\n"},{"Id":"6990549043","Type":"IssuesEvent","CreatedAt":"2017-12-14T20:04:51","Actor":"davidortinau","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1376","RelatedDescription":"Closed issue \"android:targetSdkVersion=\"26\" causes JSBridge from HybridWebView control to no longer work\" (#1376) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nI recently updated my Xamarin.Forms project to Android SDK 26 (Oreo) and noticed that the JSBridge for my [HybridWebView](https://developer.xamarin.com/guides/xamarin-forms/application-fundamentals/custom-renderer/hybridwebview/) control stopped working properly. The `invokeCSharpAction` JavaScript function injected into the loaded webpage already returns undefined.\r\n\r\nAfter messing around with various things for a while I discovered that simply removing `android:targetSdkVersion=\"26\"` from my AndroidManifest.xml file causes the HybridWebView to start properly working again (`invokeCSharpAction` is now not undefined).\r\n\r\n### Steps to Reproduce\r\n\r\n1. Download attached test project.\r\n2. Debug/run android app.\r\n3. Inspect rendered WebView with `chrome://inspect` in Chrome.\r\n4. Invoke `invokeCSharpAction('Hello!')` from the dev tools console.\r\n5. Observe it works correctly.\r\n6. Stop android app.\r\n7. Edit the Properties/AndroidManifest.xml file and uncomment the line for `<uses-sdk android:minSdkVersion=\"15\" android:targetSdkVersion=\"26\" />`. Comment out/remove the existing `<uses-sdk android:minSdkVersion=\"15\" />` line.\r\n8. Repeat steps 2-3.\r\n9. Observe `invokeCSharpAction` is now undefined.\r\n\r\n### Expected Behavior\r\n\r\n`invokeCSharpAction` to work regardless of setting `android:targetSdkVersion=\"26\"` on `<uses-sdk>` node in AndroidManifest.xml.\r\n\r\n### Actual Behavior\r\n\r\n`invokeCSharpAction` is undefined when setting `android:targetSdkVersion=\"26\"` on `<uses-sdk>` node in AndroidManifest.xml.\r\n\r\nAlso worth noting that I downgraded my app back down to SDK 23 and the `invokeCSharpAction` works correctly no matter if I target `android:targetSdkVersion=\"23\"` in the manifest or not.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin forms 2.3.4-2.5 (latest), Android SDK 26\r\n- Last known good version: Android SDK 23\r\n- IDE: VS 2017\r\n- Platform Target Frameworks:\r\n  - Android: 8.0 \r\n- Android Support Library Version: 23 or 25\r\n- Nuget Packages: n/a\r\n- Affected Devices: All, but testing on Nexus 5X\r\n\r\n### Screenshots\r\n\r\nn/a\r\n\r\n### Reproduction Link\r\n\r\n[WebViewTesting.zip](https://github.com/xamarin/Xamarin.Forms/files/1548418/WebViewTesting.zip)\r\n\r\n"},{"Id":"6989688158","Type":"IssuesEvent","CreatedAt":"2017-12-14T16:55:45","Actor":"Maxgamerboy1","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1404","RelatedDescription":"Opened issue \"Android Picker handling null\" (#1404) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\nHi all! Within my app, I have extended the Picker class and added an IsRequired property. If this is false, it does ItemsSource.Insert(0, null). This is all working as intended on UWP and iOS, however Android throws an exception:\r\njava.lang.IllegalArgumentException: text cannot be null\r\nwhen trying to select something.\r\n\r\nSteps to Reproduce:\r\n\r\n1.  Add a picker to a page\r\n2.  Set the ItemsSource = new List { null, new object() }\r\n3.  Run the app in Android\r\n4. Tap the Picker\r\n\r\nExpected Behavior:\r\nPicker renders with a blank value selected within the modal\r\n\r\nActual Behavior:\r\njava.lang.IllegalArgumentException: text cannot be null\r\nthrown\r\n\r\nBasic Information:\r\n- Version with issue: 2.5.0.91635\r\n- Last known good version: -\r\n- IDE: Visual Studio 2017 Enterprise\r\n- Platform Target Frameworks:\r\n  - iOS:  11.2\r\n  - Android: 8.0\r\n  - UWP:  10.0; Buid 15063\r\n\r\nLogCat trace:\r\n.\r\n.\r\n.\r\n12-14 15:49:37.316  3837  4064 D ConnectivityService:  sending notification for NetworkRequest [ id=1085, legacyType=-1, [ Capabilities: INTERNET&NOT_RESTRICTED&TRUSTED] ]\r\n12-14 15:49:37.316  3837  4064 D ConnectivityService: sending notification CAP_CHANGED for NetworkRequest [ id=1085, legacyType=-1, [ Capabilities: INTERNET&NOT_RESTRICTED&TRUSTED] ]\r\n12-14 15:49:37.317  3837  4064 D ConnectivityService:  sending notification for NetworkRequest [ id=1086, legacyType=-1, [ Transports: WIFI Capabilities: NOT_RESTRICTED&TRUSTED&NOT_VPN] ]\r\n12-14 15:49:37.317  3837  4064 D ConnectivityService: sending notification CAP_CHANGED for NetworkRequest [ id=1086, legacyType=-1, [ Transports: WIFI Capabilities: NOT_RESTRICTED&TRUSTED&NOT_VPN] ]\r\n12-14 15:49:37.317  3837  4064 D ConnectivityService:  sending notification for NetworkRequest [ id=1087, legacyType=-1, [ Capabilities: INTERNET&NOT_RESTRICTED&TRUSTED] ]\r\n12-14 15:49:37.317  3837  4064 D ConnectivityService: sending notification CAP_CHANGED for NetworkRequest [ id=1087, legacyType=-1, [ Capabilities: INTERNET&NOT_RESTRICTED&TRUSTED] ]\r\n12-14 15:49:37.317  3837  4064 D ConnectivityService:  sending notification for NetworkRequest [ id=1088, legacyType=-1, [ Capabilities: INTERNET&NOT_RESTRICTED&TRUSTED] ]\r\n12-14 15:49:37.318  3837  4064 D ConnectivityService: sending notification CAP_CHANGED for NetworkRequest [ id=1088, legacyType=-1, [ Capabilities: INTERNET&NOT_RESTRICTED&TRUSTED] ]\r\n12-14 15:49:37.323  3837  6926 D SamsungAlarmManager: Cancel Alarm calling from uid:10026 pid :5349 / op:PendingIntent{c5c768a: PendingIntentRecord{bb4ebc8 com.google.android.gms broadcastIntent}}\r\n12-14 15:49:37.327  3837  6926 I SamsungAlarmManager: setLocked to kernel - T:2 / 20171214T154945, SetElapsed=238188637, nowELAPSED=238180543\r\n12-14 15:49:37.344  3837  3862 D DevicePolicyManagerService: PfW getPlayForWorkProxy() 0\r\n12-14 15:49:37.347  3837  3862 D DevicePolicyManagerService: PfW getPlayForWorkProxy() flags & FLAG_ALLOW_PROXY_FOR_PFW 0\r\n12-14 15:49:37.347  3837  3862 D DevicePolicyManagerService: PfW getPlayForWorkProxy() flag 0 does not allow PfW\r\n12-14 15:49:37.348 12054 12143 I         : Saving WTK articles in database. Count: 18\r\n12-14 15:49:37.363  3837  5475 D SamsungAlarmManager: setInexact Intent (T:2/F:0/AC:false) 20171214T155002 - CU:10026/CP:5349\r\n12-14 15:49:37.369  3837  5473 D DevicePolicyManagerService: PfW getPlayForWorkProxy() 0\r\n12-14 15:49:37.372  3837  5473 D DevicePolicyManagerService: PfW getPlayForWorkProxy() flags & FLAG_ALLOW_PROXY_FOR_PFW 0\r\n12-14 15:49:37.372  3837  5473 D DevicePolicyManagerService: PfW getPlayForWorkProxy() flag 0 does not allow PfW\r\n12-14 15:49:37.376  3837  5512 D SamsungAlarmManager: Cancel Alarm calling from uid:10026 pid :5349 / op:PendingIntent{a937156: PendingIntentRecord{bb4ebc8 com.google.android.gms broadcastIntent}}\r\n12-14 15:49:37.397  3837  4022 D CompatibilityInfo: mCompatibilityFlags - 0\r\n12-14 15:49:37.397  3837  4022 D CompatibilityInfo: applicationDensity - 420\r\n12-14 15:49:37.397  3837  4022 D CompatibilityInfo: applicationScale - 1.0\r\n12-14 15:49:37.447  3837  4677 D SamsungAlarmManager: setInexact Intent (T:2/F:0/AC:false) 20171214T155002 - CU:10026/CP:5349\r\n12-14 15:49:37.593  3837  4706 D MountService: MountService getExternalStorageMountMode : 3\r\n12-14 15:49:37.593  3837  4706 D MountService: MountService getExternalStorageMountMode : 3\r\n12-14 15:49:37.593  3837  4706 D MountService: MountService getExternalStorageMountMode : final mountMode=3, uid : 10149, packageName : com.android.chrome\r\n12-14 15:49:37.611 12263 12263 E Zygote  : v2\r\n12-14 15:49:37.611 12263 12263 I libpersona: KNOX_SDCARD checking this for 10149\r\n12-14 15:49:37.611 12263 12263 I libpersona: KNOX_SDCARD not a persona\r\n12-14 15:49:37.612  3837  4706 I ActivityManager: Start proc 12263:com.android.chrome:privileged_process0/u0a149 for service com.android.chrome/org.chromium.content.app.PrivilegedProcessService0\r\n12-14 15:49:37.613 12263 12263 E Zygote  : accessInfo : 0\r\n12-14 15:49:37.614 12263 12263 W SELinux : SELinux selinux_android_compute_policy_index : Policy Index[2],  Con:u:r:zygote:s0 RAM:SEPF_SECMOBILE_7.0_0009, [-1 -1 -1 -1 0 1]\r\n12-14 15:49:37.616 12263 12263 I SELinux : SELinux: seapp_context_lookup: seinfo=chrome, level=s0:c512,c768, pkgname=com.android.chrome:privileged_process0 \r\n12-14 15:49:37.663 12263 12263 D TimaKeyStoreProvider: TimaKeyStore is not enabled: cannot add TimaSignature Service and generateKeyPair Service\r\n12-14 15:49:37.666  3837  5475 D CompatibilityInfo: mCompatibilityFlags - 0\r\n12-14 15:49:37.667  3837  5475 D CompatibilityInfo: applicationDensity - 420\r\n12-14 15:49:37.667  3837  5475 D CompatibilityInfo: applicationScale - 1.0\r\n12-14 15:49:37.667  3837  5475 I ActivityManager: DSS on for com.android.chrome and scale is 1.0\r\n12-14 15:49:37.669  3837  5475 D CompatibilityInfo: mCompatibilityFlags - 0\r\n12-14 15:49:37.669  3837  5475 D CompatibilityInfo: applicationDensity - 420\r\n12-14 15:49:37.669  3837  5475 D CompatibilityInfo: applicationScale - 1.0\r\n12-14 15:49:37.676  3837  5475 D CompatibilityInfo: mCompatibilityFlags - 0\r\n12-14 15:49:37.676  3837  5475 D CompatibilityInfo: applicationDensity - 420\r\n12-14 15:49:37.676  3837  5475 D CompatibilityInfo: applicationScale - 1.0\r\n12-14 15:49:37.700 12263 12263 I ResourcesManager: updateResourcesForOpenThemeChange for Desktop mode \r\n12-14 15:49:37.733 12263 12263 I cr_ChildProcessService: Creating new ChildProcessService pid=12263\r\n12-14 15:49:37.890 12263 12276 I cr_LibraryLoader: Time to load native libraries: 128 ms (timestamps 7630-7758)\r\n12-14 15:49:37.890 12263 12276 I cr_LibraryLoader: Using linker: org.chromium.base.library_loader.ModernLinker\r\n12-14 15:49:37.892 12263 12276 I chromium: [INFO:library_loader_hooks.cc(46)] Chromium logging enabled: level = 0, default verbosity = 0\r\n12-14 15:49:37.892 12263 12276 I cr_LibraryLoader: Expected native library version number \"62.0.3202.84\", actual native library version number \"62.0.3202.84\"\r\n12-14 15:49:37.902 10961 10961 D Mono    : DllImport attempting to load: '/system/lib/liblog.so'.\r\n12-14 15:49:37.904 10961 10961 D Mono    : DllImport loaded library '/system/lib/liblog.so'.\r\n12-14 15:49:37.904 10961 10961 D Mono    : DllImport searching in: '/system/lib/liblog.so' ('/system/lib/liblog.so').\r\n12-14 15:49:37.904 10961 10961 D Mono    : Searching for '__android_log_print'.\r\n12-14 15:49:37.904 10961 10961 D Mono    : Probing '__android_log_print'.\r\n12-14 15:49:37.904 10961 10961 D Mono    : Found as '__android_log_print'.\r\n12-14 15:49:37.916 10961 10961 I MonoDroid: UNHANDLED EXCEPTION:\r\n12-14 15:49:37.937 10961 10961 I MonoDroid: Java.Lang.RuntimeException: text cannot be null\r\n12-14 15:49:37.937 10961 10961 I MonoDroid:   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in <912e68ad383941889349a57c19f9bba0>:0 \r\n12-14 15:49:37.937 10961 10961 I MonoDroid:   at Java.Interop.JniEnvironment+InstanceMethods.CallVoidMethod (Java.Interop.JniObjectReference instance, Java.Interop.JniMethodInfo method, Java.Interop.JniArgumentValue* args) [0x00069] in <f61dda87bf264e5eb4472bcec0344c43>:0 \r\n12-14 15:49:37.937 10961 10961 I MonoDroid:   at Java.Interop.JniPeerMembers+JniInstanceMethods.InvokeVirtualVoidMethod (System.String encodedMember, Java.Interop.IJavaPeerable self, Java.Interop.JniArgumentValue* parameters) [0x0002a] in <f61dda87bf264e5eb4472bcec0344c43>:0 \r\n12-14 15:49:37.937 10961 10961 I MonoDroid:   at Android.Widget.NumberPicker.SetDisplayedValues (System.String[] displayedValues) [0x00029] in <96d947b3b8134b57948bf39422274389>:0 \r\n12-14 15:49:37.937 10961 10961 I MonoDroid:   at Xamarin.Forms.Platform.Android.PickerRenderer.OnClick () [0x00075] in D:\\agent\\_work\\2\\s\\Xamarin.Forms.Platform.Android\\Renderers\\PickerRenderer.cs:110 \r\n12-14 15:49:37.937 10961 10961 I MonoDroid:   at Xamarin.Forms.Platform.Android.PickerRenderer+PickerListener.OnClick (Android.Views.View v) [0x00010] in D:\\agent\\_work\\2\\s\\Xamarin.Forms.Platform.Android\\Renderers\\PickerRenderer.cs:192 \r\n12-14 15:49:37.938 10961 10961 I MonoDroid:   at Android.Views.View+IOnClickListenerInvoker.n_OnClick_Landroid_view_View_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_v) [0x0000f] in <96d947b3b8134b57948bf39422274389>:0 \r\n12-14 15:49:37.938 10961 10961 I MonoDroid:   at (wrapper dynamic-method) System.Object:7369e5d1-8007-4ac2-95b1-15d88f84f186 (intptr,intptr,intptr)\r\n12-14 15:49:37.938 10961 10961 I MonoDroid:   --- End of managed Java.Lang.RuntimeException stack trace ---\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: java.lang.IllegalArgumentException: text cannot be null\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: \tat android.graphics.Paint.measureText(Paint.java:2191)\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: \tat android.widget.NumberPicker.tryComputeMaxWidth(NumberPicker.java:1314)\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: \tat android.widget.NumberPicker.setDisplayedValues(NumberPicker.java:1507)\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: \tat md5b60ffeb829f638581ab2bb9b1a7f4f3f.PickerRenderer_PickerListener.n_onClick(Native Method)\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: \tat md5b60ffeb829f638581ab2bb9b1a7f4f3f.PickerRenderer_PickerListener.onClick(PickerRenderer_PickerListener.java:30)\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: \tat android.view.View.performClick(View.java:6261)\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: \tat android.widget.TextView.performClick(TextView.java:11180)\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: \tat android.view.View$PerformClick.run(View.java:23748)\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: \tat android.os.Handler.handleCallback(Handler.java:751)\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: \tat android.os.Handler.dispatchMessage(Handler.java:95)\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: \tat android.os.Looper.loop(Looper.java:154)\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: \tat android.app.ActivityThread.main(ActivityThread.java:6776)\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: \tat java.lang.reflect.Method.invoke(Native Method)\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: \tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1520)\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: \tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1410)\r\n12-14 15:49:37.938 10961 10961 I MonoDroid: \r\n.\r\n.\r\n."},{"Id":"6989448372","Type":"IssuesEvent","CreatedAt":"2017-12-14T16:12:10","Actor":"nlraley","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1403","RelatedDescription":"Opened issue \"When no default namespace is provided at the project level, the .g.cs files get compiled with a namespace of \" .\"\" (#1403) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\nIf you change the project files so there is no default namespace, then the .g.cs files will compile the code with a space for the namespace, so you end up with a \" .\" leading the namespace declaration.\r\n\r\nI can wipe out the default namespace which requires me to manually specify a namespace for my class files, i.e. TestNamespace.  The .g.cs would then have \" .TestNamespace\" as the namespace declaration.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Edit the .csproj files and clear the default namespace value manually.\r\n2. Create a class that will create a .g.cs file and give it a namespace declaration.\r\n3. Build will fail b/c the .g.cs file will list the incorrect namespace.\r\n\r\n### Expected Behavior\r\nNamespace should be what is specified in the class file.\r\n\r\n### Actual Behavior\r\nAn empty space and period are added before the namespace declared in the class file.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Latest stable release.\r\n- Last known good version: Recurring issue.\r\n- IDE:\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  Any\r\n  - Android: Any \r\n  - UWP:  Any\r\n"},{"Id":"6988286398","Type":"PullRequestEvent","CreatedAt":"2017-12-14T12:21:51","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1402","RelatedDescription":"Merged pull request \"revert part of #1370. keep the test project out of netstandard for now\" (#1402) at xamarin/Xamarin.Forms","RelatedBody":"moving the Build.Tasks to netstandard is probably fine. but the test project doesn't like it"},{"Id":"6988026775","Type":"IssuesEvent","CreatedAt":"2017-12-14T11:18:59","Actor":"StephaneDelcroix","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1346","RelatedDescription":"Closed issue \"[Forms] Style Setter using x:Static stopped working\" (#1346) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nWhen using a Style to set an object property with x:Static, the property is never set.\r\n\r\n### Steps to Reproduce\r\n1. Create a Style with a Setter using x:Static\r\n2. Apply the Style to the desired control\r\n\r\n### Expected Behavior\r\nThe property is set to the static value specified in the Style\r\n\r\n### Actual Behavior\r\nThe property is never set and remains null\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.0.121934\r\n- Last known good version: 2.3.4.270\r\n- IDE: Visual Studio 2017 15.5.0\r\n- Platform Target Frameworks:\r\n  - iOS: 11.1\r\n  - Android: 8\r\n  - UWP: 16299\r\n- Android Support Library Version: 25.4.0.2\r\n- Nuget Packages:\r\n- Affected Devices: All\r\n\r\n### Reproduction Link\r\n[XamarinStyleSetStaticBug.zip](https://github.com/xamarin/Xamarin.Forms/files/1539268/XamarinStyleSetStaticBug.zip)\r\n\r\n### Additional Information\r\nThis was working fine in previous versions of Xamarin Forms. I have included a working example using 2.3.4.270 with roughly the same code as the reproduction.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"6991740488","Type":"PullRequestEvent","CreatedAt":"2017-12-15T01:50:02","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3106","RelatedDescription":"Opened pull request \"Incrementally bump mono\" (#3106) at xamarin/xamarin-macios","RelatedBody":"Commit list for mono/mono:\n\n* mono/mono@b3b0613ad38 Bump msbuild to bring in fix for #60770 (#6107)\n* mono/mono@ddeba6e1bab [interp] fix using conv.u with string\n* mono/mono@0360f420fe3 Bump API snapshot submodule\n* mono/mono@2f18e7dd23c Bump cecil & linker to match master.\n* mono/mono@0f53cb275c4 [interp] allow unsigned i8 in pinvoke signature\n\nDiff: https://github.com/mono/mono/compare/c5cd0f1e7fb494cec523757b8d7f29cc95b707c9...b3b0613ad387bca184dbbc25e606dc59e6c39563\n\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=60770"},{"Id":"6991620851","Type":"PullRequestEvent","CreatedAt":"2017-12-15T01:04:00","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3105","RelatedDescription":"Merged pull request \"Bumps maccore to get Xamarin Analysis fix for XVS\" (#3105) at xamarin/xamarin-macios","RelatedBody":"Gets the latest version of Xamarin Analysis that includes a fix to copy the Xamarin.iOS.Analysis.targets file to the build output directory"},{"Id":"6991211990","Type":"PullRequestEvent","CreatedAt":"2017-12-14T22:45:48","Actor":"emaf","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3105","RelatedDescription":"Opened pull request \"Bumps maccore to get Xamarin Analysis fix for XVS\" (#3105) at xamarin/xamarin-macios","RelatedBody":"Gets the latest version of Xamarin Analysis that includes a fix to copy the Xamarin.iOS.Analysis.targets file to the build output directory"},{"Id":"6991180874","Type":"PullRequestEvent","CreatedAt":"2017-12-14T22:37:16","Actor":"emaf","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3104","RelatedDescription":"Merged pull request \"[msbuild] Fixes MoveTaskBase inclusion\" (#3104) at xamarin/xamarin-macios","RelatedBody":"MoveTaskBase inherits from Microsoft.Build.Tasks.Move, and Mono has a different implementation of it, so when building from a Mac we need to include XBuildMoveTaskBase.cs instead. The previous condition does no apply any more, because we're now using MSBuild to build, but the Move task implementation didn't change so it doesn't matter if we're using Xbuild or MSBuild.\r\n\r\nThis issue is preventing us (XVS) from merging features to our master branch"},{"Id":"6990853886","Type":"PullRequestEvent","CreatedAt":"2017-12-14T21:16:59","Actor":"emaf","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3104","RelatedDescription":"Opened pull request \"[msbuild] Fixes MoveTaskBase inclusion\" (#3104) at xamarin/xamarin-macios","RelatedBody":"MoveTaskBase inherits from Microsoft.Build.Tasks.Move, and Mono has a different implementation of it, so when building from a Mac we need to include XBuildMoveTaskBase.cs instead. The previous condition does no apply any more, because we're now using MSBuild to build, but the Move task implementation didn't change so it doesn't matter if we're using Xbuild or MSBuild.\r\n\r\nThis issue is preventing us (XVS) from merging features to our master branch"},{"Id":"6990766193","Type":"PullRequestEvent","CreatedAt":"2017-12-14T20:57:08","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3103","RelatedDescription":"Merged pull request \"[macos] NSView.LocationInView should accept null\" (#3103) at xamarin/xamarin-macios","RelatedBody":"- https://bugzilla.xamarin.com/show_bug.cgi?id=61101"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"941412780158128128","CreatedAt":"2017-12-14T21:01:12+00:00","UserScreenname":"xamarinhq","Text":"Introducing the open source suite of SmartHotel360 reference #XamarinForms, Xamarin.iOS, and… https://t.co/iYMEQSAb2H","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":99,"FavoriteCount":50,"RawContent":null},{"Id":"941351074564329477","CreatedAt":"2017-12-14T16:56:00+00:00","UserScreenname":"xamarinhq","Text":"Starting NOW—update your iOS apps in our webinar, \"Get the Most Out of iOS 11 with #VisualStudio Tools for #Xamarin… https://t.co/yHfdYJiwE2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":18,"FavoriteCount":8,"RawContent":null},{"Id":"940998780735901697","CreatedAt":"2017-12-13T17:36:06+00:00","UserScreenname":"xamarinhq","Text":"Our own @jamesmontemagno shows you how to leverage the #Xamarin Live Player with your iOS applications:… https://t.co/S9D0tIvHrH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":21,"RawContent":null},{"Id":"940986925623758850","CreatedAt":"2017-12-13T16:49:00+00:00","UserScreenname":"xamarinhq","Text":"Last call! Join us now for our webinar on how to \"Get the Most out of Android 8 Oreo with #VisualStudio Tools for… https://t.co/N6AGPhXuJD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":16,"FavoriteCount":8,"RawContent":null},{"Id":"940644784422707200","CreatedAt":"2017-12-12T18:09:27+00:00","UserScreenname":"xamarinhq","Text":"Get a quick overview of the latest updates to the #Xamarin iOS designer, including a new toolbar for managing trait… https://t.co/0Mcb5bx9j6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":45,"FavoriteCount":32,"RawContent":null},{"Id":"940613212508184576","CreatedAt":"2017-12-12T16:04:00+00:00","UserScreenname":"xamarinhq","Text":"Register for one or register for both, but don't miss this week's webinars on updating your #Xamarin apps to get th… https://t.co/9Xtm5gjLw8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":15,"FavoriteCount":6,"RawContent":null},{"Id":"940313518418661377","CreatedAt":"2017-12-11T20:13:07+00:00","UserScreenname":"xamarinhq","Text":"Expand your app horizons by building your first #tvOS app with #Xamarin: https://t.co/A5jZpraqm1 https://t.co/IcA9ZV1nmN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":39,"FavoriteCount":22,"RawContent":null},{"Id":"940264162273439744","CreatedAt":"2017-12-11T16:57:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build a real-time #XamarinForms communication app with #WebSocket: https://t.co/u3wk0FzGbu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":93,"FavoriteCount":43,"RawContent":null},{"Id":"940013259083735041","CreatedAt":"2017-12-11T00:20:00+00:00","UserScreenname":"xamarinhq","Text":"Register now for this week's webinars on how to update your #Xamarin apps to get the most out of Android 8 Oreo (12… https://t.co/ARs0FVWV0P","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":18,"FavoriteCount":10,"RawContent":null},{"Id":"939540900635607041","CreatedAt":"2017-12-09T17:03:01+00:00","UserScreenname":"xamarinhq","Text":"Upload your certificates and install them temporarily on the build machine to sign your applications with #VSTS:… https://t.co/xWBM7qo6ZK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":23,"RawContent":null},{"Id":"939234630691180549","CreatedAt":"2017-12-08T20:46:00+00:00","UserScreenname":"xamarinhq","Text":"#NativeForms is all polished and ready for you in #XamarinForms 2.5.0. Get started: https://t.co/8ZTIbOktJX","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":111,"FavoriteCount":68,"RawContent":null},{"Id":"939193776089772032","CreatedAt":"2017-12-08T18:03:40+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build and release high quality, five-star apps faster using #VSAppCenter: https://t.co/XHMCHeVNSB https://t.co/pEYDruWIGp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":13,"RawContent":null},{"Id":"938851228209033219","CreatedAt":"2017-12-07T19:22:30+00:00","UserScreenname":"xamarinhq","Text":"Get started with even easier iOS app provisioning in #VS4Mac: https://t.co/vdtAckbzWn https://t.co/Ei8f1vdY4X","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":86,"FavoriteCount":38,"RawContent":null},{"Id":"938814862695849984","CreatedAt":"2017-12-07T16:58:00+00:00","UserScreenname":"xamarinhq","Text":"Build a sample enterprise app with the Microsoft Authentication Library and #MicrosoftGraph APIs: https://t.co/d9Rlu92TWT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":25,"RawContent":null},{"Id":"938480168515055617","CreatedAt":"2017-12-06T18:48:02+00:00","UserScreenname":"xamarinhq","Text":"Introducing the #Azure Mobile Badge from @XamarinU! Get started today: https://t.co/iirsQ3UrwL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":74,"FavoriteCount":27,"RawContent":null},{"Id":"938450714149445637","CreatedAt":"2017-12-06T16:51:00+00:00","UserScreenname":"xamarinhq","Text":"Don't forget to register for next week's webinars on updating your #Xamarin apps to get the most out of Android 8 O… https://t.co/1dK9RFJUEq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":33,"FavoriteCount":22,"RawContent":null},{"Id":"938141429167198208","CreatedAt":"2017-12-05T20:22:01+00:00","UserScreenname":"xamarinhq","Text":"See how ￼Fidelity Mobile is uniting Brazilian citizens and their elected officials using real-time chat apps built… https://t.co/z6zRiQICHR","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":33,"FavoriteCount":12,"RawContent":null},{"Id":"938089332048564224","CreatedAt":"2017-12-05T16:55:00+00:00","UserScreenname":"xamarinhq","Text":"DataBinding Power Moves You May Not Be Using (Yet), with @davidortinau: https://t.co/VpucH7m8z9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":35,"FavoriteCount":10,"RawContent":null}]}},"RunOn":"2017-12-15T05:30:43.4759646Z","RunDurationInMilliseconds":4255}