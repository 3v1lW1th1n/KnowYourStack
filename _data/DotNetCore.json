{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core 2.1 June Update","PublishedOn":"2018-06-22T21:08:25+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We released .NET Core 2.1.1. This update includes .NET Core SDK 2.1.301, ASP.NET Core 2.1.1 and .NET Core 2.1.1. See .NET Core 2.1.1 release notes for complete details on the release. Quality Updates...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/","RawContent":null},{"Title":".NET Core 2.0 will reach End of Life on October 1, 2018","PublishedOn":"2018-06-20T19:12:38+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Last Updated: 6/22/2018 .NET Core 2.0 was released on August 14, 2017. As a non-LTS release, it is supported for 3 months after the next release. .NET Core 2.1 was released on May 30th, 2018. As a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/","RawContent":null},{"Title":"The RyuJIT transition is complete!","PublishedOn":"2018-06-19T22:53:27+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"RyuJIT is the code name for the .NET just-in-time compiler, one of the foundational components of the .NET runtime. In contrast, the Roslyn C# compiler compiles C# code to IL byte code. The RyuJIT...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/19/the-ryujit-transition-is-complete/","RawContent":null},{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null},{"Title":".NET Framework June 2018 Security and Quality Rollup","PublishedOn":"2018-06-13T19:29:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the June 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework May 2018 Security and Quality Rollup for the latest security updates. Quality and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3621!","PublishedOn":"2018-06-06T21:19:43+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.8 Early Access build 3621 for your feedback. This is one of the in-development builds of the next version of the .NET Framework. The changes in this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/","RawContent":null},{"Title":"Announcing ML.NET 0.2","PublishedOn":"2018-06-06T04:36:25+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Last month at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework. We would like to thank the community for the engagement so far in helping us shape ML.NET....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/05/announcing-ml-net-0-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1","PublishedOn":"2018-05-30T17:22:16+00:00","CommentsCount":71,"FacebookCount":0,"Summary":"We&#8217;re excited to announce the release of .NET Core 2.1. It includes improvements to performance, to the runtime and tools. It also includes a new way to deploy tools as NuGet packages....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1","PublishedOn":"2018-05-30T17:22:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today we are excited to announce the release of Entity Framework (EF) Core 2.1. This is the latest production-ready release of our open-source and cross-platform data access technology. We are...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-entity-framework-core-2-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7697526900","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:48","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Merged pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7697525283","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:25","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Merged pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7902173015","Type":"PullRequestEvent","CreatedAt":"2018-06-30T23:35:58","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18736","RelatedDescription":"Opened pull request \"Fix some build breaks seen with the older VS we use to build with on …\" (#18736) at dotnet/coreclr","RelatedBody":"…desktop.\r\n\r\n```\r\nsrc\\jit\\alloc.cpp(113): warning C4815: 's_pagePool' : zero-sized array in stack object will have no elements (unless the object is an aggregate that has been aggregate initialized)\r\nsrc\\jit\\disasm.cpp(867): error C2678: binary '!=' : no operator found which takes a left-hand operand of type 'CompAllocator' (or there is no acceptable conversion)\r\nsrc\\jit\\alloc.cpp(203): warning C4702: unreachable code\r\n```"},{"Id":"7902077936","Type":"PullRequestEvent","CreatedAt":"2018-06-30T22:05:21","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18735","RelatedDescription":"Opened pull request \"Fixing up the Sse41.Insert float HWIntrinsics\" (#18735) at dotnet/coreclr","RelatedBody":"* This adds back the `Sse41.Insert float` tests (temporarily removed due to the API changes made in #17637)\r\n* This fixes the `Sse41.Insert float` implementation to support immediate values greater than `0x3F`"},{"Id":"7901949369","Type":"PullRequestEvent","CreatedAt":"2018-06-30T20:16:54","Actor":"Wraith2","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18629","RelatedDescription":"Closed pull request \"[WIP] Add Dictionary<TKey,TValue>.RemoveAll method\" (#18629) at dotnet/coreclr","RelatedBody":"Adds a RemoveAll(Predicate<KeyValuePair<TKey,TValue>> match) method per approved api issue [corefx#29979](https://github.com/dotnet/corefx/issues/29979). Tests are in a corefx PR [corefx#30636](https://github.com/dotnet/corefx/pull/30636)."},{"Id":"7901907585","Type":"PullRequestEvent","CreatedAt":"2018-06-30T19:39:59","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18734","RelatedDescription":"Opened pull request \"Some test fixes for the x86 HWIntrinsics\" (#18734) at dotnet/coreclr","RelatedBody":"* This adds back the `Avx.MaskLoad` tests (temporarily removed due to the API changes made in https://github.com/dotnet/coreclr/pull/17637)\r\n* This removes unnecessary `try/catch` blocks from the `ExtractScalar` and `InsertScalar` tests\r\n  * The only time `PNSE` should be thrown is in the `UnsupportedScenario` test, which is the only test run when `IsSupported` is false. The `UnsupportedScenario` itself catches the PNSE and sets the test to pass if the exception was caught\r\n* This fixes the `Avx.Extract` methods to throw PNSE when `IsSupported` is false\r\n  * This is the source of the current `Avx` test failures for `COMPlus_FeatureSIMD=0`"},{"Id":"7901853285","Type":"IssuesEvent","CreatedAt":"2018-06-30T18:52:54","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/917","RelatedDescription":"Closed issue \"Support Alpine Linux (inadvertently to conform with libc for embedded systems)\" (#917) at dotnet/coreclr","RelatedBody":"[musl](http://en.wikipedia.org/wiki/Musl) (for Alpine), [μClibc](http://en.wikipedia.org/wiki/UClibc) (for Alpine and Lilblue) and [Newlib](http://en.wikipedia.org/wiki/Newlib) (for AmigaOS, Cygwin and PlayStation Portable) are standard C library implementations for embedded systems, which don't include [Memory Management Unit (MMU)](http://en.wikipedia.org/wiki/Memory_management_unit).\n\nIf .NET team has plans to target microcontrollers/embedded-systems with coreclr, please provide support for those platforms.\n\nNote that static lib libnix is also available for AmigaOS: http://cahirwpz.users.sourceforge.net/libnix/Description.html#Description (or https://github.com/cahirwpz/m68k-amigaos-toolchain)\n\nHere is a list of major C standard libraries implementations: http://en.wikipedia.org/wiki/C_standard_library#Implementations\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7897871958","Type":"IssuesEvent","CreatedAt":"2018-06-29T13:42:16","Actor":"4creators","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/787","RelatedDescription":"Opened issue \"nsboard GitHub team is not public\" (#787) at dotnet/standard","RelatedBody":"> There is also a (public) GitHub team [nsboard](https://github.com/orgs/dotnet/teams/nsboard) you can\r\nuse when you want the board to take a look at a particular issue\r\n\r\nActually nsboard team is not public. Following the above link leads to:\r\n\r\n\r\n![nsboard](https://user-images.githubusercontent.com/801959/42095457-f63bf5a6-7bb2-11e8-8e98-dff65911b038.png)\r\n\r\n\r\n\r\n"},{"Id":"7894690813","Type":"PullRequestEvent","CreatedAt":"2018-06-28T22:34:51","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/768","RelatedDescription":"Merged pull request \"Update version\" (#768) at dotnet/standard","RelatedBody":""},{"Id":"7894686205","Type":"IssuesEvent","CreatedAt":"2018-06-28T22:33:25","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/127","RelatedDescription":"Closed issue \"Request for a Formal Proposal Process\" (#127) at dotnet/standard","RelatedBody":"I'm very excited for .NET Standard; however, I am concerned that there is no formal process for changing it.\r\n\r\nFor example, **how does one propose APIs to be added**?\r\n\r\nThe [FAQ](https://github.com/dotnet/standard/blob/master/docs/faq.md#who-decides-what-is-in-net-standard) says that the board (a closed group of a few runtime vendors) decide.\r\n\r\nI do not think that this is sufficient to keep Standard evolving with the demands of developers. I worry that only features that these vendors are interested in will get added and the larger .NET community will be voiceless.\r\n\r\nI would like to see a formal proposal process, open to anyone, that we can track, to see changes made to Standard.\r\n\r\nWhat is the current state here? Are we supposed to use github issues to change the standard? If that is the case, then perhaps a proposal_instructions.md doc should be written so that people have a template or something to work from."},{"Id":"7894686139","Type":"PullRequestEvent","CreatedAt":"2018-06-28T22:33:24","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/764","RelatedDescription":"Merged pull request \"Detail governance model for .NET Standard\" (#764) at dotnet/standard","RelatedBody":"This updates the previously fairly vague definition of the .NET Standard review board and outlines the process by which we decide whether APIs will be added to .NET Standard. Key aspects:\r\n\r\n* Anybody can submit API standardization requests\r\n* The API request needs a sponsor that is on the .NET Standard review board\r\n* The API needs an implementation in at least one .NET implementation\r\n* The .NET Standard review board has representatives from all existing .NET implementations. @migueldeicaza will act as the chairman, which is fancy way to say he'll act as the tie-breaker.\r\n\r\n@migueldeicaza @dotnet/fxdc @dotnet/nsboard "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7902383233","Type":"IssuesEvent","CreatedAt":"2018-07-01T03:34:12","Actor":"greatjack1","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30775","RelatedDescription":"Opened issue \"Adding GeoCoordinate Class\" (#30775) at dotnet/corefx","RelatedBody":"The .net framework features a GeoCoordinate class. Documentation is over here https://msdn.microsoft.com/en-us/library/system.device.location.geocoordinate(v=vs.110).aspx\r\n\r\nI think this class is a good candidate for porting as it's system independent and helps greatly when working with latitude and longitude coordinates.\r\n\r\nI have no problem taking care of the work to port it. Would such a pull request be considered?"},{"Id":"7902308153","Type":"IssuesEvent","CreatedAt":"2018-07-01T02:09:33","Actor":"brentschmaltz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30774","RelatedDescription":"Opened issue \"ClaimsPrincipal Initialize does not read numberOfPropertiesWritten\" (#30774) at dotnet/corefx","RelatedBody":"This is causing users to perform workarounds\r\nSee: https://github.com/aspnet/Security/issues/158\r\n\r\n\r\n"},{"Id":"7902245247","Type":"PullRequestEvent","CreatedAt":"2018-07-01T00:57:13","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30773","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview1-26701-01, preview1-26630-03, respectively (master)\" (#30773) at dotnet/corefx","RelatedBody":""},{"Id":"7902234008","Type":"IssuesEvent","CreatedAt":"2018-07-01T00:43:33","Actor":"GrabYourPitchforks","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30772","RelatedDescription":"Closed issue \"Agree that we want to use libsodium (or not)\" (#30772) at dotnet/corefx","RelatedBody":"## context\r\n\r\n[libsodium](https://download.libsodium.org/doc/) was already mentioned in this repository here and there. some examples:\r\n\r\n### https://github.com/dotnet/corefx/issues/7127\r\n\r\n> The current cryptography APIs are badly designed. They provide neither authenticated encryption nor the current best-practice algorithms.\r\n> [...]\r\n> A good choice would start with bindings to libsodium, which provides a high-level C API.\r\n\r\n### https://github.com/dotnet/corefx/issues/7023\r\n\r\n> [libsodium], the best example I know of a good crypto library\r\n\r\n> I would sooner see a safe (something like NaCl or libsodium) API be a discussion that encompasses all of the crypto primitives, not just GCM.\r\n\r\n> I would P/Invoke libsodium’s ChaCha20/Poly1305.\r\n\r\n## goal of this thread\r\n\r\ndecide whether we want to use libsodium or not. simply a `true` or `false` flag.\r\n\r\n## where would it be used?\r\n\r\nassuming that the decision is *yes, we want to use libsodium*, then naturally here:\r\n\r\n* ChaCha20-Poly1305 — https://github.com/dotnet/corefx/issues/5162\r\n* AES-GCM — https://github.com/dotnet/corefx/issues/7023\r\n* Argon2 — https://github.com/dotnet/corefx/issues/15217\r\n\r\nplus possibly to address other issues in CoreFx i am not aware of.\r\n\r\n## motivation\r\n\r\n* i see a general movement that organizations and open source projects lean towards the usage of libsodium — see an [official incomprehensive list](https://download.libsodium.org/doc/libsodium_users/).\r\n* countless wrappers have been written around it. there is a port for every major platform and programming language. larger community indicates having been battle-tested better.\r\n* it has been audited. a random example [here](https://www.privateinternetaccess.com/blog/2017/08/libsodium-audit-results/).\r\n\r\n## linking stuff\r\n\r\n@bartonjs @karelz @DemiMarie @billinghamj @BurningEnlightenment @prajaybasu @galich @kapsiR @jbtule @AdamWillden @Drawaes @sdrapkin @blowdart @morganbr @ektrah\r\n\r\nhttps://github.com/dotnet/corefx/issues/23629\r\n\r\n[exemplary usage in .NET — NSec](https://nsec.rocks)."},{"Id":"7902225719","Type":"IssuesEvent","CreatedAt":"2018-07-01T00:33:53","Actor":"pgolebiowski","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30772","RelatedDescription":"Opened issue \"Agree that we want to use libsodium (or not)\" (#30772) at dotnet/corefx","RelatedBody":"## context\r\n\r\n[libsodium](https://download.libsodium.org/doc/) was already mentioned in this repository here and there. some examples:\r\n\r\n### https://github.com/dotnet/corefx/issues/7127\r\n\r\n> The current cryptography APIs are badly designed. They provide neither authenticated encryption nor the current best-practice algorithms.\r\n> [...]\r\n> A good choice would start with bindings to libsodium, which provides a high-level C API.\r\n\r\n### https://github.com/dotnet/corefx/issues/7023\r\n\r\n> [libsodium], the best example I know of a good crypto library\r\n\r\n> I would sooner see a safe (something like NaCl or libsodium) API be a discussion that encompasses all of the crypto primitives, not just GCM.\r\n\r\n> I would P/Invoke libsodium’s ChaCha20/Poly1305.\r\n\r\n## goal of this thread\r\n\r\ndecide whether we want to use libsodium or not. simply a `true` or `false` flag.\r\n\r\n## where would it be used?\r\n\r\nassuming that the decision is *yes, we want to use libsodium*, then naturally here:\r\n\r\n* ChaCha20-Poly1305 — https://github.com/dotnet/corefx/issues/5162\r\n* AES-GCM — https://github.com/dotnet/corefx/issues/7023\r\n* Argon2 — https://github.com/dotnet/corefx/issues/15217\r\n\r\nplus possibly to address other issues in CoreFx i am not aware of.\r\n\r\n## motivation\r\n\r\n* i see a general movement that organizations and open source projects lean towards the usage of libsodium — see an [official incomprehensive list](https://download.libsodium.org/doc/libsodium_users/).\r\n* countless wrappers have been written around it. there is a port for every major platform and programming language. larger community indicates having been battle-tested better.\r\n* it has been audited. a random example [here](https://www.privateinternetaccess.com/blog/2017/08/libsodium-audit-results/).\r\n\r\n## linking stuff\r\n\r\n@bartonjs @karelz @DemiMarie @billinghamj @BurningEnlightenment @prajaybasu @galich @kapsiR @jbtule @AdamWillden @Drawaes @sdrapkin @blowdart @morganbr @ektrah\r\n\r\nhttps://github.com/dotnet/corefx/issues/23629"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7900734072","Type":"PullRequestEvent","CreatedAt":"2018-06-30T03:14:10","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6037","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6037) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding"},{"Id":"7900671377","Type":"PullRequestEvent","CreatedAt":"2018-06-30T02:20:15","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6037","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6037) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7900561532","Type":"PullRequestEvent","CreatedAt":"2018-06-30T00:52:56","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6036","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#6036) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @ViktorHofer"},{"Id":"7900474792","Type":"PullRequestEvent","CreatedAt":"2018-06-29T23:59:35","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6036","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr,corefx\" (#6036) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"7899944447","Type":"PullRequestEvent","CreatedAt":"2018-06-29T20:54:52","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6035","RelatedDescription":"Opened pull request \"[WIP] Make the generic composition details RVAs\" (#6035) at dotnet/corert","RelatedBody":"Marking this as WIP because eventually I'll need to submit this through the TFS side and update rhbind as well. I would like to do most of the code review through Git though because CoreRT is just a nicer place to prototype in.\r\n\r\nI'm looking at size regressions between .NET Native 1.7 and the current mainline branch. A thing that stood out is universally bigger EETypes. A contributor to this was getting rid of GenericInstanceDescs between 1.7 and 2.0 and replacing them by direct references to generic composition details from the EEType. Size-wise, this was mostly a wash, but we can actually do better - these new fields are not critical to be pointer-sized.\r\n\r\nThis change turns them into relative pointers. This saves 33 kB on a hello world app. I expect around 100 kB savings on the UWP People app based on my back-of-the-envelope calculation.\r\n\r\nWe could apply the same treatment to the optional fields pointer and the generic composition data."},{"Id":"7899803523","Type":"PullRequestEvent","CreatedAt":"2018-06-29T20:21:20","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6034","RelatedDescription":"Opened pull request \"Fix stack slot kind for ByReference.get_Value in CppCodegen\" (#6034) at dotnet/corert","RelatedBody":"This should be tracked as a ByRef.\r\n\r\nThis was the reason why the compiler was considering `MemoryMarshal.GetNonNullPinnableReference` invalid IL and we were generating a throwing body for it while compiling Hello World."},{"Id":"7899489269","Type":"PullRequestEvent","CreatedAt":"2018-06-29T19:05:38","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6033","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#6033) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7899319701","Type":"PullRequestEvent","CreatedAt":"2018-06-29T18:27:54","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6033","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#6033) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1013052742326280192","CreatedAt":"2018-06-30T13:32:50+00:00","UserScreenname":"dotnet","Text":"Tune in for Jeff's Saturday show, learn how to use C# and @ASPNET Core.  Always a good time https://t.co/KJoRPYHnHt","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":6,"RawContent":null},{"Id":"1010269960948465665","CreatedAt":"2018-06-22T21:15:03+00:00","UserScreenname":"dotnet","Text":".NET Core 2.0 End of Life Extended to October 1, 2018 https://t.co/KQAlfqjfGv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":55,"FavoriteCount":51,"RawContent":null},{"Id":"1010268594725269504","CreatedAt":"2018-06-22T21:09:37+00:00","UserScreenname":"dotnet","Text":".NET Core 2.1 June Update https://t.co/GJkOJkg0zJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":135,"FavoriteCount":85,"RawContent":null},{"Id":"1010144767924154368","CreatedAt":"2018-06-22T12:57:34+00:00","UserScreenname":"dotnet","Text":"It's #fsharp Friday on Fritz and Friends with our friend @csharpfritz  -- tune in today and learn about… https://t.co/tBMBYu7qnC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":11,"RawContent":null},{"Id":"1009783192751099904","CreatedAt":"2018-06-21T13:00:48+00:00","UserScreenname":"dotnet","Text":"These two are always great to learn from separately, and today they're working together.  You won't want to miss… https://t.co/DhpOULOjfn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":3,"RawContent":null},{"Id":"1009514602428710912","CreatedAt":"2018-06-20T19:13:31+00:00","UserScreenname":"dotnet","Text":".NET Core 2.0 will reach End of Life on September 1, 2018 https://t.co/5PoTWEAQgt","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":268,"FavoriteCount":304,"RawContent":null}]}},"RunOn":"2018-07-01T05:30:32.4838923Z","RunDurationInMilliseconds":7192}