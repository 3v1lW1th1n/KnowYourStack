{"Data":{"Blog":{"FeedItems":[{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null},{"Title":"NuGet.org will only support MSA/AAD starting June 1st, 2018","PublishedOn":"2018-05-15T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We had previously announced the deprecation of NuGet.org&#8217;s home-grown authentication in favor of Microsoft accounts (MSA) that will allow us to add support for additional security systems such...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-only-support-msa-aad-starting-june/","RawContent":null},{"Title":"Welcoming SymbolSource to the .NET Foundation","PublishedOn":"2018-05-01T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to welcome SymbolSource.org to the .NET Foundation! SymbolSource has been providing a valuable service to the .NET Community for years with the ability to host Symbols for public NuGet...","Href":"https://devblogs.microsoft.com/nuget/welcoming-symbolsource-to-dot-net-foundation/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"9872362312","Type":"IssuesEvent","CreatedAt":"2019-06-22T03:32:30","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7192","RelatedDescription":"Closed issue \"[Azure Search] v-team smoketest\" (#7192) at NuGet/NuGetGallery","RelatedBody":"After SxS deployment to PROD, play around with search and gather data."},{"Id":"9872286290","Type":"PullRequestEvent","CreatedAt":"2019-06-22T02:45:57","Actor":"cristinamanum","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7292","RelatedDescription":"Opened pull request \"Revert \"Update the App Insights version.\"\" (#7292) at NuGet/NuGetGallery","RelatedBody":"Reverts NuGet/NuGetGallery#7253"},{"Id":"9872071632","Type":"IssuesEvent","CreatedAt":"2019-06-22T00:34:51","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7291","RelatedDescription":"Opened issue \"[AME] Migration plan and checklist\" (#7291) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"9871999875","Type":"PullRequestEvent","CreatedAt":"2019-06-22T00:02:47","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7290","RelatedDescription":"Opened pull request \"Removed the \"RejectPackagesWithLicense\" configuration option.\" (#7290) at NuGet/NuGetGallery","RelatedBody":"Addresses #7083 \r\n\r\nDon't need it anymore as license implementation is live for quite some time now.\r\nThere is an accompanying configuration update PR."},{"Id":"9871640726","Type":"PullRequestEvent","CreatedAt":"2019-06-21T22:05:08","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7288","RelatedDescription":"Merged pull request \"Emit Application Insights metric from browser for search selection\" (#7288) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/NuGetGallery/issues/7287\r\n\r\nI will keep it side-by-side with Google Analytics so we can understand if we are missing data. I think this is a better model overall and works great for click events performed within our site.\r\n\r\nFor outgoing links we would probably need to investigate the beacon API in AI to avoid events dropped during page transition.\r\n\r\nIssue https://github.com/NuGet/NuGetGallery/issues/7289 tracks removing GA later."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"9870867173","Type":"IssuesEvent","CreatedAt":"2019-06-21T19:27:39","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7351","RelatedDescription":"Closed issue \"Mechanism for supplying runtime.json  outside of a package\" (#7351) at NuGet/Home","RelatedBody":"In Core 3.0, the platform will not be represented as a traditional nuget package. As such, there's no obvious place for the RID graph to be supplied to NuGet. \r\n\r\n1. The SDK will need access to the RID graph to pick the appropriate \"runtime pack\"\r\n2. Restore will also need access to it to pick the correct RID-specific package assets for packages outside the platform.\r\n\r\nFor (2), the feature request here would be to have msbuild items that specify runtime.json files on disk to use during restore.\r\n\r\nSomething like\r\n\r\n``` xml\r\n<ItemGroup>\r\n  <RuntimeGraph Include=\"path/to/runtime.json\" />\r\n</ItemGroup>\r\n```\r\n\r\nIt's a separate question as to how the SDK will locate runtime.json for (1), but once we do that, we can then just pass it in to restore if we had this feature.\r\n\r\nUpdate by @nkolev92 \r\n[Spec](https://github.com/NuGet/Client.Engineering/pull/96)\r\n\r\n"},{"Id":"9864398910","Type":"IssuesEvent","CreatedAt":"2019-06-20T22:18:25","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8250","RelatedDescription":"Closed issue \"Test:  dispose test certificates\" (#8250) at NuGet/Home","RelatedBody":"`TrustedTestCert<T>` does not dispose [its certificate](https://github.com/NuGet/NuGet.Client/blob/686dd6b060639a0fb401eceb4c3a4029c1482023/test/TestUtilities/Test.Utility/Signing/TrustedTestCert.cs#L33)."},{"Id":"9864370769","Type":"IssuesEvent","CreatedAt":"2019-06-20T22:12:26","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8247","RelatedDescription":"Closed issue \"msbuild restore followed by a msbuild RestoreLockedMode=true always fails\" (#8247) at NuGet/Home","RelatedBody":"_From @jabbera on Thursday, June 20, 2019 3:51:25 PM_\r\n\r\nI would expect the following to always succeed.\r\n\r\n```\r\nmsbuild test.sln /t:restore\r\nmsbuild test.sln /t:restore /p:RestoreLockedMode=true\r\n```\r\n\r\nOn my machine it always fails with:\r\nerror NU1004: The packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Please disable RestoreLockedMode MSBuild property or pass explicit --force-evaluate flag to run restore to update the lock file.\r\n\r\n### Steps to reproduce\r\n\r\n```\r\n$nugetconfig = @\"\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <add key=\"nuget\" value=\"https://api.nuget.org/v3/index.json\" />\r\n  </packageSources>\r\n</configuration>\r\n\"@\r\n\r\n$dirprops = @\"\r\n<Project>\r\n  <PropertyGroup>\r\n    <!--NUGET RESTORE SETTINGS -->\r\n    <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>\r\n    <!--NUGET RESTORE SETTINGS -->\r\n  </PropertyGroup>\r\n</Project>\r\n\"@\r\n\r\nmkdir test\r\ncd test\r\nmkdir \".nuget\"\r\n$nugetconfig | Out-File \".nuget\\nuget.config\"\r\n\r\n$dirprops | Out-File \"Directory.Build.props\"\r\n\r\ndotnet new sln\r\nmkdir Fabric.Classlib\r\nmkdir Fabric.Base.ClassLib\r\ncd Fabric.Classlib\r\ndotnet new classlib\r\ncd ..\r\ncd Fabric.Base.Classlib\r\ndotnet new classlib\r\ncd ..\r\ncd Fabric.Classlib\r\ndotnet add reference ..\\Fabric.Base.Classlib\\Fabric.Base.Classlib.csproj\r\ncd ..\r\ndotnet sln add Fabric.Base.Classlib\\Fabric.Base.Classlib.csproj\r\ndotnet sln add Fabric.Classlib\\Fabric.Classlib.csproj\r\nmsbuild test.sln /t:restore\r\nmsbuild test.sln /t:restore /p:RestoreLockedMode=true\r\n```\r\n\r\n### Expected  behavior\r\n\r\nmsbuild test.sln /t:restore /p:RestoreLockedMode=true should succeed.\r\n\r\n### Actual behavior\r\n\r\nFails with the below error.\r\n\r\nerror NU1004: The packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Please disable RestoreLockedMode MSBuild property or pass explicit --force-evaluate flag to run restore to update the lock file. [C:\\Temp\\test\\test\\test.sln]\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n```\r\nC:\\Temp\\test\\test>msbuild /version\r\nMicrosoft (R) Build Engine version 16.1.76+g14b0a930a7 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.1.76.45076\r\n```\r\n\r\nOS info:\r\n Windows 10 1903\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n```\r\nC:\\Temp\\test\\test>dotnet --version\r\n3.0.100-preview6-012264\r\n```\r\n\r\n_Copied from original issue: microsoft/msbuild#4455_"},{"Id":"9864368992","Type":"IssuesEvent","CreatedAt":"2019-06-20T22:12:03","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8250","RelatedDescription":"Opened issue \"Test:  dispose test certificates\" (#8250) at NuGet/Home","RelatedBody":"`TrustedTestCert<T>` does not dispose [its certificate](https://github.com/NuGet/NuGet.Client/blob/686dd6b060639a0fb401eceb4c3a4029c1482023/test/TestUtilities/Test.Utility/Signing/TrustedTestCert.cs#L33)."},{"Id":"9863922956","Type":"IssuesEvent","CreatedAt":"2019-06-20T20:48:46","Actor":"adaggarwal","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8249","RelatedDescription":"Opened issue \"Update Nuget.Client to use source-built newtonsoft.json version\" (#8249) at NuGet/Home","RelatedBody":"\r\nCLI Prebuilts |   |  \r\n-- | -- | --\r\nPackage | Version | Status\r\nNewtonsoft.Json | 9.0.1 | Using non-source-built Version"},{"Id":"9862700381","Type":"IssuesEvent","CreatedAt":"2019-06-20T17:27:19","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8245","RelatedDescription":"Closed issue \"\"NU5019: File not found\" during pack for a file that exists on Ubuntu 18.04\" (#8245) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\ndotnet.exe\r\n\r\ndotnet.exe --version (if appropriate):\r\nWhichever one is pulled down by the current version of dotnet/arcade (looks like 3.0.100-preview-010184)\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Ubuntu 18.04.2 on WSL2 on Win 10 10.0.18917.1000\r\n\r\nWorked before? If so, with which NuGet version:\r\nNot for me, but it works in Windows 10, and on the build server, so it seems specific to Ubuntu or WSL\r\n \r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Clone the [aspnet/HttpRepl](https://github.com/aspnet/HttpRepl) repo in Ubuntu on WSL2 on Win10 (I'm not sure if it will happen on WSL1, but I suspect so. No idea whether it'll happen on other distros of WSL)\r\n\r\n2. Run ./build.sh\r\n\r\n3. You'll get an error:\r\n\r\n`/home/{username}/repos/HttpRepl/.dotnet/sdk/3.0.100-preview-010184/Sdks/NuGet.Build.Tasks.Pack/build/NuGet.Build.Tasks.Pack.targets(199,5): error NU5019: File not found: '/home/{username}/repos/HttpRepl/artifacts/bin/Microsoft.HttpRepl/Debug/netcoreapp2.1/publish/dotnet-httprepl.deps.json'. [/home/{username}/repos/HttpRepl/src/Microsoft.HttpRepl/Microsoft.HttpRepl.csproj]`\r\n\r\nThe file referenced does exist in the location specified. \r\nThe process works when running .\\build.cmd in Windows and it also works in the linux builds on the build server ([example](https://dnceng.visualstudio.com/public/_build/results?buildId=230510&view=logs&j=7b256127-5bb6-55c7-3e9c-ab8d8cd8d148&t=0666211d-f171-55e8-41fa-bfe567a4ffbc&l=48)) so it seems to be specific to Ubuntu or WSL2 or something like that. \r\n"},{"Id":"9862674334","Type":"IssuesEvent","CreatedAt":"2019-06-20T17:23:01","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8248","RelatedDescription":"Opened issue \"Lazy<> with value factory needing UI thread causes deadlock\" (#8248) at NuGet/Home","RelatedBody":"The Visual Studio integration uses a `ICredentialService` [initialised needing the UI thread](https://github.com/NuGet/NuGet.Client/blob/686dd6b060639a0fb401eceb4c3a4029c1482023/src/NuGet.Clients/NuGet.PackageManagement.VisualStudio/IDE/VSSolutionManager.cs#L179-L185). However, by default [`Lazy<T>` locks the thread](https://referencesource.microsoft.com/#mscorlib/system/Lazy.cs,382) when calling the value factory. Therefore, if the UI thread tries to access the `Lazy<T>` soon after a non-UI thread tried to access the `Lazy<T>`, but before the value factory finishes, a deadlock will occur.\r\n\r\nRoot cause of the vsfeedback issue [IDE freezes after opening NuGet Manager](https://developercommunity.visualstudio.com/content/problem/463868/ide-freezes-after-opening-nuget-manager.html)"},{"Id":"9862136138","Type":"IssuesEvent","CreatedAt":"2019-06-20T16:00:13","Actor":"rainersigwald","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8247","RelatedDescription":"Opened issue \"msbuild restore followed by a msbuild RestoreLockedMode=true always fails\" (#8247) at NuGet/Home","RelatedBody":"_From @jabbera on Thursday, June 20, 2019 3:51:25 PM_\r\n\r\nI would expect the following to always succeed.\r\n\r\n```\r\nmsbuild test.sln /t:restore\r\nmsbuild test.sln /t:restore /p:RestoreLockedMode=true\r\n```\r\n\r\nOn my machine it always fails with:\r\nerror NU1004: The packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Please disable RestoreLockedMode MSBuild property or pass explicit --force-evaluate flag to run restore to update the lock file.\r\n\r\n### Steps to reproduce\r\n\r\n```\r\n$nugetconfig = @\"\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <add key=\"nuget\" value=\"https://api.nuget.org/v3/index.json\" />\r\n  </packageSources>\r\n</configuration>\r\n\"@\r\n\r\n$dirprops = @\"\r\n<Project>\r\n  <PropertyGroup>\r\n    <!--NUGET RESTORE SETTINGS -->\r\n    <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>\r\n    <!--NUGET RESTORE SETTINGS -->\r\n  </PropertyGroup>\r\n</Project>\r\n\"@\r\n\r\nmkdir test\r\ncd test\r\nmkdir \".nuget\"\r\n$nugetconfig | Out-File \".nuget\\nuget.config\"\r\n\r\n$dirprops | Out-File \"Directory.Build.props\"\r\n\r\ndotnet new sln\r\nmkdir Fabric.Classlib\r\nmkdir Fabric.Base.ClassLib\r\ncd Fabric.Classlib\r\ndotnet new classlib\r\ncd ..\r\ncd Fabric.Base.Classlib\r\ndotnet new classlib\r\ncd ..\r\ncd Fabric.Classlib\r\ndotnet add reference ..\\Fabric.Base.Classlib\\Fabric.Base.Classlib.csproj\r\ncd ..\r\ndotnet sln add Fabric.Base.Classlib\\Fabric.Base.Classlib.csproj\r\ndotnet sln add Fabric.Classlib\\Fabric.Classlib.csproj\r\nmsbuild test.sln /t:restore\r\nmsbuild test.sln /t:restore /p:RestoreLockedMode=true\r\n```\r\n\r\n### Expected  behavior\r\n\r\nmsbuild test.sln /t:restore /p:RestoreLockedMode=true should succeed.\r\n\r\n### Actual behavior\r\n\r\nFails with the below error.\r\n\r\nerror NU1004: The packages lock file is inconsistent with the project dependencies so restore can't be run in locked mode. Please disable RestoreLockedMode MSBuild property or pass explicit --force-evaluate flag to run restore to update the lock file. [C:\\Temp\\test\\test\\test.sln]\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n```\r\nC:\\Temp\\test\\test>msbuild /version\r\nMicrosoft (R) Build Engine version 16.1.76+g14b0a930a7 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.1.76.45076\r\n```\r\n\r\nOS info:\r\n Windows 10 1903\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n```\r\nC:\\Temp\\test\\test>dotnet --version\r\n3.0.100-preview6-012264\r\n```\r\n\r\n_Copied from original issue: microsoft/msbuild#4455_"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9355935007","Type":"IssuesEvent","CreatedAt":"2019-04-01T18:05:43","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/34","RelatedDescription":"Opened issue \"nuget list & add commands are being deprecated in 5.0\" (#34) at NuGet/Announcements","RelatedBody":"Tracking Issue(s):\r\n* Deprecate ambiguous nuget.exe commands in 5.0 [#7753](https://github.com/NuGet/Home/issues/7753)\r\n  * Deprecate nuget.exe add command [#7923](https://github.com/NuGet/Home/issues/7923)\r\n  * Rename nuget.exe list to nuget.exe search [#7912](https://github.com/NuGet/Home/issues/7912)\r\n\r\nThe following commands are being deprecated because these are cause of confusion due to their nomenclature and/or other related commands that already exist:\r\n* [`nuget list`](https://docs.microsoft.com/en-us/nuget/tools/cli-ref-list): Currently displays a list of packages from a given source\r\n  * This will be replaced by an equivalent command **`nuget search`** which will be later enhanced with more capabilities as we make progress with or [search improvements](nvmd got it: https://github.com/NuGet/NuGetGallery/issues/6371​​​​​​​).\r\n* [`nuget add`](https://docs.microsoft.com/en-us/nuget/tools/cli-ref-add): Currently adds a specified package to a non-HTTP package source (a folder or UNC path) in a hierarchical layout, wherein folders are created for the package ID and version number. \r\n  * This will be replaced by overloading **`nuget push`** command.\r\n\r\n> These commands will be deprecated i.e. there will be a warning on usage of these commands in 5.0 so that in future releases these commands can be discontinued."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1124053944269983745","CreatedAt":"2019-05-02T20:51:58+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS is currently degraded and some pages might take too long to load. We are investigating the… https://t.co/j3saBGKARZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1121348019914334210","CreatedAt":"2019-04-25T09:39:36+00:00","UserScreenname":"nuget","Text":"Thanks for your contribution. https://t.co/RDrP9LnHU3","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":26,"FavoriteCount":3,"RawContent":null},{"Id":"1116042504854335488","CreatedAt":"2019-04-10T18:17:22+00:00","UserScreenname":"nuget","Text":"We have just published the NuGet Roadmap for Spring 2019. Check it out now! \nhttps://t.co/gt7qR0S3wV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":18,"RawContent":null},{"Id":"1115380341353537538","CreatedAt":"2019-04-08T22:26:10+00:00","UserScreenname":"nuget","Text":"Alert 🚨: Package publishing to @NuGet.org is taking more time than expected. The team is currently investigating th… https://t.co/EuaZ7gBehM","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":1,"FavoriteCount":6,"RawContent":null},{"Id":"1108063773363826688","CreatedAt":"2019-03-19T17:52:45+00:00","UserScreenname":"nuget","Text":"NuGet talk at the MVP Summit by @karann9 \n#MVPBuzz #MvpSummit https://t.co/P43G7wRRkX","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":2,"RawContent":null}]}},"RunOn":"2019-06-22T05:30:39.5802021Z","RunDurationInMilliseconds":3534}