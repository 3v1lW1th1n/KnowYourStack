{"Data":{"GitHubIssues":{"Issues":[{"Id":"319974387","IsPullRequest":false,"CreatedAt":"2018-05-03T23:06:56","Actor":"hungdluit","Number":"738","RawContent":null,"Title":"Duplicated Render while using child component","State":"closed","Body":"Version 0.3.0\r\n\r\nCommandButton.cshtml\r\n\r\n```\r\n@using Microsoft.AspNetCore.Blazor\r\n<div class=\"@GetClassNames()\" ref=\"Root\">\r\n    @ChildContent\r\n    @Text\r\n</div>\r\n\r\n@functions {\r\n\r\n    public ElementRef Root;\r\n\r\n    [Parameter]\r\n    protected RenderFragment ChildContent { get; set; }\r\n\r\n    [Parameter]\r\n    protected string Text { get; set; }\r\n\r\n    [Parameter]\r\n    protected ItemStyle Style { get; set; } = ItemStyle.None;\r\n\r\n    [Parameter]\r\n    protected bool IsOutLine { get; set; }\r\n\r\n    [Parameter]\r\n    protected ItemSize Size { get; set; } = ItemSize.Default;\r\n\r\n    private string GetClassNames()\r\n    {\r\n        IconButton a;\r\n        string buttonStyle = string.Empty;\r\n        if (Style != ItemStyle.None)\r\n        {\r\n            buttonStyle = Enum.GetName(typeof(ItemStyle), Style).ToLowerInvariant();\r\n        }\r\n\r\n        string outline = IsOutLine ? \"outline\" : string.Empty;\r\n\r\n        return ClassNames.Get(\"button\", buttonStyle, outline);\r\n    }\r\n}\r\n```\r\n\r\nIconButton.cshtml\r\n\r\n```\r\n@inherits CommandButton\r\n<CommandButton Text=@Text Style=@Style>\r\n    <span class=\"@Icon\"></span>\r\n</CommandButton>\r\n\r\n@functions {\r\n\r\n    [Parameter]\r\n    private string Icon { get; set; }\r\n}\r\n```\r\n\r\n`<IconButton Icon=\"mif-checkmark\" Text=\"Click Me\"></IconButton>\r\n`\r\nRendered HTML\r\n\r\n![image](https://user-images.githubusercontent.com/5623089/39587013-be4e213a-4f22-11e8-9a7e-ae0c24c94952.png)\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/738","RelatedDescription":"Closed issue \"Duplicated Render while using child component\" (#738)"},{"Id":"320108078","IsPullRequest":true,"CreatedAt":"2018-05-03T23:00:25","Actor":"SteveSandersonMS","Number":"746","RawContent":null,"Title":"camelCase all the JSONs","State":"open","Body":"We know from feedback that C# developers pretty much universally want automatic PascalCase-camelCase conversions enabled during JSON serialization/deserialization. So with this PR, `JsonUtility` will now:\r\n\r\n* When serializing, convert property names to camelCase\r\n* When deserializing, match incoming property names case insensitively\r\n\r\nSince `JsonUtility` is used internally for `HttpClient`'s `XyzJsonAsync` methods (e.g., `GetJsonAsync`), it affects what data is sent, and broadens what incoming data is accepted. Likewise, since `JsonUtility` is used for `RegisteredFunction.Invoke`, it affects how complex .NET objects are passed to JS-side code.\r\n\r\nA very important design point is that this is *not overridable or configurable*. We are trying very hard not to develop a whole new sophisticated JSON library inside Blazor. Our goal for the built-in JSON utility is to support the most basic and common things that are absolutely essential for core scenarios. Many developers will want something more customisable, which is fine: there are lots of other JSON libraries on NuGet (and where necessary, we'll adapt our APIs to make sure you can use them). JSON libraries should be separate, independent projects from Blazor.\r\n\r\nHopefully this change will satisfy the majority of developers.\r\n\r\n**Breaking change** If you do sophisticated JS interop and have JS-side code that relies on property names arriving in PascalCase, you'll need to change it to expect camelCase.","Url":"https://github.com/aspnet/Blazor/pull/746","RelatedDescription":"Open PR \"camelCase all the JSONs\" (#746)"},{"Id":"320097443","IsPullRequest":false,"CreatedAt":"2018-05-03T22:09:58","Actor":"DNF-SaS","Number":"745","RawContent":null,"Title":"Multiple @implements in single .cshtml","State":"open","Body":"Like\r\n```\r\n@implements IEventListener\r\n@implements IDisposable\r\n```\r\n\r\nthe resulting code should be like\r\n\r\n`public class MyClass: Microsoft.AspNetCore.Blazor.Components.BlazorComponent, IEventListener, IDisposable`\r\n\r\nbut is only\r\n`public class MyClass: Microsoft.AspNetCore.Blazor.Components.BlazorComponent, IEventListener`","Url":"https://github.com/aspnet/Blazor/issues/745","RelatedDescription":"Open issue \"Multiple @implements in single .cshtml\" (#745)"},{"Id":"320075614","IsPullRequest":false,"CreatedAt":"2018-05-03T21:29:54","Actor":"jwaller2040","Number":"744","RawContent":null,"Title":"supported products only for Microsoft.VisualStudio.Community","State":"closed","Body":"I tried to install Microsoft.VisualStudio.BlazorExtension.vsix to my Visual Studio Professional 2017 but the error says it's only supporting Visual Studio Community. Why?\r\n\r\n[VSIXInstaller_de52d3d4-1758-4b62-9137-e2ba46f40268.log](https://github.com/aspnet/Blazor/files/1972611/VSIXInstaller_de52d3d4-1758-4b62-9137-e2ba46f40268.log)\r\n","Url":"https://github.com/aspnet/Blazor/issues/744","RelatedDescription":"Closed issue \"supported products only for Microsoft.VisualStudio.Community\" (#744)"},{"Id":"320063155","IsPullRequest":false,"CreatedAt":"2018-05-03T20:12:00","Actor":"chanan","Number":"743","RawContent":null,"Title":"Page not refreshing","State":"open","Body":"This *might* be due to binding on two integer as described in this issue: https://github.com/aspnet/Blazor/issues/380 - But I am not sure if it is the same thing or not.\r\n\r\nHere is the calling page (Only CarouselControl seems to be the problem, but including the full page):\r\n\r\n```\r\n@addTagHelper *, BlazorStrap\r\n@page \"/carousels\"\r\n\r\n<h1>Carousels</h1>\r\n\r\n<div class=\"docs-example\">\r\n    <Carousel>\r\n        <CarouselIndicators NumberOfItems=\"@items.Count\" ActiveIndex=\"@ActiveIndex\" />\r\n        <div class=\"carousel-inner\">\r\n            @for (int i = 0; i < items.Count; i++)\r\n            {\r\n                <CarouselItem IsActive=\"@(ActiveIndex == i)\" src=\"@items[i].Source\" alt=\"@items[i].Alt\" />\r\n            }\r\n        </div>\r\n        <CarouselControl CarouselDirection=\"CarouselDirection.Previous\" NumberOfItems=\"@items.Count\" ActiveIndex=\"@ActiveIndex\" onclick=\"@onclick\" />\r\n        <CarouselControl CarouselDirection=\"CarouselDirection.Next\" NumberOfItems=\"@items.Count\" ActiveIndex=\"@ActiveIndex\" onclick=\"@onclick\" />\r\n    </Carousel>\r\n</div>\r\n\r\n<div>\r\n    ActiveIndex: @ActiveIndex\r\n</div>\r\n\r\n@functions {\r\n    IList<Item> items = new List<Item>\r\n    {\r\n        new Item { Source = \"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_1631dfd09f0%20text%20%7B%20fill%3A%23555%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_1631dfd09f0%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23777%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22285.921875%22%20y%3D%22217.7%22%3EFirst%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E\", Alt=\"First Slide\" },\r\n        new Item { Source = \"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_1631dfd09f1%20text%20%7B%20fill%3A%23444%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_1631dfd09f1%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23666%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22247.3203125%22%20y%3D%22217.7%22%3ESecond%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E\", Alt=\"Second Slide\" },\r\n        new Item { Source = \"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_1631dfd09f2%20text%20%7B%20fill%3A%23333%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_1631dfd09f2%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23555%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22277%22%20y%3D%22217.7%22%3EThird%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E\", Alt=\"Third Slide\" }\r\n    };\r\n\r\n    int ActiveIndex { get; set; }\r\n\r\n    class Item\r\n    {\r\n        public string Source { get; set; }\r\n        public string Alt { get; set; }\r\n    }\r\n\r\n    void onclick(UIMouseEventArgs e)\r\n    {\r\n        StateHasChanged();\r\n    }\r\n}\r\n```\r\nHere is CarouselControl which is defined in a Blazor library:\r\n\r\n```\r\n@using Microsoft.AspNetCore.Blazor\r\n\r\n<a class=\"@classname\" role=\"button\" onclick=\"@_onclick\">\r\n    <span class=\"@iconClassname\" aria-hidden=\"true\"></span>\r\n    <span class=\"sr-only\">@directionName</span>\r\n</a>\r\n\r\n@functions {\r\n    private string classname\r\n    {\r\n        get\r\n        {\r\n            var direction = CarouselDirection == CarouselDirection.Previous ? \"prev\" : \"next\";\r\n            return $\"carousel-control-{direction} {Class}\";\r\n        }\r\n    }\r\n    private string iconClassname\r\n    {\r\n        get\r\n        {\r\n            var direction = CarouselDirection == CarouselDirection.Previous ? \"prev\" : \"next\";\r\n            return $\"carousel-control-{direction}-icon\";\r\n        }\r\n\r\n    }\r\n    private string directionName\r\n    {\r\n        get\r\n        {\r\n            return CarouselDirection == CarouselDirection.Previous ? \"Previous\" : \"Next\";\r\n        }\r\n    }\r\n    public int ActiveIndex { get; set; }\r\n    public int NumberOfItems { get; set; }\r\n    public Action<UIMouseEventArgs> onclick { get; set; }\r\n    public CarouselDirection CarouselDirection { get; set; } = CarouselDirection.Previous;\r\n    public string Class { get; set; }\r\n    public string Style { get; set; }\r\n\r\n    private void _onclick(UIMouseEventArgs e)\r\n    {\r\n        if(CarouselDirection == CarouselDirection.Previous)\r\n        {\r\n            if (ActiveIndex == 0) ActiveIndex = NumberOfItems - 1;\r\n            else ActiveIndex = ActiveIndex - 1;\r\n        }\r\n        else\r\n        {\r\n            if (ActiveIndex == NumberOfItems - 1) ActiveIndex = 0;\r\n            else ActiveIndex = ActiveIndex + 1;\r\n\r\n        }\r\n        Console.WriteLine(\"ActiveIndex: {0}\", ActiveIndex);\r\n        onclick(e);\r\n        StateHasChanged();\r\n    }\r\n}\r\n```\r\n\r\nYou may note I stuck in a few StateHasChaged in the control and the page in an attempt to get the page to refresh, but neither worked.\r\n\r\nClicking on the control does change ActiveIndex in Console.WriteLine in the control in the library, but the ActiveIndex in the calling page does not change.","Url":"https://github.com/aspnet/Blazor/issues/743","RelatedDescription":"Open issue \"Page not refreshing\" (#743)"},{"Id":"320034091","IsPullRequest":false,"CreatedAt":"2018-05-03T19:02:49","Actor":"cheng93","Number":"742","RawContent":null,"Title":"[0.3.0] ParameterAttribute","State":"closed","Body":"Getting errors when trying to build client library after updating 0.3.0\r\n\r\n```\r\nComponents/Alchemy/AlchemistDropdown.cshtml(13,6): error CS0246: The type or namespace name 'ParamaterAttribute' could not be found (are you missing a using directive or an assembly reference?) \r\nComponents/Alchemy/AlchemistDropdown.cshtml(13,6): error CS0246: The type or namespace name 'Paramater' could not be found (are you missing a using directive or an assembly reference?) \r\n```\r\n\r\n```\r\ndotnet --info\r\n```\r\n\r\n```.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview2-008533\r\n Commit:    996eb6c92c\r\n\r\nRuntime Environment:\r\n OS Name:     arch\r\n OS Version:  \r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /opt/dotnet/sdk/2.1.300-preview2-008533/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview2-26406-04\r\n  Commit:  6833f3026b\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-preview2-008533 [/opt/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-final [/opt/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-final [/opt/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26216-03 [/opt/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26406-04 [/opt/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/aspnet/Blazor/issues/742","RelatedDescription":"Closed issue \"[0.3.0] ParameterAttribute\" (#742)"},{"Id":"320016714","IsPullRequest":false,"CreatedAt":"2018-05-03T18:16:06","Actor":"babula38","Number":"741","RawContent":null,"Title":"Suggestion to make client javascript function call easier","State":"closed","Body":"I was working on something today, the requirement was to call a JavaScript function when there is a button click. \r\n\r\n```html\r\n<input type=\"button\" onclick=\"callJavascriptFunc\" value=\"click\"/>\r\n```\r\nI do not know but i guess with the current framework we can call only C# functions in **onclick**.\r\n \r\n```html\r\n<input type=\"button\" onclick=\"csharpFunction\" value=\"click\"/>\r\n```\r\n```csharp\r\n@functions{\r\npublic void csharpFunction(){\r\n//if i want to call any javascript function then i have to call\r\n//RegisteredFunction.Invoke<> here\r\n//this function works like a middle man or proxy here\r\n}\r\n}\r\n```\r\n \r\nhow it will be if we make the call easier i.e.\r\n```html\r\n<input type=\"button\" onclick=\"javascript:csharpFunction\" value=\"click\"/>\r\n```\r\n \r\nHere based on the keyword **JavaScript** the framework will call the JavaScript function directly, if the keyword **JavaScript** is missing then call C# function.In this case there is no need of any C# function to proxy the call JavaScript function.\r\n ","Url":"https://github.com/aspnet/Blazor/issues/741","RelatedDescription":"Closed issue \"Suggestion to make client javascript function call easier\" (#741)"},{"Id":"319999290","IsPullRequest":false,"CreatedAt":"2018-05-03T16:49:20","Actor":"chanan","Number":"740","RawContent":null,"Title":"JS Interop doesnt handle arrays well","State":"open","Body":"Javscript:\r\n```\r\nBlazor.registerFunction('BlazorLogger.Logger.Log', function (args) {\r\n    if (Array.isArray(args)) {\r\n        console[\"log\"].apply(this, args)\r\n    } else {\r\n        console.log(args);\r\n    }\r\n    return true;\r\n});\r\n```\r\nC# Interop:\r\n```\r\npublic static void Log(params object[] list)\r\n{\r\n  var _list = new List<object>(list);\r\n  RegisteredFunction.Invoke<bool>(\"BlazorLogger.Logger.Log\", _list);\r\n}\r\n```\r\nNote the first line is needed.\r\n\r\nC# Calling code:\r\n```\r\nvar person = new Person { FirstName = \"John\", LastName = \"Smith\" };\r\nvar message = \"Hello, %O, you have been called %i times\";\r\nfor (int i = 0; i < 5; i++)\r\n{\r\n  Logger.Log(message, person, i + 1);\r\n}\r\n```\r\n\r\nWithout the first line in the interop code `var _list = new List<object>(list);` The output on the console is : `Hello, %O, you have been called %i times`. With the first line the output is as expected:\r\n\r\n```\r\nHello, \r\nObject\r\nFirstName\r\n:\r\n\"John\"\r\nLastName\r\n:\r\n\"Smith\"\r\n__proto__\r\n:\r\nObject\r\n, you have been called 1 times\r\n```\r\n","Url":"https://github.com/aspnet/Blazor/issues/740","RelatedDescription":"Open issue \"JS Interop doesnt handle arrays well\" (#740)"},{"Id":"319986630","IsPullRequest":false,"CreatedAt":"2018-05-03T16:11:13","Actor":"chanan","Number":"739","RawContent":null,"Title":"RegisteredFunction.Invoke<T> should handle receiving 'null' for 'args'","State":"open","Body":"This is a bit strange.\r\nThis is my JS function:\r\n\r\n```\r\nBlazor.registerFunction('BlazorLogger.Logger.Count', function (label) {\r\n    if (label !== null) console.count(label);\r\n    else console.count();\r\n    return true;\r\n});\r\n```\r\n\r\nAnd defined these two interop functions:\r\n\r\n```\r\npublic static void Count()\r\n{\r\n  RegisteredFunction.Invoke<bool>(\"BlazorLogger.Logger.Count\", null);\r\n}\r\n\r\npublic static void Count(string label)\r\n{\r\n  RegisteredFunction.Invoke<bool>(\"BlazorLogger.Logger.Count\", label);\r\n}\r\n```\r\n\r\nAnd calling it like so:\r\n\r\n```\r\nLogger.Count();\r\nLogger.Count(null);\r\nLogger.Count(\"bob\");\r\n```\r\n\r\nStrangely, lines 2 & 3 work fine, but line 1 which seems to do more or less the same thing as line 2 does not:\r\n\r\n```\r\nUncaught Error: System.ArgumentNullException: Value cannot be null.\r\nParameter name: source\r\n  at System.Linq.Enumerable.Select[TSource,TResult] (:11690/System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult] selector) <0x1c01168 + 0x0001a> in <2e4578bfc56440cca13db140d3ae997a>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Interop.RegisteredFunction.Invoke[TRes] (:11690/System.String identifier, System.Object[] args) <0x1c00820 + 0x00018> in <92ed9c6772a34798bccecc99cc26cbcd>:0 \r\n  at :11690/BlazorLogger.Logger.Count () <0x1c003b0 + 0x00006> in <f4f92b4bec764f4ab07179cba15c0d18>:0 \r\n  at :11690/Sample.Pages.Index.onclickCount () <0x1bff3b8 + 0x00004> in <0f6654494db343ba856c72c5c375f027>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.EventHandlerInvoker.Invoke (:11690/Microsoft.AspNetCore.Blazor.UIEventArgs e) <0x1bff148 + 0x00076> in <0d9c96ffc9704aa9b088cbbe138126c6>:0 \r\n...\r\n```","Url":"https://github.com/aspnet/Blazor/issues/739","RelatedDescription":"Open issue \"RegisteredFunction.Invoke<T> should handle receiving 'null' for 'args'\" (#739)"},{"Id":"319734438","IsPullRequest":false,"CreatedAt":"2018-05-02T22:32:30","Actor":"InnovationGB","Number":"737","RawContent":null,"Title":"Razor syntax highlighting/intellisense not working","State":"open","Body":"Currently I need to copy my code to C# files in order to gain intellisense and syntax highlighting. Is this not currently supported in Blazor?","Url":"https://github.com/aspnet/Blazor/issues/737","RelatedDescription":"Open issue \"Razor syntax highlighting/intellisense not working\" (#737)"},{"Id":"319565180","IsPullRequest":false,"CreatedAt":"2018-05-02T16:44:47","Actor":"hungdluit","Number":"734","RawContent":null,"Title":"LESS or SCSS supported?","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/issues/734","RelatedDescription":"Closed issue \"LESS or SCSS supported?\" (#734)"},{"Id":"319587994","IsPullRequest":false,"CreatedAt":"2018-05-02T16:42:11","Actor":"chanan","Number":"735","RawContent":null,"Title":"Make a standard way (in BlazorComponent) to pass arbitrary attributes","State":"closed","Body":"In @SteveSandersonMS Bootstrap branch @SteveSandersonMS added a way to pass arbitrary attributes down to a Component. Every Component should have that by default such that a component doesn't have to implement every single attribute imaginable. For example in react I would do that with the spread operator on props: <button {...props} />\r\n\r\nSee code in the bootstrap branch here:\r\n\r\nhttps://github.com/aspnet/Blazor/blob/stevesa/bootstrap-components-library/src/Microsoft.AspNetCore.Blazor.Bootstrap/BootstrapComponentBase.cs\r\nUsed here: https://github.com/aspnet/Blazor/blob/stevesa/bootstrap-components-library/src/Microsoft.AspNetCore.Blazor.Bootstrap/Components/bsAlert.cshtml#L5\r\nand rendered here: https://github.com/aspnet/Blazor/blob/stevesa/bootstrap-components-library/src/Microsoft.AspNetCore.Blazor.Bootstrap/DynamicElement.cs \r\n\r\nIMO, this should be part of Blazor itself.","Url":"https://github.com/aspnet/Blazor/issues/735","RelatedDescription":"Closed issue \"Make a standard way (in BlazorComponent) to pass arbitrary attributes\" (#735)"},{"Id":"319601546","IsPullRequest":false,"CreatedAt":"2018-05-02T16:38:44","Actor":"hhblaze","Number":"736","RawContent":null,"Title":"HttpClient only supports contents of type StringContent ONLY!","State":"closed","Body":"Hi!\r\nWhen I want to use HttpClient in my own service I initialize it like this:\r\n\r\n```C#\r\n  class Program\r\n    {\r\n        internal static System.Net.Http.HttpClient _HttpClient = null;\r\n\r\n        static void Main(string[] args)\r\n        {          \r\n\r\n            var serviceProvider = new BrowserServiceProvider(services =>\r\n            {\r\n                // Add any custom services here\r\n            });\r\n\r\n            //Binds default system service to the http client\r\n            Program._HttpClient = (System.Net.Http.HttpClient)serviceProvider.GetService(typeof(System.Net.Http.HttpClient));          \r\n           \r\n```\r\nThen I successfully use it in different operations inside the static classes or services:\r\n\r\n```C#\r\n  async public static Task<string> GetData()\r\n        {\r\n            try\r\n            {\r\n                //------Variant 1\r\n                //var body = await Program._HttpClient.GetStringAsync(\"/addinadminjs\");\r\n                //RegisteredFunction.Invoke<bool>(\"say\", new { greeting = body.ToString() });\r\n\r\n                //------Variant 2\r\n                //var body = await Program._HttpClient.GetByteArrayAsync(\"/modules.http.GM_PersonalDevice/btar\");\r\n                //RegisteredFunction.Invoke<bool>(\"say\", new { greeting = body.Length.ToString() });\r\n\r\n                //------Variant 3\r\n                //---This will err that HttpContent can be only  a StringContent               \r\n                var response = await Program._HttpClient.PostAsync(\"/modules.http.GM_PersonalDevice/btar\",\r\n                    new ByteArrayContent(new byte[] { 5, 7, 89, 47 }));\r\n                string body = \"\";\r\n                if (response.IsSuccessStatusCode)\r\n                    body = (await response.Content.ReadAsByteArrayAsync()).Length.ToString();\r\n                else\r\n                    body = \"IsSuccessStatusCode: false\";\r\n                RegisteredFunction.Invoke<bool>(\"say\", new { greeting = body });\r\n\r\n                //------Variant 4                \r\n                //var response = await Program._HttpClient.PostAsync(\"/modules.http.GM_PersonalDevice/btar\",\r\n                //    new StringContent(\"yeahyeah\"));\r\n                //string body = \"\";\r\n                //if (response.IsSuccessStatusCode)\r\n                //    body = (await response.Content.ReadAsByteArrayAsync()).Length.ToString();\r\n                //else\r\n                //    body = \"IsSuccessStatusCode: false\";\r\n                //RegisteredFunction.Invoke<bool>(\"say\", new { greeting = body });\r\n\r\n```\r\nThere is no problems to receive byte[] from the server, but it's not possible to send byte[] to it (like in variant 3). \r\n\r\n> System.InvalidOperationException: Currently, System.Net.Http.HttpClient only supports contents of type StringContent, but you supplied System.Net.Http.ByteArrayContent. at Microsoft.AspNetCore.Blazor.Browser.Http.BrowserHttpMessageHandler\r\n\r\nQuestion is can it be implemented into the nearest release/future?\r\n\r\nThank you!","Url":"https://github.com/aspnet/Blazor/issues/736","RelatedDescription":"Closed issue \"HttpClient only supports contents of type StringContent ONLY!\" (#736)"},{"Id":"319471693","IsPullRequest":false,"CreatedAt":"2018-05-02T10:14:05","Actor":"stavroskasidis","Number":"731","RawContent":null,"Title":"Provide a way to reference child components","State":"closed","Body":"Consider the following component usage\r\n\r\n```xml\r\n<ComponentWrapper>\r\n     <MyComponent />\r\n</ComponentWrapper>\r\n```\r\nLet's assume the components have the following code\r\n\r\n#### _MyComponent.cshtml_\r\n```xml\r\n<input type='text' />\r\n```\r\n\r\n#### _ComponentWrapper.cshtml_\r\n```xml\r\n<div>\r\n@ChildContent\r\n</div>\r\n@functions{\r\n    RenderFragment ChildContent;\r\n}\r\n```\r\n\r\nIs there a way (other than js interop) to get a reference to the child components in **ComponentWrapper.cshtml**? Is this on the \"todo\" list?","Url":"https://github.com/aspnet/Blazor/issues/731","RelatedDescription":"Closed issue \"Provide a way to reference child components\" (#731)"},{"Id":"319483469","IsPullRequest":false,"CreatedAt":"2018-05-02T09:43:53","Actor":"stavroskasidis","Number":"733","RawContent":null,"Title":"Generated __MyComponent class mismatch with 'this' keyword","State":"open","Body":"Consider the following senario:\r\n\r\n#### _MyComponent.cshtml_\r\n```xml\r\n<div> My component </div>\r\n@functions{\r\n    \r\n         public void override OnInit()\r\n         {\r\n                 MyHelperClass.InitMyComponent(this);\r\n         }\r\n}\r\n\r\n```\r\n\r\n#### _MyHelperClass.cs_\r\n```csharp\r\npublic static class MyHelperClass\r\n{\r\n         public static void InitMyComponent(MyComponent myComponent)\r\n         {\r\n                   // do stuff here\r\n         }\r\n}\r\n```\r\n\r\nThis code will not compile because, the keyword `this `is referencing the `__MyComponent `generated class. Any workarounds or fixes ?","Url":"https://github.com/aspnet/Blazor/issues/733","RelatedDescription":"Open issue \"Generated __MyComponent class mismatch with 'this' keyword\" (#733)"},{"Id":"319479759","IsPullRequest":false,"CreatedAt":"2018-05-02T09:32:31","Actor":"conficient","Number":"732","RawContent":null,"Title":"Add \"Blazor Page\" template to VS templates for 'Add New' dialog in VS","State":"open","Body":"Not an urgent requirement, but a \"Blazor Page\" template would be nice in the \"Add New\" dialog in VS.\r\n\r\nAt present I just copy existing pages and rename them.","Url":"https://github.com/aspnet/Blazor/issues/732","RelatedDescription":"Open issue \"Add \"Blazor Page\" template to VS templates for 'Add New' dialog in VS\" (#732)"},{"Id":"319390641","IsPullRequest":false,"CreatedAt":"2018-05-02T06:29:47","Actor":"InnovationGB","Number":"730","RawContent":null,"Title":"Razor syntax error in template?","State":"closed","Body":"I have dotnet version2.1.300-preview2-008533,\r\n\r\nWhen I create a template for blazor, my counters button is\r\n\r\n<button onclick=\"IncrementCounter\"<button>\r\n\r\nWhy is it in every other template I see such as on scotts april 3rd podcast, the function is called like the following\r\n\r\n<button @onclick(IncrementCounter) ></button>\r\n\r\nI get an error stating onclick cannot be found but this seems to be typical razor syntax? ","Url":"https://github.com/aspnet/Blazor/issues/730","RelatedDescription":"Closed issue \"Razor syntax error in template?\" (#730)"},{"Id":"319331510","IsPullRequest":true,"CreatedAt":"2018-05-01T21:18:34","Actor":"msdickinson","Number":"729","RawContent":null,"Title":"Added readFloatField","State":"open","Body":" - Added readFloatField\r\n\r\nAddresses #725 ","Url":"https://github.com/aspnet/Blazor/pull/729","RelatedDescription":"Open PR \"Added readFloatField\" (#729)"},{"Id":"319318186","IsPullRequest":false,"CreatedAt":"2018-05-01T20:49:40","Actor":"dimabayda","Number":"728","RawContent":null,"Title":"Error when bind bootstrap custom attribute","State":"closed","Body":"Hello, i have an error when bind some string to bootstrap custom attribute (consist of two parts connected by a hyphen).\r\n\r\nCode example where error occurs:\r\n`<button type=\"button\" class=\"@ButtonClass\" data-target=\"@TargetId\" data-toggle=\"modal\">\r\n\t@ButtonCaption\r\n</button>`\r\n\r\n![image](https://user-images.githubusercontent.com/15806101/39492155-5d3b8b3a-4d97-11e8-8b77-a69db9a8e4e4.png)\r\n\r\nI think, its related to new \"bind-\" syntax.\r\n","Url":"https://github.com/aspnet/Blazor/issues/728","RelatedDescription":"Closed issue \"Error when bind bootstrap custom attribute\" (#728)"},{"Id":"319119965","IsPullRequest":true,"CreatedAt":"2018-05-01T19:22:16","Actor":"rynowak","Number":"718","RawContent":null,"Title":"WIP Partial for fix #546 - Add more events","State":"closed","Body":"Work in progress adding more built-in event types. I figure I'll keep working on this for a bit and we can merge whatever's ready before we branch","Url":"https://github.com/aspnet/Blazor/pull/718","RelatedDescription":"Closed or merged PR \"WIP Partial for fix #546 - Add more events\" (#718)"},{"Id":"319295652","IsPullRequest":false,"CreatedAt":"2018-05-01T19:14:43","Actor":"danroth27","Number":"727","RawContent":null,"Title":"Make Blazor component library template show up in VS","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/issues/727","RelatedDescription":"Open issue \"Make Blazor component library template show up in VS\" (#727)"},{"Id":"319295443","IsPullRequest":false,"CreatedAt":"2018-05-01T19:14:01","Actor":"danroth27","Number":"726","RawContent":null,"Title":"Make Blazor component libraries work with autobuild","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/issues/726","RelatedDescription":"Open issue \"Make Blazor component libraries work with autobuild\" (#726)"},{"Id":"319293419","IsPullRequest":false,"CreatedAt":"2018-05-01T19:06:26","Actor":"msdickinson","Number":"725","RawContent":null,"Title":"Feature Request: Add \"readFloatField\" ","State":"open","Body":"**About**\r\nBeing able to use InvokeUnmarshalled for arrays Int32[] is very powerful, you can do the same with float[]. But If you want to extract the int you can use \r\n\r\n  `readInt32Field: function readHeapInt32(baseAddress: Pointer, fieldOffset?: number): number {\r\n    return Module.getValue((baseAddress as any as number) + (fieldOffset || 0), 'i32');\r\n  },`\r\n\r\nBut nothing exist for floats.\r\n\r\n**Feature Request**\r\n\r\n\r\nAdd\r\n    `readFloatField: function readFloatField(baseAddress, fieldOffset) {\r\n        return Module.getValue(baseAddress + (fieldOffset || 0), 'float');\r\n    },`\r\n\r\nTo MonoPlatform.ts at that line of code\r\nhttps://github.com/aspnet/Blazor/blob/dev/src/Microsoft.AspNetCore.Blazor.Browser.JS/src/Platform/Mono/MonoPlatform.ts#L112\r\n\r\n**Example Usage**\r\n\r\n```\r\npublic static class ContentPackage\r\n    {\r\n        const string SendPackageIdentifier = \"ContentPackage.Package\";\r\n        public static string SendPackage(float[] package)\r\n        {\r\n            return RegisteredFunction.InvokeUnmarshalled<float[], string>(\r\n                SendPackageIdentifier,\r\n                package);\r\n        }\r\n    }\r\n```\r\n\r\nOn CSHTML \r\n\r\n```\r\n    float[] package = new float[10];\r\n    void SendPackage()\r\n    {\r\n        package[0] = 5.5;\r\n        ContentPackage.SendPackage(package);\r\n    }\r\n```\r\n\r\nOn index.html\r\n\r\n```\r\nBlazor.registerFunction('ContentPackage.Package', function (data) {   \r\n            const arrPtr = Blazor.platform.getArrayEntryPtr(data, 0, 4);   \r\n            console.log(\"ptr: \" + arrPtr);\r\n            console.log(Blazor.platform.readFloatField(arrPtr, 0));\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/725","RelatedDescription":"Open issue \"Feature Request: Add \"readFloatField\" \" (#725)"},{"Id":"319288638","IsPullRequest":false,"CreatedAt":"2018-05-01T19:00:41","Actor":"dlr1","Number":"724","RawContent":null,"Title":"unable to set [Parameter] value, inaccessible due to protection level","State":"closed","Body":"I am using version \"0.3.0-preview1-10261\". \r\nSetting the Parameter value works when it is done inline, but not through code.\r\n\r\nI have a component \"MyComp\"\r\n```\r\n<input bind=\"@Name\" />\r\n@functions{\r\n    [Parameter]\r\n    string Name { get; set; }\r\n}\r\n```\r\nI use it like  below.\r\n```\r\n<MyComp ref=\"mycomp\" Name=\"testing\"></MyComp>\r\n@functions{\r\n    MyComp mycomp;\r\n\r\n    protected override void OnAfterRender()\r\n    {\r\n        base.OnAfterRender();\r\n      //  mycomp.Name = \"this is a test\";\r\n        \r\n    }\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/724","RelatedDescription":"Closed issue \"unable to set [Parameter] value, inaccessible due to protection level\" (#724)"},{"Id":"319114040","IsPullRequest":true,"CreatedAt":"2018-05-01T16:55:13","Actor":"danroth27","Number":"717","RawContent":null,"Title":"Update survey link","State":"closed","Body":"Fixes #712","Url":"https://github.com/aspnet/Blazor/pull/717","RelatedDescription":"Closed or merged PR \"Update survey link\" (#717)"},{"Id":"319233174","IsPullRequest":false,"CreatedAt":"2018-05-01T16:20:01","Actor":"dlr1","Number":"723","RawContent":null,"Title":"question: how to add a component dynamically","State":"closed","Body":"If I have some code like the following. how would I add any component at the given location? Having a bunch of if/switch statements is cumbersome.\r\n```\r\n<button onclick=\"@addcomp1\">add comp1</button>\r\n<button onclick=\"@addcomp2\">add comp2</button>\r\n<div style=\"border:dashed 1px black;width:500px;height:100px\">\r\n     /// component goes here\r\n</div>\r\n@functions{\r\n protected void addcomp1()\r\n    {\r\n       // what goes here?\r\n    }\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/723","RelatedDescription":"Closed issue \"question: how to add a component dynamically\" (#723)"},{"Id":"319213414","IsPullRequest":true,"CreatedAt":"2018-05-01T16:12:04","Actor":"SteveSandersonMS","Number":"722","RawContent":null,"Title":"Support custom events and non-bubbling standard events","State":"closed","Body":"... in addition to the existing support for bubbling standard events.","Url":"https://github.com/aspnet/Blazor/pull/722","RelatedDescription":"Closed or merged PR \"Support custom events and non-bubbling standard events\" (#722)"},{"Id":"319182749","IsPullRequest":true,"CreatedAt":"2018-05-01T15:40:08","Actor":"SteveSandersonMS","Number":"720","RawContent":null,"Title":"For checkboxes, bind to 'checked'. Fix special property handling in BrowserRenderer.ts. Fixes #659 and #703","State":"closed","Body":"At first I was going to fix #703 by changing how attributes are applied so we capture all their values up front and can make decisions in an order-independent way. But then I realised that if we treated checkboxes properly then the ordering issue wouldn't exist anyway.\r\n\r\nThis PR changes `bind` for checkboxes to use the `checked` property instead of `value`. It should always have done that really, but didn't as a historical consequence of the old `@bind(...)` syntax. With the new syntax we can just treat checkboxes properly and the issue goes away.\r\n\r\nThis PR also fixes #659 since now we have more consistent (and simpler) handling of \"special\" attributes.\r\n\r\n### Breaking change\r\n\r\nPeople who previously used `<input type='checkbox' value=@someBoolValue />` should now instead write `<input type='checkbox' checked=@someBoolValue />`. This makes a lot more sense anyway.\r\n\r\nIt doesn't affect any code that uses `bind=@someBoolValue`, because we now map that to the new correct property.","Url":"https://github.com/aspnet/Blazor/pull/720","RelatedDescription":"Closed or merged PR \"For checkboxes, bind to 'checked'. Fix special property handling in BrowserRenderer.ts. Fixes #659 and #703\" (#720)"},{"Id":"319202721","IsPullRequest":false,"CreatedAt":"2018-05-01T14:27:26","Actor":"dlr1","Number":"721","RawContent":null,"Title":"suggestion: component parameters and events ","State":"closed","Body":"Along with [Parameter] for component parameters, it would be nice to have the exposed parameter have different name then the property name in the component.\r\n\r\nAlong the same lines it will be nice to have some attribute to mark events that are exposed by the components.","Url":"https://github.com/aspnet/Blazor/issues/721","RelatedDescription":"Closed issue \"suggestion: component parameters and events \" (#721)"},{"Id":"319151044","IsPullRequest":true,"CreatedAt":"2018-05-01T09:15:22","Actor":"SteveSandersonMS","Number":"719","RawContent":null,"Title":"Stevesa/tweak pr 683","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/719","RelatedDescription":"Closed or merged PR \"Stevesa/tweak pr 683\" (#719)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-05-04T05:30:02.7260766Z","RunDurationInMilliseconds":1332}