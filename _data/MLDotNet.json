{"Data":{"GitHub":{"Issues":[{"Id":"417052498","IsPullRequest":true,"CreatedAt":"2019-03-05T02:14:21","Actor":"TomFinley","Number":"2842","RawContent":null,"Title":"Hide more of Microsoft.ML.Data","State":"closed","Body":"Towards #1602. When performing what I hope is one of my final reviews of the public surface area of `Microsoft.ML.Data` I saw many \"small\" items, each too petty to warrant separate issues, but that we nonetheless do not want in the public surface. This is in the vein of #2300 and other similar PRs. Special emphasis was placed on making sure we don't have abstract protected members visible as part of the public surface, and other such things as this.\r\n\r\nIn my review of the assembly I did not address those types or members I knew were being taken care of through other channels. (E.g., the attribute bearing marker interfaces for `IComponentFactory`, or the calibrator.)","Url":"https://github.com/dotnet/machinelearning/pull/2842","RelatedDescription":"Closed or merged PR \"Hide more of Microsoft.ML.Data\" (#2842)"},{"Id":"417080278","IsPullRequest":true,"CreatedAt":"2019-03-05T02:11:58","Actor":"artidoro","Number":"2846","RawContent":null,"Title":"Remove ConcurrencyFactor from IHostEnvironment","State":"open","Body":"Fixes #2051.\r\n\r\nIn this PR I remove `ConcurrencyFactor` from `IHostEnvironment` and interfaces and classes deriving/implementing it. \r\n\r\nI had to skip a `RandomPredictor` as I am not sure how I can require a single threaded behavior without the `ConcurrencyFactor` for this specific trainer. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2846","RelatedDescription":"Open PR \"Remove ConcurrencyFactor from IHostEnvironment\" (#2846)"},{"Id":"417071060","IsPullRequest":true,"CreatedAt":"2019-03-05T01:36:31","Actor":"wschin","Number":"2844","RawContent":null,"Title":"[One line Fix] Fix a use of text featurizer","State":"closed","Body":"As title.","Url":"https://github.com/dotnet/machinelearning/pull/2844","RelatedDescription":"Closed or merged PR \"[One line Fix] Fix a use of text featurizer\" (#2844)"},{"Id":"417071346","IsPullRequest":true,"CreatedAt":"2019-03-05T01:31:01","Actor":"jwood803","Number":"2845","RawContent":null,"Title":"Update schema comprehension documentation code","State":"open","Body":"Fix for #2039","Url":"https://github.com/dotnet/machinelearning/pull/2845","RelatedDescription":"Open PR \"Update schema comprehension documentation code\" (#2845)"},{"Id":"416309715","IsPullRequest":true,"CreatedAt":"2019-03-05T01:24:11","Actor":"zeahmed","Number":"2819","RawContent":null,"Title":"Cleaned and fixed public API surface for KMeans, NaiveBayes, OLS.","State":"closed","Body":"This is the final PR related to #2620. This PR finally fixes #2620\r\n\r\nThe following learners are addressed in this PR.\r\n\r\n* KMeansPlusPlusTrainer\r\n* MultiClassNaiveBayesTrainer (No sample for NaiveBayes opened issue #2818)\r\n* OlsLinearRegressionTrainer\r\n\r\nthe following tasks were performed in classes related to above learners.\r\n\r\nChecking to make sure that unnecessary public methods/properties be internal.\r\nRenaming parameters according to standard.\r\nCreating/Refactoring samples according to standards.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2819","RelatedDescription":"Closed or merged PR \"Cleaned and fixed public API surface for KMeans, NaiveBayes, OLS.\" (#2819)"},{"Id":"417066229","IsPullRequest":true,"CreatedAt":"2019-03-05T01:08:33","Actor":"sharwell","Number":"2843","RawContent":null,"Title":"Update to coverlet 2.6.0","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/2843","RelatedDescription":"Open PR \"Update to coverlet 2.6.0\" (#2843)"},{"Id":"417021989","IsPullRequest":true,"CreatedAt":"2019-03-04T23:45:21","Actor":"Ivanidzo4ka","Number":"2840","RawContent":null,"Title":"Hide SaveTo/LoadFrom from TransformerChain","State":"closed","Body":"Fixes https://github.com/dotnet/machinelearning/issues/2837","Url":"https://github.com/dotnet/machinelearning/pull/2840","RelatedDescription":"Closed or merged PR \"Hide SaveTo/LoadFrom from TransformerChain\" (#2840)"},{"Id":"416996331","IsPullRequest":false,"CreatedAt":"2019-03-04T23:45:21","Actor":"eerhardt","Number":"2837","RawContent":null,"Title":"Remove public TrainformerChain SaveTo/LoadFrom APIs","State":"closed","Body":"We currently have APIs on `MLContext.Model` to save and load model files.\r\n\r\nHowever, we have some hang-over APIs that were made before we had the `MLContext.Model` APIs:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/b1801a8a6b6463ec5f6fb576ca279343e7cfaebb/src/Microsoft.ML.Data/DataLoadSave/TransformerChain.cs#L236-L300\r\n\r\nWe should remove these APIs from the public surface area. The only way to save/load models should be through `MLContext.Model`.\r\n\r\ncc @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/2837","RelatedDescription":"Closed issue \"Remove public TrainformerChain SaveTo/LoadFrom APIs\" (#2837)"},{"Id":"417044942","IsPullRequest":false,"CreatedAt":"2019-03-04T23:40:10","Actor":"TomFinley","Number":"2841","RawContent":null,"Title":"The curious case of TrainedWrapperEstimatorBase and friends","State":"open","Body":"So, while I was doing another round of internalization, one thing that I internalized was this. (Basically, something to handle the shimming from the now internal `IDataTransform` interface to the new `ITransformer` interface, during the regrettable situations -- thankfully few -- where such a thing is still necessary. So this:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/63a7654edaddaf0eea6af98ea762b01594d083ee/src/Microsoft.ML.Data/DataLoadSave/TransformWrapper.cs#L20\r\n\r\nand this\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/63a7654edaddaf0eea6af98ea762b01594d083ee/src/Microsoft.ML.Data/DataLoadSave/TransformWrapper.cs#L151\r\n\r\nNow, that's all fine, but after doing the necessary work it seemed that I could delete the estimator wrapper entirely, but then I see this very intriguing note.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/63a7654edaddaf0eea6af98ea762b01594d083ee/src/Microsoft.ML.Data/DataView/RowToRowMapperTransform.cs#L50-L56\r\n\r\nI do not understand what is going on here. This is not essential -- everything here is internal -- but it seems at least odd. This seems to indicate that this method and the class I wanted to delete have something to do with each other, but as far as I can tell they have nothing to do with each other whatsoever. But then why the comment?\r\n\r\nAnyway, there's clearly something odd going on. This is absolutely not critical, but I wanted to register an issue about the oddness, since the code underlying it passes my understanding.","Url":"https://github.com/dotnet/machinelearning/issues/2841","RelatedDescription":"Open issue \"The curious case of TrainedWrapperEstimatorBase and friends\" (#2841)"},{"Id":"417013694","IsPullRequest":true,"CreatedAt":"2019-03-04T23:11:41","Actor":"najeeb-kazmi","Number":"2839","RawContent":null,"Title":"Remnants from renaming of StratificationColumn","State":"closed","Body":"Fixes #2536 remnants.","Url":"https://github.com/dotnet/machinelearning/pull/2839","RelatedDescription":"Closed or merged PR \"Remnants from renaming of StratificationColumn\" (#2839)"},{"Id":"417007709","IsPullRequest":false,"CreatedAt":"2019-03-04T21:47:54","Actor":"zeahmed","Number":"2838","RawContent":null,"Title":"`UseStopRemover` parameter in TextFeaturizer does not make sense.","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/5746ec9eeb5aac9dcd3c4355ccce46d17ee46cdf/src/Microsoft.ML.Transforms/Text/TextFeaturizingEstimator.cs#L157\r\n\r\nI think it should be renamed to `UseStopWordRemover`? Xml comments need to be updated to too.","Url":"https://github.com/dotnet/machinelearning/issues/2838","RelatedDescription":"Open issue \"`UseStopRemover` parameter in TextFeaturizer does not make sense.\" (#2838)"},{"Id":"416987773","IsPullRequest":false,"CreatedAt":"2019-03-04T21:25:08","Actor":"DevLob-zz","Number":"2836","RawContent":null,"Title":"Question : When 0.11 expected to be released","State":"closed","Body":"Question : When 0.11 expected to be released\r\n\r\nbest regards","Url":"https://github.com/dotnet/machinelearning/issues/2836","RelatedDescription":"Closed issue \"Question : When 0.11 expected to be released\" (#2836)"},{"Id":"416980057","IsPullRequest":false,"CreatedAt":"2019-03-04T20:31:33","Actor":"Ivanidzo4ka","Number":"2835","RawContent":null,"Title":"Scrubbing rest of transformers","State":"open","Body":"Sub task of #2827\r\n\r\nNormalize\r\nReplaceMissingValues\r\nIndicateMissingValues\r\nOneHotEncoding\r\nOneHotHashEncoding\r\nCustomMapping\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2835","RelatedDescription":"Open issue \"Scrubbing rest of transformers\" (#2835)"},{"Id":"416979310","IsPullRequest":false,"CreatedAt":"2019-03-04T20:29:37","Actor":"Ivanidzo4ka","Number":"2834","RawContent":null,"Title":"Scrubbing time series related transformers","State":"open","Body":"Sub task of #2827\r\nIidChangePointEstimator\r\nIidSpikeEstimator\r\nSsaChangePointEstimator\r\nSsaSpikeEstimator\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2834","RelatedDescription":"Open issue \"Scrubbing time series related transformers\" (#2834)"},{"Id":"416979065","IsPullRequest":false,"CreatedAt":"2019-03-04T20:28:58","Actor":"Ivanidzo4ka","Number":"2833","RawContent":null,"Title":"Scrubbing Image related transformers","State":"open","Body":"Sub task of #2827\r\nConvertToGrayScale\r\nResizeImage\r\nExtractPixel\r\nConvertImage\r\nLoadImage\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2833","RelatedDescription":"Open issue \"Scrubbing Image related transformers\" (#2833)"},{"Id":"416960954","IsPullRequest":false,"CreatedAt":"2019-03-04T19:40:03","Actor":"Ivanidzo4ka","Number":"2832","RawContent":null,"Title":"Scrubbing Text related transformers","State":"open","Body":"Sub task of #2827\r\n\r\nWordEmbedding\r\nFeaturizeText\r\nLDA\r\nNormalizeText\r\nProduceHashedNGrams\r\nProduceHashedWordBag\r\nProduceNgrams\r\nProduceWordBag\r\nRemoveStopWords\r\nRemoveCustomStopWords\r\nTokenizeChar\r\nTokenizeWords\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2832","RelatedDescription":"Open issue \"Scrubbing Text related transformers\" (#2832)"},{"Id":"416960484","IsPullRequest":false,"CreatedAt":"2019-03-04T19:38:45","Actor":"Ivanidzo4ka","Number":"2831","RawContent":null,"Title":"Scrubbing `Projection` transformers","State":"open","Body":"Sub task of #2827\r\nRFF, LpNorm, GcNorm, PCA, Whiten.\r\nProjection catalog is bad name, and we probably should toss around this transforms across other catalogs.","Url":"https://github.com/dotnet/machinelearning/issues/2831","RelatedDescription":"Open issue \"Scrubbing `Projection` transformers\" (#2831)"},{"Id":"416959602","IsPullRequest":false,"CreatedAt":"2019-03-04T19:36:21","Actor":"Ivanidzo4ka","Number":"2830","RawContent":null,"Title":"Scrubbing feature selection transformers","State":"open","Body":"Sub task of #2827 \r\n\r\nSelectFeaturesBasedOnCount\r\nSelectFeaturesBasedOnMutualInformation\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2830","RelatedDescription":"Open issue \"Scrubbing feature selection transformers\" (#2830)"},{"Id":"416959113","IsPullRequest":false,"CreatedAt":"2019-03-04T19:34:58","Actor":"Ivanidzo4ka","Number":"2829","RawContent":null,"Title":"Scrubbing key related transforms","State":"open","Body":"Sub task of #2827\r\n\r\nMapKeyToBinaryVector\r\nMapKeyToBinaryVector\r\nMapKeyToVector\r\nMapKeyToValue\r\nMapValueToKey\r\nValueMap\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2829","RelatedDescription":"Open issue \"Scrubbing key related transforms\" (#2829)"},{"Id":"416958472","IsPullRequest":false,"CreatedAt":"2019-03-04T19:33:16","Actor":"Ivanidzo4ka","Number":"2828","RawContent":null,"Title":"Scrubbing schema related transformers","State":"open","Body":"Sub task of #2827\r\nCopy, SelectColumns, DropColumns, Concat\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2828","RelatedDescription":"Open issue \"Scrubbing schema related transformers\" (#2828)"},{"Id":"416955326","IsPullRequest":false,"CreatedAt":"2019-03-04T19:24:55","Actor":"Ivanidzo4ka","Number":"2827","RawContent":null,"Title":"Scrubbing transformers (Meta issue)","State":"open","Body":"We need to make sure our transforms are in good shape.\r\n\r\n1. No protected fields/members/method in public classes. Only private protected.\r\n\r\n2. Transformer class is sealed.\r\n\r\n3. Transformer should have respectful to catalog method names.\r\n\r\n4. Column options cleaning:\r\n- Option should have meaning and proper way it initialize it self. \r\n- No short names.\r\n5. `public IReadOnlyCollection<(string outputColumnName, string inputColumnName)> Columns => ColumnPairs.AsReadOnly(); ` \r\nI don't think that public thing make sense to me, I would prefer to get rid of it.\r\n\r\nList still in progress.","Url":"https://github.com/dotnet/machinelearning/issues/2827","RelatedDescription":"Open issue \"Scrubbing transformers (Meta issue)\" (#2827)"},{"Id":"416338475","IsPullRequest":false,"CreatedAt":"2019-03-04T03:38:17","Actor":"prathyusha12345","Number":"2821","RawContent":null,"Title":"Exception in CreditCard Fraud Detection sample while migrating to v0.11","State":"closed","Body":"### Issue\r\n\r\n- While migrating CreditCard Fraud Detection sample I am getting the below exception while trying to save train/test data\r\n\r\n\r\n\r\n```\r\n                //(trainData, testData) = classification.TrainTestSplit(data, testFraction: 0.2, stratificationColumn: \"Label\");\r\n                TrainTestData trainTestData = classification.TrainTestSplit(data, testFraction: 0.2);\r\n                trainData = trainTestData.TrainSet;\r\n                testData = trainTestData.TestSet;\r\n\r\n                // save test split\r\n                using (var fileStream = File.Create(Path.Combine(_outputPath, \"testData.csv\")))\r\n                {\r\n                    mlContext.Data.SaveAsText(testData, fileStream, separatorChar:',', headerRow:true, schema: true);\r\n                }\r\n```\r\n\r\n\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/22335043/53674701-96fb3900-3c44-11e9-9509-399e4ec226c9.png)\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2821","RelatedDescription":"Closed issue \"Exception in CreditCard Fraud Detection sample while migrating to v0.11\" (#2821)"},{"Id":"416585909","IsPullRequest":false,"CreatedAt":"2019-03-04T00:22:32","Actor":"daholste","Number":"2826","RawContent":null,"Title":"Train binary classification with key type label","State":"open","Body":"@justinormont points out (https://github.com/dotnet/machinelearning-automl/issues/255) :\r\n> `Key` type is needed for binary classification learners:\r\n> \r\n> * Dataset w/ text labels (as seen here)\r\n> * Datasets w/ missing labels -- `BL` no longer supports NA (changed in [dotnet/machinelearning#673](https://github.com/dotnet/machinelearning/issues/673))\r\n\r\nWhen the \"Label\" column is text, calling\r\n\r\n```C#\r\n\r\nvar pipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Label\", \"Label\");\r\nvar trainer = mlContext.BinaryClassification.Trainers.LightGbm(labelColumnName: \"Label\", featureColumnName: \"Features\");\r\nvar trainingPipeline = pipeline.Append(trainer);\r\nvar crossValidationResults = mlContext.BinaryClassification.CrossValidateNonCalibrated(trainingDataView, trainingPipeline, numFolds: 5, labelColumn: \"Label\");\r\n```\r\nresults in the exception \r\n\r\n```\r\nSystem.ArgumentOutOfRangeException\r\n  HResult=0x80131502\r\n  Message=Schema mismatch for label column '': expected Bool, got Key<U4>\r\n  Source=Microsoft.ML.Data\r\n  StackTrace:\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.CheckLabelCompatible(Column labelCol)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.CheckInputSchema(SchemaShape inputSchema)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.GetOutputSchema(SchemaShape inputSchema)\r\n   at Microsoft.ML.Data.EstimatorChain`1.GetOutputSchema(SchemaShape inputSchema)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at Microsoft.ML.TrainCatalogBase.<>c__DisplayClass7_0.<CrossValidateTrain>b__0(Int32 fold)\r\n   at Microsoft.ML.TrainCatalogBase.CrossValidateTrain(IDataView data, IEstimator`1 estimator, Int32 numFolds, String samplingKeyColumn, Nullable`1 seed)\r\n   at Microsoft.ML.BinaryClassificationCatalog.CrossValidateNonCalibrated(IDataView data, IEstimator`1 estimator, Int32 numFolds, String labelColumn, String samplingKeyColumn, Nullable`1 seed)\r\n   at DogFruitNLP_14KB_735_rows_BinaryClassification.Program.BuildTrainEvaluateAndSaveModel(MLContext mlContext) in C:\\AutoMLDotNet\\bin\\AnyCPU.Debug\\mlnet\\netcoreapp2.1\\DogFruitNLP_14KB_735_rows_BinaryClassification\\Program.cs:line 74\r\n```\r\n\r\nWould you have any recommendation for handling these kinds of scenarios?","Url":"https://github.com/dotnet/machinelearning/issues/2826","RelatedDescription":"Open issue \"Train binary classification with key type label\" (#2826)"},{"Id":"416560072","IsPullRequest":true,"CreatedAt":"2019-03-03T20:28:55","Actor":"abgoswam","Number":"2825","RawContent":null,"Title":"Scrubbing SDCA learners","State":"open","Body":"Fixes #2616 .  Related #2613\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2825","RelatedDescription":"Open PR \"Scrubbing SDCA learners\" (#2825)"},{"Id":"416548582","IsPullRequest":false,"CreatedAt":"2019-03-03T18:43:34","Actor":"CESARDELATORRE","Number":"2824","RawContent":null,"Title":"In v0.11 Transforms.Conversion.ConvertType() does not properly convert numeric values if they are \"in quotes\" ","State":"open","Body":"Since v0.11, when a dataset file column's numeric value has quotes, ML.NET `mlContext.Transforms.Conversion.ConvertType()` cannot handle it properly. For instance, a column with the following values:\r\n\r\n- `\"1\"`\r\n- `\"0\"`\r\n\r\nML.NET `ConvertType()` in a pipeline was not able to convert those values to **Boolean** (it was transforming all values, either `\"0\"` and `\"1\"` to `0`) neither to **Float** (all values transformed to `NaN`)…\r\n\r\nThe following transformer puts a `0` to all values when converted to Boolean:\r\n`mlContext.Transforms.Conversion.ConvertType(outputColumnName: \"LabelBool\", inputColumnName: \"Label\", outputKind: DataKind.Boolean`\r\n\r\nThe following transformer puts a `NaN` to all values when converted to Float:\r\n`mlContext.Transforms.Conversion.ConvertType(outputColumnName: \"LabelFloat\", inputColumnName: \"Label\", outputKind: DataKind.Single`\r\n\r\nInterestingly, until ML.NET v0.10, ML.NET was able to directly load that properly into a Boolean type, properly.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2824","RelatedDescription":"Open issue \"In v0.11 Transforms.Conversion.ConvertType() does not properly convert numeric values if they are \"in quotes\" \" (#2824)"},{"Id":"416419753","IsPullRequest":false,"CreatedAt":"2019-03-02T17:27:31","Actor":"leecow","Number":"2823","RawContent":null,"Title":"can not register","State":"open","Body":"@Emmagrabergs commented on [Sat Mar 02 2019](https://github.com/dotnet/core/issues/2361)\n\nProblem encountered on https://dotnet.microsoft.com/learn/machinelearning-ai/ml-dotnet-get-started-tutorial/install\r\nOperating System: windows\r\n\r\nProvide details about the problem you are experiencing. Include your operating system version, exact error message, code sample, and anything else that is relevant..\n\n---\n\n@leecow commented on [Sat Mar 02 2019](https://github.com/dotnet/core/issues/2361#issuecomment-468941055)\n\nMoving to the ML repo. @Emmagrabergs - chances are they will need additional details on what you were doing and the errors you see. \n\n","Url":"https://github.com/dotnet/machinelearning/issues/2823","RelatedDescription":"Open issue \"can not register\" (#2823)"},{"Id":"416344237","IsPullRequest":true,"CreatedAt":"2019-03-02T02:08:10","Actor":"Anipik","Number":"2822","RawContent":null,"Title":"Updating the buildtools version to the latest","State":"open","Body":"This PR doesnot change any functionality of any sought.\r\nDuring the netcoreapp3.0 build on ubuntu, few  restore errors are printed.\r\n\r\n```\r\n/git/machinelearning/Tools/crossgen/crossgen.csproj : error NU1202: Package Microsoft.NETCore.App 3.0.0-preview-27324-5 is not compatible with netcoreapp2.0 (.NETCoreApp,Version=v2.0). Package Microsoft.NETCore.App 3.0.0-preview-27324-5 supports: netcoreapp3.0 (.NETCoreApp,Version=v3.0)\r\n/git/machinelearning/Tools/crossgen/crossgen.csproj : error NU1202: Package Microsoft.NETCore.App 3.0.0-preview-27324-5 is not compatible with netcoreapp2.0 (.NETCoreApp,Version=v2.0) / linux-x64. Package Microsoft.NETCore.App 3.0.0-preview-27324-5 supports: netcoreapp3.0 (.NETCoreApp,Version=v3.0)\r\n```\r\n\r\nThese errors doesnot interfere with the build or tests. This PR resolves those errors as well.","Url":"https://github.com/dotnet/machinelearning/pull/2822","RelatedDescription":"Open PR \"Updating the buildtools version to the latest\" (#2822)"},{"Id":"416311750","IsPullRequest":false,"CreatedAt":"2019-03-01T22:54:18","Actor":"rogancarr","Number":"2820","RawContent":null,"Title":"Chains of Chains","State":"open","Body":"It is possible to nest `EstimatorChain`s inside one another, fit them, and use them to transform data. The result is an object that is a nested `TransformerChain`.\r\n\r\nQuestion: Is this intended behavior? Do we want to allow this sort of nesting in the V1 API?\r\n\r\nI think that the proper way to handle nesting is to **first flatten the structure before the fit and return a single `EstimatorChain`**. I believe that since there is no forking and joining, that nested and non-nested pipelines are identical, except for the returned object. Data transformed by these objects should be the same whether the pipeline is nested or not (and is in my limited testing).\r\n\r\nTake a look at the following example where we featurize the UCI Adult dataset.\r\n\r\n```cs\r\nvar mlContext = new MLContext(seed: 1, conc: 1);\r\n\r\n// Load the Adult (tiny) dataset\r\nvar data = mlContext.Data.LoadFromTextFile<Adult>(GetDataPath(TestDatasets.adult.trainFilename),\r\n    hasHeader: TestDatasets.adult.fileHasHeader,\r\n    separatorChar: TestDatasets.adult.fileSeparator);\r\n\r\n// Create the learning pipeline\r\nvar pipeline = mlContext.Transforms.Concatenate(\"NumericalFeatures\", Adult.NumericalFeatures)\r\n    .Append(mlContext.Transforms.Concatenate(\"CategoricalFeatures\", Adult.CategoricalFeatures))\r\n    .Append(mlContext.Transforms.Categorical.OneHotHashEncoding(\"CategoricalFeatures\",\r\n        invertHash: 2, outputKind: OneHotEncodingTransformer.OutputKind.Bag))\r\n    .Append(mlContext.Transforms.Concatenate(\"Features\", \"NumericalFeatures\", \"CategoricalFeatures\"))\r\n    .Append(mlContext.BinaryClassification.Trainers.LogisticRegression());\r\n\r\n// Train the model.\r\nvar model = pipeline.Fit(data);\r\n```\r\n\r\nHere, `pipeline` is an `EstimatorChain<BinaryPredictionTransformer<...>>` and `model` is a `TransformerChain<BinaryPredictionTransformer<...>>`.\r\n\r\nIt's also possible to nest the pipeline. Perhaps you accidentally put an errant `)` here and there, and then you have this:\r\n```cs\r\n// Create the learning pipeline\r\nvar pipeline = mlContext.Transforms.Concatenate(\"NumericalFeatures\", Adult.NumericalFeatures)\r\n    .Append(mlContext.Transforms.Concatenate(\"CategoricalFeatures\", Adult.CategoricalFeatures))\r\n    .Append(mlContext.Transforms.Categorical.OneHotHashEncoding(\"CategoricalFeatures\",\r\n        invertHash: 2, outputKind: OneHotEncodingTransformer.OutputKind.Bag) // <-- missing a )\r\n    .Append(mlContext.Transforms.Concatenate(\"Features\", \"NumericalFeatures\", \"CategoricalFeatures\"))\r\n    .Append(mlContext.BinaryClassification.Trainers.LogisticRegression())); // <-- extra )\r\n```\r\n\r\nNow, `pipeline` is an `EstimatorChain<EstimatorChain<BinaryPredictionTransformer<...>>>` and `model` is a `TransformerChain<TransformerChain<BinaryPredictionTransformer<...>>>`.\r\n\r\nNow, if I compare the two (where `var predictor = model.LastTransformer` and `var nestedPredictor = nestedModel.LastTransformer.LastTransformer`), it's clear that the models and the transformed data are identical:\r\n```cs\r\n//True!\r\nAssert.Equal(predictor.Model.SubModel.Bias, nestedPredictor.Model.SubModel.Bias);\r\nint nFeatures = predictor.Model.SubModel.Weights.Count;\r\nfor (int i = 0; i < nFeatures; i++ )\r\n    //True!\r\n    Assert.Equal(predictor.Model.SubModel.Weights[i], nestedPredictor.Model.SubModel.Weights[i]); \r\n\r\nvar transformedRows = mlContext.Data.CreateEnumerable<BinaryPrediction>(transformedData, false).ToArray();\r\nvar nestedTransformedRows = mlContext.Data.CreateEnumerable<BinaryPrediction>(nestedTransformedData, false).ToArray();\r\nfor (int i = 0; i < transformedRows.Length; i++)\r\n    //True!\r\n    Assert.Equal(transformedRows[i].Score, nestedTransformedRows[i].Score); \r\n```","Url":"https://github.com/dotnet/machinelearning/issues/2820","RelatedDescription":"Open issue \"Chains of Chains\" (#2820)"},{"Id":"416308990","IsPullRequest":false,"CreatedAt":"2019-03-01T22:44:13","Actor":"zeahmed","Number":"2818","RawContent":null,"Title":"Create samples for NaiveBayes trainer.","State":"open","Body":"The samples are missing for NaiveBayes trainer.","Url":"https://github.com/dotnet/machinelearning/issues/2818","RelatedDescription":"Open issue \"Create samples for NaiveBayes trainer.\" (#2818)"},{"Id":"416247510","IsPullRequest":false,"CreatedAt":"2019-03-01T19:31:18","Actor":"rogancarr","Number":"2817","RawContent":null,"Title":"Create functional tests for all V1 Introspective Training scenarios","State":"open","Body":"As laid out in #2498 , we need scenarios to cover the Introspective Training functionality we want fully supported in V1.\r\n\r\n* I can take an existing model file and inspect what transformers were included in the pipeline\t \t \t\r\n* I can inspect the coefficients (weights and bias) of a linear model without much work. Easy to find via auto-complete.\t \t\t \r\n* I can inspect the normalization coefficients of a normalizer in my pipeline without much work. Easy to find via auto-complete.\t \t \t \r\n* I can inspect the trees of a boosted decision tree model without much work. Easy to find via auto-complete.\t \t \t \r\n* I can inspect the topics after training an LDA transform. Easy to find via auto-complete.\t \t \t \r\n* I can inspect a categorical transform and see which feature values map to which key values. Easy to find via auto-complete.\t \t \t \r\n* P1: I can access the GAM feature histograms through APIs","Url":"https://github.com/dotnet/machinelearning/issues/2817","RelatedDescription":"Open issue \"Create functional tests for all V1 Introspective Training scenarios\" (#2817)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-03-05T05:30:34.9190661Z","RunDurationInMilliseconds":588}