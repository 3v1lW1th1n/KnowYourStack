{"Data":{"GitHub":{"Issues":[{"Id":"470710437","IsPullRequest":false,"CreatedAt":"2019-07-20T20:12:59","Actor":"famschopman","Number":"4029","RawContent":null,"Title":"AutoML API model incompatible with AutoML CLI?","State":"open","Body":"When I train and save a model with the ModelBuilder from Visual Studio, and inspect the model that is loaded to predict I get a TrainSchema with all columns, and the last column is the Features column.\r\n\r\nWhen I train and save a model with the AutoML API, it received an exception where it tries to find a SamplingKeyColumn. After inspection AutoML has saved the model with an additional column just before the Features column. This is different compared to the ModelBuilder behavior.\r\n\r\nSo I have to extend me model with the following lines to make sure I can run a prediction (I have 34 columns in my dataset).\r\n\r\n            [ColumnName(\"SamplingKeyColumn\"), LoadColumn(35)]\r\n            public float SamplingKeyColumn { get; set; }\r\n\r\nIs this expected behavior? It feels very inconsistent and quite confusing behavior. I couldn't find any documentation about this either.","Url":"https://github.com/dotnet/machinelearning/issues/4029","RelatedDescription":"Open issue \"AutoML API model incompatible with AutoML CLI?\" (#4029)"},{"Id":"470509330","IsPullRequest":false,"CreatedAt":"2019-07-20T14:43:25","Actor":"famschopman","Number":"4026","RawContent":null,"Title":"Getting bestfit hyper-parameters from AutoML","State":"closed","Body":"When using the model builder, the generated code contains interesting hyper-parameters. \r\n\r\nIs there a way to get these when using the AutoML API? I debugged the bestfit but couldnt find anything that resembles this.\r\n\r\nExample:\r\nvar trainer = mlContext.BinaryClassification.Trainers.SdcaLogisticRegression(new SdcaLogisticRegressionBinaryTrainer.Options() { **L2Regularization = 0.0001f, L1Regularization = 1f, ConvergenceTolerance = 0.2f, MaximumNumberOfIterations = 20, Shuffle = false, BiasLearningRate = 0f**, LabelColumnName = \"Attrition\", FeatureColumnName = \"Features\" });\r\n            var trainingPipeline = dataProcessPipeline.Append(trainer);\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4026","RelatedDescription":"Closed issue \"Getting bestfit hyper-parameters from AutoML\" (#4026)"},{"Id":"470680797","IsPullRequest":false,"CreatedAt":"2019-07-20T14:32:38","Actor":"nick-ganju","Number":"4028","RawContent":null,"Title":"Upsampling with IDataView","State":"open","Body":"Upsampling is a common practice for unbalanced data sets. The best practice for upsampling is to upsample the training set AFTER splitting into train and test sets, because if you duplicate rows before splitting, you'll get identical rows in the train and test set.  This is data leakage from the train to the test set, and if you overfit the training set it will be partially hidden by the identical rows in the test set pumping up the scores.\r\n\r\nThere is no Upsampling transformer, so far as I can find.  If I use the built-in TrainTestSplit method, I get two IDataViews back.  Now I can't upsample by adding/duplicating rows in the training set because IDataView is immutable.\r\n\r\nSo basically I have to load from text file myself, because if I use TextLoader I get an IDataView which puts me in the same predicament.  Next, I have to reproduce the functionality in TrainTestSplit(), in order to split my original dataset myself into train and test split.  Next, I have to upsample the training set myself, and then remember to separately run both the train and test split through the regular data pipeline I've created.  \r\n\r\nI can't see how the CustomTransform can be used to Upsample.  How would you suggest is the correct way to upsample a data set with ML.Net?  Like a nice, convenient way.  Not an arduous solution like I mentioned above, which will just drive people back to python instead.","Url":"https://github.com/dotnet/machinelearning/issues/4028","RelatedDescription":"Open issue \"Upsampling with IDataView\" (#4028)"},{"Id":"470679264","IsPullRequest":false,"CreatedAt":"2019-07-20T14:17:33","Actor":"jonathan-taina","Number":"4027","RawContent":null,"Title":"InvalidProtocolBufferException: Protocol message was too large.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 Pro v1803, build 17134.885\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.2.108\r\n\r\n### Issue\r\n\r\n- **What did you do?** Attempted to load an ONNX model\r\n- **What happened?** It failed: InvalidProtocolBufferException: Protocol message was too large. May be malicious. Use CodedInputStream.SetSizeLimit() to increase the size limit.\r\n- **What did you expect?** For the model to load successfully.\r\n\r\n### Source code / logs\r\n\r\nThe model is a pre-trained resnet34 trained on the MNIST handwritten digits database. The model was exported from pytorch.\r\n\r\nI assume the .onnx file is valid, as I can view it without any issues at https://lutzroeder.github.io/netron/\r\n\r\nI'd attach the file itself but github won't allow me, the filesize is 83.3MB; 73MB zipped.\r\n\r\n`var modelPath = $\"{Directory.GetCurrentDirectory()}/Models/mnist_digits.onnx\";`\r\n`var pipeline = mlContext.Transforms.LoadImages(\"image\", \"\", nameof(ImageNetData.ImagePath));`\r\n`pipeline.Append(mlContext.Transforms.ResizeImages(\"image\", ImageNetSettings.imageWidth, ImageNetSettings.imageHeight, \"image\"));`\r\n`pipeline.Append(mlContext.Transforms.ExtractPixels(\"image\"));`\r\n`pipeline.Append(mlContext.Transforms.ApplyOnnxModel(modelPath));`\r\n\r\nException occurs on the final line above.\r\n\r\n### Stacktrace\r\n\r\nInvalidProtocolBufferException: Protocol message was too large. May be malicious. Use CodedInputStream.SetSizeLimit() to increase the size limit.\r\nGoogle.Protobuf.CodedInputStream.RefillBuffer(bool mustSucceed)\r\nGoogle.Protobuf.CodedInputStream.get_IsAtEnd()\r\nGoogle.Protobuf.CodedInputStream.ReadTag()\r\nGoogle.Protobuf.CodedInputStream.PeekTag()\r\nGoogle.Protobuf.Collections.RepeatedField<T>.AddEntriesFrom(CodedInputStream input, FieldCodec<T> codec)\r\nMicrosoft.ML.Model.OnnxConverter.OnnxCSharpToProtoWrapper+GraphProto.MergeFrom(CodedInputStream input)\r\nGoogle.Protobuf.CodedInputStream.ReadMessage(IMessage builder)\r\nMicrosoft.ML.Model.OnnxConverter.OnnxCSharpToProtoWrapper+ModelProto.MergeFrom(CodedInputStream input)\r\nGoogle.Protobuf.MessageExtensions.MergeFrom(IMessage message, Stream input)\r\nGoogle.Protobuf.MessageParser<T>.ParseFrom(Stream input)\r\nMicrosoft.ML.Transforms.Onnx.OnnxModel..ctor(string modelFile, Nullable<int> gpuDeviceId, bool fallbackToCpu, bool ownModelFile)\r\nMicrosoft.ML.Transforms.Onnx.OnnxTransformer..ctor(IHostEnvironment env, Options options, byte[] modelBytes)\r\nMicrosoft.ML.Transforms.Onnx.OnnxScoringEstimator..ctor(IHostEnvironment env, string modelFile, Nullable<int> gpuDeviceId, bool fallbackToCpu)\r\nMicrosoft.ML.OnnxCatalog.ApplyOnnxModel(TransformsCatalog catalog, string modelFile, Nullable<int> gpuDeviceId, bool fallbackToCpu)\r\nONNX_backend.Services.OnnxService.LoadHandwrittenDigitsModel(MLContext mlContext) in OnnxService.cs\r\n+\r\n            pipeline.Append(mlContext.Transforms.ApplyOnnxModel(modelPath));\r\nONNX_backend.Services.OnnxService.Start() in OnnxService.cs\r\n+\r\n            var model = LoadHandwrittenDigitsModel(_mlContext);\r\nONNX_backend.Controllers.ValuesController.Get() in ValuesController.cs\r\n+\r\n            _onnxService.Start();\r\nlambda_method(Closure , object , object[] )\r\nMicrosoft.Extensions.Internal.ObjectMethodExecutor.Execute(object target, object[] parameters)\r\nMicrosoft.AspNetCore.Mvc.Internal.ActionMethodExecutor+SyncObjectResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, object controller, object[] arguments)\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeActionMethodAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeNextActionFilterAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.InvokeInnerFilterAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\nMicrosoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\nMicrosoft.AspNetCore.Routing.EndpointMiddleware.Invoke(HttpContext httpContext)\r\nMicrosoft.AspNetCore.Routing.EndpointRoutingMiddleware.Invoke(HttpContext httpContext)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)","Url":"https://github.com/dotnet/machinelearning/issues/4027","RelatedDescription":"Open issue \"InvalidProtocolBufferException: Protocol message was too large.\" (#4027)"},{"Id":"470507435","IsPullRequest":false,"CreatedAt":"2019-07-19T19:42:19","Actor":"famschopman","Number":"4025","RawContent":null,"Title":"Getting algorithm","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4025","RelatedDescription":"Closed issue \"Getting algorithm\" (#4025)"},{"Id":"470383482","IsPullRequest":false,"CreatedAt":"2019-07-19T15:27:34","Actor":"colbylwilliams","Number":"4024","RawContent":null,"Title":"Anomaly Detection Task output should include PredictedLabel","State":"open","Body":"\r\nThe [Inputs and Output Columns](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.randomizedpcatrainer?view=ml-dotnet#input-and-output-columns) section should have [`PredictedLabel` in addition to `Score`](https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.PCA/PcaTrainer.cs#L381-L385).  Note: There is an [issue](https://github.com/dotnet/machinelearning/issues/3990) with the current release of ML.NET where `PredictedLabel` always evaluates to `true`.\r\n\r\nAdditionally, the description for `Score` reads:\r\n> The non-negative, unbounded score that was calculated by the anomaly detection model.\r\n\r\nThis does not indicate how the value returned by the model for `Score` should be interpreted.  Should higher scores be interpreted as anomalies, or scores closer to zero?\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 8b318bcc-48ff-eb63-9952-e811a283eb90\r\n* Version Independent ID: 1810a47c-da4c-8a3a-f5a0-61b31069f083\r\n* Content: [RandomizedPcaTrainer Class (Microsoft.ML.Trainers)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.randomizedpcatrainer?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML.Trainers/RandomizedPcaTrainer.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Trainers/RandomizedPcaTrainer.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @sfilipi\r\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4024","RelatedDescription":"Open issue \"Anomaly Detection Task output should include PredictedLabel\" (#4024)"},{"Id":"470369216","IsPullRequest":false,"CreatedAt":"2019-07-19T14:57:04","Actor":"nick-ganju","Number":"4023","RawContent":null,"Title":"Interpreting a pipeline's resulting Schema and/or .Preview()","State":"open","Body":"\r\nGoing over this article to be able to inspect data after the preprocessing pipeline:\r\nhttps://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/inspect-intermediate-data-ml-net\r\n\r\nComing from python where you have a dataframe and you can just do dataframe.show(), this is quite an ordeal.  The CreateEnumerable() is pretty impractical because your original POCO won't fit the schema any more if you've done one-hot-encoding etc.  The one-hot-encoding creates multiple columns with the same name, how can that ever map back to a POCO? \r\n\r\nAnd there's a mandatory Features column at the end of the row, that repeats all the values in the row.  And if you then NormalizeMinMax the Features column, you get ANOTHER Features column with the same name.  Then you're trying to look at that in a Preview() and it's very confusing to see what's going on. \r\n\r\nThen there's DataViewRowCursor, where you need to specify reflection-style getters for each column.  So each time you tweak the pipeline you have to rewrite the code that lets you see the results of your pipeline?  It defeats the ability to quickly tweak and look, tweak and look, in the way that python does it so simply with dataframe.show().\r\n\r\nSo assuming this is how we have to inspect our data, I've got two questions:\r\n\r\n1) When a Transform (like OneHotEncoding) creates multiple columns with the same name, what's going on?  Is the training algorithm going to look at all of them?  Is the IsHidden how it's deciding what to use?  If so, can there be some official documentation on how all of this works?\r\n\r\n2) Why is it our responsibility to create a Features column at all?  Can't the algorithms just run on the IDataView we created, like in python?  It seems like a complicated and unnecessary step.  Also does it seem like good OO design to have a Features field at the end of a row that repeats all the values in said row? If you need to make this Features vector for performance reasons, why not create it once Fit() is called, keep it out of our data table, and hide this implementation detail from the user?\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4023","RelatedDescription":"Open issue \"Interpreting a pipeline's resulting Schema and/or .Preview()\" (#4023)"},{"Id":"470128230","IsPullRequest":true,"CreatedAt":"2019-07-19T04:11:33","Actor":"PranovD","Number":"4022","RawContent":null,"Title":"Dnn","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4022","RelatedDescription":"Open PR \"Dnn\" (#4022)"},{"Id":"469957216","IsPullRequest":true,"CreatedAt":"2019-07-18T23:14:13","Actor":"CESARDELATORRE","Number":"4021","RawContent":null,"Title":"DatabaseLoader specs: Update on NuGet and Class library design","State":"closed","Body":"Minor update so we are more explicit about the NuGet and Class library design for this feature.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4021","RelatedDescription":"Closed or merged PR \"DatabaseLoader specs: Update on NuGet and Class library design\" (#4021)"},{"Id":"469934177","IsPullRequest":false,"CreatedAt":"2019-07-18T18:53:41","Actor":"cookt","Number":"4020","RawContent":null,"Title":"What is TModel?","State":"open","Body":"Given that the examples do not use type parameters, it would extremely helpful to include documentation of TModel especially for creating a function. \n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 5ec45442-8e5f-a544-cc9a-58483a383513\n* Version Independent ID: 040169f9-d169-cbbd-099e-f04a7a5a6b3f\n* Content: [PermutationFeatureImportanceExtensions.PermutationFeatureImportance Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.permutationfeatureimportanceextensions.permutationfeatureimportance?view=ml-dotnet#Microsoft_ML_PermutationFeatureImportanceExtensions_PermutationFeatureImportance__1_Microsoft_ML_MulticlassClassificationCatalog_Microsoft_ML_ISingleFeaturePredictionTransformer___0__Microsoft_ML_IDataView_System_String_System_Boolean_System_Nullable_System_Int32__System_Int32_)\n* Content Source: [dotnet/xml/Microsoft.ML/PermutationFeatureImportanceExtensions.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/PermutationFeatureImportanceExtensions.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4020","RelatedDescription":"Open issue \"What is TModel?\" (#4020)"},{"Id":"469646332","IsPullRequest":false,"CreatedAt":"2019-07-18T08:50:18","Actor":"yaeldekel","Number":"4019","RawContent":null,"Title":"Add a stratified trainer to ML.NET","State":"open","Body":"Add a trainer that splits the data according to a specified categorical column, and trains a model for each category, as well as a \"default\" model on the whole dataset. At scoring time, the model corresponding to the example's category is used, unless the category was not present in the training set, in which case the default model is used.","Url":"https://github.com/dotnet/machinelearning/issues/4019","RelatedDescription":"Open issue \"Add a stratified trainer to ML.NET\" (#4019)"},{"Id":"469642403","IsPullRequest":false,"CreatedAt":"2019-07-18T08:41:49","Actor":"yaeldekel","Number":"4018","RawContent":null,"Title":"Add left join transformer","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/4018","RelatedDescription":"Open issue \"Add left join transformer\" (#4018)"},{"Id":"469640840","IsPullRequest":false,"CreatedAt":"2019-07-18T08:38:18","Actor":"yaeldekel","Number":"4017","RawContent":null,"Title":"Integrate with Vowpal Wabbit","State":"open","Body":"https://github.com/VowpalWabbit/vowpal_wabbit\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4017","RelatedDescription":"Open issue \"Integrate with Vowpal Wabbit\" (#4017)"},{"Id":"469637175","IsPullRequest":false,"CreatedAt":"2019-07-18T08:29:57","Actor":"yaeldekel","Number":"4016","RawContent":null,"Title":"Add a \"learning with counts\" transformer","State":"open","Body":"This transformation is a simple way to handle categorical features, and is explained here: https://blogs.technet.microsoft.com/machinelearning/2015/02/17/big-learning-made-easy-with-counts/\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4016","RelatedDescription":"Open issue \"Add a \"learning with counts\" transformer\" (#4016)"},{"Id":"469623733","IsPullRequest":false,"CreatedAt":"2019-07-18T07:58:11","Actor":"yaeldekel","Number":"4015","RawContent":null,"Title":"Add an expression transformer","State":"open","Body":"The expression transformer takes the expression in the form of text using syntax of a simple expression language, and performs the operation defined in the expression on the input columns in each row of the data. The transformer supports having a vector input column, in which case it applies the expression to each slot of the vector independently. The expression language is extendable to user defined operations. ","Url":"https://github.com/dotnet/machinelearning/issues/4015","RelatedDescription":"Open issue \"Add an expression transformer\" (#4015)"},{"Id":"469619889","IsPullRequest":false,"CreatedAt":"2019-07-18T07:48:33","Actor":"yaeldekel","Number":"4014","RawContent":null,"Title":"Add a loader/saver for SVMLight file format","State":"open","Body":"Many datasets are saved in the SVMLight format, describe in this page: http://svmlight.joachims.org/.\r\n\r\nIt would be useful for ML.NET to support loading data directly from files in this format.","Url":"https://github.com/dotnet/machinelearning/issues/4014","RelatedDescription":"Open issue \"Add a loader/saver for SVMLight file format\" (#4014)"},{"Id":"469456502","IsPullRequest":true,"CreatedAt":"2019-07-17T21:31:11","Actor":"michaelgsharp","Number":"4013","RawContent":null,"Title":"OneVersusAllModelParameters Strongly Typed","State":"open","Body":"Fixes #2467\r\n\r\nWe used to remove all Type information when we constructed our `OneVersusAllModelParameters`. This prevented the users from access the inner model without run-time casting.\r\n\r\nThis PR makes the `OneVersusAllModelParameters` strongly typed, and adds a strongly typed version of the `OneVersusAllTrainer` as it uses the `OneVersusAllModelParameters`. This change is no longer a breaking change to the current public api. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/4013","RelatedDescription":"Open PR \"OneVersusAllModelParameters Strongly Typed\" (#4013)"},{"Id":"469254231","IsPullRequest":true,"CreatedAt":"2019-07-17T14:37:07","Actor":"SnakyBeaky","Number":"4012","RawContent":null,"Title":"Minor typo fix in regularization documentation","State":"open","Body":"Minor typo fix `empricial` -> `empirical`\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4012","RelatedDescription":"Open PR \"Minor typo fix in regularization documentation\" (#4012)"},{"Id":"469165064","IsPullRequest":false,"CreatedAt":"2019-07-17T12:30:11","Actor":"tiborsekera","Number":"4011","RawContent":null,"Title":"Score column contains square of Euclidean distance?","State":"open","Body":"The column \"Score\" appears to contain square of Euclidean distance. Is that correct?\r\n\r\nE.g., for centroid coordinates [0,0,0] and a prediction coordinate [2,0,0], the \"Score\" would be 4, and NOT 2.\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: d93c6f58-e726-7734-06ed-c3b8f87c6a6e\r\n* Version Independent ID: bcd37e78-d924-c5c2-f5d5-745a8d586330\r\n* Content: [KMeansTrainer Class (Microsoft.ML.Trainers)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.kmeanstrainer?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML.Trainers/KMeansTrainer.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Trainers/KMeansTrainer.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @sfilipi\r\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4011","RelatedDescription":"Open issue \"Score column contains square of Euclidean distance?\" (#4011)"},{"Id":"468918945","IsPullRequest":true,"CreatedAt":"2019-07-16T23:41:58","Actor":"wangyems","Number":"4010","RawContent":null,"Title":"fixes #3992","State":"open","Body":"fixes #3992, when inputColumnNames is not provided, it is set to new[] { outputColumnName }\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4010","RelatedDescription":"Open PR \"fixes #3992\" (#4010)"},{"Id":"468891021","IsPullRequest":true,"CreatedAt":"2019-07-16T22:05:04","Actor":"artidoro","Number":"4009","RawContent":null,"Title":"Farewell to the Static API","State":"open","Body":"Fixes #3952.\r\n\r\nIn this PR I 1. remove the static API code and 2. migrate the tests to the C# API (dynamic API) and 3. stop producing the static pipe nugets.\r\n\r\nThe commits are organized logically, which should simplify the review process.","Url":"https://github.com/dotnet/machinelearning/pull/4009","RelatedDescription":"Open PR \"Farewell to the Static API\" (#4009)"},{"Id":"468421139","IsPullRequest":false,"CreatedAt":"2019-07-16T02:55:06","Actor":"Dmitry-A","Number":"4008","RawContent":null,"Title":"[AutoML] bring AutoML API code into master from feature branch","State":"open","Body":"We have been working out of a features/automl branch.  CLI is going to stay there for now but we want to bring API nuget into master.","Url":"https://github.com/dotnet/machinelearning/issues/4008","RelatedDescription":"Open issue \"[AutoML] bring AutoML API code into master from feature branch\" (#4008)"},{"Id":"468218125","IsPullRequest":true,"CreatedAt":"2019-07-16T00:01:31","Actor":"wangyems","Number":"4002","RawContent":null,"Title":"fixes #3992,  when inputColumnNames is not provided, it is set to new[] { outputColumnName }. and part of #3994(making SlotDroppingTransfomer exposed as public)","State":"closed","Body":"fixes #3992 and part of #3994(making SlotDroppingTransfomer exposed as public)\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4002","RelatedDescription":"Closed or merged PR \"fixes #3992,  when inputColumnNames is not provided, it is set to new[] { outputColumnName }. and part of #3994(making SlotDroppingTransfomer exposed as public)\" (#4002)"},{"Id":"468346816","IsPullRequest":true,"CreatedAt":"2019-07-15T21:36:19","Actor":"RadicalRayan","Number":"4007","RawContent":null,"Title":"Stop LightGbm Warning for Default Metric Input [Issue #3965 Fix]","State":"open","Body":"Issue #3965 reported that a warning, \"LightGBM] [Warning] Unknown parameter metric=\" is produced when the default metric is used. This warning came after this [commit](https://github.com/dotnet/machinelearning/pull/3859) which aimed to provide a consistent user experience from an ML.NET implementation of LightGbm with standalone LightGbm. If a user were to set `EvaluationMetric = EvaluateMetricType.Default`, they might expect that this would set the EvaluationMetric to \"\" and assigned the metric based on the objective as shown in the LightGbm docs. When the correction was made, this warning began to appear when the metric parameter was set to \"\". which was also being produced in LightGbm alone. The only way to prevent this error would be to not assign a parameter to the metric at all.\r\n\r\nThis warning has not appeared in previous versions of ML.NET and can be prevent by assigning the correct metric based on the objective as was previously done.\r\n\r\nTo prevent this warning, the changes from this [commit](https://github.com/dotnet/machinelearning/pull/3859) were reverted.","Url":"https://github.com/dotnet/machinelearning/pull/4007","RelatedDescription":"Open PR \"Stop LightGbm Warning for Default Metric Input [Issue #3965 Fix]\" (#4007)"},{"Id":"468340302","IsPullRequest":true,"CreatedAt":"2019-07-15T21:18:44","Actor":"PranovD","Number":"4006","RawContent":null,"Title":"Cleanuptodate","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4006","RelatedDescription":"Closed or merged PR \"Cleanuptodate\" (#4006)"},{"Id":"468318774","IsPullRequest":false,"CreatedAt":"2019-07-15T20:25:11","Actor":"nicolehaugen","Number":"4005","RawContent":null,"Title":"Provide a way to append\\concatentate multiple IDataViews","State":"open","Body":"### System information\r\n\r\n- ML.NET - 1.2.0: \r\n\r\n### Issue\r\n\r\nThere should be a way to append or concatenate multiple IDataViews together.\r\n\r\nHere's the scenario:\r\nThe [new ranking sample](https://github.com/dotnet/machinelearning-samples/pull/549) needs the ability to train the model using two datasets that are each loaded from a separate text file and have the same schema - specifically, there is a (1) Training dataset and (2) Validation dataset, that need to be combined.  For example, refer to step #3 in the steps outlined below which the sample is based on.\r\n\r\nHere's the steps shown in the sample - generally, the pattern to train, validate, and test a model includes the following steps:\r\n1. The model is trained on the **training** dataset.  The model's metrics are then evaluated using the **validation** dataset.\r\n2. Step #1 is repeated by retraining and reevaluating the model until the desired metrics are achieved.  The outcome of this step is a pipeline that applies the necessary data transformations and trainer.\r\n3. The pipeline is used to train on the combined **training** + **validation** datasets.  The model's metrics are then evaluated on the **testing** dataset (exactly once) -- this is the final set of metrics used to measure the model's quality.\r\n4. The final step is to retrain the pipeline on **all** of the combined **training** + **validation** +  **testing** datasets.  This model is then ready to be deployed into production.\r\n\r\nToday to achieve this, the sample has to first load the data from a text file, then create an enumerable so that the datasets can be concatenated - this process would be greatly simplified if you could append/concatenate two IDataViews together:\r\n\r\n```\r\n\r\n//Load training data (has a header)\r\nIDataView trainData = mlContext.Data.LoadFromTextFile<SearchResultData>(TrainDatasetPath, separatorChar: '\\t', hasHeader: true);\r\n\r\n//Load validation data (has a header)\r\nIDataView validationData = mlContext.Data.LoadFromTextFile<SearchResultData>(ValidationDatasetPath, separatorChar: '\\t', hasHeader: false);\r\n\r\n// Combine the training and validation datasets.\r\nvar validationDataEnum = mlContext.Data.CreateEnumerable<SearchResultData>(validationData, false);\r\nvar trainDataEnum = mlContext.Data.CreateEnumerable<SearchResultData>(trainData, false);\r\nvar trainValidationDataEnum = validationDataEnum.Concat<SearchResultData>(trainDataEnum);\r\nIDataView trainValidationData = mlContext.Data.LoadFromEnumerable<SearchResultData>(trainValidationDataEnum);\r\n```\r\n\r\nNOTE: I also considered creating a text loader to load multiple text files (as described [here])(https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.data.textloader.load?view=ml-dotnet#Microsoft_ML_Data_TextLoader_Load_Microsoft_ML_Data_IMultiStreamSource_); however, one of the data files included a header while the other didn't.  It looks like to create a TextLoader for multiple files, that the file headers must be consistent across files.\r\n\r\n### Source code / logs\r\n\r\nNote that there is a method today that provides the ability to append rows - we should consider exposing this publicly:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/70ef7ecd43b031b481a4047ea361da5e2f360336/src/Microsoft.ML.Data/DataView/AppendRowsDataView.cs#L23-L31\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4005","RelatedDescription":"Open issue \"Provide a way to append\\concatentate multiple IDataViews\" (#4005)"},{"Id":"468266314","IsPullRequest":false,"CreatedAt":"2019-07-15T18:15:28","Actor":"pieths","Number":"4004","RawContent":null,"Title":"TypeConvertingTransformer requires \"Experimental\" onnx version.","State":"open","Body":"When exporting a NimbusML pipeline which contains a predictor to ONNX, a `TypeConvertingTransformer` is sometimes inserted in the pipeline. The `TypeConvertingTransformer` currently requires the `Experimental` ONNX flag to be set in order for it to be converted to ONNX (see line 390 in `src\\Microsoft.ML.Data\\Transforms\\TypeConverting.cs`). Can this be updated to no longer require the `Experimental` flag?","Url":"https://github.com/dotnet/machinelearning/issues/4004","RelatedDescription":"Open issue \"TypeConvertingTransformer requires \"Experimental\" onnx version.\" (#4004)"},{"Id":"468254487","IsPullRequest":false,"CreatedAt":"2019-07-15T17:47:24","Actor":"baruchiro","Number":"4003","RawContent":null,"Title":"Create from enumerable after registering new type","State":"open","Body":"I think I'm missing something.\r\n\r\nWe have the Type System in `DataViewTypeManager`, and we can register a new type to map it to one of the system types. But even I register a new type to the system, when I try to load from enumerable I getting exception because the next `if`:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/02a857a7646188fec2d1cba5e187a6c9d0838e23/src/Microsoft.ML.Data/DataView/InternalSchemaDefinition.cs#L194-L195\r\n\r\nEven if I add a new type, the first condition `!itemType.TryGetDataKind(out _)` will return `!false` = `true` because my type will never be in the next code:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/c3bdaaa2a29f88a85dd91cde3fbb805001011903/src/Microsoft.ML.Core/Data/DataKind.cs#L293-L337","Url":"https://github.com/dotnet/machinelearning/issues/4003","RelatedDescription":"Open issue \"Create from enumerable after registering new type\" (#4003)"},{"Id":"468131540","IsPullRequest":true,"CreatedAt":"2019-07-15T13:35:28","Actor":"SnakyBeaky","Number":"4001","RawContent":null,"Title":"Fixing #4000 documentation and code issues","State":"open","Body":"Fixes the documentation/code snippet issues in #4000 \r\n\r\n- Changed `dv` to `dataView` for a more readable variable and aligned style with other variables in snippet.\r\n- Fixed code not using `IrisVectorData` output class\r\n- Fixed code not calling `CreateEnumerable<T>()` from `.Data`\r\n- Fixed some texts referencing variable `arr` (which existed in some previous version of this documentation file, but not anymore\r\n- Fixed minor indentation style in array initialization\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4001","RelatedDescription":"Open PR \"Fixing #4000 documentation and code issues\" (#4001)"},{"Id":"468131415","IsPullRequest":false,"CreatedAt":"2019-07-15T13:35:15","Actor":"SnakyBeaky","Number":"4000","RawContent":null,"Title":"Invalid code and missing variables in SchemaComprehension docs","State":"open","Body":"The documentation for https://github.com/dotnet/machinelearning/blob/master/docs/code/SchemaComprehension.md has invalid code (I'm assuming it worked in previous versions of the framework) and the texts reference variables that don't exist anymore in the code snippets (removed in previous commits).\r\n\r\nWas partially fixed in #2054 and #2039, but still missing some minor things.","Url":"https://github.com/dotnet/machinelearning/issues/4000","RelatedDescription":"Open issue \"Invalid code and missing variables in SchemaComprehension docs\" (#4000)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-07-21T05:30:41.6638863Z","RunDurationInMilliseconds":541}